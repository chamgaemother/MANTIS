[
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "methodName": "withClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings withClassIntrospector(com.fasterxml.jackson.databind.introspect.ClassIntrospector)",
    "visibility": "public",
    "body": "{\r\n    if (_classIntrospector \u003d\u003d ci) {\r\n        return this;\r\n    }\r\n    return new BaseSettings(ci, _annotationIntrospector, _propertyNamingStrategy, _enumNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64, _typeValidator, _accessorNaming, _cacheProvider);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BaseSettings\n  ClassIntrospector\n  $r2 \u003d ClassIntrospector _classIntrospector\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d BaseSettings\n  $r16 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r15 \u003d PropertyNamingStrategy _propertyNamingStrategy\u003e\n  $r14 \u003d EnumNamingStrategy _enumNamingStrategy\u003e\n  $r13 \u003d TypeFactory _typeFactory\u003e\n  $r12 \u003d TypeResolverBuilder _typeResolverBuilder\u003e\n  $r11 \u003d DateFormat _dateFormat\u003e\n  $r10 \u003d HandlerInstantiator _handlerInstantiator\u003e\n  $r9 \u003d Locale _locale\u003e\n  $r8 \u003d TimeZone _timeZone\u003e\n  $r7 \u003d Base64Variant _defaultBase64\u003e\n  $r6 \u003d PolymorphicTypeValidator _typeValidator\u003e\n  $r5 \u003d AccessorNamingStrategy$Provider _accessorNaming\u003e\n  $r4 \u003d CacheProvider _cacheProvider\u003e\n  new BaseSettings(r1, $r16, $r15, $r14, $r13, $r12, $r11, $r10, $r9, $r8, $r7, $r6, $r5, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "methodName": "withAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings withAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "visibility": "public",
    "body": "{\r\n    if (_annotationIntrospector \u003d\u003d ai) {\r\n        return this;\r\n    }\r\n    return new BaseSettings(_classIntrospector, ai, _propertyNamingStrategy, _enumNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64, _typeValidator, _accessorNaming, _cacheProvider);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BaseSettings\n  AnnotationIntrospector\n  $r2 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d BaseSettings\n  $r16 \u003d ClassIntrospector _classIntrospector\u003e\n  $r15 \u003d PropertyNamingStrategy _propertyNamingStrategy\u003e\n  $r14 \u003d EnumNamingStrategy _enumNamingStrategy\u003e\n  $r13 \u003d TypeFactory _typeFactory\u003e\n  $r12 \u003d TypeResolverBuilder _typeResolverBuilder\u003e\n  $r11 \u003d DateFormat _dateFormat\u003e\n  $r10 \u003d HandlerInstantiator _handlerInstantiator\u003e\n  $r9 \u003d Locale _locale\u003e\n  $r8 \u003d TimeZone _timeZone\u003e\n  $r7 \u003d Base64Variant _defaultBase64\u003e\n  $r6 \u003d PolymorphicTypeValidator _typeValidator\u003e\n  $r5 \u003d AccessorNamingStrategy$Provider _accessorNaming\u003e\n  $r4 \u003d CacheProvider _cacheProvider\u003e\n  new BaseSettings($r16, r1, $r15, $r14, $r13, $r12, $r11, $r10, $r9, $r8, $r7, $r6, $r5, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "methodName": "withPropertyNamingStrategy",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings withPropertyNamingStrategy(com.fasterxml.jackson.databind.PropertyNamingStrategy)",
    "visibility": "public",
    "body": "{\r\n    if (_propertyNamingStrategy \u003d\u003d pns) {\r\n        return this;\r\n    }\r\n    return new BaseSettings(_classIntrospector, _annotationIntrospector, pns, _enumNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64, _typeValidator, _accessorNaming, _cacheProvider);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BaseSettings\n  PropertyNamingStrategy\n  $r2 \u003d PropertyNamingStrategy _propertyNamingStrategy\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d BaseSettings\n  $r16 \u003d ClassIntrospector _classIntrospector\u003e\n  $r15 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r14 \u003d EnumNamingStrategy _enumNamingStrategy\u003e\n  $r13 \u003d TypeFactory _typeFactory\u003e\n  $r12 \u003d TypeResolverBuilder _typeResolverBuilder\u003e\n  $r11 \u003d DateFormat _dateFormat\u003e\n  $r10 \u003d HandlerInstantiator _handlerInstantiator\u003e\n  $r9 \u003d Locale _locale\u003e\n  $r8 \u003d TimeZone _timeZone\u003e\n  $r7 \u003d Base64Variant _defaultBase64\u003e\n  $r6 \u003d PolymorphicTypeValidator _typeValidator\u003e\n  $r5 \u003d AccessorNamingStrategy$Provider _accessorNaming\u003e\n  $r4 \u003d CacheProvider _cacheProvider\u003e\n  new BaseSettings($r16, $r15, r1, $r14, $r13, $r12, $r11, $r10, $r9, $r8, $r7, $r6, $r5, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "methodName": "withEnumNamingStrategy",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings withEnumNamingStrategy(com.fasterxml.jackson.databind.EnumNamingStrategy)",
    "visibility": "public",
    "body": "{\r\n    if (_enumNamingStrategy \u003d\u003d ens) {\r\n        return this;\r\n    }\r\n    return new BaseSettings(_classIntrospector, _annotationIntrospector, _propertyNamingStrategy, ens, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64, _typeValidator, _accessorNaming, _cacheProvider);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BaseSettings\n  EnumNamingStrategy\n  $r2 \u003d EnumNamingStrategy _enumNamingStrategy\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d BaseSettings\n  $r16 \u003d ClassIntrospector _classIntrospector\u003e\n  $r15 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r14 \u003d PropertyNamingStrategy _propertyNamingStrategy\u003e\n  $r13 \u003d TypeFactory _typeFactory\u003e\n  $r12 \u003d TypeResolverBuilder _typeResolverBuilder\u003e\n  $r11 \u003d DateFormat _dateFormat\u003e\n  $r10 \u003d HandlerInstantiator _handlerInstantiator\u003e\n  $r9 \u003d Locale _locale\u003e\n  $r8 \u003d TimeZone _timeZone\u003e\n  $r7 \u003d Base64Variant _defaultBase64\u003e\n  $r6 \u003d PolymorphicTypeValidator _typeValidator\u003e\n  $r5 \u003d AccessorNamingStrategy$Provider _accessorNaming\u003e\n  $r4 \u003d CacheProvider _cacheProvider\u003e\n  new BaseSettings($r16, $r15, $r14, r1, $r13, $r12, $r11, $r10, $r9, $r8, $r7, $r6, $r5, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "methodName": "withAccessorNaming",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings withAccessorNaming(com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy$Provider)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BaseSettings\n  AccessorNamingStrategy$Provider\n  $r2 \u003d AccessorNamingStrategy$Provider _accessorNaming\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d BaseSettings\n  $r16 \u003d ClassIntrospector _classIntrospector\u003e\n  $r15 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r14 \u003d PropertyNamingStrategy _propertyNamingStrategy\u003e\n  $r13 \u003d EnumNamingStrategy _enumNamingStrategy\u003e\n  $r12 \u003d TypeFactory _typeFactory\u003e\n  $r11 \u003d TypeResolverBuilder _typeResolverBuilder\u003e\n  $r10 \u003d DateFormat _dateFormat\u003e\n  $r9 \u003d HandlerInstantiator _handlerInstantiator\u003e\n  $r8 \u003d Locale _locale\u003e\n  $r7 \u003d TimeZone _timeZone\u003e\n  $r6 \u003d Base64Variant _defaultBase64\u003e\n  $r5 \u003d PolymorphicTypeValidator _typeValidator\u003e\n  $r4 \u003d CacheProvider _cacheProvider\u003e\n  new BaseSettings($r16, $r15, $r14, $r13, $r12, $r11, $r10, $r9, $r8, $r7, $r6, $r5, r1, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "methodName": "withTypeFactory",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings withTypeFactory(com.fasterxml.jackson.databind.type.TypeFactory)",
    "visibility": "public",
    "body": "{\r\n    if (_typeFactory \u003d\u003d tf) {\r\n        return this;\r\n    }\r\n    return new BaseSettings(_classIntrospector, _annotationIntrospector, _propertyNamingStrategy, _enumNamingStrategy, tf, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64, _typeValidator, _accessorNaming, _cacheProvider);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BaseSettings\n  TypeFactory\n  $r2 \u003d TypeFactory _typeFactory\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d BaseSettings\n  $r16 \u003d ClassIntrospector _classIntrospector\u003e\n  $r15 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r14 \u003d PropertyNamingStrategy _propertyNamingStrategy\u003e\n  $r13 \u003d EnumNamingStrategy _enumNamingStrategy\u003e\n  $r12 \u003d TypeResolverBuilder _typeResolverBuilder\u003e\n  $r11 \u003d DateFormat _dateFormat\u003e\n  $r10 \u003d HandlerInstantiator _handlerInstantiator\u003e\n  $r9 \u003d Locale _locale\u003e\n  $r8 \u003d TimeZone _timeZone\u003e\n  $r7 \u003d Base64Variant _defaultBase64\u003e\n  $r6 \u003d PolymorphicTypeValidator _typeValidator\u003e\n  $r5 \u003d AccessorNamingStrategy$Provider _accessorNaming\u003e\n  $r4 \u003d CacheProvider _cacheProvider\u003e\n  new BaseSettings($r16, $r15, $r14, $r13, r1, $r12, $r11, $r10, $r9, $r8, $r7, $r6, $r5, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "methodName": "withTypeResolverBuilder",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings withTypeResolverBuilder(com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder)",
    "visibility": "public",
    "body": "{\r\n    if (_typeResolverBuilder \u003d\u003d typer) {\r\n        return this;\r\n    }\r\n    return new BaseSettings(_classIntrospector, _annotationIntrospector, _propertyNamingStrategy, _enumNamingStrategy, _typeFactory, typer, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64, _typeValidator, _accessorNaming, _cacheProvider);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BaseSettings\n  TypeResolverBuilder\n  $r2 \u003d TypeResolverBuilder _typeResolverBuilder\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d BaseSettings\n  $r16 \u003d ClassIntrospector _classIntrospector\u003e\n  $r15 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r14 \u003d PropertyNamingStrategy _propertyNamingStrategy\u003e\n  $r13 \u003d EnumNamingStrategy _enumNamingStrategy\u003e\n  $r12 \u003d TypeFactory _typeFactory\u003e\n  $r11 \u003d DateFormat _dateFormat\u003e\n  $r10 \u003d HandlerInstantiator _handlerInstantiator\u003e\n  $r9 \u003d Locale _locale\u003e\n  $r8 \u003d TimeZone _timeZone\u003e\n  $r7 \u003d Base64Variant _defaultBase64\u003e\n  $r6 \u003d PolymorphicTypeValidator _typeValidator\u003e\n  $r5 \u003d AccessorNamingStrategy$Provider _accessorNaming\u003e\n  $r4 \u003d CacheProvider _cacheProvider\u003e\n  new BaseSettings($r16, $r15, $r14, $r13, $r12, r1, $r11, $r10, $r9, $r8, $r7, $r6, $r5, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "methodName": "withDateFormat",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings withDateFormat(java.text.DateFormat)",
    "visibility": "public",
    "body": "{\r\n    if (_dateFormat \u003d\u003d df) {\r\n        return this;\r\n    }\r\n    // 26-Sep-2015, tatu: Related to [databind#939], let\u0027s try to force TimeZone if\r\n    //   (but only if!) it has been set explicitly.\r\n    if ((df !\u003d null) \u0026\u0026 hasExplicitTimeZone()) {\r\n        df \u003d _force(df, _timeZone);\r\n    }\r\n    return new BaseSettings(_classIntrospector, _annotationIntrospector, _propertyNamingStrategy, _enumNamingStrategy, _typeFactory, _typeResolverBuilder, df, _handlerInstantiator, _locale, _timeZone, _defaultBase64, _typeValidator, _accessorNaming, _cacheProvider);\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d r3) → B1 | else → B2",
      "B2 : If(r3 \u003d\u003d null) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  BaseSettings\n  DateFormat\n  $r1 \u003d DateFormat _dateFormat\u003e\n  if ($r1 !\u003d r3) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r3 \u003d\u003d null) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.hasExplicitTimeZone()\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r2 \u003d TimeZone _timeZone\u003e\n  r3 \u003d r0._force(r3, $r2)\n}",
      "B5 {\n  $r4 \u003d BaseSettings\n  $r5 \u003d ClassIntrospector _classIntrospector\u003e\n  $r6 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r7 \u003d PropertyNamingStrategy _propertyNamingStrategy\u003e\n  $r8 \u003d EnumNamingStrategy _enumNamingStrategy\u003e\n  $r9 \u003d TypeFactory _typeFactory\u003e\n  $r10 \u003d TypeResolverBuilder _typeResolverBuilder\u003e\n  $r11 \u003d HandlerInstantiator _handlerInstantiator\u003e\n  $r12 \u003d Locale _locale\u003e\n  $r13 \u003d TimeZone _timeZone\u003e\n  $r14 \u003d Base64Variant _defaultBase64\u003e\n  $r15 \u003d PolymorphicTypeValidator _typeValidator\u003e\n  $r16 \u003d AccessorNamingStrategy$Provider _accessorNaming\u003e\n  $r17 \u003d CacheProvider _cacheProvider\u003e\n  new BaseSettings($r5, $r6, $r7, $r8, $r9, $r10, r3, $r11, $r12, $r13, $r14, $r15, $r16, $r17)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BaseSettings#hasExplicitTimeZone(...0)",
        "body": "{\r\n    return (_timeZone !\u003d null);\r\n}"
      },
      {
        "name": "BaseSettings#_force(...2)",
        "body": "{\r\n    if (df instanceof StdDateFormat) {\r\n        return ((StdDateFormat) df).withTimeZone(tz);\r\n    }\r\n    // we don\u0027t know if original format might be shared; better create a clone:\r\n    df \u003d (DateFormat) df.clone();\r\n    df.setTimeZone(tz);\r\n    return df;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "methodName": "withHandlerInstantiator",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings withHandlerInstantiator(com.fasterxml.jackson.databind.cfg.HandlerInstantiator)",
    "visibility": "public",
    "body": "{\r\n    if (_handlerInstantiator \u003d\u003d hi) {\r\n        return this;\r\n    }\r\n    return new BaseSettings(_classIntrospector, _annotationIntrospector, _propertyNamingStrategy, _enumNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, hi, _locale, _timeZone, _defaultBase64, _typeValidator, _accessorNaming, _cacheProvider);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BaseSettings\n  HandlerInstantiator\n  $r2 \u003d HandlerInstantiator _handlerInstantiator\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d BaseSettings\n  $r16 \u003d ClassIntrospector _classIntrospector\u003e\n  $r15 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r14 \u003d PropertyNamingStrategy _propertyNamingStrategy\u003e\n  $r13 \u003d EnumNamingStrategy _enumNamingStrategy\u003e\n  $r12 \u003d TypeFactory _typeFactory\u003e\n  $r11 \u003d TypeResolverBuilder _typeResolverBuilder\u003e\n  $r10 \u003d DateFormat _dateFormat\u003e\n  $r9 \u003d Locale _locale\u003e\n  $r8 \u003d TimeZone _timeZone\u003e\n  $r7 \u003d Base64Variant _defaultBase64\u003e\n  $r6 \u003d PolymorphicTypeValidator _typeValidator\u003e\n  $r5 \u003d AccessorNamingStrategy$Provider _accessorNaming\u003e\n  $r4 \u003d CacheProvider _cacheProvider\u003e\n  new BaseSettings($r16, $r15, $r14, $r13, $r12, $r11, $r10, r1, $r9, $r8, $r7, $r6, $r5, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings \u0027with\u0027(java.util.Locale)",
    "visibility": "public",
    "body": "{\r\n    if (_locale \u003d\u003d l) {\r\n        return this;\r\n    }\r\n    return new BaseSettings(_classIntrospector, _annotationIntrospector, _propertyNamingStrategy, _enumNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, l, _timeZone, _defaultBase64, _typeValidator, _accessorNaming, _cacheProvider);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BaseSettings\n  Locale\n  $r2 \u003d Locale _locale\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d BaseSettings\n  $r16 \u003d ClassIntrospector _classIntrospector\u003e\n  $r15 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r14 \u003d PropertyNamingStrategy _propertyNamingStrategy\u003e\n  $r13 \u003d EnumNamingStrategy _enumNamingStrategy\u003e\n  $r12 \u003d TypeFactory _typeFactory\u003e\n  $r11 \u003d TypeResolverBuilder _typeResolverBuilder\u003e\n  $r10 \u003d DateFormat _dateFormat\u003e\n  $r9 \u003d HandlerInstantiator _handlerInstantiator\u003e\n  $r8 \u003d TimeZone _timeZone\u003e\n  $r7 \u003d Base64Variant _defaultBase64\u003e\n  $r6 \u003d PolymorphicTypeValidator _typeValidator\u003e\n  $r5 \u003d AccessorNamingStrategy$Provider _accessorNaming\u003e\n  $r4 \u003d CacheProvider _cacheProvider\u003e\n  new BaseSettings($r16, $r15, $r14, $r13, $r12, $r11, $r10, $r9, r1, $r8, $r7, $r6, $r5, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings \u0027with\u0027(java.util.TimeZone)",
    "visibility": "public",
    "body": "{\r\n    if (tz \u003d\u003d _timeZone) {\r\n        return this;\r\n    }\r\n    // 18-Oct-2020, tatu: Should allow use of `null` to revert back to \"Default\",\r\n    //    commented out handling used before 2.12\r\n    //        if (tz \u003d\u003d null) {\r\n    //            throw new IllegalArgumentException();\r\n    //        }\r\n    DateFormat df \u003d _force(_dateFormat, (tz \u003d\u003d null) ? DEFAULT_TIMEZONE : tz);\r\n    return new BaseSettings(_classIntrospector, _annotationIntrospector, _propertyNamingStrategy, _enumNamingStrategy, _typeFactory, _typeResolverBuilder, df, _handlerInstantiator, _locale, tz, _defaultBase64, _typeValidator, _accessorNaming, _cacheProvider);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  BaseSettings\n  TimeZone\n  $r2 \u003d TimeZone _timeZone\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d DateFormat _dateFormat\u003e\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r18 \u003d TimeZone DEFAULT_TIMEZONE\u003e\n  goto B5\n}",
      "B4 {\n  $r18 \u003d r0\n}",
      "B5 {\n  $r17 \u003d r1._force($r3, $r18)\n  $r4 \u003d BaseSettings\n  $r16 \u003d ClassIntrospector _classIntrospector\u003e\n  $r15 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r14 \u003d PropertyNamingStrategy _propertyNamingStrategy\u003e\n  $r13 \u003d EnumNamingStrategy _enumNamingStrategy\u003e\n  $r12 \u003d TypeFactory _typeFactory\u003e\n  $r11 \u003d TypeResolverBuilder _typeResolverBuilder\u003e\n  $r10 \u003d HandlerInstantiator _handlerInstantiator\u003e\n  $r9 \u003d Locale _locale\u003e\n  $r8 \u003d Base64Variant _defaultBase64\u003e\n  $r7 \u003d PolymorphicTypeValidator _typeValidator\u003e\n  $r6 \u003d AccessorNamingStrategy$Provider _accessorNaming\u003e\n  $r5 \u003d CacheProvider _cacheProvider\u003e\n  new BaseSettings($r16, $r15, $r14, $r13, $r12, $r11, $r17, $r10, $r9, r0, $r8, $r7, $r6, $r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BaseSettings#_force(...2)",
        "body": "{\r\n    if (df instanceof StdDateFormat) {\r\n        return ((StdDateFormat) df).withTimeZone(tz);\r\n    }\r\n    // we don\u0027t know if original format might be shared; better create a clone:\r\n    df \u003d (DateFormat) df.clone();\r\n    df.setTimeZone(tz);\r\n    return df;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings \u0027with\u0027(com.fasterxml.jackson.core.Base64Variant)",
    "visibility": "public",
    "body": "{\r\n    if (base64 \u003d\u003d _defaultBase64) {\r\n        return this;\r\n    }\r\n    return new BaseSettings(_classIntrospector, _annotationIntrospector, _propertyNamingStrategy, _enumNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, base64, _typeValidator, _accessorNaming, _cacheProvider);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BaseSettings\n  Base64Variant\n  $r2 \u003d Base64Variant _defaultBase64\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d BaseSettings\n  $r16 \u003d ClassIntrospector _classIntrospector\u003e\n  $r15 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r14 \u003d PropertyNamingStrategy _propertyNamingStrategy\u003e\n  $r13 \u003d EnumNamingStrategy _enumNamingStrategy\u003e\n  $r12 \u003d TypeFactory _typeFactory\u003e\n  $r11 \u003d TypeResolverBuilder _typeResolverBuilder\u003e\n  $r10 \u003d DateFormat _dateFormat\u003e\n  $r9 \u003d HandlerInstantiator _handlerInstantiator\u003e\n  $r8 \u003d Locale _locale\u003e\n  $r7 \u003d TimeZone _timeZone\u003e\n  $r6 \u003d PolymorphicTypeValidator _typeValidator\u003e\n  $r5 \u003d AccessorNamingStrategy$Provider _accessorNaming\u003e\n  $r4 \u003d CacheProvider _cacheProvider\u003e\n  new BaseSettings($r16, $r15, $r14, $r13, $r12, $r11, $r10, $r9, $r8, $r7, r0, $r6, $r5, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings \u0027with\u0027(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)",
    "visibility": "public",
    "body": "{\r\n    if (v \u003d\u003d _typeValidator) {\r\n        return this;\r\n    }\r\n    return new BaseSettings(_classIntrospector, _annotationIntrospector, _propertyNamingStrategy, _enumNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64, v, _accessorNaming, _cacheProvider);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BaseSettings\n  PolymorphicTypeValidator\n  $r2 \u003d PolymorphicTypeValidator _typeValidator\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d BaseSettings\n  $r16 \u003d ClassIntrospector _classIntrospector\u003e\n  $r15 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r14 \u003d PropertyNamingStrategy _propertyNamingStrategy\u003e\n  $r13 \u003d EnumNamingStrategy _enumNamingStrategy\u003e\n  $r12 \u003d TypeFactory _typeFactory\u003e\n  $r11 \u003d TypeResolverBuilder _typeResolverBuilder\u003e\n  $r10 \u003d DateFormat _dateFormat\u003e\n  $r9 \u003d HandlerInstantiator _handlerInstantiator\u003e\n  $r8 \u003d Locale _locale\u003e\n  $r7 \u003d TimeZone _timeZone\u003e\n  $r6 \u003d Base64Variant _defaultBase64\u003e\n  $r5 \u003d AccessorNamingStrategy$Provider _accessorNaming\u003e\n  $r4 \u003d CacheProvider _cacheProvider\u003e\n  new BaseSettings($r16, $r15, $r14, $r13, $r12, $r11, $r10, $r9, $r8, $r7, $r6, r0, $r5, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings \u0027with\u0027(com.fasterxml.jackson.databind.cfg.CacheProvider)",
    "visibility": "public",
    "body": "{\r\n    if (cacheProvider \u003d\u003d _cacheProvider) {\r\n        return this;\r\n    }\r\n    return new BaseSettings(_classIntrospector, _annotationIntrospector, _propertyNamingStrategy, _enumNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64, _typeValidator, _accessorNaming, cacheProvider);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BaseSettings\n  CacheProvider\n  $r2 \u003d CacheProvider _cacheProvider\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d BaseSettings\n  $r16 \u003d ClassIntrospector _classIntrospector\u003e\n  $r15 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r14 \u003d PropertyNamingStrategy _propertyNamingStrategy\u003e\n  $r13 \u003d EnumNamingStrategy _enumNamingStrategy\u003e\n  $r12 \u003d TypeFactory _typeFactory\u003e\n  $r11 \u003d TypeResolverBuilder _typeResolverBuilder\u003e\n  $r10 \u003d DateFormat _dateFormat\u003e\n  $r9 \u003d HandlerInstantiator _handlerInstantiator\u003e\n  $r8 \u003d Locale _locale\u003e\n  $r7 \u003d TimeZone _timeZone\u003e\n  $r6 \u003d Base64Variant _defaultBase64\u003e\n  $r5 \u003d PolymorphicTypeValidator _typeValidator\u003e\n  $r4 \u003d AccessorNamingStrategy$Provider _accessorNaming\u003e\n  new BaseSettings($r16, $r15, $r14, $r13, $r12, $r11, $r10, $r9, $r8, $r7, $r6, $r5, $r4, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "methodName": "getTimeZone",
    "signature": "java.util.TimeZone getTimeZone()",
    "visibility": "public",
    "body": "{\r\n    TimeZone tz \u003d _timeZone;\r\n    return (tz \u003d\u003d null) ? DEFAULT_TIMEZONE : tz;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BaseSettings\n  r1 \u003d TimeZone _timeZone\u003e\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d TimeZone DEFAULT_TIMEZONE\u003e\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "methodName": "hasExplicitTimeZone",
    "signature": "boolean hasExplicitTimeZone()",
    "visibility": "public",
    "body": "{\r\n    return (_timeZone !\u003d null);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BaseSettings\n  $r1 \u003d TimeZone _timeZone\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.CoercionConfigs",
    "methodName": "copy",
    "signature": "com.fasterxml.jackson.databind.cfg.CoercionConfigs copy()",
    "visibility": "public",
    "body": "{\r\n    MutableCoercionConfig[] newPerType;\r\n    if (_perTypeCoercions \u003d\u003d null) {\r\n        newPerType \u003d null;\r\n    } else {\r\n        final int size \u003d _perTypeCoercions.length;\r\n        newPerType \u003d new MutableCoercionConfig[size];\r\n        for (int i \u003d 0; i \u003c size; ++i) {\r\n            newPerType[i] \u003d _copy(_perTypeCoercions[i]);\r\n        }\r\n    }\r\n    Map\u003cClass\u003c?\u003e, MutableCoercionConfig\u003e newPerClass;\r\n    if (_perClassCoercions \u003d\u003d null) {\r\n        newPerClass \u003d null;\r\n    } else {\r\n        newPerClass \u003d new HashMap\u003c\u003e();\r\n        for (Map.Entry\u003cClass\u003c?\u003e, MutableCoercionConfig\u003e entry : _perClassCoercions.entrySet()) {\r\n            newPerClass.put(entry.getKey(), entry.getValue().copy());\r\n        }\r\n    }\r\n    return new CoercionConfigs(_defaultAction, _defaultCoercions.copy(), newPerType, newPerClass);\r\n}",
    "nodes": 11,
    "edges": 14,
    "cc": 5,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B3 : If(i1 \u003e\u003d i0) → B4 | else → B5",
      "B5 : If($r3 !\u003d null) → B6 | else → B7",
      "B8 : If($z0 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  CoercionConfigs\n  $r1 \u003d MutableCoercionConfig[] _perTypeCoercions\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r21 \u003d null\n  goto B5\n}",
      "B2 {\n  $r2 \u003d MutableCoercionConfig[] _perTypeCoercions\u003e\n  i0 \u003d lengthof $r2\n  r21 \u003d MutableCoercionConfig)[i0]\n  i1 \u003d 0\n}",
      "B3 {\n  if (i1 \u003e\u003d i0) goto B4 else B5\n}",
      "B4 {\n  $r18 \u003d MutableCoercionConfig[] _perTypeCoercions\u003e\n  $r19 \u003d $r18[i1]\n  $r20 \u003d CoercionConfigs._copy($r19)\n  r21[i1] \u003d $r20\n  i1 \u003d i1 + 1\n  goto B3\n}",
      "B5 {\n  $r3 \u003d Map _perClassCoercions\u003e\n  if ($r3 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  r22 \u003d null\n  goto B10\n}",
      "B7 {\n  $r4 \u003d HashMap\n  new HashMap()\n  r22 \u003d $r4\n  $r5 \u003d Map _perClassCoercions\u003e\n  $r6 \u003d $r5.entrySet()\n  r23 \u003d $r6.iterator()\n}",
      "B8 {\n  $z0 \u003d r23.hasNext()\n  if ($z0 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r11 \u003d r23.next()\n  r12 \u003d Map$Entry) $r11\n  $r13 \u003d r12.getKey()\n  $r17 \u003d Class) $r13\n  $r14 \u003d r12.getValue()\n  $r15 \u003d MutableCoercionConfig) $r14\n  $r16 \u003d $r15.copy()\n  $r4.put($r17, $r16)\n  goto B8\n}",
      "B10 {\n  $r7 \u003d CoercionConfigs\n  $r9 \u003d CoercionAction _defaultAction\u003e\n  $r8 \u003d MutableCoercionConfig _defaultCoercions\u003e\n  $r10 \u003d $r8.copy()\n  new CoercionConfigs($r9, $r10, r21, r22)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B8",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CoercionConfigs#_copy(...1)",
        "body": "{\r\n    if (src \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return src.copy();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.CoercionConfigs",
    "methodName": "findOrCreateCoercion",
    "signature": "com.fasterxml.jackson.databind.cfg.MutableCoercionConfig findOrCreateCoercion(com.fasterxml.jackson.databind.type.LogicalType)",
    "visibility": "public",
    "body": "{\r\n    if (_perTypeCoercions \u003d\u003d null) {\r\n        _perTypeCoercions \u003d new MutableCoercionConfig[TARGET_TYPE_COUNT];\r\n    }\r\n    MutableCoercionConfig config \u003d _perTypeCoercions[type.ordinal()];\r\n    if (config \u003d\u003d null) {\r\n        _perTypeCoercions[type.ordinal()] \u003d config \u003d new MutableCoercionConfig();\r\n    }\r\n    return config;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B2 : If($r7 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CoercionConfigs\n  LogicalType\n  $r1 \u003d MutableCoercionConfig[] _perTypeCoercions\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i2 \u003d CoercionConfigs: int TARGET_TYPE_COUNT\u003e\n  $r6 \u003d MutableCoercionConfig)[$i2]\n  MutableCoercionConfig[] _perTypeCoercions\u003e \u003d $r6\n}",
      "B2 {\n  $r3 \u003d MutableCoercionConfig[] _perTypeCoercions\u003e\n  $i0 \u003d r2.ordinal()\n  $r7 \u003d $r3[$i0]\n  r8 \u003d $r7\n  if ($r7 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d MutableCoercionConfig[] _perTypeCoercions\u003e\n  $i1 \u003d r2.ordinal()\n  $r5 \u003d MutableCoercionConfig\n  new MutableCoercionConfig()\n  r8 \u003d $r5\n  $r4[$i1] \u003d $r5\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.CoercionConfigs",
    "methodName": "findOrCreateCoercion",
    "signature": "com.fasterxml.jackson.databind.cfg.MutableCoercionConfig findOrCreateCoercion(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (_perClassCoercions \u003d\u003d null) {\r\n        _perClassCoercions \u003d new HashMap\u003c\u003e();\r\n    }\r\n    MutableCoercionConfig config \u003d _perClassCoercions.get(type);\r\n    if (config \u003d\u003d null) {\r\n        config \u003d new MutableCoercionConfig();\r\n        _perClassCoercions.put(type, config);\r\n    }\r\n    return config;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B2 : If($r8 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CoercionConfigs\n  Class\n  $r1 \u003d Map _perClassCoercions\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d HashMap\n  new HashMap()\n  Map _perClassCoercions\u003e \u003d $r7\n}",
      "B2 {\n  $r3 \u003d Map _perClassCoercions\u003e\n  $r4 \u003d $r3.get(r2)\n  $r8 \u003d MutableCoercionConfig) $r4\n  r9 \u003d $r8\n  if ($r8 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d MutableCoercionConfig\n  new MutableCoercionConfig()\n  r9 \u003d $r5\n  $r6 \u003d Map _perClassCoercions\u003e\n  $r6.put(r2, $r5)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.CoercionConfigs",
    "methodName": "findCoercion",
    "signature": "com.fasterxml.jackson.databind.cfg.CoercionAction findCoercion(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.type.LogicalType,java.lang.Class,com.fasterxml.jackson.databind.cfg.CoercionInputShape)",
    "visibility": "public",
    "body": "{\r\n    // First, see if there is exact match for physical type\r\n    if ((_perClassCoercions !\u003d null) \u0026\u0026 (targetClass !\u003d null)) {\r\n        MutableCoercionConfig cc \u003d _perClassCoercions.get(targetClass);\r\n        if (cc !\u003d null) {\r\n            CoercionAction act \u003d cc.findAction(inputShape);\r\n            if (act !\u003d null) {\r\n                return act;\r\n            }\r\n        }\r\n    }\r\n    // If not, maybe by logical type\r\n    if ((_perTypeCoercions !\u003d null) \u0026\u0026 (targetType !\u003d null)) {\r\n        MutableCoercionConfig cc \u003d _perTypeCoercions[targetType.ordinal()];\r\n        if (cc !\u003d null) {\r\n            CoercionAction act \u003d cc.findAction(inputShape);\r\n            if (act !\u003d null) {\r\n                return act;\r\n            }\r\n        }\r\n    }\r\n    // Barring that, default coercion for input shape?\r\n    CoercionAction act \u003d _defaultCoercions.findAction(inputShape);\r\n    if (act !\u003d null) {\r\n        return act;\r\n    }\r\n    // Otherwise there are some legacy features that can provide answer\r\n    switch(inputShape) {\r\n        case EmptyArray:\r\n            // Default for setting is false\r\n            return config.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT) ? CoercionAction.AsNull : CoercionAction.Fail;\r\n        case Float:\r\n            if (targetType \u003d\u003d LogicalType.Integer) {\r\n                // Default for setting in 2.x is true\r\n                return config.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT) ? CoercionAction.TryConvert : CoercionAction.Fail;\r\n            }\r\n            break;\r\n        case Integer:\r\n            if (targetType \u003d\u003d LogicalType.Enum) {\r\n                if (config.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) {\r\n                    return CoercionAction.Fail;\r\n                }\r\n            }\r\n            break;\r\n        default:\r\n    }\r\n    // classic scalars are numbers, booleans; but date/time also considered\r\n    // scalar for this particular purpose\r\n    final boolean baseScalar \u003d _isScalarType(targetType);\r\n    if (baseScalar \u0026\u0026 // Default for setting in 2.x is true\r\n    !config.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS) \u0026\u0026 // 12-Oct-2022, carterkozak: As per [databind#3624]: Coercion from integer-shaped\r\n    // data into a floating point type is not banned by the\r\n    // ALLOW_COERCION_OF_SCALARS feature because \u00271\u0027 is a valid JSON representation of\r\n    // \u00271.0\u0027 in a way that other types of coercion do not satisfy.\r\n    (targetType !\u003d LogicalType.Float || inputShape !\u003d CoercionInputShape.Integer)) {\r\n        return CoercionAction.Fail;\r\n    }\r\n    if (inputShape \u003d\u003d CoercionInputShape.EmptyString) {\r\n        // 09-Jun-2020, tatu: Seems necessary to support backwards-compatibility with\r\n        //     2.11, wrt \"FromStringDeserializer\" supported types\r\n        // 06-Jul-2023, tatu: For 2.16, moved before the other check to prevent coercion\r\n        //     to null where conversion allowed/expected\r\n        if (targetType \u003d\u003d LogicalType.OtherScalar) {\r\n            return CoercionAction.TryConvert;\r\n        }\r\n        // Since coercion of scalar must be enabled (see check above), allow empty-string\r\n        // coercions by default even without this setting\r\n        if (baseScalar || // Default for setting is false\r\n        config.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\r\n            return CoercionAction.AsNull;\r\n        }\r\n        // But block from allowing structured types like POJOs, Maps etc\r\n        return CoercionAction.Fail;\r\n    }\r\n    // and all else failing, return default\r\n    return _defaultAction;\r\n}",
    "nodes": 38,
    "edges": 52,
    "cc": 16,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B5",
      "B1 : If(r23 \u003d\u003d null) → B2 | else → B5",
      "B2 : If(r26 \u003d\u003d null) → B3 | else → B5",
      "B3 : If(r27 \u003d\u003d null) → B4 | else → B5",
      "B5 : If($r28 \u003d\u003d null) → B6 | else → B10",
      "B6 : If(r4 \u003d\u003d null) → B7 | else → B10",
      "B7 : If(r29 \u003d\u003d null) → B8 | else → B10",
      "B8 : If(r30 \u003d\u003d null) → B9 | else → B10",
      "B10 : If($r32 \u003d\u003d null) → B11 | else → B12",
      "B12 : If(switch-on $i1) → B13 | else → B17",
      "B13 : If($z4 \u003d\u003d false) → B14 | else → B15",
      "B17 : If(r4 !\u003d $r19) → B18 | else → B25",
      "B18 : If($z3 \u003d\u003d false) → B19 | else → B20",
      "B22 : If(r4 !\u003d $r5) → B23 | else → B25",
      "B23 : If($z2 \u003d\u003d false) → B24 | else → B25",
      "B25 : If($z5 \u003d\u003d false) → B26 | else → B30",
      "B26 : If($z1 !\u003d 0) → B27 | else → B30",
      "B27 : If(r4 !\u003d $r14) → B28 | else → B29",
      "B28 : If(r2 \u003d\u003d $r16) → B29 | else → B30",
      "B30 : If(r2 !\u003d $r35) → B31 | else → B37",
      "B31 : If(r4 !\u003d $r7) → B32 | else → B33",
      "B33 : If($z5 !\u003d 0) → B34 | else → B35",
      "B34 : If($z0 \u003d\u003d false) → B35 | else → B36"
    ],
    "blockList": [
      "B0 {\n  CoercionConfigs\n  DeserializationConfig\n  LogicalType\n  Class\n  CoercionInputShape\n  $r1 \u003d Map _perClassCoercions\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  if (r23 \u003d\u003d null) goto B2 else B5\n}",
      "B2 {\n  $r24 \u003d Map _perClassCoercions\u003e\n  $r25 \u003d $r24.get(r23)\n  r26 \u003d MutableCoercionConfig) $r25\n  if (r26 \u003d\u003d null) goto B3 else B5\n}",
      "B3 {\n  r27 \u003d r26.findAction(r2)\n  if (r27 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r28 \u003d MutableCoercionConfig[] _perTypeCoercions\u003e\n  if ($r28 \u003d\u003d null) goto B6 else B10\n}",
      "B6 {\n  if (r4 \u003d\u003d null) goto B7 else B10\n}",
      "B7 {\n  $r22 \u003d MutableCoercionConfig[] _perTypeCoercions\u003e\n  $i2 \u003d r4.ordinal()\n  r29 \u003d $r22[$i2]\n  if (r29 \u003d\u003d null) goto B8 else B10\n}",
      "B8 {\n  r30 \u003d r29.findAction(r2)\n  if (r30 \u003d\u003d null) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $r31 \u003d MutableCoercionConfig _defaultCoercions\u003e\n  $r32 \u003d $r31.findAction(r2)\n  if ($r32 \u003d\u003d null) goto B11 else B12\n}",
      "B11 {\n  return\n}",
      "B12 {\n  $r3 \u003d CoercionConfigs$1: int[] $SwitchMap$com$fasterxml$jackson$databind$cfg$CoercionInputShape\u003e\n  $i0 \u003d r2.ordinal()\n  $i1 \u003d $r3[$i0]\n  LogicalType)\u003e(r4); }\n}",
      "B13 {\n  $r21 \u003d DeserializationFeature ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT\u003e\n  $z4 \u003d r9.isEnabled($r21)\n  if ($z4 \u003d\u003d false) goto B14 else B15\n}",
      "B14 {\n  $r33 \u003d CoercionAction AsNull\u003e\n  goto B16\n}",
      "B15 {\n  $r33 \u003d CoercionAction Fail\u003e\n}",
      "B16 {\n  return\n}",
      "B17 {\n  $r19 \u003d LogicalType Integer\u003e\n  if (r4 !\u003d $r19) goto B18 else B25\n}",
      "B18 {\n  $r20 \u003d DeserializationFeature ACCEPT_FLOAT_AS_INT\u003e\n  $z3 \u003d r9.isEnabled($r20)\n  if ($z3 \u003d\u003d false) goto B19 else B20\n}",
      "B19 {\n  $r34 \u003d CoercionAction TryConvert\u003e\n  goto B21\n}",
      "B20 {\n  $r34 \u003d CoercionAction Fail\u003e\n}",
      "B21 {\n  return\n}",
      "B22 {\n  $r5 \u003d LogicalType Enum\u003e\n  if (r4 !\u003d $r5) goto B23 else B25\n}",
      "B23 {\n  $r17 \u003d DeserializationFeature FAIL_ON_NUMBERS_FOR_ENUMS\u003e\n  $z2 \u003d r9.isEnabled($r17)\n  if ($z2 \u003d\u003d false) goto B24 else B25\n}",
      "B24 {\n  $r18 \u003d CoercionAction Fail\u003e\n  return\n}",
      "B25 {\n  $z5 \u003d r0._isScalarType(r4)\n  if ($z5 \u003d\u003d false) goto B26 else B30\n}",
      "B26 {\n  $r13 \u003d MapperFeature ALLOW_COERCION_OF_SCALARS\u003e\n  $z1 \u003d r9.isEnabled($r13)\n  if ($z1 !\u003d 0) goto B27 else B30\n}",
      "B27 {\n  $r14 \u003d LogicalType Float\u003e\n  if (r4 !\u003d $r14) goto B28 else B29\n}",
      "B28 {\n  $r16 \u003d CoercionInputShape Integer\u003e\n  if (r2 \u003d\u003d $r16) goto B29 else B30\n}",
      "B29 {\n  $r15 \u003d CoercionAction Fail\u003e\n  return\n}",
      "B30 {\n  $r35 \u003d CoercionInputShape EmptyString\u003e\n  if (r2 !\u003d $r35) goto B31 else B37\n}",
      "B31 {\n  $r7 \u003d LogicalType OtherScalar\u003e\n  if (r4 !\u003d $r7) goto B32 else B33\n}",
      "B32 {\n  $r12 \u003d CoercionAction TryConvert\u003e\n  return\n}",
      "B33 {\n  if ($z5 !\u003d 0) goto B34 else B35\n}",
      "B34 {\n  $r10 \u003d DeserializationFeature ACCEPT_EMPTY_STRING_AS_NULL_OBJECT\u003e\n  $z0 \u003d r9.isEnabled($r10)\n  if ($z0 \u003d\u003d false) goto B35 else B36\n}",
      "B35 {\n  $r8 \u003d CoercionAction AsNull\u003e\n  return\n}",
      "B36 {\n  $r11 \u003d CoercionAction Fail\u003e\n  return\n}",
      "B37 {\n  $r6 \u003d CoercionAction _defaultAction\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B17",
      "B12 --\u003e B22",
      "B12 --\u003e B25",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e B18",
      "B17 --\u003e B25",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B21",
      "B21 --\u003e [EXIT]",
      "B22 --\u003e B23",
      "B22 --\u003e B25",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e [EXIT]",
      "B25 --\u003e B26",
      "B25 --\u003e B30",
      "B26 --\u003e B27",
      "B26 --\u003e B30",
      "B27 --\u003e B28",
      "B27 --\u003e B29",
      "B28 --\u003e B29",
      "B28 --\u003e B30",
      "B29 --\u003e [EXIT]",
      "B30 --\u003e B31",
      "B30 --\u003e B37",
      "B31 --\u003e B32",
      "B31 --\u003e B33",
      "B32 --\u003e [EXIT]",
      "B33 --\u003e B34",
      "B33 --\u003e B35",
      "B34 --\u003e B35",
      "B34 --\u003e B36",
      "B35 --\u003e [EXIT]",
      "B36 --\u003e [EXIT]",
      "B37 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CoercionConfigs#_isScalarType(...1)",
        "body": "{\r\n    return (targetType \u003d\u003d LogicalType.Float) || (targetType \u003d\u003d LogicalType.Integer) || (targetType \u003d\u003d LogicalType.Boolean) || (targetType \u003d\u003d LogicalType.DateTime);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.CoercionConfigs",
    "methodName": "findCoercionFromBlankString",
    "signature": "com.fasterxml.jackson.databind.cfg.CoercionAction findCoercionFromBlankString(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.type.LogicalType,java.lang.Class,com.fasterxml.jackson.databind.cfg.CoercionAction)",
    "visibility": "public",
    "body": "{\r\n    Boolean acceptBlankAsEmpty \u003d null;\r\n    CoercionAction action \u003d null;\r\n    // First, see if there is exact match for physical type\r\n    if ((_perClassCoercions !\u003d null) \u0026\u0026 (targetClass !\u003d null)) {\r\n        MutableCoercionConfig cc \u003d _perClassCoercions.get(targetClass);\r\n        if (cc !\u003d null) {\r\n            acceptBlankAsEmpty \u003d cc.getAcceptBlankAsEmpty();\r\n            action \u003d cc.findAction(CoercionInputShape.EmptyString);\r\n        }\r\n    }\r\n    // If not, maybe by logical type\r\n    if ((_perTypeCoercions !\u003d null) \u0026\u0026 (targetType !\u003d null)) {\r\n        MutableCoercionConfig cc \u003d _perTypeCoercions[targetType.ordinal()];\r\n        if (cc !\u003d null) {\r\n            if (acceptBlankAsEmpty \u003d\u003d null) {\r\n                acceptBlankAsEmpty \u003d cc.getAcceptBlankAsEmpty();\r\n            }\r\n            if (action \u003d\u003d null) {\r\n                action \u003d cc.findAction(CoercionInputShape.EmptyString);\r\n            }\r\n        }\r\n    }\r\n    // Barring that, default coercion for input shape?\r\n    if (acceptBlankAsEmpty \u003d\u003d null) {\r\n        acceptBlankAsEmpty \u003d _defaultCoercions.getAcceptBlankAsEmpty();\r\n    }\r\n    if (action \u003d\u003d null) {\r\n        action \u003d _defaultCoercions.findAction(CoercionInputShape.EmptyString);\r\n    }\r\n    // First: if using blank as empty is no-go, return what caller specified\r\n    if (Boolean.FALSE.equals(acceptBlankAsEmpty)) {\r\n        return actionIfBlankNotAllowed;\r\n    }\r\n    // Otherwise, if action found, return that\r\n    if (action !\u003d null) {\r\n        return action;\r\n    }\r\n    // 23-Sep-2021, tatu: [databind#3234] Should default to \"allow\" for Scalar types\r\n    //    for backwards compatibility\r\n    if (_isScalarType(targetType)) {\r\n        return CoercionAction.AsNull;\r\n    }\r\n    // If not, one specific legacy setting to consider...\r\n    if (config.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\r\n        return CoercionAction.AsNull;\r\n    }\r\n    // But finally consider ultimate default to be \"false\" and so:\r\n    return actionIfBlankNotAllowed;\r\n}",
    "nodes": 24,
    "edges": 33,
    "cc": 11,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B4",
      "B1 : If(r14 \u003d\u003d null) → B2 | else → B4",
      "B2 : If(r20 \u003d\u003d null) → B3 | else → B4",
      "B4 : If($r21 \u003d\u003d null) → B5 | else → B11",
      "B5 : If(r3 \u003d\u003d null) → B6 | else → B11",
      "B6 : If(r22 \u003d\u003d null) → B7 | else → B11",
      "B7 : If(r18 !\u003d null) → B8 | else → B9",
      "B9 : If(r19 !\u003d null) → B10 | else → B11",
      "B11 : If(r18 !\u003d null) → B12 | else → B13",
      "B13 : If(r19 !\u003d null) → B14 | else → B15",
      "B15 : If($z0 \u003d\u003d false) → B16 | else → B17",
      "B17 : If(r19 \u003d\u003d null) → B18 | else → B19",
      "B19 : If($z1 \u003d\u003d false) → B20 | else → B21",
      "B21 : If($z2 \u003d\u003d false) → B22 | else → B23"
    ],
    "blockList": [
      "B0 {\n  CoercionConfigs\n  DeserializationConfig\n  LogicalType\n  Class\n  CoercionAction\n  r18 \u003d null\n  r19 \u003d null\n  $r1 \u003d Map _perClassCoercions\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  if (r14 \u003d\u003d null) goto B2 else B4\n}",
      "B2 {\n  $r15 \u003d Map _perClassCoercions\u003e\n  $r16 \u003d $r15.get(r14)\n  r20 \u003d MutableCoercionConfig) $r16\n  if (r20 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  r18 \u003d r20.getAcceptBlankAsEmpty()\n  $r17 \u003d CoercionInputShape EmptyString\u003e\n  r19 \u003d r20.findAction($r17)\n}",
      "B4 {\n  $r21 \u003d MutableCoercionConfig[] _perTypeCoercions\u003e\n  if ($r21 \u003d\u003d null) goto B5 else B11\n}",
      "B5 {\n  if (r3 \u003d\u003d null) goto B6 else B11\n}",
      "B6 {\n  $r12 \u003d MutableCoercionConfig[] _perTypeCoercions\u003e\n  $i0 \u003d r3.ordinal()\n  r22 \u003d $r12[$i0]\n  if (r22 \u003d\u003d null) goto B7 else B11\n}",
      "B7 {\n  if (r18 !\u003d null) goto B8 else B9\n}",
      "B8 {\n  r18 \u003d r22.getAcceptBlankAsEmpty()\n}",
      "B9 {\n  if (r19 !\u003d null) goto B10 else B11\n}",
      "B10 {\n  $r13 \u003d CoercionInputShape EmptyString\u003e\n  r19 \u003d r22.findAction($r13)\n}",
      "B11 {\n  if (r18 !\u003d null) goto B12 else B13\n}",
      "B12 {\n  $r11 \u003d MutableCoercionConfig _defaultCoercions\u003e\n  r18 \u003d $r11.getAcceptBlankAsEmpty()\n}",
      "B13 {\n  if (r19 !\u003d null) goto B14 else B15\n}",
      "B14 {\n  $r10 \u003d MutableCoercionConfig _defaultCoercions\u003e\n  $r9 \u003d CoercionInputShape EmptyString\u003e\n  r19 \u003d $r10.findAction($r9)\n}",
      "B15 {\n  $r2 \u003d Boolean FALSE\u003e\n  $z0 \u003d $r2.equals(r18)\n  if ($z0 \u003d\u003d false) goto B16 else B17\n}",
      "B16 {\n  return\n}",
      "B17 {\n  if (r19 \u003d\u003d null) goto B18 else B19\n}",
      "B18 {\n  return\n}",
      "B19 {\n  $z1 \u003d r0._isScalarType(r3)\n  if ($z1 \u003d\u003d false) goto B20 else B21\n}",
      "B20 {\n  $r8 \u003d CoercionAction AsNull\u003e\n  return\n}",
      "B21 {\n  $r5 \u003d DeserializationFeature ACCEPT_EMPTY_STRING_AS_NULL_OBJECT\u003e\n  $z2 \u003d r4.isEnabled($r5)\n  if ($z2 \u003d\u003d false) goto B22 else B23\n}",
      "B22 {\n  $r7 \u003d CoercionAction AsNull\u003e\n  return\n}",
      "B23 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B11",
      "B5 --\u003e B6",
      "B5 --\u003e B11",
      "B6 --\u003e B7",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e [EXIT]",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e [EXIT]",
      "B23 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CoercionConfigs#_isScalarType(...1)",
        "body": "{\r\n    return (targetType \u003d\u003d LogicalType.Float) || (targetType \u003d\u003d LogicalType.Integer) || (targetType \u003d\u003d LogicalType.Boolean) || (targetType \u003d\u003d LogicalType.DateTime);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "methodName": "copy",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides copy()",
    "visibility": "public",
    "body": "{\r\n    Map\u003cClass\u003c?\u003e, MutableConfigOverride\u003e newOverrides;\r\n    if (_overrides \u003d\u003d null) {\r\n        newOverrides \u003d null;\r\n    } else {\r\n        newOverrides \u003d _newMap();\r\n        for (Map.Entry\u003cClass\u003c?\u003e, MutableConfigOverride\u003e entry : _overrides.entrySet()) {\r\n            newOverrides.put(entry.getKey(), entry.getValue().copy());\r\n        }\r\n    }\r\n    return new ConfigOverrides(newOverrides, _defaultInclusion, _defaultSetterInfo, _visibilityChecker, _defaultMergeable, _defaultLeniency);\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ConfigOverrides\n  $r1 \u003d Map _overrides\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r18 \u003d null\n  goto B5\n}",
      "B2 {\n  r18 \u003d r0._newMap()\n  $r2 \u003d Map _overrides\u003e\n  $r3 \u003d $r2.entrySet()\n  r4 \u003d $r3.iterator()\n}",
      "B3 {\n  $z0 \u003d r4.hasNext()\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r11 \u003d r4.next()\n  r12 \u003d Map$Entry) $r11\n  $r13 \u003d r12.getKey()\n  $r17 \u003d Class) $r13\n  $r14 \u003d r12.getValue()\n  $r15 \u003d MutableConfigOverride) $r14\n  $r16 \u003d $r15.copy()\n  r18.put($r17, $r16)\n  goto B3\n}",
      "B5 {\n  $r5 \u003d ConfigOverrides\n  $r10 \u003d JsonInclude$Value _defaultInclusion\u003e\n  $r9 \u003d JsonSetter$Value _defaultSetterInfo\u003e\n  $r8 \u003d VisibilityChecker _visibilityChecker\u003e\n  $r7 \u003d Boolean _defaultMergeable\u003e\n  $r6 \u003d Boolean _defaultLeniency\u003e\n  new ConfigOverrides(r18, $r10, $r9, $r8, $r7, $r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ConfigOverrides#_newMap(...0)",
        "body": "{\r\n    return new HashMap\u003cClass\u003c?\u003e, MutableConfigOverride\u003e();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "methodName": "findOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride findOverride(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (_overrides \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return _overrides.get(type);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ConfigOverrides\n  Class\n  $r1 \u003d Map _overrides\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d Map _overrides\u003e\n  $r4 \u003d $r3.get(r2)\n  $r5 \u003d ConfigOverride) $r4\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "methodName": "findOrCreateOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.MutableConfigOverride findOrCreateOverride(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (_overrides \u003d\u003d null) {\r\n        _overrides \u003d _newMap();\r\n    }\r\n    MutableConfigOverride override \u003d _overrides.get(type);\r\n    if (override \u003d\u003d null) {\r\n        override \u003d new MutableConfigOverride();\r\n        _overrides.put(type, override);\r\n    }\r\n    return override;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B2 : If($r8 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ConfigOverrides\n  Class\n  $r1 \u003d Map _overrides\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d r0._newMap()\n  Map _overrides\u003e \u003d $r7\n}",
      "B2 {\n  $r3 \u003d Map _overrides\u003e\n  $r4 \u003d $r3.get(r2)\n  $r8 \u003d MutableConfigOverride) $r4\n  r9 \u003d $r8\n  if ($r8 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d MutableConfigOverride\n  new MutableConfigOverride()\n  r9 \u003d $r5\n  $r6 \u003d Map _overrides\u003e\n  $r6.put(r2, $r5)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ConfigOverrides#_newMap(...0)",
        "body": "{\r\n    return new HashMap\u003cClass\u003c?\u003e, MutableConfigOverride\u003e();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "methodName": "findFormatDefaults",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonFormat$Value findFormatDefaults(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (_overrides !\u003d null) {\r\n        ConfigOverride override \u003d _overrides.get(type);\r\n        if (override !\u003d null) {\r\n            JsonFormat.Value format \u003d override.getFormat();\r\n            if (format !\u003d null) {\r\n                if (!format.hasLenient()) {\r\n                    return format.withLenient(_defaultLeniency);\r\n                }\r\n                return format;\r\n            }\r\n        }\r\n    }\r\n    if (_defaultLeniency \u003d\u003d null) {\r\n        return JsonFormat.Value.empty();\r\n    }\r\n    return JsonFormat.Value.forLeniency(_defaultLeniency);\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B6",
      "B1 : If(r8 \u003d\u003d null) → B2 | else → B6",
      "B2 : If(r9 \u003d\u003d null) → B3 | else → B6",
      "B3 : If($z1 !\u003d 0) → B4 | else → B5",
      "B6 : If($r12 !\u003d null) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  ConfigOverrides\n  Class\n  $r1 \u003d Map _overrides\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  $r6 \u003d Map _overrides\u003e\n  $r7 \u003d $r6.get(r5)\n  r8 \u003d ConfigOverride) $r7\n  if (r8 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  r9 \u003d r8.getFormat()\n  if (r9 \u003d\u003d null) goto B3 else B6\n}",
      "B3 {\n  $z1 \u003d r9.hasLenient()\n  if ($z1 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r10 \u003d Boolean _defaultLeniency\u003e\n  $r11 \u003d r9.withLenient($r10)\n  return\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r12 \u003d Boolean _defaultLeniency\u003e\n  if ($r12 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r4 \u003d JsonFormat$Value.empty()\n  return\n}",
      "B8 {\n  $r2 \u003d Boolean _defaultLeniency\u003e\n  $z0 \u003d $r2.booleanValue()\n  $r3 \u003d JsonFormat$Value.forLeniency($z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.ConstructorDetector",
    "methodName": "singleArgCreatorDefaultsToDelegating",
    "signature": "boolean singleArgCreatorDefaultsToDelegating()",
    "visibility": "public",
    "body": "{\r\n    return _singleArgMode \u003d\u003d SingleArgConstructor.DELEGATING;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ConstructorDetector\n  $r2 \u003d ConstructorDetector$SingleArgConstructor _singleArgMode\u003e\n  $r1 \u003d ConstructorDetector$SingleArgConstructor DELEGATING\u003e\n  if ($r2 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.ConstructorDetector",
    "methodName": "singleArgCreatorDefaultsToProperties",
    "signature": "boolean singleArgCreatorDefaultsToProperties()",
    "visibility": "public",
    "body": "{\r\n    return _singleArgMode \u003d\u003d SingleArgConstructor.PROPERTIES;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ConstructorDetector\n  $r2 \u003d ConstructorDetector$SingleArgConstructor _singleArgMode\u003e\n  $r1 \u003d ConstructorDetector$SingleArgConstructor PROPERTIES\u003e\n  if ($r2 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.ConstructorDetector",
    "methodName": "shouldIntrospectorImplicitConstructors",
    "signature": "boolean shouldIntrospectorImplicitConstructors(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    // May not allow implicit creator introspection at all:\r\n    if (_requireCtorAnnotation) {\r\n        return false;\r\n    }\r\n    // But if it is allowed, may further limit use for JDK types\r\n    if (!_allowJDKTypeCtors) {\r\n        if (ClassUtil.isJDKClass(rawType)) {\r\n            // 18-Sep-2020, tatu: Looks like must make an exception for Exception\r\n            //    types (ha!) -- at this point, single-String-arg constructor\r\n            //    is to be auto-detected\r\n            if (!Throwable.class.isAssignableFrom(rawType)) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 !\u003d 0) → B3 | else → B6",
      "B3 : If($z2 \u003d\u003d false) → B4 | else → B6",
      "B4 : If($z3 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  ConstructorDetector\n  Class\n  $z0 \u003d ConstructorDetector: boolean _requireCtorAnnotation\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z1 \u003d ConstructorDetector: boolean _allowJDKTypeCtors\u003e\n  if ($z1 !\u003d 0) goto B3 else B6\n}",
      "B3 {\n  $z2 \u003d ClassUtil.isJDKClass(r1)\n  if ($z2 \u003d\u003d false) goto B4 else B6\n}",
      "B4 {\n  $r2 \u003d class \"Ljava/lang/Throwable;\"\n  $z3 \u003d $r2.isAssignableFrom(r1)\n  if ($z3 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.DatatypeFeatures",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.cfg.DatatypeFeatures \u0027with\u0027(com.fasterxml.jackson.databind.cfg.DatatypeFeature)",
    "visibility": "public",
    "body": "{\r\n    final int mask \u003d f.getMask();\r\n    switch(f.featureIndex()) {\r\n        case 0:\r\n            return _with(_enabledFor1 | mask, _explicitFor1 | mask, _enabledFor2, _explicitFor2);\r\n        case 1:\r\n            return _with(_enabledFor1, _explicitFor1, _enabledFor2 | mask, _explicitFor2 | mask);\r\n        default:\r\n            VersionUtil.throwInternal();\r\n            return this;\r\n    }\r\n}",
    "nodes": 4,
    "edges": 3,
    "cc": 1,
    "flowSummary": [
      "B0 : If(switch-on $i1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DatatypeFeatures\n  DatatypeFeature\n  i0 \u003d r0.getMask()\n  $i1 \u003d r0.featureIndex()\n  VersionUtil: void throwInternal()\u003e(); }\n}",
      "B1 {\n  $i8 \u003d DatatypeFeatures: int _enabledFor1\u003e\n  $i13 \u003d $i8 | i0\n  $i9 \u003d DatatypeFeatures: int _explicitFor1\u003e\n  $i12 \u003d $i9 | i0\n  $i11 \u003d DatatypeFeatures: int _enabledFor2\u003e\n  $i10 \u003d DatatypeFeatures: int _explicitFor2\u003e\n  $r3 \u003d r1._with($i13, $i12, $i11, $i10)\n  return\n}",
      "B2 {\n  $i7 \u003d DatatypeFeatures: int _enabledFor1\u003e\n  $i6 \u003d DatatypeFeatures: int _explicitFor1\u003e\n  $i2 \u003d DatatypeFeatures: int _enabledFor2\u003e\n  $i5 \u003d $i2 | i0\n  $i3 \u003d DatatypeFeatures: int _explicitFor2\u003e\n  $i4 \u003d $i3 | i0\n  $r2 \u003d r1._with($i7, $i6, $i5, $i4)\n  return\n}",
      "B3 {\n  VersionUtil.throwInternal()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DatatypeFeatures#_with(...4)",
        "body": "{\r\n    if ((_enabledFor1 \u003d\u003d enabledFor1) \u0026\u0026 (_explicitFor1 \u003d\u003d explicitFor1) \u0026\u0026 (_enabledFor2 \u003d\u003d enabledFor2) \u0026\u0026 (_explicitFor2 \u003d\u003d explicitFor2)) {\r\n        return this;\r\n    }\r\n    return new DatatypeFeatures(enabledFor1, explicitFor1, enabledFor2, explicitFor2);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.DatatypeFeatures",
    "methodName": "withFeatures",
    "signature": "com.fasterxml.jackson.databind.cfg.DatatypeFeatures withFeatures(com.fasterxml.jackson.databind.cfg.DatatypeFeature[])",
    "visibility": "public",
    "body": "{\r\n    int mask \u003d _calcMask(features);\r\n    if (mask \u003d\u003d 0) {\r\n        return this;\r\n    }\r\n    switch(features[0].featureIndex()) {\r\n        case 0:\r\n            return _with(_enabledFor1 | mask, _explicitFor1 | mask, _enabledFor2, _explicitFor2);\r\n        case 1:\r\n            return _with(_enabledFor1, _explicitFor1, _enabledFor2 | mask, _explicitFor2 | mask);\r\n        default:\r\n            VersionUtil.throwInternal();\r\n            return this;\r\n    }\r\n}",
    "nodes": 6,
    "edges": 5,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 !\u003d 0) → B1 | else → B2",
      "B2 : If(switch-on $i1) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DatatypeFeatures\n  DatatypeFeature[]\n  i0 \u003d DatatypeFeatures._calcMask(r0)\n  if (i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0[0]\n  $i1 \u003d $r1.featureIndex()\n  VersionUtil: void throwInternal()\u003e(); }\n}",
      "B3 {\n  $i8 \u003d DatatypeFeatures: int _enabledFor1\u003e\n  $i13 \u003d $i8 | i0\n  $i9 \u003d DatatypeFeatures: int _explicitFor1\u003e\n  $i12 \u003d $i9 | i0\n  $i11 \u003d DatatypeFeatures: int _enabledFor2\u003e\n  $i10 \u003d DatatypeFeatures: int _explicitFor2\u003e\n  $r4 \u003d r2._with($i13, $i12, $i11, $i10)\n  return\n}",
      "B4 {\n  $i7 \u003d DatatypeFeatures: int _enabledFor1\u003e\n  $i6 \u003d DatatypeFeatures: int _explicitFor1\u003e\n  $i2 \u003d DatatypeFeatures: int _enabledFor2\u003e\n  $i5 \u003d $i2 | i0\n  $i3 \u003d DatatypeFeatures: int _explicitFor2\u003e\n  $i4 \u003d $i3 | i0\n  $r3 \u003d r2._with($i7, $i6, $i5, $i4)\n  return\n}",
      "B5 {\n  VersionUtil.throwInternal()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B2 --\u003e B5",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DatatypeFeatures#_calcMask(...1)",
        "body": "{\r\n    int mask \u003d 0;\r\n    for (DatatypeFeature f : features) {\r\n        mask |\u003d f.getMask();\r\n    }\r\n    return mask;\r\n}"
      },
      {
        "name": "DatatypeFeatures#_with(...4)",
        "body": "{\r\n    if ((_enabledFor1 \u003d\u003d enabledFor1) \u0026\u0026 (_explicitFor1 \u003d\u003d explicitFor1) \u0026\u0026 (_enabledFor2 \u003d\u003d enabledFor2) \u0026\u0026 (_explicitFor2 \u003d\u003d explicitFor2)) {\r\n        return this;\r\n    }\r\n    return new DatatypeFeatures(enabledFor1, explicitFor1, enabledFor2, explicitFor2);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.DatatypeFeatures",
    "methodName": "without",
    "signature": "com.fasterxml.jackson.databind.cfg.DatatypeFeatures without(com.fasterxml.jackson.databind.cfg.DatatypeFeature)",
    "visibility": "public",
    "body": "{\r\n    final int mask \u003d f.getMask();\r\n    switch(f.featureIndex()) {\r\n        case 0:\r\n            return _with(_enabledFor1 \u0026 ~mask, _explicitFor1 | mask, _enabledFor2, _explicitFor2);\r\n        case 1:\r\n            return _with(_enabledFor1, _explicitFor1, _enabledFor2 \u0026 ~mask, _explicitFor2 | mask);\r\n        default:\r\n            VersionUtil.throwInternal();\r\n            return this;\r\n    }\r\n}",
    "nodes": 4,
    "edges": 3,
    "cc": 1,
    "flowSummary": [
      "B0 : If(switch-on $i1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DatatypeFeatures\n  DatatypeFeature\n  i0 \u003d r0.getMask()\n  $i1 \u003d r0.featureIndex()\n  VersionUtil: void throwInternal()\u003e(); }\n}",
      "B1 {\n  $i10 \u003d DatatypeFeatures: int _enabledFor1\u003e\n  $i17 \u003d (int) -1\n  $i9 \u003d i0 ^ $i17\n  $i15 \u003d $i10 \u0026 $i9\n  $i11 \u003d DatatypeFeatures: int _explicitFor1\u003e\n  $i14 \u003d $i11 | i0\n  $i13 \u003d DatatypeFeatures: int _enabledFor2\u003e\n  $i12 \u003d DatatypeFeatures: int _explicitFor2\u003e\n  $r3 \u003d r1._with($i15, $i14, $i13, $i12)\n  return\n}",
      "B2 {\n  $i8 \u003d DatatypeFeatures: int _enabledFor1\u003e\n  $i7 \u003d DatatypeFeatures: int _explicitFor1\u003e\n  $i3 \u003d DatatypeFeatures: int _enabledFor2\u003e\n  $i19 \u003d (int) -1\n  $i2 \u003d i0 ^ $i19\n  $i6 \u003d $i3 \u0026 $i2\n  $i4 \u003d DatatypeFeatures: int _explicitFor2\u003e\n  $i5 \u003d $i4 | i0\n  $r2 \u003d r1._with($i8, $i7, $i6, $i5)\n  return\n}",
      "B3 {\n  VersionUtil.throwInternal()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DatatypeFeatures#_with(...4)",
        "body": "{\r\n    if ((_enabledFor1 \u003d\u003d enabledFor1) \u0026\u0026 (_explicitFor1 \u003d\u003d explicitFor1) \u0026\u0026 (_enabledFor2 \u003d\u003d enabledFor2) \u0026\u0026 (_explicitFor2 \u003d\u003d explicitFor2)) {\r\n        return this;\r\n    }\r\n    return new DatatypeFeatures(enabledFor1, explicitFor1, enabledFor2, explicitFor2);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.DatatypeFeatures",
    "methodName": "withoutFeatures",
    "signature": "com.fasterxml.jackson.databind.cfg.DatatypeFeatures withoutFeatures(com.fasterxml.jackson.databind.cfg.DatatypeFeature[])",
    "visibility": "public",
    "body": "{\r\n    int mask \u003d _calcMask(features);\r\n    if (mask \u003d\u003d 0) {\r\n        return this;\r\n    }\r\n    switch(features[0].featureIndex()) {\r\n        case 0:\r\n            return _with(_enabledFor1 \u0026 ~mask, _explicitFor1 | mask, _enabledFor2, _explicitFor2);\r\n        case 1:\r\n            return _with(_enabledFor1, _explicitFor1, _enabledFor2 \u0026 ~mask, _explicitFor2 | mask);\r\n        default:\r\n            VersionUtil.throwInternal();\r\n            return this;\r\n    }\r\n}",
    "nodes": 6,
    "edges": 5,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 !\u003d 0) → B1 | else → B2",
      "B2 : If(switch-on $i1) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DatatypeFeatures\n  DatatypeFeature[]\n  i0 \u003d DatatypeFeatures._calcMask(r0)\n  if (i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0[0]\n  $i1 \u003d $r1.featureIndex()\n  VersionUtil: void throwInternal()\u003e(); }\n}",
      "B3 {\n  $i10 \u003d DatatypeFeatures: int _enabledFor1\u003e\n  $i17 \u003d (int) -1\n  $i9 \u003d i0 ^ $i17\n  $i15 \u003d $i10 \u0026 $i9\n  $i11 \u003d DatatypeFeatures: int _explicitFor1\u003e\n  $i14 \u003d $i11 | i0\n  $i13 \u003d DatatypeFeatures: int _enabledFor2\u003e\n  $i12 \u003d DatatypeFeatures: int _explicitFor2\u003e\n  $r4 \u003d r2._with($i15, $i14, $i13, $i12)\n  return\n}",
      "B4 {\n  $i8 \u003d DatatypeFeatures: int _enabledFor1\u003e\n  $i7 \u003d DatatypeFeatures: int _explicitFor1\u003e\n  $i3 \u003d DatatypeFeatures: int _enabledFor2\u003e\n  $i19 \u003d (int) -1\n  $i2 \u003d i0 ^ $i19\n  $i6 \u003d $i3 \u0026 $i2\n  $i4 \u003d DatatypeFeatures: int _explicitFor2\u003e\n  $i5 \u003d $i4 | i0\n  $r3 \u003d r2._with($i8, $i7, $i6, $i5)\n  return\n}",
      "B5 {\n  VersionUtil.throwInternal()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B2 --\u003e B5",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DatatypeFeatures#_calcMask(...1)",
        "body": "{\r\n    int mask \u003d 0;\r\n    for (DatatypeFeature f : features) {\r\n        mask |\u003d f.getMask();\r\n    }\r\n    return mask;\r\n}"
      },
      {
        "name": "DatatypeFeatures#_with(...4)",
        "body": "{\r\n    if ((_enabledFor1 \u003d\u003d enabledFor1) \u0026\u0026 (_explicitFor1 \u003d\u003d explicitFor1) \u0026\u0026 (_enabledFor2 \u003d\u003d enabledFor2) \u0026\u0026 (_explicitFor2 \u003d\u003d explicitFor2)) {\r\n        return this;\r\n    }\r\n    return new DatatypeFeatures(enabledFor1, explicitFor1, enabledFor2, explicitFor2);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.DatatypeFeatures",
    "methodName": "isEnabled",
    "signature": "boolean isEnabled(com.fasterxml.jackson.databind.cfg.DatatypeFeature)",
    "visibility": "public",
    "body": "{\r\n    switch(f.featureIndex()) {\r\n        case 0:\r\n            return f.enabledIn(_enabledFor1);\r\n        case 1:\r\n            return f.enabledIn(_enabledFor2);\r\n        default:\r\n            VersionUtil.throwInternal();\r\n            return false;\r\n    }\r\n}",
    "nodes": 4,
    "edges": 3,
    "cc": 1,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DatatypeFeatures\n  DatatypeFeature\n  $i0 \u003d r0.featureIndex()\n  VersionUtil: void throwInternal()\u003e(); }\n}",
      "B1 {\n  $i2 \u003d DatatypeFeatures: int _enabledFor1\u003e\n  $z1 \u003d r0.enabledIn($i2)\n  return\n}",
      "B2 {\n  $i1 \u003d DatatypeFeatures: int _enabledFor2\u003e\n  $z0 \u003d r0.enabledIn($i1)\n  return\n}",
      "B3 {\n  VersionUtil.throwInternal()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.DatatypeFeatures",
    "methodName": "isExplicitlySet",
    "signature": "boolean isExplicitlySet(com.fasterxml.jackson.databind.cfg.DatatypeFeature)",
    "visibility": "public",
    "body": "{\r\n    switch(f.featureIndex()) {\r\n        case 0:\r\n            return f.enabledIn(_explicitFor1);\r\n        case 1:\r\n            return f.enabledIn(_explicitFor2);\r\n        default:\r\n            VersionUtil.throwInternal();\r\n            return false;\r\n    }\r\n}",
    "nodes": 4,
    "edges": 3,
    "cc": 1,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DatatypeFeatures\n  DatatypeFeature\n  $i0 \u003d r0.featureIndex()\n  VersionUtil: void throwInternal()\u003e(); }\n}",
      "B1 {\n  $i2 \u003d DatatypeFeatures: int _explicitFor1\u003e\n  $z1 \u003d r0.enabledIn($i2)\n  return\n}",
      "B2 {\n  $i1 \u003d DatatypeFeatures: int _explicitFor2\u003e\n  $z0 \u003d r0.enabledIn($i1)\n  return\n}",
      "B3 {\n  VersionUtil.throwInternal()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.DatatypeFeatures",
    "methodName": "isExplicitlyEnabled",
    "signature": "boolean isExplicitlyEnabled(com.fasterxml.jackson.databind.cfg.DatatypeFeature)",
    "visibility": "public",
    "body": "{\r\n    switch(f.featureIndex()) {\r\n        case 0:\r\n            return f.enabledIn(_explicitFor1 \u0026 _enabledFor1);\r\n        case 1:\r\n            return f.enabledIn(_explicitFor2 \u0026 _enabledFor2);\r\n        default:\r\n            VersionUtil.throwInternal();\r\n            return false;\r\n    }\r\n}",
    "nodes": 4,
    "edges": 3,
    "cc": 1,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DatatypeFeatures\n  DatatypeFeature\n  $i0 \u003d r0.featureIndex()\n  VersionUtil: void throwInternal()\u003e(); }\n}",
      "B1 {\n  $i5 \u003d DatatypeFeatures: int _explicitFor1\u003e\n  $i4 \u003d DatatypeFeatures: int _enabledFor1\u003e\n  $i6 \u003d $i5 \u0026 $i4\n  $z1 \u003d r0.enabledIn($i6)\n  return\n}",
      "B2 {\n  $i2 \u003d DatatypeFeatures: int _explicitFor2\u003e\n  $i1 \u003d DatatypeFeatures: int _enabledFor2\u003e\n  $i3 \u003d $i2 \u0026 $i1\n  $z0 \u003d r0.enabledIn($i3)\n  return\n}",
      "B3 {\n  VersionUtil.throwInternal()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.DatatypeFeatures",
    "methodName": "isExplicitlyDisabled",
    "signature": "boolean isExplicitlyDisabled(com.fasterxml.jackson.databind.cfg.DatatypeFeature)",
    "visibility": "public",
    "body": "{\r\n    switch(f.featureIndex()) {\r\n        case 0:\r\n            return f.enabledIn(_explicitFor1 \u0026 ~_enabledFor1);\r\n        case 1:\r\n            return f.enabledIn(_explicitFor2 \u0026 ~_enabledFor2);\r\n        default:\r\n            VersionUtil.throwInternal();\r\n            return false;\r\n    }\r\n}",
    "nodes": 4,
    "edges": 3,
    "cc": 1,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DatatypeFeatures\n  DatatypeFeature\n  $i0 \u003d r0.featureIndex()\n  VersionUtil: void throwInternal()\u003e(); }\n}",
      "B1 {\n  $i7 \u003d DatatypeFeatures: int _explicitFor1\u003e\n  $i5 \u003d DatatypeFeatures: int _enabledFor1\u003e\n  $i10 \u003d (int) -1\n  $i6 \u003d $i5 ^ $i10\n  $i8 \u003d $i7 \u0026 $i6\n  $z1 \u003d r0.enabledIn($i8)\n  return\n}",
      "B2 {\n  $i3 \u003d DatatypeFeatures: int _explicitFor2\u003e\n  $i1 \u003d DatatypeFeatures: int _enabledFor2\u003e\n  $i12 \u003d (int) -1\n  $i2 \u003d $i1 ^ $i12\n  $i4 \u003d $i3 \u0026 $i2\n  $z0 \u003d r0.enabledIn($i4)\n  return\n}",
      "B3 {\n  VersionUtil.throwInternal()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.DatatypeFeatures",
    "methodName": "getExplicitState",
    "signature": "java.lang.Boolean getExplicitState(com.fasterxml.jackson.databind.cfg.DatatypeFeature)",
    "visibility": "public",
    "body": "{\r\n    switch(f.featureIndex()) {\r\n        case 0:\r\n            if (f.enabledIn(_explicitFor1)) {\r\n                return f.enabledIn(_enabledFor1);\r\n            }\r\n            return null;\r\n        case 1:\r\n            if (f.enabledIn(_explicitFor2)) {\r\n                return f.enabledIn(_enabledFor2);\r\n            }\r\n            return null;\r\n        default:\r\n            VersionUtil.throwInternal();\r\n            return null;\r\n    }\r\n}",
    "nodes": 8,
    "edges": 7,
    "cc": 1,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B4",
      "B1 : If($z2 \u003d\u003d false) → B2 | else → B3",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  DatatypeFeatures\n  DatatypeFeature\n  $i0 \u003d r0.featureIndex()\n  VersionUtil: void throwInternal()\u003e(); }\n}",
      "B1 {\n  $i3 \u003d DatatypeFeatures: int _explicitFor1\u003e\n  $z2 \u003d r0.enabledIn($i3)\n  if ($z2 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $i4 \u003d DatatypeFeatures: int _enabledFor1\u003e\n  $z3 \u003d r0.enabledIn($i4)\n  $r3 \u003d Boolean.valueOf($z3)\n  return\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i1 \u003d DatatypeFeatures: int _explicitFor2\u003e\n  $z0 \u003d r0.enabledIn($i1)\n  if ($z0 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $i2 \u003d DatatypeFeatures: int _enabledFor2\u003e\n  $z1 \u003d r0.enabledIn($i2)\n  $r2 \u003d Boolean.valueOf($z1)\n  return\n}",
      "B6 {\n  return\n}",
      "B7 {\n  VersionUtil.throwInternal()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B0 --\u003e B7",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "methodName": "withAdditionalDeserializers",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig withAdditionalDeserializers(com.fasterxml.jackson.databind.deser.Deserializers)",
    "visibility": "public",
    "body": "{\r\n    if (additional \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Cannot pass null Deserializers\");\r\n    }\r\n    Deserializers[] all \u003d ArrayBuilders.insertInListNoDup(_additionalDeserializers, additional);\r\n    return new DeserializerFactoryConfig(all, _additionalKeyDeserializers, _modifiers, _abstractTypeResolvers, _valueInstantiators);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializerFactoryConfig\n  Deserializers\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Cannot pass null Deserializers\")\n  throw $r10\n}",
      "B2 {\n  $r2 \u003d Deserializers[] _additionalDeserializers\u003e\n  $r3 \u003d ArrayBuilders.insertInListNoDup($r2, r0)\n  r4 \u003d Deserializers[]) $r3\n  $r5 \u003d DeserializerFactoryConfig\n  $r9 \u003d KeyDeserializers[] _additionalKeyDeserializers\u003e\n  $r8 \u003d BeanDeserializerModifier[] _modifiers\u003e\n  $r7 \u003d AbstractTypeResolver[] _abstractTypeResolvers\u003e\n  $r6 \u003d ValueInstantiators[] _valueInstantiators\u003e\n  new DeserializerFactoryConfig(r4, $r9, $r8, $r7, $r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "methodName": "withAdditionalKeyDeserializers",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig withAdditionalKeyDeserializers(com.fasterxml.jackson.databind.deser.KeyDeserializers)",
    "visibility": "public",
    "body": "{\r\n    if (additional \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Cannot pass null KeyDeserializers\");\r\n    }\r\n    KeyDeserializers[] all \u003d ArrayBuilders.insertInListNoDup(_additionalKeyDeserializers, additional);\r\n    return new DeserializerFactoryConfig(_additionalDeserializers, all, _modifiers, _abstractTypeResolvers, _valueInstantiators);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializerFactoryConfig\n  KeyDeserializers\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Cannot pass null KeyDeserializers\")\n  throw $r10\n}",
      "B2 {\n  $r2 \u003d KeyDeserializers[] _additionalKeyDeserializers\u003e\n  $r3 \u003d ArrayBuilders.insertInListNoDup($r2, r0)\n  r4 \u003d KeyDeserializers[]) $r3\n  $r5 \u003d DeserializerFactoryConfig\n  $r9 \u003d Deserializers[] _additionalDeserializers\u003e\n  $r8 \u003d BeanDeserializerModifier[] _modifiers\u003e\n  $r7 \u003d AbstractTypeResolver[] _abstractTypeResolvers\u003e\n  $r6 \u003d ValueInstantiators[] _valueInstantiators\u003e\n  new DeserializerFactoryConfig($r9, r4, $r8, $r7, $r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "methodName": "withDeserializerModifier",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig withDeserializerModifier(com.fasterxml.jackson.databind.deser.BeanDeserializerModifier)",
    "visibility": "public",
    "body": "{\r\n    if (modifier \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Cannot pass null modifier\");\r\n    }\r\n    BeanDeserializerModifier[] all \u003d ArrayBuilders.insertInListNoDup(_modifiers, modifier);\r\n    return new DeserializerFactoryConfig(_additionalDeserializers, _additionalKeyDeserializers, all, _abstractTypeResolvers, _valueInstantiators);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializerFactoryConfig\n  BeanDeserializerModifier\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Cannot pass null modifier\")\n  throw $r10\n}",
      "B2 {\n  $r2 \u003d BeanDeserializerModifier[] _modifiers\u003e\n  $r3 \u003d ArrayBuilders.insertInListNoDup($r2, r0)\n  r4 \u003d BeanDeserializerModifier[]) $r3\n  $r5 \u003d DeserializerFactoryConfig\n  $r9 \u003d Deserializers[] _additionalDeserializers\u003e\n  $r8 \u003d KeyDeserializers[] _additionalKeyDeserializers\u003e\n  $r7 \u003d AbstractTypeResolver[] _abstractTypeResolvers\u003e\n  $r6 \u003d ValueInstantiators[] _valueInstantiators\u003e\n  new DeserializerFactoryConfig($r9, $r8, r4, $r7, $r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "methodName": "withAbstractTypeResolver",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig withAbstractTypeResolver(com.fasterxml.jackson.databind.AbstractTypeResolver)",
    "visibility": "public",
    "body": "{\r\n    if (resolver \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Cannot pass null resolver\");\r\n    }\r\n    AbstractTypeResolver[] all \u003d ArrayBuilders.insertInListNoDup(_abstractTypeResolvers, resolver);\r\n    return new DeserializerFactoryConfig(_additionalDeserializers, _additionalKeyDeserializers, _modifiers, all, _valueInstantiators);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializerFactoryConfig\n  AbstractTypeResolver\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Cannot pass null resolver\")\n  throw $r10\n}",
      "B2 {\n  $r2 \u003d AbstractTypeResolver[] _abstractTypeResolvers\u003e\n  $r3 \u003d ArrayBuilders.insertInListNoDup($r2, r0)\n  r4 \u003d AbstractTypeResolver[]) $r3\n  $r5 \u003d DeserializerFactoryConfig\n  $r9 \u003d Deserializers[] _additionalDeserializers\u003e\n  $r8 \u003d KeyDeserializers[] _additionalKeyDeserializers\u003e\n  $r7 \u003d BeanDeserializerModifier[] _modifiers\u003e\n  $r6 \u003d ValueInstantiators[] _valueInstantiators\u003e\n  new DeserializerFactoryConfig($r9, $r8, $r7, r4, $r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "methodName": "withValueInstantiators",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig withValueInstantiators(com.fasterxml.jackson.databind.deser.ValueInstantiators)",
    "visibility": "public",
    "body": "{\r\n    if (instantiators \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Cannot pass null resolver\");\r\n    }\r\n    ValueInstantiators[] all \u003d ArrayBuilders.insertInListNoDup(_valueInstantiators, instantiators);\r\n    return new DeserializerFactoryConfig(_additionalDeserializers, _additionalKeyDeserializers, _modifiers, _abstractTypeResolvers, all);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializerFactoryConfig\n  ValueInstantiators\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Cannot pass null resolver\")\n  throw $r10\n}",
      "B2 {\n  $r2 \u003d ValueInstantiators[] _valueInstantiators\u003e\n  $r3 \u003d ArrayBuilders.insertInListNoDup($r2, r0)\n  r4 \u003d ValueInstantiators[]) $r3\n  $r5 \u003d DeserializerFactoryConfig\n  $r9 \u003d Deserializers[] _additionalDeserializers\u003e\n  $r8 \u003d KeyDeserializers[] _additionalKeyDeserializers\u003e\n  $r7 \u003d BeanDeserializerModifier[] _modifiers\u003e\n  $r6 \u003d AbstractTypeResolver[] _abstractTypeResolvers\u003e\n  new DeserializerFactoryConfig($r9, $r8, $r7, $r6, r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "methodName": "hasDeserializers",
    "signature": "boolean hasDeserializers()",
    "visibility": "public",
    "body": "{\r\n    return _additionalDeserializers.length \u003e 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializerFactoryConfig\n  $r1 \u003d Deserializers[] _additionalDeserializers\u003e\n  $i0 \u003d lengthof $r1\n  if ($i0 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "methodName": "hasKeyDeserializers",
    "signature": "boolean hasKeyDeserializers()",
    "visibility": "public",
    "body": "{\r\n    return _additionalKeyDeserializers.length \u003e 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializerFactoryConfig\n  $r1 \u003d KeyDeserializers[] _additionalKeyDeserializers\u003e\n  $i0 \u003d lengthof $r1\n  if ($i0 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "methodName": "hasDeserializerModifiers",
    "signature": "boolean hasDeserializerModifiers()",
    "visibility": "public",
    "body": "{\r\n    return _modifiers.length \u003e 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializerFactoryConfig\n  $r1 \u003d BeanDeserializerModifier[] _modifiers\u003e\n  $i0 \u003d lengthof $r1\n  if ($i0 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "methodName": "hasAbstractTypeResolvers",
    "signature": "boolean hasAbstractTypeResolvers()",
    "visibility": "public",
    "body": "{\r\n    return _abstractTypeResolvers.length \u003e 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializerFactoryConfig\n  $r1 \u003d AbstractTypeResolver[] _abstractTypeResolvers\u003e\n  $i0 \u003d lengthof $r1\n  if ($i0 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "methodName": "hasValueInstantiators",
    "signature": "boolean hasValueInstantiators()",
    "visibility": "public",
    "body": "{\r\n    return _valueInstantiators.length \u003e 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializerFactoryConfig\n  $r1 \u003d ValueInstantiators[] _valueInstantiators\u003e\n  $i0 \u003d lengthof $r1\n  if ($i0 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.EnumFeature",
    "methodName": "enabledIn",
    "signature": "boolean enabledIn(int)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  EnumFeature\n  i0 :\u003d @parameter0: int\n  $i1 \u003d EnumFeature: int _mask\u003e\n  $i2 \u003d i0 \u0026 $i1\n  if ($i2 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.JsonNodeFeature",
    "methodName": "enabledIn",
    "signature": "boolean enabledIn(int)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JsonNodeFeature\n  i0 :\u003d @parameter0: int\n  $i1 \u003d JsonNodeFeature: int _mask\u003e\n  $i2 \u003d i0 \u0026 $i1\n  if ($i2 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "methodName": "withAdditionalSerializers",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig withAdditionalSerializers(com.fasterxml.jackson.databind.ser.Serializers)",
    "visibility": "public",
    "body": "{\r\n    if (additional \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Cannot pass null Serializers\");\r\n    }\r\n    Serializers[] all \u003d ArrayBuilders.insertInListNoDup(_additionalSerializers, additional);\r\n    return new SerializerFactoryConfig(all, _additionalKeySerializers, _modifiers);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializerFactoryConfig\n  Serializers\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Cannot pass null Serializers\")\n  throw $r8\n}",
      "B2 {\n  $r2 \u003d Serializers[] _additionalSerializers\u003e\n  $r3 \u003d ArrayBuilders.insertInListNoDup($r2, r0)\n  r4 \u003d Serializers[]) $r3\n  $r5 \u003d SerializerFactoryConfig\n  $r7 \u003d Serializers[] _additionalKeySerializers\u003e\n  $r6 \u003d BeanSerializerModifier[] _modifiers\u003e\n  new SerializerFactoryConfig(r4, $r7, $r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "methodName": "withAdditionalKeySerializers",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig withAdditionalKeySerializers(com.fasterxml.jackson.databind.ser.Serializers)",
    "visibility": "public",
    "body": "{\r\n    if (additional \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Cannot pass null Serializers\");\r\n    }\r\n    Serializers[] all \u003d ArrayBuilders.insertInListNoDup(_additionalKeySerializers, additional);\r\n    return new SerializerFactoryConfig(_additionalSerializers, all, _modifiers);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializerFactoryConfig\n  Serializers\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Cannot pass null Serializers\")\n  throw $r8\n}",
      "B2 {\n  $r2 \u003d Serializers[] _additionalKeySerializers\u003e\n  $r3 \u003d ArrayBuilders.insertInListNoDup($r2, r0)\n  r4 \u003d Serializers[]) $r3\n  $r5 \u003d SerializerFactoryConfig\n  $r7 \u003d Serializers[] _additionalSerializers\u003e\n  $r6 \u003d BeanSerializerModifier[] _modifiers\u003e\n  new SerializerFactoryConfig($r7, r4, $r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "methodName": "withSerializerModifier",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig withSerializerModifier(com.fasterxml.jackson.databind.ser.BeanSerializerModifier)",
    "visibility": "public",
    "body": "{\r\n    if (modifier \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Cannot pass null modifier\");\r\n    }\r\n    BeanSerializerModifier[] modifiers \u003d ArrayBuilders.insertInListNoDup(_modifiers, modifier);\r\n    return new SerializerFactoryConfig(_additionalSerializers, _additionalKeySerializers, modifiers);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializerFactoryConfig\n  BeanSerializerModifier\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Cannot pass null modifier\")\n  throw $r8\n}",
      "B2 {\n  $r2 \u003d BeanSerializerModifier[] _modifiers\u003e\n  $r3 \u003d ArrayBuilders.insertInListNoDup($r2, r0)\n  r4 \u003d BeanSerializerModifier[]) $r3\n  $r5 \u003d SerializerFactoryConfig\n  $r7 \u003d Serializers[] _additionalSerializers\u003e\n  $r6 \u003d Serializers[] _additionalKeySerializers\u003e\n  new SerializerFactoryConfig($r7, $r6, r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "methodName": "hasSerializers",
    "signature": "boolean hasSerializers()",
    "visibility": "public",
    "body": "{\r\n    return _additionalSerializers.length \u003e 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializerFactoryConfig\n  $r1 \u003d Serializers[] _additionalSerializers\u003e\n  $i0 \u003d lengthof $r1\n  if ($i0 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "methodName": "hasKeySerializers",
    "signature": "boolean hasKeySerializers()",
    "visibility": "public",
    "body": "{\r\n    return _additionalKeySerializers.length \u003e 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializerFactoryConfig\n  $r1 \u003d Serializers[] _additionalKeySerializers\u003e\n  $i0 \u003d lengthof $r1\n  if ($i0 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "methodName": "hasSerializerModifiers",
    "signature": "boolean hasSerializerModifiers()",
    "visibility": "public",
    "body": "{\r\n    return _modifiers.length \u003e 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializerFactoryConfig\n  $r1 \u003d BeanSerializerModifier[] _modifiers\u003e\n  $i0 \u003d lengthof $r1\n  if ($i0 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.AbstractDeserializer",
    "methodName": "createContextual",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer createContextual(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\r\n    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\r\n        final AnnotatedMember accessor \u003d property.getMember();\r\n        if (accessor !\u003d null) {\r\n            ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\r\n            if (objectIdInfo !\u003d null) {\r\n                // some code duplication here as well (from BeanDeserializerFactory)\r\n                JavaType idType;\r\n                ObjectIdGenerator\u003c?\u003e idGen;\r\n                SettableBeanProperty idProp \u003d null;\r\n                ObjectIdResolver resolver \u003d ctxt.objectIdResolverInstance(accessor, objectIdInfo);\r\n                // 2.1: allow modifications by \"id ref\" annotations as well:\r\n                objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\r\n                Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\r\n                if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\r\n                    PropertyName propName \u003d objectIdInfo.getPropertyName();\r\n                    idProp \u003d (_properties \u003d\u003d null) ? null : _properties.get(propName.getSimpleName());\r\n                    if (idProp \u003d\u003d null) {\r\n                        ctxt.reportBadDefinition(_baseType, String.format(\"Invalid Object Id definition for %s: cannot find property with name %s\", ClassUtil.nameOf(handledType()), ClassUtil.name(propName)));\r\n                    }\r\n                    // lgtm [java/dereferenced-value-may-be-null]\r\n                    idType \u003d idProp.getType();\r\n                    idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\r\n                    /*\r\n                         ctxt.reportBadDefinition(_baseType, String.format(\r\n/\r\n\"Invalid Object Id definition for abstract type %s: cannot use `PropertyGenerator` on polymorphic types using property annotation\",\r\nhandledType().getName()));\r\n*/\r\n                } else {\r\n                    // other types simpler\r\n                    resolver \u003d ctxt.objectIdResolverInstance(accessor, objectIdInfo);\r\n                    JavaType type \u003d ctxt.constructType(implClass);\r\n                    idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\r\n                    idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\r\n                }\r\n                JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\r\n                ObjectIdReader oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp, resolver);\r\n                return new AbstractDeserializer(this, oir, null);\r\n            }\r\n        }\r\n    }\r\n    if (_properties \u003d\u003d null) {\r\n        return this;\r\n    }\r\n    // Need to ensure properties are dropped at this point, regardless\r\n    return new AbstractDeserializer(this, _objectIdReader, null);\r\n}",
    "nodes": 16,
    "edges": 21,
    "cc": 7,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B13",
      "B1 : If(r1 \u003d\u003d null) → B2 | else → B13",
      "B2 : If(r6 \u003d\u003d null) → B3 | else → B13",
      "B3 : If(r26 \u003d\u003d null) → B4 | else → B13",
      "B4 : If(r7 !\u003d class \"Lcom/fasterxml/jackson/annotation/ObjectIdGenerators$PropertyGenerator;\") → B5 | else → B11",
      "B5 : If($r12 !\u003d null) → B6 | else → B7",
      "B8 : If($r31 !\u003d null) → B9 | else → B10",
      "B13 : If($r35 !\u003d null) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  AbstractDeserializer\n  DeserializationContext\n  BeanProperty\n  r1 \u003d r0.getAnnotationIntrospector()\n  if (r2 \u003d\u003d null) goto B1 else B13\n}",
      "B1 {\n  if (r1 \u003d\u003d null) goto B2 else B13\n}",
      "B2 {\n  r6 \u003d r2.getMember()\n  if (r6 \u003d\u003d null) goto B3 else B13\n}",
      "B3 {\n  r26 \u003d r1.findObjectIdInfo(r6)\n  if (r26 \u003d\u003d null) goto B4 else B13\n}",
      "B4 {\n  r27 \u003d null\n  r28 \u003d r0.objectIdResolverInstance(r6, r26)\n  r29 \u003d r1.findObjectReferenceInfo(r6, r26)\n  r7 \u003d r29.getGeneratorType()\n  if (r7 !\u003d class \"Lcom/fasterxml/jackson/annotation/ObjectIdGenerators$PropertyGenerator;\") goto B5 else B11\n}",
      "B5 {\n  r30 \u003d r29.getPropertyName()\n  $r12 \u003d Map _properties\u003e\n  if ($r12 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r31 \u003d null\n  goto B8\n}",
      "B7 {\n  $r13 \u003d Map _properties\u003e\n  $r14 \u003d r30.getSimpleName()\n  $r15 \u003d $r13.get($r14)\n  $r31 \u003d SettableBeanProperty) $r15\n}",
      "B8 {\n  r27 \u003d $r31\n  if ($r31 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  $r21 \u003d JavaType _baseType\u003e\n  $r20 \u003d Object)[2]\n  $r22 \u003d r3.handledType()\n  $r23 \u003d ClassUtil.nameOf($r22)\n  $r20[0] \u003d $r23\n  $r24 \u003d ClassUtil.name(r30)\n  $r20[1] \u003d $r24\n  $r25 \u003d String.format(\"Invalid Object Id definition for %s: cannot find property with name %s\", $r20)\n  r0.reportBadDefinition($r21, $r25)\n}",
      "B10 {\n  r32 \u003d r27.getType()\n  $r16 \u003d PropertyBasedObjectIdGenerator\n  $r17 \u003d r29.getScope()\n  new PropertyBasedObjectIdGenerator($r17)\n  r33 \u003d $r16\n  goto B12\n}",
      "B11 {\n  r28 \u003d r0.objectIdResolverInstance(r6, r29)\n  r34 \u003d r0.constructType(r7)\n  $r8 \u003d r0.getTypeFactory()\n  $r9 \u003d $r8.findTypeParameters(r34, class \"Lcom/fasterxml/jackson/annotation/ObjectIdGenerator;\")\n  r32 \u003d $r9[0]\n  r33 \u003d r0.objectIdGeneratorInstance(r6, r29)\n}",
      "B12 {\n  $r18 \u003d r0.findRootValueDeserializer(r32)\n  $r10 \u003d r29.getPropertyName()\n  $r19 \u003d ObjectIdReader.construct(r32, $r10, r33, $r18, r27, r28)\n  $r11 \u003d AbstractDeserializer\n  new AbstractDeserializer(r3, $r19, null)\n  return\n}",
      "B13 {\n  $r35 \u003d Map _properties\u003e\n  if ($r35 !\u003d null) goto B14 else B15\n}",
      "B14 {\n  return\n}",
      "B15 {\n  $r4 \u003d AbstractDeserializer\n  $r5 \u003d ObjectIdReader _objectIdReader\u003e\n  new AbstractDeserializer(r3, $r5, null)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B13",
      "B1 --\u003e B2",
      "B1 --\u003e B13",
      "B2 --\u003e B3",
      "B2 --\u003e B13",
      "B3 --\u003e B4",
      "B3 --\u003e B13",
      "B4 --\u003e B5",
      "B4 --\u003e B11",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AbstractDeserializer#handledType(...0)",
        "body": "{\r\n    return _baseType.getRawClass();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.AbstractDeserializer",
    "methodName": "findBackReference",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty findBackReference(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return (_backRefProperties \u003d\u003d null) ? null : _backRefProperties.get(logicalName);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AbstractDeserializer\n  String\n  $r1 \u003d Map _backRefProperties\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d null\n  goto B3\n}",
      "B2 {\n  $r3 \u003d Map _backRefProperties\u003e\n  $r4 \u003d $r3.get(r2)\n  $r5 \u003d SettableBeanProperty) $r4\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.AbstractDeserializer",
    "methodName": "deserializeWithType",
    "signature": "java.lang.Object deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)",
    "visibility": "public",
    "body": "{\r\n    // Hmmh. One tricky question; for scalar, is it an Object Id, or \"Natural\" type?\r\n    // for now, prefer Object Id:\r\n    if (_objectIdReader !\u003d null) {\r\n        JsonToken t \u003d p.currentToken();\r\n        if (t !\u003d null) {\r\n            // Most commonly, a scalar (int id, uuid String, ...)\r\n            if (t.isScalarValue()) {\r\n                return _deserializeFromObjectId(p, ctxt);\r\n            }\r\n            // but, with 2.5+, a simple Object-wrapped value also legal:\r\n            if (t \u003d\u003d JsonToken.START_OBJECT) {\r\n                t \u003d p.nextToken();\r\n            }\r\n            if ((t \u003d\u003d JsonToken.FIELD_NAME) \u0026\u0026 _objectIdReader.maySerializeAsObject() \u0026\u0026 _objectIdReader.isValidReferencePropertyName(p.currentName(), p)) {\r\n                return _deserializeFromObjectId(p, ctxt);\r\n            }\r\n        }\r\n    }\r\n    // First: support \"natural\" values (which are always serialized without type info!)\r\n    Object result \u003d _deserializeIfNatural(p, ctxt);\r\n    if (result !\u003d null) {\r\n        return result;\r\n    }\r\n    return typeDeserializer.deserializeTypedFromObject(p, ctxt);\r\n}",
    "nodes": 13,
    "edges": 17,
    "cc": 6,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B10",
      "B1 : If(r13 \u003d\u003d null) → B2 | else → B10",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If(r13 !\u003d $r6) → B5 | else → B6",
      "B6 : If(r13 !\u003d $r7) → B7 | else → B10",
      "B7 : If($z1 \u003d\u003d false) → B8 | else → B10",
      "B8 : If($z2 \u003d\u003d false) → B9 | else → B10",
      "B10 : If($r14 \u003d\u003d null) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  AbstractDeserializer\n  JsonParser\n  DeserializationContext\n  TypeDeserializer\n  $r1 \u003d ObjectIdReader _objectIdReader\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B10\n}",
      "B1 {\n  r13 \u003d r2.currentToken()\n  if (r13 \u003d\u003d null) goto B2 else B10\n}",
      "B2 {\n  $z0 \u003d r13.isScalarValue()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r12 \u003d r0._deserializeFromObjectId(r2, r3)\n  return\n}",
      "B4 {\n  $r6 \u003d JsonToken START_OBJECT\u003e\n  if (r13 !\u003d $r6) goto B5 else B6\n}",
      "B5 {\n  r13 \u003d r2.nextToken()\n}",
      "B6 {\n  $r7 \u003d JsonToken FIELD_NAME\u003e\n  if (r13 !\u003d $r7) goto B7 else B10\n}",
      "B7 {\n  $r8 \u003d ObjectIdReader _objectIdReader\u003e\n  $z1 \u003d $r8.maySerializeAsObject()\n  if ($z1 \u003d\u003d false) goto B8 else B10\n}",
      "B8 {\n  $r9 \u003d ObjectIdReader _objectIdReader\u003e\n  $r10 \u003d r2.currentName()\n  $z2 \u003d $r9.isValidReferencePropertyName($r10, r2)\n  if ($z2 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r11 \u003d r0._deserializeFromObjectId(r2, r3)\n  return\n}",
      "B10 {\n  $r14 \u003d r0._deserializeIfNatural(r2, r3)\n  if ($r14 \u003d\u003d null) goto B11 else B12\n}",
      "B11 {\n  return\n}",
      "B12 {\n  $r5 \u003d r4.deserializeTypedFromObject(r2, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B10",
      "B1 --\u003e B2",
      "B1 --\u003e B10",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AbstractDeserializer#_deserializeIfNatural(...2)",
        "body": "{\r\n    /* There is a chance we might be \"natural\" types\r\n         * (String, Boolean, Integer, Double), which do not include any type information...\r\n         * Care must be taken to only return this if return type matches, however.\r\n         * Finally, we may have to consider possibility of custom handlers for\r\n         * these values: but for now this should work ok.\r\n         */\r\n    switch(p.currentTokenId()) {\r\n        case JsonTokenId.ID_STRING:\r\n            if (_acceptString) {\r\n                return p.getText();\r\n            }\r\n            break;\r\n        case JsonTokenId.ID_NUMBER_INT:\r\n            if (_acceptInt) {\r\n                return p.getIntValue();\r\n            }\r\n            break;\r\n        case JsonTokenId.ID_NUMBER_FLOAT:\r\n            if (_acceptDouble) {\r\n                return Double.valueOf(p.getDoubleValue());\r\n            }\r\n            break;\r\n        case JsonTokenId.ID_TRUE:\r\n            if (_acceptBoolean) {\r\n                return Boolean.TRUE;\r\n            }\r\n            break;\r\n        case JsonTokenId.ID_FALSE:\r\n            if (_acceptBoolean) {\r\n                return Boolean.FALSE;\r\n            }\r\n            break;\r\n    }\r\n    return null;\r\n}"
      },
      {
        "name": "AbstractDeserializer#_deserializeFromObjectId(...2)",
        "body": "{\r\n    Object id \u003d _objectIdReader.readObjectReference(p, ctxt);\r\n    ReadableObjectId roid \u003d ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\r\n    // do we have it resolved?\r\n    Object pojo \u003d roid.resolve();\r\n    if (pojo \u003d\u003d null) {\r\n        // not yet; should wait...\r\n        throw new UnresolvedForwardReference(p, \"Could not resolve Object Id [\" + id + \"] -- unresolved forward-reference?\", p.currentLocation(), roid);\r\n    }\r\n    return pojo;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "methodName": "deserialize",
    "signature": "java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    // common case first\r\n    if (p.isExpectedStartObjectToken()) {\r\n        if (_vanillaProcessing) {\r\n            return vanillaDeserialize(p, ctxt, p.nextToken());\r\n        }\r\n        // 23-Sep-2015, tatu: This is wrong at some many levels, but for now... it is\r\n        //    what it is, including \"expected behavior\".\r\n        p.nextToken();\r\n        if (_objectIdReader !\u003d null) {\r\n            return deserializeWithObjectId(p, ctxt);\r\n        }\r\n        return deserializeFromObject(p, ctxt);\r\n    }\r\n    return _deserializeOther(p, ctxt, p.currentToken());\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B6",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B3 : If($r5 \u003d\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  BeanDeserializer\n  JsonParser\n  DeserializationContext\n  $z0 \u003d r0.isExpectedStartObjectToken()\n  if ($z0 \u003d\u003d false) goto B1 else B6\n}",
      "B1 {\n  $z1 \u003d BeanDeserializer: boolean _vanillaProcessing\u003e\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r8 \u003d r0.nextToken()\n  $r9 \u003d r1.vanillaDeserialize(r0, r2, $r8)\n  return\n}",
      "B3 {\n  r0.nextToken()\n  $r5 \u003d ObjectIdReader _objectIdReader\u003e\n  if ($r5 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r7 \u003d r1.deserializeWithObjectId(r0, r2)\n  return\n}",
      "B5 {\n  $r6 \u003d r1.deserializeFromObject(r0, r2)\n  return\n}",
      "B6 {\n  $r3 \u003d r0.currentToken()\n  $r4 \u003d r1._deserializeOther(r0, r2, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanDeserializer#deserializeWithObjectId(...2)",
        "body": "(source not found)"
      },
      {
        "name": "BeanDeserializer#deserializeFromObject(...2)",
        "body": "{\r\n    /* 09-Dec-2014, tatu: As per [databind#622], we need to allow Object Id references\r\n         *   to come in as JSON Objects as well; but for now assume they will\r\n         *   be simple, single-property references, which means that we can\r\n         *   recognize them without having to buffer anything.\r\n         *   Once again, if we must, we can do more complex handling with buffering,\r\n         *   but let\u0027s only do that if and when that becomes necessary.\r\n         */\r\n    if ((_objectIdReader !\u003d null) \u0026\u0026 _objectIdReader.maySerializeAsObject()) {\r\n        if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME) \u0026\u0026 _objectIdReader.isValidReferencePropertyName(p.currentName(), p)) {\r\n            return deserializeFromObjectId(p, ctxt);\r\n        }\r\n    }\r\n    if (_nonStandardCreation) {\r\n        if (_unwrappedPropertyHandler !\u003d null) {\r\n            return deserializeWithUnwrapped(p, ctxt);\r\n        }\r\n        if (_externalTypeIdHandler !\u003d null) {\r\n            return deserializeWithExternalTypeId(p, ctxt);\r\n        }\r\n        Object bean \u003d deserializeFromObjectUsingNonDefault(p, ctxt);\r\n        /* 27-May-2014, tatu: I don\u0027t think view processing would work\r\n             *   at this point, so commenting it out; but leaving in place\r\n             *   just in case I forgot something fundamental...\r\n             */\r\n        /*\r\n            if (_needViewProcesing) {\r\n                Class\u003c?\u003e view \u003d ctxt.getActiveView();\r\n                if (view !\u003d null) {\r\n                    return deserializeWithView(p, ctxt, bean, view);\r\n                }\r\n            }\r\n            */\r\n        return bean;\r\n    }\r\n    final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\r\n    // First: do we have native Object Ids (like YAML)?\r\n    if (p.canReadObjectId()) {\r\n        Object id \u003d p.getObjectId();\r\n        if (id !\u003d null) {\r\n            _handleTypedObjectId(p, ctxt, bean, id);\r\n        }\r\n    } else // [databind#3838]: since 2.16 Uniform handling of missing objectId\r\n    // only for the specific \"empty JSON Object\" case (and only for non-Native\r\n    // Object Ids, see [databind#4607]\r\n    if (_objectIdReader !\u003d null \u0026\u0026 p.hasTokenId(JsonTokenId.ID_END_OBJECT)) {\r\n        // [databind#4610]: check if we are to skip failure\r\n        if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS)) {\r\n            ctxt.reportUnresolvedObjectId(_objectIdReader, bean);\r\n        }\r\n    }\r\n    if (_injectables !\u003d null) {\r\n        injectValues(ctxt, bean);\r\n    }\r\n    if (_needViewProcesing) {\r\n        Class\u003c?\u003e view \u003d ctxt.getActiveView();\r\n        if (view !\u003d null) {\r\n            return deserializeWithView(p, ctxt, bean, view);\r\n        }\r\n    }\r\n    if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\r\n        // [databind#631]: Assign current value, to be accessible by custom serializers\r\n        // [databind#4184]: but only if we have at least one property\r\n        p.assignCurrentValue(bean);\r\n        String propName \u003d p.currentName();\r\n        do {\r\n            p.nextToken();\r\n            SettableBeanProperty prop \u003d _beanProperties.find(propName);\r\n            if (prop !\u003d null) {\r\n                // normal case\r\n                try {\r\n                    prop.deserializeAndSet(p, ctxt, bean);\r\n                } catch (Exception e) {\r\n                    wrapAndThrow(e, bean, propName, ctxt);\r\n                }\r\n                continue;\r\n            }\r\n            handleUnknownVanilla(p, ctxt, bean, propName);\r\n        } while ((propName \u003d p.nextFieldName()) !\u003d null);\r\n    }\r\n    return bean;\r\n}"
      },
      {
        "name": "BeanDeserializer#_deserializeOther(...3)",
        "body": "{\r\n    // and then others, generally requiring use of @JsonCreator\r\n    if (t !\u003d null) {\r\n        switch(t) {\r\n            case VALUE_STRING:\r\n                return deserializeFromString(p, ctxt);\r\n            case VALUE_NUMBER_INT:\r\n                return deserializeFromNumber(p, ctxt);\r\n            case VALUE_NUMBER_FLOAT:\r\n                return deserializeFromDouble(p, ctxt);\r\n            case VALUE_EMBEDDED_OBJECT:\r\n                return deserializeFromEmbedded(p, ctxt);\r\n            case VALUE_TRUE:\r\n            case VALUE_FALSE:\r\n                return deserializeFromBoolean(p, ctxt);\r\n            case VALUE_NULL:\r\n                return deserializeFromNull(p, ctxt);\r\n            case START_ARRAY:\r\n                // these only work if there\u0027s a (delegating) creator, or UNWRAP_SINGLE_ARRAY\r\n                return _deserializeFromArray(p, ctxt);\r\n            case FIELD_NAME:\r\n            case // added to resolve [JACKSON-319], possible related issues\r\n            END_OBJECT:\r\n                if (_vanillaProcessing) {\r\n                    return vanillaDeserialize(p, ctxt, t);\r\n                }\r\n                if (_objectIdReader !\u003d null) {\r\n                    return deserializeWithObjectId(p, ctxt);\r\n                }\r\n                return deserializeFromObject(p, ctxt);\r\n            default:\r\n        }\r\n    }\r\n    return ctxt.handleUnexpectedToken(getValueType(ctxt), p);\r\n}"
      },
      {
        "name": "BeanDeserializer#vanillaDeserialize(...3)",
        "body": "{\r\n    final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\r\n    if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\r\n        // [databind#631]: Assign current value, to be accessible by custom serializers\r\n        // [databind#4184]: but only if we have at least one property\r\n        p.assignCurrentValue(bean);\r\n        String propName \u003d p.currentName();\r\n        do {\r\n            p.nextToken();\r\n            SettableBeanProperty prop \u003d _beanProperties.find(propName);\r\n            if (prop !\u003d null) {\r\n                // normal case\r\n                try {\r\n                    prop.deserializeAndSet(p, ctxt, bean);\r\n                } catch (Exception e) {\r\n                    wrapAndThrow(e, bean, propName, ctxt);\r\n                }\r\n                continue;\r\n            }\r\n            handleUnknownVanilla(p, ctxt, bean, propName);\r\n        } while ((propName \u003d p.nextFieldName()) !\u003d null);\r\n    }\r\n    return bean;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "methodName": "deserialize",
    "signature": "java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    // [databind#631]: Assign current value, to be accessible by custom serializers\r\n    p.assignCurrentValue(bean);\r\n    if (_injectables !\u003d null) {\r\n        injectValues(ctxt, bean);\r\n    }\r\n    if (_unwrappedPropertyHandler !\u003d null) {\r\n        return deserializeWithUnwrapped(p, ctxt, bean);\r\n    }\r\n    if (_externalTypeIdHandler !\u003d null) {\r\n        return deserializeWithExternalTypeId(p, ctxt, bean);\r\n    }\r\n    String propName;\r\n    // 23-Mar-2010, tatu: In some cases, we start with full JSON object too...\r\n    if (p.isExpectedStartObjectToken()) {\r\n        propName \u003d p.nextFieldName();\r\n        if (propName \u003d\u003d null) {\r\n            return bean;\r\n        }\r\n    } else {\r\n        if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\r\n            propName \u003d p.currentName();\r\n        } else {\r\n            return bean;\r\n        }\r\n    }\r\n    if (_needViewProcesing) {\r\n        Class\u003c?\u003e view \u003d ctxt.getActiveView();\r\n        if (view !\u003d null) {\r\n            return deserializeWithView(p, ctxt, bean, view);\r\n        }\r\n    }\r\n    do {\r\n        p.nextToken();\r\n        SettableBeanProperty prop \u003d _beanProperties.find(propName);\r\n        if (prop !\u003d null) {\r\n            // normal case\r\n            try {\r\n                prop.deserializeAndSet(p, ctxt, bean);\r\n            } catch (Exception e) {\r\n                wrapAndThrow(e, bean, propName, ctxt);\r\n            }\r\n            continue;\r\n        }\r\n        handleUnknownVanilla(p, ctxt, bean, propName);\r\n    } while ((propName \u003d p.nextFieldName()) !\u003d null);\r\n    return bean;\r\n}",
    "nodes": 21,
    "edges": 25,
    "cc": 6,
    "flowSummary": [
      "B0 : If($r3 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r4 \u003d\u003d null) → B3 | else → B4",
      "B4 : If($r5 \u003d\u003d null) → B5 | else → B6",
      "B6 : If($z0 \u003d\u003d false) → B7 | else → B9",
      "B7 : If(r11 !\u003d null) → B8 | else → B12",
      "B9 : If($z1 \u003d\u003d false) → B10 | else → B11",
      "B12 : If($z2 \u003d\u003d false) → B13 | else → B15",
      "B13 : If(r12 \u003d\u003d null) → B14 | else → B15",
      "B15 : If($r14 \u003d\u003d null) → B16 | else → B18",
      "B19 : If($r15 !\u003d null) → B20 | else → B15"
    ],
    "blockList": [
      "B0 {\n  BeanDeserializer\n  JsonParser\n  DeserializationContext\n  Object\n  r0.assignCurrentValue(r1)\n  $r3 \u003d ValueInjector[] _injectables\u003e\n  if ($r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r2.injectValues(r6, r1)\n}",
      "B2 {\n  $r4 \u003d UnwrappedPropertyHandler _unwrappedPropertyHandler\u003e\n  if ($r4 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r9 \u003d r2.deserializeWithUnwrapped(r0, r6, r1)\n  return\n}",
      "B4 {\n  $r5 \u003d ExternalTypeHandler _externalTypeIdHandler\u003e\n  if ($r5 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r8 \u003d r2.deserializeWithExternalTypeId(r0, r6, r1)\n  return\n}",
      "B6 {\n  $z0 \u003d r0.isExpectedStartObjectToken()\n  if ($z0 \u003d\u003d false) goto B7 else B9\n}",
      "B7 {\n  r11 \u003d r0.nextFieldName()\n  if (r11 !\u003d null) goto B8 else B12\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $z1 \u003d r0.hasTokenId(5)\n  if ($z1 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  r11 \u003d r0.currentName()\n  goto B12\n}",
      "B11 {\n  return\n}",
      "B12 {\n  $z2 \u003d BeanDeserializer: boolean _needViewProcesing\u003e\n  if ($z2 \u003d\u003d false) goto B13 else B15\n}",
      "B13 {\n  r12 \u003d r6.getActiveView()\n  if (r12 \u003d\u003d null) goto B14 else B15\n}",
      "B14 {\n  $r7 \u003d r2.deserializeWithView(r0, r6, r1, r12)\n  return\n}",
      "B15 {\n  r0.nextToken()\n  $r13 \u003d BeanPropertyMap _beanProperties\u003e\n  $r14 \u003d $r13.find(r11)\n  if ($r14 \u003d\u003d null) goto B16 else B18\n}",
      "B16 {\n  $r14.deserializeAndSet(r0, r6, r1)\n  goto B19\n}",
      "B17 {\n  $r10 :\u003d @caughtexception\n  r2.wrapAndThrow($r10, r1, r11, r6)\n  goto B19\n}",
      "B18 {\n  r2.handleUnknownVanilla(r0, r6, r1, r11)\n}",
      "B19 {\n  $r15 \u003d r0.nextFieldName()\n  r11 \u003d $r15\n  if ($r15 !\u003d null) goto B20 else B15\n}",
      "B20 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B15",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B16",
      "B15 --\u003e B18",
      "B16 --\u003e B19",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B19 --\u003e B15",
      "B20 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanDeserializer#deserializeWithView(...4)",
        "body": "{\r\n    if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\r\n        // [databind#631]: Assign current value, to be accessible by custom serializers\r\n        // [databind#4184]: but only if we have at least one property\r\n        p.assignCurrentValue(bean);\r\n        String propName \u003d p.currentName();\r\n        do {\r\n            p.nextToken();\r\n            // TODO: 06-Jan-2015, tatu: try streamlining call sequences here as well\r\n            SettableBeanProperty prop \u003d _beanProperties.find(propName);\r\n            if (prop !\u003d null) {\r\n                if (!prop.visibleInView(activeView)) {\r\n                    // [databind#437]: fields in other views to be considered as unknown properties\r\n                    if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_UNEXPECTED_VIEW_PROPERTIES)) {\r\n                        ctxt.reportInputMismatch(handledType(), String.format(\"Input mismatch while deserializing %s. Property \u0027%s\u0027 is not part of current active view \u0027%s\u0027\" + \" (disable \u0027DeserializationFeature.FAIL_ON_UNEXPECTED_VIEW_PROPERTIES\u0027 to allow)\", ClassUtil.nameOf(handledType()), prop.getName(), activeView.getName()));\r\n                    }\r\n                    p.skipChildren();\r\n                    continue;\r\n                }\r\n                try {\r\n                    prop.deserializeAndSet(p, ctxt, bean);\r\n                } catch (Exception e) {\r\n                    wrapAndThrow(e, bean, propName, ctxt);\r\n                }\r\n                continue;\r\n            }\r\n            handleUnknownVanilla(p, ctxt, bean, propName);\r\n        } while ((propName \u003d p.nextFieldName()) !\u003d null);\r\n    }\r\n    return bean;\r\n}"
      },
      {
        "name": "BeanDeserializer#injectValues(...2)",
        "body": "(source not found)"
      },
      {
        "name": "BeanDeserializer#deserializeWithUnwrapped(...3)",
        "body": "{\r\n    JsonToken t \u003d p.currentToken();\r\n    if (t \u003d\u003d JsonToken.START_OBJECT) {\r\n        t \u003d p.nextToken();\r\n    }\r\n    TokenBuffer tokens \u003d ctxt.bufferForInputBuffering(p);\r\n    tokens.writeStartObject();\r\n    final Class\u003c?\u003e activeView \u003d _needViewProcesing ? ctxt.getActiveView() : null;\r\n    for (; t \u003d\u003d JsonToken.FIELD_NAME; t \u003d p.nextToken()) {\r\n        String propName \u003d p.currentName();\r\n        SettableBeanProperty prop \u003d _beanProperties.find(propName);\r\n        p.nextToken();\r\n        if (prop !\u003d null) {\r\n            // normal case\r\n            if (activeView !\u003d null \u0026\u0026 !prop.visibleInView(activeView)) {\r\n                p.skipChildren();\r\n                continue;\r\n            }\r\n            try {\r\n                prop.deserializeAndSet(p, ctxt, bean);\r\n            } catch (Exception e) {\r\n                wrapAndThrow(e, bean, propName, ctxt);\r\n            }\r\n            continue;\r\n        }\r\n        if (IgnorePropertiesUtil.shouldIgnore(propName, _ignorableProps, _includableProps)) {\r\n            handleIgnoredProperty(p, ctxt, bean, propName);\r\n            continue;\r\n        }\r\n        // 29-Nov-2016, tatu: probably should try to avoid sending content\r\n        //    both to any setter AND buffer... but, for now, the only thing\r\n        //    we can do.\r\n        // how about any setter? We\u0027ll get copies but...\r\n        if (_anySetter \u003d\u003d null) {\r\n            // but... others should be passed to unwrapped property deserializers\r\n            tokens.writeFieldName(propName);\r\n            tokens.copyCurrentStructure(p);\r\n        } else {\r\n            // Need to copy to a separate buffer first\r\n            TokenBuffer b2 \u003d ctxt.bufferAsCopyOfValue(p);\r\n            tokens.writeFieldName(propName);\r\n            tokens.append(b2);\r\n            try {\r\n                _anySetter.deserializeAndSet(b2.asParserOnFirstToken(), ctxt, bean, propName);\r\n            } catch (Exception e) {\r\n                wrapAndThrow(e, bean, propName, ctxt);\r\n            }\r\n            continue;\r\n        }\r\n    }\r\n    tokens.writeEndObject();\r\n    _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\r\n    return bean;\r\n}"
      },
      {
        "name": "BeanDeserializer#deserializeWithExternalTypeId(...3)",
        "body": "{\r\n    return _deserializeWithExternalTypeId(p, ctxt, bean, _externalTypeIdHandler.start());\r\n}"
      },
      {
        "name": "BeanDeserializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      },
      {
        "name": "BeanDeserializer#handleUnknownVanilla(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "methodName": "deserializeFromObject",
    "signature": "java.lang.Object deserializeFromObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    /* 09-Dec-2014, tatu: As per [databind#622], we need to allow Object Id references\r\n         *   to come in as JSON Objects as well; but for now assume they will\r\n         *   be simple, single-property references, which means that we can\r\n         *   recognize them without having to buffer anything.\r\n         *   Once again, if we must, we can do more complex handling with buffering,\r\n         *   but let\u0027s only do that if and when that becomes necessary.\r\n         */\r\n    if ((_objectIdReader !\u003d null) \u0026\u0026 _objectIdReader.maySerializeAsObject()) {\r\n        if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME) \u0026\u0026 _objectIdReader.isValidReferencePropertyName(p.currentName(), p)) {\r\n            return deserializeFromObjectId(p, ctxt);\r\n        }\r\n    }\r\n    if (_nonStandardCreation) {\r\n        if (_unwrappedPropertyHandler !\u003d null) {\r\n            return deserializeWithUnwrapped(p, ctxt);\r\n        }\r\n        if (_externalTypeIdHandler !\u003d null) {\r\n            return deserializeWithExternalTypeId(p, ctxt);\r\n        }\r\n        Object bean \u003d deserializeFromObjectUsingNonDefault(p, ctxt);\r\n        /* 27-May-2014, tatu: I don\u0027t think view processing would work\r\n             *   at this point, so commenting it out; but leaving in place\r\n             *   just in case I forgot something fundamental...\r\n             */\r\n        /*\r\n            if (_needViewProcesing) {\r\n                Class\u003c?\u003e view \u003d ctxt.getActiveView();\r\n                if (view !\u003d null) {\r\n                    return deserializeWithView(p, ctxt, bean, view);\r\n                }\r\n            }\r\n            */\r\n        return bean;\r\n    }\r\n    final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\r\n    // First: do we have native Object Ids (like YAML)?\r\n    if (p.canReadObjectId()) {\r\n        Object id \u003d p.getObjectId();\r\n        if (id !\u003d null) {\r\n            _handleTypedObjectId(p, ctxt, bean, id);\r\n        }\r\n    } else // [databind#3838]: since 2.16 Uniform handling of missing objectId\r\n    // only for the specific \"empty JSON Object\" case (and only for non-Native\r\n    // Object Ids, see [databind#4607]\r\n    if (_objectIdReader !\u003d null \u0026\u0026 p.hasTokenId(JsonTokenId.ID_END_OBJECT)) {\r\n        // [databind#4610]: check if we are to skip failure\r\n        if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS)) {\r\n            ctxt.reportUnresolvedObjectId(_objectIdReader, bean);\r\n        }\r\n    }\r\n    if (_injectables !\u003d null) {\r\n        injectValues(ctxt, bean);\r\n    }\r\n    if (_needViewProcesing) {\r\n        Class\u003c?\u003e view \u003d ctxt.getActiveView();\r\n        if (view !\u003d null) {\r\n            return deserializeWithView(p, ctxt, bean, view);\r\n        }\r\n    }\r\n    if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\r\n        // [databind#631]: Assign current value, to be accessible by custom serializers\r\n        // [databind#4184]: but only if we have at least one property\r\n        p.assignCurrentValue(bean);\r\n        String propName \u003d p.currentName();\r\n        do {\r\n            p.nextToken();\r\n            SettableBeanProperty prop \u003d _beanProperties.find(propName);\r\n            if (prop !\u003d null) {\r\n                // normal case\r\n                try {\r\n                    prop.deserializeAndSet(p, ctxt, bean);\r\n                } catch (Exception e) {\r\n                    wrapAndThrow(e, bean, propName, ctxt);\r\n                }\r\n                continue;\r\n            }\r\n            handleUnknownVanilla(p, ctxt, bean, propName);\r\n        } while ((propName \u003d p.nextFieldName()) !\u003d null);\r\n    }\r\n    return bean;\r\n}",
    "nodes": 32,
    "edges": 44,
    "cc": 14,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B5",
      "B1 : If($z5 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($z6 \u003d\u003d false) → B3 | else → B5",
      "B3 : If($z7 \u003d\u003d false) → B4 | else → B5",
      "B5 : If($z8 \u003d\u003d false) → B6 | else → B11",
      "B6 : If($r11 \u003d\u003d null) → B7 | else → B8",
      "B8 : If($r12 \u003d\u003d null) → B9 | else → B10",
      "B11 : If($z0 \u003d\u003d false) → B12 | else → B15",
      "B12 : If(r22 \u003d\u003d null) → B13 | else → B14",
      "B15 : If($r5 \u003d\u003d null) → B16 | else → B19",
      "B16 : If($z3 \u003d\u003d false) → B17 | else → B19",
      "B17 : If($z4 \u003d\u003d false) → B18 | else → B19",
      "B19 : If($r23 \u003d\u003d null) → B20 | else → B21",
      "B21 : If($z1 \u003d\u003d false) → B22 | else → B24",
      "B22 : If(r24 \u003d\u003d null) → B23 | else → B24",
      "B24 : If($z2 \u003d\u003d false) → B25 | else → B31",
      "B26 : If($r7 \u003d\u003d null) → B27 | else → B29",
      "B30 : If($r26 !\u003d null) → B31 | else → B26"
    ],
    "blockList": [
      "B0 {\n  BeanDeserializer\n  JsonParser\n  DeserializationContext\n  $r1 \u003d ObjectIdReader _objectIdReader\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  $r15 \u003d ObjectIdReader _objectIdReader\u003e\n  $z5 \u003d $r15.maySerializeAsObject()\n  if ($z5 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $z6 \u003d r4.hasTokenId(5)\n  if ($z6 \u003d\u003d false) goto B3 else B5\n}",
      "B3 {\n  $r16 \u003d ObjectIdReader _objectIdReader\u003e\n  $r17 \u003d r4.currentName()\n  $z7 \u003d $r16.isValidReferencePropertyName($r17, r4)\n  if ($z7 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r18 \u003d r0.deserializeFromObjectId(r4, r2)\n  return\n}",
      "B5 {\n  $z8 \u003d BeanDeserializer: boolean _nonStandardCreation\u003e\n  if ($z8 \u003d\u003d false) goto B6 else B11\n}",
      "B6 {\n  $r11 \u003d UnwrappedPropertyHandler _unwrappedPropertyHandler\u003e\n  if ($r11 \u003d\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r14 \u003d r0.deserializeWithUnwrapped(r4, r2)\n  return\n}",
      "B8 {\n  $r12 \u003d ExternalTypeHandler _externalTypeIdHandler\u003e\n  if ($r12 \u003d\u003d null) goto B9 else B10\n}",
      "B9 {\n  $r13 \u003d r0.deserializeWithExternalTypeId(r4, r2)\n  return\n}",
      "B10 {\n  r20 \u003d r0.deserializeFromObjectUsingNonDefault(r4, r2)\n  return\n}",
      "B11 {\n  $r3 \u003d ValueInstantiator _valueInstantiator\u003e\n  r21 \u003d $r3.createUsingDefault(r2)\n  $z0 \u003d r4.canReadObjectId()\n  if ($z0 \u003d\u003d false) goto B12 else B15\n}",
      "B12 {\n  r22 \u003d r4.getObjectId()\n  if (r22 \u003d\u003d null) goto B13 else B14\n}",
      "B13 {\n  r0._handleTypedObjectId(r4, r2, r21, r22)\n}",
      "B14 {\n  goto B19\n}",
      "B15 {\n  $r5 \u003d ObjectIdReader _objectIdReader\u003e\n  if ($r5 \u003d\u003d null) goto B16 else B19\n}",
      "B16 {\n  $z3 \u003d r4.hasTokenId(2)\n  if ($z3 \u003d\u003d false) goto B17 else B19\n}",
      "B17 {\n  $r9 \u003d DeserializationFeature FAIL_ON_UNRESOLVED_OBJECT_IDS\u003e\n  $z4 \u003d r2.isEnabled($r9)\n  if ($z4 \u003d\u003d false) goto B18 else B19\n}",
      "B18 {\n  $r10 \u003d ObjectIdReader _objectIdReader\u003e\n  r2.reportUnresolvedObjectId($r10, r21)\n}",
      "B19 {\n  $r23 \u003d ValueInjector[] _injectables\u003e\n  if ($r23 \u003d\u003d null) goto B20 else B21\n}",
      "B20 {\n  r0.injectValues(r2, r21)\n}",
      "B21 {\n  $z1 \u003d BeanDeserializer: boolean _needViewProcesing\u003e\n  if ($z1 \u003d\u003d false) goto B22 else B24\n}",
      "B22 {\n  r24 \u003d r2.getActiveView()\n  if (r24 \u003d\u003d null) goto B23 else B24\n}",
      "B23 {\n  $r8 \u003d r0.deserializeWithView(r4, r2, r21, r24)\n  return\n}",
      "B24 {\n  $z2 \u003d r4.hasTokenId(5)\n  if ($z2 \u003d\u003d false) goto B25 else B31\n}",
      "B25 {\n  r4.assignCurrentValue(r21)\n  r25 \u003d r4.currentName()\n}",
      "B26 {\n  r4.nextToken()\n  $r6 \u003d BeanPropertyMap _beanProperties\u003e\n  $r7 \u003d $r6.find(r25)\n  if ($r7 \u003d\u003d null) goto B27 else B29\n}",
      "B27 {\n  $r7.deserializeAndSet(r4, r2, r21)\n  goto B30\n}",
      "B28 {\n  $r19 :\u003d @caughtexception\n  r0.wrapAndThrow($r19, r21, r25, r2)\n  goto B30\n}",
      "B29 {\n  r0.handleUnknownVanilla(r4, r2, r21, r25)\n}",
      "B30 {\n  $r26 \u003d r4.nextFieldName()\n  r25 \u003d $r26\n  if ($r26 !\u003d null) goto B31 else B26\n}",
      "B31 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B11",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B19",
      "B15 --\u003e B16",
      "B15 --\u003e B19",
      "B16 --\u003e B17",
      "B16 --\u003e B19",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B21",
      "B21 --\u003e B22",
      "B21 --\u003e B24",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e [EXIT]",
      "B24 --\u003e B25",
      "B24 --\u003e B31",
      "B25 --\u003e B26",
      "B26 --\u003e B27",
      "B26 --\u003e B29",
      "B27 --\u003e B30",
      "B28 --\u003e B30",
      "B29 --\u003e B30",
      "B30 --\u003e B31",
      "B30 --\u003e B26",
      "B31 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanDeserializer#deserializeWithView(...4)",
        "body": "{\r\n    if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\r\n        // [databind#631]: Assign current value, to be accessible by custom serializers\r\n        // [databind#4184]: but only if we have at least one property\r\n        p.assignCurrentValue(bean);\r\n        String propName \u003d p.currentName();\r\n        do {\r\n            p.nextToken();\r\n            // TODO: 06-Jan-2015, tatu: try streamlining call sequences here as well\r\n            SettableBeanProperty prop \u003d _beanProperties.find(propName);\r\n            if (prop !\u003d null) {\r\n                if (!prop.visibleInView(activeView)) {\r\n                    // [databind#437]: fields in other views to be considered as unknown properties\r\n                    if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_UNEXPECTED_VIEW_PROPERTIES)) {\r\n                        ctxt.reportInputMismatch(handledType(), String.format(\"Input mismatch while deserializing %s. Property \u0027%s\u0027 is not part of current active view \u0027%s\u0027\" + \" (disable \u0027DeserializationFeature.FAIL_ON_UNEXPECTED_VIEW_PROPERTIES\u0027 to allow)\", ClassUtil.nameOf(handledType()), prop.getName(), activeView.getName()));\r\n                    }\r\n                    p.skipChildren();\r\n                    continue;\r\n                }\r\n                try {\r\n                    prop.deserializeAndSet(p, ctxt, bean);\r\n                } catch (Exception e) {\r\n                    wrapAndThrow(e, bean, propName, ctxt);\r\n                }\r\n                continue;\r\n            }\r\n            handleUnknownVanilla(p, ctxt, bean, propName);\r\n        } while ((propName \u003d p.nextFieldName()) !\u003d null);\r\n    }\r\n    return bean;\r\n}"
      },
      {
        "name": "BeanDeserializer#injectValues(...2)",
        "body": "(source not found)"
      },
      {
        "name": "BeanDeserializer#deserializeFromObjectUsingNonDefault(...2)",
        "body": "(source not found)"
      },
      {
        "name": "BeanDeserializer#deserializeFromObjectId(...2)",
        "body": "(source not found)"
      },
      {
        "name": "BeanDeserializer#deserializeWithExternalTypeId(...2)",
        "body": "{\r\n    if (_propertyBasedCreator !\u003d null) {\r\n        return deserializeUsingPropertyBasedWithExternalTypeId(p, ctxt);\r\n    }\r\n    if (_delegateDeserializer !\u003d null) {\r\n        /* 24-Nov-2015, tatu: Use of delegating creator needs to have precedence, and basically\r\n             *   external type id handling just has to be ignored, as they would relate to target\r\n             *   type and not delegate type. Whether this works as expected is another story, but\r\n             *   there\u0027s no other way to really mix these conflicting features.\r\n             */\r\n        return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\r\n    }\r\n    return deserializeWithExternalTypeId(p, ctxt, _valueInstantiator.createUsingDefault(ctxt));\r\n}"
      },
      {
        "name": "BeanDeserializer#deserializeWithUnwrapped(...2)",
        "body": "{\r\n    if (_delegateDeserializer !\u003d null) {\r\n        return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\r\n    }\r\n    if (_propertyBasedCreator !\u003d null) {\r\n        return deserializeUsingPropertyBasedWithUnwrapped(p, ctxt);\r\n    }\r\n    TokenBuffer tokens \u003d ctxt.bufferForInputBuffering(p);\r\n    tokens.writeStartObject();\r\n    final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\r\n    // [databind#631]: Assign current value, to be accessible by custom serializers\r\n    p.assignCurrentValue(bean);\r\n    if (_injectables !\u003d null) {\r\n        injectValues(ctxt, bean);\r\n    }\r\n    final Class\u003c?\u003e activeView \u003d _needViewProcesing ? ctxt.getActiveView() : null;\r\n    String propName \u003d p.hasTokenId(JsonTokenId.ID_FIELD_NAME) ? p.currentName() : null;\r\n    for (; propName !\u003d null; propName \u003d p.nextFieldName()) {\r\n        p.nextToken();\r\n        SettableBeanProperty prop \u003d _beanProperties.find(propName);\r\n        if (prop !\u003d null) {\r\n            // normal case\r\n            if ((activeView !\u003d null) \u0026\u0026 !prop.visibleInView(activeView)) {\r\n                p.skipChildren();\r\n                continue;\r\n            }\r\n            try {\r\n                prop.deserializeAndSet(p, ctxt, bean);\r\n            } catch (Exception e) {\r\n                wrapAndThrow(e, bean, propName, ctxt);\r\n            }\r\n            continue;\r\n        }\r\n        // Things marked as ignorable should not be passed to any setter\r\n        if (IgnorePropertiesUtil.shouldIgnore(propName, _ignorableProps, _includableProps)) {\r\n            handleIgnoredProperty(p, ctxt, bean, propName);\r\n            continue;\r\n        }\r\n        // 29-Nov-2016, tatu: probably should try to avoid sending content\r\n        //    both to any setter AND buffer... but, for now, the only thing\r\n        //    we can do.\r\n        // how about any setter? We\u0027ll get copies but...\r\n        if (_anySetter \u003d\u003d null) {\r\n            // but... others should be passed to unwrapped property deserializers\r\n            tokens.writeFieldName(propName);\r\n            tokens.copyCurrentStructure(p);\r\n            continue;\r\n        }\r\n        // Need to copy to a separate buffer first\r\n        TokenBuffer b2 \u003d ctxt.bufferAsCopyOfValue(p);\r\n        tokens.writeFieldName(propName);\r\n        tokens.append(b2);\r\n        try {\r\n            _anySetter.deserializeAndSet(b2.asParserOnFirstToken(), ctxt, bean, propName);\r\n        } catch (Exception e) {\r\n            wrapAndThrow(e, bean, propName, ctxt);\r\n        }\r\n    }\r\n    tokens.writeEndObject();\r\n    _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\r\n    return bean;\r\n}"
      },
      {
        "name": "BeanDeserializer#_handleTypedObjectId(...4)",
        "body": "(source not found)"
      },
      {
        "name": "BeanDeserializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      },
      {
        "name": "BeanDeserializer#handleUnknownVanilla(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "methodName": "addOrReplaceProperty",
    "signature": "void addOrReplaceProperty(com.fasterxml.jackson.databind.deser.SettableBeanProperty,boolean)",
    "visibility": "public",
    "body": "{\r\n    SettableBeanProperty oldProp \u003d _properties.put(prop.getName(), prop);\r\n    if ((oldProp !\u003d null) \u0026\u0026 (_propsBasedCreatorParams !\u003d null)) {\r\n        for (int i \u003d 0, len \u003d _propsBasedCreatorParams.length; i \u003c len; ++i) {\r\n            if (_propsBasedCreatorParams[i] \u003d\u003d oldProp) {\r\n                _propsBasedCreatorParams[i] \u003d prop;\r\n            }\r\n        }\r\n    }\r\n}",
    "nodes": 8,
    "edges": 11,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r5 \u003d\u003d null) → B1 | else → B7",
      "B1 : If($r6 \u003d\u003d null) → B2 | else → B7",
      "B3 : If(i1 \u003e\u003d i0) → B4 | else → B7",
      "B4 : If($r9 !\u003d r5) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  BeanDeserializerBuilder\n  SettableBeanProperty\n  z0 :\u003d @parameter1: boolean\n  $r2 \u003d Map _properties\u003e\n  $r3 \u003d r1.getName()\n  $r4 \u003d $r2.put($r3, r1)\n  r5 \u003d SettableBeanProperty) $r4\n  if (r5 \u003d\u003d null) goto B1 else B7\n}",
      "B1 {\n  $r6 \u003d SettableBeanProperty[] _propsBasedCreatorParams\u003e\n  if ($r6 \u003d\u003d null) goto B2 else B7\n}",
      "B2 {\n  i1 \u003d 0\n  $r7 \u003d SettableBeanProperty[] _propsBasedCreatorParams\u003e\n  i0 \u003d lengthof $r7\n}",
      "B3 {\n  if (i1 \u003e\u003d i0) goto B4 else B7\n}",
      "B4 {\n  $r8 \u003d SettableBeanProperty[] _propsBasedCreatorParams\u003e\n  $r9 \u003d $r8[i1]\n  if ($r9 !\u003d r5) goto B5 else B6\n}",
      "B5 {\n  $r10 \u003d SettableBeanProperty[] _propsBasedCreatorParams\u003e\n  $r10[i1] \u003d r1\n}",
      "B6 {\n  i1 \u003d i1 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B7",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "methodName": "addProperty",
    "signature": "void addProperty(com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "visibility": "public",
    "body": "{\r\n    SettableBeanProperty old \u003d _properties.put(prop.getName(), prop);\r\n    if (old !\u003d null \u0026\u0026 old !\u003d prop) {\r\n        // should never occur...\r\n        throw new IllegalArgumentException(\"Duplicate property \u0027\" + prop.getName() + \"\u0027 for \" + _beanDesc.getType());\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r5 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r5 \u003d\u003d r1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  BeanDeserializerBuilder\n  SettableBeanProperty\n  $r2 \u003d Map _properties\u003e\n  $r3 \u003d r1.getName()\n  $r4 \u003d $r2.put($r3, r1)\n  r5 \u003d SettableBeanProperty) $r4\n  if (r5 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  if (r5 \u003d\u003d r1) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d IllegalArgumentException\n  $r10 \u003d r1.getName()\n  $r7 \u003d BeanDescription _beanDesc\u003e\n  $r8 \u003d $r7.getType()\n  $r9 \u003d String.valueOf($r8)\n  $r11 \u003d dynInvoke makeConcatWithConstants($r10, $r9)\n  new IllegalArgumentException($r11)\n  throw $r6\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "methodName": "addBackReferenceProperty",
    "signature": "void addBackReferenceProperty(java.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "visibility": "public",
    "body": "{\r\n    if (_backRefProperties \u003d\u003d null) {\r\n        _backRefProperties \u003d new HashMap\u003cString, SettableBeanProperty\u003e(4);\r\n    }\r\n    // 15-Sep-2016, tatu: For some reason fixing access at point of `build()` does\r\n    //    NOT work (2 failing unit tests). Not 100% clear why, but for now force\r\n    //    access set early; unfortunate, but since it works....\r\n    if (_config.canOverrideAccessModifiers()) {\r\n        try {\r\n            prop.fixAccess(_config);\r\n        } catch (IllegalArgumentException e) {\r\n            _handleBadAccess(e);\r\n        }\r\n    }\r\n    _backRefProperties.put(referenceName, prop);\r\n    // 16-Jan-2018, tatu: As per [databind#1878] we may want to leave it as is, to allow\r\n    //    population for cases of \"wrong direction\", traversing parent first\r\n    //   If this causes problems should probably instead include in \"ignored properties\" list\r\n    //   Alternatively could also extend annotation to allow/disallow explicit value from input\r\n    /*\r\n        if (_properties !\u003d null) {\r\n            _properties.remove(prop.getName());\r\n        }\r\n        */\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B5"
    ],
    "blockList": [
      "B0 {\n  BeanDeserializerBuilder\n  String\n  SettableBeanProperty\n  $r1 \u003d HashMap _backRefProperties\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d HashMap\n  new HashMap(4)\n  HashMap _backRefProperties\u003e \u003d $r6\n}",
      "B2 {\n  $r2 \u003d DeserializationConfig _config\u003e\n  $z0 \u003d $r2.canOverrideAccessModifiers()\n  if ($z0 \u003d\u003d false) goto B3 else B5\n}",
      "B3 {\n  $r5 \u003d DeserializationConfig _config\u003e\n  r4.fixAccess($r5)\n  goto B5\n}",
      "B4 {\n  $r7 :\u003d @caughtexception\n  r0._handleBadAccess($r7)\n}",
      "B5 {\n  $r8 \u003d HashMap _backRefProperties\u003e\n  $r8.put(r3, r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanDeserializerBuilder#_handleBadAccess(...1)",
        "body": "{\r\n    try {\r\n        _context.reportBadTypeDefinition(_beanDesc, e0.getMessage());\r\n    } catch (DatabindException e) {\r\n        if (e.getCause() \u003d\u003d null) {\r\n            e.initCause(e0);\r\n        }\r\n        throw e;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "methodName": "addInjectable",
    "signature": "void addInjectable(com.fasterxml.jackson.databind.PropertyName,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.util.Annotations,com.fasterxml.jackson.databind.introspect.AnnotatedMember,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (_injectables \u003d\u003d null) {\r\n        _injectables \u003d new ArrayList\u003cValueInjector\u003e();\r\n    }\r\n    if (_config.canOverrideAccessModifiers()) {\r\n        try {\r\n            member.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\r\n        } catch (IllegalArgumentException e) {\r\n            _handleBadAccess(e);\r\n        }\r\n    }\r\n    _injectables.add(new ValueInjector(propName, propType, member, valueId));\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B5"
    ],
    "blockList": [
      "B0 {\n  BeanDeserializerBuilder\n  PropertyName\n  JavaType\n  Annotations\n  AnnotatedMember\n  Object\n  $r1 \u003d List _injectables\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d ArrayList\n  new ArrayList()\n  List _injectables\u003e \u003d $r9\n}",
      "B2 {\n  $r2 \u003d DeserializationConfig _config\u003e\n  $z0 \u003d $r2.canOverrideAccessModifiers()\n  if ($z0 \u003d\u003d false) goto B3 else B5\n}",
      "B3 {\n  $r8 \u003d DeserializationConfig _config\u003e\n  $r7 \u003d MapperFeature OVERRIDE_PUBLIC_ACCESS_MODIFIERS\u003e\n  $z1 \u003d $r8.isEnabled($r7)\n  r5.fixAccess($z1)\n  goto B5\n}",
      "B4 {\n  $r10 :\u003d @caughtexception\n  r0._handleBadAccess($r10)\n}",
      "B5 {\n  $r12 \u003d List _injectables\u003e\n  $r13 \u003d ValueInjector\n  new ValueInjector(r3, r4, r5, r6)\n  $r12.add($r13)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanDeserializerBuilder#_handleBadAccess(...1)",
        "body": "{\r\n    try {\r\n        _context.reportBadTypeDefinition(_beanDesc, e0.getMessage());\r\n    } catch (DatabindException e) {\r\n        if (e.getCause() \u003d\u003d null) {\r\n            e.initCause(e0);\r\n        }\r\n        throw e;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "methodName": "addIgnorable",
    "signature": "void addIgnorable(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (_ignorableProps \u003d\u003d null) {\r\n        _ignorableProps \u003d new HashSet\u003cString\u003e();\r\n    }\r\n    _ignorableProps.add(propName);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanDeserializerBuilder\n  String\n  $r1 \u003d HashSet _ignorableProps\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d HashSet\n  new HashSet()\n  HashSet _ignorableProps\u003e \u003d $r4\n}",
      "B2 {\n  $r3 \u003d HashSet _ignorableProps\u003e\n  $r3.add(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "methodName": "addIncludable",
    "signature": "void addIncludable(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (_includableProps \u003d\u003d null) {\r\n        _includableProps \u003d new HashSet\u003c\u003e();\r\n    }\r\n    _includableProps.add(propName);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanDeserializerBuilder\n  String\n  $r1 \u003d HashSet _includableProps\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d HashSet\n  new HashSet()\n  HashSet _includableProps\u003e \u003d $r4\n}",
      "B2 {\n  $r3 \u003d HashSet _includableProps\u003e\n  $r3.add(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "methodName": "setAnySetter",
    "signature": "void setAnySetter(com.fasterxml.jackson.databind.deser.SettableAnyProperty)",
    "visibility": "public",
    "body": "{\r\n    if (_anySetter !\u003d null \u0026\u0026 s !\u003d null) {\r\n        throw new IllegalStateException(\"_anySetter already set to non-null\");\r\n    }\r\n    _anySetter \u003d s;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r2 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  BeanDeserializerBuilder\n  SettableAnyProperty\n  $r1 \u003d SettableAnyProperty _anySetter\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  if (r2 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d IllegalStateException\n  new IllegalStateException(\"_anySetter already set to non-null\")\n  throw $r3\n}",
      "B3 {\n  SettableAnyProperty _anySetter\u003e \u003d r2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "methodName": "hasProperty",
    "signature": "boolean hasProperty(com.fasterxml.jackson.databind.PropertyName)",
    "visibility": "public",
    "body": "{\r\n    return findProperty(propertyName) !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanDeserializerBuilder\n  PropertyName\n  $r2 \u003d r0.findProperty(r1)\n  if ($r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanDeserializerBuilder#findProperty(...1)",
        "body": "{\r\n    return _properties.get(propertyName.getSimpleName());\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "methodName": "build",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer build()",
    "visibility": "public",
    "body": "{\r\n    Collection\u003cSettableBeanProperty\u003e props \u003d _properties.values();\r\n    _fixAccess(props);\r\n    BeanPropertyMap propertyMap \u003d BeanPropertyMap.construct(_config, props, _collectAliases(props), _findCaseInsensitivity());\r\n    propertyMap.assignIndexes();\r\n    // view processing must be enabled if:\r\n    // (a) fields are not included by default (when deserializing with view), OR\r\n    // (b) one of properties has view(s) to included in defined\r\n    boolean anyViews \u003d !_config.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION);\r\n    if (!anyViews) {\r\n        for (SettableBeanProperty prop : props) {\r\n            if (prop.hasViews()) {\r\n                anyViews \u003d true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    // one more thing: may need to create virtual ObjectId property:\r\n    if (_objectIdReader !\u003d null) {\r\n        /* 18-Nov-2012, tatu: May or may not have annotations for id property;\r\n             *   but no easy access. But hard to see id property being optional,\r\n             *   so let\u0027s consider required at this point.\r\n             */\r\n        ObjectIdValueProperty prop \u003d new ObjectIdValueProperty(_objectIdReader, PropertyMetadata.STD_REQUIRED);\r\n        propertyMap \u003d propertyMap.withProperty(prop);\r\n    }\r\n    return new BeanDeserializer(this, _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown, _includableProps, anyViews);\r\n}",
    "nodes": 12,
    "edges": 16,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z1 !\u003d 0) → B1 | else → B2",
      "B3 : If($z8 !\u003d 0) → B4 | else → B9",
      "B5 : If($z3 \u003d\u003d false) → B6 | else → B9",
      "B6 : If($z4 \u003d\u003d false) → B7 | else → B8",
      "B9 : If($r19 \u003d\u003d null) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  BeanDeserializerBuilder\n  $r1 \u003d Map _properties\u003e\n  r2 \u003d $r1.values()\n  r0._fixAccess(r2)\n  $r3 \u003d DeserializationConfig _config\u003e\n  $r4 \u003d r0._collectAliases(r2)\n  $z0 \u003d r0._findCaseInsensitivity()\n  r17 \u003d BeanPropertyMap.construct($r3, r2, $r4, $z0)\n  r17.assignIndexes()\n  $r6 \u003d DeserializationConfig _config\u003e\n  $r5 \u003d MapperFeature DEFAULT_VIEW_INCLUSION\u003e\n  $z1 \u003d $r6.isEnabled($r5)\n  if ($z1 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z8 \u003d 1\n  $z7 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z8 \u003d 0\n  $z7 \u003d 0\n}",
      "B3 {\n  z6 \u003d $z7\n  if ($z8 !\u003d 0) goto B4 else B9\n}",
      "B4 {\n  r18 \u003d r2.iterator()\n}",
      "B5 {\n  $z3 \u003d r18.hasNext()\n  if ($z3 \u003d\u003d false) goto B6 else B9\n}",
      "B6 {\n  $r15 \u003d r18.next()\n  r16 \u003d SettableBeanProperty) $r15\n  $z4 \u003d r16.hasViews()\n  if ($z4 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  z6 \u003d 1\n  goto B9\n}",
      "B8 {\n  goto B5\n}",
      "B9 {\n  $r19 \u003d ObjectIdReader _objectIdReader\u003e\n  if ($r19 \u003d\u003d null) goto B10 else B11\n}",
      "B10 {\n  $r12 \u003d ObjectIdValueProperty\n  $r14 \u003d ObjectIdReader _objectIdReader\u003e\n  $r13 \u003d PropertyMetadata STD_REQUIRED\u003e\n  new ObjectIdValueProperty($r14, $r13)\n  r17 \u003d r17.withProperty($r12)\n}",
      "B11 {\n  $r7 \u003d BeanDeserializer\n  $r11 \u003d BeanDescription _beanDesc\u003e\n  $r10 \u003d HashMap _backRefProperties\u003e\n  $r9 \u003d HashSet _ignorableProps\u003e\n  $z2 \u003d BeanDeserializerBuilder: boolean _ignoreAllUnknown\u003e\n  $r8 \u003d HashSet _includableProps\u003e\n  new BeanDeserializer(r0, $r11, r17, $r10, $r9, $z2, $r8, z6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B5",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanDeserializerBuilder#_collectAliases(...1)",
        "body": "{\r\n    Map\u003cString, List\u003cPropertyName\u003e\u003e mapping \u003d null;\r\n    for (SettableBeanProperty prop : props) {\r\n        List\u003cPropertyName\u003e aliases \u003d prop.findAliases(_config);\r\n        if ((aliases \u003d\u003d null) || aliases.isEmpty()) {\r\n            continue;\r\n        }\r\n        if (mapping \u003d\u003d null) {\r\n            mapping \u003d new HashMap\u003c\u003e();\r\n        }\r\n        mapping.put(prop.getName(), aliases);\r\n    }\r\n    if (mapping \u003d\u003d null) {\r\n        return Collections.emptyMap();\r\n    }\r\n    return mapping;\r\n}"
      },
      {
        "name": "BeanDeserializerBuilder#_findCaseInsensitivity(...0)",
        "body": "{\r\n    // 07-May-2020, tatu: First find combination of per-type config overrides (higher\r\n    //   precedence) and per-type annotations (lower):\r\n    JsonFormat.Value format \u003d _beanDesc.findExpectedFormat();\r\n    // and see if any of those has explicit definition; if not, use global baseline default\r\n    Boolean B \u003d format.getFeature(JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);\r\n    return (B \u003d\u003d null) ? _config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES) : B.booleanValue();\r\n}"
      },
      {
        "name": "BeanDeserializerBuilder#_fixAccess(...1)",
        "body": "{\r\n    /* 07-Sep-2016, tatu: Ideally we should be able to avoid forcing\r\n         *   access to properties that are likely ignored, but due to\r\n         *   renaming it seems this is not a safe thing to do (there was\r\n         *   at least one failing test). May need to dig deeper in future;\r\n         *   for now let\u0027s just play it safe.\r\n         */\r\n    /*\r\n        Set\u003cString\u003e ignorable \u003d _ignorableProps;\r\n        if (ignorable \u003d\u003d null) {\r\n            ignorable \u003d Collections.emptySet();\r\n        }\r\n        */\r\n    // 17-Jun-2020, tatu: [databind#2760] means we should not force access\r\n    //   if we are not configured to... at least not \"regular\" properties\r\n    if (_config.canOverrideAccessModifiers()) {\r\n        for (SettableBeanProperty prop : mainProps) {\r\n            /*\r\n                // first: no point forcing access on to-be-ignored properties\r\n                if (ignorable.contains(prop.getName())) {\r\n                    continue;\r\n                }\r\n                */\r\n            try {\r\n                prop.fixAccess(_config);\r\n            } catch (IllegalArgumentException e) {\r\n                _handleBadAccess(e);\r\n            }\r\n        }\r\n    }\r\n    // 15-Sep-2016, tatu: Access via back-ref properties has been done earlier\r\n    //   as it has to, for some reason, so not repeated here.\r\n    /*\r\n        if (_backRefProperties !\u003d null) {\r\n            for (SettableBeanProperty prop : _backRefProperties.values()) {\r\n                try {\r\n                    prop.fixAccess(_config);\r\n                } catch (IllegalArgumentException e) {\r\n                    _handleBadAccess(e);\r\n                }\r\n            }\r\n        }\r\n        */\r\n    // 17-Jun-2020, tatu: Despite [databind#2760], it seems that methods that\r\n    //    are explicitly defined (any setter via annotation, builder too) can not\r\n    //    be left as-is? May reconsider based on feedback\r\n    if (_anySetter !\u003d null) {\r\n        try {\r\n            _anySetter.fixAccess(_config);\r\n        } catch (IllegalArgumentException e) {\r\n            _handleBadAccess(e);\r\n        }\r\n    }\r\n    if (_buildMethod !\u003d null) {\r\n        try {\r\n            _buildMethod.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\r\n        } catch (IllegalArgumentException e) {\r\n            _handleBadAccess(e);\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "methodName": "buildBuilderBased",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer buildBuilderBased(com.fasterxml.jackson.databind.JavaType,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    // First: validation; must have build method that returns compatible type\r\n    if (_buildMethod \u003d\u003d null) {\r\n        // as per [databind#777], allow empty name\r\n        if (!expBuildMethodName.isEmpty()) {\r\n            _context.reportBadDefinition(_beanDesc.getType(), String.format(\"Builder class %s does not have build method (name: \u0027%s\u0027)\", ClassUtil.getTypeDescription(_beanDesc.getType()), expBuildMethodName));\r\n        }\r\n    } else {\r\n        // also: type of the method must be compatible\r\n        Class\u003c?\u003e rawBuildType \u003d _buildMethod.getRawReturnType();\r\n        Class\u003c?\u003e rawValueType \u003d valueType.getRawClass();\r\n        if ((rawBuildType !\u003d rawValueType) \u0026\u0026 !rawBuildType.isAssignableFrom(rawValueType) \u0026\u0026 !rawValueType.isAssignableFrom(rawBuildType)) {\r\n            _context.reportBadDefinition(_beanDesc.getType(), String.format(\"Build method `%s` has wrong return type (%s), not compatible with POJO type (%s)\", _buildMethod.getFullName(), ClassUtil.getClassDescription(rawBuildType), ClassUtil.getTypeDescription(valueType)));\r\n        }\r\n    }\r\n    // And if so, we can try building the deserializer\r\n    Collection\u003cSettableBeanProperty\u003e props \u003d _properties.values();\r\n    _fixAccess(props);\r\n    BeanPropertyMap propertyMap \u003d BeanPropertyMap.construct(_config, props, _collectAliases(props), _findCaseInsensitivity());\r\n    propertyMap.assignIndexes();\r\n    boolean anyViews \u003d !_config.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION);\r\n    if (!anyViews) {\r\n        for (SettableBeanProperty prop : props) {\r\n            if (prop.hasViews()) {\r\n                anyViews \u003d true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (_objectIdReader !\u003d null) {\r\n        // May or may not have annotations for id property; but no easy access.\r\n        // But hard to see id property being optional, so let\u0027s consider required at this point.\r\n        ObjectIdValueProperty prop \u003d new ObjectIdValueProperty(_objectIdReader, PropertyMetadata.STD_REQUIRED);\r\n        propertyMap \u003d propertyMap.withProperty(prop);\r\n    }\r\n    return createBuilderBasedDeserializer(valueType, propertyMap, anyViews);\r\n}",
    "nodes": 19,
    "edges": 28,
    "cc": 11,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B3",
      "B1 : If($z4 !\u003d 0) → B2 | else → B7",
      "B3 : If(r28 \u003d\u003d r29) → B4 | else → B7",
      "B4 : If($z2 !\u003d 0) → B5 | else → B7",
      "B5 : If($z3 !\u003d 0) → B6 | else → B7",
      "B7 : If($z6 !\u003d 0) → B8 | else → B9",
      "B10 : If($z9 !\u003d 0) → B11 | else → B16",
      "B12 : If($z0 \u003d\u003d false) → B13 | else → B16",
      "B13 : If($z1 \u003d\u003d false) → B14 | else → B15",
      "B16 : If($r39 \u003d\u003d null) → B17 | else → B18"
    ],
    "blockList": [
      "B0 {\n  BeanDeserializerBuilder\n  JavaType\n  String\n  $r1 \u003d AnnotatedMethod _buildMethod\u003e\n  if ($r1 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z4 \u003d r19.isEmpty()\n  if ($z4 !\u003d 0) goto B2 else B7\n}",
      "B2 {\n  $r21 \u003d DeserializationContext _context\u003e\n  $r20 \u003d BeanDescription _beanDesc\u003e\n  $r27 \u003d $r20.getType()\n  $r22 \u003d Object)[2]\n  $r23 \u003d BeanDescription _beanDesc\u003e\n  $r24 \u003d $r23.getType()\n  $r25 \u003d ClassUtil.getTypeDescription($r24)\n  $r22[0] \u003d $r25\n  $r22[1] \u003d r19\n  $r26 \u003d String.format(\"Builder class %s does not have build method (name: \\\u0027%s\\\u0027)\", $r22)\n  $r21.reportBadDefinition($r27, $r26)\n  goto B7\n}",
      "B3 {\n  $r2 \u003d AnnotatedMethod _buildMethod\u003e\n  r28 \u003d $r2.getRawReturnType()\n  r29 \u003d r3.getRawClass()\n  if (r28 \u003d\u003d r29) goto B4 else B7\n}",
      "B4 {\n  $z2 \u003d r28.isAssignableFrom(r29)\n  if ($z2 !\u003d 0) goto B5 else B7\n}",
      "B5 {\n  $z3 \u003d r29.isAssignableFrom(r28)\n  if ($z3 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $r11 \u003d DeserializationContext _context\u003e\n  $r10 \u003d BeanDescription _beanDesc\u003e\n  $r18 \u003d $r10.getType()\n  $r12 \u003d Object)[3]\n  $r13 \u003d AnnotatedMethod _buildMethod\u003e\n  $r14 \u003d $r13.getFullName()\n  $r12[0] \u003d $r14\n  $r15 \u003d ClassUtil.getClassDescription(r28)\n  $r12[1] \u003d $r15\n  $r16 \u003d ClassUtil.getTypeDescription(r3)\n  $r12[2] \u003d $r16\n  $r17 \u003d String.format(\"Build method `%s` has wrong return type (%s), not compatible with POJO type (%s)\", $r12)\n  $r11.reportBadDefinition($r18, $r17)\n}",
      "B7 {\n  $r30 \u003d Map _properties\u003e\n  $r31 \u003d $r30.values()\n  r0._fixAccess($r31)\n  $r32 \u003d DeserializationConfig _config\u003e\n  $r33 \u003d r0._collectAliases($r31)\n  $z5 \u003d r0._findCaseInsensitivity()\n  $r34 \u003d BeanPropertyMap.construct($r32, $r31, $r33, $z5)\n  r35 \u003d $r34\n  $r34.assignIndexes()\n  $r36 \u003d DeserializationConfig _config\u003e\n  $r37 \u003d MapperFeature DEFAULT_VIEW_INCLUSION\u003e\n  $z6 \u003d $r36.isEnabled($r37)\n  if ($z6 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  $z10 \u003d 1\n  $z9 \u003d 1\n  goto B10\n}",
      "B9 {\n  $z10 \u003d 0\n  $z9 \u003d 0\n}",
      "B10 {\n  z8 \u003d $z10\n  if ($z9 !\u003d 0) goto B11 else B16\n}",
      "B11 {\n  r38 \u003d $r31.iterator()\n}",
      "B12 {\n  $z0 \u003d r38.hasNext()\n  if ($z0 \u003d\u003d false) goto B13 else B16\n}",
      "B13 {\n  $r8 \u003d r38.next()\n  r9 \u003d SettableBeanProperty) $r8\n  $z1 \u003d r9.hasViews()\n  if ($z1 \u003d\u003d false) goto B14 else B15\n}",
      "B14 {\n  z8 \u003d 1\n  goto B16\n}",
      "B15 {\n  goto B12\n}",
      "B16 {\n  $r39 \u003d ObjectIdReader _objectIdReader\u003e\n  if ($r39 \u003d\u003d null) goto B17 else B18\n}",
      "B17 {\n  $r5 \u003d ObjectIdValueProperty\n  $r7 \u003d ObjectIdReader _objectIdReader\u003e\n  $r6 \u003d PropertyMetadata STD_REQUIRED\u003e\n  new ObjectIdValueProperty($r7, $r6)\n  r35 \u003d $r34.withProperty($r5)\n}",
      "B18 {\n  $r4 \u003d r0.createBuilderBasedDeserializer(r3, r35, z8)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B16",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B16",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B12",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanDeserializerBuilder#createBuilderBasedDeserializer(...3)",
        "body": "{\r\n    return new BuilderBasedDeserializer(this, _beanDesc, valueType, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown, _includableProps, anyViews);\r\n}"
      },
      {
        "name": "BeanDeserializerBuilder#_collectAliases(...1)",
        "body": "{\r\n    Map\u003cString, List\u003cPropertyName\u003e\u003e mapping \u003d null;\r\n    for (SettableBeanProperty prop : props) {\r\n        List\u003cPropertyName\u003e aliases \u003d prop.findAliases(_config);\r\n        if ((aliases \u003d\u003d null) || aliases.isEmpty()) {\r\n            continue;\r\n        }\r\n        if (mapping \u003d\u003d null) {\r\n            mapping \u003d new HashMap\u003c\u003e();\r\n        }\r\n        mapping.put(prop.getName(), aliases);\r\n    }\r\n    if (mapping \u003d\u003d null) {\r\n        return Collections.emptyMap();\r\n    }\r\n    return mapping;\r\n}"
      },
      {
        "name": "BeanDeserializerBuilder#_findCaseInsensitivity(...0)",
        "body": "{\r\n    // 07-May-2020, tatu: First find combination of per-type config overrides (higher\r\n    //   precedence) and per-type annotations (lower):\r\n    JsonFormat.Value format \u003d _beanDesc.findExpectedFormat();\r\n    // and see if any of those has explicit definition; if not, use global baseline default\r\n    Boolean B \u003d format.getFeature(JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);\r\n    return (B \u003d\u003d null) ? _config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES) : B.booleanValue();\r\n}"
      },
      {
        "name": "BeanDeserializerBuilder#_fixAccess(...1)",
        "body": "{\r\n    /* 07-Sep-2016, tatu: Ideally we should be able to avoid forcing\r\n         *   access to properties that are likely ignored, but due to\r\n         *   renaming it seems this is not a safe thing to do (there was\r\n         *   at least one failing test). May need to dig deeper in future;\r\n         *   for now let\u0027s just play it safe.\r\n         */\r\n    /*\r\n        Set\u003cString\u003e ignorable \u003d _ignorableProps;\r\n        if (ignorable \u003d\u003d null) {\r\n            ignorable \u003d Collections.emptySet();\r\n        }\r\n        */\r\n    // 17-Jun-2020, tatu: [databind#2760] means we should not force access\r\n    //   if we are not configured to... at least not \"regular\" properties\r\n    if (_config.canOverrideAccessModifiers()) {\r\n        for (SettableBeanProperty prop : mainProps) {\r\n            /*\r\n                // first: no point forcing access on to-be-ignored properties\r\n                if (ignorable.contains(prop.getName())) {\r\n                    continue;\r\n                }\r\n                */\r\n            try {\r\n                prop.fixAccess(_config);\r\n            } catch (IllegalArgumentException e) {\r\n                _handleBadAccess(e);\r\n            }\r\n        }\r\n    }\r\n    // 15-Sep-2016, tatu: Access via back-ref properties has been done earlier\r\n    //   as it has to, for some reason, so not repeated here.\r\n    /*\r\n        if (_backRefProperties !\u003d null) {\r\n            for (SettableBeanProperty prop : _backRefProperties.values()) {\r\n                try {\r\n                    prop.fixAccess(_config);\r\n                } catch (IllegalArgumentException e) {\r\n                    _handleBadAccess(e);\r\n                }\r\n            }\r\n        }\r\n        */\r\n    // 17-Jun-2020, tatu: Despite [databind#2760], it seems that methods that\r\n    //    are explicitly defined (any setter via annotation, builder too) can not\r\n    //    be left as-is? May reconsider based on feedback\r\n    if (_anySetter !\u003d null) {\r\n        try {\r\n            _anySetter.fixAccess(_config);\r\n        } catch (IllegalArgumentException e) {\r\n            _handleBadAccess(e);\r\n        }\r\n    }\r\n    if (_buildMethod !\u003d null) {\r\n        try {\r\n            _buildMethod.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\r\n        } catch (IllegalArgumentException e) {\r\n            _handleBadAccess(e);\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "methodName": "withConfig",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory withConfig(com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig)",
    "visibility": "public",
    "body": "{\r\n    if (_factoryConfig \u003d\u003d config) {\r\n        return this;\r\n    }\r\n    /* 22-Nov-2010, tatu: Handling of subtypes is tricky if we do immutable-with-copy-ctor;\r\n         *    and we pretty much have to here either choose between losing subtype instance\r\n         *    when registering additional deserializers, or losing deserializers.\r\n         *    Instead, let\u0027s actually just throw an error if this method is called when subtype\r\n         *    has not properly overridden this method; this to indicate problem as soon as possible.\r\n         */\r\n    ClassUtil.verifyMustOverride(BeanDeserializerFactory.class, this, \"withConfig\");\r\n    return new BeanDeserializerFactory(config);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanDeserializerFactory\n  DeserializerFactoryConfig\n  $r2 \u003d DeserializerFactoryConfig _factoryConfig\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  ClassUtil.verifyMustOverride(class \"Lcom/fasterxml/jackson/databind/deser/BeanDeserializerFactory;\", r0, \"withConfig\")\n  $r3 \u003d BeanDeserializerFactory\n  new BeanDeserializerFactory(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "methodName": "createBeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer createBeanDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)",
    "visibility": "public",
    "body": "{\r\n    final DeserializationConfig config \u003d ctxt.getConfig();\r\n    // First: we may also have custom overrides:\r\n    JsonDeserializer\u003c?\u003e deser \u003d _findCustomBeanDeserializer(type, config, beanDesc);\r\n    if (deser !\u003d null) {\r\n        // [databind#2392]\r\n        if (_factoryConfig.hasDeserializerModifiers()) {\r\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\r\n                deser \u003d mod.modifyDeserializer(ctxt.getConfig(), beanDesc, deser);\r\n            }\r\n        }\r\n        return (JsonDeserializer\u003cObject\u003e) deser;\r\n    }\r\n    // One more thing to check: do we have an exception type (Throwable or its\r\n    // sub-classes)? If so, need slightly different handling.\r\n    if (type.isThrowable()) {\r\n        return buildThrowableDeserializer(ctxt, type, beanDesc);\r\n    }\r\n    // Or, for abstract types, may have alternate means for resolution\r\n    // (defaulting, materialization)\r\n    // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\r\n    //    not something we could materialize anything for\r\n    if (type.isAbstract() \u0026\u0026 !type.isPrimitive() \u0026\u0026 !type.isEnumType()) {\r\n        // Let\u0027s make it possible to materialize abstract types.\r\n        JavaType concreteType \u003d materializeAbstractType(ctxt, type, beanDesc);\r\n        if (concreteType !\u003d null) {\r\n            // important: introspect actual implementation (abstract class or\r\n            // interface doesn\u0027t have constructors, for one)\r\n            beanDesc \u003d config.introspect(concreteType);\r\n            return buildBeanDeserializer(ctxt, concreteType, beanDesc);\r\n        }\r\n    }\r\n    // Otherwise, may want to check handlers for standard types, from superclass:\r\n    deser \u003d findStdDeserializer(ctxt, type, beanDesc);\r\n    if (deser !\u003d null) {\r\n        return (JsonDeserializer\u003cObject\u003e) deser;\r\n    }\r\n    // Otherwise: could the class be a Bean class? If not, bail out\r\n    if (!isPotentialBeanType(type.getRawClass())) {\r\n        return null;\r\n    }\r\n    // For checks like [databind#1599]\r\n    _validateSubType(ctxt, type, beanDesc);\r\n    // 05-May-2020, tatu: [databind#2683] Let\u0027s actually pre-emptively catch\r\n    //   certain types (for now, java.time.*) to give better error messages\r\n    deser \u003d _findUnsupportedTypeDeserializer(ctxt, type, beanDesc);\r\n    if (deser !\u003d null) {\r\n        return (JsonDeserializer\u003cObject\u003e) deser;\r\n    }\r\n    // Use generic bean introspection to build deserializer\r\n    return buildBeanDeserializer(ctxt, type, beanDesc);\r\n}",
    "nodes": 20,
    "edges": 24,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r15 \u003d\u003d null) → B1 | else → B6",
      "B1 : If($z5 \u003d\u003d false) → B2 | else → B5",
      "B3 : If($z6 \u003d\u003d false) → B4 | else → B5",
      "B6 : If($z0 \u003d\u003d false) → B7 | else → B8",
      "B8 : If($z1 \u003d\u003d false) → B9 | else → B13",
      "B9 : If($z3 !\u003d 0) → B10 | else → B13",
      "B10 : If($z4 !\u003d 0) → B11 | else → B13",
      "B11 : If(r17 \u003d\u003d null) → B12 | else → B13",
      "B13 : If($r19 \u003d\u003d null) → B14 | else → B15",
      "B15 : If($z2 !\u003d 0) → B16 | else → B17",
      "B17 : If(r20 \u003d\u003d null) → B18 | else → B19"
    ],
    "blockList": [
      "B0 {\n  BeanDeserializerFactory\n  DeserializationContext\n  JavaType\n  BeanDescription\n  r1 \u003d r0.getConfig()\n  r15 \u003d r2._findCustomBeanDeserializer(r3, r1, r14)\n  if (r15 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  $r8 \u003d DeserializerFactoryConfig _factoryConfig\u003e\n  $z5 \u003d $r8.hasDeserializerModifiers()\n  if ($z5 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r9 \u003d DeserializerFactoryConfig _factoryConfig\u003e\n  $r10 \u003d $r9.deserializerModifiers()\n  r16 \u003d $r10.iterator()\n}",
      "B3 {\n  $z6 \u003d r16.hasNext()\n  if ($z6 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r11 \u003d r16.next()\n  r12 \u003d BeanDeserializerModifier) $r11\n  $r13 \u003d r0.getConfig()\n  r15 \u003d r12.modifyDeserializer($r13, r14, r15)\n  goto B3\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $z0 \u003d r3.isThrowable()\n  if ($z0 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $r7 \u003d r2.buildThrowableDeserializer(r0, r3, r14)\n  return\n}",
      "B8 {\n  $z1 \u003d r3.isAbstract()\n  if ($z1 \u003d\u003d false) goto B9 else B13\n}",
      "B9 {\n  $z3 \u003d r3.isPrimitive()\n  if ($z3 !\u003d 0) goto B10 else B13\n}",
      "B10 {\n  $z4 \u003d r3.isEnumType()\n  if ($z4 !\u003d 0) goto B11 else B13\n}",
      "B11 {\n  r17 \u003d r2.materializeAbstractType(r0, r3, r14)\n  if (r17 \u003d\u003d null) goto B12 else B13\n}",
      "B12 {\n  r18 \u003d r1.introspect(r17)\n  $r6 \u003d r2.buildBeanDeserializer(r0, r17, r18)\n  return\n}",
      "B13 {\n  $r19 \u003d r2.findStdDeserializer(r0, r3, r14)\n  if ($r19 \u003d\u003d null) goto B14 else B15\n}",
      "B14 {\n  return\n}",
      "B15 {\n  $r4 \u003d r3.getRawClass()\n  $z2 \u003d r2.isPotentialBeanType($r4)\n  if ($z2 !\u003d 0) goto B16 else B17\n}",
      "B16 {\n  return\n}",
      "B17 {\n  r2._validateSubType(r0, r3, r14)\n  r20 \u003d r2._findUnsupportedTypeDeserializer(r0, r3, r14)\n  if (r20 \u003d\u003d null) goto B18 else B19\n}",
      "B18 {\n  return\n}",
      "B19 {\n  $r5 \u003d r2.buildBeanDeserializer(r0, r3, r14)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B10",
      "B9 --\u003e B13",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanDeserializerFactory#buildBeanDeserializer(...3)",
        "body": "{\r\n    // First: check what creators we can use, if any\r\n    ValueInstantiator valueInstantiator;\r\n    /* 04-Jun-2015, tatu: To work around [databind#636], need to catch the\r\n         *    issue, defer; this seems like a reasonable good place for now.\r\n         *   Note, however, that for non-Bean types (Collections, Maps) this\r\n         *   probably won\u0027t work and needs to be added elsewhere.\r\n         */\r\n    try {\r\n        valueInstantiator \u003d findValueInstantiator(ctxt, beanDesc);\r\n    } catch (NoClassDefFoundError error) {\r\n        return new ErrorThrowingDeserializer(error);\r\n    } catch (IllegalArgumentException e0) {\r\n        // 05-Apr-2017, tatu: Although it might appear cleaner to require collector\r\n        //   to throw proper exception, it doesn\u0027t actually have reference to this\r\n        //   instance so...\r\n        throw InvalidDefinitionException.from(ctxt.getParser(), ClassUtil.exceptionMessage(e0), beanDesc, null).withCause(e0);\r\n    }\r\n    BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(ctxt, beanDesc);\r\n    builder.setValueInstantiator(valueInstantiator);\r\n    // And then setters for deserializing from JSON Object\r\n    addBeanProps(ctxt, beanDesc, builder);\r\n    addObjectIdReader(ctxt, beanDesc, builder);\r\n    // managed/back reference fields/setters need special handling... first part\r\n    addBackReferenceProperties(ctxt, beanDesc, builder);\r\n    addInjectables(ctxt, beanDesc, builder);\r\n    final DeserializationConfig config \u003d ctxt.getConfig();\r\n    if (_factoryConfig.hasDeserializerModifiers()) {\r\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\r\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\r\n        }\r\n    }\r\n    JsonDeserializer\u003c?\u003e deserializer;\r\n    if (type.isAbstract() \u0026\u0026 !valueInstantiator.canInstantiate()) {\r\n        deserializer \u003d builder.buildAbstract();\r\n    } else {\r\n        deserializer \u003d builder.build();\r\n    }\r\n    // may have modifier(s) that wants to modify or replace serializer we just built\r\n    // (note that `resolve()` and `createContextual()` called later on)\r\n    if (_factoryConfig.hasDeserializerModifiers()) {\r\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\r\n            deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\r\n        }\r\n    }\r\n    return (JsonDeserializer\u003cObject\u003e) deserializer;\r\n}"
      },
      {
        "name": "BeanDeserializerFactory#_findCustomBeanDeserializer(...3)",
        "body": "(source not found)"
      },
      {
        "name": "BeanDeserializerFactory#isPotentialBeanType(...1)",
        "body": "{\r\n    String typeStr \u003d ClassUtil.canBeABeanType(type);\r\n    if (typeStr !\u003d null) {\r\n        throw new IllegalArgumentException(\"Cannot deserialize Class \" + type.getName() + \" (of type \" + typeStr + \") as a Bean\");\r\n    }\r\n    if (ClassUtil.isProxyType(type)) {\r\n        throw new IllegalArgumentException(\"Cannot deserialize Proxy class \" + type.getName() + \" as a Bean\");\r\n    }\r\n    // also: can\u0027t deserialize some local classes: static are ok; in-method not;\r\n    // other non-static inner classes are ok\r\n    typeStr \u003d ClassUtil.isLocalType(type, true);\r\n    if (typeStr !\u003d null) {\r\n        throw new IllegalArgumentException(\"Cannot deserialize Class \" + type.getName() + \" (of type \" + typeStr + \") as a Bean\");\r\n    }\r\n    return true;\r\n}"
      },
      {
        "name": "BeanDeserializerFactory#_validateSubType(...3)",
        "body": "{\r\n    SubTypeValidator.instance().validateSubType(ctxt, type, beanDesc);\r\n}"
      },
      {
        "name": "BeanDeserializerFactory#buildThrowableDeserializer(...3)",
        "body": "{\r\n    final DeserializationConfig config \u003d ctxt.getConfig();\r\n    // first: construct like a regular bean deserializer...\r\n    BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(ctxt, beanDesc);\r\n    builder.setValueInstantiator(findValueInstantiator(ctxt, beanDesc));\r\n    addBeanProps(ctxt, beanDesc, builder);\r\n    // (and assume there won\u0027t be any back references)\r\n    // But then let\u0027s decorate things a bit\r\n    // Need to add \"initCause\" as setter for exceptions (sub-classes of Throwable).\r\n    // 26-May-2022, tatu: [databind#3275] Looks like JDK 12 added \"setCause()\"\r\n    //    which can wreak havoc, at least with NamingStrategy\r\n    Iterator\u003cSettableBeanProperty\u003e it \u003d builder.getProperties();\r\n    while (it.hasNext()) {\r\n        SettableBeanProperty prop \u003d it.next();\r\n        if (\"setCause\".equals(prop.getMember().getName())) {\r\n            // For now this is allowed as we are returned \"live\" Iterator...\r\n            it.remove();\r\n            break;\r\n        }\r\n    }\r\n    AnnotatedMethod am \u003d beanDesc.findMethod(\"initCause\", INIT_CAUSE_PARAMS);\r\n    if (am !\u003d null) {\r\n        // should never be null\r\n        SettableBeanProperty causeCreatorProp \u003d builder.findProperty(PropertyName.construct(\"cause\"));\r\n        // [databind#4827] : Consider case where sub-classed `Exception` has `JsonCreator` with `cause` parameter\r\n        if (causeCreatorProp instanceof CreatorProperty) {\r\n            // Set fallback-setter as null, so `fixAccess()` does not happen during build\r\n            ((CreatorProperty) causeCreatorProp).setFallbackSetter(null);\r\n        } else {\r\n            // [databind#3497]: must consider possible PropertyNamingStrategy\r\n            String name \u003d \"cause\";\r\n            PropertyNamingStrategy pts \u003d config.getPropertyNamingStrategy();\r\n            if (pts !\u003d null) {\r\n                name \u003d pts.nameForSetterMethod(config, am, \"cause\");\r\n            }\r\n            SimpleBeanPropertyDefinition propDef \u003d SimpleBeanPropertyDefinition.construct(ctxt.getConfig(), am, new PropertyName(name));\r\n            SettableBeanProperty prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, am.getParameterType(0));\r\n            if (prop !\u003d null) {\r\n                // 21-Aug-2011, tatus: We may actually have found \u0027cause\u0027 property\r\n                //   to set... but let\u0027s replace it just in case, otherwise can end up with odd errors.\r\n                builder.addOrReplaceProperty(prop, true);\r\n            }\r\n        }\r\n    }\r\n    // update builder now that all information is in?\r\n    if (_factoryConfig.hasDeserializerModifiers()) {\r\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\r\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\r\n        }\r\n    }\r\n    JsonDeserializer\u003c?\u003e deserializer \u003d builder.build();\r\n    // At this point it ought to be a BeanDeserializer; if not, must assume\r\n    // it\u0027s some other thing that can handle deserialization ok...\r\n    if (deserializer instanceof BeanDeserializer) {\r\n        deserializer \u003d ThrowableDeserializer.construct(ctxt, (BeanDeserializer) deserializer);\r\n    }\r\n    // may have modifier(s) that wants to modify or replace serializer we just built:\r\n    if (_factoryConfig.hasDeserializerModifiers()) {\r\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\r\n            deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\r\n        }\r\n    }\r\n    return (JsonDeserializer\u003cObject\u003e) deserializer;\r\n}"
      },
      {
        "name": "BeanDeserializerFactory#_findUnsupportedTypeDeserializer(...3)",
        "body": "{\r\n    // 05-May-2020, tatu: Should we check for possible Shape override to \"POJO\"?\r\n    //   (to let users force \u0027serialize-as-POJO\u0027? Or not?\r\n    final String errorMsg \u003d BeanUtil.checkUnsupportedType(ctxt.getConfig(), type);\r\n    if (errorMsg !\u003d null) {\r\n        // 30-Sep-2020, tatu: [databind#2867] Avoid checks if there is a mix-in\r\n        //    which likely providers a handler...\r\n        if (ctxt.getConfig().findMixInClassFor(type.getRawClass()) \u003d\u003d null) {\r\n            return new UnsupportedTypeDeserializer(type, errorMsg);\r\n        }\r\n    }\r\n    return null;\r\n}"
      },
      {
        "name": "BeanDeserializerFactory#materializeAbstractType(...3)",
        "body": "{\r\n    // May have multiple resolvers, call in precedence order until one returns non-null\r\n    for (AbstractTypeResolver r : _factoryConfig.abstractTypeResolvers()) {\r\n        JavaType concrete \u003d r.resolveAbstractType(ctxt.getConfig(), beanDesc);\r\n        if (concrete !\u003d null) {\r\n            return concrete;\r\n        }\r\n    }\r\n    return null;\r\n}"
      },
      {
        "name": "BeanDeserializerFactory#findStdDeserializer(...3)",
        "body": "{\r\n    // note: we do NOT check for custom deserializers here, caller has already\r\n    // done that\r\n    JsonDeserializer\u003c?\u003e deser \u003d findDefaultDeserializer(ctxt, type, beanDesc);\r\n    // Also: better ensure these are post-processable?\r\n    if (deser !\u003d null) {\r\n        if (_factoryConfig.hasDeserializerModifiers()) {\r\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\r\n                deser \u003d mod.modifyDeserializer(ctxt.getConfig(), beanDesc, deser);\r\n            }\r\n        }\r\n    }\r\n    return deser;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "methodName": "createBuilderBasedDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer createBuilderBasedDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    // First: need a BeanDescription for builder class\r\n    JavaType builderType;\r\n    if (ctxt.isEnabled(MapperFeature.INFER_BUILDER_TYPE_BINDINGS)) {\r\n        builderType \u003d ctxt.getTypeFactory().constructParametricType(builderClass, valueType.getBindings());\r\n    } else {\r\n        builderType \u003d ctxt.constructType(builderClass);\r\n    }\r\n    BeanDescription builderDesc \u003d ctxt.getConfig().introspectForBuilder(builderType, valueBeanDesc);\r\n    // 20-Aug-2020, tatu: May want to change at some point (after 2.12) to pass \"valueBeanDesc\"\r\n    //    too; no urgent need at this point\r\n    return buildBuilderBasedDeserializer(ctxt, valueType, builderDesc);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanDeserializerFactory\n  DeserializationContext\n  JavaType\n  BeanDescription\n  Class\n  $r1 \u003d MapperFeature INFER_BUILDER_TYPE_BINDINGS\u003e\n  $z0 \u003d r0.isEnabled($r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d r0.getTypeFactory()\n  $r8 \u003d r6.getBindings()\n  r11 \u003d $r9.constructParametricType(r2, $r8)\n  goto B3\n}",
      "B2 {\n  r11 \u003d r0.constructType(r2)\n}",
      "B3 {\n  $r4 \u003d r0.getConfig()\n  $r10 \u003d $r4.introspectForBuilder(r11, r3)\n  $r7 \u003d r5.buildBuilderBasedDeserializer(r0, r6, $r10)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanDeserializerFactory#buildBuilderBasedDeserializer(...3)",
        "body": "{\r\n    // Creators, anyone? (to create builder itself)\r\n    ValueInstantiator valueInstantiator;\r\n    try {\r\n        valueInstantiator \u003d findValueInstantiator(ctxt, builderDesc);\r\n    } catch (NoClassDefFoundError error) {\r\n        return new ErrorThrowingDeserializer(error);\r\n    } catch (IllegalArgumentException e) {\r\n        // 05-Apr-2017, tatu: Although it might appear cleaner to require collector\r\n        //   to throw proper exception, it doesn\u0027t actually have reference to this\r\n        //   instance so...\r\n        throw InvalidDefinitionException.from(ctxt.getParser(), ClassUtil.exceptionMessage(e), builderDesc, null);\r\n    }\r\n    final DeserializationConfig config \u003d ctxt.getConfig();\r\n    BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(ctxt, builderDesc);\r\n    builder.setValueInstantiator(valueInstantiator);\r\n    // And then \"with methods\" for deserializing from JSON Object\r\n    addBeanProps(ctxt, builderDesc, builder);\r\n    addObjectIdReader(ctxt, builderDesc, builder);\r\n    // managed/back reference fields/setters need special handling... first part\r\n    addBackReferenceProperties(ctxt, builderDesc, builder);\r\n    addInjectables(ctxt, builderDesc, builder);\r\n    JsonPOJOBuilder.Value builderConfig \u003d builderDesc.findPOJOBuilderConfig();\r\n    final String buildMethodName \u003d (builderConfig \u003d\u003d null) ? JsonPOJOBuilder.DEFAULT_BUILD_METHOD : builderConfig.buildMethodName;\r\n    // and lastly, find build method to use:\r\n    AnnotatedMethod buildMethod \u003d builderDesc.findMethod(buildMethodName, null);\r\n    if (buildMethod !\u003d null) {\r\n        // note: can\u0027t yet throw error; may be given build method\r\n        if (config.canOverrideAccessModifiers()) {\r\n            ClassUtil.checkAndFixAccess(buildMethod.getMember(), config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\r\n        }\r\n    }\r\n    builder.setPOJOBuilder(buildMethod, builderConfig);\r\n    // this may give us more information...\r\n    if (_factoryConfig.hasDeserializerModifiers()) {\r\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\r\n            builder \u003d mod.updateBuilder(config, builderDesc, builder);\r\n        }\r\n    }\r\n    JsonDeserializer\u003c?\u003e deserializer \u003d builder.buildBuilderBased(valueType, buildMethodName);\r\n    // [JACKSON-440]: may have modifier(s) that wants to modify or replace serializer we just built:\r\n    if (_factoryConfig.hasDeserializerModifiers()) {\r\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\r\n            deserializer \u003d mod.modifyDeserializer(config, builderDesc, deserializer);\r\n        }\r\n    }\r\n    return (JsonDeserializer\u003cObject\u003e) deserializer;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "methodName": "buildBeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer buildBeanDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)",
    "visibility": "public",
    "body": "{\r\n    // First: check what creators we can use, if any\r\n    ValueInstantiator valueInstantiator;\r\n    /* 04-Jun-2015, tatu: To work around [databind#636], need to catch the\r\n         *    issue, defer; this seems like a reasonable good place for now.\r\n         *   Note, however, that for non-Bean types (Collections, Maps) this\r\n         *   probably won\u0027t work and needs to be added elsewhere.\r\n         */\r\n    try {\r\n        valueInstantiator \u003d findValueInstantiator(ctxt, beanDesc);\r\n    } catch (NoClassDefFoundError error) {\r\n        return new ErrorThrowingDeserializer(error);\r\n    } catch (IllegalArgumentException e0) {\r\n        // 05-Apr-2017, tatu: Although it might appear cleaner to require collector\r\n        //   to throw proper exception, it doesn\u0027t actually have reference to this\r\n        //   instance so...\r\n        throw InvalidDefinitionException.from(ctxt.getParser(), ClassUtil.exceptionMessage(e0), beanDesc, null).withCause(e0);\r\n    }\r\n    BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(ctxt, beanDesc);\r\n    builder.setValueInstantiator(valueInstantiator);\r\n    // And then setters for deserializing from JSON Object\r\n    addBeanProps(ctxt, beanDesc, builder);\r\n    addObjectIdReader(ctxt, beanDesc, builder);\r\n    // managed/back reference fields/setters need special handling... first part\r\n    addBackReferenceProperties(ctxt, beanDesc, builder);\r\n    addInjectables(ctxt, beanDesc, builder);\r\n    final DeserializationConfig config \u003d ctxt.getConfig();\r\n    if (_factoryConfig.hasDeserializerModifiers()) {\r\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\r\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\r\n        }\r\n    }\r\n    JsonDeserializer\u003c?\u003e deserializer;\r\n    if (type.isAbstract() \u0026\u0026 !valueInstantiator.canInstantiate()) {\r\n        deserializer \u003d builder.buildAbstract();\r\n    } else {\r\n        deserializer \u003d builder.build();\r\n    }\r\n    // may have modifier(s) that wants to modify or replace serializer we just built\r\n    // (note that `resolve()` and `createContextual()` called later on)\r\n    if (_factoryConfig.hasDeserializerModifiers()) {\r\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\r\n            deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\r\n        }\r\n    }\r\n    return (JsonDeserializer\u003cObject\u003e) deserializer;\r\n}",
    "nodes": 16,
    "edges": 19,
    "cc": 5,
    "flowSummary": [
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B7",
      "B5 : If($z4 \u003d\u003d false) → B6 | else → B7",
      "B7 : If($z1 \u003d\u003d false) → B8 | else → B10",
      "B8 : If($z3 !\u003d 0) → B9 | else → B10",
      "B11 : If($z5 \u003d\u003d false) → B12 | else → B15",
      "B13 : If($z2 \u003d\u003d false) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  BeanDeserializerFactory\n  DeserializationContext\n  JavaType\n  BeanDescription\n  r3 \u003d r0.findValueInstantiator(r1, r2)\n  goto B3\n}",
      "B1 {\n  $r19 :\u003d @caughtexception\n  $r20 \u003d ErrorThrowingDeserializer\n  new ErrorThrowingDeserializer($r19)\n  return\n}",
      "B2 {\n  $r14 :\u003d @caughtexception\n  $r16 \u003d r1.getParser()\n  $r15 \u003d ClassUtil.exceptionMessage($r14)\n  $r17 \u003d InvalidDefinitionException.from($r16, $r15, r2, null)\n  $r18 \u003d $r17.withCause($r14)\n  throw $r18\n}",
      "B3 {\n  r21 \u003d r0.constructBeanDeserializerBuilder(r1, r2)\n  r21.setValueInstantiator(r3)\n  r0.addBeanProps(r1, r2, r21)\n  r0.addObjectIdReader(r1, r2, r21)\n  r0.addBackReferenceProperties(r1, r2, r21)\n  r0.addInjectables(r1, r2, r21)\n  r4 \u003d r1.getConfig()\n  $r5 \u003d DeserializerFactoryConfig _factoryConfig\u003e\n  $z0 \u003d $r5.hasDeserializerModifiers()\n  if ($z0 \u003d\u003d false) goto B4 else B7\n}",
      "B4 {\n  $r11 \u003d DeserializerFactoryConfig _factoryConfig\u003e\n  $r12 \u003d $r11.deserializerModifiers()\n  r22 \u003d $r12.iterator()\n}",
      "B5 {\n  $z4 \u003d r22.hasNext()\n  if ($z4 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r13 \u003d r22.next()\n  r23 \u003d BeanDeserializerModifier) $r13\n  r21 \u003d r23.updateBuilder(r4, r2, r21)\n  goto B5\n}",
      "B7 {\n  $z1 \u003d r6.isAbstract()\n  if ($z1 \u003d\u003d false) goto B8 else B10\n}",
      "B8 {\n  $z3 \u003d r3.canInstantiate()\n  if ($z3 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  r24 \u003d r21.buildAbstract()\n  goto B11\n}",
      "B10 {\n  r24 \u003d r21.build()\n}",
      "B11 {\n  $r25 \u003d DeserializerFactoryConfig _factoryConfig\u003e\n  $z5 \u003d $r25.hasDeserializerModifiers()\n  if ($z5 \u003d\u003d false) goto B12 else B15\n}",
      "B12 {\n  $r7 \u003d DeserializerFactoryConfig _factoryConfig\u003e\n  $r8 \u003d $r7.deserializerModifiers()\n  r26 \u003d $r8.iterator()\n}",
      "B13 {\n  $z2 \u003d r26.hasNext()\n  if ($z2 \u003d\u003d false) goto B14 else B15\n}",
      "B14 {\n  $r9 \u003d r26.next()\n  r10 \u003d BeanDeserializerModifier) $r9\n  r24 \u003d r10.modifyDeserializer(r4, r2, r24)\n  goto B13\n}",
      "B15 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B3",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B13",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanDeserializerFactory#findValueInstantiator(...2)",
        "body": "(source not found)"
      },
      {
        "name": "BeanDeserializerFactory#addInjectables(...3)",
        "body": "{\r\n    Map\u003cObject, AnnotatedMember\u003e raw \u003d beanDesc.findInjectables();\r\n    if (raw !\u003d null) {\r\n        for (Map.Entry\u003cObject, AnnotatedMember\u003e entry : raw.entrySet()) {\r\n            AnnotatedMember m \u003d entry.getValue();\r\n            builder.addInjectable(PropertyName.construct(m.getName()), m.getType(), beanDesc.getClassAnnotations(), m, entry.getKey());\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "BeanDeserializerFactory#addBeanProps(...3)",
        "body": "{\r\n    final ValueInstantiator valueInstantiator \u003d builder.getValueInstantiator();\r\n    final SettableBeanProperty[] creatorProps \u003d (valueInstantiator !\u003d null) ? valueInstantiator.getFromObjectArguments(ctxt.getConfig()) : null;\r\n    final boolean hasCreatorProps \u003d (creatorProps !\u003d null);\r\n    // 01-May-2016, tatu: Which base type to use here gets tricky, since\r\n    //   it may often make most sense to use general type for overrides,\r\n    //   but what we have here may be more specific impl type. But for now\r\n    //   just use it as is.\r\n    JsonIgnoreProperties.Value ignorals \u003d ctxt.getConfig().getDefaultPropertyIgnorals(beanDesc.getBeanClass(), beanDesc.getClassInfo());\r\n    Set\u003cString\u003e ignored;\r\n    if (ignorals !\u003d null) {\r\n        boolean ignoreAny \u003d ignorals.getIgnoreUnknown();\r\n        builder.setIgnoreUnknownProperties(ignoreAny);\r\n        // Or explicit/implicit definitions?\r\n        ignored \u003d ignorals.findIgnoredForDeserialization();\r\n        for (String propName : ignored) {\r\n            builder.addIgnorable(propName);\r\n        }\r\n    } else {\r\n        ignored \u003d Collections.emptySet();\r\n    }\r\n    JsonIncludeProperties.Value inclusions \u003d ctxt.getConfig().getDefaultPropertyInclusions(beanDesc.getBeanClass(), beanDesc.getClassInfo());\r\n    Set\u003cString\u003e included \u003d null;\r\n    if (inclusions !\u003d null) {\r\n        included \u003d inclusions.getIncluded();\r\n        if (included !\u003d null) {\r\n            for (String propName : included) {\r\n                builder.addIncludable(propName);\r\n            }\r\n        }\r\n    }\r\n    // Also, do we have a fallback \"any\" setter?\r\n    SettableAnyProperty anySetter \u003d _resolveAnySetter(ctxt, beanDesc, creatorProps);\r\n    if (anySetter !\u003d null) {\r\n        builder.setAnySetter(anySetter);\r\n    } else {\r\n        // 23-Jan-2018, tatu: although [databind#1805] would suggest we should block\r\n        //   properties regardless, for now only consider unless there\u0027s any setter...\r\n        Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\r\n        if (ignored2 !\u003d null) {\r\n            for (String propName : ignored2) {\r\n                // allow ignoral of similarly named JSON property, but do not force;\r\n                // latter means NOT adding this to \u0027ignored\u0027:\r\n                builder.addIgnorable(propName);\r\n            }\r\n        }\r\n    }\r\n    final boolean useGettersAsSetters \u003d ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) \u0026\u0026 ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);\r\n    // Ok: let\u0027s then filter out property definitions\r\n    List\u003cBeanPropertyDefinition\u003e propDefs \u003d filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored, included);\r\n    // After which we can let custom code change the set\r\n    if (_factoryConfig.hasDeserializerModifiers()) {\r\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\r\n            propDefs \u003d mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\r\n        }\r\n    }\r\n    // At which point we still have all kinds of properties; not all with mutators:\r\n    for (BeanPropertyDefinition propDef : propDefs) {\r\n        SettableBeanProperty prop \u003d null;\r\n        // 18-Oct-2013, tatu: Although constructor parameters have highest precedence,\r\n        //   we need to do linkage (as per [databind#318]), and so need to start with\r\n        //   other types, and only then create constructor parameter, if any.\r\n        if (propDef.hasSetter()) {\r\n            AnnotatedMethod setter \u003d propDef.getSetter();\r\n            JavaType propertyType \u003d setter.getParameterType(0);\r\n            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\r\n        } else if (propDef.hasField()) {\r\n            AnnotatedField field \u003d propDef.getField();\r\n            JavaType propertyType \u003d field.getType();\r\n            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\r\n        } else {\r\n            // NOTE: specifically getter, since field was already checked above\r\n            AnnotatedMethod getter \u003d propDef.getGetter();\r\n            if (getter !\u003d null) {\r\n                if (useGettersAsSetters \u0026\u0026 _isSetterlessType(getter.getRawType())) {\r\n                    // 23-Jan-2018, tatu: As per [databind#1805], need to ensure we don\u0027t\r\n                    //   accidentally sneak in getter-as-setter for `READ_ONLY` properties\r\n                    if (builder.hasIgnorable(propDef.getName())) {\r\n                        // skip\r\n                        ;\r\n                    } else {\r\n                        prop \u003d constructSetterlessProperty(ctxt, beanDesc, propDef);\r\n                    }\r\n                } else if (!propDef.hasConstructorParameter()) {\r\n                    PropertyMetadata md \u003d propDef.getMetadata();\r\n                    // 25-Oct-2016, tatu: If merging enabled, might not need setter.\r\n                    //   We cannot quite support this with creator parameters; in theory\r\n                    //   possibly, but right not not due to complexities of routing, so\r\n                    //   just prevent\r\n                    if (md.getMergeInfo() !\u003d null) {\r\n                        prop \u003d constructSetterlessProperty(ctxt, beanDesc, propDef);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // 25-Sep-2014, tatu: No point in finding constructor parameters for abstract types\r\n        //   (since they are never used anyway)\r\n        if (hasCreatorProps \u0026\u0026 propDef.hasConstructorParameter()) {\r\n            /* If property is passed via constructor parameter, we must\r\n                 * handle things in special way. Not sure what is the most optimal way...\r\n                 * for now, let\u0027s just call a (new) method in builder, which does nothing.\r\n                 */\r\n            // but let\u0027s call a method just to allow custom builders to be aware...\r\n            final String name \u003d propDef.getName();\r\n            CreatorProperty cprop \u003d null;\r\n            for (SettableBeanProperty cp : creatorProps) {\r\n                if (name.equals(cp.getName()) \u0026\u0026 (cp instanceof CreatorProperty)) {\r\n                    cprop \u003d (CreatorProperty) cp;\r\n                    break;\r\n                }\r\n            }\r\n            if (cprop \u003d\u003d null) {\r\n                List\u003cString\u003e n \u003d new ArrayList\u003c\u003e();\r\n                for (SettableBeanProperty cp : creatorProps) {\r\n                    n.add(cp.getName());\r\n                }\r\n                ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"Could not find creator property with name %s (known Creator properties: %s)\", ClassUtil.name(name), n);\r\n                continue;\r\n            }\r\n            if (prop !\u003d null) {\r\n                cprop.setFallbackSetter(prop);\r\n            }\r\n            Class\u003c?\u003e[] views \u003d propDef.findViews();\r\n            if (views \u003d\u003d null) {\r\n                views \u003d beanDesc.findDefaultViews();\r\n            }\r\n            cprop.setViews(views);\r\n            builder.addCreatorProperty(cprop);\r\n            continue;\r\n        }\r\n        if (prop !\u003d null) {\r\n            // one more thing before adding to builder: copy any metadata\r\n            Class\u003c?\u003e[] views \u003d propDef.findViews();\r\n            if (views \u003d\u003d null) {\r\n                views \u003d beanDesc.findDefaultViews();\r\n            }\r\n            prop.setViews(views);\r\n            builder.addProperty(prop);\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "BeanDeserializerFactory#addObjectIdReader(...3)",
        "body": "{\r\n    ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\r\n    if (objectIdInfo \u003d\u003d null) {\r\n        return;\r\n    }\r\n    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\r\n    JavaType idType;\r\n    SettableBeanProperty idProp;\r\n    ObjectIdGenerator\u003c?\u003e gen;\r\n    ObjectIdResolver resolver \u003d ctxt.objectIdResolverInstance(beanDesc.getClassInfo(), objectIdInfo);\r\n    // Just one special case: Property-based generator is trickier\r\n    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\r\n        // most special one, needs extra work\r\n        PropertyName propName \u003d objectIdInfo.getPropertyName();\r\n        idProp \u003d builder.findProperty(propName);\r\n        if (idProp \u003d\u003d null) {\r\n            throw new IllegalArgumentException(String.format(\"Invalid Object Id definition for %s: cannot find property with name %s\", ClassUtil.getTypeDescription(beanDesc.getType()), ClassUtil.name(propName)));\r\n        }\r\n        idType \u003d idProp.getType();\r\n        gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\r\n    } else {\r\n        JavaType type \u003d ctxt.constructType(implClass);\r\n        idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\r\n        idProp \u003d null;\r\n        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\r\n    }\r\n    // also: unlike with value deserializers, let\u0027s just resolve one we need here\r\n    JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\r\n    builder.setObjectIdReader(ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp, resolver));\r\n}"
      },
      {
        "name": "BeanDeserializerFactory#addBackReferenceProperties(...3)",
        "body": "{\r\n    // and then back references, not necessarily found as regular properties\r\n    List\u003cBeanPropertyDefinition\u003e refProps \u003d beanDesc.findBackReferences();\r\n    if (refProps !\u003d null) {\r\n        for (BeanPropertyDefinition refProp : refProps) {\r\n            /*\r\n                AnnotatedMember m \u003d refProp.getMutator();\r\n                JavaType type;\r\n                if (m instanceof AnnotatedMethod) {\r\n                    type \u003d ((AnnotatedMethod) m).getParameterType(0);\r\n                } else {\r\n                    type \u003d m.getType();\r\n                    // 30-Mar-2017, tatu: Unfortunately it is not yet possible to make back-refs\r\n                    //    work through constructors; but let\u0027s at least indicate the issue for now\r\n                    if (m instanceof AnnotatedParameter) {\r\n                        ctxt.reportBadTypeDefinition(beanDesc,\r\n\"Cannot bind back reference using Creator parameter (reference %s, parameter index #%d)\",\r\nClassUtil.name(name), ((AnnotatedParameter) m).getIndex());\r\n                    }\r\n                }\r\n                */\r\n            String refName \u003d refProp.findReferenceName();\r\n            builder.addBackReferenceProperty(refName, constructSettableProperty(ctxt, beanDesc, refProp, refProp.getPrimaryType()));\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "BeanDeserializerFactory#constructBeanDeserializerBuilder(...2)",
        "body": "{\r\n    return new BeanDeserializerBuilder(beanDesc, ctxt);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "methodName": "buildThrowableDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer buildThrowableDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)",
    "visibility": "public",
    "body": "{\r\n    final DeserializationConfig config \u003d ctxt.getConfig();\r\n    // first: construct like a regular bean deserializer...\r\n    BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(ctxt, beanDesc);\r\n    builder.setValueInstantiator(findValueInstantiator(ctxt, beanDesc));\r\n    addBeanProps(ctxt, beanDesc, builder);\r\n    // (and assume there won\u0027t be any back references)\r\n    // But then let\u0027s decorate things a bit\r\n    // Need to add \"initCause\" as setter for exceptions (sub-classes of Throwable).\r\n    // 26-May-2022, tatu: [databind#3275] Looks like JDK 12 added \"setCause()\"\r\n    //    which can wreak havoc, at least with NamingStrategy\r\n    Iterator\u003cSettableBeanProperty\u003e it \u003d builder.getProperties();\r\n    while (it.hasNext()) {\r\n        SettableBeanProperty prop \u003d it.next();\r\n        if (\"setCause\".equals(prop.getMember().getName())) {\r\n            // For now this is allowed as we are returned \"live\" Iterator...\r\n            it.remove();\r\n            break;\r\n        }\r\n    }\r\n    AnnotatedMethod am \u003d beanDesc.findMethod(\"initCause\", INIT_CAUSE_PARAMS);\r\n    if (am !\u003d null) {\r\n        // should never be null\r\n        SettableBeanProperty causeCreatorProp \u003d builder.findProperty(PropertyName.construct(\"cause\"));\r\n        // [databind#4827] : Consider case where sub-classed `Exception` has `JsonCreator` with `cause` parameter\r\n        if (causeCreatorProp instanceof CreatorProperty) {\r\n            // Set fallback-setter as null, so `fixAccess()` does not happen during build\r\n            ((CreatorProperty) causeCreatorProp).setFallbackSetter(null);\r\n        } else {\r\n            // [databind#3497]: must consider possible PropertyNamingStrategy\r\n            String name \u003d \"cause\";\r\n            PropertyNamingStrategy pts \u003d config.getPropertyNamingStrategy();\r\n            if (pts !\u003d null) {\r\n                name \u003d pts.nameForSetterMethod(config, am, \"cause\");\r\n            }\r\n            SimpleBeanPropertyDefinition propDef \u003d SimpleBeanPropertyDefinition.construct(ctxt.getConfig(), am, new PropertyName(name));\r\n            SettableBeanProperty prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, am.getParameterType(0));\r\n            if (prop !\u003d null) {\r\n                // 21-Aug-2011, tatus: We may actually have found \u0027cause\u0027 property\r\n                //   to set... but let\u0027s replace it just in case, otherwise can end up with odd errors.\r\n                builder.addOrReplaceProperty(prop, true);\r\n            }\r\n        }\r\n    }\r\n    // update builder now that all information is in?\r\n    if (_factoryConfig.hasDeserializerModifiers()) {\r\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\r\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\r\n        }\r\n    }\r\n    JsonDeserializer\u003c?\u003e deserializer \u003d builder.build();\r\n    // At this point it ought to be a BeanDeserializer; if not, must assume\r\n    // it\u0027s some other thing that can handle deserialization ok...\r\n    if (deserializer instanceof BeanDeserializer) {\r\n        deserializer \u003d ThrowableDeserializer.construct(ctxt, (BeanDeserializer) deserializer);\r\n    }\r\n    // may have modifier(s) that wants to modify or replace serializer we just built:\r\n    if (_factoryConfig.hasDeserializerModifiers()) {\r\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\r\n            deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\r\n        }\r\n    }\r\n    return (JsonDeserializer\u003cObject\u003e) deserializer;\r\n}",
    "nodes": 23,
    "edges": 33,
    "cc": 12,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($z6 \u003d\u003d false) → B3 | else → B4",
      "B5 : If($r27 \u003d\u003d null) → B6 | else → B12",
      "B6 : If($z5 \u003d\u003d false) → B7 | else → B8",
      "B8 : If(r33 \u003d\u003d null) → B9 | else → B10",
      "B10 : If($r21 \u003d\u003d null) → B11 | else → B12",
      "B12 : If($z7 \u003d\u003d false) → B13 | else → B16",
      "B14 : If($z4 \u003d\u003d false) → B15 | else → B16",
      "B16 : If($z1 \u003d\u003d false) → B17 | else → B18",
      "B18 : If($z2 \u003d\u003d false) → B19 | else → B22",
      "B20 : If($z3 \u003d\u003d false) → B21 | else → B22"
    ],
    "blockList": [
      "B0 {\n  BeanDeserializerFactory\n  DeserializationContext\n  JavaType\n  BeanDescription\n  r1 \u003d r0.getConfig()\n  r29 \u003d r2.constructBeanDeserializerBuilder(r0, r3)\n  $r4 \u003d r2.findValueInstantiator(r0, r3)\n  r29.setValueInstantiator($r4)\n  r2.addBeanProps(r0, r3, r29)\n  r5 \u003d r29.getProperties()\n}",
      "B1 {\n  $z0 \u003d r5.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r23 \u003d r5.next()\n  r30 \u003d SettableBeanProperty) $r23\n  $r26 \u003d \"setCause\"\n  $r24 \u003d r30.getMember()\n  $r25 \u003d $r24.getName()\n  $z6 \u003d $r26.equals($r25)\n  if ($z6 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  r5.remove()\n  goto B5\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  $r6 \u003d Class[] INIT_CAUSE_PARAMS\u003e\n  $r27 \u003d r3.findMethod(\"initCause\", $r6)\n  if ($r27 \u003d\u003d null) goto B6 else B12\n}",
      "B6 {\n  $r16 \u003d PropertyName.construct(\"cause\")\n  r31 \u003d r29.findProperty($r16)\n  $z5 \u003d CreatorProperty\n  if ($z5 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $r22 \u003d CreatorProperty) r31\n  $r22.setFallbackSetter(null)\n  goto B12\n}",
      "B8 {\n  r32 \u003d \"cause\"\n  r33 \u003d r1.getPropertyNamingStrategy()\n  if (r33 \u003d\u003d null) goto B9 else B10\n}",
      "B9 {\n  r32 \u003d r33.nameForSetterMethod(r1, $r27, \"cause\")\n}",
      "B10 {\n  $r18 \u003d r0.getConfig()\n  $r17 \u003d PropertyName\n  new PropertyName(r32)\n  $r20 \u003d SimpleBeanPropertyDefinition.construct($r18, $r27, $r17)\n  $r19 \u003d $r27.getParameterType(0)\n  $r21 \u003d r2.constructSettableProperty(r0, r3, $r20, $r19)\n  if ($r21 \u003d\u003d null) goto B11 else B12\n}",
      "B11 {\n  r29.addOrReplaceProperty($r21, 1)\n}",
      "B12 {\n  $r34 \u003d DeserializerFactoryConfig _factoryConfig\u003e\n  $z7 \u003d $r34.hasDeserializerModifiers()\n  if ($z7 \u003d\u003d false) goto B13 else B16\n}",
      "B13 {\n  $r12 \u003d DeserializerFactoryConfig _factoryConfig\u003e\n  $r13 \u003d $r12.deserializerModifiers()\n  r35 \u003d $r13.iterator()\n}",
      "B14 {\n  $z4 \u003d r35.hasNext()\n  if ($z4 \u003d\u003d false) goto B15 else B16\n}",
      "B15 {\n  $r15 \u003d r35.next()\n  r36 \u003d BeanDeserializerModifier) $r15\n  r29 \u003d r36.updateBuilder(r1, r3, r29)\n  goto B14\n}",
      "B16 {\n  $r14 \u003d r29.build()\n  r37 \u003d $r14\n  $z1 \u003d BeanDeserializer\n  if ($z1 \u003d\u003d false) goto B17 else B18\n}",
      "B17 {\n  $r11 \u003d BeanDeserializer) $r14\n  r37 \u003d ThrowableDeserializer.construct(r0, $r11)\n}",
      "B18 {\n  $r7 \u003d DeserializerFactoryConfig _factoryConfig\u003e\n  $z2 \u003d $r7.hasDeserializerModifiers()\n  if ($z2 \u003d\u003d false) goto B19 else B22\n}",
      "B19 {\n  $r8 \u003d DeserializerFactoryConfig _factoryConfig\u003e\n  $r9 \u003d $r8.deserializerModifiers()\n  r38 \u003d $r9.iterator()\n}",
      "B20 {\n  $z3 \u003d r38.hasNext()\n  if ($z3 \u003d\u003d false) goto B21 else B22\n}",
      "B21 {\n  $r10 \u003d r38.next()\n  r39 \u003d BeanDeserializerModifier) $r10\n  r37 \u003d r39.modifyDeserializer(r1, r3, r37)\n  goto B20\n}",
      "B22 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B1",
      "B5 --\u003e B6",
      "B5 --\u003e B12",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B16",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B14",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e B19",
      "B18 --\u003e B22",
      "B19 --\u003e B20",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B20",
      "B22 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanDeserializerFactory#findValueInstantiator(...2)",
        "body": "(source not found)"
      },
      {
        "name": "BeanDeserializerFactory#addBeanProps(...3)",
        "body": "{\r\n    final ValueInstantiator valueInstantiator \u003d builder.getValueInstantiator();\r\n    final SettableBeanProperty[] creatorProps \u003d (valueInstantiator !\u003d null) ? valueInstantiator.getFromObjectArguments(ctxt.getConfig()) : null;\r\n    final boolean hasCreatorProps \u003d (creatorProps !\u003d null);\r\n    // 01-May-2016, tatu: Which base type to use here gets tricky, since\r\n    //   it may often make most sense to use general type for overrides,\r\n    //   but what we have here may be more specific impl type. But for now\r\n    //   just use it as is.\r\n    JsonIgnoreProperties.Value ignorals \u003d ctxt.getConfig().getDefaultPropertyIgnorals(beanDesc.getBeanClass(), beanDesc.getClassInfo());\r\n    Set\u003cString\u003e ignored;\r\n    if (ignorals !\u003d null) {\r\n        boolean ignoreAny \u003d ignorals.getIgnoreUnknown();\r\n        builder.setIgnoreUnknownProperties(ignoreAny);\r\n        // Or explicit/implicit definitions?\r\n        ignored \u003d ignorals.findIgnoredForDeserialization();\r\n        for (String propName : ignored) {\r\n            builder.addIgnorable(propName);\r\n        }\r\n    } else {\r\n        ignored \u003d Collections.emptySet();\r\n    }\r\n    JsonIncludeProperties.Value inclusions \u003d ctxt.getConfig().getDefaultPropertyInclusions(beanDesc.getBeanClass(), beanDesc.getClassInfo());\r\n    Set\u003cString\u003e included \u003d null;\r\n    if (inclusions !\u003d null) {\r\n        included \u003d inclusions.getIncluded();\r\n        if (included !\u003d null) {\r\n            for (String propName : included) {\r\n                builder.addIncludable(propName);\r\n            }\r\n        }\r\n    }\r\n    // Also, do we have a fallback \"any\" setter?\r\n    SettableAnyProperty anySetter \u003d _resolveAnySetter(ctxt, beanDesc, creatorProps);\r\n    if (anySetter !\u003d null) {\r\n        builder.setAnySetter(anySetter);\r\n    } else {\r\n        // 23-Jan-2018, tatu: although [databind#1805] would suggest we should block\r\n        //   properties regardless, for now only consider unless there\u0027s any setter...\r\n        Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\r\n        if (ignored2 !\u003d null) {\r\n            for (String propName : ignored2) {\r\n                // allow ignoral of similarly named JSON property, but do not force;\r\n                // latter means NOT adding this to \u0027ignored\u0027:\r\n                builder.addIgnorable(propName);\r\n            }\r\n        }\r\n    }\r\n    final boolean useGettersAsSetters \u003d ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) \u0026\u0026 ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);\r\n    // Ok: let\u0027s then filter out property definitions\r\n    List\u003cBeanPropertyDefinition\u003e propDefs \u003d filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored, included);\r\n    // After which we can let custom code change the set\r\n    if (_factoryConfig.hasDeserializerModifiers()) {\r\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\r\n            propDefs \u003d mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\r\n        }\r\n    }\r\n    // At which point we still have all kinds of properties; not all with mutators:\r\n    for (BeanPropertyDefinition propDef : propDefs) {\r\n        SettableBeanProperty prop \u003d null;\r\n        // 18-Oct-2013, tatu: Although constructor parameters have highest precedence,\r\n        //   we need to do linkage (as per [databind#318]), and so need to start with\r\n        //   other types, and only then create constructor parameter, if any.\r\n        if (propDef.hasSetter()) {\r\n            AnnotatedMethod setter \u003d propDef.getSetter();\r\n            JavaType propertyType \u003d setter.getParameterType(0);\r\n            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\r\n        } else if (propDef.hasField()) {\r\n            AnnotatedField field \u003d propDef.getField();\r\n            JavaType propertyType \u003d field.getType();\r\n            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\r\n        } else {\r\n            // NOTE: specifically getter, since field was already checked above\r\n            AnnotatedMethod getter \u003d propDef.getGetter();\r\n            if (getter !\u003d null) {\r\n                if (useGettersAsSetters \u0026\u0026 _isSetterlessType(getter.getRawType())) {\r\n                    // 23-Jan-2018, tatu: As per [databind#1805], need to ensure we don\u0027t\r\n                    //   accidentally sneak in getter-as-setter for `READ_ONLY` properties\r\n                    if (builder.hasIgnorable(propDef.getName())) {\r\n                        // skip\r\n                        ;\r\n                    } else {\r\n                        prop \u003d constructSetterlessProperty(ctxt, beanDesc, propDef);\r\n                    }\r\n                } else if (!propDef.hasConstructorParameter()) {\r\n                    PropertyMetadata md \u003d propDef.getMetadata();\r\n                    // 25-Oct-2016, tatu: If merging enabled, might not need setter.\r\n                    //   We cannot quite support this with creator parameters; in theory\r\n                    //   possibly, but right not not due to complexities of routing, so\r\n                    //   just prevent\r\n                    if (md.getMergeInfo() !\u003d null) {\r\n                        prop \u003d constructSetterlessProperty(ctxt, beanDesc, propDef);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // 25-Sep-2014, tatu: No point in finding constructor parameters for abstract types\r\n        //   (since they are never used anyway)\r\n        if (hasCreatorProps \u0026\u0026 propDef.hasConstructorParameter()) {\r\n            /* If property is passed via constructor parameter, we must\r\n                 * handle things in special way. Not sure what is the most optimal way...\r\n                 * for now, let\u0027s just call a (new) method in builder, which does nothing.\r\n                 */\r\n            // but let\u0027s call a method just to allow custom builders to be aware...\r\n            final String name \u003d propDef.getName();\r\n            CreatorProperty cprop \u003d null;\r\n            for (SettableBeanProperty cp : creatorProps) {\r\n                if (name.equals(cp.getName()) \u0026\u0026 (cp instanceof CreatorProperty)) {\r\n                    cprop \u003d (CreatorProperty) cp;\r\n                    break;\r\n                }\r\n            }\r\n            if (cprop \u003d\u003d null) {\r\n                List\u003cString\u003e n \u003d new ArrayList\u003c\u003e();\r\n                for (SettableBeanProperty cp : creatorProps) {\r\n                    n.add(cp.getName());\r\n                }\r\n                ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"Could not find creator property with name %s (known Creator properties: %s)\", ClassUtil.name(name), n);\r\n                continue;\r\n            }\r\n            if (prop !\u003d null) {\r\n                cprop.setFallbackSetter(prop);\r\n            }\r\n            Class\u003c?\u003e[] views \u003d propDef.findViews();\r\n            if (views \u003d\u003d null) {\r\n                views \u003d beanDesc.findDefaultViews();\r\n            }\r\n            cprop.setViews(views);\r\n            builder.addCreatorProperty(cprop);\r\n            continue;\r\n        }\r\n        if (prop !\u003d null) {\r\n            // one more thing before adding to builder: copy any metadata\r\n            Class\u003c?\u003e[] views \u003d propDef.findViews();\r\n            if (views \u003d\u003d null) {\r\n                views \u003d beanDesc.findDefaultViews();\r\n            }\r\n            prop.setViews(views);\r\n            builder.addProperty(prop);\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "BeanDeserializerFactory#constructBeanDeserializerBuilder(...2)",
        "body": "{\r\n    return new BeanDeserializerBuilder(beanDesc, ctxt);\r\n}"
      },
      {
        "name": "BeanDeserializerFactory#constructSettableProperty(...4)",
        "body": "{\r\n    // need to ensure method is callable (for non-public)\r\n    AnnotatedMember mutator \u003d propDef.getNonConstructorMutator();\r\n    // 08-Sep-2016, tatu: issues like [databind#1342] suggest something fishy\r\n    //   going on; add sanity checks to try to pin down actual problem...\r\n    //   Possibly passing creator parameter?\r\n    if (mutator \u003d\u003d null) {\r\n        ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"No non-constructor mutator available\");\r\n    }\r\n    JavaType type \u003d resolveMemberAndTypeAnnotations(ctxt, mutator, propType0);\r\n    // Does the Method specify the deserializer to use? If so, let\u0027s use it.\r\n    TypeDeserializer typeDeser \u003d type.getTypeHandler();\r\n    SettableBeanProperty prop;\r\n    if (mutator instanceof AnnotatedMethod) {\r\n        prop \u003d new MethodProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\r\n    } else {\r\n        // 08-Sep-2016, tatu: wonder if we should verify it is `AnnotatedField` to be safe?\r\n        prop \u003d new FieldProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\r\n    }\r\n    JsonDeserializer\u003c?\u003e deser \u003d findDeserializerFromAnnotation(ctxt, mutator);\r\n    if (deser \u003d\u003d null) {\r\n        deser \u003d type.getValueHandler();\r\n    }\r\n    if (deser !\u003d null) {\r\n        deser \u003d ctxt.handlePrimaryContextualization(deser, prop, type);\r\n        prop \u003d prop.withValueDeserializer(deser);\r\n    }\r\n    // need to retain name of managed forward references:\r\n    AnnotationIntrospector.ReferenceProperty ref \u003d propDef.findReferenceType();\r\n    if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\r\n        prop.setManagedReferenceName(ref.getName());\r\n    }\r\n    ObjectIdInfo objectIdInfo \u003d propDef.findObjectIdInfo();\r\n    if (objectIdInfo !\u003d null) {\r\n        prop.setObjectIdInfo(objectIdInfo);\r\n    }\r\n    return prop;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer",
    "methodName": "deserialize",
    "signature": "java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    // common case first:\r\n    if (p.isExpectedStartObjectToken()) {\r\n        JsonToken t \u003d p.nextToken();\r\n        if (_vanillaProcessing) {\r\n            return finishBuild(ctxt, vanillaDeserialize(p, ctxt, t));\r\n        }\r\n        return finishBuild(ctxt, deserializeFromObject(p, ctxt));\r\n    }\r\n    // and then others, generally requiring use of @JsonCreator\r\n    switch(p.currentTokenId()) {\r\n        case JsonTokenId.ID_STRING:\r\n            return finishBuild(ctxt, deserializeFromString(p, ctxt));\r\n        case JsonTokenId.ID_NUMBER_INT:\r\n            return finishBuild(ctxt, deserializeFromNumber(p, ctxt));\r\n        case JsonTokenId.ID_NUMBER_FLOAT:\r\n            return finishBuild(ctxt, deserializeFromDouble(p, ctxt));\r\n        case JsonTokenId.ID_EMBEDDED_OBJECT:\r\n            return p.getEmbeddedObject();\r\n        case JsonTokenId.ID_TRUE:\r\n        case JsonTokenId.ID_FALSE:\r\n            return finishBuild(ctxt, deserializeFromBoolean(p, ctxt));\r\n        case JsonTokenId.ID_START_ARRAY:\r\n            // these only work if there\u0027s a (delegating) creator, or UNWRAP_SINGLE_ARRAY\r\n            // [databind#2608]: Do NOT call `finishBuild()` as method implements it\r\n            return _deserializeFromArray(p, ctxt);\r\n        case JsonTokenId.ID_FIELD_NAME:\r\n        case JsonTokenId.ID_END_OBJECT:\r\n            return finishBuild(ctxt, deserializeFromObject(p, ctxt));\r\n        default:\r\n    }\r\n    return ctxt.handleUnexpectedToken(getValueType(ctxt), p);\r\n}",
    "nodes": 13,
    "edges": 12,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B4",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(switch-on $i0) → B11 | else → B10"
    ],
    "blockList": [
      "B0 {\n  BuilderBasedDeserializer\n  JsonParser\n  DeserializationContext\n  $z0 \u003d r0.isExpectedStartObjectToken()\n  if ($z0 \u003d\u003d false) goto B1 else B4\n}",
      "B1 {\n  r17 \u003d r0.nextToken()\n  $z1 \u003d BuilderBasedDeserializer: boolean _vanillaProcessing\u003e\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r20 \u003d r2.vanillaDeserialize(r0, r3, r17)\n  $r21 \u003d r2.finishBuild(r3, $r20)\n  return\n}",
      "B3 {\n  $r18 \u003d r2.deserializeFromObject(r0, r3)\n  $r19 \u003d r2.finishBuild(r3, $r18)\n  return\n}",
      "B4 {\n  $i0 \u003d r0.currentTokenId()\n  DeserializationContext)\u003e(r3); }\n}",
      "B5 {\n  $r10 \u003d r2.deserializeFromString(r0, r3)\n  $r11 \u003d r2.finishBuild(r3, $r10)\n  return\n}",
      "B6 {\n  $r8 \u003d r2.deserializeFromNumber(r0, r3)\n  $r9 \u003d r2.finishBuild(r3, $r8)\n  return\n}",
      "B7 {\n  $r6 \u003d r2.deserializeFromDouble(r0, r3)\n  $r7 \u003d r2.finishBuild(r3, $r6)\n  return\n}",
      "B8 {\n  $r1 \u003d r0.getEmbeddedObject()\n  return\n}",
      "B9 {\n  $r4 \u003d r2.deserializeFromBoolean(r0, r3)\n  $r5 \u003d r2.finishBuild(r3, $r4)\n  return\n}",
      "B10 {\n  $r12 \u003d r2._deserializeFromArray(r0, r3)\n  return\n}",
      "B11 {\n  $r13 \u003d r2.deserializeFromObject(r0, r3)\n  $r14 \u003d r2.finishBuild(r3, $r13)\n  return\n}",
      "B12 {\n  $r15 \u003d r2.getValueType(r3)\n  $r16 \u003d r3.handleUnexpectedToken($r15, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B11",
      "B4 --\u003e B10",
      "B4 --\u003e B12",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B4 --\u003e B7",
      "B4 --\u003e B9",
      "B4 --\u003e B8",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BuilderBasedDeserializer#deserializeFromObject(...2)",
        "body": "{\r\n    if (_nonStandardCreation) {\r\n        if (_unwrappedPropertyHandler !\u003d null) {\r\n            return deserializeWithUnwrapped(p, ctxt);\r\n        }\r\n        if (_externalTypeIdHandler !\u003d null) {\r\n            return deserializeWithExternalTypeId(p, ctxt);\r\n        }\r\n        return deserializeFromObjectUsingNonDefault(p, ctxt);\r\n    }\r\n    Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\r\n    if (_injectables !\u003d null) {\r\n        injectValues(ctxt, bean);\r\n    }\r\n    if (_needViewProcesing) {\r\n        Class\u003c?\u003e view \u003d ctxt.getActiveView();\r\n        if (view !\u003d null) {\r\n            return deserializeWithView(p, ctxt, bean, view);\r\n        }\r\n    }\r\n    for (; p.currentToken() \u003d\u003d JsonToken.FIELD_NAME; p.nextToken()) {\r\n        String propName \u003d p.currentName();\r\n        // Skip field name:\r\n        p.nextToken();\r\n        SettableBeanProperty prop \u003d _beanProperties.find(propName);\r\n        if (prop !\u003d null) {\r\n            // normal case\r\n            try {\r\n                bean \u003d prop.deserializeSetAndReturn(p, ctxt, bean);\r\n            } catch (Exception e) {\r\n                wrapAndThrow(e, bean, propName, ctxt);\r\n            }\r\n            continue;\r\n        }\r\n        handleUnknownVanilla(p, ctxt, bean, propName);\r\n    }\r\n    return bean;\r\n}"
      },
      {
        "name": "BuilderBasedDeserializer#deserializeFromBoolean(...2)",
        "body": "(source not found)"
      },
      {
        "name": "BuilderBasedDeserializer#deserializeFromDouble(...2)",
        "body": "(source not found)"
      },
      {
        "name": "BuilderBasedDeserializer#_deserializeFromArray(...2)",
        "body": "{\r\n    // note: cannot call `_delegateDeserializer()` since order reversed here:\r\n    JsonDeserializer\u003cObject\u003e delegateDeser \u003d _arrayDelegateDeserializer;\r\n    // fallback to non-array delegate\r\n    if ((delegateDeser !\u003d null) || ((delegateDeser \u003d _delegateDeserializer) !\u003d null)) {\r\n        Object builder \u003d _valueInstantiator.createUsingArrayDelegate(ctxt, delegateDeser.deserialize(p, ctxt));\r\n        if (_injectables !\u003d null) {\r\n            injectValues(ctxt, builder);\r\n        }\r\n        return finishBuild(ctxt, builder);\r\n    }\r\n    final CoercionAction act \u003d _findCoercionFromEmptyArray(ctxt);\r\n    final boolean unwrap \u003d ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\r\n    if (unwrap || (act !\u003d CoercionAction.Fail)) {\r\n        JsonToken t \u003d p.nextToken();\r\n        if (t \u003d\u003d JsonToken.END_ARRAY) {\r\n            switch(act) {\r\n                case AsEmpty:\r\n                    return getEmptyValue(ctxt);\r\n                case AsNull:\r\n                case TryConvert:\r\n                    return getNullValue(ctxt);\r\n                default:\r\n            }\r\n            return ctxt.handleUnexpectedToken(getValueType(ctxt), JsonToken.START_ARRAY, p, null);\r\n        }\r\n        if (unwrap) {\r\n            final Object value \u003d deserialize(p, ctxt);\r\n            if (p.nextToken() !\u003d JsonToken.END_ARRAY) {\r\n                handleMissingEndArrayForSingle(p, ctxt);\r\n            }\r\n            return value;\r\n        }\r\n    }\r\n    return ctxt.handleUnexpectedToken(getValueType(ctxt), p);\r\n}"
      },
      {
        "name": "BuilderBasedDeserializer#deserializeFromString(...2)",
        "body": "(source not found)"
      },
      {
        "name": "BuilderBasedDeserializer#deserializeFromNumber(...2)",
        "body": "(source not found)"
      },
      {
        "name": "BuilderBasedDeserializer#finishBuild(...2)",
        "body": "{\r\n    // As per [databind#777], allow returning builder itself\r\n    if (null \u003d\u003d _buildMethod) {\r\n        return builder;\r\n    }\r\n    try {\r\n        return _buildMethod.getMember().invoke(builder, (Object[]) null);\r\n    } catch (Exception e) {\r\n        return wrapInstantiationProblem(e, ctxt);\r\n    }\r\n}"
      },
      {
        "name": "BuilderBasedDeserializer#vanillaDeserialize(...3)",
        "body": "{\r\n    Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\r\n    for (; p.currentToken() \u003d\u003d JsonToken.FIELD_NAME; p.nextToken()) {\r\n        String propName \u003d p.currentName();\r\n        // Skip field name:\r\n        p.nextToken();\r\n        SettableBeanProperty prop \u003d _beanProperties.find(propName);\r\n        if (prop !\u003d null) {\r\n            // normal case\r\n            try {\r\n                bean \u003d prop.deserializeSetAndReturn(p, ctxt, bean);\r\n            } catch (Exception e) {\r\n                wrapAndThrow(e, bean, propName, ctxt);\r\n            }\r\n        } else {\r\n            handleUnknownVanilla(p, ctxt, bean, propName);\r\n        }\r\n    }\r\n    return bean;\r\n}"
      },
      {
        "name": "BuilderBasedDeserializer#getValueType(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer",
    "methodName": "deserialize",
    "signature": "java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    // 26-Oct-2016, tatu: I cannot see any of making this actually\r\n    //    work correctly, so let\u0027s indicate problem right away\r\n    JavaType valueType \u003d _targetType;\r\n    // Did they try to give us builder?\r\n    Class\u003c?\u003e builderRawType \u003d handledType();\r\n    Class\u003c?\u003e instRawType \u003d value.getClass();\r\n    if (builderRawType.isAssignableFrom(instRawType)) {\r\n        return ctxt.reportBadDefinition(valueType, String.format(\"Deserialization of %s by passing existing Builder (%s) instance not supported\", valueType, builderRawType.getName()));\r\n    }\r\n    return ctxt.reportBadDefinition(valueType, String.format(\"Deserialization of %s by passing existing instance (of %s) not supported\", valueType, instRawType.getName()));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BuilderBasedDeserializer\n  JsonParser\n  DeserializationContext\n  Object\n  r1 \u003d JavaType _targetType\u003e\n  r2 \u003d r0.handledType()\n  r4 \u003d r3.getClass()\n  $z0 \u003d r2.isAssignableFrom(r4)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d Object)[2]\n  $r10[0] \u003d r1\n  $r11 \u003d r2.getName()\n  $r10[1] \u003d $r11\n  $r12 \u003d String.format(\"Deserialization of %s by passing existing Builder (%s) instance not supported\", $r10)\n  $r13 \u003d r5.reportBadDefinition(r1, $r12)\n  return\n}",
      "B2 {\n  $r6 \u003d Object)[2]\n  $r6[0] \u003d r1\n  $r7 \u003d r4.getName()\n  $r6[1] \u003d $r7\n  $r8 \u003d String.format(\"Deserialization of %s by passing existing instance (of %s) not supported\", $r6)\n  $r9 \u003d r5.reportBadDefinition(r1, $r8)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BuilderBasedDeserializer#handledType(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer",
    "methodName": "deserializeFromObject",
    "signature": "java.lang.Object deserializeFromObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    if (_nonStandardCreation) {\r\n        if (_unwrappedPropertyHandler !\u003d null) {\r\n            return deserializeWithUnwrapped(p, ctxt);\r\n        }\r\n        if (_externalTypeIdHandler !\u003d null) {\r\n            return deserializeWithExternalTypeId(p, ctxt);\r\n        }\r\n        return deserializeFromObjectUsingNonDefault(p, ctxt);\r\n    }\r\n    Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\r\n    if (_injectables !\u003d null) {\r\n        injectValues(ctxt, bean);\r\n    }\r\n    if (_needViewProcesing) {\r\n        Class\u003c?\u003e view \u003d ctxt.getActiveView();\r\n        if (view !\u003d null) {\r\n            return deserializeWithView(p, ctxt, bean, view);\r\n        }\r\n    }\r\n    for (; p.currentToken() \u003d\u003d JsonToken.FIELD_NAME; p.nextToken()) {\r\n        String propName \u003d p.currentName();\r\n        // Skip field name:\r\n        p.nextToken();\r\n        SettableBeanProperty prop \u003d _beanProperties.find(propName);\r\n        if (prop !\u003d null) {\r\n            // normal case\r\n            try {\r\n                bean \u003d prop.deserializeSetAndReturn(p, ctxt, bean);\r\n            } catch (Exception e) {\r\n                wrapAndThrow(e, bean, propName, ctxt);\r\n            }\r\n            continue;\r\n        }\r\n        handleUnknownVanilla(p, ctxt, bean, propName);\r\n    }\r\n    return bean;\r\n}",
    "nodes": 18,
    "edges": 21,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B6",
      "B1 : If($r8 \u003d\u003d null) → B2 | else → B3",
      "B3 : If($r9 \u003d\u003d null) → B4 | else → B5",
      "B6 : If($r3 \u003d\u003d null) → B7 | else → B8",
      "B8 : If($z1 \u003d\u003d false) → B9 | else → B11",
      "B9 : If(r15 \u003d\u003d null) → B10 | else → B11",
      "B11 : If($r16 !\u003d $r17) → B12 | else → B17",
      "B12 : If(r6 \u003d\u003d null) → B13 | else → B15"
    ],
    "blockList": [
      "B0 {\n  BuilderBasedDeserializer\n  JsonParser\n  DeserializationContext\n  $z0 \u003d BuilderBasedDeserializer: boolean _nonStandardCreation\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B6\n}",
      "B1 {\n  $r8 \u003d UnwrappedPropertyHandler _unwrappedPropertyHandler\u003e\n  if ($r8 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r12 \u003d r0.deserializeWithUnwrapped(r4, r1)\n  return\n}",
      "B3 {\n  $r9 \u003d ExternalTypeHandler _externalTypeIdHandler\u003e\n  if ($r9 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r11 \u003d r0.deserializeWithExternalTypeId(r4, r1)\n  return\n}",
      "B5 {\n  $r10 \u003d r0.deserializeFromObjectUsingNonDefault(r4, r1)\n  return\n}",
      "B6 {\n  $r2 \u003d ValueInstantiator _valueInstantiator\u003e\n  r14 \u003d $r2.createUsingDefault(r1)\n  $r3 \u003d ValueInjector[] _injectables\u003e\n  if ($r3 \u003d\u003d null) goto B7 else B8\n}",
      "B7 {\n  r0.injectValues(r1, r14)\n}",
      "B8 {\n  $z1 \u003d BuilderBasedDeserializer: boolean _needViewProcesing\u003e\n  if ($z1 \u003d\u003d false) goto B9 else B11\n}",
      "B9 {\n  r15 \u003d r1.getActiveView()\n  if (r15 \u003d\u003d null) goto B10 else B11\n}",
      "B10 {\n  $r7 \u003d r0.deserializeWithView(r4, r1, r14, r15)\n  return\n}",
      "B11 {\n  $r16 \u003d r4.currentToken()\n  $r17 \u003d JsonToken FIELD_NAME\u003e\n  if ($r16 !\u003d $r17) goto B12 else B17\n}",
      "B12 {\n  r18 \u003d r4.currentName()\n  r4.nextToken()\n  $r5 \u003d BeanPropertyMap _beanProperties\u003e\n  r6 \u003d $r5.find(r18)\n  if (r6 \u003d\u003d null) goto B13 else B15\n}",
      "B13 {\n  r14 \u003d r6.deserializeSetAndReturn(r4, r1, r14)\n  goto B16\n}",
      "B14 {\n  $r13 :\u003d @caughtexception\n  r0.wrapAndThrow($r13, r14, r18, r1)\n  goto B16\n}",
      "B15 {\n  r0.handleUnknownVanilla(r4, r1, r14, r18)\n}",
      "B16 {\n  r4.nextToken()\n  goto B11\n}",
      "B17 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B17",
      "B12 --\u003e B13",
      "B12 --\u003e B15",
      "B13 --\u003e B16",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B11",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BuilderBasedDeserializer#deserializeWithView(...4)",
        "body": "{\r\n    JsonToken t \u003d p.currentToken();\r\n    for (; t \u003d\u003d JsonToken.FIELD_NAME; t \u003d p.nextToken()) {\r\n        String propName \u003d p.currentName();\r\n        // Skip field name:\r\n        p.nextToken();\r\n        SettableBeanProperty prop \u003d _beanProperties.find(propName);\r\n        if (prop !\u003d null) {\r\n            if (!prop.visibleInView(activeView)) {\r\n                // [databind#437]: fields in other views to be considered as unknown properties\r\n                if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_UNEXPECTED_VIEW_PROPERTIES)) {\r\n                    ctxt.reportInputMismatch(handledType(), String.format(\"Input mismatch while deserializing %s. Property \u0027%s\u0027 is not part of current active view \u0027%s\u0027\" + \" (disable \u0027DeserializationFeature.FAIL_ON_UNEXPECTED_VIEW_PROPERTIES\u0027 to allow)\", ClassUtil.nameOf(handledType()), prop.getName(), activeView.getName()));\r\n                }\r\n                p.skipChildren();\r\n                continue;\r\n            }\r\n            try {\r\n                bean \u003d prop.deserializeSetAndReturn(p, ctxt, bean);\r\n            } catch (Exception e) {\r\n                wrapAndThrow(e, bean, propName, ctxt);\r\n            }\r\n            continue;\r\n        }\r\n        handleUnknownVanilla(p, ctxt, bean, propName);\r\n    }\r\n    return bean;\r\n}"
      },
      {
        "name": "BuilderBasedDeserializer#injectValues(...2)",
        "body": "(source not found)"
      },
      {
        "name": "BuilderBasedDeserializer#deserializeFromObjectUsingNonDefault(...2)",
        "body": "(source not found)"
      },
      {
        "name": "BuilderBasedDeserializer#deserializeWithExternalTypeId(...2)",
        "body": "{\r\n    if (_propertyBasedCreator !\u003d null) {\r\n        return deserializeUsingPropertyBasedWithExternalTypeId(p, ctxt);\r\n    }\r\n    return deserializeWithExternalTypeId(p, ctxt, _valueInstantiator.createUsingDefault(ctxt));\r\n}"
      },
      {
        "name": "BuilderBasedDeserializer#deserializeWithUnwrapped(...2)",
        "body": "{\r\n    if (_delegateDeserializer !\u003d null) {\r\n        return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\r\n    }\r\n    if (_propertyBasedCreator !\u003d null) {\r\n        return deserializeUsingPropertyBasedWithUnwrapped(p, ctxt);\r\n    }\r\n    TokenBuffer tokens \u003d ctxt.bufferForInputBuffering(p);\r\n    tokens.writeStartObject();\r\n    Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\r\n    if (_injectables !\u003d null) {\r\n        injectValues(ctxt, bean);\r\n    }\r\n    final Class\u003c?\u003e activeView \u003d _needViewProcesing ? ctxt.getActiveView() : null;\r\n    for (; p.currentToken() \u003d\u003d JsonToken.FIELD_NAME; p.nextToken()) {\r\n        String propName \u003d p.currentName();\r\n        p.nextToken();\r\n        SettableBeanProperty prop \u003d _beanProperties.find(propName);\r\n        if (prop !\u003d null) {\r\n            // normal case\r\n            if (activeView !\u003d null \u0026\u0026 !prop.visibleInView(activeView)) {\r\n                p.skipChildren();\r\n                continue;\r\n            }\r\n            try {\r\n                bean \u003d prop.deserializeSetAndReturn(p, ctxt, bean);\r\n            } catch (Exception e) {\r\n                wrapAndThrow(e, bean, propName, ctxt);\r\n            }\r\n            continue;\r\n        }\r\n        // ignorable things should be ignored\r\n        if (IgnorePropertiesUtil.shouldIgnore(propName, _ignorableProps, _includableProps)) {\r\n            handleIgnoredProperty(p, ctxt, bean, propName);\r\n            continue;\r\n        }\r\n        // but... others should be passed to unwrapped property deserializers\r\n        tokens.writeFieldName(propName);\r\n        tokens.copyCurrentStructure(p);\r\n        // how about any setter? We\u0027ll get copies but...\r\n        if (_anySetter !\u003d null) {\r\n            try {\r\n                _anySetter.deserializeAndSet(p, ctxt, bean, propName);\r\n            } catch (Exception e) {\r\n                wrapAndThrow(e, bean, propName, ctxt);\r\n            }\r\n            continue;\r\n        }\r\n    }\r\n    tokens.writeEndObject();\r\n    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\r\n}"
      },
      {
        "name": "BuilderBasedDeserializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      },
      {
        "name": "BuilderBasedDeserializer#handleUnknownVanilla(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.CreatorProperty",
    "methodName": "withValueDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty withValueDeserializer(com.fasterxml.jackson.databind.JsonDeserializer)",
    "visibility": "public",
    "body": "{\r\n    if (_valueDeserializer \u003d\u003d deser) {\r\n        return this;\r\n    }\r\n    // 07-May-2019, tatu: As per [databind#2303], must keep VD/NVP in-sync if they were\r\n    NullValueProvider nvp \u003d (_valueDeserializer \u003d\u003d _nullProvider) ? deser : _nullProvider;\r\n    return new CreatorProperty(this, deser, nvp);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2",
      "B2 : If($r4 !\u003d $r3) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CreatorProperty\n  JsonDeserializer\n  $r2 \u003d JsonDeserializer _valueDeserializer\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d JsonDeserializer _valueDeserializer\u003e\n  $r3 \u003d NullValueProvider _nullProvider\u003e\n  if ($r4 !\u003d $r3) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d r1\n  goto B5\n}",
      "B4 {\n  $r6 \u003d NullValueProvider _nullProvider\u003e\n}",
      "B5 {\n  $r5 \u003d CreatorProperty\n  new CreatorProperty(r0, r1, $r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.CreatorProperty",
    "methodName": "fixAccess",
    "signature": "void fixAccess(com.fasterxml.jackson.databind.DeserializationConfig)",
    "visibility": "public",
    "body": "{\r\n    if (_fallbackSetter !\u003d null) {\r\n        _fallbackSetter.fixAccess(config);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CreatorProperty\n  DeserializationConfig\n  $r1 \u003d SettableBeanProperty _fallbackSetter\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d SettableBeanProperty _fallbackSetter\u003e\n  $r3.fixAccess(r2)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.CreatorProperty",
    "methodName": "findInjectableValue",
    "signature": "java.lang.Object findInjectableValue(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (_injectableValue \u003d\u003d null) {\r\n        context.reportBadDefinition(ClassUtil.classOf(beanInstance), String.format(\"Property %s (type %s) has no injectable value id configured\", ClassUtil.name(getName()), ClassUtil.classNameOf(this)));\r\n    }\r\n    // lgtm [java/dereferenced-value-may-be-null]\r\n    return context.findInjectableValue(_injectableValue.getId(), this, beanInstance);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CreatorProperty\n  DeserializationContext\n  Object\n  $r1 \u003d JacksonInject$Value _injectableValue\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r12 \u003d ClassUtil.classOf(r4)\n  $r7 \u003d Object)[2]\n  $r8 \u003d r0.getName()\n  $r9 \u003d ClassUtil.name($r8)\n  $r7[0] \u003d $r9\n  $r10 \u003d ClassUtil.classNameOf(r0)\n  $r7[1] \u003d $r10\n  $r11 \u003d String.format(\"Property %s (type %s) has no injectable value id configured\", $r7)\n  r2.reportBadDefinition($r12, $r11)\n}",
      "B2 {\n  $r3 \u003d JacksonInject$Value _injectableValue\u003e\n  $r5 \u003d $r3.getId()\n  $r6 \u003d r2.findInjectableValue($r5, r0, r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CreatorProperty#getName(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.CreatorProperty",
    "methodName": "getAnnotation",
    "signature": "java.lang.\u0027annotation\u0027.Annotation getAnnotation(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (_annotated \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return _annotated.getAnnotation(acls);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CreatorProperty\n  Class\n  $r1 \u003d AnnotatedParameter _annotated\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d AnnotatedParameter _annotated\u003e\n  $r4 \u003d $r3.getAnnotation(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.CreatorProperty",
    "methodName": "getMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata getMetadata()",
    "visibility": "public",
    "body": "{\r\n    // 03-Jun-2019, tatu: Added as per [databind#2280] to support merge.\r\n    //   Not 100% sure why it would be needed (or fixes things) but... appears to.\r\n    //   Need to understand better in future as it seems like it should probably be\r\n    //   linked earlier during construction or something.\r\n    // 22-Sep-2019, tatu: Was hoping [databind#2458] fixed this, too, but no such luck\r\n    PropertyMetadata md \u003d super.getMetadata();\r\n    if (_fallbackSetter !\u003d null) {\r\n        return md.withMergeInfo(_fallbackSetter.getMetadata().getMergeInfo());\r\n    }\r\n    return md;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CreatorProperty\n  r1 \u003d r0.getMetadata()\n  $r2 \u003d SettableBeanProperty _fallbackSetter\u003e\n  if ($r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d SettableBeanProperty _fallbackSetter\u003e\n  $r4 \u003d $r3.getMetadata()\n  $r5 \u003d $r4.getMergeInfo()\n  $r6 \u003d r1.withMergeInfo($r5)\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.CreatorProperty",
    "methodName": "getInjectableValueId",
    "signature": "java.lang.Object getInjectableValueId()",
    "visibility": "public",
    "body": "{\r\n    return (_injectableValue \u003d\u003d null) ? null : _injectableValue.getId();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CreatorProperty\n  $r1 \u003d JacksonInject$Value _injectableValue\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d JacksonInject$Value _injectableValue\u003e\n  $r3 \u003d $r2.getId()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.CreatorProperty",
    "methodName": "isInjectionOnly",
    "signature": "boolean isInjectionOnly()",
    "visibility": "public",
    "body": "{\r\n    return (_injectableValue !\u003d null) \u0026\u0026 !_injectableValue.willUseInput(true);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CreatorProperty\n  $r1 \u003d JacksonInject$Value _injectableValue\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d JacksonInject$Value _injectableValue\u003e\n  $z0 \u003d $r2.willUseInput(1)\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.DataFormatReaders",
    "methodName": "withOptimalMatch",
    "signature": "com.fasterxml.jackson.databind.deser.DataFormatReaders withOptimalMatch(com.fasterxml.jackson.core.format.MatchStrength)",
    "visibility": "public",
    "body": "{\r\n    if (optMatch \u003d\u003d _optimalMatch) {\r\n        return this;\r\n    }\r\n    return new DataFormatReaders(_readers, optMatch, _minimalMatch, _maxInputLookahead);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DataFormatReaders\n  MatchStrength\n  $r2 \u003d MatchStrength _optimalMatch\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d DataFormatReaders\n  $r5 \u003d ObjectReader[] _readers\u003e\n  $r4 \u003d MatchStrength _minimalMatch\u003e\n  $i0 \u003d DataFormatReaders: int _maxInputLookahead\u003e\n  new DataFormatReaders($r5, r0, $r4, $i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.DataFormatReaders",
    "methodName": "withMinimalMatch",
    "signature": "com.fasterxml.jackson.databind.deser.DataFormatReaders withMinimalMatch(com.fasterxml.jackson.core.format.MatchStrength)",
    "visibility": "public",
    "body": "{\r\n    if (minMatch \u003d\u003d _minimalMatch) {\r\n        return this;\r\n    }\r\n    return new DataFormatReaders(_readers, _optimalMatch, minMatch, _maxInputLookahead);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DataFormatReaders\n  MatchStrength\n  $r2 \u003d MatchStrength _minimalMatch\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d DataFormatReaders\n  $r5 \u003d ObjectReader[] _readers\u003e\n  $r4 \u003d MatchStrength _optimalMatch\u003e\n  $i0 \u003d DataFormatReaders: int _maxInputLookahead\u003e\n  new DataFormatReaders($r5, $r4, r0, $i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.DataFormatReaders",
    "methodName": "withMaxInputLookahead",
    "signature": "com.fasterxml.jackson.databind.deser.DataFormatReaders withMaxInputLookahead(int)",
    "visibility": "public",
    "body": "{\r\n    if (lookaheadBytes \u003d\u003d _maxInputLookahead) {\r\n        return this;\r\n    }\r\n    return new DataFormatReaders(_readers, _optimalMatch, _minimalMatch, lookaheadBytes);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 !\u003d $i1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DataFormatReaders\n  i0 :\u003d @parameter0: int\n  $i1 \u003d DataFormatReaders: int _maxInputLookahead\u003e\n  if (i0 !\u003d $i1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d DataFormatReaders\n  $r4 \u003d ObjectReader[] _readers\u003e\n  $r3 \u003d MatchStrength _optimalMatch\u003e\n  $r2 \u003d MatchStrength _minimalMatch\u003e\n  new DataFormatReaders($r4, $r3, $r2, i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.DataFormatReaders",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.deser.DataFormatReaders \u0027with\u0027(com.fasterxml.jackson.databind.DeserializationConfig)",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d _readers.length;\r\n    ObjectReader[] r \u003d new ObjectReader[len];\r\n    for (int i \u003d 0; i \u003c len; ++i) {\r\n        r[i] \u003d _readers[i].with(config);\r\n    }\r\n    return new DataFormatReaders(r, _optimalMatch, _minimalMatch, _maxInputLookahead);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DataFormatReaders\n  DeserializationConfig\n  $r1 \u003d ObjectReader[] _readers\u003e\n  i0 \u003d lengthof $r1\n  r2 \u003d ObjectReader)[i0]\n  i2 \u003d 0\n}",
      "B1 {\n  if (i2 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d ObjectReader[] _readers\u003e\n  $r8 \u003d $r6[i2]\n  $r9 \u003d $r8.with(r7)\n  r2[i2] \u003d $r9\n  i2 \u003d i2 + 1\n  goto B1\n}",
      "B3 {\n  $r3 \u003d DataFormatReaders\n  $r5 \u003d MatchStrength _optimalMatch\u003e\n  $r4 \u003d MatchStrength _minimalMatch\u003e\n  $i1 \u003d DataFormatReaders: int _maxInputLookahead\u003e\n  new DataFormatReaders(r2, $r5, $r4, $i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.DataFormatReaders",
    "methodName": "withType",
    "signature": "com.fasterxml.jackson.databind.deser.DataFormatReaders withType(com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d _readers.length;\r\n    ObjectReader[] r \u003d new ObjectReader[len];\r\n    for (int i \u003d 0; i \u003c len; ++i) {\r\n        r[i] \u003d _readers[i].forType(type);\r\n    }\r\n    return new DataFormatReaders(r, _optimalMatch, _minimalMatch, _maxInputLookahead);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DataFormatReaders\n  JavaType\n  $r1 \u003d ObjectReader[] _readers\u003e\n  i0 \u003d lengthof $r1\n  r2 \u003d ObjectReader)[i0]\n  i2 \u003d 0\n}",
      "B1 {\n  if (i2 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d ObjectReader[] _readers\u003e\n  $r8 \u003d $r6[i2]\n  $r9 \u003d $r8.forType(r7)\n  r2[i2] \u003d $r9\n  i2 \u003d i2 + 1\n  goto B1\n}",
      "B3 {\n  $r3 \u003d DataFormatReaders\n  $r5 \u003d MatchStrength _optimalMatch\u003e\n  $r4 \u003d MatchStrength _minimalMatch\u003e\n  $i1 \u003d DataFormatReaders: int _maxInputLookahead\u003e\n  new DataFormatReaders(r2, $r5, $r4, $i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.DataFormatReaders",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    StringBuilder sb \u003d new StringBuilder();\r\n    sb.append(\u0027[\u0027);\r\n    final int len \u003d _readers.length;\r\n    if (len \u003e 0) {\r\n        sb.append(_readers[0].getFactory().getFormatName());\r\n        for (int i \u003d 1; i \u003c len; ++i) {\r\n            sb.append(\", \");\r\n            sb.append(_readers[i].getFactory().getFormatName());\r\n        }\r\n    }\r\n    sb.append(\u0027]\u0027);\r\n    return sb.toString();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003c\u003d 0) → B1 | else → B4",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DataFormatReaders\n  $r0 \u003d StringBuilder\n  new StringBuilder()\n  $r0.append(91)\n  $r2 \u003d ObjectReader[] _readers\u003e\n  i0 \u003d lengthof $r2\n  if (i0 \u003c\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $r4 \u003d ObjectReader[] _readers\u003e\n  $r5 \u003d $r4[0]\n  $r6 \u003d $r5.getFactory()\n  $r7 \u003d $r6.getFormatName()\n  $r0.append($r7)\n  i1 \u003d 1\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B4\n}",
      "B3 {\n  $r0.append(\", \")\n  $r8 \u003d ObjectReader[] _readers\u003e\n  $r9 \u003d $r8[i1]\n  $r10 \u003d $r9.getFactory()\n  $r11 \u003d $r10.getFormatName()\n  $r0.append($r11)\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B4 {\n  $r0.append(93)\n  $r3 \u003d $r0.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "methodName": "findValueDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer findValueDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.DeserializerFactory,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(propertyType, \"Null \u0027propertyType\u0027 passed\");\r\n    JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\r\n    if (deser \u003d\u003d null) {\r\n        // If not, need to request factory to construct (or recycle)\r\n        deser \u003d _createAndCacheValueDeserializer(ctxt, factory, propertyType);\r\n        if (deser \u003d\u003d null) {\r\n            // Should we let caller handle it? Let\u0027s have a helper method\r\n            // decide it; can throw an exception, or return a valid\r\n            // deserializer\r\n            deser \u003d _handleUnknownValueDeserializer(ctxt, propertyType);\r\n        }\r\n    }\r\n    return deser;\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B3",
      "B1 : If(r4 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DeserializerCache\n  DeserializationContext\n  DeserializerFactory\n  JavaType\n  Objects.requireNonNull(r0, \"Null \\\u0027propertyType\\\u0027 passed\")\n  r4 \u003d r1._findCachedDeserializer(r0)\n  if (r4 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  r4 \u003d r1._createAndCacheValueDeserializer(r2, r3, r0)\n  if (r4 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  r4 \u003d r1._handleUnknownValueDeserializer(r2, r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DeserializerCache#_handleUnknownValueDeserializer(...2)",
        "body": "{\r\n    // Let\u0027s try to figure out the reason, to give better error messages\r\n    Class\u003c?\u003e rawClass \u003d type.getRawClass();\r\n    if (!ClassUtil.isConcrete(rawClass)) {\r\n        return ctxt.reportBadDefinition(type, \"Cannot find a Value deserializer for abstract type \" + type);\r\n    }\r\n    return ctxt.reportBadDefinition(type, \"Cannot find a Value deserializer for type \" + type);\r\n}"
      },
      {
        "name": "DeserializerCache#_createAndCacheValueDeserializer(...3)",
        "body": "{\r\n    // Only one thread to construct deserializers at any given point in time;\r\n    // limitations necessary to ensure that only completely initialized ones\r\n    // are visible and used.\r\n    final boolean isCustom \u003d _hasCustomHandlers(type);\r\n    if (!isCustom) {\r\n        JsonDeserializer\u003cObject\u003e deser \u003d _cachedDeserializers.get(type);\r\n        if (deser !\u003d null) {\r\n            return deser;\r\n        }\r\n    }\r\n    _incompleteDeserializersLock.lock();\r\n    try {\r\n        if (!isCustom) {\r\n            JsonDeserializer\u003cObject\u003e deser \u003d _cachedDeserializers.get(type);\r\n            if (deser !\u003d null) {\r\n                return deser;\r\n            }\r\n        }\r\n        // Ok, then: could it be that due to a race condition, deserializer can now be found?\r\n        int count \u003d _incompleteDeserializers.size();\r\n        // Or perhaps being resolved right now?\r\n        if (count \u003e 0) {\r\n            JsonDeserializer\u003cObject\u003e deser \u003d _incompleteDeserializers.get(type);\r\n            if (deser !\u003d null) {\r\n                return deser;\r\n            }\r\n        }\r\n        // Nope: need to create and possibly cache\r\n        try {\r\n            return _createAndCache2(ctxt, factory, type, isCustom);\r\n        } finally {\r\n            // also: any deserializers that have been created are complete by now\r\n            if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\r\n                _incompleteDeserializers.clear();\r\n            }\r\n        }\r\n    } finally {\r\n        _incompleteDeserializersLock.unlock();\r\n    }\r\n}"
      },
      {
        "name": "DeserializerCache#_findCachedDeserializer(...1)",
        "body": "{\r\n    // note: caller ensures \u0027type\u0027 never null\r\n    if (_hasCustomHandlers(type)) {\r\n        return null;\r\n    }\r\n    return _cachedDeserializers.get(type);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "methodName": "findKeyDeserializer",
    "signature": "com.fasterxml.jackson.databind.KeyDeserializer findKeyDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.DeserializerFactory,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(type, \"Null \u0027type\u0027 passed\");\r\n    KeyDeserializer kd \u003d factory.createKeyDeserializer(ctxt, type);\r\n    if (kd \u003d\u003d null) {\r\n        // if none found, need to use a placeholder that\u0027ll fail\r\n        return _handleUnknownKeyDeserializer(ctxt, type);\r\n    }\r\n    // First: need to resolve?\r\n    if (kd instanceof ResolvableDeserializer) {\r\n        ((ResolvableDeserializer) kd).resolve(ctxt);\r\n    }\r\n    return kd;\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DeserializerCache\n  DeserializationContext\n  DeserializerFactory\n  JavaType\n  Objects.requireNonNull(r0, \"Null \\\u0027type\\\u0027 passed\")\n  r3 \u003d r1.createKeyDeserializer(r2, r0)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d r5._handleUnknownKeyDeserializer(r2, r0)\n  return\n}",
      "B2 {\n  $z0 \u003d ResolvableDeserializer\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d ResolvableDeserializer) r3\n  $r4.resolve(r2)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DeserializerCache#_handleUnknownKeyDeserializer(...2)",
        "body": "{\r\n    return ctxt.reportBadDefinition(type, \"Cannot find a (Map) Key deserializer for type \" + type);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "methodName": "hasValueDeserializerFor",
    "signature": "boolean hasValueDeserializerFor(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.DeserializerFactory,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(type, \"Null \u0027type\u0027 passed\");\r\n    // Note: mostly copied from findValueDeserializer, except for\r\n    // handling of unknown types\r\n    JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(type);\r\n    if (deser \u003d\u003d null) {\r\n        deser \u003d _createAndCacheValueDeserializer(ctxt, factory, type);\r\n    }\r\n    return (deser !\u003d null);\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2",
      "B2 : If(r4 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DeserializerCache\n  DeserializationContext\n  DeserializerFactory\n  JavaType\n  Objects.requireNonNull(r0, \"Null \\\u0027type\\\u0027 passed\")\n  r4 \u003d r1._findCachedDeserializer(r0)\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r4 \u003d r1._createAndCacheValueDeserializer(r2, r3, r0)\n}",
      "B2 {\n  if (r4 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $z0 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z0 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DeserializerCache#_createAndCacheValueDeserializer(...3)",
        "body": "{\r\n    // Only one thread to construct deserializers at any given point in time;\r\n    // limitations necessary to ensure that only completely initialized ones\r\n    // are visible and used.\r\n    final boolean isCustom \u003d _hasCustomHandlers(type);\r\n    if (!isCustom) {\r\n        JsonDeserializer\u003cObject\u003e deser \u003d _cachedDeserializers.get(type);\r\n        if (deser !\u003d null) {\r\n            return deser;\r\n        }\r\n    }\r\n    _incompleteDeserializersLock.lock();\r\n    try {\r\n        if (!isCustom) {\r\n            JsonDeserializer\u003cObject\u003e deser \u003d _cachedDeserializers.get(type);\r\n            if (deser !\u003d null) {\r\n                return deser;\r\n            }\r\n        }\r\n        // Ok, then: could it be that due to a race condition, deserializer can now be found?\r\n        int count \u003d _incompleteDeserializers.size();\r\n        // Or perhaps being resolved right now?\r\n        if (count \u003e 0) {\r\n            JsonDeserializer\u003cObject\u003e deser \u003d _incompleteDeserializers.get(type);\r\n            if (deser !\u003d null) {\r\n                return deser;\r\n            }\r\n        }\r\n        // Nope: need to create and possibly cache\r\n        try {\r\n            return _createAndCache2(ctxt, factory, type, isCustom);\r\n        } finally {\r\n            // also: any deserializers that have been created are complete by now\r\n            if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\r\n                _incompleteDeserializers.clear();\r\n            }\r\n        }\r\n    } finally {\r\n        _incompleteDeserializersLock.unlock();\r\n    }\r\n}"
      },
      {
        "name": "DeserializerCache#_findCachedDeserializer(...1)",
        "body": "{\r\n    // note: caller ensures \u0027type\u0027 never null\r\n    if (_hasCustomHandlers(type)) {\r\n        return null;\r\n    }\r\n    return _cachedDeserializers.get(type);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.BeanAsArrayBuilderDeserializer",
    "methodName": "deserialize",
    "signature": "java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    // Let\u0027s delegate just in case we got a JSON Object (could error out, alternatively?)\r\n    if (!p.isExpectedStartArrayToken()) {\r\n        return finishBuild(ctxt, _deserializeFromNonArray(p, ctxt));\r\n    }\r\n    if (!_vanillaProcessing) {\r\n        return finishBuild(ctxt, _deserializeNonVanilla(p, ctxt));\r\n    }\r\n    Object builder \u003d _valueInstantiator.createUsingDefault(ctxt);\r\n    final SettableBeanProperty[] props \u003d _orderedProperties;\r\n    int i \u003d 0;\r\n    final int propCount \u003d props.length;\r\n    while (true) {\r\n        if (p.nextToken() \u003d\u003d JsonToken.END_ARRAY) {\r\n            return finishBuild(ctxt, builder);\r\n        }\r\n        if (i \u003d\u003d propCount) {\r\n            break;\r\n        }\r\n        SettableBeanProperty prop \u003d props[i];\r\n        if (prop !\u003d null) {\r\n            // normal case\r\n            try {\r\n                builder \u003d prop.deserializeSetAndReturn(p, ctxt, builder);\r\n            } catch (Exception e) {\r\n                wrapAndThrow(e, builder, prop.getName(), ctxt);\r\n            }\r\n        } else {\r\n            // just skip?\r\n            p.skipChildren();\r\n        }\r\n        ++i;\r\n    }\r\n    // 09-Nov-2016, tatu: Should call `handleUnknownProperty()` in Context, but it\u0027d give\r\n    //   non-optimal exception message so...\r\n    if (!_ignoreAllUnknown \u0026\u0026 ctxt.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) {\r\n        ctxt.reportInputMismatch(handledType(), \"Unexpected JSON values; expected at most %d properties (in JSON Array)\", propCount);\r\n        // fall through\r\n    }\r\n    // otherwise, skip until end\r\n    while (p.nextToken() !\u003d JsonToken.END_ARRAY) {\r\n        p.skipChildren();\r\n    }\r\n    return finishBuild(ctxt, builder);\r\n}",
    "nodes": 20,
    "edges": 24,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4",
      "B5 : If($r6 !\u003d $r5) → B6 | else → B7",
      "B7 : If(i1 !\u003d i0) → B8 | else → B9",
      "B9 : If(r7 \u003d\u003d null) → B10 | else → B12",
      "B14 : If($z2 !\u003d 0) → B15 | else → B17",
      "B15 : If($z3 \u003d\u003d false) → B16 | else → B17",
      "B17 : If($r21 \u003d\u003d $r22) → B18 | else → B19"
    ],
    "blockList": [
      "B0 {\n  BeanAsArrayBuilderDeserializer\n  JsonParser\n  DeserializationContext\n  $z0 \u003d r0.isExpectedStartArrayToken()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r16 \u003d r1._deserializeFromNonArray(r0, r2)\n  $r17 \u003d r1.finishBuild(r2, $r16)\n  return\n}",
      "B2 {\n  $z1 \u003d BeanAsArrayBuilderDeserializer: boolean _vanillaProcessing\u003e\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r14 \u003d r1._deserializeNonVanilla(r0, r2)\n  $r15 \u003d r1.finishBuild(r2, $r14)\n  return\n}",
      "B4 {\n  $r3 \u003d ValueInstantiator _valueInstantiator\u003e\n  r20 \u003d $r3.createUsingDefault(r2)\n  r4 \u003d SettableBeanProperty[] _orderedProperties\u003e\n  i1 \u003d 0\n  i0 \u003d lengthof r4\n}",
      "B5 {\n  $r6 \u003d r0.nextToken()\n  $r5 \u003d JsonToken END_ARRAY\u003e\n  if ($r6 !\u003d $r5) goto B6 else B7\n}",
      "B6 {\n  $r13 \u003d r1.finishBuild(r2, r20)\n  return\n}",
      "B7 {\n  if (i1 !\u003d i0) goto B8 else B9\n}",
      "B8 {\n  goto B14\n}",
      "B9 {\n  r7 \u003d r4[i1]\n  if (r7 \u003d\u003d null) goto B10 else B12\n}",
      "B10 {\n  r20 \u003d r7.deserializeSetAndReturn(r0, r2, r20)\n  goto B13\n}",
      "B11 {\n  $r18 :\u003d @caughtexception\n  $r19 \u003d r7.getName()\n  r1.wrapAndThrow($r18, r20, $r19, r2)\n  goto B13\n}",
      "B12 {\n  r0.skipChildren()\n}",
      "B13 {\n  i1 \u003d i1 + 1\n  goto B5\n}",
      "B14 {\n  $z2 \u003d BeanAsArrayBuilderDeserializer: boolean _ignoreAllUnknown\u003e\n  if ($z2 !\u003d 0) goto B15 else B17\n}",
      "B15 {\n  $r9 \u003d DeserializationFeature FAIL_ON_UNKNOWN_PROPERTIES\u003e\n  $z3 \u003d r2.isEnabled($r9)\n  if ($z3 \u003d\u003d false) goto B16 else B17\n}",
      "B16 {\n  $r12 \u003d r1.handledType()\n  $r10 \u003d Object)[1]\n  $r11 \u003d Integer.valueOf(i0)\n  $r10[0] \u003d $r11\n  r2.reportInputMismatch($r12, \"Unexpected JSON values; expected at most %d properties (in JSON Array)\", $r10)\n}",
      "B17 {\n  $r21 \u003d r0.nextToken()\n  $r22 \u003d JsonToken END_ARRAY\u003e\n  if ($r21 \u003d\u003d $r22) goto B18 else B19\n}",
      "B18 {\n  r0.skipChildren()\n  goto B17\n}",
      "B19 {\n  $r8 \u003d r1.finishBuild(r2, r20)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B14",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B13",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B5",
      "B14 --\u003e B15",
      "B14 --\u003e B17",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B17",
      "B19 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanAsArrayBuilderDeserializer#_deserializeFromNonArray(...2)",
        "body": "{\r\n    // Let\u0027s start with failure\r\n    String message \u003d \"Cannot deserialize a POJO (of type %s) from non-Array representation (token: %s): \" + \"type/property designed to be serialized as JSON Array\";\r\n    return ctxt.handleUnexpectedToken(getValueType(ctxt), p.currentToken(), p, message, _beanType.getRawClass().getName(), p.currentToken());\r\n    // in future, may allow use of \"standard\" POJO serialization as well; if so, do:\r\n    //return _delegate.deserialize(p, ctxt);\r\n}"
      },
      {
        "name": "BeanAsArrayBuilderDeserializer#_deserializeNonVanilla(...2)",
        "body": "{\r\n    if (_nonStandardCreation) {\r\n        return deserializeFromObjectUsingNonDefault(p, ctxt);\r\n    }\r\n    Object builder \u003d _valueInstantiator.createUsingDefault(ctxt);\r\n    if (_injectables !\u003d null) {\r\n        injectValues(ctxt, builder);\r\n    }\r\n    Class\u003c?\u003e activeView \u003d _needViewProcesing ? ctxt.getActiveView() : null;\r\n    final SettableBeanProperty[] props \u003d _orderedProperties;\r\n    int i \u003d 0;\r\n    final int propCount \u003d props.length;\r\n    while (true) {\r\n        if (p.nextToken() \u003d\u003d JsonToken.END_ARRAY) {\r\n            return builder;\r\n        }\r\n        if (i \u003d\u003d propCount) {\r\n            break;\r\n        }\r\n        SettableBeanProperty prop \u003d props[i];\r\n        ++i;\r\n        if (prop !\u003d null) {\r\n            // normal case\r\n            if (activeView \u003d\u003d null || prop.visibleInView(activeView)) {\r\n                try {\r\n                    prop.deserializeSetAndReturn(p, ctxt, builder);\r\n                } catch (Exception e) {\r\n                    wrapAndThrow(e, builder, prop.getName(), ctxt);\r\n                }\r\n                continue;\r\n            }\r\n        }\r\n        // otherwise, skip it (view-filtered, no prop etc)\r\n        p.skipChildren();\r\n    }\r\n    // Ok; extra fields? Let\u0027s fail, unless ignoring extra props is fine\r\n    if (!_ignoreAllUnknown \u0026\u0026 ctxt.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) {\r\n        ctxt.reportWrongTokenException(this, JsonToken.END_ARRAY, \"Unexpected JSON value(s); expected at most %d properties (in JSON Array)\", propCount);\r\n        // will never reach here as exception has been thrown\r\n    }\r\n    // otherwise, skip until end\r\n    while (p.nextToken() !\u003d JsonToken.END_ARRAY) {\r\n        p.skipChildren();\r\n    }\r\n    return builder;\r\n}"
      },
      {
        "name": "BeanAsArrayBuilderDeserializer#handledType(...0)",
        "body": "(source not found)"
      },
      {
        "name": "BeanAsArrayBuilderDeserializer#finishBuild(...2)",
        "body": "{\r\n    try {\r\n        return _buildMethod.getMember().invoke(builder, (Object[]) null);\r\n    } catch (Exception e) {\r\n        return wrapInstantiationProblem(e, ctxt);\r\n    }\r\n}"
      },
      {
        "name": "BeanAsArrayBuilderDeserializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.BeanAsArrayDeserializer",
    "methodName": "deserialize",
    "signature": "java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    // Let\u0027s delegate just in case we got a JSON Object (could error out, alternatively?)\r\n    if (!p.isExpectedStartArrayToken()) {\r\n        return _deserializeFromNonArray(p, ctxt);\r\n    }\r\n    if (!_vanillaProcessing) {\r\n        return _deserializeNonVanilla(p, ctxt);\r\n    }\r\n    final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\r\n    // [databind#631]: Assign current value, to be accessible by custom serializers\r\n    p.assignCurrentValue(bean);\r\n    final SettableBeanProperty[] props \u003d _orderedProperties;\r\n    int i \u003d 0;\r\n    final int propCount \u003d props.length;\r\n    while (true) {\r\n        if (p.nextToken() \u003d\u003d JsonToken.END_ARRAY) {\r\n            return bean;\r\n        }\r\n        if (i \u003d\u003d propCount) {\r\n            break;\r\n        }\r\n        SettableBeanProperty prop \u003d props[i];\r\n        if (prop !\u003d null) {\r\n            // normal case\r\n            try {\r\n                prop.deserializeAndSet(p, ctxt, bean);\r\n            } catch (Exception e) {\r\n                wrapAndThrow(e, bean, prop.getName(), ctxt);\r\n            }\r\n        } else {\r\n            // just skip?\r\n            p.skipChildren();\r\n        }\r\n        ++i;\r\n    }\r\n    // Ok; extra fields? Let\u0027s fail, unless ignoring extra props is fine\r\n    if (!_ignoreAllUnknown \u0026\u0026 ctxt.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) {\r\n        ctxt.reportWrongTokenException(this, JsonToken.END_ARRAY, \"Unexpected JSON values; expected at most %d properties (in JSON Array)\", propCount);\r\n        // never gets here\r\n    }\r\n    // otherwise, skip until end\r\n    do {\r\n        p.skipChildren();\r\n    } while (p.nextToken() !\u003d JsonToken.END_ARRAY);\r\n    return bean;\r\n}",
    "nodes": 19,
    "edges": 23,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4",
      "B5 : If($r7 !\u003d $r6) → B6 | else → B7",
      "B7 : If(i1 !\u003d i0) → B8 | else → B9",
      "B9 : If(r8 \u003d\u003d null) → B10 | else → B12",
      "B14 : If($z2 !\u003d 0) → B15 | else → B17",
      "B15 : If($z3 \u003d\u003d false) → B16 | else → B17",
      "B17 : If($r17 !\u003d $r18) → B18 | else → B17"
    ],
    "blockList": [
      "B0 {\n  BeanAsArrayDeserializer\n  JsonParser\n  DeserializationContext\n  $z0 \u003d r0.isExpectedStartArrayToken()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r14 \u003d r1._deserializeFromNonArray(r0, r2)\n  return\n}",
      "B2 {\n  $z1 \u003d BeanAsArrayDeserializer: boolean _vanillaProcessing\u003e\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r13 \u003d r1._deserializeNonVanilla(r0, r2)\n  return\n}",
      "B4 {\n  $r3 \u003d ValueInstantiator _valueInstantiator\u003e\n  r4 \u003d $r3.createUsingDefault(r2)\n  r0.assignCurrentValue(r4)\n  r5 \u003d SettableBeanProperty[] _orderedProperties\u003e\n  i1 \u003d 0\n  i0 \u003d lengthof r5\n}",
      "B5 {\n  $r7 \u003d r0.nextToken()\n  $r6 \u003d JsonToken END_ARRAY\u003e\n  if ($r7 !\u003d $r6) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  if (i1 !\u003d i0) goto B8 else B9\n}",
      "B8 {\n  goto B14\n}",
      "B9 {\n  r8 \u003d r5[i1]\n  if (r8 \u003d\u003d null) goto B10 else B12\n}",
      "B10 {\n  r8.deserializeAndSet(r0, r2, r4)\n  goto B13\n}",
      "B11 {\n  $r15 :\u003d @caughtexception\n  $r16 \u003d r8.getName()\n  r1.wrapAndThrow($r15, r4, $r16, r2)\n  goto B13\n}",
      "B12 {\n  r0.skipChildren()\n}",
      "B13 {\n  i1 \u003d i1 + 1\n  goto B5\n}",
      "B14 {\n  $z2 \u003d BeanAsArrayDeserializer: boolean _ignoreAllUnknown\u003e\n  if ($z2 !\u003d 0) goto B15 else B17\n}",
      "B15 {\n  $r9 \u003d DeserializationFeature FAIL_ON_UNKNOWN_PROPERTIES\u003e\n  $z3 \u003d r2.isEnabled($r9)\n  if ($z3 \u003d\u003d false) goto B16 else B17\n}",
      "B16 {\n  $r11 \u003d JsonToken END_ARRAY\u003e\n  $r10 \u003d Object)[1]\n  $r12 \u003d Integer.valueOf(i0)\n  $r10[0] \u003d $r12\n  r2.reportWrongTokenException(r1, $r11, \"Unexpected JSON values; expected at most %d properties (in JSON Array)\", $r10)\n}",
      "B17 {\n  r0.skipChildren()\n  $r17 \u003d r0.nextToken()\n  $r18 \u003d JsonToken END_ARRAY\u003e\n  if ($r17 !\u003d $r18) goto B18 else B17\n}",
      "B18 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B14",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B13",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B5",
      "B14 --\u003e B15",
      "B14 --\u003e B17",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e B18",
      "B17 --\u003e B17",
      "B18 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanAsArrayDeserializer#_deserializeFromNonArray(...2)",
        "body": "{\r\n    String message \u003d \"Cannot deserialize a POJO (of type %s) from non-Array representation (token: %s): \" + \"type/property designed to be serialized as JSON Array\";\r\n    return ctxt.handleUnexpectedToken(getValueType(ctxt), p.currentToken(), p, message, ClassUtil.getTypeDescription(_beanType), p.currentToken());\r\n    // in future, may allow use of \"standard\" POJO serialization as well; if so, do:\r\n    //return _delegate.deserialize(p, ctxt);\r\n}"
      },
      {
        "name": "BeanAsArrayDeserializer#_deserializeNonVanilla(...2)",
        "body": "{\r\n    if (_nonStandardCreation) {\r\n        return deserializeFromObjectUsingNonDefault(p, ctxt);\r\n    }\r\n    final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\r\n    // [databind#631]: Assign current value, to be accessible by custom serializers\r\n    p.assignCurrentValue(bean);\r\n    if (_injectables !\u003d null) {\r\n        injectValues(ctxt, bean);\r\n    }\r\n    Class\u003c?\u003e activeView \u003d _needViewProcesing ? ctxt.getActiveView() : null;\r\n    final SettableBeanProperty[] props \u003d _orderedProperties;\r\n    int i \u003d 0;\r\n    final int propCount \u003d props.length;\r\n    while (true) {\r\n        if (p.nextToken() \u003d\u003d JsonToken.END_ARRAY) {\r\n            return bean;\r\n        }\r\n        if (i \u003d\u003d propCount) {\r\n            break;\r\n        }\r\n        SettableBeanProperty prop \u003d props[i];\r\n        ++i;\r\n        if (prop !\u003d null) {\r\n            // normal case\r\n            if (activeView \u003d\u003d null || prop.visibleInView(activeView)) {\r\n                try {\r\n                    prop.deserializeAndSet(p, ctxt, bean);\r\n                } catch (Exception e) {\r\n                    wrapAndThrow(e, bean, prop.getName(), ctxt);\r\n                }\r\n                continue;\r\n            }\r\n        }\r\n        // otherwise, skip it (view-filtered, no prop etc)\r\n        p.skipChildren();\r\n    }\r\n    // Ok; extra fields? Let\u0027s fail, unless ignoring extra props is fine\r\n    if (!_ignoreAllUnknown \u0026\u0026 ctxt.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) {\r\n        ctxt.reportWrongTokenException(this, JsonToken.END_ARRAY, \"Unexpected JSON values; expected at most %d properties (in JSON Array)\", propCount);\r\n        // will never reach here as exception has been thrown\r\n    }\r\n    // otherwise, skip until end\r\n    do {\r\n        p.skipChildren();\r\n    } while (p.nextToken() !\u003d JsonToken.END_ARRAY);\r\n    return bean;\r\n}"
      },
      {
        "name": "BeanAsArrayDeserializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.BeanAsArrayDeserializer",
    "methodName": "deserialize",
    "signature": "java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    // [databind#631]: Assign current value, to be accessible by custom serializers\r\n    p.assignCurrentValue(bean);\r\n    if (!p.isExpectedStartArrayToken()) {\r\n        return _deserializeFromNonArray(p, ctxt);\r\n    }\r\n    // No good way to verify that we have an array... although could I guess\r\n    // check via JsonParser. So let\u0027s assume everything is working fine, for now.\r\n    if (_injectables !\u003d null) {\r\n        injectValues(ctxt, bean);\r\n    }\r\n    final SettableBeanProperty[] props \u003d _orderedProperties;\r\n    int i \u003d 0;\r\n    final int propCount \u003d props.length;\r\n    while (true) {\r\n        if (p.nextToken() \u003d\u003d JsonToken.END_ARRAY) {\r\n            return bean;\r\n        }\r\n        if (i \u003d\u003d propCount) {\r\n            break;\r\n        }\r\n        SettableBeanProperty prop \u003d props[i];\r\n        if (prop !\u003d null) {\r\n            // normal case\r\n            try {\r\n                prop.deserializeAndSet(p, ctxt, bean);\r\n            } catch (Exception e) {\r\n                wrapAndThrow(e, bean, prop.getName(), ctxt);\r\n            }\r\n        } else {\r\n            // just skip?\r\n            p.skipChildren();\r\n        }\r\n        ++i;\r\n    }\r\n    // Ok; extra fields? Let\u0027s fail, unless ignoring extra props is fine\r\n    if (!_ignoreAllUnknown \u0026\u0026 ctxt.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) {\r\n        ctxt.reportWrongTokenException(this, JsonToken.END_ARRAY, \"Unexpected JSON values; expected at most %d properties (in JSON Array)\", propCount);\r\n        // never gets here\r\n    }\r\n    // otherwise, skip until end\r\n    do {\r\n        p.skipChildren();\r\n    } while (p.nextToken() !\u003d JsonToken.END_ARRAY);\r\n    return bean;\r\n}",
    "nodes": 19,
    "edges": 24,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($r3 \u003d\u003d null) → B3 | else → B4",
      "B5 : If($r14 !\u003d $r15) → B6 | else → B7",
      "B7 : If(i1 !\u003d $i0) → B8 | else → B9",
      "B9 : If(r4 \u003d\u003d null) → B10 | else → B12",
      "B14 : If($z1 !\u003d 0) → B15 | else → B17",
      "B15 : If($z2 \u003d\u003d false) → B16 | else → B17",
      "B17 : If($r16 !\u003d $r17) → B18 | else → B17"
    ],
    "blockList": [
      "B0 {\n  BeanAsArrayDeserializer\n  JsonParser\n  DeserializationContext\n  Object\n  r0.assignCurrentValue(r1)\n  $z0 \u003d r0.isExpectedStartArrayToken()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r11 \u003d r2._deserializeFromNonArray(r0, r5)\n  return\n}",
      "B2 {\n  $r3 \u003d ValueInjector[] _injectables\u003e\n  if ($r3 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  r2.injectValues(r5, r1)\n}",
      "B4 {\n  $r10 \u003d SettableBeanProperty[] _orderedProperties\u003e\n  i1 \u003d 0\n  $i0 \u003d lengthof $r10\n}",
      "B5 {\n  $r14 \u003d r0.nextToken()\n  $r15 \u003d JsonToken END_ARRAY\u003e\n  if ($r14 !\u003d $r15) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  if (i1 !\u003d $i0) goto B8 else B9\n}",
      "B8 {\n  goto B14\n}",
      "B9 {\n  r4 \u003d $r10[i1]\n  if (r4 \u003d\u003d null) goto B10 else B12\n}",
      "B10 {\n  r4.deserializeAndSet(r0, r5, r1)\n  goto B13\n}",
      "B11 {\n  $r12 :\u003d @caughtexception\n  $r13 \u003d r4.getName()\n  r2.wrapAndThrow($r12, r1, $r13, r5)\n  goto B13\n}",
      "B12 {\n  r0.skipChildren()\n}",
      "B13 {\n  i1 \u003d i1 + 1\n  goto B5\n}",
      "B14 {\n  $z1 \u003d BeanAsArrayDeserializer: boolean _ignoreAllUnknown\u003e\n  if ($z1 !\u003d 0) goto B15 else B17\n}",
      "B15 {\n  $r6 \u003d DeserializationFeature FAIL_ON_UNKNOWN_PROPERTIES\u003e\n  $z2 \u003d r5.isEnabled($r6)\n  if ($z2 \u003d\u003d false) goto B16 else B17\n}",
      "B16 {\n  $r8 \u003d JsonToken END_ARRAY\u003e\n  $r7 \u003d Object)[1]\n  $r9 \u003d Integer.valueOf($i0)\n  $r7[0] \u003d $r9\n  r5.reportWrongTokenException(r2, $r8, \"Unexpected JSON values; expected at most %d properties (in JSON Array)\", $r7)\n}",
      "B17 {\n  r0.skipChildren()\n  $r16 \u003d r0.nextToken()\n  $r17 \u003d JsonToken END_ARRAY\u003e\n  if ($r16 !\u003d $r17) goto B18 else B17\n}",
      "B18 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B14",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B13",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B5",
      "B14 --\u003e B15",
      "B14 --\u003e B17",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e B18",
      "B17 --\u003e B17",
      "B18 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanAsArrayDeserializer#_deserializeFromNonArray(...2)",
        "body": "{\r\n    String message \u003d \"Cannot deserialize a POJO (of type %s) from non-Array representation (token: %s): \" + \"type/property designed to be serialized as JSON Array\";\r\n    return ctxt.handleUnexpectedToken(getValueType(ctxt), p.currentToken(), p, message, ClassUtil.getTypeDescription(_beanType), p.currentToken());\r\n    // in future, may allow use of \"standard\" POJO serialization as well; if so, do:\r\n    //return _delegate.deserialize(p, ctxt);\r\n}"
      },
      {
        "name": "BeanAsArrayDeserializer#injectValues(...2)",
        "body": "(source not found)"
      },
      {
        "name": "BeanAsArrayDeserializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "methodName": "withCaseInsensitivity",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap withCaseInsensitivity(boolean)",
    "visibility": "public",
    "body": "{\r\n    if (_caseInsensitive \u003d\u003d state) {\r\n        return this;\r\n    }\r\n    return new BeanPropertyMap(this, state);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z1 !\u003d z0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyMap\n  z0 :\u003d @parameter0: boolean\n  $z1 \u003d BeanPropertyMap: boolean _caseInsensitive\u003e\n  if ($z1 !\u003d z0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d BeanPropertyMap\n  new BeanPropertyMap(r0, z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "methodName": "withProperty",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap withProperty(com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "visibility": "public",
    "body": "{\r\n    // First: may be able to just replace?\r\n    String key \u003d getPropertyName(newProp);\r\n    for (int i \u003d 1, end \u003d _hashArea.length; i \u003c end; i +\u003d 2) {\r\n        SettableBeanProperty prop \u003d (SettableBeanProperty) _hashArea[i];\r\n        if ((prop !\u003d null) \u0026\u0026 prop.getName().equals(key)) {\r\n            return new BeanPropertyMap(this, newProp, i, _findFromOrdered(prop));\r\n        }\r\n    }\r\n    // If not, append\r\n    final int slot \u003d _hashCode(key);\r\n    return new BeanPropertyMap(this, newProp, key, slot);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d i0) → B2 | else → B6",
      "B2 : If(r7 \u003d\u003d null) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyMap\n  SettableBeanProperty\n  r2 \u003d r0.getPropertyName(r1)\n  i2 \u003d 1\n  $r3 \u003d Object[] _hashArea\u003e\n  i0 \u003d lengthof $r3\n}",
      "B1 {\n  if (i2 \u003e\u003d i0) goto B2 else B6\n}",
      "B2 {\n  $r5 \u003d Object[] _hashArea\u003e\n  $r6 \u003d $r5[i2]\n  r7 \u003d SettableBeanProperty) $r6\n  if (r7 \u003d\u003d null) goto B3 else B5\n}",
      "B3 {\n  $r8 \u003d r7.getName()\n  $z0 \u003d $r8.equals(r2)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r9 \u003d BeanPropertyMap\n  $i1 \u003d r0._findFromOrdered(r7)\n  new BeanPropertyMap(r0, r1, i2, $i1)\n  return\n}",
      "B5 {\n  i2 \u003d i2 + 2\n  goto B1\n}",
      "B6 {\n  i3 \u003d r0._hashCode(r2)\n  $r4 \u003d BeanPropertyMap\n  new BeanPropertyMap(r0, r1, r2, i3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPropertyMap#_hashCode(...1)",
        "body": "{\r\n    // This method produces better hash, fewer collisions... yet for some\r\n    // reason produces slightly worse performance. Very strange.\r\n    // 05-Aug-2015, tatu: ... still true?\r\n    /*\r\n        int h \u003d key.hashCode();\r\n        return (h + (h \u003e\u003e 13)) \u0026 _hashMask;\r\n        */\r\n    return key.hashCode() \u0026 _hashMask;\r\n}"
      },
      {
        "name": "BeanPropertyMap#_findFromOrdered(...1)",
        "body": "{\r\n    for (int i \u003d 0, end \u003d _propsInOrder.length; i \u003c end; ++i) {\r\n        if (_propsInOrder[i] \u003d\u003d prop) {\r\n            return i;\r\n        }\r\n    }\r\n    throw new IllegalStateException(\"Illegal state: property \u0027\" + prop.getName() + \"\u0027 missing from _propsInOrder\");\r\n}"
      },
      {
        "name": "BeanPropertyMap#getPropertyName(...1)",
        "body": "{\r\n    return _caseInsensitive ? prop.getName().toLowerCase(_locale) : prop.getName();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "methodName": "assignIndexes",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap assignIndexes()",
    "visibility": "public",
    "body": "{\r\n    // order is arbitrary, but stable:\r\n    int index \u003d 0;\r\n    for (int i \u003d 1, end \u003d _hashArea.length; i \u003c end; i +\u003d 2) {\r\n        SettableBeanProperty prop \u003d (SettableBeanProperty) _hashArea[i];\r\n        if (prop !\u003d null) {\r\n            prop.assignIndex(index++);\r\n        }\r\n    }\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d i0) → B2 | else → B5",
      "B2 : If(r4 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyMap\n  i2 \u003d 0\n  i3 \u003d 1\n  $r1 \u003d Object[] _hashArea\u003e\n  i0 \u003d lengthof $r1\n}",
      "B1 {\n  if (i3 \u003e\u003d i0) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d Object[] _hashArea\u003e\n  $r3 \u003d $r2[i3]\n  r4 \u003d SettableBeanProperty) $r3\n  if (r4 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $i1 \u003d i2\n  i2 \u003d i2 + 1\n  r4.assignIndex($i1)\n}",
      "B4 {\n  i3 \u003d i3 + 2\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "methodName": "renameAll",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap renameAll(com.fasterxml.jackson.databind.util.NameTransformer)",
    "visibility": "public",
    "body": "{\r\n    if (transformer \u003d\u003d null || (transformer \u003d\u003d NameTransformer.NOP)) {\r\n        return this;\r\n    }\r\n    // Try to retain insertion ordering as well\r\n    final int len \u003d _propsInOrder.length;\r\n    ArrayList\u003cSettableBeanProperty\u003e newProps \u003d new ArrayList\u003cSettableBeanProperty\u003e(len);\r\n    for (int i \u003d 0; i \u003c len; ++i) {\r\n        SettableBeanProperty prop \u003d _propsInOrder[i];\r\n        // What to do with holes? For now, retain\r\n        if (prop \u003d\u003d null) {\r\n            newProps.add(prop);\r\n            continue;\r\n        }\r\n        newProps.add(prop.unwrapped(transformer));\r\n    }\r\n    // should we try to re-index? Ordering probably changed but caller probably doesn\u0027t want changes...\r\n    // 26-Feb-2017, tatu: Probably SHOULD handle renaming wrt Aliases?\r\n    return new BeanPropertyMap(_caseInsensitive, newProps, _aliasDefs, _locale);\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r0 !\u003d $r2) → B2 | else → B3",
      "B4 : If(i1 \u003e\u003d i0) → B5 | else → B9",
      "B5 : If(r9 !\u003d null) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyMap\n  NameTransformer\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d NameTransformer NOP\u003e\n  if (r0 !\u003d $r2) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r3 \u003d SettableBeanProperty[] _propsInOrder\u003e\n  i0 \u003d lengthof $r3\n  $r4 \u003d ArrayList\n  new ArrayList(i0)\n  i1 \u003d 0\n}",
      "B4 {\n  if (i1 \u003e\u003d i0) goto B5 else B9\n}",
      "B5 {\n  $r8 \u003d SettableBeanProperty[] _propsInOrder\u003e\n  r9 \u003d $r8[i1]\n  if (r9 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r4.add(r9)\n  goto B8\n}",
      "B7 {\n  $r10 \u003d r9.unwrapped(r0)\n  $r4.add($r10)\n}",
      "B8 {\n  i1 \u003d i1 + 1\n  goto B4\n}",
      "B9 {\n  $r5 \u003d BeanPropertyMap\n  $z0 \u003d BeanPropertyMap: boolean _caseInsensitive\u003e\n  $r7 \u003d Map _aliasDefs\u003e\n  $r6 \u003d Locale _locale\u003e\n  new BeanPropertyMap($z0, $r4, $r7, $r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B4",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "methodName": "withoutProperties",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap withoutProperties(java.util.Collection,java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    if ((toExclude \u003d\u003d null || toExclude.isEmpty()) \u0026\u0026 toInclude \u003d\u003d null) {\r\n        return this;\r\n    }\r\n    final int len \u003d _propsInOrder.length;\r\n    ArrayList\u003cSettableBeanProperty\u003e newProps \u003d new ArrayList\u003cSettableBeanProperty\u003e(len);\r\n    for (int i \u003d 0; i \u003c len; ++i) {\r\n        SettableBeanProperty prop \u003d _propsInOrder[i];\r\n        // 01-May-2015, tatu: Not 100% sure if existing `null`s should be retained;\r\n        //   or, if entries to ignore should be retained as nulls. For now just\r\n        //   prune them out\r\n        if (prop !\u003d null) {\r\n            // may contain holes, too, check.\r\n            if (!IgnorePropertiesUtil.shouldIgnore(prop.getName(), toExclude, toInclude)) {\r\n                newProps.add(prop);\r\n            }\r\n        }\r\n    }\r\n    // should we try to re-index? Apparently no need\r\n    return new BeanPropertyMap(_caseInsensitive, newProps, _aliasDefs, _locale);\r\n}",
    "nodes": 11,
    "edges": 15,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z2 \u003d\u003d false) → B2 | else → B4",
      "B2 : If(r1 !\u003d null) → B3 | else → B4",
      "B5 : If(i1 \u003e\u003d $i0) → B6 | else → B10",
      "B6 : If(r9 \u003d\u003d null) → B7 | else → B9",
      "B7 : If($z1 !\u003d 0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyMap\n  Collection\n  Collection\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z2 \u003d r0.isEmpty()\n  if ($z2 \u003d\u003d false) goto B2 else B4\n}",
      "B2 {\n  if (r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d SettableBeanProperty[] _propsInOrder\u003e\n  $i0 \u003d lengthof $r3\n  $r4 \u003d ArrayList\n  new ArrayList($i0)\n  i1 \u003d 0\n}",
      "B5 {\n  if (i1 \u003e\u003d $i0) goto B6 else B10\n}",
      "B6 {\n  $r8 \u003d SettableBeanProperty[] _propsInOrder\u003e\n  r9 \u003d $r8[i1]\n  if (r9 \u003d\u003d null) goto B7 else B9\n}",
      "B7 {\n  $r10 \u003d r9.getName()\n  $z1 \u003d IgnorePropertiesUtil.shouldIgnore($r10, r0, r1)\n  if ($z1 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  $r4.add(r9)\n}",
      "B9 {\n  i1 \u003d i1 + 1\n  goto B5\n}",
      "B10 {\n  $r5 \u003d BeanPropertyMap\n  $z0 \u003d BeanPropertyMap: boolean _caseInsensitive\u003e\n  $r7 \u003d Map _aliasDefs\u003e\n  $r6 \u003d Locale _locale\u003e\n  new BeanPropertyMap($z0, $r4, $r7, $r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B5",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "methodName": "replace",
    "signature": "void replace(com.fasterxml.jackson.databind.deser.SettableBeanProperty,com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "visibility": "public",
    "body": "{\r\n    int i \u003d 1;\r\n    int end \u003d _hashArea.length;\r\n    for (; ; i +\u003d 2) {\r\n        if (i \u003e\u003d end) {\r\n            throw new NoSuchElementException(\"No entry \u0027\" + origProp.getName() + \"\u0027 found, can\u0027t replace\");\r\n        }\r\n        if (_hashArea[i] \u003d\u003d origProp) {\r\n            _hashArea[i] \u003d newProp;\r\n            break;\r\n        }\r\n    }\r\n    _propsInOrder[_findFromOrdered(origProp)] \u003d newProp;\r\n}",
    "nodes": 7,
    "edges": 7,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i2 \u003c i0) → B2 | else → B3",
      "B3 : If($r4 !\u003d r3) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyMap\n  SettableBeanProperty\n  SettableBeanProperty\n  i2 \u003d 1\n  $r1 \u003d Object[] _hashArea\u003e\n  i0 \u003d lengthof $r1\n}",
      "B1 {\n  if (i2 \u003c i0) goto B2 else B3\n}",
      "B2 {\n  $r8 \u003d NoSuchElementException\n  $r9 \u003d r3.getName()\n  $r10 \u003d dynInvoke makeConcatWithConstants($r9)\n  new NoSuchElementException($r10)\n  throw $r8\n}",
      "B3 {\n  $r2 \u003d Object[] _hashArea\u003e\n  $r4 \u003d $r2[i2]\n  if ($r4 !\u003d r3) goto B4 else B5\n}",
      "B4 {\n  $r6 \u003d Object[] _hashArea\u003e\n  $r6[i2] \u003d r5\n  goto B6\n}",
      "B5 {\n  i2 \u003d i2 + 2\n  goto B1\n}",
      "B6 {\n  $r7 \u003d SettableBeanProperty[] _propsInOrder\u003e\n  $i1 \u003d r0._findFromOrdered(r3)\n  $r7[$i1] \u003d r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPropertyMap#_findFromOrdered(...1)",
        "body": "{\r\n    for (int i \u003d 0, end \u003d _propsInOrder.length; i \u003c end; ++i) {\r\n        if (_propsInOrder[i] \u003d\u003d prop) {\r\n            return i;\r\n        }\r\n    }\r\n    throw new IllegalStateException(\"Illegal state: property \u0027\" + prop.getName() + \"\u0027 missing from _propsInOrder\");\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "methodName": "remove",
    "signature": "void remove(com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "visibility": "public",
    "body": "{\r\n    ArrayList\u003cSettableBeanProperty\u003e props \u003d new ArrayList\u003cSettableBeanProperty\u003e(_size);\r\n    String key \u003d getPropertyName(propToRm);\r\n    boolean found \u003d false;\r\n    for (int i \u003d 1, end \u003d _hashArea.length; i \u003c end; i +\u003d 2) {\r\n        SettableBeanProperty prop \u003d (SettableBeanProperty) _hashArea[i];\r\n        if (prop \u003d\u003d null) {\r\n            continue;\r\n        }\r\n        if (!found) {\r\n            // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,\r\n            //   as only former is lower-case in case-insensitive case\r\n            found \u003d key.equals(_hashArea[i - 1]);\r\n            if (found) {\r\n                // need to leave a hole here\r\n                _propsInOrder[_findFromOrdered(prop)] \u003d null;\r\n                continue;\r\n            }\r\n        }\r\n        props.add(prop);\r\n    }\r\n    if (!found) {\r\n        throw new NoSuchElementException(\"No entry \u0027\" + propToRm.getName() + \"\u0027 found, can\u0027t remove\");\r\n    }\r\n    init(props);\r\n}",
    "nodes": 12,
    "edges": 15,
    "cc": 5,
    "flowSummary": [
      "B1 : If(i4 \u003e\u003d i1) → B2 | else → B9",
      "B2 : If(r10 !\u003d null) → B3 | else → B4",
      "B4 : If(z0 !\u003d 0) → B5 | else → B7",
      "B5 : If(z0 \u003d\u003d false) → B6 | else → B7",
      "B9 : If(z0 !\u003d 0) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyMap\n  SettableBeanProperty\n  $r0 \u003d ArrayList\n  $i0 \u003d BeanPropertyMap: int _size\u003e\n  new ArrayList($i0)\n  r3 \u003d r1.getPropertyName(r2)\n  z0 \u003d 0\n  i4 \u003d 1\n  $r4 \u003d Object[] _hashArea\u003e\n  i1 \u003d lengthof $r4\n}",
      "B1 {\n  if (i4 \u003e\u003d i1) goto B2 else B9\n}",
      "B2 {\n  $r8 \u003d Object[] _hashArea\u003e\n  $r9 \u003d $r8[i4]\n  r10 \u003d SettableBeanProperty) $r9\n  if (r10 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  goto B8\n}",
      "B4 {\n  if (z0 !\u003d 0) goto B5 else B7\n}",
      "B5 {\n  $r11 \u003d Object[] _hashArea\u003e\n  $i2 \u003d i4 - 1\n  $r12 \u003d $r11[$i2]\n  z0 \u003d r3.equals($r12)\n  if (z0 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r13 \u003d SettableBeanProperty[] _propsInOrder\u003e\n  $i3 \u003d r1._findFromOrdered(r10)\n  $r13[$i3] \u003d null\n  goto B8\n}",
      "B7 {\n  $r0.add(r10)\n}",
      "B8 {\n  i4 \u003d i4 + 2\n  goto B1\n}",
      "B9 {\n  if (z0 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  $r5 \u003d NoSuchElementException\n  $r6 \u003d r2.getName()\n  $r7 \u003d dynInvoke makeConcatWithConstants($r6)\n  new NoSuchElementException($r7)\n  throw $r5\n}",
      "B11 {\n  r1.init($r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B9",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B1",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPropertyMap#_findFromOrdered(...1)",
        "body": "{\r\n    for (int i \u003d 0, end \u003d _propsInOrder.length; i \u003c end; ++i) {\r\n        if (_propsInOrder[i] \u003d\u003d prop) {\r\n            return i;\r\n        }\r\n    }\r\n    throw new IllegalStateException(\"Illegal state: property \u0027\" + prop.getName() + \"\u0027 missing from _propsInOrder\");\r\n}"
      },
      {
        "name": "BeanPropertyMap#getPropertyName(...1)",
        "body": "{\r\n    return _caseInsensitive ? prop.getName().toLowerCase(_locale) : prop.getName();\r\n}"
      },
      {
        "name": "BeanPropertyMap#init(...1)",
        "body": "{\r\n    _size \u003d props.size();\r\n    // First: calculate size of primary hash area\r\n    final int hashSize \u003d findSize(_size);\r\n    _hashMask \u003d hashSize - 1;\r\n    // and allocate enough to contain primary/secondary, expand for spillovers as need be\r\n    int alloc \u003d (hashSize + (hashSize \u003e\u003e 1)) * 2;\r\n    Object[] hashed \u003d new Object[alloc];\r\n    int spillCount \u003d 0;\r\n    for (SettableBeanProperty prop : props) {\r\n        // Due to removal, renaming, theoretically possible we\u0027ll have \"holes\" so:\r\n        if (prop \u003d\u003d null) {\r\n            continue;\r\n        }\r\n        String key \u003d getPropertyName(prop);\r\n        int slot \u003d _hashCode(key);\r\n        int ix \u003d (slot \u003c\u003c 1);\r\n        // primary slot not free?\r\n        if (hashed[ix] !\u003d null) {\r\n            // secondary?\r\n            ix \u003d (hashSize + (slot \u003e\u003e 1)) \u003c\u003c 1;\r\n            if (hashed[ix] !\u003d null) {\r\n                // ok, spill over.\r\n                ix \u003d ((hashSize + (hashSize \u003e\u003e 1)) \u003c\u003c 1) + spillCount;\r\n                spillCount +\u003d 2;\r\n                if (ix \u003e\u003d hashed.length) {\r\n                    hashed \u003d Arrays.copyOf(hashed, hashed.length + 4);\r\n                }\r\n            }\r\n        }\r\n        hashed[ix] \u003d key;\r\n        hashed[ix + 1] \u003d prop;\r\n        // and aliases\r\n    }\r\n    _hashArea \u003d hashed;\r\n    _spillCount \u003d spillCount;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "methodName": "hasAliases",
    "signature": "boolean hasAliases()",
    "visibility": "public",
    "body": "{\r\n    return !_aliasDefs.isEmpty();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyMap\n  $r1 \u003d Map _aliasDefs\u003e\n  $z0 \u003d $r1.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "methodName": "find",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty find(int)",
    "visibility": "public",
    "body": "{\r\n    // note: will scan the whole area, including primary, secondary and\r\n    // possible spill-area\r\n    for (int i \u003d 1, end \u003d _hashArea.length; i \u003c end; i +\u003d 2) {\r\n        SettableBeanProperty prop \u003d (SettableBeanProperty) _hashArea[i];\r\n        if ((prop !\u003d null) \u0026\u0026 (index \u003d\u003d prop.getPropertyIndex())) {\r\n            return prop;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d i0) → B2 | else → B6",
      "B2 : If(r4 \u003d\u003d null) → B3 | else → B5",
      "B3 : If(i1 !\u003d $i2) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyMap\n  i1 :\u003d @parameter0: int\n  i3 \u003d 1\n  $r1 \u003d Object[] _hashArea\u003e\n  i0 \u003d lengthof $r1\n}",
      "B1 {\n  if (i3 \u003e\u003d i0) goto B2 else B6\n}",
      "B2 {\n  $r2 \u003d Object[] _hashArea\u003e\n  $r3 \u003d $r2[i3]\n  r4 \u003d SettableBeanProperty) $r3\n  if (r4 \u003d\u003d null) goto B3 else B5\n}",
      "B3 {\n  $i2 \u003d r4.getPropertyIndex()\n  if (i1 !\u003d $i2) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  i3 \u003d i3 + 2\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "methodName": "find",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty find(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (key \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Cannot pass null property name\");\r\n    }\r\n    if (_caseInsensitive) {\r\n        key \u003d key.toLowerCase(_locale);\r\n    }\r\n    // inlined `_hashCode(key)`\r\n    int slot \u003d key.hashCode() \u0026 _hashMask;\r\n    //        int h \u003d key.hashCode();\r\n    //        int slot \u003d (h + (h \u003e\u003e 13)) \u0026 _hashMask;\r\n    int ix \u003d (slot \u003c\u003c 1);\r\n    Object match \u003d _hashArea[ix];\r\n    if ((match \u003d\u003d key) || key.equals(match)) {\r\n        return (SettableBeanProperty) _hashArea[ix + 1];\r\n    }\r\n    return _find2(key, slot, match);\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r9 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($r7 \u003d\u003d r9) → B5 | else → B6",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyMap\n  String\n  if (r9 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Cannot pass null property name\")\n  throw $r8\n}",
      "B2 {\n  $z0 \u003d BeanPropertyMap: boolean _caseInsensitive\u003e\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d Locale _locale\u003e\n  r9 \u003d r9.toLowerCase($r6)\n}",
      "B4 {\n  $i1 \u003d r9.hashCode()\n  $i0 \u003d BeanPropertyMap: int _hashMask\u003e\n  $i3 \u003d $i1 \u0026 $i0\n  $i4 \u003d $i3 \u003c\u003c 1\n  $r1 \u003d Object[] _hashArea\u003e\n  $r7 \u003d $r1[$i4]\n  if ($r7 \u003d\u003d r9) goto B5 else B6\n}",
      "B5 {\n  $z1 \u003d r9.equals($r7)\n  if ($z1 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r2 \u003d Object[] _hashArea\u003e\n  $i2 \u003d $i4 + 1\n  $r3 \u003d $r2[$i2]\n  $r4 \u003d SettableBeanProperty) $r3\n  return\n}",
      "B7 {\n  $r5 \u003d r0._find2(r9, $i3, $r7)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPropertyMap#_find2(...3)",
        "body": "{\r\n    if (match \u003d\u003d null) {\r\n        // 26-Feb-2017, tatu: Need to consider aliases\r\n        return _findWithAlias(_aliasMapping.get(key));\r\n    }\r\n    // no? secondary?\r\n    int hashSize \u003d _hashMask + 1;\r\n    int ix \u003d (hashSize + (slot \u003e\u003e 1)) \u003c\u003c 1;\r\n    match \u003d _hashArea[ix];\r\n    if (key.equals(match)) {\r\n        return (SettableBeanProperty) _hashArea[ix + 1];\r\n    }\r\n    if (match !\u003d null) {\r\n        // _findFromSpill(...)\r\n        int i \u003d (hashSize + (hashSize \u003e\u003e 1)) \u003c\u003c 1;\r\n        for (int end \u003d i + _spillCount; i \u003c end; i +\u003d 2) {\r\n            match \u003d _hashArea[i];\r\n            if ((match \u003d\u003d key) || key.equals(match)) {\r\n                return (SettableBeanProperty) _hashArea[i + 1];\r\n            }\r\n        }\r\n    }\r\n    // 26-Feb-2017, tatu: Need to consider aliases\r\n    return _findWithAlias(_aliasMapping.get(key));\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "methodName": "findDeserializeAndSet",
    "signature": "boolean findDeserializeAndSet(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    final SettableBeanProperty prop \u003d find(key);\r\n    if (prop \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    try {\r\n        prop.deserializeAndSet(p, ctxt, bean);\r\n    } catch (Exception e) {\r\n        wrapAndThrow(e, bean, key, ctxt);\r\n    }\r\n    return true;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyMap\n  JsonParser\n  DeserializationContext\n  Object\n  String\n  r2 \u003d r0.find(r1)\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r2.deserializeAndSet(r3, r4, r5)\n  goto B4\n}",
      "B3 {\n  $r6 :\u003d @caughtexception\n  r0.wrapAndThrow($r6, r5, r1, r4)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPropertyMap#find(...1)",
        "body": "{\r\n    // note: will scan the whole area, including primary, secondary and\r\n    // possible spill-area\r\n    for (int i \u003d 1, end \u003d _hashArea.length; i \u003c end; i +\u003d 2) {\r\n        SettableBeanProperty prop \u003d (SettableBeanProperty) _hashArea[i];\r\n        if ((prop !\u003d null) \u0026\u0026 (index \u003d\u003d prop.getPropertyIndex())) {\r\n            return prop;\r\n        }\r\n    }\r\n    return null;\r\n}"
      },
      {
        "name": "BeanPropertyMap#wrapAndThrow(...4)",
        "body": "{\r\n    // inlined \u0027throwOrReturnThrowable\u0027\r\n    while (t instanceof InvocationTargetException \u0026\u0026 t.getCause() !\u003d null) {\r\n        t \u003d t.getCause();\r\n    }\r\n    // Errors to be passed as is\r\n    ClassUtil.throwIfError(t);\r\n    // StackOverflowErrors are tricky ones; need to be careful...\r\n    boolean wrap \u003d (ctxt \u003d\u003d null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);\r\n    // Ditto for IOExceptions; except we may want to wrap JSON exceptions\r\n    if (t instanceof IOException) {\r\n        if (!wrap || !(t instanceof JacksonException)) {\r\n            throw (IOException) t;\r\n        }\r\n    } else if (!wrap) {\r\n        // allow disabling wrapping for unchecked exceptions\r\n        ClassUtil.throwIfRTE(t);\r\n    }\r\n    throw JsonMappingException.wrapWithPath(t, bean, fieldName);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    StringBuilder sb \u003d new StringBuilder();\r\n    sb.append(\"Properties\u003d[\");\r\n    int count \u003d 0;\r\n    Iterator\u003cSettableBeanProperty\u003e it \u003d iterator();\r\n    while (it.hasNext()) {\r\n        SettableBeanProperty prop \u003d it.next();\r\n        if (count++ \u003e 0) {\r\n            sb.append(\", \");\r\n        }\r\n        sb.append(prop.getName());\r\n        sb.append(\u0027(\u0027);\r\n        sb.append(prop.getType());\r\n        sb.append(\u0027)\u0027);\r\n    }\r\n    sb.append(\u0027]\u0027);\r\n    if (!_aliasDefs.isEmpty()) {\r\n        sb.append(\"(aliases: \");\r\n        sb.append(_aliasDefs);\r\n        sb.append(\")\");\r\n    }\r\n    return sb.toString();\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($i0 \u003c\u003d 0) → B3 | else → B4",
      "B5 : If($z1 !\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyMap\n  $r0 \u003d StringBuilder\n  new StringBuilder()\n  $r0.append(\"Properties\u003d\")\n  i1 \u003d 0\n  r2 \u003d r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r6 \u003d r2.next()\n  r7 \u003d SettableBeanProperty) $r6\n  $i0 \u003d i1\n  i1 \u003d i1 + 1\n  if ($i0 \u003c\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r0.append(\", \")\n}",
      "B4 {\n  $r8 \u003d r7.getName()\n  $r0.append($r8)\n  $r0.append(40)\n  $r9 \u003d r7.getType()\n  $r0.append($r9)\n  $r0.append(41)\n  goto B1\n}",
      "B5 {\n  $r0.append(93)\n  $r3 \u003d Map _aliasDefs\u003e\n  $z1 \u003d $r3.isEmpty()\n  if ($z1 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $r0.append(\"(aliases: \")\n  $r5 \u003d Map _aliasDefs\u003e\n  $r0.append($r5)\n  $r0.append(\")\")\n}",
      "B7 {\n  $r4 \u003d $r0.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPropertyMap#iterator(...0)",
        "body": "{\r\n    return _properties().iterator();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
    "methodName": "construct",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate construct(com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition[])",
    "visibility": "public",
    "body": "{\r\n    final int pcount \u003d creator.getParameterCount();\r\n    Param[] params \u003d new Param[pcount];\r\n    for (int i \u003d 0; i \u003c pcount; ++i) {\r\n        AnnotatedParameter annParam \u003d creator.getParameter(i);\r\n        JacksonInject.Value injectId \u003d intr.findInjectableValue(annParam);\r\n        params[i] \u003d new Param(annParam, (propDefs \u003d\u003d null) ? null : propDefs[i], injectId);\r\n    }\r\n    return new CreatorCandidate(intr, creator, params, pcount);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d i0) → B2 | else → B6",
      "B2 : If(r7 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospector\n  AnnotatedWithParams\n  BeanPropertyDefinition[]\n  i0 \u003d r0.getParameterCount()\n  r1 \u003d CreatorCandidate$Param)[i0]\n  i2 \u003d 0\n}",
      "B1 {\n  if (i2 \u003e\u003d i0) goto B2 else B6\n}",
      "B2 {\n  r4 \u003d r0.getParameter(i2)\n  r5 \u003d r3.findInjectableValue(r4)\n  $i1 \u003d i2\n  $r6 \u003d CreatorCandidate$Param\n  if (r7 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r8 \u003d null\n  goto B5\n}",
      "B4 {\n  $r8 \u003d r7[i2]\n}",
      "B5 {\n  new CreatorCandidate$Param(r4, $r8, r5)\n  r1[$i1] \u003d $r6\n  i2 \u003d i2 + 1\n  goto B1\n}",
      "B6 {\n  $r2 \u003d CreatorCandidate\n  new CreatorCandidate(r3, r0, r1, i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
    "methodName": "paramName",
    "signature": "com.fasterxml.jackson.databind.PropertyName paramName(int)",
    "visibility": "public",
    "body": "{\r\n    BeanPropertyDefinition propDef \u003d _params[i].propDef;\r\n    if (propDef !\u003d null) {\r\n        return propDef.getFullName();\r\n    }\r\n    return null;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CreatorCandidate\n  i0 :\u003d @parameter0: int\n  $r1 \u003d CreatorCandidate$Param[] _params\u003e\n  $r2 \u003d $r1[i0]\n  r3 \u003d BeanPropertyDefinition propDef\u003e\n  if (r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r3.getFullName()\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
    "methodName": "explicitParamName",
    "signature": "com.fasterxml.jackson.databind.PropertyName explicitParamName(int)",
    "visibility": "public",
    "body": "{\r\n    BeanPropertyDefinition propDef \u003d _params[i].propDef;\r\n    if (propDef !\u003d null) {\r\n        if (propDef.isExplicitlyNamed()) {\r\n            return propDef.getFullName();\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CreatorCandidate\n  i0 :\u003d @parameter0: int\n  $r1 \u003d CreatorCandidate$Param[] _params\u003e\n  $r2 \u003d $r1[i0]\n  r3 \u003d BeanPropertyDefinition propDef\u003e\n  if (r3 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d r3.isExplicitlyNamed()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r3.getFullName()\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
    "methodName": "findImplicitParamName",
    "signature": "com.fasterxml.jackson.databind.PropertyName findImplicitParamName(int)",
    "visibility": "public",
    "body": "{\r\n    String str \u003d _intr.findImplicitPropertyName(_params[i].annotated);\r\n    if (str !\u003d null \u0026\u0026 !str.isEmpty()) {\r\n        return PropertyName.construct(str);\r\n    }\r\n    return null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r5 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CreatorCandidate\n  i0 :\u003d @parameter0: int\n  $r4 \u003d AnnotationIntrospector _intr\u003e\n  $r1 \u003d CreatorCandidate$Param[] _params\u003e\n  $r2 \u003d $r1[i0]\n  $r3 \u003d AnnotatedParameter annotated\u003e\n  r5 \u003d $r4.findImplicitPropertyName($r3)\n  if (r5 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d r5.isEmpty()\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d PropertyName.construct(r5)\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
    "methodName": "findOnlyParamWithoutInjectionX",
    "signature": "int findOnlyParamWithoutInjectionX()",
    "visibility": "public",
    "body": "{\r\n    int missing \u003d -1;\r\n    for (int i \u003d 0; i \u003c _paramCount; ++i) {\r\n        if (_params[i].injection \u003d\u003d null) {\r\n            if (missing \u003e\u003d 0) {\r\n                return -1;\r\n            }\r\n            missing \u003d i;\r\n        }\r\n    }\r\n    return missing;\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d $i0) → B2 | else → B7",
      "B2 : If($r3 !\u003d null) → B3 | else → B6",
      "B3 : If(i1 \u003c 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  CreatorCandidate\n  $i4 \u003d (int) -1\n  i1 \u003d $i4\n  i2 \u003d 0\n}",
      "B1 {\n  $i0 \u003d CreatorCandidate: int _paramCount\u003e\n  if (i2 \u003e\u003d $i0) goto B2 else B7\n}",
      "B2 {\n  $r1 \u003d CreatorCandidate$Param[] _params\u003e\n  $r2 \u003d $r1[i2]\n  $r3 \u003d JacksonInject$Value injection\u003e\n  if ($r3 !\u003d null) goto B3 else B6\n}",
      "B3 {\n  if (i1 \u003c 0) goto B4 else B5\n}",
      "B4 {\n  $i6 \u003d (int) -1\n  return\n}",
      "B5 {\n  i1 \u003d i2\n}",
      "B6 {\n  i2 \u003d i2 + 1\n  goto B1\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B6 --\u003e B1",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "methodName": "addDelegatingCreator",
    "signature": "void addDelegatingCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,boolean,com.fasterxml.jackson.databind.deser.SettableBeanProperty[],int)",
    "visibility": "public",
    "body": "{\r\n    if (creator.getParameterType(delegateeIndex).isCollectionLikeType()) {\r\n        if (verifyNonDup(creator, C_ARRAY_DELEGATE, explicit)) {\r\n            _arrayDelegateArgs \u003d injectables;\r\n        }\r\n    } else {\r\n        if (verifyNonDup(creator, C_DELEGATE, explicit)) {\r\n            _delegateArgs \u003d injectables;\r\n        }\r\n    }\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($z3 \u003d\u003d false) → B2 | else → B5",
      "B3 : If($z2 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  CreatorCollector\n  AnnotatedWithParams\n  z1 :\u003d @parameter1: boolean\n  SettableBeanProperty[]\n  i0 :\u003d @parameter3: int\n  $r1 \u003d r0.getParameterType(i0)\n  $z0 \u003d $r1.isCollectionLikeType()\n  if ($z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $z3 \u003d r2.verifyNonDup(r0, 10, z1)\n  if ($z3 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  SettableBeanProperty[] _arrayDelegateArgs\u003e \u003d r3\n  goto B5\n}",
      "B3 {\n  $z2 \u003d r2.verifyNonDup(r0, 8, z1)\n  if ($z2 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  SettableBeanProperty[] _delegateArgs\u003e \u003d r3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CreatorCollector#verifyNonDup(...3)",
        "body": "{\r\n    final int mask \u003d (1 \u003c\u003c typeIndex);\r\n    _hasNonDefaultCreator \u003d true;\r\n    AnnotatedWithParams oldOne \u003d _creators[typeIndex];\r\n    // already had an explicitly marked one?\r\n    if (oldOne !\u003d null) {\r\n        boolean verify;\r\n        if ((_explicitCreators \u0026 mask) !\u003d 0) {\r\n            // already had explicitly annotated, leave as-is\r\n            // but skip, if new one not annotated\r\n            if (!explicit) {\r\n                return false;\r\n            }\r\n            // both explicit: verify\r\n            verify \u003d true;\r\n        } else {\r\n            // otherwise only verify if neither explicitly annotated.\r\n            verify \u003d !explicit;\r\n        }\r\n        // one more thing: ok to override in sub-class\r\n        // 23-Feb-2021, tatu: Second check is for case of static factory vs constructor,\r\n        //    which is handled by caller, presumably.\r\n        //    Removing it would fail one test (in case interested).\r\n        if (verify \u0026\u0026 (oldOne.getClass() \u003d\u003d newOne.getClass())) {\r\n            // [databind#667]: avoid one particular class of bogus problems\r\n            final Class\u003c?\u003e oldType \u003d oldOne.getRawParameterType(0);\r\n            final Class\u003c?\u003e newType \u003d newOne.getRawParameterType(0);\r\n            if (oldType \u003d\u003d newType) {\r\n                // 13-Jul-2016, tatu: One more thing to check; since Enum classes\r\n                //   always have implicitly created `valueOf()`, let\u0027s resolve in\r\n                //   favor of other implicit creator (`fromString()`)\r\n                if (_isEnumValueOf(newOne)) {\r\n                    // ignore\r\n                    return false;\r\n                }\r\n                if (!_isEnumValueOf(oldOne)) {\r\n                    _reportDuplicateCreator(typeIndex, explicit, oldOne, newOne);\r\n                }\r\n            } else // otherwise, which one to choose?\r\n            if (newType.isAssignableFrom(oldType)) {\r\n                // new type less specific use old\r\n                return false;\r\n            } else if (oldType.isAssignableFrom(newType)) {\r\n                // new type more specific, use it\r\n                // 23-Feb-2021, tatu: due to [databind#3062], backwards-compatibility,\r\n                //   let\u0027s allow \"primitive/Wrapper\" case and tie-break in favor\r\n                //   of PRIMITIVE argument (null would never map to scalar creators,\r\n                //   and fundamentally all we need is a tie-breaker: up to caller to\r\n                //   annotate if wants the wrapper one)\r\n            } else if (oldType.isPrimitive() !\u003d newType.isPrimitive()) {\r\n                // Prefer primitive one\r\n                if (oldType.isPrimitive()) {\r\n                    return false;\r\n                }\r\n            } else {\r\n                // 02-May-2020, tatu: Should this only result in exception if both\r\n                //   explicit? Doing so could lead to arbitrary choice between\r\n                //   multiple implicit creators tho?\r\n                _reportDuplicateCreator(typeIndex, explicit, oldOne, newOne);\r\n            }\r\n        }\r\n    }\r\n    if (explicit) {\r\n        _explicitCreators |\u003d mask;\r\n    }\r\n    _creators[typeIndex] \u003d _fixAccess(newOne);\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "methodName": "addPropertyCreator",
    "signature": "void addPropertyCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,boolean,com.fasterxml.jackson.databind.deser.SettableBeanProperty[])",
    "visibility": "public",
    "body": "{\r\n    if (verifyNonDup(creator, C_PROPS, explicit)) {\r\n        // Better ensure we have no duplicate names either...\r\n        if (properties.length \u003e 1) {\r\n            HashMap\u003cString, Integer\u003e names \u003d new HashMap\u003c\u003e();\r\n            for (int i \u003d 0, len \u003d properties.length; i \u003c len; ++i) {\r\n                String name \u003d properties[i].getName();\r\n                // Need to consider Injectables, which may not have\r\n                // a name at all, and need to be skipped\r\n                // (same for possible AnySetter)\r\n                if (name.isEmpty() \u0026\u0026 (properties[i].getInjectableValueId() !\u003d null)) {\r\n                    continue;\r\n                }\r\n                Integer old \u003d names.put(name, Integer.valueOf(i));\r\n                if (old !\u003d null) {\r\n                    throw new IllegalArgumentException(String.format(\"Duplicate creator property \\\"%s\\\" (index %s vs %d) for type %s \", name, old, i, ClassUtil.nameOf(_beanDesc.getBeanClass())));\r\n                }\r\n            }\r\n        }\r\n        _propertyBasedArgs \u003d properties;\r\n    }\r\n}",
    "nodes": 12,
    "edges": 16,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z1 \u003d\u003d false) → B1 | else → B11",
      "B1 : If($i0 \u003c\u003d 1) → B2 | else → B10",
      "B3 : If(i2 \u003e\u003d i1) → B4 | else → B10",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B7",
      "B5 : If($r16 \u003d\u003d null) → B6 | else → B7",
      "B7 : If($r17 \u003d\u003d null) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  CreatorCollector\n  AnnotatedWithParams\n  z0 :\u003d @parameter1: boolean\n  SettableBeanProperty[]\n  $z1 \u003d r0.verifyNonDup(r1, 9, z0)\n  if ($z1 \u003d\u003d false) goto B1 else B11\n}",
      "B1 {\n  $i0 \u003d lengthof r2\n  if ($i0 \u003c\u003d 1) goto B2 else B10\n}",
      "B2 {\n  $r3 \u003d HashMap\n  new HashMap()\n  i2 \u003d 0\n  i1 \u003d lengthof r2\n}",
      "B3 {\n  if (i2 \u003e\u003d i1) goto B4 else B10\n}",
      "B4 {\n  $r4 \u003d r2[i2]\n  r5 \u003d $r4.getName()\n  $z2 \u003d r5.isEmpty()\n  if ($z2 \u003d\u003d false) goto B5 else B7\n}",
      "B5 {\n  $r15 \u003d r2[i2]\n  $r16 \u003d $r15.getInjectableValueId()\n  if ($r16 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  goto B9\n}",
      "B7 {\n  $r6 \u003d Integer.valueOf(i2)\n  $r7 \u003d $r3.put(r5, $r6)\n  $r17 \u003d Integer) $r7\n  if ($r17 \u003d\u003d null) goto B8 else B9\n}",
      "B8 {\n  $r8 \u003d IllegalArgumentException\n  $r9 \u003d Object)[4]\n  $r9[0] \u003d r5\n  $r9[1] \u003d $r17\n  $r10 \u003d Integer.valueOf(i2)\n  $r9[2] \u003d $r10\n  $r11 \u003d BeanDescription _beanDesc\u003e\n  $r12 \u003d $r11.getBeanClass()\n  $r13 \u003d ClassUtil.nameOf($r12)\n  $r9[3] \u003d $r13\n  $r14 \u003d String.format(\"Duplicate creator property \\\"%s\\\" (index %s vs %d) for type %s \", $r9)\n  new IllegalArgumentException($r14)\n  throw $r8\n}",
      "B9 {\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B10 {\n  SettableBeanProperty[] _propertyBasedArgs\u003e \u003d r2\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B11",
      "B1 --\u003e B2",
      "B1 --\u003e B10",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B10",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B3",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CreatorCollector#verifyNonDup(...3)",
        "body": "{\r\n    final int mask \u003d (1 \u003c\u003c typeIndex);\r\n    _hasNonDefaultCreator \u003d true;\r\n    AnnotatedWithParams oldOne \u003d _creators[typeIndex];\r\n    // already had an explicitly marked one?\r\n    if (oldOne !\u003d null) {\r\n        boolean verify;\r\n        if ((_explicitCreators \u0026 mask) !\u003d 0) {\r\n            // already had explicitly annotated, leave as-is\r\n            // but skip, if new one not annotated\r\n            if (!explicit) {\r\n                return false;\r\n            }\r\n            // both explicit: verify\r\n            verify \u003d true;\r\n        } else {\r\n            // otherwise only verify if neither explicitly annotated.\r\n            verify \u003d !explicit;\r\n        }\r\n        // one more thing: ok to override in sub-class\r\n        // 23-Feb-2021, tatu: Second check is for case of static factory vs constructor,\r\n        //    which is handled by caller, presumably.\r\n        //    Removing it would fail one test (in case interested).\r\n        if (verify \u0026\u0026 (oldOne.getClass() \u003d\u003d newOne.getClass())) {\r\n            // [databind#667]: avoid one particular class of bogus problems\r\n            final Class\u003c?\u003e oldType \u003d oldOne.getRawParameterType(0);\r\n            final Class\u003c?\u003e newType \u003d newOne.getRawParameterType(0);\r\n            if (oldType \u003d\u003d newType) {\r\n                // 13-Jul-2016, tatu: One more thing to check; since Enum classes\r\n                //   always have implicitly created `valueOf()`, let\u0027s resolve in\r\n                //   favor of other implicit creator (`fromString()`)\r\n                if (_isEnumValueOf(newOne)) {\r\n                    // ignore\r\n                    return false;\r\n                }\r\n                if (!_isEnumValueOf(oldOne)) {\r\n                    _reportDuplicateCreator(typeIndex, explicit, oldOne, newOne);\r\n                }\r\n            } else // otherwise, which one to choose?\r\n            if (newType.isAssignableFrom(oldType)) {\r\n                // new type less specific use old\r\n                return false;\r\n            } else if (oldType.isAssignableFrom(newType)) {\r\n                // new type more specific, use it\r\n                // 23-Feb-2021, tatu: due to [databind#3062], backwards-compatibility,\r\n                //   let\u0027s allow \"primitive/Wrapper\" case and tie-break in favor\r\n                //   of PRIMITIVE argument (null would never map to scalar creators,\r\n                //   and fundamentally all we need is a tie-breaker: up to caller to\r\n                //   annotate if wants the wrapper one)\r\n            } else if (oldType.isPrimitive() !\u003d newType.isPrimitive()) {\r\n                // Prefer primitive one\r\n                if (oldType.isPrimitive()) {\r\n                    return false;\r\n                }\r\n            } else {\r\n                // 02-May-2020, tatu: Should this only result in exception if both\r\n                //   explicit? Doing so could lead to arbitrary choice between\r\n                //   multiple implicit creators tho?\r\n                _reportDuplicateCreator(typeIndex, explicit, oldOne, newOne);\r\n            }\r\n        }\r\n    }\r\n    if (explicit) {\r\n        _explicitCreators |\u003d mask;\r\n    }\r\n    _creators[typeIndex] \u003d _fixAccess(newOne);\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "methodName": "hasDefaultCreator",
    "signature": "boolean hasDefaultCreator()",
    "visibility": "public",
    "body": "{\r\n    return _creators[C_DEFAULT] !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CreatorCollector\n  $r1 \u003d AnnotatedWithParams[] _creators\u003e\n  $r2 \u003d $r1[0]\n  if ($r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "methodName": "hasDelegatingCreator",
    "signature": "boolean hasDelegatingCreator()",
    "visibility": "public",
    "body": "{\r\n    return _creators[C_DELEGATE] !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CreatorCollector\n  $r1 \u003d AnnotatedWithParams[] _creators\u003e\n  $r2 \u003d $r1[8]\n  if ($r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "methodName": "hasPropertyBasedCreator",
    "signature": "boolean hasPropertyBasedCreator()",
    "visibility": "public",
    "body": "{\r\n    return _creators[C_PROPS] !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CreatorCollector\n  $r1 \u003d AnnotatedWithParams[] _creators\u003e\n  $r2 \u003d $r1[9]\n  if ($r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler",
    "methodName": "handleTypePropertyValue",
    "signature": "boolean handleTypePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    Object ob \u003d _nameToPropertyIndex.get(propName);\r\n    if (ob \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    final String typeId \u003d p.getText();\r\n    // 28-Nov-2016, tatu: For [databind#291], need separate handling\r\n    if (ob instanceof List\u003c?\u003e) {\r\n        boolean result \u003d false;\r\n        for (Integer index : (List\u003cInteger\u003e) ob) {\r\n            if (_handleTypePropertyValue(p, ctxt, propName, bean, typeId, index.intValue())) {\r\n                result \u003d true;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    return _handleTypePropertyValue(p, ctxt, propName, bean, typeId, ((Integer) ob).intValue());\r\n}",
    "nodes": 10,
    "edges": 11,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B9",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B8",
      "B5 : If($z3 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  ExternalTypeHandler\n  JsonParser\n  DeserializationContext\n  String\n  Object\n  $r2 \u003d Map _nameToPropertyIndex\u003e\n  r3 \u003d $r2.get(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r5 \u003d r4.getText()\n  $z0 \u003d List\n  if ($z0 \u003d\u003d false) goto B3 else B9\n}",
      "B3 {\n  z4 \u003d 0\n  $r9 \u003d List) r3\n  r10 \u003d $r9.iterator()\n}",
      "B4 {\n  $z2 \u003d r10.hasNext()\n  if ($z2 \u003d\u003d false) goto B5 else B8\n}",
      "B5 {\n  $r11 \u003d r10.next()\n  r12 \u003d Integer) $r11\n  $i1 \u003d r12.intValue()\n  $z3 \u003d r0._handleTypePropertyValue(r4, r6, r1, r7, r5, $i1)\n  if ($z3 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  z4 \u003d 1\n}",
      "B7 {\n  goto B4\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $r8 \u003d Integer) r3\n  $i0 \u003d $r8.intValue()\n  $z1 \u003d r0._handleTypePropertyValue(r4, r6, r1, r7, r5, $i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B9",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B4",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ExternalTypeHandler#_handleTypePropertyValue(...6)",
        "body": "{\r\n    ExtTypedProperty prop \u003d _properties[index];\r\n    if (!prop.hasTypePropertyName(propName)) {\r\n        // when could/should this ever happen?\r\n        return false;\r\n    }\r\n    // note: can NOT skip child values (should always be String anyway)\r\n    boolean canDeserialize \u003d (bean !\u003d null) \u0026\u0026 (_tokens[index] !\u003d null);\r\n    // Minor optimization: deserialize properties as soon as we have all we need:\r\n    if (canDeserialize) {\r\n        _deserializeAndSet(p, ctxt, bean, index, typeId);\r\n        // clear stored data, to avoid deserializing+setting twice:\r\n        _tokens[index] \u003d null;\r\n    } else {\r\n        _typeIds[index] \u003d typeId;\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler",
    "methodName": "handlePropertyValue",
    "signature": "boolean handlePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    Object ob \u003d _nameToPropertyIndex.get(propName);\r\n    if (ob \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    // 28-Nov-2016, tatu: For [databind#291], need separate handling\r\n    if (ob instanceof List\u003c?\u003e) {\r\n        Iterator\u003cInteger\u003e it \u003d ((List\u003cInteger\u003e) ob).iterator();\r\n        Integer index \u003d it.next();\r\n        ExtTypedProperty prop \u003d _properties[index];\r\n        // For now, let\u0027s assume it\u0027s same type (either type id OR value)\r\n        // for all mappings, so we\u0027ll only check first one\r\n        if (prop.hasTypePropertyName(propName)) {\r\n            String typeId \u003d p.getText();\r\n            p.skipChildren();\r\n            _typeIds[index] \u003d typeId;\r\n            while (it.hasNext()) {\r\n                _typeIds[it.next()] \u003d typeId;\r\n            }\r\n        } else {\r\n            TokenBuffer tokens \u003d ctxt.bufferAsCopyOfValue(p);\r\n            _tokens[index] \u003d tokens;\r\n            while (it.hasNext()) {\r\n                _tokens[it.next()] \u003d tokens;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    // Otherwise only maps to a single value, in which case we can\r\n    // handle things in bit more optimal way...\r\n    int index \u003d ((Integer) ob).intValue();\r\n    ExtTypedProperty prop \u003d _properties[index];\r\n    boolean canDeserialize;\r\n    if (prop.hasTypePropertyName(propName)) {\r\n        // 19-Feb-2021, tatu: as per [databind#3008], don\u0027t use \"getText()\"\r\n        //    since that\u0027ll coerce null value into String \"null\"...\r\n        _typeIds[index] \u003d p.getValueAsString();\r\n        p.skipChildren();\r\n        canDeserialize \u003d (bean !\u003d null) \u0026\u0026 (_tokens[index] !\u003d null);\r\n    } else {\r\n        @SuppressWarnings(\"resource\")\r\n        TokenBuffer tokens \u003d ctxt.bufferAsCopyOfValue(p);\r\n        _tokens[index] \u003d tokens;\r\n        canDeserialize \u003d (bean !\u003d null) \u0026\u0026 (_typeIds[index] !\u003d null);\r\n    }\r\n    // Minor optimization: let\u0027s deserialize properties as soon as\r\n    // we have all pertinent information:\r\n    if (canDeserialize) {\r\n        String typeId \u003d _typeIds[index];\r\n        // clear stored data, to avoid deserializing+setting twice:\r\n        _typeIds[index] \u003d null;\r\n        _deserializeAndSet(p, ctxt, bean, index, typeId);\r\n        _tokens[index] \u003d null;\r\n    }\r\n    return true;\r\n}",
    "nodes": 26,
    "edges": 34,
    "cc": 10,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B12",
      "B3 : If($z2 \u003d\u003d false) → B4 | else → B8",
      "B5 : If($z4 \u003d\u003d false) → B6 | else → B7",
      "B9 : If($z3 \u003d\u003d false) → B10 | else → B11",
      "B12 : If($z1 \u003d\u003d false) → B13 | else → B18",
      "B13 : If(r9 \u003d\u003d null) → B14 | else → B16",
      "B14 : If($r18 \u003d\u003d null) → B15 | else → B16",
      "B18 : If(r9 \u003d\u003d null) → B19 | else → B21",
      "B19 : If($r14 \u003d\u003d null) → B20 | else → B21",
      "B23 : If(z6 \u003d\u003d false) → B24 | else → B25"
    ],
    "blockList": [
      "B0 {\n  ExternalTypeHandler\n  JsonParser\n  DeserializationContext\n  String\n  Object\n  $r2 \u003d Map _nameToPropertyIndex\u003e\n  r3 \u003d $r2.get(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d List\n  if ($z0 \u003d\u003d false) goto B3 else B12\n}",
      "B3 {\n  $r19 \u003d List) r3\n  r30 \u003d $r19.iterator()\n  $r20 \u003d r30.next()\n  r31 \u003d Integer) $r20\n  $r21 \u003d ExternalTypeHandler$ExtTypedProperty[] _properties\u003e\n  $i0 \u003d r31.intValue()\n  r32 \u003d $r21[$i0]\n  $z2 \u003d r32.hasTypePropertyName(r1)\n  if ($z2 \u003d\u003d false) goto B4 else B8\n}",
      "B4 {\n  r33 \u003d r7.getText()\n  r7.skipChildren()\n  $r26 \u003d String[] _typeIds\u003e\n  $i3 \u003d r31.intValue()\n  $r26[$i3] \u003d r33\n}",
      "B5 {\n  $z4 \u003d r30.hasNext()\n  if ($z4 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r27 \u003d String[] _typeIds\u003e\n  $r28 \u003d r30.next()\n  $r29 \u003d Integer) $r28\n  $i4 \u003d $r29.intValue()\n  $r27[$i4] \u003d r33\n  goto B5\n}",
      "B7 {\n  goto B11\n}",
      "B8 {\n  r34 \u003d r6.bufferAsCopyOfValue(r7)\n  $r22 \u003d TokenBuffer[] _tokens\u003e\n  $i1 \u003d r31.intValue()\n  $r22[$i1] \u003d r34\n}",
      "B9 {\n  $z3 \u003d r30.hasNext()\n  if ($z3 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  $r23 \u003d TokenBuffer[] _tokens\u003e\n  $r24 \u003d r30.next()\n  $r25 \u003d Integer) $r24\n  $i2 \u003d $r25.intValue()\n  $r23[$i2] \u003d r34\n  goto B9\n}",
      "B11 {\n  return\n}",
      "B12 {\n  $r4 \u003d Integer) r3\n  i5 \u003d $r4.intValue()\n  $r5 \u003d ExternalTypeHandler$ExtTypedProperty[] _properties\u003e\n  r35 \u003d $r5[i5]\n  $z1 \u003d r35.hasTypePropertyName(r1)\n  if ($z1 \u003d\u003d false) goto B13 else B18\n}",
      "B13 {\n  $r15 \u003d String[] _typeIds\u003e\n  $r16 \u003d r7.getValueAsString()\n  $r15[i5] \u003d $r16\n  r7.skipChildren()\n  if (r9 \u003d\u003d null) goto B14 else B16\n}",
      "B14 {\n  $r17 \u003d TokenBuffer[] _tokens\u003e\n  $r18 \u003d $r17[i5]\n  if ($r18 \u003d\u003d null) goto B15 else B16\n}",
      "B15 {\n  $z5 \u003d 1\n  goto B17\n}",
      "B16 {\n  $z5 \u003d 0\n}",
      "B17 {\n  z6 \u003d $z5\n  goto B23\n}",
      "B18 {\n  r36 \u003d r6.bufferAsCopyOfValue(r7)\n  $r8 \u003d TokenBuffer[] _tokens\u003e\n  $r8[i5] \u003d r36\n  if (r9 \u003d\u003d null) goto B19 else B21\n}",
      "B19 {\n  $r13 \u003d String[] _typeIds\u003e\n  $r14 \u003d $r13[i5]\n  if ($r14 \u003d\u003d null) goto B20 else B21\n}",
      "B20 {\n  $z7 \u003d 1\n  goto B22\n}",
      "B21 {\n  $z7 \u003d 0\n}",
      "B22 {\n  z6 \u003d $z7\n}",
      "B23 {\n  if (z6 \u003d\u003d false) goto B24 else B25\n}",
      "B24 {\n  $r10 \u003d String[] _typeIds\u003e\n  r37 \u003d $r10[i5]\n  $r11 \u003d String[] _typeIds\u003e\n  $r11[i5] \u003d null\n  r0._deserializeAndSet(r7, r6, r9, i5, r37)\n  $r12 \u003d TokenBuffer[] _tokens\u003e\n  $r12[i5] \u003d null\n}",
      "B25 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B12",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B9",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B18",
      "B13 --\u003e B14",
      "B13 --\u003e B16",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e B23",
      "B18 --\u003e B19",
      "B18 --\u003e B21",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B22 --\u003e B23",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B25",
      "B25 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ExternalTypeHandler#_deserializeAndSet(...5)",
        "body": "{\r\n    // 11-Nov-2020, tatu: Should never get `null` passed this far,\r\n    if (typeId \u003d\u003d null) {\r\n        ctxt.reportInputMismatch(_beanType, \"Internal error in external Type Id handling: `null` type id passed\");\r\n    }\r\n    // Ok: time to mix type id, value; and we will actually use \"wrapper-array\"\r\n    // style to ensure we can handle all kinds of JSON constructs.\r\n    JsonParser p2 \u003d _tokens[index].asParser(p);\r\n    JsonToken t \u003d p2.nextToken();\r\n    // 29-Sep-2015, tatu: As per [databind#942], nulls need special support\r\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n        _properties[index].getProperty().set(bean, null);\r\n        return;\r\n    }\r\n    TokenBuffer merged \u003d ctxt.bufferForInputBuffering(p);\r\n    merged.writeStartArray();\r\n    merged.writeString(typeId);\r\n    merged.copyCurrentStructure(p2);\r\n    merged.writeEndArray();\r\n    // needs to point to START_OBJECT (or whatever first token is)\r\n    JsonParser mp \u003d merged.asParser(p);\r\n    mp.nextToken();\r\n    _properties[index].getProperty().deserializeAndSet(mp, ctxt, bean);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler",
    "methodName": "complete",
    "signature": "java.lang.Object complete(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d 0, len \u003d _properties.length; i \u003c len; ++i) {\r\n        String typeId \u003d _typeIds[i];\r\n        final ExtTypedProperty extProp \u003d _properties[i];\r\n        if (typeId \u003d\u003d null) {\r\n            TokenBuffer tokens \u003d _tokens[i];\r\n            // let\u0027s allow missing both type and property (may already have been set, too)\r\n            // but not just one\r\n            if (tokens \u003d\u003d null) {\r\n                continue;\r\n            }\r\n            // [databind#118]: Need to mind natural types, for which no type id\r\n            // will be included.\r\n            JsonToken t \u003d tokens.firstToken();\r\n            if (t.isScalarValue()) {\r\n                // can\u0027t be null as we never store empty buffers\r\n                JsonParser buffered \u003d tokens.asParser(p);\r\n                buffered.nextToken();\r\n                SettableBeanProperty prop \u003d extProp.getProperty();\r\n                Object result \u003d TypeDeserializer.deserializeIfNatural(buffered, ctxt, prop.getType());\r\n                if (result !\u003d null) {\r\n                    prop.set(bean, result);\r\n                    continue;\r\n                }\r\n            }\r\n            // 26-Oct-2012, tatu: As per [databind#94], must allow use of \u0027defaultImpl\u0027\r\n            if (!extProp.hasDefaultType()) {\r\n                ctxt.reportPropertyInputMismatch(_beanType, extProp.getProperty().getName(), \"Missing external type id property \u0027%s\u0027 (and no \u0027defaultImpl\u0027 specified)\", extProp.getTypePropertyName());\r\n            } else {\r\n                typeId \u003d extProp.getDefaultTypeId();\r\n                if (typeId \u003d\u003d null) {\r\n                    ctxt.reportPropertyInputMismatch(_beanType, extProp.getProperty().getName(), \"Invalid default type id for property \u0027%s\u0027: `null` returned by TypeIdResolver\", extProp.getTypePropertyName());\r\n                }\r\n            }\r\n        } else if (_tokens[i] \u003d\u003d null) {\r\n            SettableBeanProperty prop \u003d extProp.getProperty();\r\n            if (prop.isRequired() || ctxt.isEnabled(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY)) {\r\n                ctxt.reportPropertyInputMismatch(bean.getClass(), prop.getName(), \"Missing property \u0027%s\u0027 for external type id \u0027%s\u0027\", prop.getName(), extProp.getTypePropertyName());\r\n            }\r\n            return bean;\r\n        }\r\n        _deserializeAndSet(p, ctxt, bean, i, typeId);\r\n    }\r\n    return bean;\r\n}",
    "nodes": 21,
    "edges": 29,
    "cc": 10,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B20",
      "B2 : If(r32 !\u003d null) → B3 | else → B13",
      "B3 : If(r33 !\u003d null) → B4 | else → B5",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B8",
      "B6 : If(r31 \u003d\u003d null) → B7 | else → B8",
      "B8 : If($z3 !\u003d 0) → B9 | else → B10",
      "B10 : If(r32 !\u003d null) → B11 | else → B12",
      "B13 : If($r7 !\u003d null) → B14 | else → B18",
      "B14 : If($z0 !\u003d 0) → B15 | else → B16",
      "B15 : If($z1 \u003d\u003d false) → B16 | else → B17"
    ],
    "blockList": [
      "B0 {\n  ExternalTypeHandler\n  JsonParser\n  DeserializationContext\n  Object\n  i1 \u003d 0\n  $r1 \u003d ExternalTypeHandler$ExtTypedProperty[] _properties\u003e\n  i0 \u003d lengthof $r1\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B20\n}",
      "B2 {\n  $r3 \u003d String[] _typeIds\u003e\n  r32 \u003d $r3[i1]\n  $r4 \u003d ExternalTypeHandler$ExtTypedProperty[] _properties\u003e\n  r5 \u003d $r4[i1]\n  if (r32 !\u003d null) goto B3 else B13\n}",
      "B3 {\n  $r16 \u003d TokenBuffer[] _tokens\u003e\n  r33 \u003d $r16[i1]\n  if (r33 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  goto B19\n}",
      "B5 {\n  r17 \u003d r33.firstToken()\n  $z2 \u003d r17.isScalarValue()\n  if ($z2 \u003d\u003d false) goto B6 else B8\n}",
      "B6 {\n  r28 \u003d r33.asParser(r8)\n  r28.nextToken()\n  r29 \u003d r5.getProperty()\n  $r30 \u003d r29.getType()\n  r31 \u003d TypeDeserializer.deserializeIfNatural(r28, r9, $r30)\n  if (r31 \u003d\u003d null) goto B7 else B8\n}",
      "B7 {\n  r29.set(r2, r31)\n  goto B19\n}",
      "B8 {\n  $z3 \u003d r5.hasDefaultType()\n  if ($z3 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  $r23 \u003d JavaType _beanType\u003e\n  $r24 \u003d r5.getProperty()\n  $r27 \u003d $r24.getName()\n  $r25 \u003d Object)[1]\n  $r26 \u003d r5.getTypePropertyName()\n  $r25[0] \u003d $r26\n  r9.reportPropertyInputMismatch($r23, $r27, \"Missing external type id property \\\u0027%s\\\u0027 (and no \\\u0027defaultImpl\\\u0027 specified)\", $r25)\n  goto B12\n}",
      "B10 {\n  r32 \u003d r5.getDefaultTypeId()\n  if (r32 !\u003d null) goto B11 else B12\n}",
      "B11 {\n  $r18 \u003d JavaType _beanType\u003e\n  $r19 \u003d r5.getProperty()\n  $r22 \u003d $r19.getName()\n  $r20 \u003d Object)[1]\n  $r21 \u003d r5.getTypePropertyName()\n  $r20[0] \u003d $r21\n  r9.reportPropertyInputMismatch($r18, $r22, \"Invalid default type id for property \\\u0027%s\\\u0027: `null` returned by TypeIdResolver\", $r20)\n}",
      "B12 {\n  goto B18\n}",
      "B13 {\n  $r6 \u003d TokenBuffer[] _tokens\u003e\n  $r7 \u003d $r6[i1]\n  if ($r7 !\u003d null) goto B14 else B18\n}",
      "B14 {\n  r34 \u003d r5.getProperty()\n  $z0 \u003d r34.isRequired()\n  if ($z0 !\u003d 0) goto B15 else B16\n}",
      "B15 {\n  $r15 \u003d DeserializationFeature FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY\u003e\n  $z1 \u003d r9.isEnabled($r15)\n  if ($z1 \u003d\u003d false) goto B16 else B17\n}",
      "B16 {\n  $r14 \u003d r2.getClass()\n  $r13 \u003d r34.getName()\n  $r10 \u003d Object)[2]\n  $r11 \u003d r34.getName()\n  $r10[0] \u003d $r11\n  $r12 \u003d r5.getTypePropertyName()\n  $r10[1] \u003d $r12\n  r9.reportPropertyInputMismatch($r14, $r13, \"Missing property \\\u0027%s\\\u0027 for external type id \\\u0027%s\\\u0027\", $r10)\n}",
      "B17 {\n  return\n}",
      "B18 {\n  r0._deserializeAndSet(r8, r9, r2, i1, r32)\n}",
      "B19 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B20 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B20",
      "B2 --\u003e B3",
      "B2 --\u003e B13",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B19",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B19",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B18",
      "B13 --\u003e B14",
      "B13 --\u003e B18",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e B19",
      "B19 --\u003e B1",
      "B20 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ExternalTypeHandler#_deserializeAndSet(...5)",
        "body": "{\r\n    // 11-Nov-2020, tatu: Should never get `null` passed this far,\r\n    if (typeId \u003d\u003d null) {\r\n        ctxt.reportInputMismatch(_beanType, \"Internal error in external Type Id handling: `null` type id passed\");\r\n    }\r\n    // Ok: time to mix type id, value; and we will actually use \"wrapper-array\"\r\n    // style to ensure we can handle all kinds of JSON constructs.\r\n    JsonParser p2 \u003d _tokens[index].asParser(p);\r\n    JsonToken t \u003d p2.nextToken();\r\n    // 29-Sep-2015, tatu: As per [databind#942], nulls need special support\r\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n        _properties[index].getProperty().set(bean, null);\r\n        return;\r\n    }\r\n    TokenBuffer merged \u003d ctxt.bufferForInputBuffering(p);\r\n    merged.writeStartArray();\r\n    merged.writeString(typeId);\r\n    merged.copyCurrentStructure(p2);\r\n    merged.writeEndArray();\r\n    // needs to point to START_OBJECT (or whatever first token is)\r\n    JsonParser mp \u003d merged.asParser(p);\r\n    mp.nextToken();\r\n    _properties[index].getProperty().deserializeAndSet(mp, ctxt, bean);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler",
    "methodName": "complete",
    "signature": "java.lang.Object complete(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer,com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator)",
    "visibility": "public",
    "body": "{\r\n    // first things first: deserialize all data buffered:\r\n    final int len \u003d _properties.length;\r\n    Object[] values \u003d new Object[len];\r\n    for (int i \u003d 0; i \u003c len; ++i) {\r\n        String typeId \u003d _typeIds[i];\r\n        final ExtTypedProperty extProp \u003d _properties[i];\r\n        if (typeId \u003d\u003d null) {\r\n            // let\u0027s allow missing both type and property (may already have been set, too)\r\n            TokenBuffer tb \u003d _tokens[i];\r\n            if ((tb \u003d\u003d null) || // 19-Feb-2021, tatu: Both missing value and explicit `null`\r\n            //    should be accepted...\r\n            (tb.firstToken() \u003d\u003d JsonToken.VALUE_NULL)) {\r\n                continue;\r\n            }\r\n            // but not just one\r\n            // 26-Oct-2012, tatu: As per [databind#94], must allow use of \u0027defaultImpl\u0027\r\n            if (!extProp.hasDefaultType()) {\r\n                ctxt.reportPropertyInputMismatch(_beanType, extProp.getProperty().getName(), \"Missing external type id property \u0027%s\u0027\", extProp.getTypePropertyName());\r\n            } else {\r\n                typeId \u003d extProp.getDefaultTypeId();\r\n            }\r\n        }\r\n        if (_tokens[i] !\u003d null) {\r\n            values[i] \u003d _deserialize(p, ctxt, i, typeId);\r\n        } else {\r\n            if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY)) {\r\n                SettableBeanProperty prop \u003d extProp.getProperty();\r\n                ctxt.reportPropertyInputMismatch(_beanType, prop.getName(), \"Missing property \u0027%s\u0027 for external type id \u0027%s\u0027\", prop.getName(), _properties[i].getTypePropertyName());\r\n            }\r\n            // 03-Aug-2022, tatu: [databind#3533] to handle absent value matching\r\n            //    present type id\r\n            values[i] \u003d _deserializeMissingToken(p, ctxt, i, typeId);\r\n        }\r\n        final SettableBeanProperty prop \u003d extProp.getProperty();\r\n        // also: if it\u0027s creator prop, fill in\r\n        if (prop.getCreatorIndex() \u003e\u003d 0) {\r\n            buffer.assignParameter(prop, values[i]);\r\n            // [databind#999] And maybe there\u0027s creator property for type id too?\r\n            SettableBeanProperty typeProp \u003d extProp.getTypeProperty();\r\n            // for now, should only be needed for creator properties, too\r\n            if ((typeProp !\u003d null) \u0026\u0026 (typeProp.getCreatorIndex() \u003e\u003d 0)) {\r\n                // 31-May-2018, tatu: [databind#1328] if id is NOT plain `String`, need to\r\n                //    apply deserializer... fun fun.\r\n                final Object v;\r\n                if (typeProp.getType().hasRawClass(String.class)) {\r\n                    v \u003d typeId;\r\n                } else {\r\n                    TokenBuffer tb \u003d ctxt.bufferForInputBuffering(p);\r\n                    tb.writeString(typeId);\r\n                    v \u003d typeProp.getValueDeserializer().deserialize(tb.asParserOnFirstToken(), ctxt);\r\n                    tb.close();\r\n                }\r\n                buffer.assignParameter(typeProp, v);\r\n            }\r\n        }\r\n    }\r\n    Object bean \u003d creator.build(ctxt, buffer);\r\n    // third: assign non-creator properties\r\n    for (int i \u003d 0; i \u003c len; ++i) {\r\n        SettableBeanProperty prop \u003d _properties[i].getProperty();\r\n        if (prop.getCreatorIndex() \u003c 0) {\r\n            prop.set(bean, values[i]);\r\n        }\r\n    }\r\n    return bean;\r\n}",
    "nodes": 28,
    "edges": 40,
    "cc": 14,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d i0) → B2 | else → B22",
      "B2 : If(r36 !\u003d null) → B3 | else → B9",
      "B3 : If(r38 \u003d\u003d null) → B4 | else → B21",
      "B4 : If($r30 !\u003d $r29) → B5 | else → B6",
      "B6 : If($z2 !\u003d 0) → B7 | else → B8",
      "B9 : If($r40 \u003d\u003d null) → B10 | else → B11",
      "B11 : If($z0 \u003d\u003d false) → B12 | else → B13",
      "B14 : If($i4 \u003c 0) → B15 | else → B21",
      "B15 : If(r15 \u003d\u003d null) → B16 | else → B21",
      "B16 : If($i2 \u003c 0) → B17 | else → B21",
      "B17 : If($z1 \u003d\u003d false) → B18 | else → B19",
      "B23 : If(i5 \u003e\u003d i0) → B24 | else → B27",
      "B24 : If($i1 \u003e\u003d 0) → B25 | else → B26"
    ],
    "blockList": [
      "B0 {\n  ExternalTypeHandler\n  JsonParser\n  DeserializationContext\n  PropertyValueBuffer\n  PropertyBasedCreator\n  $r1 \u003d ExternalTypeHandler$ExtTypedProperty[] _properties\u003e\n  i0 \u003d lengthof $r1\n  r2 \u003d Object)[i0]\n  i3 \u003d 0\n}",
      "B1 {\n  if (i3 \u003e\u003d i0) goto B2 else B22\n}",
      "B2 {\n  $r9 \u003d String[] _typeIds\u003e\n  r36 \u003d $r9[i3]\n  $r10 \u003d ExternalTypeHandler$ExtTypedProperty[] _properties\u003e\n  r37 \u003d $r10[i3]\n  if (r36 !\u003d null) goto B3 else B9\n}",
      "B3 {\n  $r28 \u003d TokenBuffer[] _tokens\u003e\n  r38 \u003d $r28[i3]\n  if (r38 \u003d\u003d null) goto B4 else B21\n}",
      "B4 {\n  $r30 \u003d r38.firstToken()\n  $r29 \u003d JsonToken VALUE_NULL\u003e\n  if ($r30 !\u003d $r29) goto B5 else B6\n}",
      "B5 {\n  goto B21\n}",
      "B6 {\n  $z2 \u003d r37.hasDefaultType()\n  if ($z2 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $r31 \u003d JavaType _beanType\u003e\n  $r32 \u003d r37.getProperty()\n  $r35 \u003d $r32.getName()\n  $r33 \u003d Object)[1]\n  $r34 \u003d r37.getTypePropertyName()\n  $r33[0] \u003d $r34\n  r4.reportPropertyInputMismatch($r31, $r35, \"Missing external type id property \\\u0027%s\\\u0027\", $r33)\n  goto B9\n}",
      "B8 {\n  r36 \u003d r37.getDefaultTypeId()\n}",
      "B9 {\n  $r39 \u003d TokenBuffer[] _tokens\u003e\n  $r40 \u003d $r39[i3]\n  if ($r40 \u003d\u003d null) goto B10 else B11\n}",
      "B10 {\n  $r27 \u003d r0._deserialize(r12, r4, i3, r36)\n  r2[i3] \u003d $r27\n  goto B14\n}",
      "B11 {\n  $r11 \u003d DeserializationFeature FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY\u003e\n  $z0 \u003d r4.isEnabled($r11)\n  if ($z0 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  r41 \u003d r37.getProperty()\n  $r20 \u003d JavaType _beanType\u003e\n  $r26 \u003d r41.getName()\n  $r21 \u003d Object)[2]\n  $r22 \u003d r41.getName()\n  $r21[0] \u003d $r22\n  $r23 \u003d ExternalTypeHandler$ExtTypedProperty[] _properties\u003e\n  $r24 \u003d $r23[i3]\n  $r25 \u003d $r24.getTypePropertyName()\n  $r21[1] \u003d $r25\n  r4.reportPropertyInputMismatch($r20, $r26, \"Missing property \\\u0027%s\\\u0027 for external type id \\\u0027%s\\\u0027\", $r21)\n}",
      "B13 {\n  $r13 \u003d r0._deserializeMissingToken(r12, r4, i3, r36)\n  r2[i3] \u003d $r13\n}",
      "B14 {\n  $r42 \u003d r37.getProperty()\n  $i4 \u003d $r42.getCreatorIndex()\n  if ($i4 \u003c 0) goto B15 else B21\n}",
      "B15 {\n  $r14 \u003d r2[i3]\n  r5.assignParameter($r42, $r14)\n  r15 \u003d r37.getTypeProperty()\n  if (r15 \u003d\u003d null) goto B16 else B21\n}",
      "B16 {\n  $i2 \u003d r15.getCreatorIndex()\n  if ($i2 \u003c 0) goto B17 else B21\n}",
      "B17 {\n  $r16 \u003d r15.getType()\n  $z1 \u003d $r16.hasRawClass(class \"Ljava/lang/String;\")\n  if ($z1 \u003d\u003d false) goto B18 else B19\n}",
      "B18 {\n  r43 \u003d r36\n  goto B20\n}",
      "B19 {\n  r17 \u003d r4.bufferForInputBuffering(r12)\n  r17.writeString(r36)\n  $r19 \u003d r15.getValueDeserializer()\n  $r18 \u003d r17.asParserOnFirstToken()\n  r43 \u003d $r19.deserialize($r18, r4)\n  r17.close()\n}",
      "B20 {\n  r5.assignParameter(r15, r43)\n}",
      "B21 {\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B22 {\n  r44 \u003d r3.build(r4, r5)\n  i5 \u003d 0\n}",
      "B23 {\n  if (i5 \u003e\u003d i0) goto B24 else B27\n}",
      "B24 {\n  $r6 \u003d ExternalTypeHandler$ExtTypedProperty[] _properties\u003e\n  $r7 \u003d $r6[i5]\n  r45 \u003d $r7.getProperty()\n  $i1 \u003d r45.getCreatorIndex()\n  if ($i1 \u003e\u003d 0) goto B25 else B26\n}",
      "B25 {\n  $r8 \u003d r2[i5]\n  r45.set(r44, $r8)\n}",
      "B26 {\n  i5 \u003d i5 + 1\n  goto B23\n}",
      "B27 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B22",
      "B2 --\u003e B3",
      "B2 --\u003e B9",
      "B3 --\u003e B4",
      "B3 --\u003e B21",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B21",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B21",
      "B15 --\u003e B16",
      "B15 --\u003e B21",
      "B16 --\u003e B17",
      "B16 --\u003e B21",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B20",
      "B20 --\u003e B21",
      "B21 --\u003e B1",
      "B22 --\u003e B23",
      "B23 --\u003e B24",
      "B23 --\u003e B27",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B26",
      "B26 --\u003e B23",
      "B27 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ExternalTypeHandler#_deserializeMissingToken(...4)",
        "body": "{\r\n    TokenBuffer merged \u003d ctxt.bufferForInputBuffering(p);\r\n    merged.writeStartArray();\r\n    merged.writeString(typeId);\r\n    merged.writeEndArray();\r\n    // needs to point to START_OBJECT (or whatever first token is)\r\n    JsonParser mp \u003d merged.asParser(p);\r\n    mp.nextToken();\r\n    return _properties[index].getProperty().deserialize(mp, ctxt);\r\n}"
      },
      {
        "name": "ExternalTypeHandler#_deserialize(...4)",
        "body": "{\r\n    JsonParser p2 \u003d _tokens[index].asParser(p);\r\n    JsonToken t \u003d p2.nextToken();\r\n    // 29-Sep-2015, tatu: As per [databind#942], nulls need special support\r\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n        return null;\r\n    }\r\n    TokenBuffer merged \u003d ctxt.bufferForInputBuffering(p);\r\n    merged.writeStartArray();\r\n    merged.writeString(typeId);\r\n    merged.copyCurrentStructure(p2);\r\n    merged.writeEndArray();\r\n    // needs to point to START_OBJECT (or whatever first token is)\r\n    JsonParser mp \u003d merged.asParser(p);\r\n    mp.nextToken();\r\n    return _properties[index].getProperty().deserialize(mp, ctxt);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.FieldProperty",
    "methodName": "withValueDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty withValueDeserializer(com.fasterxml.jackson.databind.JsonDeserializer)",
    "visibility": "public",
    "body": "{\r\n    if (_valueDeserializer \u003d\u003d deser) {\r\n        return this;\r\n    }\r\n    // 07-May-2019, tatu: As per [databind#2303], must keep VD/NVP in-sync if they were\r\n    NullValueProvider nvp \u003d (_valueDeserializer \u003d\u003d _nullProvider) ? deser : _nullProvider;\r\n    return new FieldProperty(this, deser, nvp);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2",
      "B2 : If($r4 !\u003d $r3) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  FieldProperty\n  JsonDeserializer\n  $r2 \u003d JsonDeserializer _valueDeserializer\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d JsonDeserializer _valueDeserializer\u003e\n  $r3 \u003d NullValueProvider _nullProvider\u003e\n  if ($r4 !\u003d $r3) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d r1\n  goto B5\n}",
      "B4 {\n  $r6 \u003d NullValueProvider _nullProvider\u003e\n}",
      "B5 {\n  $r5 \u003d FieldProperty\n  new FieldProperty(r0, r1, $r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.FieldProperty",
    "methodName": "getAnnotation",
    "signature": "java.lang.\u0027annotation\u0027.Annotation getAnnotation(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return (_annotated \u003d\u003d null) ? null : _annotated.getAnnotation(acls);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  FieldProperty\n  Class\n  $r1 \u003d AnnotatedField _annotated\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r3 \u003d AnnotatedField _annotated\u003e\n  $r4 \u003d $r3.getAnnotation(r2)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.FieldProperty",
    "methodName": "deserializeAndSet",
    "signature": "void deserializeAndSet(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    Object value;\r\n    if (p.hasToken(JsonToken.VALUE_NULL)) {\r\n        if (_skipNulls) {\r\n            return;\r\n        }\r\n        value \u003d _nullProvider.getNullValue(ctxt);\r\n    } else if (_valueTypeDeserializer \u003d\u003d null) {\r\n        value \u003d _valueDeserializer.deserialize(p, ctxt);\r\n        // 04-May-2018, tatu: [databind#2023] Coercion from String (mostly) can give null\r\n        if (value \u003d\u003d null) {\r\n            if (_skipNulls) {\r\n                return;\r\n            }\r\n            value \u003d _nullProvider.getNullValue(ctxt);\r\n        }\r\n    } else {\r\n        value \u003d _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);\r\n    }\r\n    try {\r\n        _field.set(instance, value);\r\n    } catch (Exception e) {\r\n        _throwAsIOE(p, e, value);\r\n    }\r\n}",
    "nodes": 13,
    "edges": 15,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B4",
      "B1 : If($z2 \u003d\u003d false) → B2 | else → B3",
      "B4 : If($r3 !\u003d null) → B5 | else → B9",
      "B5 : If(r12 !\u003d null) → B6 | else → B10",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  FieldProperty\n  JsonParser\n  DeserializationContext\n  Object\n  $r1 \u003d JsonToken VALUE_NULL\u003e\n  $z0 \u003d r0.hasToken($r1)\n  if ($z0 \u003d\u003d false) goto B1 else B4\n}",
      "B1 {\n  $z2 \u003d FieldProperty: boolean _skipNulls\u003e\n  if ($z2 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r10 \u003d NullValueProvider _nullProvider\u003e\n  r12 \u003d $r10.getNullValue(r4)\n  goto B10\n}",
      "B4 {\n  $r3 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  if ($r3 !\u003d null) goto B5 else B9\n}",
      "B5 {\n  $r8 \u003d JsonDeserializer _valueDeserializer\u003e\n  r12 \u003d $r8.deserialize(r0, r4)\n  if (r12 !\u003d null) goto B6 else B10\n}",
      "B6 {\n  $z1 \u003d FieldProperty: boolean _skipNulls\u003e\n  if ($z1 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $r9 \u003d NullValueProvider _nullProvider\u003e\n  r12 \u003d $r9.getNullValue(r4)\n  goto B10\n}",
      "B9 {\n  $r6 \u003d JsonDeserializer _valueDeserializer\u003e\n  $r5 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  r12 \u003d $r6.deserializeWithType(r0, r4, $r5)\n}",
      "B10 {\n  $r13 \u003d Field _field\u003e\n  $r13.set(r7, r12)\n  goto B12\n}",
      "B11 {\n  $r11 :\u003d @caughtexception\n  r2._throwAsIOE(r0, $r11, r12)\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B10",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FieldProperty#_throwAsIOE(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.FieldProperty",
    "methodName": "deserializeSetAndReturn",
    "signature": "java.lang.Object deserializeSetAndReturn(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    Object value;\r\n    if (p.hasToken(JsonToken.VALUE_NULL)) {\r\n        if (_skipNulls) {\r\n            return instance;\r\n        }\r\n        value \u003d _nullProvider.getNullValue(ctxt);\r\n    } else if (_valueTypeDeserializer \u003d\u003d null) {\r\n        value \u003d _valueDeserializer.deserialize(p, ctxt);\r\n        // 04-May-2018, tatu: [databind#2023] Coercion from String (mostly) can give null\r\n        if (value \u003d\u003d null) {\r\n            if (_skipNulls) {\r\n                return instance;\r\n            }\r\n            value \u003d _nullProvider.getNullValue(ctxt);\r\n        }\r\n    } else {\r\n        value \u003d _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);\r\n    }\r\n    try {\r\n        _field.set(instance, value);\r\n    } catch (Exception e) {\r\n        _throwAsIOE(p, e, value);\r\n    }\r\n    return instance;\r\n}",
    "nodes": 13,
    "edges": 15,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B4",
      "B1 : If($z2 \u003d\u003d false) → B2 | else → B3",
      "B4 : If($r3 !\u003d null) → B5 | else → B9",
      "B5 : If(r12 !\u003d null) → B6 | else → B10",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  FieldProperty\n  JsonParser\n  DeserializationContext\n  Object\n  $r1 \u003d JsonToken VALUE_NULL\u003e\n  $z0 \u003d r0.hasToken($r1)\n  if ($z0 \u003d\u003d false) goto B1 else B4\n}",
      "B1 {\n  $z2 \u003d FieldProperty: boolean _skipNulls\u003e\n  if ($z2 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r10 \u003d NullValueProvider _nullProvider\u003e\n  r12 \u003d $r10.getNullValue(r4)\n  goto B10\n}",
      "B4 {\n  $r3 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  if ($r3 !\u003d null) goto B5 else B9\n}",
      "B5 {\n  $r8 \u003d JsonDeserializer _valueDeserializer\u003e\n  r12 \u003d $r8.deserialize(r0, r4)\n  if (r12 !\u003d null) goto B6 else B10\n}",
      "B6 {\n  $z1 \u003d FieldProperty: boolean _skipNulls\u003e\n  if ($z1 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $r9 \u003d NullValueProvider _nullProvider\u003e\n  r12 \u003d $r9.getNullValue(r4)\n  goto B10\n}",
      "B9 {\n  $r6 \u003d JsonDeserializer _valueDeserializer\u003e\n  $r5 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  r12 \u003d $r6.deserializeWithType(r0, r4, $r5)\n}",
      "B10 {\n  $r13 \u003d Field _field\u003e\n  $r13.set(r7, r12)\n  goto B12\n}",
      "B11 {\n  $r11 :\u003d @caughtexception\n  r2._throwAsIOE(r0, $r11, r12)\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B10",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FieldProperty#_throwAsIOE(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.FieldProperty",
    "methodName": "set",
    "signature": "void set(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d null) {\r\n        if (_skipNulls) {\r\n            return;\r\n        }\r\n    }\r\n    try {\r\n        _field.set(instance, value);\r\n    } catch (Exception e) {\r\n        // 15-Sep-2015, tatu: How could we get a ref to JsonParser?\r\n        _throwAsIOE(e, value);\r\n    }\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  FieldProperty\n  Object\n  Object\n  if (r0 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d FieldProperty: boolean _skipNulls\u003e\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r3 \u003d Field _field\u003e\n  $r3.set(r2, r0)\n  goto B5\n}",
      "B4 {\n  $r4 :\u003d @caughtexception\n  r1._throwAsIOE($r4, r0)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FieldProperty#_throwAsIOE(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.FieldProperty",
    "methodName": "setAndReturn",
    "signature": "java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d null) {\r\n        if (_skipNulls) {\r\n            return instance;\r\n        }\r\n    }\r\n    try {\r\n        _field.set(instance, value);\r\n    } catch (Exception e) {\r\n        // 15-Sep-2015, tatu: How could we get a ref to JsonParser?\r\n        _throwAsIOE(e, value);\r\n    }\r\n    return instance;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  FieldProperty\n  Object\n  Object\n  if (r0 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d FieldProperty: boolean _skipNulls\u003e\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r3 \u003d Field _field\u003e\n  $r3.set(r2, r0)\n  goto B5\n}",
      "B4 {\n  $r4 :\u003d @caughtexception\n  r1._throwAsIOE($r4, r0)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FieldProperty#_throwAsIOE(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.InnerClassProperty",
    "methodName": "deserializeAndSet",
    "signature": "void deserializeAndSet(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    JsonToken t \u003d p.currentToken();\r\n    Object value;\r\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n        value \u003d _valueDeserializer.getNullValue(ctxt);\r\n    } else if (_valueTypeDeserializer !\u003d null) {\r\n        value \u003d _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);\r\n    } else {\r\n        // the usual case\r\n        try {\r\n            value \u003d _creator.newInstance(bean);\r\n        } catch (Exception e) {\r\n            ClassUtil.unwrapAndThrowAsIAE(e, String.format(\"Failed to instantiate class %s, problem: %s\", _creator.getDeclaringClass().getName(), e.getMessage()));\r\n            value \u003d null;\r\n        }\r\n        _valueDeserializer.deserialize(p, ctxt, value);\r\n    }\r\n    set(bean, value);\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 !\u003d $r2) → B1 | else → B2",
      "B2 : If($r4 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  InnerClassProperty\n  JsonParser\n  DeserializationContext\n  Object\n  r1 \u003d r0.currentToken()\n  $r2 \u003d JsonToken VALUE_NULL\u003e\n  if (r1 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  $r12 \u003d JsonDeserializer _valueDeserializer\u003e\n  r20 \u003d $r12.getNullValue(r8)\n  goto B7\n}",
      "B2 {\n  $r4 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  if ($r4 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r11 \u003d JsonDeserializer _valueDeserializer\u003e\n  $r10 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  r20 \u003d $r11.deserializeWithType(r0, r8, $r10)\n  goto B7\n}",
      "B4 {\n  $r7 \u003d Constructor _creator\u003e\n  $r5 \u003d Object)[1]\n  $r5[0] \u003d r6\n  r20 \u003d $r7.newInstance($r5)\n  goto B6\n}",
      "B5 {\n  $r13 :\u003d @caughtexception\n  $r14 \u003d Object)[2]\n  $r15 \u003d Constructor _creator\u003e\n  $r16 \u003d $r15.getDeclaringClass()\n  $r17 \u003d $r16.getName()\n  $r14[0] \u003d $r17\n  $r18 \u003d $r13.getMessage()\n  $r14[1] \u003d $r18\n  $r19 \u003d String.format(\"Failed to instantiate class %s, problem: %s\", $r14)\n  ClassUtil.unwrapAndThrowAsIAE($r13, $r19)\n  r20 \u003d null\n}",
      "B6 {\n  $r9 \u003d JsonDeserializer _valueDeserializer\u003e\n  $r9.deserialize(r0, r8, r20)\n}",
      "B7 {\n  r3.set(r6, r20)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "InnerClassProperty#set(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty",
    "methodName": "setAndReturn",
    "signature": "java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    /* 04-Feb-2014, tatu: As per [#390], it may be necessary to switch the\r\n         *   ordering of forward/backward references, and start with back ref.\r\n         */\r\n    if (value !\u003d null) {\r\n        if (_isContainer) {\r\n            // ok, this gets ugly... but has to do for now\r\n            if (value instanceof Object[]) {\r\n                for (Object ob : (Object[]) value) {\r\n                    if (ob !\u003d null) {\r\n                        _backProperty.set(ob, instance);\r\n                    }\r\n                }\r\n            } else if (value instanceof Collection\u003c?\u003e) {\r\n                for (Object ob : (Collection\u003c?\u003e) value) {\r\n                    if (ob !\u003d null) {\r\n                        _backProperty.set(ob, instance);\r\n                    }\r\n                }\r\n            } else if (value instanceof Map\u003c?, ?\u003e) {\r\n                for (Object ob : ((Map\u003c?, ?\u003e) value).values()) {\r\n                    if (ob !\u003d null) {\r\n                        _backProperty.set(ob, instance);\r\n                    }\r\n                }\r\n            } else {\r\n                throw new IllegalStateException(\"Unsupported container type (\" + value.getClass().getName() + \") when resolving reference \u0027\" + _referenceName + \"\u0027\");\r\n            }\r\n        } else {\r\n            _backProperty.set(value, instance);\r\n        }\r\n    }\r\n    // and then the forward reference itself\r\n    return delegate.setAndReturn(instance, value);\r\n}",
    "nodes": 26,
    "edges": 35,
    "cc": 11,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B25",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B24",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B9",
      "B4 : If(i1 \u003e\u003d i0) → B5 | else → B8",
      "B5 : If(r14 \u003d\u003d null) → B6 | else → B7",
      "B9 : If($z2 \u003d\u003d false) → B10 | else → B16",
      "B11 : If($z5 \u003d\u003d false) → B12 | else → B15",
      "B12 : If(r18 \u003d\u003d null) → B13 | else → B14",
      "B16 : If($z3 \u003d\u003d false) → B17 | else → B23",
      "B18 : If($z4 \u003d\u003d false) → B19 | else → B22",
      "B19 : If(r20 \u003d\u003d null) → B20 | else → B21"
    ],
    "blockList": [
      "B0 {\n  ManagedReferenceProperty\n  Object\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B25\n}",
      "B1 {\n  $z0 \u003d ManagedReferenceProperty: boolean _isContainer\u003e\n  if ($z0 \u003d\u003d false) goto B2 else B24\n}",
      "B2 {\n  $z1 \u003d Object[]\n  if ($z1 \u003d\u003d false) goto B3 else B9\n}",
      "B3 {\n  r16 \u003d Object[]) r0\n  i0 \u003d lengthof r16\n  i1 \u003d 0\n}",
      "B4 {\n  if (i1 \u003e\u003d i0) goto B5 else B8\n}",
      "B5 {\n  r14 \u003d r16[i1]\n  if (r14 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r15 \u003d SettableBeanProperty _backProperty\u003e\n  $r15.set(r14, r2)\n}",
      "B7 {\n  i1 \u003d i1 + 1\n  goto B4\n}",
      "B8 {\n  goto B25\n}",
      "B9 {\n  $z2 \u003d Collection\n  if ($z2 \u003d\u003d false) goto B10 else B16\n}",
      "B10 {\n  $r12 \u003d Collection) r0\n  r17 \u003d $r12.iterator()\n}",
      "B11 {\n  $z5 \u003d r17.hasNext()\n  if ($z5 \u003d\u003d false) goto B12 else B15\n}",
      "B12 {\n  r18 \u003d r17.next()\n  if (r18 \u003d\u003d null) goto B13 else B14\n}",
      "B13 {\n  $r13 \u003d SettableBeanProperty _backProperty\u003e\n  $r13.set(r18, r2)\n}",
      "B14 {\n  goto B11\n}",
      "B15 {\n  goto B25\n}",
      "B16 {\n  $z3 \u003d Map\n  if ($z3 \u003d\u003d false) goto B17 else B23\n}",
      "B17 {\n  $r9 \u003d Map) r0\n  $r10 \u003d $r9.values()\n  r19 \u003d $r10.iterator()\n}",
      "B18 {\n  $z4 \u003d r19.hasNext()\n  if ($z4 \u003d\u003d false) goto B19 else B22\n}",
      "B19 {\n  r20 \u003d r19.next()\n  if (r20 \u003d\u003d null) goto B20 else B21\n}",
      "B20 {\n  $r11 \u003d SettableBeanProperty _backProperty\u003e\n  $r11.set(r20, r2)\n}",
      "B21 {\n  goto B18\n}",
      "B22 {\n  goto B25\n}",
      "B23 {\n  $r4 \u003d IllegalStateException\n  $r5 \u003d r0.getClass()\n  $r7 \u003d $r5.getName()\n  $r6 \u003d String _referenceName\u003e\n  $r8 \u003d dynInvoke makeConcatWithConstants($r7, $r6)\n  new IllegalStateException($r8)\n  throw $r4\n}",
      "B24 {\n  $r3 \u003d SettableBeanProperty _backProperty\u003e\n  $r3.set(r0, r2)\n}",
      "B25 {\n  $r21 \u003d SettableBeanProperty delegate\u003e\n  $r22 \u003d $r21.setAndReturn(r2, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B25",
      "B1 --\u003e B2",
      "B1 --\u003e B24",
      "B2 --\u003e B3",
      "B2 --\u003e B9",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B4",
      "B8 --\u003e B25",
      "B9 --\u003e B10",
      "B9 --\u003e B16",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B11",
      "B15 --\u003e B25",
      "B16 --\u003e B17",
      "B16 --\u003e B23",
      "B17 --\u003e B18",
      "B18 --\u003e B19",
      "B18 --\u003e B22",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B21",
      "B21 --\u003e B18",
      "B22 --\u003e B25",
      "B23 --\u003e [EXIT]",
      "B24 --\u003e B25",
      "B25 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.MergingSettableBeanProperty",
    "methodName": "deserializeAndSet",
    "signature": "void deserializeAndSet(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    Object oldValue \u003d _accessor.getValue(instance);\r\n    Object newValue;\r\n    // 20-Oct-2016, tatu: Couple of possibilities of how to proceed; for\r\n    //    now, default to \"normal\" handling without merging\r\n    if (oldValue \u003d\u003d null) {\r\n        newValue \u003d delegate.deserialize(p, ctxt);\r\n    } else {\r\n        newValue \u003d delegate.deserializeWith(p, ctxt, oldValue);\r\n    }\r\n    if (newValue !\u003d oldValue) {\r\n        // 18-Apr-2017, tatu: Null handling should occur within delegate, which may\r\n        //     set/skip/transform it, or throw an exception.\r\n        delegate.set(instance, newValue);\r\n    }\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B3 : If(r9 \u003d\u003d r3) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MergingSettableBeanProperty\n  JsonParser\n  DeserializationContext\n  Object\n  $r2 \u003d AnnotatedMember _accessor\u003e\n  r3 \u003d $r2.getValue(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d SettableBeanProperty delegate\u003e\n  r9 \u003d $r8.deserialize(r4, r5)\n  goto B3\n}",
      "B2 {\n  $r6 \u003d SettableBeanProperty delegate\u003e\n  r9 \u003d $r6.deserializeWith(r4, r5, r3)\n}",
      "B3 {\n  if (r9 \u003d\u003d r3) goto B4 else B5\n}",
      "B4 {\n  $r7 \u003d SettableBeanProperty delegate\u003e\n  $r7.set(r1, r9)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.MergingSettableBeanProperty",
    "methodName": "deserializeSetAndReturn",
    "signature": "java.lang.Object deserializeSetAndReturn(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    Object oldValue \u003d _accessor.getValue(instance);\r\n    Object newValue;\r\n    // 20-Oct-2016, tatu: Couple of possibilities of how to proceed; for\r\n    //    now, default to \"normal\" handling without merging\r\n    if (oldValue \u003d\u003d null) {\r\n        newValue \u003d delegate.deserialize(p, ctxt);\r\n    } else {\r\n        newValue \u003d delegate.deserializeWith(p, ctxt, oldValue);\r\n    }\r\n    // 23-Oct-2016, tatu: One possible complication here; should we always\r\n    //    try calling setter on builder? Presumably should not be required,\r\n    //    but may need to revise\r\n    if (newValue !\u003d oldValue) {\r\n        // 31-Oct-2016, tatu: Basically should just ignore as null can\u0027t really\r\n        //    contribute to merging.\r\n        if (newValue !\u003d null) {\r\n            return delegate.setAndReturn(instance, newValue);\r\n        }\r\n    }\r\n    return instance;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B3 : If(r10 \u003d\u003d r3) → B4 | else → B6",
      "B4 : If(r10 \u003d\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  MergingSettableBeanProperty\n  JsonParser\n  DeserializationContext\n  Object\n  $r2 \u003d AnnotatedMember _accessor\u003e\n  r3 \u003d $r2.getValue(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d SettableBeanProperty delegate\u003e\n  r10 \u003d $r9.deserialize(r4, r5)\n  goto B3\n}",
      "B2 {\n  $r6 \u003d SettableBeanProperty delegate\u003e\n  r10 \u003d $r6.deserializeWith(r4, r5, r3)\n}",
      "B3 {\n  if (r10 \u003d\u003d r3) goto B4 else B6\n}",
      "B4 {\n  if (r10 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r7 \u003d SettableBeanProperty delegate\u003e\n  $r8 \u003d $r7.setAndReturn(r1, r10)\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.MergingSettableBeanProperty",
    "methodName": "set",
    "signature": "void set(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    // 31-Oct-2016, tatu: Basically should just ignore as null can\u0027t really\r\n    //    contribute to merging.\r\n    if (value !\u003d null) {\r\n        delegate.set(instance, value);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MergingSettableBeanProperty\n  Object\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d SettableBeanProperty delegate\u003e\n  $r3.set(r2, r0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.MergingSettableBeanProperty",
    "methodName": "setAndReturn",
    "signature": "java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    // 31-Oct-2016, tatu: Basically should just ignore as null can\u0027t really\r\n    //    contribute to merging.\r\n    if (value !\u003d null) {\r\n        return delegate.setAndReturn(instance, value);\r\n    }\r\n    return instance;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MergingSettableBeanProperty\n  Object\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d SettableBeanProperty delegate\u003e\n  $r4 \u003d $r3.setAndReturn(r1, r0)\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
    "methodName": "withValueDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty withValueDeserializer(com.fasterxml.jackson.databind.JsonDeserializer)",
    "visibility": "public",
    "body": "{\r\n    if (_valueDeserializer \u003d\u003d deser) {\r\n        return this;\r\n    }\r\n    // 07-May-2019, tatu: As per [databind#2303], must keep VD/NVP in-sync if they were\r\n    NullValueProvider nvp \u003d (_valueDeserializer \u003d\u003d _nullProvider) ? deser : _nullProvider;\r\n    return new MethodProperty(this, deser, nvp);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2",
      "B2 : If($r4 !\u003d $r3) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  MethodProperty\n  JsonDeserializer\n  $r2 \u003d JsonDeserializer _valueDeserializer\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d JsonDeserializer _valueDeserializer\u003e\n  $r3 \u003d NullValueProvider _nullProvider\u003e\n  if ($r4 !\u003d $r3) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d r1\n  goto B5\n}",
      "B4 {\n  $r6 \u003d NullValueProvider _nullProvider\u003e\n}",
      "B5 {\n  $r5 \u003d MethodProperty\n  new MethodProperty(r0, r1, $r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
    "methodName": "getAnnotation",
    "signature": "java.lang.\u0027annotation\u0027.Annotation getAnnotation(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return (_annotated \u003d\u003d null) ? null : _annotated.getAnnotation(acls);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MethodProperty\n  Class\n  $r1 \u003d AnnotatedMethod _annotated\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r3 \u003d AnnotatedMethod _annotated\u003e\n  $r4 \u003d $r3.getAnnotation(r2)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
    "methodName": "deserializeAndSet",
    "signature": "void deserializeAndSet(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    Object value;\r\n    if (p.hasToken(JsonToken.VALUE_NULL)) {\r\n        if (_skipNulls) {\r\n            return;\r\n        }\r\n        value \u003d _nullProvider.getNullValue(ctxt);\r\n    } else if (_valueTypeDeserializer \u003d\u003d null) {\r\n        value \u003d _valueDeserializer.deserialize(p, ctxt);\r\n        // 04-May-2018, tatu: [databind#2023] Coercion from String (mostly) can give null\r\n        if (value \u003d\u003d null) {\r\n            if (_skipNulls) {\r\n                return;\r\n            }\r\n            value \u003d _nullProvider.getNullValue(ctxt);\r\n        }\r\n    } else {\r\n        value \u003d _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);\r\n    }\r\n    try {\r\n        _setter.invoke(instance, value);\r\n    } catch (Exception e) {\r\n        _throwAsIOE(p, e, value);\r\n    }\r\n}",
    "nodes": 13,
    "edges": 15,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B4",
      "B1 : If($z2 \u003d\u003d false) → B2 | else → B3",
      "B4 : If($r3 !\u003d null) → B5 | else → B9",
      "B5 : If(r12 !\u003d null) → B6 | else → B10",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  MethodProperty\n  JsonParser\n  DeserializationContext\n  Object\n  $r1 \u003d JsonToken VALUE_NULL\u003e\n  $z0 \u003d r0.hasToken($r1)\n  if ($z0 \u003d\u003d false) goto B1 else B4\n}",
      "B1 {\n  $z2 \u003d MethodProperty: boolean _skipNulls\u003e\n  if ($z2 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r10 \u003d NullValueProvider _nullProvider\u003e\n  r12 \u003d $r10.getNullValue(r4)\n  goto B10\n}",
      "B4 {\n  $r3 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  if ($r3 !\u003d null) goto B5 else B9\n}",
      "B5 {\n  $r8 \u003d JsonDeserializer _valueDeserializer\u003e\n  r12 \u003d $r8.deserialize(r0, r4)\n  if (r12 !\u003d null) goto B6 else B10\n}",
      "B6 {\n  $z1 \u003d MethodProperty: boolean _skipNulls\u003e\n  if ($z1 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $r9 \u003d NullValueProvider _nullProvider\u003e\n  r12 \u003d $r9.getNullValue(r4)\n  goto B10\n}",
      "B9 {\n  $r6 \u003d JsonDeserializer _valueDeserializer\u003e\n  $r5 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  r12 \u003d $r6.deserializeWithType(r0, r4, $r5)\n}",
      "B10 {\n  $r13 \u003d Method _setter\u003e\n  $r14 \u003d Object)[1]\n  $r14[0] \u003d r12\n  $r13.invoke(r7, $r14)\n  goto B12\n}",
      "B11 {\n  $r11 :\u003d @caughtexception\n  r2._throwAsIOE(r0, $r11, r12)\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B10",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MethodProperty#_throwAsIOE(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
    "methodName": "deserializeSetAndReturn",
    "signature": "java.lang.Object deserializeSetAndReturn(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    Object value;\r\n    if (p.hasToken(JsonToken.VALUE_NULL)) {\r\n        if (_skipNulls) {\r\n            return instance;\r\n        }\r\n        value \u003d _nullProvider.getNullValue(ctxt);\r\n    } else if (_valueTypeDeserializer \u003d\u003d null) {\r\n        value \u003d _valueDeserializer.deserialize(p, ctxt);\r\n        // 04-May-2018, tatu: [databind#2023] Coercion from String (mostly) can give null\r\n        if (value \u003d\u003d null) {\r\n            if (_skipNulls) {\r\n                return instance;\r\n            }\r\n            value \u003d _nullProvider.getNullValue(ctxt);\r\n        }\r\n    } else {\r\n        value \u003d _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);\r\n    }\r\n    try {\r\n        Object result \u003d _setter.invoke(instance, value);\r\n        return (result \u003d\u003d null) ? instance : result;\r\n    } catch (Exception e) {\r\n        _throwAsIOE(p, e, value);\r\n        return null;\r\n    }\r\n}",
    "nodes": 15,
    "edges": 17,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B4",
      "B1 : If($z2 \u003d\u003d false) → B2 | else → B3",
      "B4 : If($r3 !\u003d null) → B5 | else → B9",
      "B5 : If(r12 !\u003d null) → B6 | else → B10",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B8",
      "B10 : If($r15 !\u003d null) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  MethodProperty\n  JsonParser\n  DeserializationContext\n  Object\n  $r1 \u003d JsonToken VALUE_NULL\u003e\n  $z0 \u003d r0.hasToken($r1)\n  if ($z0 \u003d\u003d false) goto B1 else B4\n}",
      "B1 {\n  $z2 \u003d MethodProperty: boolean _skipNulls\u003e\n  if ($z2 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r10 \u003d NullValueProvider _nullProvider\u003e\n  r12 \u003d $r10.getNullValue(r4)\n  goto B10\n}",
      "B4 {\n  $r3 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  if ($r3 !\u003d null) goto B5 else B9\n}",
      "B5 {\n  $r8 \u003d JsonDeserializer _valueDeserializer\u003e\n  r12 \u003d $r8.deserialize(r0, r4)\n  if (r12 !\u003d null) goto B6 else B10\n}",
      "B6 {\n  $z1 \u003d MethodProperty: boolean _skipNulls\u003e\n  if ($z1 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $r9 \u003d NullValueProvider _nullProvider\u003e\n  r12 \u003d $r9.getNullValue(r4)\n  goto B10\n}",
      "B9 {\n  $r6 \u003d JsonDeserializer _valueDeserializer\u003e\n  $r5 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  r12 \u003d $r6.deserializeWithType(r0, r4, $r5)\n}",
      "B10 {\n  $r13 \u003d Method _setter\u003e\n  $r14 \u003d Object)[1]\n  $r14[0] \u003d r12\n  $r15 \u003d $r13.invoke(r7, $r14)\n  if ($r15 !\u003d null) goto B11 else B12\n}",
      "B11 {\n  $r16 \u003d r7\n  goto B13\n}",
      "B12 {\n  $r16 \u003d $r15\n}",
      "B13 {\n  return\n}",
      "B14 {\n  $r11 :\u003d @caughtexception\n  r2._throwAsIOE(r0, $r11, r12)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B10",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MethodProperty#_throwAsIOE(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
    "methodName": "set",
    "signature": "void set(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d null) {\r\n        if (_skipNulls) {\r\n            return;\r\n        }\r\n    }\r\n    try {\r\n        _setter.invoke(instance, value);\r\n    } catch (Exception e) {\r\n        // 15-Sep-2015, tatu: How could we get a ref to JsonParser?\r\n        _throwAsIOE(e, value);\r\n    }\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MethodProperty\n  Object\n  Object\n  if (r0 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d MethodProperty: boolean _skipNulls\u003e\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r4 \u003d Method _setter\u003e\n  $r3 \u003d Object)[1]\n  $r3[0] \u003d r0\n  $r4.invoke(r2, $r3)\n  goto B5\n}",
      "B4 {\n  $r5 :\u003d @caughtexception\n  r1._throwAsIOE($r5, r0)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MethodProperty#_throwAsIOE(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
    "methodName": "setAndReturn",
    "signature": "java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d null) {\r\n        if (_skipNulls) {\r\n            return instance;\r\n        }\r\n    }\r\n    try {\r\n        Object result \u003d _setter.invoke(instance, value);\r\n        return (result \u003d\u003d null) ? instance : result;\r\n    } catch (Exception e) {\r\n        // 15-Sep-2015, tatu: How could we get a ref to JsonParser?\r\n        _throwAsIOE(e, value);\r\n        return null;\r\n    }\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3",
      "B3 : If($r5 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MethodProperty\n  Object\n  Object\n  if (r0 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d MethodProperty: boolean _skipNulls\u003e\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r4 \u003d Method _setter\u003e\n  $r3 \u003d Object)[1]\n  $r3[0] \u003d r0\n  $r5 \u003d $r4.invoke(r2, $r3)\n  if ($r5 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r7 \u003d r2\n  goto B6\n}",
      "B5 {\n  $r7 \u003d $r5\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $r6 :\u003d @caughtexception\n  r1._throwAsIOE($r6, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MethodProperty#_throwAsIOE(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider",
    "methodName": "forValue",
    "signature": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider forValue(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (nvl \u003d\u003d null) {\r\n        return NULLER;\r\n    }\r\n    return new NullsConstantProvider(nvl);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d NullsConstantProvider NULLER\u003e\n  return\n}",
      "B2 {\n  $r1 \u003d NullsConstantProvider\n  new NullsConstantProvider(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider",
    "methodName": "isSkipper",
    "signature": "boolean isSkipper(com.fasterxml.jackson.databind.deser.NullValueProvider)",
    "visibility": "public",
    "body": "{\r\n    return (p \u003d\u003d SKIPPER);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NullValueProvider\n  $r1 \u003d NullsConstantProvider SKIPPER\u003e\n  if (r0 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider",
    "methodName": "isNuller",
    "signature": "boolean isNuller(com.fasterxml.jackson.databind.deser.NullValueProvider)",
    "visibility": "public",
    "body": "{\r\n    return (p \u003d\u003d NULLER);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NullValueProvider\n  $r1 \u003d NullsConstantProvider NULLER\u003e\n  if (r0 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty",
    "methodName": "withValueDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty withValueDeserializer(com.fasterxml.jackson.databind.JsonDeserializer)",
    "visibility": "public",
    "body": "{\r\n    if (_valueDeserializer \u003d\u003d deser) {\r\n        return this;\r\n    }\r\n    // 07-May-2019, tatu: As per [databind#2303], must keep VD/NVP in-sync if they were\r\n    NullValueProvider nvp \u003d (_valueDeserializer \u003d\u003d _nullProvider) ? deser : _nullProvider;\r\n    return new ObjectIdReferenceProperty(this, deser, nvp);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2",
      "B2 : If($r4 !\u003d $r3) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ObjectIdReferenceProperty\n  JsonDeserializer\n  $r2 \u003d JsonDeserializer _valueDeserializer\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d JsonDeserializer _valueDeserializer\u003e\n  $r3 \u003d NullValueProvider _nullProvider\u003e\n  if ($r4 !\u003d $r3) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d r1\n  goto B5\n}",
      "B4 {\n  $r6 \u003d NullValueProvider _nullProvider\u003e\n}",
      "B5 {\n  $r5 \u003d ObjectIdReferenceProperty\n  new ObjectIdReferenceProperty(r0, r1, $r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty",
    "methodName": "fixAccess",
    "signature": "void fixAccess(com.fasterxml.jackson.databind.DeserializationConfig)",
    "visibility": "public",
    "body": "{\r\n    if (_forward !\u003d null) {\r\n        _forward.fixAccess(config);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectIdReferenceProperty\n  DeserializationConfig\n  $r1 \u003d SettableBeanProperty _forward\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d SettableBeanProperty _forward\u003e\n  $r3.fixAccess(r2)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty",
    "methodName": "deserializeSetAndReturn",
    "signature": "java.lang.Object deserializeSetAndReturn(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    try {\r\n        return setAndReturn(instance, deserialize(p, ctxt));\r\n    } catch (UnresolvedForwardReference reference) {\r\n        boolean usingIdentityInfo \u003d (_objectIdInfo !\u003d null) || (_valueDeserializer.getObjectIdReader() !\u003d null);\r\n        if (!usingIdentityInfo) {\r\n            throw JsonMappingException.from(p, \"Unresolved forward reference but no identity info\", reference);\r\n        }\r\n        reference.getRoid().appendReferring(new PropertyReferring(this, reference, _type.getRawClass(), instance));\r\n        return null;\r\n    }\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B1 : If($r7 !\u003d null) → B2 | else → B3",
      "B2 : If($r14 \u003d\u003d null) → B3 | else → B4",
      "B5 : If($z0 !\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  ObjectIdReferenceProperty\n  JsonParser\n  DeserializationContext\n  Object\n  $r4 \u003d r0.deserialize(r2, r3)\n  $r5 \u003d r0.setAndReturn(r1, $r4)\n  return\n}",
      "B1 {\n  $r6 :\u003d @caughtexception\n  $r7 \u003d ObjectIdInfo _objectIdInfo\u003e\n  if ($r7 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r13 \u003d JsonDeserializer _valueDeserializer\u003e\n  $r14 \u003d $r13.getObjectIdReader()\n  if ($r14 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $z0 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z0 \u003d 0\n}",
      "B5 {\n  if ($z0 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $r12 \u003d JsonMappingException.from(r2, \"Unresolved forward reference but no identity info\", $r6)\n  throw $r12\n}",
      "B7 {\n  $r11 \u003d $r6.getRoid()\n  $r8 \u003d ObjectIdReferenceProperty$PropertyReferring\n  $r9 \u003d JavaType _type\u003e\n  $r10 \u003d $r9.getRawClass()\n  new ObjectIdReferenceProperty$PropertyReferring(r0, $r6, $r10, r1)\n  $r11.appendReferring($r8)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectIdReferenceProperty#setAndReturn(...2)",
        "body": "{\r\n    return _forward.setAndReturn(instance, value);\r\n}"
      },
      {
        "name": "ObjectIdReferenceProperty#deserialize(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty",
    "methodName": "withValueDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty withValueDeserializer(com.fasterxml.jackson.databind.JsonDeserializer)",
    "visibility": "public",
    "body": "{\r\n    if (_valueDeserializer \u003d\u003d deser) {\r\n        return this;\r\n    }\r\n    // 07-May-2019, tatu: As per [databind#2303], must keep VD/NVP in-sync if they were\r\n    NullValueProvider nvp \u003d (_valueDeserializer \u003d\u003d _nullProvider) ? deser : _nullProvider;\r\n    return new ObjectIdValueProperty(this, deser, nvp);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2",
      "B2 : If($r4 !\u003d $r3) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ObjectIdValueProperty\n  JsonDeserializer\n  $r2 \u003d JsonDeserializer _valueDeserializer\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d JsonDeserializer _valueDeserializer\u003e\n  $r3 \u003d NullValueProvider _nullProvider\u003e\n  if ($r4 !\u003d $r3) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d r1\n  goto B5\n}",
      "B4 {\n  $r6 \u003d NullValueProvider _nullProvider\u003e\n}",
      "B5 {\n  $r5 \u003d ObjectIdValueProperty\n  new ObjectIdValueProperty(r0, r1, $r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty",
    "methodName": "deserializeSetAndReturn",
    "signature": "java.lang.Object deserializeSetAndReturn(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    /* 02-Apr-2015, tatu: Actually, as per [databind#742], let it be;\r\n         *  missing or null id is needed for some cases, such as cases where id\r\n         *  will be generated externally, at a later point, and is not available\r\n         *  quite yet. Typical use case is with DB inserts.\r\n         */\r\n    // note: no null checks (unlike usually); deserializer should fail if one found\r\n    if (p.hasToken(JsonToken.VALUE_NULL)) {\r\n        return null;\r\n    }\r\n    Object id \u003d _valueDeserializer.deserialize(p, ctxt);\r\n    ReadableObjectId roid \u003d ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\r\n    roid.bindItem(instance);\r\n    // also: may need to set a property value as well\r\n    SettableBeanProperty idProp \u003d _objectIdReader.idProperty;\r\n    if (idProp !\u003d null) {\r\n        return idProp.setAndReturn(instance, id);\r\n    }\r\n    return instance;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r13 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ObjectIdValueProperty\n  JsonParser\n  DeserializationContext\n  Object\n  $r1 \u003d JsonToken VALUE_NULL\u003e\n  $z0 \u003d r0.hasToken($r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d JsonDeserializer _valueDeserializer\u003e\n  r5 \u003d $r4.deserialize(r0, r3)\n  $r6 \u003d ObjectIdReader _objectIdReader\u003e\n  $r9 \u003d ObjectIdGenerator generator\u003e\n  $r7 \u003d ObjectIdReader _objectIdReader\u003e\n  $r8 \u003d ObjectIdResolver resolver\u003e\n  r10 \u003d r3.findObjectId(r5, $r9, $r8)\n  r10.bindItem(r11)\n  $r12 \u003d ObjectIdReader _objectIdReader\u003e\n  r13 \u003d SettableBeanProperty idProperty\u003e\n  if (r13 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r14 \u003d r13.setAndReturn(r11, r5)\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty",
    "methodName": "setAndReturn",
    "signature": "java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    SettableBeanProperty idProp \u003d _objectIdReader.idProperty;\r\n    if (idProp \u003d\u003d null) {\r\n        throw new UnsupportedOperationException(\"Should not call set() on ObjectIdProperty that has no SettableBeanProperty\");\r\n    }\r\n    return idProp.setAndReturn(instance, value);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectIdValueProperty\n  Object\n  Object\n  $r1 \u003d ObjectIdReader _objectIdReader\u003e\n  r2 \u003d SettableBeanProperty idProperty\u003e\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d UnsupportedOperationException\n  new UnsupportedOperationException(\"Should not call set() on ObjectIdProperty that has no SettableBeanProperty\")\n  throw $r6\n}",
      "B2 {\n  $r5 \u003d r2.setAndReturn(r3, r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator",
    "methodName": "construct",
    "signature": "com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator construct(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.ValueInstantiator,com.fasterxml.jackson.databind.deser.SettableBeanProperty[],com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap)",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d srcCreatorProps.length;\r\n    SettableBeanProperty[] creatorProps \u003d new SettableBeanProperty[len];\r\n    for (int i \u003d 0; i \u003c len; ++i) {\r\n        SettableBeanProperty prop \u003d srcCreatorProps[i];\r\n        if (!prop.hasValueDeserializer()) {\r\n            // 15-Apr-2020, tatu: [databind#962] Avoid getting deserializer for Inject-only\r\n            //     cases\r\n            if (!prop.isInjectionOnly()) {\r\n                prop \u003d prop.withValueDeserializer(ctxt.findContextualValueDeserializer(prop.getType(), prop));\r\n            }\r\n        }\r\n        creatorProps[i] \u003d prop;\r\n    }\r\n    return new PropertyBasedCreator(ctxt, valueInstantiator, creatorProps, allProperties.isCaseInsensitive(), // 05-Sep-2019, tatu: As per [databind#2378] looks like not all aliases get merged into\r\n    //    `allProperties` so force lookup anyway.\r\n    //                allProperties.hasAliases()\r\n    true);\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B6",
      "B2 : If($z1 !\u003d 0) → B3 | else → B5",
      "B3 : If($z2 !\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  DeserializationContext\n  ValueInstantiator\n  SettableBeanProperty[]\n  BeanPropertyMap\n  i0 \u003d lengthof r0\n  r1 \u003d SettableBeanProperty)[i0]\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B6\n}",
      "B2 {\n  r8 \u003d r0[i1]\n  $z1 \u003d r8.hasValueDeserializer()\n  if ($z1 !\u003d 0) goto B3 else B5\n}",
      "B3 {\n  $z2 \u003d r8.isInjectionOnly()\n  if ($z2 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r6 \u003d r8.getType()\n  $r7 \u003d r3.findContextualValueDeserializer($r6, r8)\n  r8 \u003d r8.withValueDeserializer($r7)\n}",
      "B5 {\n  r1[i1] \u003d r8\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B6 {\n  $r2 \u003d PropertyBasedCreator\n  $z0 \u003d r5.isCaseInsensitive()\n  new PropertyBasedCreator(r3, r4, r1, $z0, 1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator",
    "methodName": "construct",
    "signature": "com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator construct(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.ValueInstantiator,com.fasterxml.jackson.databind.deser.SettableBeanProperty[],boolean)",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d srcCreatorProps.length;\r\n    SettableBeanProperty[] creatorProps \u003d new SettableBeanProperty[len];\r\n    for (int i \u003d 0; i \u003c len; ++i) {\r\n        SettableBeanProperty prop \u003d srcCreatorProps[i];\r\n        if (!prop.hasValueDeserializer()) {\r\n            prop \u003d prop.withValueDeserializer(ctxt.findContextualValueDeserializer(prop.getType(), prop));\r\n        }\r\n        creatorProps[i] \u003d prop;\r\n    }\r\n    return new PropertyBasedCreator(ctxt, valueInstantiator, creatorProps, caseInsensitive, false);\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B5",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DeserializationContext\n  ValueInstantiator\n  SettableBeanProperty[]\n  z0 :\u003d @parameter3: boolean\n  i0 \u003d lengthof r0\n  r1 \u003d SettableBeanProperty)[i0]\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B5\n}",
      "B2 {\n  r7 \u003d r0[i1]\n  $z1 \u003d r7.hasValueDeserializer()\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d r7.getType()\n  $r6 \u003d r3.findContextualValueDeserializer($r5, r7)\n  r7 \u003d r7.withValueDeserializer($r6)\n}",
      "B4 {\n  r1[i1] \u003d r7\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B5 {\n  $r2 \u003d PropertyBasedCreator\n  new PropertyBasedCreator(r3, r4, r1, z0, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator",
    "methodName": "renameAll",
    "signature": "com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator renameAll(com.fasterxml.jackson.databind.util.NameTransformer)",
    "visibility": "public",
    "body": "{\r\n    if (transformer \u003d\u003d null || (transformer \u003d\u003d NameTransformer.NOP)) {\r\n        return this;\r\n    }\r\n    final int len \u003d _allProperties.length;\r\n    HashMap\u003cString, SettableBeanProperty\u003e newLookup \u003d new HashMap\u003c\u003e(_propertyLookup);\r\n    List\u003cSettableBeanProperty\u003e newProps \u003d new ArrayList\u003c\u003e(len);\r\n    for (SettableBeanProperty prop : _allProperties) {\r\n        if (prop \u003d\u003d null) {\r\n            newProps.add(null);\r\n            continue;\r\n        }\r\n        SettableBeanProperty renamedProperty \u003d prop.unwrapped(transformer);\r\n        String oldName \u003d prop.getName();\r\n        String newName \u003d renamedProperty.getName();\r\n        newProps.add(renamedProperty);\r\n        if (!oldName.equals(newName) \u0026\u0026 newLookup.containsKey(oldName)) {\r\n            newLookup.remove(oldName);\r\n            newLookup.put(newName, renamedProperty);\r\n        }\r\n    }\r\n    return new PropertyBasedCreator(this, newLookup, newProps.toArray(new SettableBeanProperty[0]));\r\n}",
    "nodes": 12,
    "edges": 16,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r0 !\u003d $r2) → B2 | else → B3",
      "B4 : If(i2 \u003e\u003d i1) → B5 | else → B11",
      "B5 : If(r12 !\u003d null) → B6 | else → B7",
      "B7 : If($z0 !\u003d 0) → B8 | else → B10",
      "B8 : If($z1 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  PropertyBasedCreator\n  NameTransformer\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d NameTransformer NOP\u003e\n  if (r0 !\u003d $r2) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r3 \u003d SettableBeanProperty[] _allProperties\u003e\n  i0 \u003d lengthof $r3\n  $r4 \u003d HashMap\n  $r5 \u003d HashMap _propertyLookup\u003e\n  new HashMap($r5)\n  $r6 \u003d ArrayList\n  new ArrayList(i0)\n  r7 \u003d SettableBeanProperty[] _allProperties\u003e\n  i1 \u003d lengthof r7\n  i2 \u003d 0\n}",
      "B4 {\n  if (i2 \u003e\u003d i1) goto B5 else B11\n}",
      "B5 {\n  r12 \u003d r7[i2]\n  if (r12 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r6.add(null)\n  goto B10\n}",
      "B7 {\n  r13 \u003d r12.unwrapped(r0)\n  r14 \u003d r12.getName()\n  r15 \u003d r13.getName()\n  $r6.add(r13)\n  $z0 \u003d r14.equals(r15)\n  if ($z0 !\u003d 0) goto B8 else B10\n}",
      "B8 {\n  $z1 \u003d $r4.containsKey(r14)\n  if ($z1 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r4.remove(r14)\n  $r4.put(r15, r13)\n}",
      "B10 {\n  i2 \u003d i2 + 1\n  goto B4\n}",
      "B11 {\n  $r8 \u003d PropertyBasedCreator\n  $r9 \u003d SettableBeanProperty)[0]\n  $r10 \u003d $r6.toArray($r9)\n  $r11 \u003d SettableBeanProperty[]) $r10\n  new PropertyBasedCreator(r1, $r4, $r11)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B11",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B4",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator",
    "methodName": "findCreatorProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty findCreatorProperty(int)",
    "visibility": "public",
    "body": "{\r\n    for (SettableBeanProperty prop : _propertyLookup.values()) {\r\n        if (prop.getPropertyIndex() \u003d\u003d propertyIndex) {\r\n            return prop;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($i1 !\u003d i0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  PropertyBasedCreator\n  i0 :\u003d @parameter0: int\n  $r1 \u003d HashMap _propertyLookup\u003e\n  $r2 \u003d $r1.values()\n  r3 \u003d $r2.iterator()\n}",
      "B1 {\n  $z0 \u003d r3.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r4 \u003d r3.next()\n  r5 \u003d SettableBeanProperty) $r4\n  $i1 \u003d r5.getPropertyIndex()\n  if ($i1 !\u003d i0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator",
    "methodName": "build",
    "signature": "java.lang.Object build(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer)",
    "visibility": "public",
    "body": "{\r\n    Object bean \u003d _valueInstantiator.createFromObjectWith(ctxt, _allProperties, buffer);\r\n    // returning null isn\u0027t quite legal, but let\u0027s let caller deal with that\r\n    if (bean !\u003d null) {\r\n        // Object Id to handle?\r\n        bean \u003d buffer.handleIdValue(ctxt, bean);\r\n        // Anything buffered?\r\n        for (PropertyValue pv \u003d buffer.buffered(); pv !\u003d null; pv \u003d pv.next) {\r\n            pv.assign(bean);\r\n        }\r\n    }\r\n    return bean;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r5 \u003d\u003d null) → B1 | else → B4",
      "B2 : If(r6 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  PropertyBasedCreator\n  DeserializationContext\n  PropertyValueBuffer\n  $r4 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r3 \u003d SettableBeanProperty[] _allProperties\u003e\n  r5 \u003d $r4.createFromObjectWith(r1, $r3, r2)\n  if (r5 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  r5 \u003d r2.handleIdValue(r1, r5)\n  r6 \u003d r2.buffered()\n}",
      "B2 {\n  if (r6 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  r6.assign(r5)\n  r6 \u003d PropertyValue next\u003e\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.PropertyBasedObjectIdGenerator",
    "methodName": "forScope",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.ObjectIdGenerator forScope(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return (scope \u003d\u003d _scope) ? this : new PropertyBasedObjectIdGenerator(scope);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PropertyBasedObjectIdGenerator\n  Class\n  $r2 \u003d Class _scope\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r3 \u003d PropertyBasedObjectIdGenerator\n  new PropertyBasedObjectIdGenerator(r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.PropertyBasedObjectIdGenerator",
    "methodName": "key",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.ObjectIdGenerator$IdKey key(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (key \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // should we use general type for all; or type of property itself?\r\n    return new IdKey(getClass(), _scope, key);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PropertyBasedObjectIdGenerator\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d ObjectIdGenerator$IdKey\n  $r4 \u003d r2.getClass()\n  $r3 \u003d Class _scope\u003e\n  new ObjectIdGenerator$IdKey($r4, $r3, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PropertyBasedObjectIdGenerator#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer",
    "methodName": "hasParameter",
    "signature": "boolean hasParameter(com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "visibility": "public",
    "body": "{\r\n    final int ix \u003d prop.getCreatorIndex();\r\n    if (_paramsSeenBig \u003d\u003d null) {\r\n        if (((_paramsSeen \u003e\u003e ix) \u0026 1) \u003d\u003d 1) {\r\n            return true;\r\n        }\r\n    } else {\r\n        if (_paramsSeenBig.get(ix)) {\r\n            return true;\r\n        }\r\n    }\r\n    // 28-Sep-2024 : [databind#4508] Support any-setter flowing through creator\r\n    if (_anyParamSetter !\u003d null) {\r\n        if (ix \u003d\u003d _anyParamSetter.getParameterIndex()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B3",
      "B1 : If($i4 !\u003d 1) → B2 | else → B5",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5",
      "B5 : If($r4 \u003d\u003d null) → B6 | else → B8",
      "B6 : If(i0 !\u003d $i1) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  PropertyValueBuffer\n  SettableBeanProperty\n  i0 \u003d r0.getCreatorIndex()\n  $r2 \u003d BitSet _paramsSeenBig\u003e\n  if ($r2 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $i2 \u003d PropertyValueBuffer: int _paramsSeen\u003e\n  $i3 \u003d $i2 \u003e\u003e i0\n  $i4 \u003d $i3 \u0026 1\n  if ($i4 !\u003d 1) goto B2 else B5\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r3 \u003d BitSet _paramsSeenBig\u003e\n  $z0 \u003d $r3.get(i0)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r4 \u003d SettableAnyProperty _anyParamSetter\u003e\n  if ($r4 \u003d\u003d null) goto B6 else B8\n}",
      "B6 {\n  $r5 \u003d SettableAnyProperty _anyParamSetter\u003e\n  $i1 \u003d $r5.getParameterIndex()\n  if (i0 !\u003d $i1) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer",
    "methodName": "getParameter",
    "signature": "java.lang.Object getParameter(com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "visibility": "public",
    "body": "{\r\n    Object value;\r\n    if (hasParameter(prop)) {\r\n        value \u003d _creatorParameters[prop.getCreatorIndex()];\r\n    } else {\r\n        value \u003d _creatorParameters[prop.getCreatorIndex()] \u003d _findMissing(prop);\r\n    }\r\n    // 28-Sep-2024 : [databind#4508] Support any-setter flowing through creator\r\n    if ((value \u003d\u003d null) \u0026\u0026 (_anyParamSetter !\u003d null) \u0026\u0026 (prop.getCreatorIndex() \u003d\u003d _anyParamSetter.getParameterIndex())) {\r\n        value \u003d _createAndSetAnySetterValue();\r\n    }\r\n    if (value \u003d\u003d null \u0026\u0026 _context.isEnabled(DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES)) {\r\n        return _context.reportInputMismatch(prop, \"Null value for creator property \u0027%s\u0027 (index %d); `DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES` enabled\", prop.getName(), prop.getCreatorIndex());\r\n    }\r\n    return value;\r\n}",
    "nodes": 11,
    "edges": 15,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If(r14 !\u003d null) → B4 | else → B7",
      "B4 : If($r11 \u003d\u003d null) → B5 | else → B7",
      "B5 : If($i3 !\u003d $i2) → B6 | else → B7",
      "B7 : If(r14 !\u003d null) → B8 | else → B10",
      "B8 : If($z1 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  PropertyValueBuffer\n  SettableBeanProperty\n  $z0 \u003d r0.hasParameter(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r13 \u003d Object[] _creatorParameters\u003e\n  $i4 \u003d r1.getCreatorIndex()\n  r14 \u003d $r13[$i4]\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Object[] _creatorParameters\u003e\n  $i0 \u003d r1.getCreatorIndex()\n  $r3 \u003d r0._findMissing(r1)\n  $r2[$i0] \u003d $r3\n  r14 \u003d $r3\n}",
      "B3 {\n  if (r14 !\u003d null) goto B4 else B7\n}",
      "B4 {\n  $r11 \u003d SettableAnyProperty _anyParamSetter\u003e\n  if ($r11 \u003d\u003d null) goto B5 else B7\n}",
      "B5 {\n  $i3 \u003d r1.getCreatorIndex()\n  $r12 \u003d SettableAnyProperty _anyParamSetter\u003e\n  $i2 \u003d $r12.getParameterIndex()\n  if ($i3 !\u003d $i2) goto B6 else B7\n}",
      "B6 {\n  r14 \u003d r0._createAndSetAnySetterValue()\n}",
      "B7 {\n  if (r14 !\u003d null) goto B8 else B10\n}",
      "B8 {\n  $r5 \u003d DeserializationContext _context\u003e\n  $r4 \u003d DeserializationFeature FAIL_ON_NULL_CREATOR_PROPERTIES\u003e\n  $z1 \u003d $r5.isEnabled($r4)\n  if ($z1 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r7 \u003d DeserializationContext _context\u003e\n  $r6 \u003d Object)[2]\n  $r8 \u003d r1.getName()\n  $r6[0] \u003d $r8\n  $i1 \u003d r1.getCreatorIndex()\n  $r9 \u003d Integer.valueOf($i1)\n  $r6[1] \u003d $r9\n  $r10 \u003d $r7.reportInputMismatch(r1, \"Null value for creator property \\\u0027%s\\\u0027 (index %d); `DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES` enabled\", $r6)\n  return\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PropertyValueBuffer#hasParameter(...1)",
        "body": "{\r\n    final int ix \u003d prop.getCreatorIndex();\r\n    if (_paramsSeenBig \u003d\u003d null) {\r\n        if (((_paramsSeen \u003e\u003e ix) \u0026 1) \u003d\u003d 1) {\r\n            return true;\r\n        }\r\n    } else {\r\n        if (_paramsSeenBig.get(ix)) {\r\n            return true;\r\n        }\r\n    }\r\n    // 28-Sep-2024 : [databind#4508] Support any-setter flowing through creator\r\n    if (_anyParamSetter !\u003d null) {\r\n        if (ix \u003d\u003d _anyParamSetter.getParameterIndex()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      },
      {
        "name": "PropertyValueBuffer#_createAndSetAnySetterValue(...0)",
        "body": "{\r\n    Object anySetterParameterObject \u003d _anyParamSetter.createParameterObject();\r\n    for (PropertyValue pv \u003d _anyParamBuffered; pv !\u003d null; pv \u003d pv.next) {\r\n        try {\r\n            pv.setValue(anySetterParameterObject);\r\n            // Since one of callers only exposes JsonMappingException, but pv.setValue()\r\n            // nominally leaks IOException, need to do this unfortunate conversion\r\n        } catch (JsonMappingException e) {\r\n            throw e;\r\n        } catch (IOException e) {\r\n            throw JsonMappingException.fromUnexpectedIOE(e);\r\n        }\r\n    }\r\n    return anySetterParameterObject;\r\n}"
      },
      {
        "name": "PropertyValueBuffer#_findMissing(...1)",
        "body": "{\r\n    // 08-Jun-2024: [databind#562] AnySetters are bit special\r\n    if (_anyParamSetter !\u003d null) {\r\n        if (prop.getCreatorIndex() \u003d\u003d _anyParamSetter.getParameterIndex()) {\r\n            // Ok if anything buffered\r\n            if (_anyParamBuffered !\u003d null) {\r\n                // ... will be assigned by caller later on, for now return null\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    // First: do we have injectable value?\r\n    Object injectableValueId \u003d prop.getInjectableValueId();\r\n    if (injectableValueId !\u003d null) {\r\n        return _context.findInjectableValue(prop.getInjectableValueId(), prop, null);\r\n    }\r\n    // Second: required?\r\n    if (prop.isRequired()) {\r\n        _context.reportInputMismatch(prop, \"Missing required creator property \u0027%s\u0027 (index %d)\", prop.getName(), prop.getCreatorIndex());\r\n    }\r\n    if (_context.isEnabled(DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES)) {\r\n        _context.reportInputMismatch(prop, \"Missing creator property \u0027%s\u0027 (index %d); `DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES` enabled\", prop.getName(), prop.getCreatorIndex());\r\n    }\r\n    try {\r\n        // Third: NullValueProvider? (22-Sep-2019, [databind#2458])\r\n        // 08-Aug-2021, tatu: consider [databind#3214]; not null but \"absent\" value...\r\n        Object absentValue \u003d prop.getNullValueProvider().getAbsentValue(_context);\r\n        if (absentValue !\u003d null) {\r\n            return absentValue;\r\n        }\r\n        // Fourth: default value\r\n        JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\r\n        return deser.getAbsentValue(_context);\r\n    } catch (DatabindException e) {\r\n        // [databind#2101]: Include property name, if we have it\r\n        AnnotatedMember member \u003d prop.getMember();\r\n        if (member !\u003d null) {\r\n            e.prependPath(member.getDeclaringClass(), prop.getName());\r\n        }\r\n        throw e;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer",
    "methodName": "getParameters",
    "signature": "java.lang.Object[] getParameters(com.fasterxml.jackson.databind.deser.SettableBeanProperty[])",
    "visibility": "public",
    "body": "{\r\n    // quick check to see if anything else is needed\r\n    if (_paramsNeeded \u003e 0) {\r\n        if (_paramsSeenBig \u003d\u003d null) {\r\n            int mask \u003d _paramsSeen;\r\n            // not optimal, could use `Integer.trailingZeroes()`, but for now should not\r\n            // really matter for common cases\r\n            for (int ix \u003d 0, len \u003d _creatorParameters.length; ix \u003c len; ++ix, mask \u003e\u003e\u003d 1) {\r\n                if ((mask \u0026 1) \u003d\u003d 0) {\r\n                    _creatorParameters[ix] \u003d _findMissing(props[ix]);\r\n                }\r\n            }\r\n        } else {\r\n            final int len \u003d _creatorParameters.length;\r\n            for (int ix \u003d 0; (ix \u003d _paramsSeenBig.nextClearBit(ix)) \u003c len; ++ix) {\r\n                _creatorParameters[ix] \u003d _findMissing(props[ix]);\r\n            }\r\n        }\r\n    }\r\n    // [databind#562] since 2.18 : Respect @JsonAnySetter in @JsonCreator\r\n    if (_anyParamSetter !\u003d null) {\r\n        _creatorParameters[_anyParamSetter.getParameterIndex()] \u003d _createAndSetAnySetterValue();\r\n    }\r\n    if (_context.isEnabled(DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES)) {\r\n        for (int ix \u003d 0; ix \u003c props.length; ++ix) {\r\n            if (_creatorParameters[ix] \u003d\u003d null) {\r\n                SettableBeanProperty prop \u003d props[ix];\r\n                _context.reportInputMismatch(prop, \"Null value for creator property \u0027%s\u0027 (index %d); `DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES` enabled\", prop.getName(), props[ix].getCreatorIndex());\r\n            }\r\n        }\r\n    }\r\n    return _creatorParameters;\r\n}",
    "nodes": 20,
    "edges": 28,
    "cc": 10,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B11",
      "B1 : If($r15 !\u003d null) → B2 | else → B8",
      "B3 : If(i8 \u003e\u003d i5) → B4 | else → B7",
      "B4 : If($i6 !\u003d 0) → B5 | else → B6",
      "B9 : If($i4 \u003e\u003d i9) → B10 | else → B11",
      "B11 : If($r25 \u003d\u003d null) → B12 | else → B13",
      "B13 : If($z0 \u003d\u003d false) → B14 | else → B19",
      "B15 : If(i11 \u003e\u003d $i1) → B16 | else → B19",
      "B16 : If($r6 !\u003d null) → B17 | else → B18"
    ],
    "blockList": [
      "B0 {\n  PropertyValueBuffer\n  SettableBeanProperty[]\n  $i0 \u003d PropertyValueBuffer: int _paramsNeeded\u003e\n  if ($i0 \u003c\u003d 0) goto B1 else B11\n}",
      "B1 {\n  $r15 \u003d BitSet _paramsSeenBig\u003e\n  if ($r15 !\u003d null) goto B2 else B8\n}",
      "B2 {\n  i7 \u003d PropertyValueBuffer: int _paramsSeen\u003e\n  i8 \u003d 0\n  $r21 \u003d Object[] _creatorParameters\u003e\n  i5 \u003d lengthof $r21\n}",
      "B3 {\n  if (i8 \u003e\u003d i5) goto B4 else B7\n}",
      "B4 {\n  $i6 \u003d i7 \u0026 1\n  if ($i6 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r23 \u003d Object[] _creatorParameters\u003e\n  $r22 \u003d r4[i8]\n  $r24 \u003d r0._findMissing($r22)\n  $r23[i8] \u003d $r24\n}",
      "B6 {\n  i8 \u003d i8 + 1\n  i7 \u003d i7 \u003e\u003e 1\n  goto B3\n}",
      "B7 {\n  goto B11\n}",
      "B8 {\n  $r16 \u003d Object[] _creatorParameters\u003e\n  i9 \u003d lengthof $r16\n  i10 \u003d 0\n}",
      "B9 {\n  $r17 \u003d BitSet _paramsSeenBig\u003e\n  $i4 \u003d $r17.nextClearBit(i10)\n  if ($i4 \u003e\u003d i9) goto B10 else B11\n}",
      "B10 {\n  $r19 \u003d Object[] _creatorParameters\u003e\n  $r18 \u003d r4[$i4]\n  $r20 \u003d r0._findMissing($r18)\n  $r19[$i4] \u003d $r20\n  i10 \u003d $i4 + 1\n  goto B9\n}",
      "B11 {\n  $r25 \u003d SettableAnyProperty _anyParamSetter\u003e\n  if ($r25 \u003d\u003d null) goto B12 else B13\n}",
      "B12 {\n  $r13 \u003d Object[] _creatorParameters\u003e\n  $r12 \u003d SettableAnyProperty _anyParamSetter\u003e\n  $i3 \u003d $r12.getParameterIndex()\n  $r14 \u003d r0._createAndSetAnySetterValue()\n  $r13[$i3] \u003d $r14\n}",
      "B13 {\n  $r2 \u003d DeserializationContext _context\u003e\n  $r1 \u003d DeserializationFeature FAIL_ON_NULL_CREATOR_PROPERTIES\u003e\n  $z0 \u003d $r2.isEnabled($r1)\n  if ($z0 \u003d\u003d false) goto B14 else B19\n}",
      "B14 {\n  i11 \u003d 0\n}",
      "B15 {\n  $i1 \u003d lengthof r4\n  if (i11 \u003e\u003d $i1) goto B16 else B19\n}",
      "B16 {\n  $r5 \u003d Object[] _creatorParameters\u003e\n  $r6 \u003d $r5[i11]\n  if ($r6 !\u003d null) goto B17 else B18\n}",
      "B17 {\n  r26 \u003d r4[i11]\n  $r8 \u003d DeserializationContext _context\u003e\n  $r7 \u003d Object)[2]\n  $r9 \u003d r26.getName()\n  $r7[0] \u003d $r9\n  $r10 \u003d r4[i11]\n  $i2 \u003d $r10.getCreatorIndex()\n  $r11 \u003d Integer.valueOf($i2)\n  $r7[1] \u003d $r11\n  $r8.reportInputMismatch(r26, \"Null value for creator property \\\u0027%s\\\u0027 (index %d); `DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES` enabled\", $r7)\n}",
      "B18 {\n  i11 \u003d i11 + 1\n  goto B15\n}",
      "B19 {\n  $r3 \u003d Object[] _creatorParameters\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B11",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B3",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B9",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B19",
      "B14 --\u003e B15",
      "B15 --\u003e B16",
      "B15 --\u003e B19",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e B15",
      "B19 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PropertyValueBuffer#_createAndSetAnySetterValue(...0)",
        "body": "{\r\n    Object anySetterParameterObject \u003d _anyParamSetter.createParameterObject();\r\n    for (PropertyValue pv \u003d _anyParamBuffered; pv !\u003d null; pv \u003d pv.next) {\r\n        try {\r\n            pv.setValue(anySetterParameterObject);\r\n            // Since one of callers only exposes JsonMappingException, but pv.setValue()\r\n            // nominally leaks IOException, need to do this unfortunate conversion\r\n        } catch (JsonMappingException e) {\r\n            throw e;\r\n        } catch (IOException e) {\r\n            throw JsonMappingException.fromUnexpectedIOE(e);\r\n        }\r\n    }\r\n    return anySetterParameterObject;\r\n}"
      },
      {
        "name": "PropertyValueBuffer#_findMissing(...1)",
        "body": "{\r\n    // 08-Jun-2024: [databind#562] AnySetters are bit special\r\n    if (_anyParamSetter !\u003d null) {\r\n        if (prop.getCreatorIndex() \u003d\u003d _anyParamSetter.getParameterIndex()) {\r\n            // Ok if anything buffered\r\n            if (_anyParamBuffered !\u003d null) {\r\n                // ... will be assigned by caller later on, for now return null\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    // First: do we have injectable value?\r\n    Object injectableValueId \u003d prop.getInjectableValueId();\r\n    if (injectableValueId !\u003d null) {\r\n        return _context.findInjectableValue(prop.getInjectableValueId(), prop, null);\r\n    }\r\n    // Second: required?\r\n    if (prop.isRequired()) {\r\n        _context.reportInputMismatch(prop, \"Missing required creator property \u0027%s\u0027 (index %d)\", prop.getName(), prop.getCreatorIndex());\r\n    }\r\n    if (_context.isEnabled(DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES)) {\r\n        _context.reportInputMismatch(prop, \"Missing creator property \u0027%s\u0027 (index %d); `DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES` enabled\", prop.getName(), prop.getCreatorIndex());\r\n    }\r\n    try {\r\n        // Third: NullValueProvider? (22-Sep-2019, [databind#2458])\r\n        // 08-Aug-2021, tatu: consider [databind#3214]; not null but \"absent\" value...\r\n        Object absentValue \u003d prop.getNullValueProvider().getAbsentValue(_context);\r\n        if (absentValue !\u003d null) {\r\n            return absentValue;\r\n        }\r\n        // Fourth: default value\r\n        JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\r\n        return deser.getAbsentValue(_context);\r\n    } catch (DatabindException e) {\r\n        // [databind#2101]: Include property name, if we have it\r\n        AnnotatedMember member \u003d prop.getMember();\r\n        if (member !\u003d null) {\r\n            e.prependPath(member.getDeclaringClass(), prop.getName());\r\n        }\r\n        throw e;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer",
    "methodName": "readIdProperty",
    "signature": "boolean readIdProperty(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if ((_objectIdReader !\u003d null) \u0026\u0026 propName.equals(_objectIdReader.propertyName.getSimpleName())) {\r\n        _idValue \u003d _objectIdReader.readObjectReference(_parser, _context);\r\n        return true;\r\n    }\r\n    return false;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  PropertyValueBuffer\n  String\n  $r1 \u003d ObjectIdReader _objectIdReader\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r3 \u003d ObjectIdReader _objectIdReader\u003e\n  $r4 \u003d PropertyName propertyName\u003e\n  $r5 \u003d $r4.getSimpleName()\n  $z0 \u003d r2.equals($r5)\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r8 \u003d ObjectIdReader _objectIdReader\u003e\n  $r7 \u003d JsonParser _parser\u003e\n  $r6 \u003d DeserializationContext _context\u003e\n  $r9 \u003d $r8.readObjectReference($r7, $r6)\n  Object _idValue\u003e \u003d $r9\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer",
    "methodName": "handleIdValue",
    "signature": "java.lang.Object handleIdValue(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (_objectIdReader !\u003d null) {\r\n        if (_idValue !\u003d null) {\r\n            ReadableObjectId roid \u003d ctxt.findObjectId(_idValue, _objectIdReader.generator, _objectIdReader.resolver);\r\n            roid.bindItem(bean);\r\n            // also: may need to set a property value as well\r\n            SettableBeanProperty idProp \u003d _objectIdReader.idProperty;\r\n            if (idProp !\u003d null) {\r\n                return idProp.setAndReturn(bean, _idValue);\r\n            }\r\n        } else {\r\n            // 07-Jun-2016, tatu: Trying to improve error messaging here...\r\n            ctxt.reportUnresolvedObjectId(_objectIdReader, bean);\r\n        }\r\n    }\r\n    return bean;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B6",
      "B1 : If($r3 \u003d\u003d null) → B2 | else → B5",
      "B2 : If(r13 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  PropertyValueBuffer\n  DeserializationContext\n  Object\n  $r1 \u003d ObjectIdReader _objectIdReader\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  $r3 \u003d Object _idValue\u003e\n  if ($r3 \u003d\u003d null) goto B2 else B5\n}",
      "B2 {\n  $r10 \u003d Object _idValue\u003e\n  $r6 \u003d ObjectIdReader _objectIdReader\u003e\n  $r9 \u003d ObjectIdGenerator generator\u003e\n  $r7 \u003d ObjectIdReader _objectIdReader\u003e\n  $r8 \u003d ObjectIdResolver resolver\u003e\n  r11 \u003d r4.findObjectId($r10, $r9, $r8)\n  r11.bindItem(r2)\n  $r12 \u003d ObjectIdReader _objectIdReader\u003e\n  r13 \u003d SettableBeanProperty idProperty\u003e\n  if (r13 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r14 \u003d Object _idValue\u003e\n  $r15 \u003d r13.setAndReturn(r2, $r14)\n  return\n}",
      "B4 {\n  goto B6\n}",
      "B5 {\n  $r5 \u003d ObjectIdReader _objectIdReader\u003e\n  r4.reportUnresolvedObjectId($r5, r2)\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer",
    "methodName": "isComplete",
    "signature": "boolean isComplete()",
    "visibility": "public",
    "body": "{\r\n    return _paramsNeeded \u003c\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003e 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PropertyValueBuffer\n  $i0 \u003d PropertyValueBuffer: int _paramsNeeded\u003e\n  if ($i0 \u003e 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer",
    "methodName": "assignParameter",
    "signature": "boolean assignParameter(com.fasterxml.jackson.databind.deser.SettableBeanProperty,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final int ix \u003d prop.getCreatorIndex();\r\n    _creatorParameters[ix] \u003d value;\r\n    if (_paramsSeenBig \u003d\u003d null) {\r\n        int old \u003d _paramsSeen;\r\n        int newValue \u003d (old | (1 \u003c\u003c ix));\r\n        if (old !\u003d newValue) {\r\n            _paramsSeen \u003d newValue;\r\n            if (--_paramsNeeded \u003c\u003d 0) {\r\n                // 29-Nov-2016, tatu: But! May still require Object Id value\r\n                return (_objectIdReader \u003d\u003d null) || (_idValue !\u003d null);\r\n            }\r\n        }\r\n    } else {\r\n        if (!_paramsSeenBig.get(ix)) {\r\n            _paramsSeenBig.set(ix);\r\n            if (--_paramsNeeded \u003c\u003d 0) {\r\n                // 29-Nov-2016, tatu: But! May still require Object Id value\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 12,
    "edges": 16,
    "cc": 6,
    "flowSummary": [
      "B0 : If($r4 !\u003d null) → B1 | else → B9",
      "B1 : If(i3 \u003d\u003d i5) → B2 | else → B8",
      "B2 : If($i7 \u003e 0) → B3 | else → B8",
      "B3 : If($r7 \u003d\u003d null) → B4 | else → B5",
      "B4 : If($r8 \u003d\u003d null) → B5 | else → B6",
      "B9 : If($z0 !\u003d 0) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  PropertyValueBuffer\n  SettableBeanProperty\n  Object\n  i0 \u003d r0.getCreatorIndex()\n  $r3 \u003d Object[] _creatorParameters\u003e\n  $r3[i0] \u003d r2\n  $r4 \u003d BitSet _paramsSeenBig\u003e\n  if ($r4 !\u003d null) goto B1 else B9\n}",
      "B1 {\n  i3 \u003d PropertyValueBuffer: int _paramsSeen\u003e\n  $i4 \u003d 1 \u003c\u003c i0\n  i5 \u003d i3 | $i4\n  if (i3 \u003d\u003d i5) goto B2 else B8\n}",
      "B2 {\n  PropertyValueBuffer: int _paramsSeen\u003e \u003d i5\n  $i6 \u003d PropertyValueBuffer: int _paramsNeeded\u003e\n  $i7 \u003d $i6 - 1\n  PropertyValueBuffer: int _paramsNeeded\u003e \u003d $i7\n  if ($i7 \u003e 0) goto B3 else B8\n}",
      "B3 {\n  $r7 \u003d ObjectIdReader _objectIdReader\u003e\n  if ($r7 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r8 \u003d Object _idValue\u003e\n  if ($r8 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  $z1 \u003d 1\n  goto B7\n}",
      "B6 {\n  $z1 \u003d 0\n}",
      "B7 {\n  return\n}",
      "B8 {\n  goto B11\n}",
      "B9 {\n  $r5 \u003d BitSet _paramsSeenBig\u003e\n  $z0 \u003d $r5.get(i0)\n  if ($z0 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  $r6 \u003d BitSet _paramsSeenBig\u003e\n  $r6.set(i0)\n  $i1 \u003d PropertyValueBuffer: int _paramsNeeded\u003e\n  $i2 \u003d $i1 - 1\n  PropertyValueBuffer: int _paramsNeeded\u003e \u003d $i2\n  if ($i2 \u003e 0) …\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B9",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B2 --\u003e B8",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.ReadableObjectId",
    "methodName": "appendReferring",
    "signature": "void appendReferring(com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ReadableObjectId\n  ReadableObjectId$Referring\n  $r1 \u003d LinkedList _referringProperties\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d LinkedList\n  new LinkedList()\n  LinkedList _referringProperties\u003e \u003d $r4\n}",
      "B2 {\n  $r3 \u003d LinkedList _referringProperties\u003e\n  $r3.add(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.ReadableObjectId",
    "methodName": "bindItem",
    "signature": "void bindItem(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    _resolver.bindItem(_key, ob);\r\n    _item \u003d ob;\r\n    Object id \u003d _key.key;\r\n    if (_referringProperties !\u003d null) {\r\n        Iterator\u003cReferring\u003e it \u003d _referringProperties.iterator();\r\n        _referringProperties \u003d null;\r\n        while (it.hasNext()) {\r\n            it.next().handleResolvedForwardReference(id, ob);\r\n        }\r\n    }\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r6 \u003d\u003d null) → B1 | else → B4",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ReadableObjectId\n  Object\n  $r3 \u003d ObjectIdResolver _resolver\u003e\n  $r2 \u003d ObjectIdGenerator$IdKey _key\u003e\n  $r3.bindItem($r2, r1)\n  Object _item\u003e \u003d r1\n  $r4 \u003d ObjectIdGenerator$IdKey _key\u003e\n  r5 \u003d Object key\u003e\n  $r6 \u003d LinkedList _referringProperties\u003e\n  if ($r6 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r7 \u003d LinkedList _referringProperties\u003e\n  r8 \u003d $r7.iterator()\n  LinkedList _referringProperties\u003e \u003d null\n}",
      "B2 {\n  $z0 \u003d r8.hasNext()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r9 \u003d r8.next()\n  $r10 \u003d ReadableObjectId$Referring) $r9\n  $r10.handleResolvedForwardReference(r5, r1)\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.ReadableObjectId",
    "methodName": "hasReferringProperties",
    "signature": "boolean hasReferringProperties()",
    "visibility": "public",
    "body": "{\r\n    return (_referringProperties !\u003d null) \u0026\u0026 !_referringProperties.isEmpty();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ReadableObjectId\n  $r1 \u003d LinkedList _referringProperties\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d LinkedList _referringProperties\u003e\n  $z0 \u003d $r2.isEmpty()\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.ReadableObjectId",
    "methodName": "referringProperties",
    "signature": "java.util.Iterator referringProperties()",
    "visibility": "public",
    "body": "{\r\n    if (_referringProperties \u003d\u003d null) {\r\n        return Collections.\u003cReferring\u003eemptyList().iterator();\r\n    }\r\n    return _referringProperties.iterator();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ReadableObjectId\n  $r1 \u003d LinkedList _referringProperties\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d Collections.emptyList()\n  $r5 \u003d $r4.iterator()\n  return\n}",
      "B2 {\n  $r2 \u003d LinkedList _referringProperties\u003e\n  $r3 \u003d $r2.iterator()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.SetterlessProperty",
    "methodName": "withValueDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty withValueDeserializer(com.fasterxml.jackson.databind.JsonDeserializer)",
    "visibility": "public",
    "body": "{\r\n    if (_valueDeserializer \u003d\u003d deser) {\r\n        return this;\r\n    }\r\n    // 07-May-2019, tatu: As per [databind#2303], must keep VD/NVP in-sync if they were\r\n    NullValueProvider nvp \u003d (_valueDeserializer \u003d\u003d _nullProvider) ? deser : _nullProvider;\r\n    return new SetterlessProperty(this, deser, nvp);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2",
      "B2 : If($r4 !\u003d $r3) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  SetterlessProperty\n  JsonDeserializer\n  $r2 \u003d JsonDeserializer _valueDeserializer\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d JsonDeserializer _valueDeserializer\u003e\n  $r3 \u003d NullValueProvider _nullProvider\u003e\n  if ($r4 !\u003d $r3) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d r1\n  goto B5\n}",
      "B4 {\n  $r6 \u003d NullValueProvider _nullProvider\u003e\n}",
      "B5 {\n  $r5 \u003d SetterlessProperty\n  new SetterlessProperty(r0, r1, $r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.SetterlessProperty",
    "methodName": "deserializeAndSet",
    "signature": "void deserializeAndSet(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (p.hasToken(JsonToken.VALUE_NULL)) {\r\n        // Hmmh. Is this a problem? We won\u0027t be setting anything, so it\u0027s\r\n        // equivalent of empty Collection/Map in this case\r\n        return;\r\n    }\r\n    // For [databind#501] fix we need to implement this but:\r\n    if (_valueTypeDeserializer !\u003d null) {\r\n        ctxt.reportBadDefinition(getType(), String.format(\"Problem deserializing \u0027setterless\u0027 property (\\\"%s\\\"): no way to handle typed deser with setterless yet\", getName()));\r\n        //            return _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);\r\n    }\r\n    // Ok: then, need to fetch Collection/Map to modify:\r\n    Object toModify;\r\n    try {\r\n        toModify \u003d _getter.invoke(instance, (Object[]) null);\r\n    } catch (Exception e) {\r\n        _throwAsIOE(p, e);\r\n        // never gets here\r\n        return;\r\n    }\r\n    // Note: null won\u0027t work, since we can\u0027t then inject anything in. At least\r\n    // that\u0027s not good in common case. However, theoretically the case where\r\n    // we get JSON null might be compatible. If so, implementation could be changed.\r\n    if (toModify \u003d\u003d null) {\r\n        ctxt.reportBadDefinition(getType(), String.format(\"Problem deserializing \u0027setterless\u0027 property \u0027%s\u0027: get method returned null\", getName()));\r\n    }\r\n    _valueDeserializer.deserialize(p, ctxt, toModify);\r\n}",
    "nodes": 9,
    "edges": 9,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($r3 \u003d\u003d null) → B3 | else → B4",
      "B6 : If($r17 !\u003d null) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  SetterlessProperty\n  JsonParser\n  DeserializationContext\n  Object\n  $r1 \u003d JsonToken VALUE_NULL\u003e\n  $z0 \u003d r0.hasToken($r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  if ($r3 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r16 \u003d r2.getType()\n  $r13 \u003d Object)[1]\n  $r14 \u003d r2.getName()\n  $r13[0] \u003d $r14\n  $r15 \u003d String.format(\"Problem deserializing \\\u0027setterless\\\u0027 property (\\\"%s\\\"): no way to handle typed deser with setterless yet\", $r13)\n  r7.reportBadDefinition($r16, $r15)\n}",
      "B4 {\n  $r6 \u003d Method _getter\u003e\n  $r5 \u003d Object[]) null\n  $r17 \u003d $r6.invoke(r4, $r5)\n  goto B6\n}",
      "B5 {\n  $r18 :\u003d @caughtexception\n  r2._throwAsIOE(r0, $r18)\n  return\n}",
      "B6 {\n  if ($r17 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r12 \u003d r2.getType()\n  $r9 \u003d Object)[1]\n  $r10 \u003d r2.getName()\n  $r9[0] \u003d $r10\n  $r11 \u003d String.format(\"Problem deserializing \\\u0027setterless\\\u0027 property \\\u0027%s\\\u0027: get method returned null\", $r9)\n  r7.reportBadDefinition($r12, $r11)\n}",
      "B8 {\n  $r8 \u003d JsonDeserializer _valueDeserializer\u003e\n  $r8.deserialize(r0, r7, $r17)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SetterlessProperty#getType(...0)",
        "body": "(source not found)"
      },
      {
        "name": "SetterlessProperty#getName(...0)",
        "body": "(source not found)"
      },
      {
        "name": "SetterlessProperty#_throwAsIOE(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.UnsupportedTypeDeserializer",
    "methodName": "deserialize",
    "signature": "java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    // 26-May-2021, tatu: For [databind#3091], do allow reads from embedded values\r\n    if (p.currentToken() \u003d\u003d JsonToken.VALUE_EMBEDDED_OBJECT) {\r\n        Object value \u003d p.getEmbeddedObject();\r\n        if ((value \u003d\u003d null) || _type.getRawClass().isAssignableFrom(value.getClass())) {\r\n            return value;\r\n        }\r\n    }\r\n    ctxt.reportBadDefinition(_type, _message);\r\n    return null;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r2 !\u003d $r1) → B1 | else → B4",
      "B1 : If(r7 \u003d\u003d null) → B2 | else → B3",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  UnsupportedTypeDeserializer\n  JsonParser\n  DeserializationContext\n  $r2 \u003d r0.currentToken()\n  $r1 \u003d JsonToken VALUE_EMBEDDED_OBJECT\u003e\n  if ($r2 !\u003d $r1) goto B1 else B4\n}",
      "B1 {\n  r7 \u003d r0.getEmbeddedObject()\n  if (r7 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r8 \u003d JavaType _type\u003e\n  $r10 \u003d $r8.getRawClass()\n  $r9 \u003d r7.getClass()\n  $z0 \u003d $r10.isAssignableFrom($r9)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r6 \u003d JavaType _type\u003e\n  $r5 \u003d String _message\u003e\n  r3.reportBadDefinition($r6, $r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.UnwrappedPropertyHandler",
    "methodName": "processUnwrappedCreatorProperties",
    "signature": "com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer processUnwrappedCreatorProperties(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer,com.fasterxml.jackson.databind.util.TokenBuffer)",
    "visibility": "public",
    "body": "{\r\n    for (SettableBeanProperty prop : _creatorProperties) {\r\n        JsonParser p \u003d buffered.asParser(originalParser.streamReadConstraints());\r\n        p.nextToken();\r\n        values.assignParameter(prop, prop.deserialize(p, ctxt));\r\n    }\r\n    return values;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  UnwrappedPropertyHandler\n  JsonParser\n  DeserializationContext\n  PropertyValueBuffer\n  TokenBuffer\n  $r1 \u003d List _creatorProperties\u003e\n  r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r2.next()\n  r5 \u003d SettableBeanProperty) $r4\n  $r8 \u003d r7.streamReadConstraints()\n  r9 \u003d r6.asParser($r8)\n  r9.nextToken()\n  $r11 \u003d r5.deserialize(r9, r10)\n  r3.assignParameter(r5, $r11)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.impl.UnwrappedPropertyHandler",
    "methodName": "processUnwrapped",
    "signature": "java.lang.Object processUnwrapped(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object,com.fasterxml.jackson.databind.util.TokenBuffer)",
    "visibility": "public",
    "body": "{\r\n    for (SettableBeanProperty prop : _properties) {\r\n        JsonParser p \u003d buffered.asParser(originalParser.streamReadConstraints());\r\n        p.nextToken();\r\n        prop.deserializeAndSet(p, ctxt, bean);\r\n    }\r\n    return bean;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  UnwrappedPropertyHandler\n  JsonParser\n  DeserializationContext\n  Object\n  TokenBuffer\n  $r1 \u003d List _properties\u003e\n  r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r2.next()\n  r5 \u003d SettableBeanProperty) $r4\n  $r8 \u003d r7.streamReadConstraints()\n  r9 \u003d r6.asParser($r8)\n  r9.nextToken()\n  r5.deserializeAndSet(r9, r10, r3)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.AtomicBooleanDeserializer",
    "methodName": "deserialize",
    "signature": "java.util.concurrent.atomic.AtomicBoolean deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    JsonToken t \u003d p.currentToken();\r\n    if (t \u003d\u003d JsonToken.VALUE_TRUE) {\r\n        return new AtomicBoolean(true);\r\n    }\r\n    if (t \u003d\u003d JsonToken.VALUE_FALSE) {\r\n        return new AtomicBoolean(false);\r\n    }\r\n    // 12-Jun-2020, tatu: May look convoluted, but need to work correctly with\r\n    //   CoercionConfig\r\n    Boolean b \u003d _parseBoolean(p, ctxt, AtomicBoolean.class);\r\n    return (b \u003d\u003d null) ? null : new AtomicBoolean(b.booleanValue());\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d $r2) → B1 | else → B2",
      "B2 : If(r1 !\u003d $r3) → B3 | else → B4",
      "B4 : If(r6 !\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  AtomicBooleanDeserializer\n  JsonParser\n  DeserializationContext\n  r1 \u003d r0.currentToken()\n  $r2 \u003d JsonToken VALUE_TRUE\u003e\n  if (r1 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d AtomicBoolean\n  new AtomicBoolean(1)\n  return\n}",
      "B2 {\n  $r3 \u003d JsonToken VALUE_FALSE\u003e\n  if (r1 !\u003d $r3) goto B3 else B4\n}",
      "B3 {\n  $r7 \u003d AtomicBoolean\n  new AtomicBoolean(0)\n  return\n}",
      "B4 {\n  r6 \u003d r4._parseBoolean(r0, r5, class \"Ljava/util/concurrent/atomic/AtomicBoolean;\")\n  if (r6 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r9 \u003d null\n  goto B7\n}",
      "B6 {\n  $r9 \u003d AtomicBoolean\n  $z0 \u003d r6.booleanValue()\n  new AtomicBoolean($z0)\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AtomicBooleanDeserializer#_parseBoolean(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.AtomicIntegerDeserializer",
    "methodName": "deserialize",
    "signature": "java.util.concurrent.atomic.AtomicInteger deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    if (p.isExpectedNumberIntToken()) {\r\n        return new AtomicInteger(p.getIntValue());\r\n    }\r\n    // 12-Jun-2020, tatu: May look convoluted, but need to work correctly with\r\n    //   CoercionConfig\r\n    Integer I \u003d _parseInteger(p, ctxt, AtomicInteger.class);\r\n    return (I \u003d\u003d null) ? null : new AtomicInteger(I.intValue());\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r3 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  AtomicIntegerDeserializer\n  JsonParser\n  DeserializationContext\n  $z0 \u003d r0.isExpectedNumberIntToken()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AtomicInteger\n  $i1 \u003d r0.getIntValue()\n  new AtomicInteger($i1)\n  return\n}",
      "B2 {\n  r3 \u003d r1._parseInteger(r0, r2, class \"Ljava/util/concurrent/atomic/AtomicInteger;\")\n  if (r3 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d null\n  goto B5\n}",
      "B4 {\n  $r5 \u003d AtomicInteger\n  $i0 \u003d r3.intValue()\n  new AtomicInteger($i0)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AtomicIntegerDeserializer#_parseInteger(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.AtomicLongDeserializer",
    "methodName": "deserialize",
    "signature": "java.util.concurrent.atomic.AtomicLong deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    if (p.isExpectedNumberIntToken()) {\r\n        return new AtomicLong(p.getLongValue());\r\n    }\r\n    // 12-Jun-2020, tatu: May look convoluted, but need to work correctly with\r\n    //   CoercionConfig\r\n    Long L \u003d _parseLong(p, ctxt, AtomicLong.class);\r\n    return (L \u003d\u003d null) ? null : new AtomicLong(L.intValue());\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r3 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  AtomicLongDeserializer\n  JsonParser\n  DeserializationContext\n  $z0 \u003d r0.isExpectedNumberIntToken()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AtomicLong\n  $l2 \u003d r0.getLongValue()\n  new AtomicLong($l2)\n  return\n}",
      "B2 {\n  r3 \u003d r1._parseLong(r0, r2, class \"Ljava/util/concurrent/atomic/AtomicLong;\")\n  if (r3 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d null\n  goto B5\n}",
      "B4 {\n  $r5 \u003d AtomicLong\n  $i0 \u003d r3.intValue()\n  $l1 \u003d (long) $i0\n  new AtomicLong($l1)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AtomicLongDeserializer#_parseLong(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "methodName": "isCachable",
    "signature": "boolean isCachable()",
    "visibility": "public",
    "body": "{\r\n    // 26-Mar-2015, tatu: As per [databind#735], need to be careful\r\n    return (_valueDeserializer \u003d\u003d null) \u0026\u0026 (_valueTypeDeserializer \u003d\u003d null) \u0026\u0026 (_delegateDeserializer \u003d\u003d null);\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B4",
      "B1 : If($r2 !\u003d null) → B2 | else → B4",
      "B2 : If($r3 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CollectionDeserializer\n  $r1 \u003d JsonDeserializer _valueDeserializer\u003e\n  if ($r1 !\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r2 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  if ($r2 !\u003d null) goto B2 else B4\n}",
      "B2 {\n  $r3 \u003d JsonDeserializer _delegateDeserializer\u003e\n  if ($r3 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $z0 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z0 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "methodName": "createContextual",
    "signature": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer createContextual(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    // May need to resolve types for delegate-based creators:\r\n    JsonDeserializer\u003cObject\u003e delegateDeser \u003d null;\r\n    if (_valueInstantiator !\u003d null) {\r\n        if (_valueInstantiator.canCreateUsingDelegate()) {\r\n            JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\r\n            if (delegateType \u003d\u003d null) {\r\n                ctxt.reportBadDefinition(_containerType, String.format(\"Invalid delegate-creator definition for %s: value instantiator (%s) returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\", _containerType, _valueInstantiator.getClass().getName()));\r\n            }\r\n            delegateDeser \u003d findDeserializer(ctxt, delegateType, property);\r\n        } else if (_valueInstantiator.canCreateUsingArrayDelegate()) {\r\n            JavaType delegateType \u003d _valueInstantiator.getArrayDelegateType(ctxt.getConfig());\r\n            if (delegateType \u003d\u003d null) {\r\n                ctxt.reportBadDefinition(_containerType, String.format(\"Invalid delegate-creator definition for %s: value instantiator (%s) returned true for \u0027canCreateUsingArrayDelegate()\u0027, but null for \u0027getArrayDelegateType()\u0027\", _containerType, _valueInstantiator.getClass().getName()));\r\n            }\r\n            delegateDeser \u003d findDeserializer(ctxt, delegateType, property);\r\n        }\r\n    }\r\n    // [databind#1043]: allow per-property allow-wrapping of single overrides:\r\n    // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly\r\n    //   comes down to \"List vs Collection\" I suppose... for now, pass Collection\r\n    Boolean unwrapSingle \u003d findFormatFeature(ctxt, property, Collection.class, JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\r\n    // also, often value deserializer is resolved here:\r\n    JsonDeserializer\u003c?\u003e valueDeser \u003d _valueDeserializer;\r\n    // May have a content converter\r\n    valueDeser \u003d findConvertingContentDeserializer(ctxt, property, valueDeser);\r\n    final JavaType vt \u003d _containerType.getContentType();\r\n    if (valueDeser \u003d\u003d null) {\r\n        valueDeser \u003d ctxt.findContextualValueDeserializer(vt, property);\r\n    } else {\r\n        // if directly assigned, probably not yet contextual, so:\r\n        valueDeser \u003d ctxt.handleSecondaryContextualization(valueDeser, property, vt);\r\n    }\r\n    // and finally, type deserializer needs context as well\r\n    TypeDeserializer valueTypeDeser \u003d _valueTypeDeserializer;\r\n    if (valueTypeDeser !\u003d null) {\r\n        valueTypeDeser \u003d valueTypeDeser.forProperty(property);\r\n    }\r\n    NullValueProvider nuller \u003d findContentNullProvider(ctxt, property, valueDeser);\r\n    if ((!Objects.equals(unwrapSingle, _unwrapSingle)) || (nuller !\u003d _nullProvider) || (delegateDeser !\u003d _delegateDeserializer) || (valueDeser !\u003d _valueDeserializer) || (valueTypeDeser !\u003d _valueTypeDeserializer)) {\r\n        return withResolved(delegateDeser, valueDeser, valueTypeDeser, nuller, unwrapSingle);\r\n    }\r\n    return this;\r\n}",
    "nodes": 21,
    "edges": 31,
    "cc": 12,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B9",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B5",
      "B2 : If(r32 !\u003d null) → B3 | else → B4",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B9",
      "B6 : If(r33 !\u003d null) → B7 | else → B8",
      "B9 : If($r37 !\u003d null) → B10 | else → B11",
      "B12 : If($r10 \u003d\u003d null) → B13 | else → B14",
      "B14 : If($z0 \u003d\u003d false) → B15 | else → B19",
      "B15 : If($r9 !\u003d $r5) → B16 | else → B19",
      "B16 : If(r31 !\u003d $r6) → B17 | else → B19",
      "B17 : If(r40 !\u003d $r7) → B18 | else → B19",
      "B18 : If(r41 \u003d\u003d $r8) → B19 | else → B20"
    ],
    "blockList": [
      "B0 {\n  CollectionDeserializer\n  DeserializationContext\n  BeanProperty\n  r31 \u003d null\n  $r1 \u003d ValueInstantiator _valueInstantiator\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B9\n}",
      "B1 {\n  $r11 \u003d ValueInstantiator _valueInstantiator\u003e\n  $z1 \u003d $r11.canCreateUsingDelegate()\n  if ($z1 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r22 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r23 \u003d r2.getConfig()\n  r32 \u003d $r22.getDelegateType($r23)\n  if (r32 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r27 \u003d JavaType _containerType\u003e\n  $r24 \u003d Object)[2]\n  $r25 \u003d JavaType _containerType\u003e\n  $r24[0] \u003d $r25\n  $r26 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r28 \u003d $r26.getClass()\n  $r29 \u003d $r28.getName()\n  $r24[1] \u003d $r29\n  $r30 \u003d String.format(\"Invalid delegate-creator definition for %s: value instantiator (%s) returned true for \\\u0027canCreateUsingDelegate()\\\u0027, but null for \\\u0027getDelegateType()\\\u0027\", $r24)\n  r2.reportBadDefinition($r27, $r30)\n}",
      "B4 {\n  r31 \u003d r0.findDeserializer(r2, r32, r3)\n  goto B9\n}",
      "B5 {\n  $r12 \u003d ValueInstantiator _valueInstantiator\u003e\n  $z2 \u003d $r12.canCreateUsingArrayDelegate()\n  if ($z2 \u003d\u003d false) goto B6 else B9\n}",
      "B6 {\n  $r13 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r14 \u003d r2.getConfig()\n  r33 \u003d $r13.getArrayDelegateType($r14)\n  if (r33 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r18 \u003d JavaType _containerType\u003e\n  $r15 \u003d Object)[2]\n  $r16 \u003d JavaType _containerType\u003e\n  $r15[0] \u003d $r16\n  $r17 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r19 \u003d $r17.getClass()\n  $r20 \u003d $r19.getName()\n  $r15[1] \u003d $r20\n  $r21 \u003d String.format(\"Invalid delegate-creator definition for %s: value instantiator (%s) returned true for \\\u0027canCreateUsingArrayDelegate()\\\u0027, but null for \\\u0027getArrayDelegateType()\\\u0027\", $r15)\n  r2.reportBadDefinition($r18, $r21)\n}",
      "B8 {\n  r31 \u003d r0.findDeserializer(r2, r33, r3)\n}",
      "B9 {\n  $r34 \u003d JsonFormat$Feature ACCEPT_SINGLE_VALUE_AS_ARRAY\u003e\n  $r35 \u003d r0.findFormatFeature(r2, r3, class \"Ljava/util/Collection;\", $r34)\n  $r36 \u003d JsonDeserializer _valueDeserializer\u003e\n  $r37 \u003d r0.findConvertingContentDeserializer(r2, r3, $r36)\n  $r38 \u003d JavaType _containerType\u003e\n  $r39 \u003d $r38.getContentType()\n  if ($r37 !\u003d null) goto B10 else B11\n}",
      "B10 {\n  r40 \u003d r2.findContextualValueDeserializer($r39, r3)\n  goto B12\n}",
      "B11 {\n  r40 \u003d r2.handleSecondaryContextualization($r37, r3, $r39)\n}",
      "B12 {\n  $r10 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  r41 \u003d $r10\n  if ($r10 \u003d\u003d null) goto B13 else B14\n}",
      "B13 {\n  r41 \u003d $r10.forProperty(r3)\n}",
      "B14 {\n  $r9 \u003d r0.findContentNullProvider(r2, r3, r40)\n  $r4 \u003d Boolean _unwrapSingle\u003e\n  $z0 \u003d Objects.equals($r35, $r4)\n  if ($z0 \u003d\u003d false) goto B15 else B19\n}",
      "B15 {\n  $r5 \u003d NullValueProvider _nullProvider\u003e\n  if ($r9 !\u003d $r5) goto B16 else B19\n}",
      "B16 {\n  $r6 \u003d JsonDeserializer _delegateDeserializer\u003e\n  if (r31 !\u003d $r6) goto B17 else B19\n}",
      "B17 {\n  $r7 \u003d JsonDeserializer _valueDeserializer\u003e\n  if (r40 !\u003d $r7) goto B18 else B19\n}",
      "B18 {\n  $r8 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  if (r41 \u003d\u003d $r8) goto B19 else B20\n}",
      "B19 {\n  $r42 \u003d r0.withResolved(r31, r40, r41, $r9, $r35)\n  return\n}",
      "B20 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B9",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B19",
      "B15 --\u003e B16",
      "B15 --\u003e B19",
      "B16 --\u003e B17",
      "B16 --\u003e B19",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionDeserializer#findFormatFeature(...4)",
        "body": "(source not found)"
      },
      {
        "name": "CollectionDeserializer#withResolved(...5)",
        "body": "{\r\n    return new CollectionDeserializer(_containerType, (JsonDeserializer\u003cObject\u003e) vd, vtd, _valueInstantiator, (JsonDeserializer\u003cObject\u003e) dd, nuller, unwrapSingle);\r\n}"
      },
      {
        "name": "CollectionDeserializer#findContentNullProvider(...3)",
        "body": "(source not found)"
      },
      {
        "name": "CollectionDeserializer#findDeserializer(...3)",
        "body": "(source not found)"
      },
      {
        "name": "CollectionDeserializer#findConvertingContentDeserializer(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "methodName": "deserialize",
    "signature": "java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    if (_delegateDeserializer !\u003d null) {\r\n        return (Collection\u003cObject\u003e) _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\r\n    }\r\n    // 16-May-2020, tatu: As per [dataformats-text#199] need to first check for\r\n    //   possible Array-coercion and only after that String coercion\r\n    if (p.isExpectedStartArrayToken()) {\r\n        return _deserializeFromArray(p, ctxt, createDefaultInstance(ctxt));\r\n    }\r\n    // Empty String may be ok; bit tricky to check, however, since\r\n    // there is also possibility of \"auto-wrapping\" of single-element arrays.\r\n    // Hence we only accept empty String here.\r\n    if (p.hasToken(JsonToken.VALUE_STRING)) {\r\n        return _deserializeFromString(p, ctxt, p.getText());\r\n    }\r\n    return handleNonArray(p, ctxt, createDefaultInstance(ctxt));\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CollectionDeserializer\n  JsonParser\n  DeserializationContext\n  $r1 \u003d JsonDeserializer _delegateDeserializer\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r12 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r11 \u003d JsonDeserializer _delegateDeserializer\u003e\n  $r13 \u003d $r11.deserialize(r2, r4)\n  $r14 \u003d $r12.createUsingDelegate(r4, $r13)\n  $r15 \u003d Collection) $r14\n  return\n}",
      "B2 {\n  $z0 \u003d r2.isExpectedStartArrayToken()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r9 \u003d r0.createDefaultInstance(r4)\n  $r10 \u003d r0._deserializeFromArray(r2, r4, $r9)\n  return\n}",
      "B4 {\n  $r3 \u003d JsonToken VALUE_STRING\u003e\n  $z1 \u003d r2.hasToken($r3)\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r7 \u003d r2.getText()\n  $r8 \u003d r0._deserializeFromString(r2, r4, $r7)\n  return\n}",
      "B6 {\n  $r5 \u003d r0.createDefaultInstance(r4)\n  $r6 \u003d r0.handleNonArray(r2, r4, $r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionDeserializer#_deserializeFromString(...3)",
        "body": "{\r\n    final Class\u003c?\u003e rawTargetType \u003d handledType();\r\n    // 05-Nov-2020, ckozak: As per [jackson-databind#2922] string values may be handled\r\n    // using handleNonArray, however empty strings may result in a null or empty collection\r\n    // depending on configuration.\r\n    // Start by verifying if we got empty/blank string since accessing\r\n    // CoercionAction may be costlier than String value we\u0027ll almost certainly\r\n    // need anyway\r\n    if (value.isEmpty()) {\r\n        CoercionAction act \u003d ctxt.findCoercionAction(logicalType(), rawTargetType, CoercionInputShape.EmptyString);\r\n        // handleNonArray may successfully deserialize the result (if\r\n        // ACCEPT_SINGLE_VALUE_AS_ARRAY is enabled, for example) otherwise it\r\n        // is capable of failing just as well as _deserializeFromEmptyString.\r\n        if (act !\u003d null \u0026\u0026 act !\u003d CoercionAction.Fail) {\r\n            return (Collection\u003cObject\u003e) _deserializeFromEmptyString(p, ctxt, act, rawTargetType, \"empty String (\\\"\\\")\");\r\n        }\r\n        // note: `CoercionAction.Fail` falls through because we may need to allow\r\n        // `ACCEPT_SINGLE_VALUE_AS_ARRAY` handling later on\r\n    } else // 26-Mar-2021, tatu: Some day is today; as per [dataformat-xml#460],\r\n    //    we do need to support blank String too...\r\n    if (_isBlank(value)) {\r\n        final CoercionAction act \u003d ctxt.findCoercionFromBlankString(logicalType(), rawTargetType, CoercionAction.Fail);\r\n        if (act !\u003d CoercionAction.Fail) {\r\n            return (Collection\u003cObject\u003e) _deserializeFromEmptyString(p, ctxt, act, rawTargetType, \"blank String (all whitespace)\");\r\n        }\r\n        // note: `CoercionAction.Fail` falls through because we may need to allow\r\n        // `ACCEPT_SINGLE_VALUE_AS_ARRAY` handling later on\r\n    }\r\n    return handleNonArray(p, ctxt, createDefaultInstance(ctxt));\r\n}"
      },
      {
        "name": "CollectionDeserializer#handleNonArray(...3)",
        "body": "{\r\n    // Implicit arrays from single values?\r\n    boolean canWrap \u003d (_unwrapSingle \u003d\u003d Boolean.TRUE) || ((_unwrapSingle \u003d\u003d null) \u0026\u0026 ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY));\r\n    if (!canWrap) {\r\n        return (Collection\u003cObject\u003e) ctxt.handleUnexpectedToken(_containerType, p);\r\n    }\r\n    Object value;\r\n    try {\r\n        if (p.hasToken(JsonToken.VALUE_NULL)) {\r\n            // 03-Feb-2017, tatu: Hmmh. I wonder... let\u0027s try skipping here, too\r\n            if (_skipNullValues) {\r\n                return result;\r\n            }\r\n            value \u003d null;\r\n        } else {\r\n            value \u003d _deserializeNoNullChecks(p, ctxt);\r\n        }\r\n        if (value \u003d\u003d null) {\r\n            value \u003d _nullProvider.getNullValue(ctxt);\r\n            // _skipNullValues is checked by _tryToAddNull.\r\n            if (value \u003d\u003d null) {\r\n                _tryToAddNull(p, ctxt, result);\r\n                return result;\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        boolean wrap \u003d ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);\r\n        if (!wrap) {\r\n            ClassUtil.throwIfRTE(e);\r\n        }\r\n        // note: pass Object.class, not Object[].class, as we need element type for error info\r\n        throw JsonMappingException.wrapWithPath(e, Object.class, result.size());\r\n    }\r\n    result.add(value);\r\n    return result;\r\n}"
      },
      {
        "name": "CollectionDeserializer#createDefaultInstance(...1)",
        "body": "{\r\n    return (Collection\u003cObject\u003e) _valueInstantiator.createUsingDefault(ctxt);\r\n}"
      },
      {
        "name": "CollectionDeserializer#_deserializeFromArray(...3)",
        "body": "{\r\n    // [databind#631]: Assign current value, to be accessible by custom serializers\r\n    p.assignCurrentValue(result);\r\n    // Let\u0027s offline handling of values with Object Ids (simplifies code here)\r\n    if (_valueDeserializer.getObjectIdReader() !\u003d null) {\r\n        return _deserializeWithObjectId(p, ctxt, result);\r\n    }\r\n    JsonToken t;\r\n    while ((t \u003d p.nextToken()) !\u003d JsonToken.END_ARRAY) {\r\n        try {\r\n            Object value;\r\n            if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                if (_skipNullValues) {\r\n                    continue;\r\n                }\r\n                value \u003d null;\r\n            } else {\r\n                value \u003d _deserializeNoNullChecks(p, ctxt);\r\n            }\r\n            if (value \u003d\u003d null) {\r\n                value \u003d _nullProvider.getNullValue(ctxt);\r\n                // _skipNullValues is checked by _tryToAddNull.\r\n                if (value \u003d\u003d null) {\r\n                    _tryToAddNull(p, ctxt, result);\r\n                    continue;\r\n                }\r\n            }\r\n            result.add(value);\r\n            /* 17-Dec-2017, tatu: should not occur at this level...\r\n            } catch (UnresolvedForwardReference reference) {\r\n                throw JsonMappingException\r\n                    .from(p, \"Unresolved forward reference but no identity info\", reference);\r\n                */\r\n        } catch (Exception e) {\r\n            boolean wrap \u003d (ctxt \u003d\u003d null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);\r\n            if (!wrap) {\r\n                ClassUtil.throwIfRTE(e);\r\n            }\r\n            throw JsonMappingException.wrapWithPath(e, result, result.size());\r\n        }\r\n    }\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "methodName": "deserialize",
    "signature": "java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    // Ok: must point to START_ARRAY (or equivalent)\r\n    if (p.isExpectedStartArrayToken()) {\r\n        return _deserializeFromArray(p, ctxt, result);\r\n    }\r\n    return handleNonArray(p, ctxt, result);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CollectionDeserializer\n  JsonParser\n  DeserializationContext\n  Collection\n  $z0 \u003d r0.isExpectedStartArrayToken()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d r1._deserializeFromArray(r0, r2, r3)\n  return\n}",
      "B2 {\n  $r4 \u003d r1.handleNonArray(r0, r2, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionDeserializer#handleNonArray(...3)",
        "body": "{\r\n    // Implicit arrays from single values?\r\n    boolean canWrap \u003d (_unwrapSingle \u003d\u003d Boolean.TRUE) || ((_unwrapSingle \u003d\u003d null) \u0026\u0026 ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY));\r\n    if (!canWrap) {\r\n        return (Collection\u003cObject\u003e) ctxt.handleUnexpectedToken(_containerType, p);\r\n    }\r\n    Object value;\r\n    try {\r\n        if (p.hasToken(JsonToken.VALUE_NULL)) {\r\n            // 03-Feb-2017, tatu: Hmmh. I wonder... let\u0027s try skipping here, too\r\n            if (_skipNullValues) {\r\n                return result;\r\n            }\r\n            value \u003d null;\r\n        } else {\r\n            value \u003d _deserializeNoNullChecks(p, ctxt);\r\n        }\r\n        if (value \u003d\u003d null) {\r\n            value \u003d _nullProvider.getNullValue(ctxt);\r\n            // _skipNullValues is checked by _tryToAddNull.\r\n            if (value \u003d\u003d null) {\r\n                _tryToAddNull(p, ctxt, result);\r\n                return result;\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        boolean wrap \u003d ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);\r\n        if (!wrap) {\r\n            ClassUtil.throwIfRTE(e);\r\n        }\r\n        // note: pass Object.class, not Object[].class, as we need element type for error info\r\n        throw JsonMappingException.wrapWithPath(e, Object.class, result.size());\r\n    }\r\n    result.add(value);\r\n    return result;\r\n}"
      },
      {
        "name": "CollectionDeserializer#_deserializeFromArray(...3)",
        "body": "{\r\n    // [databind#631]: Assign current value, to be accessible by custom serializers\r\n    p.assignCurrentValue(result);\r\n    // Let\u0027s offline handling of values with Object Ids (simplifies code here)\r\n    if (_valueDeserializer.getObjectIdReader() !\u003d null) {\r\n        return _deserializeWithObjectId(p, ctxt, result);\r\n    }\r\n    JsonToken t;\r\n    while ((t \u003d p.nextToken()) !\u003d JsonToken.END_ARRAY) {\r\n        try {\r\n            Object value;\r\n            if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                if (_skipNullValues) {\r\n                    continue;\r\n                }\r\n                value \u003d null;\r\n            } else {\r\n                value \u003d _deserializeNoNullChecks(p, ctxt);\r\n            }\r\n            if (value \u003d\u003d null) {\r\n                value \u003d _nullProvider.getNullValue(ctxt);\r\n                // _skipNullValues is checked by _tryToAddNull.\r\n                if (value \u003d\u003d null) {\r\n                    _tryToAddNull(p, ctxt, result);\r\n                    continue;\r\n                }\r\n            }\r\n            result.add(value);\r\n            /* 17-Dec-2017, tatu: should not occur at this level...\r\n            } catch (UnresolvedForwardReference reference) {\r\n                throw JsonMappingException\r\n                    .from(p, \"Unresolved forward reference but no identity info\", reference);\r\n                */\r\n        } catch (Exception e) {\r\n            boolean wrap \u003d (ctxt \u003d\u003d null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);\r\n            if (!wrap) {\r\n                ClassUtil.throwIfRTE(e);\r\n            }\r\n            throw JsonMappingException.wrapWithPath(e, result, result.size());\r\n        }\r\n    }\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.DateDeserializers",
    "methodName": "find",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer find(java.lang.Class,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (_utilClasses.contains(clsName)) {\r\n        // Start with the most common type\r\n        if (rawType \u003d\u003d java.util.Calendar.class) {\r\n            return new CalendarDeserializer();\r\n        }\r\n        if (rawType \u003d\u003d java.util.Date.class) {\r\n            return DateDeserializer.instance;\r\n        }\r\n        if (rawType \u003d\u003d java.util.GregorianCalendar.class) {\r\n            return new CalendarDeserializer(GregorianCalendar.class);\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B7",
      "B1 : If(r2 !\u003d class \"Ljava/util/Calendar;\") → B2 | else → B3",
      "B3 : If(r2 !\u003d class \"Ljava/util/Date;\") → B4 | else → B5",
      "B5 : If(r2 !\u003d class \"Ljava/util/GregorianCalendar;\") → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Class\n  String\n  $r1 \u003d HashSet _utilClasses\u003e\n  $z0 \u003d $r1.contains(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B7\n}",
      "B1 {\n  if (r2 !\u003d class \"Ljava/util/Calendar;\") goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d DateDeserializers$CalendarDeserializer\n  new DateDeserializers$CalendarDeserializer()\n  return\n}",
      "B3 {\n  if (r2 !\u003d class \"Ljava/util/Date;\") goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d DateDeserializers$DateDeserializer instance\u003e\n  return\n}",
      "B5 {\n  if (r2 !\u003d class \"Ljava/util/GregorianCalendar;\") goto B6 else B7\n}",
      "B6 {\n  $r3 \u003d DateDeserializers$CalendarDeserializer\n  new DateDeserializers$CalendarDeserializer(class \"Ljava/util/GregorianCalendar;\")\n  return\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B7",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.EnumDeserializer",
    "methodName": "deserializerForCreator",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer deserializerForCreator(com.fasterxml.jackson.databind.DeserializationConfig,java.lang.Class,com.fasterxml.jackson.databind.introspect.AnnotatedMethod,com.fasterxml.jackson.databind.deser.ValueInstantiator,com.fasterxml.jackson.databind.deser.SettableBeanProperty[],com.fasterxml.jackson.databind.util.EnumResolver)",
    "visibility": "public",
    "body": "{\r\n    if (config.canOverrideAccessModifiers()) {\r\n        ClassUtil.checkAndFixAccess(factory.getMember(), config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\r\n    }\r\n    return new FactoryBasedEnumDeserializer(enumClass, factory, factory.getParameterType(0), valueInstantiator, creatorProps, byNameResolver);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  Class\n  AnnotatedMethod\n  ValueInstantiator\n  SettableBeanProperty[]\n  EnumResolver\n  $z0 \u003d r0.canOverrideAccessModifiers()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d r3.getMember()\n  $r8 \u003d MapperFeature OVERRIDE_PUBLIC_ACCESS_MODIFIERS\u003e\n  $z1 \u003d r0.isEnabled($r8)\n  ClassUtil.checkAndFixAccess($r9, $z1)\n}",
      "B2 {\n  $r1 \u003d FactoryBasedEnumDeserializer\n  $r7 \u003d r3.getParameterType(0)\n  new FactoryBasedEnumDeserializer(r2, r3, $r7, r4, r5, r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.EnumDeserializer",
    "methodName": "deserializerForNoArgsCreator",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer deserializerForNoArgsCreator(com.fasterxml.jackson.databind.DeserializationConfig,java.lang.Class,com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "visibility": "public",
    "body": "{\r\n    if (config.canOverrideAccessModifiers()) {\r\n        ClassUtil.checkAndFixAccess(factory.getMember(), config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\r\n    }\r\n    return new FactoryBasedEnumDeserializer(enumClass, factory);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  Class\n  AnnotatedMethod\n  $z0 \u003d r0.canOverrideAccessModifiers()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d r3.getMember()\n  $r4 \u003d MapperFeature OVERRIDE_PUBLIC_ACCESS_MODIFIERS\u003e\n  $z1 \u003d r0.isEnabled($r4)\n  ClassUtil.checkAndFixAccess($r5, $z1)\n}",
      "B2 {\n  $r1 \u003d FactoryBasedEnumDeserializer\n  new FactoryBasedEnumDeserializer(r2, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.EnumDeserializer",
    "methodName": "withResolved",
    "signature": "com.fasterxml.jackson.databind.deser.std.EnumDeserializer withResolved(java.lang.Boolean,java.lang.Boolean,java.lang.Boolean)",
    "visibility": "public",
    "body": "{\r\n    if (Objects.equals(_caseInsensitive, caseInsensitive) \u0026\u0026 Objects.equals(_useDefaultValueForUnknownEnum, useDefaultValueForUnknownEnum) \u0026\u0026 Objects.equals(_useNullForUnknownEnum, useNullForUnknownEnum)) {\r\n        return this;\r\n    }\r\n    return new EnumDeserializer(this, caseInsensitive, useDefaultValueForUnknownEnum, useNullForUnknownEnum);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B4",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B4",
      "B2 : If($z2 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  EnumDeserializer\n  Boolean\n  Boolean\n  Boolean\n  $r2 \u003d Boolean _caseInsensitive\u003e\n  $z0 \u003d Objects.equals($r2, r1)\n  if ($z0 \u003d\u003d false) goto B1 else B4\n}",
      "B1 {\n  $r5 \u003d Boolean _useDefaultValueForUnknownEnum\u003e\n  $z1 \u003d Objects.equals($r5, r3)\n  if ($z1 \u003d\u003d false) goto B2 else B4\n}",
      "B2 {\n  $r6 \u003d Boolean _useNullForUnknownEnum\u003e\n  $z2 \u003d Objects.equals($r6, r4)\n  if ($z2 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r7 \u003d EnumDeserializer\n  new EnumDeserializer(r0, r1, r3, r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.EnumDeserializer",
    "methodName": "deserialize",
    "signature": "java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    // Usually should just get string value:\r\n    // 04-Sep-2020, tatu: for 2.11.3 / 2.12.0, removed \"FIELD_NAME\" as allowed;\r\n    //   did not work and gave odd error message.\r\n    if (p.hasToken(JsonToken.VALUE_STRING)) {\r\n        return _fromString(p, ctxt, p.getText());\r\n    }\r\n    // But let\u0027s consider int acceptable as well (if within ordinal range)\r\n    if (p.hasToken(JsonToken.VALUE_NUMBER_INT)) {\r\n        // 26-Sep-2021, tatu: [databind#1850] Special case where we get \"true\" integer\r\n        //    enumeration and should avoid use of {@code Enum.index()}\r\n        if (_isFromIntValue) {\r\n            // ... whether to rely on \"getText()\" returning String, or get number, convert?\r\n            // For now assume all format backends can produce String:\r\n            return _fromString(p, ctxt, p.getText());\r\n        }\r\n        return _fromInteger(p, ctxt, p.getIntValue());\r\n    }\r\n    // 29-Jun-2020, tatu: New! \"Scalar from Object\" (mostly for XML)\r\n    if (p.isExpectedStartObjectToken()) {\r\n        return _fromString(p, ctxt, ctxt.extractScalarFromObject(p, this, _valueClass));\r\n    }\r\n    return _deserializeOther(p, ctxt);\r\n}",
    "nodes": 9,
    "edges": 8,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B6",
      "B3 : If($z3 \u003d\u003d false) → B4 | else → B5",
      "B6 : If($z2 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  EnumDeserializer\n  JsonParser\n  DeserializationContext\n  $r1 \u003d JsonToken VALUE_STRING\u003e\n  $z0 \u003d r0.hasToken($r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r12 \u003d r0.getText()\n  $r13 \u003d r3._fromString(r0, r4, $r12)\n  return\n}",
      "B2 {\n  $r2 \u003d JsonToken VALUE_NUMBER_INT\u003e\n  $z1 \u003d r0.hasToken($r2)\n  if ($z1 \u003d\u003d false) goto B3 else B6\n}",
      "B3 {\n  $z3 \u003d EnumDeserializer: boolean _isFromIntValue\u003e\n  if ($z3 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r10 \u003d r0.getText()\n  $r11 \u003d r3._fromString(r0, r4, $r10)\n  return\n}",
      "B5 {\n  $i0 \u003d r0.getIntValue()\n  $r9 \u003d r3._fromInteger(r0, r4, $i0)\n  return\n}",
      "B6 {\n  $z2 \u003d r0.isExpectedStartObjectToken()\n  if ($z2 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $r6 \u003d Class _valueClass\u003e\n  $r7 \u003d r4.extractScalarFromObject(r0, r3, $r6)\n  $r8 \u003d r3._fromString(r0, r4, $r7)\n  return\n}",
      "B8 {\n  $r5 \u003d r3._deserializeOther(r0, r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumDeserializer#_fromInteger(...3)",
        "body": "{\r\n    final CoercionAction act \u003d ctxt.findCoercionAction(logicalType(), handledType(), CoercionInputShape.Integer);\r\n    // First, check legacy setting for slightly different message\r\n    if (act \u003d\u003d CoercionAction.Fail) {\r\n        if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) {\r\n            return ctxt.handleWeirdNumberValue(_enumClass(), index, \"not allowed to deserialize Enum value out of number: disable DeserializationConfig.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS to allow\");\r\n        }\r\n        // otherwise this will force failure with new setting\r\n        _checkCoercionFail(ctxt, act, handledType(), index, \"Integer value (\" + index + \")\");\r\n    }\r\n    switch(act) {\r\n        case AsNull:\r\n            return null;\r\n        case AsEmpty:\r\n            return getEmptyValue(ctxt);\r\n        case TryConvert:\r\n        default:\r\n    }\r\n    if (index \u003e\u003d 0 \u0026\u0026 index \u003c _enumsByIndex.length) {\r\n        return _enumsByIndex[index];\r\n    }\r\n    if (useDefaultValueForUnknownEnum(ctxt)) {\r\n        return _enumDefaultValue;\r\n    }\r\n    if (!useNullForUnknownEnum(ctxt)) {\r\n        return ctxt.handleWeirdNumberValue(_enumClass(), index, \"index value outside legal index range [0..%s]\", _enumsByIndex.length - 1);\r\n    }\r\n    return null;\r\n}"
      },
      {
        "name": "EnumDeserializer#_fromString(...3)",
        "body": "{\r\n    CompactStringObjectMap lookup \u003d _resolveCurrentLookup(ctxt);\r\n    Object result \u003d lookup.find(text);\r\n    if (result \u003d\u003d null) {\r\n        String trimmed \u003d text.trim();\r\n        if ((trimmed \u003d\u003d text) || (result \u003d lookup.find(trimmed)) \u003d\u003d null) {\r\n            return _deserializeAltString(p, ctxt, lookup, trimmed);\r\n        }\r\n    }\r\n    return result;\r\n}"
      },
      {
        "name": "EnumDeserializer#_deserializeOther(...2)",
        "body": "{\r\n    // [databind#381]\r\n    if (p.hasToken(JsonToken.START_ARRAY)) {\r\n        return _deserializeFromArray(p, ctxt);\r\n    }\r\n    return ctxt.handleUnexpectedToken(_enumClass(), p);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer",
    "methodName": "withResolved",
    "signature": "com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer withResolved(com.fasterxml.jackson.databind.KeyDeserializer,com.fasterxml.jackson.databind.JsonDeserializer,com.fasterxml.jackson.databind.jsontype.TypeDeserializer,com.fasterxml.jackson.databind.deser.NullValueProvider)",
    "visibility": "public",
    "body": "{\r\n    if ((keyDeserializer \u003d\u003d _keyDeserializer) \u0026\u0026 (nuller \u003d\u003d _nullProvider) \u0026\u0026 (valueDeserializer \u003d\u003d _valueDeserializer) \u0026\u0026 (valueTypeDeser \u003d\u003d _valueTypeDeserializer)) {\r\n        return this;\r\n    }\r\n    return new EnumMapDeserializer(this, keyDeserializer, valueDeserializer, valueTypeDeser, nuller);\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B5",
      "B1 : If(r5 !\u003d $r6) → B2 | else → B5",
      "B2 : If(r3 !\u003d $r7) → B3 | else → B5",
      "B3 : If(r4 !\u003d $r8) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  EnumMapDeserializer\n  KeyDeserializer\n  JsonDeserializer\n  TypeDeserializer\n  NullValueProvider\n  $r2 \u003d KeyDeserializer _keyDeserializer\u003e\n  if (r0 !\u003d $r2) goto B1 else B5\n}",
      "B1 {\n  $r6 \u003d NullValueProvider _nullProvider\u003e\n  if (r5 !\u003d $r6) goto B2 else B5\n}",
      "B2 {\n  $r7 \u003d JsonDeserializer _valueDeserializer\u003e\n  if (r3 !\u003d $r7) goto B3 else B5\n}",
      "B3 {\n  $r8 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  if (r4 !\u003d $r8) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r9 \u003d EnumMapDeserializer\n  new EnumMapDeserializer(r1, r0, r3, r4, r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer",
    "methodName": "resolve",
    "signature": "void resolve(com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    // May need to resolve types for delegate- and/or property-based creators:\r\n    if (_valueInstantiator !\u003d null) {\r\n        if (_valueInstantiator.canCreateUsingDelegate()) {\r\n            JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\r\n            if (delegateType \u003d\u003d null) {\r\n                ctxt.reportBadDefinition(_containerType, String.format(\"Invalid delegate-creator definition for %s: value instantiator (%s) returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\", _containerType, _valueInstantiator.getClass().getName()));\r\n            }\r\n            /* Theoretically should be able to get CreatorProperty for delegate\r\n                 * parameter to pass; but things get tricky because DelegateCreator\r\n                 * may contain injectable values. So, for now, let\u0027s pass nothing.\r\n                 */\r\n            _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, null);\r\n        } else if (_valueInstantiator.canCreateUsingArrayDelegate()) {\r\n            JavaType delegateType \u003d _valueInstantiator.getArrayDelegateType(ctxt.getConfig());\r\n            if (delegateType \u003d\u003d null) {\r\n                ctxt.reportBadDefinition(_containerType, String.format(\"Invalid delegate-creator definition for %s: value instantiator (%s) returned true for \u0027canCreateUsingArrayDelegate()\u0027, but null for \u0027getArrayDelegateType()\u0027\", _containerType, _valueInstantiator.getClass().getName()));\r\n            }\r\n            _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, null);\r\n        } else if (_valueInstantiator.canCreateFromObjectWith()) {\r\n            SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\r\n            _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps, ctxt.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES));\r\n        }\r\n    }\r\n}",
    "nodes": 12,
    "edges": 17,
    "cc": 7,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B11",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If(r31 !\u003d null) → B3 | else → B4",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B9",
      "B6 : If(r32 !\u003d null) → B7 | else → B8",
      "B9 : If($z2 \u003d\u003d false) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  EnumMapDeserializer\n  DeserializationContext\n  $r1 \u003d ValueInstantiator _valueInstantiator\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B11\n}",
      "B1 {\n  $r2 \u003d ValueInstantiator _valueInstantiator\u003e\n  $z0 \u003d $r2.canCreateUsingDelegate()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r21 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r22 \u003d r5.getConfig()\n  r31 \u003d $r21.getDelegateType($r22)\n  if (r31 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r27 \u003d JavaType _containerType\u003e\n  $r24 \u003d Object)[2]\n  $r25 \u003d JavaType _containerType\u003e\n  $r24[0] \u003d $r25\n  $r26 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r28 \u003d $r26.getClass()\n  $r29 \u003d $r28.getName()\n  $r24[1] \u003d $r29\n  $r30 \u003d String.format(\"Invalid delegate-creator definition for %s: value instantiator (%s) returned true for \\\u0027canCreateUsingDelegate()\\\u0027, but null for \\\u0027getDelegateType()\\\u0027\", $r24)\n  r5.reportBadDefinition($r27, $r30)\n}",
      "B4 {\n  $r23 \u003d r0.findDeserializer(r5, r31, null)\n  JsonDeserializer _delegateDeserializer\u003e \u003d $r23\n  goto B11\n}",
      "B5 {\n  $r3 \u003d ValueInstantiator _valueInstantiator\u003e\n  $z1 \u003d $r3.canCreateUsingArrayDelegate()\n  if ($z1 \u003d\u003d false) goto B6 else B9\n}",
      "B6 {\n  $r11 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r12 \u003d r5.getConfig()\n  r32 \u003d $r11.getArrayDelegateType($r12)\n  if (r32 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r17 \u003d JavaType _containerType\u003e\n  $r14 \u003d Object)[2]\n  $r15 \u003d JavaType _containerType\u003e\n  $r14[0] \u003d $r15\n  $r16 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r18 \u003d $r16.getClass()\n  $r19 \u003d $r18.getName()\n  $r14[1] \u003d $r19\n  $r20 \u003d String.format(\"Invalid delegate-creator definition for %s: value instantiator (%s) returned true for \\\u0027canCreateUsingArrayDelegate()\\\u0027, but null for \\\u0027getArrayDelegateType()\\\u0027\", $r14)\n  r5.reportBadDefinition($r17, $r20)\n}",
      "B8 {\n  $r13 \u003d r0.findDeserializer(r5, r32, null)\n  JsonDeserializer _delegateDeserializer\u003e \u003d $r13\n  goto B11\n}",
      "B9 {\n  $r4 \u003d ValueInstantiator _valueInstantiator\u003e\n  $z2 \u003d $r4.canCreateFromObjectWith()\n  if ($z2 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  $r6 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r7 \u003d r5.getConfig()\n  r33 \u003d $r6.getFromObjectArguments($r7)\n  $r9 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r8 \u003d MapperFeature ACCEPT_CASE_INSENSITIVE_PROPERTIES\u003e\n  $z3 \u003d r5.isEnabled($r8)\n  $r10 \u003d PropertyBasedCreator.construct(r5, $r9, r33, $z3)\n  PropertyBasedCreator _propertyBasedCreator\u003e \u003d $r10\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B11",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B11",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumMapDeserializer#findDeserializer(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer",
    "methodName": "createContextual",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer createContextual(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    // note: instead of finding key deserializer, with enums we actually\r\n    // work with regular deserializers (less code duplication; but not\r\n    // quite as clean as it ought to be)\r\n    KeyDeserializer keyDeser \u003d _keyDeserializer;\r\n    if (keyDeser \u003d\u003d null) {\r\n        keyDeser \u003d ctxt.findKeyDeserializer(_containerType.getKeyType(), property);\r\n    }\r\n    JsonDeserializer\u003c?\u003e valueDeser \u003d _valueDeserializer;\r\n    final JavaType vt \u003d _containerType.getContentType();\r\n    if (valueDeser \u003d\u003d null) {\r\n        valueDeser \u003d ctxt.findContextualValueDeserializer(vt, property);\r\n    } else {\r\n        // if directly assigned, probably not yet contextual, so:\r\n        valueDeser \u003d ctxt.handleSecondaryContextualization(valueDeser, property, vt);\r\n    }\r\n    TypeDeserializer vtd \u003d _valueTypeDeserializer;\r\n    if (vtd !\u003d null) {\r\n        vtd \u003d vtd.forProperty(property);\r\n    }\r\n    return withResolved(keyDeser, valueDeser, vtd, findContentNullProvider(ctxt, property, valueDeser));\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r11 !\u003d null) → B1 | else → B2",
      "B2 : If($r9 !\u003d null) → B3 | else → B4",
      "B5 : If($r6 \u003d\u003d null) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  EnumMapDeserializer\n  DeserializationContext\n  BeanProperty\n  r11 \u003d KeyDeserializer _keyDeserializer\u003e\n  if (r11 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d JavaType _containerType\u003e\n  $r8 \u003d $r7.getKeyType()\n  r11 \u003d r2.findKeyDeserializer($r8, r3)\n}",
      "B2 {\n  $r9 \u003d JsonDeserializer _valueDeserializer\u003e\n  $r1 \u003d JavaType _containerType\u003e\n  $r10 \u003d $r1.getContentType()\n  if ($r9 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  r12 \u003d r2.findContextualValueDeserializer($r10, r3)\n  goto B5\n}",
      "B4 {\n  r12 \u003d r2.handleSecondaryContextualization($r9, r3, $r10)\n}",
      "B5 {\n  $r6 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  r13 \u003d $r6\n  if ($r6 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  r13 \u003d $r6.forProperty(r3)\n}",
      "B7 {\n  $r4 \u003d r0.findContentNullProvider(r2, r3, r12)\n  $r5 \u003d r0.withResolved(r11, r12, r13, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumMapDeserializer#withResolved(...4)",
        "body": "{\r\n    if ((keyDeserializer \u003d\u003d _keyDeserializer) \u0026\u0026 (nuller \u003d\u003d _nullProvider) \u0026\u0026 (valueDeserializer \u003d\u003d _valueDeserializer) \u0026\u0026 (valueTypeDeser \u003d\u003d _valueTypeDeserializer)) {\r\n        return this;\r\n    }\r\n    return new EnumMapDeserializer(this, keyDeserializer, valueDeserializer, valueTypeDeser, nuller);\r\n}"
      },
      {
        "name": "EnumMapDeserializer#findContentNullProvider(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer",
    "methodName": "isCachable",
    "signature": "boolean isCachable()",
    "visibility": "public",
    "body": "{\r\n    // Important: do NOT cache if polymorphic values\r\n    return (_valueDeserializer \u003d\u003d null) \u0026\u0026 (_keyDeserializer \u003d\u003d null) \u0026\u0026 (_valueTypeDeserializer \u003d\u003d null);\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B4",
      "B1 : If($r2 !\u003d null) → B2 | else → B4",
      "B2 : If($r3 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  EnumMapDeserializer\n  $r1 \u003d JsonDeserializer _valueDeserializer\u003e\n  if ($r1 !\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r2 \u003d KeyDeserializer _keyDeserializer\u003e\n  if ($r2 !\u003d null) goto B2 else B4\n}",
      "B2 {\n  $r3 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  if ($r3 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $z0 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z0 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer",
    "methodName": "deserialize",
    "signature": "java.util.EnumMap deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    if (_propertyBasedCreator !\u003d null) {\r\n        return _deserializeUsingProperties(p, ctxt);\r\n    }\r\n    if (_delegateDeserializer !\u003d null) {\r\n        return (EnumMap\u003c?, ?\u003e) _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\r\n    }\r\n    switch(p.currentTokenId()) {\r\n        case JsonTokenId.ID_START_OBJECT:\r\n        case JsonTokenId.ID_END_OBJECT:\r\n        case JsonTokenId.ID_FIELD_NAME:\r\n            return deserialize(p, ctxt, constructMap(ctxt));\r\n        case JsonTokenId.ID_STRING:\r\n            // (empty) String may be ok however; or single-String-arg ctor\r\n            return _deserializeFromString(p, ctxt);\r\n        case JsonTokenId.ID_START_ARRAY:\r\n            // Empty array, or single-value wrapped in array?\r\n            return _deserializeFromArray(p, ctxt);\r\n        default:\r\n    }\r\n    return (EnumMap\u003c?, ?\u003e) ctxt.handleUnexpectedToken(getValueType(ctxt), p);\r\n}",
    "nodes": 9,
    "edges": 8,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r2 \u003d\u003d null) → B3 | else → B4",
      "B4 : If(switch-on $i0) → B5 | else → B7"
    ],
    "blockList": [
      "B0 {\n  EnumMapDeserializer\n  JsonParser\n  DeserializationContext\n  $r1 \u003d PropertyBasedCreator _propertyBasedCreator\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r19 \u003d r0._deserializeUsingProperties(r3, r4)\n  return\n}",
      "B2 {\n  $r2 \u003d JsonDeserializer _delegateDeserializer\u003e\n  if ($r2 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r15 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r14 \u003d JsonDeserializer _delegateDeserializer\u003e\n  $r16 \u003d $r14.deserialize(r3, r4)\n  $r17 \u003d $r15.createUsingDelegate(r4, $r16)\n  $r18 \u003d EnumMap) $r17\n  return\n}",
      "B4 {\n  $i0 \u003d r3.currentTokenId()\n  DeserializationContext)\u003e(r4); }\n}",
      "B5 {\n  $r9 \u003d r0.constructMap(r4)\n  $r10 \u003d r0.deserialize(r3, r4, $r9)\n  return\n}",
      "B6 {\n  $r5 \u003d r0._deserializeFromString(r3, r4)\n  $r6 \u003d EnumMap) $r5\n  return\n}",
      "B7 {\n  $r7 \u003d r0._deserializeFromArray(r3, r4)\n  $r8 \u003d EnumMap) $r7\n  return\n}",
      "B8 {\n  $r11 \u003d r0.getValueType(r4)\n  $r12 \u003d r4.handleUnexpectedToken($r11, r3)\n  $r13 \u003d EnumMap) $r12\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B4 --\u003e B8",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumMapDeserializer#_deserializeUsingProperties(...2)",
        "body": "{\r\n    final PropertyBasedCreator creator \u003d _propertyBasedCreator;\r\n    // null -\u003e no ObjectIdReader for EnumMaps\r\n    PropertyValueBuffer buffer \u003d creator.startBuilding(p, ctxt, null);\r\n    String keyName;\r\n    if (p.isExpectedStartObjectToken()) {\r\n        keyName \u003d p.nextFieldName();\r\n    } else if (p.hasToken(JsonToken.FIELD_NAME)) {\r\n        keyName \u003d p.currentName();\r\n    } else {\r\n        keyName \u003d null;\r\n    }\r\n    for (; keyName !\u003d null; keyName \u003d p.nextFieldName()) {\r\n        // to get to value\r\n        JsonToken t \u003d p.nextToken();\r\n        // creator property?\r\n        SettableBeanProperty prop \u003d creator.findCreatorProperty(keyName);\r\n        if (prop !\u003d null) {\r\n            // Last property to set?\r\n            if (buffer.assignParameter(prop, prop.deserialize(p, ctxt))) {\r\n                // from value to END_OBJECT or FIELD_NAME\r\n                p.nextToken();\r\n                EnumMap\u003c?, ?\u003e result;\r\n                try {\r\n                    result \u003d (EnumMap\u003c?, ?\u003e) creator.build(ctxt, buffer);\r\n                } catch (Exception e) {\r\n                    return wrapAndThrow(ctxt, e, _containerType.getRawClass(), keyName);\r\n                }\r\n                return deserialize(p, ctxt, result);\r\n            }\r\n            continue;\r\n        }\r\n        // other property? needs buffering\r\n        // but we need to let key deserializer handle it separately, nonetheless\r\n        Enum\u003c?\u003e key \u003d (Enum\u003c?\u003e) _keyDeserializer.deserializeKey(keyName, ctxt);\r\n        if (key \u003d\u003d null) {\r\n            if (!ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\r\n                return (EnumMap\u003c?, ?\u003e) ctxt.handleWeirdStringValue(_enumClass, keyName, \"value not one of declared Enum instance names for %s\", _containerType.getKeyType());\r\n            }\r\n            // 24-Mar-2012, tatu: Null won\u0027t work as a key anyway, so let\u0027s\r\n            //  just skip the entry then. But we must skip the value as well, if so.\r\n            p.nextToken();\r\n            p.skipChildren();\r\n            continue;\r\n        }\r\n        Object value;\r\n        try {\r\n            if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                if (_skipNullValues) {\r\n                    continue;\r\n                }\r\n                value \u003d _nullProvider.getNullValue(ctxt);\r\n            } else if (_valueTypeDeserializer \u003d\u003d null) {\r\n                value \u003d _valueDeserializer.deserialize(p, ctxt);\r\n            } else {\r\n                value \u003d _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);\r\n            }\r\n        } catch (Exception e) {\r\n            wrapAndThrow(ctxt, e, _containerType.getRawClass(), keyName);\r\n            return null;\r\n        }\r\n        buffer.bufferMapProperty(key, value);\r\n    }\r\n    // end of JSON object?\r\n    // if so, can just construct and leave...\r\n    try {\r\n        return (EnumMap\u003c?, ?\u003e) creator.build(ctxt, buffer);\r\n    } catch (Exception e) {\r\n        wrapAndThrow(ctxt, e, _containerType.getRawClass(), keyName);\r\n        return null;\r\n    }\r\n}"
      },
      {
        "name": "EnumMapDeserializer#constructMap(...1)",
        "body": "{\r\n    if (_valueInstantiator \u003d\u003d null) {\r\n        return new EnumMap(_enumClass);\r\n    }\r\n    try {\r\n        if (!_valueInstantiator.canCreateUsingDefault()) {\r\n            return (EnumMap\u003c?, ?\u003e) ctxt.handleMissingInstantiator(handledType(), getValueInstantiator(), null, \"no default constructor found\");\r\n        }\r\n        return (EnumMap\u003c?, ?\u003e) _valueInstantiator.createUsingDefault(ctxt);\r\n    } catch (IOException e) {\r\n        return ClassUtil.throwAsMappingException(ctxt, e);\r\n    }\r\n}"
      },
      {
        "name": "EnumMapDeserializer#_deserializeFromString(...2)",
        "body": "(source not found)"
      },
      {
        "name": "EnumMapDeserializer#_deserializeFromArray(...2)",
        "body": "(source not found)"
      },
      {
        "name": "EnumMapDeserializer#deserialize(...3)",
        "body": "{\r\n    // [databind#631]: Assign current value, to be accessible by custom deserializers\r\n    p.assignCurrentValue(result);\r\n    final JsonDeserializer\u003cObject\u003e valueDes \u003d _valueDeserializer;\r\n    final TypeDeserializer typeDeser \u003d _valueTypeDeserializer;\r\n    String keyStr;\r\n    if (p.isExpectedStartObjectToken()) {\r\n        keyStr \u003d p.nextFieldName();\r\n    } else {\r\n        JsonToken t \u003d p.currentToken();\r\n        if (t !\u003d JsonToken.FIELD_NAME) {\r\n            if (t \u003d\u003d JsonToken.END_OBJECT) {\r\n                return result;\r\n            }\r\n            ctxt.reportWrongTokenException(this, JsonToken.FIELD_NAME, null);\r\n        }\r\n        keyStr \u003d p.currentName();\r\n    }\r\n    for (; keyStr !\u003d null; keyStr \u003d p.nextFieldName()) {\r\n        // but we need to let key deserializer handle it separately, nonetheless\r\n        Enum\u003c?\u003e key \u003d (Enum\u003c?\u003e) _keyDeserializer.deserializeKey(keyStr, ctxt);\r\n        JsonToken t \u003d p.nextToken();\r\n        if (key \u003d\u003d null) {\r\n            if (!ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\r\n                return (EnumMap\u003c?, ?\u003e) ctxt.handleWeirdStringValue(_enumClass, keyStr, \"value not one of declared Enum instance names for %s\", _containerType.getKeyType());\r\n            }\r\n            // 24-Mar-2012, tatu: Null won\u0027t work as a key anyway, so let\u0027s\r\n            //  just skip the entry then. But we must skip the value as well, if so.\r\n            p.skipChildren();\r\n            continue;\r\n        }\r\n        // And then the value...\r\n        // note: MUST check for nulls separately: deserializers will\r\n        // not handle them (and maybe fail or return bogus data)\r\n        Object value;\r\n        try {\r\n            if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                if (_skipNullValues) {\r\n                    continue;\r\n                }\r\n                value \u003d _nullProvider.getNullValue(ctxt);\r\n            } else if (typeDeser \u003d\u003d null) {\r\n                value \u003d valueDes.deserialize(p, ctxt);\r\n            } else {\r\n                value \u003d valueDes.deserializeWithType(p, ctxt, typeDeser);\r\n            }\r\n        } catch (Exception e) {\r\n            return wrapAndThrow(ctxt, e, result, keyStr);\r\n        }\r\n        result.put(key, value);\r\n    }\r\n    return result;\r\n}"
      },
      {
        "name": "EnumMapDeserializer#getValueType(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer",
    "methodName": "deserialize",
    "signature": "java.util.EnumMap deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.EnumMap)",
    "visibility": "public",
    "body": "{\r\n    // [databind#631]: Assign current value, to be accessible by custom deserializers\r\n    p.assignCurrentValue(result);\r\n    final JsonDeserializer\u003cObject\u003e valueDes \u003d _valueDeserializer;\r\n    final TypeDeserializer typeDeser \u003d _valueTypeDeserializer;\r\n    String keyStr;\r\n    if (p.isExpectedStartObjectToken()) {\r\n        keyStr \u003d p.nextFieldName();\r\n    } else {\r\n        JsonToken t \u003d p.currentToken();\r\n        if (t !\u003d JsonToken.FIELD_NAME) {\r\n            if (t \u003d\u003d JsonToken.END_OBJECT) {\r\n                return result;\r\n            }\r\n            ctxt.reportWrongTokenException(this, JsonToken.FIELD_NAME, null);\r\n        }\r\n        keyStr \u003d p.currentName();\r\n    }\r\n    for (; keyStr !\u003d null; keyStr \u003d p.nextFieldName()) {\r\n        // but we need to let key deserializer handle it separately, nonetheless\r\n        Enum\u003c?\u003e key \u003d (Enum\u003c?\u003e) _keyDeserializer.deserializeKey(keyStr, ctxt);\r\n        JsonToken t \u003d p.nextToken();\r\n        if (key \u003d\u003d null) {\r\n            if (!ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\r\n                return (EnumMap\u003c?, ?\u003e) ctxt.handleWeirdStringValue(_enumClass, keyStr, \"value not one of declared Enum instance names for %s\", _containerType.getKeyType());\r\n            }\r\n            // 24-Mar-2012, tatu: Null won\u0027t work as a key anyway, so let\u0027s\r\n            //  just skip the entry then. But we must skip the value as well, if so.\r\n            p.skipChildren();\r\n            continue;\r\n        }\r\n        // And then the value...\r\n        // note: MUST check for nulls separately: deserializers will\r\n        // not handle them (and maybe fail or return bogus data)\r\n        Object value;\r\n        try {\r\n            if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                if (_skipNullValues) {\r\n                    continue;\r\n                }\r\n                value \u003d _nullProvider.getNullValue(ctxt);\r\n            } else if (typeDeser \u003d\u003d null) {\r\n                value \u003d valueDes.deserialize(p, ctxt);\r\n            } else {\r\n                value \u003d valueDes.deserializeWithType(p, ctxt, typeDeser);\r\n            }\r\n        } catch (Exception e) {\r\n            return wrapAndThrow(ctxt, e, result, keyStr);\r\n        }\r\n        result.put(key, value);\r\n    }\r\n    return result;\r\n}",
    "nodes": 24,
    "edges": 29,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r26 \u003d\u003d $r5) → B3 | else → B6",
      "B3 : If(r26 !\u003d $r19) → B4 | else → B5",
      "B7 : If(r25 \u003d\u003d null) → B8 | else → B23",
      "B8 : If(r27 !\u003d null) → B9 | else → B12",
      "B9 : If($z2 !\u003d 0) → B10 | else → B11",
      "B12 : If(r9 !\u003d $r10) → B13 | else → B16",
      "B13 : If($z1 \u003d\u003d false) → B14 | else → B15",
      "B16 : If(r4 !\u003d null) → B17 | else → B18"
    ],
    "blockList": [
      "B0 {\n  EnumMapDeserializer\n  JsonParser\n  DeserializationContext\n  EnumMap\n  r0.assignCurrentValue(r1)\n  r3 \u003d JsonDeserializer _valueDeserializer\u003e\n  r4 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  $z0 \u003d r0.isExpectedStartObjectToken()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r25 \u003d r0.nextFieldName()\n  goto B7\n}",
      "B2 {\n  r26 \u003d r0.currentToken()\n  $r5 \u003d JsonToken FIELD_NAME\u003e\n  if (r26 \u003d\u003d $r5) goto B3 else B6\n}",
      "B3 {\n  $r19 \u003d JsonToken END_OBJECT\u003e\n  if (r26 !\u003d $r19) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r21 \u003d JsonToken FIELD_NAME\u003e\n  $r20 \u003d Object)[0]\n  r6.reportWrongTokenException(r2, $r21, null, $r20)\n}",
      "B6 {\n  r25 \u003d r0.currentName()\n}",
      "B7 {\n  if (r25 \u003d\u003d null) goto B8 else B23\n}",
      "B8 {\n  $r7 \u003d KeyDeserializer _keyDeserializer\u003e\n  $r8 \u003d $r7.deserializeKey(r25, r6)\n  r27 \u003d Enum) $r8\n  r9 \u003d r0.nextToken()\n  if (r27 !\u003d null) goto B9 else B12\n}",
      "B9 {\n  $r12 \u003d DeserializationFeature READ_UNKNOWN_ENUM_VALUES_AS_NULL\u003e\n  $z2 \u003d r6.isEnabled($r12)\n  if ($z2 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  $r15 \u003d Class _enumClass\u003e\n  $r13 \u003d Object)[1]\n  $r14 \u003d JavaType _containerType\u003e\n  $r16 \u003d $r14.getKeyType()\n  $r13[0] \u003d $r16\n  $r17 \u003d r6.handleWeirdStringValue($r15, r25, \"value not one of declared Enum instance names for %s\", $r13)\n  $r18 \u003d EnumMap) $r17\n  return\n}",
      "B11 {\n  r0.skipChildren()\n  goto B22\n}",
      "B12 {\n  $r10 \u003d JsonToken VALUE_NULL\u003e\n  if (r9 !\u003d $r10) goto B13 else B16\n}",
      "B13 {\n  $z1 \u003d EnumMapDeserializer: boolean _skipNullValues\u003e\n  if ($z1 \u003d\u003d false) goto B14 else B15\n}",
      "B14 {\n  goto B22\n}",
      "B15 {\n  $r11 \u003d NullValueProvider _nullProvider\u003e\n  r28 \u003d $r11.getNullValue(r6)\n  goto B19\n}",
      "B16 {\n  if (r4 !\u003d null) goto B17 else B18\n}",
      "B17 {\n  r28 \u003d r3.deserialize(r0, r6)\n  goto B19\n}",
      "B18 {\n  r28 \u003d r3.deserializeWithType(r0, r6, r4)\n}",
      "B19 {\n  goto B21\n}",
      "B20 {\n  $r22 :\u003d @caughtexception\n  $r23 \u003d r2.wrapAndThrow(r6, $r22, r1, r25)\n  $r24 \u003d EnumMap) $r23\n  return\n}",
      "B21 {\n  r1.put(r27, r28)\n}",
      "B22 {\n  r25 \u003d r0.nextFieldName()\n  goto B7\n}",
      "B23 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B23",
      "B8 --\u003e B9",
      "B8 --\u003e B12",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B22",
      "B12 --\u003e B13",
      "B12 --\u003e B16",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B22",
      "B15 --\u003e B19",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e B21",
      "B20 --\u003e [EXIT]",
      "B21 --\u003e B22",
      "B22 --\u003e B7",
      "B23 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumMapDeserializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer",
    "methodName": "_deserializeUsingProperties",
    "signature": "java.util.EnumMap _deserializeUsingProperties(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    final PropertyBasedCreator creator \u003d _propertyBasedCreator;\r\n    // null -\u003e no ObjectIdReader for EnumMaps\r\n    PropertyValueBuffer buffer \u003d creator.startBuilding(p, ctxt, null);\r\n    String keyName;\r\n    if (p.isExpectedStartObjectToken()) {\r\n        keyName \u003d p.nextFieldName();\r\n    } else if (p.hasToken(JsonToken.FIELD_NAME)) {\r\n        keyName \u003d p.currentName();\r\n    } else {\r\n        keyName \u003d null;\r\n    }\r\n    for (; keyName !\u003d null; keyName \u003d p.nextFieldName()) {\r\n        // to get to value\r\n        JsonToken t \u003d p.nextToken();\r\n        // creator property?\r\n        SettableBeanProperty prop \u003d creator.findCreatorProperty(keyName);\r\n        if (prop !\u003d null) {\r\n            // Last property to set?\r\n            if (buffer.assignParameter(prop, prop.deserialize(p, ctxt))) {\r\n                // from value to END_OBJECT or FIELD_NAME\r\n                p.nextToken();\r\n                EnumMap\u003c?, ?\u003e result;\r\n                try {\r\n                    result \u003d (EnumMap\u003c?, ?\u003e) creator.build(ctxt, buffer);\r\n                } catch (Exception e) {\r\n                    return wrapAndThrow(ctxt, e, _containerType.getRawClass(), keyName);\r\n                }\r\n                return deserialize(p, ctxt, result);\r\n            }\r\n            continue;\r\n        }\r\n        // other property? needs buffering\r\n        // but we need to let key deserializer handle it separately, nonetheless\r\n        Enum\u003c?\u003e key \u003d (Enum\u003c?\u003e) _keyDeserializer.deserializeKey(keyName, ctxt);\r\n        if (key \u003d\u003d null) {\r\n            if (!ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\r\n                return (EnumMap\u003c?, ?\u003e) ctxt.handleWeirdStringValue(_enumClass, keyName, \"value not one of declared Enum instance names for %s\", _containerType.getKeyType());\r\n            }\r\n            // 24-Mar-2012, tatu: Null won\u0027t work as a key anyway, so let\u0027s\r\n            //  just skip the entry then. But we must skip the value as well, if so.\r\n            p.nextToken();\r\n            p.skipChildren();\r\n            continue;\r\n        }\r\n        Object value;\r\n        try {\r\n            if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                if (_skipNullValues) {\r\n                    continue;\r\n                }\r\n                value \u003d _nullProvider.getNullValue(ctxt);\r\n            } else if (_valueTypeDeserializer \u003d\u003d null) {\r\n                value \u003d _valueDeserializer.deserialize(p, ctxt);\r\n            } else {\r\n                value \u003d _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);\r\n            }\r\n        } catch (Exception e) {\r\n            wrapAndThrow(ctxt, e, _containerType.getRawClass(), keyName);\r\n            return null;\r\n        }\r\n        buffer.bufferMapProperty(key, value);\r\n    }\r\n    // end of JSON object?\r\n    // if so, can just construct and leave...\r\n    try {\r\n        return (EnumMap\u003c?, ?\u003e) creator.build(ctxt, buffer);\r\n    } catch (Exception e) {\r\n        wrapAndThrow(ctxt, e, _containerType.getRawClass(), keyName);\r\n        return null;\r\n    }\r\n}",
    "nodes": 28,
    "edges": 32,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B5 : If(r38 \u003d\u003d null) → B6 | else → B26",
      "B6 : If(r8 \u003d\u003d null) → B7 | else → B11",
      "B7 : If($z4 \u003d\u003d false) → B8 | else → B25",
      "B11 : If(r41 !\u003d null) → B12 | else → B15",
      "B12 : If($z3 !\u003d 0) → B13 | else → B14",
      "B15 : If(r39 !\u003d $r11) → B16 | else → B19",
      "B16 : If($z2 \u003d\u003d false) → B17 | else → B18",
      "B19 : If($r12 !\u003d null) → B20 | else → B21"
    ],
    "blockList": [
      "B0 {\n  EnumMapDeserializer\n  JsonParser\n  DeserializationContext\n  r1 \u003d PropertyBasedCreator _propertyBasedCreator\u003e\n  r4 \u003d r1.startBuilding(r2, r3, null)\n  $z0 \u003d r2.isExpectedStartObjectToken()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r38 \u003d r2.nextFieldName()\n  goto B5\n}",
      "B2 {\n  $r5 \u003d JsonToken FIELD_NAME\u003e\n  $z1 \u003d r2.hasToken($r5)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  r38 \u003d r2.currentName()\n  goto B5\n}",
      "B4 {\n  r38 \u003d null\n}",
      "B5 {\n  if (r38 \u003d\u003d null) goto B6 else B26\n}",
      "B6 {\n  r39 \u003d r2.nextToken()\n  r8 \u003d r1.findCreatorProperty(r38)\n  if (r8 \u003d\u003d null) goto B7 else B11\n}",
      "B7 {\n  $r24 \u003d r8.deserialize(r2, r3)\n  $z4 \u003d r4.assignParameter(r8, $r24)\n  if ($z4 \u003d\u003d false) goto B8 else B25\n}",
      "B8 {\n  r2.nextToken()\n  $r25 \u003d r1.build(r3, r4)\n  r40 \u003d EnumMap) $r25\n  goto B10\n}",
      "B9 {\n  $r33 :\u003d @caughtexception\n  $r34 \u003d JavaType _containerType\u003e\n  $r35 \u003d $r34.getRawClass()\n  $r36 \u003d r0.wrapAndThrow(r3, $r33, $r35, r38)\n  $r37 \u003d EnumMap) $r36\n  return\n}",
      "B10 {\n  $r26 \u003d r0.deserialize(r2, r3, r40)\n  return\n}",
      "B11 {\n  $r9 \u003d KeyDeserializer _keyDeserializer\u003e\n  $r10 \u003d $r9.deserializeKey(r38, r3)\n  r41 \u003d Enum) $r10\n  if (r41 !\u003d null) goto B12 else B15\n}",
      "B12 {\n  $r17 \u003d DeserializationFeature READ_UNKNOWN_ENUM_VALUES_AS_NULL\u003e\n  $z3 \u003d r3.isEnabled($r17)\n  if ($z3 !\u003d 0) goto B13 else B14\n}",
      "B13 {\n  $r20 \u003d Class _enumClass\u003e\n  $r18 \u003d Object)[1]\n  $r19 \u003d JavaType _containerType\u003e\n  $r21 \u003d $r19.getKeyType()\n  $r18[0] \u003d $r21\n  $r22 \u003d r3.handleWeirdStringValue($r20, r38, \"value not one of declared Enum instance names for %s\", $r18)\n  $r23 \u003d EnumMap) $r22\n  return\n}",
      "B14 {\n  r2.nextToken()\n  r2.skipChildren()\n  goto B25\n}",
      "B15 {\n  $r11 \u003d JsonToken VALUE_NULL\u003e\n  if (r39 !\u003d $r11) goto B16 else B19\n}",
      "B16 {\n  $z2 \u003d EnumMapDeserializer: boolean _skipNullValues\u003e\n  if ($z2 \u003d\u003d false) goto B17 else B18\n}",
      "B17 {\n  goto B25\n}",
      "B18 {\n  $r16 \u003d NullValueProvider _nullProvider\u003e\n  r42 \u003d $r16.getNullValue(r3)\n  goto B22\n}",
      "B19 {\n  $r12 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  if ($r12 !\u003d null) goto B20 else B21\n}",
      "B20 {\n  $r15 \u003d JsonDeserializer _valueDeserializer\u003e\n  r42 \u003d $r15.deserialize(r2, r3)\n  goto B22\n}",
      "B21 {\n  $r14 \u003d JsonDeserializer _valueDeserializer\u003e\n  $r13 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  r42 \u003d $r14.deserializeWithType(r2, r3, $r13)\n}",
      "B22 {\n  goto B24\n}",
      "B23 {\n  $r30 :\u003d @caughtexception\n  $r31 \u003d JavaType _containerType\u003e\n  $r32 \u003d $r31.getRawClass()\n  r0.wrapAndThrow(r3, $r30, $r32, r38)\n  return\n}",
      "B24 {\n  r4.bufferMapProperty(r41, r42)\n}",
      "B25 {\n  r38 \u003d r2.nextFieldName()\n  goto B5\n}",
      "B26 {\n  $r6 \u003d r1.build(r3, r4)\n  $r7 \u003d EnumMap) $r6\n  return\n}",
      "B27 {\n  $r27 :\u003d @caughtexception\n  $r28 \u003d JavaType _containerType\u003e\n  $r29 \u003d $r28.getRawClass()\n  r0.wrapAndThrow(r3, $r27, $r29, r38)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B26",
      "B6 --\u003e B7",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B25",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B25",
      "B15 --\u003e B16",
      "B15 --\u003e B19",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B25",
      "B18 --\u003e B22",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B22 --\u003e B24",
      "B23 --\u003e [EXIT]",
      "B24 --\u003e B25",
      "B25 --\u003e B5",
      "B26 --\u003e [EXIT]",
      "B27 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumMapDeserializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      },
      {
        "name": "EnumMapDeserializer#deserialize(...3)",
        "body": "{\r\n    // [databind#631]: Assign current value, to be accessible by custom deserializers\r\n    p.assignCurrentValue(result);\r\n    final JsonDeserializer\u003cObject\u003e valueDes \u003d _valueDeserializer;\r\n    final TypeDeserializer typeDeser \u003d _valueTypeDeserializer;\r\n    String keyStr;\r\n    if (p.isExpectedStartObjectToken()) {\r\n        keyStr \u003d p.nextFieldName();\r\n    } else {\r\n        JsonToken t \u003d p.currentToken();\r\n        if (t !\u003d JsonToken.FIELD_NAME) {\r\n            if (t \u003d\u003d JsonToken.END_OBJECT) {\r\n                return result;\r\n            }\r\n            ctxt.reportWrongTokenException(this, JsonToken.FIELD_NAME, null);\r\n        }\r\n        keyStr \u003d p.currentName();\r\n    }\r\n    for (; keyStr !\u003d null; keyStr \u003d p.nextFieldName()) {\r\n        // but we need to let key deserializer handle it separately, nonetheless\r\n        Enum\u003c?\u003e key \u003d (Enum\u003c?\u003e) _keyDeserializer.deserializeKey(keyStr, ctxt);\r\n        JsonToken t \u003d p.nextToken();\r\n        if (key \u003d\u003d null) {\r\n            if (!ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\r\n                return (EnumMap\u003c?, ?\u003e) ctxt.handleWeirdStringValue(_enumClass, keyStr, \"value not one of declared Enum instance names for %s\", _containerType.getKeyType());\r\n            }\r\n            // 24-Mar-2012, tatu: Null won\u0027t work as a key anyway, so let\u0027s\r\n            //  just skip the entry then. But we must skip the value as well, if so.\r\n            p.skipChildren();\r\n            continue;\r\n        }\r\n        // And then the value...\r\n        // note: MUST check for nulls separately: deserializers will\r\n        // not handle them (and maybe fail or return bogus data)\r\n        Object value;\r\n        try {\r\n            if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                if (_skipNullValues) {\r\n                    continue;\r\n                }\r\n                value \u003d _nullProvider.getNullValue(ctxt);\r\n            } else if (typeDeser \u003d\u003d null) {\r\n                value \u003d valueDes.deserialize(p, ctxt);\r\n            } else {\r\n                value \u003d valueDes.deserializeWithType(p, ctxt, typeDeser);\r\n            }\r\n        } catch (Exception e) {\r\n            return wrapAndThrow(ctxt, e, result, keyStr);\r\n        }\r\n        result.put(key, value);\r\n    }\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer",
    "methodName": "withDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer withDeserializer(com.fasterxml.jackson.databind.JsonDeserializer)",
    "visibility": "public",
    "body": "{\r\n    if (_enumDeserializer \u003d\u003d deser) {\r\n        return this;\r\n    }\r\n    return new EnumSetDeserializer(this, deser, _nullProvider, _unwrapSingle);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  EnumSetDeserializer\n  JsonDeserializer\n  $r2 \u003d JsonDeserializer _enumDeserializer\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d EnumSetDeserializer\n  $r5 \u003d NullValueProvider _nullProvider\u003e\n  $r4 \u003d Boolean _unwrapSingle\u003e\n  new EnumSetDeserializer(r0, r1, $r5, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer",
    "methodName": "withResolved",
    "signature": "com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer withResolved(com.fasterxml.jackson.databind.JsonDeserializer,com.fasterxml.jackson.databind.deser.NullValueProvider,java.lang.Boolean)",
    "visibility": "public",
    "body": "{\r\n    if ((Objects.equals(_unwrapSingle, unwrapSingle)) \u0026\u0026 (_enumDeserializer \u003d\u003d deser) \u0026\u0026 (_nullProvider \u003d\u003d deser)) {\r\n        return this;\r\n    }\r\n    return new EnumSetDeserializer(this, deser, nuller, unwrapSingle);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B4",
      "B1 : If($r5 !\u003d r3) → B2 | else → B4",
      "B2 : If($r6 !\u003d r3) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  EnumSetDeserializer\n  JsonDeserializer\n  NullValueProvider\n  Boolean\n  $r2 \u003d Boolean _unwrapSingle\u003e\n  $z0 \u003d Objects.equals($r2, r1)\n  if ($z0 \u003d\u003d false) goto B1 else B4\n}",
      "B1 {\n  $r5 \u003d JsonDeserializer _enumDeserializer\u003e\n  if ($r5 !\u003d r3) goto B2 else B4\n}",
      "B2 {\n  $r6 \u003d NullValueProvider _nullProvider\u003e\n  if ($r6 !\u003d r3) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r7 \u003d EnumSetDeserializer\n  new EnumSetDeserializer(r0, r3, r4, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer",
    "methodName": "isCachable",
    "signature": "boolean isCachable()",
    "visibility": "public",
    "body": "{\r\n    // One caveat: content deserializer should prevent caching\r\n    if (_enumType.getValueHandler() !\u003d null) {\r\n        return false;\r\n    }\r\n    return true;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  EnumSetDeserializer\n  $r1 \u003d JavaType _enumType\u003e\n  $r2 \u003d $r1.getValueHandler()\n  if ($r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer",
    "methodName": "createContextual",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer createContextual(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    // 07-May-2020, tatu: Is the argument `EnumSet.class` correct here?\r\n    //    In a way seems like it should rather refer to value class... ?\r\n    //    (as it\u0027s individual value of element type, not Container)...\r\n    final Boolean unwrapSingle \u003d findFormatFeature(ctxt, property, EnumSet.class, JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\r\n    JsonDeserializer\u003c?\u003e deser \u003d _enumDeserializer;\r\n    if (deser \u003d\u003d null) {\r\n        deser \u003d ctxt.findContextualValueDeserializer(_enumType, property);\r\n    } else {\r\n        // if directly assigned, probably not yet contextual, so:\r\n        deser \u003d ctxt.handleSecondaryContextualization(deser, property, _enumType);\r\n    }\r\n    return withResolved(deser, findContentNullProvider(ctxt, property, deser), unwrapSingle);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r9 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  EnumSetDeserializer\n  DeserializationContext\n  BeanProperty\n  $r3 \u003d JsonFormat$Feature ACCEPT_SINGLE_VALUE_AS_ARRAY\u003e\n  r4 \u003d r0.findFormatFeature(r1, r2, class \"Ljava/util/EnumSet;\", $r3)\n  r9 \u003d JsonDeserializer _enumDeserializer\u003e\n  if (r9 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d JavaType _enumType\u003e\n  r10 \u003d r1.findContextualValueDeserializer($r8, r2)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d JavaType _enumType\u003e\n  r10 \u003d r1.handleSecondaryContextualization(r9, r2, $r5)\n}",
      "B3 {\n  $r6 \u003d r0.findContentNullProvider(r1, r2, r10)\n  $r7 \u003d r0.withResolved(r10, $r6, r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumSetDeserializer#findFormatFeature(...4)",
        "body": "(source not found)"
      },
      {
        "name": "EnumSetDeserializer#findContentNullProvider(...3)",
        "body": "(source not found)"
      },
      {
        "name": "EnumSetDeserializer#withResolved(...3)",
        "body": "{\r\n    if ((Objects.equals(_unwrapSingle, unwrapSingle)) \u0026\u0026 (_enumDeserializer \u003d\u003d deser) \u0026\u0026 (_nullProvider \u003d\u003d deser)) {\r\n        return this;\r\n    }\r\n    return new EnumSetDeserializer(this, deser, nuller, unwrapSingle);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer",
    "methodName": "deserialize",
    "signature": "java.util.EnumSet deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    EnumSet result \u003d constructSet();\r\n    // Ok: must point to START_ARRAY (or equivalent)\r\n    if (!p.isExpectedStartArrayToken()) {\r\n        return handleNonArray(p, ctxt, result);\r\n    }\r\n    return _deserialize(p, ctxt, result);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  EnumSetDeserializer\n  JsonParser\n  DeserializationContext\n  r1 \u003d r0.constructSet()\n  $z0 \u003d r2.isExpectedStartArrayToken()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d r0.handleNonArray(r2, r3, r1)\n  return\n}",
      "B2 {\n  $r4 \u003d r0._deserialize(r2, r3, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumSetDeserializer#handleNonArray(...3)",
        "body": "{\r\n    boolean canWrap \u003d (_unwrapSingle \u003d\u003d Boolean.TRUE) || ((_unwrapSingle \u003d\u003d null) \u0026\u0026 ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY));\r\n    if (!canWrap) {\r\n        return (EnumSet\u003c?\u003e) ctxt.handleUnexpectedToken(EnumSet.class, p);\r\n    }\r\n    // First: since `null`s not allowed, slightly simpler...\r\n    if (p.hasToken(JsonToken.VALUE_NULL)) {\r\n        return (EnumSet\u003c?\u003e) ctxt.handleUnexpectedToken(_enumType, p);\r\n    }\r\n    try {\r\n        Enum\u003c?\u003e value \u003d _enumDeserializer.deserialize(p, ctxt);\r\n        if (value !\u003d null) {\r\n            result.add(value);\r\n        }\r\n    } catch (Exception e) {\r\n        throw JsonMappingException.wrapWithPath(e, result, result.size());\r\n    }\r\n    return result;\r\n}"
      },
      {
        "name": "EnumSetDeserializer#constructSet(...0)",
        "body": "{\r\n    return EnumSet.noneOf((Class\u003cEnum\u003e) _enumType.getRawClass());\r\n}"
      },
      {
        "name": "EnumSetDeserializer#_deserialize(...3)",
        "body": "{\r\n    try {\r\n        JsonToken t;\r\n        while ((t \u003d p.nextToken()) !\u003d JsonToken.END_ARRAY) {\r\n            // What to do with nulls? Fail or ignore? Fail, for now (note: would fail if we\r\n            // passed it to EnumDeserializer, too, but in general nulls should never be passed\r\n            // to non-container deserializers)\r\n            Enum\u003c?\u003e value;\r\n            if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                if (_skipNullValues) {\r\n                    continue;\r\n                }\r\n                value \u003d (Enum\u003c?\u003e) _nullProvider.getNullValue(ctxt);\r\n            } else {\r\n                value \u003d _enumDeserializer.deserialize(p, ctxt);\r\n            }\r\n            if (value !\u003d null) {\r\n                result.add(value);\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        throw JsonMappingException.wrapWithPath(e, result, result.size());\r\n    }\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer",
    "methodName": "deserialize",
    "signature": "java.util.EnumSet deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.EnumSet)",
    "visibility": "public",
    "body": "{\r\n    // Ok: must point to START_ARRAY (or equivalent)\r\n    if (!p.isExpectedStartArrayToken()) {\r\n        return handleNonArray(p, ctxt, result);\r\n    }\r\n    return _deserialize(p, ctxt, result);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  EnumSetDeserializer\n  JsonParser\n  DeserializationContext\n  EnumSet\n  $z0 \u003d r0.isExpectedStartArrayToken()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d r1.handleNonArray(r0, r2, r3)\n  return\n}",
      "B2 {\n  $r4 \u003d r1._deserialize(r0, r2, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumSetDeserializer#handleNonArray(...3)",
        "body": "{\r\n    boolean canWrap \u003d (_unwrapSingle \u003d\u003d Boolean.TRUE) || ((_unwrapSingle \u003d\u003d null) \u0026\u0026 ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY));\r\n    if (!canWrap) {\r\n        return (EnumSet\u003c?\u003e) ctxt.handleUnexpectedToken(EnumSet.class, p);\r\n    }\r\n    // First: since `null`s not allowed, slightly simpler...\r\n    if (p.hasToken(JsonToken.VALUE_NULL)) {\r\n        return (EnumSet\u003c?\u003e) ctxt.handleUnexpectedToken(_enumType, p);\r\n    }\r\n    try {\r\n        Enum\u003c?\u003e value \u003d _enumDeserializer.deserialize(p, ctxt);\r\n        if (value !\u003d null) {\r\n            result.add(value);\r\n        }\r\n    } catch (Exception e) {\r\n        throw JsonMappingException.wrapWithPath(e, result, result.size());\r\n    }\r\n    return result;\r\n}"
      },
      {
        "name": "EnumSetDeserializer#_deserialize(...3)",
        "body": "{\r\n    try {\r\n        JsonToken t;\r\n        while ((t \u003d p.nextToken()) !\u003d JsonToken.END_ARRAY) {\r\n            // What to do with nulls? Fail or ignore? Fail, for now (note: would fail if we\r\n            // passed it to EnumDeserializer, too, but in general nulls should never be passed\r\n            // to non-container deserializers)\r\n            Enum\u003c?\u003e value;\r\n            if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                if (_skipNullValues) {\r\n                    continue;\r\n                }\r\n                value \u003d (Enum\u003c?\u003e) _nullProvider.getNullValue(ctxt);\r\n            } else {\r\n                value \u003d _enumDeserializer.deserialize(p, ctxt);\r\n            }\r\n            if (value !\u003d null) {\r\n                result.add(value);\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        throw JsonMappingException.wrapWithPath(e, result, result.size());\r\n    }\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.JdkDeserializers",
    "methodName": "find",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer find(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (_classNames.contains(clsName)) {\r\n        JsonDeserializer\u003c?\u003e d \u003d FromStringDeserializer.findDeserializer(rawType);\r\n        if (d !\u003d null) {\r\n            return d;\r\n        }\r\n        if (rawType \u003d\u003d UUID.class) {\r\n            return new UUIDDeserializer();\r\n        }\r\n        if (rawType \u003d\u003d StackTraceElement.class) {\r\n            return StackTraceElementDeserializer.construct(ctxt);\r\n        }\r\n        if (rawType \u003d\u003d AtomicBoolean.class) {\r\n            return new AtomicBooleanDeserializer();\r\n        }\r\n        if (rawType \u003d\u003d AtomicInteger.class) {\r\n            return new AtomicIntegerDeserializer();\r\n        }\r\n        if (rawType \u003d\u003d AtomicLong.class) {\r\n            return new AtomicLongDeserializer();\r\n        }\r\n        if (rawType \u003d\u003d ByteBuffer.class) {\r\n            return new ByteBufferDeserializer();\r\n        }\r\n        if (rawType \u003d\u003d Void.class) {\r\n            return NullifyingDeserializer.instance;\r\n        }\r\n        if (rawType \u003d\u003d ThreadGroup.class) {\r\n            // @since 2.19\r\n            return new ThreadGroupDeserializer();\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 20,
    "edges": 20,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B19",
      "B1 : If(r3 \u003d\u003d null) → B2 | else → B3",
      "B3 : If(r2 !\u003d class \"Ljava/util/UUID;\") → B4 | else → B5",
      "B5 : If(r2 !\u003d class \"Ljava/lang/StackTraceElement;\") → B6 | else → B7",
      "B7 : If(r2 !\u003d class \"Ljava/util/concurrent/atomic/AtomicBoolean;\") → B8 | else → B9",
      "B9 : If(r2 !\u003d class \"Ljava/util/concurrent/atomic/AtomicInteger;\") → B10 | else → B11",
      "B11 : If(r2 !\u003d class \"Ljava/util/concurrent/atomic/AtomicLong;\") → B12 | else → B13",
      "B13 : If(r2 !\u003d class \"Ljava/nio/ByteBuffer;\") → B14 | else → B15",
      "B15 : If(r2 !\u003d class \"Ljava/lang/Void;\") → B16 | else → B17",
      "B17 : If(r2 !\u003d class \"Ljava/lang/ThreadGroup;\") → B18 | else → B19"
    ],
    "blockList": [
      "B0 {\n  DeserializationContext\n  Class\n  String\n  $r1 \u003d HashSet _classNames\u003e\n  $z0 \u003d $r1.contains(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B19\n}",
      "B1 {\n  r3 \u003d FromStringDeserializer.findDeserializer(r2)\n  if (r3 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  if (r2 !\u003d class \"Ljava/util/UUID;\") goto B4 else B5\n}",
      "B4 {\n  $r12 \u003d UUIDDeserializer\n  new UUIDDeserializer()\n  return\n}",
      "B5 {\n  if (r2 !\u003d class \"Ljava/lang/StackTraceElement;\") goto B6 else B7\n}",
      "B6 {\n  $r11 \u003d StackTraceElementDeserializer.construct(r10)\n  return\n}",
      "B7 {\n  if (r2 !\u003d class \"Ljava/util/concurrent/atomic/AtomicBoolean;\") goto B8 else B9\n}",
      "B8 {\n  $r9 \u003d AtomicBooleanDeserializer\n  new AtomicBooleanDeserializer()\n  return\n}",
      "B9 {\n  if (r2 !\u003d class \"Ljava/util/concurrent/atomic/AtomicInteger;\") goto B10 else B11\n}",
      "B10 {\n  $r8 \u003d AtomicIntegerDeserializer\n  new AtomicIntegerDeserializer()\n  return\n}",
      "B11 {\n  if (r2 !\u003d class \"Ljava/util/concurrent/atomic/AtomicLong;\") goto B12 else B13\n}",
      "B12 {\n  $r7 \u003d AtomicLongDeserializer\n  new AtomicLongDeserializer()\n  return\n}",
      "B13 {\n  if (r2 !\u003d class \"Ljava/nio/ByteBuffer;\") goto B14 else B15\n}",
      "B14 {\n  $r6 \u003d ByteBufferDeserializer\n  new ByteBufferDeserializer()\n  return\n}",
      "B15 {\n  if (r2 !\u003d class \"Ljava/lang/Void;\") goto B16 else B17\n}",
      "B16 {\n  $r5 \u003d NullifyingDeserializer instance\u003e\n  return\n}",
      "B17 {\n  if (r2 !\u003d class \"Ljava/lang/ThreadGroup;\") goto B18 else B19\n}",
      "B18 {\n  $r4 \u003d ThreadGroupDeserializer\n  new ThreadGroupDeserializer()\n  return\n}",
      "B19 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B19",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer",
    "methodName": "getDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer getDeserializer(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (nodeClass \u003d\u003d ObjectNode.class) {\r\n        return ObjectDeserializer.getInstance();\r\n    }\r\n    if (nodeClass \u003d\u003d ArrayNode.class) {\r\n        return ArrayDeserializer.getInstance();\r\n    }\r\n    // For others, generic one works fine\r\n    return instance;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d class \"Lcom/fasterxml/jackson/databind/node/ObjectNode;\") → B1 | else → B2",
      "B2 : If(r0 !\u003d class \"Lcom/fasterxml/jackson/databind/node/ArrayNode;\") → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Class\n  if (r0 !\u003d class \"Lcom/fasterxml/jackson/databind/node/ObjectNode;\") goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d JsonNodeDeserializer$ObjectDeserializer.getInstance()\n  return\n}",
      "B2 {\n  if (r0 !\u003d class \"Lcom/fasterxml/jackson/databind/node/ArrayNode;\") goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d JsonNodeDeserializer$ArrayDeserializer.getInstance()\n  return\n}",
      "B4 {\n  $r1 \u003d JsonNodeDeserializer instance\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer",
    "methodName": "deserialize",
    "signature": "com.fasterxml.jackson.databind.JsonNode deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    final ContainerStack stack \u003d new ContainerStack();\r\n    final JsonNodeFactory nodeF \u003d ctxt.getNodeFactory();\r\n    switch(p.currentTokenId()) {\r\n        case JsonTokenId.ID_START_OBJECT:\r\n            return _deserializeContainerNoRecursion(p, ctxt, nodeF, stack, nodeF.objectNode());\r\n        case JsonTokenId.ID_END_OBJECT:\r\n            return nodeF.objectNode();\r\n        case JsonTokenId.ID_START_ARRAY:\r\n            return _deserializeContainerNoRecursion(p, ctxt, nodeF, stack, nodeF.arrayNode());\r\n        case JsonTokenId.ID_FIELD_NAME:\r\n            return _deserializeObjectAtName(p, ctxt, nodeF, stack);\r\n        default:\r\n    }\r\n    return _deserializeAnyScalar(p, ctxt);\r\n}",
    "nodes": 6,
    "edges": 5,
    "cc": 1,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JsonNodeDeserializer\n  JsonParser\n  DeserializationContext\n  $r0 \u003d BaseNodeDeserializer$ContainerStack\n  new BaseNodeDeserializer$ContainerStack()\n  r2 \u003d r1.getNodeFactory()\n  $i0 \u003d r3.currentTokenId()\n  DeserializationContext)\u003e(r3, r1); }\n}",
      "B1 {\n  $r9 \u003d r2.objectNode()\n  $r10 \u003d r4._deserializeContainerNoRecursion(r3, r1, r2, $r0, $r9)\n  return\n}",
      "B2 {\n  $r8 \u003d r2.objectNode()\n  return\n}",
      "B3 {\n  $r6 \u003d r2.arrayNode()\n  $r7 \u003d r4._deserializeContainerNoRecursion(r3, r1, r2, $r0, $r6)\n  return\n}",
      "B4 {\n  $r5 \u003d r4._deserializeObjectAtName(r3, r1, r2, $r0)\n  return\n}",
      "B5 {\n  $r11 \u003d r4._deserializeAnyScalar(r3, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B0 --\u003e B5",
      "B0 --\u003e B4",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JsonNodeDeserializer#_deserializeObjectAtName(...4)",
        "body": "(source not found)"
      },
      {
        "name": "JsonNodeDeserializer#_deserializeAnyScalar(...2)",
        "body": "(source not found)"
      },
      {
        "name": "JsonNodeDeserializer#_deserializeContainerNoRecursion(...5)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "methodName": "setIgnorableProperties",
    "signature": "void setIgnorableProperties(java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    _ignorableProperties \u003d (ignorable \u003d\u003d null || ignorable.length \u003d\u003d 0) ? null : ArrayBuilders.arrayToSet(ignorable);\r\n    _inclusionChecker \u003d IgnorePropertiesUtil.buildCheckerIfNeeded(_ignorableProperties, _includableProperties);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($i0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MapDeserializer\n  String[]\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d lengthof r1\n  if ($i0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d null\n  goto B4\n}",
      "B3 {\n  $r5 \u003d ArrayBuilders.arrayToSet(r1)\n}",
      "B4 {\n  Set _ignorableProperties\u003e \u003d $r5\n  $r3 \u003d Set _ignorableProperties\u003e\n  $r2 \u003d Set _includableProperties\u003e\n  $r4 \u003d IgnorePropertiesUtil.buildCheckerIfNeeded($r3, $r2)\n  IgnorePropertiesUtil$Checker _inclusionChecker\u003e \u003d $r4\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "methodName": "setIgnorableProperties",
    "signature": "void setIgnorableProperties(java.util.Set)",
    "visibility": "public",
    "body": "{\r\n    _ignorableProperties \u003d (ignorable \u003d\u003d null || ignorable.isEmpty()) ? null : ignorable;\r\n    _inclusionChecker \u003d IgnorePropertiesUtil.buildCheckerIfNeeded(_ignorableProperties, _includableProperties);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MapDeserializer\n  Set\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r1.isEmpty()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d null\n  goto B4\n}",
      "B3 {\n  $r5 \u003d r1\n}",
      "B4 {\n  Set _ignorableProperties\u003e \u003d $r5\n  $r3 \u003d Set _ignorableProperties\u003e\n  $r2 \u003d Set _includableProperties\u003e\n  $r4 \u003d IgnorePropertiesUtil.buildCheckerIfNeeded($r3, $r2)\n  IgnorePropertiesUtil$Checker _inclusionChecker\u003e \u003d $r4\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "methodName": "resolve",
    "signature": "void resolve(com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    // May need to resolve types for delegate- and/or property-based creators:\r\n    if (_valueInstantiator.canCreateUsingDelegate()) {\r\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\r\n        if (delegateType \u003d\u003d null) {\r\n            ctxt.reportBadDefinition(_containerType, String.format(\"Invalid delegate-creator definition for %s: value instantiator (%s) returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\", _containerType, _valueInstantiator.getClass().getName()));\r\n        }\r\n        // Theoretically should be able to get CreatorProperty for delegate\r\n        // parameter to pass; but things get tricky because DelegateCreator\r\n        // may contain injectable values. So, for now, let\u0027s pass nothing.\r\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, null);\r\n    } else if (_valueInstantiator.canCreateUsingArrayDelegate()) {\r\n        JavaType delegateType \u003d _valueInstantiator.getArrayDelegateType(ctxt.getConfig());\r\n        if (delegateType \u003d\u003d null) {\r\n            ctxt.reportBadDefinition(_containerType, String.format(\"Invalid delegate-creator definition for %s: value instantiator (%s) returned true for \u0027canCreateUsingArrayDelegate()\u0027, but null for \u0027getArrayDelegateType()\u0027\", _containerType, _valueInstantiator.getClass().getName()));\r\n        }\r\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, null);\r\n    }\r\n    if (_valueInstantiator.canCreateFromObjectWith()) {\r\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\r\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps, ctxt.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES));\r\n    }\r\n    _standardStringKey \u003d _isStdKeyDeser(_containerType, _keyDeserializer);\r\n}",
    "nodes": 11,
    "edges": 15,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B4",
      "B1 : If(r31 !\u003d null) → B2 | else → B3",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B8",
      "B5 : If(r32 !\u003d null) → B6 | else → B7",
      "B8 : If($z4 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  MapDeserializer\n  DeserializationContext\n  $r1 \u003d ValueInstantiator _valueInstantiator\u003e\n  $z0 \u003d $r1.canCreateUsingDelegate()\n  if ($z0 \u003d\u003d false) goto B1 else B4\n}",
      "B1 {\n  $r21 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r22 \u003d r5.getConfig()\n  r31 \u003d $r21.getDelegateType($r22)\n  if (r31 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r27 \u003d JavaType _containerType\u003e\n  $r24 \u003d Object)[2]\n  $r25 \u003d JavaType _containerType\u003e\n  $r24[0] \u003d $r25\n  $r26 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r28 \u003d $r26.getClass()\n  $r29 \u003d $r28.getName()\n  $r24[1] \u003d $r29\n  $r30 \u003d String.format(\"Invalid delegate-creator definition for %s: value instantiator (%s) returned true for \\\u0027canCreateUsingDelegate()\\\u0027, but null for \\\u0027getDelegateType()\\\u0027\", $r24)\n  r5.reportBadDefinition($r27, $r30)\n}",
      "B3 {\n  $r23 \u003d r0.findDeserializer(r5, r31, null)\n  JsonDeserializer _delegateDeserializer\u003e \u003d $r23\n  goto B8\n}",
      "B4 {\n  $r2 \u003d ValueInstantiator _valueInstantiator\u003e\n  $z1 \u003d $r2.canCreateUsingArrayDelegate()\n  if ($z1 \u003d\u003d false) goto B5 else B8\n}",
      "B5 {\n  $r11 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r12 \u003d r5.getConfig()\n  r32 \u003d $r11.getArrayDelegateType($r12)\n  if (r32 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r17 \u003d JavaType _containerType\u003e\n  $r14 \u003d Object)[2]\n  $r15 \u003d JavaType _containerType\u003e\n  $r14[0] \u003d $r15\n  $r16 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r18 \u003d $r16.getClass()\n  $r19 \u003d $r18.getName()\n  $r14[1] \u003d $r19\n  $r20 \u003d String.format(\"Invalid delegate-creator definition for %s: value instantiator (%s) returned true for \\\u0027canCreateUsingArrayDelegate()\\\u0027, but null for \\\u0027getArrayDelegateType()\\\u0027\", $r14)\n  r5.reportBadDefinition($r17, $r20)\n}",
      "B7 {\n  $r13 \u003d r0.findDeserializer(r5, r32, null)\n  JsonDeserializer _delegateDeserializer\u003e \u003d $r13\n}",
      "B8 {\n  $r33 \u003d ValueInstantiator _valueInstantiator\u003e\n  $z4 \u003d $r33.canCreateFromObjectWith()\n  if ($z4 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r6 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r7 \u003d r5.getConfig()\n  r34 \u003d $r6.getFromObjectArguments($r7)\n  $r9 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r8 \u003d MapperFeature ACCEPT_CASE_INSENSITIVE_PROPERTIES\u003e\n  $z3 \u003d r5.isEnabled($r8)\n  $r10 \u003d PropertyBasedCreator.construct(r5, $r9, r34, $z3)\n  PropertyBasedCreator _propertyBasedCreator\u003e \u003d $r10\n}",
      "B10 {\n  $r4 \u003d JavaType _containerType\u003e\n  $r3 \u003d KeyDeserializer _keyDeserializer\u003e\n  $z2 \u003d r0._isStdKeyDeser($r4, $r3)\n  MapDeserializer: boolean _standardStringKey\u003e \u003d $z2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapDeserializer#_isStdKeyDeser(...2)",
        "body": "{\r\n    if (keyDeser \u003d\u003d null) {\r\n        return true;\r\n    }\r\n    JavaType keyType \u003d mapType.getKeyType();\r\n    if (keyType \u003d\u003d null) {\r\n        // assumed to be Object\r\n        return true;\r\n    }\r\n    Class\u003c?\u003e rawKeyType \u003d keyType.getRawClass();\r\n    return ((rawKeyType \u003d\u003d String.class || rawKeyType \u003d\u003d Object.class) \u0026\u0026 isDefaultKeyDeserializer(keyDeser));\r\n}"
      },
      {
        "name": "MapDeserializer#findDeserializer(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "methodName": "createContextual",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer createContextual(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    KeyDeserializer keyDeser \u003d _keyDeserializer;\r\n    if (keyDeser \u003d\u003d null) {\r\n        keyDeser \u003d ctxt.findKeyDeserializer(_containerType.getKeyType(), property);\r\n    } else {\r\n        if (keyDeser instanceof ContextualKeyDeserializer) {\r\n            keyDeser \u003d ((ContextualKeyDeserializer) keyDeser).createContextual(ctxt, property);\r\n        }\r\n    }\r\n    JsonDeserializer\u003c?\u003e valueDeser \u003d _valueDeserializer;\r\n    // [databind#125]: May have a content converter\r\n    if (property !\u003d null) {\r\n        valueDeser \u003d findConvertingContentDeserializer(ctxt, property, valueDeser);\r\n    }\r\n    final JavaType vt \u003d _containerType.getContentType();\r\n    if (valueDeser \u003d\u003d null) {\r\n        valueDeser \u003d ctxt.findContextualValueDeserializer(vt, property);\r\n    } else {\r\n        // if directly assigned, probably not yet contextual, so:\r\n        valueDeser \u003d ctxt.handleSecondaryContextualization(valueDeser, property, vt);\r\n    }\r\n    TypeDeserializer vtd \u003d _valueTypeDeserializer;\r\n    if (vtd !\u003d null) {\r\n        vtd \u003d vtd.forProperty(property);\r\n    }\r\n    Set\u003cString\u003e ignored \u003d _ignorableProperties;\r\n    Set\u003cString\u003e included \u003d _includableProperties;\r\n    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\r\n    if (_neitherNull(intr, property)) {\r\n        AnnotatedMember member \u003d property.getMember();\r\n        if (member !\u003d null) {\r\n            final DeserializationConfig config \u003d ctxt.getConfig();\r\n            JsonIgnoreProperties.Value ignorals \u003d intr.findPropertyIgnoralByName(config, member);\r\n            if (ignorals !\u003d null) {\r\n                Set\u003cString\u003e ignoresToAdd \u003d ignorals.findIgnoredForDeserialization();\r\n                if (!ignoresToAdd.isEmpty()) {\r\n                    ignored \u003d (ignored \u003d\u003d null) ? new HashSet\u003cString\u003e() : new HashSet\u003cString\u003e(ignored);\r\n                    for (String str : ignoresToAdd) {\r\n                        ignored.add(str);\r\n                    }\r\n                }\r\n            }\r\n            JsonIncludeProperties.Value inclusions \u003d intr.findPropertyInclusionByName(config, member);\r\n            if (inclusions !\u003d null) {\r\n                Set\u003cString\u003e includedToAdd \u003d inclusions.getIncluded();\r\n                if (includedToAdd !\u003d null) {\r\n                    Set\u003cString\u003e newIncluded \u003d new HashSet\u003c\u003e();\r\n                    if (included \u003d\u003d null) {\r\n                        newIncluded \u003d new HashSet\u003c\u003e(includedToAdd);\r\n                    } else {\r\n                        for (String str : includedToAdd) {\r\n                            if (included.contains(str)) {\r\n                                newIncluded.add(str);\r\n                            }\r\n                        }\r\n                    }\r\n                    included \u003d newIncluded;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return withResolved(keyDeser, vtd, valueDeser, findContentNullProvider(ctxt, property, valueDeser), ignored, included);\r\n}",
    "nodes": 32,
    "edges": 47,
    "cc": 17,
    "flowSummary": [
      "B0 : If(r22 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If(r1 \u003d\u003d null) → B5 | else → B6",
      "B6 : If(r24 !\u003d null) → B7 | else → B8",
      "B9 : If($r17 \u003d\u003d null) → B10 | else → B11",
      "B11 : If($z1 \u003d\u003d false) → B12 | else → B31",
      "B12 : If(r4 \u003d\u003d null) → B13 | else → B31",
      "B13 : If(r6 \u003d\u003d null) → B14 | else → B21",
      "B14 : If($z4 !\u003d 0) → B15 | else → B21",
      "B15 : If($r14 !\u003d null) → B16 | else → B17",
      "B19 : If($z5 \u003d\u003d false) → B20 | else → B21",
      "B21 : If($r32 \u003d\u003d null) → B22 | else → B31",
      "B22 : If(r33 \u003d\u003d null) → B23 | else → B31",
      "B23 : If($r15 !\u003d null) → B24 | else → B25",
      "B26 : If($z2 \u003d\u003d false) → B27 | else → B30",
      "B27 : If($z3 \u003d\u003d false) → B28 | else → B29"
    ],
    "blockList": [
      "B0 {\n  MapDeserializer\n  DeserializationContext\n  BeanProperty\n  r22 \u003d KeyDeserializer _keyDeserializer\u003e\n  if (r22 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r20 \u003d JavaType _containerType\u003e\n  $r21 \u003d $r20.getKeyType()\n  r22 \u003d r3.findKeyDeserializer($r21, r1)\n  goto B4\n}",
      "B2 {\n  $z0 \u003d ContextualKeyDeserializer\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r19 \u003d ContextualKeyDeserializer) r22\n  r22 \u003d $r19.createContextual(r3, r1)\n}",
      "B4 {\n  $r23 \u003d JsonDeserializer _valueDeserializer\u003e\n  r24 \u003d $r23\n  if (r1 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  r24 \u003d r0.findConvertingContentDeserializer(r3, r1, $r23)\n}",
      "B6 {\n  $r2 \u003d JavaType _containerType\u003e\n  $r18 \u003d $r2.getContentType()\n  if (r24 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  r25 \u003d r3.findContextualValueDeserializer($r18, r1)\n  goto B9\n}",
      "B8 {\n  r25 \u003d r3.handleSecondaryContextualization(r24, r1, $r18)\n}",
      "B9 {\n  $r17 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  r26 \u003d $r17\n  if ($r17 \u003d\u003d null) goto B10 else B11\n}",
      "B10 {\n  r26 \u003d $r17.forProperty(r1)\n}",
      "B11 {\n  $r14 \u003d Set _ignorableProperties\u003e\n  r27 \u003d $r14\n  $r15 \u003d Set _includableProperties\u003e\n  r28 \u003d $r15\n  $r16 \u003d r3.getAnnotationIntrospector()\n  $z1 \u003d MapDeserializer._neitherNull($r16, r1)\n  if ($z1 \u003d\u003d false) goto B12 else B31\n}",
      "B12 {\n  r4 \u003d r1.getMember()\n  if (r4 \u003d\u003d null) goto B13 else B31\n}",
      "B13 {\n  r5 \u003d r3.getConfig()\n  r6 \u003d $r16.findPropertyIgnoralByName(r5, r4)\n  if (r6 \u003d\u003d null) goto B14 else B21\n}",
      "B14 {\n  r29 \u003d r6.findIgnoredForDeserialization()\n  $z4 \u003d r29.isEmpty()\n  if ($z4 !\u003d 0) goto B15 else B21\n}",
      "B15 {\n  if ($r14 !\u003d null) goto B16 else B17\n}",
      "B16 {\n  $r30 \u003d HashSet\n  new HashSet()\n  goto B18\n}",
      "B17 {\n  $r30 \u003d HashSet\n  new HashSet($r14)\n}",
      "B18 {\n  r27 \u003d $r30\n  $r13 \u003d r29.iterator()\n}",
      "B19 {\n  $z5 \u003d $r13.hasNext()\n  if ($z5 \u003d\u003d false) goto B20 else B21\n}",
      "B20 {\n  $r12 \u003d $r13.next()\n  r31 \u003d String) $r12\n  r27.add(r31)\n  goto B19\n}",
      "B21 {\n  $r32 \u003d $r16.findPropertyInclusionByName(r5, r4)\n  if ($r32 \u003d\u003d null) goto B22 else B31\n}",
      "B22 {\n  r33 \u003d $r32.getIncluded()\n  if (r33 \u003d\u003d null) goto B23 else B31\n}",
      "B23 {\n  $r7 \u003d HashSet\n  new HashSet()\n  r34 \u003d $r7\n  if ($r15 !\u003d null) goto B24 else B25\n}",
      "B24 {\n  $r11 \u003d HashSet\n  new HashSet(r33)\n  r34 \u003d $r11\n  goto B30\n}",
      "B25 {\n  r8 \u003d r33.iterator()\n}",
      "B26 {\n  $z2 \u003d r8.hasNext()\n  if ($z2 \u003d\u003d false) goto B27 else B30\n}",
      "B27 {\n  $r9 \u003d r8.next()\n  r10 \u003d String) $r9\n  $z3 \u003d $r15.contains(r10)\n  if ($z3 \u003d\u003d false) goto B28 else B29\n}",
      "B28 {\n  $r7.add(r10)\n}",
      "B29 {\n  goto B26\n}",
      "B30 {\n  r28 \u003d r34\n}",
      "B31 {\n  $r35 \u003d r0.findContentNullProvider(r3, r1, r25)\n  $r36 \u003d r0.withResolved(r22, r26, r25, $r35, r27, r28)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B31",
      "B12 --\u003e B13",
      "B12 --\u003e B31",
      "B13 --\u003e B14",
      "B13 --\u003e B21",
      "B14 --\u003e B15",
      "B14 --\u003e B21",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B19",
      "B21 --\u003e B22",
      "B21 --\u003e B31",
      "B22 --\u003e B23",
      "B22 --\u003e B31",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B30",
      "B25 --\u003e B26",
      "B26 --\u003e B27",
      "B26 --\u003e B30",
      "B27 --\u003e B28",
      "B27 --\u003e B29",
      "B28 --\u003e B29",
      "B29 --\u003e B26",
      "B30 --\u003e B31",
      "B31 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapDeserializer#_neitherNull(...2)",
        "body": "(source not found)"
      },
      {
        "name": "MapDeserializer#withResolved(...6)",
        "body": "{\r\n    if ((_keyDeserializer \u003d\u003d keyDeser) \u0026\u0026 (_valueDeserializer \u003d\u003d valueDeser) \u0026\u0026 (_valueTypeDeserializer \u003d\u003d valueTypeDeser) \u0026\u0026 (_nullProvider \u003d\u003d nuller) \u0026\u0026 (_ignorableProperties \u003d\u003d ignorable) \u0026\u0026 (_includableProperties \u003d\u003d includable)) {\r\n        return this;\r\n    }\r\n    return new MapDeserializer(this, keyDeser, (JsonDeserializer\u003cObject\u003e) valueDeser, valueTypeDeser, nuller, ignorable, includable);\r\n}"
      },
      {
        "name": "MapDeserializer#findContentNullProvider(...3)",
        "body": "(source not found)"
      },
      {
        "name": "MapDeserializer#findConvertingContentDeserializer(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "methodName": "isCachable",
    "signature": "boolean isCachable()",
    "visibility": "public",
    "body": "{\r\n    // As per [databind#735], existence of value or key deserializer (only passed\r\n    // if annotated to use non-standard one) should also prevent caching.\r\n    return (_valueDeserializer \u003d\u003d null) \u0026\u0026 (_keyDeserializer \u003d\u003d null) \u0026\u0026 (_valueTypeDeserializer \u003d\u003d null) \u0026\u0026 (_ignorableProperties \u003d\u003d null) \u0026\u0026 (_includableProperties \u003d\u003d null);\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B6",
      "B1 : If($r2 !\u003d null) → B2 | else → B6",
      "B2 : If($r3 !\u003d null) → B3 | else → B6",
      "B3 : If($r4 !\u003d null) → B4 | else → B6",
      "B4 : If($r5 !\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  MapDeserializer\n  $r1 \u003d JsonDeserializer _valueDeserializer\u003e\n  if ($r1 !\u003d null) goto B1 else B6\n}",
      "B1 {\n  $r2 \u003d KeyDeserializer _keyDeserializer\u003e\n  if ($r2 !\u003d null) goto B2 else B6\n}",
      "B2 {\n  $r3 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  if ($r3 !\u003d null) goto B3 else B6\n}",
      "B3 {\n  $r4 \u003d Set _ignorableProperties\u003e\n  if ($r4 !\u003d null) goto B4 else B6\n}",
      "B4 {\n  $r5 \u003d Set _includableProperties\u003e\n  if ($r5 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $z0 \u003d 1\n  goto B7\n}",
      "B6 {\n  $z0 \u003d 0\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "methodName": "deserialize",
    "signature": "java.util.Map deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    if (_propertyBasedCreator !\u003d null) {\r\n        return _deserializeUsingCreator(p, ctxt);\r\n    }\r\n    if (_delegateDeserializer !\u003d null) {\r\n        return (Map\u003cObject, Object\u003e) _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\r\n    }\r\n    if (!_hasDefaultCreator) {\r\n        return (Map\u003cObject, Object\u003e) ctxt.handleMissingInstantiator(getMapClass(), getValueInstantiator(), p, \"no default constructor found\");\r\n    }\r\n    switch(p.currentTokenId()) {\r\n        case JsonTokenId.ID_START_OBJECT:\r\n        case JsonTokenId.ID_END_OBJECT:\r\n        case JsonTokenId.ID_FIELD_NAME:\r\n            final Map\u003cObject, Object\u003e result \u003d (Map\u003cObject, Object\u003e) _valueInstantiator.createUsingDefault(ctxt);\r\n            if (_standardStringKey) {\r\n                return _readAndBindStringKeyMap(p, ctxt, result);\r\n            }\r\n            return _readAndBind(p, ctxt, result);\r\n        case JsonTokenId.ID_STRING:\r\n            // (empty) String may be ok however; or single-String-arg ctor\r\n            return _deserializeFromString(p, ctxt);\r\n        case JsonTokenId.ID_START_ARRAY:\r\n            // Empty array, or single-value wrapped in array?\r\n            return _deserializeFromArray(p, ctxt);\r\n        default:\r\n    }\r\n    return (Map\u003cObject, Object\u003e) ctxt.handleUnexpectedToken(getValueType(ctxt), p);\r\n}",
    "nodes": 13,
    "edges": 12,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r2 \u003d\u003d null) → B3 | else → B4",
      "B4 : If($z0 !\u003d 0) → B5 | else → B6",
      "B6 : If(switch-on $i0) → B7 | else → B11",
      "B7 : If($z1 \u003d\u003d false) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  MapDeserializer\n  JsonParser\n  DeserializationContext\n  $r1 \u003d PropertyBasedCreator _propertyBasedCreator\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r27 \u003d r0._deserializeUsingCreator(r3, r4)\n  return\n}",
      "B2 {\n  $r2 \u003d JsonDeserializer _delegateDeserializer\u003e\n  if ($r2 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r23 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r22 \u003d JsonDeserializer _delegateDeserializer\u003e\n  $r24 \u003d $r22.deserialize(r3, r4)\n  $r25 \u003d $r23.createUsingDelegate(r4, $r24)\n  $r26 \u003d Map) $r25\n  return\n}",
      "B4 {\n  $z0 \u003d MapDeserializer: boolean _hasDefaultCreator\u003e\n  if ($z0 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r19 \u003d r0.getMapClass()\n  $r18 \u003d r0.getValueInstantiator()\n  $r17 \u003d Object)[0]\n  $r20 \u003d r4.handleMissingInstantiator($r19, $r18, r3, \"no default constructor found\", $r17)\n  $r21 \u003d Map) $r20\n  return\n}",
      "B6 {\n  $i0 \u003d r3.currentTokenId()\n  DeserializationContext)\u003e(r4); }\n}",
      "B7 {\n  $r9 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r10 \u003d $r9.createUsingDefault(r4)\n  r11 \u003d Map) $r10\n  $z1 \u003d MapDeserializer: boolean _standardStringKey\u003e\n  if ($z1 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $r13 \u003d r0._readAndBindStringKeyMap(r3, r4, r11)\n  return\n}",
      "B9 {\n  $r12 \u003d r0._readAndBind(r3, r4, r11)\n  return\n}",
      "B10 {\n  $r5 \u003d r0._deserializeFromString(r3, r4)\n  $r6 \u003d Map) $r5\n  return\n}",
      "B11 {\n  $r7 \u003d r0._deserializeFromArray(r3, r4)\n  $r8 \u003d Map) $r7\n  return\n}",
      "B12 {\n  $r14 \u003d r0.getValueType(r4)\n  $r15 \u003d r4.handleUnexpectedToken($r14, r3)\n  $r16 \u003d Map) $r15\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B11",
      "B6 --\u003e B12",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapDeserializer#_deserializeFromString(...2)",
        "body": "(source not found)"
      },
      {
        "name": "MapDeserializer#getValueInstantiator(...0)",
        "body": "{\r\n    return _valueInstantiator;\r\n}"
      },
      {
        "name": "MapDeserializer#_readAndBind(...3)",
        "body": "{\r\n    final KeyDeserializer keyDes \u003d _keyDeserializer;\r\n    final JsonDeserializer\u003cObject\u003e valueDes \u003d _valueDeserializer;\r\n    final TypeDeserializer typeDeser \u003d _valueTypeDeserializer;\r\n    MapReferringAccumulator referringAccumulator \u003d null;\r\n    boolean useObjectId \u003d valueDes.getObjectIdReader() !\u003d null;\r\n    if (useObjectId) {\r\n        referringAccumulator \u003d new MapReferringAccumulator(_containerType.getContentType().getRawClass(), result);\r\n    }\r\n    String keyStr;\r\n    if (p.isExpectedStartObjectToken()) {\r\n        keyStr \u003d p.nextFieldName();\r\n    } else {\r\n        JsonToken t \u003d p.currentToken();\r\n        if (t !\u003d JsonToken.FIELD_NAME) {\r\n            if (t \u003d\u003d JsonToken.END_OBJECT) {\r\n                return result;\r\n            }\r\n            ctxt.reportWrongTokenException(this, JsonToken.FIELD_NAME, null);\r\n        }\r\n        keyStr \u003d p.currentName();\r\n    }\r\n    for (; keyStr !\u003d null; keyStr \u003d p.nextFieldName()) {\r\n        Object key \u003d keyDes.deserializeKey(keyStr, ctxt);\r\n        // And then the value...\r\n        JsonToken t \u003d p.nextToken();\r\n        if ((_inclusionChecker !\u003d null) \u0026\u0026 _inclusionChecker.shouldIgnore(keyStr)) {\r\n            p.skipChildren();\r\n            continue;\r\n        }\r\n        try {\r\n            // Note: must handle null explicitly here; value deserializers won\u0027t\r\n            Object value;\r\n            if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                if (_skipNullValues) {\r\n                    continue;\r\n                }\r\n                value \u003d _nullProvider.getNullValue(ctxt);\r\n            } else if (typeDeser \u003d\u003d null) {\r\n                value \u003d valueDes.deserialize(p, ctxt);\r\n            } else {\r\n                value \u003d valueDes.deserializeWithType(p, ctxt, typeDeser);\r\n            }\r\n            if (useObjectId) {\r\n                referringAccumulator.put(key, value);\r\n            } else {\r\n                Object oldValue \u003d result.put(key, value);\r\n                if (oldValue !\u003d null) {\r\n                    _squashDups(ctxt, result, key, oldValue, value);\r\n                }\r\n            }\r\n        } catch (UnresolvedForwardReference reference) {\r\n            handleUnresolvedReference(ctxt, referringAccumulator, key, reference);\r\n        } catch (Exception e) {\r\n            wrapAndThrow(ctxt, e, result, keyStr);\r\n        }\r\n    }\r\n    return result;\r\n}"
      },
      {
        "name": "MapDeserializer#_deserializeUsingCreator(...2)",
        "body": "{\r\n    final PropertyBasedCreator creator \u003d _propertyBasedCreator;\r\n    // null -\u003e no ObjectIdReader for Maps (yet?)\r\n    PropertyValueBuffer buffer \u003d creator.startBuilding(p, ctxt, null);\r\n    final JsonDeserializer\u003cObject\u003e valueDes \u003d _valueDeserializer;\r\n    final TypeDeserializer typeDeser \u003d _valueTypeDeserializer;\r\n    String key;\r\n    if (p.isExpectedStartObjectToken()) {\r\n        key \u003d p.nextFieldName();\r\n    } else if (p.hasToken(JsonToken.FIELD_NAME)) {\r\n        key \u003d p.currentName();\r\n    } else {\r\n        key \u003d null;\r\n    }\r\n    for (; key !\u003d null; key \u003d p.nextFieldName()) {\r\n        // to get to value\r\n        JsonToken t \u003d p.nextToken();\r\n        if ((_inclusionChecker !\u003d null) \u0026\u0026 _inclusionChecker.shouldIgnore(key)) {\r\n            // and skip it (in case of array/object)\r\n            p.skipChildren();\r\n            continue;\r\n        }\r\n        // creator property?\r\n        SettableBeanProperty prop \u003d creator.findCreatorProperty(key);\r\n        if (prop !\u003d null) {\r\n            // Last property to set?\r\n            if (buffer.assignParameter(prop, prop.deserialize(p, ctxt))) {\r\n                // from value to END_OBJECT or FIELD_NAME\r\n                p.nextToken();\r\n                Map\u003cObject, Object\u003e result;\r\n                try {\r\n                    result \u003d (Map\u003cObject, Object\u003e) creator.build(ctxt, buffer);\r\n                } catch (Exception e) {\r\n                    return wrapAndThrow(ctxt, e, _containerType.getRawClass(), key);\r\n                }\r\n                return _readAndBind(p, ctxt, result);\r\n            }\r\n            continue;\r\n        }\r\n        // other property? needs buffering\r\n        Object actualKey \u003d _keyDeserializer.deserializeKey(key, ctxt);\r\n        Object value;\r\n        try {\r\n            if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                if (_skipNullValues) {\r\n                    continue;\r\n                }\r\n                value \u003d _nullProvider.getNullValue(ctxt);\r\n            } else if (typeDeser \u003d\u003d null) {\r\n                value \u003d valueDes.deserialize(p, ctxt);\r\n            } else {\r\n                value \u003d valueDes.deserializeWithType(p, ctxt, typeDeser);\r\n            }\r\n        } catch (Exception e) {\r\n            wrapAndThrow(ctxt, e, _containerType.getRawClass(), key);\r\n            return null;\r\n        }\r\n        buffer.bufferMapProperty(actualKey, value);\r\n    }\r\n    // end of JSON object?\r\n    // if so, can just construct and leave...\r\n    try {\r\n        return (Map\u003cObject, Object\u003e) creator.build(ctxt, buffer);\r\n    } catch (Exception e) {\r\n        wrapAndThrow(ctxt, e, _containerType.getRawClass(), key);\r\n        return null;\r\n    }\r\n}"
      },
      {
        "name": "MapDeserializer#_deserializeFromArray(...2)",
        "body": "(source not found)"
      },
      {
        "name": "MapDeserializer#_readAndBindStringKeyMap(...3)",
        "body": "{\r\n    final JsonDeserializer\u003cObject\u003e valueDes \u003d _valueDeserializer;\r\n    final TypeDeserializer typeDeser \u003d _valueTypeDeserializer;\r\n    MapReferringAccumulator referringAccumulator \u003d null;\r\n    boolean useObjectId \u003d (valueDes.getObjectIdReader() !\u003d null);\r\n    if (useObjectId) {\r\n        referringAccumulator \u003d new MapReferringAccumulator(_containerType.getContentType().getRawClass(), result);\r\n    }\r\n    String key;\r\n    if (p.isExpectedStartObjectToken()) {\r\n        key \u003d p.nextFieldName();\r\n    } else {\r\n        JsonToken t \u003d p.currentToken();\r\n        if (t \u003d\u003d JsonToken.END_OBJECT) {\r\n            return result;\r\n        }\r\n        if (t !\u003d JsonToken.FIELD_NAME) {\r\n            ctxt.reportWrongTokenException(this, JsonToken.FIELD_NAME, null);\r\n        }\r\n        key \u003d p.currentName();\r\n    }\r\n    for (; key !\u003d null; key \u003d p.nextFieldName()) {\r\n        JsonToken t \u003d p.nextToken();\r\n        if ((_inclusionChecker !\u003d null) \u0026\u0026 _inclusionChecker.shouldIgnore(key)) {\r\n            p.skipChildren();\r\n            continue;\r\n        }\r\n        try {\r\n            // Note: must handle null explicitly here; value deserializers won\u0027t\r\n            Object value;\r\n            if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                if (_skipNullValues) {\r\n                    continue;\r\n                }\r\n                value \u003d _nullProvider.getNullValue(ctxt);\r\n            } else if (typeDeser \u003d\u003d null) {\r\n                value \u003d valueDes.deserialize(p, ctxt);\r\n            } else {\r\n                value \u003d valueDes.deserializeWithType(p, ctxt, typeDeser);\r\n            }\r\n            if (useObjectId) {\r\n                referringAccumulator.put(key, value);\r\n            } else {\r\n                Object oldValue \u003d result.put(key, value);\r\n                if (oldValue !\u003d null) {\r\n                    _squashDups(ctxt, result, key, oldValue, value);\r\n                }\r\n            }\r\n        } catch (UnresolvedForwardReference reference) {\r\n            handleUnresolvedReference(ctxt, referringAccumulator, key, reference);\r\n        } catch (Exception e) {\r\n            wrapAndThrow(ctxt, e, result, key);\r\n        }\r\n    }\r\n    // 23-Mar-2015, tatu: TODO: verify we got END_OBJECT?\r\n    return result;\r\n}"
      },
      {
        "name": "MapDeserializer#getMapClass(...0)",
        "body": "{\r\n    return (Class\u003cMap\u003cObject, Object\u003e\u003e) _containerType.getRawClass();\r\n}"
      },
      {
        "name": "MapDeserializer#getValueType(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "methodName": "deserialize",
    "signature": "java.util.Map deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    // [databind#631]: Assign current value, to be accessible by custom deserializers\r\n    p.assignCurrentValue(result);\r\n    // Ok: must point to START_OBJECT or FIELD_NAME\r\n    JsonToken t \u003d p.currentToken();\r\n    if (t !\u003d JsonToken.START_OBJECT \u0026\u0026 t !\u003d JsonToken.FIELD_NAME) {\r\n        return (Map\u003cObject, Object\u003e) ctxt.handleUnexpectedToken(getMapClass(), p);\r\n    }\r\n    // 21-Apr-2017, tatu: Need separate methods to do proper merging\r\n    if (_standardStringKey) {\r\n        _readAndUpdateStringKeyMap(p, ctxt, result);\r\n        return result;\r\n    }\r\n    _readAndUpdate(p, ctxt, result);\r\n    return result;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d $r3) → B1 | else → B3",
      "B1 : If(r2 \u003d\u003d $r6) → B2 | else → B3",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MapDeserializer\n  JsonParser\n  DeserializationContext\n  Map\n  r0.assignCurrentValue(r1)\n  r2 \u003d r0.currentToken()\n  $r3 \u003d JsonToken START_OBJECT\u003e\n  if (r2 \u003d\u003d $r3) goto B1 else B3\n}",
      "B1 {\n  $r6 \u003d JsonToken FIELD_NAME\u003e\n  if (r2 \u003d\u003d $r6) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d r4.getMapClass()\n  $r8 \u003d r5.handleUnexpectedToken($r7, r0)\n  $r9 \u003d Map) $r8\n  return\n}",
      "B3 {\n  $z0 \u003d MapDeserializer: boolean _standardStringKey\u003e\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  r4._readAndUpdateStringKeyMap(r0, r5, r1)\n  return\n}",
      "B5 {\n  r4._readAndUpdate(r0, r5, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapDeserializer#_readAndUpdate(...3)",
        "body": "{\r\n    final KeyDeserializer keyDes \u003d _keyDeserializer;\r\n    final JsonDeserializer\u003cObject\u003e valueDes \u003d _valueDeserializer;\r\n    final TypeDeserializer typeDeser \u003d _valueTypeDeserializer;\r\n    // Note: assumption is that Object Id handling can\u0027t really work with merging\r\n    // and thereby we can (and should) just drop that part\r\n    String keyStr;\r\n    if (p.isExpectedStartObjectToken()) {\r\n        keyStr \u003d p.nextFieldName();\r\n    } else {\r\n        JsonToken t \u003d p.currentToken();\r\n        if (t \u003d\u003d JsonToken.END_OBJECT) {\r\n            return;\r\n        }\r\n        if (t !\u003d JsonToken.FIELD_NAME) {\r\n            ctxt.reportWrongTokenException(this, JsonToken.FIELD_NAME, null);\r\n        }\r\n        keyStr \u003d p.currentName();\r\n    }\r\n    for (; keyStr !\u003d null; keyStr \u003d p.nextFieldName()) {\r\n        Object key \u003d keyDes.deserializeKey(keyStr, ctxt);\r\n        // And then the value...\r\n        JsonToken t \u003d p.nextToken();\r\n        if ((_inclusionChecker !\u003d null) \u0026\u0026 _inclusionChecker.shouldIgnore(keyStr)) {\r\n            p.skipChildren();\r\n            continue;\r\n        }\r\n        try {\r\n            // Note: must handle null explicitly here, can\u0027t merge etc\r\n            if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                if (_skipNullValues) {\r\n                    continue;\r\n                }\r\n                result.put(key, _nullProvider.getNullValue(ctxt));\r\n                continue;\r\n            }\r\n            Object old \u003d result.get(key);\r\n            Object value;\r\n            if (old !\u003d null) {\r\n                if (typeDeser \u003d\u003d null) {\r\n                    value \u003d valueDes.deserialize(p, ctxt, old);\r\n                } else {\r\n                    value \u003d valueDes.deserializeWithType(p, ctxt, typeDeser, old);\r\n                }\r\n            } else if (typeDeser \u003d\u003d null) {\r\n                value \u003d valueDes.deserialize(p, ctxt);\r\n            } else {\r\n                value \u003d valueDes.deserializeWithType(p, ctxt, typeDeser);\r\n            }\r\n            if (value !\u003d old) {\r\n                result.put(key, value);\r\n            }\r\n        } catch (Exception e) {\r\n            wrapAndThrow(ctxt, e, result, keyStr);\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "MapDeserializer#getMapClass(...0)",
        "body": "{\r\n    return (Class\u003cMap\u003cObject, Object\u003e\u003e) _containerType.getRawClass();\r\n}"
      },
      {
        "name": "MapDeserializer#_readAndUpdateStringKeyMap(...3)",
        "body": "{\r\n    final JsonDeserializer\u003cObject\u003e valueDes \u003d _valueDeserializer;\r\n    final TypeDeserializer typeDeser \u003d _valueTypeDeserializer;\r\n    // Note: assumption is that Object Id handling can\u0027t really work with merging\r\n    // and thereby we can (and should) just drop that part\r\n    String key;\r\n    if (p.isExpectedStartObjectToken()) {\r\n        key \u003d p.nextFieldName();\r\n    } else {\r\n        JsonToken t \u003d p.currentToken();\r\n        if (t \u003d\u003d JsonToken.END_OBJECT) {\r\n            return;\r\n        }\r\n        if (t !\u003d JsonToken.FIELD_NAME) {\r\n            ctxt.reportWrongTokenException(this, JsonToken.FIELD_NAME, null);\r\n        }\r\n        key \u003d p.currentName();\r\n    }\r\n    for (; key !\u003d null; key \u003d p.nextFieldName()) {\r\n        JsonToken t \u003d p.nextToken();\r\n        if ((_inclusionChecker !\u003d null) \u0026\u0026 _inclusionChecker.shouldIgnore(key)) {\r\n            p.skipChildren();\r\n            continue;\r\n        }\r\n        try {\r\n            // Note: must handle null explicitly here, can\u0027t merge etc\r\n            if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                if (_skipNullValues) {\r\n                    continue;\r\n                }\r\n                result.put(key, _nullProvider.getNullValue(ctxt));\r\n                continue;\r\n            }\r\n            Object old \u003d result.get(key);\r\n            Object value;\r\n            if (old !\u003d null) {\r\n                if (typeDeser \u003d\u003d null) {\r\n                    value \u003d valueDes.deserialize(p, ctxt, old);\r\n                } else {\r\n                    value \u003d valueDes.deserializeWithType(p, ctxt, typeDeser, old);\r\n                }\r\n            } else if (typeDeser \u003d\u003d null) {\r\n                value \u003d valueDes.deserialize(p, ctxt);\r\n            } else {\r\n                value \u003d valueDes.deserializeWithType(p, ctxt, typeDeser);\r\n            }\r\n            if (value !\u003d old) {\r\n                result.put(key, value);\r\n            }\r\n        } catch (Exception e) {\r\n            wrapAndThrow(ctxt, e, result, key);\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "methodName": "_deserializeUsingCreator",
    "signature": "java.util.Map _deserializeUsingCreator(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    final PropertyBasedCreator creator \u003d _propertyBasedCreator;\r\n    // null -\u003e no ObjectIdReader for Maps (yet?)\r\n    PropertyValueBuffer buffer \u003d creator.startBuilding(p, ctxt, null);\r\n    final JsonDeserializer\u003cObject\u003e valueDes \u003d _valueDeserializer;\r\n    final TypeDeserializer typeDeser \u003d _valueTypeDeserializer;\r\n    String key;\r\n    if (p.isExpectedStartObjectToken()) {\r\n        key \u003d p.nextFieldName();\r\n    } else if (p.hasToken(JsonToken.FIELD_NAME)) {\r\n        key \u003d p.currentName();\r\n    } else {\r\n        key \u003d null;\r\n    }\r\n    for (; key !\u003d null; key \u003d p.nextFieldName()) {\r\n        // to get to value\r\n        JsonToken t \u003d p.nextToken();\r\n        if ((_inclusionChecker !\u003d null) \u0026\u0026 _inclusionChecker.shouldIgnore(key)) {\r\n            // and skip it (in case of array/object)\r\n            p.skipChildren();\r\n            continue;\r\n        }\r\n        // creator property?\r\n        SettableBeanProperty prop \u003d creator.findCreatorProperty(key);\r\n        if (prop !\u003d null) {\r\n            // Last property to set?\r\n            if (buffer.assignParameter(prop, prop.deserialize(p, ctxt))) {\r\n                // from value to END_OBJECT or FIELD_NAME\r\n                p.nextToken();\r\n                Map\u003cObject, Object\u003e result;\r\n                try {\r\n                    result \u003d (Map\u003cObject, Object\u003e) creator.build(ctxt, buffer);\r\n                } catch (Exception e) {\r\n                    return wrapAndThrow(ctxt, e, _containerType.getRawClass(), key);\r\n                }\r\n                return _readAndBind(p, ctxt, result);\r\n            }\r\n            continue;\r\n        }\r\n        // other property? needs buffering\r\n        Object actualKey \u003d _keyDeserializer.deserializeKey(key, ctxt);\r\n        Object value;\r\n        try {\r\n            if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                if (_skipNullValues) {\r\n                    continue;\r\n                }\r\n                value \u003d _nullProvider.getNullValue(ctxt);\r\n            } else if (typeDeser \u003d\u003d null) {\r\n                value \u003d valueDes.deserialize(p, ctxt);\r\n            } else {\r\n                value \u003d valueDes.deserializeWithType(p, ctxt, typeDeser);\r\n            }\r\n        } catch (Exception e) {\r\n            wrapAndThrow(ctxt, e, _containerType.getRawClass(), key);\r\n            return null;\r\n        }\r\n        buffer.bufferMapProperty(actualKey, value);\r\n    }\r\n    // end of JSON object?\r\n    // if so, can just construct and leave...\r\n    try {\r\n        return (Map\u003cObject, Object\u003e) creator.build(ctxt, buffer);\r\n    } catch (Exception e) {\r\n        wrapAndThrow(ctxt, e, _containerType.getRawClass(), key);\r\n        return null;\r\n    }\r\n}",
    "nodes": 27,
    "edges": 32,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B5 : If(r30 \u003d\u003d null) → B6 | else → B25",
      "B6 : If($r10 \u003d\u003d null) → B7 | else → B9",
      "B7 : If($z4 \u003d\u003d false) → B8 | else → B9",
      "B9 : If($r18 \u003d\u003d null) → B10 | else → B14",
      "B10 : If($z3 \u003d\u003d false) → B11 | else → B24",
      "B14 : If(r31 !\u003d $r12) → B15 | else → B18",
      "B15 : If($z2 \u003d\u003d false) → B16 | else → B17",
      "B18 : If(r6 !\u003d null) → B19 | else → B20"
    ],
    "blockList": [
      "B0 {\n  MapDeserializer\n  JsonParser\n  DeserializationContext\n  r1 \u003d PropertyBasedCreator _propertyBasedCreator\u003e\n  r4 \u003d r1.startBuilding(r2, r3, null)\n  r5 \u003d JsonDeserializer _valueDeserializer\u003e\n  r6 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  $z0 \u003d r2.isExpectedStartObjectToken()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r30 \u003d r2.nextFieldName()\n  goto B5\n}",
      "B2 {\n  $r7 \u003d JsonToken FIELD_NAME\u003e\n  $z1 \u003d r2.hasToken($r7)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  r30 \u003d r2.currentName()\n  goto B5\n}",
      "B4 {\n  r30 \u003d null\n}",
      "B5 {\n  if (r30 \u003d\u003d null) goto B6 else B25\n}",
      "B6 {\n  r31 \u003d r2.nextToken()\n  $r10 \u003d IgnorePropertiesUtil$Checker _inclusionChecker\u003e\n  if ($r10 \u003d\u003d null) goto B7 else B9\n}",
      "B7 {\n  $r17 \u003d IgnorePropertiesUtil$Checker _inclusionChecker\u003e\n  $z4 \u003d $r17.shouldIgnore(r30)\n  if ($z4 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  r2.skipChildren()\n  goto B24\n}",
      "B9 {\n  $r18 \u003d r1.findCreatorProperty(r30)\n  if ($r18 \u003d\u003d null) goto B10 else B14\n}",
      "B10 {\n  $r14 \u003d $r18.deserialize(r2, r3)\n  $z3 \u003d r4.assignParameter($r18, $r14)\n  if ($z3 \u003d\u003d false) goto B11 else B24\n}",
      "B11 {\n  r2.nextToken()\n  $r15 \u003d r1.build(r3, r4)\n  r32 \u003d Map) $r15\n  goto B13\n}",
      "B12 {\n  $r25 :\u003d @caughtexception\n  $r26 \u003d JavaType _containerType\u003e\n  $r27 \u003d $r26.getRawClass()\n  $r28 \u003d r0.wrapAndThrow(r3, $r25, $r27, r30)\n  $r29 \u003d Map) $r28\n  return\n}",
      "B13 {\n  $r16 \u003d r0._readAndBind(r2, r3, r32)\n  return\n}",
      "B14 {\n  $r11 \u003d KeyDeserializer _keyDeserializer\u003e\n  r33 \u003d $r11.deserializeKey(r30, r3)\n  $r12 \u003d JsonToken VALUE_NULL\u003e\n  if (r31 !\u003d $r12) goto B15 else B18\n}",
      "B15 {\n  $z2 \u003d MapDeserializer: boolean _skipNullValues\u003e\n  if ($z2 \u003d\u003d false) goto B16 else B17\n}",
      "B16 {\n  goto B24\n}",
      "B17 {\n  $r13 \u003d NullValueProvider _nullProvider\u003e\n  r34 \u003d $r13.getNullValue(r3)\n  goto B21\n}",
      "B18 {\n  if (r6 !\u003d null) goto B19 else B20\n}",
      "B19 {\n  r34 \u003d r5.deserialize(r2, r3)\n  goto B21\n}",
      "B20 {\n  r34 \u003d r5.deserializeWithType(r2, r3, r6)\n}",
      "B21 {\n  goto B23\n}",
      "B22 {\n  $r22 :\u003d @caughtexception\n  $r23 \u003d JavaType _containerType\u003e\n  $r24 \u003d $r23.getRawClass()\n  r0.wrapAndThrow(r3, $r22, $r24, r30)\n  return\n}",
      "B23 {\n  r4.bufferMapProperty(r33, r34)\n}",
      "B24 {\n  r30 \u003d r2.nextFieldName()\n  goto B5\n}",
      "B25 {\n  $r8 \u003d r1.build(r3, r4)\n  $r9 \u003d Map) $r8\n  return\n}",
      "B26 {\n  $r19 :\u003d @caughtexception\n  $r20 \u003d JavaType _containerType\u003e\n  $r21 \u003d $r20.getRawClass()\n  r0.wrapAndThrow(r3, $r19, $r21, r30)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B25",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B24",
      "B9 --\u003e B10",
      "B9 --\u003e B14",
      "B10 --\u003e B11",
      "B10 --\u003e B24",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B18",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B24",
      "B17 --\u003e B21",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B21",
      "B21 --\u003e B23",
      "B22 --\u003e [EXIT]",
      "B23 --\u003e B24",
      "B24 --\u003e B5",
      "B25 --\u003e [EXIT]",
      "B26 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapDeserializer#_readAndBind(...3)",
        "body": "{\r\n    final KeyDeserializer keyDes \u003d _keyDeserializer;\r\n    final JsonDeserializer\u003cObject\u003e valueDes \u003d _valueDeserializer;\r\n    final TypeDeserializer typeDeser \u003d _valueTypeDeserializer;\r\n    MapReferringAccumulator referringAccumulator \u003d null;\r\n    boolean useObjectId \u003d valueDes.getObjectIdReader() !\u003d null;\r\n    if (useObjectId) {\r\n        referringAccumulator \u003d new MapReferringAccumulator(_containerType.getContentType().getRawClass(), result);\r\n    }\r\n    String keyStr;\r\n    if (p.isExpectedStartObjectToken()) {\r\n        keyStr \u003d p.nextFieldName();\r\n    } else {\r\n        JsonToken t \u003d p.currentToken();\r\n        if (t !\u003d JsonToken.FIELD_NAME) {\r\n            if (t \u003d\u003d JsonToken.END_OBJECT) {\r\n                return result;\r\n            }\r\n            ctxt.reportWrongTokenException(this, JsonToken.FIELD_NAME, null);\r\n        }\r\n        keyStr \u003d p.currentName();\r\n    }\r\n    for (; keyStr !\u003d null; keyStr \u003d p.nextFieldName()) {\r\n        Object key \u003d keyDes.deserializeKey(keyStr, ctxt);\r\n        // And then the value...\r\n        JsonToken t \u003d p.nextToken();\r\n        if ((_inclusionChecker !\u003d null) \u0026\u0026 _inclusionChecker.shouldIgnore(keyStr)) {\r\n            p.skipChildren();\r\n            continue;\r\n        }\r\n        try {\r\n            // Note: must handle null explicitly here; value deserializers won\u0027t\r\n            Object value;\r\n            if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                if (_skipNullValues) {\r\n                    continue;\r\n                }\r\n                value \u003d _nullProvider.getNullValue(ctxt);\r\n            } else if (typeDeser \u003d\u003d null) {\r\n                value \u003d valueDes.deserialize(p, ctxt);\r\n            } else {\r\n                value \u003d valueDes.deserializeWithType(p, ctxt, typeDeser);\r\n            }\r\n            if (useObjectId) {\r\n                referringAccumulator.put(key, value);\r\n            } else {\r\n                Object oldValue \u003d result.put(key, value);\r\n                if (oldValue !\u003d null) {\r\n                    _squashDups(ctxt, result, key, oldValue, value);\r\n                }\r\n            }\r\n        } catch (UnresolvedForwardReference reference) {\r\n            handleUnresolvedReference(ctxt, referringAccumulator, key, reference);\r\n        } catch (Exception e) {\r\n            wrapAndThrow(ctxt, e, result, keyStr);\r\n        }\r\n    }\r\n    return result;\r\n}"
      },
      {
        "name": "MapDeserializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.MapEntryDeserializer",
    "methodName": "createContextual",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer createContextual(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    KeyDeserializer kd \u003d _keyDeserializer;\r\n    if (kd \u003d\u003d null) {\r\n        kd \u003d ctxt.findKeyDeserializer(_containerType.containedType(0), property);\r\n    } else {\r\n        if (kd instanceof ContextualKeyDeserializer) {\r\n            kd \u003d ((ContextualKeyDeserializer) kd).createContextual(ctxt, property);\r\n        }\r\n    }\r\n    JsonDeserializer\u003c?\u003e vd \u003d _valueDeserializer;\r\n    vd \u003d findConvertingContentDeserializer(ctxt, property, vd);\r\n    JavaType contentType \u003d _containerType.containedType(1);\r\n    if (vd \u003d\u003d null) {\r\n        vd \u003d ctxt.findContextualValueDeserializer(contentType, property);\r\n    } else {\r\n        // if directly assigned, probably not yet contextual, so:\r\n        vd \u003d ctxt.handleSecondaryContextualization(vd, property, contentType);\r\n    }\r\n    TypeDeserializer vtd \u003d _valueTypeDeserializer;\r\n    if (vtd !\u003d null) {\r\n        vtd \u003d vtd.forProperty(property);\r\n    }\r\n    return withResolved(kd, vtd, vd);\r\n}",
    "nodes": 10,
    "edges": 13,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r8 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($r10 !\u003d null) → B5 | else → B6",
      "B7 : If($r4 \u003d\u003d null) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  MapEntryDeserializer\n  DeserializationContext\n  BeanProperty\n  r8 \u003d KeyDeserializer _keyDeserializer\u003e\n  if (r8 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d JavaType _containerType\u003e\n  $r7 \u003d $r6.containedType(0)\n  r8 \u003d r1.findKeyDeserializer($r7, r2)\n  goto B4\n}",
      "B2 {\n  $z0 \u003d ContextualKeyDeserializer\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d ContextualKeyDeserializer) r8\n  r8 \u003d $r5.createContextual(r1, r2)\n}",
      "B4 {\n  $r9 \u003d JsonDeserializer _valueDeserializer\u003e\n  $r10 \u003d r0.findConvertingContentDeserializer(r1, r2, $r9)\n  $r11 \u003d JavaType _containerType\u003e\n  $r12 \u003d $r11.containedType(1)\n  if ($r10 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  r13 \u003d r1.findContextualValueDeserializer($r12, r2)\n  goto B7\n}",
      "B6 {\n  r13 \u003d r1.handleSecondaryContextualization($r10, r2, $r12)\n}",
      "B7 {\n  $r4 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  r14 \u003d $r4\n  if ($r4 \u003d\u003d null) goto B8 else B9\n}",
      "B8 {\n  r14 \u003d $r4.forProperty(r2)\n}",
      "B9 {\n  $r3 \u003d r0.withResolved(r8, r14, r13)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapEntryDeserializer#withResolved(...3)",
        "body": "{\r\n    if ((_keyDeserializer \u003d\u003d keyDeser) \u0026\u0026 (_valueDeserializer \u003d\u003d valueDeser) \u0026\u0026 (_valueTypeDeserializer \u003d\u003d valueTypeDeser)) {\r\n        return this;\r\n    }\r\n    return new MapEntryDeserializer(this, keyDeser, (JsonDeserializer\u003cObject\u003e) valueDeser, valueTypeDeser);\r\n}"
      },
      {
        "name": "MapEntryDeserializer#findConvertingContentDeserializer(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.MapEntryDeserializer",
    "methodName": "deserialize",
    "signature": "java.util.Map$Entry deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    // Ok: must point to START_OBJECT, FIELD_NAME or END_OBJECT\r\n    JsonToken t \u003d p.currentToken();\r\n    if (t \u003d\u003d JsonToken.START_OBJECT) {\r\n        t \u003d p.nextToken();\r\n    } else if (t !\u003d JsonToken.FIELD_NAME \u0026\u0026 t !\u003d JsonToken.END_OBJECT) {\r\n        // Empty array, or single-value wrapped in array?\r\n        if (t \u003d\u003d JsonToken.START_ARRAY) {\r\n            return _deserializeFromArray(p, ctxt);\r\n        }\r\n        return (Map.Entry\u003cObject, Object\u003e) ctxt.handleUnexpectedToken(getValueType(ctxt), p);\r\n    }\r\n    if (t !\u003d JsonToken.FIELD_NAME) {\r\n        if (t \u003d\u003d JsonToken.END_OBJECT) {\r\n            return ctxt.reportInputMismatch(this, \"Cannot deserialize a Map.Entry out of empty JSON Object\");\r\n        }\r\n        return (Map.Entry\u003cObject, Object\u003e) ctxt.handleUnexpectedToken(handledType(), p);\r\n    }\r\n    final KeyDeserializer keyDes \u003d _keyDeserializer;\r\n    final JsonDeserializer\u003cObject\u003e valueDes \u003d _valueDeserializer;\r\n    final TypeDeserializer typeDeser \u003d _valueTypeDeserializer;\r\n    final String keyStr \u003d p.currentName();\r\n    Object key \u003d keyDes.deserializeKey(keyStr, ctxt);\r\n    Object value \u003d null;\r\n    // And then the value...\r\n    t \u003d p.nextToken();\r\n    try {\r\n        // Note: must handle null explicitly here; value deserializers won\u0027t\r\n        if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n            value \u003d valueDes.getNullValue(ctxt);\r\n        } else if (typeDeser \u003d\u003d null) {\r\n            value \u003d valueDes.deserialize(p, ctxt);\r\n        } else {\r\n            value \u003d valueDes.deserializeWithType(p, ctxt, typeDeser);\r\n        }\r\n    } catch (Exception e) {\r\n        wrapAndThrow(ctxt, e, Map.Entry.class, keyStr);\r\n    }\r\n    // Close, but also verify that we reached the END_OBJECT\r\n    t \u003d p.nextToken();\r\n    if (t !\u003d JsonToken.END_OBJECT) {\r\n        if (t \u003d\u003d JsonToken.FIELD_NAME) {\r\n            // most likely\r\n            ctxt.reportInputMismatch(this, \"Problem binding JSON into Map.Entry: more than one entry in JSON (second field: \u0027%s\u0027)\", p.currentName());\r\n        } else {\r\n            // how would this occur?\r\n            ctxt.reportInputMismatch(this, \"Problem binding JSON into Map.Entry: unexpected content after JSON Object entry: \" + t);\r\n        }\r\n        return null;\r\n    }\r\n    return new AbstractMap.SimpleEntry\u003cObject, Object\u003e(key, value);\r\n}",
    "nodes": 24,
    "edges": 28,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r35 !\u003d $r1) → B1 | else → B2",
      "B2 : If(r35 \u003d\u003d $r2) → B3 | else → B7",
      "B3 : If(r35 \u003d\u003d $r26) → B4 | else → B7",
      "B4 : If(r35 !\u003d $r27) → B5 | else → B6",
      "B7 : If(r35 \u003d\u003d $r36) → B8 | else → B11",
      "B8 : If(r35 !\u003d $r19) → B9 | else → B10",
      "B11 : If(r38 !\u003d $r10) → B12 | else → B13",
      "B13 : If(r6 !\u003d null) → B14 | else → B15",
      "B18 : If($r34 \u003d\u003d $r11) → B19 | else → B23",
      "B19 : If($r34 !\u003d $r13) → B20 | else → B21"
    ],
    "blockList": [
      "B0 {\n  MapEntryDeserializer\n  JsonParser\n  DeserializationContext\n  r35 \u003d r0.currentToken()\n  $r1 \u003d JsonToken START_OBJECT\u003e\n  if (r35 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  r35 \u003d r0.nextToken()\n  goto B7\n}",
      "B2 {\n  $r2 \u003d JsonToken FIELD_NAME\u003e\n  if (r35 \u003d\u003d $r2) goto B3 else B7\n}",
      "B3 {\n  $r26 \u003d JsonToken END_OBJECT\u003e\n  if (r35 \u003d\u003d $r26) goto B4 else B7\n}",
      "B4 {\n  $r27 \u003d JsonToken START_ARRAY\u003e\n  if (r35 !\u003d $r27) goto B5 else B6\n}",
      "B5 {\n  $r31 \u003d r3._deserializeFromArray(r0, r8)\n  $r32 \u003d Map$Entry) $r31\n  return\n}",
      "B6 {\n  $r28 \u003d r3.getValueType(r8)\n  $r29 \u003d r8.handleUnexpectedToken($r28, r0)\n  $r30 \u003d Map$Entry) $r29\n  return\n}",
      "B7 {\n  $r36 \u003d JsonToken FIELD_NAME\u003e\n  if (r35 \u003d\u003d $r36) goto B8 else B11\n}",
      "B8 {\n  $r19 \u003d JsonToken END_OBJECT\u003e\n  if (r35 !\u003d $r19) goto B9 else B10\n}",
      "B9 {\n  $r23 \u003d Object)[0]\n  $r24 \u003d r8.reportInputMismatch(r3, \"Cannot deserialize a Map.Entry out of empty JSON Object\", $r23)\n  $r25 \u003d Map$Entry) $r24\n  return\n}",
      "B10 {\n  $r20 \u003d r3.handledType()\n  $r21 \u003d r8.handleUnexpectedToken($r20, r0)\n  $r22 \u003d Map$Entry) $r21\n  return\n}",
      "B11 {\n  r4 \u003d KeyDeserializer _keyDeserializer\u003e\n  r5 \u003d JsonDeserializer _valueDeserializer\u003e\n  r6 \u003d TypeDeserializer _valueTypeDeserializer\u003e\n  r7 \u003d r0.currentName()\n  r9 \u003d r4.deserializeKey(r7, r8)\n  r37 \u003d null\n  r38 \u003d r0.nextToken()\n  $r10 \u003d JsonToken VALUE_NULL\u003e\n  if (r38 !\u003d $r10) goto B12 else B13\n}",
      "B12 {\n  r37 \u003d r5.getNullValue(r8)\n  goto B16\n}",
      "B13 {\n  if (r6 !\u003d null) goto B14 else B15\n}",
      "B14 {\n  r37 \u003d r5.deserialize(r0, r8)\n  goto B16\n}",
      "B15 {\n  r37 \u003d r5.deserializeWithType(r0, r8, r6)\n}",
      "B16 {\n  goto B18\n}",
      "B17 {\n  $r33 :\u003d @caughtexception\n  r3.wrapAndThrow(r8, $r33, class \"Ljava/util/Map$Entry;\", r7)\n}",
      "B18 {\n  $r34 \u003d r0.nextToken()\n  $r11 \u003d JsonToken END_OBJECT\u003e\n  if ($r34 \u003d\u003d $r11) goto B19 else B23\n}",
      "B19 {\n  $r13 \u003d JsonToken FIELD_NAME\u003e\n  if ($r34 !\u003d $r13) goto B20 else B21\n}",
      "B20 {\n  $r17 \u003d Object)[1]\n  $r18 \u003d r0.currentName()\n  $r17[0] \u003d $r18\n  r8.reportInputMismatch(r3, \"Problem binding JSON into Map.Entry: more than one entry in JSON (second field: \\\u0027%s\\\u0027)\", $r17)\n  goto B22\n}",
      "B21 {\n  $r14 \u003d String.valueOf($r34)\n  $r16 \u003d dynInvoke makeConcatWithConstants($r14)\n  $r15 \u003d Object)[0]\n  r8.reportInputMismatch(r3, $r16, $r15)\n}",
      "B22 {\n  return\n}",
      "B23 {\n  $r12 \u003d AbstractMap$SimpleEntry\n  new AbstractMap$SimpleEntry(r9, r37)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B16",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e B19",
      "B18 --\u003e B23",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B22 --\u003e [EXIT]",
      "B23 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapEntryDeserializer#handledType(...0)",
        "body": "(source not found)"
      },
      {
        "name": "MapEntryDeserializer#_deserializeFromArray(...2)",
        "body": "(source not found)"
      },
      {
        "name": "MapEntryDeserializer#getValueType(...1)",
        "body": "(source not found)"
      },
      {
        "name": "MapEntryDeserializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer",
    "methodName": "deserialize",
    "signature": "java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    // 29-Jan-2016, tatu: Simple skipping for all other tokens, but FIELD_NAME bit\r\n    //    special unfortunately\r\n    if (p.hasToken(JsonToken.FIELD_NAME)) {\r\n        while (true) {\r\n            JsonToken t \u003d p.nextToken();\r\n            if ((t \u003d\u003d null) || (t \u003d\u003d JsonToken.END_OBJECT)) {\r\n                break;\r\n            }\r\n            p.skipChildren();\r\n        }\r\n    } else {\r\n        p.skipChildren();\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B5",
      "B1 : If($r3 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($r3 !\u003d $r2) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  NullifyingDeserializer\n  JsonParser\n  DeserializationContext\n  $r1 \u003d JsonToken FIELD_NAME\u003e\n  $z0 \u003d r0.hasToken($r1)\n  if ($z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  $r3 \u003d r0.nextToken()\n  if ($r3 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $r2 \u003d JsonToken END_OBJECT\u003e\n  if ($r3 !\u003d $r2) goto B3 else B4\n}",
      "B3 {\n  goto B6\n}",
      "B4 {\n  r0.skipChildren()\n  goto B1\n}",
      "B5 {\n  r0.skipChildren()\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B1",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer",
    "methodName": "deserializeWithType",
    "signature": "java.lang.Object deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)",
    "visibility": "public",
    "body": "{\r\n    // Not sure if we need to bother but:\r\n    switch(p.currentTokenId()) {\r\n        case JsonTokenId.ID_START_ARRAY:\r\n        case JsonTokenId.ID_START_OBJECT:\r\n        case JsonTokenId.ID_FIELD_NAME:\r\n            return typeDeserializer.deserializeTypedFromAny(p, ctxt);\r\n        default:\r\n            return null;\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NullifyingDeserializer\n  JsonParser\n  DeserializationContext\n  TypeDeserializer\n  $i0 \u003d r0.currentTokenId()\n  DeserializationContext)\u003e(r0, r2);     default: goto return null; }\n}",
      "B1 {\n  $r3 \u003d r1.deserializeTypedFromAny(r0, r2)\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "methodName": "find",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer find(java.lang.Class,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (rawType.isPrimitive()) {\r\n        if (rawType \u003d\u003d Integer.TYPE) {\r\n            return IntegerDeserializer.primitiveInstance;\r\n        }\r\n        if (rawType \u003d\u003d Boolean.TYPE) {\r\n            return BooleanDeserializer.primitiveInstance;\r\n        }\r\n        if (rawType \u003d\u003d Long.TYPE) {\r\n            return LongDeserializer.primitiveInstance;\r\n        }\r\n        if (rawType \u003d\u003d Double.TYPE) {\r\n            return DoubleDeserializer.primitiveInstance;\r\n        }\r\n        if (rawType \u003d\u003d Character.TYPE) {\r\n            return CharacterDeserializer.primitiveInstance;\r\n        }\r\n        if (rawType \u003d\u003d Byte.TYPE) {\r\n            return ByteDeserializer.primitiveInstance;\r\n        }\r\n        if (rawType \u003d\u003d Short.TYPE) {\r\n            return ShortDeserializer.primitiveInstance;\r\n        }\r\n        if (rawType \u003d\u003d Float.TYPE) {\r\n            return FloatDeserializer.primitiveInstance;\r\n        }\r\n        // [databind#2679]: bit odd place for this (Void.class handled in\r\n        // `JdkDeserializers`), due to `void` being primitive type\r\n        if (rawType \u003d\u003d Void.TYPE) {\r\n            return NullifyingDeserializer.instance;\r\n        }\r\n    } else if (_classNames.contains(clsName)) {\r\n        // Start with most common types; int, boolean, long, double\r\n        if (rawType \u003d\u003d Integer.class) {\r\n            return IntegerDeserializer.wrapperInstance;\r\n        }\r\n        if (rawType \u003d\u003d Boolean.class) {\r\n            return BooleanDeserializer.wrapperInstance;\r\n        }\r\n        if (rawType \u003d\u003d Long.class) {\r\n            return LongDeserializer.wrapperInstance;\r\n        }\r\n        if (rawType \u003d\u003d Double.class) {\r\n            return DoubleDeserializer.wrapperInstance;\r\n        }\r\n        if (rawType \u003d\u003d Character.class) {\r\n            return CharacterDeserializer.wrapperInstance;\r\n        }\r\n        if (rawType \u003d\u003d Byte.class) {\r\n            return ByteDeserializer.wrapperInstance;\r\n        }\r\n        if (rawType \u003d\u003d Short.class) {\r\n            return ShortDeserializer.wrapperInstance;\r\n        }\r\n        if (rawType \u003d\u003d Float.class) {\r\n            return FloatDeserializer.wrapperInstance;\r\n        }\r\n        if (rawType \u003d\u003d Number.class) {\r\n            return NumberDeserializer.instance;\r\n        }\r\n        if (rawType \u003d\u003d BigDecimal.class) {\r\n            return BigDecimalDeserializer.instance;\r\n        }\r\n        if (rawType \u003d\u003d BigInteger.class) {\r\n            return BigIntegerDeserializer.instance;\r\n        }\r\n    } else {\r\n        return null;\r\n    }\r\n    // should never occur\r\n    throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + rawType.getName());\r\n}",
    "nodes": 44,
    "edges": 44,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B19",
      "B1 : If(r0 !\u003d $r17) → B2 | else → B3",
      "B3 : If(r0 !\u003d $r18) → B4 | else → B5",
      "B5 : If(r0 !\u003d $r19) → B6 | else → B7",
      "B7 : If(r0 !\u003d $r20) → B8 | else → B9",
      "B9 : If(r0 !\u003d $r21) → B10 | else → B11",
      "B11 : If(r0 !\u003d $r22) → B12 | else → B13",
      "B13 : If(r0 !\u003d $r23) → B14 | else → B15",
      "B15 : If(r0 !\u003d $r24) → B16 | else → B17",
      "B17 : If(r0 !\u003d $r25) → B18 | else → B43",
      "B19 : If($z1 \u003d\u003d false) → B20 | else → B42",
      "B20 : If(r0 !\u003d class \"Ljava/lang/Integer;\") → B21 | else → B22",
      "B22 : If(r0 !\u003d class \"Ljava/lang/Boolean;\") → B23 | else → B24",
      "B24 : If(r0 !\u003d class \"Ljava/lang/Long;\") → B25 | else → B26",
      "B26 : If(r0 !\u003d class \"Ljava/lang/Double;\") → B27 | else → B28",
      "B28 : If(r0 !\u003d class \"Ljava/lang/Character;\") → B29 | else → B30",
      "B30 : If(r0 !\u003d class \"Ljava/lang/Byte;\") → B31 | else → B32",
      "B32 : If(r0 !\u003d class \"Ljava/lang/Short;\") → B33 | else → B34",
      "B34 : If(r0 !\u003d class \"Ljava/lang/Float;\") → B35 | else → B36",
      "B36 : If(r0 !\u003d class \"Ljava/lang/Number;\") → B37 | else → B38",
      "B38 : If(r0 !\u003d class \"Ljava/math/BigDecimal;\") → B39 | else → B40",
      "B40 : If(r0 !\u003d class \"Ljava/math/BigInteger;\") → B41 | else → B43"
    ],
    "blockList": [
      "B0 {\n  Class\n  String\n  $z0 \u003d r0.isPrimitive()\n  if ($z0 \u003d\u003d false) goto B1 else B19\n}",
      "B1 {\n  $r17 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r17) goto B2 else B3\n}",
      "B2 {\n  $r34 \u003d NumberDeserializers$IntegerDeserializer primitiveInstance\u003e\n  return\n}",
      "B3 {\n  $r18 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r18) goto B4 else B5\n}",
      "B4 {\n  $r33 \u003d NumberDeserializers$BooleanDeserializer primitiveInstance\u003e\n  return\n}",
      "B5 {\n  $r19 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r19) goto B6 else B7\n}",
      "B6 {\n  $r32 \u003d NumberDeserializers$LongDeserializer primitiveInstance\u003e\n  return\n}",
      "B7 {\n  $r20 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r20) goto B8 else B9\n}",
      "B8 {\n  $r31 \u003d NumberDeserializers$DoubleDeserializer primitiveInstance\u003e\n  return\n}",
      "B9 {\n  $r21 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r21) goto B10 else B11\n}",
      "B10 {\n  $r30 \u003d NumberDeserializers$CharacterDeserializer primitiveInstance\u003e\n  return\n}",
      "B11 {\n  $r22 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r22) goto B12 else B13\n}",
      "B12 {\n  $r29 \u003d NumberDeserializers$ByteDeserializer primitiveInstance\u003e\n  return\n}",
      "B13 {\n  $r23 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r23) goto B14 else B15\n}",
      "B14 {\n  $r28 \u003d NumberDeserializers$ShortDeserializer primitiveInstance\u003e\n  return\n}",
      "B15 {\n  $r24 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r24) goto B16 else B17\n}",
      "B16 {\n  $r27 \u003d NumberDeserializers$FloatDeserializer primitiveInstance\u003e\n  return\n}",
      "B17 {\n  $r25 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r25) goto B18 else B43\n}",
      "B18 {\n  $r26 \u003d NullifyingDeserializer instance\u003e\n  return\n}",
      "B19 {\n  $r2 \u003d HashSet _classNames\u003e\n  $z1 \u003d $r2.contains(r1)\n  if ($z1 \u003d\u003d false) goto B20 else B42\n}",
      "B20 {\n  if (r0 !\u003d class \"Ljava/lang/Integer;\") goto B21 else B22\n}",
      "B21 {\n  $r16 \u003d NumberDeserializers$IntegerDeserializer wrapperInstance\u003e\n  return\n}",
      "B22 {\n  if (r0 !\u003d class \"Ljava/lang/Boolean;\") goto B23 else B24\n}",
      "B23 {\n  $r15 \u003d NumberDeserializers$BooleanDeserializer wrapperInstance\u003e\n  return\n}",
      "B24 {\n  if (r0 !\u003d class \"Ljava/lang/Long;\") goto B25 else B26\n}",
      "B25 {\n  $r14 \u003d NumberDeserializers$LongDeserializer wrapperInstance\u003e\n  return\n}",
      "B26 {\n  if (r0 !\u003d class \"Ljava/lang/Double;\") goto B27 else B28\n}",
      "B27 {\n  $r13 \u003d NumberDeserializers$DoubleDeserializer wrapperInstance\u003e\n  return\n}",
      "B28 {\n  if (r0 !\u003d class \"Ljava/lang/Character;\") goto B29 else B30\n}",
      "B29 {\n  $r12 \u003d NumberDeserializers$CharacterDeserializer wrapperInstance\u003e\n  return\n}",
      "B30 {\n  if (r0 !\u003d class \"Ljava/lang/Byte;\") goto B31 else B32\n}",
      "B31 {\n  $r11 \u003d NumberDeserializers$ByteDeserializer wrapperInstance\u003e\n  return\n}",
      "B32 {\n  if (r0 !\u003d class \"Ljava/lang/Short;\") goto B33 else B34\n}",
      "B33 {\n  $r10 \u003d NumberDeserializers$ShortDeserializer wrapperInstance\u003e\n  return\n}",
      "B34 {\n  if (r0 !\u003d class \"Ljava/lang/Float;\") goto B35 else B36\n}",
      "B35 {\n  $r9 \u003d NumberDeserializers$FloatDeserializer wrapperInstance\u003e\n  return\n}",
      "B36 {\n  if (r0 !\u003d class \"Ljava/lang/Number;\") goto B37 else B38\n}",
      "B37 {\n  $r8 \u003d NumberDeserializers$NumberDeserializer instance\u003e\n  return\n}",
      "B38 {\n  if (r0 !\u003d class \"Ljava/math/BigDecimal;\") goto B39 else B40\n}",
      "B39 {\n  $r7 \u003d NumberDeserializers$BigDecimalDeserializer instance\u003e\n  return\n}",
      "B40 {\n  if (r0 !\u003d class \"Ljava/math/BigInteger;\") goto B41 else B43\n}",
      "B41 {\n  $r6 \u003d NumberDeserializers$BigIntegerDeserializer instance\u003e\n  return\n}",
      "B42 {\n  return\n}",
      "B43 {\n  $r3 \u003d IllegalArgumentException\n  $r4 \u003d r0.getName()\n  $r5 \u003d dynInvoke makeConcatWithConstants($r4)\n  new IllegalArgumentException($r5)\n  throw $r3\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B19",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e B18",
      "B17 --\u003e B43",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e B20",
      "B19 --\u003e B42",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e [EXIT]",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e [EXIT]",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e [EXIT]",
      "B26 --\u003e B27",
      "B26 --\u003e B28",
      "B27 --\u003e [EXIT]",
      "B28 --\u003e B29",
      "B28 --\u003e B30",
      "B29 --\u003e [EXIT]",
      "B30 --\u003e B31",
      "B30 --\u003e B32",
      "B31 --\u003e [EXIT]",
      "B32 --\u003e B33",
      "B32 --\u003e B34",
      "B33 --\u003e [EXIT]",
      "B34 --\u003e B35",
      "B34 --\u003e B36",
      "B35 --\u003e [EXIT]",
      "B36 --\u003e B37",
      "B36 --\u003e B38",
      "B37 --\u003e [EXIT]",
      "B38 --\u003e B39",
      "B38 --\u003e B40",
      "B39 --\u003e [EXIT]",
      "B40 --\u003e B41",
      "B40 --\u003e B43",
      "B41 --\u003e [EXIT]",
      "B42 --\u003e [EXIT]",
      "B43 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer",
    "methodName": "withResolved",
    "signature": "com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer withResolved(com.fasterxml.jackson.databind.jsontype.TypeDeserializer,com.fasterxml.jackson.databind.JsonDeserializer,com.fasterxml.jackson.databind.deser.NullValueProvider,java.lang.Boolean)",
    "visibility": "public",
    "body": "{\r\n    if ((Objects.equals(unwrapSingle, _unwrapSingle)) \u0026\u0026 (nuller \u003d\u003d _nullProvider) \u0026\u0026 (elemDeser \u003d\u003d _elementDeserializer) \u0026\u0026 (elemTypeDeser \u003d\u003d _elementTypeDeserializer)) {\r\n        return this;\r\n    }\r\n    return new ObjectArrayDeserializer(this, (JsonDeserializer\u003cObject\u003e) elemDeser, elemTypeDeser, nuller, unwrapSingle);\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B5",
      "B1 : If(r5 !\u003d $r6) → B2 | else → B5",
      "B2 : If(r3 !\u003d $r7) → B3 | else → B5",
      "B3 : If(r4 !\u003d $r8) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ObjectArrayDeserializer\n  TypeDeserializer\n  JsonDeserializer\n  NullValueProvider\n  Boolean\n  $r2 \u003d Boolean _unwrapSingle\u003e\n  $z0 \u003d Objects.equals(r0, $r2)\n  if ($z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  $r6 \u003d NullValueProvider _nullProvider\u003e\n  if (r5 !\u003d $r6) goto B2 else B5\n}",
      "B2 {\n  $r7 \u003d JsonDeserializer _elementDeserializer\u003e\n  if (r3 !\u003d $r7) goto B3 else B5\n}",
      "B3 {\n  $r8 \u003d TypeDeserializer _elementTypeDeserializer\u003e\n  if (r4 !\u003d $r8) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r9 \u003d ObjectArrayDeserializer\n  new ObjectArrayDeserializer(r1, r3, r4, r5, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer",
    "methodName": "isCachable",
    "signature": "boolean isCachable()",
    "visibility": "public",
    "body": "{\r\n    // Important: do NOT cache if polymorphic values, or if there are annotation-based\r\n    // custom deserializers\r\n    return (_elementDeserializer \u003d\u003d null) \u0026\u0026 (_elementTypeDeserializer \u003d\u003d null);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B3",
      "B1 : If($r2 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ObjectArrayDeserializer\n  $r1 \u003d JsonDeserializer _elementDeserializer\u003e\n  if ($r1 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d TypeDeserializer _elementTypeDeserializer\u003e\n  if ($r2 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer",
    "methodName": "createContextual",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer createContextual(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    JsonDeserializer\u003c?\u003e valueDeser \u003d _elementDeserializer;\r\n    // 07-May-2020, tatu: Is the argument `containerType.getRawClass()` right here?\r\n    //    In a way seems like it should rather refer to value class... ?\r\n    //    (as it\u0027s individual value of element type, not Container)...\r\n    Boolean unwrapSingle \u003d findFormatFeature(ctxt, property, _containerType.getRawClass(), JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\r\n    // May have a content converter\r\n    valueDeser \u003d findConvertingContentDeserializer(ctxt, property, valueDeser);\r\n    final JavaType vt \u003d _containerType.getContentType();\r\n    if (valueDeser \u003d\u003d null) {\r\n        valueDeser \u003d ctxt.findContextualValueDeserializer(vt, property);\r\n    } else {\r\n        // if directly assigned, probably not yet contextual, so:\r\n        valueDeser \u003d ctxt.handleSecondaryContextualization(valueDeser, property, vt);\r\n    }\r\n    TypeDeserializer elemTypeDeser \u003d _elementTypeDeserializer;\r\n    if (elemTypeDeser !\u003d null) {\r\n        elemTypeDeser \u003d elemTypeDeser.forProperty(property);\r\n    }\r\n    NullValueProvider nuller \u003d findContentNullProvider(ctxt, property, valueDeser);\r\n    return withResolved(elemTypeDeser, valueDeser, nuller, unwrapSingle);\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r13 !\u003d null) → B1 | else → B2",
      "B3 : If($r11 \u003d\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ObjectArrayDeserializer\n  DeserializationContext\n  BeanProperty\n  r12 \u003d JsonDeserializer _elementDeserializer\u003e\n  $r3 \u003d JavaType _containerType\u003e\n  $r5 \u003d $r3.getRawClass()\n  $r4 \u003d JsonFormat$Feature ACCEPT_SINGLE_VALUE_AS_ARRAY\u003e\n  r6 \u003d r0.findFormatFeature(r1, r2, $r5, $r4)\n  r13 \u003d r0.findConvertingContentDeserializer(r1, r2, r12)\n  $r7 \u003d JavaType _containerType\u003e\n  r8 \u003d $r7.getContentType()\n  if (r13 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r14 \u003d r1.findContextualValueDeserializer(r8, r2)\n  goto B3\n}",
      "B2 {\n  r14 \u003d r1.handleSecondaryContextualization(r13, r2, r8)\n}",
      "B3 {\n  $r11 \u003d TypeDeserializer _elementTypeDeserializer\u003e\n  r15 \u003d $r11\n  if ($r11 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  r15 \u003d $r11.forProperty(r2)\n}",
      "B5 {\n  $r10 \u003d r0.findContentNullProvider(r1, r2, r14)\n  $r9 \u003d r0.withResolved(r15, r14, $r10, r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectArrayDeserializer#findFormatFeature(...4)",
        "body": "(source not found)"
      },
      {
        "name": "ObjectArrayDeserializer#findContentNullProvider(...3)",
        "body": "(source not found)"
      },
      {
        "name": "ObjectArrayDeserializer#withResolved(...4)",
        "body": "{\r\n    if ((Objects.equals(unwrapSingle, _unwrapSingle)) \u0026\u0026 (nuller \u003d\u003d _nullProvider) \u0026\u0026 (elemDeser \u003d\u003d _elementDeserializer) \u0026\u0026 (elemTypeDeser \u003d\u003d _elementTypeDeserializer)) {\r\n        return this;\r\n    }\r\n    return new ObjectArrayDeserializer(this, (JsonDeserializer\u003cObject\u003e) elemDeser, elemTypeDeser, nuller, unwrapSingle);\r\n}"
      },
      {
        "name": "ObjectArrayDeserializer#findConvertingContentDeserializer(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer",
    "methodName": "deserialize",
    "signature": "java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    // Ok: must point to START_ARRAY (or equivalent)\r\n    if (!p.isExpectedStartArrayToken()) {\r\n        return handleNonArray(p, ctxt);\r\n    }\r\n    final ObjectBuffer buffer \u003d ctxt.leaseObjectBuffer();\r\n    Object[] chunk \u003d buffer.resetAndStart();\r\n    int ix \u003d 0;\r\n    JsonToken t;\r\n    final TypeDeserializer typeDeser \u003d _elementTypeDeserializer;\r\n    try {\r\n        while ((t \u003d p.nextToken()) !\u003d JsonToken.END_ARRAY) {\r\n            // Note: must handle null explicitly here; value deserializers won\u0027t\r\n            Object value;\r\n            if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                if (_skipNullValues) {\r\n                    continue;\r\n                }\r\n                value \u003d _nullProvider.getNullValue(ctxt);\r\n            } else if (typeDeser \u003d\u003d null) {\r\n                value \u003d _elementDeserializer.deserialize(p, ctxt);\r\n            } else {\r\n                value \u003d _elementDeserializer.deserializeWithType(p, ctxt, typeDeser);\r\n            }\r\n            if (ix \u003e\u003d chunk.length) {\r\n                chunk \u003d buffer.appendCompletedChunk(chunk);\r\n                ix \u003d 0;\r\n            }\r\n            chunk[ix++] \u003d value;\r\n        }\r\n    } catch (Exception e) {\r\n        throw JsonMappingException.wrapWithPath(e, chunk, buffer.bufferedSize() + ix);\r\n    }\r\n    Object[] result;\r\n    if (_untyped) {\r\n        result \u003d buffer.completeAndClearBuffer(chunk, ix);\r\n    } else {\r\n        result \u003d buffer.completeAndClearBuffer(chunk, ix, _elementClass);\r\n    }\r\n    ctxt.returnObjectBuffer(buffer);\r\n    return result;\r\n}",
    "nodes": 20,
    "edges": 24,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B3 : If($r14 \u003d\u003d $r15) → B4 | else → B14",
      "B4 : If($r14 !\u003d $r6) → B5 | else → B8",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B7",
      "B8 : If(r4 !\u003d null) → B9 | else → B10",
      "B11 : If(i3 \u003c $i4) → B12 | else → B13",
      "B16 : If($z1 \u003d\u003d false) → B17 | else → B18"
    ],
    "blockList": [
      "B0 {\n  ObjectArrayDeserializer\n  JsonParser\n  DeserializationContext\n  $z0 \u003d r0.isExpectedStartArrayToken()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d r3.handleNonArray(r0, r1)\n  return\n}",
      "B2 {\n  r2 \u003d r1.leaseObjectBuffer()\n  r13 \u003d r2.resetAndStart()\n  i3 \u003d 0\n  r4 \u003d TypeDeserializer _elementTypeDeserializer\u003e\n}",
      "B3 {\n  $r14 \u003d r0.nextToken()\n  $r15 \u003d JsonToken END_ARRAY\u003e\n  if ($r14 \u003d\u003d $r15) goto B4 else B14\n}",
      "B4 {\n  $r6 \u003d JsonToken VALUE_NULL\u003e\n  if ($r14 !\u003d $r6) goto B5 else B8\n}",
      "B5 {\n  $z2 \u003d ObjectArrayDeserializer: boolean _skipNullValues\u003e\n  if ($z2 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  goto B3\n}",
      "B7 {\n  $r9 \u003d NullValueProvider _nullProvider\u003e\n  r16 \u003d $r9.getNullValue(r1)\n  goto B11\n}",
      "B8 {\n  if (r4 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  $r8 \u003d JsonDeserializer _elementDeserializer\u003e\n  r16 \u003d $r8.deserialize(r0, r1)\n  goto B11\n}",
      "B10 {\n  $r7 \u003d JsonDeserializer _elementDeserializer\u003e\n  r16 \u003d $r7.deserializeWithType(r0, r1, r4)\n}",
      "B11 {\n  $i4 \u003d lengthof r13\n  if (i3 \u003c $i4) goto B12 else B13\n}",
      "B12 {\n  r13 \u003d r2.appendCompletedChunk(r13)\n  i3 \u003d 0\n}",
      "B13 {\n  $i0 \u003d i3\n  i3 \u003d i3 + 1\n  r13[$i0] \u003d r16\n  goto B3\n}",
      "B14 {\n  goto B16\n}",
      "B15 {\n  $r11 :\u003d @caughtexception\n  $i1 \u003d r2.bufferedSize()\n  $i2 \u003d $i1 + i3\n  $r12 \u003d JsonMappingException.wrapWithPath($r11, r13, $i2)\n  throw $r12\n}",
      "B16 {\n  $z1 \u003d ObjectArrayDeserializer: boolean _untyped\u003e\n  if ($z1 \u003d\u003d false) goto B17 else B18\n}",
      "B17 {\n  r17 \u003d r2.completeAndClearBuffer(r13, i3)\n  goto B19\n}",
      "B18 {\n  $r5 \u003d Class _elementClass\u003e\n  r17 \u003d r2.completeAndClearBuffer(r13, i3, $r5)\n}",
      "B19 {\n  r1.returnObjectBuffer(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B14",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B3",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B3",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectArrayDeserializer#handleNonArray(...2)",
        "body": "{\r\n    // Can we do implicit coercion to a single-element array still?\r\n    boolean canWrap \u003d (_unwrapSingle \u003d\u003d Boolean.TRUE) || ((_unwrapSingle \u003d\u003d null) \u0026\u0026 ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY));\r\n    if (!canWrap) {\r\n        // 2 exceptions with Strings:\r\n        if (p.hasToken(JsonToken.VALUE_STRING)) {\r\n            // One exception; byte arrays are generally serialized as base64, so that should be handled\r\n            // note: not `byte[]`, but `Byte[]` -- former is primitive array\r\n            if (_elementClass \u003d\u003d Byte.class) {\r\n                return deserializeFromBase64(p, ctxt);\r\n            }\r\n            // Second: empty (and maybe blank) String\r\n            return _deserializeFromString(p, ctxt);\r\n        }\r\n        return ctxt.handleUnexpectedToken(_containerType, p);\r\n    }\r\n    Object value;\r\n    if (p.hasToken(JsonToken.VALUE_NULL)) {\r\n        // 03-Feb-2017, tatu: Should this be skipped or not?\r\n        if (_skipNullValues) {\r\n            return _emptyValue;\r\n        }\r\n        value \u003d _nullProvider.getNullValue(ctxt);\r\n    } else {\r\n        if (p.hasToken(JsonToken.VALUE_STRING)) {\r\n            String textValue \u003d p.getText();\r\n            // https://github.com/FasterXML/jackson-dataformat-xml/issues/513\r\n            if (textValue.isEmpty()) {\r\n                final CoercionAction act \u003d ctxt.findCoercionAction(logicalType(), handledType(), CoercionInputShape.EmptyString);\r\n                if (act !\u003d CoercionAction.Fail) {\r\n                    return (Object[]) _deserializeFromEmptyString(p, ctxt, act, handledType(), \"empty String (\\\"\\\")\");\r\n                }\r\n            } else if (_isBlank(textValue)) {\r\n                final CoercionAction act \u003d ctxt.findCoercionFromBlankString(logicalType(), handledType(), CoercionAction.Fail);\r\n                if (act !\u003d CoercionAction.Fail) {\r\n                    return (Object[]) _deserializeFromEmptyString(p, ctxt, act, handledType(), \"blank String (all whitespace)\");\r\n                }\r\n            }\r\n            // if coercion failed, we can still add it to a list\r\n        }\r\n        if (_elementTypeDeserializer \u003d\u003d null) {\r\n            value \u003d _elementDeserializer.deserialize(p, ctxt);\r\n        } else {\r\n            value \u003d _elementDeserializer.deserializeWithType(p, ctxt, _elementTypeDeserializer);\r\n        }\r\n    }\r\n    // Ok: bit tricky, since we may want T[], not just Object[]\r\n    Object[] result;\r\n    if (_untyped) {\r\n        result \u003d new Object[1];\r\n    } else {\r\n        result \u003d (Object[]) Array.newInstance(_elementClass, 1);\r\n    }\r\n    result[0] \u003d value;\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer",
    "methodName": "deserialize",
    "signature": "java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final Object[] intoValue \u003d (Object[]) intoValue0;\r\n    if (!p.isExpectedStartArrayToken()) {\r\n        Object[] arr \u003d (Object[]) handleNonArray(p, ctxt);\r\n        if (arr \u003d\u003d null) {\r\n            return intoValue;\r\n        }\r\n        final int offset \u003d intoValue.length;\r\n        Object[] result \u003d Arrays.copyOf(intoValue, offset + arr.length);\r\n        System.arraycopy(arr, 0, result, offset, arr.length);\r\n        return result;\r\n    }\r\n    final ObjectBuffer buffer \u003d ctxt.leaseObjectBuffer();\r\n    int ix \u003d intoValue.length;\r\n    Object[] chunk \u003d buffer.resetAndStart(intoValue, ix);\r\n    JsonToken t;\r\n    final TypeDeserializer typeDeser \u003d _elementTypeDeserializer;\r\n    try {\r\n        while ((t \u003d p.nextToken()) !\u003d JsonToken.END_ARRAY) {\r\n            Object value;\r\n            if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                if (_skipNullValues) {\r\n                    continue;\r\n                }\r\n                value \u003d _nullProvider.getNullValue(ctxt);\r\n            } else if (typeDeser \u003d\u003d null) {\r\n                value \u003d _elementDeserializer.deserialize(p, ctxt);\r\n            } else {\r\n                value \u003d _elementDeserializer.deserializeWithType(p, ctxt, typeDeser);\r\n            }\r\n            if (ix \u003e\u003d chunk.length) {\r\n                chunk \u003d buffer.appendCompletedChunk(chunk);\r\n                ix \u003d 0;\r\n            }\r\n            chunk[ix++] \u003d value;\r\n        }\r\n    } catch (Exception e) {\r\n        throw JsonMappingException.wrapWithPath(e, chunk, buffer.bufferedSize() + ix);\r\n    }\r\n    Object[] result;\r\n    if (_untyped) {\r\n        result \u003d buffer.completeAndClearBuffer(chunk, ix);\r\n    } else {\r\n        result \u003d buffer.completeAndClearBuffer(chunk, ix, _elementClass);\r\n    }\r\n    ctxt.returnObjectBuffer(buffer);\r\n    return result;\r\n}",
    "nodes": 22,
    "edges": 26,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B4",
      "B1 : If(r14 !\u003d null) → B2 | else → B3",
      "B5 : If($r18 \u003d\u003d $r19) → B6 | else → B16",
      "B6 : If($r18 !\u003d $r7) → B7 | else → B10",
      "B7 : If($z2 \u003d\u003d false) → B8 | else → B9",
      "B10 : If(r5 !\u003d null) → B11 | else → B12",
      "B13 : If(i7 \u003c $i8) → B14 | else → B15",
      "B18 : If($z1 \u003d\u003d false) → B19 | else → B20"
    ],
    "blockList": [
      "B0 {\n  ObjectArrayDeserializer\n  JsonParser\n  DeserializationContext\n  Object\n  r1 \u003d Object[]) r0\n  $z0 \u003d r2.isExpectedStartArrayToken()\n  if ($z0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $r11 \u003d r4.handleNonArray(r2, r3)\n  r14 \u003d Object[]) $r11\n  if (r14 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  i6 \u003d lengthof r1\n  $i1 \u003d lengthof r14\n  $i2 \u003d i6 + $i1\n  r15 \u003d Arrays.copyOf(r1, $i2)\n  $i3 \u003d lengthof r14\n  System.arraycopy(r14, 0, r15, i6, $i3)\n  return\n}",
      "B4 {\n  r16 \u003d r3.leaseObjectBuffer()\n  i7 \u003d lengthof r1\n  r17 \u003d r16.resetAndStart(r1, i7)\n  r5 \u003d TypeDeserializer _elementTypeDeserializer\u003e\n}",
      "B5 {\n  $r18 \u003d r2.nextToken()\n  $r19 \u003d JsonToken END_ARRAY\u003e\n  if ($r18 \u003d\u003d $r19) goto B6 else B16\n}",
      "B6 {\n  $r7 \u003d JsonToken VALUE_NULL\u003e\n  if ($r18 !\u003d $r7) goto B7 else B10\n}",
      "B7 {\n  $z2 \u003d ObjectArrayDeserializer: boolean _skipNullValues\u003e\n  if ($z2 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  goto B5\n}",
      "B9 {\n  $r10 \u003d NullValueProvider _nullProvider\u003e\n  r20 \u003d $r10.getNullValue(r3)\n  goto B13\n}",
      "B10 {\n  if (r5 !\u003d null) goto B11 else B12\n}",
      "B11 {\n  $r9 \u003d JsonDeserializer _elementDeserializer\u003e\n  r20 \u003d $r9.deserialize(r2, r3)\n  goto B13\n}",
      "B12 {\n  $r8 \u003d JsonDeserializer _elementDeserializer\u003e\n  r20 \u003d $r8.deserializeWithType(r2, r3, r5)\n}",
      "B13 {\n  $i8 \u003d lengthof r17\n  if (i7 \u003c $i8) goto B14 else B15\n}",
      "B14 {\n  r17 \u003d r16.appendCompletedChunk(r17)\n  i7 \u003d 0\n}",
      "B15 {\n  $i0 \u003d i7\n  i7 \u003d i7 + 1\n  r17[$i0] \u003d r20\n  goto B5\n}",
      "B16 {\n  goto B18\n}",
      "B17 {\n  $r12 :\u003d @caughtexception\n  $i4 \u003d r16.bufferedSize()\n  $i5 \u003d $i4 + i7\n  $r13 \u003d JsonMappingException.wrapWithPath($r12, r17, $i5)\n  throw $r13\n}",
      "B18 {\n  $z1 \u003d ObjectArrayDeserializer: boolean _untyped\u003e\n  if ($z1 \u003d\u003d false) goto B19 else B20\n}",
      "B19 {\n  r21 \u003d r16.completeAndClearBuffer(r17, i7)\n  goto B21\n}",
      "B20 {\n  $r6 \u003d Class _elementClass\u003e\n  r21 \u003d r16.completeAndClearBuffer(r17, i7, $r6)\n}",
      "B21 {\n  r3.returnObjectBuffer(r16)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B16",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B5",
      "B9 --\u003e B13",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B5",
      "B16 --\u003e B18",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B21",
      "B21 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectArrayDeserializer#handleNonArray(...2)",
        "body": "{\r\n    // Can we do implicit coercion to a single-element array still?\r\n    boolean canWrap \u003d (_unwrapSingle \u003d\u003d Boolean.TRUE) || ((_unwrapSingle \u003d\u003d null) \u0026\u0026 ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY));\r\n    if (!canWrap) {\r\n        // 2 exceptions with Strings:\r\n        if (p.hasToken(JsonToken.VALUE_STRING)) {\r\n            // One exception; byte arrays are generally serialized as base64, so that should be handled\r\n            // note: not `byte[]`, but `Byte[]` -- former is primitive array\r\n            if (_elementClass \u003d\u003d Byte.class) {\r\n                return deserializeFromBase64(p, ctxt);\r\n            }\r\n            // Second: empty (and maybe blank) String\r\n            return _deserializeFromString(p, ctxt);\r\n        }\r\n        return ctxt.handleUnexpectedToken(_containerType, p);\r\n    }\r\n    Object value;\r\n    if (p.hasToken(JsonToken.VALUE_NULL)) {\r\n        // 03-Feb-2017, tatu: Should this be skipped or not?\r\n        if (_skipNullValues) {\r\n            return _emptyValue;\r\n        }\r\n        value \u003d _nullProvider.getNullValue(ctxt);\r\n    } else {\r\n        if (p.hasToken(JsonToken.VALUE_STRING)) {\r\n            String textValue \u003d p.getText();\r\n            // https://github.com/FasterXML/jackson-dataformat-xml/issues/513\r\n            if (textValue.isEmpty()) {\r\n                final CoercionAction act \u003d ctxt.findCoercionAction(logicalType(), handledType(), CoercionInputShape.EmptyString);\r\n                if (act !\u003d CoercionAction.Fail) {\r\n                    return (Object[]) _deserializeFromEmptyString(p, ctxt, act, handledType(), \"empty String (\\\"\\\")\");\r\n                }\r\n            } else if (_isBlank(textValue)) {\r\n                final CoercionAction act \u003d ctxt.findCoercionFromBlankString(logicalType(), handledType(), CoercionAction.Fail);\r\n                if (act !\u003d CoercionAction.Fail) {\r\n                    return (Object[]) _deserializeFromEmptyString(p, ctxt, act, handledType(), \"blank String (all whitespace)\");\r\n                }\r\n            }\r\n            // if coercion failed, we can still add it to a list\r\n        }\r\n        if (_elementTypeDeserializer \u003d\u003d null) {\r\n            value \u003d _elementDeserializer.deserialize(p, ctxt);\r\n        } else {\r\n            value \u003d _elementDeserializer.deserializeWithType(p, ctxt, _elementTypeDeserializer);\r\n        }\r\n    }\r\n    // Ok: bit tricky, since we may want T[], not just Object[]\r\n    Object[] result;\r\n    if (_untyped) {\r\n        result \u003d new Object[1];\r\n    } else {\r\n        result \u003d (Object[]) Array.newInstance(_elementClass, 1);\r\n    }\r\n    result[0] \u003d value;\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StackTraceElementDeserializer",
    "methodName": "construct",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer construct(com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    // 26-May-2022, tatu: for legacy use, need to do this:\r\n    if (ctxt \u003d\u003d null) {\r\n        return new StackTraceElementDeserializer();\r\n    }\r\n    JsonDeserializer\u003c?\u003e adapterDeser \u003d ctxt.findNonContextualValueDeserializer(ctxt.constructType(Adapter.class));\r\n    return new StackTraceElementDeserializer(adapterDeser);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializationContext\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d StackTraceElementDeserializer\n  new StackTraceElementDeserializer()\n  return\n}",
      "B2 {\n  $r1 \u003d r0.constructType(class \"Lcom/fasterxml/jackson/databind/deser/std/StackTraceElementDeserializer$Adapter;\")\n  r2 \u003d r0.findNonContextualValueDeserializer($r1)\n  $r3 \u003d StackTraceElementDeserializer\n  new StackTraceElementDeserializer(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StackTraceElementDeserializer",
    "methodName": "deserialize",
    "signature": "java.lang.StackTraceElement deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    JsonToken t \u003d p.currentToken();\r\n    // Must get an Object\r\n    if (t \u003d\u003d JsonToken.START_OBJECT || t \u003d\u003d JsonToken.FIELD_NAME) {\r\n        Adapter adapted;\r\n        // 26-May-2022, tatu: for legacy use, need to do this:\r\n        if (_adapterDeserializer \u003d\u003d null) {\r\n            adapted \u003d ctxt.readValue(p, Adapter.class);\r\n        } else {\r\n            adapted \u003d (Adapter) _adapterDeserializer.deserialize(p, ctxt);\r\n        }\r\n        return constructValue(ctxt, adapted);\r\n    } else if (t \u003d\u003d JsonToken.START_ARRAY \u0026\u0026 ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\r\n        p.nextToken();\r\n        final StackTraceElement value \u003d deserialize(p, ctxt);\r\n        if (p.nextToken() !\u003d JsonToken.END_ARRAY) {\r\n            handleMissingEndArrayForSingle(p, ctxt);\r\n        }\r\n        return value;\r\n    }\r\n    return (StackTraceElement) ctxt.handleUnexpectedToken(_valueClass, p);\r\n}",
    "nodes": 12,
    "edges": 15,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d $r2) → B1 | else → B2",
      "B1 : If(r1 !\u003d $r10) → B2 | else → B6",
      "B2 : If($r4 !\u003d null) → B3 | else → B4",
      "B6 : If(r1 !\u003d $r11) → B7 | else → B11",
      "B7 : If($z0 \u003d\u003d false) → B8 | else → B11",
      "B8 : If($r17 \u003d\u003d $r16) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  StackTraceElementDeserializer\n  JsonParser\n  DeserializationContext\n  r1 \u003d r0.currentToken()\n  $r2 \u003d JsonToken START_OBJECT\u003e\n  if (r1 \u003d\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d JsonToken FIELD_NAME\u003e\n  if (r1 !\u003d $r10) goto B2 else B6\n}",
      "B2 {\n  $r4 \u003d JsonDeserializer _adapterDeserializer\u003e\n  if ($r4 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r9 \u003d r5.readValue(r0, class \"Lcom/fasterxml/jackson/databind/deser/std/StackTraceElementDeserializer$Adapter;\")\n  r18 \u003d StackTraceElementDeserializer$Adapter) $r9\n  goto B5\n}",
      "B4 {\n  $r6 \u003d JsonDeserializer _adapterDeserializer\u003e\n  $r7 \u003d $r6.deserialize(r0, r5)\n  r18 \u003d StackTraceElementDeserializer$Adapter) $r7\n}",
      "B5 {\n  $r8 \u003d r3.constructValue(r5, r18)\n  return\n}",
      "B6 {\n  $r11 \u003d JsonToken START_ARRAY\u003e\n  if (r1 !\u003d $r11) goto B7 else B11\n}",
      "B7 {\n  $r15 \u003d DeserializationFeature UNWRAP_SINGLE_VALUE_ARRAYS\u003e\n  $z0 \u003d r5.isEnabled($r15)\n  if ($z0 \u003d\u003d false) goto B8 else B11\n}",
      "B8 {\n  r0.nextToken()\n  r19 \u003d r3.deserialize(r0, r5)\n  $r17 \u003d r0.nextToken()\n  $r16 \u003d JsonToken END_ARRAY\u003e\n  if ($r17 \u003d\u003d $r16) goto B9 else B10\n}",
      "B9 {\n  r3.handleMissingEndArrayForSingle(r0, r5)\n}",
      "B10 {\n  return\n}",
      "B11 {\n  $r12 \u003d Class _valueClass\u003e\n  $r13 \u003d r5.handleUnexpectedToken($r12, r0)\n  $r14 \u003d StackTraceElement) $r13\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StackTraceElementDeserializer#constructValue(...2)",
        "body": "{\r\n    return constructValue(ctxt, adapted.className, adapted.methodName, adapted.fileName, adapted.lineNumber, adapted.moduleName, adapted.moduleVersion, adapted.classLoaderName);\r\n}"
      },
      {
        "name": "StackTraceElementDeserializer#deserialize(...2)",
        "body": "{\r\n    JsonToken t \u003d p.currentToken();\r\n    // Must get an Object\r\n    if (t \u003d\u003d JsonToken.START_OBJECT || t \u003d\u003d JsonToken.FIELD_NAME) {\r\n        Adapter adapted;\r\n        // 26-May-2022, tatu: for legacy use, need to do this:\r\n        if (_adapterDeserializer \u003d\u003d null) {\r\n            adapted \u003d ctxt.readValue(p, Adapter.class);\r\n        } else {\r\n            adapted \u003d (Adapter) _adapterDeserializer.deserialize(p, ctxt);\r\n        }\r\n        return constructValue(ctxt, adapted);\r\n    } else if (t \u003d\u003d JsonToken.START_ARRAY \u0026\u0026 ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\r\n        p.nextToken();\r\n        final StackTraceElement value \u003d deserialize(p, ctxt);\r\n        if (p.nextToken() !\u003d JsonToken.END_ARRAY) {\r\n            handleMissingEndArrayForSingle(p, ctxt);\r\n        }\r\n        return value;\r\n    }\r\n    return (StackTraceElement) ctxt.handleUnexpectedToken(_valueClass, p);\r\n}"
      },
      {
        "name": "StackTraceElementDeserializer#handleMissingEndArrayForSingle(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer",
    "methodName": "replaceDelegatee",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer replaceDelegatee(com.fasterxml.jackson.databind.JsonDeserializer)",
    "visibility": "public",
    "body": "{\r\n    ClassUtil.verifyMustOverride(StdDelegatingDeserializer.class, this, \"replaceDelegatee\");\r\n    if (delegatee \u003d\u003d _delegateDeserializer) {\r\n        return this;\r\n    }\r\n    return new StdDelegatingDeserializer\u003cT\u003e(_converter, _delegateType, delegatee);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r1 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdDelegatingDeserializer\n  JsonDeserializer\n  ClassUtil.verifyMustOverride(class \"Lcom/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer;\", r0, \"replaceDelegatee\")\n  $r2 \u003d JsonDeserializer _delegateDeserializer\u003e\n  if (r1 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d StdDelegatingDeserializer\n  $r5 \u003d Converter _converter\u003e\n  $r4 \u003d JavaType _delegateType\u003e\n  new StdDelegatingDeserializer($r5, $r4, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer",
    "methodName": "resolve",
    "signature": "void resolve(com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    if (_delegateDeserializer !\u003d null \u0026\u0026 _delegateDeserializer instanceof ResolvableDeserializer) {\r\n        ((ResolvableDeserializer) _delegateDeserializer).resolve(ctxt);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  StdDelegatingDeserializer\n  DeserializationContext\n  $r1 \u003d JsonDeserializer _delegateDeserializer\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d JsonDeserializer _delegateDeserializer\u003e\n  $z0 \u003d ResolvableDeserializer\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d JsonDeserializer _delegateDeserializer\u003e\n  $r5 \u003d ResolvableDeserializer) $r3\n  $r5.resolve(r4)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer",
    "methodName": "createContextual",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer createContextual(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    // First: if already got deserializer to delegate to, contextualize it:\r\n    if (_delegateDeserializer !\u003d null) {\r\n        JsonDeserializer\u003c?\u003e deser \u003d ctxt.handleSecondaryContextualization(_delegateDeserializer, property, _delegateType);\r\n        if (deser !\u003d _delegateDeserializer) {\r\n            return withDelegate(_converter, _delegateType, deser);\r\n        }\r\n        return this;\r\n    }\r\n    // Otherwise: figure out what is the fully generic delegate type, then find deserializer\r\n    JavaType delegateType \u003d _converter.getInputType(ctxt.getTypeFactory());\r\n    return withDelegate(_converter, delegateType, ctxt.findContextualValueDeserializer(delegateType, property));\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B4",
      "B1 : If(r15 \u003d\u003d $r11) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  StdDelegatingDeserializer\n  DeserializationContext\n  BeanProperty\n  $r1 \u003d JsonDeserializer _delegateDeserializer\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r10 \u003d JsonDeserializer _delegateDeserializer\u003e\n  $r9 \u003d JavaType _delegateType\u003e\n  r15 \u003d r2.handleSecondaryContextualization($r10, r5, $r9)\n  $r11 \u003d JsonDeserializer _delegateDeserializer\u003e\n  if (r15 \u003d\u003d $r11) goto B2 else B3\n}",
      "B2 {\n  $r13 \u003d Converter _converter\u003e\n  $r12 \u003d JavaType _delegateType\u003e\n  $r14 \u003d r0.withDelegate($r13, $r12, r15)\n  return\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d Converter _converter\u003e\n  $r4 \u003d r2.getTypeFactory()\n  r16 \u003d $r3.getInputType($r4)\n  $r6 \u003d Converter _converter\u003e\n  $r7 \u003d r2.findContextualValueDeserializer(r16, r5)\n  $r8 \u003d r0.withDelegate($r6, r16, $r7)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdDelegatingDeserializer#withDelegate(...3)",
        "body": "{\r\n    ClassUtil.verifyMustOverride(StdDelegatingDeserializer.class, this, \"withDelegate\");\r\n    return new StdDelegatingDeserializer\u003cT\u003e(converter, delegateType, delegateDeserializer);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer",
    "methodName": "deserialize",
    "signature": "java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    Object delegateValue \u003d _delegateDeserializer.deserialize(p, ctxt);\r\n    if (delegateValue \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return convertValue(ctxt, delegateValue);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdDelegatingDeserializer\n  JsonParser\n  DeserializationContext\n  $r3 \u003d JsonDeserializer _delegateDeserializer\u003e\n  r4 \u003d $r3.deserialize(r1, r2)\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r5 \u003d r0.convertValue(r2, r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdDelegatingDeserializer#convertValue(...2)",
        "body": "{\r\n    return _converter.convert(ctxt, delegateValue);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer",
    "methodName": "deserializeWithType",
    "signature": "java.lang.Object deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)",
    "visibility": "public",
    "body": "{\r\n    /* 12-Apr-2016, tatu: As predicted, earlier handling does not work\r\n         *   (see [databind#1189] for details). There does not seem to be any compelling\r\n         *   way to combine polymorphic types, Converters, but the least sucky way\r\n         *   is probably to use Converter and ignore polymorphic type. Alternative\r\n         *   would be to try to change `TypeDeserializer` to accept `Converter` to\r\n         *   invoke... but that is more intrusive, yet not guaranteeing success.\r\n         */\r\n    // method called up to 2.7.3:\r\n    //        Object delegateValue \u003d _delegateDeserializer.deserializeWithType(p, ctxt, typeDeserializer);\r\n    // method called since 2.7.4\r\n    Object delegateValue \u003d _delegateDeserializer.deserialize(p, ctxt);\r\n    if (delegateValue \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return convertValue(ctxt, delegateValue);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdDelegatingDeserializer\n  JsonParser\n  DeserializationContext\n  TypeDeserializer\n  $r3 \u003d JsonDeserializer _delegateDeserializer\u003e\n  r4 \u003d $r3.deserialize(r1, r2)\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r5 \u003d r0.convertValue(r2, r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdDelegatingDeserializer#convertValue(...2)",
        "body": "{\r\n    return _converter.convert(ctxt, delegateValue);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer",
    "methodName": "deserialize",
    "signature": "java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (_delegateType.getRawClass().isAssignableFrom(intoValue.getClass())) {\r\n        return (T) _delegateDeserializer.deserialize(p, ctxt, intoValue);\r\n    }\r\n    return (T) _handleIncompatibleUpdateValue(p, ctxt, intoValue);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdDelegatingDeserializer\n  JsonParser\n  DeserializationContext\n  Object\n  $r1 \u003d JavaType _delegateType\u003e\n  $r4 \u003d $r1.getRawClass()\n  $r3 \u003d r2.getClass()\n  $z0 \u003d $r4.isAssignableFrom($r3)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d JsonDeserializer _delegateDeserializer\u003e\n  $r9 \u003d $r8.deserialize(r5, r6, r2)\n  return\n}",
      "B2 {\n  $r7 \u003d r0._handleIncompatibleUpdateValue(r5, r6, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdDelegatingDeserializer#_handleIncompatibleUpdateValue(...3)",
        "body": "{\r\n    throw new UnsupportedOperationException(String.format(\"Cannot update object of type %s (using deserializer for type %s)\", intoValue.getClass().getName(), _delegateType));\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer",
    "methodName": "deserializeWithType",
    "signature": "java.lang.Object deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdDelegatingDeserializer\n  JsonParser\n  DeserializationContext\n  TypeDeserializer\n  Object\n  $r1 \u003d JavaType _delegateType\u003e\n  $r4 \u003d $r1.getRawClass()\n  $r3 \u003d r2.getClass()\n  $z0 \u003d $r4.isAssignableFrom($r3)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d r0._handleIncompatibleUpdateValue(r5, r6, r2)\n  return\n}",
      "B2 {\n  $r7 \u003d JsonDeserializer _delegateDeserializer\u003e\n  $r8 \u003d $r7.deserialize(r5, r6, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer",
    "methodName": "isCachable",
    "signature": "boolean isCachable()",
    "visibility": "public",
    "body": "{\r\n    return (_delegateDeserializer !\u003d null) \u0026\u0026 _delegateDeserializer.isCachable();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  StdDelegatingDeserializer\n  $r1 \u003d JsonDeserializer _delegateDeserializer\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d JsonDeserializer _delegateDeserializer\u003e\n  $z0 \u003d $r2.isCachable()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer",
    "methodName": "forType",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer forType(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    int kind;\r\n    // first common types:\r\n    if (raw \u003d\u003d String.class || raw \u003d\u003d Object.class || raw \u003d\u003d CharSequence.class || // see [databind#2115]:\r\n    raw \u003d\u003d Serializable.class) {\r\n        return StringKD.forType(raw);\r\n    }\r\n    if (raw \u003d\u003d UUID.class) {\r\n        kind \u003d TYPE_UUID;\r\n    } else if (raw \u003d\u003d Integer.class) {\r\n        kind \u003d TYPE_INT;\r\n    } else if (raw \u003d\u003d Long.class) {\r\n        kind \u003d TYPE_LONG;\r\n    } else if (raw \u003d\u003d Date.class) {\r\n        kind \u003d TYPE_DATE;\r\n    } else if (raw \u003d\u003d Calendar.class) {\r\n        kind \u003d TYPE_CALENDAR;\r\n        // then less common ones...\r\n    } else if (raw \u003d\u003d Boolean.class) {\r\n        kind \u003d TYPE_BOOLEAN;\r\n    } else if (raw \u003d\u003d Byte.class) {\r\n        kind \u003d TYPE_BYTE;\r\n    } else if (raw \u003d\u003d Character.class) {\r\n        kind \u003d TYPE_CHAR;\r\n    } else if (raw \u003d\u003d Short.class) {\r\n        kind \u003d TYPE_SHORT;\r\n    } else if (raw \u003d\u003d Float.class) {\r\n        kind \u003d TYPE_FLOAT;\r\n    } else if (raw \u003d\u003d Double.class) {\r\n        kind \u003d TYPE_DOUBLE;\r\n    } else if (raw \u003d\u003d URI.class) {\r\n        kind \u003d TYPE_URI;\r\n    } else if (raw \u003d\u003d URL.class) {\r\n        kind \u003d TYPE_URL;\r\n    } else if (raw \u003d\u003d Class.class) {\r\n        kind \u003d TYPE_CLASS;\r\n    } else if (raw \u003d\u003d Locale.class) {\r\n        FromStringDeserializer\u003c?\u003e deser \u003d FromStringDeserializer.findDeserializer(Locale.class);\r\n        return new StdKeyDeserializer(TYPE_LOCALE, raw, deser);\r\n    } else if (raw \u003d\u003d Currency.class) {\r\n        FromStringDeserializer\u003c?\u003e deser \u003d FromStringDeserializer.findDeserializer(Currency.class);\r\n        return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser);\r\n    } else if (raw \u003d\u003d byte[].class) {\r\n        kind \u003d TYPE_BYTE_ARRAY;\r\n    } else {\r\n        return null;\r\n    }\r\n    return new StdKeyDeserializer(kind, raw);\r\n}",
    "nodes": 41,
    "edges": 57,
    "cc": 18,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d class \"Ljava/lang/String;\") → B1 | else → B4",
      "B1 : If(r0 \u003d\u003d class \"Ljava/lang/Object;\") → B2 | else → B4",
      "B2 : If(r0 \u003d\u003d class \"Ljava/lang/CharSequence;\") → B3 | else → B4",
      "B3 : If(r0 !\u003d class \"Ljava/io/Serializable;\") → B4 | else → B5",
      "B5 : If(r0 !\u003d class \"Ljava/util/UUID;\") → B6 | else → B7",
      "B7 : If(r0 !\u003d class \"Ljava/lang/Integer;\") → B8 | else → B9",
      "B9 : If(r0 !\u003d class \"Ljava/lang/Long;\") → B10 | else → B11",
      "B11 : If(r0 !\u003d class \"Ljava/util/Date;\") → B12 | else → B13",
      "B13 : If(r0 !\u003d class \"Ljava/util/Calendar;\") → B14 | else → B15",
      "B15 : If(r0 !\u003d class \"Ljava/lang/Boolean;\") → B16 | else → B17",
      "B17 : If(r0 !\u003d class \"Ljava/lang/Byte;\") → B18 | else → B19",
      "B19 : If(r0 !\u003d class \"Ljava/lang/Character;\") → B20 | else → B21",
      "B21 : If(r0 !\u003d class \"Ljava/lang/Short;\") → B22 | else → B23",
      "B23 : If(r0 !\u003d class \"Ljava/lang/Float;\") → B24 | else → B25",
      "B25 : If(r0 !\u003d class \"Ljava/lang/Double;\") → B26 | else → B27",
      "B27 : If(r0 !\u003d class \"Ljava/net/URI;\") → B28 | else → B29",
      "B29 : If(r0 !\u003d class \"Ljava/net/URL;\") → B30 | else → B31",
      "B31 : If(r0 !\u003d class \"Ljava/lang/Class;\") → B32 | else → B33",
      "B33 : If(r0 !\u003d class \"Ljava/util/Locale;\") → B34 | else → B35",
      "B35 : If(r0 !\u003d class \"Ljava/util/Currency;\") → B36 | else → B37",
      "B37 : If(r0 !\u003d class \"[B\") → B38 | else → B39"
    ],
    "blockList": [
      "B0 {\n  Class\n  if (r0 \u003d\u003d class \"Ljava/lang/String;\") goto B1 else B4\n}",
      "B1 {\n  if (r0 \u003d\u003d class \"Ljava/lang/Object;\") goto B2 else B4\n}",
      "B2 {\n  if (r0 \u003d\u003d class \"Ljava/lang/CharSequence;\") goto B3 else B4\n}",
      "B3 {\n  if (r0 !\u003d class \"Ljava/io/Serializable;\") goto B4 else B5\n}",
      "B4 {\n  $r3 \u003d StdKeyDeserializer$StringKD.forType(r0)\n  return\n}",
      "B5 {\n  if (r0 !\u003d class \"Ljava/util/UUID;\") goto B6 else B7\n}",
      "B6 {\n  b0 \u003d 12\n  goto B40\n}",
      "B7 {\n  if (r0 !\u003d class \"Ljava/lang/Integer;\") goto B8 else B9\n}",
      "B8 {\n  b0 \u003d 5\n  goto B40\n}",
      "B9 {\n  if (r0 !\u003d class \"Ljava/lang/Long;\") goto B10 else B11\n}",
      "B10 {\n  b0 \u003d 6\n  goto B40\n}",
      "B11 {\n  if (r0 !\u003d class \"Ljava/util/Date;\") goto B12 else B13\n}",
      "B12 {\n  b0 \u003d 10\n  goto B40\n}",
      "B13 {\n  if (r0 !\u003d class \"Ljava/util/Calendar;\") goto B14 else B15\n}",
      "B14 {\n  b0 \u003d 11\n  goto B40\n}",
      "B15 {\n  if (r0 !\u003d class \"Ljava/lang/Boolean;\") goto B16 else B17\n}",
      "B16 {\n  b0 \u003d 1\n  goto B40\n}",
      "B17 {\n  if (r0 !\u003d class \"Ljava/lang/Byte;\") goto B18 else B19\n}",
      "B18 {\n  b0 \u003d 2\n  goto B40\n}",
      "B19 {\n  if (r0 !\u003d class \"Ljava/lang/Character;\") goto B20 else B21\n}",
      "B20 {\n  b0 \u003d 4\n  goto B40\n}",
      "B21 {\n  if (r0 !\u003d class \"Ljava/lang/Short;\") goto B22 else B23\n}",
      "B22 {\n  b0 \u003d 3\n  goto B40\n}",
      "B23 {\n  if (r0 !\u003d class \"Ljava/lang/Float;\") goto B24 else B25\n}",
      "B24 {\n  b0 \u003d 7\n  goto B40\n}",
      "B25 {\n  if (r0 !\u003d class \"Ljava/lang/Double;\") goto B26 else B27\n}",
      "B26 {\n  b0 \u003d 8\n  goto B40\n}",
      "B27 {\n  if (r0 !\u003d class \"Ljava/net/URI;\") goto B28 else B29\n}",
      "B28 {\n  b0 \u003d 13\n  goto B40\n}",
      "B29 {\n  if (r0 !\u003d class \"Ljava/net/URL;\") goto B30 else B31\n}",
      "B30 {\n  b0 \u003d 14\n  goto B40\n}",
      "B31 {\n  if (r0 !\u003d class \"Ljava/lang/Class;\") goto B32 else B33\n}",
      "B32 {\n  b0 \u003d 15\n  goto B40\n}",
      "B33 {\n  if (r0 !\u003d class \"Ljava/util/Locale;\") goto B34 else B35\n}",
      "B34 {\n  r4 \u003d FromStringDeserializer.findDeserializer(class \"Ljava/util/Locale;\")\n  $r2 \u003d StdKeyDeserializer\n  new StdKeyDeserializer(9, r0, r4)\n  return\n}",
      "B35 {\n  if (r0 !\u003d class \"Ljava/util/Currency;\") goto B36 else B37\n}",
      "B36 {\n  r5 \u003d FromStringDeserializer.findDeserializer(class \"Ljava/util/Currency;\")\n  $r1 \u003d StdKeyDeserializer\n  new StdKeyDeserializer(16, r0, r5)\n  return\n}",
      "B37 {\n  if (r0 !\u003d class \"[B\") goto B38 else B39\n}",
      "B38 {\n  b0 \u003d 17\n  goto B40\n}",
      "B39 {\n  return\n}",
      "B40 {\n  $r6 \u003d StdKeyDeserializer\n  new StdKeyDeserializer(b0, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B40",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B40",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B40",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B40",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B40",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B40",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B40",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B40",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B40",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B40",
      "B25 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B40",
      "B27 --\u003e B28",
      "B27 --\u003e B29",
      "B28 --\u003e B40",
      "B29 --\u003e B30",
      "B29 --\u003e B31",
      "B30 --\u003e B40",
      "B31 --\u003e B32",
      "B31 --\u003e B33",
      "B32 --\u003e B40",
      "B33 --\u003e B34",
      "B33 --\u003e B35",
      "B34 --\u003e [EXIT]",
      "B35 --\u003e B36",
      "B35 --\u003e B37",
      "B36 --\u003e [EXIT]",
      "B37 --\u003e B38",
      "B37 --\u003e B39",
      "B38 --\u003e B40",
      "B39 --\u003e [EXIT]",
      "B40 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer",
    "methodName": "deserializeKey",
    "signature": "java.lang.Object deserializeKey(java.lang.String,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    if (key \u003d\u003d null) {\r\n        // is this even legal call?\r\n        return null;\r\n    }\r\n    try {\r\n        Object result \u003d _parse(key, ctxt);\r\n        if (result !\u003d null) {\r\n            return result;\r\n        }\r\n    } catch (Exception re) {\r\n        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: (%s) %s\", re.getClass().getName(), ClassUtil.exceptionMessage(re));\r\n    }\r\n    if (ClassUtil.isEnumType(_keyClass) \u0026\u0026 ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\r\n        return null;\r\n    }\r\n    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\r\n}",
    "nodes": 10,
    "edges": 9,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r16 \u003d\u003d null) → B3 | else → B4",
      "B6 : If($z0 \u003d\u003d false) → B7 | else → B9",
      "B7 : If($z1 \u003d\u003d false) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  StdKeyDeserializer\n  String\n  DeserializationContext\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r16 \u003d r1._parse(r0, r2)\n  if (r16 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  goto B6\n}",
      "B5 {\n  $r9 :\u003d @caughtexception\n  $r11 \u003d Class _keyClass\u003e\n  $r10 \u003d Object)[2]\n  $r12 \u003d $r9.getClass()\n  $r13 \u003d $r12.getName()\n  $r10[0] \u003d $r13\n  $r14 \u003d ClassUtil.exceptionMessage($r9)\n  $r10[1] \u003d $r14\n  $r15 \u003d r2.handleWeirdKey($r11, r0, \"not a valid representation, problem: (%s) %s\", $r10)\n  return\n}",
      "B6 {\n  $r3 \u003d Class _keyClass\u003e\n  $z0 \u003d ClassUtil.isEnumType($r3)\n  if ($z0 \u003d\u003d false) goto B7 else B9\n}",
      "B7 {\n  $r8 \u003d r2.getConfig()\n  $r7 \u003d DeserializationFeature READ_UNKNOWN_ENUM_VALUES_AS_NULL\u003e\n  $z1 \u003d $r8.isEnabled($r7)\n  if ($z1 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $r5 \u003d Class _keyClass\u003e\n  $r4 \u003d Object)[0]\n  $r6 \u003d r2.handleWeirdKey($r5, r0, \"not a valid representation\", $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdKeyDeserializer#_parse(...2)",
        "body": "{\r\n    switch(_kind) {\r\n        case TYPE_BOOLEAN:\r\n            if (\"true\".equals(key)) {\r\n                return Boolean.TRUE;\r\n            }\r\n            if (\"false\".equals(key)) {\r\n                return Boolean.FALSE;\r\n            }\r\n            return ctxt.handleWeirdKey(_keyClass, key, \"value not \u0027true\u0027 or \u0027false\u0027\");\r\n        case TYPE_BYTE:\r\n            {\r\n                int value \u003d _parseInt(key);\r\n                // allow range up to 255, inclusive (to support \"unsigned\" byte)\r\n                if (value \u003c Byte.MIN_VALUE || value \u003e 255) {\r\n                    return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value cannot be represented as 8-bit value\");\r\n                }\r\n                return Byte.valueOf((byte) value);\r\n            }\r\n        case TYPE_SHORT:\r\n            {\r\n                int value \u003d _parseInt(key);\r\n                if (value \u003c Short.MIN_VALUE || value \u003e Short.MAX_VALUE) {\r\n                    return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value cannot be represented as 16-bit value\");\r\n                    // fall-through and truncate if need be\r\n                }\r\n                return Short.valueOf((short) value);\r\n            }\r\n        case TYPE_CHAR:\r\n            if (key.length() \u003d\u003d 1) {\r\n                return Character.valueOf(key.charAt(0));\r\n            }\r\n            return ctxt.handleWeirdKey(_keyClass, key, \"can only convert 1-character Strings\");\r\n        case TYPE_INT:\r\n            return _parseInt(key);\r\n        case TYPE_LONG:\r\n            return _parseLong(key);\r\n        case TYPE_FLOAT:\r\n            // Bounds/range checks would be tricky here, so let\u0027s not bother even trying...\r\n            return Float.valueOf((float) _parseDouble(key));\r\n        case TYPE_DOUBLE:\r\n            return _parseDouble(key);\r\n        case TYPE_LOCALE:\r\n        case TYPE_CURRENCY:\r\n            try {\r\n                return _deser._deserialize(key, ctxt);\r\n            } catch (IllegalArgumentException e) {\r\n                return _weirdKey(ctxt, key, e);\r\n            }\r\n        case TYPE_DATE:\r\n            return ctxt.parseDate(key);\r\n        case TYPE_CALENDAR:\r\n            return ctxt.constructCalendar(ctxt.parseDate(key));\r\n        case TYPE_UUID:\r\n            try {\r\n                return UUID.fromString(key);\r\n            } catch (Exception e) {\r\n                return _weirdKey(ctxt, key, e);\r\n            }\r\n        case TYPE_URI:\r\n            try {\r\n                return URI.create(key);\r\n            } catch (Exception e) {\r\n                return _weirdKey(ctxt, key, e);\r\n            }\r\n        case TYPE_URL:\r\n            try {\r\n                return new URL(key);\r\n            } catch (MalformedURLException e) {\r\n                return _weirdKey(ctxt, key, e);\r\n            }\r\n        case TYPE_CLASS:\r\n            try {\r\n                return ctxt.findClass(key);\r\n            } catch (Exception e) {\r\n                return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as Class\");\r\n            }\r\n        case TYPE_BYTE_ARRAY:\r\n            try {\r\n                return ctxt.getConfig().getBase64Variant().decode(key);\r\n            } catch (IllegalArgumentException e) {\r\n                return _weirdKey(ctxt, key, e);\r\n            }\r\n        default:\r\n            throw new IllegalStateException(\"Internal error: unknown key type \" + _keyClass);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers",
    "methodName": "findStringBasedKeyDeserializer",
    "signature": "com.fasterxml.jackson.databind.KeyDeserializer findStringBasedKeyDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    // 15-Jun-2021, tatu: As per [databind#3143], full introspection needs to consider\r\n    //   as set of possibilities. Basically, precedence is:\r\n    //\r\n    //   1. Explicitly annotated 1-String-arg constructor, if one exists\r\n    //   2. Explicitly annotated Factory method: just one allowed (exception if multiple)\r\n    //   3. Implicit 1-String-arg constructor (no visibility checks for backwards\r\n    //      compatibility reasons; should probably be checked in future, 3.0?)\r\n    //   4. Implicit Factory method with name of \"valueOf()\" (primary) or\r\n    //      \"fromString()\" (secondary). Likewise, no visibility check as of yet.\r\n    // We don\u0027t need full deserialization information, just need to know creators.\r\n    final BeanDescription beanDesc \u003d config.introspectForCreation(type);\r\n    // Ok, so: can we find T(String) constructor?\r\n    final AnnotatedAndMetadata\u003cAnnotatedConstructor, JsonCreator.Mode\u003e ctorInfo \u003d _findStringConstructor(beanDesc);\r\n    // Explicit?\r\n    if ((ctorInfo !\u003d null) \u0026\u0026 (ctorInfo.metadata !\u003d null)) {\r\n        return _constructCreatorKeyDeserializer(config, ctorInfo.annotated);\r\n    }\r\n    // or if not, \"static T valueOf(String)\" (or equivalent marked\r\n    // with @JsonCreator annotation?)\r\n    final List\u003cAnnotatedAndMetadata\u003cAnnotatedMethod, JsonCreator.Mode\u003e\u003e factoryCandidates \u003d beanDesc.getFactoryMethodsWithMode();\r\n    // But must now filter out invalid candidates, both by signature (must take 1 and\r\n    // only 1 arg; that arg must be of type `String`) and by annotations (we only\r\n    // accept \"delegating\" style, so remove PROPERTIES)\r\n    factoryCandidates.removeIf(m -\u003e (m.annotated.getParameterCount() !\u003d 1) || (m.annotated.getRawParameterType(0) !\u003d String.class) || (m.metadata \u003d\u003d JsonCreator.Mode.PROPERTIES));\r\n    // Any explicit?\r\n    final AnnotatedMethod explicitFactory \u003d _findExplicitStringFactoryMethod(factoryCandidates);\r\n    if (explicitFactory !\u003d null) {\r\n        return _constructCreatorKeyDeserializer(config, explicitFactory);\r\n    }\r\n    // If we had implicit Constructor, that\u0027d work now\r\n    if (ctorInfo !\u003d null) {\r\n        return _constructCreatorKeyDeserializer(config, ctorInfo.annotated);\r\n    }\r\n    // And finally, if any implicit factory methods, acceptable now\r\n    // nope, no such luck...\r\n    if (!factoryCandidates.isEmpty()) {\r\n        // 15-Jun-2021, tatu: Ideally we would provide stabler ordering, but for now\r\n        //   let\u0027s simply pick the first one\r\n        return _constructCreatorKeyDeserializer(config, factoryCandidates.get(0).annotated);\r\n    }\r\n    return null;\r\n}",
    "nodes": 10,
    "edges": 10,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($r14 \u003d\u003d null) → B2 | else → B3",
      "B3 : If($r16 \u003d\u003d null) → B4 | else → B5",
      "B5 : If(r3 \u003d\u003d null) → B6 | else → B7",
      "B7 : If($z0 !\u003d 0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  JavaType\n  r2 \u003d r0.introspectForCreation(r1)\n  r3 \u003d StdKeyDeserializers._findStringConstructor(r2)\n  if (r3 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r14 \u003d Object metadata\u003e\n  if ($r14 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r17 \u003d Annotated annotated\u003e\n  $r18 \u003d AnnotatedMember) $r17\n  $r19 \u003d StdKeyDeserializers._constructCreatorKeyDeserializer(r0, $r18)\n  return\n}",
      "B3 {\n  $r15 \u003d r2.getFactoryMethodsWithMode()\n  $r4 \u003d StdKeyDeserializers$lambda_findStringBasedKeyDeserializer_0__1.bootstrap$()\n  $r15.removeIf($r4)\n  $r16 \u003d StdKeyDeserializers._findExplicitStringFactoryMethod($r15)\n  if ($r16 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r13 \u003d StdKeyDeserializers._constructCreatorKeyDeserializer(r0, $r16)\n  return\n}",
      "B5 {\n  if (r3 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r10 \u003d Annotated annotated\u003e\n  $r11 \u003d AnnotatedMember) $r10\n  $r12 \u003d StdKeyDeserializers._constructCreatorKeyDeserializer(r0, $r11)\n  return\n}",
      "B7 {\n  $z0 \u003d $r15.isEmpty()\n  if ($z0 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  $r5 \u003d $r15.get(0)\n  $r6 \u003d AnnotatedAndMetadata) $r5\n  $r7 \u003d Annotated annotated\u003e\n  $r8 \u003d AnnotatedMember) $r7\n  $r9 \u003d StdKeyDeserializers._constructCreatorKeyDeserializer(r0, $r8)\n  return\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdKeyDeserializers#_constructCreatorKeyDeserializer(...2)",
        "body": "{\r\n    if (creator instanceof AnnotatedConstructor) {\r\n        Constructor\u003c?\u003e rawCtor \u003d ((AnnotatedConstructor) creator).getAnnotated();\r\n        if (config.canOverrideAccessModifiers()) {\r\n            ClassUtil.checkAndFixAccess(rawCtor, config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\r\n        }\r\n        return new StdKeyDeserializer.StringCtorKeyDeserializer(rawCtor);\r\n    }\r\n    Method m \u003d ((AnnotatedMethod) creator).getAnnotated();\r\n    if (config.canOverrideAccessModifiers()) {\r\n        ClassUtil.checkAndFixAccess(m, config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\r\n    }\r\n    return new StdKeyDeserializer.StringFactoryKeyDeserializer(m);\r\n}"
      },
      {
        "name": "StdKeyDeserializers#_findStringConstructor(...1)",
        "body": "{\r\n    for (AnnotatedAndMetadata\u003cAnnotatedConstructor, JsonCreator.Mode\u003e entry : beanDesc.getConstructorsWithMode()) {\r\n        // BeanDescription method does NOT filter out various types so check\r\n        // it takes single argument.\r\n        final AnnotatedConstructor ctor \u003d entry.annotated;\r\n        if ((ctor.getParameterCount() \u003d\u003d 1) \u0026\u0026 (String.class \u003d\u003d ctor.getRawParameterType(0))) {\r\n            return entry;\r\n        }\r\n    }\r\n    return null;\r\n}"
      },
      {
        "name": "StdKeyDeserializers#_findExplicitStringFactoryMethod(...1)",
        "body": "{\r\n    AnnotatedMethod match \u003d null;\r\n    for (AnnotatedAndMetadata\u003cAnnotatedMethod, JsonCreator.Mode\u003e entry : candidates) {\r\n        // Note: caller has filtered out invalid candidates; all we need to check are dups\r\n        if (entry.metadata !\u003d null) {\r\n            if (match \u003d\u003d null) {\r\n                match \u003d entry.annotated;\r\n            } else {\r\n                // 15-Jun-2021, tatu: Not optimal type or information, but has to do for now\r\n                //    since we do not get DeserializationContext\r\n                Class\u003c?\u003e rawKeyType \u003d entry.annotated.getDeclaringClass();\r\n                throw new IllegalArgumentException(\"Multiple suitable annotated Creator factory methods to be used as the Key deserializer for type \" + ClassUtil.nameOf(rawKeyType));\r\n            }\r\n        }\r\n    }\r\n    return match;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers",
    "methodName": "findKeyDeserializer",
    "signature": "com.fasterxml.jackson.databind.KeyDeserializer findKeyDeserializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)",
    "visibility": "public",
    "body": "{\r\n    Class\u003c?\u003e raw \u003d type.getRawClass();\r\n    // 23-Apr-2013, tatu: Map primitive types, just in case one was given\r\n    if (raw.isPrimitive()) {\r\n        raw \u003d ClassUtil.wrapperType(raw);\r\n    }\r\n    return StdKeyDeserializer.forType(raw);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdKeyDeserializers\n  JavaType\n  DeserializationConfig\n  BeanDescription\n  r5 \u003d r0.getRawClass()\n  $z0 \u003d r5.isPrimitive()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r5 \u003d ClassUtil.wrapperType(r5)\n}",
      "B2 {\n  $r1 \u003d StdKeyDeserializer.forType(r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "methodName": "canCreateFromString",
    "signature": "boolean canCreateFromString()",
    "visibility": "public",
    "body": "{\r\n    return (_fromStringCreator !\u003d null);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdValueInstantiator\n  $r1 \u003d AnnotatedWithParams _fromStringCreator\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "methodName": "canCreateFromInt",
    "signature": "boolean canCreateFromInt()",
    "visibility": "public",
    "body": "{\r\n    return (_fromIntCreator !\u003d null);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdValueInstantiator\n  $r1 \u003d AnnotatedWithParams _fromIntCreator\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "methodName": "canCreateFromLong",
    "signature": "boolean canCreateFromLong()",
    "visibility": "public",
    "body": "{\r\n    return (_fromLongCreator !\u003d null);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdValueInstantiator\n  $r1 \u003d AnnotatedWithParams _fromLongCreator\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "methodName": "canCreateFromBigInteger",
    "signature": "boolean canCreateFromBigInteger()",
    "visibility": "public",
    "body": "{\r\n    return _fromBigIntegerCreator !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdValueInstantiator\n  $r1 \u003d AnnotatedWithParams _fromBigIntegerCreator\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "methodName": "canCreateFromDouble",
    "signature": "boolean canCreateFromDouble()",
    "visibility": "public",
    "body": "{\r\n    return (_fromDoubleCreator !\u003d null);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdValueInstantiator\n  $r1 \u003d AnnotatedWithParams _fromDoubleCreator\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "methodName": "canCreateFromBigDecimal",
    "signature": "boolean canCreateFromBigDecimal()",
    "visibility": "public",
    "body": "{\r\n    return _fromBigDecimalCreator !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdValueInstantiator\n  $r1 \u003d AnnotatedWithParams _fromBigDecimalCreator\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "methodName": "canCreateFromBoolean",
    "signature": "boolean canCreateFromBoolean()",
    "visibility": "public",
    "body": "{\r\n    return (_fromBooleanCreator !\u003d null);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdValueInstantiator\n  $r1 \u003d AnnotatedWithParams _fromBooleanCreator\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "methodName": "canCreateUsingDefault",
    "signature": "boolean canCreateUsingDefault()",
    "visibility": "public",
    "body": "{\r\n    return (_defaultCreator !\u003d null);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdValueInstantiator\n  $r1 \u003d AnnotatedWithParams _defaultCreator\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "methodName": "canCreateUsingDelegate",
    "signature": "boolean canCreateUsingDelegate()",
    "visibility": "public",
    "body": "{\r\n    return (_delegateType !\u003d null);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdValueInstantiator\n  $r1 \u003d JavaType _delegateType\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "methodName": "canCreateUsingArrayDelegate",
    "signature": "boolean canCreateUsingArrayDelegate()",
    "visibility": "public",
    "body": "{\r\n    return (_arrayDelegateType !\u003d null);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdValueInstantiator\n  $r1 \u003d JavaType _arrayDelegateType\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "methodName": "canCreateFromObjectWith",
    "signature": "boolean canCreateFromObjectWith()",
    "visibility": "public",
    "body": "{\r\n    return (_withArgsCreator !\u003d null);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdValueInstantiator\n  $r1 \u003d AnnotatedWithParams _withArgsCreator\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "methodName": "canInstantiate",
    "signature": "boolean canInstantiate()",
    "visibility": "public",
    "body": "{\r\n    return canCreateUsingDefault() || canCreateUsingDelegate() || canCreateUsingArrayDelegate() || canCreateFromObjectWith() || canCreateFromString() || canCreateFromInt() || canCreateFromLong() || canCreateFromDouble() || canCreateFromBoolean();\r\n}",
    "nodes": 12,
    "edges": 20,
    "cc": 10,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B9",
      "B1 : If($z1 !\u003d 0) → B2 | else → B9",
      "B2 : If($z2 !\u003d 0) → B3 | else → B9",
      "B3 : If($z3 !\u003d 0) → B4 | else → B9",
      "B4 : If($z4 !\u003d 0) → B5 | else → B9",
      "B5 : If($z5 !\u003d 0) → B6 | else → B9",
      "B6 : If($z6 !\u003d 0) → B7 | else → B9",
      "B7 : If($z7 !\u003d 0) → B8 | else → B9",
      "B8 : If($z8 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  StdValueInstantiator\n  $z0 \u003d r0.canCreateUsingDefault()\n  if ($z0 !\u003d 0) goto B1 else B9\n}",
      "B1 {\n  $z1 \u003d r0.canCreateUsingDelegate()\n  if ($z1 !\u003d 0) goto B2 else B9\n}",
      "B2 {\n  $z2 \u003d r0.canCreateUsingArrayDelegate()\n  if ($z2 !\u003d 0) goto B3 else B9\n}",
      "B3 {\n  $z3 \u003d r0.canCreateFromObjectWith()\n  if ($z3 !\u003d 0) goto B4 else B9\n}",
      "B4 {\n  $z4 \u003d r0.canCreateFromString()\n  if ($z4 !\u003d 0) goto B5 else B9\n}",
      "B5 {\n  $z5 \u003d r0.canCreateFromInt()\n  if ($z5 !\u003d 0) goto B6 else B9\n}",
      "B6 {\n  $z6 \u003d r0.canCreateFromLong()\n  if ($z6 !\u003d 0) goto B7 else B9\n}",
      "B7 {\n  $z7 \u003d r0.canCreateFromDouble()\n  if ($z7 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  $z8 \u003d r0.canCreateFromBoolean()\n  if ($z8 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $z9 \u003d 1\n  goto B11\n}",
      "B10 {\n  $z9 \u003d 0\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B9",
      "B1 --\u003e B2",
      "B1 --\u003e B9",
      "B2 --\u003e B3",
      "B2 --\u003e B9",
      "B3 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdValueInstantiator#canCreateFromInt(...0)",
        "body": "{\r\n    return (_fromIntCreator !\u003d null);\r\n}"
      },
      {
        "name": "StdValueInstantiator#canCreateFromObjectWith(...0)",
        "body": "{\r\n    return (_withArgsCreator !\u003d null);\r\n}"
      },
      {
        "name": "StdValueInstantiator#canCreateUsingDefault(...0)",
        "body": "{\r\n    return (_defaultCreator !\u003d null);\r\n}"
      },
      {
        "name": "StdValueInstantiator#canCreateUsingArrayDelegate(...0)",
        "body": "{\r\n    return (_arrayDelegateType !\u003d null);\r\n}"
      },
      {
        "name": "StdValueInstantiator#canCreateFromBoolean(...0)",
        "body": "{\r\n    return (_fromBooleanCreator !\u003d null);\r\n}"
      },
      {
        "name": "StdValueInstantiator#canCreateFromLong(...0)",
        "body": "{\r\n    return (_fromLongCreator !\u003d null);\r\n}"
      },
      {
        "name": "StdValueInstantiator#canCreateUsingDelegate(...0)",
        "body": "{\r\n    return (_delegateType !\u003d null);\r\n}"
      },
      {
        "name": "StdValueInstantiator#canCreateFromString(...0)",
        "body": "{\r\n    return (_fromStringCreator !\u003d null);\r\n}"
      },
      {
        "name": "StdValueInstantiator#canCreateFromDouble(...0)",
        "body": "{\r\n    return (_fromDoubleCreator !\u003d null);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "methodName": "createUsingDefaultOrWithoutArguments",
    "signature": "java.lang.Object createUsingDefaultOrWithoutArguments(com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    if (_defaultCreator !\u003d null) {\r\n        // sanity-check; caller should check\r\n        return createUsingDefault(ctxt);\r\n    }\r\n    if (_withArgsCreator !\u003d null) {\r\n        return createFromObjectWith(ctxt, new Object[_constructorArguments.length]);\r\n    }\r\n    return super.createUsingDefaultOrWithoutArguments(ctxt);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r2 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StdValueInstantiator\n  DeserializationContext\n  $r1 \u003d AnnotatedWithParams _defaultCreator\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d r0.createUsingDefault(r3)\n  return\n}",
      "B2 {\n  $r2 \u003d AnnotatedWithParams _withArgsCreator\u003e\n  if ($r2 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d SettableBeanProperty[] _constructorArguments\u003e\n  $i0 \u003d lengthof $r5\n  $r6 \u003d Object)[$i0]\n  $r7 \u003d r0.createFromObjectWith(r3, $r6)\n  return\n}",
      "B4 {\n  $r4 \u003d r0.createUsingDefaultOrWithoutArguments(r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdValueInstantiator#createUsingDefault(...1)",
        "body": "{\r\n    if (_defaultCreator \u003d\u003d null) {\r\n        // sanity-check; caller should check\r\n        return super.createUsingDefault(ctxt);\r\n    }\r\n    try {\r\n        return _defaultCreator.call();\r\n    } catch (Exception e) {\r\n        // 19-Apr-2017, tatu: Let\u0027s not catch Errors, just Exceptions\r\n        return ctxt.handleInstantiationProblem(_valueClass, null, rewrapCtorProblem(ctxt, e));\r\n    }\r\n}"
      },
      {
        "name": "StdValueInstantiator#createFromObjectWith(...2)",
        "body": "{\r\n    if (_withArgsCreator \u003d\u003d null) {\r\n        // sanity-check; caller should check\r\n        return super.createFromObjectWith(ctxt, args);\r\n    }\r\n    try {\r\n        return _withArgsCreator.call(args);\r\n    } catch (Exception e) {\r\n        // 19-Apr-2017, tatu: Let\u0027s not catch Errors, just Exceptions\r\n        return ctxt.handleInstantiationProblem(_valueClass, args, rewrapCtorProblem(ctxt, e));\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "methodName": "createUsingDelegate",
    "signature": "java.lang.Object createUsingDelegate(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    // 04-Oct-2016, tatu: Need delegation to work around [databind#1392]...\r\n    if (_delegateCreator \u003d\u003d null) {\r\n        if (_arrayDelegateCreator !\u003d null) {\r\n            return _createUsingDelegate(_arrayDelegateCreator, _arrayDelegateArguments, ctxt, delegate);\r\n        }\r\n    }\r\n    return _createUsingDelegate(_delegateCreator, _delegateArguments, ctxt, delegate);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B3",
      "B1 : If($r7 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  StdValueInstantiator\n  DeserializationContext\n  Object\n  $r1 \u003d AnnotatedWithParams _delegateCreator\u003e\n  if ($r1 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r7 \u003d AnnotatedWithParams _arrayDelegateCreator\u003e\n  if ($r7 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r9 \u003d AnnotatedWithParams _arrayDelegateCreator\u003e\n  $r8 \u003d SettableBeanProperty[] _arrayDelegateArguments\u003e\n  $r10 \u003d r0._createUsingDelegate($r9, $r8, r2, r3)\n  return\n}",
      "B3 {\n  $r5 \u003d AnnotatedWithParams _delegateCreator\u003e\n  $r4 \u003d SettableBeanProperty[] _delegateArguments\u003e\n  $r6 \u003d r0._createUsingDelegate($r5, $r4, r2, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdValueInstantiator#_createUsingDelegate(...4)",
        "body": "{\r\n    if (delegateCreator \u003d\u003d null) {\r\n        // sanity-check; caller should check\r\n        throw new IllegalStateException(\"No delegate constructor for \" + getValueTypeDesc());\r\n    }\r\n    try {\r\n        // First simple case: just delegate, no injectables\r\n        if (delegateArguments \u003d\u003d null) {\r\n            return delegateCreator.call1(delegate);\r\n        }\r\n        // And then the case with at least one injectable...\r\n        final int len \u003d delegateArguments.length;\r\n        Object[] args \u003d new Object[len];\r\n        for (int i \u003d 0; i \u003c len; ++i) {\r\n            SettableBeanProperty prop \u003d delegateArguments[i];\r\n            if (prop \u003d\u003d null) {\r\n                // delegate\r\n                args[i] \u003d delegate;\r\n            } else {\r\n                // nope, injectable:\r\n                args[i] \u003d ctxt.findInjectableValue(prop.getInjectableValueId(), prop, null);\r\n            }\r\n        }\r\n        // and then try calling with full set of arguments\r\n        return delegateCreator.call(args);\r\n    } catch (Exception t) {\r\n        throw rewrapCtorProblem(ctxt, t);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "methodName": "createUsingArrayDelegate",
    "signature": "java.lang.Object createUsingArrayDelegate(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (_arrayDelegateCreator \u003d\u003d null) {\r\n        if (_delegateCreator !\u003d null) {\r\n            // sanity-check; caller should check\r\n            // fallback to the classic delegate creator\r\n            return createUsingDelegate(ctxt, delegate);\r\n        }\r\n    }\r\n    return _createUsingDelegate(_arrayDelegateCreator, _arrayDelegateArguments, ctxt, delegate);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B3",
      "B1 : If($r7 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  StdValueInstantiator\n  DeserializationContext\n  Object\n  $r1 \u003d AnnotatedWithParams _arrayDelegateCreator\u003e\n  if ($r1 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r7 \u003d AnnotatedWithParams _delegateCreator\u003e\n  if ($r7 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r8 \u003d r0.createUsingDelegate(r2, r3)\n  return\n}",
      "B3 {\n  $r5 \u003d AnnotatedWithParams _arrayDelegateCreator\u003e\n  $r4 \u003d SettableBeanProperty[] _arrayDelegateArguments\u003e\n  $r6 \u003d r0._createUsingDelegate($r5, $r4, r2, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdValueInstantiator#_createUsingDelegate(...4)",
        "body": "{\r\n    if (delegateCreator \u003d\u003d null) {\r\n        // sanity-check; caller should check\r\n        throw new IllegalStateException(\"No delegate constructor for \" + getValueTypeDesc());\r\n    }\r\n    try {\r\n        // First simple case: just delegate, no injectables\r\n        if (delegateArguments \u003d\u003d null) {\r\n            return delegateCreator.call1(delegate);\r\n        }\r\n        // And then the case with at least one injectable...\r\n        final int len \u003d delegateArguments.length;\r\n        Object[] args \u003d new Object[len];\r\n        for (int i \u003d 0; i \u003c len; ++i) {\r\n            SettableBeanProperty prop \u003d delegateArguments[i];\r\n            if (prop \u003d\u003d null) {\r\n                // delegate\r\n                args[i] \u003d delegate;\r\n            } else {\r\n                // nope, injectable:\r\n                args[i] \u003d ctxt.findInjectableValue(prop.getInjectableValueId(), prop, null);\r\n            }\r\n        }\r\n        // and then try calling with full set of arguments\r\n        return delegateCreator.call(args);\r\n    } catch (Exception t) {\r\n        throw rewrapCtorProblem(ctxt, t);\r\n    }\r\n}"
      },
      {
        "name": "StdValueInstantiator#createUsingDelegate(...2)",
        "body": "{\r\n    // 04-Oct-2016, tatu: Need delegation to work around [databind#1392]...\r\n    if (_delegateCreator \u003d\u003d null) {\r\n        if (_arrayDelegateCreator !\u003d null) {\r\n            return _createUsingDelegate(_arrayDelegateCreator, _arrayDelegateArguments, ctxt, delegate);\r\n        }\r\n    }\r\n    return _createUsingDelegate(_delegateCreator, _delegateArguments, ctxt, delegate);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer",
    "methodName": "createContextual",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer createContextual(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    JsonDeserializer\u003c?\u003e deser \u003d _elementDeserializer;\r\n    // May have a content converter\r\n    deser \u003d findConvertingContentDeserializer(ctxt, property, deser);\r\n    JavaType type \u003d ctxt.constructType(String.class);\r\n    if (deser \u003d\u003d null) {\r\n        deser \u003d ctxt.findContextualValueDeserializer(type, property);\r\n    } else {\r\n        // if directly assigned, probably not yet contextual, so:\r\n        deser \u003d ctxt.handleSecondaryContextualization(deser, property, type);\r\n    }\r\n    // One more thing: allow unwrapping?\r\n    Boolean unwrapSingle \u003d findFormatFeature(ctxt, property, String[].class, JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\r\n    NullValueProvider nuller \u003d findContentNullProvider(ctxt, property, deser);\r\n    // Ok ok: if all we got is the default String deserializer, can just forget about it\r\n    if ((deser !\u003d null) \u0026\u0026 isDefaultDeserializer(deser)) {\r\n        deser \u003d null;\r\n    }\r\n    if ((_elementDeserializer \u003d\u003d deser) \u0026\u0026 (Objects.equals(_unwrapSingle, unwrapSingle)) \u0026\u0026 (_nullProvider \u003d\u003d nuller)) {\r\n        return this;\r\n    }\r\n    return new StringArrayDeserializer(deser, nuller, unwrapSingle);\r\n}",
    "nodes": 11,
    "edges": 15,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r10 !\u003d null) → B1 | else → B2",
      "B3 : If(r11 \u003d\u003d null) → B4 | else → B6",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6",
      "B6 : If($r12 !\u003d r11) → B7 | else → B10",
      "B7 : If($z0 \u003d\u003d false) → B8 | else → B10",
      "B8 : If($r6 !\u003d $r8) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  StringArrayDeserializer\n  DeserializationContext\n  BeanProperty\n  r9 \u003d JsonDeserializer _elementDeserializer\u003e\n  r10 \u003d r0.findConvertingContentDeserializer(r1, r2, r9)\n  r3 \u003d r1.constructType(class \"Ljava/lang/String;\")\n  if (r10 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r11 \u003d r1.findContextualValueDeserializer(r3, r2)\n  goto B3\n}",
      "B2 {\n  r11 \u003d r1.handleSecondaryContextualization(r10, r2, r3)\n}",
      "B3 {\n  $r4 \u003d JsonFormat$Feature ACCEPT_SINGLE_VALUE_AS_ARRAY\u003e\n  $r7 \u003d r0.findFormatFeature(r1, r2, class \"Ljava/lang/String;\", $r4)\n  $r8 \u003d r0.findContentNullProvider(r1, r2, r11)\n  if (r11 \u003d\u003d null) goto B4 else B6\n}",
      "B4 {\n  $z1 \u003d r0.isDefaultDeserializer(r11)\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  r11 \u003d null\n}",
      "B6 {\n  $r12 \u003d JsonDeserializer _elementDeserializer\u003e\n  if ($r12 !\u003d r11) goto B7 else B10\n}",
      "B7 {\n  $r5 \u003d Boolean _unwrapSingle\u003e\n  $z0 \u003d Objects.equals($r5, $r7)\n  if ($z0 \u003d\u003d false) goto B8 else B10\n}",
      "B8 {\n  $r6 \u003d NullValueProvider _nullProvider\u003e\n  if ($r6 !\u003d $r8) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $r13 \u003d StringArrayDeserializer\n  new StringArrayDeserializer(r11, $r8, $r7)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringArrayDeserializer#findFormatFeature(...4)",
        "body": "(source not found)"
      },
      {
        "name": "StringArrayDeserializer#findContentNullProvider(...3)",
        "body": "(source not found)"
      },
      {
        "name": "StringArrayDeserializer#isDefaultDeserializer(...1)",
        "body": "(source not found)"
      },
      {
        "name": "StringArrayDeserializer#findConvertingContentDeserializer(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer",
    "methodName": "deserialize",
    "signature": "java.lang.String[] deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    // Ok: must point to START_ARRAY (or equivalent)\r\n    if (!p.isExpectedStartArrayToken()) {\r\n        return handleNonArray(p, ctxt);\r\n    }\r\n    if (_elementDeserializer !\u003d null) {\r\n        return _deserializeCustom(p, ctxt, null);\r\n    }\r\n    final ObjectBuffer buffer \u003d ctxt.leaseObjectBuffer();\r\n    Object[] chunk \u003d buffer.resetAndStart();\r\n    int ix \u003d 0;\r\n    try {\r\n        while (true) {\r\n            String value \u003d p.nextTextValue();\r\n            if (value \u003d\u003d null) {\r\n                JsonToken t \u003d p.currentToken();\r\n                if (t \u003d\u003d JsonToken.END_ARRAY) {\r\n                    break;\r\n                }\r\n                if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                    if (_skipNullValues) {\r\n                        continue;\r\n                    }\r\n                    value \u003d (String) _nullProvider.getNullValue(ctxt);\r\n                } else {\r\n                    value \u003d _parseString(p, ctxt, _nullProvider);\r\n                }\r\n            }\r\n            if (ix \u003e\u003d chunk.length) {\r\n                chunk \u003d buffer.appendCompletedChunk(chunk);\r\n                ix \u003d 0;\r\n            }\r\n            chunk[ix++] \u003d value;\r\n        }\r\n    } catch (Exception e) {\r\n        throw JsonMappingException.wrapWithPath(e, chunk, buffer.bufferedSize() + ix);\r\n    }\r\n    String[] result \u003d buffer.completeAndClearBuffer(chunk, ix, String.class);\r\n    ctxt.returnObjectBuffer(buffer);\r\n    return result;\r\n}",
    "nodes": 19,
    "edges": 22,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($r2 \u003d\u003d null) → B3 | else → B4",
      "B5 : If($r17 !\u003d null) → B6 | else → B13",
      "B6 : If(r5 !\u003d $r6) → B7 | else → B8",
      "B8 : If(r5 !\u003d $r7) → B9 | else → B12",
      "B9 : If($z1 \u003d\u003d false) → B10 | else → B11",
      "B13 : If(i3 \u003c $i4) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  StringArrayDeserializer\n  JsonParser\n  DeserializationContext\n  $z0 \u003d r0.isExpectedStartArrayToken()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r13 \u003d r1.handleNonArray(r0, r3)\n  return\n}",
      "B2 {\n  $r2 \u003d JsonDeserializer _elementDeserializer\u003e\n  if ($r2 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r12 \u003d r1._deserializeCustom(r0, r3, null)\n  return\n}",
      "B4 {\n  r4 \u003d r3.leaseObjectBuffer()\n  r16 \u003d r4.resetAndStart()\n  i3 \u003d 0\n}",
      "B5 {\n  $r17 \u003d r0.nextTextValue()\n  r18 \u003d $r17\n  if ($r17 !\u003d null) goto B6 else B13\n}",
      "B6 {\n  r5 \u003d r0.currentToken()\n  $r6 \u003d JsonToken END_ARRAY\u003e\n  if (r5 !\u003d $r6) goto B7 else B8\n}",
      "B7 {\n  goto B16\n}",
      "B8 {\n  $r7 \u003d JsonToken VALUE_NULL\u003e\n  if (r5 !\u003d $r7) goto B9 else B12\n}",
      "B9 {\n  $z1 \u003d StringArrayDeserializer: boolean _skipNullValues\u003e\n  if ($z1 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  goto B5\n}",
      "B11 {\n  $r9 \u003d NullValueProvider _nullProvider\u003e\n  $r10 \u003d $r9.getNullValue(r3)\n  r18 \u003d String) $r10\n  goto B13\n}",
      "B12 {\n  $r8 \u003d NullValueProvider _nullProvider\u003e\n  r18 \u003d r1._parseString(r0, r3, $r8)\n}",
      "B13 {\n  $i4 \u003d lengthof r16\n  if (i3 \u003c $i4) goto B14 else B15\n}",
      "B14 {\n  r16 \u003d r4.appendCompletedChunk(r16)\n  i3 \u003d 0\n}",
      "B15 {\n  $i0 \u003d i3\n  i3 \u003d i3 + 1\n  r16[$i0] \u003d r18\n  goto B5\n}",
      "B16 {\n  goto B18\n}",
      "B17 {\n  $r14 :\u003d @caughtexception\n  $i1 \u003d r4.bufferedSize()\n  $i2 \u003d $i1 + i3\n  $r15 \u003d JsonMappingException.wrapWithPath($r14, r16, $i2)\n  throw $r15\n}",
      "B18 {\n  $r11 \u003d r4.completeAndClearBuffer(r16, i3, class \"Ljava/lang/String;\")\n  r19 \u003d String[]) $r11\n  r3.returnObjectBuffer(r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B13",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B16",
      "B8 --\u003e B9",
      "B8 --\u003e B12",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B5",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B5",
      "B16 --\u003e B18",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringArrayDeserializer#_deserializeCustom(...3)",
        "body": "{\r\n    final ObjectBuffer buffer \u003d ctxt.leaseObjectBuffer();\r\n    int ix;\r\n    Object[] chunk;\r\n    if (old \u003d\u003d null) {\r\n        ix \u003d 0;\r\n        chunk \u003d buffer.resetAndStart();\r\n    } else {\r\n        ix \u003d old.length;\r\n        chunk \u003d buffer.resetAndStart(old, ix);\r\n    }\r\n    final JsonDeserializer\u003cString\u003e deser \u003d _elementDeserializer;\r\n    try {\r\n        while (true) {\r\n            /* 30-Dec-2014, tatu: This may look odd, but let\u0027s actually call method\r\n                 *   that suggest we are expecting a String; this helps with some formats,\r\n                 *   notably XML. Note, however, that while we can get String, we can\u0027t\r\n                 *   assume that\u0027s what we use due to custom deserializer\r\n                 */\r\n            String value;\r\n            if (p.nextTextValue() \u003d\u003d null) {\r\n                JsonToken t \u003d p.currentToken();\r\n                if (t \u003d\u003d JsonToken.END_ARRAY) {\r\n                    break;\r\n                }\r\n                // Ok: no need to convert Strings, but must recognize nulls\r\n                if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                    if (_skipNullValues) {\r\n                        continue;\r\n                    }\r\n                    value \u003d (String) _nullProvider.getNullValue(ctxt);\r\n                } else {\r\n                    value \u003d deser.deserialize(p, ctxt);\r\n                }\r\n            } else {\r\n                value \u003d deser.deserialize(p, ctxt);\r\n            }\r\n            if (ix \u003e\u003d chunk.length) {\r\n                chunk \u003d buffer.appendCompletedChunk(chunk);\r\n                ix \u003d 0;\r\n            }\r\n            chunk[ix++] \u003d value;\r\n        }\r\n    } catch (Exception e) {\r\n        // note: pass String.class, not String[].class, as we need element type for error info\r\n        throw JsonMappingException.wrapWithPath(e, String.class, ix);\r\n    }\r\n    String[] result \u003d buffer.completeAndClearBuffer(chunk, ix, String.class);\r\n    ctxt.returnObjectBuffer(buffer);\r\n    return result;\r\n}"
      },
      {
        "name": "StringArrayDeserializer#_parseString(...3)",
        "body": "(source not found)"
      },
      {
        "name": "StringArrayDeserializer#handleNonArray(...2)",
        "body": "{\r\n    // implicit arrays from single values?\r\n    boolean canWrap \u003d (_unwrapSingle \u003d\u003d Boolean.TRUE) || ((_unwrapSingle \u003d\u003d null) \u0026\u0026 ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY));\r\n    if (canWrap) {\r\n        String value;\r\n        if (p.hasToken(JsonToken.VALUE_NULL)) {\r\n            value \u003d (String) _nullProvider.getNullValue(ctxt);\r\n        } else {\r\n            if (p.hasToken(JsonToken.VALUE_STRING)) {\r\n                String textValue \u003d p.getText();\r\n                // https://github.com/FasterXML/jackson-dataformat-xml/issues/513\r\n                if (textValue.isEmpty()) {\r\n                    final CoercionAction act \u003d ctxt.findCoercionAction(logicalType(), handledType(), CoercionInputShape.EmptyString);\r\n                    if (act !\u003d CoercionAction.Fail) {\r\n                        return (String[]) _deserializeFromEmptyString(p, ctxt, act, handledType(), \"empty String (\\\"\\\")\");\r\n                    }\r\n                } else if (_isBlank(textValue)) {\r\n                    final CoercionAction act \u003d ctxt.findCoercionFromBlankString(logicalType(), handledType(), CoercionAction.Fail);\r\n                    if (act !\u003d CoercionAction.Fail) {\r\n                        return (String[]) _deserializeFromEmptyString(p, ctxt, act, handledType(), \"blank String (all whitespace)\");\r\n                    }\r\n                }\r\n                // if coercion failed, we can still add it to an array\r\n            }\r\n            value \u003d _parseString(p, ctxt, _nullProvider);\r\n        }\r\n        return new String[] { value };\r\n    }\r\n    if (p.hasToken(JsonToken.VALUE_STRING)) {\r\n        return _deserializeFromString(p, ctxt);\r\n    }\r\n    return (String[]) ctxt.handleUnexpectedToken(_valueClass, p);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer",
    "methodName": "deserialize",
    "signature": "java.lang.String[] deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    // Ok: must point to START_ARRAY (or equivalent)\r\n    if (!p.isExpectedStartArrayToken()) {\r\n        String[] arr \u003d handleNonArray(p, ctxt);\r\n        if (arr \u003d\u003d null) {\r\n            return intoValue;\r\n        }\r\n        final int offset \u003d intoValue.length;\r\n        String[] result \u003d new String[offset + arr.length];\r\n        System.arraycopy(intoValue, 0, result, 0, offset);\r\n        System.arraycopy(arr, 0, result, offset, arr.length);\r\n        return result;\r\n    }\r\n    if (_elementDeserializer !\u003d null) {\r\n        return _deserializeCustom(p, ctxt, intoValue);\r\n    }\r\n    final ObjectBuffer buffer \u003d ctxt.leaseObjectBuffer();\r\n    int ix \u003d intoValue.length;\r\n    Object[] chunk \u003d buffer.resetAndStart(intoValue, ix);\r\n    try {\r\n        while (true) {\r\n            String value \u003d p.nextTextValue();\r\n            if (value \u003d\u003d null) {\r\n                JsonToken t \u003d p.currentToken();\r\n                if (t \u003d\u003d JsonToken.END_ARRAY) {\r\n                    break;\r\n                }\r\n                if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                    // 03-Feb-2017, tatu: Should we skip null here or not?\r\n                    if (_skipNullValues) {\r\n                        return NO_STRINGS;\r\n                    }\r\n                    value \u003d (String) _nullProvider.getNullValue(ctxt);\r\n                } else {\r\n                    value \u003d _parseString(p, ctxt, _nullProvider);\r\n                }\r\n            }\r\n            if (ix \u003e\u003d chunk.length) {\r\n                chunk \u003d buffer.appendCompletedChunk(chunk);\r\n                ix \u003d 0;\r\n            }\r\n            chunk[ix++] \u003d value;\r\n        }\r\n    } catch (Exception e) {\r\n        throw JsonMappingException.wrapWithPath(e, chunk, buffer.bufferedSize() + ix);\r\n    }\r\n    String[] result \u003d buffer.completeAndClearBuffer(chunk, ix, String.class);\r\n    ctxt.returnObjectBuffer(buffer);\r\n    return result;\r\n}",
    "nodes": 21,
    "edges": 23,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B4",
      "B1 : If(r17 !\u003d null) → B2 | else → B3",
      "B4 : If($r2 \u003d\u003d null) → B5 | else → B6",
      "B7 : If($r5 !\u003d null) → B8 | else → B15",
      "B8 : If(r6 !\u003d $r7) → B9 | else → B10",
      "B10 : If(r6 !\u003d $r8) → B11 | else → B14",
      "B11 : If($z1 \u003d\u003d false) → B12 | else → B13",
      "B15 : If(i7 \u003c $i8) → B16 | else → B17"
    ],
    "blockList": [
      "B0 {\n  StringArrayDeserializer\n  JsonParser\n  DeserializationContext\n  String[]\n  $z0 \u003d r0.isExpectedStartArrayToken()\n  if ($z0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  r17 \u003d r1.handleNonArray(r0, r3)\n  if (r17 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  i6 \u003d lengthof r4\n  $i1 \u003d lengthof r17\n  $i2 \u003d i6 + $i1\n  r18 \u003d String)[$i2]\n  System.arraycopy(r4, 0, r18, 0, i6)\n  $i3 \u003d lengthof r17\n  System.arraycopy(r17, 0, r18, i6, $i3)\n  return\n}",
      "B4 {\n  $r2 \u003d JsonDeserializer _elementDeserializer\u003e\n  if ($r2 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r14 \u003d r1._deserializeCustom(r0, r3, r4)\n  return\n}",
      "B6 {\n  r19 \u003d r3.leaseObjectBuffer()\n  i7 \u003d lengthof r4\n  r20 \u003d r19.resetAndStart(r4, i7)\n}",
      "B7 {\n  $r5 \u003d r0.nextTextValue()\n  r21 \u003d $r5\n  if ($r5 !\u003d null) goto B8 else B15\n}",
      "B8 {\n  r6 \u003d r0.currentToken()\n  $r7 \u003d JsonToken END_ARRAY\u003e\n  if (r6 !\u003d $r7) goto B9 else B10\n}",
      "B9 {\n  goto B18\n}",
      "B10 {\n  $r8 \u003d JsonToken VALUE_NULL\u003e\n  if (r6 !\u003d $r8) goto B11 else B14\n}",
      "B11 {\n  $z1 \u003d StringArrayDeserializer: boolean _skipNullValues\u003e\n  if ($z1 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $r12 \u003d String[] NO_STRINGS\u003e\n  return\n}",
      "B13 {\n  $r10 \u003d NullValueProvider _nullProvider\u003e\n  $r11 \u003d $r10.getNullValue(r3)\n  r21 \u003d String) $r11\n  goto B15\n}",
      "B14 {\n  $r9 \u003d NullValueProvider _nullProvider\u003e\n  r21 \u003d r1._parseString(r0, r3, $r9)\n}",
      "B15 {\n  $i8 \u003d lengthof r20\n  if (i7 \u003c $i8) goto B16 else B17\n}",
      "B16 {\n  r20 \u003d r19.appendCompletedChunk(r20)\n  i7 \u003d 0\n}",
      "B17 {\n  $i0 \u003d i7\n  i7 \u003d i7 + 1\n  r20[$i0] \u003d r21\n  goto B7\n}",
      "B18 {\n  goto B20\n}",
      "B19 {\n  $r15 :\u003d @caughtexception\n  $i4 \u003d r19.bufferedSize()\n  $i5 \u003d $i4 + i7\n  $r16 \u003d JsonMappingException.wrapWithPath($r15, r20, $i5)\n  throw $r16\n}",
      "B20 {\n  $r13 \u003d r19.completeAndClearBuffer(r20, i7, class \"Ljava/lang/String;\")\n  r22 \u003d String[]) $r13\n  r3.returnObjectBuffer(r19)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B15",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B18",
      "B10 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e B7",
      "B18 --\u003e B20",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringArrayDeserializer#_deserializeCustom(...3)",
        "body": "{\r\n    final ObjectBuffer buffer \u003d ctxt.leaseObjectBuffer();\r\n    int ix;\r\n    Object[] chunk;\r\n    if (old \u003d\u003d null) {\r\n        ix \u003d 0;\r\n        chunk \u003d buffer.resetAndStart();\r\n    } else {\r\n        ix \u003d old.length;\r\n        chunk \u003d buffer.resetAndStart(old, ix);\r\n    }\r\n    final JsonDeserializer\u003cString\u003e deser \u003d _elementDeserializer;\r\n    try {\r\n        while (true) {\r\n            /* 30-Dec-2014, tatu: This may look odd, but let\u0027s actually call method\r\n                 *   that suggest we are expecting a String; this helps with some formats,\r\n                 *   notably XML. Note, however, that while we can get String, we can\u0027t\r\n                 *   assume that\u0027s what we use due to custom deserializer\r\n                 */\r\n            String value;\r\n            if (p.nextTextValue() \u003d\u003d null) {\r\n                JsonToken t \u003d p.currentToken();\r\n                if (t \u003d\u003d JsonToken.END_ARRAY) {\r\n                    break;\r\n                }\r\n                // Ok: no need to convert Strings, but must recognize nulls\r\n                if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                    if (_skipNullValues) {\r\n                        continue;\r\n                    }\r\n                    value \u003d (String) _nullProvider.getNullValue(ctxt);\r\n                } else {\r\n                    value \u003d deser.deserialize(p, ctxt);\r\n                }\r\n            } else {\r\n                value \u003d deser.deserialize(p, ctxt);\r\n            }\r\n            if (ix \u003e\u003d chunk.length) {\r\n                chunk \u003d buffer.appendCompletedChunk(chunk);\r\n                ix \u003d 0;\r\n            }\r\n            chunk[ix++] \u003d value;\r\n        }\r\n    } catch (Exception e) {\r\n        // note: pass String.class, not String[].class, as we need element type for error info\r\n        throw JsonMappingException.wrapWithPath(e, String.class, ix);\r\n    }\r\n    String[] result \u003d buffer.completeAndClearBuffer(chunk, ix, String.class);\r\n    ctxt.returnObjectBuffer(buffer);\r\n    return result;\r\n}"
      },
      {
        "name": "StringArrayDeserializer#_parseString(...3)",
        "body": "(source not found)"
      },
      {
        "name": "StringArrayDeserializer#handleNonArray(...2)",
        "body": "{\r\n    // implicit arrays from single values?\r\n    boolean canWrap \u003d (_unwrapSingle \u003d\u003d Boolean.TRUE) || ((_unwrapSingle \u003d\u003d null) \u0026\u0026 ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY));\r\n    if (canWrap) {\r\n        String value;\r\n        if (p.hasToken(JsonToken.VALUE_NULL)) {\r\n            value \u003d (String) _nullProvider.getNullValue(ctxt);\r\n        } else {\r\n            if (p.hasToken(JsonToken.VALUE_STRING)) {\r\n                String textValue \u003d p.getText();\r\n                // https://github.com/FasterXML/jackson-dataformat-xml/issues/513\r\n                if (textValue.isEmpty()) {\r\n                    final CoercionAction act \u003d ctxt.findCoercionAction(logicalType(), handledType(), CoercionInputShape.EmptyString);\r\n                    if (act !\u003d CoercionAction.Fail) {\r\n                        return (String[]) _deserializeFromEmptyString(p, ctxt, act, handledType(), \"empty String (\\\"\\\")\");\r\n                    }\r\n                } else if (_isBlank(textValue)) {\r\n                    final CoercionAction act \u003d ctxt.findCoercionFromBlankString(logicalType(), handledType(), CoercionAction.Fail);\r\n                    if (act !\u003d CoercionAction.Fail) {\r\n                        return (String[]) _deserializeFromEmptyString(p, ctxt, act, handledType(), \"blank String (all whitespace)\");\r\n                    }\r\n                }\r\n                // if coercion failed, we can still add it to an array\r\n            }\r\n            value \u003d _parseString(p, ctxt, _nullProvider);\r\n        }\r\n        return new String[] { value };\r\n    }\r\n    if (p.hasToken(JsonToken.VALUE_STRING)) {\r\n        return _deserializeFromString(p, ctxt);\r\n    }\r\n    return (String[]) ctxt.handleUnexpectedToken(_valueClass, p);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer",
    "methodName": "isCachable",
    "signature": "boolean isCachable()",
    "visibility": "public",
    "body": "{\r\n    // 26-Mar-2015, tatu: Important: prevent caching if custom deserializers via annotations\r\n    //    are involved\r\n    return (_valueDeserializer \u003d\u003d null) \u0026\u0026 (_delegateDeserializer \u003d\u003d null);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B3",
      "B1 : If($r2 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  StringCollectionDeserializer\n  $r1 \u003d JsonDeserializer _valueDeserializer\u003e\n  if ($r1 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d JsonDeserializer _delegateDeserializer\u003e\n  if ($r2 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer",
    "methodName": "createContextual",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer createContextual(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    // May need to resolve types for delegate-based creators:\r\n    JsonDeserializer\u003cObject\u003e delegate \u003d null;\r\n    if (_valueInstantiator !\u003d null) {\r\n        // [databind#2324]: check both array-delegating and delegating\r\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getArrayDelegateCreator();\r\n        if (delegateCreator !\u003d null) {\r\n            JavaType delegateType \u003d _valueInstantiator.getArrayDelegateType(ctxt.getConfig());\r\n            delegate \u003d findDeserializer(ctxt, delegateType, property);\r\n        } else if ((delegateCreator \u003d _valueInstantiator.getDelegateCreator()) !\u003d null) {\r\n            JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\r\n            delegate \u003d findDeserializer(ctxt, delegateType, property);\r\n        }\r\n    }\r\n    JsonDeserializer\u003c?\u003e valueDeser \u003d _valueDeserializer;\r\n    final JavaType valueType \u003d _containerType.getContentType();\r\n    if (valueDeser \u003d\u003d null) {\r\n        // [databind#125]: May have a content converter\r\n        valueDeser \u003d findConvertingContentDeserializer(ctxt, property, valueDeser);\r\n        if (valueDeser \u003d\u003d null) {\r\n            // And we may also need to get deserializer for String\r\n            valueDeser \u003d ctxt.findContextualValueDeserializer(valueType, property);\r\n        }\r\n    } else {\r\n        // if directly assigned, probably not yet contextual, so:\r\n        valueDeser \u003d ctxt.handleSecondaryContextualization(valueDeser, property, valueType);\r\n    }\r\n    // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly\r\n    //   comes down to \"List vs Collection\" I suppose... for now, pass Collection\r\n    Boolean unwrapSingle \u003d findFormatFeature(ctxt, property, Collection.class, JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\r\n    NullValueProvider nuller \u003d findContentNullProvider(ctxt, property, valueDeser);\r\n    if (isDefaultDeserializer(valueDeser)) {\r\n        valueDeser \u003d null;\r\n    }\r\n    return withResolved(delegate, valueDeser, nuller, unwrapSingle);\r\n}",
    "nodes": 12,
    "edges": 17,
    "cc": 7,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B5",
      "B1 : If(r13 \u003d\u003d null) → B2 | else → B3",
      "B3 : If($r7 \u003d\u003d null) → B4 | else → B5",
      "B5 : If($r16 !\u003d null) → B6 | else → B8",
      "B6 : If(r19 !\u003d null) → B7 | else → B9",
      "B9 : If($z0 \u003d\u003d false) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  StringCollectionDeserializer\n  DeserializationContext\n  BeanProperty\n  r12 \u003d null\n  $r1 \u003d ValueInstantiator _valueInstantiator\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  $r5 \u003d ValueInstantiator _valueInstantiator\u003e\n  r13 \u003d $r5.getArrayDelegateCreator()\n  if (r13 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r10 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r11 \u003d r2.getConfig()\n  r14 \u003d $r10.getArrayDelegateType($r11)\n  r12 \u003d r0.findDeserializer(r2, r14, r3)\n  goto B5\n}",
      "B3 {\n  $r6 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r7 \u003d $r6.getDelegateCreator()\n  if ($r7 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r8 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r9 \u003d r2.getConfig()\n  r15 \u003d $r8.getDelegateType($r9)\n  r12 \u003d r0.findDeserializer(r2, r15, r3)\n}",
      "B5 {\n  $r16 \u003d JsonDeserializer _valueDeserializer\u003e\n  $r17 \u003d JavaType _containerType\u003e\n  $r18 \u003d $r17.getContentType()\n  if ($r16 !\u003d null) goto B6 else B8\n}",
      "B6 {\n  r19 \u003d r0.findConvertingContentDeserializer(r2, r3, $r16)\n  if (r19 !\u003d null) goto B7 else B9\n}",
      "B7 {\n  r19 \u003d r2.findContextualValueDeserializer($r18, r3)\n  goto B9\n}",
      "B8 {\n  r19 \u003d r2.handleSecondaryContextualization($r16, r3, $r18)\n}",
      "B9 {\n  $r20 \u003d JsonFormat$Feature ACCEPT_SINGLE_VALUE_AS_ARRAY\u003e\n  $r21 \u003d r0.findFormatFeature(r2, r3, class \"Ljava/util/Collection;\", $r20)\n  $r22 \u003d r0.findContentNullProvider(r2, r3, r19)\n  $z0 \u003d r0.isDefaultDeserializer(r19)\n  if ($z0 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  r19 \u003d null\n}",
      "B11 {\n  $r4 \u003d r0.withResolved(r12, r19, $r22, $r21)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringCollectionDeserializer#findFormatFeature(...4)",
        "body": "(source not found)"
      },
      {
        "name": "StringCollectionDeserializer#findContentNullProvider(...3)",
        "body": "(source not found)"
      },
      {
        "name": "StringCollectionDeserializer#withResolved(...4)",
        "body": "{\r\n    if ((Objects.equals(_unwrapSingle, unwrapSingle)) \u0026\u0026 (_nullProvider \u003d\u003d nuller) \u0026\u0026 (_valueDeserializer \u003d\u003d valueDeser) \u0026\u0026 (_delegateDeserializer \u003d\u003d delegateDeser)) {\r\n        return this;\r\n    }\r\n    return new StringCollectionDeserializer(_containerType, _valueInstantiator, delegateDeser, valueDeser, nuller, unwrapSingle);\r\n}"
      },
      {
        "name": "StringCollectionDeserializer#findDeserializer(...3)",
        "body": "(source not found)"
      },
      {
        "name": "StringCollectionDeserializer#isDefaultDeserializer(...1)",
        "body": "(source not found)"
      },
      {
        "name": "StringCollectionDeserializer#findConvertingContentDeserializer(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer",
    "methodName": "deserialize",
    "signature": "java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    if (_delegateDeserializer !\u003d null) {\r\n        return castToCollection(_valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt)));\r\n    }\r\n    final Collection\u003cString\u003e result \u003d castToCollection(_valueInstantiator.createUsingDefault(ctxt));\r\n    return deserialize(p, ctxt, result);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StringCollectionDeserializer\n  JsonParser\n  DeserializationContext\n  $r1 \u003d JsonDeserializer _delegateDeserializer\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r8 \u003d JsonDeserializer _delegateDeserializer\u003e\n  $r10 \u003d $r8.deserialize(r6, r2)\n  $r11 \u003d $r9.createUsingDelegate(r2, $r10)\n  $r12 \u003d StringCollectionDeserializer.castToCollection($r11)\n  return\n}",
      "B2 {\n  $r3 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r4 \u003d $r3.createUsingDefault(r2)\n  r5 \u003d StringCollectionDeserializer.castToCollection($r4)\n  $r7 \u003d r0.deserialize(r6, r2, r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringCollectionDeserializer#castToCollection(...1)",
        "body": "{\r\n    if (o !\u003d null) {\r\n        // fast path for specific classes to avoid type pollution:\r\n        // https://micronaut-projects.github.io/micronaut-test/latest/guide/#typePollution\r\n        if (o.getClass() \u003d\u003d ArrayList.class) {\r\n            return (ArrayList\u003cString\u003e) o;\r\n        }\r\n        if (o.getClass() \u003d\u003d HashSet.class) {\r\n            return (HashSet\u003cString\u003e) o;\r\n        }\r\n    }\r\n    return (Collection\u003cString\u003e) o;\r\n}"
      },
      {
        "name": "StringCollectionDeserializer#deserialize(...3)",
        "body": "{\r\n    // Ok: must point to START_ARRAY\r\n    if (!p.isExpectedStartArrayToken()) {\r\n        return handleNonArray(p, ctxt, result);\r\n    }\r\n    if (_valueDeserializer !\u003d null) {\r\n        return deserializeUsingCustom(p, ctxt, result, _valueDeserializer);\r\n    }\r\n    try {\r\n        while (true) {\r\n            // First the common case:\r\n            String value \u003d p.nextTextValue();\r\n            if (value !\u003d null) {\r\n                result.add(value);\r\n                continue;\r\n            }\r\n            JsonToken t \u003d p.currentToken();\r\n            if (t \u003d\u003d JsonToken.END_ARRAY) {\r\n                break;\r\n            }\r\n            if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                if (_skipNullValues) {\r\n                    continue;\r\n                }\r\n                value \u003d (String) _nullProvider.getNullValue(ctxt);\r\n            } else {\r\n                value \u003d _parseString(p, ctxt, _nullProvider);\r\n            }\r\n            result.add(value);\r\n        }\r\n    } catch (Exception e) {\r\n        throw JsonMappingException.wrapWithPath(e, result, result.size());\r\n    }\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer",
    "methodName": "deserialize",
    "signature": "java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    // Ok: must point to START_ARRAY\r\n    if (!p.isExpectedStartArrayToken()) {\r\n        return handleNonArray(p, ctxt, result);\r\n    }\r\n    if (_valueDeserializer !\u003d null) {\r\n        return deserializeUsingCustom(p, ctxt, result, _valueDeserializer);\r\n    }\r\n    try {\r\n        while (true) {\r\n            // First the common case:\r\n            String value \u003d p.nextTextValue();\r\n            if (value !\u003d null) {\r\n                result.add(value);\r\n                continue;\r\n            }\r\n            JsonToken t \u003d p.currentToken();\r\n            if (t \u003d\u003d JsonToken.END_ARRAY) {\r\n                break;\r\n            }\r\n            if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                if (_skipNullValues) {\r\n                    continue;\r\n                }\r\n                value \u003d (String) _nullProvider.getNullValue(ctxt);\r\n            } else {\r\n                value \u003d _parseString(p, ctxt, _nullProvider);\r\n            }\r\n            result.add(value);\r\n        }\r\n    } catch (Exception e) {\r\n        throw JsonMappingException.wrapWithPath(e, result, result.size());\r\n    }\r\n    return result;\r\n}",
    "nodes": 17,
    "edges": 19,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($r2 \u003d\u003d null) → B3 | else → B4",
      "B4 : If($r16 \u003d\u003d null) → B5 | else → B6",
      "B6 : If(r3 !\u003d $r4) → B7 | else → B8",
      "B8 : If(r3 !\u003d $r5) → B9 | else → B12",
      "B9 : If($z1 \u003d\u003d false) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  StringCollectionDeserializer\n  JsonParser\n  DeserializationContext\n  Collection\n  $z0 \u003d r0.isExpectedStartArrayToken()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r13 \u003d r1.handleNonArray(r0, r6, r8)\n  return\n}",
      "B2 {\n  $r2 \u003d JsonDeserializer _valueDeserializer\u003e\n  if ($r2 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r11 \u003d JsonDeserializer _valueDeserializer\u003e\n  $r12 \u003d r1.deserializeUsingCustom(r0, r6, r8, $r11)\n  return\n}",
      "B4 {\n  $r16 \u003d r0.nextTextValue()\n  if ($r16 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  r8.add($r16)\n  goto B4\n}",
      "B6 {\n  r3 \u003d r0.currentToken()\n  $r4 \u003d JsonToken END_ARRAY\u003e\n  if (r3 !\u003d $r4) goto B7 else B8\n}",
      "B7 {\n  goto B14\n}",
      "B8 {\n  $r5 \u003d JsonToken VALUE_NULL\u003e\n  if (r3 !\u003d $r5) goto B9 else B12\n}",
      "B9 {\n  $z1 \u003d StringCollectionDeserializer: boolean _skipNullValues\u003e\n  if ($z1 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  goto B4\n}",
      "B11 {\n  $r9 \u003d NullValueProvider _nullProvider\u003e\n  $r10 \u003d $r9.getNullValue(r6)\n  r17 \u003d String) $r10\n  goto B13\n}",
      "B12 {\n  $r7 \u003d NullValueProvider _nullProvider\u003e\n  r17 \u003d r1._parseString(r0, r6, $r7)\n}",
      "B13 {\n  r8.add(r17)\n  goto B4\n}",
      "B14 {\n  goto B16\n}",
      "B15 {\n  $r14 :\u003d @caughtexception\n  $i0 \u003d r8.size()\n  $r15 \u003d JsonMappingException.wrapWithPath($r14, r8, $i0)\n  throw $r15\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B14",
      "B8 --\u003e B9",
      "B8 --\u003e B12",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B4",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B4",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringCollectionDeserializer#handleNonArray(...3)",
        "body": "{\r\n    // implicit arrays from single values?\r\n    boolean canWrap \u003d (_unwrapSingle \u003d\u003d Boolean.TRUE) || ((_unwrapSingle \u003d\u003d null) \u0026\u0026 ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY));\r\n    if (!canWrap) {\r\n        if (p.hasToken(JsonToken.VALUE_STRING)) {\r\n            return _deserializeFromString(p, ctxt);\r\n        }\r\n        return castToCollection(ctxt.handleUnexpectedToken(_containerType, p));\r\n    }\r\n    // Strings are one of \"native\" (intrinsic) types, so there\u0027s never type deserializer involved\r\n    JsonDeserializer\u003cString\u003e valueDes \u003d _valueDeserializer;\r\n    JsonToken t \u003d p.currentToken();\r\n    String value;\r\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n        // 03-Feb-2017, tatu: Does this work?\r\n        if (_skipNullValues) {\r\n            return result;\r\n        }\r\n        value \u003d (String) _nullProvider.getNullValue(ctxt);\r\n    } else {\r\n        if (p.hasToken(JsonToken.VALUE_STRING)) {\r\n            String textValue \u003d p.getText();\r\n            // https://github.com/FasterXML/jackson-dataformat-xml/issues/513\r\n            if (textValue.isEmpty()) {\r\n                final CoercionAction act \u003d ctxt.findCoercionAction(logicalType(), handledType(), CoercionInputShape.EmptyString);\r\n                if (act !\u003d CoercionAction.Fail) {\r\n                    return castToCollection(_deserializeFromEmptyString(p, ctxt, act, handledType(), \"empty String (\\\"\\\")\"));\r\n                }\r\n            } else if (_isBlank(textValue)) {\r\n                final CoercionAction act \u003d ctxt.findCoercionFromBlankString(logicalType(), handledType(), CoercionAction.Fail);\r\n                if (act !\u003d CoercionAction.Fail) {\r\n                    return castToCollection(_deserializeFromEmptyString(p, ctxt, act, handledType(), \"blank String (all whitespace)\"));\r\n                }\r\n            }\r\n            // if coercion failed, we can still add it to a list\r\n        }\r\n        try {\r\n            value \u003d (valueDes \u003d\u003d null) ? _parseString(p, ctxt, _nullProvider) : valueDes.deserialize(p, ctxt);\r\n        } catch (Exception e) {\r\n            throw JsonMappingException.wrapWithPath(e, result, result.size());\r\n        }\r\n    }\r\n    result.add(value);\r\n    return result;\r\n}"
      },
      {
        "name": "StringCollectionDeserializer#deserializeUsingCustom(...4)",
        "body": "{\r\n    try {\r\n        while (true) {\r\n            /* 30-Dec-2014, tatu: This may look odd, but let\u0027s actually call method\r\n                 *   that suggest we are expecting a String; this helps with some formats,\r\n                 *   notably XML. Note, however, that while we can get String, we can\u0027t\r\n                 *   assume that\u0027s what we use due to custom deserializer\r\n                 */\r\n            String value;\r\n            if (p.nextTextValue() \u003d\u003d null) {\r\n                JsonToken t \u003d p.currentToken();\r\n                if (t \u003d\u003d JsonToken.END_ARRAY) {\r\n                    break;\r\n                }\r\n                // Ok: no need to convert Strings, but must recognize nulls\r\n                if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n                    if (_skipNullValues) {\r\n                        continue;\r\n                    }\r\n                    value \u003d (String) _nullProvider.getNullValue(ctxt);\r\n                } else {\r\n                    value \u003d deser.deserialize(p, ctxt);\r\n                }\r\n            } else {\r\n                value \u003d deser.deserialize(p, ctxt);\r\n            }\r\n            result.add(value);\r\n        }\r\n    } catch (Exception e) {\r\n        throw JsonMappingException.wrapWithPath(e, result, result.size());\r\n    }\r\n    return result;\r\n}"
      },
      {
        "name": "StringCollectionDeserializer#_parseString(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.StringDeserializer",
    "methodName": "deserialize",
    "signature": "java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    // The critical path: ensure we handle the common case first.\r\n    if (p.hasToken(JsonToken.VALUE_STRING)) {\r\n        return p.getText();\r\n    }\r\n    // [databind#381]\r\n    if (p.hasToken(JsonToken.START_ARRAY)) {\r\n        return _deserializeFromArray(p, ctxt);\r\n    }\r\n    return _parseString(p, ctxt, this);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StringDeserializer\n  JsonParser\n  DeserializationContext\n  $r1 \u003d JsonToken VALUE_STRING\u003e\n  $z0 \u003d r0.hasToken($r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d r0.getText()\n  return\n}",
      "B2 {\n  $r2 \u003d JsonToken START_ARRAY\u003e\n  $z1 \u003d r0.hasToken($r2)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d r3._deserializeFromArray(r0, r4)\n  $r7 \u003d String) $r6\n  return\n}",
      "B4 {\n  $r5 \u003d r3._parseString(r0, r4, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringDeserializer#_parseString(...3)",
        "body": "(source not found)"
      },
      {
        "name": "StringDeserializer#_deserializeFromArray(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.ThreadGroupDeserializer",
    "methodName": "convert",
    "signature": "java.lang.ThreadGroup convert(com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    String name \u003d root.path(\"name\").asText();\r\n    if (name \u003d\u003d null) {\r\n        name \u003d \"\";\r\n    }\r\n    return new ThreadGroup(name);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r5 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ThreadGroupDeserializer\n  JsonNode\n  DeserializationContext\n  $r1 \u003d r0.path(\"name\")\n  r5 \u003d $r1.asText()\n  if (r5 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r5 \u003d \"\"\n}",
      "B2 {\n  $r2 \u003d ThreadGroup\n  new ThreadGroup(r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer",
    "methodName": "unwrappingDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer unwrappingDeserializer(com.fasterxml.jackson.databind.util.NameTransformer)",
    "visibility": "public",
    "body": "{\r\n    // Should possibly for failure? But for now at least don\u0027t \"undo\"\r\n    // custom deserializer\r\n    if (getClass() !\u003d ThrowableDeserializer.class) {\r\n        return this;\r\n    }\r\n    // main thing really is to just enforce ignoring of unknown\r\n    // properties; since there may be multiple unwrapped values\r\n    // and properties for all may be interleaved...\r\n    return new ThrowableDeserializer(this, unwrapper);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d class \"Lcom/fasterxml/jackson/databind/deser/std/ThrowableDeserializer;\") → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ThrowableDeserializer\n  NameTransformer\n  $r1 \u003d r0.getClass()\n  if ($r1 \u003d\u003d class \"Lcom/fasterxml/jackson/databind/deser/std/ThrowableDeserializer;\") goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d ThrowableDeserializer\n  new ThrowableDeserializer(r0, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ThrowableDeserializer#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer",
    "methodName": "deserializeFromObject",
    "signature": "java.lang.Object deserializeFromObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    // 30-Sep-2010, tatu: Need to allow use of @JsonCreator, so:\r\n    if (_propertyBasedCreator !\u003d null) {\r\n        // proper @JsonCreator\r\n        return _deserializeUsingPropertyBased(p, ctxt);\r\n    }\r\n    if (_delegateDeserializer !\u003d null) {\r\n        return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\r\n    }\r\n    if (_beanType.isAbstract()) {\r\n        // for good measure, check this too\r\n        return ctxt.handleMissingInstantiator(handledType(), getValueInstantiator(), p, \"abstract type (need to add/enable type information?)\");\r\n    }\r\n    boolean hasStringCreator \u003d _valueInstantiator.canCreateFromString();\r\n    boolean hasDefaultCtor \u003d _valueInstantiator.canCreateUsingDefault();\r\n    // and finally, verify we do have single-String arg constructor (if no @JsonCreator)\r\n    if (!hasStringCreator \u0026\u0026 !hasDefaultCtor) {\r\n        return ctxt.handleMissingInstantiator(handledType(), getValueInstantiator(), p, \"Throwable needs a default constructor, a single-String-arg constructor; or explicit @JsonCreator\");\r\n    }\r\n    Throwable throwable \u003d null;\r\n    Object[] pending \u003d null;\r\n    Throwable[] suppressed \u003d null;\r\n    int pendingIx \u003d 0;\r\n    for (; !p.hasToken(JsonToken.END_OBJECT); p.nextToken()) {\r\n        String propName \u003d p.currentName();\r\n        SettableBeanProperty prop \u003d _beanProperties.find(propName);\r\n        // to point to field value\r\n        p.nextToken();\r\n        if (prop !\u003d null) {\r\n            // normal case\r\n            // 07-Dec-2023, tatu: [databind#4248] Interesting that \"cause\"\r\n            //    with `null` blows up. So, avoid.\r\n            if (\"cause\".equals(prop.getName()) \u0026\u0026 p.hasToken(JsonToken.VALUE_NULL)) {\r\n                continue;\r\n            }\r\n            if (throwable !\u003d null) {\r\n                prop.deserializeAndSet(p, ctxt, throwable);\r\n                continue;\r\n            }\r\n            // nope; need to defer\r\n            if (pending \u003d\u003d null) {\r\n                int len \u003d _beanProperties.size();\r\n                pending \u003d new Object[len + len];\r\n            } else if (pendingIx \u003d\u003d pending.length) {\r\n                // NOTE: only occurs with duplicate properties, possible\r\n                // with some formats (most notably XML; but possibly with\r\n                // JSON if duplicate detection not enabled). Most likely\r\n                // only occurs with malicious content so use linear buffer\r\n                // resize (no need to optimize performance)\r\n                pending \u003d Arrays.copyOf(pending, pendingIx + 16);\r\n            }\r\n            pending[pendingIx++] \u003d prop;\r\n            pending[pendingIx++] \u003d prop.deserialize(p, ctxt);\r\n            continue;\r\n        }\r\n        // Maybe it\u0027s \"message\"?\r\n        // 26-May-2022, tatu: [databind#3497] To support property naming strategies,\r\n        //    should ideally mangle property names. But for now let\u0027s cheat; works\r\n        //    for case-changing although not for kebab/snake cases and \"localizedMessage\"\r\n        if (PROP_NAME_MESSAGE.equalsIgnoreCase(propName)) {\r\n            throwable \u003d _instantiate(ctxt, hasStringCreator, p.getValueAsString());\r\n            continue;\r\n        }\r\n        // Things marked as ignorable should not be passed to any setter\r\n        if ((_ignorableProps !\u003d null) \u0026\u0026 _ignorableProps.contains(propName)) {\r\n            p.skipChildren();\r\n            continue;\r\n        }\r\n        if (PROP_NAME_SUPPRESSED.equalsIgnoreCase(propName)) {\r\n            // or \"suppressed\"?\r\n            // 07-Dec-2023, tatu: Not sure how/why, but JSON Null is otherwise\r\n            //    not handled with such call so...\r\n            if (p.hasToken(JsonToken.VALUE_NULL)) {\r\n                suppressed \u003d null;\r\n            } else {\r\n                // Inlined `DeserializationContext.readValue()` to minimize call depth\r\n                JsonDeserializer\u003cObject\u003e deser \u003d ctxt.findRootValueDeserializer(ctxt.constructType(Throwable[].class));\r\n                suppressed \u003d (Throwable[]) deser.deserialize(p, ctxt);\r\n            }\r\n            continue;\r\n        }\r\n        if (PROP_NAME_LOCALIZED_MESSAGE.equalsIgnoreCase(propName)) {\r\n            p.skipChildren();\r\n            continue;\r\n        }\r\n        if (_anySetter !\u003d null) {\r\n            // [databind#4316] Since 2.16.2 : at this point throwable should be non-null\r\n            if (throwable \u003d\u003d null) {\r\n                throwable \u003d _instantiate(ctxt, hasStringCreator, null);\r\n            }\r\n            _anySetter.deserializeAndSet(p, ctxt, throwable, propName);\r\n            continue;\r\n        }\r\n        // 23-Jan-2018, tatu: One concern would be `message`, but without any-setter or single-String-ctor\r\n        //   (or explicit constructor). We could just ignore it but for now, let it fail\r\n        // [databind#4071]: In case of \"message\", skip for default constructor\r\n        if (PROP_NAME_MESSAGE.equalsIgnoreCase(propName)) {\r\n            p.skipChildren();\r\n            continue;\r\n        }\r\n        // Unknown: let\u0027s call handler method\r\n        handleUnknownProperty(p, ctxt, throwable, propName);\r\n    }\r\n    // Sanity check: did we find \"message\"?\r\n    if (throwable \u003d\u003d null) {\r\n        throwable \u003d _instantiate(ctxt, hasStringCreator, null);\r\n    }\r\n    // any pending values?\r\n    if (pending !\u003d null) {\r\n        for (int i \u003d 0, len \u003d pendingIx; i \u003c len; i +\u003d 2) {\r\n            SettableBeanProperty prop \u003d (SettableBeanProperty) pending[i];\r\n            prop.set(throwable, pending[i + 1]);\r\n        }\r\n    }\r\n    // any suppressed exceptions?\r\n    if (suppressed !\u003d null) {\r\n        for (Throwable s : suppressed) {\r\n            // 13-Dec-2023, tatu: But skip any `null` entries we might have gotten\r\n            if (s !\u003d null) {\r\n                throwable.addSuppressed(s);\r\n            }\r\n        }\r\n    }\r\n    return throwable;\r\n}",
    "nodes": 54,
    "edges": 76,
    "cc": 24,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r2 \u003d\u003d null) → B3 | else → B4",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B6",
      "B6 : If(z1 !\u003d 0) → B7 | else → B9",
      "B7 : If(z2 !\u003d 0) → B8 | else → B9",
      "B10 : If($z11 !\u003d 0) → B11 | else → B41",
      "B11 : If(r46 \u003d\u003d null) → B12 | else → B22",
      "B12 : If($z9 \u003d\u003d false) → B13 | else → B15",
      "B13 : If($z10 \u003d\u003d false) → B14 | else → B15",
      "B15 : If(r41 \u003d\u003d null) → B16 | else → B17",
      "B17 : If(r42 !\u003d null) → B18 | else → B19",
      "B19 : If(i4 !\u003d $i1) → B20 | else → B21",
      "B22 : If($z3 \u003d\u003d false) → B23 | else → B24",
      "B24 : If($r13 \u003d\u003d null) → B25 | else → B27",
      "B25 : If($z8 \u003d\u003d false) → B26 | else → B27",
      "B27 : If($z4 \u003d\u003d false) → B28 | else → B31",
      "B28 : If($z7 \u003d\u003d false) → B29 | else → B30",
      "B31 : If($z5 \u003d\u003d false) → B32 | else → B33",
      "B33 : If($r16 \u003d\u003d null) → B34 | else → B37",
      "B34 : If(r41 !\u003d null) → B35 | else → B36",
      "B37 : If($z6 \u003d\u003d false) → B38 | else → B39",
      "B41 : If(r41 !\u003d null) → B42 | else → B43",
      "B43 : If(r42 \u003d\u003d null) → B44 | else → B47",
      "B45 : If(i7 \u003e\u003d i8) → B46 | else → B47",
      "B47 : If(r43 \u003d\u003d null) → B48 | else → B53",
      "B49 : If(i10 \u003e\u003d i9) → B50 | else → B53",
      "B50 : If(r7 \u003d\u003d null) → B51 | else → B52"
    ],
    "blockList": [
      "B0 {\n  ThrowableDeserializer\n  JsonParser\n  DeserializationContext\n  $r1 \u003d PropertyBasedCreator _propertyBasedCreator\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r40 \u003d r0._deserializeUsingPropertyBased(r6, r10)\n  return\n}",
      "B2 {\n  $r2 \u003d JsonDeserializer _delegateDeserializer\u003e\n  if ($r2 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r37 \u003d ValueInstantiator _valueInstantiator\u003e\n  $r36 \u003d JsonDeserializer _delegateDeserializer\u003e\n  $r38 \u003d $r36.deserialize(r6, r10)\n  $r39 \u003d $r37.createUsingDelegate(r10, $r38)\n  return\n}",
      "B4 {\n  $r3 \u003d JavaType _beanType\u003e\n  $z0 \u003d $r3.isAbstract()\n  if ($z0 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r34 \u003d r0.handledType()\n  $r33 \u003d r0.getValueInstantiator()\n  $r32 \u003d Object)[0]\n  $r35 \u003d r10.handleMissingInstantiator($r34, $r33, r6, \"abstract type (need to add/enable type information?)\", $r32)\n  return\n}",
      "B6 {\n  $r4 \u003d ValueInstantiator _valueInstantiator\u003e\n  z1 \u003d $r4.canCreateFromString()\n  $r5 \u003d ValueInstantiator _valueInstantiator\u003e\n  z2 \u003d $r5.canCreateUsingDefault()\n  if (z1 !\u003d 0) goto B7 else B9\n}",
      "B7 {\n  if (z2 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  $r30 \u003d r0.handledType()\n  $r29 \u003d r0.getValueInstantiator()\n  $r28 \u003d Object)[0]\n  $r31 \u003d r10.handleMissingInstantiator($r30, $r29, r6, \"Throwable needs a default constructor, a single-String-arg constructor; or explicit @JsonCreator\", $r28)\n  return\n}",
      "B9 {\n  r41 \u003d null\n  r42 \u003d null\n  r43 \u003d null\n  i4 \u003d 0\n}",
      "B10 {\n  $r44 \u003d JsonToken END_OBJECT\u003e\n  $z11 \u003d r6.hasToken($r44)\n  if ($z11 !\u003d 0) goto B11 else B41\n}",
      "B11 {\n  r45 \u003d r6.currentName()\n  $r11 \u003d BeanPropertyMap _beanProperties\u003e\n  r46 \u003d $r11.find(r45)\n  r6.nextToken()\n  if (r46 \u003d\u003d null) goto B12 else B22\n}",
      "B12 {\n  $r25 \u003d \"cause\"\n  $r24 \u003d r46.getName()\n  $z9 \u003d $r25.equals($r24)\n  if ($z9 \u003d\u003d false) goto B13 else B15\n}",
      "B13 {\n  $r27 \u003d JsonToken VALUE_NULL\u003e\n  $z10 \u003d r6.hasToken($r27)\n  if ($z10 \u003d\u003d false) goto B14 else B15\n}",
      "B14 {\n  goto B40\n}",
      "B15 {\n  if (r41 \u003d\u003d null) goto B16 else B17\n}",
      "B16 {\n  r46.deserializeAndSet(r6, r10, r41)\n  goto B40\n}",
      "B17 {\n  if (r42 !\u003d null) goto B18 else B19\n}",
      "B18 {\n  $r26 \u003d BeanPropertyMap _beanProperties\u003e\n  i5 \u003d $r26.size()\n  $i3 \u003d i5 + i5\n  r42 \u003d Object)[$i3]\n  goto B21\n}",
      "B19 {\n  $i1 \u003d lengthof r42\n  if (i4 !\u003d $i1) goto B20 else B21\n}",
      "B20 {\n  $i2 \u003d i4 + 16\n  r42 \u003d Arrays.copyOf(r42, $i2)\n}",
      "B21 {\n  i6 \u003d i4 + 1\n  r42[i4] \u003d r46\n  i4 \u003d i6 + 1\n  $r47 \u003d r46.deserialize(r6, r10)\n  r42[i6] \u003d $r47\n  goto B40\n}",
      "B22 {\n  $r12 \u003d \"message\"\n  $z3 \u003d $r12.equalsIgnoreCase(r45)\n  if ($z3 \u003d\u003d false) goto B23 else B24\n}",
      "B23 {\n  $r23 \u003d r6.getValueAsString()\n  r41 \u003d r0._instantiate(r10, z1, $r23)\n  goto B40\n}",
      "B24 {\n  $r13 \u003d Set _ignorableProps\u003e\n  if ($r13 \u003d\u003d null) goto B25 else B27\n}",
      "B25 {\n  $r22 \u003d Set _ignorableProps\u003e\n  $z8 \u003d $r22.contains(r45)\n  if ($z8 \u003d\u003d false) goto B26 else B27\n}",
      "B26 {\n  r6.skipChildren()\n  goto B40\n}",
      "B27 {\n  $r14 \u003d \"suppressed\"\n  $z4 \u003d $r14.equalsIgnoreCase(r45)\n  if ($z4 \u003d\u003d false) goto B28 else B31\n}",
      "B28 {\n  $r19 \u003d JsonToken VALUE_NULL\u003e\n  $z7 \u003d r6.hasToken($r19)\n  if ($z7 \u003d\u003d false) goto B29 else B30\n}",
      "B29 {\n  r43 \u003d null\n  goto B40\n}",
      "B30 {\n  $r20 \u003d r10.constructType(class \"Ljava/lang/Throwable;\")\n  r48 \u003d r10.findRootValueDeserializer($r20)\n  $r21 \u003d r48.deserialize(r6, r10)\n  r43 \u003d Throwable[]) $r21\n  goto B40\n}",
      "B31 {\n  $r15 \u003d \"localizedMessage\"\n  $z5 \u003d $r15.equalsIgnoreCase(r45)\n  if ($z5 \u003d\u003d false) goto B32 else B33\n}",
      "B32 {\n  r6.skipChildren()\n  goto B40\n}",
      "B33 {\n  $r16 \u003d SettableAnyProperty _anySetter\u003e\n  if ($r16 \u003d\u003d null) goto B34 else B37\n}",
      "B34 {\n  if (r41 !\u003d null) goto B35 else B36\n}",
      "B35 {\n  r41 \u003d r0._instantiate(r10, z1, null)\n}",
      "B36 {\n  $r18 \u003d SettableAnyProperty _anySetter\u003e\n  $r18.deserializeAndSet(r6, r10, r41, r45)\n  goto B40\n}",
      "B37 {\n  $r17 \u003d \"message\"\n  $z6 \u003d $r17.equalsIgnoreCase(r45)\n  if ($z6 \u003d\u003d false) goto B38 else B39\n}",
      "B38 {\n  r6.skipChildren()\n  goto B40\n}",
      "B39 {\n  r0.handleUnknownProperty(r6, r10, r41, r45)\n}",
      "B40 {\n  r6.nextToken()\n  goto B10\n}",
      "B41 {\n  if (r41 !\u003d null) goto B42 else B43\n}",
      "B42 {\n  r41 \u003d r0._instantiate(r10, z1, null)\n}",
      "B43 {\n  if (r42 \u003d\u003d null) goto B44 else B47\n}",
      "B44 {\n  i7 \u003d 0\n  i8 \u003d i4\n}",
      "B45 {\n  if (i7 \u003e\u003d i8) goto B46 else B47\n}",
      "B46 {\n  $r8 \u003d r42[i7]\n  r49 \u003d SettableBeanProperty) $r8\n  $i0 \u003d i7 + 1\n  $r9 \u003d r42[$i0]\n  r49.set(r41, $r9)\n  i7 \u003d i7 + 2\n  goto B45\n}",
      "B47 {\n  if (r43 \u003d\u003d null) goto B48 else B53\n}",
      "B48 {\n  r50 \u003d r43\n  i9 \u003d lengthof r43\n  i10 \u003d 0\n}",
      "B49 {\n  if (i10 \u003e\u003d i9) goto B50 else B53\n}",
      "B50 {\n  r7 \u003d r50[i10]\n  if (r7 \u003d\u003d null) goto B51 else B52\n}",
      "B51 {\n  r41.addSuppressed(r7)\n}",
      "B52 {\n  i10 \u003d i10 + 1\n  goto B49\n}",
      "B53 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B41",
      "B11 --\u003e B12",
      "B11 --\u003e B22",
      "B12 --\u003e B13",
      "B12 --\u003e B15",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B40",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B40",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B21",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B21",
      "B21 --\u003e B40",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B40",
      "B24 --\u003e B25",
      "B24 --\u003e B27",
      "B25 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B40",
      "B27 --\u003e B28",
      "B27 --\u003e B31",
      "B28 --\u003e B29",
      "B28 --\u003e B30",
      "B29 --\u003e B40",
      "B30 --\u003e B40",
      "B31 --\u003e B32",
      "B31 --\u003e B33",
      "B32 --\u003e B40",
      "B33 --\u003e B34",
      "B33 --\u003e B37",
      "B34 --\u003e B35",
      "B34 --\u003e B36",
      "B35 --\u003e B36",
      "B36 --\u003e B40",
      "B37 --\u003e B38",
      "B37 --\u003e B39",
      "B38 --\u003e B40",
      "B39 --\u003e B40",
      "B40 --\u003e B10",
      "B41 --\u003e B42",
      "B41 --\u003e B43",
      "B42 --\u003e B43",
      "B43 --\u003e B44",
      "B43 --\u003e B47",
      "B44 --\u003e B45",
      "B45 --\u003e B46",
      "B45 --\u003e B47",
      "B46 --\u003e B45",
      "B47 --\u003e B48",
      "B47 --\u003e B53",
      "B48 --\u003e B49",
      "B49 --\u003e B50",
      "B49 --\u003e B53",
      "B50 --\u003e B51",
      "B50 --\u003e B52",
      "B51 --\u003e B52",
      "B52 --\u003e B49",
      "B53 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ThrowableDeserializer#_instantiate(...3)",
        "body": "{\r\n    /* 15-Oct-2010, tatu: Can\u0027t assume missing message is an error, since it may be\r\n         *   suppressed during serialization.\r\n         *\r\n         *   Should probably allow use of default constructor, too...\r\n         */\r\n    //throw new XxxException(\"No \u0027message\u0027 property found: could not deserialize \"+_beanType);\r\n    if (hasStringCreator) {\r\n        if (valueAsString !\u003d null) {\r\n            return (Throwable) _valueInstantiator.createFromString(ctxt, valueAsString);\r\n        } else {\r\n            return (Throwable) _valueInstantiator.createFromString(ctxt, null);\r\n        }\r\n    } else {\r\n        return (Throwable) _valueInstantiator.createUsingDefault(ctxt);\r\n    }\r\n}"
      },
      {
        "name": "ThrowableDeserializer#getValueInstantiator(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ThrowableDeserializer#handledType(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ThrowableDeserializer#handleUnknownProperty(...4)",
        "body": "(source not found)"
      },
      {
        "name": "ThrowableDeserializer#_deserializeUsingPropertyBased(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "methodName": "resolve",
    "signature": "void resolve(com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    JavaType obType \u003d ctxt.constructType(Object.class);\r\n    JavaType stringType \u003d ctxt.constructType(String.class);\r\n    TypeFactory tf \u003d ctxt.getTypeFactory();\r\n    /* 26-Nov-2014, tatu: This is highly unusual, as in general contextualization\r\n         *    should always be called separately, from within \"createContextual()\".\r\n         *    But this is a very singular deserializer since it operates on `Object`\r\n         *    (and often for `?` type parameter), and as a result, easily and commonly\r\n         *    results in cycles, being value deserializer for various Maps and Collections.\r\n         *    Because of this, we must somehow break the cycles. This is done here by\r\n         *    forcing pseudo-contextualization with null property.\r\n         */\r\n    // So: first find possible custom instances\r\n    if (_listType \u003d\u003d null) {\r\n        _listDeserializer \u003d _clearIfStdImpl(_findCustomDeser(ctxt, tf.constructCollectionType(List.class, obType)));\r\n    } else {\r\n        // NOTE: if non-default List type, always consider to be non-standard deser\r\n        _listDeserializer \u003d _findCustomDeser(ctxt, _listType);\r\n    }\r\n    if (_mapType \u003d\u003d null) {\r\n        _mapDeserializer \u003d _clearIfStdImpl(_findCustomDeser(ctxt, tf.constructMapType(Map.class, stringType, obType)));\r\n    } else {\r\n        // NOTE: if non-default Map type, always consider to be non-standard deser\r\n        _mapDeserializer \u003d _findCustomDeser(ctxt, _mapType);\r\n    }\r\n    _stringDeserializer \u003d _clearIfStdImpl(_findCustomDeser(ctxt, stringType));\r\n    _numberDeserializer \u003d _clearIfStdImpl(_findCustomDeser(ctxt, tf.constructType(Number.class)));\r\n    // and then do bogus contextualization, in case custom ones need to resolve dependencies of\r\n    // their own\r\n    JavaType unknown \u003d TypeFactory.unknownType();\r\n    _mapDeserializer \u003d (JsonDeserializer\u003cObject\u003e) ctxt.handleSecondaryContextualization(_mapDeserializer, null, unknown);\r\n    _listDeserializer \u003d (JsonDeserializer\u003cObject\u003e) ctxt.handleSecondaryContextualization(_listDeserializer, null, unknown);\r\n    _stringDeserializer \u003d (JsonDeserializer\u003cObject\u003e) ctxt.handleSecondaryContextualization(_stringDeserializer, null, unknown);\r\n    _numberDeserializer \u003d (JsonDeserializer\u003cObject\u003e) ctxt.handleSecondaryContextualization(_numberDeserializer, null, unknown);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r5 !\u003d null) → B1 | else → B2",
      "B3 : If($r8 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  UntypedObjectDeserializer\n  DeserializationContext\n  r1 \u003d r0.constructType(class \"Ljava/lang/Object;\")\n  r2 \u003d r0.constructType(class \"Ljava/lang/String;\")\n  r3 \u003d r0.getTypeFactory()\n  $r5 \u003d JavaType _listType\u003e\n  if ($r5 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r28 \u003d r3.constructCollectionType(class \"Ljava/util/List;\", r1)\n  $r29 \u003d r4._findCustomDeser(r0, $r28)\n  $r30 \u003d r4._clearIfStdImpl($r29)\n  JsonDeserializer _listDeserializer\u003e \u003d $r30\n  goto B3\n}",
      "B2 {\n  $r6 \u003d JavaType _listType\u003e\n  $r7 \u003d r4._findCustomDeser(r0, $r6)\n  JsonDeserializer _listDeserializer\u003e \u003d $r7\n}",
      "B3 {\n  $r8 \u003d JavaType _mapType\u003e\n  if ($r8 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r24 \u003d r3.constructMapType(class \"Ljava/util/Map;\", r2, r1)\n  $r25 \u003d r4._findCustomDeser(r0, $r24)\n  $r26 \u003d r4._clearIfStdImpl($r25)\n  JsonDeserializer _mapDeserializer\u003e \u003d $r26\n  goto B6\n}",
      "B5 {\n  $r9 \u003d JavaType _mapType\u003e\n  $r10 \u003d r4._findCustomDeser(r0, $r9)\n  JsonDeserializer _mapDeserializer\u003e \u003d $r10\n}",
      "B6 {\n  $r11 \u003d r4._findCustomDeser(r0, r2)\n  $r12 \u003d r4._clearIfStdImpl($r11)\n  JsonDeserializer _stringDeserializer\u003e \u003d $r12\n  $r13 \u003d r3.constructType(class \"Ljava/lang/Number;\")\n  $r14 \u003d r4._findCustomDeser(r0, $r13)\n  $r15 \u003d r4._clearIfStdImpl($r14)\n  JsonDeserializer _numberDeserializer\u003e \u003d $r15\n  $r27 \u003d TypeFactory.unknownType()\n  $r16 \u003d JsonDeserializer _mapDeserializer\u003e\n  $r17 \u003d r0.handleSecondaryContextualization($r16, null, $r27)\n  JsonDeserializer _mapDeserializer\u003e \u003d $r17\n  $r18 \u003d JsonDeserializer _listDeserializer\u003e\n  $r19 \u003d r0.handleSecondaryContextualization($r18, null, $r27)\n  JsonDeserializer _listDeserializer\u003e \u003d $r19\n  $r20 \u003d JsonDeserializer _stringDeserializer\u003e\n  $r21 \u003d r0.handleSecondaryContextualization($r20, null, $r27)\n  JsonDeserializer _stringDeserializer\u003e \u003d $r21\n  $r22 \u003d JsonDeserializer _numberDeserializer\u003e\n  $r23 \u003d r0.handleSecondaryContextualization($r22, null, $r27)\n  JsonDeserializer _numberDeserializer\u003e \u003d $r23\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "UntypedObjectDeserializer#_findCustomDeser(...2)",
        "body": "{\r\n    // Since we are calling from `resolve`, we should NOT try to contextualize yet;\r\n    // contextualization will only occur at a later point\r\n    return ctxt.findNonContextualValueDeserializer(type);\r\n}"
      },
      {
        "name": "UntypedObjectDeserializer#_clearIfStdImpl(...1)",
        "body": "{\r\n    return ClassUtil.isJacksonStdImpl(deser) ? null : deser;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "methodName": "createContextual",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer createContextual(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    // 14-Jun-2017, tatu: [databind#1625]: may want to block merging, for root value\r\n    boolean preventMerge \u003d (property \u003d\u003d null) \u0026\u0026 Boolean.FALSE.equals(ctxt.getConfig().getDefaultMergeable(Object.class));\r\n    // Since 2.19, 31-Aug-2024: [databind#4680] Allow custom key deserializer for Object.class\r\n    KeyDeserializer customKeyDeser \u003d ctxt.findKeyDeserializer(ctxt.constructType(Object.class), property);\r\n    // but make sure to ignore standard/default key deserializer (perf optimization)\r\n    if (customKeyDeser !\u003d null) {\r\n        if (ClassUtil.isJacksonStdImpl(customKeyDeser)) {\r\n            customKeyDeser \u003d null;\r\n        }\r\n    }\r\n    // 20-Apr-2014, tatu: If nothing custom, let\u0027s use \"vanilla\" instance,\r\n    //     simpler and can avoid some of delegation\r\n    if ((_stringDeserializer \u003d\u003d null) \u0026\u0026 (_numberDeserializer \u003d\u003d null) \u0026\u0026 (_mapDeserializer \u003d\u003d null) \u0026\u0026 (_listDeserializer \u003d\u003d null) \u0026\u0026 // [databind#4680] Since 2.19 : Allow custom key deserializer for Object.class\r\n    (customKeyDeser \u003d\u003d null) \u0026\u0026 getClass() \u003d\u003d UntypedObjectDeserializer.class) {\r\n        return UntypedObjectDeserializerNR.instance(preventMerge);\r\n    }\r\n    UntypedObjectDeserializer deser \u003d this;\r\n    if (preventMerge !\u003d _nonMerging) {\r\n        deser \u003d new UntypedObjectDeserializer(deser, preventMerge);\r\n    }\r\n    //  [databind#4680] Since 2.19 : Allow custom key deserializer for Object.class\r\n    if (customKeyDeser !\u003d null) {\r\n        deser \u003d new UntypedObjectDeserializer(deser, customKeyDeser);\r\n    }\r\n    return deser;\r\n}",
    "nodes": 19,
    "edges": 29,
    "cc": 12,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B3",
      "B1 : If($z2 \u003d\u003d false) → B2 | else → B3",
      "B4 : If($r14 \u003d\u003d null) → B5 | else → B7",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B7",
      "B7 : If($r16 !\u003d null) → B8 | else → B14",
      "B8 : If($r5 !\u003d null) → B9 | else → B14",
      "B9 : If($r6 !\u003d null) → B10 | else → B14",
      "B10 : If($r7 !\u003d null) → B11 | else → B14",
      "B11 : If(r15 !\u003d null) → B12 | else → B14",
      "B12 : If($r8 !\u003d class \"Lcom/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer;\") → B13 | else → B14",
      "B14 : If(z0 \u003d\u003d $z4) → B15 | else → B16",
      "B16 : If(r15 \u003d\u003d null) → B17 | else → B18"
    ],
    "blockList": [
      "B0 {\n  UntypedObjectDeserializer\n  DeserializationContext\n  BeanProperty\n  if (r0 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r10 \u003d Boolean FALSE\u003e\n  $r11 \u003d r1.getConfig()\n  $r12 \u003d $r11.getDefaultMergeable(class \"Ljava/lang/Object;\")\n  $z2 \u003d $r10.equals($r12)\n  if ($z2 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z3 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z3 \u003d 0\n}",
      "B4 {\n  z0 \u003d $z3\n  $r13 \u003d r1.constructType(class \"Ljava/lang/Object;\")\n  $r14 \u003d r1.findKeyDeserializer($r13, r0)\n  r15 \u003d $r14\n  if ($r14 \u003d\u003d null) goto B5 else B7\n}",
      "B5 {\n  $z1 \u003d ClassUtil.isJacksonStdImpl($r14)\n  if ($z1 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  r15 \u003d null\n}",
      "B7 {\n  $r16 \u003d JsonDeserializer _stringDeserializer\u003e\n  if ($r16 !\u003d null) goto B8 else B14\n}",
      "B8 {\n  $r5 \u003d JsonDeserializer _numberDeserializer\u003e\n  if ($r5 !\u003d null) goto B9 else B14\n}",
      "B9 {\n  $r6 \u003d JsonDeserializer _mapDeserializer\u003e\n  if ($r6 !\u003d null) goto B10 else B14\n}",
      "B10 {\n  $r7 \u003d JsonDeserializer _listDeserializer\u003e\n  if ($r7 !\u003d null) goto B11 else B14\n}",
      "B11 {\n  if (r15 !\u003d null) goto B12 else B14\n}",
      "B12 {\n  $r8 \u003d r2.getClass()\n  if ($r8 !\u003d class \"Lcom/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer;\") goto B13 else B14\n}",
      "B13 {\n  $r9 \u003d UntypedObjectDeserializerNR.instance(z0)\n  return\n}",
      "B14 {\n  r17 \u003d r2\n  $z4 \u003d UntypedObjectDeserializer: boolean _nonMerging\u003e\n  if (z0 \u003d\u003d $z4) goto B15 else B16\n}",
      "B15 {\n  $r4 \u003d UntypedObjectDeserializer\n  new UntypedObjectDeserializer(r2, z0)\n  r17 \u003d $r4\n}",
      "B16 {\n  if (r15 \u003d\u003d null) goto B17 else B18\n}",
      "B17 {\n  $r3 \u003d UntypedObjectDeserializer\n  new UntypedObjectDeserializer(r17, r15)\n  r17 \u003d $r3\n}",
      "B18 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B14",
      "B8 --\u003e B9",
      "B8 --\u003e B14",
      "B9 --\u003e B10",
      "B9 --\u003e B14",
      "B10 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e B12",
      "B11 --\u003e B14",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "UntypedObjectDeserializer#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "methodName": "deserialize",
    "signature": "java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    switch(p.currentTokenId()) {\r\n        case JsonTokenId.ID_START_OBJECT:\r\n        case JsonTokenId.ID_FIELD_NAME:\r\n        // 28-Oct-2015, tatu: [databind#989] We may also be given END_OBJECT (similar to FIELD_NAME),\r\n        //    if caller has advanced to the first token of Object, but for empty Object\r\n        case JsonTokenId.ID_END_OBJECT:\r\n            if (_mapDeserializer !\u003d null) {\r\n                return _mapDeserializer.deserialize(p, ctxt);\r\n            }\r\n            return mapObject(p, ctxt);\r\n        case JsonTokenId.ID_START_ARRAY:\r\n            if (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY)) {\r\n                return mapArrayToArray(p, ctxt);\r\n            }\r\n            if (_listDeserializer !\u003d null) {\r\n                return _listDeserializer.deserialize(p, ctxt);\r\n            }\r\n            return mapArray(p, ctxt);\r\n        case JsonTokenId.ID_EMBEDDED_OBJECT:\r\n            return p.getEmbeddedObject();\r\n        case JsonTokenId.ID_STRING:\r\n            if (_stringDeserializer !\u003d null) {\r\n                return _stringDeserializer.deserialize(p, ctxt);\r\n            }\r\n            return p.getText();\r\n        case JsonTokenId.ID_NUMBER_INT:\r\n            if (_numberDeserializer !\u003d null) {\r\n                return _numberDeserializer.deserialize(p, ctxt);\r\n            }\r\n            // Caller may want to get all integral values returned as {@link java.math.BigInteger},\r\n            // or {@link java.lang.Long} for consistency\r\n            if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS)) {\r\n                return _coerceIntegral(p, ctxt);\r\n            }\r\n            // should be optimal, whatever it is\r\n            return p.getNumberValue();\r\n        case JsonTokenId.ID_NUMBER_FLOAT:\r\n            if (_numberDeserializer !\u003d null) {\r\n                return _numberDeserializer.deserialize(p, ctxt);\r\n            }\r\n            return _deserializeFP(p, ctxt);\r\n        case JsonTokenId.ID_TRUE:\r\n            return Boolean.TRUE;\r\n        case JsonTokenId.ID_FALSE:\r\n            return Boolean.FALSE;\r\n        case // 08-Nov-2016, tatu: yes, occurs\r\n        JsonTokenId.ID_NULL:\r\n            return null;\r\n        //        case JsonTokenId.ID_END_ARRAY: // invalid\r\n        default:\r\n    }\r\n    return ctxt.handleUnexpectedToken(Object.class, p);\r\n}",
    "nodes": 25,
    "edges": 24,
    "cc": 1,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B4",
      "B1 : If($r25 \u003d\u003d null) → B2 | else → B3",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6",
      "B6 : If($r20 \u003d\u003d null) → B7 | else → B8",
      "B10 : If($r15 \u003d\u003d null) → B11 | else → B12",
      "B13 : If($r10 \u003d\u003d null) → B14 | else → B15",
      "B15 : If($z0 \u003d\u003d false) → B16 | else → B17",
      "B18 : If($r5 \u003d\u003d null) → B19 | else → B20"
    ],
    "blockList": [
      "B0 {\n  UntypedObjectDeserializer\n  JsonParser\n  DeserializationContext\n  $i0 \u003d r0.currentTokenId()\n  JsonParser)\u003e(class \"Ljava/lang/Object;\", r0); }\n}",
      "B1 {\n  $r25 \u003d JsonDeserializer _mapDeserializer\u003e\n  if ($r25 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r27 \u003d JsonDeserializer _mapDeserializer\u003e\n  $r28 \u003d $r27.deserialize(r0, r6)\n  return\n}",
      "B3 {\n  $r26 \u003d r4.mapObject(r0, r6)\n  return\n}",
      "B4 {\n  $r19 \u003d DeserializationFeature USE_JAVA_ARRAY_FOR_JSON_ARRAY\u003e\n  $z1 \u003d r6.isEnabled($r19)\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r24 \u003d r4.mapArrayToArray(r0, r6)\n  return\n}",
      "B6 {\n  $r20 \u003d JsonDeserializer _listDeserializer\u003e\n  if ($r20 \u003d\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r22 \u003d JsonDeserializer _listDeserializer\u003e\n  $r23 \u003d $r22.deserialize(r0, r6)\n  return\n}",
      "B8 {\n  $r21 \u003d r4.mapArray(r0, r6)\n  return\n}",
      "B9 {\n  $r1 \u003d r0.getEmbeddedObject()\n  return\n}",
      "B10 {\n  $r15 \u003d JsonDeserializer _stringDeserializer\u003e\n  if ($r15 \u003d\u003d null) goto B11 else B12\n}",
      "B11 {\n  $r17 \u003d JsonDeserializer _stringDeserializer\u003e\n  $r18 \u003d $r17.deserialize(r0, r6)\n  return\n}",
      "B12 {\n  $r16 \u003d r0.getText()\n  return\n}",
      "B13 {\n  $r10 \u003d JsonDeserializer _numberDeserializer\u003e\n  if ($r10 \u003d\u003d null) goto B14 else B15\n}",
      "B14 {\n  $r13 \u003d JsonDeserializer _numberDeserializer\u003e\n  $r14 \u003d $r13.deserialize(r0, r6)\n  return\n}",
      "B15 {\n  $i1 \u003d UntypedObjectDeserializer: int F_MASK_INT_COERCIONS\u003e\n  $z0 \u003d r6.hasSomeOfFeatures($i1)\n  if ($z0 \u003d\u003d false) goto B16 else B17\n}",
      "B16 {\n  $r12 \u003d r4._coerceIntegral(r0, r6)\n  return\n}",
      "B17 {\n  $r11 \u003d r0.getNumberValue()\n  return\n}",
      "B18 {\n  $r5 \u003d JsonDeserializer _numberDeserializer\u003e\n  if ($r5 \u003d\u003d null) goto B19 else B20\n}",
      "B19 {\n  $r8 \u003d JsonDeserializer _numberDeserializer\u003e\n  $r9 \u003d $r8.deserialize(r0, r6)\n  return\n}",
      "B20 {\n  $r7 \u003d r4._deserializeFP(r0, r6)\n  return\n}",
      "B21 {\n  $r3 \u003d Boolean TRUE\u003e\n  return\n}",
      "B22 {\n  $r2 \u003d Boolean FALSE\u003e\n  return\n}",
      "B23 {\n  return\n}",
      "B24 {\n  $r29 \u003d r6.handleUnexpectedToken(class \"Ljava/lang/Object;\", r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B0 --\u003e B24",
      "B0 --\u003e B10",
      "B0 --\u003e B13",
      "B0 --\u003e B18",
      "B0 --\u003e B21",
      "B0 --\u003e B22",
      "B0 --\u003e B23",
      "B0 --\u003e B9",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e [EXIT]",
      "B21 --\u003e [EXIT]",
      "B22 --\u003e [EXIT]",
      "B23 --\u003e [EXIT]",
      "B24 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "UntypedObjectDeserializer#_coerceIntegral(...2)",
        "body": "(source not found)"
      },
      {
        "name": "UntypedObjectDeserializer#mapArray(...2)",
        "body": "{\r\n    // Minor optimization to handle small lists (default size for ArrayList is 10)\r\n    if (p.nextToken() \u003d\u003d JsonToken.END_ARRAY) {\r\n        return new ArrayList\u003cObject\u003e(2);\r\n    }\r\n    Object value \u003d deserialize(p, ctxt);\r\n    if (p.nextToken() \u003d\u003d JsonToken.END_ARRAY) {\r\n        ArrayList\u003cObject\u003e l \u003d new ArrayList\u003cObject\u003e(2);\r\n        l.add(value);\r\n        return l;\r\n    }\r\n    Object value2 \u003d deserialize(p, ctxt);\r\n    if (p.nextToken() \u003d\u003d JsonToken.END_ARRAY) {\r\n        ArrayList\u003cObject\u003e l \u003d new ArrayList\u003cObject\u003e(2);\r\n        l.add(value);\r\n        l.add(value2);\r\n        return l;\r\n    }\r\n    ObjectBuffer buffer \u003d ctxt.leaseObjectBuffer();\r\n    Object[] values \u003d buffer.resetAndStart();\r\n    int ptr \u003d 0;\r\n    values[ptr++] \u003d value;\r\n    values[ptr++] \u003d value2;\r\n    int totalSize \u003d ptr;\r\n    do {\r\n        value \u003d deserialize(p, ctxt);\r\n        ++totalSize;\r\n        if (ptr \u003e\u003d values.length) {\r\n            values \u003d buffer.appendCompletedChunk(values);\r\n            ptr \u003d 0;\r\n        }\r\n        values[ptr++] \u003d value;\r\n    } while (p.nextToken() !\u003d JsonToken.END_ARRAY);\r\n    // let\u0027s create full array then\r\n    ArrayList\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e(totalSize);\r\n    buffer.completeAndClearBuffer(values, ptr, result);\r\n    ctxt.returnObjectBuffer(buffer);\r\n    return result;\r\n}"
      },
      {
        "name": "UntypedObjectDeserializer#mapArrayToArray(...2)",
        "body": "{\r\n    // Minor optimization to handle small lists (default size for ArrayList is 10)\r\n    if (p.nextToken() \u003d\u003d JsonToken.END_ARRAY) {\r\n        return NO_OBJECTS;\r\n    }\r\n    ObjectBuffer buffer \u003d ctxt.leaseObjectBuffer();\r\n    Object[] values \u003d buffer.resetAndStart();\r\n    int ptr \u003d 0;\r\n    do {\r\n        Object value \u003d deserialize(p, ctxt);\r\n        if (ptr \u003e\u003d values.length) {\r\n            values \u003d buffer.appendCompletedChunk(values);\r\n            ptr \u003d 0;\r\n        }\r\n        values[ptr++] \u003d value;\r\n    } while (p.nextToken() !\u003d JsonToken.END_ARRAY);\r\n    final Object[] result \u003d buffer.completeAndClearBuffer(values, ptr);\r\n    ctxt.returnObjectBuffer(buffer);\r\n    return result;\r\n}"
      },
      {
        "name": "UntypedObjectDeserializer#mapObject(...2)",
        "body": "{\r\n    String key1;\r\n    JsonToken t \u003d p.currentToken();\r\n    if (t \u003d\u003d JsonToken.START_OBJECT) {\r\n        key1 \u003d p.nextFieldName();\r\n    } else if (t \u003d\u003d JsonToken.FIELD_NAME) {\r\n        key1 \u003d p.currentName();\r\n    } else {\r\n        if (t !\u003d JsonToken.END_OBJECT) {\r\n            return ctxt.handleUnexpectedToken(handledType(), p);\r\n        }\r\n        key1 \u003d null;\r\n    }\r\n    if (key1 \u003d\u003d null) {\r\n        // empty map might work; but caller may want to modify... so better just give small modifiable\r\n        return new LinkedHashMap\u003c\u003e(2);\r\n    }\r\n    key1 \u003d _customDeserializeKey(key1, ctxt);\r\n    // minor optimization; let\u0027s handle 1 and 2 entry cases separately\r\n    // 24-Mar-2015, tatu: Ideally, could use one of \u0027nextXxx()\u0027 methods, but for\r\n    //   that we\u0027d need new method(s) in JsonDeserializer. So not quite yet.\r\n    p.nextToken();\r\n    Object value1 \u003d deserialize(p, ctxt);\r\n    String key2 \u003d p.nextFieldName();\r\n    if (key2 \u003d\u003d null) {\r\n        // has to be END_OBJECT, then\r\n        // single entry; but we want modifiable\r\n        LinkedHashMap\u003cString, Object\u003e result \u003d new LinkedHashMap\u003c\u003e(2);\r\n        result.put(key1, value1);\r\n        return result;\r\n    }\r\n    key2 \u003d _customDeserializeKey(key2, ctxt);\r\n    p.nextToken();\r\n    Object value2 \u003d deserialize(p, ctxt);\r\n    String key \u003d p.nextFieldName();\r\n    if (key \u003d\u003d null) {\r\n        LinkedHashMap\u003cString, Object\u003e result \u003d new LinkedHashMap\u003c\u003e(4);\r\n        result.put(key1, value1);\r\n        if (result.put(key2, value2) !\u003d null) {\r\n            // 22-May-2020, tatu: [databind#2733] may need extra handling\r\n            return _mapObjectWithDups(p, ctxt, result, key1, value1, value2, key);\r\n        }\r\n        return result;\r\n    }\r\n    key \u003d _customDeserializeKey(key, ctxt);\r\n    // And then the general case; default map size is 16\r\n    LinkedHashMap\u003cString, Object\u003e result \u003d new LinkedHashMap\u003c\u003e();\r\n    result.put(key1, value1);\r\n    if (result.put(key2, value2) !\u003d null) {\r\n        // 22-May-2020, tatu: [databind#2733] may need extra handling\r\n        return _mapObjectWithDups(p, ctxt, result, key1, value1, value2, key);\r\n    }\r\n    do {\r\n        p.nextToken();\r\n        final Object newValue \u003d deserialize(p, ctxt);\r\n        final Object oldValue \u003d result.put(key, newValue);\r\n        if (oldValue !\u003d null) {\r\n            return _mapObjectWithDups(p, ctxt, result, key, oldValue, newValue, _customDeserializeNullableKey(p.nextFieldName(), ctxt));\r\n        }\r\n    } while ((key \u003d _customDeserializeNullableKey(p.nextFieldName(), ctxt)) !\u003d null);\r\n    return result;\r\n}"
      },
      {
        "name": "UntypedObjectDeserializer#_deserializeFP(...2)",
        "body": "{\r\n    JsonParser.NumberTypeFP nt \u003d p.getNumberTypeFP();\r\n    if (nt \u003d\u003d JsonParser.NumberTypeFP.BIG_DECIMAL) {\r\n        return p.getDecimalValue();\r\n    }\r\n    if (!p.isNaN()) {\r\n        if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\r\n            return p.getDecimalValue();\r\n        }\r\n    }\r\n    if (nt \u003d\u003d JsonParser.NumberTypeFP.FLOAT32) {\r\n        return p.getFloatValue();\r\n    }\r\n    return p.getDoubleValue();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "methodName": "deserializeWithType",
    "signature": "java.lang.Object deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)",
    "visibility": "public",
    "body": "{\r\n    switch(p.currentTokenId()) {\r\n        // First: does it look like we had type id wrapping of some kind?\r\n        case JsonTokenId.ID_START_ARRAY:\r\n        case JsonTokenId.ID_START_OBJECT:\r\n        case JsonTokenId.ID_FIELD_NAME:\r\n            // Output can be as JSON Object, Array or scalar: no way to know at this point:\r\n            return typeDeserializer.deserializeTypedFromAny(p, ctxt);\r\n        case JsonTokenId.ID_EMBEDDED_OBJECT:\r\n            return p.getEmbeddedObject();\r\n        // Otherwise we probably got a \"native\" type (ones that map\r\n        // naturally and thus do not need or use type ids)\r\n        case JsonTokenId.ID_STRING:\r\n            if (_stringDeserializer !\u003d null) {\r\n                return _stringDeserializer.deserialize(p, ctxt);\r\n            }\r\n            return p.getText();\r\n        case JsonTokenId.ID_NUMBER_INT:\r\n            if (_numberDeserializer !\u003d null) {\r\n                return _numberDeserializer.deserialize(p, ctxt);\r\n            }\r\n            // May need coercion to \"bigger\" types:\r\n            if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS)) {\r\n                return _coerceIntegral(p, ctxt);\r\n            }\r\n            // should be optimal, whatever it is\r\n            return p.getNumberValue();\r\n        case JsonTokenId.ID_NUMBER_FLOAT:\r\n            if (_numberDeserializer !\u003d null) {\r\n                return _numberDeserializer.deserialize(p, ctxt);\r\n            }\r\n            return _deserializeFP(p, ctxt);\r\n        case JsonTokenId.ID_TRUE:\r\n            return Boolean.TRUE;\r\n        case JsonTokenId.ID_FALSE:\r\n            return Boolean.FALSE;\r\n        case // should not get this far really but...\r\n        JsonTokenId.ID_NULL:\r\n            return null;\r\n        default:\r\n    }\r\n    return ctxt.handleUnexpectedToken(Object.class, p);\r\n}",
    "nodes": 18,
    "edges": 17,
    "cc": 1,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B17",
      "B3 : If($r15 \u003d\u003d null) → B4 | else → B5",
      "B6 : If($r10 \u003d\u003d null) → B7 | else → B8",
      "B8 : If($z0 \u003d\u003d false) → B9 | else → B10",
      "B11 : If($r5 \u003d\u003d null) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  UntypedObjectDeserializer\n  JsonParser\n  DeserializationContext\n  TypeDeserializer\n  $i0 \u003d r0.currentTokenId()\n  JsonParser)\u003e(class \"Ljava/lang/Object;\", r0); }\n}",
      "B1 {\n  $r20 \u003d r19.deserializeTypedFromAny(r0, r6)\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getEmbeddedObject()\n  return\n}",
      "B3 {\n  $r15 \u003d JsonDeserializer _stringDeserializer\u003e\n  if ($r15 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r17 \u003d JsonDeserializer _stringDeserializer\u003e\n  $r18 \u003d $r17.deserialize(r0, r6)\n  return\n}",
      "B5 {\n  $r16 \u003d r0.getText()\n  return\n}",
      "B6 {\n  $r10 \u003d JsonDeserializer _numberDeserializer\u003e\n  if ($r10 \u003d\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r13 \u003d JsonDeserializer _numberDeserializer\u003e\n  $r14 \u003d $r13.deserialize(r0, r6)\n  return\n}",
      "B8 {\n  $i1 \u003d UntypedObjectDeserializer: int F_MASK_INT_COERCIONS\u003e\n  $z0 \u003d r6.hasSomeOfFeatures($i1)\n  if ($z0 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r12 \u003d r4._coerceIntegral(r0, r6)\n  return\n}",
      "B10 {\n  $r11 \u003d r0.getNumberValue()\n  return\n}",
      "B11 {\n  $r5 \u003d JsonDeserializer _numberDeserializer\u003e\n  if ($r5 \u003d\u003d null) goto B12 else B13\n}",
      "B12 {\n  $r8 \u003d JsonDeserializer _numberDeserializer\u003e\n  $r9 \u003d $r8.deserialize(r0, r6)\n  return\n}",
      "B13 {\n  $r7 \u003d r4._deserializeFP(r0, r6)\n  return\n}",
      "B14 {\n  $r3 \u003d Boolean TRUE\u003e\n  return\n}",
      "B15 {\n  $r2 \u003d Boolean FALSE\u003e\n  return\n}",
      "B16 {\n  return\n}",
      "B17 {\n  $r21 \u003d r6.handleUnexpectedToken(class \"Ljava/lang/Object;\", r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B17",
      "B0 --\u003e B3",
      "B0 --\u003e B6",
      "B0 --\u003e B11",
      "B0 --\u003e B14",
      "B0 --\u003e B15",
      "B0 --\u003e B16",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "UntypedObjectDeserializer#_coerceIntegral(...2)",
        "body": "(source not found)"
      },
      {
        "name": "UntypedObjectDeserializer#_deserializeFP(...2)",
        "body": "{\r\n    JsonParser.NumberTypeFP nt \u003d p.getNumberTypeFP();\r\n    if (nt \u003d\u003d JsonParser.NumberTypeFP.BIG_DECIMAL) {\r\n        return p.getDecimalValue();\r\n    }\r\n    if (!p.isNaN()) {\r\n        if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\r\n            return p.getDecimalValue();\r\n        }\r\n    }\r\n    if (nt \u003d\u003d JsonParser.NumberTypeFP.FLOAT32) {\r\n        return p.getFloatValue();\r\n    }\r\n    return p.getDoubleValue();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "methodName": "deserialize",
    "signature": "java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (_nonMerging) {\r\n        return deserialize(p, ctxt);\r\n    }\r\n    switch(p.currentTokenId()) {\r\n        case JsonTokenId.ID_START_OBJECT:\r\n        case JsonTokenId.ID_FIELD_NAME:\r\n        // We may also be given END_OBJECT (similar to FIELD_NAME),\r\n        // if caller has advanced to the first token of Object, but for empty Object\r\n        case JsonTokenId.ID_END_OBJECT:\r\n            if (_mapDeserializer !\u003d null) {\r\n                return _mapDeserializer.deserialize(p, ctxt, intoValue);\r\n            }\r\n            if (intoValue instanceof Map\u003c?, ?\u003e) {\r\n                return mapObject(p, ctxt, (Map\u003cObject, Object\u003e) intoValue);\r\n            }\r\n            return mapObject(p, ctxt);\r\n        case JsonTokenId.ID_START_ARRAY:\r\n            if (_listDeserializer !\u003d null) {\r\n                return _listDeserializer.deserialize(p, ctxt, intoValue);\r\n            }\r\n            if (intoValue instanceof Collection\u003c?\u003e) {\r\n                return mapArray(p, ctxt, (Collection\u003cObject\u003e) intoValue);\r\n            }\r\n            if (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY)) {\r\n                return mapArrayToArray(p, ctxt);\r\n            }\r\n            return mapArray(p, ctxt);\r\n        case JsonTokenId.ID_EMBEDDED_OBJECT:\r\n            return p.getEmbeddedObject();\r\n        case JsonTokenId.ID_STRING:\r\n            if (_stringDeserializer !\u003d null) {\r\n                return _stringDeserializer.deserialize(p, ctxt, intoValue);\r\n            }\r\n            return p.getText();\r\n        case JsonTokenId.ID_NUMBER_INT:\r\n            if (_numberDeserializer !\u003d null) {\r\n                return _numberDeserializer.deserialize(p, ctxt, intoValue);\r\n            }\r\n            if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS)) {\r\n                return _coerceIntegral(p, ctxt);\r\n            }\r\n            return p.getNumberValue();\r\n        case JsonTokenId.ID_NUMBER_FLOAT:\r\n            if (_numberDeserializer !\u003d null) {\r\n                return _numberDeserializer.deserialize(p, ctxt, intoValue);\r\n            }\r\n            return _deserializeFP(p, ctxt);\r\n        case JsonTokenId.ID_TRUE:\r\n            return Boolean.TRUE;\r\n        case JsonTokenId.ID_FALSE:\r\n            return Boolean.FALSE;\r\n        case JsonTokenId.ID_NULL:\r\n            // 21-Apr-2017, tatu: May need to consider \"skip nulls\" at some point but...\r\n            return null;\r\n        default:\r\n    }\r\n    // easiest to just delegate to \"dumb\" version for the rest?\r\n    return deserialize(p, ctxt);\r\n}",
    "nodes": 31,
    "edges": 30,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(switch-on $i0) → B3 | else → B8",
      "B3 : If($r28 \u003d\u003d null) → B4 | else → B5",
      "B5 : If($z4 \u003d\u003d false) → B6 | else → B7",
      "B8 : If($r20 \u003d\u003d null) → B9 | else → B10",
      "B10 : If($z2 \u003d\u003d false) → B11 | else → B12",
      "B12 : If($z3 \u003d\u003d false) → B13 | else → B14",
      "B16 : If($r16 \u003d\u003d null) → B17 | else → B18",
      "B19 : If($r11 \u003d\u003d null) → B20 | else → B21",
      "B21 : If($z1 \u003d\u003d false) → B22 | else → B23",
      "B24 : If($r5 \u003d\u003d null) → B25 | else → B26"
    ],
    "blockList": [
      "B0 {\n  UntypedObjectDeserializer\n  JsonParser\n  DeserializationContext\n  Object\n  $z0 \u003d UntypedObjectDeserializer: boolean _nonMerging\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r35 \u003d r0.deserialize(r1, r6)\n  return\n}",
      "B2 {\n  $i0 \u003d r1.currentTokenId()\n  DeserializationContext)\u003e(r1, r6); }\n}",
      "B3 {\n  $r28 \u003d JsonDeserializer _mapDeserializer\u003e\n  if ($r28 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r32 \u003d JsonDeserializer _mapDeserializer\u003e\n  $r33 \u003d $r32.deserialize(r1, r6, r8)\n  return\n}",
      "B5 {\n  $z4 \u003d Map\n  if ($z4 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r30 \u003d Map) r8\n  $r31 \u003d r0.mapObject(r1, r6, $r30)\n  return\n}",
      "B7 {\n  $r29 \u003d r0.mapObject(r1, r6)\n  return\n}",
      "B8 {\n  $r20 \u003d JsonDeserializer _listDeserializer\u003e\n  if ($r20 \u003d\u003d null) goto B9 else B10\n}",
      "B9 {\n  $r26 \u003d JsonDeserializer _listDeserializer\u003e\n  $r27 \u003d $r26.deserialize(r1, r6, r8)\n  return\n}",
      "B10 {\n  $z2 \u003d Collection\n  if ($z2 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  $r24 \u003d Collection) r8\n  $r25 \u003d r0.mapArray(r1, r6, $r24)\n  return\n}",
      "B12 {\n  $r21 \u003d DeserializationFeature USE_JAVA_ARRAY_FOR_JSON_ARRAY\u003e\n  $z3 \u003d r6.isEnabled($r21)\n  if ($z3 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  $r23 \u003d r0.mapArrayToArray(r1, r6)\n  return\n}",
      "B14 {\n  $r22 \u003d r0.mapArray(r1, r6)\n  return\n}",
      "B15 {\n  $r2 \u003d r1.getEmbeddedObject()\n  return\n}",
      "B16 {\n  $r16 \u003d JsonDeserializer _stringDeserializer\u003e\n  if ($r16 \u003d\u003d null) goto B17 else B18\n}",
      "B17 {\n  $r18 \u003d JsonDeserializer _stringDeserializer\u003e\n  $r19 \u003d $r18.deserialize(r1, r6, r8)\n  return\n}",
      "B18 {\n  $r17 \u003d r1.getText()\n  return\n}",
      "B19 {\n  $r11 \u003d JsonDeserializer _numberDeserializer\u003e\n  if ($r11 \u003d\u003d null) goto B20 else B21\n}",
      "B20 {\n  $r14 \u003d JsonDeserializer _numberDeserializer\u003e\n  $r15 \u003d $r14.deserialize(r1, r6, r8)\n  return\n}",
      "B21 {\n  $i1 \u003d UntypedObjectDeserializer: int F_MASK_INT_COERCIONS\u003e\n  $z1 \u003d r6.hasSomeOfFeatures($i1)\n  if ($z1 \u003d\u003d false) goto B22 else B23\n}",
      "B22 {\n  $r13 \u003d r0._coerceIntegral(r1, r6)\n  return\n}",
      "B23 {\n  $r12 \u003d r1.getNumberValue()\n  return\n}",
      "B24 {\n  $r5 \u003d JsonDeserializer _numberDeserializer\u003e\n  if ($r5 \u003d\u003d null) goto B25 else B26\n}",
      "B25 {\n  $r9 \u003d JsonDeserializer _numberDeserializer\u003e\n  $r10 \u003d $r9.deserialize(r1, r6, r8)\n  return\n}",
      "B26 {\n  $r7 \u003d r0._deserializeFP(r1, r6)\n  return\n}",
      "B27 {\n  $r4 \u003d Boolean TRUE\u003e\n  return\n}",
      "B28 {\n  $r3 \u003d Boolean FALSE\u003e\n  return\n}",
      "B29 {\n  return\n}",
      "B30 {\n  $r34 \u003d r0.deserialize(r1, r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B8",
      "B2 --\u003e B30",
      "B2 --\u003e B16",
      "B2 --\u003e B19",
      "B2 --\u003e B24",
      "B2 --\u003e B27",
      "B2 --\u003e B28",
      "B2 --\u003e B29",
      "B2 --\u003e B15",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e [EXIT]",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e [EXIT]",
      "B23 --\u003e [EXIT]",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e [EXIT]",
      "B26 --\u003e [EXIT]",
      "B27 --\u003e [EXIT]",
      "B28 --\u003e [EXIT]",
      "B29 --\u003e [EXIT]",
      "B30 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "UntypedObjectDeserializer#mapArray(...3)",
        "body": "{\r\n    // we start by pointing to START_ARRAY. Also, no real merging; array/Collection\r\n    // just appends always\r\n    while (p.nextToken() !\u003d JsonToken.END_ARRAY) {\r\n        result.add(deserialize(p, ctxt));\r\n    }\r\n    return result;\r\n}"
      },
      {
        "name": "UntypedObjectDeserializer#_coerceIntegral(...2)",
        "body": "(source not found)"
      },
      {
        "name": "UntypedObjectDeserializer#mapArray(...2)",
        "body": "{\r\n    // Minor optimization to handle small lists (default size for ArrayList is 10)\r\n    if (p.nextToken() \u003d\u003d JsonToken.END_ARRAY) {\r\n        return new ArrayList\u003cObject\u003e(2);\r\n    }\r\n    Object value \u003d deserialize(p, ctxt);\r\n    if (p.nextToken() \u003d\u003d JsonToken.END_ARRAY) {\r\n        ArrayList\u003cObject\u003e l \u003d new ArrayList\u003cObject\u003e(2);\r\n        l.add(value);\r\n        return l;\r\n    }\r\n    Object value2 \u003d deserialize(p, ctxt);\r\n    if (p.nextToken() \u003d\u003d JsonToken.END_ARRAY) {\r\n        ArrayList\u003cObject\u003e l \u003d new ArrayList\u003cObject\u003e(2);\r\n        l.add(value);\r\n        l.add(value2);\r\n        return l;\r\n    }\r\n    ObjectBuffer buffer \u003d ctxt.leaseObjectBuffer();\r\n    Object[] values \u003d buffer.resetAndStart();\r\n    int ptr \u003d 0;\r\n    values[ptr++] \u003d value;\r\n    values[ptr++] \u003d value2;\r\n    int totalSize \u003d ptr;\r\n    do {\r\n        value \u003d deserialize(p, ctxt);\r\n        ++totalSize;\r\n        if (ptr \u003e\u003d values.length) {\r\n            values \u003d buffer.appendCompletedChunk(values);\r\n            ptr \u003d 0;\r\n        }\r\n        values[ptr++] \u003d value;\r\n    } while (p.nextToken() !\u003d JsonToken.END_ARRAY);\r\n    // let\u0027s create full array then\r\n    ArrayList\u003cObject\u003e result \u003d new ArrayList\u003cObject\u003e(totalSize);\r\n    buffer.completeAndClearBuffer(values, ptr, result);\r\n    ctxt.returnObjectBuffer(buffer);\r\n    return result;\r\n}"
      },
      {
        "name": "UntypedObjectDeserializer#mapObject(...3)",
        "body": "{\r\n    JsonToken t \u003d p.currentToken();\r\n    if (t \u003d\u003d JsonToken.START_OBJECT) {\r\n        t \u003d p.nextToken();\r\n    }\r\n    if (t \u003d\u003d JsonToken.END_OBJECT) {\r\n        return m;\r\n    }\r\n    // NOTE: we are guaranteed to point to FIELD_NAME\r\n    String key \u003d p.currentName();\r\n    do {\r\n        p.nextToken();\r\n        // and possibly recursive merge here\r\n        Object old \u003d m.get(key);\r\n        Object newV;\r\n        if (old !\u003d null) {\r\n            newV \u003d deserialize(p, ctxt, old);\r\n        } else {\r\n            newV \u003d deserialize(p, ctxt);\r\n        }\r\n        if (newV !\u003d old) {\r\n            m.put(key, newV);\r\n        }\r\n    } while ((key \u003d p.nextFieldName()) !\u003d null);\r\n    return m;\r\n}"
      },
      {
        "name": "UntypedObjectDeserializer#mapArrayToArray(...2)",
        "body": "{\r\n    // Minor optimization to handle small lists (default size for ArrayList is 10)\r\n    if (p.nextToken() \u003d\u003d JsonToken.END_ARRAY) {\r\n        return NO_OBJECTS;\r\n    }\r\n    ObjectBuffer buffer \u003d ctxt.leaseObjectBuffer();\r\n    Object[] values \u003d buffer.resetAndStart();\r\n    int ptr \u003d 0;\r\n    do {\r\n        Object value \u003d deserialize(p, ctxt);\r\n        if (ptr \u003e\u003d values.length) {\r\n            values \u003d buffer.appendCompletedChunk(values);\r\n            ptr \u003d 0;\r\n        }\r\n        values[ptr++] \u003d value;\r\n    } while (p.nextToken() !\u003d JsonToken.END_ARRAY);\r\n    final Object[] result \u003d buffer.completeAndClearBuffer(values, ptr);\r\n    ctxt.returnObjectBuffer(buffer);\r\n    return result;\r\n}"
      },
      {
        "name": "UntypedObjectDeserializer#mapObject(...2)",
        "body": "{\r\n    String key1;\r\n    JsonToken t \u003d p.currentToken();\r\n    if (t \u003d\u003d JsonToken.START_OBJECT) {\r\n        key1 \u003d p.nextFieldName();\r\n    } else if (t \u003d\u003d JsonToken.FIELD_NAME) {\r\n        key1 \u003d p.currentName();\r\n    } else {\r\n        if (t !\u003d JsonToken.END_OBJECT) {\r\n            return ctxt.handleUnexpectedToken(handledType(), p);\r\n        }\r\n        key1 \u003d null;\r\n    }\r\n    if (key1 \u003d\u003d null) {\r\n        // empty map might work; but caller may want to modify... so better just give small modifiable\r\n        return new LinkedHashMap\u003c\u003e(2);\r\n    }\r\n    key1 \u003d _customDeserializeKey(key1, ctxt);\r\n    // minor optimization; let\u0027s handle 1 and 2 entry cases separately\r\n    // 24-Mar-2015, tatu: Ideally, could use one of \u0027nextXxx()\u0027 methods, but for\r\n    //   that we\u0027d need new method(s) in JsonDeserializer. So not quite yet.\r\n    p.nextToken();\r\n    Object value1 \u003d deserialize(p, ctxt);\r\n    String key2 \u003d p.nextFieldName();\r\n    if (key2 \u003d\u003d null) {\r\n        // has to be END_OBJECT, then\r\n        // single entry; but we want modifiable\r\n        LinkedHashMap\u003cString, Object\u003e result \u003d new LinkedHashMap\u003c\u003e(2);\r\n        result.put(key1, value1);\r\n        return result;\r\n    }\r\n    key2 \u003d _customDeserializeKey(key2, ctxt);\r\n    p.nextToken();\r\n    Object value2 \u003d deserialize(p, ctxt);\r\n    String key \u003d p.nextFieldName();\r\n    if (key \u003d\u003d null) {\r\n        LinkedHashMap\u003cString, Object\u003e result \u003d new LinkedHashMap\u003c\u003e(4);\r\n        result.put(key1, value1);\r\n        if (result.put(key2, value2) !\u003d null) {\r\n            // 22-May-2020, tatu: [databind#2733] may need extra handling\r\n            return _mapObjectWithDups(p, ctxt, result, key1, value1, value2, key);\r\n        }\r\n        return result;\r\n    }\r\n    key \u003d _customDeserializeKey(key, ctxt);\r\n    // And then the general case; default map size is 16\r\n    LinkedHashMap\u003cString, Object\u003e result \u003d new LinkedHashMap\u003c\u003e();\r\n    result.put(key1, value1);\r\n    if (result.put(key2, value2) !\u003d null) {\r\n        // 22-May-2020, tatu: [databind#2733] may need extra handling\r\n        return _mapObjectWithDups(p, ctxt, result, key1, value1, value2, key);\r\n    }\r\n    do {\r\n        p.nextToken();\r\n        final Object newValue \u003d deserialize(p, ctxt);\r\n        final Object oldValue \u003d result.put(key, newValue);\r\n        if (oldValue !\u003d null) {\r\n            return _mapObjectWithDups(p, ctxt, result, key, oldValue, newValue, _customDeserializeNullableKey(p.nextFieldName(), ctxt));\r\n        }\r\n    } while ((key \u003d _customDeserializeNullableKey(p.nextFieldName(), ctxt)) !\u003d null);\r\n    return result;\r\n}"
      },
      {
        "name": "UntypedObjectDeserializer#_deserializeFP(...2)",
        "body": "{\r\n    JsonParser.NumberTypeFP nt \u003d p.getNumberTypeFP();\r\n    if (nt \u003d\u003d JsonParser.NumberTypeFP.BIG_DECIMAL) {\r\n        return p.getDecimalValue();\r\n    }\r\n    if (!p.isNaN()) {\r\n        if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\r\n            return p.getDecimalValue();\r\n        }\r\n    }\r\n    if (nt \u003d\u003d JsonParser.NumberTypeFP.FLOAT32) {\r\n        return p.getFloatValue();\r\n    }\r\n    return p.getDoubleValue();\r\n}"
      },
      {
        "name": "UntypedObjectDeserializer#deserialize(...2)",
        "body": "{\r\n    switch(p.currentTokenId()) {\r\n        case JsonTokenId.ID_START_OBJECT:\r\n        case JsonTokenId.ID_FIELD_NAME:\r\n        // 28-Oct-2015, tatu: [databind#989] We may also be given END_OBJECT (similar to FIELD_NAME),\r\n        //    if caller has advanced to the first token of Object, but for empty Object\r\n        case JsonTokenId.ID_END_OBJECT:\r\n            if (_mapDeserializer !\u003d null) {\r\n                return _mapDeserializer.deserialize(p, ctxt);\r\n            }\r\n            return mapObject(p, ctxt);\r\n        case JsonTokenId.ID_START_ARRAY:\r\n            if (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY)) {\r\n                return mapArrayToArray(p, ctxt);\r\n            }\r\n            if (_listDeserializer !\u003d null) {\r\n                return _listDeserializer.deserialize(p, ctxt);\r\n            }\r\n            return mapArray(p, ctxt);\r\n        case JsonTokenId.ID_EMBEDDED_OBJECT:\r\n            return p.getEmbeddedObject();\r\n        case JsonTokenId.ID_STRING:\r\n            if (_stringDeserializer !\u003d null) {\r\n                return _stringDeserializer.deserialize(p, ctxt);\r\n            }\r\n            return p.getText();\r\n        case JsonTokenId.ID_NUMBER_INT:\r\n            if (_numberDeserializer !\u003d null) {\r\n                return _numberDeserializer.deserialize(p, ctxt);\r\n            }\r\n            // Caller may want to get all integral values returned as {@link java.math.BigInteger},\r\n            // or {@link java.lang.Long} for consistency\r\n            if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS)) {\r\n                return _coerceIntegral(p, ctxt);\r\n            }\r\n            // should be optimal, whatever it is\r\n            return p.getNumberValue();\r\n        case JsonTokenId.ID_NUMBER_FLOAT:\r\n            if (_numberDeserializer !\u003d null) {\r\n                return _numberDeserializer.deserialize(p, ctxt);\r\n            }\r\n            return _deserializeFP(p, ctxt);\r\n        case JsonTokenId.ID_TRUE:\r\n            return Boolean.TRUE;\r\n        case JsonTokenId.ID_FALSE:\r\n            return Boolean.FALSE;\r\n        case // 08-Nov-2016, tatu: yes, occurs\r\n        JsonTokenId.ID_NULL:\r\n            return null;\r\n        //        case JsonTokenId.ID_END_ARRAY: // invalid\r\n        default:\r\n    }\r\n    return ctxt.handleUnexpectedToken(Object.class, p);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.deser.UnresolvedForwardReference",
    "methodName": "getMessage",
    "signature": "java.lang.String getMessage()",
    "visibility": "public",
    "body": "{\r\n    String msg \u003d super.getMessage();\r\n    if (_unresolvedIds \u003d\u003d null) {\r\n        return msg;\r\n    }\r\n    StringBuilder sb \u003d new StringBuilder(msg);\r\n    Iterator\u003cUnresolvedId\u003e iterator \u003d _unresolvedIds.iterator();\r\n    while (iterator.hasNext()) {\r\n        UnresolvedId unresolvedId \u003d iterator.next();\r\n        sb.append(unresolvedId.toString());\r\n        if (iterator.hasNext()) {\r\n            sb.append(\", \");\r\n        }\r\n    }\r\n    sb.append(\u0027.\u0027);\r\n    return sb.toString();\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B2",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B7",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  UnresolvedForwardReference\n  r1 \u003d r0.getMessage()\n  $r2 \u003d List _unresolvedIds\u003e\n  if ($r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d StringBuilder\n  new StringBuilder(r1)\n  $r4 \u003d List _unresolvedIds\u003e\n  r5 \u003d $r4.iterator()\n}",
      "B3 {\n  $z0 \u003d r5.hasNext()\n  if ($z0 \u003d\u003d false) goto B4 else B7\n}",
      "B4 {\n  $r7 \u003d r5.next()\n  r8 \u003d UnresolvedId) $r7\n  $r9 \u003d r8.toString()\n  $r3.append($r9)\n  $z1 \u003d r5.hasNext()\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r3.append(\", \")\n}",
      "B6 {\n  goto B3\n}",
      "B7 {\n  $r3.append(46)\n  $r6 \u003d $r3.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig \u0027with\u0027(com.fasterxml.jackson.databind.jsontype.SubtypeResolver)",
    "visibility": "public",
    "body": "{\r\n    return (_subtypeResolver \u003d\u003d str) ? this : new DeserializationConfig(this, str);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  SubtypeResolver\n  $r2 \u003d SubtypeResolver _subtypeResolver\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r3 \u003d DeserializationConfig\n  new DeserializationConfig(r0, r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "withRootName",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig withRootName(com.fasterxml.jackson.databind.PropertyName)",
    "visibility": "public",
    "body": "{\r\n    if (rootName \u003d\u003d null) {\r\n        if (_rootName \u003d\u003d null) {\r\n            return this;\r\n        }\r\n    } else if (rootName.equals(_rootName)) {\r\n        return this;\r\n    }\r\n    return new DeserializationConfig(this, rootName);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B3",
      "B1 : If($r4 !\u003d null) → B2 | else → B5",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  PropertyName\n  if (r0 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r4 \u003d PropertyName _rootName\u003e\n  if ($r4 !\u003d null) goto B2 else B5\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r2 \u003d PropertyName _rootName\u003e\n  $z0 \u003d r0.equals($r2)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r3 \u003d DeserializationConfig\n  new DeserializationConfig(r1, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "withView",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig withView(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return (_view \u003d\u003d view) ? this : new DeserializationConfig(this, view);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  Class\n  $r2 \u003d Class _view\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r3 \u003d DeserializationConfig\n  new DeserializationConfig(r0, r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig \u0027with\u0027(com.fasterxml.jackson.databind.cfg.ContextAttributes)",
    "visibility": "public",
    "body": "{\r\n    return (attrs \u003d\u003d _attributes) ? this : new DeserializationConfig(this, attrs);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  ContextAttributes\n  $r2 \u003d ContextAttributes _attributes\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r3 \u003d DeserializationConfig\n  new DeserializationConfig(r1, r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig \u0027with\u0027(com.fasterxml.jackson.databind.DeserializationFeature)",
    "visibility": "public",
    "body": "{\r\n    int newDeserFeatures \u003d (_deserFeatures | feature.getMask());\r\n    return (newDeserFeatures \u003d\u003d _deserFeatures) ? this : new DeserializationConfig(this, _mapperFeatures, newDeserFeatures, _parserFeatures, _parserFeaturesToChange, _formatReadFeatures, _formatReadFeaturesToChange);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i2 !\u003d $i3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  DeserializationFeature\n  $i0 \u003d DeserializationConfig: int _deserFeatures\u003e\n  $i1 \u003d r1.getMask()\n  i2 \u003d $i0 | $i1\n  $i3 \u003d DeserializationConfig: int _deserFeatures\u003e\n  if (i2 !\u003d $i3) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d DeserializationConfig\n  $l8 \u003d DeserializationConfig: long _mapperFeatures\u003e\n  $i7 \u003d DeserializationConfig: int _parserFeatures\u003e\n  $i6 \u003d DeserializationConfig: int _parserFeaturesToChange\u003e\n  $i5 \u003d DeserializationConfig: int _formatReadFeatures\u003e\n  $i4 \u003d DeserializationConfig: int _formatReadFeaturesToChange\u003e\n  new DeserializationConfig(r0, $l8, i2, $i7, $i6, $i5, $i4)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig \u0027with\u0027(com.fasterxml.jackson.databind.DeserializationFeature,com.fasterxml.jackson.databind.DeserializationFeature[])",
    "visibility": "public",
    "body": "{\r\n    int newDeserFeatures \u003d _deserFeatures | first.getMask();\r\n    for (DeserializationFeature f : features) {\r\n        newDeserFeatures |\u003d f.getMask();\r\n    }\r\n    return (newDeserFeatures \u003d\u003d _deserFeatures) ? this : new DeserializationConfig(this, _mapperFeatures, newDeserFeatures, _parserFeatures, _parserFeaturesToChange, _formatReadFeatures, _formatReadFeaturesToChange);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i11 \u003e\u003d i2) → B2 | else → B3",
      "B3 : If(i10 !\u003d $i3) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  DeserializationFeature\n  DeserializationFeature[]\n  $i0 \u003d DeserializationConfig: int _deserFeatures\u003e\n  $i1 \u003d r1.getMask()\n  i10 \u003d $i0 | $i1\n  i2 \u003d lengthof r2\n  i11 \u003d 0\n}",
      "B1 {\n  if (i11 \u003e\u003d i2) goto B2 else B3\n}",
      "B2 {\n  r3 \u003d r2[i11]\n  $i9 \u003d r3.getMask()\n  i10 \u003d i10 | $i9\n  i11 \u003d i11 + 1\n  goto B1\n}",
      "B3 {\n  $i3 \u003d DeserializationConfig: int _deserFeatures\u003e\n  if (i10 !\u003d $i3) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d r0\n  goto B6\n}",
      "B5 {\n  $r4 \u003d DeserializationConfig\n  $l8 \u003d DeserializationConfig: long _mapperFeatures\u003e\n  $i7 \u003d DeserializationConfig: int _parserFeatures\u003e\n  $i6 \u003d DeserializationConfig: int _parserFeaturesToChange\u003e\n  $i5 \u003d DeserializationConfig: int _formatReadFeatures\u003e\n  $i4 \u003d DeserializationConfig: int _formatReadFeaturesToChange\u003e\n  new DeserializationConfig(r0, $l8, i10, $i7, $i6, $i5, $i4)\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "withFeatures",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig withFeatures(com.fasterxml.jackson.databind.DeserializationFeature[])",
    "visibility": "public",
    "body": "{\r\n    int newDeserFeatures \u003d _deserFeatures;\r\n    for (DeserializationFeature f : features) {\r\n        newDeserFeatures |\u003d f.getMask();\r\n    }\r\n    return (newDeserFeatures \u003d\u003d _deserFeatures) ? this : new DeserializationConfig(this, _mapperFeatures, newDeserFeatures, _parserFeatures, _parserFeaturesToChange, _formatReadFeatures, _formatReadFeaturesToChange);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i9 \u003e\u003d i0) → B2 | else → B3",
      "B3 : If(i8 !\u003d $i1) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  DeserializationFeature[]\n  i8 \u003d DeserializationConfig: int _deserFeatures\u003e\n  i0 \u003d lengthof r1\n  i9 \u003d 0\n}",
      "B1 {\n  if (i9 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r1[i9]\n  $i7 \u003d r2.getMask()\n  i8 \u003d i8 | $i7\n  i9 \u003d i9 + 1\n  goto B1\n}",
      "B3 {\n  $i1 \u003d DeserializationConfig: int _deserFeatures\u003e\n  if (i8 !\u003d $i1) goto B4 else B5\n}",
      "B4 {\n  $r3 \u003d r0\n  goto B6\n}",
      "B5 {\n  $r3 \u003d DeserializationConfig\n  $l6 \u003d DeserializationConfig: long _mapperFeatures\u003e\n  $i5 \u003d DeserializationConfig: int _parserFeatures\u003e\n  $i4 \u003d DeserializationConfig: int _parserFeaturesToChange\u003e\n  $i3 \u003d DeserializationConfig: int _formatReadFeatures\u003e\n  $i2 \u003d DeserializationConfig: int _formatReadFeaturesToChange\u003e\n  new DeserializationConfig(r0, $l6, i8, $i5, $i4, $i3, $i2)\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "without",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig without(com.fasterxml.jackson.databind.DeserializationFeature)",
    "visibility": "public",
    "body": "{\r\n    int newDeserFeatures \u003d _deserFeatures \u0026 ~feature.getMask();\r\n    return (newDeserFeatures \u003d\u003d _deserFeatures) ? this : new DeserializationConfig(this, _mapperFeatures, newDeserFeatures, _parserFeatures, _parserFeaturesToChange, _formatReadFeatures, _formatReadFeaturesToChange);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i3 !\u003d $i4) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  DeserializationFeature\n  $i0 \u003d DeserializationConfig: int _deserFeatures\u003e\n  $i1 \u003d r1.getMask()\n  $i11 \u003d (int) -1\n  $i2 \u003d $i1 ^ $i11\n  i3 \u003d $i0 \u0026 $i2\n  $i4 \u003d DeserializationConfig: int _deserFeatures\u003e\n  if (i3 !\u003d $i4) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r3 \u003d DeserializationConfig\n  $r2 \u003d $r3\n  $l9 \u003d DeserializationConfig: long _mapperFeatures\u003e\n  $i8 \u003d DeserializationConfig: int _parserFeatures\u003e\n  $i7 \u003d DeserializationConfig: int _parserFeaturesToChange\u003e\n  $i6 \u003d DeserializationConfig: int _formatReadFeatures\u003e\n  $i5 \u003d DeserializationConfig: int _formatReadFeaturesToChange\u003e\n  new DeserializationConfig(r0, $l9, i3, $i8, $i7, $i6, $i5)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "without",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig without(com.fasterxml.jackson.databind.DeserializationFeature,com.fasterxml.jackson.databind.DeserializationFeature[])",
    "visibility": "public",
    "body": "{\r\n    int newDeserFeatures \u003d _deserFeatures \u0026 ~first.getMask();\r\n    for (DeserializationFeature f : features) {\r\n        newDeserFeatures \u0026\u003d ~f.getMask();\r\n    }\r\n    return (newDeserFeatures \u003d\u003d _deserFeatures) ? this : new DeserializationConfig(this, _mapperFeatures, newDeserFeatures, _parserFeatures, _parserFeaturesToChange, _formatReadFeatures, _formatReadFeaturesToChange);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i13 \u003e\u003d i3) → B2 | else → B3",
      "B3 : If(i12 !\u003d $i4) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  DeserializationFeature\n  DeserializationFeature[]\n  $i0 \u003d DeserializationConfig: int _deserFeatures\u003e\n  $i1 \u003d r1.getMask()\n  $i15 \u003d (int) -1\n  $i2 \u003d $i1 ^ $i15\n  i12 \u003d $i0 \u0026 $i2\n  i3 \u003d lengthof r2\n  i13 \u003d 0\n}",
      "B1 {\n  if (i13 \u003e\u003d i3) goto B2 else B3\n}",
      "B2 {\n  r3 \u003d r2[i13]\n  $i10 \u003d r3.getMask()\n  $i17 \u003d (int) -1\n  $i11 \u003d $i10 ^ $i17\n  i12 \u003d i12 \u0026 $i11\n  i13 \u003d i13 + 1\n  goto B1\n}",
      "B3 {\n  $i4 \u003d DeserializationConfig: int _deserFeatures\u003e\n  if (i12 !\u003d $i4) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d r0\n  goto B6\n}",
      "B5 {\n  $r5 \u003d DeserializationConfig\n  $r4 \u003d $r5\n  $l9 \u003d DeserializationConfig: long _mapperFeatures\u003e\n  $i8 \u003d DeserializationConfig: int _parserFeatures\u003e\n  $i7 \u003d DeserializationConfig: int _parserFeaturesToChange\u003e\n  $i6 \u003d DeserializationConfig: int _formatReadFeatures\u003e\n  $i5 \u003d DeserializationConfig: int _formatReadFeaturesToChange\u003e\n  new DeserializationConfig(r0, $l9, i12, $i8, $i7, $i6, $i5)\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "withoutFeatures",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig withoutFeatures(com.fasterxml.jackson.databind.DeserializationFeature[])",
    "visibility": "public",
    "body": "{\r\n    int newDeserFeatures \u003d _deserFeatures;\r\n    for (DeserializationFeature f : features) {\r\n        newDeserFeatures \u0026\u003d ~f.getMask();\r\n    }\r\n    return (newDeserFeatures \u003d\u003d _deserFeatures) ? this : new DeserializationConfig(this, _mapperFeatures, newDeserFeatures, _parserFeatures, _parserFeaturesToChange, _formatReadFeatures, _formatReadFeaturesToChange);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i10 \u003e\u003d i0) → B2 | else → B3",
      "B3 : If(i9 !\u003d $i1) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  DeserializationFeature[]\n  i9 \u003d DeserializationConfig: int _deserFeatures\u003e\n  i0 \u003d lengthof r1\n  i10 \u003d 0\n}",
      "B1 {\n  if (i10 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r1[i10]\n  $i7 \u003d r2.getMask()\n  $i12 \u003d (int) -1\n  $i8 \u003d $i7 ^ $i12\n  i9 \u003d i9 \u0026 $i8\n  i10 \u003d i10 + 1\n  goto B1\n}",
      "B3 {\n  $i1 \u003d DeserializationConfig: int _deserFeatures\u003e\n  if (i9 !\u003d $i1) goto B4 else B5\n}",
      "B4 {\n  $r3 \u003d r0\n  goto B6\n}",
      "B5 {\n  $r4 \u003d DeserializationConfig\n  $r3 \u003d $r4\n  $l6 \u003d DeserializationConfig: long _mapperFeatures\u003e\n  $i5 \u003d DeserializationConfig: int _parserFeatures\u003e\n  $i4 \u003d DeserializationConfig: int _parserFeaturesToChange\u003e\n  $i3 \u003d DeserializationConfig: int _formatReadFeatures\u003e\n  $i2 \u003d DeserializationConfig: int _formatReadFeaturesToChange\u003e\n  new DeserializationConfig(r0, $l6, i9, $i5, $i4, $i3, $i2)\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig \u0027with\u0027(com.fasterxml.jackson.core.JsonParser$Feature)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i6 !\u003d i2) → B1 | else → B3",
      "B1 : If($i11 !\u003d i5) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  JsonParser$Feature\n  $i0 \u003d DeserializationConfig: int _parserFeatures\u003e\n  $i1 \u003d r1.getMask()\n  i2 \u003d $i0 | $i1\n  $i3 \u003d DeserializationConfig: int _parserFeaturesToChange\u003e\n  $i4 \u003d r1.getMask()\n  i5 \u003d $i3 | $i4\n  $i6 \u003d DeserializationConfig: int _parserFeatures\u003e\n  if ($i6 !\u003d i2) goto B1 else B3\n}",
      "B1 {\n  $i11 \u003d DeserializationConfig: int _parserFeaturesToChange\u003e\n  if ($i11 !\u003d i5) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r2 \u003d DeserializationConfig\n  $l10 \u003d DeserializationConfig: long _mapperFeatures\u003e\n  $i9 \u003d DeserializationConfig: int _deserFeatures\u003e\n  $i8 \u003d DeserializationConfig: int _formatReadFeatures\u003e\n  $i7 \u003d DeserializationConfig: int _formatReadFeaturesToChange\u003e\n  new DeserializationConfig(r0, $l10, $i9, i2, i5, $i8, $i7)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "withFeatures",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig withFeatures(com.fasterxml.jackson.core.JsonParser$Feature[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B1 : If(i10 \u003e\u003d i0) → B2 | else → B3",
      "B3 : If($i1 !\u003d i8) → B4 | else → B6",
      "B4 : If($i6 !\u003d i9) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  JsonParser$Feature[]\n  i8 \u003d DeserializationConfig: int _parserFeatures\u003e\n  i9 \u003d DeserializationConfig: int _parserFeaturesToChange\u003e\n  i0 \u003d lengthof r1\n  i10 \u003d 0\n}",
      "B1 {\n  if (i10 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r1[i10]\n  i7 \u003d r2.getMask()\n  i8 \u003d i8 | i7\n  i9 \u003d i9 | i7\n  i10 \u003d i10 + 1\n  goto B1\n}",
      "B3 {\n  $i1 \u003d DeserializationConfig: int _parserFeatures\u003e\n  if ($i1 !\u003d i8) goto B4 else B6\n}",
      "B4 {\n  $i6 \u003d DeserializationConfig: int _parserFeaturesToChange\u003e\n  if ($i6 !\u003d i9) goto B5 else B6\n}",
      "B5 {\n  $r3 \u003d r0\n  goto B7\n}",
      "B6 {\n  $r3 \u003d DeserializationConfig\n  $l5 \u003d DeserializationConfig: long _mapperFeatures\u003e\n  $i4 \u003d DeserializationConfig: int _deserFeatures\u003e\n  $i3 \u003d DeserializationConfig: int _formatReadFeatures\u003e\n  $i2 \u003d DeserializationConfig: int _formatReadFeaturesToChange\u003e\n  new DeserializationConfig(r0, $l5, $i4, i8, i9, $i3, $i2)\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "without",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig without(com.fasterxml.jackson.core.JsonParser$Feature)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i7 !\u003d i3) → B1 | else → B3",
      "B1 : If($i12 !\u003d i6) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  JsonParser$Feature\n  $i0 \u003d DeserializationConfig: int _parserFeatures\u003e\n  $i1 \u003d r1.getMask()\n  $i14 \u003d (int) -1\n  $i2 \u003d $i1 ^ $i14\n  i3 \u003d $i0 \u0026 $i2\n  $i4 \u003d DeserializationConfig: int _parserFeaturesToChange\u003e\n  $i5 \u003d r1.getMask()\n  i6 \u003d $i4 | $i5\n  $i7 \u003d DeserializationConfig: int _parserFeatures\u003e\n  if ($i7 !\u003d i3) goto B1 else B3\n}",
      "B1 {\n  $i12 \u003d DeserializationConfig: int _parserFeaturesToChange\u003e\n  if ($i12 !\u003d i6) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r3 \u003d DeserializationConfig\n  $r2 \u003d $r3\n  $l11 \u003d DeserializationConfig: long _mapperFeatures\u003e\n  $i10 \u003d DeserializationConfig: int _deserFeatures\u003e\n  $i9 \u003d DeserializationConfig: int _formatReadFeatures\u003e\n  $i8 \u003d DeserializationConfig: int _formatReadFeaturesToChange\u003e\n  new DeserializationConfig(r0, $l11, $i10, i3, i6, $i9, $i8)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "withoutFeatures",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig withoutFeatures(com.fasterxml.jackson.core.JsonParser$Feature[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B1 : If(i11 \u003e\u003d i0) → B2 | else → B3",
      "B3 : If($i1 !\u003d i9) → B4 | else → B6",
      "B4 : If($i6 !\u003d i10) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  JsonParser$Feature[]\n  i9 \u003d DeserializationConfig: int _parserFeatures\u003e\n  i10 \u003d DeserializationConfig: int _parserFeaturesToChange\u003e\n  i0 \u003d lengthof r1\n  i11 \u003d 0\n}",
      "B1 {\n  if (i11 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r1[i11]\n  i7 \u003d r2.getMask()\n  $i13 \u003d (int) -1\n  $i8 \u003d i7 ^ $i13\n  i9 \u003d i9 \u0026 $i8\n  i10 \u003d i10 | i7\n  i11 \u003d i11 + 1\n  goto B1\n}",
      "B3 {\n  $i1 \u003d DeserializationConfig: int _parserFeatures\u003e\n  if ($i1 !\u003d i9) goto B4 else B6\n}",
      "B4 {\n  $i6 \u003d DeserializationConfig: int _parserFeaturesToChange\u003e\n  if ($i6 !\u003d i10) goto B5 else B6\n}",
      "B5 {\n  $r3 \u003d r0\n  goto B7\n}",
      "B6 {\n  $r4 \u003d DeserializationConfig\n  $r3 \u003d $r4\n  $l5 \u003d DeserializationConfig: long _mapperFeatures\u003e\n  $i4 \u003d DeserializationConfig: int _deserFeatures\u003e\n  $i3 \u003d DeserializationConfig: int _formatReadFeatures\u003e\n  $i2 \u003d DeserializationConfig: int _formatReadFeaturesToChange\u003e\n  new DeserializationConfig(r0, $l5, $i4, i9, i10, $i3, $i2)\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig \u0027with\u0027(com.fasterxml.jackson.core.FormatFeature)",
    "visibility": "public",
    "body": "{\r\n    // 08-Oct-2018, tatu: Alas, complexity due to newly (2.10) refactored json-features:\r\n    if (feature instanceof JsonReadFeature) {\r\n        return _withJsonReadFeatures(feature);\r\n    }\r\n    int newSet \u003d _formatReadFeatures | feature.getMask();\r\n    int newMask \u003d _formatReadFeaturesToChange | feature.getMask();\r\n    return ((_formatReadFeatures \u003d\u003d newSet) \u0026\u0026 (_formatReadFeaturesToChange \u003d\u003d newMask)) ? this : new DeserializationConfig(this, _mapperFeatures, _deserFeatures, _parserFeatures, _parserFeaturesToChange, newSet, newMask);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($i6 !\u003d i2) → B3 | else → B5",
      "B3 : If($i11 !\u003d i5) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  FormatFeature\n  $z0 \u003d JsonReadFeature\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d FormatFeature)[1]\n  $r2[0] \u003d r0\n  $r3 \u003d r1._withJsonReadFeatures($r2)\n  return\n}",
      "B2 {\n  $i0 \u003d DeserializationConfig: int _formatReadFeatures\u003e\n  $i1 \u003d r0.getMask()\n  i2 \u003d $i0 | $i1\n  $i3 \u003d DeserializationConfig: int _formatReadFeaturesToChange\u003e\n  $i4 \u003d r0.getMask()\n  i5 \u003d $i3 | $i4\n  $i6 \u003d DeserializationConfig: int _formatReadFeatures\u003e\n  if ($i6 !\u003d i2) goto B3 else B5\n}",
      "B3 {\n  $i11 \u003d DeserializationConfig: int _formatReadFeaturesToChange\u003e\n  if ($i11 !\u003d i5) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d r1\n  goto B6\n}",
      "B5 {\n  $r4 \u003d DeserializationConfig\n  $l10 \u003d DeserializationConfig: long _mapperFeatures\u003e\n  $i9 \u003d DeserializationConfig: int _deserFeatures\u003e\n  $i8 \u003d DeserializationConfig: int _parserFeatures\u003e\n  $i7 \u003d DeserializationConfig: int _parserFeaturesToChange\u003e\n  new DeserializationConfig(r1, $l10, $i9, $i8, $i7, i2, i5)\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DeserializationConfig#_withJsonReadFeatures(...1)",
        "body": "{\r\n    int parserSet \u003d _parserFeatures;\r\n    int parserMask \u003d _parserFeaturesToChange;\r\n    int newSet \u003d _formatReadFeatures;\r\n    int newMask \u003d _formatReadFeaturesToChange;\r\n    for (FormatFeature f : features) {\r\n        final int mask \u003d f.getMask();\r\n        newSet |\u003d mask;\r\n        newMask |\u003d mask;\r\n        if (f instanceof JsonReadFeature) {\r\n            JsonParser.Feature oldF \u003d ((JsonReadFeature) f).mappedFeature();\r\n            if (oldF !\u003d null) {\r\n                final int pmask \u003d oldF.getMask();\r\n                parserSet |\u003d pmask;\r\n                parserMask |\u003d pmask;\r\n            }\r\n        }\r\n    }\r\n    return ((_formatReadFeatures \u003d\u003d newSet) \u0026\u0026 (_formatReadFeaturesToChange \u003d\u003d newMask) \u0026\u0026 (_parserFeatures \u003d\u003d parserSet) \u0026\u0026 (_parserFeaturesToChange \u003d\u003d parserMask)) ? this : new DeserializationConfig(this, _mapperFeatures, _deserFeatures, parserSet, parserMask, newSet, newMask);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "withFeatures",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig withFeatures(com.fasterxml.jackson.core.FormatFeature[])",
    "visibility": "public",
    "body": "{\r\n    // 08-Oct-2018, tatu: Alas, complexity due to newly (2.10) refactored json-features:\r\n    if (features.length \u003e 0 \u0026\u0026 (features[0] instanceof JsonReadFeature)) {\r\n        return _withJsonReadFeatures(features);\r\n    }\r\n    int newSet \u003d _formatReadFeatures;\r\n    int newMask \u003d _formatReadFeaturesToChange;\r\n    for (FormatFeature f : features) {\r\n        int mask \u003d f.getMask();\r\n        newSet |\u003d mask;\r\n        newMask |\u003d mask;\r\n    }\r\n    return ((_formatReadFeatures \u003d\u003d newSet) \u0026\u0026 (_formatReadFeaturesToChange \u003d\u003d newMask)) ? this : new DeserializationConfig(this, _mapperFeatures, _deserFeatures, _parserFeatures, _parserFeaturesToChange, newSet, newMask);\r\n}",
    "nodes": 11,
    "edges": 14,
    "cc": 5,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i11 \u003e\u003d $i8) → B5 | else → B6",
      "B6 : If($i1 !\u003d i9) → B7 | else → B9",
      "B7 : If($i6 !\u003d i10) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  FormatFeature[]\n  $i0 \u003d lengthof r0\n  if ($i0 \u003c\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $r3 \u003d r0[0]\n  $z0 \u003d JsonReadFeature\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r1._withJsonReadFeatures(r0)\n  return\n}",
      "B3 {\n  i9 \u003d DeserializationConfig: int _formatReadFeatures\u003e\n  i10 \u003d DeserializationConfig: int _formatReadFeaturesToChange\u003e\n  $i8 \u003d lengthof r0\n  i11 \u003d 0\n}",
      "B4 {\n  if (i11 \u003e\u003d $i8) goto B5 else B6\n}",
      "B5 {\n  r2 \u003d r0[i11]\n  i7 \u003d r2.getMask()\n  i9 \u003d i9 | i7\n  i10 \u003d i10 | i7\n  i11 \u003d i11 + 1\n  goto B4\n}",
      "B6 {\n  $i1 \u003d DeserializationConfig: int _formatReadFeatures\u003e\n  if ($i1 !\u003d i9) goto B7 else B9\n}",
      "B7 {\n  $i6 \u003d DeserializationConfig: int _formatReadFeaturesToChange\u003e\n  if ($i6 !\u003d i10) goto B8 else B9\n}",
      "B8 {\n  $r5 \u003d r1\n  goto B10\n}",
      "B9 {\n  $r5 \u003d DeserializationConfig\n  $l5 \u003d DeserializationConfig: long _mapperFeatures\u003e\n  $i4 \u003d DeserializationConfig: int _deserFeatures\u003e\n  $i3 \u003d DeserializationConfig: int _parserFeatures\u003e\n  $i2 \u003d DeserializationConfig: int _parserFeaturesToChange\u003e\n  new DeserializationConfig(r1, $l5, $i4, $i3, $i2, i9, i10)\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DeserializationConfig#_withJsonReadFeatures(...1)",
        "body": "{\r\n    int parserSet \u003d _parserFeatures;\r\n    int parserMask \u003d _parserFeaturesToChange;\r\n    int newSet \u003d _formatReadFeatures;\r\n    int newMask \u003d _formatReadFeaturesToChange;\r\n    for (FormatFeature f : features) {\r\n        final int mask \u003d f.getMask();\r\n        newSet |\u003d mask;\r\n        newMask |\u003d mask;\r\n        if (f instanceof JsonReadFeature) {\r\n            JsonParser.Feature oldF \u003d ((JsonReadFeature) f).mappedFeature();\r\n            if (oldF !\u003d null) {\r\n                final int pmask \u003d oldF.getMask();\r\n                parserSet |\u003d pmask;\r\n                parserMask |\u003d pmask;\r\n            }\r\n        }\r\n    }\r\n    return ((_formatReadFeatures \u003d\u003d newSet) \u0026\u0026 (_formatReadFeaturesToChange \u003d\u003d newMask) \u0026\u0026 (_parserFeatures \u003d\u003d parserSet) \u0026\u0026 (_parserFeaturesToChange \u003d\u003d parserMask)) ? this : new DeserializationConfig(this, _mapperFeatures, _deserFeatures, parserSet, parserMask, newSet, newMask);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "without",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig without(com.fasterxml.jackson.core.FormatFeature)",
    "visibility": "public",
    "body": "{\r\n    // 08-Oct-2018, tatu: Alas, complexity due to newly (2.10) refactored json-features:\r\n    if (feature instanceof JsonReadFeature) {\r\n        return _withoutJsonReadFeatures(feature);\r\n    }\r\n    int newSet \u003d _formatReadFeatures \u0026 ~feature.getMask();\r\n    int newMask \u003d _formatReadFeaturesToChange | feature.getMask();\r\n    return ((_formatReadFeatures \u003d\u003d newSet) \u0026\u0026 (_formatReadFeaturesToChange \u003d\u003d newMask)) ? this : new DeserializationConfig(this, _mapperFeatures, _deserFeatures, _parserFeatures, _parserFeaturesToChange, newSet, newMask);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($i7 !\u003d i3) → B3 | else → B5",
      "B3 : If($i12 !\u003d i6) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  FormatFeature\n  $z0 \u003d JsonReadFeature\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d FormatFeature)[1]\n  $r2[0] \u003d r0\n  $r3 \u003d r1._withoutJsonReadFeatures($r2)\n  return\n}",
      "B2 {\n  $i0 \u003d DeserializationConfig: int _formatReadFeatures\u003e\n  $i1 \u003d r0.getMask()\n  $i14 \u003d (int) -1\n  $i2 \u003d $i1 ^ $i14\n  i3 \u003d $i0 \u0026 $i2\n  $i4 \u003d DeserializationConfig: int _formatReadFeaturesToChange\u003e\n  $i5 \u003d r0.getMask()\n  i6 \u003d $i4 | $i5\n  $i7 \u003d DeserializationConfig: int _formatReadFeatures\u003e\n  if ($i7 !\u003d i3) goto B3 else B5\n}",
      "B3 {\n  $i12 \u003d DeserializationConfig: int _formatReadFeaturesToChange\u003e\n  if ($i12 !\u003d i6) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d r1\n  goto B6\n}",
      "B5 {\n  $r5 \u003d DeserializationConfig\n  $r4 \u003d $r5\n  $l11 \u003d DeserializationConfig: long _mapperFeatures\u003e\n  $i10 \u003d DeserializationConfig: int _deserFeatures\u003e\n  $i9 \u003d DeserializationConfig: int _parserFeatures\u003e\n  $i8 \u003d DeserializationConfig: int _parserFeaturesToChange\u003e\n  new DeserializationConfig(r1, $l11, $i10, $i9, $i8, i3, i6)\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DeserializationConfig#_withoutJsonReadFeatures(...1)",
        "body": "{\r\n    int parserSet \u003d _parserFeatures;\r\n    int parserMask \u003d _parserFeaturesToChange;\r\n    int newSet \u003d _formatReadFeatures;\r\n    int newMask \u003d _formatReadFeaturesToChange;\r\n    for (FormatFeature f : features) {\r\n        final int mask \u003d f.getMask();\r\n        newSet \u0026\u003d ~mask;\r\n        newMask |\u003d mask;\r\n        if (f instanceof JsonReadFeature) {\r\n            JsonParser.Feature oldF \u003d ((JsonReadFeature) f).mappedFeature();\r\n            if (oldF !\u003d null) {\r\n                final int pmask \u003d oldF.getMask();\r\n                parserSet \u0026\u003d ~pmask;\r\n                parserMask |\u003d pmask;\r\n            }\r\n        }\r\n    }\r\n    return ((_formatReadFeatures \u003d\u003d newSet) \u0026\u0026 (_formatReadFeaturesToChange \u003d\u003d newMask) \u0026\u0026 (_parserFeatures \u003d\u003d parserSet) \u0026\u0026 (_parserFeaturesToChange \u003d\u003d parserMask)) ? this : new DeserializationConfig(this, _mapperFeatures, _deserFeatures, parserSet, parserMask, newSet, newMask);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "withoutFeatures",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig withoutFeatures(com.fasterxml.jackson.core.FormatFeature[])",
    "visibility": "public",
    "body": "{\r\n    // 08-Oct-2018, tatu: Alas, complexity due to newly (2.10) refactored json-features:\r\n    if (features.length \u003e 0 \u0026\u0026 (features[0] instanceof JsonReadFeature)) {\r\n        return _withoutJsonReadFeatures(features);\r\n    }\r\n    int newSet \u003d _formatReadFeatures;\r\n    int newMask \u003d _formatReadFeaturesToChange;\r\n    for (FormatFeature f : features) {\r\n        int mask \u003d f.getMask();\r\n        newSet \u0026\u003d ~mask;\r\n        newMask |\u003d mask;\r\n    }\r\n    return ((_formatReadFeatures \u003d\u003d newSet) \u0026\u0026 (_formatReadFeaturesToChange \u003d\u003d newMask)) ? this : new DeserializationConfig(this, _mapperFeatures, _deserFeatures, _parserFeatures, _parserFeaturesToChange, newSet, newMask);\r\n}",
    "nodes": 11,
    "edges": 14,
    "cc": 5,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i12 \u003e\u003d $i9) → B5 | else → B6",
      "B6 : If($i1 !\u003d i10) → B7 | else → B9",
      "B7 : If($i6 !\u003d i11) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  FormatFeature[]\n  $i0 \u003d lengthof r0\n  if ($i0 \u003c\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $r3 \u003d r0[0]\n  $z0 \u003d JsonReadFeature\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r1._withoutJsonReadFeatures(r0)\n  return\n}",
      "B3 {\n  i10 \u003d DeserializationConfig: int _formatReadFeatures\u003e\n  i11 \u003d DeserializationConfig: int _formatReadFeaturesToChange\u003e\n  $i9 \u003d lengthof r0\n  i12 \u003d 0\n}",
      "B4 {\n  if (i12 \u003e\u003d $i9) goto B5 else B6\n}",
      "B5 {\n  r2 \u003d r0[i12]\n  i7 \u003d r2.getMask()\n  $i14 \u003d (int) -1\n  $i8 \u003d i7 ^ $i14\n  i10 \u003d i10 \u0026 $i8\n  i11 \u003d i11 | i7\n  i12 \u003d i12 + 1\n  goto B4\n}",
      "B6 {\n  $i1 \u003d DeserializationConfig: int _formatReadFeatures\u003e\n  if ($i1 !\u003d i10) goto B7 else B9\n}",
      "B7 {\n  $i6 \u003d DeserializationConfig: int _formatReadFeaturesToChange\u003e\n  if ($i6 !\u003d i11) goto B8 else B9\n}",
      "B8 {\n  $r5 \u003d r1\n  goto B10\n}",
      "B9 {\n  $r6 \u003d DeserializationConfig\n  $r5 \u003d $r6\n  $l5 \u003d DeserializationConfig: long _mapperFeatures\u003e\n  $i4 \u003d DeserializationConfig: int _deserFeatures\u003e\n  $i3 \u003d DeserializationConfig: int _parserFeatures\u003e\n  $i2 \u003d DeserializationConfig: int _parserFeaturesToChange\u003e\n  new DeserializationConfig(r1, $l5, $i4, $i3, $i2, i10, i11)\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DeserializationConfig#_withoutJsonReadFeatures(...1)",
        "body": "{\r\n    int parserSet \u003d _parserFeatures;\r\n    int parserMask \u003d _parserFeaturesToChange;\r\n    int newSet \u003d _formatReadFeatures;\r\n    int newMask \u003d _formatReadFeaturesToChange;\r\n    for (FormatFeature f : features) {\r\n        final int mask \u003d f.getMask();\r\n        newSet \u0026\u003d ~mask;\r\n        newMask |\u003d mask;\r\n        if (f instanceof JsonReadFeature) {\r\n            JsonParser.Feature oldF \u003d ((JsonReadFeature) f).mappedFeature();\r\n            if (oldF !\u003d null) {\r\n                final int pmask \u003d oldF.getMask();\r\n                parserSet \u0026\u003d ~pmask;\r\n                parserMask |\u003d pmask;\r\n            }\r\n        }\r\n    }\r\n    return ((_formatReadFeatures \u003d\u003d newSet) \u0026\u0026 (_formatReadFeaturesToChange \u003d\u003d newMask) \u0026\u0026 (_parserFeatures \u003d\u003d parserSet) \u0026\u0026 (_parserFeaturesToChange \u003d\u003d parserMask)) ? this : new DeserializationConfig(this, _mapperFeatures, _deserFeatures, parserSet, parserMask, newSet, newMask);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig \u0027with\u0027(com.fasterxml.jackson.databind.node.JsonNodeFactory)",
    "visibility": "public",
    "body": "{\r\n    if (_nodeFactory \u003d\u003d f) {\r\n        return this;\r\n    }\r\n    return new DeserializationConfig(this, f);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  JsonNodeFactory\n  $r2 \u003d JsonNodeFactory _nodeFactory\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d DeserializationConfig\n  new DeserializationConfig(r0, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig \u0027with\u0027(com.fasterxml.jackson.databind.cfg.ConstructorDetector)",
    "visibility": "public",
    "body": "{\r\n    if (_ctorDetector \u003d\u003d ctorDetector) {\r\n        return this;\r\n    }\r\n    return new DeserializationConfig(this, ctorDetector);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  ConstructorDetector\n  $r2 \u003d ConstructorDetector _ctorDetector\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d DeserializationConfig\n  new DeserializationConfig(r0, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "withHandler",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig withHandler(com.fasterxml.jackson.databind.deser.DeserializationProblemHandler)",
    "visibility": "public",
    "body": "{\r\n    // Sanity check: let\u0027s prevent adding same handler multiple times\r\n    if (LinkedNode.contains(_problemHandlers, h)) {\r\n        return this;\r\n    }\r\n    return new DeserializationConfig(this, new LinkedNode\u003cDeserializationProblemHandler\u003e(h, _problemHandlers));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  DeserializationProblemHandler\n  $r2 \u003d LinkedNode _problemHandlers\u003e\n  $z0 \u003d LinkedNode.contains($r2, r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d DeserializationConfig\n  $r4 \u003d LinkedNode\n  $r5 \u003d LinkedNode _problemHandlers\u003e\n  new LinkedNode(r1, $r5)\n  new DeserializationConfig(r0, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "withNoProblemHandlers",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig withNoProblemHandlers()",
    "visibility": "public",
    "body": "{\r\n    if (_problemHandlers \u003d\u003d null) {\r\n        return this;\r\n    }\r\n    return new DeserializationConfig(this, (LinkedNode\u003cDeserializationProblemHandler\u003e) null);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  $r1 \u003d LinkedNode _problemHandlers\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d DeserializationConfig\n  new DeserializationConfig(r0, null)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "initialize",
    "signature": "com.fasterxml.jackson.core.JsonParser initialize(com.fasterxml.jackson.core.JsonParser)",
    "visibility": "public",
    "body": "{\r\n    if (_parserFeaturesToChange !\u003d 0) {\r\n        p.overrideStdFeatures(_parserFeatures, _parserFeaturesToChange);\r\n    }\r\n    if (_formatReadFeaturesToChange !\u003d 0) {\r\n        p.overrideFormatFeatures(_formatReadFeatures, _formatReadFeaturesToChange);\r\n    }\r\n    return p;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($i1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  JsonParser\n  $i0 \u003d DeserializationConfig: int _parserFeaturesToChange\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $i5 \u003d DeserializationConfig: int _parserFeatures\u003e\n  $i4 \u003d DeserializationConfig: int _parserFeaturesToChange\u003e\n  r1.overrideStdFeatures($i5, $i4)\n}",
      "B2 {\n  $i1 \u003d DeserializationConfig: int _formatReadFeaturesToChange\u003e\n  if ($i1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $i3 \u003d DeserializationConfig: int _formatReadFeatures\u003e\n  $i2 \u003d DeserializationConfig: int _formatReadFeaturesToChange\u003e\n  r1.overrideFormatFeatures($i3, $i2)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "initialize",
    "signature": "com.fasterxml.jackson.core.JsonParser initialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.FormatSchema)",
    "visibility": "public",
    "body": "{\r\n    if (_parserFeaturesToChange !\u003d 0) {\r\n        p.overrideStdFeatures(_parserFeatures, _parserFeaturesToChange);\r\n    }\r\n    if (_formatReadFeaturesToChange !\u003d 0) {\r\n        p.overrideFormatFeatures(_formatReadFeatures, _formatReadFeaturesToChange);\r\n    }\r\n    if (schema !\u003d null) {\r\n        p.setSchema(schema);\r\n    }\r\n    return p;\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($i1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If(r1 \u003d\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  JsonParser\n  FormatSchema\n  $i0 \u003d DeserializationConfig: int _parserFeaturesToChange\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $i5 \u003d DeserializationConfig: int _parserFeatures\u003e\n  $i4 \u003d DeserializationConfig: int _parserFeaturesToChange\u003e\n  r2.overrideStdFeatures($i5, $i4)\n}",
      "B2 {\n  $i1 \u003d DeserializationConfig: int _formatReadFeaturesToChange\u003e\n  if ($i1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $i3 \u003d DeserializationConfig: int _formatReadFeatures\u003e\n  $i2 \u003d DeserializationConfig: int _formatReadFeaturesToChange\u003e\n  r2.overrideFormatFeatures($i3, $i2)\n}",
      "B4 {\n  if (r1 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  r2.setSchema(r1)\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "useRootWrapping",
    "signature": "boolean useRootWrapping()",
    "visibility": "public",
    "body": "{\r\n    if (_rootName !\u003d null) {\r\n        // empty String disables wrapping; non-empty enables\r\n        return !_rootName.isEmpty();\r\n    }\r\n    return isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B5",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  $r1 \u003d PropertyName _rootName\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  $r3 \u003d PropertyName _rootName\u003e\n  $z1 \u003d $r3.isEmpty()\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r2 \u003d DeserializationFeature UNWRAP_ROOT_VALUE\u003e\n  $z0 \u003d r0.isEnabled($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DeserializationConfig#isEnabled(...1)",
        "body": "{\r\n    return (_deserFeatures \u0026 feature.getMask()) !\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "isEnabled",
    "signature": "boolean isEnabled(com.fasterxml.jackson.databind.DeserializationFeature)",
    "visibility": "public",
    "body": "{\r\n    return (_deserFeatures \u0026 feature.getMask()) !\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  DeserializationFeature\n  $i0 \u003d DeserializationConfig: int _deserFeatures\u003e\n  $i1 \u003d r1.getMask()\n  $i2 \u003d $i0 \u0026 $i1\n  if ($i2 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "isEnabled",
    "signature": "boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature,com.fasterxml.jackson.core.JsonFactory)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003d\u003d false) → B1 | else → B5",
      "B1 : If($i5 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  JsonParser$Feature\n  JsonFactory\n  i0 \u003d r0.getMask()\n  $i1 \u003d DeserializationConfig: int _parserFeaturesToChange\u003e\n  $i2 \u003d $i1 \u0026 i0\n  if ($i2 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  $i3 \u003d DeserializationConfig: int _parserFeatures\u003e\n  $i4 \u003d r0.getMask()\n  $i5 \u003d $i3 \u0026 $i4\n  if ($i5 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $z0 \u003d r2.isEnabled(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "hasDeserializationFeatures",
    "signature": "boolean hasDeserializationFeatures(int)",
    "visibility": "public",
    "body": "{\r\n    return (_deserFeatures \u0026 featureMask) \u003d\u003d featureMask;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 !\u003d i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  i0 :\u003d @parameter0: int\n  $i1 \u003d DeserializationConfig: int _deserFeatures\u003e\n  $i2 \u003d $i1 \u0026 i0\n  if ($i2 !\u003d i0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "hasSomeOfFeatures",
    "signature": "boolean hasSomeOfFeatures(int)",
    "visibility": "public",
    "body": "{\r\n    return (_deserFeatures \u0026 featureMask) !\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  i0 :\u003d @parameter0: int\n  $i1 \u003d DeserializationConfig: int _deserFeatures\u003e\n  $i2 \u003d $i1 \u0026 i0\n  if ($i2 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "getConstructorDetector",
    "signature": "com.fasterxml.jackson.databind.cfg.ConstructorDetector getConstructorDetector()",
    "visibility": "public",
    "body": "{\r\n    if (_ctorDetector \u003d\u003d null) {\r\n        return ConstructorDetector.DEFAULT;\r\n    }\r\n    return _ctorDetector;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  $r1 \u003d ConstructorDetector _ctorDetector\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d ConstructorDetector DEFAULT\u003e\n  return\n}",
      "B2 {\n  $r2 \u003d ConstructorDetector _ctorDetector\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationConfig",
    "methodName": "findTypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer findTypeDeserializer(com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    BeanDescription bean \u003d introspectClassAnnotations(baseType.getRawClass());\r\n    AnnotatedClass ac \u003d bean.getClassInfo();\r\n    TypeResolverBuilder\u003c?\u003e b \u003d getAnnotationIntrospector().findTypeResolver(this, ac, baseType);\r\n    /* Ok: if there is no explicit type info handler, we may want to\r\n         * use a default. If so, config object knows what to use.\r\n         */\r\n    Collection\u003cNamedType\u003e subtypes \u003d null;\r\n    if (b \u003d\u003d null) {\r\n        b \u003d getDefaultTyper(baseType);\r\n        if (b \u003d\u003d null) {\r\n            return null;\r\n        }\r\n    } else {\r\n        subtypes \u003d getSubtypeResolver().collectAndResolveSubtypesByTypeId(this, ac);\r\n    }\r\n    return b.buildTypeDeserializer(this, baseType, subtypes);\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r8 !\u003d null) → B1 | else → B3",
      "B1 : If(r8 !\u003d null) → B2 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  JavaType\n  $r2 \u003d r1.getRawClass()\n  r3 \u003d r0.introspectClassAnnotations($r2)\n  r4 \u003d r3.getClassInfo()\n  $r5 \u003d r0.getAnnotationIntrospector()\n  r8 \u003d $r5.findTypeResolver(r0, r4, r1)\n  r9 \u003d null\n  if (r8 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  r8 \u003d r0.getDefaultTyper(r1)\n  if (r8 !\u003d null) goto B2 else B4\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r6 \u003d r0.getSubtypeResolver()\n  r9 \u003d $r6.collectAndResolveSubtypesByTypeId(r0, r4)\n}",
      "B4 {\n  $r7 \u003d r8.buildTypeDeserializer(r0, r1, r9)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DeserializationConfig#getDefaultTyper(...1)",
        "body": "(source not found)"
      },
      {
        "name": "DeserializationConfig#introspectClassAnnotations(...1)",
        "body": "(source not found)"
      },
      {
        "name": "DeserializationConfig#getAnnotationIntrospector(...0)",
        "body": "(source not found)"
      },
      {
        "name": "DeserializationConfig#getSubtypeResolver(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.DeserializationFeature",
    "methodName": "enabledIn",
    "signature": "boolean enabledIn(int)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializationFeature\n  i0 :\u003d @parameter0: int\n  $i1 \u003d DeserializationFeature: int _mask\u003e\n  $i2 \u003d i0 \u0026 $i1\n  if ($i2 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.exc.IgnoredPropertyException",
    "methodName": "from",
    "signature": "com.fasterxml.jackson.databind.exc.IgnoredPropertyException \u0027from\u0027(com.fasterxml.jackson.core.JsonParser,java.lang.Object,java.lang.String,java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    Class\u003c?\u003e ref;\r\n    if (fromObjectOrClass instanceof Class\u003c?\u003e) {\r\n        ref \u003d (Class\u003c?\u003e) fromObjectOrClass;\r\n    } else {\r\n        // also acts as null check:\r\n        ref \u003d fromObjectOrClass.getClass();\r\n    }\r\n    String msg \u003d String.format(\"Ignored field \\\"%s\\\" (class %s) encountered; mapper configured not to allow this\", propertyName, ref.getName());\r\n    IgnoredPropertyException e \u003d new IgnoredPropertyException(p, msg, p.currentLocation(), ref, propertyName, propertyIds);\r\n    // but let\u0027s also ensure path includes this last (missing) segment\r\n    e.prependPath(fromObjectOrClass, propertyName);\r\n    return e;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JsonParser\n  Object\n  String\n  Collection\n  $z0 \u003d Class\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r9 \u003d Class) r0\n  goto B3\n}",
      "B2 {\n  r9 \u003d r0.getClass()\n}",
      "B3 {\n  $r1 \u003d Object)[2]\n  $r1[0] \u003d r2\n  $r3 \u003d r9.getName()\n  $r1[1] \u003d $r3\n  $r8 \u003d String.format(\"Ignored field \\\"%s\\\" (class %s) encountered; mapper configured not to allow this\", $r1)\n  $r4 \u003d IgnoredPropertyException\n  $r7 \u003d r5.currentLocation()\n  new IgnoredPropertyException(r5, $r8, $r7, r9, r2, r6)\n  $r4.prependPath(r0, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.exc.InvalidNullException",
    "methodName": "from",
    "signature": "com.fasterxml.jackson.databind.exc.InvalidNullException \u0027from\u0027(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.PropertyName,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    String msg \u003d String.format(\"Invalid `null` value encountered for property %s\", ClassUtil.quotedOr(name, \"\u003cUNKNOWN\u003e\"));\r\n    InvalidNullException exc \u003d new InvalidNullException(ctxt, msg, name);\r\n    if (type !\u003d null) {\r\n        exc.setTargetType(type);\r\n    }\r\n    return exc;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r6 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializationContext\n  PropertyName\n  JavaType\n  $r0 \u003d Object)[1]\n  $r2 \u003d ClassUtil.quotedOr(r1, \"\u003cUNKNOWN\u003e\")\n  $r0[0] \u003d $r2\n  r3 \u003d String.format(\"Invalid `null` value encountered for property %s\", $r0)\n  $r4 \u003d InvalidNullException\n  new InvalidNullException(r5, r3, r1)\n  if (r6 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4.setTargetType(r6)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException",
    "methodName": "from",
    "signature": "com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException \u0027from\u0027(com.fasterxml.jackson.core.JsonParser,java.lang.Object,java.lang.String,java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    Class\u003c?\u003e ref;\r\n    if (fromObjectOrClass instanceof Class\u003c?\u003e) {\r\n        ref \u003d (Class\u003c?\u003e) fromObjectOrClass;\r\n    } else {\r\n        ref \u003d fromObjectOrClass.getClass();\r\n    }\r\n    String msg \u003d String.format(\"Unrecognized field \\\"%s\\\" (class %s), not marked as ignorable\", propertyName, ref.getName());\r\n    UnrecognizedPropertyException e \u003d new UnrecognizedPropertyException(p, msg, p.currentLocation(), ref, propertyName, propertyIds);\r\n    // but let\u0027s also ensure path includes this last (missing) segment\r\n    e.prependPath(fromObjectOrClass, propertyName);\r\n    return e;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JsonParser\n  Object\n  String\n  Collection\n  $z0 \u003d Class\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r9 \u003d Class) r0\n  goto B3\n}",
      "B2 {\n  r9 \u003d r0.getClass()\n}",
      "B3 {\n  $r1 \u003d Object)[2]\n  $r1[0] \u003d r2\n  $r3 \u003d r9.getName()\n  $r1[1] \u003d $r3\n  $r8 \u003d String.format(\"Unrecognized field \\\"%s\\\" (class %s), not marked as ignorable\", $r1)\n  $r4 \u003d UnrecognizedPropertyException\n  $r7 \u003d r5.currentLocation()\n  new UnrecognizedPropertyException(r5, $r8, $r7, r9, r2, r6)\n  $r4.prependPath(r0, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ext.CoreXMLDeserializers",
    "methodName": "findBeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer findBeanDeserializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)",
    "visibility": "public",
    "body": "{\r\n    Class\u003c?\u003e raw \u003d type.getRawClass();\r\n    if (raw \u003d\u003d QName.class) {\r\n        return new Std(raw, TYPE_QNAME);\r\n    }\r\n    if (raw \u003d\u003d XMLGregorianCalendar.class) {\r\n        return new Std(raw, TYPE_G_CALENDAR);\r\n    }\r\n    if (raw \u003d\u003d Duration.class) {\r\n        return new Std(raw, TYPE_DURATION);\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r1 !\u003d class \"Ljavax/xml/namespace/QName;\") → B1 | else → B2",
      "B2 : If(r1 !\u003d class \"Ljavax/xml/datatype/XMLGregorianCalendar;\") → B3 | else → B4",
      "B4 : If(r1 !\u003d class \"Ljavax/xml/datatype/Duration;\") → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CoreXMLDeserializers\n  JavaType\n  DeserializationConfig\n  BeanDescription\n  r1 \u003d r0.getRawClass()\n  if (r1 !\u003d class \"Ljavax/xml/namespace/QName;\") goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d CoreXMLDeserializers$Std\n  new CoreXMLDeserializers$Std(r1, 3)\n  return\n}",
      "B2 {\n  if (r1 !\u003d class \"Ljavax/xml/datatype/XMLGregorianCalendar;\") goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d CoreXMLDeserializers$Std\n  new CoreXMLDeserializers$Std(r1, 2)\n  return\n}",
      "B4 {\n  if (r1 !\u003d class \"Ljavax/xml/datatype/Duration;\") goto B5 else B6\n}",
      "B5 {\n  $r2 \u003d CoreXMLDeserializers$Std\n  new CoreXMLDeserializers$Std(r1, 1)\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ext.CoreXMLDeserializers",
    "methodName": "hasDeserializerFor",
    "signature": "boolean hasDeserializerFor(com.fasterxml.jackson.databind.DeserializationConfig,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return (valueType \u003d\u003d QName.class) || (valueType \u003d\u003d XMLGregorianCalendar.class) || (valueType \u003d\u003d Duration.class);\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d class \"Ljavax/xml/namespace/QName;\") → B1 | else → B3",
      "B1 : If(r0 \u003d\u003d class \"Ljavax/xml/datatype/XMLGregorianCalendar;\") → B2 | else → B3",
      "B2 : If(r0 !\u003d class \"Ljavax/xml/datatype/Duration;\") → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CoreXMLDeserializers\n  DeserializationConfig\n  Class\n  if (r0 \u003d\u003d class \"Ljavax/xml/namespace/QName;\") goto B1 else B3\n}",
      "B1 {\n  if (r0 \u003d\u003d class \"Ljavax/xml/datatype/XMLGregorianCalendar;\") goto B2 else B3\n}",
      "B2 {\n  if (r0 !\u003d class \"Ljavax/xml/datatype/Duration;\") goto B3 else B4\n}",
      "B3 {\n  $z0 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z0 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ext.CoreXMLSerializers",
    "methodName": "findSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer findSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)",
    "visibility": "public",
    "body": "{\r\n    Class\u003c?\u003e raw \u003d type.getRawClass();\r\n    if (Duration.class.isAssignableFrom(raw)) {\r\n        return ToStringSerializer.instance;\r\n    }\r\n    if (QName.class.isAssignableFrom(raw)) {\r\n        return QNameSerializer.instance;\r\n    }\r\n    if (XMLGregorianCalendar.class.isAssignableFrom(raw)) {\r\n        return XMLGregorianCalendarSerializer.instance;\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CoreXMLSerializers\n  SerializationConfig\n  JavaType\n  BeanDescription\n  r1 \u003d r0.getRawClass()\n  $r2 \u003d class \"Ljavax/xml/datatype/Duration;\"\n  $z0 \u003d $r2.isAssignableFrom(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d ToStringSerializer instance\u003e\n  return\n}",
      "B2 {\n  $r3 \u003d class \"Ljavax/xml/namespace/QName;\"\n  $z1 \u003d $r3.isAssignableFrom(r1)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d JsonSerializer instance\u003e\n  return\n}",
      "B4 {\n  $r4 \u003d class \"Ljavax/xml/datatype/XMLGregorianCalendar;\"\n  $z2 \u003d $r4.isAssignableFrom(r1)\n  if ($z2 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r5 \u003d CoreXMLSerializers$XMLGregorianCalendarSerializer instance\u003e\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ext.DOMSerializer",
    "methodName": "acceptJsonFormatVisitor",
    "signature": "void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    if (visitor !\u003d null)\r\n        visitor.expectAnyFormat(typeHint);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DOMSerializer\n  JsonFormatVisitorWrapper\n  JavaType\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r0.expectAnyFormat(r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ext.Java7HandlersImpl",
    "methodName": "getDeserializerForJavaNioFilePath",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer getDeserializerForJavaNioFilePath(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (rawType \u003d\u003d _pathClass) {\r\n        return new NioPathDeserializer();\r\n    }\r\n    return null;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Java7HandlersImpl\n  Class\n  $r2 \u003d Class _pathClass\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d NioPathDeserializer\n  new NioPathDeserializer()\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ext.Java7HandlersImpl",
    "methodName": "getSerializerForJavaNioFilePath",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer getSerializerForJavaNioFilePath(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (_pathClass.isAssignableFrom(rawType)) {\r\n        return new NioPathSerializer();\r\n    }\r\n    return null;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Java7HandlersImpl\n  Class\n  $r2 \u003d Class _pathClass\u003e\n  $z0 \u003d $r2.isAssignableFrom(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d NioPathSerializer\n  new NioPathSerializer()\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
    "methodName": "findTransient",
    "signature": "java.lang.Boolean findTransient(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    Transient t \u003d a.getAnnotation(Transient.class);\r\n    if (t !\u003d null) {\r\n        return t.value();\r\n    }\r\n    return null;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Java7SupportImpl\n  Annotated\n  $r1 \u003d r0.getAnnotation(class \"Ljava/beans/Transient;\")\n  r2 \u003d Transient) $r1\n  if (r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r2.value()\n  $r3 \u003d Boolean.valueOf($z0)\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
    "methodName": "hasCreatorAnnotation",
    "signature": "java.lang.Boolean hasCreatorAnnotation(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    ConstructorProperties props \u003d a.getAnnotation(ConstructorProperties.class);\r\n    // 08-Nov-2015, tatu: One possible check would be to ensure there is at least\r\n    //    one name iff constructor has arguments. But seems unnecessary for now.\r\n    if (props !\u003d null) {\r\n        return Boolean.TRUE;\r\n    }\r\n    return null;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Java7SupportImpl\n  Annotated\n  $r1 \u003d r0.getAnnotation(class \"Ljava/beans/ConstructorProperties;\")\n  r2 \u003d ConstructorProperties) $r1\n  if (r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Boolean TRUE\u003e\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
    "methodName": "findConstructorName",
    "signature": "com.fasterxml.jackson.databind.PropertyName findConstructorName(com.fasterxml.jackson.databind.introspect.AnnotatedParameter)",
    "visibility": "public",
    "body": "{\r\n    AnnotatedWithParams ctor \u003d p.getOwner();\r\n    if (ctor !\u003d null) {\r\n        ConstructorProperties props \u003d ctor.getAnnotation(ConstructorProperties.class);\r\n        if (props !\u003d null) {\r\n            String[] names \u003d props.value();\r\n            int ix \u003d p.getIndex();\r\n            if (ix \u003c names.length) {\r\n                return PropertyName.construct(names[ix]);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B4",
      "B1 : If(r3 \u003d\u003d null) → B2 | else → B4",
      "B2 : If(i0 \u003e\u003d $i1) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Java7SupportImpl\n  AnnotatedParameter\n  r1 \u003d r0.getOwner()\n  if (r1 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r2 \u003d r1.getAnnotation(class \"Ljava/beans/ConstructorProperties;\")\n  r3 \u003d ConstructorProperties) $r2\n  if (r3 \u003d\u003d null) goto B2 else B4\n}",
      "B2 {\n  r4 \u003d r3.value()\n  i0 \u003d r0.getIndex()\n  $i1 \u003d lengthof r4\n  if (i0 \u003e\u003d $i1) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d r4[i0]\n  $r6 \u003d PropertyName.construct($r5)\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ext.NioPathDeserializer",
    "methodName": "deserialize",
    "signature": "java.nio.file.Path deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    if (!p.hasToken(JsonToken.VALUE_STRING)) {\r\n        return (Path) ctxt.handleUnexpectedToken(Path.class, p);\r\n    }\r\n    final String value \u003d p.getText();\r\n    // If someone gives us an input with no : at all, treat as local path, instead of failing\r\n    // with invalid URI.\r\n    if (value.indexOf(\u0027:\u0027) \u003c 0) {\r\n        return Paths.get(value);\r\n    }\r\n    if (areWindowsFilePathsSupported) {\r\n        if (value.length() \u003e\u003d 2 \u0026\u0026 isLetter(value.charAt(0)) \u0026\u0026 value.charAt(1) \u003d\u003d \u0027:\u0027) {\r\n            return Paths.get(value);\r\n        }\r\n    }\r\n    final URI uri;\r\n    try {\r\n        uri \u003d new URI(value);\r\n    } catch (URISyntaxException e) {\r\n        return (Path) ctxt.handleInstantiationProblem(handledType(), value, e);\r\n    }\r\n    try {\r\n        return Paths.get(uri);\r\n    } catch (FileSystemNotFoundException cause) {\r\n        try {\r\n            final String scheme \u003d uri.getScheme();\r\n            // We want to use the current thread\u0027s context class loader, not system class loader that is used in Paths.get():\r\n            for (FileSystemProvider provider : ServiceLoader.load(FileSystemProvider.class)) {\r\n                if (provider.getScheme().equalsIgnoreCase(scheme)) {\r\n                    return provider.getPath(uri);\r\n                }\r\n            }\r\n            return (Path) ctxt.handleInstantiationProblem(handledType(), value, cause);\r\n        } catch (ServiceConfigurationError e) {\r\n            e.addSuppressed(cause);\r\n            return (Path) ctxt.handleInstantiationProblem(handledType(), value, e);\r\n        }\r\n    } catch (Exception e) {\r\n        return (Path) ctxt.handleInstantiationProblem(handledType(), value, e);\r\n    }\r\n}",
    "nodes": 20,
    "edges": 19,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($i0 \u003e\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B9",
      "B5 : If($i1 \u003c 2) → B6 | else → B9",
      "B6 : If($z2 \u003d\u003d false) → B7 | else → B9",
      "B7 : If($i4 !\u003d 58) → B8 | else → B9",
      "B13 : If($z3 \u003d\u003d false) → B14 | else → B17",
      "B14 : If($z4 \u003d\u003d false) → B15 | else → B16"
    ],
    "blockList": [
      "B0 {\n  NioPathDeserializer\n  JsonParser\n  DeserializationContext\n  $r1 \u003d JsonToken VALUE_STRING\u003e\n  $z0 \u003d r0.hasToken($r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d r8.handleUnexpectedToken(class \"Ljava/nio/file/Path;\", r0)\n  $r10 \u003d Path) $r9\n  return\n}",
      "B2 {\n  r2 \u003d r0.getText()\n  $i0 \u003d r2.indexOf(58)\n  if ($i0 \u003e\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d String)[0]\n  $r7 \u003d Paths.get(r2, $r6)\n  return\n}",
      "B4 {\n  $z1 \u003d NioPathDeserializer: boolean areWindowsFilePathsSupported\u003e\n  if ($z1 \u003d\u003d false) goto B5 else B9\n}",
      "B5 {\n  $i1 \u003d r2.length()\n  if ($i1 \u003c 2) goto B6 else B9\n}",
      "B6 {\n  $c2 \u003d r2.charAt(0)\n  $z2 \u003d Character.isLetter($c2)\n  if ($z2 \u003d\u003d false) goto B7 else B9\n}",
      "B7 {\n  $c3 \u003d r2.charAt(1)\n  $i4 \u003d (int) $c3\n  if ($i4 !\u003d 58) goto B8 else B9\n}",
      "B8 {\n  $r4 \u003d String)[0]\n  $r5 \u003d Paths.get(r2, $r4)\n  return\n}",
      "B9 {\n  $r36 \u003d URI\n  new URI(r2)\n  goto B11\n}",
      "B10 {\n  $r30 :\u003d @caughtexception\n  $r31 \u003d r12.handledType()\n  $r32 \u003d r8.handleInstantiationProblem($r31, r2, $r30)\n  $r33 \u003d Path) $r32\n  return\n}",
      "B11 {\n  $r3 \u003d Paths.get($r36)\n  return\n}",
      "B12 {\n  $r20 :\u003d @caughtexception\n  r35 \u003d $r36.getScheme()\n  $r21 \u003d ServiceLoader.load(class \"Ljava/nio/file/spi/FileSystemProvider;\")\n  r22 \u003d $r21.iterator()\n}",
      "B13 {\n  $z3 \u003d r22.hasNext()\n  if ($z3 \u003d\u003d false) goto B14 else B17\n}",
      "B14 {\n  $r26 \u003d r22.next()\n  r27 \u003d FileSystemProvider) $r26\n  $r28 \u003d r27.getScheme()\n  $z4 \u003d $r28.equalsIgnoreCase(r35)\n  if ($z4 \u003d\u003d false) goto B15 else B16\n}",
      "B15 {\n  $r29 \u003d r27.getPath($r36)\n  return\n}",
      "B16 {\n  goto B13\n}",
      "B17 {\n  $r23 \u003d r12.handledType()\n  $r24 \u003d r8.handleInstantiationProblem($r23, r2, $r20)\n  $r25 \u003d Path) $r24\n  return\n}",
      "B18 {\n  $r16 :\u003d @caughtexception\n  $r16.addSuppressed($r20)\n  $r17 \u003d r12.handledType()\n  $r18 \u003d r8.handleInstantiationProblem($r17, r2, $r16)\n  $r19 \u003d Path) $r18\n  return\n}",
      "B19 {\n  $r11 :\u003d @caughtexception\n  $r13 \u003d r12.handledType()\n  $r14 \u003d r8.handleInstantiationProblem($r13, r2, $r11)\n  $r15 \u003d Path) $r14\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B17",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B13",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NioPathDeserializer#handledType(...0)",
        "body": "(source not found)"
      },
      {
        "name": "NioPathDeserializer#isLetter(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory",
    "methodName": "findSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer findSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)",
    "visibility": "public",
    "body": "{\r\n    final Class\u003c?\u003e rawType \u003d type.getRawClass();\r\n    if (_IsXOfY(rawType, CLASS_DOM_NODE)) {\r\n        return (JsonSerializer\u003c?\u003e) instantiate(SERIALIZER_FOR_DOM_NODE, type);\r\n    }\r\n    if (_jdk7Helper !\u003d null) {\r\n        JsonSerializer\u003c?\u003e ser \u003d _jdk7Helper.getSerializerForJavaNioFilePath(rawType);\r\n        if (ser !\u003d null) {\r\n            return ser;\r\n        }\r\n    }\r\n    String className \u003d rawType.getName();\r\n    Object sqlHandler \u003d _sqlSerializers.get(className);\r\n    if (sqlHandler !\u003d null) {\r\n        if (sqlHandler instanceof JsonSerializer\u003c?\u003e) {\r\n            return (JsonSerializer\u003c?\u003e) sqlHandler;\r\n        }\r\n        // must be class name otherwise\r\n        return (JsonSerializer\u003c?\u003e) instantiate((String) sqlHandler, type);\r\n    }\r\n    String factoryName;\r\n    if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSuperClassStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\r\n        factoryName \u003d SERIALIZERS_FOR_JAVAX_XML;\r\n    } else {\r\n        return null;\r\n    }\r\n    Object ob \u003d instantiate(factoryName, type);\r\n    if (ob \u003d\u003d null) {\r\n        // could warn, if we had logging system (j.u.l?)\r\n        return null;\r\n    }\r\n    return ((Serializers) ob).findSerializer(config, type, beanDesc);\r\n}",
    "nodes": 16,
    "edges": 17,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($r4 \u003d\u003d null) → B3 | else → B5",
      "B3 : If(r20 \u003d\u003d null) → B4 | else → B5",
      "B5 : If($r17 \u003d\u003d null) → B6 | else → B9",
      "B6 : If($z3 \u003d\u003d false) → B7 | else → B8",
      "B9 : If($z1 !\u003d 0) → B10 | else → B11",
      "B10 : If($z2 \u003d\u003d false) → B11 | else → B12",
      "B13 : If(r6 !\u003d null) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  OptionalHandlerFactory\n  SerializationConfig\n  JavaType\n  BeanDescription\n  r1 \u003d r0.getRawClass()\n  $r3 \u003d Class CLASS_DOM_NODE\u003e\n  $z0 \u003d r2._IsXOfY(r1, $r3)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r18 \u003d r2.instantiate(\"com.fasterxml.jackson.databind.ext.DOMSerializer\", r0)\n  $r19 \u003d JsonSerializer) $r18\n  return\n}",
      "B2 {\n  $r4 \u003d Java7Handlers _jdk7Helper\u003e\n  if ($r4 \u003d\u003d null) goto B3 else B5\n}",
      "B3 {\n  $r15 \u003d Java7Handlers _jdk7Helper\u003e\n  r20 \u003d $r15.getSerializerForJavaNioFilePath(r1)\n  if (r20 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r16 \u003d r1.getName()\n  $r5 \u003d Map _sqlSerializers\u003e\n  $r17 \u003d $r5.get($r16)\n  if ($r17 \u003d\u003d null) goto B6 else B9\n}",
      "B6 {\n  $z3 \u003d JsonSerializer\n  if ($z3 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $r14 \u003d JsonSerializer) $r17\n  return\n}",
      "B8 {\n  $r11 \u003d String) $r17\n  $r12 \u003d r2.instantiate($r11, r0)\n  $r13 \u003d JsonSerializer) $r12\n  return\n}",
      "B9 {\n  $z1 \u003d $r16.startsWith(\"javax.xml.\")\n  if ($z1 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  $z2 \u003d r2.hasSuperClassStartingWith(r1, \"javax.xml.\")\n  if ($z2 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  goto B13\n}",
      "B12 {\n  return\n}",
      "B13 {\n  r6 \u003d r2.instantiate(\"com.fasterxml.jackson.databind.ext.CoreXMLSerializers\", r0)\n  if (r6 !\u003d null) goto B14 else B15\n}",
      "B14 {\n  return\n}",
      "B15 {\n  $r9 \u003d Serializers) r6\n  $r10 \u003d $r9.findSerializer(r7, r0, r8)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "OptionalHandlerFactory#_IsXOfY(...2)",
        "body": "{\r\n    return (expType !\u003d null) \u0026\u0026 expType.isAssignableFrom(valueType);\r\n}"
      },
      {
        "name": "OptionalHandlerFactory#instantiate(...2)",
        "body": "{\r\n    try {\r\n        return instantiate(Class.forName(className), valueType);\r\n    } catch (Throwable e) {\r\n        ExceptionUtil.rethrowIfFatal(e);\r\n        throw new IllegalStateException(\"Failed to find class `\" + className + \"` for handling values of type \" + ClassUtil.getTypeDescription(valueType) + \", problem: (\" + e.getClass().getName() + \") \" + e.getMessage());\r\n    }\r\n}"
      },
      {
        "name": "OptionalHandlerFactory#hasSuperClassStartingWith(...2)",
        "body": "{\r\n    for (Class\u003c?\u003e supertype \u003d rawType.getSuperclass(); supertype !\u003d null; supertype \u003d supertype.getSuperclass()) {\r\n        if (supertype \u003d\u003d Object.class) {\r\n            return false;\r\n        }\r\n        if (supertype.getName().startsWith(prefix)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory",
    "methodName": "findDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer findDeserializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)",
    "visibility": "public",
    "body": "{\r\n    final Class\u003c?\u003e rawType \u003d type.getRawClass();\r\n    if (_jdk7Helper !\u003d null) {\r\n        JsonDeserializer\u003c?\u003e deser \u003d _jdk7Helper.getDeserializerForJavaNioFilePath(rawType);\r\n        if (deser !\u003d null) {\r\n            return deser;\r\n        }\r\n    }\r\n    if (_IsXOfY(rawType, CLASS_DOM_NODE)) {\r\n        return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_NODE, type);\r\n    }\r\n    if (_IsXOfY(rawType, CLASS_DOM_DOCUMENT)) {\r\n        return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_DOCUMENT, type);\r\n    }\r\n    String className \u003d rawType.getName();\r\n    final String deserName \u003d _sqlDeserializers.get(className);\r\n    if (deserName !\u003d null) {\r\n        return (JsonDeserializer\u003c?\u003e) instantiate(deserName, type);\r\n    }\r\n    String factoryName;\r\n    if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSuperClassStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\r\n        factoryName \u003d DESERIALIZERS_FOR_JAVAX_XML;\r\n    } else {\r\n        return null;\r\n    }\r\n    Object ob \u003d instantiate(factoryName, type);\r\n    if (ob \u003d\u003d null) {\r\n        // could warn, if we had logging system (j.u.l?)\r\n        return null;\r\n    }\r\n    return ((Deserializers) ob).findBeanDeserializer(type, config, beanDesc);\r\n}",
    "nodes": 16,
    "edges": 17,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r21 \u003d\u003d null) → B2 | else → B3",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B7",
      "B7 : If(r8 \u003d\u003d null) → B8 | else → B9",
      "B9 : If($z2 !\u003d 0) → B10 | else → B11",
      "B10 : If($z3 \u003d\u003d false) → B11 | else → B12",
      "B13 : If(r9 !\u003d null) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  OptionalHandlerFactory\n  JavaType\n  DeserializationConfig\n  BeanDescription\n  r1 \u003d r0.getRawClass()\n  $r2 \u003d Java7Handlers _jdk7Helper\u003e\n  if ($r2 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r20 \u003d Java7Handlers _jdk7Helper\u003e\n  r21 \u003d $r20.getDeserializerForJavaNioFilePath(r1)\n  if (r21 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r4 \u003d Class CLASS_DOM_NODE\u003e\n  $z0 \u003d r3._IsXOfY(r1, $r4)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r18 \u003d r3.instantiate(\"com.fasterxml.jackson.databind.ext.DOMDeserializer$NodeDeserializer\", r0)\n  $r19 \u003d JsonDeserializer) $r18\n  return\n}",
      "B5 {\n  $r5 \u003d Class CLASS_DOM_DOCUMENT\u003e\n  $z1 \u003d r3._IsXOfY(r1, $r5)\n  if ($z1 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r16 \u003d r3.instantiate(\"com.fasterxml.jackson.databind.ext.DOMDeserializer$DocumentDeserializer\", r0)\n  $r17 \u003d JsonDeserializer) $r16\n  return\n}",
      "B7 {\n  r22 \u003d r1.getName()\n  $r6 \u003d Map _sqlDeserializers\u003e\n  $r7 \u003d $r6.get(r22)\n  r8 \u003d String) $r7\n  if (r8 \u003d\u003d null) goto B8 else B9\n}",
      "B8 {\n  $r14 \u003d r3.instantiate(r8, r0)\n  $r15 \u003d JsonDeserializer) $r14\n  return\n}",
      "B9 {\n  $z2 \u003d r22.startsWith(\"javax.xml.\")\n  if ($z2 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  $z3 \u003d r3.hasSuperClassStartingWith(r1, \"javax.xml.\")\n  if ($z3 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  goto B13\n}",
      "B12 {\n  return\n}",
      "B13 {\n  r9 \u003d r3.instantiate(\"com.fasterxml.jackson.databind.ext.CoreXMLDeserializers\", r0)\n  if (r9 !\u003d null) goto B14 else B15\n}",
      "B14 {\n  return\n}",
      "B15 {\n  $r12 \u003d Deserializers) r9\n  $r13 \u003d $r12.findBeanDeserializer(r0, r10, r11)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "OptionalHandlerFactory#_IsXOfY(...2)",
        "body": "{\r\n    return (expType !\u003d null) \u0026\u0026 expType.isAssignableFrom(valueType);\r\n}"
      },
      {
        "name": "OptionalHandlerFactory#instantiate(...2)",
        "body": "{\r\n    try {\r\n        return instantiate(Class.forName(className), valueType);\r\n    } catch (Throwable e) {\r\n        ExceptionUtil.rethrowIfFatal(e);\r\n        throw new IllegalStateException(\"Failed to find class `\" + className + \"` for handling values of type \" + ClassUtil.getTypeDescription(valueType) + \", problem: (\" + e.getClass().getName() + \") \" + e.getMessage());\r\n    }\r\n}"
      },
      {
        "name": "OptionalHandlerFactory#hasSuperClassStartingWith(...2)",
        "body": "{\r\n    for (Class\u003c?\u003e supertype \u003d rawType.getSuperclass(); supertype !\u003d null; supertype \u003d supertype.getSuperclass()) {\r\n        if (supertype \u003d\u003d Object.class) {\r\n            return false;\r\n        }\r\n        if (supertype.getName().startsWith(prefix)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory",
    "methodName": "hasDeserializerFor",
    "signature": "boolean hasDeserializerFor(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (_IsXOfY(valueType, CLASS_DOM_NODE)) {\r\n        return true;\r\n    }\r\n    if (_IsXOfY(valueType, CLASS_DOM_DOCUMENT)) {\r\n        return true;\r\n    }\r\n    String className \u003d valueType.getName();\r\n    if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSuperClassStartingWith(valueType, PACKAGE_PREFIX_JAVAX_XML)) {\r\n        return true;\r\n    }\r\n    // 06-Nov-2020, tatu: One of \"java.sql\" types?\r\n    return _sqlDeserializers.containsKey(className);\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z2 !\u003d 0) → B5 | else → B6",
      "B5 : If($z3 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  OptionalHandlerFactory\n  Class\n  $r2 \u003d Class CLASS_DOM_NODE\u003e\n  $z0 \u003d r0._IsXOfY(r1, $r2)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d Class CLASS_DOM_DOCUMENT\u003e\n  $z1 \u003d r0._IsXOfY(r1, $r3)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r4 \u003d r1.getName()\n  $z2 \u003d r4.startsWith(\"javax.xml.\")\n  if ($z2 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $z3 \u003d r0.hasSuperClassStartingWith(r1, \"javax.xml.\")\n  if ($z3 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $r5 \u003d Map _sqlDeserializers\u003e\n  $z4 \u003d $r5.containsKey(r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "OptionalHandlerFactory#_IsXOfY(...2)",
        "body": "{\r\n    return (expType !\u003d null) \u0026\u0026 expType.isAssignableFrom(valueType);\r\n}"
      },
      {
        "name": "OptionalHandlerFactory#hasSuperClassStartingWith(...2)",
        "body": "{\r\n    for (Class\u003c?\u003e supertype \u003d rawType.getSuperclass(); supertype !\u003d null; supertype \u003d supertype.getSuperclass()) {\r\n        if (supertype \u003d\u003d Object.class) {\r\n            return false;\r\n        }\r\n        if (supertype.getName().startsWith(prefix)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ext.SqlBlobSerializer",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.sql.Blob)",
    "visibility": "public",
    "body": "{\r\n    // Could see if \"length \u003d\u003d 0\" but that might be expensive operation\r\n    return (value \u003d\u003d null);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SqlBlobSerializer\n  SerializerProvider\n  Blob\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ext.SqlBlobSerializer",
    "methodName": "acceptJsonFormatVisitor",
    "signature": "void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    // 08-Nov-2020, tatu: Same problem as for `byte[]`... should\r\n    //    make work either as String/base64, or array of numbers,\r\n    //   with a qualifier that can be used to determine it\u0027s byte[]\r\n    JsonArrayFormatVisitor v2 \u003d visitor.expectArrayFormat(typeHint);\r\n    if (v2 !\u003d null) {\r\n        v2.itemsFormat(JsonFormatTypes.INTEGER);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SqlBlobSerializer\n  JsonFormatVisitorWrapper\n  JavaType\n  r2 \u003d r0.expectArrayFormat(r1)\n  if (r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d JsonFormatTypes INTEGER\u003e\n  r2.itemsFormat($r3)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "methodName": "annotations",
    "signature": "java.lang.Iterable annotations()",
    "visibility": "public",
    "body": "{\r\n    if (_classAnnotations instanceof AnnotationMap) {\r\n        return ((AnnotationMap) _classAnnotations).annotations();\r\n    } else if (_classAnnotations instanceof AnnotationCollector.OneAnnotation || _classAnnotations instanceof AnnotationCollector.TwoAnnotations) {\r\n        throw new UnsupportedOperationException(\"please use getAnnotations/ hasAnnotation to check for Annotations\");\r\n    }\r\n    return Collections.emptyList();\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4",
      "B3 : If($z2 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  AnnotatedClass\n  $r1 \u003d Annotations _classAnnotations\u003e\n  $z0 \u003d AnnotationMap\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d Annotations _classAnnotations\u003e\n  $r7 \u003d AnnotationMap) $r6\n  $r8 \u003d $r7.annotations()\n  return\n}",
      "B2 {\n  $r2 \u003d Annotations _classAnnotations\u003e\n  $z1 \u003d AnnotationCollector$OneAnnotation\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d Annotations _classAnnotations\u003e\n  $z2 \u003d AnnotationCollector$TwoAnnotations\n  if ($z2 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r3 \u003d UnsupportedOperationException\n  new UnsupportedOperationException(\"please use getAnnotations/ hasAnnotation to check for Annotations\")\n  throw $r3\n}",
      "B5 {\n  $r5 \u003d Collections.emptyList()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "methodName": "hasAnnotations",
    "signature": "boolean hasAnnotations()",
    "visibility": "public",
    "body": "{\r\n    return _classAnnotations.size() \u003e 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotatedClass\n  $r1 \u003d Annotations _classAnnotations\u003e\n  $i0 \u003d $r1.size()\n  if ($i0 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "methodName": "isNonStaticInnerClass",
    "signature": "boolean isNonStaticInnerClass()",
    "visibility": "public",
    "body": "{\r\n    Boolean B \u003d _nonStaticInnerClass;\r\n    if (B \u003d\u003d null) {\r\n        _nonStaticInnerClass \u003d B \u003d ClassUtil.isNonStaticInnerClass(_class);\r\n    }\r\n    return B.booleanValue();\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotatedClass\n  r3 \u003d Boolean _nonStaticInnerClass\u003e\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d Class _class\u003e\n  $z1 \u003d ClassUtil.isNonStaticInnerClass($r1)\n  $r2 \u003d Boolean.valueOf($z1)\n  r3 \u003d $r2\n  Boolean _nonStaticInnerClass\u003e \u003d $r2\n}",
      "B2 {\n  $z0 \u003d r3.booleanValue()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (!ClassUtil.hasClass(o, getClass())) {\r\n        return false;\r\n    }\r\n    return ((AnnotatedClass) o)._class \u003d\u003d _class;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($r5 !\u003d $r4) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  AnnotatedClass\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d r1.getClass()\n  $z0 \u003d ClassUtil.hasClass(r0, $r2)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d AnnotatedClass) r0\n  $r5 \u003d Class _class\u003e\n  $r4 \u003d Class _class\u003e\n  if ($r5 !\u003d $r4) goto B5 else B6\n}",
      "B5 {\n  $z1 \u003d 1\n  goto B7\n}",
      "B6 {\n  $z1 \u003d 0\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AnnotatedClass#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "methodName": "resolve",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass resolve(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MapperConfig\n  JavaType\n  ClassIntrospector$MixInResolver\n  $z0 \u003d r0.isArrayType()\n  if ($z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $r5 \u003d r0.getRawClass()\n  $z1 \u003d AnnotatedClassResolver.skippableArray(r2, $r5)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d r0.getRawClass()\n  $r7 \u003d AnnotatedClassResolver.createArrayType(r2, $r6)\n  return\n}",
      "B3 {\n  $r1 \u003d AnnotatedClassResolver\n  new AnnotatedClassResolver(r2, r0, r3)\n  $r4 \u003d $r1.resolveFully()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "methodName": "resolveWithoutSuperTypes",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass resolveWithoutSuperTypes(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MapperConfig\n  JavaType\n  ClassIntrospector$MixInResolver\n  $z0 \u003d r0.isArrayType()\n  if ($z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $r5 \u003d r0.getRawClass()\n  $z1 \u003d AnnotatedClassResolver.skippableArray(r2, $r5)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d r0.getRawClass()\n  $r7 \u003d AnnotatedClassResolver.createArrayType(r2, $r6)\n  return\n}",
      "B3 {\n  $r1 \u003d AnnotatedClassResolver\n  new AnnotatedClassResolver(r2, r0, r3)\n  $r4 \u003d $r1.resolveWithoutSuperTypes()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "methodName": "resolveWithoutSuperTypes",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass resolveWithoutSuperTypes(com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MapperConfig\n  Class\n  ClassIntrospector$MixInResolver\n  $z0 \u003d r0.isArray()\n  if ($z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $z1 \u003d AnnotatedClassResolver.skippableArray(r2, r0)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d AnnotatedClassResolver.createArrayType(r2, r0)\n  return\n}",
      "B3 {\n  $r1 \u003d AnnotatedClassResolver\n  new AnnotatedClassResolver(r2, r0, r3)\n  $r4 \u003d $r1.resolveWithoutSuperTypes()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "methodName": "getRawParameterType",
    "signature": "java.lang.Class getRawParameterType(int)",
    "visibility": "public",
    "body": "{\r\n    Class\u003c?\u003e[] types \u003d _constructor.getParameterTypes();\r\n    return (index \u003e\u003d types.length) ? null : types[index];\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c $i1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotatedConstructor\n  i0 :\u003d @parameter0: int\n  $r1 \u003d Constructor _constructor\u003e\n  r2 \u003d $r1.getParameterTypes()\n  $i1 \u003d lengthof r2\n  if (i0 \u003c $i1) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d null\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r2[i0]\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "methodName": "getParameterType",
    "signature": "com.fasterxml.jackson.databind.JavaType getParameterType(int)",
    "visibility": "public",
    "body": "{\r\n    Type[] types \u003d _constructor.getGenericParameterTypes();\r\n    if (index \u003e\u003d types.length) {\r\n        return null;\r\n    }\r\n    return _typeContext.resolveType(types[index]);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 \u003c $i1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotatedConstructor\n  i0 :\u003d @parameter0: int\n  $r1 \u003d Constructor _constructor\u003e\n  r2 \u003d $r1.getGenericParameterTypes()\n  $i1 \u003d lengthof r2\n  if (i0 \u003c $i1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d TypeResolutionContext _typeContext\u003e\n  $r3 \u003d r2[i0]\n  $r5 \u003d $r4.resolveType($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "methodName": "getGenericParameterType",
    "signature": "java.lang.reflect.Type getGenericParameterType(int)",
    "visibility": "public",
    "body": "{\r\n    Type[] types \u003d _constructor.getGenericParameterTypes();\r\n    if (index \u003e\u003d types.length) {\r\n        return null;\r\n    }\r\n    return types[index];\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 \u003c $i1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotatedConstructor\n  i0 :\u003d @parameter0: int\n  $r1 \u003d Constructor _constructor\u003e\n  r2 \u003d $r1.getGenericParameterTypes()\n  $i1 \u003d lengthof r2\n  if (i0 \u003c $i1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d r2[i0]\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    final int argCount \u003d _constructor.getParameterCount();\r\n    return String.format(\"[constructor for %s (%d arg%s), annotations: %s\", ClassUtil.nameOf(_constructor.getDeclaringClass()), argCount, (argCount \u003d\u003d 1) ? \"\" : \"s\", _annotations);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 !\u003d 1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotatedConstructor\n  $r1 \u003d Constructor _constructor\u003e\n  i0 \u003d $r1.getParameterCount()\n  $r2 \u003d Object)[4]\n  $r3 \u003d Constructor _constructor\u003e\n  $r4 \u003d $r3.getDeclaringClass()\n  $r5 \u003d ClassUtil.nameOf($r4)\n  $r2[0] \u003d $r5\n  $r6 \u003d Integer.valueOf(i0)\n  $r2[1] \u003d $r6\n  if (i0 !\u003d 1) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d \"\"\n  goto B3\n}",
      "B2 {\n  $r9 \u003d \"s\"\n}",
      "B3 {\n  $r2[2] \u003d $r9\n  $r7 \u003d AnnotationMap _annotations\u003e\n  $r2[3] \u003d $r7\n  $r8 \u003d String.format(\"constructor for %s (%d arg%s), annotations: %s\", $r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (!ClassUtil.hasClass(o, getClass())) {\r\n        return false;\r\n    }\r\n    AnnotatedConstructor other \u003d (AnnotatedConstructor) o;\r\n    return Objects.equals(_constructor, other._constructor);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  AnnotatedConstructor\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d r1.getClass()\n  $z0 \u003d ClassUtil.hasClass(r0, $r2)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r3 \u003d AnnotatedConstructor) r0\n  $r5 \u003d Constructor _constructor\u003e\n  $r4 \u003d Constructor _constructor\u003e\n  $z1 \u003d Objects.equals($r5, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AnnotatedConstructor#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (!ClassUtil.hasClass(o, getClass())) {\r\n        return false;\r\n    }\r\n    AnnotatedField other \u003d (AnnotatedField) o;\r\n    return Objects.equals(_field, other._field);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  AnnotatedField\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d r1.getClass()\n  $z0 \u003d ClassUtil.hasClass(r0, $r2)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r3 \u003d AnnotatedField) r0\n  $r5 \u003d Field _field\u003e\n  $r4 \u003d Field _field\u003e\n  $z1 \u003d Objects.equals($r5, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AnnotatedField#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "methodName": "getRawParameterType",
    "signature": "java.lang.Class getRawParameterType(int)",
    "visibility": "public",
    "body": "{\r\n    Class\u003c?\u003e[] types \u003d getRawParameterTypes();\r\n    return (index \u003e\u003d types.length) ? null : types[index];\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c $i1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotatedMethod\n  i0 :\u003d @parameter0: int\n  r1 \u003d r0.getRawParameterTypes()\n  $i1 \u003d lengthof r1\n  if (i0 \u003c $i1) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r1[i0]\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AnnotatedMethod#getRawParameterTypes(...0)",
        "body": "{\r\n    if (_paramClasses \u003d\u003d null) {\r\n        _paramClasses \u003d _method.getParameterTypes();\r\n    }\r\n    return _paramClasses;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "methodName": "getParameterType",
    "signature": "com.fasterxml.jackson.databind.JavaType getParameterType(int)",
    "visibility": "public",
    "body": "{\r\n    Type[] types \u003d _method.getGenericParameterTypes();\r\n    if (index \u003e\u003d types.length) {\r\n        return null;\r\n    }\r\n    return _typeContext.resolveType(types[index]);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 \u003c $i1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotatedMethod\n  i0 :\u003d @parameter0: int\n  $r1 \u003d Method _method\u003e\n  r2 \u003d $r1.getGenericParameterTypes()\n  $i1 \u003d lengthof r2\n  if (i0 \u003c $i1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d TypeResolutionContext _typeContext\u003e\n  $r3 \u003d r2[i0]\n  $r5 \u003d $r4.resolveType($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "methodName": "getGenericParameterType",
    "signature": "java.lang.reflect.Type getGenericParameterType(int)",
    "visibility": "public",
    "body": "{\r\n    Type[] types \u003d getGenericParameterTypes();\r\n    if (index \u003e\u003d types.length) {\r\n        return null;\r\n    }\r\n    return types[index];\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 \u003c $i1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotatedMethod\n  i0 :\u003d @parameter0: int\n  r1 \u003d r0.getGenericParameterTypes()\n  $i1 \u003d lengthof r1\n  if (i0 \u003c $i1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d r1[i0]\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AnnotatedMethod#getGenericParameterTypes(...0)",
        "body": "{\r\n    return _method.getGenericParameterTypes();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "methodName": "getFullName",
    "signature": "java.lang.String getFullName()",
    "visibility": "public",
    "body": "{\r\n    final String methodName \u003d super.getFullName();\r\n    switch(getParameterCount()) {\r\n        case 0:\r\n            return methodName + \"()\";\r\n        case 1:\r\n            return methodName + \"(\" + getRawParameterType(0).getName() + \")\";\r\n        default:\r\n    }\r\n    return String.format(\"%s(%d params)\", super.getFullName(), getParameterCount());\r\n}",
    "nodes": 4,
    "edges": 3,
    "cc": 1,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotatedMethod\n  r1 \u003d r0.getFullName()\n  $i0 \u003d r0.getParameterCount()\n  Object)[2]; }\n}",
      "B1 {\n  $r5 \u003d dynInvoke makeConcatWithConstants(r1)\n  return\n}",
      "B2 {\n  $r2 \u003d r0.getRawParameterType(0)\n  $r3 \u003d $r2.getName()\n  $r4 \u003d dynInvoke makeConcatWithConstants(r1, $r3)\n  return\n}",
      "B3 {\n  $r6 \u003d Object)[2]\n  $r7 \u003d r0.getFullName()\n  $r6[0] \u003d $r7\n  $i1 \u003d r0.getParameterCount()\n  $r8 \u003d Integer.valueOf($i1)\n  $r6[1] \u003d $r8\n  $r9 \u003d String.format(\"%s(%d params)\", $r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AnnotatedMethod#getParameterCount(...0)",
        "body": "{\r\n    return _method.getParameterCount();\r\n}"
      },
      {
        "name": "AnnotatedMethod#getRawParameterType(...1)",
        "body": "{\r\n    Class\u003c?\u003e[] types \u003d getRawParameterTypes();\r\n    return (index \u003e\u003d types.length) ? null : types[index];\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "methodName": "getRawParameterTypes",
    "signature": "java.lang.Class[] getRawParameterTypes()",
    "visibility": "public",
    "body": "{\r\n    if (_paramClasses \u003d\u003d null) {\r\n        _paramClasses \u003d _method.getParameterTypes();\r\n    }\r\n    return _paramClasses;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotatedMethod\n  $r1 \u003d Class[] _paramClasses\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Method _method\u003e\n  $r4 \u003d $r3.getParameterTypes()\n  Class[] _paramClasses\u003e \u003d $r4\n}",
      "B2 {\n  $r2 \u003d Class[] _paramClasses\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "methodName": "hasReturnType",
    "signature": "boolean hasReturnType()",
    "visibility": "public",
    "body": "{\r\n    Class\u003c?\u003e rt \u003d getRawReturnType();\r\n    // also, as per [databind#2675], only consider `void` to be real \"No return type\"\r\n    return (rt !\u003d Void.TYPE);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotatedMethod\n  r1 \u003d r0.getRawReturnType()\n  $r2 \u003d Class TYPE\u003e\n  if (r1 \u003d\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AnnotatedMethod#getRawReturnType(...0)",
        "body": "{\r\n    return _method.getReturnType();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (!ClassUtil.hasClass(o, getClass())) {\r\n        return false;\r\n    }\r\n    AnnotatedMethod other \u003d (AnnotatedMethod) o;\r\n    return Objects.equals(_method, other._method);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  AnnotatedMethod\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d r1.getClass()\n  $z0 \u003d ClassUtil.hasClass(r0, $r2)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r3 \u003d AnnotatedMethod) r0\n  $r5 \u003d Method _method\u003e\n  $r4 \u003d Method _method\u003e\n  $z1 \u003d Objects.equals($r5, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AnnotatedMethod#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap",
    "methodName": "size",
    "signature": "int size()",
    "visibility": "public",
    "body": "{\r\n    return (_methods \u003d\u003d null) ? 0 : _methods.size();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotatedMethodMap\n  $r1 \u003d Map _methods\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d 0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Map _methods\u003e\n  $i0 \u003d $r2.size()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap",
    "methodName": "find",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod find(java.lang.String,java.lang.Class[])",
    "visibility": "public",
    "body": "{\r\n    if (_methods \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return _methods.get(new MemberKey(name, paramTypes));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotatedMethodMap\n  String\n  Class[]\n  $r1 \u003d Map _methods\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r5 \u003d Map _methods\u003e\n  $r2 \u003d MemberKey\n  new MemberKey(r3, r4)\n  $r6 \u003d $r5.get($r2)\n  $r7 \u003d AnnotatedMethod) $r6\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap",
    "methodName": "find",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod find(java.lang.reflect.Method)",
    "visibility": "public",
    "body": "{\r\n    if (_methods \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return _methods.get(new MemberKey(m));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotatedMethodMap\n  Method\n  $r1 \u003d Map _methods\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d Map _methods\u003e\n  $r2 \u003d MemberKey\n  new MemberKey(r3)\n  $r5 \u003d $r4.get($r2)\n  $r6 \u003d AnnotatedMethod) $r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap",
    "methodName": "iterator",
    "signature": "java.util.Iterator iterator()",
    "visibility": "public",
    "body": "{\r\n    if (_methods \u003d\u003d null) {\r\n        return Collections.emptyIterator();\r\n    }\r\n    return _methods.values().iterator();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotatedMethodMap\n  $r1 \u003d Map _methods\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d Collections.emptyIterator()\n  return\n}",
      "B2 {\n  $r2 \u003d Map _methods\u003e\n  $r3 \u003d $r2.values()\n  $r4 \u003d $r3.iterator()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
    "methodName": "withAnnotations",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter withAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationMap)",
    "visibility": "public",
    "body": "{\r\n    if (ann \u003d\u003d _annotations) {\r\n        return this;\r\n    }\r\n    return _owner.replaceParameterAnnotations(_index, ann);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotatedParameter\n  AnnotationMap\n  $r2 \u003d AnnotationMap _annotations\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d AnnotatedWithParams _owner\u003e\n  $i0 \u003d AnnotatedParameter: int _index\u003e\n  $r4 \u003d $r3.replaceParameterAnnotations($i0, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (!ClassUtil.hasClass(o, getClass())) {\r\n        return false;\r\n    }\r\n    AnnotatedParameter other \u003d (AnnotatedParameter) o;\r\n    return other._owner.equals(_owner) \u0026\u0026 (other._index \u003d\u003d _index);\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B7",
      "B5 : If($i1 !\u003d $i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  AnnotatedParameter\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d r1.getClass()\n  $z0 \u003d ClassUtil.hasClass(r0, $r2)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r3 \u003d AnnotatedParameter) r0\n  $r5 \u003d AnnotatedWithParams _owner\u003e\n  $r4 \u003d AnnotatedWithParams _owner\u003e\n  $z1 \u003d $r5.equals($r4)\n  if ($z1 \u003d\u003d false) goto B5 else B7\n}",
      "B5 {\n  $i1 \u003d AnnotatedParameter: int _index\u003e\n  $i0 \u003d AnnotatedParameter: int _index\u003e\n  if ($i1 !\u003d $i0) goto B6 else B7\n}",
      "B6 {\n  $z2 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z2 \u003d 0\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AnnotatedParameter#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "create",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector create(com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "visibility": "public",
    "body": "{\r\n    if (primary \u003d\u003d null) {\r\n        return secondary;\r\n    }\r\n    if (secondary \u003d\u003d null) {\r\n        return primary;\r\n    }\r\n    return new AnnotationIntrospectorPair(primary, secondary);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r1 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospector\n  AnnotationIntrospector\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r2 \u003d AnnotationIntrospectorPair\n  new AnnotationIntrospectorPair(r0, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "isAnnotationBundle",
    "signature": "boolean isAnnotationBundle(java.lang.\u0027annotation\u0027.Annotation)",
    "visibility": "public",
    "body": "{\r\n    return _primary.isAnnotationBundle(ann) || _secondary.isAnnotationBundle(ann);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotation\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  $z0 \u003d $r2.isAnnotationBundle(r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d AnnotationIntrospector _secondary\u003e\n  $z1 \u003d $r3.isAnnotationBundle(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findPropertyIgnoralByName",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonIgnoreProperties$Value findPropertyIgnoralByName(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonIgnoreProperties.Value v2 \u003d _secondary.findPropertyIgnoralByName(config, ann);\r\n    JsonIgnoreProperties.Value v1 \u003d _primary.findPropertyIgnoralByName(config, ann);\r\n    return // shouldn\u0027t occur but\r\n    (v2 \u003d\u003d null) ? v1 : v2.withOverrides(v1);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  MapperConfig\n  Annotated\n  $r3 \u003d AnnotationIntrospector _secondary\u003e\n  r4 \u003d $r3.findPropertyIgnoralByName(r1, r2)\n  $r5 \u003d AnnotationIntrospector _primary\u003e\n  r6 \u003d $r5.findPropertyIgnoralByName(r1, r2)\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d r6\n  goto B3\n}",
      "B2 {\n  $r7 \u003d r4.withOverrides(r6)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findPropertyInclusionByName",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonIncludeProperties$Value findPropertyInclusionByName(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonIncludeProperties.Value v2 \u003d _secondary.findPropertyInclusionByName(config, a);\r\n    JsonIncludeProperties.Value v1 \u003d _primary.findPropertyInclusionByName(config, a);\r\n    return // shouldn\u0027t occur but\r\n    (v2 \u003d\u003d null) ? v1 : v2.withOverrides(v1);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  MapperConfig\n  Annotated\n  $r3 \u003d AnnotationIntrospector _secondary\u003e\n  r4 \u003d $r3.findPropertyInclusionByName(r1, r2)\n  $r5 \u003d AnnotationIntrospector _primary\u003e\n  r6 \u003d $r5.findPropertyInclusionByName(r1, r2)\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d r6\n  goto B3\n}",
      "B2 {\n  $r7 \u003d r4.withOverrides(r6)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "isIgnorableType",
    "signature": "java.lang.Boolean isIgnorableType(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    Boolean result \u003d _primary.isIgnorableType(ac);\r\n    if (result \u003d\u003d null) {\r\n        result \u003d _secondary.isIgnorableType(ac);\r\n    }\r\n    return result;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  AnnotatedClass\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r4 \u003d $r2.isIgnorableType(r1)\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d AnnotationIntrospector _secondary\u003e\n  r4 \u003d $r3.isIgnorableType(r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findFilterId",
    "signature": "java.lang.Object findFilterId(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    Object id \u003d _primary.findFilterId(ann);\r\n    if (id \u003d\u003d null) {\r\n        id \u003d _secondary.findFilterId(ann);\r\n    }\r\n    return id;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r4 \u003d $r2.findFilterId(r1)\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d AnnotationIntrospector _secondary\u003e\n  r4 \u003d $r3.findFilterId(r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findNamingStrategy",
    "signature": "java.lang.Object findNamingStrategy(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    Object str \u003d _primary.findNamingStrategy(ac);\r\n    if (str \u003d\u003d null) {\r\n        str \u003d _secondary.findNamingStrategy(ac);\r\n    }\r\n    return str;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  AnnotatedClass\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r4 \u003d $r2.findNamingStrategy(r1)\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d AnnotationIntrospector _secondary\u003e\n  r4 \u003d $r3.findNamingStrategy(r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findEnumNamingStrategy",
    "signature": "java.lang.Object findEnumNamingStrategy(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    Object str \u003d _primary.findEnumNamingStrategy(config, ac);\r\n    if (str \u003d\u003d null) {\r\n        str \u003d _secondary.findEnumNamingStrategy(config, ac);\r\n    }\r\n    return str;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r5 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  MapperConfig\n  AnnotatedClass\n  $r3 \u003d AnnotationIntrospector _primary\u003e\n  r5 \u003d $r3.findEnumNamingStrategy(r1, r2)\n  if (r5 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  r5 \u003d $r4.findEnumNamingStrategy(r1, r2)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findClassDescription",
    "signature": "java.lang.String findClassDescription(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    String str \u003d _primary.findClassDescription(ac);\r\n    if ((str \u003d\u003d null) || str.isEmpty()) {\r\n        str \u003d _secondary.findClassDescription(ac);\r\n    }\r\n    return str;\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r4 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  AnnotatedClass\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r4 \u003d $r2.findClassDescription(r1)\n  if (r4 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r4.isEmpty()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d AnnotationIntrospector _secondary\u003e\n  r4 \u003d $r3.findClassDescription(r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findPropertyIgnorals",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonIgnoreProperties$Value findPropertyIgnorals(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonIgnoreProperties.Value v2 \u003d _secondary.findPropertyIgnorals(a);\r\n    JsonIgnoreProperties.Value v1 \u003d _primary.findPropertyIgnorals(a);\r\n    return // shouldn\u0027t occur but\r\n    (v2 \u003d\u003d null) ? v1 : v2.withOverrides(v1);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _secondary\u003e\n  r3 \u003d $r2.findPropertyIgnorals(r1)\n  $r4 \u003d AnnotationIntrospector _primary\u003e\n  r5 \u003d $r4.findPropertyIgnorals(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d r5\n  goto B3\n}",
      "B2 {\n  $r6 \u003d r3.withOverrides(r5)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findPolymorphicTypeInfo",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonTypeInfo$Value findPolymorphicTypeInfo(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonTypeInfo.Value v \u003d _primary.findPolymorphicTypeInfo(config, ann);\r\n    if (v \u003d\u003d null) {\r\n        v \u003d _secondary.findPolymorphicTypeInfo(config, ann);\r\n    }\r\n    return v;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r5 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  MapperConfig\n  Annotated\n  $r3 \u003d AnnotationIntrospector _primary\u003e\n  r5 \u003d $r3.findPolymorphicTypeInfo(r1, r2)\n  if (r5 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  r5 \u003d $r4.findPolymorphicTypeInfo(r1, r2)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findTypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder findTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    TypeResolverBuilder\u003c?\u003e b \u003d _primary.findTypeResolver(config, ac, baseType);\r\n    if (b \u003d\u003d null) {\r\n        b \u003d _secondary.findTypeResolver(config, ac, baseType);\r\n    }\r\n    return b;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r6 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  MapperConfig\n  AnnotatedClass\n  JavaType\n  $r4 \u003d AnnotationIntrospector _primary\u003e\n  r6 \u003d $r4.findTypeResolver(r1, r2, r3)\n  if (r6 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d AnnotationIntrospector _secondary\u003e\n  r6 \u003d $r5.findTypeResolver(r1, r2, r3)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findPropertyTypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder findPropertyTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    TypeResolverBuilder\u003c?\u003e b \u003d _primary.findPropertyTypeResolver(config, am, baseType);\r\n    if (b \u003d\u003d null) {\r\n        b \u003d _secondary.findPropertyTypeResolver(config, am, baseType);\r\n    }\r\n    return b;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r6 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  MapperConfig\n  AnnotatedMember\n  JavaType\n  $r4 \u003d AnnotationIntrospector _primary\u003e\n  r6 \u003d $r4.findPropertyTypeResolver(r1, r2, r3)\n  if (r6 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d AnnotationIntrospector _secondary\u003e\n  r6 \u003d $r5.findPropertyTypeResolver(r1, r2, r3)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findPropertyContentTypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder findPropertyContentTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    TypeResolverBuilder\u003c?\u003e b \u003d _primary.findPropertyContentTypeResolver(config, am, baseType);\r\n    if (b \u003d\u003d null) {\r\n        b \u003d _secondary.findPropertyContentTypeResolver(config, am, baseType);\r\n    }\r\n    return b;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r6 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  MapperConfig\n  AnnotatedMember\n  JavaType\n  $r4 \u003d AnnotationIntrospector _primary\u003e\n  r6 \u003d $r4.findPropertyContentTypeResolver(r1, r2, r3)\n  if (r6 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d AnnotationIntrospector _secondary\u003e\n  r6 \u003d $r5.findPropertyContentTypeResolver(r1, r2, r3)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findSubtypes",
    "signature": "java.util.List findSubtypes(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    List\u003cNamedType\u003e types1 \u003d _primary.findSubtypes(a);\r\n    List\u003cNamedType\u003e types2 \u003d _secondary.findSubtypes(a);\r\n    if (types1 \u003d\u003d null || types1.isEmpty())\r\n        return types2;\r\n    if (types2 \u003d\u003d null || types2.isEmpty())\r\n        return types1;\r\n    ArrayList\u003cNamedType\u003e result \u003d new ArrayList\u003cNamedType\u003e(types1.size() + types2.size());\r\n    result.addAll(types1);\r\n    result.addAll(types2);\r\n    return result;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3",
      "B3 : If(r5 \u003d\u003d null) → B4 | else → B5",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findSubtypes(r1)\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  r5 \u003d $r4.findSubtypes(r1)\n  if (r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r3.isEmpty()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  if (r5 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  $z1 \u003d r5.isEmpty()\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r6 \u003d ArrayList\n  $i1 \u003d r3.size()\n  $i0 \u003d r5.size()\n  $i2 \u003d $i1 + $i0\n  new ArrayList($i2)\n  $r6.addAll(r3)\n  $r6.addAll(r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findTypeName",
    "signature": "java.lang.String findTypeName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    String name \u003d _primary.findTypeName(ac);\r\n    if (name \u003d\u003d null || name.isEmpty()) {\r\n        name \u003d _secondary.findTypeName(ac);\r\n    }\r\n    return name;\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r4 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  AnnotatedClass\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r4 \u003d $r2.findTypeName(r1)\n  if (r4 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r4.isEmpty()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d AnnotationIntrospector _secondary\u003e\n  r4 \u003d $r3.findTypeName(r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findReferenceType",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty findReferenceType(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "visibility": "public",
    "body": "{\r\n    ReferenceProperty r \u003d _primary.findReferenceType(member);\r\n    return (r \u003d\u003d null) ? _secondary.findReferenceType(member) : r;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  AnnotatedMember\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findReferenceType(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findReferenceType(r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findUnwrappingNameTransformer",
    "signature": "com.fasterxml.jackson.databind.util.NameTransformer findUnwrappingNameTransformer(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "visibility": "public",
    "body": "{\r\n    NameTransformer r \u003d _primary.findUnwrappingNameTransformer(member);\r\n    return (r \u003d\u003d null) ? _secondary.findUnwrappingNameTransformer(member) : r;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  AnnotatedMember\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findUnwrappingNameTransformer(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findUnwrappingNameTransformer(r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findInjectableValue",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JacksonInject$Value findInjectableValue(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "visibility": "public",
    "body": "{\r\n    JacksonInject.Value r \u003d _primary.findInjectableValue(m);\r\n    if (r \u003d\u003d null || r.getUseInput() \u003d\u003d null) {\r\n        JacksonInject.Value secondary \u003d _secondary.findInjectableValue(m);\r\n        if (secondary !\u003d null) {\r\n            r \u003d (r \u003d\u003d null) ? secondary : r.withUseInput(secondary.getUseInput());\r\n        }\r\n    }\r\n    return r;\r\n}",
    "nodes": 8,
    "edges": 11,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r7 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($r5 !\u003d null) → B2 | else → B7",
      "B2 : If($r6 \u003d\u003d null) → B3 | else → B7",
      "B3 : If(r7 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  AnnotatedMember\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r7 \u003d $r2.findInjectableValue(r1)\n  if (r7 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d r7.getUseInput()\n  if ($r5 !\u003d null) goto B2 else B7\n}",
      "B2 {\n  $r3 \u003d AnnotationIntrospector _secondary\u003e\n  $r6 \u003d $r3.findInjectableValue(r1)\n  if ($r6 \u003d\u003d null) goto B3 else B7\n}",
      "B3 {\n  if (r7 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r8 \u003d $r6\n  goto B6\n}",
      "B5 {\n  $r4 \u003d $r6.getUseInput()\n  $r8 \u003d r7.withUseInput($r4)\n}",
      "B6 {\n  r7 \u003d $r8\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "hasIgnoreMarker",
    "signature": "boolean hasIgnoreMarker(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "visibility": "public",
    "body": "{\r\n    return _primary.hasIgnoreMarker(m) || _secondary.hasIgnoreMarker(m);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  AnnotatedMember\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  $z0 \u003d $r2.hasIgnoreMarker(r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d AnnotationIntrospector _secondary\u003e\n  $z1 \u003d $r3.hasIgnoreMarker(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "hasRequiredMarker",
    "signature": "java.lang.Boolean hasRequiredMarker(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "visibility": "public",
    "body": "{\r\n    Boolean r \u003d _primary.hasRequiredMarker(m);\r\n    return (r \u003d\u003d null) ? _secondary.hasRequiredMarker(m) : r;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  AnnotatedMember\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.hasRequiredMarker(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.hasRequiredMarker(r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findInjectableValueId",
    "signature": "java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "visibility": "public",
    "body": "{\r\n    Object r \u003d _primary.findInjectableValueId(m);\r\n    return (r \u003d\u003d null) ? _secondary.findInjectableValueId(m) : r;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  AnnotatedMember\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findInjectableValueId(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findInjectableValueId(r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findSerializer",
    "signature": "java.lang.Object findSerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    Object r \u003d _primary.findSerializer(am);\r\n    if (_isExplicitClassOrOb(r, JsonSerializer.None.class)) {\r\n        return r;\r\n    }\r\n    return _explicitClassOrOb(_secondary.findSerializer(am), JsonSerializer.None.class);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findSerializer(r1)\n  $z0 \u003d r0._isExplicitClassOrOb(r3, class \"Lcom/fasterxml/jackson/databind/JsonSerializer$None;\")\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findSerializer(r1)\n  $r6 \u003d r0._explicitClassOrOb($r5, class \"Lcom/fasterxml/jackson/databind/JsonSerializer$None;\")\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AnnotationIntrospectorPair#_explicitClassOrOb(...2)",
        "body": "{\r\n    if ((maybeCls \u003d\u003d null) || (maybeCls \u003d\u003d implicit)) {\r\n        return null;\r\n    }\r\n    if ((maybeCls instanceof Class\u003c?\u003e) \u0026\u0026 ClassUtil.isBogusClass((Class\u003c?\u003e) maybeCls)) {\r\n        return null;\r\n    }\r\n    return maybeCls;\r\n}"
      },
      {
        "name": "AnnotationIntrospectorPair#_isExplicitClassOrOb(...2)",
        "body": "{\r\n    if ((maybeCls \u003d\u003d null) || (maybeCls \u003d\u003d implicit)) {\r\n        return false;\r\n    }\r\n    if (maybeCls instanceof Class\u003c?\u003e) {\r\n        return !ClassUtil.isBogusClass((Class\u003c?\u003e) maybeCls);\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findKeySerializer",
    "signature": "java.lang.Object findKeySerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    Object r \u003d _primary.findKeySerializer(a);\r\n    if (_isExplicitClassOrOb(r, JsonSerializer.None.class)) {\r\n        return r;\r\n    }\r\n    return _explicitClassOrOb(_secondary.findKeySerializer(a), JsonSerializer.None.class);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findKeySerializer(r1)\n  $z0 \u003d r0._isExplicitClassOrOb(r3, class \"Lcom/fasterxml/jackson/databind/JsonSerializer$None;\")\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findKeySerializer(r1)\n  $r6 \u003d r0._explicitClassOrOb($r5, class \"Lcom/fasterxml/jackson/databind/JsonSerializer$None;\")\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AnnotationIntrospectorPair#_explicitClassOrOb(...2)",
        "body": "{\r\n    if ((maybeCls \u003d\u003d null) || (maybeCls \u003d\u003d implicit)) {\r\n        return null;\r\n    }\r\n    if ((maybeCls instanceof Class\u003c?\u003e) \u0026\u0026 ClassUtil.isBogusClass((Class\u003c?\u003e) maybeCls)) {\r\n        return null;\r\n    }\r\n    return maybeCls;\r\n}"
      },
      {
        "name": "AnnotationIntrospectorPair#_isExplicitClassOrOb(...2)",
        "body": "{\r\n    if ((maybeCls \u003d\u003d null) || (maybeCls \u003d\u003d implicit)) {\r\n        return false;\r\n    }\r\n    if (maybeCls instanceof Class\u003c?\u003e) {\r\n        return !ClassUtil.isBogusClass((Class\u003c?\u003e) maybeCls);\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findContentSerializer",
    "signature": "java.lang.Object findContentSerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    Object r \u003d _primary.findContentSerializer(a);\r\n    if (_isExplicitClassOrOb(r, JsonSerializer.None.class)) {\r\n        return r;\r\n    }\r\n    return _explicitClassOrOb(_secondary.findContentSerializer(a), JsonSerializer.None.class);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findContentSerializer(r1)\n  $z0 \u003d r0._isExplicitClassOrOb(r3, class \"Lcom/fasterxml/jackson/databind/JsonSerializer$None;\")\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findContentSerializer(r1)\n  $r6 \u003d r0._explicitClassOrOb($r5, class \"Lcom/fasterxml/jackson/databind/JsonSerializer$None;\")\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AnnotationIntrospectorPair#_explicitClassOrOb(...2)",
        "body": "{\r\n    if ((maybeCls \u003d\u003d null) || (maybeCls \u003d\u003d implicit)) {\r\n        return null;\r\n    }\r\n    if ((maybeCls instanceof Class\u003c?\u003e) \u0026\u0026 ClassUtil.isBogusClass((Class\u003c?\u003e) maybeCls)) {\r\n        return null;\r\n    }\r\n    return maybeCls;\r\n}"
      },
      {
        "name": "AnnotationIntrospectorPair#_isExplicitClassOrOb(...2)",
        "body": "{\r\n    if ((maybeCls \u003d\u003d null) || (maybeCls \u003d\u003d implicit)) {\r\n        return false;\r\n    }\r\n    if (maybeCls instanceof Class\u003c?\u003e) {\r\n        return !ClassUtil.isBogusClass((Class\u003c?\u003e) maybeCls);\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findNullSerializer",
    "signature": "java.lang.Object findNullSerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    Object r \u003d _primary.findNullSerializer(a);\r\n    if (_isExplicitClassOrOb(r, JsonSerializer.None.class)) {\r\n        return r;\r\n    }\r\n    return _explicitClassOrOb(_secondary.findNullSerializer(a), JsonSerializer.None.class);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findNullSerializer(r1)\n  $z0 \u003d r0._isExplicitClassOrOb(r3, class \"Lcom/fasterxml/jackson/databind/JsonSerializer$None;\")\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findNullSerializer(r1)\n  $r6 \u003d r0._explicitClassOrOb($r5, class \"Lcom/fasterxml/jackson/databind/JsonSerializer$None;\")\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AnnotationIntrospectorPair#_explicitClassOrOb(...2)",
        "body": "{\r\n    if ((maybeCls \u003d\u003d null) || (maybeCls \u003d\u003d implicit)) {\r\n        return null;\r\n    }\r\n    if ((maybeCls instanceof Class\u003c?\u003e) \u0026\u0026 ClassUtil.isBogusClass((Class\u003c?\u003e) maybeCls)) {\r\n        return null;\r\n    }\r\n    return maybeCls;\r\n}"
      },
      {
        "name": "AnnotationIntrospectorPair#_isExplicitClassOrOb(...2)",
        "body": "{\r\n    if ((maybeCls \u003d\u003d null) || (maybeCls \u003d\u003d implicit)) {\r\n        return false;\r\n    }\r\n    if (maybeCls instanceof Class\u003c?\u003e) {\r\n        return !ClassUtil.isBogusClass((Class\u003c?\u003e) maybeCls);\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findPropertyInclusion",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonInclude$Value findPropertyInclusion(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonInclude.Value v2 \u003d _secondary.findPropertyInclusion(a);\r\n    JsonInclude.Value v1 \u003d _primary.findPropertyInclusion(a);\r\n    if (v2 \u003d\u003d null) {\r\n        // shouldn\u0027t occur but\r\n        return v1;\r\n    }\r\n    return v2.withOverrides(v1);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _secondary\u003e\n  r3 \u003d $r2.findPropertyInclusion(r1)\n  $r4 \u003d AnnotationIntrospector _primary\u003e\n  r5 \u003d $r4.findPropertyInclusion(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r6 \u003d r3.withOverrides(r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findSerializationTyping",
    "signature": "com.fasterxml.jackson.databind.\u0027annotation\u0027.JsonSerialize$Typing findSerializationTyping(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonSerialize.Typing r \u003d _primary.findSerializationTyping(a);\r\n    return (r \u003d\u003d null) ? _secondary.findSerializationTyping(a) : r;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findSerializationTyping(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findSerializationTyping(r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findSerializationConverter",
    "signature": "java.lang.Object findSerializationConverter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    Object r \u003d _primary.findSerializationConverter(a);\r\n    return (r \u003d\u003d null) ? _secondary.findSerializationConverter(a) : r;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findSerializationConverter(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findSerializationConverter(r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findSerializationContentConverter",
    "signature": "java.lang.Object findSerializationContentConverter(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "visibility": "public",
    "body": "{\r\n    Object r \u003d _primary.findSerializationContentConverter(a);\r\n    return (r \u003d\u003d null) ? _secondary.findSerializationContentConverter(a) : r;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  AnnotatedMember\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findSerializationContentConverter(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findSerializationContentConverter(r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findViews",
    "signature": "java.lang.Class[] findViews(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    /* Theoretically this could be trickier, if multiple introspectors\r\n         * return non-null entries. For now, though, we\u0027ll just consider\r\n         * first one to return non-null to win.\r\n         */\r\n    Class\u003c?\u003e[] result \u003d _primary.findViews(a);\r\n    if (result \u003d\u003d null) {\r\n        result \u003d _secondary.findViews(a);\r\n    }\r\n    return result;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r4 \u003d $r2.findViews(r1)\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d AnnotationIntrospector _secondary\u003e\n  r4 \u003d $r3.findViews(r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "isTypeId",
    "signature": "java.lang.Boolean isTypeId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "visibility": "public",
    "body": "{\r\n    Boolean b \u003d _primary.isTypeId(member);\r\n    return (b \u003d\u003d null) ? _secondary.isTypeId(member) : b;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  AnnotatedMember\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.isTypeId(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.isTypeId(r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findObjectIdInfo",
    "signature": "com.fasterxml.jackson.databind.introspect.ObjectIdInfo findObjectIdInfo(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    ObjectIdInfo r \u003d _primary.findObjectIdInfo(ann);\r\n    return (r \u003d\u003d null) ? _secondary.findObjectIdInfo(ann) : r;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findObjectIdInfo(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findObjectIdInfo(r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findFormat",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonFormat$Value findFormat(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonFormat.Value v1 \u003d _primary.findFormat(ann);\r\n    JsonFormat.Value v2 \u003d _secondary.findFormat(ann);\r\n    if (v2 \u003d\u003d null) {\r\n        // shouldn\u0027t occur but just in case\r\n        return v1;\r\n    }\r\n    return v2.withOverrides(v1);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r5 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findFormat(r1)\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  r5 \u003d $r4.findFormat(r1)\n  if (r5 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r6 \u003d r5.withOverrides(r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findPropertyDefaultValue",
    "signature": "java.lang.String findPropertyDefaultValue(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    String str \u003d _primary.findPropertyDefaultValue(ann);\r\n    return (str \u003d\u003d null || str.isEmpty()) ? _secondary.findPropertyDefaultValue(ann) : str;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findPropertyDefaultValue(r1)\n  if (r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r3.isEmpty()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findPropertyDefaultValue(r1)\n  goto B4\n}",
      "B3 {\n  $r5 \u003d r3\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findPropertyDescription",
    "signature": "java.lang.String findPropertyDescription(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    String r \u003d _primary.findPropertyDescription(ann);\r\n    return (r \u003d\u003d null) ? _secondary.findPropertyDescription(ann) : r;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findPropertyDescription(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findPropertyDescription(r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findPropertyIndex",
    "signature": "java.lang.Integer findPropertyIndex(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    Integer r \u003d _primary.findPropertyIndex(ann);\r\n    return (r \u003d\u003d null) ? _secondary.findPropertyIndex(ann) : r;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findPropertyIndex(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findPropertyIndex(r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findImplicitPropertyName",
    "signature": "java.lang.String findImplicitPropertyName(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "visibility": "public",
    "body": "{\r\n    String r \u003d _primary.findImplicitPropertyName(ann);\r\n    return (r \u003d\u003d null) ? _secondary.findImplicitPropertyName(ann) : r;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  AnnotatedMember\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findImplicitPropertyName(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findImplicitPropertyName(r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findPropertyAliases",
    "signature": "java.util.List findPropertyAliases(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    List\u003cPropertyName\u003e r \u003d _primary.findPropertyAliases(ann);\r\n    return (r \u003d\u003d null) ? _secondary.findPropertyAliases(ann) : r;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findPropertyAliases(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findPropertyAliases(r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findPropertyAccess",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonProperty$Access findPropertyAccess(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonProperty.Access acc \u003d _primary.findPropertyAccess(ann);\r\n    if ((acc !\u003d null) \u0026\u0026 (acc !\u003d JsonProperty.Access.AUTO)) {\r\n        return acc;\r\n    }\r\n    acc \u003d _secondary.findPropertyAccess(ann);\r\n    if (acc !\u003d null) {\r\n        return acc;\r\n    }\r\n    return JsonProperty.Access.AUTO;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r7 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r7 \u003d\u003d $r5) → B2 | else → B3",
      "B3 : If($r6 \u003d\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r7 \u003d $r2.findPropertyAccess(r1)\n  if (r7 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r5 \u003d JsonProperty$Access AUTO\u003e\n  if (r7 \u003d\u003d $r5) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r3 \u003d AnnotationIntrospector _secondary\u003e\n  $r6 \u003d $r3.findPropertyAccess(r1)\n  if ($r6 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r4 \u003d JsonProperty$Access AUTO\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "resolveSetterConflict",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod resolveSetterConflict(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMethod,com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "visibility": "public",
    "body": "{\r\n    AnnotatedMethod res \u003d _primary.resolveSetterConflict(config, setter1, setter2);\r\n    if (res \u003d\u003d null) {\r\n        res \u003d _secondary.resolveSetterConflict(config, setter1, setter2);\r\n    }\r\n    return res;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r6 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  MapperConfig\n  AnnotatedMethod\n  AnnotatedMethod\n  $r4 \u003d AnnotationIntrospector _primary\u003e\n  r6 \u003d $r4.resolveSetterConflict(r1, r2, r3)\n  if (r6 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d AnnotationIntrospector _secondary\u003e\n  r6 \u003d $r5.resolveSetterConflict(r1, r2, r3)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findSerializationPropertyOrder",
    "signature": "java.lang.String[] findSerializationPropertyOrder(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    String[] r \u003d _primary.findSerializationPropertyOrder(ac);\r\n    return (r \u003d\u003d null) ? _secondary.findSerializationPropertyOrder(ac) : r;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  AnnotatedClass\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findSerializationPropertyOrder(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findSerializationPropertyOrder(r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findSerializationSortAlphabetically",
    "signature": "java.lang.Boolean findSerializationSortAlphabetically(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    Boolean r \u003d _primary.findSerializationSortAlphabetically(ann);\r\n    return (r \u003d\u003d null) ? _secondary.findSerializationSortAlphabetically(ann) : r;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findSerializationSortAlphabetically(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findSerializationSortAlphabetically(r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "hasAsKey",
    "signature": "java.lang.Boolean hasAsKey(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    Boolean b \u003d _primary.hasAsKey(config, a);\r\n    if (b \u003d\u003d null) {\r\n        b \u003d _secondary.hasAsKey(config, a);\r\n    }\r\n    return b;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r5 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  MapperConfig\n  Annotated\n  $r3 \u003d AnnotationIntrospector _primary\u003e\n  r5 \u003d $r3.hasAsKey(r1, r2)\n  if (r5 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  r5 \u003d $r4.hasAsKey(r1, r2)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "hasAsValue",
    "signature": "java.lang.Boolean hasAsValue(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    Boolean b \u003d _primary.hasAsValue(a);\r\n    if (b \u003d\u003d null) {\r\n        b \u003d _secondary.hasAsValue(a);\r\n    }\r\n    return b;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r4 \u003d $r2.hasAsValue(r1)\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d AnnotationIntrospector _secondary\u003e\n  r4 \u003d $r3.hasAsValue(r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "hasAnyGetter",
    "signature": "java.lang.Boolean hasAnyGetter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    Boolean b \u003d _primary.hasAnyGetter(a);\r\n    if (b \u003d\u003d null) {\r\n        b \u003d _secondary.hasAnyGetter(a);\r\n    }\r\n    return b;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r4 \u003d $r2.hasAnyGetter(r1)\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d AnnotationIntrospector _secondary\u003e\n  r4 \u003d $r3.hasAnyGetter(r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findDefaultEnumValue",
    "signature": "java.lang.Enum findDefaultEnumValue(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    Enum\u003c?\u003e en \u003d _primary.findDefaultEnumValue(enumCls);\r\n    return (en \u003d\u003d null) ? _secondary.findDefaultEnumValue(enumCls) : en;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Class\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findDefaultEnumValue(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findDefaultEnumValue(r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findDefaultEnumValue",
    "signature": "java.lang.Enum findDefaultEnumValue(com.fasterxml.jackson.databind.introspect.AnnotatedClass,java.lang.Enum[])",
    "visibility": "public",
    "body": "{\r\n    Enum\u003c?\u003e en \u003d _primary.findDefaultEnumValue(annotatedClass, enumValues);\r\n    return (en \u003d\u003d null) ? _secondary.findDefaultEnumValue(annotatedClass, enumValues) : en;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  AnnotatedClass\n  Enum[]\n  $r3 \u003d AnnotationIntrospector _primary\u003e\n  r4 \u003d $r3.findDefaultEnumValue(r1, r2)\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d AnnotationIntrospector _secondary\u003e\n  $r6 \u003d $r5.findDefaultEnumValue(r1, r2)\n  goto B3\n}",
      "B2 {\n  $r6 \u003d r4\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findEnumValue",
    "signature": "java.lang.String findEnumValue(java.lang.Enum)",
    "visibility": "public",
    "body": "{\r\n    String r \u003d _primary.findEnumValue(value);\r\n    return (r \u003d\u003d null) ? _secondary.findEnumValue(value) : r;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Enum\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findEnumValue(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findEnumValue(r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "hasAsValueAnnotation",
    "signature": "boolean hasAsValueAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "visibility": "public",
    "body": "{\r\n    return _primary.hasAsValueAnnotation(am) || _secondary.hasAsValueAnnotation(am);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  AnnotatedMethod\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  $z0 \u003d $r2.hasAsValueAnnotation(r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d AnnotationIntrospector _secondary\u003e\n  $z1 \u003d $r3.hasAsValueAnnotation(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "hasAnyGetterAnnotation",
    "signature": "boolean hasAnyGetterAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "visibility": "public",
    "body": "{\r\n    return _primary.hasAnyGetterAnnotation(am) || _secondary.hasAnyGetterAnnotation(am);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  AnnotatedMethod\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  $z0 \u003d $r2.hasAnyGetterAnnotation(r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d AnnotationIntrospector _secondary\u003e\n  $z1 \u003d $r3.hasAnyGetterAnnotation(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findDeserializer",
    "signature": "java.lang.Object findDeserializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    Object r \u003d _primary.findDeserializer(a);\r\n    if (_isExplicitClassOrOb(r, JsonDeserializer.None.class)) {\r\n        return r;\r\n    }\r\n    return _explicitClassOrOb(_secondary.findDeserializer(a), JsonDeserializer.None.class);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findDeserializer(r1)\n  $z0 \u003d r0._isExplicitClassOrOb(r3, class \"Lcom/fasterxml/jackson/databind/JsonDeserializer$None;\")\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findDeserializer(r1)\n  $r6 \u003d r0._explicitClassOrOb($r5, class \"Lcom/fasterxml/jackson/databind/JsonDeserializer$None;\")\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AnnotationIntrospectorPair#_explicitClassOrOb(...2)",
        "body": "{\r\n    if ((maybeCls \u003d\u003d null) || (maybeCls \u003d\u003d implicit)) {\r\n        return null;\r\n    }\r\n    if ((maybeCls instanceof Class\u003c?\u003e) \u0026\u0026 ClassUtil.isBogusClass((Class\u003c?\u003e) maybeCls)) {\r\n        return null;\r\n    }\r\n    return maybeCls;\r\n}"
      },
      {
        "name": "AnnotationIntrospectorPair#_isExplicitClassOrOb(...2)",
        "body": "{\r\n    if ((maybeCls \u003d\u003d null) || (maybeCls \u003d\u003d implicit)) {\r\n        return false;\r\n    }\r\n    if (maybeCls instanceof Class\u003c?\u003e) {\r\n        return !ClassUtil.isBogusClass((Class\u003c?\u003e) maybeCls);\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findKeyDeserializer",
    "signature": "java.lang.Object findKeyDeserializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    Object r \u003d _primary.findKeyDeserializer(a);\r\n    if (_isExplicitClassOrOb(r, KeyDeserializer.None.class)) {\r\n        return r;\r\n    }\r\n    return _explicitClassOrOb(_secondary.findKeyDeserializer(a), KeyDeserializer.None.class);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findKeyDeserializer(r1)\n  $z0 \u003d r0._isExplicitClassOrOb(r3, class \"Lcom/fasterxml/jackson/databind/KeyDeserializer$None;\")\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findKeyDeserializer(r1)\n  $r6 \u003d r0._explicitClassOrOb($r5, class \"Lcom/fasterxml/jackson/databind/KeyDeserializer$None;\")\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AnnotationIntrospectorPair#_explicitClassOrOb(...2)",
        "body": "{\r\n    if ((maybeCls \u003d\u003d null) || (maybeCls \u003d\u003d implicit)) {\r\n        return null;\r\n    }\r\n    if ((maybeCls instanceof Class\u003c?\u003e) \u0026\u0026 ClassUtil.isBogusClass((Class\u003c?\u003e) maybeCls)) {\r\n        return null;\r\n    }\r\n    return maybeCls;\r\n}"
      },
      {
        "name": "AnnotationIntrospectorPair#_isExplicitClassOrOb(...2)",
        "body": "{\r\n    if ((maybeCls \u003d\u003d null) || (maybeCls \u003d\u003d implicit)) {\r\n        return false;\r\n    }\r\n    if (maybeCls instanceof Class\u003c?\u003e) {\r\n        return !ClassUtil.isBogusClass((Class\u003c?\u003e) maybeCls);\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findContentDeserializer",
    "signature": "java.lang.Object findContentDeserializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    Object r \u003d _primary.findContentDeserializer(am);\r\n    if (_isExplicitClassOrOb(r, JsonDeserializer.None.class)) {\r\n        return r;\r\n    }\r\n    return _explicitClassOrOb(_secondary.findContentDeserializer(am), JsonDeserializer.None.class);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findContentDeserializer(r1)\n  $z0 \u003d r0._isExplicitClassOrOb(r3, class \"Lcom/fasterxml/jackson/databind/JsonDeserializer$None;\")\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findContentDeserializer(r1)\n  $r6 \u003d r0._explicitClassOrOb($r5, class \"Lcom/fasterxml/jackson/databind/JsonDeserializer$None;\")\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AnnotationIntrospectorPair#_explicitClassOrOb(...2)",
        "body": "{\r\n    if ((maybeCls \u003d\u003d null) || (maybeCls \u003d\u003d implicit)) {\r\n        return null;\r\n    }\r\n    if ((maybeCls instanceof Class\u003c?\u003e) \u0026\u0026 ClassUtil.isBogusClass((Class\u003c?\u003e) maybeCls)) {\r\n        return null;\r\n    }\r\n    return maybeCls;\r\n}"
      },
      {
        "name": "AnnotationIntrospectorPair#_isExplicitClassOrOb(...2)",
        "body": "{\r\n    if ((maybeCls \u003d\u003d null) || (maybeCls \u003d\u003d implicit)) {\r\n        return false;\r\n    }\r\n    if (maybeCls instanceof Class\u003c?\u003e) {\r\n        return !ClassUtil.isBogusClass((Class\u003c?\u003e) maybeCls);\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findDeserializationConverter",
    "signature": "java.lang.Object findDeserializationConverter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    Object ob \u003d _primary.findDeserializationConverter(a);\r\n    return (ob \u003d\u003d null) ? _secondary.findDeserializationConverter(a) : ob;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findDeserializationConverter(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findDeserializationConverter(r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findDeserializationContentConverter",
    "signature": "java.lang.Object findDeserializationContentConverter(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "visibility": "public",
    "body": "{\r\n    Object ob \u003d _primary.findDeserializationContentConverter(a);\r\n    return (ob \u003d\u003d null) ? _secondary.findDeserializationContentConverter(a) : ob;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  AnnotatedMember\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findDeserializationContentConverter(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findDeserializationContentConverter(r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findValueInstantiator",
    "signature": "java.lang.Object findValueInstantiator(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    Object result \u003d _primary.findValueInstantiator(ac);\r\n    return (result \u003d\u003d null) ? _secondary.findValueInstantiator(ac) : result;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  AnnotatedClass\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findValueInstantiator(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findValueInstantiator(r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findPOJOBuilder",
    "signature": "java.lang.Class findPOJOBuilder(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    Class\u003c?\u003e result \u003d _primary.findPOJOBuilder(ac);\r\n    return (result \u003d\u003d null) ? _secondary.findPOJOBuilder(ac) : result;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  AnnotatedClass\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findPOJOBuilder(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findPOJOBuilder(r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findPOJOBuilderConfig",
    "signature": "com.fasterxml.jackson.databind.\u0027annotation\u0027.JsonPOJOBuilder$Value findPOJOBuilderConfig(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    JsonPOJOBuilder.Value result \u003d _primary.findPOJOBuilderConfig(ac);\r\n    return (result \u003d\u003d null) ? _secondary.findPOJOBuilderConfig(ac) : result;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  AnnotatedClass\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findPOJOBuilderConfig(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findPOJOBuilderConfig(r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "hasCreatorAnnotation",
    "signature": "boolean hasCreatorAnnotation(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    return _primary.hasCreatorAnnotation(a) || _secondary.hasCreatorAnnotation(a);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  $z0 \u003d $r2.hasCreatorAnnotation(r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d AnnotationIntrospector _secondary\u003e\n  $z1 \u003d $r3.hasCreatorAnnotation(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findCreatorBinding",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonCreator$Mode findCreatorBinding(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonCreator.Mode mode \u003d _primary.findCreatorBinding(a);\r\n    if (mode !\u003d null) {\r\n        return mode;\r\n    }\r\n    return _secondary.findCreatorBinding(a);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r3 \u003d $r2.findCreatorBinding(r1)\n  if (r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d AnnotationIntrospector _secondary\u003e\n  $r5 \u003d $r4.findCreatorBinding(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findCreatorAnnotation",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonCreator$Mode findCreatorAnnotation(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonCreator.Mode mode \u003d _primary.findCreatorAnnotation(config, a);\r\n    return (mode \u003d\u003d null) ? _secondary.findCreatorAnnotation(config, a) : mode;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  MapperConfig\n  Annotated\n  $r3 \u003d AnnotationIntrospector _primary\u003e\n  r4 \u003d $r3.findCreatorAnnotation(r1, r2)\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d AnnotationIntrospector _secondary\u003e\n  $r6 \u003d $r5.findCreatorAnnotation(r1, r2)\n  goto B3\n}",
      "B2 {\n  $r6 \u003d r4\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findDefaultCreator",
    "signature": "com.fasterxml.jackson.databind.introspect.PotentialCreator findDefaultCreator(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass,java.util.List,java.util.List)",
    "visibility": "public",
    "body": "{\r\n    PotentialCreator primaryCtor \u003d _primary.findDefaultCreator(config, valueClass, declaredConstructors, declaredFactories);\r\n    if (primaryCtor \u003d\u003d null) {\r\n        primaryCtor \u003d _secondary.findDefaultCreator(config, valueClass, declaredConstructors, declaredFactories);\r\n    }\r\n    return primaryCtor;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r7 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  MapperConfig\n  AnnotatedClass\n  List\n  List\n  $r5 \u003d AnnotationIntrospector _primary\u003e\n  r7 \u003d $r5.findDefaultCreator(r1, r2, r3, r4)\n  if (r7 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d AnnotationIntrospector _secondary\u003e\n  r7 \u003d $r6.findDefaultCreator(r1, r2, r3, r4)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "hasAnySetter",
    "signature": "java.lang.Boolean hasAnySetter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    Boolean b \u003d _primary.hasAnySetter(a);\r\n    if (b \u003d\u003d null) {\r\n        b \u003d _secondary.hasAnySetter(a);\r\n    }\r\n    return b;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r4 \u003d $r2.hasAnySetter(r1)\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d AnnotationIntrospector _secondary\u003e\n  r4 \u003d $r3.hasAnySetter(r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findSetterInfo",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonSetter$Value findSetterInfo(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonSetter.Value v2 \u003d _secondary.findSetterInfo(a);\r\n    JsonSetter.Value v1 \u003d _primary.findSetterInfo(a);\r\n    return // shouldn\u0027t occur but\r\n    (v2 \u003d\u003d null) ? v1 : v2.withOverrides(v1);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _secondary\u003e\n  r3 \u003d $r2.findSetterInfo(r1)\n  $r4 \u003d AnnotationIntrospector _primary\u003e\n  r5 \u003d $r4.findSetterInfo(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d r5\n  goto B3\n}",
      "B2 {\n  $r6 \u003d r3.withOverrides(r5)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "findMergeInfo",
    "signature": "java.lang.Boolean findMergeInfo(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    Boolean b \u003d _primary.findMergeInfo(a);\r\n    if (b \u003d\u003d null) {\r\n        b \u003d _secondary.findMergeInfo(a);\r\n    }\r\n    return b;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  Annotated\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  r4 \u003d $r2.findMergeInfo(r1)\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d AnnotationIntrospector _secondary\u003e\n  r4 \u003d $r3.findMergeInfo(r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair",
    "methodName": "hasAnySetterAnnotation",
    "signature": "boolean hasAnySetterAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "visibility": "public",
    "body": "{\r\n    return _primary.hasAnySetterAnnotation(am) || _secondary.hasAnySetterAnnotation(am);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  AnnotationIntrospectorPair\n  AnnotatedMethod\n  $r2 \u003d AnnotationIntrospector _primary\u003e\n  $z0 \u003d $r2.hasAnySetterAnnotation(r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d AnnotationIntrospector _secondary\u003e\n  $z1 \u003d $r3.hasAnySetterAnnotation(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "methodName": "get",
    "signature": "java.lang.\u0027annotation\u0027.Annotation get(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (_annotations \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return (A) _annotations.get(cls);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationMap\n  Class\n  $r1 \u003d HashMap _annotations\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d HashMap _annotations\u003e\n  $r4 \u003d $r3.get(r2)\n  $r5 \u003d Annotation) $r4\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "methodName": "has",
    "signature": "boolean has(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (_annotations \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return _annotations.containsKey(cls);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationMap\n  Class\n  $r1 \u003d HashMap _annotations\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d HashMap _annotations\u003e\n  $z0 \u003d $r3.containsKey(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "methodName": "hasOneOf",
    "signature": "boolean hasOneOf(java.lang.Class[])",
    "visibility": "public",
    "body": "{\r\n    if (_annotations !\u003d null) {\r\n        for (int i \u003d 0, end \u003d annoClasses.length; i \u003c end; ++i) {\r\n            if (_annotations.containsKey(annoClasses[i])) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B6",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B6",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  AnnotationMap\n  Class[]\n  $r1 \u003d HashMap _annotations\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  i1 \u003d 0\n  i0 \u003d lengthof r2\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B6\n}",
      "B3 {\n  $r4 \u003d HashMap _annotations\u003e\n  $r3 \u003d r2[i1]\n  $z0 \u003d $r4.containsKey($r3)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "methodName": "annotations",
    "signature": "java.lang.Iterable annotations()",
    "visibility": "public",
    "body": "{\r\n    if (_annotations \u003d\u003d null || _annotations.size() \u003d\u003d 0) {\r\n        return Collections.emptyList();\r\n    }\r\n    return _annotations.values();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($i0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  AnnotationMap\n  $r1 \u003d HashMap _annotations\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d HashMap _annotations\u003e\n  $i0 \u003d $r3.size()\n  if ($i0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d Collections.emptyList()\n  return\n}",
      "B3 {\n  $r4 \u003d HashMap _annotations\u003e\n  $r5 \u003d $r4.values()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "methodName": "merge",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap merge(com.fasterxml.jackson.databind.introspect.AnnotationMap,com.fasterxml.jackson.databind.introspect.AnnotationMap)",
    "visibility": "public",
    "body": "{\r\n    if (primary \u003d\u003d null || primary._annotations \u003d\u003d null || primary._annotations.isEmpty()) {\r\n        return secondary;\r\n    }\r\n    if (secondary \u003d\u003d null || secondary._annotations \u003d\u003d null || secondary._annotations.isEmpty()) {\r\n        return primary;\r\n    }\r\n    HashMap\u003cClass\u003c?\u003e, Annotation\u003e annotations \u003d new HashMap\u003cClass\u003c?\u003e, Annotation\u003e();\r\n    // add secondary ones first\r\n    for (Annotation ann : secondary._annotations.values()) {\r\n        annotations.put(ann.annotationType(), ann);\r\n    }\r\n    // to be overridden by primary ones\r\n    for (Annotation ann : primary._annotations.values()) {\r\n        annotations.put(ann.annotationType(), ann);\r\n    }\r\n    return new AnnotationMap(annotations);\r\n}",
    "nodes": 15,
    "edges": 20,
    "cc": 7,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($r2 \u003d\u003d null) → B2 | else → B3",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If(r1 \u003d\u003d null) → B5 | else → B7",
      "B5 : If($r4 \u003d\u003d null) → B6 | else → B7",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B8",
      "B9 : If($z2 \u003d\u003d false) → B10 | else → B11",
      "B12 : If($z3 \u003d\u003d false) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  AnnotationMap\n  AnnotationMap\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d HashMap _annotations\u003e\n  if ($r2 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d HashMap _annotations\u003e\n  $z0 \u003d $r3.isEmpty()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r1 \u003d\u003d null) goto B5 else B7\n}",
      "B5 {\n  $r4 \u003d HashMap _annotations\u003e\n  if ($r4 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r5 \u003d HashMap _annotations\u003e\n  $z1 \u003d $r5.isEmpty()\n  if ($z1 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $r6 \u003d HashMap\n  new HashMap()\n  $r7 \u003d HashMap _annotations\u003e\n  $r8 \u003d $r7.values()\n  r16 \u003d $r8.iterator()\n}",
      "B9 {\n  $z2 \u003d r16.hasNext()\n  if ($z2 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  $r14 \u003d r16.next()\n  r17 \u003d Annotation) $r14\n  $r15 \u003d r17.annotationType()\n  $r6.put($r15, r17)\n  goto B9\n}",
      "B11 {\n  $r9 \u003d HashMap _annotations\u003e\n  $r10 \u003d $r9.values()\n  r18 \u003d $r10.iterator()\n}",
      "B12 {\n  $z3 \u003d r18.hasNext()\n  if ($z3 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  $r12 \u003d r18.next()\n  r19 \u003d Annotation) $r12\n  $r13 \u003d r19.annotationType()\n  $r6.put($r13, r19)\n  goto B12\n}",
      "B14 {\n  $r11 \u003d AnnotationMap\n  new AnnotationMap($r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B9",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B12",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "methodName": "size",
    "signature": "int size()",
    "visibility": "public",
    "body": "{\r\n    return (_annotations \u003d\u003d null) ? 0 : _annotations.size();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationMap\n  $r1 \u003d HashMap _annotations\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d 0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d HashMap _annotations\u003e\n  $i0 \u003d $r2.size()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "methodName": "addIfNotPresent",
    "signature": "boolean addIfNotPresent(java.lang.\u0027annotation\u0027.Annotation)",
    "visibility": "public",
    "body": "{\r\n    if (_annotations \u003d\u003d null || !_annotations.containsKey(ann.annotationType())) {\r\n        _add(ann);\r\n        return true;\r\n    }\r\n    return false;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  AnnotationMap\n  Annotation\n  $r1 \u003d HashMap _annotations\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d HashMap _annotations\u003e\n  $r4 \u003d r2.annotationType()\n  $z0 \u003d $r3.containsKey($r4)\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  r0._add(r2)\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AnnotationMap#_add(...1)",
        "body": "{\r\n    if (_annotations \u003d\u003d null) {\r\n        _annotations \u003d new HashMap\u003cClass\u003c?\u003e, Annotation\u003e();\r\n    }\r\n    Annotation previous \u003d _annotations.put(ann.annotationType(), ann);\r\n    return (previous \u003d\u003d null) || !previous.equals(ann);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    if (_annotations \u003d\u003d null) {\r\n        return \"[null]\";\r\n    }\r\n    return _annotations.toString();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotationMap\n  $r1 \u003d HashMap _annotations\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d HashMap _annotations\u003e\n  $r3 \u003d $r2.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "removeProperty",
    "signature": "boolean removeProperty(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    Iterator\u003cBeanPropertyDefinition\u003e it \u003d _properties().iterator();\r\n    while (it.hasNext()) {\r\n        BeanPropertyDefinition prop \u003d it.next();\r\n        if (prop.getName().equals(propName)) {\r\n            it.remove();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  String\n  $r1 \u003d r0._properties()\n  r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r3 \u003d r2.next()\n  r4 \u003d BeanPropertyDefinition) $r3\n  $r6 \u003d r4.getName()\n  $z1 \u003d $r6.equals(r5)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  r2.remove()\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BasicBeanDescription#_properties(...0)",
        "body": "{\r\n    if (_properties \u003d\u003d null) {\r\n        _properties \u003d _propCollector.getProperties();\r\n    }\r\n    return _properties;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "addProperty",
    "signature": "boolean addProperty(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition)",
    "visibility": "public",
    "body": "{\r\n    // first: ensure we do not have such property\r\n    if (hasProperty(def.getFullName())) {\r\n        return false;\r\n    }\r\n    _properties().add(def);\r\n    return true;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  BeanPropertyDefinition\n  $r2 \u003d r1.getFullName()\n  $z0 \u003d r0.hasProperty($r2)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d r0._properties()\n  $r3.add(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BasicBeanDescription#hasProperty(...1)",
        "body": "{\r\n    return findProperty(name) !\u003d null;\r\n}"
      },
      {
        "name": "BasicBeanDescription#_properties(...0)",
        "body": "{\r\n    if (_properties \u003d\u003d null) {\r\n        _properties \u003d _propCollector.getProperties();\r\n    }\r\n    return _properties;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "hasProperty",
    "signature": "boolean hasProperty(com.fasterxml.jackson.databind.PropertyName)",
    "visibility": "public",
    "body": "{\r\n    return findProperty(name) !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  PropertyName\n  $r2 \u003d r0.findProperty(r1)\n  if ($r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BasicBeanDescription#findProperty(...1)",
        "body": "{\r\n    for (BeanPropertyDefinition prop : _properties()) {\r\n        if (prop.hasName(name)) {\r\n            return prop;\r\n        }\r\n    }\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "findProperty",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition findProperty(com.fasterxml.jackson.databind.PropertyName)",
    "visibility": "public",
    "body": "{\r\n    for (BeanPropertyDefinition prop : _properties()) {\r\n        if (prop.hasName(name)) {\r\n            return prop;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  PropertyName\n  $r1 \u003d r0._properties()\n  r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r3 \u003d r2.next()\n  r4 \u003d BeanPropertyDefinition) $r3\n  $z1 \u003d r4.hasName(r5)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BasicBeanDescription#_properties(...0)",
        "body": "{\r\n    if (_properties \u003d\u003d null) {\r\n        _properties \u003d _propCollector.getProperties();\r\n    }\r\n    return _properties;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "findJsonKeyAccessor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember findJsonKeyAccessor()",
    "visibility": "public",
    "body": "{\r\n    return (_propCollector \u003d\u003d null) ? null : _propCollector.getJsonKeyAccessor();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  $r1 \u003d POJOPropertiesCollector _propCollector\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d POJOPropertiesCollector _propCollector\u003e\n  $r3 \u003d $r2.getJsonKeyAccessor()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "findJsonValueAccessor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember findJsonValueAccessor()",
    "visibility": "public",
    "body": "{\r\n    return (_propCollector \u003d\u003d null) ? null : _propCollector.getJsonValueAccessor();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  $r1 \u003d POJOPropertiesCollector _propCollector\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d POJOPropertiesCollector _propCollector\u003e\n  $r3 \u003d $r2.getJsonValueAccessor()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "getIgnoredPropertyNames",
    "signature": "java.util.Set getIgnoredPropertyNames()",
    "visibility": "public",
    "body": "{\r\n    Set\u003cString\u003e ign \u003d (_propCollector \u003d\u003d null) ? null : _propCollector.getIgnoredPropertyNames();\r\n    if (ign \u003d\u003d null) {\r\n        return Collections.emptySet();\r\n    }\r\n    return ign;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B3 : If($r4 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  $r1 \u003d POJOPropertiesCollector _propCollector\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d POJOPropertiesCollector _propCollector\u003e\n  $r4 \u003d $r2.getIgnoredPropertyNames()\n}",
      "B3 {\n  if ($r4 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r3 \u003d Collections.emptySet()\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "findAnySetterAccessor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember findAnySetterAccessor()",
    "visibility": "public",
    "body": "{\r\n    if (_propCollector !\u003d null) {\r\n        AnnotatedMethod anyMethod \u003d _propCollector.getAnySetterMethod();\r\n        if (anyMethod !\u003d null) {\r\n            // Also, let\u0027s be somewhat strict on how field name is to be\r\n            // passed; String, Object make sense, others not so much.\r\n            /* !!! 18-May-2009, tatu: how about enums? Can add support if\r\n                 *  requested; easy enough for devs to add support within method.\r\n                 */\r\n            Class\u003c?\u003e type \u003d anyMethod.getRawParameterType(0);\r\n            if ((type !\u003d String.class) \u0026\u0026 (type !\u003d Object.class)) {\r\n                throw new IllegalArgumentException(String.format(\"Invalid \u0027any-setter\u0027 annotation on method \u0027%s()\u0027: first argument not of type String or Object, but %s\", anyMethod.getName(), type.getName()));\r\n            }\r\n            return anyMethod;\r\n        }\r\n        AnnotatedMember anyField \u003d _propCollector.getAnySetterField();\r\n        if (anyField !\u003d null) {\r\n            // For now let\u0027s require a Map; in future can add support for other\r\n            // types like perhaps Iterable\u003cMap.Entry\u003e?\r\n            Class\u003c?\u003e type \u003d anyField.getRawType();\r\n            if (!Map.class.isAssignableFrom(type) \u0026\u0026 !JsonNode.class.isAssignableFrom(type)) {\r\n                throw new IllegalArgumentException(String.format(\"Invalid \u0027any-setter\u0027 annotation on field \u0027%s\u0027: type is not instance of `java.util.Map` or `JsonNode`\", anyField.getName()));\r\n            }\r\n            return anyField;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B11",
      "B1 : If(r3 \u003d\u003d null) → B2 | else → B6",
      "B2 : If(r17 \u003d\u003d class \"Ljava/lang/String;\") → B3 | else → B5",
      "B3 : If(r17 \u003d\u003d class \"Ljava/lang/Object;\") → B4 | else → B5",
      "B6 : If(r18 \u003d\u003d null) → B7 | else → B11",
      "B7 : If($z0 !\u003d 0) → B8 | else → B10",
      "B8 : If($z1 !\u003d 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  $r1 \u003d POJOPropertiesCollector _propCollector\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B11\n}",
      "B1 {\n  $r2 \u003d POJOPropertiesCollector _propCollector\u003e\n  r3 \u003d $r2.getAnySetterMethod()\n  if (r3 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  r17 \u003d r3.getRawParameterType(0)\n  if (r17 \u003d\u003d class \"Ljava/lang/String;\") goto B3 else B5\n}",
      "B3 {\n  if (r17 \u003d\u003d class \"Ljava/lang/Object;\") goto B4 else B5\n}",
      "B4 {\n  $r12 \u003d IllegalArgumentException\n  $r13 \u003d Object)[2]\n  $r14 \u003d r3.getName()\n  $r13[0] \u003d $r14\n  $r15 \u003d r17.getName()\n  $r13[1] \u003d $r15\n  $r16 \u003d String.format(\"Invalid \\\u0027any-setter\\\u0027 annotation on method \\\u0027%s()\\\u0027: first argument not of type String or Object, but %s\", $r13)\n  new IllegalArgumentException($r16)\n  throw $r12\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r4 \u003d POJOPropertiesCollector _propCollector\u003e\n  r18 \u003d $r4.getAnySetterField()\n  if (r18 \u003d\u003d null) goto B7 else B11\n}",
      "B7 {\n  r5 \u003d r18.getRawType()\n  $r6 \u003d class \"Ljava/util/Map;\"\n  $z0 \u003d $r6.isAssignableFrom(r5)\n  if ($z0 !\u003d 0) goto B8 else B10\n}",
      "B8 {\n  $r7 \u003d class \"Lcom/fasterxml/jackson/databind/JsonNode;\"\n  $z1 \u003d $r7.isAssignableFrom(r5)\n  if ($z1 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  $r8 \u003d IllegalArgumentException\n  $r9 \u003d Object)[1]\n  $r10 \u003d r18.getName()\n  $r9[0] \u003d $r10\n  $r11 \u003d String.format(\"Invalid \\\u0027any-setter\\\u0027 annotation on field \\\u0027%s\\\u0027: type is not instance of `java.util.Map` or `JsonNode`\", $r9)\n  new IllegalArgumentException($r11)\n  throw $r8\n}",
      "B10 {\n  return\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B11",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "findInjectables",
    "signature": "java.util.Map findInjectables()",
    "visibility": "public",
    "body": "{\r\n    if (_propCollector !\u003d null) {\r\n        return _propCollector.getInjectables();\r\n    }\r\n    return Collections.emptyMap();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  $r1 \u003d POJOPropertiesCollector _propCollector\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d POJOPropertiesCollector _propCollector\u003e\n  $r4 \u003d $r3.getInjectables()\n  return\n}",
      "B2 {\n  $r2 \u003d Collections.emptyMap()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "getConstructorsWithMode",
    "signature": "java.util.List getConstructorsWithMode()",
    "visibility": "public",
    "body": "{\r\n    List\u003cAnnotatedConstructor\u003e allCtors \u003d _classInfo.getConstructors();\r\n    if (allCtors.isEmpty()) {\r\n        return Collections.emptyList();\r\n    }\r\n    List\u003cAnnotatedAndMetadata\u003cAnnotatedConstructor, JsonCreator.Mode\u003e\u003e result \u003d new ArrayList\u003c\u003e();\r\n    for (AnnotatedConstructor ctor : allCtors) {\r\n        JsonCreator.Mode mode \u003d _annotationIntrospector.findCreatorAnnotation(_config, ctor);\r\n        if (mode \u003d\u003d JsonCreator.Mode.DISABLED) {\r\n            continue;\r\n        }\r\n        result.add(AnnotatedAndMetadata.of(ctor, mode));\r\n    }\r\n    return result;\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B7",
      "B4 : If(r9 !\u003d $r10) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  $r1 \u003d AnnotatedClass _classInfo\u003e\n  r2 \u003d $r1.getConstructors()\n  $z0 \u003d r2.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r12 \u003d Collections.emptyList()\n  return\n}",
      "B2 {\n  $r3 \u003d ArrayList\n  new ArrayList()\n  r4 \u003d r2.iterator()\n}",
      "B3 {\n  $z1 \u003d r4.hasNext()\n  if ($z1 \u003d\u003d false) goto B4 else B7\n}",
      "B4 {\n  $r5 \u003d r4.next()\n  r6 \u003d AnnotatedConstructor) $r5\n  $r8 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r7 \u003d MapperConfig _config\u003e\n  r9 \u003d $r8.findCreatorAnnotation($r7, r6)\n  $r10 \u003d JsonCreator$Mode DISABLED\u003e\n  if (r9 !\u003d $r10) goto B5 else B6\n}",
      "B5 {\n  goto B3\n}",
      "B6 {\n  $r11 \u003d AnnotatedAndMetadata.of(r6, r9)\n  $r3.add($r11)\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B3",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "getPotentialCreators",
    "signature": "com.fasterxml.jackson.databind.introspect.PotentialCreators getPotentialCreators()",
    "visibility": "public",
    "body": "{\r\n    if (_propCollector \u003d\u003d null) {\r\n        return new PotentialCreators();\r\n    }\r\n    return _propCollector.getPotentialCreators();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  $r1 \u003d POJOPropertiesCollector _propCollector\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d PotentialCreators\n  new PotentialCreators()\n  return\n}",
      "B2 {\n  $r2 \u003d POJOPropertiesCollector _propCollector\u003e\n  $r3 \u003d $r2.getPotentialCreators()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "instantiateBean",
    "signature": "java.lang.Object instantiateBean(boolean)",
    "visibility": "public",
    "body": "{\r\n    AnnotatedConstructor ac \u003d _classInfo.getDefaultConstructor();\r\n    if (ac \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (fixAccess) {\r\n        ac.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\r\n    }\r\n    try {\r\n        return ac.call();\r\n    } catch (Exception e) {\r\n        Throwable t \u003d e;\r\n        while (t.getCause() !\u003d null) {\r\n            t \u003d t.getCause();\r\n        }\r\n        ClassUtil.throwIfError(t);\r\n        ClassUtil.throwIfRTE(t);\r\n        throw new IllegalArgumentException(\"Failed to instantiate bean of type \" + _classInfo.getAnnotated().getName() + \": (\" + t.getClass().getName() + \") \" + ClassUtil.exceptionMessage(t), t);\r\n    }\r\n}",
    "nodes": 9,
    "edges": 9,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2",
      "B2 : If(z0 \u003d\u003d false) → B3 | else → B4",
      "B6 : If($r7 \u003d\u003d null) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  z0 :\u003d @parameter0: boolean\n  $r1 \u003d AnnotatedClass _classInfo\u003e\n  r2 \u003d $r1.getDefaultConstructor()\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d MapperConfig _config\u003e\n  $r4 \u003d MapperFeature OVERRIDE_PUBLIC_ACCESS_MODIFIERS\u003e\n  $z1 \u003d $r5.isEnabled($r4)\n  r2.fixAccess($z1)\n}",
      "B4 {\n  $r3 \u003d r2.call()\n  return\n}",
      "B5 {\n  $r6 :\u003d @caughtexception\n  r16 \u003d $r6\n}",
      "B6 {\n  $r7 \u003d r16.getCause()\n  if ($r7 \u003d\u003d null) goto B7 else B8\n}",
      "B7 {\n  r16 \u003d r16.getCause()\n  goto B6\n}",
      "B8 {\n  ClassUtil.throwIfError(r16)\n  ClassUtil.throwIfRTE(r16)\n  $r8 \u003d IllegalArgumentException\n  $r9 \u003d AnnotatedClass _classInfo\u003e\n  $r10 \u003d $r9.getAnnotated()\n  $r14 \u003d $r10.getName()\n  $r11 \u003d r16.getClass()\n  $r13 \u003d $r11.getName()\n  $r12 \u003d ClassUtil.exceptionMessage(r16)\n  $r15 \u003d dynInvoke makeConcatWithConstants($r14, $r13, $r12)\n  new IllegalArgumentException($r15, r16)\n  throw $r8\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B6",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "findExpectedFormat",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonFormat$Value findExpectedFormat()",
    "visibility": "public",
    "body": "{\r\n    if (_propCollector \u003d\u003d null) {\r\n        return JsonFormat.Value.empty();\r\n    }\r\n    return _propCollector.getFormatOverrides();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  $r1 \u003d POJOPropertiesCollector _propCollector\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d JsonFormat$Value.empty()\n  return\n}",
      "B2 {\n  $r2 \u003d POJOPropertiesCollector _propCollector\u003e\n  $r3 \u003d $r2.getFormatOverrides()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "findDefaultViews",
    "signature": "java.lang.Class[] findDefaultViews()",
    "visibility": "public",
    "body": "{\r\n    if (!_defaultViewsResolved) {\r\n        _defaultViewsResolved \u003d true;\r\n        Class\u003c?\u003e[] def \u003d (_annotationIntrospector \u003d\u003d null) ? null : _annotationIntrospector.findViews(_classInfo);\r\n        // one more twist: if default inclusion disabled, need to force empty set of views\r\n        if (def \u003d\u003d null) {\r\n            if (!_config.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {\r\n                def \u003d NO_VIEWS;\r\n            }\r\n        }\r\n        _defaultViews \u003d def;\r\n    }\r\n    return _defaultViews;\r\n}",
    "nodes": 9,
    "edges": 12,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B8",
      "B1 : If($r1 !\u003d null) → B2 | else → B3",
      "B4 : If($r6 !\u003d null) → B5 | else → B7",
      "B5 : If($z1 !\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  $z0 \u003d BasicBeanDescription: boolean _defaultViewsResolved\u003e\n  if ($z0 !\u003d 0) goto B1 else B8\n}",
      "B1 {\n  BasicBeanDescription: boolean _defaultViewsResolved\u003e \u003d 1\n  $r1 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  if ($r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d null\n  goto B4\n}",
      "B3 {\n  $r3 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r2 \u003d AnnotatedClass _classInfo\u003e\n  $r6 \u003d $r3.findViews($r2)\n}",
      "B4 {\n  r7 \u003d $r6\n  if ($r6 !\u003d null) goto B5 else B7\n}",
      "B5 {\n  $r5 \u003d MapperConfig _config\u003e\n  $r4 \u003d MapperFeature DEFAULT_VIEW_INCLUSION\u003e\n  $z1 \u003d $r5.isEnabled($r4)\n  if ($z1 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  r7 \u003d Class[] NO_VIEWS\u003e\n}",
      "B7 {\n  Class[] _defaultViews\u003e \u003d r7\n}",
      "B8 {\n  $r8 \u003d Class[] _defaultViews\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B8",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "findSerializationConverter",
    "signature": "com.fasterxml.jackson.databind.util.Converter findSerializationConverter()",
    "visibility": "public",
    "body": "{\r\n    if (_annotationIntrospector \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return _createConverter(_annotationIntrospector.findSerializationConverter(_classInfo));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  $r1 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r2 \u003d AnnotatedClass _classInfo\u003e\n  $r4 \u003d $r3.findSerializationConverter($r2)\n  $r5 \u003d r0._createConverter($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BasicBeanDescription#_createConverter(...1)",
        "body": "{\r\n    if (converterDef \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (converterDef instanceof Converter\u003c?, ?\u003e) {\r\n        return (Converter\u003cObject, Object\u003e) converterDef;\r\n    }\r\n    if (!(converterDef instanceof Class)) {\r\n        throw new IllegalStateException(\"AnnotationIntrospector returned Converter definition of type \" + converterDef.getClass().getName() + \"; expected type Converter or Class\u003cConverter\u003e instead\");\r\n    }\r\n    Class\u003c?\u003e converterClass \u003d (Class\u003c?\u003e) converterDef;\r\n    // there are some known \"no class\" markers to consider too:\r\n    if (converterClass \u003d\u003d Converter.None.class || ClassUtil.isBogusClass(converterClass)) {\r\n        return null;\r\n    }\r\n    if (!Converter.class.isAssignableFrom(converterClass)) {\r\n        throw new IllegalStateException(\"AnnotationIntrospector returned Class \" + converterClass.getName() + \"; expected Class\u003cConverter\u003e\");\r\n    }\r\n    HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\r\n    Converter\u003c?, ?\u003e conv \u003d (hi \u003d\u003d null) ? null : hi.converterInstance(_config, _classInfo, converterClass);\r\n    if (conv \u003d\u003d null) {\r\n        conv \u003d (Converter\u003c?, ?\u003e) ClassUtil.createInstance(converterClass, _config.canOverrideAccessModifiers());\r\n    }\r\n    return (Converter\u003cObject, Object\u003e) conv;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "findPropertyInclusion",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonInclude$Value findPropertyInclusion(com.fasterxml.jackson.\u0027annotation\u0027.JsonInclude$Value)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B6",
      "B1 : If(r5 \u003d\u003d null) → B2 | else → B6",
      "B2 : If(r2 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  JsonInclude$Value\n  $r1 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r3 \u003d AnnotatedClass _classInfo\u003e\n  r5 \u003d $r4.findPropertyInclusion($r3)\n  if (r5 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  if (r2 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d r5\n  goto B5\n}",
      "B4 {\n  $r6 \u003d r2.withOverrides(r5)\n}",
      "B5 {\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "findAnyGetter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember findAnyGetter()",
    "visibility": "public",
    "body": "{\r\n    if (_propCollector !\u003d null) {\r\n        AnnotatedMember anyGetter \u003d _propCollector.getAnyGetterMethod();\r\n        if (anyGetter !\u003d null) {\r\n            // For now let\u0027s require a Map; in future can add support for other\r\n            // types like perhaps Iterable\u003cMap.Entry\u003e?\r\n            Class\u003c?\u003e type \u003d anyGetter.getRawType();\r\n            if (!Map.class.isAssignableFrom(type)) {\r\n                throw new IllegalArgumentException(String.format(\"Invalid \u0027any-getter\u0027 annotation on method %s(): return type is not instance of java.util.Map\", anyGetter.getName()));\r\n            }\r\n            return anyGetter;\r\n        }\r\n        AnnotatedMember anyField \u003d _propCollector.getAnyGetterField();\r\n        if (anyField !\u003d null) {\r\n            // For now let\u0027s require a Map; in future can add support for other\r\n            // types like perhaps Iterable\u003cMap.Entry\u003e?\r\n            Class\u003c?\u003e type \u003d anyField.getRawType();\r\n            if (!Map.class.isAssignableFrom(type)) {\r\n                throw new IllegalArgumentException(String.format(\"Invalid \u0027any-getter\u0027 annotation on field \u0027%s\u0027: type is not instance of java.util.Map\", anyField.getName()));\r\n            }\r\n            return anyField;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 10,
    "edges": 10,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B9",
      "B1 : If(r3 \u003d\u003d null) → B2 | else → B5",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4",
      "B5 : If(r17 \u003d\u003d null) → B6 | else → B9",
      "B6 : If($z0 !\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  $r1 \u003d POJOPropertiesCollector _propCollector\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B9\n}",
      "B1 {\n  $r2 \u003d POJOPropertiesCollector _propCollector\u003e\n  r3 \u003d $r2.getAnyGetterMethod()\n  if (r3 \u003d\u003d null) goto B2 else B5\n}",
      "B2 {\n  r16 \u003d r3.getRawType()\n  $r11 \u003d class \"Ljava/util/Map;\"\n  $z1 \u003d $r11.isAssignableFrom(r16)\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r12 \u003d IllegalArgumentException\n  $r13 \u003d Object)[1]\n  $r14 \u003d r3.getName()\n  $r13[0] \u003d $r14\n  $r15 \u003d String.format(\"Invalid \\\u0027any-getter\\\u0027 annotation on method %s(): return type is not instance of java.util.Map\", $r13)\n  new IllegalArgumentException($r15)\n  throw $r12\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r4 \u003d POJOPropertiesCollector _propCollector\u003e\n  r17 \u003d $r4.getAnyGetterField()\n  if (r17 \u003d\u003d null) goto B6 else B9\n}",
      "B6 {\n  r5 \u003d r17.getRawType()\n  $r6 \u003d class \"Ljava/util/Map;\"\n  $z0 \u003d $r6.isAssignableFrom(r5)\n  if ($z0 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $r7 \u003d IllegalArgumentException\n  $r8 \u003d Object)[1]\n  $r9 \u003d r17.getName()\n  $r8[0] \u003d $r9\n  $r10 \u003d String.format(\"Invalid \\\u0027any-getter\\\u0027 annotation on field \\\u0027%s\\\u0027: type is not instance of java.util.Map\", $r8)\n  new IllegalArgumentException($r10)\n  throw $r7\n}",
      "B8 {\n  return\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B9",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "findBackReferences",
    "signature": "java.util.List findBackReferences()",
    "visibility": "public",
    "body": "{\r\n    List\u003cBeanPropertyDefinition\u003e result \u003d null;\r\n    HashSet\u003cString\u003e names \u003d null;\r\n    for (BeanPropertyDefinition property : _properties()) {\r\n        AnnotationIntrospector.ReferenceProperty refDef \u003d property.findReferenceType();\r\n        if ((refDef \u003d\u003d null) || !refDef.isBackReference()) {\r\n            continue;\r\n        }\r\n        final String refName \u003d refDef.getName();\r\n        if (result \u003d\u003d null) {\r\n            result \u003d new ArrayList\u003cBeanPropertyDefinition\u003e();\r\n            names \u003d new HashSet\u003c\u003e();\r\n            names.add(refName);\r\n        } else {\r\n            if (!names.add(refName)) {\r\n                throw new IllegalArgumentException(\"Multiple back-reference properties with name \" + ClassUtil.name(refName));\r\n            }\r\n        }\r\n        result.add(property);\r\n    }\r\n    return result;\r\n}",
    "nodes": 11,
    "edges": 14,
    "cc": 5,
    "flowSummary": [
      "B1 : If($z2 \u003d\u003d false) → B2 | else → B10",
      "B2 : If(r5 \u003d\u003d null) → B3 | else → B1",
      "B3 : If($z0 !\u003d 0) → B4 | else → B5",
      "B5 : If(r12 !\u003d null) → B6 | else → B7",
      "B7 : If($z1 !\u003d 0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  r12 \u003d null\n  r13 \u003d null\n  $r1 \u003d r0._properties()\n  r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z2 \u003d r2.hasNext()\n  if ($z2 \u003d\u003d false) goto B2 else B10\n}",
      "B2 {\n  $r3 \u003d r2.next()\n  r4 \u003d BeanPropertyDefinition) $r3\n  r5 \u003d r4.findReferenceType()\n  if (r5 \u003d\u003d null) goto B3 else B1\n}",
      "B3 {\n  $z0 \u003d r5.isBackReference()\n  if ($z0 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  r6 \u003d r5.getName()\n  if (r12 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r10 \u003d ArrayList\n  new ArrayList()\n  r12 \u003d $r10\n  $r11 \u003d HashSet\n  new HashSet()\n  r13 \u003d $r11\n  $r11.add(r6)\n  goto B9\n}",
      "B7 {\n  $z1 \u003d r13.add(r6)\n  if ($z1 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  $r7 \u003d IllegalArgumentException\n  $r8 \u003d ClassUtil.name(r6)\n  $r9 \u003d dynInvoke makeConcatWithConstants($r8)\n  new IllegalArgumentException($r9)\n  throw $r7\n}",
      "B9 {\n  r12.add(r4)\n  goto B1\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B10",
      "B2 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B1",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B1",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BasicBeanDescription#_properties(...0)",
        "body": "{\r\n    if (_properties \u003d\u003d null) {\r\n        _properties \u003d _propCollector.getProperties();\r\n    }\r\n    return _properties;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "getFactoryMethods",
    "signature": "java.util.List getFactoryMethods()",
    "visibility": "public",
    "body": "{\r\n    // must filter out anything that clearly is not a factory method\r\n    List\u003cAnnotatedMethod\u003e candidates \u003d _classInfo.getFactoryMethods();\r\n    if (candidates.isEmpty()) {\r\n        return candidates;\r\n    }\r\n    List\u003cAnnotatedMethod\u003e result \u003d null;\r\n    for (AnnotatedMethod am : candidates) {\r\n        if (isFactoryMethod(am)) {\r\n            if (result \u003d\u003d null) {\r\n                result \u003d new ArrayList\u003cAnnotatedMethod\u003e();\r\n            }\r\n            result.add(am);\r\n        }\r\n    }\r\n    if (result \u003d\u003d null) {\r\n        return Collections.emptyList();\r\n    }\r\n    return result;\r\n}",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B9",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B8",
      "B5 : If(r8 !\u003d null) → B6 | else → B7",
      "B9 : If(r8 !\u003d null) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  $r1 \u003d AnnotatedClass _classInfo\u003e\n  r2 \u003d $r1.getFactoryMethods()\n  $z0 \u003d r2.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r8 \u003d null\n  r3 \u003d r2.iterator()\n}",
      "B3 {\n  $z1 \u003d r3.hasNext()\n  if ($z1 \u003d\u003d false) goto B4 else B9\n}",
      "B4 {\n  $r5 \u003d r3.next()\n  r6 \u003d AnnotatedMethod) $r5\n  $z2 \u003d r0.isFactoryMethod(r6)\n  if ($z2 \u003d\u003d false) goto B5 else B8\n}",
      "B5 {\n  if (r8 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r7 \u003d ArrayList\n  new ArrayList()\n  r8 \u003d $r7\n}",
      "B7 {\n  r8.add(r6)\n}",
      "B8 {\n  goto B3\n}",
      "B9 {\n  if (r8 !\u003d null) goto B10 else B11\n}",
      "B10 {\n  $r4 \u003d Collections.emptyList()\n  return\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B8 --\u003e B3",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BasicBeanDescription#isFactoryMethod(...1)",
        "body": "{\r\n    // First: return type must be compatible with the introspected class\r\n    // (i.e. allowed to be sub-class, although usually is the same class)\r\n    Class\u003c?\u003e rt \u003d am.getRawReturnType();\r\n    if (!getBeanClass().isAssignableFrom(rt)) {\r\n        return false;\r\n    }\r\n    /* Also: must be a recognized factory method, meaning:\r\n         * (a) marked with @JsonCreator annotation, or\r\n         * (b) 1-argument \"valueOf\" (at this point, need not be public), or\r\n         * (c) 1-argument \"fromString()\" AND takes {@code String} as the argument\r\n         */\r\n    JsonCreator.Mode mode \u003d _annotationIntrospector.findCreatorAnnotation(_config, am);\r\n    if ((mode !\u003d null) \u0026\u0026 (mode !\u003d JsonCreator.Mode.DISABLED)) {\r\n        return true;\r\n    }\r\n    final String name \u003d am.getName();\r\n    // 24-Oct-2016, tatu: As per [databind#1429] must ensure takes exactly one arg\r\n    if (\"valueOf\".equals(name)) {\r\n        if (am.getParameterCount() \u003d\u003d 1) {\r\n            return true;\r\n        }\r\n    }\r\n    // [databind#208] Also accept \"fromString()\", if takes String or CharSequence\r\n    if (\"fromString\".equals(name)) {\r\n        if (am.getParameterCount() \u003d\u003d 1) {\r\n            Class\u003c?\u003e cls \u003d am.getRawParameterType(0);\r\n            if (cls \u003d\u003d String.class || CharSequence.class.isAssignableFrom(cls)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "getFactoryMethodsWithMode",
    "signature": "java.util.List getFactoryMethodsWithMode()",
    "visibility": "public",
    "body": "{\r\n    List\u003cAnnotatedMethod\u003e candidates \u003d _classInfo.getFactoryMethods();\r\n    if (candidates.isEmpty()) {\r\n        return Collections.emptyList();\r\n    }\r\n    List\u003cAnnotatedAndMetadata\u003cAnnotatedMethod, JsonCreator.Mode\u003e\u003e result \u003d null;\r\n    for (AnnotatedMethod am : candidates) {\r\n        AnnotatedAndMetadata\u003cAnnotatedMethod, JsonCreator.Mode\u003e match \u003d findFactoryMethodMetadata(am);\r\n        if (match !\u003d null) {\r\n            if (result \u003d\u003d null) {\r\n                result \u003d new ArrayList\u003c\u003e();\r\n            }\r\n            result.add(match);\r\n        }\r\n    }\r\n    if (result \u003d\u003d null) {\r\n        return Collections.emptyList();\r\n    }\r\n    return result;\r\n}",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B9",
      "B4 : If(r7 \u003d\u003d null) → B5 | else → B8",
      "B5 : If(r10 !\u003d null) → B6 | else → B7",
      "B9 : If(r10 !\u003d null) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  $r1 \u003d AnnotatedClass _classInfo\u003e\n  r2 \u003d $r1.getFactoryMethods()\n  $z0 \u003d r2.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d Collections.emptyList()\n  return\n}",
      "B2 {\n  r10 \u003d null\n  r3 \u003d r2.iterator()\n}",
      "B3 {\n  $z1 \u003d r3.hasNext()\n  if ($z1 \u003d\u003d false) goto B4 else B9\n}",
      "B4 {\n  $r5 \u003d r3.next()\n  r6 \u003d AnnotatedMethod) $r5\n  r7 \u003d r0.findFactoryMethodMetadata(r6)\n  if (r7 \u003d\u003d null) goto B5 else B8\n}",
      "B5 {\n  if (r10 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r8 \u003d ArrayList\n  new ArrayList()\n  r10 \u003d $r8\n}",
      "B7 {\n  r10.add(r7)\n}",
      "B8 {\n  goto B3\n}",
      "B9 {\n  if (r10 !\u003d null) goto B10 else B11\n}",
      "B10 {\n  $r4 \u003d Collections.emptyList()\n  return\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B8 --\u003e B3",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BasicBeanDescription#findFactoryMethodMetadata(...1)",
        "body": "{\r\n    // First: return type must be compatible with the introspected class\r\n    // (i.e. allowed to be sub-class, although usually is the same class)\r\n    Class\u003c?\u003e rt \u003d am.getRawReturnType();\r\n    if (!getBeanClass().isAssignableFrom(rt)) {\r\n        return null;\r\n    }\r\n    // Also: must be a recognized factory method, meaning:\r\n    // (a) marked with @JsonCreator annotation, or\r\n    // (b) 1-argument \"valueOf\" (at this point, need not be public), or\r\n    // (c) 1-argument \"fromString()\" AND takes {@code String} as the argument\r\n    JsonCreator.Mode mode \u003d _annotationIntrospector.findCreatorAnnotation(_config, am);\r\n    if (mode !\u003d null) {\r\n        if (mode \u003d\u003d JsonCreator.Mode.DISABLED) {\r\n            return null;\r\n        }\r\n        return AnnotatedAndMetadata.of(am, mode);\r\n    }\r\n    final String name \u003d am.getName();\r\n    // 24-Oct-2016, tatu: As per [databind#1429] must ensure takes exactly one arg\r\n    if (\"valueOf\".equals(name)) {\r\n        if (am.getParameterCount() \u003d\u003d 1) {\r\n            return AnnotatedAndMetadata.of(am, mode);\r\n        }\r\n    }\r\n    // [databind#208] Also accept \"fromString()\", if takes String or CharSequence\r\n    if (\"fromString\".equals(name)) {\r\n        if (am.getParameterCount() \u003d\u003d 1) {\r\n            Class\u003c?\u003e cls \u003d am.getRawParameterType(0);\r\n            if (cls \u003d\u003d String.class || CharSequence.class.isAssignableFrom(cls)) {\r\n                return AnnotatedAndMetadata.of(am, mode);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "findPOJOBuilder",
    "signature": "java.lang.Class findPOJOBuilder()",
    "visibility": "public",
    "body": "{\r\n    return (_annotationIntrospector \u003d\u003d null) ? null : _annotationIntrospector.findPOJOBuilder(_classInfo);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  $r1 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r3 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r2 \u003d AnnotatedClass _classInfo\u003e\n  $r4 \u003d $r3.findPOJOBuilder($r2)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "findPOJOBuilderConfig",
    "signature": "com.fasterxml.jackson.databind.\u0027annotation\u0027.JsonPOJOBuilder$Value findPOJOBuilderConfig()",
    "visibility": "public",
    "body": "{\r\n    return (_annotationIntrospector \u003d\u003d null) ? null : _annotationIntrospector.findPOJOBuilderConfig(_classInfo);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  $r1 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r3 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r2 \u003d AnnotatedClass _classInfo\u003e\n  $r4 \u003d $r3.findPOJOBuilderConfig($r2)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "findDeserializationConverter",
    "signature": "com.fasterxml.jackson.databind.util.Converter findDeserializationConverter()",
    "visibility": "public",
    "body": "{\r\n    if (_annotationIntrospector \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return _createConverter(_annotationIntrospector.findDeserializationConverter(_classInfo));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  $r1 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r2 \u003d AnnotatedClass _classInfo\u003e\n  $r4 \u003d $r3.findDeserializationConverter($r2)\n  $r5 \u003d r0._createConverter($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BasicBeanDescription#_createConverter(...1)",
        "body": "{\r\n    if (converterDef \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (converterDef instanceof Converter\u003c?, ?\u003e) {\r\n        return (Converter\u003cObject, Object\u003e) converterDef;\r\n    }\r\n    if (!(converterDef instanceof Class)) {\r\n        throw new IllegalStateException(\"AnnotationIntrospector returned Converter definition of type \" + converterDef.getClass().getName() + \"; expected type Converter or Class\u003cConverter\u003e instead\");\r\n    }\r\n    Class\u003c?\u003e converterClass \u003d (Class\u003c?\u003e) converterDef;\r\n    // there are some known \"no class\" markers to consider too:\r\n    if (converterClass \u003d\u003d Converter.None.class || ClassUtil.isBogusClass(converterClass)) {\r\n        return null;\r\n    }\r\n    if (!Converter.class.isAssignableFrom(converterClass)) {\r\n        throw new IllegalStateException(\"AnnotationIntrospector returned Class \" + converterClass.getName() + \"; expected Class\u003cConverter\u003e\");\r\n    }\r\n    HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\r\n    Converter\u003c?, ?\u003e conv \u003d (hi \u003d\u003d null) ? null : hi.converterInstance(_config, _classInfo, converterClass);\r\n    if (conv \u003d\u003d null) {\r\n        conv \u003d (Converter\u003c?, ?\u003e) ClassUtil.createInstance(converterClass, _config.canOverrideAccessModifiers());\r\n    }\r\n    return (Converter\u003cObject, Object\u003e) conv;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "methodName": "findClassDescription",
    "signature": "java.lang.String findClassDescription()",
    "visibility": "public",
    "body": "{\r\n    return (_annotationIntrospector \u003d\u003d null) ? null : _annotationIntrospector.findClassDescription(_classInfo);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BasicBeanDescription\n  $r1 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r3 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r2 \u003d AnnotatedClass _classInfo\u003e\n  $r4 \u003d $r3.findClassDescription($r2)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "methodName": "forSerialization",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription forSerialization(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r5 !\u003d null) → B1 | else → B3",
      "B1 : If(r5 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  BasicClassIntrospector\n  SerializationConfig\n  JavaType\n  ClassIntrospector$MixInResolver\n  r5 \u003d r0._findStdTypeDesc(r1, r2)\n  if (r5 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  r5 \u003d r0._findStdJdkCollectionDesc(r1, r2)\n  if (r5 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r0.collectProperties(r1, r2, r3, 1)\n  r5 \u003d BasicBeanDescription.forSerialization($r4)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "methodName": "forDeserialization",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription forDeserialization(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r5 !\u003d null) → B1 | else → B3",
      "B1 : If(r5 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  BasicClassIntrospector\n  DeserializationConfig\n  JavaType\n  ClassIntrospector$MixInResolver\n  r5 \u003d r0._findStdTypeDesc(r1, r2)\n  if (r5 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  r5 \u003d r0._findStdJdkCollectionDesc(r1, r2)\n  if (r5 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r0.collectProperties(r1, r2, r3, 0)\n  r5 \u003d BasicBeanDescription.forDeserialization($r4)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "methodName": "forCreation",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription forCreation(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r5 !\u003d null) → B1 | else → B3",
      "B1 : If(r5 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  BasicClassIntrospector\n  DeserializationConfig\n  JavaType\n  ClassIntrospector$MixInResolver\n  r5 \u003d r0._findStdTypeDesc(r1, r2)\n  if (r5 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  r5 \u003d r0._findStdJdkCollectionDesc(r1, r2)\n  if (r5 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r0.collectProperties(r1, r2, r3, 0)\n  r5 \u003d BasicBeanDescription.forDeserialization($r4)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "methodName": "forClassAnnotations",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription forClassAnnotations(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r5 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BasicClassIntrospector\n  MapperConfig\n  JavaType\n  ClassIntrospector$MixInResolver\n  r5 \u003d r0._findStdTypeDesc(r1, r2)\n  if (r5 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r0._resolveAnnotatedClass(r1, r2, r3)\n  r5 \u003d BasicBeanDescription.forOtherUse(r1, r2, $r4)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "methodName": "forDirectClassAnnotations",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription forDirectClassAnnotations(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r5 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BasicClassIntrospector\n  MapperConfig\n  JavaType\n  ClassIntrospector$MixInResolver\n  r5 \u003d r0._findStdTypeDesc(r1, r2)\n  if (r5 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r0._resolveAnnotatedWithoutSuperTypes(r1, r2, r3)\n  r5 \u003d BasicBeanDescription.forOtherUse(r1, r2, $r4)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy",
    "methodName": "findNameForIsGetter",
    "signature": "java.lang.String findNameForIsGetter(com.fasterxml.jackson.databind.introspect.AnnotatedMethod,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (_isGetterPrefix !\u003d null) {\r\n        if (_isGettersNonBoolean || _booleanType(am.getType())) {\r\n            if (name.startsWith(_isGetterPrefix)) {\r\n                return _stdBeanNaming ? stdManglePropertyName(name, _isGetterPrefix.length()) : legacyManglePropertyName(name, _isGetterPrefix.length());\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 9,
    "edges": 12,
    "cc": 5,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B8",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3",
      "B2 : If($z3 \u003d\u003d false) → B3 | else → B8",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B8",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  DefaultAccessorNamingStrategy\n  AnnotatedMethod\n  String\n  $r1 \u003d String _isGetterPrefix\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B8\n}",
      "B1 {\n  $z0 \u003d DefaultAccessorNamingStrategy: boolean _isGettersNonBoolean\u003e\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d r6.getType()\n  $z3 \u003d r0._booleanType($r7)\n  if ($z3 \u003d\u003d false) goto B3 else B8\n}",
      "B3 {\n  $r3 \u003d String _isGetterPrefix\u003e\n  $z1 \u003d r2.startsWith($r3)\n  if ($z1 \u003d\u003d false) goto B4 else B8\n}",
      "B4 {\n  $z2 \u003d DefaultAccessorNamingStrategy: boolean _stdBeanNaming\u003e\n  if ($z2 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r5 \u003d String _isGetterPrefix\u003e\n  $i1 \u003d $r5.length()\n  $r8 \u003d r0.stdManglePropertyName(r2, $i1)\n  goto B7\n}",
      "B6 {\n  $r4 \u003d String _isGetterPrefix\u003e\n  $i0 \u003d $r4.length()\n  $r8 \u003d r0.legacyManglePropertyName(r2, $i0)\n}",
      "B7 {\n  return\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B8",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B8",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DefaultAccessorNamingStrategy#stdManglePropertyName(...2)",
        "body": "{\r\n    final int end \u003d basename.length();\r\n    if (end \u003d\u003d offset) {\r\n        // empty name, nope\r\n        return null;\r\n    }\r\n    // first: if it doesn\u0027t start with capital, return as-is\r\n    char c0 \u003d basename.charAt(offset);\r\n    // 12-Oct-2020, tatu: Additional configurability; allow checking that\r\n    //    base name is acceptable (currently just by checking first character)\r\n    if (_baseNameValidator !\u003d null) {\r\n        if (!_baseNameValidator.accept(c0, basename, offset)) {\r\n            return null;\r\n        }\r\n    }\r\n    char c1 \u003d Character.toLowerCase(c0);\r\n    if (c0 \u003d\u003d c1) {\r\n        return basename.substring(offset);\r\n    }\r\n    // 17-Dec-2014, tatu: As per [databind#653], need to follow more\r\n    //   closely Java Beans spec; specifically, if two first are upper-case,\r\n    //   then no lower-casing should be done.\r\n    if ((offset + 1) \u003c end) {\r\n        if (Character.isUpperCase(basename.charAt(offset + 1))) {\r\n            return basename.substring(offset);\r\n        }\r\n    }\r\n    StringBuilder sb \u003d new StringBuilder(end - offset);\r\n    sb.append(c1);\r\n    sb.append(basename, offset + 1, end);\r\n    return sb.toString();\r\n}"
      },
      {
        "name": "DefaultAccessorNamingStrategy#legacyManglePropertyName(...2)",
        "body": "{\r\n    final int end \u003d basename.length();\r\n    if (end \u003d\u003d offset) {\r\n        // empty name, nope\r\n        return null;\r\n    }\r\n    char c \u003d basename.charAt(offset);\r\n    // 12-Oct-2020, tatu: Additional configurability; allow checking that\r\n    //    base name is acceptable (currently just by checking first character)\r\n    if (_baseNameValidator !\u003d null) {\r\n        if (!_baseNameValidator.accept(c, basename, offset)) {\r\n            return null;\r\n        }\r\n    }\r\n    // next check: is the first character upper case? If not, return as is\r\n    char d \u003d Character.toLowerCase(c);\r\n    if (c \u003d\u003d d) {\r\n        return basename.substring(offset);\r\n    }\r\n    // otherwise, lower case initial chars. Common case first, just one char\r\n    StringBuilder sb \u003d new StringBuilder(end - offset);\r\n    sb.append(d);\r\n    int i \u003d offset + 1;\r\n    for (; i \u003c end; ++i) {\r\n        c \u003d basename.charAt(i);\r\n        d \u003d Character.toLowerCase(c);\r\n        if (c \u003d\u003d d) {\r\n            sb.append(basename, i, end);\r\n            break;\r\n        }\r\n        sb.append(d);\r\n    }\r\n    return sb.toString();\r\n}"
      },
      {
        "name": "DefaultAccessorNamingStrategy#_booleanType(...1)",
        "body": "{\r\n    // but then, as per [databind#3836] Reference types too\r\n    if (type.isReferenceType()) {\r\n        type \u003d type.getReferencedType();\r\n    }\r\n    // First, well-known JDK boolean types\r\n    if (type.hasRawClass(Boolean.TYPE) || type.hasRawClass(Boolean.class) || type.hasRawClass(AtomicBoolean.class)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy",
    "methodName": "findNameForRegularGetter",
    "signature": "java.lang.String findNameForRegularGetter(com.fasterxml.jackson.databind.introspect.AnnotatedMethod,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if ((_getterPrefix !\u003d null) \u0026\u0026 name.startsWith(_getterPrefix)) {\r\n        // 16-Feb-2009, tatu: To handle [JACKSON-53], need to block CGLib-provided\r\n        // method \"getCallbacks\". Not sure of exact safe criteria to get decent\r\n        // coverage without false matches; but for now let\u0027s assume there is\r\n        // no reason to use any such getter from CGLib.\r\n        if (\"getCallbacks\".equals(name)) {\r\n            if (_isCglibGetCallbacks(am)) {\r\n                return null;\r\n            }\r\n        } else if (\"getMetaClass\".equals(name)) {\r\n            // 30-Apr-2009, tatu: Need to suppress serialization of a cyclic reference\r\n            if (_isGroovyMetaClassGetter(am)) {\r\n                return null;\r\n            }\r\n        }\r\n        return _stdBeanNaming ? stdManglePropertyName(name, _getterPrefix.length()) : legacyManglePropertyName(name, _getterPrefix.length());\r\n    }\r\n    return null;\r\n}",
    "nodes": 13,
    "edges": 16,
    "cc": 5,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B12",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B12",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B5",
      "B3 : If($z4 \u003d\u003d false) → B4 | else → B8",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B8",
      "B6 : If($z3 \u003d\u003d false) → B7 | else → B8",
      "B8 : If($z5 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  DefaultAccessorNamingStrategy\n  AnnotatedMethod\n  String\n  $r1 \u003d String _getterPrefix\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B12\n}",
      "B1 {\n  $r3 \u003d String _getterPrefix\u003e\n  $z0 \u003d r2.startsWith($r3)\n  if ($z0 \u003d\u003d false) goto B2 else B12\n}",
      "B2 {\n  $r4 \u003d \"getCallbacks\"\n  $z1 \u003d $r4.equals(r2)\n  if ($z1 \u003d\u003d false) goto B3 else B5\n}",
      "B3 {\n  $z4 \u003d r0._isCglibGetCallbacks(r8)\n  if ($z4 \u003d\u003d false) goto B4 else B8\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r5 \u003d \"getMetaClass\"\n  $z2 \u003d $r5.equals(r2)\n  if ($z2 \u003d\u003d false) goto B6 else B8\n}",
      "B6 {\n  $z3 \u003d r0._isGroovyMetaClassGetter(r8)\n  if ($z3 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $z5 \u003d DefaultAccessorNamingStrategy: boolean _stdBeanNaming\u003e\n  if ($z5 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r7 \u003d String _getterPrefix\u003e\n  $i1 \u003d $r7.length()\n  $r9 \u003d r0.stdManglePropertyName(r2, $i1)\n  goto B11\n}",
      "B10 {\n  $r6 \u003d String _getterPrefix\u003e\n  $i0 \u003d $r6.length()\n  $r9 \u003d r0.legacyManglePropertyName(r2, $i0)\n}",
      "B11 {\n  return\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B12",
      "B1 --\u003e B2",
      "B1 --\u003e B12",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DefaultAccessorNamingStrategy#stdManglePropertyName(...2)",
        "body": "{\r\n    final int end \u003d basename.length();\r\n    if (end \u003d\u003d offset) {\r\n        // empty name, nope\r\n        return null;\r\n    }\r\n    // first: if it doesn\u0027t start with capital, return as-is\r\n    char c0 \u003d basename.charAt(offset);\r\n    // 12-Oct-2020, tatu: Additional configurability; allow checking that\r\n    //    base name is acceptable (currently just by checking first character)\r\n    if (_baseNameValidator !\u003d null) {\r\n        if (!_baseNameValidator.accept(c0, basename, offset)) {\r\n            return null;\r\n        }\r\n    }\r\n    char c1 \u003d Character.toLowerCase(c0);\r\n    if (c0 \u003d\u003d c1) {\r\n        return basename.substring(offset);\r\n    }\r\n    // 17-Dec-2014, tatu: As per [databind#653], need to follow more\r\n    //   closely Java Beans spec; specifically, if two first are upper-case,\r\n    //   then no lower-casing should be done.\r\n    if ((offset + 1) \u003c end) {\r\n        if (Character.isUpperCase(basename.charAt(offset + 1))) {\r\n            return basename.substring(offset);\r\n        }\r\n    }\r\n    StringBuilder sb \u003d new StringBuilder(end - offset);\r\n    sb.append(c1);\r\n    sb.append(basename, offset + 1, end);\r\n    return sb.toString();\r\n}"
      },
      {
        "name": "DefaultAccessorNamingStrategy#legacyManglePropertyName(...2)",
        "body": "{\r\n    final int end \u003d basename.length();\r\n    if (end \u003d\u003d offset) {\r\n        // empty name, nope\r\n        return null;\r\n    }\r\n    char c \u003d basename.charAt(offset);\r\n    // 12-Oct-2020, tatu: Additional configurability; allow checking that\r\n    //    base name is acceptable (currently just by checking first character)\r\n    if (_baseNameValidator !\u003d null) {\r\n        if (!_baseNameValidator.accept(c, basename, offset)) {\r\n            return null;\r\n        }\r\n    }\r\n    // next check: is the first character upper case? If not, return as is\r\n    char d \u003d Character.toLowerCase(c);\r\n    if (c \u003d\u003d d) {\r\n        return basename.substring(offset);\r\n    }\r\n    // otherwise, lower case initial chars. Common case first, just one char\r\n    StringBuilder sb \u003d new StringBuilder(end - offset);\r\n    sb.append(d);\r\n    int i \u003d offset + 1;\r\n    for (; i \u003c end; ++i) {\r\n        c \u003d basename.charAt(i);\r\n        d \u003d Character.toLowerCase(c);\r\n        if (c \u003d\u003d d) {\r\n            sb.append(basename, i, end);\r\n            break;\r\n        }\r\n        sb.append(d);\r\n    }\r\n    return sb.toString();\r\n}"
      },
      {
        "name": "DefaultAccessorNamingStrategy#_isCglibGetCallbacks(...1)",
        "body": "{\r\n    Class\u003c?\u003e rt \u003d am.getRawType();\r\n    // Ok, first: must return an array type\r\n    if (rt.isArray()) {\r\n        // And that type needs to be \"net.sf.cglib.proxy.Callback\".\r\n        // Theoretically could just be a type that implements it, but\r\n        // for now let\u0027s keep things simple, fix if need be.\r\n        Class\u003c?\u003e compType \u003d rt.getComponentType();\r\n        // Actually, let\u0027s just verify it\u0027s a \"net.sf.cglib.*\" class/interface\r\n        final String className \u003d compType.getName();\r\n        if (className.contains(\".cglib\")) {\r\n            return className.startsWith(\"net.sf.cglib\") || // also, as per [JACKSON-177]\r\n            className.startsWith(\"org.hibernate.repackage.cglib\") || // and [core#674]\r\n            className.startsWith(\"org.springframework.cglib\");\r\n        }\r\n    }\r\n    return false;\r\n}"
      },
      {
        "name": "DefaultAccessorNamingStrategy#_isGroovyMetaClassGetter(...1)",
        "body": "{\r\n    return am.getRawType().getName().startsWith(\"groovy.lang\");\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy",
    "methodName": "findNameForMutator",
    "signature": "java.lang.String findNameForMutator(com.fasterxml.jackson.databind.introspect.AnnotatedMethod,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if ((_mutatorPrefix !\u003d null) \u0026\u0026 name.startsWith(_mutatorPrefix)) {\r\n        return _stdBeanNaming ? stdManglePropertyName(name, _mutatorPrefix.length()) : legacyManglePropertyName(name, _mutatorPrefix.length());\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B6",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B6",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DefaultAccessorNamingStrategy\n  AnnotatedMethod\n  String\n  $r1 \u003d String _mutatorPrefix\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  $r3 \u003d String _mutatorPrefix\u003e\n  $z0 \u003d r2.startsWith($r3)\n  if ($z0 \u003d\u003d false) goto B2 else B6\n}",
      "B2 {\n  $z1 \u003d DefaultAccessorNamingStrategy: boolean _stdBeanNaming\u003e\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d String _mutatorPrefix\u003e\n  $i1 \u003d $r5.length()\n  $r7 \u003d r0.stdManglePropertyName(r2, $i1)\n  goto B5\n}",
      "B4 {\n  $r4 \u003d String _mutatorPrefix\u003e\n  $i0 \u003d $r4.length()\n  $r7 \u003d r0.legacyManglePropertyName(r2, $i0)\n}",
      "B5 {\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DefaultAccessorNamingStrategy#stdManglePropertyName(...2)",
        "body": "{\r\n    final int end \u003d basename.length();\r\n    if (end \u003d\u003d offset) {\r\n        // empty name, nope\r\n        return null;\r\n    }\r\n    // first: if it doesn\u0027t start with capital, return as-is\r\n    char c0 \u003d basename.charAt(offset);\r\n    // 12-Oct-2020, tatu: Additional configurability; allow checking that\r\n    //    base name is acceptable (currently just by checking first character)\r\n    if (_baseNameValidator !\u003d null) {\r\n        if (!_baseNameValidator.accept(c0, basename, offset)) {\r\n            return null;\r\n        }\r\n    }\r\n    char c1 \u003d Character.toLowerCase(c0);\r\n    if (c0 \u003d\u003d c1) {\r\n        return basename.substring(offset);\r\n    }\r\n    // 17-Dec-2014, tatu: As per [databind#653], need to follow more\r\n    //   closely Java Beans spec; specifically, if two first are upper-case,\r\n    //   then no lower-casing should be done.\r\n    if ((offset + 1) \u003c end) {\r\n        if (Character.isUpperCase(basename.charAt(offset + 1))) {\r\n            return basename.substring(offset);\r\n        }\r\n    }\r\n    StringBuilder sb \u003d new StringBuilder(end - offset);\r\n    sb.append(c1);\r\n    sb.append(basename, offset + 1, end);\r\n    return sb.toString();\r\n}"
      },
      {
        "name": "DefaultAccessorNamingStrategy#legacyManglePropertyName(...2)",
        "body": "{\r\n    final int end \u003d basename.length();\r\n    if (end \u003d\u003d offset) {\r\n        // empty name, nope\r\n        return null;\r\n    }\r\n    char c \u003d basename.charAt(offset);\r\n    // 12-Oct-2020, tatu: Additional configurability; allow checking that\r\n    //    base name is acceptable (currently just by checking first character)\r\n    if (_baseNameValidator !\u003d null) {\r\n        if (!_baseNameValidator.accept(c, basename, offset)) {\r\n            return null;\r\n        }\r\n    }\r\n    // next check: is the first character upper case? If not, return as is\r\n    char d \u003d Character.toLowerCase(c);\r\n    if (c \u003d\u003d d) {\r\n        return basename.substring(offset);\r\n    }\r\n    // otherwise, lower case initial chars. Common case first, just one char\r\n    StringBuilder sb \u003d new StringBuilder(end - offset);\r\n    sb.append(d);\r\n    int i \u003d offset + 1;\r\n    for (; i \u003c end; ++i) {\r\n        c \u003d basename.charAt(i);\r\n        d \u003d Character.toLowerCase(c);\r\n        if (c \u003d\u003d d) {\r\n            sb.append(basename, i, end);\r\n            break;\r\n        }\r\n        sb.append(d);\r\n    }\r\n    return sb.toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.EnumNamingStrategyFactory",
    "methodName": "createEnumNamingStrategyInstance",
    "signature": "com.fasterxml.jackson.databind.EnumNamingStrategy createEnumNamingStrategyInstance(java.lang.Object,boolean,com.fasterxml.jackson.databind.EnumNamingStrategy)",
    "visibility": "public",
    "body": "{\r\n    if (namingDef \u003d\u003d null) {\r\n        return defaultNamingStrategy;\r\n    }\r\n    if (namingDef instanceof EnumNamingStrategy) {\r\n        return (EnumNamingStrategy) namingDef;\r\n    }\r\n    if (!(namingDef instanceof Class)) {\r\n        throw new IllegalArgumentException(String.format(\"AnnotationIntrospector returned EnumNamingStrategy definition of type %s; \" + \"expected type `Class\u003cEnumNamingStrategy\u003e` instead\", ClassUtil.classNameOf(namingDef)));\r\n    }\r\n    Class\u003c?\u003e namingClass \u003d (Class\u003c?\u003e) namingDef;\r\n    if (namingClass \u003d\u003d EnumNamingStrategy.class) {\r\n        return null;\r\n    }\r\n    if (!EnumNamingStrategy.class.isAssignableFrom(namingClass)) {\r\n        throw new IllegalArgumentException(String.format(\"Problem with AnnotationIntrospector returned Class %s; \" + \"expected `Class\u003cEnumNamingStrategy\u003e`\", ClassUtil.classNameOf(namingClass)));\r\n    }\r\n    return (EnumNamingStrategy) ClassUtil.createInstance(namingClass, canOverrideAccessModifiers);\r\n}",
    "nodes": 11,
    "edges": 10,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6",
      "B6 : If(r1 !\u003d class \"Lcom/fasterxml/jackson/databind/EnumNamingStrategy;\") → B7 | else → B8",
      "B8 : If($z2 !\u003d 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  Object\n  z3 :\u003d @parameter1: boolean\n  EnumNamingStrategy\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d EnumNamingStrategy\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r13 \u003d EnumNamingStrategy) r0\n  return\n}",
      "B4 {\n  $z1 \u003d Class\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r9 \u003d IllegalArgumentException\n  $r10 \u003d Object)[1]\n  $r11 \u003d ClassUtil.classNameOf(r0)\n  $r10[0] \u003d $r11\n  $r12 \u003d String.format(\"AnnotationIntrospector returned EnumNamingStrategy definition of type %s; expected type `Class\u003cEnumNamingStrategy\u003e` instead\", $r10)\n  new IllegalArgumentException($r12)\n  throw $r9\n}",
      "B6 {\n  r1 \u003d Class) r0\n  if (r1 !\u003d class \"Lcom/fasterxml/jackson/databind/EnumNamingStrategy;\") goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $r2 \u003d class \"Lcom/fasterxml/jackson/databind/EnumNamingStrategy;\"\n  $z2 \u003d $r2.isAssignableFrom(r1)\n  if ($z2 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  $r5 \u003d IllegalArgumentException\n  $r6 \u003d Object)[1]\n  $r7 \u003d ClassUtil.classNameOf(r1)\n  $r6[0] \u003d $r7\n  $r8 \u003d String.format(\"Problem with AnnotationIntrospector returned Class %s; expected `Class\u003cEnumNamingStrategy\u003e`\", $r6)\n  new IllegalArgumentException($r8)\n  throw $r5\n}",
      "B10 {\n  $r3 \u003d ClassUtil.createInstance(r1, z3)\n  $r4 \u003d EnumNamingStrategy) $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "isAnnotationBundle",
    "signature": "boolean isAnnotationBundle(java.lang.\u0027annotation\u0027.Annotation)",
    "visibility": "public",
    "body": "{\r\n    // 22-Sep-2015, tatu: Caching here has modest effect on JavaSE, and only\r\n    //   mostly in degenerate cases where introspection used more often than\r\n    //   it should (like recreating ObjectMapper once per read/write).\r\n    //   But it may be more beneficial on platforms like Android (should verify)\r\n    final Class\u003c?\u003e type \u003d ann.annotationType();\r\n    final String typeName \u003d type.getName();\r\n    Boolean b \u003d _annotationsInside.get(typeName);\r\n    if (b \u003d\u003d null) {\r\n        b \u003d type.getAnnotation(JacksonAnnotationsInside.class) !\u003d null;\r\n        _annotationsInside.putIfAbsent(typeName, b);\r\n    }\r\n    return b.booleanValue();\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r9 !\u003d null) → B1 | else → B5",
      "B1 : If($r6 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotation\n  r1 \u003d r0.annotationType()\n  r2 \u003d r1.getName()\n  $r4 \u003d LRUMap _annotationsInside\u003e\n  $r5 \u003d $r4.get(r2)\n  r9 \u003d Boolean) $r5\n  if (r9 !\u003d null) goto B1 else B5\n}",
      "B1 {\n  $r6 \u003d r1.getAnnotation(class \"Lcom/fasterxml/jackson/annotation/JacksonAnnotationsInside;\")\n  if ($r6 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  $r8 \u003d Boolean.valueOf($z0)\n  r9 \u003d $r8\n  $r7 \u003d LRUMap _annotationsInside\u003e\n  $r7.putIfAbsent(r2, $r8)\n}",
      "B5 {\n  $z1 \u003d r9.booleanValue()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findEnumValues",
    "signature": "java.lang.String[] findEnumValues(java.lang.Class,java.lang.Enum[],java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    HashMap\u003cString, String\u003e expl \u003d null;\r\n    for (Field f : enumType.getDeclaredFields()) {\r\n        if (!f.isEnumConstant()) {\r\n            continue;\r\n        }\r\n        JsonProperty prop \u003d f.getAnnotation(JsonProperty.class);\r\n        if (prop \u003d\u003d null) {\r\n            continue;\r\n        }\r\n        String n \u003d prop.value();\r\n        // 24-Jan-2025, tatu: [databind#4896] Should not skip \"\" with enums\r\n        /*\r\n            if (n.isEmpty()) {\r\n                continue;\r\n            }\r\n            */\r\n        if (expl \u003d\u003d null) {\r\n            expl \u003d new HashMap\u003cString, String\u003e();\r\n        }\r\n        expl.put(f.getName(), n);\r\n    }\r\n    // and then stitch them together if and as necessary\r\n    if (expl !\u003d null) {\r\n        for (int i \u003d 0, end \u003d enumValues.length; i \u003c end; ++i) {\r\n            String defName \u003d enumValues[i].name();\r\n            String explValue \u003d expl.get(defName);\r\n            if (explValue !\u003d null) {\r\n                names[i] \u003d explValue;\r\n            }\r\n        }\r\n    }\r\n    return names;\r\n}",
    "nodes": 17,
    "edges": 23,
    "cc": 8,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B10",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If(r6 !\u003d null) → B5 | else → B6",
      "B6 : If(r11 !\u003d null) → B7 | else → B8",
      "B10 : If(r11 \u003d\u003d null) → B11 | else → B16",
      "B12 : If(i2 \u003e\u003d i3) → B13 | else → B16",
      "B13 : If(r15 \u003d\u003d null) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Class\n  Enum[]\n  String[]\n  r11 \u003d null\n  r12 \u003d r0.getDeclaredFields()\n  i0 \u003d lengthof r12\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B10\n}",
      "B2 {\n  r13 \u003d r12[i1]\n  $z0 \u003d r13.isEnumConstant()\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  goto B9\n}",
      "B4 {\n  $r5 \u003d r13.getAnnotation(class \"Lcom/fasterxml/jackson/annotation/JsonProperty;\")\n  r6 \u003d JsonProperty) $r5\n  if (r6 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  goto B9\n}",
      "B6 {\n  r7 \u003d r6.value()\n  if (r11 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r9 \u003d HashMap\n  new HashMap()\n  r11 \u003d $r9\n}",
      "B8 {\n  $r8 \u003d r13.getName()\n  r11.put($r8, r7)\n}",
      "B9 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B10 {\n  if (r11 \u003d\u003d null) goto B11 else B16\n}",
      "B11 {\n  i2 \u003d 0\n  i3 \u003d lengthof r2\n}",
      "B12 {\n  if (i2 \u003e\u003d i3) goto B13 else B16\n}",
      "B13 {\n  $r3 \u003d r2[i2]\n  r14 \u003d $r3.name()\n  $r4 \u003d r11.get(r14)\n  r15 \u003d String) $r4\n  if (r15 \u003d\u003d null) goto B14 else B15\n}",
      "B14 {\n  r1[i2] \u003d r15\n}",
      "B15 {\n  i2 \u003d i2 + 1\n  goto B12\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B10",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B9 --\u003e B1",
      "B10 --\u003e B11",
      "B10 --\u003e B16",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B16",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B12",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findEnumValues",
    "signature": "java.lang.String[] findEnumValues(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass,java.lang.Enum[],java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    Map\u003cString, String\u003e enumToPropertyMap \u003d new LinkedHashMap\u003cString, String\u003e();\r\n    for (AnnotatedField field : annotatedClass.fields()) {\r\n        JsonProperty property \u003d field.getAnnotation(JsonProperty.class);\r\n        if (property !\u003d null) {\r\n            String propValue \u003d property.value();\r\n            if (propValue !\u003d null) {\r\n                // 24-Jan-2025, tatu: [databind#4896] Should not skip \"\" with enums\r\n                // \u0026\u0026 !propValue.isEmpty()) {\r\n                enumToPropertyMap.put(field.getName(), propValue);\r\n            }\r\n        }\r\n    }\r\n    // and then stitch them together if and as necessary\r\n    for (int i \u003d 0, end \u003d enumValues.length; i \u003c end; ++i) {\r\n        String defName \u003d enumValues[i].name();\r\n        String explValue \u003d enumToPropertyMap.get(defName);\r\n        if (explValue !\u003d null) {\r\n            names[i] \u003d explValue;\r\n        }\r\n    }\r\n    return names;\r\n}",
    "nodes": 12,
    "edges": 16,
    "cc": 6,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B6",
      "B2 : If(r14 \u003d\u003d null) → B3 | else → B5",
      "B3 : If(r15 \u003d\u003d null) → B4 | else → B5",
      "B7 : If(i0 \u003e\u003d i1) → B8 | else → B11",
      "B8 : If(r17 \u003d\u003d null) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  MapperConfig\n  AnnotatedClass\n  Enum[]\n  String[]\n  $r0 \u003d LinkedHashMap\n  new LinkedHashMap()\n  $r2 \u003d r1.fields()\n  r12 \u003d $r2.iterator()\n}",
      "B1 {\n  $z0 \u003d r12.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B6\n}",
      "B2 {\n  $r7 \u003d r12.next()\n  r13 \u003d AnnotatedField) $r7\n  $r8 \u003d r13.getAnnotation(class \"Lcom/fasterxml/jackson/annotation/JsonProperty;\")\n  r14 \u003d JsonProperty) $r8\n  if (r14 \u003d\u003d null) goto B3 else B5\n}",
      "B3 {\n  r15 \u003d r14.value()\n  if (r15 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r9 \u003d r13.getName()\n  $r0.put($r9, r15)\n}",
      "B5 {\n  goto B1\n}",
      "B6 {\n  i0 \u003d 0\n  i1 \u003d lengthof r3\n}",
      "B7 {\n  if (i0 \u003e\u003d i1) goto B8 else B11\n}",
      "B8 {\n  $r5 \u003d r3[i0]\n  r16 \u003d $r5.name()\n  $r6 \u003d $r0.get(r16)\n  r17 \u003d String) $r6\n  if (r17 \u003d\u003d null) goto B9 else B10\n}",
      "B9 {\n  r4[i0] \u003d r17\n}",
      "B10 {\n  i0 \u003d i0 + 1\n  goto B7\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B1",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B7",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findEnumAliases",
    "signature": "void findEnumAliases(java.lang.Class,java.lang.Enum[],java.lang.String[][])",
    "visibility": "public",
    "body": "{\r\n    // Main complication: discrepancy between Field that represent enum value,\r\n    // Enum abstraction; joint by name but not reference\r\n    for (Field f : enumType.getDeclaredFields()) {\r\n        if (f.isEnumConstant()) {\r\n            JsonAlias aliasAnnotation \u003d f.getAnnotation(JsonAlias.class);\r\n            if (aliasAnnotation !\u003d null) {\r\n                String[] aliases \u003d aliasAnnotation.value();\r\n                if (aliases.length !\u003d 0) {\r\n                    final String name \u003d f.getName();\r\n                    // Find matching enum (could create Ma\r\n                    for (int i \u003d 0, end \u003d enumValues.length; i \u003c end; ++i) {\r\n                        if (name.equals(enumValues[i].name())) {\r\n                            aliasList[i] \u003d aliases;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
    "nodes": 12,
    "edges": 17,
    "cc": 7,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d i0) → B2 | else → B11",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B10",
      "B3 : If(r4 \u003d\u003d null) → B4 | else → B10",
      "B4 : If($i1 \u003d\u003d false) → B5 | else → B10",
      "B6 : If(i4 \u003e\u003d i2) → B7 | else → B10",
      "B7 : If($z1 \u003d\u003d false) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Class\n  Enum[]\n  String[][]\n  r1 \u003d r0.getDeclaredFields()\n  i0 \u003d lengthof r1\n  i3 \u003d 0\n}",
      "B1 {\n  if (i3 \u003e\u003d i0) goto B2 else B11\n}",
      "B2 {\n  r2 \u003d r1[i3]\n  $z0 \u003d r2.isEnumConstant()\n  if ($z0 \u003d\u003d false) goto B3 else B10\n}",
      "B3 {\n  $r3 \u003d r2.getAnnotation(class \"Lcom/fasterxml/jackson/annotation/JsonAlias;\")\n  r4 \u003d JsonAlias) $r3\n  if (r4 \u003d\u003d null) goto B4 else B10\n}",
      "B4 {\n  r5 \u003d r4.value()\n  $i1 \u003d lengthof r5\n  if ($i1 \u003d\u003d false) goto B5 else B10\n}",
      "B5 {\n  r6 \u003d r2.getName()\n  i4 \u003d 0\n  i2 \u003d lengthof r7\n}",
      "B6 {\n  if (i4 \u003e\u003d i2) goto B7 else B10\n}",
      "B7 {\n  $r8 \u003d r7[i4]\n  $r9 \u003d $r8.name()\n  $z1 \u003d r6.equals($r9)\n  if ($z1 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  r10[i4] \u003d r5\n}",
      "B9 {\n  i4 \u003d i4 + 1\n  goto B6\n}",
      "B10 {\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B11",
      "B2 --\u003e B3",
      "B2 --\u003e B10",
      "B3 --\u003e B4",
      "B3 --\u003e B10",
      "B4 --\u003e B5",
      "B4 --\u003e B10",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B6",
      "B10 --\u003e B1",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findEnumAliases",
    "signature": "void findEnumAliases(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass,java.lang.Enum[],java.lang.String[][])",
    "visibility": "public",
    "body": "{\r\n    HashMap\u003cString, String[]\u003e enumToAliasMap \u003d new HashMap\u003c\u003e();\r\n    for (AnnotatedField field : annotatedClass.fields()) {\r\n        JsonAlias alias \u003d field.getAnnotation(JsonAlias.class);\r\n        if (alias !\u003d null) {\r\n            enumToAliasMap.putIfAbsent(field.getName(), alias.value());\r\n        }\r\n    }\r\n    for (int i \u003d 0, end \u003d enumValues.length; i \u003c end; ++i) {\r\n        Enum\u003c?\u003e enumValue \u003d enumValues[i];\r\n        aliasList[i] \u003d enumToAliasMap.getOrDefault(enumValue.name(), new String[] {});\r\n    }\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If(r17 \u003d\u003d null) → B3 | else → B4",
      "B6 : If(i0 \u003e\u003d i1) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  MapperConfig\n  AnnotatedClass\n  Enum[]\n  String[][]\n  $r0 \u003d HashMap\n  new HashMap()\n  $r2 \u003d r1.fields()\n  r15 \u003d $r2.iterator()\n}",
      "B1 {\n  $z0 \u003d r15.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r9 \u003d r15.next()\n  r16 \u003d AnnotatedField) $r9\n  $r10 \u003d r16.getAnnotation(class \"Lcom/fasterxml/jackson/annotation/JsonAlias;\")\n  r17 \u003d JsonAlias) $r10\n  if (r17 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r12 \u003d r16.getName()\n  $r11 \u003d r17.value()\n  $r0.putIfAbsent($r12, $r11)\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  i0 \u003d 0\n  i1 \u003d lengthof r3\n}",
      "B6 {\n  if (i0 \u003e\u003d i1) goto B7 else B8\n}",
      "B7 {\n  r18 \u003d r3[i0]\n  $r6 \u003d r18.name()\n  $r5 \u003d String)[0]\n  $r7 \u003d $r0.getOrDefault($r6, $r5)\n  $r8 \u003d String[]) $r7\n  r4[i0] \u003d $r8\n  i0 \u003d i0 + 1\n  goto B6\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B6",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findDefaultEnumValue",
    "signature": "java.lang.Enum findDefaultEnumValue(com.fasterxml.jackson.databind.introspect.AnnotatedClass,java.lang.Enum[])",
    "visibility": "public",
    "body": "{\r\n    for (Annotated field : annotatedClass.fields()) {\r\n        if (!field.getType().isEnumType()) {\r\n            continue;\r\n        }\r\n        JsonEnumDefaultValue found \u003d _findAnnotation(field, JsonEnumDefaultValue.class);\r\n        if (found \u003d\u003d null) {\r\n            continue;\r\n        }\r\n        // Return the \"first\" enum with annotation\r\n        for (Enum\u003c?\u003e enumValue : enumValues) {\r\n            if (enumValue.name().equals(field.getName())) {\r\n                return enumValue;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 13,
    "edges": 16,
    "cc": 5,
    "flowSummary": [
      "B1 : If($z2 \u003d\u003d false) → B2 | else → B12",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If(r8 !\u003d null) → B5 | else → B6",
      "B7 : If(i1 \u003e\u003d i0) → B8 | else → B11",
      "B8 : If($z1 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  AnnotatedClass\n  Enum[]\n  $r1 \u003d r0.fields()\n  r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z2 \u003d r2.hasNext()\n  if ($z2 \u003d\u003d false) goto B2 else B12\n}",
      "B2 {\n  $r3 \u003d r2.next()\n  r4 \u003d Annotated) $r3\n  $r5 \u003d r4.getType()\n  $z0 \u003d $r5.isEnumType()\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  goto B1\n}",
      "B4 {\n  $r7 \u003d r6._findAnnotation(r4, class \"Lcom/fasterxml/jackson/annotation/JsonEnumDefaultValue;\")\n  r8 \u003d JsonEnumDefaultValue) $r7\n  if (r8 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  goto B1\n}",
      "B6 {\n  i0 \u003d lengthof r9\n  i1 \u003d 0\n}",
      "B7 {\n  if (i1 \u003e\u003d i0) goto B8 else B11\n}",
      "B8 {\n  r10 \u003d r9[i1]\n  $r12 \u003d r10.name()\n  $r11 \u003d r4.getName()\n  $z1 \u003d $r12.equals($r11)\n  if ($z1 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  i1 \u003d i1 + 1\n  goto B7\n}",
      "B11 {\n  goto B1\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B12",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B1",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B1",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B7",
      "B11 --\u003e B1",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findRootName",
    "signature": "com.fasterxml.jackson.databind.PropertyName findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    JsonRootName ann \u003d _findAnnotation(ac, JsonRootName.class);\r\n    if (ann \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    String ns \u003d ann.namespace();\r\n    if (ns !\u003d null \u0026\u0026 ns.isEmpty()) {\r\n        ns \u003d null;\r\n    }\r\n    return PropertyName.construct(ann.value(), ns);\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B2 : If(r4 \u003d\u003d null) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  AnnotatedClass\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonRootName;\")\n  r3 \u003d JsonRootName) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r4 \u003d r3.namespace()\n  if (r4 \u003d\u003d null) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r4.isEmpty()\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  r4 \u003d null\n}",
      "B5 {\n  $r5 \u003d r3.value()\n  $r6 \u003d PropertyName.construct($r5, r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "isIgnorableType",
    "signature": "java.lang.Boolean isIgnorableType(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    JsonIgnoreType ignore \u003d _findAnnotation(ac, JsonIgnoreType.class);\r\n    return (ignore \u003d\u003d null) ? null : ignore.value();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  AnnotatedClass\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonIgnoreType;\")\n  r3 \u003d JsonIgnoreType) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $z0 \u003d r3.value()\n  $r4 \u003d Boolean.valueOf($z0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findPropertyIgnoralByName",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonIgnoreProperties$Value findPropertyIgnoralByName(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonIgnoreProperties v \u003d _findAnnotation(a, JsonIgnoreProperties.class);\r\n    if (v \u003d\u003d null) {\r\n        return JsonIgnoreProperties.Value.empty();\r\n    }\r\n    return JsonIgnoreProperties.Value.from(v);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  MapperConfig\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonIgnoreProperties;\")\n  r3 \u003d JsonIgnoreProperties) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d JsonIgnoreProperties$Value.empty()\n  return\n}",
      "B2 {\n  $r4 \u003d JsonIgnoreProperties$Value.from(r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findPropertyInclusionByName",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonIncludeProperties$Value findPropertyInclusionByName(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonIncludeProperties v \u003d _findAnnotation(a, JsonIncludeProperties.class);\r\n    if (v \u003d\u003d null) {\r\n        return JsonIncludeProperties.Value.all();\r\n    }\r\n    return JsonIncludeProperties.Value.from(v);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  MapperConfig\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonIncludeProperties;\")\n  r3 \u003d JsonIncludeProperties) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d JsonIncludeProperties$Value.all()\n  return\n}",
      "B2 {\n  $r4 \u003d JsonIncludeProperties$Value.from(r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findFilterId",
    "signature": "java.lang.Object findFilterId(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonFilter ann \u003d _findAnnotation(a, JsonFilter.class);\r\n    if (ann !\u003d null) {\r\n        String id \u003d ann.value();\r\n        // Empty String is same as not having annotation, to allow overrides\r\n        if (!id.isEmpty()) {\r\n            return id;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonFilter;\")\n  r3 \u003d JsonFilter) $r2\n  if (r3 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  r4 \u003d r3.value()\n  $z0 \u003d r4.isEmpty()\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findNamingStrategy",
    "signature": "java.lang.Object findNamingStrategy(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    JsonNaming ann \u003d _findAnnotation(ac, JsonNaming.class);\r\n    return (ann \u003d\u003d null) ? null : ann.value();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  AnnotatedClass\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/databind/annotation/JsonNaming;\")\n  r3 \u003d JsonNaming) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r3.value()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findEnumNamingStrategy",
    "signature": "java.lang.Object findEnumNamingStrategy(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    EnumNaming ann \u003d _findAnnotation(ac, EnumNaming.class);\r\n    return (ann \u003d\u003d null) ? null : ann.value();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  MapperConfig\n  AnnotatedClass\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/databind/annotation/EnumNaming;\")\n  r3 \u003d EnumNaming) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d null\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r3.value()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findClassDescription",
    "signature": "java.lang.String findClassDescription(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    JsonClassDescription ann \u003d _findAnnotation(ac, JsonClassDescription.class);\r\n    return (ann \u003d\u003d null) ? null : ann.value();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  AnnotatedClass\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonClassDescription;\")\n  r3 \u003d JsonClassDescription) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r3.value()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findAutoDetectVisibility",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker findAutoDetectVisibility(com.fasterxml.jackson.databind.introspect.AnnotatedClass,com.fasterxml.jackson.databind.introspect.VisibilityChecker)",
    "visibility": "public",
    "body": "{\r\n    JsonAutoDetect ann \u003d _findAnnotation(ac, JsonAutoDetect.class);\r\n    return (ann \u003d\u003d null) ? checker : checker.with(ann);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  AnnotatedClass\n  VisibilityChecker\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonAutoDetect;\")\n  r3 \u003d JsonAutoDetect) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d r4\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r4.with(r3)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findImplicitPropertyName",
    "signature": "java.lang.String findImplicitPropertyName(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "visibility": "public",
    "body": "{\r\n    PropertyName n \u003d _findConstructorName(m);\r\n    return (n \u003d\u003d null) ? null : n.getSimpleName();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  AnnotatedMember\n  r2 \u003d r0._findConstructorName(r1)\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d null\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r2.getSimpleName()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findConstructorName(...1)",
        "body": "{\r\n    if (a instanceof AnnotatedParameter) {\r\n        AnnotatedParameter p \u003d (AnnotatedParameter) a;\r\n        AnnotatedWithParams ctor \u003d p.getOwner();\r\n        if (ctor !\u003d null) {\r\n            if (_java7Helper !\u003d null) {\r\n                PropertyName name \u003d _java7Helper.findConstructorName(p);\r\n                if (name !\u003d null) {\r\n                    return name;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findPropertyAliases",
    "signature": "java.util.List findPropertyAliases(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonAlias ann \u003d _findAnnotation(m, JsonAlias.class);\r\n    if (ann \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    String[] strs \u003d ann.value();\r\n    final int len \u003d strs.length;\r\n    if (len \u003d\u003d 0) {\r\n        return Collections.emptyList();\r\n    }\r\n    List\u003cPropertyName\u003e result \u003d new ArrayList\u003c\u003e(len);\r\n    for (int i \u003d 0; i \u003c len; ++i) {\r\n        result.add(PropertyName.construct(strs[i]));\r\n    }\r\n    return result;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i1 \u003e\u003d i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonAlias;\")\n  r3 \u003d JsonAlias) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r4 \u003d r3.value()\n  i0 \u003d lengthof r4\n  if (i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r8 \u003d Collections.emptyList()\n  return\n}",
      "B4 {\n  $r5 \u003d ArrayList\n  new ArrayList(i0)\n  i1 \u003d 0\n}",
      "B5 {\n  if (i1 \u003e\u003d i0) goto B6 else B7\n}",
      "B6 {\n  $r6 \u003d r4[i1]\n  $r7 \u003d PropertyName.construct($r6)\n  $r5.add($r7)\n  i1 \u003d i1 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "hasRequiredMarker",
    "signature": "java.lang.Boolean hasRequiredMarker(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "visibility": "public",
    "body": "{\r\n    JsonProperty ann \u003d _findAnnotation(m, JsonProperty.class);\r\n    if (ann !\u003d null) {\r\n        // 11-Mar-2025, tatu: [databind#5020] Support new \"isRequired\" annotation\r\n        OptBoolean required \u003d ann.isRequired();\r\n        if (required !\u003d OptBoolean.DEFAULT) {\r\n            return required.asBoolean();\r\n        }\r\n        return ann.required();\r\n    }\r\n    return null;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B4",
      "B1 : If(r4 \u003d\u003d $r5) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  AnnotatedMember\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonProperty;\")\n  r3 \u003d JsonProperty) $r2\n  if (r3 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  r4 \u003d r3.isRequired()\n  $r5 \u003d OptBoolean DEFAULT\u003e\n  if (r4 \u003d\u003d $r5) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d r4.asBoolean()\n  return\n}",
      "B3 {\n  $z0 \u003d r3.required()\n  $r6 \u003d Boolean.valueOf($z0)\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findPropertyAccess",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonProperty$Access findPropertyAccess(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonProperty ann \u003d _findAnnotation(m, JsonProperty.class);\r\n    if (ann !\u003d null) {\r\n        return ann.access();\r\n    }\r\n    return null;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonProperty;\")\n  r3 \u003d JsonProperty) $r2\n  if (r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r3.access()\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findPropertyDescription",
    "signature": "java.lang.String findPropertyDescription(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonPropertyDescription desc \u003d _findAnnotation(ann, JsonPropertyDescription.class);\r\n    return (desc \u003d\u003d null) ? null : desc.value();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonPropertyDescription;\")\n  r3 \u003d JsonPropertyDescription) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r3.value()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findPropertyIndex",
    "signature": "java.lang.Integer findPropertyIndex(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonProperty prop \u003d _findAnnotation(ann, JsonProperty.class);\r\n    if (prop !\u003d null) {\r\n        int ix \u003d prop.index();\r\n        if (ix !\u003d JsonProperty.INDEX_UNKNOWN) {\r\n            return Integer.valueOf(ix);\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(i0 \u003d\u003d $i2) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonProperty;\")\n  r3 \u003d JsonProperty) $r2\n  if (r3 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  i0 \u003d r3.index()\n  $i2 \u003d (int) -1\n  if (i0 \u003d\u003d $i2) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d Integer.valueOf(i0)\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findPropertyDefaultValue",
    "signature": "java.lang.String findPropertyDefaultValue(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonProperty prop \u003d _findAnnotation(ann, JsonProperty.class);\r\n    if (prop \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    String str \u003d prop.defaultValue();\r\n    // Since annotations do not allow nulls, need to assume empty means \"none\"\r\n    return str.isEmpty() ? null : str;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonProperty;\")\n  r3 \u003d JsonProperty) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r4 \u003d r3.defaultValue()\n  $z0 \u003d r4.isEmpty()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d null\n  goto B5\n}",
      "B4 {\n  $r5 \u003d r4\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findFormat",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonFormat$Value findFormat(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonFormat f \u003d _findAnnotation(ann, JsonFormat.class);\r\n    // NOTE: could also just call `JsonFormat.Value.from()` with `null`\r\n    // too, but that returns \"empty\" instance\r\n    return (f \u003d\u003d null) ? null : JsonFormat.Value.from(f);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonFormat;\")\n  r3 \u003d JsonFormat) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r4 \u003d JsonFormat$Value.from(r3)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findReferenceType",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty findReferenceType(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "visibility": "public",
    "body": "{\r\n    JsonManagedReference ref1 \u003d _findAnnotation(member, JsonManagedReference.class);\r\n    if (ref1 !\u003d null) {\r\n        return AnnotationIntrospector.ReferenceProperty.managed(ref1.value());\r\n    }\r\n    JsonBackReference ref2 \u003d _findAnnotation(member, JsonBackReference.class);\r\n    if (ref2 !\u003d null) {\r\n        return AnnotationIntrospector.ReferenceProperty.back(ref2.value());\r\n    }\r\n    return null;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(r5 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  AnnotatedMember\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonManagedReference;\")\n  r3 \u003d JsonManagedReference) $r2\n  if (r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d r3.value()\n  $r9 \u003d AnnotationIntrospector$ReferenceProperty.managed($r8)\n  return\n}",
      "B2 {\n  $r4 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonBackReference;\")\n  r5 \u003d JsonBackReference) $r4\n  if (r5 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d r5.value()\n  $r7 \u003d AnnotationIntrospector$ReferenceProperty.back($r6)\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findUnwrappingNameTransformer",
    "signature": "com.fasterxml.jackson.databind.util.NameTransformer findUnwrappingNameTransformer(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "visibility": "public",
    "body": "{\r\n    JsonUnwrapped ann \u003d _findAnnotation(member, JsonUnwrapped.class);\r\n    // if not enabled, just means annotation is not enabled; not necessarily\r\n    // that unwrapping should not be done (relevant when using chained introspectors)\r\n    if (ann \u003d\u003d null || !ann.enabled()) {\r\n        return null;\r\n    }\r\n    String prefix \u003d ann.prefix();\r\n    String suffix \u003d ann.suffix();\r\n    return NameTransformer.simpleTransformer(prefix, suffix);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  AnnotatedMember\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonUnwrapped;\")\n  r3 \u003d JsonUnwrapped) $r2\n  if (r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r3.enabled()\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  r4 \u003d r3.prefix()\n  r5 \u003d r3.suffix()\n  $r6 \u003d NameTransformer.simpleTransformer(r4, r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findInjectableValue",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JacksonInject$Value findInjectableValue(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "visibility": "public",
    "body": "{\r\n    JacksonInject ann \u003d _findAnnotation(m, JacksonInject.class);\r\n    if (ann \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // Empty String means that we should use name of declared value class.\r\n    JacksonInject.Value v \u003d JacksonInject.Value.from(ann);\r\n    if (!v.hasId()) {\r\n        Object id;\r\n        // slight complication; for setters, type\r\n        if (!(m instanceof AnnotatedMethod)) {\r\n            id \u003d m.getRawType().getName();\r\n        } else {\r\n            AnnotatedMethod am \u003d (AnnotatedMethod) m;\r\n            if (am.getParameterCount() \u003d\u003d 0) {\r\n                // getter\r\n                id \u003d m.getRawType().getName();\r\n            } else {\r\n                // setter\r\n                id \u003d am.getRawParameterType(0).getName();\r\n            }\r\n        }\r\n        v \u003d v.withId(id);\r\n    }\r\n    return v;\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B9",
      "B3 : If($z1 !\u003d 0) → B4 | else → B5",
      "B5 : If($i0 !\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  AnnotatedMember\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JacksonInject;\")\n  r3 \u003d JacksonInject) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r8 \u003d JacksonInject$Value.from(r3)\n  $z0 \u003d r8.hasId()\n  if ($z0 !\u003d 0) goto B3 else B9\n}",
      "B3 {\n  $z1 \u003d AnnotatedMethod\n  if ($z1 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r7 \u003d r1.getRawType()\n  r9 \u003d $r7.getName()\n  goto B8\n}",
      "B5 {\n  r4 \u003d AnnotatedMethod) r1\n  $i0 \u003d r4.getParameterCount()\n  if ($i0 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $r6 \u003d r1.getRawType()\n  r9 \u003d $r6.getName()\n  goto B8\n}",
      "B7 {\n  $r5 \u003d r4.getRawParameterType(0)\n  r9 \u003d $r5.getName()\n}",
      "B8 {\n  r8 \u003d r8.withId(r9)\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B9",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findInjectableValueId",
    "signature": "java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "visibility": "public",
    "body": "{\r\n    JacksonInject.Value v \u003d findInjectableValue(m);\r\n    return (v \u003d\u003d null) ? null : v.getId();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  AnnotatedMember\n  r2 \u003d r0.findInjectableValue(r1)\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d null\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r2.getId()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#findInjectableValue(...1)",
        "body": "{\r\n    JacksonInject ann \u003d _findAnnotation(m, JacksonInject.class);\r\n    if (ann \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // Empty String means that we should use name of declared value class.\r\n    JacksonInject.Value v \u003d JacksonInject.Value.from(ann);\r\n    if (!v.hasId()) {\r\n        Object id;\r\n        // slight complication; for setters, type\r\n        if (!(m instanceof AnnotatedMethod)) {\r\n            id \u003d m.getRawType().getName();\r\n        } else {\r\n            AnnotatedMethod am \u003d (AnnotatedMethod) m;\r\n            if (am.getParameterCount() \u003d\u003d 0) {\r\n                // getter\r\n                id \u003d m.getRawType().getName();\r\n            } else {\r\n                // setter\r\n                id \u003d am.getRawParameterType(0).getName();\r\n            }\r\n        }\r\n        v \u003d v.withId(id);\r\n    }\r\n    return v;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findViews",
    "signature": "java.lang.Class[] findViews(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonView ann \u003d _findAnnotation(a, JsonView.class);\r\n    return (ann \u003d\u003d null) ? null : ann.value();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonView;\")\n  r3 \u003d JsonView) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r3.value()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "resolveSetterConflict",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod resolveSetterConflict(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMethod,com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "visibility": "public",
    "body": "{\r\n    Class\u003c?\u003e cls1 \u003d setter1.getRawParameterType(0);\r\n    Class\u003c?\u003e cls2 \u003d setter2.getRawParameterType(0);\r\n    // First: prefer primitives over non-primitives\r\n    // 11-Dec-2015, tatu: TODO, perhaps consider wrappers for primitives too?\r\n    if (cls1.isPrimitive()) {\r\n        if (!cls2.isPrimitive()) {\r\n            return setter1;\r\n        }\r\n        // 10-May-2021, tatu: if both primitives cannot decide\r\n        return null;\r\n    } else if (cls2.isPrimitive()) {\r\n        return setter2;\r\n    }\r\n    if (cls1 \u003d\u003d String.class) {\r\n        if (cls2 !\u003d String.class) {\r\n            return setter1;\r\n        }\r\n    } else if (cls2 \u003d\u003d String.class) {\r\n        return setter2;\r\n    }\r\n    return null;\r\n}",
    "nodes": 12,
    "edges": 12,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B4",
      "B1 : If($z2 !\u003d 0) → B2 | else → B3",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6",
      "B6 : If(r1 !\u003d class \"Ljava/lang/String;\") → B7 | else → B9",
      "B7 : If(r3 \u003d\u003d class \"Ljava/lang/String;\") → B8 | else → B11",
      "B9 : If(r3 !\u003d class \"Ljava/lang/String;\") → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  MapperConfig\n  AnnotatedMethod\n  AnnotatedMethod\n  r1 \u003d r0.getRawParameterType(0)\n  r3 \u003d r2.getRawParameterType(0)\n  $z0 \u003d r1.isPrimitive()\n  if ($z0 \u003d\u003d false) goto B1 else B4\n}",
      "B1 {\n  $z2 \u003d r3.isPrimitive()\n  if ($z2 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z1 \u003d r3.isPrimitive()\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  if (r1 !\u003d class \"Ljava/lang/String;\") goto B7 else B9\n}",
      "B7 {\n  if (r3 \u003d\u003d class \"Ljava/lang/String;\") goto B8 else B11\n}",
      "B8 {\n  return\n}",
      "B9 {\n  if (r3 !\u003d class \"Ljava/lang/String;\") goto B10 else B11\n}",
      "B10 {\n  return\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findPolymorphicTypeInfo",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonTypeInfo$Value findPolymorphicTypeInfo(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonTypeInfo t \u003d _findAnnotation(ann, JsonTypeInfo.class);\r\n    return (t \u003d\u003d null) ? null : JsonTypeInfo.Value.from(t);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  MapperConfig\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonTypeInfo;\")\n  r3 \u003d JsonTypeInfo) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d null\n  goto B3\n}",
      "B2 {\n  $r5 \u003d JsonTypeInfo$Value.from(r3)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findPropertyTypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder findPropertyTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    // As per definition of @JsonTypeInfo, should only apply to contents of container\r\n    // (collection, map) types, not container types themselves:\r\n    // 17-Apr-2016, tatu: For 2.7.4 make sure ReferenceType also included\r\n    if (baseType.isContainerType() || baseType.isReferenceType()) {\r\n        return null;\r\n    }\r\n    // No per-member type overrides (yet)\r\n    return _findTypeResolver(config, am, baseType);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  MapperConfig\n  AnnotatedMember\n  JavaType\n  $z0 \u003d r0.isContainerType()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d r0.isReferenceType()\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r4 \u003d r1._findTypeResolver(r2, r3, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findTypeResolver(...3)",
        "body": "{\r\n    // since 2.16 : backporting {@link JsonTypeInfo.Value} from 3.0\r\n    JsonTypeInfo.Value typeInfo \u003d findPolymorphicTypeInfo(config, ann);\r\n    // First: maybe we have explicit type resolver?\r\n    TypeResolverBuilder\u003c?\u003e b;\r\n    JsonTypeResolver resAnn \u003d _findAnnotation(ann, JsonTypeResolver.class);\r\n    if (resAnn !\u003d null) {\r\n        if (typeInfo \u003d\u003d null) {\r\n            return null;\r\n        }\r\n        // let\u0027s not try to force access override (would need to pass\r\n        // settings through if we did, since that\u0027s not doable on some platforms)\r\n        b \u003d config.typeResolverBuilderInstance(ann, resAnn.value());\r\n    } else {\r\n        // if not, use standard one, if indicated by annotations\r\n        if (typeInfo \u003d\u003d null) {\r\n            return null;\r\n        }\r\n        // bit special; must return \u0027marker\u0027 to block use of default typing:\r\n        if (typeInfo.getIdType() \u003d\u003d JsonTypeInfo.Id.NONE) {\r\n            return _constructNoTypeResolverBuilder();\r\n        }\r\n        b \u003d _constructStdTypeResolverBuilder(config, typeInfo, baseType);\r\n    }\r\n    // Does it define a custom type id resolver?\r\n    JsonTypeIdResolver idResInfo \u003d _findAnnotation(ann, JsonTypeIdResolver.class);\r\n    TypeIdResolver idRes \u003d (idResInfo \u003d\u003d null) ? null : config.typeIdResolverInstance(ann, idResInfo.value());\r\n    if (idRes !\u003d null) {\r\n        idRes.init(baseType);\r\n    }\r\n    // 13-Aug-2011, tatu: One complication; external id only works for properties;\r\n    //    so if declared for a Class, we will need to map it to \"PROPERTY\"\r\n    //    instead of \"EXTERNAL_PROPERTY\"\r\n    JsonTypeInfo.As inclusion \u003d typeInfo.getInclusionType();\r\n    if (inclusion \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY \u0026\u0026 (ann instanceof AnnotatedClass)) {\r\n        typeInfo \u003d typeInfo.withInclusionType(JsonTypeInfo.As.PROPERTY);\r\n    }\r\n    Class\u003c?\u003e defaultImpl \u003d typeInfo.getDefaultImpl();\r\n    // 08-Dec-2014, tatu: To deprecate `JsonTypeInfo.None` we need to use other placeholder(s);\r\n    //   and since `java.util.Void` has other purpose (to indicate \"deser as null\"), we\u0027ll instead\r\n    //   use `JsonTypeInfo.class` itself. But any annotation type will actually do, as they have no\r\n    //   valid use (cannot instantiate as default)\r\n    if (defaultImpl !\u003d null \u0026\u0026 defaultImpl !\u003d JsonTypeInfo.None.class \u0026\u0026 !defaultImpl.isAnnotation()) {\r\n        typeInfo \u003d typeInfo.withDefaultImpl(defaultImpl);\r\n    }\r\n    b \u003d b.init(typeInfo, idRes);\r\n    return b;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findPropertyContentTypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder findPropertyContentTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    // First: let\u0027s ensure property is a container type: caller should have\r\n    // verified but just to be sure\r\n    if (containerType.getContentType() \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Must call method with a container or reference type (got \" + containerType + \")\");\r\n    }\r\n    return _findTypeResolver(config, am, containerType);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  MapperConfig\n  AnnotatedMember\n  JavaType\n  $r1 \u003d r0.getContentType()\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d IllegalArgumentException\n  $r7 \u003d String.valueOf(r0)\n  $r8 \u003d dynInvoke makeConcatWithConstants($r7)\n  new IllegalArgumentException($r8)\n  throw $r6\n}",
      "B2 {\n  $r5 \u003d r2._findTypeResolver(r3, r4, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findTypeResolver(...3)",
        "body": "{\r\n    // since 2.16 : backporting {@link JsonTypeInfo.Value} from 3.0\r\n    JsonTypeInfo.Value typeInfo \u003d findPolymorphicTypeInfo(config, ann);\r\n    // First: maybe we have explicit type resolver?\r\n    TypeResolverBuilder\u003c?\u003e b;\r\n    JsonTypeResolver resAnn \u003d _findAnnotation(ann, JsonTypeResolver.class);\r\n    if (resAnn !\u003d null) {\r\n        if (typeInfo \u003d\u003d null) {\r\n            return null;\r\n        }\r\n        // let\u0027s not try to force access override (would need to pass\r\n        // settings through if we did, since that\u0027s not doable on some platforms)\r\n        b \u003d config.typeResolverBuilderInstance(ann, resAnn.value());\r\n    } else {\r\n        // if not, use standard one, if indicated by annotations\r\n        if (typeInfo \u003d\u003d null) {\r\n            return null;\r\n        }\r\n        // bit special; must return \u0027marker\u0027 to block use of default typing:\r\n        if (typeInfo.getIdType() \u003d\u003d JsonTypeInfo.Id.NONE) {\r\n            return _constructNoTypeResolverBuilder();\r\n        }\r\n        b \u003d _constructStdTypeResolverBuilder(config, typeInfo, baseType);\r\n    }\r\n    // Does it define a custom type id resolver?\r\n    JsonTypeIdResolver idResInfo \u003d _findAnnotation(ann, JsonTypeIdResolver.class);\r\n    TypeIdResolver idRes \u003d (idResInfo \u003d\u003d null) ? null : config.typeIdResolverInstance(ann, idResInfo.value());\r\n    if (idRes !\u003d null) {\r\n        idRes.init(baseType);\r\n    }\r\n    // 13-Aug-2011, tatu: One complication; external id only works for properties;\r\n    //    so if declared for a Class, we will need to map it to \"PROPERTY\"\r\n    //    instead of \"EXTERNAL_PROPERTY\"\r\n    JsonTypeInfo.As inclusion \u003d typeInfo.getInclusionType();\r\n    if (inclusion \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY \u0026\u0026 (ann instanceof AnnotatedClass)) {\r\n        typeInfo \u003d typeInfo.withInclusionType(JsonTypeInfo.As.PROPERTY);\r\n    }\r\n    Class\u003c?\u003e defaultImpl \u003d typeInfo.getDefaultImpl();\r\n    // 08-Dec-2014, tatu: To deprecate `JsonTypeInfo.None` we need to use other placeholder(s);\r\n    //   and since `java.util.Void` has other purpose (to indicate \"deser as null\"), we\u0027ll instead\r\n    //   use `JsonTypeInfo.class` itself. But any annotation type will actually do, as they have no\r\n    //   valid use (cannot instantiate as default)\r\n    if (defaultImpl !\u003d null \u0026\u0026 defaultImpl !\u003d JsonTypeInfo.None.class \u0026\u0026 !defaultImpl.isAnnotation()) {\r\n        typeInfo \u003d typeInfo.withDefaultImpl(defaultImpl);\r\n    }\r\n    b \u003d b.init(typeInfo, idRes);\r\n    return b;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findSubtypes",
    "signature": "java.util.List findSubtypes(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonSubTypes t \u003d _findAnnotation(a, JsonSubTypes.class);\r\n    if (t \u003d\u003d null)\r\n        return null;\r\n    JsonSubTypes.Type[] types \u003d t.value();\r\n    // 02-Aug-2022, tatu: As per [databind#3500], may need to check uniqueness\r\n    //     of names\r\n    if (t.failOnRepeatedNames()) {\r\n        return findSubtypesCheckRepeatedNames(a.getName(), types);\r\n    } else {\r\n        ArrayList\u003cNamedType\u003e result \u003d new ArrayList\u003cNamedType\u003e(types.length);\r\n        for (JsonSubTypes.Type type : types) {\r\n            result.add(new NamedType(type.value(), type.name()));\r\n            // [databind#2761]: alternative set of names to use\r\n            for (String name : type.names()) {\r\n                result.add(new NamedType(type.value(), name));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B5 : If(i3 \u003e\u003d i1) → B6 | else → B10",
      "B7 : If(i4 \u003e\u003d i2) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonSubTypes;\")\n  r3 \u003d JsonSubTypes) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r4 \u003d r3.value()\n  $z0 \u003d r3.failOnRepeatedNames()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r14 \u003d r1.getName()\n  $r15 \u003d r0.findSubtypesCheckRepeatedNames($r14, r4)\n  return\n}",
      "B4 {\n  $r5 \u003d ArrayList\n  $i0 \u003d lengthof r4\n  new ArrayList($i0)\n  i1 \u003d lengthof r4\n  i3 \u003d 0\n}",
      "B5 {\n  if (i3 \u003e\u003d i1) goto B6 else B10\n}",
      "B6 {\n  r6 \u003d r4[i3]\n  $r7 \u003d NamedType\n  $r9 \u003d r6.value()\n  $r8 \u003d r6.name()\n  new NamedType($r9, $r8)\n  $r5.add($r7)\n  r10 \u003d r6.names()\n  i2 \u003d lengthof r10\n  i4 \u003d 0\n}",
      "B7 {\n  if (i4 \u003e\u003d i2) goto B8 else B9\n}",
      "B8 {\n  r11 \u003d r10[i4]\n  $r12 \u003d NamedType\n  $r13 \u003d r6.value()\n  new NamedType($r13, r11)\n  $r5.add($r12)\n  i4 \u003d i4 + 1\n  goto B7\n}",
      "B9 {\n  i3 \u003d i3 + 1\n  goto B5\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B7",
      "B9 --\u003e B5",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      },
      {
        "name": "JacksonAnnotationIntrospector#findSubtypesCheckRepeatedNames(...2)",
        "body": "{\r\n    ArrayList\u003cNamedType\u003e result \u003d new ArrayList\u003cNamedType\u003e(types.length);\r\n    Set\u003cString\u003e seenNames \u003d new HashSet\u003c\u003e();\r\n    for (JsonSubTypes.Type type : types) {\r\n        final String typeName \u003d type.name();\r\n        if (!typeName.isEmpty() \u0026\u0026 seenNames.contains(typeName)) {\r\n            throw new IllegalArgumentException(\"Annotated type [\" + annotatedTypeName + \"] got repeated subtype name [\" + typeName + \"]\");\r\n        } else {\r\n            seenNames.add(typeName);\r\n        }\r\n        result.add(new NamedType(type.value(), typeName));\r\n        // [databind#2761]: alternative set of names to use\r\n        for (String altName : type.names()) {\r\n            if (!altName.isEmpty() \u0026\u0026 seenNames.contains(altName)) {\r\n                throw new IllegalArgumentException(\"Annotated type [\" + annotatedTypeName + \"] got repeated subtype name [\" + altName + \"]\");\r\n            } else {\r\n                seenNames.add(altName);\r\n            }\r\n            result.add(new NamedType(type.value(), altName));\r\n        }\r\n    }\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findTypeName",
    "signature": "java.lang.String findTypeName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    JsonTypeName tn \u003d _findAnnotation(ac, JsonTypeName.class);\r\n    return (tn \u003d\u003d null) ? null : tn.value();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  AnnotatedClass\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonTypeName;\")\n  r3 \u003d JsonTypeName) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r3.value()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findObjectIdInfo",
    "signature": "com.fasterxml.jackson.databind.introspect.ObjectIdInfo findObjectIdInfo(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonIdentityInfo info \u003d _findAnnotation(ann, JsonIdentityInfo.class);\r\n    if (info \u003d\u003d null || info.generator() \u003d\u003d ObjectIdGenerators.None.class) {\r\n        return null;\r\n    }\r\n    // In future may need to allow passing namespace?\r\n    PropertyName name \u003d PropertyName.construct(info.property());\r\n    return new ObjectIdInfo(name, info.scope(), info.generator(), info.resolver());\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($r4 !\u003d class \"Lcom/fasterxml/jackson/annotation/ObjectIdGenerators$None;\") → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonIdentityInfo;\")\n  r3 \u003d JsonIdentityInfo) $r2\n  if (r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r3.generator()\n  if ($r4 !\u003d class \"Lcom/fasterxml/jackson/annotation/ObjectIdGenerators$None;\") goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r5 \u003d r3.property()\n  r6 \u003d PropertyName.construct($r5)\n  $r7 \u003d ObjectIdInfo\n  $r10 \u003d r3.scope()\n  $r9 \u003d r3.generator()\n  $r8 \u003d r3.resolver()\n  new ObjectIdInfo(r6, $r10, $r9, $r8)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findObjectReferenceInfo",
    "signature": "com.fasterxml.jackson.databind.introspect.ObjectIdInfo findObjectReferenceInfo(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)",
    "visibility": "public",
    "body": "{\r\n    JsonIdentityReference ref \u003d _findAnnotation(ann, JsonIdentityReference.class);\r\n    if (ref \u003d\u003d null) {\r\n        return objectIdInfo;\r\n    }\r\n    if (objectIdInfo \u003d\u003d null) {\r\n        objectIdInfo \u003d ObjectIdInfo.empty();\r\n    }\r\n    return objectIdInfo.withAlwaysAsId(ref.alwaysAsId());\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B2 : If(r5 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  ObjectIdInfo\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonIdentityReference;\")\n  r3 \u003d JsonIdentityReference) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r5 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  r5 \u003d ObjectIdInfo.empty()\n}",
      "B4 {\n  $z0 \u003d r3.alwaysAsId()\n  $r4 \u003d r5.withAlwaysAsId($z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findSerializer",
    "signature": "java.lang.Object findSerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonSerialize ann \u003d _findAnnotation(a, JsonSerialize.class);\r\n    if (ann !\u003d null) {\r\n        @SuppressWarnings(\"rawtypes\")\r\n        Class\u003c? extends JsonSerializer\u003e serClass \u003d ann.using();\r\n        if (serClass !\u003d JsonSerializer.None.class) {\r\n            return serClass;\r\n        }\r\n    }\r\n    /* 18-Oct-2010, tatu: [JACKSON-351] @JsonRawValue handled just here, for now;\r\n         *  if we need to get raw indicator from other sources need to add\r\n         *  separate accessor within {@link AnnotationIntrospector} interface.\r\n         */\r\n    JsonRawValue annRaw \u003d _findAnnotation(a, JsonRawValue.class);\r\n    if ((annRaw !\u003d null) \u0026\u0026 annRaw.value()) {\r\n        // let\u0027s construct instance with nominal type:\r\n        Class\u003c?\u003e cls \u003d a.getRawType();\r\n        return new RawSerializer\u003cObject\u003e(cls);\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r8 \u003d\u003d class \"Lcom/fasterxml/jackson/databind/JsonSerializer$None;\") → B2 | else → B3",
      "B3 : If($r7 \u003d\u003d null) → B4 | else → B6",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/databind/annotation/JsonSerialize;\")\n  r3 \u003d JsonSerialize) $r2\n  if (r3 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  r8 \u003d r3.using()\n  if (r8 \u003d\u003d class \"Lcom/fasterxml/jackson/databind/JsonSerializer$None;\") goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r4 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonRawValue;\")\n  $r7 \u003d JsonRawValue) $r4\n  if ($r7 \u003d\u003d null) goto B4 else B6\n}",
      "B4 {\n  $z0 \u003d $r7.value()\n  if ($z0 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  r5 \u003d r1.getRawType()\n  $r6 \u003d RawSerializer\n  new RawSerializer(r5)\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findKeySerializer",
    "signature": "java.lang.Object findKeySerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonSerialize ann \u003d _findAnnotation(a, JsonSerialize.class);\r\n    if (ann !\u003d null) {\r\n        @SuppressWarnings(\"rawtypes\")\r\n        Class\u003c? extends JsonSerializer\u003e serClass \u003d ann.keyUsing();\r\n        if (serClass !\u003d JsonSerializer.None.class) {\r\n            return serClass;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r4 \u003d\u003d class \"Lcom/fasterxml/jackson/databind/JsonSerializer$None;\") → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/databind/annotation/JsonSerialize;\")\n  r3 \u003d JsonSerialize) $r2\n  if (r3 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  r4 \u003d r3.keyUsing()\n  if (r4 \u003d\u003d class \"Lcom/fasterxml/jackson/databind/JsonSerializer$None;\") goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findContentSerializer",
    "signature": "java.lang.Object findContentSerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonSerialize ann \u003d _findAnnotation(a, JsonSerialize.class);\r\n    if (ann !\u003d null) {\r\n        @SuppressWarnings(\"rawtypes\")\r\n        Class\u003c? extends JsonSerializer\u003e serClass \u003d ann.contentUsing();\r\n        if (serClass !\u003d JsonSerializer.None.class) {\r\n            return serClass;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r4 \u003d\u003d class \"Lcom/fasterxml/jackson/databind/JsonSerializer$None;\") → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/databind/annotation/JsonSerialize;\")\n  r3 \u003d JsonSerialize) $r2\n  if (r3 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  r4 \u003d r3.contentUsing()\n  if (r4 \u003d\u003d class \"Lcom/fasterxml/jackson/databind/JsonSerializer$None;\") goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findNullSerializer",
    "signature": "java.lang.Object findNullSerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonSerialize ann \u003d _findAnnotation(a, JsonSerialize.class);\r\n    if (ann !\u003d null) {\r\n        @SuppressWarnings(\"rawtypes\")\r\n        Class\u003c? extends JsonSerializer\u003e serClass \u003d ann.nullsUsing();\r\n        if (serClass !\u003d JsonSerializer.None.class) {\r\n            return serClass;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r4 \u003d\u003d class \"Lcom/fasterxml/jackson/databind/JsonSerializer$None;\") → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/databind/annotation/JsonSerialize;\")\n  r3 \u003d JsonSerialize) $r2\n  if (r3 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  r4 \u003d r3.nullsUsing()\n  if (r4 \u003d\u003d class \"Lcom/fasterxml/jackson/databind/JsonSerializer$None;\") goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findPropertyInclusion",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonInclude$Value findPropertyInclusion(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonInclude inc \u003d _findAnnotation(a, JsonInclude.class);\r\n    JsonInclude.Value value \u003d (inc \u003d\u003d null) ? JsonInclude.Value.empty() : JsonInclude.Value.from(inc);\r\n    // only consider deprecated variant if we didn\u0027t have non-deprecated one:\r\n    if (value.getValueInclusion() \u003d\u003d JsonInclude.Include.USE_DEFAULTS) {\r\n        value \u003d _refinePropertyInclusion(a, value);\r\n    }\r\n    return value;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B3 : If($r5 !\u003d $r4) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonInclude;\")\n  r3 \u003d JsonInclude) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d JsonInclude$Value.empty()\n  goto B3\n}",
      "B2 {\n  $r6 \u003d JsonInclude$Value.from(r3)\n}",
      "B3 {\n  r7 \u003d $r6\n  $r5 \u003d $r6.getValueInclusion()\n  $r4 \u003d JsonInclude$Include USE_DEFAULTS\u003e\n  if ($r5 !\u003d $r4) goto B4 else B5\n}",
      "B4 {\n  r7 \u003d r0._refinePropertyInclusion(r1, $r6)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      },
      {
        "name": "JacksonAnnotationIntrospector#_refinePropertyInclusion(...2)",
        "body": "{\r\n    JsonSerialize ann \u003d _findAnnotation(a, JsonSerialize.class);\r\n    if (ann !\u003d null) {\r\n        switch(ann.include()) {\r\n            case ALWAYS:\r\n                return value.withValueInclusion(JsonInclude.Include.ALWAYS);\r\n            case NON_NULL:\r\n                return value.withValueInclusion(JsonInclude.Include.NON_NULL);\r\n            case NON_DEFAULT:\r\n                return value.withValueInclusion(JsonInclude.Include.NON_DEFAULT);\r\n            case NON_EMPTY:\r\n                return value.withValueInclusion(JsonInclude.Include.NON_EMPTY);\r\n            case DEFAULT_INCLUSION:\r\n            default:\r\n        }\r\n    }\r\n    return value;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findSerializationTyping",
    "signature": "com.fasterxml.jackson.databind.\u0027annotation\u0027.JsonSerialize$Typing findSerializationTyping(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonSerialize ann \u003d _findAnnotation(a, JsonSerialize.class);\r\n    return (ann \u003d\u003d null) ? null : ann.typing();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/databind/annotation/JsonSerialize;\")\n  r3 \u003d JsonSerialize) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r3.typing()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findSerializationConverter",
    "signature": "java.lang.Object findSerializationConverter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonSerialize ann \u003d _findAnnotation(a, JsonSerialize.class);\r\n    return (ann \u003d\u003d null) ? null : _classIfExplicit(ann.converter(), Converter.None.class);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/databind/annotation/JsonSerialize;\")\n  r3 \u003d JsonSerialize) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d null\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r3.converter()\n  $r5 \u003d r0._classIfExplicit($r4, class \"Lcom/fasterxml/jackson/databind/util/Converter$None;\")\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      },
      {
        "name": "JacksonAnnotationIntrospector#_classIfExplicit(...2)",
        "body": "{\r\n    cls \u003d _classIfExplicit(cls);\r\n    return (cls \u003d\u003d null || cls \u003d\u003d implicit) ? null : cls;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findSerializationContentConverter",
    "signature": "java.lang.Object findSerializationContentConverter(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "visibility": "public",
    "body": "{\r\n    JsonSerialize ann \u003d _findAnnotation(a, JsonSerialize.class);\r\n    return (ann \u003d\u003d null) ? null : _classIfExplicit(ann.contentConverter(), Converter.None.class);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  AnnotatedMember\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/databind/annotation/JsonSerialize;\")\n  r3 \u003d JsonSerialize) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d null\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r3.contentConverter()\n  $r5 \u003d r0._classIfExplicit($r4, class \"Lcom/fasterxml/jackson/databind/util/Converter$None;\")\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      },
      {
        "name": "JacksonAnnotationIntrospector#_classIfExplicit(...2)",
        "body": "{\r\n    cls \u003d _classIfExplicit(cls);\r\n    return (cls \u003d\u003d null || cls \u003d\u003d implicit) ? null : cls;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "refineSerializationType",
    "signature": "com.fasterxml.jackson.databind.JavaType refineSerializationType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    JavaType type \u003d baseType;\r\n    final TypeFactory tf \u003d config.getTypeFactory();\r\n    final JsonSerialize jsonSer \u003d _findAnnotation(a, JsonSerialize.class);\r\n    // Ok: start by refining the main type itself; common to all types\r\n    final Class\u003c?\u003e serClass \u003d (jsonSer \u003d\u003d null) ? null : _classIfExplicit(jsonSer.as());\r\n    if (serClass !\u003d null) {\r\n        if (type.hasRawClass(serClass)) {\r\n            // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of\r\n            //    static typing this way\r\n            type \u003d type.withStaticTyping();\r\n        } else {\r\n            Class\u003c?\u003e currRaw \u003d type.getRawClass();\r\n            try {\r\n                // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,\r\n                //   may be needed here too in future?\r\n                if (serClass.isAssignableFrom(currRaw)) {\r\n                    // common case\r\n                    type \u003d tf.constructGeneralizedType(type, serClass);\r\n                } else if (currRaw.isAssignableFrom(serClass)) {\r\n                    // specialization, ok as well\r\n                    type \u003d tf.constructSpecializedType(type, serClass);\r\n                } else if (_primitiveAndWrapper(currRaw, serClass)) {\r\n                    // 27-Apr-2017, tatu: [databind#1592] ignore primitive\u003c-\u003ewrapper refinements\r\n                    type \u003d type.withStaticTyping();\r\n                } else {\r\n                    throw _databindException(String.format(\"Cannot refine serialization type %s into %s; types not related\", type, serClass.getName()));\r\n                }\r\n            } catch (IllegalArgumentException iae) {\r\n                throw _databindException(iae, String.format(\"Failed to widen type %s with annotation (value %s), from \u0027%s\u0027: %s\", type, serClass.getName(), a.getName(), iae.getMessage()));\r\n            }\r\n        }\r\n    }\r\n    // Then further processing for container types\r\n    // First, key type (for Maps, Map-like types):\r\n    if (type.isMapLikeType()) {\r\n        JavaType keyType \u003d type.getKeyType();\r\n        final Class\u003c?\u003e keyClass \u003d (jsonSer \u003d\u003d null) ? null : _classIfExplicit(jsonSer.keyAs());\r\n        if (keyClass !\u003d null) {\r\n            if (keyType.hasRawClass(keyClass)) {\r\n                keyType \u003d keyType.withStaticTyping();\r\n            } else {\r\n                Class\u003c?\u003e currRaw \u003d keyType.getRawClass();\r\n                try {\r\n                    // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually\r\n                    //   specialize (narrow) type sometimes, even if more commonly opposite\r\n                    //   is needed.\r\n                    if (keyClass.isAssignableFrom(currRaw)) {\r\n                        // common case\r\n                        keyType \u003d tf.constructGeneralizedType(keyType, keyClass);\r\n                    } else if (currRaw.isAssignableFrom(keyClass)) {\r\n                        // specialization, ok as well\r\n                        keyType \u003d tf.constructSpecializedType(keyType, keyClass);\r\n                    } else if (_primitiveAndWrapper(currRaw, keyClass)) {\r\n                        // 27-Apr-2017, tatu: [databind#1592] ignore primitive\u003c-\u003ewrapper refinements\r\n                        keyType \u003d keyType.withStaticTyping();\r\n                    } else {\r\n                        throw _databindException(String.format(\"Cannot refine serialization key type %s into %s; types not related\", keyType, keyClass.getName()));\r\n                    }\r\n                } catch (IllegalArgumentException iae) {\r\n                    throw _databindException(iae, String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from \u0027%s\u0027: %s\", type, keyClass.getName(), a.getName(), iae.getMessage()));\r\n                }\r\n            }\r\n            type \u003d ((MapLikeType) type).withKeyType(keyType);\r\n        }\r\n    }\r\n    JavaType contentType \u003d type.getContentType();\r\n    if (contentType !\u003d null) {\r\n        // collection[like], map[like], array, reference\r\n        // And then value types for all containers:\r\n        final Class\u003c?\u003e contentClass \u003d (jsonSer \u003d\u003d null) ? null : _classIfExplicit(jsonSer.contentAs());\r\n        if (contentClass !\u003d null) {\r\n            if (contentType.hasRawClass(contentClass)) {\r\n                contentType \u003d contentType.withStaticTyping();\r\n            } else {\r\n                // 03-Apr-2016, tatu: As per [databind#1178], may need to actually\r\n                //   specialize (narrow) type sometimes, even if more commonly opposite\r\n                //   is needed.\r\n                Class\u003c?\u003e currRaw \u003d contentType.getRawClass();\r\n                try {\r\n                    if (contentClass.isAssignableFrom(currRaw)) {\r\n                        // common case\r\n                        contentType \u003d tf.constructGeneralizedType(contentType, contentClass);\r\n                    } else if (currRaw.isAssignableFrom(contentClass)) {\r\n                        // specialization, ok as well\r\n                        contentType \u003d tf.constructSpecializedType(contentType, contentClass);\r\n                    } else if (_primitiveAndWrapper(currRaw, contentClass)) {\r\n                        // 27-Apr-2017, tatu: [databind#1592] ignore primitive\u003c-\u003ewrapper refinements\r\n                        contentType \u003d contentType.withStaticTyping();\r\n                    } else {\r\n                        throw _databindException(String.format(\"Cannot refine serialization content type %s into %s; types not related\", contentType, contentClass.getName()));\r\n                    }\r\n                } catch (IllegalArgumentException iae) {\r\n                    // shouldn\u0027t really happen\r\n                    throw _databindException(iae, String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from \u0027%s\u0027: %s\", type, contentClass.getName(), a.getName(), iae.getMessage()));\r\n                }\r\n            }\r\n            type \u003d type.withContentType(contentType);\r\n        }\r\n    }\r\n    return type;\r\n}",
    "nodes": 50,
    "edges": 63,
    "cc": 15,
    "flowSummary": [
      "B0 : If(r6 !\u003d null) → B1 | else → B2",
      "B3 : If($r46 \u003d\u003d null) → B4 | else → B15",
      "B4 : If($z8 \u003d\u003d false) → B5 | else → B6",
      "B6 : If($z9 \u003d\u003d false) → B7 | else → B8",
      "B8 : If($z10 \u003d\u003d false) → B9 | else → B10",
      "B10 : If($z11 \u003d\u003d false) → B11 | else → B12",
      "B15 : If($z12 \u003d\u003d false) → B16 | else → B32",
      "B16 : If(r6 !\u003d null) → B17 | else → B18",
      "B19 : If($r49 \u003d\u003d null) → B20 | else → B32",
      "B20 : If($z4 \u003d\u003d false) → B21 | else → B22",
      "B22 : If($z5 \u003d\u003d false) → B23 | else → B24",
      "B24 : If($z6 \u003d\u003d false) → B25 | else → B26",
      "B26 : If($z7 \u003d\u003d false) → B27 | else → B28",
      "B32 : If($r53 \u003d\u003d null) → B33 | else → B49",
      "B33 : If(r6 !\u003d null) → B34 | else → B35",
      "B36 : If($r54 \u003d\u003d null) → B37 | else → B49",
      "B37 : If($z0 \u003d\u003d false) → B38 | else → B39",
      "B39 : If($z1 \u003d\u003d false) → B40 | else → B41",
      "B41 : If($z2 \u003d\u003d false) → B42 | else → B43",
      "B43 : If($z3 \u003d\u003d false) → B44 | else → B45"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  MapperConfig\n  Annotated\n  JavaType\n  r45 \u003d r0\n  r2 \u003d r1.getTypeFactory()\n  $r5 \u003d r3._findAnnotation(r4, class \"Lcom/fasterxml/jackson/databind/annotation/JsonSerialize;\")\n  r6 \u003d JsonSerialize) $r5\n  if (r6 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r46 \u003d null\n  goto B3\n}",
      "B2 {\n  $r7 \u003d r6.as()\n  $r46 \u003d r3._classIfExplicit($r7)\n}",
      "B3 {\n  r8 \u003d $r46\n  if ($r46 \u003d\u003d null) goto B4 else B15\n}",
      "B4 {\n  $z8 \u003d r0.hasRawClass($r46)\n  if ($z8 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  r45 \u003d r0.withStaticTyping()\n  goto B15\n}",
      "B6 {\n  r47 \u003d r0.getRawClass()\n  $z9 \u003d $r46.isAssignableFrom(r47)\n  if ($z9 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  r45 \u003d r2.constructGeneralizedType(r0, $r46)\n  goto B13\n}",
      "B8 {\n  $z10 \u003d r47.isAssignableFrom($r46)\n  if ($z10 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  r45 \u003d r2.constructSpecializedType(r0, $r46)\n  goto B13\n}",
      "B10 {\n  $z11 \u003d r3._primitiveAndWrapper(r47, $r46)\n  if ($z11 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  r45 \u003d r0.withStaticTyping()\n  goto B13\n}",
      "B12 {\n  $r20 \u003d Object)[2]\n  $r20[0] \u003d r0\n  $r21 \u003d $r46.getName()\n  $r20[1] \u003d $r21\n  $r22 \u003d String.format(\"Cannot refine serialization type %s into %s; types not related\", $r20)\n  $r23 \u003d r3._databindException($r22)\n  throw $r23\n}",
      "B13 {\n  goto B15\n}",
      "B14 {\n  $r38 :\u003d @caughtexception\n  $r39 \u003d Object)[4]\n  $r39[0] \u003d r0\n  $r40 \u003d r8.getName()\n  $r39[1] \u003d $r40\n  $r41 \u003d r4.getName()\n  $r39[2] \u003d $r41\n  $r42 \u003d $r38.getMessage()\n  $r39[3] \u003d $r42\n  $r43 \u003d String.format(\"Failed to widen type %s with annotation (value %s), from \\\u0027%s\\\u0027: %s\", $r39)\n  $r44 \u003d r3._databindException($r38, $r43)\n  throw $r44\n}",
      "B15 {\n  $z12 \u003d r45.isMapLikeType()\n  if ($z12 \u003d\u003d false) goto B16 else B32\n}",
      "B16 {\n  r48 \u003d r45.getKeyType()\n  if (r6 !\u003d null) goto B17 else B18\n}",
      "B17 {\n  $r49 \u003d null\n  goto B19\n}",
      "B18 {\n  $r14 \u003d r6.keyAs()\n  $r49 \u003d r3._classIfExplicit($r14)\n}",
      "B19 {\n  r50 \u003d $r49\n  if ($r49 \u003d\u003d null) goto B20 else B32\n}",
      "B20 {\n  $z4 \u003d r48.hasRawClass($r49)\n  if ($z4 \u003d\u003d false) goto B21 else B22\n}",
      "B21 {\n  r51 \u003d r48.withStaticTyping()\n  goto B31\n}",
      "B22 {\n  r52 \u003d r48.getRawClass()\n  $z5 \u003d $r49.isAssignableFrom(r52)\n  if ($z5 \u003d\u003d false) goto B23 else B24\n}",
      "B23 {\n  r51 \u003d r2.constructGeneralizedType(r48, $r49)\n  goto B29\n}",
      "B24 {\n  $z6 \u003d r52.isAssignableFrom($r49)\n  if ($z6 \u003d\u003d false) goto B25 else B26\n}",
      "B25 {\n  r51 \u003d r2.constructSpecializedType(r48, $r49)\n  goto B29\n}",
      "B26 {\n  $z7 \u003d r3._primitiveAndWrapper(r52, $r49)\n  if ($z7 \u003d\u003d false) goto B27 else B28\n}",
      "B27 {\n  r51 \u003d r48.withStaticTyping()\n  goto B29\n}",
      "B28 {\n  $r15 \u003d Object)[2]\n  $r15[0] \u003d r48\n  $r16 \u003d $r49.getName()\n  $r15[1] \u003d $r16\n  $r17 \u003d String.format(\"Cannot refine serialization key type %s into %s; types not related\", $r15)\n  $r18 \u003d r3._databindException($r17)\n  throw $r18\n}",
      "B29 {\n  goto B31\n}",
      "B30 {\n  $r31 :\u003d @caughtexception\n  $r32 \u003d Object)[4]\n  $r32[0] \u003d r45\n  $r33 \u003d r50.getName()\n  $r32[1] \u003d $r33\n  $r34 \u003d r4.getName()\n  $r32[2] \u003d $r34\n  $r35 \u003d $r31.getMessage()\n  $r32[3] \u003d $r35\n  $r36 \u003d String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from \\\u0027%s\\\u0027: %s\", $r32)\n  $r37 \u003d r3._databindException($r31, $r36)\n  throw $r37\n}",
      "B31 {\n  $r19 \u003d MapLikeType) r45\n  r45 \u003d $r19.withKeyType(r51)\n}",
      "B32 {\n  $r53 \u003d r45.getContentType()\n  if ($r53 \u003d\u003d null) goto B33 else B49\n}",
      "B33 {\n  if (r6 !\u003d null) goto B34 else B35\n}",
      "B34 {\n  $r54 \u003d null\n  goto B36\n}",
      "B35 {\n  $r9 \u003d r6.contentAs()\n  $r54 \u003d r3._classIfExplicit($r9)\n}",
      "B36 {\n  r55 \u003d $r54\n  if ($r54 \u003d\u003d null) goto B37 else B49\n}",
      "B37 {\n  $z0 \u003d $r53.hasRawClass($r54)\n  if ($z0 \u003d\u003d false) goto B38 else B39\n}",
      "B38 {\n  r56 \u003d $r53.withStaticTyping()\n  goto B48\n}",
      "B39 {\n  r57 \u003d $r53.getRawClass()\n  $z1 \u003d $r54.isAssignableFrom(r57)\n  if ($z1 \u003d\u003d false) goto B40 else B41\n}",
      "B40 {\n  r56 \u003d r2.constructGeneralizedType($r53, $r54)\n  goto B46\n}",
      "B41 {\n  $z2 \u003d r57.isAssignableFrom($r54)\n  if ($z2 \u003d\u003d false) goto B42 else B43\n}",
      "B42 {\n  r56 \u003d r2.constructSpecializedType($r53, $r54)\n  goto B46\n}",
      "B43 {\n  $z3 \u003d r3._primitiveAndWrapper(r57, $r54)\n  if ($z3 \u003d\u003d false) goto B44 else B45\n}",
      "B44 {\n  r56 \u003d $r53.withStaticTyping()\n  goto B46\n}",
      "B45 {\n  $r10 \u003d Object)[2]\n  $r10[0] \u003d $r53\n  $r11 \u003d $r54.getName()\n  $r10[1] \u003d $r11\n  $r12 \u003d String.format(\"Cannot refine serialization content type %s into %s; types not related\", $r10)\n  $r13 \u003d r3._databindException($r12)\n  throw $r13\n}",
      "B46 {\n  goto B48\n}",
      "B47 {\n  $r24 :\u003d @caughtexception\n  $r25 \u003d Object)[4]\n  $r25[0] \u003d r45\n  $r26 \u003d r55.getName()\n  $r25[1] \u003d $r26\n  $r27 \u003d r4.getName()\n  $r25[2] \u003d $r27\n  $r28 \u003d $r24.getMessage()\n  $r25[3] \u003d $r28\n  $r29 \u003d String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from \\\u0027%s\\\u0027: %s\", $r25)\n  $r30 \u003d r3._databindException($r24, $r29)\n  throw $r30\n}",
      "B48 {\n  r45 \u003d r45.withContentType(r56)\n}",
      "B49 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B15",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B15",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B13",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B13",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B16",
      "B15 --\u003e B32",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B19 --\u003e B32",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B31",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B29",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B29",
      "B26 --\u003e B27",
      "B26 --\u003e B28",
      "B27 --\u003e B29",
      "B28 --\u003e [EXIT]",
      "B29 --\u003e B31",
      "B30 --\u003e [EXIT]",
      "B31 --\u003e B32",
      "B32 --\u003e B33",
      "B32 --\u003e B49",
      "B33 --\u003e B34",
      "B33 --\u003e B35",
      "B34 --\u003e B36",
      "B35 --\u003e B36",
      "B36 --\u003e B37",
      "B36 --\u003e B49",
      "B37 --\u003e B38",
      "B37 --\u003e B39",
      "B38 --\u003e B48",
      "B39 --\u003e B40",
      "B39 --\u003e B41",
      "B40 --\u003e B46",
      "B41 --\u003e B42",
      "B41 --\u003e B43",
      "B42 --\u003e B46",
      "B43 --\u003e B44",
      "B43 --\u003e B45",
      "B44 --\u003e B46",
      "B45 --\u003e [EXIT]",
      "B46 --\u003e B48",
      "B47 --\u003e [EXIT]",
      "B48 --\u003e B49",
      "B49 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      },
      {
        "name": "JacksonAnnotationIntrospector#_databindException(...2)",
        "body": "{\r\n    return new JsonMappingException(null, msg, t);\r\n}"
      },
      {
        "name": "JacksonAnnotationIntrospector#_classIfExplicit(...1)",
        "body": "{\r\n    if (cls \u003d\u003d null || ClassUtil.isBogusClass(cls)) {\r\n        return null;\r\n    }\r\n    return cls;\r\n}"
      },
      {
        "name": "JacksonAnnotationIntrospector#_databindException(...1)",
        "body": "{\r\n    return new JsonMappingException(null, msg);\r\n}"
      },
      {
        "name": "JacksonAnnotationIntrospector#_primitiveAndWrapper(...2)",
        "body": "{\r\n    if (baseType.isPrimitive()) {\r\n        return baseType \u003d\u003d ClassUtil.primitiveType(refinement);\r\n    }\r\n    if (refinement.isPrimitive()) {\r\n        return refinement \u003d\u003d ClassUtil.primitiveType(baseType);\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findSerializationPropertyOrder",
    "signature": "java.lang.String[] findSerializationPropertyOrder(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    JsonPropertyOrder order \u003d _findAnnotation(ac, JsonPropertyOrder.class);\r\n    return (order \u003d\u003d null) ? null : order.value();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  AnnotatedClass\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonPropertyOrder;\")\n  r3 \u003d JsonPropertyOrder) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r3.value()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findAndAddVirtualProperties",
    "signature": "void findAndAddVirtualProperties(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass,java.util.List)",
    "visibility": "public",
    "body": "{\r\n    JsonAppend ann \u003d _findAnnotation(ac, JsonAppend.class);\r\n    if (ann \u003d\u003d null) {\r\n        return;\r\n    }\r\n    final boolean prepend \u003d ann.prepend();\r\n    JavaType propType \u003d null;\r\n    // First: any attribute-backed properties?\r\n    JsonAppend.Attr[] attrs \u003d ann.attrs();\r\n    for (int i \u003d 0, len \u003d attrs.length; i \u003c len; ++i) {\r\n        if (propType \u003d\u003d null) {\r\n            propType \u003d config.constructType(Object.class);\r\n        }\r\n        BeanPropertyWriter bpw \u003d _constructVirtualProperty(attrs[i], config, ac, propType);\r\n        if (prepend) {\r\n            properties.add(i, bpw);\r\n        } else {\r\n            properties.add(bpw);\r\n        }\r\n    }\r\n    // Then: general-purpose virtual properties?\r\n    JsonAppend.Prop[] props \u003d ann.props();\r\n    for (int i \u003d 0, len \u003d props.length; i \u003c len; ++i) {\r\n        BeanPropertyWriter bpw \u003d _constructVirtualProperty(props[i], config, ac);\r\n        if (prepend) {\r\n            properties.add(i, bpw);\r\n        } else {\r\n            properties.add(bpw);\r\n        }\r\n    }\r\n}",
    "nodes": 17,
    "edges": 21,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B3 : If(i0 \u003e\u003d i1) → B4 | else → B10",
      "B4 : If(r11 !\u003d null) → B5 | else → B6",
      "B6 : If(z0 \u003d\u003d false) → B7 | else → B8",
      "B11 : If(i2 \u003e\u003d i3) → B12 | else → B16",
      "B12 : If(z0 \u003d\u003d false) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  MapperConfig\n  AnnotatedClass\n  List\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/databind/annotation/JsonAppend;\")\n  r3 \u003d JsonAppend) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  z0 \u003d r3.prepend()\n  r11 \u003d null\n  r4 \u003d r3.attrs()\n  i0 \u003d 0\n  i1 \u003d lengthof r4\n}",
      "B3 {\n  if (i0 \u003e\u003d i1) goto B4 else B10\n}",
      "B4 {\n  if (r11 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  r11 \u003d r5.constructType(class \"Ljava/lang/Object;\")\n}",
      "B6 {\n  $r9 \u003d r4[i0]\n  $r10 \u003d r0._constructVirtualProperty($r9, r5, r1, r11)\n  if (z0 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  r8.add(i0, $r10)\n  goto B9\n}",
      "B8 {\n  r8.add($r10)\n}",
      "B9 {\n  i0 \u003d i0 + 1\n  goto B3\n}",
      "B10 {\n  r12 \u003d r3.props()\n  i2 \u003d 0\n  i3 \u003d lengthof r12\n}",
      "B11 {\n  if (i2 \u003e\u003d i3) goto B12 else B16\n}",
      "B12 {\n  $r6 \u003d r12[i2]\n  r7 \u003d r0._constructVirtualProperty($r6, r5, r1)\n  if (z0 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  r8.add(i2, r7)\n  goto B15\n}",
      "B14 {\n  r8.add(r7)\n}",
      "B15 {\n  i2 \u003d i2 + 1\n  goto B11\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B10",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B3",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B16",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B11",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      },
      {
        "name": "JacksonAnnotationIntrospector#_constructVirtualProperty(...4)",
        "body": "{\r\n    PropertyMetadata metadata \u003d attr.required() ? PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;\r\n    // could add Index, Description in future, if those matter\r\n    String attrName \u003d attr.value();\r\n    // allow explicit renaming; if none, default to attribute name\r\n    PropertyName propName \u003d _propertyName(attr.propName(), attr.propNamespace());\r\n    if (!propName.hasSimpleName()) {\r\n        propName \u003d PropertyName.construct(attrName);\r\n    }\r\n    // now, then, we need a placeholder for member (no real Field/Method):\r\n    AnnotatedMember member \u003d new VirtualAnnotatedMember(ac, ac.getRawType(), attrName, type);\r\n    // and with that and property definition\r\n    SimpleBeanPropertyDefinition propDef \u003d SimpleBeanPropertyDefinition.construct(config, member, propName, metadata, attr.include());\r\n    // can construct the property writer\r\n    return AttributePropertyWriter.construct(attrName, propDef, ac.getAnnotations(), type);\r\n}"
      },
      {
        "name": "JacksonAnnotationIntrospector#_constructVirtualProperty(...3)",
        "body": "{\r\n    PropertyMetadata metadata \u003d prop.required() ? PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;\r\n    PropertyName propName \u003d _propertyName(prop.name(), prop.namespace());\r\n    JavaType type \u003d config.constructType(prop.type());\r\n    // now, then, we need a placeholder for member (no real Field/Method):\r\n    AnnotatedMember member \u003d new VirtualAnnotatedMember(ac, ac.getRawType(), propName.getSimpleName(), type);\r\n    // and with that and property definition\r\n    SimpleBeanPropertyDefinition propDef \u003d SimpleBeanPropertyDefinition.construct(config, member, propName, metadata, prop.include());\r\n    Class\u003c?\u003e implClass \u003d prop.value();\r\n    HandlerInstantiator hi \u003d config.getHandlerInstantiator();\r\n    VirtualBeanPropertyWriter bpw \u003d (hi \u003d\u003d null) ? null : hi.virtualPropertyWriterInstance(config, implClass);\r\n    if (bpw \u003d\u003d null) {\r\n        bpw \u003d (VirtualBeanPropertyWriter) ClassUtil.createInstance(implClass, config.canOverrideAccessModifiers());\r\n    }\r\n    // one more thing: give it necessary contextual information\r\n    return bpw.withConfig(config, ac, propDef, type);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findNameForSerialization",
    "signature": "com.fasterxml.jackson.databind.PropertyName findNameForSerialization(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    boolean useDefault \u003d false;\r\n    JsonGetter jg \u003d _findAnnotation(a, JsonGetter.class);\r\n    if (jg !\u003d null) {\r\n        String s \u003d jg.value();\r\n        // 04-May-2018, tatu: Should allow for \"nameless\" `@JsonGetter` too\r\n        if (!s.isEmpty()) {\r\n            return PropertyName.construct(s);\r\n        }\r\n        useDefault \u003d true;\r\n    }\r\n    JsonProperty pann \u003d _findAnnotation(a, JsonProperty.class);\r\n    if (pann !\u003d null) {\r\n        // 14-Nov-2020, tatu: \"namespace\" added in 2.12\r\n        String ns \u003d pann.namespace();\r\n        if (ns !\u003d null \u0026\u0026 ns.isEmpty()) {\r\n            ns \u003d null;\r\n        }\r\n        return PropertyName.construct(pann.value(), ns);\r\n    }\r\n    if (useDefault || _hasOneOf(a, ANNOTATIONS_TO_INFER_SER)) {\r\n        return PropertyName.USE_DEFAULT;\r\n    }\r\n    return null;\r\n}",
    "nodes": 13,
    "edges": 16,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B4",
      "B1 : If($z2 !\u003d 0) → B2 | else → B3",
      "B4 : If($r7 \u003d\u003d null) → B5 | else → B9",
      "B5 : If(r10 \u003d\u003d null) → B6 | else → B8",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B8",
      "B9 : If(z3 !\u003d 0) → B10 | else → B11",
      "B10 : If($z0 \u003d\u003d false) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  z3 \u003d 0\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonGetter;\")\n  r3 \u003d JsonGetter) $r2\n  if (r3 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  r9 \u003d r3.value()\n  $z2 \u003d r9.isEmpty()\n  if ($z2 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r8 \u003d PropertyName.construct(r9)\n  return\n}",
      "B3 {\n  z3 \u003d 1\n}",
      "B4 {\n  $r4 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonProperty;\")\n  $r7 \u003d JsonProperty) $r4\n  if ($r7 \u003d\u003d null) goto B5 else B9\n}",
      "B5 {\n  r10 \u003d $r7.namespace()\n  if (r10 \u003d\u003d null) goto B6 else B8\n}",
      "B6 {\n  $z1 \u003d r10.isEmpty()\n  if ($z1 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  r10 \u003d null\n}",
      "B8 {\n  $r11 \u003d $r7.value()\n  $r12 \u003d PropertyName.construct($r11, r10)\n  return\n}",
      "B9 {\n  if (z3 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  $r6 \u003d Class[] ANNOTATIONS_TO_INFER_SER\u003e\n  $z0 \u003d r0._hasOneOf(r1, $r6)\n  if ($z0 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  $r5 \u003d PropertyName USE_DEFAULT\u003e\n  return\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      },
      {
        "name": "JacksonAnnotationIntrospector#_hasOneOf(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "hasAsKey",
    "signature": "java.lang.Boolean hasAsKey(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonKey ann \u003d _findAnnotation(a, JsonKey.class);\r\n    if (ann \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return ann.value();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  MapperConfig\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonKey;\")\n  r3 \u003d JsonKey) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r3.value()\n  $r4 \u003d Boolean.valueOf($z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "hasAsValue",
    "signature": "java.lang.Boolean hasAsValue(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonValue ann \u003d _findAnnotation(a, JsonValue.class);\r\n    if (ann \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return ann.value();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonValue;\")\n  r3 \u003d JsonValue) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r3.value()\n  $r4 \u003d Boolean.valueOf($z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "hasAnyGetter",
    "signature": "java.lang.Boolean hasAnyGetter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonAnyGetter ann \u003d _findAnnotation(a, JsonAnyGetter.class);\r\n    if (ann \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return ann.enabled();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonAnyGetter;\")\n  r3 \u003d JsonAnyGetter) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r3.enabled()\n  $r4 \u003d Boolean.valueOf($z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "hasAsValueAnnotation",
    "signature": "boolean hasAsValueAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "visibility": "public",
    "body": "{\r\n    JsonValue ann \u003d _findAnnotation(am, JsonValue.class);\r\n    // value of \u0027false\u0027 means disabled...\r\n    return (ann !\u003d null) \u0026\u0026 ann.value();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  AnnotatedMethod\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonValue;\")\n  r3 \u003d JsonValue) $r2\n  if (r3 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d r3.value()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findDeserializer",
    "signature": "java.lang.Object findDeserializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonDeserialize ann \u003d _findAnnotation(a, JsonDeserialize.class);\r\n    if (ann !\u003d null) {\r\n        @SuppressWarnings(\"rawtypes\")\r\n        Class\u003c? extends JsonDeserializer\u003e deserClass \u003d ann.using();\r\n        if (deserClass !\u003d JsonDeserializer.None.class) {\r\n            return deserClass;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r4 \u003d\u003d class \"Lcom/fasterxml/jackson/databind/JsonDeserializer$None;\") → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/databind/annotation/JsonDeserialize;\")\n  r3 \u003d JsonDeserialize) $r2\n  if (r3 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  r4 \u003d r3.using()\n  if (r4 \u003d\u003d class \"Lcom/fasterxml/jackson/databind/JsonDeserializer$None;\") goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findKeyDeserializer",
    "signature": "java.lang.Object findKeyDeserializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonDeserialize ann \u003d _findAnnotation(a, JsonDeserialize.class);\r\n    if (ann !\u003d null) {\r\n        Class\u003c? extends KeyDeserializer\u003e deserClass \u003d ann.keyUsing();\r\n        if (deserClass !\u003d KeyDeserializer.None.class) {\r\n            return deserClass;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r4 \u003d\u003d class \"Lcom/fasterxml/jackson/databind/KeyDeserializer$None;\") → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/databind/annotation/JsonDeserialize;\")\n  r3 \u003d JsonDeserialize) $r2\n  if (r3 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  r4 \u003d r3.keyUsing()\n  if (r4 \u003d\u003d class \"Lcom/fasterxml/jackson/databind/KeyDeserializer$None;\") goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findContentDeserializer",
    "signature": "java.lang.Object findContentDeserializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonDeserialize ann \u003d _findAnnotation(a, JsonDeserialize.class);\r\n    if (ann !\u003d null) {\r\n        @SuppressWarnings(\"rawtypes\")\r\n        Class\u003c? extends JsonDeserializer\u003e deserClass \u003d ann.contentUsing();\r\n        if (deserClass !\u003d JsonDeserializer.None.class) {\r\n            return deserClass;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r4 \u003d\u003d class \"Lcom/fasterxml/jackson/databind/JsonDeserializer$None;\") → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/databind/annotation/JsonDeserialize;\")\n  r3 \u003d JsonDeserialize) $r2\n  if (r3 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  r4 \u003d r3.contentUsing()\n  if (r4 \u003d\u003d class \"Lcom/fasterxml/jackson/databind/JsonDeserializer$None;\") goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findDeserializationConverter",
    "signature": "java.lang.Object findDeserializationConverter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonDeserialize ann \u003d _findAnnotation(a, JsonDeserialize.class);\r\n    return (ann \u003d\u003d null) ? null : _classIfExplicit(ann.converter(), Converter.None.class);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/databind/annotation/JsonDeserialize;\")\n  r3 \u003d JsonDeserialize) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d null\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r3.converter()\n  $r5 \u003d r0._classIfExplicit($r4, class \"Lcom/fasterxml/jackson/databind/util/Converter$None;\")\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      },
      {
        "name": "JacksonAnnotationIntrospector#_classIfExplicit(...2)",
        "body": "{\r\n    cls \u003d _classIfExplicit(cls);\r\n    return (cls \u003d\u003d null || cls \u003d\u003d implicit) ? null : cls;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findDeserializationContentConverter",
    "signature": "java.lang.Object findDeserializationContentConverter(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "visibility": "public",
    "body": "{\r\n    JsonDeserialize ann \u003d _findAnnotation(a, JsonDeserialize.class);\r\n    return (ann \u003d\u003d null) ? null : _classIfExplicit(ann.contentConverter(), Converter.None.class);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  AnnotatedMember\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/databind/annotation/JsonDeserialize;\")\n  r3 \u003d JsonDeserialize) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d null\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r3.contentConverter()\n  $r5 \u003d r0._classIfExplicit($r4, class \"Lcom/fasterxml/jackson/databind/util/Converter$None;\")\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      },
      {
        "name": "JacksonAnnotationIntrospector#_classIfExplicit(...2)",
        "body": "{\r\n    cls \u003d _classIfExplicit(cls);\r\n    return (cls \u003d\u003d null || cls \u003d\u003d implicit) ? null : cls;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "refineDeserializationType",
    "signature": "com.fasterxml.jackson.databind.JavaType refineDeserializationType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    JavaType type \u003d baseType;\r\n    final TypeFactory tf \u003d config.getTypeFactory();\r\n    final JsonDeserialize jsonDeser \u003d _findAnnotation(a, JsonDeserialize.class);\r\n    // Ok: start by refining the main type itself; common to all types\r\n    final Class\u003c?\u003e valueClass \u003d (jsonDeser \u003d\u003d null) ? null : _classIfExplicit(jsonDeser.as());\r\n    if ((valueClass !\u003d null) \u0026\u0026 !type.hasRawClass(valueClass) \u0026\u0026 !_primitiveAndWrapper(type, valueClass)) {\r\n        try {\r\n            type \u003d tf.constructSpecializedType(type, valueClass);\r\n        } catch (IllegalArgumentException iae) {\r\n            throw _databindException(iae, String.format(\"Failed to narrow type %s with annotation (value %s), from \u0027%s\u0027: %s\", type, valueClass.getName(), a.getName(), iae.getMessage()));\r\n        }\r\n    }\r\n    // Then further processing for container types\r\n    // First, key type (for Maps, Map-like types):\r\n    if (type.isMapLikeType()) {\r\n        JavaType keyType \u003d type.getKeyType();\r\n        final Class\u003c?\u003e keyClass \u003d (jsonDeser \u003d\u003d null) ? null : _classIfExplicit(jsonDeser.keyAs());\r\n        if ((keyClass !\u003d null) \u0026\u0026 !_primitiveAndWrapper(keyType, keyClass)) {\r\n            try {\r\n                keyType \u003d tf.constructSpecializedType(keyType, keyClass);\r\n                type \u003d ((MapLikeType) type).withKeyType(keyType);\r\n            } catch (IllegalArgumentException iae) {\r\n                throw _databindException(iae, String.format(\"Failed to narrow key type of %s with concrete-type annotation (value %s), from \u0027%s\u0027: %s\", type, keyClass.getName(), a.getName(), iae.getMessage()));\r\n            }\r\n        }\r\n    }\r\n    JavaType contentType \u003d type.getContentType();\r\n    if (contentType !\u003d null) {\r\n        // collection[like], map[like], array, reference\r\n        // And then value types for all containers:\r\n        final Class\u003c?\u003e contentClass \u003d (jsonDeser \u003d\u003d null) ? null : _classIfExplicit(jsonDeser.contentAs());\r\n        if ((contentClass !\u003d null) \u0026\u0026 !_primitiveAndWrapper(contentType, contentClass)) {\r\n            try {\r\n                contentType \u003d tf.constructSpecializedType(contentType, contentClass);\r\n                type \u003d type.withContentType(contentType);\r\n            } catch (IllegalArgumentException iae) {\r\n                throw _databindException(iae, String.format(\"Failed to narrow value type of %s with concrete-type annotation (value %s), from \u0027%s\u0027: %s\", type, contentClass.getName(), a.getName(), iae.getMessage()));\r\n            }\r\n        }\r\n    }\r\n    return type;\r\n}",
    "nodes": 25,
    "edges": 33,
    "cc": 10,
    "flowSummary": [
      "B0 : If(r6 !\u003d null) → B1 | else → B2",
      "B3 : If($r34 \u003d\u003d null) → B4 | else → B8",
      "B4 : If($z2 !\u003d 0) → B5 | else → B8",
      "B5 : If($z3 !\u003d 0) → B6 | else → B8",
      "B8 : If($z4 \u003d\u003d false) → B9 | else → B16",
      "B9 : If(r6 !\u003d null) → B10 | else → B11",
      "B12 : If($r36 \u003d\u003d null) → B13 | else → B16",
      "B13 : If($z1 !\u003d 0) → B14 | else → B16",
      "B16 : If($r39 \u003d\u003d null) → B17 | else → B24",
      "B17 : If(r6 !\u003d null) → B18 | else → B19",
      "B20 : If($r40 \u003d\u003d null) → B21 | else → B24",
      "B21 : If($z0 !\u003d 0) → B22 | else → B24"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  MapperConfig\n  Annotated\n  JavaType\n  r33 \u003d r0\n  r2 \u003d r1.getTypeFactory()\n  $r5 \u003d r3._findAnnotation(r4, class \"Lcom/fasterxml/jackson/databind/annotation/JsonDeserialize;\")\n  r6 \u003d JsonDeserialize) $r5\n  if (r6 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r34 \u003d null\n  goto B3\n}",
      "B2 {\n  $r7 \u003d r6.as()\n  $r34 \u003d r3._classIfExplicit($r7)\n}",
      "B3 {\n  r8 \u003d $r34\n  if ($r34 \u003d\u003d null) goto B4 else B8\n}",
      "B4 {\n  $z2 \u003d r0.hasRawClass($r34)\n  if ($z2 !\u003d 0) goto B5 else B8\n}",
      "B5 {\n  $z3 \u003d r3._primitiveAndWrapper(r0, $r34)\n  if ($z3 !\u003d 0) goto B6 else B8\n}",
      "B6 {\n  r33 \u003d r2.constructSpecializedType(r0, $r34)\n  goto B8\n}",
      "B7 {\n  $r26 :\u003d @caughtexception\n  $r27 \u003d Object)[4]\n  $r27[0] \u003d r0\n  $r28 \u003d r8.getName()\n  $r27[1] \u003d $r28\n  $r29 \u003d r4.getName()\n  $r27[2] \u003d $r29\n  $r30 \u003d $r26.getMessage()\n  $r27[3] \u003d $r30\n  $r31 \u003d String.format(\"Failed to narrow type %s with annotation (value %s), from \\\u0027%s\\\u0027: %s\", $r27)\n  $r32 \u003d r3._databindException($r26, $r31)\n  throw $r32\n}",
      "B8 {\n  $z4 \u003d r33.isMapLikeType()\n  if ($z4 \u003d\u003d false) goto B9 else B16\n}",
      "B9 {\n  r35 \u003d r33.getKeyType()\n  if (r6 !\u003d null) goto B10 else B11\n}",
      "B10 {\n  $r36 \u003d null\n  goto B12\n}",
      "B11 {\n  $r10 \u003d r6.keyAs()\n  $r36 \u003d r3._classIfExplicit($r10)\n}",
      "B12 {\n  r37 \u003d $r36\n  if ($r36 \u003d\u003d null) goto B13 else B16\n}",
      "B13 {\n  $z1 \u003d r3._primitiveAndWrapper(r35, $r36)\n  if ($z1 !\u003d 0) goto B14 else B16\n}",
      "B14 {\n  r38 \u003d r2.constructSpecializedType(r35, $r36)\n  $r11 \u003d MapLikeType) r33\n  r33 \u003d $r11.withKeyType(r38)\n  goto B16\n}",
      "B15 {\n  $r19 :\u003d @caughtexception\n  $r20 \u003d Object)[4]\n  $r20[0] \u003d r33\n  $r21 \u003d r37.getName()\n  $r20[1] \u003d $r21\n  $r22 \u003d r4.getName()\n  $r20[2] \u003d $r22\n  $r23 \u003d $r19.getMessage()\n  $r20[3] \u003d $r23\n  $r24 \u003d String.format(\"Failed to narrow key type of %s with concrete-type annotation (value %s), from \\\u0027%s\\\u0027: %s\", $r20)\n  $r25 \u003d r3._databindException($r19, $r24)\n  throw $r25\n}",
      "B16 {\n  $r39 \u003d r33.getContentType()\n  if ($r39 \u003d\u003d null) goto B17 else B24\n}",
      "B17 {\n  if (r6 !\u003d null) goto B18 else B19\n}",
      "B18 {\n  $r40 \u003d null\n  goto B20\n}",
      "B19 {\n  $r9 \u003d r6.contentAs()\n  $r40 \u003d r3._classIfExplicit($r9)\n}",
      "B20 {\n  r41 \u003d $r40\n  if ($r40 \u003d\u003d null) goto B21 else B24\n}",
      "B21 {\n  $z0 \u003d r3._primitiveAndWrapper($r39, $r40)\n  if ($z0 !\u003d 0) goto B22 else B24\n}",
      "B22 {\n  r42 \u003d r2.constructSpecializedType($r39, $r40)\n  r33 \u003d r33.withContentType(r42)\n  goto B24\n}",
      "B23 {\n  $r12 :\u003d @caughtexception\n  $r13 \u003d Object)[4]\n  $r13[0] \u003d r33\n  $r14 \u003d r41.getName()\n  $r13[1] \u003d $r14\n  $r15 \u003d r4.getName()\n  $r13[2] \u003d $r15\n  $r16 \u003d $r12.getMessage()\n  $r13[3] \u003d $r16\n  $r17 \u003d String.format(\"Failed to narrow value type of %s with concrete-type annotation (value %s), from \\\u0027%s\\\u0027: %s\", $r13)\n  $r18 \u003d r3._databindException($r12, $r17)\n  throw $r18\n}",
      "B24 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B16",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B16",
      "B13 --\u003e B14",
      "B13 --\u003e B16",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B24",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B20",
      "B20 --\u003e B21",
      "B20 --\u003e B24",
      "B21 --\u003e B22",
      "B21 --\u003e B24",
      "B22 --\u003e B24",
      "B23 --\u003e [EXIT]",
      "B24 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      },
      {
        "name": "JacksonAnnotationIntrospector#_databindException(...2)",
        "body": "{\r\n    return new JsonMappingException(null, msg, t);\r\n}"
      },
      {
        "name": "JacksonAnnotationIntrospector#_classIfExplicit(...1)",
        "body": "{\r\n    if (cls \u003d\u003d null || ClassUtil.isBogusClass(cls)) {\r\n        return null;\r\n    }\r\n    return cls;\r\n}"
      },
      {
        "name": "JacksonAnnotationIntrospector#_primitiveAndWrapper(...2)",
        "body": "{\r\n    if (baseType.isPrimitive()) {\r\n        return baseType \u003d\u003d ClassUtil.primitiveType(refinement);\r\n    }\r\n    if (refinement.isPrimitive()) {\r\n        return refinement \u003d\u003d ClassUtil.primitiveType(baseType);\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findValueInstantiator",
    "signature": "java.lang.Object findValueInstantiator(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    JsonValueInstantiator ann \u003d _findAnnotation(ac, JsonValueInstantiator.class);\r\n    // no \u0027null\u0027 marker yet, so:\r\n    return (ann \u003d\u003d null) ? null : ann.value();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  AnnotatedClass\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/databind/annotation/JsonValueInstantiator;\")\n  r3 \u003d JsonValueInstantiator) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r3.value()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findPOJOBuilder",
    "signature": "java.lang.Class findPOJOBuilder(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    JsonDeserialize ann \u003d _findAnnotation(ac, JsonDeserialize.class);\r\n    return (ann \u003d\u003d null) ? null : _classIfExplicit(ann.builder());\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  AnnotatedClass\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/databind/annotation/JsonDeserialize;\")\n  r3 \u003d JsonDeserialize) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d null\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r3.builder()\n  $r5 \u003d r0._classIfExplicit($r4)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      },
      {
        "name": "JacksonAnnotationIntrospector#_classIfExplicit(...1)",
        "body": "{\r\n    if (cls \u003d\u003d null || ClassUtil.isBogusClass(cls)) {\r\n        return null;\r\n    }\r\n    return cls;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findPOJOBuilderConfig",
    "signature": "com.fasterxml.jackson.databind.\u0027annotation\u0027.JsonPOJOBuilder$Value findPOJOBuilderConfig(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    JsonPOJOBuilder ann \u003d _findAnnotation(ac, JsonPOJOBuilder.class);\r\n    return (ann \u003d\u003d null) ? null : new JsonPOJOBuilder.Value(ann);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  AnnotatedClass\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/databind/annotation/JsonPOJOBuilder;\")\n  r3 \u003d JsonPOJOBuilder) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r4 \u003d JsonPOJOBuilder$Value\n  new JsonPOJOBuilder$Value(r3)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findNameForDeserialization",
    "signature": "com.fasterxml.jackson.databind.PropertyName findNameForDeserialization(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    // @JsonSetter has precedence over @JsonProperty, being more specific\r\n    boolean useDefault \u003d false;\r\n    JsonSetter js \u003d _findAnnotation(a, JsonSetter.class);\r\n    if (js !\u003d null) {\r\n        String s \u003d js.value();\r\n        // 04-May-2018, tatu: Need to allow for \"nameless\" `@JsonSetter` too\r\n        if (s.isEmpty()) {\r\n            useDefault \u003d true;\r\n        } else {\r\n            return PropertyName.construct(s);\r\n        }\r\n    }\r\n    JsonProperty pann \u003d _findAnnotation(a, JsonProperty.class);\r\n    if (pann !\u003d null) {\r\n        // 14-Nov-2020, tatu: \"namespace\" added in 2.12\r\n        String ns \u003d pann.namespace();\r\n        if (ns !\u003d null \u0026\u0026 ns.isEmpty()) {\r\n            ns \u003d null;\r\n        }\r\n        return PropertyName.construct(pann.value(), ns);\r\n    }\r\n    if (useDefault || _hasOneOf(a, ANNOTATIONS_TO_INFER_DESER)) {\r\n        return PropertyName.USE_DEFAULT;\r\n    }\r\n    return null;\r\n}",
    "nodes": 13,
    "edges": 16,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B4",
      "B1 : If($z2 \u003d\u003d false) → B2 | else → B3",
      "B4 : If($r8 \u003d\u003d null) → B5 | else → B9",
      "B5 : If(r10 \u003d\u003d null) → B6 | else → B8",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B8",
      "B9 : If(z3 !\u003d 0) → B10 | else → B11",
      "B10 : If($z0 \u003d\u003d false) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  z3 \u003d 0\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonSetter;\")\n  r3 \u003d JsonSetter) $r2\n  if (r3 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  r9 \u003d r3.value()\n  $z2 \u003d r9.isEmpty()\n  if ($z2 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  z3 \u003d 1\n  goto B4\n}",
      "B3 {\n  $r7 \u003d PropertyName.construct(r9)\n  return\n}",
      "B4 {\n  $r4 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonProperty;\")\n  $r8 \u003d JsonProperty) $r4\n  if ($r8 \u003d\u003d null) goto B5 else B9\n}",
      "B5 {\n  r10 \u003d $r8.namespace()\n  if (r10 \u003d\u003d null) goto B6 else B8\n}",
      "B6 {\n  $z1 \u003d r10.isEmpty()\n  if ($z1 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  r10 \u003d null\n}",
      "B8 {\n  $r11 \u003d $r8.value()\n  $r12 \u003d PropertyName.construct($r11, r10)\n  return\n}",
      "B9 {\n  if (z3 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  $r6 \u003d Class[] ANNOTATIONS_TO_INFER_DESER\u003e\n  $z0 \u003d r0._hasOneOf(r1, $r6)\n  if ($z0 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  $r5 \u003d PropertyName USE_DEFAULT\u003e\n  return\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      },
      {
        "name": "JacksonAnnotationIntrospector#_hasOneOf(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "hasAnySetter",
    "signature": "java.lang.Boolean hasAnySetter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonAnySetter ann \u003d _findAnnotation(a, JsonAnySetter.class);\r\n    return (ann \u003d\u003d null) ? null : ann.enabled();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonAnySetter;\")\n  r3 \u003d JsonAnySetter) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $z0 \u003d r3.enabled()\n  $r4 \u003d Boolean.valueOf($z0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findMergeInfo",
    "signature": "java.lang.Boolean findMergeInfo(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonMerge ann \u003d _findAnnotation(a, JsonMerge.class);\r\n    return (ann \u003d\u003d null) ? null : ann.value().asBoolean();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonMerge;\")\n  r3 \u003d JsonMerge) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d null\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r3.value()\n  $r5 \u003d $r4.asBoolean()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "hasCreatorAnnotation",
    "signature": "boolean hasCreatorAnnotation(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    /* No dedicated disabling; regular @JsonIgnore used if needs to be\r\n         * ignored (and if so, is handled prior to this method getting called)\r\n         */\r\n    JsonCreator ann \u003d _findAnnotation(a, JsonCreator.class);\r\n    if (ann !\u003d null) {\r\n        return (ann.mode() !\u003d JsonCreator.Mode.DISABLED);\r\n    }\r\n    // 19-Apr-2016, tatu: As per [databind#1197], [databind#1122] (and some related),\r\n    //    may or may not consider it a creator\r\n    if (_cfgConstructorPropertiesImpliesCreator) {\r\n        if (a instanceof AnnotatedConstructor) {\r\n            if (_java7Helper !\u003d null) {\r\n                Boolean b \u003d _java7Helper.hasCreatorAnnotation(a);\r\n                if (b !\u003d null) {\r\n                    return b.booleanValue();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 11,
    "edges": 14,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B5",
      "B1 : If($r8 \u003d\u003d $r7) → B2 | else → B3",
      "B5 : If($z0 \u003d\u003d false) → B6 | else → B10",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B10",
      "B7 : If($r4 \u003d\u003d null) → B8 | else → B10",
      "B8 : If(r6 \u003d\u003d null) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonCreator;\")\n  r3 \u003d JsonCreator) $r2\n  if (r3 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  $r8 \u003d r3.mode()\n  $r7 \u003d JsonCreator$Mode DISABLED\u003e\n  if ($r8 \u003d\u003d $r7) goto B2 else B3\n}",
      "B2 {\n  $z3 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z3 \u003d 0\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $z0 \u003d JacksonAnnotationIntrospector: boolean _cfgConstructorPropertiesImpliesCreator\u003e\n  if ($z0 \u003d\u003d false) goto B6 else B10\n}",
      "B6 {\n  $z1 \u003d AnnotatedConstructor\n  if ($z1 \u003d\u003d false) goto B7 else B10\n}",
      "B7 {\n  $r4 \u003d Java7Support _java7Helper\u003e\n  if ($r4 \u003d\u003d null) goto B8 else B10\n}",
      "B8 {\n  $r5 \u003d Java7Support _java7Helper\u003e\n  r6 \u003d $r5.hasCreatorAnnotation(r1)\n  if (r6 \u003d\u003d null) goto B9 else B10\n}",
      "B9 {\n  $z2 \u003d r6.booleanValue()\n  return\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findCreatorBinding",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonCreator$Mode findCreatorBinding(com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonCreator ann \u003d _findAnnotation(a, JsonCreator.class);\r\n    return (ann \u003d\u003d null) ? null : ann.mode();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonCreator;\")\n  r3 \u003d JsonCreator) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r3.mode()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "methodName": "findCreatorAnnotation",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonCreator$Mode findCreatorAnnotation(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated)",
    "visibility": "public",
    "body": "{\r\n    JsonCreator ann \u003d _findAnnotation(a, JsonCreator.class);\r\n    JsonCreator.Mode mode;\r\n    if (ann \u003d\u003d null) {\r\n        mode \u003d null;\r\n    } else {\r\n        mode \u003d ann.mode();\r\n        // 25-Jan-2025, tatu: [databind#4809] Need to avoid \"DEFAULT\" from masking\r\n        //   @CreatorProperties-provided value\r\n        if (mode !\u003d JsonCreator.Mode.DEFAULT) {\r\n            return mode;\r\n        }\r\n    }\r\n    if (_cfgConstructorPropertiesImpliesCreator \u0026\u0026 config.isEnabled(MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES)) {\r\n        if (a instanceof AnnotatedConstructor) {\r\n            if (_java7Helper !\u003d null) {\r\n                Boolean b \u003d _java7Helper.hasCreatorAnnotation(a);\r\n                if ((b !\u003d null) \u0026\u0026 b.booleanValue()) {\r\n                    // 13-Sep-2016, tatu: Judgment call, but I don\u0027t think JDK ever implies\r\n                    //    use of delegate; assumes as-properties implicitly\r\n                    return JsonCreator.Mode.PROPERTIES;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return mode;\r\n}",
    "nodes": 12,
    "edges": 17,
    "cc": 7,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B2 : If(r11 \u003d\u003d $r4) → B3 | else → B4",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B11",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B11",
      "B6 : If($z2 \u003d\u003d false) → B7 | else → B11",
      "B7 : If($r7 \u003d\u003d null) → B8 | else → B11",
      "B8 : If(r9 \u003d\u003d null) → B9 | else → B11",
      "B9 : If($z3 \u003d\u003d false) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  JacksonAnnotationIntrospector\n  MapperConfig\n  Annotated\n  $r2 \u003d r0._findAnnotation(r1, class \"Lcom/fasterxml/jackson/annotation/JsonCreator;\")\n  r3 \u003d JsonCreator) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r11 \u003d null\n  goto B4\n}",
      "B2 {\n  r11 \u003d r3.mode()\n  $r4 \u003d JsonCreator$Mode DEFAULT\u003e\n  if (r11 \u003d\u003d $r4) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z0 \u003d JacksonAnnotationIntrospector: boolean _cfgConstructorPropertiesImpliesCreator\u003e\n  if ($z0 \u003d\u003d false) goto B5 else B11\n}",
      "B5 {\n  $r6 \u003d MapperFeature INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES\u003e\n  $z1 \u003d r5.isEnabled($r6)\n  if ($z1 \u003d\u003d false) goto B6 else B11\n}",
      "B6 {\n  $z2 \u003d AnnotatedConstructor\n  if ($z2 \u003d\u003d false) goto B7 else B11\n}",
      "B7 {\n  $r7 \u003d Java7Support _java7Helper\u003e\n  if ($r7 \u003d\u003d null) goto B8 else B11\n}",
      "B8 {\n  $r8 \u003d Java7Support _java7Helper\u003e\n  r9 \u003d $r8.hasCreatorAnnotation(r1)\n  if (r9 \u003d\u003d null) goto B9 else B11\n}",
      "B9 {\n  $z3 \u003d r9.booleanValue()\n  if ($z3 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  $r10 \u003d JsonCreator$Mode PROPERTIES\u003e\n  return\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B11",
      "B5 --\u003e B6",
      "B5 --\u003e B11",
      "B6 --\u003e B7",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JacksonAnnotationIntrospector#_findAnnotation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.MemberKey",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    if (o.getClass() !\u003d getClass()) {\r\n        return false;\r\n    }\r\n    MemberKey other \u003d (MemberKey) o;\r\n    if (!_name.equals(other._name)) {\r\n        return false;\r\n    }\r\n    Class\u003c?\u003e[] otherArgs \u003d other._argTypes;\r\n    int len \u003d _argTypes.length;\r\n    if (otherArgs.length !\u003d len) {\r\n        return false;\r\n    }\r\n    for (int i \u003d 0; i \u003c len; ++i) {\r\n        Class\u003c?\u003e type1 \u003d otherArgs[i];\r\n        Class\u003c?\u003e type2 \u003d _argTypes[i];\r\n        if (type1 \u003d\u003d type2) {\r\n            continue;\r\n        }\r\n        /* 23-Feb-2009, tatu: Are there any cases where we would have to\r\n             *   consider some narrowing conversions or such? For now let\u0027s\r\n             *   assume exact type match is enough\r\n             */\r\n        /* 07-Apr-2009, tatu: Indeed there are (see [JACKSON-97]).\r\n             *    This happens with generics when a bound is specified.\r\n             *    I hope this works; check here must be transitive\r\n             */\r\n        /* 14-Oct-2014, tatu: No, doing that is wrong. Conflicts may (and will) be\r\n             *    handled at a later point; trying to change definition of equality\r\n             *    will just cause problems like [jackson-core#158]\r\n             */\r\n        /*\r\n            if (type1.isAssignableFrom(type2) || type2.isAssignableFrom(type1)) {\r\n                continue;\r\n            }\r\n            */\r\n        return false;\r\n    }\r\n    return true;\r\n}",
    "nodes": 17,
    "edges": 17,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($r3 \u003d\u003d $r2) → B5 | else → B6",
      "B6 : If($z0 !\u003d 0) → B7 | else → B8",
      "B8 : If($i1 \u003d\u003d i0) → B9 | else → B10",
      "B11 : If(i2 \u003e\u003d i0) → B12 | else → B16",
      "B12 : If(r9 !\u003d r11) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  MemberKey\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d r0.getClass()\n  $r2 \u003d r1.getClass()\n  if ($r3 \u003d\u003d $r2) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  r4 \u003d MemberKey) r0\n  $r6 \u003d String _name\u003e\n  $r5 \u003d String _name\u003e\n  $z0 \u003d $r6.equals($r5)\n  if ($z0 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  r7 \u003d Class[] _argTypes\u003e\n  $r8 \u003d Class[] _argTypes\u003e\n  i0 \u003d lengthof $r8\n  $i1 \u003d lengthof r7\n  if ($i1 \u003d\u003d i0) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  i2 \u003d 0\n}",
      "B11 {\n  if (i2 \u003e\u003d i0) goto B12 else B16\n}",
      "B12 {\n  r9 \u003d r7[i2]\n  $r10 \u003d Class[] _argTypes\u003e\n  r11 \u003d $r10[i2]\n  if (r9 !\u003d r11) goto B13 else B14\n}",
      "B13 {\n  goto B15\n}",
      "B14 {\n  return\n}",
      "B15 {\n  i2 \u003d i2 + 1\n  goto B11\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B16",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B11",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MemberKey#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.ObjectIdInfo",
    "methodName": "withAlwaysAsId",
    "signature": "com.fasterxml.jackson.databind.introspect.ObjectIdInfo withAlwaysAsId(boolean)",
    "visibility": "public",
    "body": "{\r\n    if (_alwaysAsId \u003d\u003d state) {\r\n        return this;\r\n    }\r\n    return new ObjectIdInfo(_propertyName, _scope, _generator, state, _resolver);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z1 !\u003d z0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectIdInfo\n  z0 :\u003d @parameter0: boolean\n  $z1 \u003d ObjectIdInfo: boolean _alwaysAsId\u003e\n  if ($z1 !\u003d z0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d ObjectIdInfo\n  $r5 \u003d PropertyName _propertyName\u003e\n  $r4 \u003d Class _scope\u003e\n  $r3 \u003d Class _generator\u003e\n  $r2 \u003d Class _resolver\u003e\n  new ObjectIdInfo($r5, $r4, $r3, z0, $r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "methodName": "getPotentialCreators",
    "signature": "com.fasterxml.jackson.databind.introspect.PotentialCreators getPotentialCreators()",
    "visibility": "public",
    "body": "{\r\n    if (!_collected) {\r\n        collectAll();\r\n    }\r\n    return _potentialCreators;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  POJOPropertiesCollector\n  $z0 \u003d POJOPropertiesCollector: boolean _collected\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.collectAll()\n}",
      "B2 {\n  $r1 \u003d PotentialCreators _potentialCreators\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertiesCollector#collectAll(...0)",
        "body": "{\r\n    _potentialCreators \u003d new PotentialCreators();\r\n    // First: gather basic accessors\r\n    LinkedHashMap\u003cString, POJOPropertyBuilder\u003e props \u003d new LinkedHashMap\u003cString, POJOPropertyBuilder\u003e();\r\n    // 14-Nov-2024, tatu: Previously skipped checking fields for Records; with 2.18+ won\u0027t\r\n    //    (see [databind#3628], [databind#3895], [databind#3992], [databind#4626])\r\n    // note: populates _fieldRenameMappings\r\n    _addFields(props);\r\n    _addMethods(props);\r\n    // 25-Jan-2016, tatu: Avoid introspecting (constructor-)creators for non-static\r\n    //    inner classes, see [databind#1502]\r\n    // 14-Nov-2024, tatu: Similarly need Creators for Records too (2.18+)\r\n    if (!_classDef.isNonStaticInnerClass()) {\r\n        _addCreators(props);\r\n    }\r\n    // Remove ignored properties, first; this MUST precede annotation merging\r\n    // since logic relies on knowing exactly which accessor has which annotation\r\n    _removeUnwantedProperties(props);\r\n    // and then remove unneeded accessors (wrt read-only, read-write)\r\n    _removeUnwantedAccessors(props);\r\n    // Rename remaining properties\r\n    _renameProperties(props);\r\n    // and now add injectables, but taking care to avoid overlapping ones\r\n    // via creator and regular properties\r\n    _addInjectables(props);\r\n    // then merge annotations, to simplify further processing\r\n    // 26-Sep-2017, tatu: Before 2.9.2 was done earlier but that prevented some of\r\n    //   annotations from getting properly merged\r\n    for (POJOPropertyBuilder property : props.values()) {\r\n        property.mergeAnnotations(_forSerialization);\r\n    }\r\n    // And use custom naming strategy, if applicable...\r\n    // 18-Jan-2021, tatu: To be done before trimming, to resolve\r\n    //   [databind#3368]\r\n    PropertyNamingStrategy naming \u003d _findNamingStrategy();\r\n    if (naming !\u003d null) {\r\n        _renameUsing(props, naming);\r\n    }\r\n    // Sort by visibility (explicit over implicit); drop all but first of member\r\n    // type (getter, setter etc) if there is visibility difference\r\n    for (POJOPropertyBuilder property : props.values()) {\r\n        property.trimByVisibility();\r\n    }\r\n    // 22-Jul-2024, tatu: And now drop Record Fields once their effect\r\n    //   (annotations) has been applied. But just for deserialization\r\n    if (_isRecordType \u0026\u0026 !_forSerialization) {\r\n        for (POJOPropertyBuilder property : props.values()) {\r\n            property.removeFields();\r\n        }\r\n    }\r\n    // and, if required, apply wrapper name: note, MUST be done after\r\n    // annotations are merged.\r\n    if (_config.isEnabled(MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME)) {\r\n        _renameWithWrappers(props);\r\n    }\r\n    // well, almost last: there\u0027s still ordering...\r\n    _sortProperties(props);\r\n    _properties \u003d props;\r\n    _collected \u003d true;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "methodName": "getInjectables",
    "signature": "java.util.Map getInjectables()",
    "visibility": "public",
    "body": "{\r\n    if (!_collected) {\r\n        collectAll();\r\n    }\r\n    return _injectables;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  POJOPropertiesCollector\n  $z0 \u003d POJOPropertiesCollector: boolean _collected\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.collectAll()\n}",
      "B2 {\n  $r1 \u003d LinkedHashMap _injectables\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertiesCollector#collectAll(...0)",
        "body": "{\r\n    _potentialCreators \u003d new PotentialCreators();\r\n    // First: gather basic accessors\r\n    LinkedHashMap\u003cString, POJOPropertyBuilder\u003e props \u003d new LinkedHashMap\u003cString, POJOPropertyBuilder\u003e();\r\n    // 14-Nov-2024, tatu: Previously skipped checking fields for Records; with 2.18+ won\u0027t\r\n    //    (see [databind#3628], [databind#3895], [databind#3992], [databind#4626])\r\n    // note: populates _fieldRenameMappings\r\n    _addFields(props);\r\n    _addMethods(props);\r\n    // 25-Jan-2016, tatu: Avoid introspecting (constructor-)creators for non-static\r\n    //    inner classes, see [databind#1502]\r\n    // 14-Nov-2024, tatu: Similarly need Creators for Records too (2.18+)\r\n    if (!_classDef.isNonStaticInnerClass()) {\r\n        _addCreators(props);\r\n    }\r\n    // Remove ignored properties, first; this MUST precede annotation merging\r\n    // since logic relies on knowing exactly which accessor has which annotation\r\n    _removeUnwantedProperties(props);\r\n    // and then remove unneeded accessors (wrt read-only, read-write)\r\n    _removeUnwantedAccessors(props);\r\n    // Rename remaining properties\r\n    _renameProperties(props);\r\n    // and now add injectables, but taking care to avoid overlapping ones\r\n    // via creator and regular properties\r\n    _addInjectables(props);\r\n    // then merge annotations, to simplify further processing\r\n    // 26-Sep-2017, tatu: Before 2.9.2 was done earlier but that prevented some of\r\n    //   annotations from getting properly merged\r\n    for (POJOPropertyBuilder property : props.values()) {\r\n        property.mergeAnnotations(_forSerialization);\r\n    }\r\n    // And use custom naming strategy, if applicable...\r\n    // 18-Jan-2021, tatu: To be done before trimming, to resolve\r\n    //   [databind#3368]\r\n    PropertyNamingStrategy naming \u003d _findNamingStrategy();\r\n    if (naming !\u003d null) {\r\n        _renameUsing(props, naming);\r\n    }\r\n    // Sort by visibility (explicit over implicit); drop all but first of member\r\n    // type (getter, setter etc) if there is visibility difference\r\n    for (POJOPropertyBuilder property : props.values()) {\r\n        property.trimByVisibility();\r\n    }\r\n    // 22-Jul-2024, tatu: And now drop Record Fields once their effect\r\n    //   (annotations) has been applied. But just for deserialization\r\n    if (_isRecordType \u0026\u0026 !_forSerialization) {\r\n        for (POJOPropertyBuilder property : props.values()) {\r\n            property.removeFields();\r\n        }\r\n    }\r\n    // and, if required, apply wrapper name: note, MUST be done after\r\n    // annotations are merged.\r\n    if (_config.isEnabled(MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME)) {\r\n        _renameWithWrappers(props);\r\n    }\r\n    // well, almost last: there\u0027s still ordering...\r\n    _sortProperties(props);\r\n    _properties \u003d props;\r\n    _collected \u003d true;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "methodName": "getJsonKeyAccessor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember getJsonKeyAccessor()",
    "visibility": "public",
    "body": "{\r\n    if (!_collected) {\r\n        collectAll();\r\n    }\r\n    // If @JsonKey defined, must have a single one\r\n    if (_jsonKeyAccessors !\u003d null) {\r\n        if (_jsonKeyAccessors.size() \u003e 1) {\r\n            if (!_resolveFieldVsGetter(_jsonKeyAccessors)) {\r\n                reportProblem(\"Multiple \u0027as-key\u0027 properties defined (%s vs %s)\", _jsonKeyAccessors.get(0), _jsonKeyAccessors.get(1));\r\n            }\r\n        }\r\n        // otherwise we won\u0027t greatly care\r\n        return _jsonKeyAccessors.get(0);\r\n    }\r\n    return null;\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($r1 \u003d\u003d null) → B3 | else → B7",
      "B3 : If($i0 \u003c\u003d 1) → B4 | else → B6",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  POJOPropertiesCollector\n  $z0 \u003d POJOPropertiesCollector: boolean _collected\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.collectAll()\n}",
      "B2 {\n  $r1 \u003d LinkedList _jsonKeyAccessors\u003e\n  if ($r1 \u003d\u003d null) goto B3 else B7\n}",
      "B3 {\n  $r2 \u003d LinkedList _jsonKeyAccessors\u003e\n  $i0 \u003d $r2.size()\n  if ($i0 \u003c\u003d 1) goto B4 else B6\n}",
      "B4 {\n  $r3 \u003d LinkedList _jsonKeyAccessors\u003e\n  $z1 \u003d r0._resolveFieldVsGetter($r3)\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r4 \u003d Object)[2]\n  $r5 \u003d LinkedList _jsonKeyAccessors\u003e\n  $r6 \u003d $r5.get(0)\n  $r4[0] \u003d $r6\n  $r7 \u003d LinkedList _jsonKeyAccessors\u003e\n  $r8 \u003d $r7.get(1)\n  $r4[1] \u003d $r8\n  r0.reportProblem(\"Multiple \\\u0027as-key\\\u0027 properties defined (%s vs %s)\", $r4)\n}",
      "B6 {\n  $r9 \u003d LinkedList _jsonKeyAccessors\u003e\n  $r10 \u003d $r9.get(0)\n  $r11 \u003d AnnotatedMember) $r10\n  return\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertiesCollector#_resolveFieldVsGetter(...1)",
        "body": "{\r\n    do {\r\n        AnnotatedMember acc1 \u003d accessors.get(0);\r\n        AnnotatedMember acc2 \u003d accessors.get(1);\r\n        if (acc1 instanceof AnnotatedField) {\r\n            if (acc2 instanceof AnnotatedMethod) {\r\n                // Method has precedence, remove first entry\r\n                accessors.remove(0);\r\n                continue;\r\n            }\r\n        } else if (acc1 instanceof AnnotatedMethod) {\r\n            // Method has precedence, remove second entry\r\n            if (acc2 instanceof AnnotatedField) {\r\n                accessors.remove(1);\r\n                continue;\r\n            }\r\n        }\r\n        // Not a field/method pair; fail\r\n        return false;\r\n    } while (accessors.size() \u003e 1);\r\n    return true;\r\n}"
      },
      {
        "name": "POJOPropertiesCollector#collectAll(...0)",
        "body": "{\r\n    _potentialCreators \u003d new PotentialCreators();\r\n    // First: gather basic accessors\r\n    LinkedHashMap\u003cString, POJOPropertyBuilder\u003e props \u003d new LinkedHashMap\u003cString, POJOPropertyBuilder\u003e();\r\n    // 14-Nov-2024, tatu: Previously skipped checking fields for Records; with 2.18+ won\u0027t\r\n    //    (see [databind#3628], [databind#3895], [databind#3992], [databind#4626])\r\n    // note: populates _fieldRenameMappings\r\n    _addFields(props);\r\n    _addMethods(props);\r\n    // 25-Jan-2016, tatu: Avoid introspecting (constructor-)creators for non-static\r\n    //    inner classes, see [databind#1502]\r\n    // 14-Nov-2024, tatu: Similarly need Creators for Records too (2.18+)\r\n    if (!_classDef.isNonStaticInnerClass()) {\r\n        _addCreators(props);\r\n    }\r\n    // Remove ignored properties, first; this MUST precede annotation merging\r\n    // since logic relies on knowing exactly which accessor has which annotation\r\n    _removeUnwantedProperties(props);\r\n    // and then remove unneeded accessors (wrt read-only, read-write)\r\n    _removeUnwantedAccessors(props);\r\n    // Rename remaining properties\r\n    _renameProperties(props);\r\n    // and now add injectables, but taking care to avoid overlapping ones\r\n    // via creator and regular properties\r\n    _addInjectables(props);\r\n    // then merge annotations, to simplify further processing\r\n    // 26-Sep-2017, tatu: Before 2.9.2 was done earlier but that prevented some of\r\n    //   annotations from getting properly merged\r\n    for (POJOPropertyBuilder property : props.values()) {\r\n        property.mergeAnnotations(_forSerialization);\r\n    }\r\n    // And use custom naming strategy, if applicable...\r\n    // 18-Jan-2021, tatu: To be done before trimming, to resolve\r\n    //   [databind#3368]\r\n    PropertyNamingStrategy naming \u003d _findNamingStrategy();\r\n    if (naming !\u003d null) {\r\n        _renameUsing(props, naming);\r\n    }\r\n    // Sort by visibility (explicit over implicit); drop all but first of member\r\n    // type (getter, setter etc) if there is visibility difference\r\n    for (POJOPropertyBuilder property : props.values()) {\r\n        property.trimByVisibility();\r\n    }\r\n    // 22-Jul-2024, tatu: And now drop Record Fields once their effect\r\n    //   (annotations) has been applied. But just for deserialization\r\n    if (_isRecordType \u0026\u0026 !_forSerialization) {\r\n        for (POJOPropertyBuilder property : props.values()) {\r\n            property.removeFields();\r\n        }\r\n    }\r\n    // and, if required, apply wrapper name: note, MUST be done after\r\n    // annotations are merged.\r\n    if (_config.isEnabled(MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME)) {\r\n        _renameWithWrappers(props);\r\n    }\r\n    // well, almost last: there\u0027s still ordering...\r\n    _sortProperties(props);\r\n    _properties \u003d props;\r\n    _collected \u003d true;\r\n}"
      },
      {
        "name": "POJOPropertiesCollector#reportProblem(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "methodName": "getJsonValueAccessor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember getJsonValueAccessor()",
    "visibility": "public",
    "body": "{\r\n    if (!_collected) {\r\n        collectAll();\r\n    }\r\n    // If @JsonValue defined, must have a single one\r\n    // 15-Jan-2023, tatu: Except let\u0027s try resolving \"getter-over-field\" case at least\r\n    if (_jsonValueAccessors !\u003d null) {\r\n        if (_jsonValueAccessors.size() \u003e 1) {\r\n            if (!_resolveFieldVsGetter(_jsonValueAccessors)) {\r\n                reportProblem(\"Multiple \u0027as-value\u0027 properties defined (%s vs %s)\", _jsonValueAccessors.get(0), _jsonValueAccessors.get(1));\r\n            }\r\n        }\r\n        // otherwise we won\u0027t greatly care\r\n        return _jsonValueAccessors.get(0);\r\n    }\r\n    return null;\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($r1 \u003d\u003d null) → B3 | else → B7",
      "B3 : If($i0 \u003c\u003d 1) → B4 | else → B6",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  POJOPropertiesCollector\n  $z0 \u003d POJOPropertiesCollector: boolean _collected\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.collectAll()\n}",
      "B2 {\n  $r1 \u003d LinkedList _jsonValueAccessors\u003e\n  if ($r1 \u003d\u003d null) goto B3 else B7\n}",
      "B3 {\n  $r2 \u003d LinkedList _jsonValueAccessors\u003e\n  $i0 \u003d $r2.size()\n  if ($i0 \u003c\u003d 1) goto B4 else B6\n}",
      "B4 {\n  $r3 \u003d LinkedList _jsonValueAccessors\u003e\n  $z1 \u003d r0._resolveFieldVsGetter($r3)\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r4 \u003d Object)[2]\n  $r5 \u003d LinkedList _jsonValueAccessors\u003e\n  $r6 \u003d $r5.get(0)\n  $r4[0] \u003d $r6\n  $r7 \u003d LinkedList _jsonValueAccessors\u003e\n  $r8 \u003d $r7.get(1)\n  $r4[1] \u003d $r8\n  r0.reportProblem(\"Multiple \\\u0027as-value\\\u0027 properties defined (%s vs %s)\", $r4)\n}",
      "B6 {\n  $r9 \u003d LinkedList _jsonValueAccessors\u003e\n  $r10 \u003d $r9.get(0)\n  $r11 \u003d AnnotatedMember) $r10\n  return\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertiesCollector#_resolveFieldVsGetter(...1)",
        "body": "{\r\n    do {\r\n        AnnotatedMember acc1 \u003d accessors.get(0);\r\n        AnnotatedMember acc2 \u003d accessors.get(1);\r\n        if (acc1 instanceof AnnotatedField) {\r\n            if (acc2 instanceof AnnotatedMethod) {\r\n                // Method has precedence, remove first entry\r\n                accessors.remove(0);\r\n                continue;\r\n            }\r\n        } else if (acc1 instanceof AnnotatedMethod) {\r\n            // Method has precedence, remove second entry\r\n            if (acc2 instanceof AnnotatedField) {\r\n                accessors.remove(1);\r\n                continue;\r\n            }\r\n        }\r\n        // Not a field/method pair; fail\r\n        return false;\r\n    } while (accessors.size() \u003e 1);\r\n    return true;\r\n}"
      },
      {
        "name": "POJOPropertiesCollector#collectAll(...0)",
        "body": "{\r\n    _potentialCreators \u003d new PotentialCreators();\r\n    // First: gather basic accessors\r\n    LinkedHashMap\u003cString, POJOPropertyBuilder\u003e props \u003d new LinkedHashMap\u003cString, POJOPropertyBuilder\u003e();\r\n    // 14-Nov-2024, tatu: Previously skipped checking fields for Records; with 2.18+ won\u0027t\r\n    //    (see [databind#3628], [databind#3895], [databind#3992], [databind#4626])\r\n    // note: populates _fieldRenameMappings\r\n    _addFields(props);\r\n    _addMethods(props);\r\n    // 25-Jan-2016, tatu: Avoid introspecting (constructor-)creators for non-static\r\n    //    inner classes, see [databind#1502]\r\n    // 14-Nov-2024, tatu: Similarly need Creators for Records too (2.18+)\r\n    if (!_classDef.isNonStaticInnerClass()) {\r\n        _addCreators(props);\r\n    }\r\n    // Remove ignored properties, first; this MUST precede annotation merging\r\n    // since logic relies on knowing exactly which accessor has which annotation\r\n    _removeUnwantedProperties(props);\r\n    // and then remove unneeded accessors (wrt read-only, read-write)\r\n    _removeUnwantedAccessors(props);\r\n    // Rename remaining properties\r\n    _renameProperties(props);\r\n    // and now add injectables, but taking care to avoid overlapping ones\r\n    // via creator and regular properties\r\n    _addInjectables(props);\r\n    // then merge annotations, to simplify further processing\r\n    // 26-Sep-2017, tatu: Before 2.9.2 was done earlier but that prevented some of\r\n    //   annotations from getting properly merged\r\n    for (POJOPropertyBuilder property : props.values()) {\r\n        property.mergeAnnotations(_forSerialization);\r\n    }\r\n    // And use custom naming strategy, if applicable...\r\n    // 18-Jan-2021, tatu: To be done before trimming, to resolve\r\n    //   [databind#3368]\r\n    PropertyNamingStrategy naming \u003d _findNamingStrategy();\r\n    if (naming !\u003d null) {\r\n        _renameUsing(props, naming);\r\n    }\r\n    // Sort by visibility (explicit over implicit); drop all but first of member\r\n    // type (getter, setter etc) if there is visibility difference\r\n    for (POJOPropertyBuilder property : props.values()) {\r\n        property.trimByVisibility();\r\n    }\r\n    // 22-Jul-2024, tatu: And now drop Record Fields once their effect\r\n    //   (annotations) has been applied. But just for deserialization\r\n    if (_isRecordType \u0026\u0026 !_forSerialization) {\r\n        for (POJOPropertyBuilder property : props.values()) {\r\n            property.removeFields();\r\n        }\r\n    }\r\n    // and, if required, apply wrapper name: note, MUST be done after\r\n    // annotations are merged.\r\n    if (_config.isEnabled(MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME)) {\r\n        _renameWithWrappers(props);\r\n    }\r\n    // well, almost last: there\u0027s still ordering...\r\n    _sortProperties(props);\r\n    _properties \u003d props;\r\n    _collected \u003d true;\r\n}"
      },
      {
        "name": "POJOPropertiesCollector#reportProblem(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "methodName": "getAnyGetterField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember getAnyGetterField()",
    "visibility": "public",
    "body": "{\r\n    if (!_collected) {\r\n        collectAll();\r\n    }\r\n    if (_anyGetterField !\u003d null) {\r\n        if (_anyGetterField.size() \u003e 1) {\r\n            reportProblem(\"Multiple \u0027any-getter\u0027 fields defined (%s vs %s)\", _anyGetterField.get(0), _anyGetterField.get(1));\r\n        }\r\n        return _anyGetterField.getFirst();\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($r1 \u003d\u003d null) → B3 | else → B6",
      "B3 : If($i0 \u003c\u003d 1) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  POJOPropertiesCollector\n  $z0 \u003d POJOPropertiesCollector: boolean _collected\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.collectAll()\n}",
      "B2 {\n  $r1 \u003d LinkedList _anyGetterField\u003e\n  if ($r1 \u003d\u003d null) goto B3 else B6\n}",
      "B3 {\n  $r2 \u003d LinkedList _anyGetterField\u003e\n  $i0 \u003d $r2.size()\n  if ($i0 \u003c\u003d 1) goto B4 else B5\n}",
      "B4 {\n  $r6 \u003d Object)[2]\n  $r7 \u003d LinkedList _anyGetterField\u003e\n  $r8 \u003d $r7.get(0)\n  $r6[0] \u003d $r8\n  $r9 \u003d LinkedList _anyGetterField\u003e\n  $r10 \u003d $r9.get(1)\n  $r6[1] \u003d $r10\n  r0.reportProblem(\"Multiple \\\u0027any-getter\\\u0027 fields defined (%s vs %s)\", $r6)\n}",
      "B5 {\n  $r3 \u003d LinkedList _anyGetterField\u003e\n  $r4 \u003d $r3.getFirst()\n  $r5 \u003d AnnotatedMember) $r4\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertiesCollector#collectAll(...0)",
        "body": "{\r\n    _potentialCreators \u003d new PotentialCreators();\r\n    // First: gather basic accessors\r\n    LinkedHashMap\u003cString, POJOPropertyBuilder\u003e props \u003d new LinkedHashMap\u003cString, POJOPropertyBuilder\u003e();\r\n    // 14-Nov-2024, tatu: Previously skipped checking fields for Records; with 2.18+ won\u0027t\r\n    //    (see [databind#3628], [databind#3895], [databind#3992], [databind#4626])\r\n    // note: populates _fieldRenameMappings\r\n    _addFields(props);\r\n    _addMethods(props);\r\n    // 25-Jan-2016, tatu: Avoid introspecting (constructor-)creators for non-static\r\n    //    inner classes, see [databind#1502]\r\n    // 14-Nov-2024, tatu: Similarly need Creators for Records too (2.18+)\r\n    if (!_classDef.isNonStaticInnerClass()) {\r\n        _addCreators(props);\r\n    }\r\n    // Remove ignored properties, first; this MUST precede annotation merging\r\n    // since logic relies on knowing exactly which accessor has which annotation\r\n    _removeUnwantedProperties(props);\r\n    // and then remove unneeded accessors (wrt read-only, read-write)\r\n    _removeUnwantedAccessors(props);\r\n    // Rename remaining properties\r\n    _renameProperties(props);\r\n    // and now add injectables, but taking care to avoid overlapping ones\r\n    // via creator and regular properties\r\n    _addInjectables(props);\r\n    // then merge annotations, to simplify further processing\r\n    // 26-Sep-2017, tatu: Before 2.9.2 was done earlier but that prevented some of\r\n    //   annotations from getting properly merged\r\n    for (POJOPropertyBuilder property : props.values()) {\r\n        property.mergeAnnotations(_forSerialization);\r\n    }\r\n    // And use custom naming strategy, if applicable...\r\n    // 18-Jan-2021, tatu: To be done before trimming, to resolve\r\n    //   [databind#3368]\r\n    PropertyNamingStrategy naming \u003d _findNamingStrategy();\r\n    if (naming !\u003d null) {\r\n        _renameUsing(props, naming);\r\n    }\r\n    // Sort by visibility (explicit over implicit); drop all but first of member\r\n    // type (getter, setter etc) if there is visibility difference\r\n    for (POJOPropertyBuilder property : props.values()) {\r\n        property.trimByVisibility();\r\n    }\r\n    // 22-Jul-2024, tatu: And now drop Record Fields once their effect\r\n    //   (annotations) has been applied. But just for deserialization\r\n    if (_isRecordType \u0026\u0026 !_forSerialization) {\r\n        for (POJOPropertyBuilder property : props.values()) {\r\n            property.removeFields();\r\n        }\r\n    }\r\n    // and, if required, apply wrapper name: note, MUST be done after\r\n    // annotations are merged.\r\n    if (_config.isEnabled(MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME)) {\r\n        _renameWithWrappers(props);\r\n    }\r\n    // well, almost last: there\u0027s still ordering...\r\n    _sortProperties(props);\r\n    _properties \u003d props;\r\n    _collected \u003d true;\r\n}"
      },
      {
        "name": "POJOPropertiesCollector#reportProblem(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "methodName": "getAnyGetterMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember getAnyGetterMethod()",
    "visibility": "public",
    "body": "{\r\n    if (!_collected) {\r\n        collectAll();\r\n    }\r\n    if (_anyGetters !\u003d null) {\r\n        if (_anyGetters.size() \u003e 1) {\r\n            reportProblem(\"Multiple \u0027any-getter\u0027 methods defined (%s vs %s)\", _anyGetters.get(0), _anyGetters.get(1));\r\n        }\r\n        return _anyGetters.getFirst();\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($r1 \u003d\u003d null) → B3 | else → B6",
      "B3 : If($i0 \u003c\u003d 1) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  POJOPropertiesCollector\n  $z0 \u003d POJOPropertiesCollector: boolean _collected\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.collectAll()\n}",
      "B2 {\n  $r1 \u003d LinkedList _anyGetters\u003e\n  if ($r1 \u003d\u003d null) goto B3 else B6\n}",
      "B3 {\n  $r2 \u003d LinkedList _anyGetters\u003e\n  $i0 \u003d $r2.size()\n  if ($i0 \u003c\u003d 1) goto B4 else B5\n}",
      "B4 {\n  $r6 \u003d Object)[2]\n  $r7 \u003d LinkedList _anyGetters\u003e\n  $r8 \u003d $r7.get(0)\n  $r6[0] \u003d $r8\n  $r9 \u003d LinkedList _anyGetters\u003e\n  $r10 \u003d $r9.get(1)\n  $r6[1] \u003d $r10\n  r0.reportProblem(\"Multiple \\\u0027any-getter\\\u0027 methods defined (%s vs %s)\", $r6)\n}",
      "B5 {\n  $r3 \u003d LinkedList _anyGetters\u003e\n  $r4 \u003d $r3.getFirst()\n  $r5 \u003d AnnotatedMember) $r4\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertiesCollector#collectAll(...0)",
        "body": "{\r\n    _potentialCreators \u003d new PotentialCreators();\r\n    // First: gather basic accessors\r\n    LinkedHashMap\u003cString, POJOPropertyBuilder\u003e props \u003d new LinkedHashMap\u003cString, POJOPropertyBuilder\u003e();\r\n    // 14-Nov-2024, tatu: Previously skipped checking fields for Records; with 2.18+ won\u0027t\r\n    //    (see [databind#3628], [databind#3895], [databind#3992], [databind#4626])\r\n    // note: populates _fieldRenameMappings\r\n    _addFields(props);\r\n    _addMethods(props);\r\n    // 25-Jan-2016, tatu: Avoid introspecting (constructor-)creators for non-static\r\n    //    inner classes, see [databind#1502]\r\n    // 14-Nov-2024, tatu: Similarly need Creators for Records too (2.18+)\r\n    if (!_classDef.isNonStaticInnerClass()) {\r\n        _addCreators(props);\r\n    }\r\n    // Remove ignored properties, first; this MUST precede annotation merging\r\n    // since logic relies on knowing exactly which accessor has which annotation\r\n    _removeUnwantedProperties(props);\r\n    // and then remove unneeded accessors (wrt read-only, read-write)\r\n    _removeUnwantedAccessors(props);\r\n    // Rename remaining properties\r\n    _renameProperties(props);\r\n    // and now add injectables, but taking care to avoid overlapping ones\r\n    // via creator and regular properties\r\n    _addInjectables(props);\r\n    // then merge annotations, to simplify further processing\r\n    // 26-Sep-2017, tatu: Before 2.9.2 was done earlier but that prevented some of\r\n    //   annotations from getting properly merged\r\n    for (POJOPropertyBuilder property : props.values()) {\r\n        property.mergeAnnotations(_forSerialization);\r\n    }\r\n    // And use custom naming strategy, if applicable...\r\n    // 18-Jan-2021, tatu: To be done before trimming, to resolve\r\n    //   [databind#3368]\r\n    PropertyNamingStrategy naming \u003d _findNamingStrategy();\r\n    if (naming !\u003d null) {\r\n        _renameUsing(props, naming);\r\n    }\r\n    // Sort by visibility (explicit over implicit); drop all but first of member\r\n    // type (getter, setter etc) if there is visibility difference\r\n    for (POJOPropertyBuilder property : props.values()) {\r\n        property.trimByVisibility();\r\n    }\r\n    // 22-Jul-2024, tatu: And now drop Record Fields once their effect\r\n    //   (annotations) has been applied. But just for deserialization\r\n    if (_isRecordType \u0026\u0026 !_forSerialization) {\r\n        for (POJOPropertyBuilder property : props.values()) {\r\n            property.removeFields();\r\n        }\r\n    }\r\n    // and, if required, apply wrapper name: note, MUST be done after\r\n    // annotations are merged.\r\n    if (_config.isEnabled(MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME)) {\r\n        _renameWithWrappers(props);\r\n    }\r\n    // well, almost last: there\u0027s still ordering...\r\n    _sortProperties(props);\r\n    _properties \u003d props;\r\n    _collected \u003d true;\r\n}"
      },
      {
        "name": "POJOPropertiesCollector#reportProblem(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "methodName": "getAnySetterField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember getAnySetterField()",
    "visibility": "public",
    "body": "{\r\n    if (!_collected) {\r\n        collectAll();\r\n    }\r\n    if (_anySetterField !\u003d null) {\r\n        if (_anySetterField.size() \u003e 1) {\r\n            reportProblem(\"Multiple \u0027any-setter\u0027 fields defined (%s vs %s)\", _anySetterField.get(0), _anySetterField.get(1));\r\n        }\r\n        return _anySetterField.getFirst();\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($r1 \u003d\u003d null) → B3 | else → B6",
      "B3 : If($i0 \u003c\u003d 1) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  POJOPropertiesCollector\n  $z0 \u003d POJOPropertiesCollector: boolean _collected\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.collectAll()\n}",
      "B2 {\n  $r1 \u003d LinkedList _anySetterField\u003e\n  if ($r1 \u003d\u003d null) goto B3 else B6\n}",
      "B3 {\n  $r2 \u003d LinkedList _anySetterField\u003e\n  $i0 \u003d $r2.size()\n  if ($i0 \u003c\u003d 1) goto B4 else B5\n}",
      "B4 {\n  $r6 \u003d Object)[2]\n  $r7 \u003d LinkedList _anySetterField\u003e\n  $r8 \u003d $r7.get(0)\n  $r6[0] \u003d $r8\n  $r9 \u003d LinkedList _anySetterField\u003e\n  $r10 \u003d $r9.get(1)\n  $r6[1] \u003d $r10\n  r0.reportProblem(\"Multiple \\\u0027any-setter\\\u0027 fields defined (%s vs %s)\", $r6)\n}",
      "B5 {\n  $r3 \u003d LinkedList _anySetterField\u003e\n  $r4 \u003d $r3.getFirst()\n  $r5 \u003d AnnotatedMember) $r4\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertiesCollector#collectAll(...0)",
        "body": "{\r\n    _potentialCreators \u003d new PotentialCreators();\r\n    // First: gather basic accessors\r\n    LinkedHashMap\u003cString, POJOPropertyBuilder\u003e props \u003d new LinkedHashMap\u003cString, POJOPropertyBuilder\u003e();\r\n    // 14-Nov-2024, tatu: Previously skipped checking fields for Records; with 2.18+ won\u0027t\r\n    //    (see [databind#3628], [databind#3895], [databind#3992], [databind#4626])\r\n    // note: populates _fieldRenameMappings\r\n    _addFields(props);\r\n    _addMethods(props);\r\n    // 25-Jan-2016, tatu: Avoid introspecting (constructor-)creators for non-static\r\n    //    inner classes, see [databind#1502]\r\n    // 14-Nov-2024, tatu: Similarly need Creators for Records too (2.18+)\r\n    if (!_classDef.isNonStaticInnerClass()) {\r\n        _addCreators(props);\r\n    }\r\n    // Remove ignored properties, first; this MUST precede annotation merging\r\n    // since logic relies on knowing exactly which accessor has which annotation\r\n    _removeUnwantedProperties(props);\r\n    // and then remove unneeded accessors (wrt read-only, read-write)\r\n    _removeUnwantedAccessors(props);\r\n    // Rename remaining properties\r\n    _renameProperties(props);\r\n    // and now add injectables, but taking care to avoid overlapping ones\r\n    // via creator and regular properties\r\n    _addInjectables(props);\r\n    // then merge annotations, to simplify further processing\r\n    // 26-Sep-2017, tatu: Before 2.9.2 was done earlier but that prevented some of\r\n    //   annotations from getting properly merged\r\n    for (POJOPropertyBuilder property : props.values()) {\r\n        property.mergeAnnotations(_forSerialization);\r\n    }\r\n    // And use custom naming strategy, if applicable...\r\n    // 18-Jan-2021, tatu: To be done before trimming, to resolve\r\n    //   [databind#3368]\r\n    PropertyNamingStrategy naming \u003d _findNamingStrategy();\r\n    if (naming !\u003d null) {\r\n        _renameUsing(props, naming);\r\n    }\r\n    // Sort by visibility (explicit over implicit); drop all but first of member\r\n    // type (getter, setter etc) if there is visibility difference\r\n    for (POJOPropertyBuilder property : props.values()) {\r\n        property.trimByVisibility();\r\n    }\r\n    // 22-Jul-2024, tatu: And now drop Record Fields once their effect\r\n    //   (annotations) has been applied. But just for deserialization\r\n    if (_isRecordType \u0026\u0026 !_forSerialization) {\r\n        for (POJOPropertyBuilder property : props.values()) {\r\n            property.removeFields();\r\n        }\r\n    }\r\n    // and, if required, apply wrapper name: note, MUST be done after\r\n    // annotations are merged.\r\n    if (_config.isEnabled(MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME)) {\r\n        _renameWithWrappers(props);\r\n    }\r\n    // well, almost last: there\u0027s still ordering...\r\n    _sortProperties(props);\r\n    _properties \u003d props;\r\n    _collected \u003d true;\r\n}"
      },
      {
        "name": "POJOPropertiesCollector#reportProblem(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "methodName": "getAnySetterMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod getAnySetterMethod()",
    "visibility": "public",
    "body": "{\r\n    if (!_collected) {\r\n        collectAll();\r\n    }\r\n    if (_anySetters !\u003d null) {\r\n        if (_anySetters.size() \u003e 1) {\r\n            reportProblem(\"Multiple \u0027any-setter\u0027 methods defined (%s vs %s)\", _anySetters.get(0), _anySetters.get(1));\r\n        }\r\n        return _anySetters.getFirst();\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($r1 \u003d\u003d null) → B3 | else → B6",
      "B3 : If($i0 \u003c\u003d 1) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  POJOPropertiesCollector\n  $z0 \u003d POJOPropertiesCollector: boolean _collected\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.collectAll()\n}",
      "B2 {\n  $r1 \u003d LinkedList _anySetters\u003e\n  if ($r1 \u003d\u003d null) goto B3 else B6\n}",
      "B3 {\n  $r2 \u003d LinkedList _anySetters\u003e\n  $i0 \u003d $r2.size()\n  if ($i0 \u003c\u003d 1) goto B4 else B5\n}",
      "B4 {\n  $r6 \u003d Object)[2]\n  $r7 \u003d LinkedList _anySetters\u003e\n  $r8 \u003d $r7.get(0)\n  $r6[0] \u003d $r8\n  $r9 \u003d LinkedList _anySetters\u003e\n  $r10 \u003d $r9.get(1)\n  $r6[1] \u003d $r10\n  r0.reportProblem(\"Multiple \\\u0027any-setter\\\u0027 methods defined (%s vs %s)\", $r6)\n}",
      "B5 {\n  $r3 \u003d LinkedList _anySetters\u003e\n  $r4 \u003d $r3.getFirst()\n  $r5 \u003d AnnotatedMethod) $r4\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertiesCollector#collectAll(...0)",
        "body": "{\r\n    _potentialCreators \u003d new PotentialCreators();\r\n    // First: gather basic accessors\r\n    LinkedHashMap\u003cString, POJOPropertyBuilder\u003e props \u003d new LinkedHashMap\u003cString, POJOPropertyBuilder\u003e();\r\n    // 14-Nov-2024, tatu: Previously skipped checking fields for Records; with 2.18+ won\u0027t\r\n    //    (see [databind#3628], [databind#3895], [databind#3992], [databind#4626])\r\n    // note: populates _fieldRenameMappings\r\n    _addFields(props);\r\n    _addMethods(props);\r\n    // 25-Jan-2016, tatu: Avoid introspecting (constructor-)creators for non-static\r\n    //    inner classes, see [databind#1502]\r\n    // 14-Nov-2024, tatu: Similarly need Creators for Records too (2.18+)\r\n    if (!_classDef.isNonStaticInnerClass()) {\r\n        _addCreators(props);\r\n    }\r\n    // Remove ignored properties, first; this MUST precede annotation merging\r\n    // since logic relies on knowing exactly which accessor has which annotation\r\n    _removeUnwantedProperties(props);\r\n    // and then remove unneeded accessors (wrt read-only, read-write)\r\n    _removeUnwantedAccessors(props);\r\n    // Rename remaining properties\r\n    _renameProperties(props);\r\n    // and now add injectables, but taking care to avoid overlapping ones\r\n    // via creator and regular properties\r\n    _addInjectables(props);\r\n    // then merge annotations, to simplify further processing\r\n    // 26-Sep-2017, tatu: Before 2.9.2 was done earlier but that prevented some of\r\n    //   annotations from getting properly merged\r\n    for (POJOPropertyBuilder property : props.values()) {\r\n        property.mergeAnnotations(_forSerialization);\r\n    }\r\n    // And use custom naming strategy, if applicable...\r\n    // 18-Jan-2021, tatu: To be done before trimming, to resolve\r\n    //   [databind#3368]\r\n    PropertyNamingStrategy naming \u003d _findNamingStrategy();\r\n    if (naming !\u003d null) {\r\n        _renameUsing(props, naming);\r\n    }\r\n    // Sort by visibility (explicit over implicit); drop all but first of member\r\n    // type (getter, setter etc) if there is visibility difference\r\n    for (POJOPropertyBuilder property : props.values()) {\r\n        property.trimByVisibility();\r\n    }\r\n    // 22-Jul-2024, tatu: And now drop Record Fields once their effect\r\n    //   (annotations) has been applied. But just for deserialization\r\n    if (_isRecordType \u0026\u0026 !_forSerialization) {\r\n        for (POJOPropertyBuilder property : props.values()) {\r\n            property.removeFields();\r\n        }\r\n    }\r\n    // and, if required, apply wrapper name: note, MUST be done after\r\n    // annotations are merged.\r\n    if (_config.isEnabled(MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME)) {\r\n        _renameWithWrappers(props);\r\n    }\r\n    // well, almost last: there\u0027s still ordering...\r\n    _sortProperties(props);\r\n    _properties \u003d props;\r\n    _collected \u003d true;\r\n}"
      },
      {
        "name": "POJOPropertiesCollector#reportProblem(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "methodName": "getObjectIdInfo",
    "signature": "com.fasterxml.jackson.databind.introspect.ObjectIdInfo getObjectIdInfo()",
    "visibility": "public",
    "body": "{\r\n    ObjectIdInfo info \u003d _annotationIntrospector.findObjectIdInfo(_classDef);\r\n    if (info !\u003d null) {\r\n        // 2.1: may also have different defaults for refs:\r\n        info \u003d _annotationIntrospector.findObjectReferenceInfo(_classDef, info);\r\n    }\r\n    return info;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r5 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  POJOPropertiesCollector\n  $r2 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r1 \u003d AnnotatedClass _classDef\u003e\n  r5 \u003d $r2.findObjectIdInfo($r1)\n  if (r5 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r3 \u003d AnnotatedClass _classDef\u003e\n  r5 \u003d $r4.findObjectReferenceInfo($r3, r5)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "methodName": "getFormatOverrides",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonFormat$Value getFormatOverrides()",
    "visibility": "public",
    "body": "{\r\n    if (_formatOverrides \u003d\u003d null) {\r\n        JsonFormat.Value format \u003d null;\r\n        // Let\u0027s check both per-type defaults and annotations;\r\n        // per-type defaults having higher precedence, so start with annotations\r\n        if (_annotationIntrospector !\u003d null) {\r\n            format \u003d _annotationIntrospector.findFormat(_classDef);\r\n        }\r\n        JsonFormat.Value v \u003d _config.getDefaultPropertyFormat(_type.getRawClass());\r\n        if (v !\u003d null) {\r\n            if (format \u003d\u003d null) {\r\n                format \u003d v;\r\n            } else {\r\n                format \u003d format.withOverrides(v);\r\n            }\r\n        }\r\n        _formatOverrides \u003d (format \u003d\u003d null) ? JsonFormat.Value.empty() : format;\r\n    }\r\n    return _formatOverrides;\r\n}",
    "nodes": 12,
    "edges": 16,
    "cc": 6,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B11",
      "B1 : If($r2 \u003d\u003d null) → B2 | else → B3",
      "B3 : If($r8 \u003d\u003d null) → B4 | else → B7",
      "B4 : If(r9 !\u003d null) → B5 | else → B6",
      "B7 : If(r9 !\u003d null) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  POJOPropertiesCollector\n  $r1 \u003d JsonFormat$Value _formatOverrides\u003e\n  if ($r1 !\u003d null) goto B1 else B11\n}",
      "B1 {\n  r9 \u003d null\n  $r2 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  if ($r2 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r6 \u003d AnnotatedClass _classDef\u003e\n  r9 \u003d $r7.findFormat($r6)\n}",
      "B3 {\n  $r4 \u003d MapperConfig _config\u003e\n  $r3 \u003d JavaType _type\u003e\n  $r5 \u003d $r3.getRawClass()\n  $r8 \u003d $r4.getDefaultPropertyFormat($r5)\n  if ($r8 \u003d\u003d null) goto B4 else B7\n}",
      "B4 {\n  if (r9 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  r9 \u003d $r8\n  goto B7\n}",
      "B6 {\n  r9 \u003d r9.withOverrides($r8)\n}",
      "B7 {\n  if (r9 !\u003d null) goto B8 else B9\n}",
      "B8 {\n  $r10 \u003d JsonFormat$Value.empty()\n  goto B10\n}",
      "B9 {\n  $r10 \u003d r9\n}",
      "B10 {\n  JsonFormat$Value _formatOverrides\u003e \u003d $r10\n}",
      "B11 {\n  $r11 \u003d JsonFormat$Value _formatOverrides\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B11",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "withSimpleName",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder withSimpleName(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    PropertyName newName \u003d _name.withSimpleName(newSimpleName);\r\n    return (newName \u003d\u003d _name) ? this : new POJOPropertyBuilder(this, newName);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d $r4) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  String\n  $r2 \u003d PropertyName _name\u003e\n  r3 \u003d $r2.withSimpleName(r1)\n  $r4 \u003d PropertyName _name\u003e\n  if (r3 !\u003d $r4) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r5 \u003d POJOPropertyBuilder\n  new POJOPropertyBuilder(r0, r3)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "compareTo",
    "signature": "int compareTo(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder)",
    "visibility": "public",
    "body": "{\r\n    // first, if one has ctor params, that should come first:\r\n    if (_ctorParameters !\u003d null) {\r\n        if (other._ctorParameters \u003d\u003d null) {\r\n            return -1;\r\n        }\r\n    } else if (other._ctorParameters !\u003d null) {\r\n        return 1;\r\n    }\r\n    // otherwise sort by external name (including sorting of ctor parameters)\r\n    return getName().compareTo(other.getName());\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($r6 !\u003d null) → B2 | else → B5",
      "B3 : If($r3 \u003d\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  POJOPropertyBuilder\n  $r1 \u003d POJOPropertyBuilder$Linked _ctorParameters\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r6 \u003d POJOPropertyBuilder$Linked _ctorParameters\u003e\n  if ($r6 !\u003d null) goto B2 else B5\n}",
      "B2 {\n  $i2 \u003d (int) -1\n  return\n}",
      "B3 {\n  $r3 \u003d POJOPropertyBuilder$Linked _ctorParameters\u003e\n  if ($r3 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r5 \u003d r0.getName()\n  $r4 \u003d r2.getName()\n  $i0 \u003d $r5.compareTo($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertyBuilder#getName(...0)",
        "body": "{\r\n    return (_name \u003d\u003d null) ? null : _name.getSimpleName();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "getName",
    "signature": "java.lang.String getName()",
    "visibility": "public",
    "body": "{\r\n    return (_name \u003d\u003d null) ? null : _name.getSimpleName();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  $r1 \u003d PropertyName _name\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d PropertyName _name\u003e\n  $r3 \u003d $r2.getSimpleName()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "getWrapperName",
    "signature": "com.fasterxml.jackson.databind.PropertyName getWrapperName()",
    "visibility": "public",
    "body": "{\r\n    /* 13-Mar-2013, tatu: Accessing via primary member SHOULD work,\r\n         *   due to annotation merging. However, I have seen some problems\r\n         *   with this access (for other annotations)... so if this should\r\n         *   occur, try commenting out full traversal code\r\n         */\r\n    AnnotatedMember member \u003d getPrimaryMember();\r\n    return (member \u003d\u003d null || _annotationIntrospector \u003d\u003d null) ? null : _annotationIntrospector.findWrapperName(member);\r\n    /*\r\n        return fromMemberAnnotations(new WithMember\u003cPropertyName\u003e() {\r\n            @Override\r\n            public PropertyName withMember(AnnotatedMember member) {\r\n                return _annotationIntrospector.findWrapperName(member);\r\n            }\r\n        });\r\n        */\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($r2 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  r1 \u003d r0.getPrimaryMember()\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  if ($r2 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d null\n  goto B4\n}",
      "B3 {\n  $r3 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r4 \u003d $r3.findWrapperName(r1)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertyBuilder#getPrimaryMember(...0)",
        "body": "{\r\n    if (_forSerialization) {\r\n        return getAccessor();\r\n    }\r\n    AnnotatedMember m \u003d getMutator();\r\n    // for setterless properties, however...\r\n    if (m \u003d\u003d null) {\r\n        m \u003d getAccessor();\r\n    }\r\n    return m;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "isExplicitlyIncluded",
    "signature": "boolean isExplicitlyIncluded()",
    "visibility": "public",
    "body": "{\r\n    return _anyExplicits(_fields) || _anyExplicits(_getters) || _anyExplicits(_setters) || // 16-Jan-2016, tatu: Creator names are special, in that name should exist too;\r\n    //   reason for this is [databind#1317]. Let\u0027s hope this works well, may need\r\n    //   to tweak further if this lowers visibility\r\n    //                || _anyExplicits(_ctorParameters)\r\n    _anyExplicitNames(_ctorParameters);\r\n}",
    "nodes": 7,
    "edges": 10,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B4",
      "B1 : If($z1 !\u003d 0) → B2 | else → B4",
      "B2 : If($z2 !\u003d 0) → B3 | else → B4",
      "B3 : If($z3 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  $r1 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  $z0 \u003d r0._anyExplicits($r1)\n  if ($z0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $r2 \u003d POJOPropertyBuilder$Linked _getters\u003e\n  $z1 \u003d r0._anyExplicits($r2)\n  if ($z1 !\u003d 0) goto B2 else B4\n}",
      "B2 {\n  $r3 \u003d POJOPropertyBuilder$Linked _setters\u003e\n  $z2 \u003d r0._anyExplicits($r3)\n  if ($z2 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d POJOPropertyBuilder$Linked _ctorParameters\u003e\n  $z3 \u003d r0._anyExplicitNames($r4)\n  if ($z3 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $z4 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z4 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertyBuilder#_anyExplicits(...1)",
        "body": "{\r\n    for (; n !\u003d null; n \u003d n.next) {\r\n        if (n.name !\u003d null \u0026\u0026 n.name.hasSimpleName()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      },
      {
        "name": "POJOPropertyBuilder#_anyExplicitNames(...1)",
        "body": "{\r\n    for (; n !\u003d null; n \u003d n.next) {\r\n        if (n.name !\u003d null \u0026\u0026 n.isNameExplicit) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "isExplicitlyNamed",
    "signature": "boolean isExplicitlyNamed()",
    "visibility": "public",
    "body": "{\r\n    return _anyExplicitNames(_fields) || _anyExplicitNames(_getters) || _anyExplicitNames(_setters) || _anyExplicitNames(_ctorParameters);\r\n}",
    "nodes": 7,
    "edges": 10,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B4",
      "B1 : If($z1 !\u003d 0) → B2 | else → B4",
      "B2 : If($z2 !\u003d 0) → B3 | else → B4",
      "B3 : If($z3 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  $r1 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  $z0 \u003d r0._anyExplicitNames($r1)\n  if ($z0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $r2 \u003d POJOPropertyBuilder$Linked _getters\u003e\n  $z1 \u003d r0._anyExplicitNames($r2)\n  if ($z1 !\u003d 0) goto B2 else B4\n}",
      "B2 {\n  $r3 \u003d POJOPropertyBuilder$Linked _setters\u003e\n  $z2 \u003d r0._anyExplicitNames($r3)\n  if ($z2 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d POJOPropertyBuilder$Linked _ctorParameters\u003e\n  $z3 \u003d r0._anyExplicitNames($r4)\n  if ($z3 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $z4 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z4 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertyBuilder#_anyExplicitNames(...1)",
        "body": "{\r\n    for (; n !\u003d null; n \u003d n.next) {\r\n        if (n.name !\u003d null \u0026\u0026 n.isNameExplicit) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "getMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata getMetadata()",
    "visibility": "public",
    "body": "{\r\n    if (_metadata \u003d\u003d null) {\r\n        // 20-Jun-2020, tatu: Unfortunately strict checks lead to [databind#2757]\r\n        //   so we will need to try to avoid them at this point\r\n        final AnnotatedMember prim \u003d getPrimaryMemberUnchecked();\r\n        if (prim \u003d\u003d null) {\r\n            _metadata \u003d PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;\r\n        } else {\r\n            final Boolean b \u003d _annotationIntrospector.hasRequiredMarker(prim);\r\n            final String desc \u003d _annotationIntrospector.findPropertyDescription(prim);\r\n            final Integer idx \u003d _annotationIntrospector.findPropertyIndex(prim);\r\n            final String def \u003d _annotationIntrospector.findPropertyDefaultValue(prim);\r\n            if (b \u003d\u003d null \u0026\u0026 idx \u003d\u003d null \u0026\u0026 def \u003d\u003d null) {\r\n                _metadata \u003d (desc \u003d\u003d null) ? PropertyMetadata.STD_REQUIRED_OR_OPTIONAL : PropertyMetadata.STD_REQUIRED_OR_OPTIONAL.withDescription(desc);\r\n            } else {\r\n                _metadata \u003d PropertyMetadata.construct(b, desc, idx, def);\r\n            }\r\n            if (!_forSerialization) {\r\n                _metadata \u003d _getSetterInfo(_metadata, prim);\r\n            }\r\n        }\r\n    }\r\n    return _metadata;\r\n}",
    "nodes": 14,
    "edges": 20,
    "cc": 8,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B13",
      "B1 : If(r2 !\u003d null) → B2 | else → B3",
      "B3 : If(r4 !\u003d null) → B4 | else → B10",
      "B4 : If(r8 !\u003d null) → B5 | else → B10",
      "B5 : If(r10 !\u003d null) → B6 | else → B10",
      "B6 : If(r6 !\u003d null) → B7 | else → B8",
      "B11 : If($z0 !\u003d 0) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  $r1 \u003d PropertyMetadata _metadata\u003e\n  if ($r1 !\u003d null) goto B1 else B13\n}",
      "B1 {\n  r2 \u003d r0.getPrimaryMemberUnchecked()\n  if (r2 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r14 \u003d PropertyMetadata STD_REQUIRED_OR_OPTIONAL\u003e\n  PropertyMetadata _metadata\u003e \u003d $r14\n  goto B13\n}",
      "B3 {\n  $r3 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  r4 \u003d $r3.hasRequiredMarker(r2)\n  $r5 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  r6 \u003d $r5.findPropertyDescription(r2)\n  $r7 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  r8 \u003d $r7.findPropertyIndex(r2)\n  $r9 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  r10 \u003d $r9.findPropertyDefaultValue(r2)\n  if (r4 !\u003d null) goto B4 else B10\n}",
      "B4 {\n  if (r8 !\u003d null) goto B5 else B10\n}",
      "B5 {\n  if (r10 !\u003d null) goto B6 else B10\n}",
      "B6 {\n  if (r6 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r15 \u003d PropertyMetadata STD_REQUIRED_OR_OPTIONAL\u003e\n  goto B9\n}",
      "B8 {\n  $r13 \u003d PropertyMetadata STD_REQUIRED_OR_OPTIONAL\u003e\n  $r15 \u003d $r13.withDescription(r6)\n}",
      "B9 {\n  PropertyMetadata _metadata\u003e \u003d $r15\n  goto B11\n}",
      "B10 {\n  $r16 \u003d PropertyMetadata.construct(r4, r6, r8, r10)\n  PropertyMetadata _metadata\u003e \u003d $r16\n}",
      "B11 {\n  $z0 \u003d POJOPropertyBuilder: boolean _forSerialization\u003e\n  if ($z0 !\u003d 0) goto B12 else B13\n}",
      "B12 {\n  $r11 \u003d PropertyMetadata _metadata\u003e\n  $r12 \u003d r0._getSetterInfo($r11, r2)\n  PropertyMetadata _metadata\u003e \u003d $r12\n}",
      "B13 {\n  $r17 \u003d PropertyMetadata _metadata\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B13",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B13",
      "B3 --\u003e B4",
      "B3 --\u003e B10",
      "B4 --\u003e B5",
      "B4 --\u003e B10",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertyBuilder#_getSetterInfo(...2)",
        "body": "{\r\n    boolean needMerge \u003d true;\r\n    Nulls valueNulls \u003d null;\r\n    Nulls contentNulls \u003d null;\r\n    // Slightly confusing: first, annotations should be accessed via primary member\r\n    // (mutator); but accessor is needed for actual merge operation. So\r\n    AnnotatedMember acc \u003d getAccessor();\r\n    if (primary !\u003d null) {\r\n        // Ok, first: does property itself have something to say?\r\n        if (_annotationIntrospector !\u003d null) {\r\n            if (acc !\u003d null) {\r\n                Boolean b \u003d _annotationIntrospector.findMergeInfo(primary);\r\n                if (b !\u003d null) {\r\n                    needMerge \u003d false;\r\n                    if (b.booleanValue()) {\r\n                        metadata \u003d metadata.withMergeInfo(PropertyMetadata.MergeInfo.createForPropertyOverride(acc));\r\n                    }\r\n                }\r\n            }\r\n            JsonSetter.Value setterInfo \u003d _annotationIntrospector.findSetterInfo(primary);\r\n            if (setterInfo !\u003d null) {\r\n                valueNulls \u003d setterInfo.nonDefaultValueNulls();\r\n                contentNulls \u003d setterInfo.nonDefaultContentNulls();\r\n            }\r\n        }\r\n        // If not, config override?\r\n        // 25-Oct-2016, tatu: Either this, or type of accessor...\r\n        if (needMerge || (valueNulls \u003d\u003d null) || (contentNulls \u003d\u003d null)) {\r\n            // 20-Jun-2020, tatu: Related to [databind#2757], need to find type\r\n            //   but keeping mind that type for setters is trickier; and that\r\n            //   generic typing gets tricky as well.\r\n            Class\u003c?\u003e rawType \u003d _rawTypeOf(primary);\r\n            ConfigOverride co \u003d _config.getConfigOverride(rawType);\r\n            JsonSetter.Value setterInfo \u003d co.getSetterInfo();\r\n            if (setterInfo !\u003d null) {\r\n                if (valueNulls \u003d\u003d null) {\r\n                    valueNulls \u003d setterInfo.nonDefaultValueNulls();\r\n                }\r\n                if (contentNulls \u003d\u003d null) {\r\n                    contentNulls \u003d setterInfo.nonDefaultContentNulls();\r\n                }\r\n            }\r\n            if (needMerge \u0026\u0026 (acc !\u003d null)) {\r\n                Boolean b \u003d co.getMergeable();\r\n                if (b !\u003d null) {\r\n                    needMerge \u003d false;\r\n                    if (b.booleanValue()) {\r\n                        metadata \u003d metadata.withMergeInfo(PropertyMetadata.MergeInfo.createForTypeOverride(acc));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (needMerge || (valueNulls \u003d\u003d null) || (contentNulls \u003d\u003d null)) {\r\n        JsonSetter.Value setterInfo \u003d _config.getDefaultSetterInfo();\r\n        if (valueNulls \u003d\u003d null) {\r\n            valueNulls \u003d setterInfo.nonDefaultValueNulls();\r\n        }\r\n        if (contentNulls \u003d\u003d null) {\r\n            contentNulls \u003d setterInfo.nonDefaultContentNulls();\r\n        }\r\n        if (needMerge) {\r\n            Boolean b \u003d _config.getDefaultMergeable();\r\n            if (Boolean.TRUE.equals(b) \u0026\u0026 (acc !\u003d null)) {\r\n                metadata \u003d metadata.withMergeInfo(PropertyMetadata.MergeInfo.createForDefaults(acc));\r\n            }\r\n        }\r\n    }\r\n    if ((valueNulls !\u003d null) || (contentNulls !\u003d null)) {\r\n        metadata \u003d metadata.withNulls(valueNulls, contentNulls);\r\n    }\r\n    return metadata;\r\n}"
      },
      {
        "name": "POJOPropertyBuilder#getPrimaryMemberUnchecked(...0)",
        "body": "{\r\n    if (_forSerialization) {\r\n        // Inlined `getAccessor()` logic:\r\n        // Inlined `getGetter()`:\r\n        if (_getters !\u003d null) {\r\n            return _getters.value;\r\n        }\r\n        // Inlined `getField()`:\r\n        if (_fields !\u003d null) {\r\n            return _fields.value;\r\n        }\r\n        return null;\r\n    }\r\n    // Otherwise, inlined `getMutator()` logic:\r\n    // Inlined `getConstructorParameter()`:\r\n    if (_ctorParameters !\u003d null) {\r\n        return _ctorParameters.value;\r\n    }\r\n    // Inlined `getSetter()`:\r\n    if (_setters !\u003d null) {\r\n        return _setters.value;\r\n    }\r\n    // Inlined `getField()`:\r\n    if (_fields !\u003d null) {\r\n        return _fields.value;\r\n    }\r\n    // but to support setterless-properties, also include part of\r\n    // `getAccessor()` not yet covered, `getGetter()`:\r\n    if (_getters !\u003d null) {\r\n        return _getters.value;\r\n    }\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "getPrimaryType",
    "signature": "com.fasterxml.jackson.databind.JavaType getPrimaryType()",
    "visibility": "public",
    "body": "{\r\n    if (_forSerialization) {\r\n        AnnotatedMember m \u003d getGetter();\r\n        if (m \u003d\u003d null) {\r\n            m \u003d getField();\r\n            if (m \u003d\u003d null) {\r\n                // 09-Feb-2017, tatu: Not sure if this or `null` but...\r\n                return TypeFactory.unknownType();\r\n            }\r\n        }\r\n        return m.getType();\r\n    }\r\n    AnnotatedMember m \u003d getConstructorParameter();\r\n    if (m \u003d\u003d null) {\r\n        m \u003d getSetter();\r\n        // Important: can\u0027t try direct type access for setter; what we need is\r\n        // type of the first parameter\r\n        if (m !\u003d null) {\r\n            return ((AnnotatedMethod) m).getParameterType(0);\r\n        }\r\n        m \u003d getField();\r\n    }\r\n    // for setterless properties, however, can further try getter\r\n    if (m \u003d\u003d null) {\r\n        m \u003d getGetter();\r\n        if (m \u003d\u003d null) {\r\n            return TypeFactory.unknownType();\r\n        }\r\n    }\r\n    return m.getType();\r\n}",
    "nodes": 13,
    "edges": 15,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B5",
      "B1 : If(r7 !\u003d null) → B2 | else → B4",
      "B2 : If(r7 !\u003d null) → B3 | else → B4",
      "B5 : If(r8 !\u003d null) → B6 | else → B9",
      "B6 : If(r9 \u003d\u003d null) → B7 | else → B8",
      "B9 : If(r8 !\u003d null) → B10 | else → B12",
      "B10 : If(r8 !\u003d null) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  $z0 \u003d POJOPropertyBuilder: boolean _forSerialization\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  r7 \u003d r0.getGetter()\n  if (r7 !\u003d null) goto B2 else B4\n}",
      "B2 {\n  r7 \u003d r0.getField()\n  if (r7 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d TypeFactory.unknownType()\n  return\n}",
      "B4 {\n  $r5 \u003d r7.getType()\n  return\n}",
      "B5 {\n  r8 \u003d r0.getConstructorParameter()\n  if (r8 !\u003d null) goto B6 else B9\n}",
      "B6 {\n  r9 \u003d r0.getSetter()\n  if (r9 \u003d\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r3 \u003d AnnotatedMethod) r9\n  $r4 \u003d $r3.getParameterType(0)\n  return\n}",
      "B8 {\n  r8 \u003d r0.getField()\n}",
      "B9 {\n  if (r8 !\u003d null) goto B10 else B12\n}",
      "B10 {\n  r8 \u003d r0.getGetter()\n  if (r8 !\u003d null) goto B11 else B12\n}",
      "B11 {\n  $r2 \u003d TypeFactory.unknownType()\n  return\n}",
      "B12 {\n  $r1 \u003d r8.getType()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertyBuilder#getSetter(...0)",
        "body": "{\r\n    // Easy with zero or one setters...\r\n    Linked\u003cAnnotatedMethod\u003e curr \u003d _setters;\r\n    if (curr \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    Linked\u003cAnnotatedMethod\u003e next \u003d curr.next;\r\n    if (next \u003d\u003d null) {\r\n        return curr.value;\r\n    }\r\n    // But if multiple, verify that they do not conflict...\r\n    for (; next !\u003d null; next \u003d next.next) {\r\n        AnnotatedMethod selected \u003d _selectSetter(curr.value, next.value);\r\n        if (selected \u003d\u003d curr.value) {\r\n            continue;\r\n        }\r\n        if (selected \u003d\u003d next.value) {\r\n            curr \u003d next;\r\n            continue;\r\n        }\r\n        // 10-May-2021, tatu: unbreakable tie, for now; offline handling\r\n        return _selectSetterFromMultiple(curr, next);\r\n    }\r\n    // One more thing; to avoid having to do it again...\r\n    _setters \u003d curr.withoutNext();\r\n    return curr.value;\r\n}"
      },
      {
        "name": "POJOPropertyBuilder#getGetter(...0)",
        "body": "{\r\n    // Easy with zero or one getters...\r\n    Linked\u003cAnnotatedMethod\u003e curr \u003d _getters;\r\n    if (curr \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    Linked\u003cAnnotatedMethod\u003e next \u003d curr.next;\r\n    if (next \u003d\u003d null) {\r\n        return curr.value;\r\n    }\r\n    // But if multiple, verify that they do not conflict...\r\n    for (; next !\u003d null; next \u003d next.next) {\r\n        /* [JACKSON-255] Allow masking, i.e. do not report exception if one\r\n             *   is in super-class from the other\r\n             */\r\n        Class\u003c?\u003e currClass \u003d curr.value.getDeclaringClass();\r\n        Class\u003c?\u003e nextClass \u003d next.value.getDeclaringClass();\r\n        if (currClass !\u003d nextClass) {\r\n            if (currClass.isAssignableFrom(nextClass)) {\r\n                // next is more specific\r\n                curr \u003d next;\r\n                continue;\r\n            }\r\n            if (nextClass.isAssignableFrom(currClass)) {\r\n                // current more specific\r\n                continue;\r\n            }\r\n        }\r\n        /* 30-May-2014, tatu: Three levels of precedence:\r\n             *\r\n             * 1. Regular getters (\"getX\")\r\n             * 2. Is-getters (\"isX\")\r\n             * 3. Implicit, possible getters (\"x\")\r\n             */\r\n        int priNext \u003d _getterPriority(next.value);\r\n        int priCurr \u003d _getterPriority(curr.value);\r\n        if (priNext !\u003d priCurr) {\r\n            if (priNext \u003c priCurr) {\r\n                curr \u003d next;\r\n            }\r\n            continue;\r\n        }\r\n        throw new IllegalArgumentException(\"Conflicting getter definitions for property \\\"\" + getName() + \"\\\": \" + curr.value.getFullName() + \" vs \" + next.value.getFullName());\r\n    }\r\n    // One more thing; to avoid having to do it again...\r\n    _getters \u003d curr.withoutNext();\r\n    return curr.value;\r\n}"
      },
      {
        "name": "POJOPropertyBuilder#getField(...0)",
        "body": "{\r\n    if (_fields \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // If multiple, verify that they do not conflict...\r\n    AnnotatedField field \u003d _fields.value;\r\n    Linked\u003cAnnotatedField\u003e next \u003d _fields.next;\r\n    for (; next !\u003d null; next \u003d next.next) {\r\n        AnnotatedField nextField \u003d next.value;\r\n        Class\u003c?\u003e fieldClass \u003d field.getDeclaringClass();\r\n        Class\u003c?\u003e nextClass \u003d nextField.getDeclaringClass();\r\n        if (fieldClass !\u003d nextClass) {\r\n            if (fieldClass.isAssignableFrom(nextClass)) {\r\n                // next is more specific\r\n                field \u003d nextField;\r\n                continue;\r\n            }\r\n            if (nextClass.isAssignableFrom(fieldClass)) {\r\n                // getter more specific\r\n                continue;\r\n            }\r\n        }\r\n        // 11-Jan-2024, tatu: Wrt [databind#4302] problem here is that we have\r\n        //   Enum constant fields (static!) added due to change in 2.16.0 (see\r\n        //  {@code AnnotatedFieldCollector#_isIncludableField}) and they can\r\n        //  conflict with actual fields.\r\n        /// Let\u0027s resolve conflict in favor of non-static Field.\r\n        final boolean currStatic \u003d field.isStatic();\r\n        final boolean nextStatic \u003d nextField.isStatic();\r\n        if (currStatic !\u003d nextStatic) {\r\n            if (currStatic) {\r\n                field \u003d nextField;\r\n            }\r\n            continue;\r\n        }\r\n        throw new IllegalArgumentException(\"Multiple fields representing property \\\"\" + getName() + \"\\\": \" + field.getFullName() + \" vs \" + nextField.getFullName());\r\n    }\r\n    return field;\r\n}"
      },
      {
        "name": "POJOPropertyBuilder#getConstructorParameter(...0)",
        "body": "{\r\n    if (_ctorParameters \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    /* Hmmh. Checking for constructor parameters is trickier; for one,\r\n         * we must allow creator and factory method annotations.\r\n         * If this is the case, constructor parameter has the precedence.\r\n         *\r\n         * So, for now, just try finding the first constructor parameter;\r\n         * if none, first factory method. And don\u0027t check for dups, if we must,\r\n         * can start checking for them later on.\r\n         */\r\n    Linked\u003cAnnotatedParameter\u003e curr \u003d _ctorParameters;\r\n    do {\r\n        if (curr.value.getOwner() instanceof AnnotatedConstructor) {\r\n            return curr.value;\r\n        }\r\n        curr \u003d curr.next;\r\n    } while (curr !\u003d null);\r\n    return _ctorParameters.value;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "hasGetter",
    "signature": "boolean hasGetter()",
    "visibility": "public",
    "body": "{\r\n    return _getters !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  $r1 \u003d POJOPropertyBuilder$Linked _getters\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "hasSetter",
    "signature": "boolean hasSetter()",
    "visibility": "public",
    "body": "{\r\n    return _setters !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  $r1 \u003d POJOPropertyBuilder$Linked _setters\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "hasField",
    "signature": "boolean hasField()",
    "visibility": "public",
    "body": "{\r\n    return _fields !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  $r1 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "hasConstructorParameter",
    "signature": "boolean hasConstructorParameter()",
    "visibility": "public",
    "body": "{\r\n    return _ctorParameters !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  $r1 \u003d POJOPropertyBuilder$Linked _ctorParameters\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "couldDeserialize",
    "signature": "boolean couldDeserialize()",
    "visibility": "public",
    "body": "{\r\n    return (_ctorParameters !\u003d null) || (_setters !\u003d null) || ((_fields !\u003d null) \u0026\u0026 // [databind#736] Since 2.17: Fix `REQUIRE_SETTERS_FOR_GETTERS` taking no effect\r\n    (_anyVisible(_fields)));\r\n}",
    "nodes": 7,
    "edges": 10,
    "cc": 5,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B4",
      "B1 : If($r2 !\u003d null) → B2 | else → B4",
      "B2 : If($r3 \u003d\u003d null) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  $r1 \u003d POJOPropertyBuilder$Linked _ctorParameters\u003e\n  if ($r1 !\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r2 \u003d POJOPropertyBuilder$Linked _setters\u003e\n  if ($r2 !\u003d null) goto B2 else B4\n}",
      "B2 {\n  $r3 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  if ($r3 \u003d\u003d null) goto B3 else B5\n}",
      "B3 {\n  $r4 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  $z0 \u003d r0._anyVisible($r4)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $z1 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z1 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertyBuilder#_anyVisible(...1)",
        "body": "{\r\n    for (; n !\u003d null; n \u003d n.next) {\r\n        if (n.isVisible) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "couldSerialize",
    "signature": "boolean couldSerialize()",
    "visibility": "public",
    "body": "{\r\n    return (_getters !\u003d null) || (_fields !\u003d null);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B1 : If($r2 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  $r1 \u003d POJOPropertyBuilder$Linked _getters\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  if ($r2 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "getGetter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod getGetter()",
    "visibility": "public",
    "body": "{\r\n    // Easy with zero or one getters...\r\n    Linked\u003cAnnotatedMethod\u003e curr \u003d _getters;\r\n    if (curr \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    Linked\u003cAnnotatedMethod\u003e next \u003d curr.next;\r\n    if (next \u003d\u003d null) {\r\n        return curr.value;\r\n    }\r\n    // But if multiple, verify that they do not conflict...\r\n    for (; next !\u003d null; next \u003d next.next) {\r\n        /* [JACKSON-255] Allow masking, i.e. do not report exception if one\r\n             *   is in super-class from the other\r\n             */\r\n        Class\u003c?\u003e currClass \u003d curr.value.getDeclaringClass();\r\n        Class\u003c?\u003e nextClass \u003d next.value.getDeclaringClass();\r\n        if (currClass !\u003d nextClass) {\r\n            if (currClass.isAssignableFrom(nextClass)) {\r\n                // next is more specific\r\n                curr \u003d next;\r\n                continue;\r\n            }\r\n            if (nextClass.isAssignableFrom(currClass)) {\r\n                // current more specific\r\n                continue;\r\n            }\r\n        }\r\n        /* 30-May-2014, tatu: Three levels of precedence:\r\n             *\r\n             * 1. Regular getters (\"getX\")\r\n             * 2. Is-getters (\"isX\")\r\n             * 3. Implicit, possible getters (\"x\")\r\n             */\r\n        int priNext \u003d _getterPriority(next.value);\r\n        int priCurr \u003d _getterPriority(curr.value);\r\n        if (priNext !\u003d priCurr) {\r\n            if (priNext \u003c priCurr) {\r\n                curr \u003d next;\r\n            }\r\n            continue;\r\n        }\r\n        throw new IllegalArgumentException(\"Conflicting getter definitions for property \\\"\" + getName() + \"\\\": \" + curr.value.getFullName() + \" vs \" + next.value.getFullName());\r\n    }\r\n    // One more thing; to avoid having to do it again...\r\n    _getters \u003d curr.withoutNext();\r\n    return curr.value;\r\n}",
    "nodes": 16,
    "edges": 20,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r25 !\u003d null) → B1 | else → B2",
      "B2 : If(r26 !\u003d null) → B3 | else → B4",
      "B4 : If(r26 \u003d\u003d null) → B5 | else → B15",
      "B5 : If(r6 \u003d\u003d r9) → B6 | else → B10",
      "B6 : If($z0 \u003d\u003d false) → B7 | else → B8",
      "B8 : If($z1 \u003d\u003d false) → B9 | else → B10",
      "B10 : If($i0 \u003d\u003d $i1) → B11 | else → B13",
      "B11 : If($i0 \u003e\u003d $i1) → B12 | else → B14"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  r25 \u003d POJOPropertyBuilder$Linked _getters\u003e\n  if (r25 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r26 \u003d POJOPropertyBuilder$Linked next\u003e\n  if (r26 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r23 \u003d Object value\u003e\n  $r24 \u003d AnnotatedMethod) $r23\n  return\n}",
      "B4 {\n  if (r26 \u003d\u003d null) goto B5 else B15\n}",
      "B5 {\n  $r4 \u003d Object value\u003e\n  $r5 \u003d AnnotatedMethod) $r4\n  r6 \u003d $r5.getDeclaringClass()\n  $r7 \u003d Object value\u003e\n  $r8 \u003d AnnotatedMethod) $r7\n  r9 \u003d $r8.getDeclaringClass()\n  if (r6 \u003d\u003d r9) goto B6 else B10\n}",
      "B6 {\n  $z0 \u003d r6.isAssignableFrom(r9)\n  if ($z0 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  r25 \u003d r26\n  goto B14\n}",
      "B8 {\n  $z1 \u003d r9.isAssignableFrom(r6)\n  if ($z1 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  goto B14\n}",
      "B10 {\n  $r10 \u003d Object value\u003e\n  $r11 \u003d AnnotatedMethod) $r10\n  $i0 \u003d r0._getterPriority($r11)\n  $r12 \u003d Object value\u003e\n  $r13 \u003d AnnotatedMethod) $r12\n  $i1 \u003d r0._getterPriority($r13)\n  if ($i0 \u003d\u003d $i1) goto B11 else B13\n}",
      "B11 {\n  if ($i0 \u003e\u003d $i1) goto B12 else B14\n}",
      "B12 {\n  r25 \u003d r26\n  goto B14\n}",
      "B13 {\n  $r14 \u003d IllegalArgumentException\n  $r21 \u003d r0.getName()\n  $r15 \u003d Object value\u003e\n  $r16 \u003d AnnotatedMethod) $r15\n  $r20 \u003d $r16.getFullName()\n  $r17 \u003d Object value\u003e\n  $r18 \u003d AnnotatedMethod) $r17\n  $r19 \u003d $r18.getFullName()\n  $r22 \u003d dynInvoke makeConcatWithConstants($r21, $r20, $r19)\n  new IllegalArgumentException($r22)\n  throw $r14\n}",
      "B14 {\n  r26 \u003d POJOPropertyBuilder$Linked next\u003e\n  goto B4\n}",
      "B15 {\n  $r1 \u003d r25.withoutNext()\n  POJOPropertyBuilder$Linked _getters\u003e \u003d $r1\n  $r2 \u003d Object value\u003e\n  $r3 \u003d AnnotatedMethod) $r2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B15",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B14",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B14",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B14",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B4",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertyBuilder#getName(...0)",
        "body": "{\r\n    return (_name \u003d\u003d null) ? null : _name.getSimpleName();\r\n}"
      },
      {
        "name": "POJOPropertyBuilder#_getterPriority(...1)",
        "body": "{\r\n    final String name \u003d m.getName();\r\n    // [databind#238]: Also, regular getters have precedence over \"is-getters\"\r\n    if (name.startsWith(\"get\") \u0026\u0026 name.length() \u003e 3) {\r\n        // should we check capitalization?\r\n        return 1;\r\n    }\r\n    if (name.startsWith(\"is\") \u0026\u0026 name.length() \u003e 2) {\r\n        return 2;\r\n    }\r\n    return 3;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "getSetter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod getSetter()",
    "visibility": "public",
    "body": "{\r\n    // Easy with zero or one setters...\r\n    Linked\u003cAnnotatedMethod\u003e curr \u003d _setters;\r\n    if (curr \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    Linked\u003cAnnotatedMethod\u003e next \u003d curr.next;\r\n    if (next \u003d\u003d null) {\r\n        return curr.value;\r\n    }\r\n    // But if multiple, verify that they do not conflict...\r\n    for (; next !\u003d null; next \u003d next.next) {\r\n        AnnotatedMethod selected \u003d _selectSetter(curr.value, next.value);\r\n        if (selected \u003d\u003d curr.value) {\r\n            continue;\r\n        }\r\n        if (selected \u003d\u003d next.value) {\r\n            curr \u003d next;\r\n            continue;\r\n        }\r\n        // 10-May-2021, tatu: unbreakable tie, for now; offline handling\r\n        return _selectSetterFromMultiple(curr, next);\r\n    }\r\n    // One more thing; to avoid having to do it again...\r\n    _setters \u003d curr.withoutNext();\r\n    return curr.value;\r\n}",
    "nodes": 12,
    "edges": 13,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r14 !\u003d null) → B1 | else → B2",
      "B2 : If(r15 !\u003d null) → B3 | else → B4",
      "B4 : If(r15 \u003d\u003d null) → B5 | else → B11",
      "B5 : If(r8 !\u003d $r9) → B6 | else → B7",
      "B7 : If(r8 !\u003d $r10) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  r14 \u003d POJOPropertyBuilder$Linked _setters\u003e\n  if (r14 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r15 \u003d POJOPropertyBuilder$Linked next\u003e\n  if (r15 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r12 \u003d Object value\u003e\n  $r13 \u003d AnnotatedMethod) $r12\n  return\n}",
      "B4 {\n  if (r15 \u003d\u003d null) goto B5 else B11\n}",
      "B5 {\n  $r4 \u003d Object value\u003e\n  $r7 \u003d AnnotatedMethod) $r4\n  $r5 \u003d Object value\u003e\n  $r6 \u003d AnnotatedMethod) $r5\n  r8 \u003d r0._selectSetter($r7, $r6)\n  $r9 \u003d Object value\u003e\n  if (r8 !\u003d $r9) goto B6 else B7\n}",
      "B6 {\n  goto B10\n}",
      "B7 {\n  $r10 \u003d Object value\u003e\n  if (r8 !\u003d $r10) goto B8 else B9\n}",
      "B8 {\n  r14 \u003d r15\n  goto B10\n}",
      "B9 {\n  $r11 \u003d r0._selectSetterFromMultiple(r14, r15)\n  return\n}",
      "B10 {\n  r15 \u003d POJOPropertyBuilder$Linked next\u003e\n  goto B4\n}",
      "B11 {\n  $r1 \u003d r14.withoutNext()\n  POJOPropertyBuilder$Linked _setters\u003e \u003d $r1\n  $r2 \u003d Object value\u003e\n  $r3 \u003d AnnotatedMethod) $r2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B11",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B4",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertyBuilder#_selectSetterFromMultiple(...2)",
        "body": "{\r\n    // First: store reference to the initial possible conflict\r\n    List\u003cAnnotatedMethod\u003e conflicts \u003d new ArrayList\u003c\u003e();\r\n    conflicts.add(curr.value);\r\n    conflicts.add(next.value);\r\n    next \u003d next.next;\r\n    for (; next !\u003d null; next \u003d next.next) {\r\n        AnnotatedMethod selected \u003d _selectSetter(curr.value, next.value);\r\n        if (selected \u003d\u003d curr.value) {\r\n            // No change, next was lower-precedence\r\n            continue;\r\n        }\r\n        if (selected \u003d\u003d next.value) {\r\n            // Hooray! Found a higher-priority one; clear conflict list\r\n            conflicts.clear();\r\n            curr \u003d next;\r\n            continue;\r\n        }\r\n        // Tie means one more non-resolved, add\r\n        conflicts.add(next.value);\r\n    }\r\n    // It is possible we resolved it; if so:\r\n    if (conflicts.isEmpty()) {\r\n        _setters \u003d curr.withoutNext();\r\n        return curr.value;\r\n    }\r\n    // Otherwise\r\n    String desc \u003d conflicts.stream().map(AnnotatedMethod::getFullName).collect(Collectors.joining(\" vs \"));\r\n    throw new IllegalArgumentException(String.format(\"Conflicting setter definitions for property \\\"%s\\\": %s\", getName(), desc));\r\n}"
      },
      {
        "name": "POJOPropertyBuilder#_selectSetter(...2)",
        "body": "{\r\n    // Allow masking, i.e. do not fail if one is in super-class from the other\r\n    final Class\u003c?\u003e currClass \u003d currM.getDeclaringClass();\r\n    final Class\u003c?\u003e nextClass \u003d nextM.getDeclaringClass();\r\n    if (currClass !\u003d nextClass) {\r\n        if (currClass.isAssignableFrom(nextClass)) {\r\n            // next is more specific\r\n            return nextM;\r\n        }\r\n        if (nextClass.isAssignableFrom(currClass)) {\r\n            // current more specific\r\n            return currM;\r\n        }\r\n    }\r\n    /* 30-May-2014, tatu: Two levels of precedence:\r\n         *\r\n         * 1. Regular setters (\"setX(...)\")\r\n         * 2. Implicit, possible setters (\"x(...)\")\r\n         */\r\n    // 25-Apr-2021, tatu: This is probably wrong, should not rely on\r\n    //    hard-coded \"set\" prefix here.\r\n    int priNext \u003d _setterPriority(nextM);\r\n    int priCurr \u003d _setterPriority(currM);\r\n    if (priNext !\u003d priCurr) {\r\n        // Smaller value, higher; so, if next has higher precedence:\r\n        if (priNext \u003c priCurr) {\r\n            return nextM;\r\n        }\r\n        // otherwise current one has, proceed\r\n        return currM;\r\n    }\r\n    // 11-Dec-2015, tatu: As per [databind#1033] allow pluggable conflict resolution\r\n    return (_annotationIntrospector \u003d\u003d null) ? null : _annotationIntrospector.resolveSetterConflict(_config, currM, nextM);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "getField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedField getField()",
    "visibility": "public",
    "body": "{\r\n    if (_fields \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // If multiple, verify that they do not conflict...\r\n    AnnotatedField field \u003d _fields.value;\r\n    Linked\u003cAnnotatedField\u003e next \u003d _fields.next;\r\n    for (; next !\u003d null; next \u003d next.next) {\r\n        AnnotatedField nextField \u003d next.value;\r\n        Class\u003c?\u003e fieldClass \u003d field.getDeclaringClass();\r\n        Class\u003c?\u003e nextClass \u003d nextField.getDeclaringClass();\r\n        if (fieldClass !\u003d nextClass) {\r\n            if (fieldClass.isAssignableFrom(nextClass)) {\r\n                // next is more specific\r\n                field \u003d nextField;\r\n                continue;\r\n            }\r\n            if (nextClass.isAssignableFrom(fieldClass)) {\r\n                // getter more specific\r\n                continue;\r\n            }\r\n        }\r\n        // 11-Jan-2024, tatu: Wrt [databind#4302] problem here is that we have\r\n        //   Enum constant fields (static!) added due to change in 2.16.0 (see\r\n        //  {@code AnnotatedFieldCollector#_isIncludableField}) and they can\r\n        //  conflict with actual fields.\r\n        /// Let\u0027s resolve conflict in favor of non-static Field.\r\n        final boolean currStatic \u003d field.isStatic();\r\n        final boolean nextStatic \u003d nextField.isStatic();\r\n        if (currStatic !\u003d nextStatic) {\r\n            if (currStatic) {\r\n                field \u003d nextField;\r\n            }\r\n            continue;\r\n        }\r\n        throw new IllegalArgumentException(\"Multiple fields representing property \\\"\" + getName() + \"\\\": \" + field.getFullName() + \" vs \" + nextField.getFullName());\r\n    }\r\n    return field;\r\n}",
    "nodes": 15,
    "edges": 19,
    "cc": 6,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B3 : If(r15 \u003d\u003d null) → B4 | else → B14",
      "B4 : If(r7 \u003d\u003d r8) → B5 | else → B9",
      "B5 : If($z0 \u003d\u003d false) → B6 | else → B7",
      "B7 : If($z1 \u003d\u003d false) → B8 | else → B9",
      "B9 : If($z2 \u003d\u003d $z3) → B10 | else → B12",
      "B10 : If($z2 \u003d\u003d false) → B11 | else → B13"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  $r1 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  $r3 \u003d Object value\u003e\n  r14 \u003d AnnotatedField) $r3\n  $r4 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  r15 \u003d POJOPropertyBuilder$Linked next\u003e\n}",
      "B3 {\n  if (r15 \u003d\u003d null) goto B4 else B14\n}",
      "B4 {\n  $r5 \u003d Object value\u003e\n  r6 \u003d AnnotatedField) $r5\n  r7 \u003d r14.getDeclaringClass()\n  r8 \u003d r6.getDeclaringClass()\n  if (r7 \u003d\u003d r8) goto B5 else B9\n}",
      "B5 {\n  $z0 \u003d r7.isAssignableFrom(r8)\n  if ($z0 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  r14 \u003d r6\n  goto B13\n}",
      "B7 {\n  $z1 \u003d r8.isAssignableFrom(r7)\n  if ($z1 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  goto B13\n}",
      "B9 {\n  $z2 \u003d r14.isStatic()\n  $z3 \u003d r6.isStatic()\n  if ($z2 \u003d\u003d $z3) goto B10 else B12\n}",
      "B10 {\n  if ($z2 \u003d\u003d false) goto B11 else B13\n}",
      "B11 {\n  r14 \u003d r6\n  goto B13\n}",
      "B12 {\n  $r9 \u003d IllegalArgumentException\n  $r12 \u003d r0.getName()\n  $r11 \u003d r14.getFullName()\n  $r10 \u003d r6.getFullName()\n  $r13 \u003d dynInvoke makeConcatWithConstants($r12, $r11, $r10)\n  new IllegalArgumentException($r13)\n  throw $r9\n}",
      "B13 {\n  r15 \u003d POJOPropertyBuilder$Linked next\u003e\n  goto B3\n}",
      "B14 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B14",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B13",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B3",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertyBuilder#getName(...0)",
        "body": "{\r\n    return (_name \u003d\u003d null) ? null : _name.getSimpleName();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "getConstructorParameter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter getConstructorParameter()",
    "visibility": "public",
    "body": "{\r\n    if (_ctorParameters \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    /* Hmmh. Checking for constructor parameters is trickier; for one,\r\n         * we must allow creator and factory method annotations.\r\n         * If this is the case, constructor parameter has the precedence.\r\n         *\r\n         * So, for now, just try finding the first constructor parameter;\r\n         * if none, first factory method. And don\u0027t check for dups, if we must,\r\n         * can start checking for them later on.\r\n         */\r\n    Linked\u003cAnnotatedParameter\u003e curr \u003d _ctorParameters;\r\n    do {\r\n        if (curr.value.getOwner() instanceof AnnotatedConstructor) {\r\n            return curr.value;\r\n        }\r\n        curr \u003d curr.next;\r\n    } while (curr !\u003d null);\r\n    return _ctorParameters.value;\r\n}",
    "nodes": 7,
    "edges": 7,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5",
      "B5 : If(r10 !\u003d null) → B6 | else → B3"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  $r1 \u003d POJOPropertyBuilder$Linked _ctorParameters\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r10 \u003d POJOPropertyBuilder$Linked _ctorParameters\u003e\n}",
      "B3 {\n  $r2 \u003d Object value\u003e\n  $r3 \u003d AnnotatedParameter) $r2\n  $r4 \u003d $r3.getOwner()\n  $z0 \u003d AnnotatedConstructor\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r8 \u003d Object value\u003e\n  $r9 \u003d AnnotatedParameter) $r8\n  return\n}",
      "B5 {\n  r10 \u003d POJOPropertyBuilder$Linked next\u003e\n  if (r10 !\u003d null) goto B6 else B3\n}",
      "B6 {\n  $r5 \u003d POJOPropertyBuilder$Linked _ctorParameters\u003e\n  $r6 \u003d Object value\u003e\n  $r7 \u003d AnnotatedParameter) $r6\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B3",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "getConstructorParameters",
    "signature": "java.util.Iterator getConstructorParameters()",
    "visibility": "public",
    "body": "{\r\n    if (_ctorParameters \u003d\u003d null) {\r\n        return ClassUtil.emptyIterator();\r\n    }\r\n    return new MemberIterator\u003cAnnotatedParameter\u003e(_ctorParameters);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  $r1 \u003d POJOPropertyBuilder$Linked _ctorParameters\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d ClassUtil.emptyIterator()\n  return\n}",
      "B2 {\n  $r2 \u003d POJOPropertyBuilder$MemberIterator\n  $r3 \u003d POJOPropertyBuilder$Linked _ctorParameters\u003e\n  new POJOPropertyBuilder$MemberIterator($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "getPrimaryMember",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember getPrimaryMember()",
    "visibility": "public",
    "body": "{\r\n    if (_forSerialization) {\r\n        return getAccessor();\r\n    }\r\n    AnnotatedMember m \u003d getMutator();\r\n    // for setterless properties, however...\r\n    if (m \u003d\u003d null) {\r\n        m \u003d getAccessor();\r\n    }\r\n    return m;\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r2 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  $z0 \u003d POJOPropertyBuilder: boolean _forSerialization\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d r0.getAccessor()\n  return\n}",
      "B2 {\n  r2 \u003d r0.getMutator()\n  if (r2 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  r2 \u003d r0.getAccessor()\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertyBuilder#getMutator(...0)",
        "body": "(source not found)"
      },
      {
        "name": "POJOPropertyBuilder#getAccessor(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "findReferenceType",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty findReferenceType()",
    "visibility": "public",
    "body": "{\r\n    // 30-Mar-2017, tatu: Access lazily but retain information since it needs\r\n    //   to be accessed multiple times during processing.\r\n    AnnotationIntrospector.ReferenceProperty result \u003d _referenceInfo;\r\n    if (result !\u003d null) {\r\n        if (result \u003d\u003d NOT_REFEFERENCE_PROP) {\r\n            return null;\r\n        }\r\n        return result;\r\n    }\r\n    result \u003d fromMemberAnnotations(new WithMember\u003cAnnotationIntrospector.ReferenceProperty\u003e() {\r\n\r\n        @Override\r\n        public AnnotationIntrospector.ReferenceProperty withMember(AnnotatedMember member) {\r\n            return _annotationIntrospector.findReferenceType(member);\r\n        }\r\n    });\r\n    _referenceInfo \u003d (result \u003d\u003d null) ? NOT_REFEFERENCE_PROP : result;\r\n    return result;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 \u003d\u003d null) → B1 | else → B4",
      "B1 : If(r4 !\u003d $r3) → B2 | else → B3",
      "B4 : If(r5 !\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  r4 \u003d AnnotationIntrospector$ReferenceProperty _referenceInfo\u003e\n  if (r4 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r3 \u003d AnnotationIntrospector$ReferenceProperty NOT_REFEFERENCE_PROP\u003e\n  if (r4 !\u003d $r3) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r1 \u003d POJOPropertyBuilder$2\n  new POJOPropertyBuilder$2(r0)\n  $r2 \u003d r0.fromMemberAnnotations($r1)\n  r5 \u003d AnnotationIntrospector$ReferenceProperty) $r2\n  if (r5 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r6 \u003d AnnotationIntrospector$ReferenceProperty NOT_REFEFERENCE_PROP\u003e\n  goto B7\n}",
      "B6 {\n  $r6 \u003d r5\n}",
      "B7 {\n  AnnotationIntrospector$ReferenceProperty _referenceInfo\u003e \u003d $r6\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertyBuilder#fromMemberAnnotations(...1)",
        "body": "{\r\n    T result \u003d null;\r\n    if (_annotationIntrospector !\u003d null) {\r\n        if (_forSerialization) {\r\n            if (_getters !\u003d null) {\r\n                result \u003d func.withMember(_getters.value);\r\n            }\r\n        } else {\r\n            if (_ctorParameters !\u003d null) {\r\n                result \u003d func.withMember(_ctorParameters.value);\r\n            }\r\n            if (result \u003d\u003d null \u0026\u0026 _setters !\u003d null) {\r\n                result \u003d func.withMember(_setters.value);\r\n            }\r\n        }\r\n        if (result \u003d\u003d null \u0026\u0026 _fields !\u003d null) {\r\n            result \u003d func.withMember(_fields.value);\r\n        }\r\n    }\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "isTypeId",
    "signature": "boolean isTypeId()",
    "visibility": "public",
    "body": "{\r\n    Boolean b \u003d fromMemberAnnotations(new WithMember\u003cBoolean\u003e() {\r\n\r\n        @Override\r\n        public Boolean withMember(AnnotatedMember member) {\r\n            return _annotationIntrospector.isTypeId(member);\r\n        }\r\n    });\r\n    return (b !\u003d null) \u0026\u0026 b.booleanValue();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  $r1 \u003d POJOPropertyBuilder$3\n  new POJOPropertyBuilder$3(r0)\n  $r2 \u003d r0.fromMemberAnnotations($r1)\n  r3 \u003d Boolean) $r2\n  if (r3 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d r3.booleanValue()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertyBuilder#fromMemberAnnotations(...1)",
        "body": "{\r\n    T result \u003d null;\r\n    if (_annotationIntrospector !\u003d null) {\r\n        if (_forSerialization) {\r\n            if (_getters !\u003d null) {\r\n                result \u003d func.withMember(_getters.value);\r\n            }\r\n        } else {\r\n            if (_ctorParameters !\u003d null) {\r\n                result \u003d func.withMember(_ctorParameters.value);\r\n            }\r\n            if (result \u003d\u003d null \u0026\u0026 _setters !\u003d null) {\r\n                result \u003d func.withMember(_setters.value);\r\n            }\r\n        }\r\n        if (result \u003d\u003d null \u0026\u0026 _fields !\u003d null) {\r\n            result \u003d func.withMember(_fields.value);\r\n        }\r\n    }\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "findInclusion",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonInclude$Value findInclusion()",
    "visibility": "public",
    "body": "{\r\n    AnnotatedMember a \u003d getAccessor();\r\n    // 16-Apr-2106, tatu: Let\u0027s include per-type default inclusion too\r\n    // 17-Aug-2016, tatu: Do NOT include global, or per-type defaults, because\r\n    //    not all of this information (specifically, enclosing type\u0027s settings)\r\n    //    is available here\r\n    JsonInclude.Value v \u003d (_annotationIntrospector \u003d\u003d null) ? null : _annotationIntrospector.findPropertyInclusion(a);\r\n    return (v \u003d\u003d null) ? JsonInclude.Value.empty() : v;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B2",
      "B3 : If($r4 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  r1 \u003d r0.getAccessor()\n  $r2 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  if ($r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r3 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r4 \u003d $r3.findPropertyInclusion(r1)\n}",
      "B3 {\n  if ($r4 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r5 \u003d JsonInclude$Value.empty()\n  goto B6\n}",
      "B5 {\n  $r5 \u003d $r4\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertyBuilder#getAccessor(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "findAliases",
    "signature": "java.util.List findAliases()",
    "visibility": "public",
    "body": "{\r\n    AnnotatedMember ann \u003d getPrimaryMember();\r\n    if (ann !\u003d null) {\r\n        List\u003cPropertyName\u003e propertyNames \u003d _annotationIntrospector.findPropertyAliases(ann);\r\n        if (propertyNames !\u003d null) {\r\n            return propertyNames;\r\n        }\r\n    }\r\n    return Collections.emptyList();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r4 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  r1 \u003d r0.getPrimaryMember()\n  if (r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r3 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  r4 \u003d $r3.findPropertyAliases(r1)\n  if (r4 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r2 \u003d Collections.emptyList()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertyBuilder#getPrimaryMember(...0)",
        "body": "{\r\n    if (_forSerialization) {\r\n        return getAccessor();\r\n    }\r\n    AnnotatedMember m \u003d getMutator();\r\n    // for setterless properties, however...\r\n    if (m \u003d\u003d null) {\r\n        m \u003d getAccessor();\r\n    }\r\n    return m;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "findAccess",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonProperty$Access findAccess()",
    "visibility": "public",
    "body": "{\r\n    JsonProperty.Access acc \u003d fromMemberAnnotationsExcept(new WithMember\u003cJsonProperty.Access\u003e() {\r\n\r\n        @Override\r\n        public JsonProperty.Access withMember(AnnotatedMember member) {\r\n            return _annotationIntrospector.findPropertyAccess(member);\r\n        }\r\n    }, JsonProperty.Access.AUTO);\r\n    // [databind#2951] add feature to inverse access logic\r\n    if (_config.isEnabled(MapperFeature.INVERSE_READ_WRITE_ACCESS)) {\r\n        if (acc \u003d\u003d JsonProperty.Access.READ_ONLY) {\r\n            acc \u003d JsonProperty.Access.WRITE_ONLY;\r\n        } else if (acc \u003d\u003d JsonProperty.Access.WRITE_ONLY) {\r\n            acc \u003d JsonProperty.Access.READ_ONLY;\r\n        }\r\n    }\r\n    return acc;\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B5",
      "B1 : If(r8 !\u003d $r6) → B2 | else → B3",
      "B3 : If(r8 !\u003d $r7) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  $r1 \u003d POJOPropertyBuilder$5\n  new POJOPropertyBuilder$5(r0)\n  $r2 \u003d JsonProperty$Access AUTO\u003e\n  $r3 \u003d r0.fromMemberAnnotationsExcept($r1, $r2)\n  r8 \u003d JsonProperty$Access) $r3\n  $r5 \u003d MapperConfig _config\u003e\n  $r4 \u003d MapperFeature INVERSE_READ_WRITE_ACCESS\u003e\n  $z0 \u003d $r5.isEnabled($r4)\n  if ($z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  $r6 \u003d JsonProperty$Access READ_ONLY\u003e\n  if (r8 !\u003d $r6) goto B2 else B3\n}",
      "B2 {\n  r8 \u003d JsonProperty$Access WRITE_ONLY\u003e\n  goto B5\n}",
      "B3 {\n  $r7 \u003d JsonProperty$Access WRITE_ONLY\u003e\n  if (r8 !\u003d $r7) goto B4 else B5\n}",
      "B4 {\n  r8 \u003d JsonProperty$Access READ_ONLY\u003e\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertyBuilder#fromMemberAnnotationsExcept(...2)",
        "body": "{\r\n    if (_annotationIntrospector \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // NOTE: here we must ask ALL accessors, but the order varies between\r\n    // serialization, deserialization\r\n    if (_forSerialization) {\r\n        if (_getters !\u003d null) {\r\n            T result \u003d func.withMember(_getters.value);\r\n            if ((result !\u003d null) \u0026\u0026 (result !\u003d defaultValue)) {\r\n                return result;\r\n            }\r\n        }\r\n        if (_fields !\u003d null) {\r\n            T result \u003d func.withMember(_fields.value);\r\n            if ((result !\u003d null) \u0026\u0026 (result !\u003d defaultValue)) {\r\n                return result;\r\n            }\r\n        }\r\n        if (_ctorParameters !\u003d null) {\r\n            T result \u003d func.withMember(_ctorParameters.value);\r\n            if ((result !\u003d null) \u0026\u0026 (result !\u003d defaultValue)) {\r\n                return result;\r\n            }\r\n        }\r\n        if (_setters !\u003d null) {\r\n            T result \u003d func.withMember(_setters.value);\r\n            if ((result !\u003d null) \u0026\u0026 (result !\u003d defaultValue)) {\r\n                return result;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    if (_ctorParameters !\u003d null) {\r\n        T result \u003d func.withMember(_ctorParameters.value);\r\n        if ((result !\u003d null) \u0026\u0026 (result !\u003d defaultValue)) {\r\n            return result;\r\n        }\r\n    }\r\n    if (_setters !\u003d null) {\r\n        T result \u003d func.withMember(_setters.value);\r\n        if ((result !\u003d null) \u0026\u0026 (result !\u003d defaultValue)) {\r\n            return result;\r\n        }\r\n    }\r\n    if (_fields !\u003d null) {\r\n        T result \u003d func.withMember(_fields.value);\r\n        if ((result !\u003d null) \u0026\u0026 (result !\u003d defaultValue)) {\r\n            return result;\r\n        }\r\n    }\r\n    if (_getters !\u003d null) {\r\n        T result \u003d func.withMember(_getters.value);\r\n        if ((result !\u003d null) \u0026\u0026 (result !\u003d defaultValue)) {\r\n            return result;\r\n        }\r\n    }\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "removeNonVisible",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonProperty$Access removeNonVisible(boolean,com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector)",
    "visibility": "public",
    "body": "{\r\n    // 07-Jun-2015, tatu: With 2.6, we will allow optional definition\r\n    //  of explicit access type for property; if not \"AUTO\", it will\r\n    //  dictate how visibility checks are applied.\r\n    JsonProperty.Access acc \u003d findAccess();\r\n    if (acc \u003d\u003d null) {\r\n        acc \u003d JsonProperty.Access.AUTO;\r\n    }\r\n    switch(acc) {\r\n        case READ_ONLY:\r\n            // [databind#2719]: Need to add ignorals, first, keeping in mind\r\n            // we have not yet resolved explicit names, so include implicit\r\n            // and possible explicit names\r\n            if (parent !\u003d null) {\r\n                parent._collectIgnorals(getName());\r\n                for (PropertyName pn : findExplicitNames()) {\r\n                    parent._collectIgnorals(pn.getSimpleName());\r\n                }\r\n            }\r\n            // Remove setters, creators for sure, but fields too if deserializing\r\n            _setters \u003d null;\r\n            _ctorParameters \u003d null;\r\n            if (!_forSerialization) {\r\n                _fields \u003d null;\r\n            }\r\n            break;\r\n        case READ_WRITE:\r\n            // no trimming whatsoever?\r\n            break;\r\n        case WRITE_ONLY:\r\n            // remove getters, definitely, but also fields if serializing\r\n            _getters \u003d null;\r\n            if (_forSerialization) {\r\n                _fields \u003d null;\r\n            }\r\n            break;\r\n        default:\r\n        case // the default case: base it on visibility\r\n        AUTO:\r\n            _getters \u003d _removeNonVisible(_getters);\r\n            _ctorParameters \u003d _removeNonVisible(_ctorParameters);\r\n            if (!inferMutators || (_getters \u003d\u003d null)) {\r\n                _fields \u003d _removeNonVisible(_fields);\r\n                _setters \u003d _removeNonVisible(_setters);\r\n            }\r\n    }\r\n    return acc;\r\n}",
    "nodes": 16,
    "edges": 25,
    "cc": 11,
    "flowSummary": [
      "B0 : If(r18 !\u003d null) → B1 | else → B2",
      "B2 : If(switch-on $i1) → B3 | else → B9",
      "B3 : If(r2 \u003d\u003d null) → B4 | else → B7",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B7",
      "B7 : If($z1 !\u003d 0) → B8 | else → B15",
      "B10 : If($z0 \u003d\u003d false) → B11 | else → B15",
      "B12 : If(z3 \u003d\u003d false) → B13 | else → B14",
      "B13 : If($r17 !\u003d null) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  z3 :\u003d @parameter0: boolean\n  POJOPropertiesCollector\n  r18 \u003d r0.findAccess()\n  if (r18 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r18 \u003d JsonProperty$Access AUTO\u003e\n}",
      "B2 {\n  $r1 \u003d POJOPropertyBuilder$6: int[] $SwitchMap$com$fasterxml$jackson$annotation$JsonProperty$Access\u003e\n  $i0 \u003d r18.ordinal()\n  $i1 \u003d $r1[$i0]\n  POJOPropertyBuilder$Linked _getters\u003e; }\n}",
      "B3 {\n  if (r2 \u003d\u003d null) goto B4 else B7\n}",
      "B4 {\n  $r3 \u003d r0.getName()\n  r2._collectIgnorals($r3)\n  $r4 \u003d r0.findExplicitNames()\n  r5 \u003d $r4.iterator()\n}",
      "B5 {\n  $z2 \u003d r5.hasNext()\n  if ($z2 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r6 \u003d r5.next()\n  r7 \u003d PropertyName) $r6\n  $r8 \u003d r7.getSimpleName()\n  r2._collectIgnorals($r8)\n  goto B5\n}",
      "B7 {\n  POJOPropertyBuilder$Linked _setters\u003e \u003d null\n  POJOPropertyBuilder$Linked _ctorParameters\u003e \u003d null\n  $z1 \u003d POJOPropertyBuilder: boolean _forSerialization\u003e\n  if ($z1 !\u003d 0) goto B8 else B15\n}",
      "B8 {\n  POJOPropertyBuilder$Linked _fields\u003e \u003d null\n  goto B15\n}",
      "B9 {\n  goto B15\n}",
      "B10 {\n  POJOPropertyBuilder$Linked _getters\u003e \u003d null\n  $z0 \u003d POJOPropertyBuilder: boolean _forSerialization\u003e\n  if ($z0 \u003d\u003d false) goto B11 else B15\n}",
      "B11 {\n  POJOPropertyBuilder$Linked _fields\u003e \u003d null\n  goto B15\n}",
      "B12 {\n  $r9 \u003d POJOPropertyBuilder$Linked _getters\u003e\n  $r10 \u003d r0._removeNonVisible($r9)\n  POJOPropertyBuilder$Linked _getters\u003e \u003d $r10\n  $r11 \u003d POJOPropertyBuilder$Linked _ctorParameters\u003e\n  $r12 \u003d r0._removeNonVisible($r11)\n  POJOPropertyBuilder$Linked _ctorParameters\u003e \u003d $r12\n  if (z3 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  $r17 \u003d POJOPropertyBuilder$Linked _getters\u003e\n  if ($r17 !\u003d null) goto B14 else B15\n}",
      "B14 {\n  $r13 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  $r14 \u003d r0._removeNonVisible($r13)\n  POJOPropertyBuilder$Linked _fields\u003e \u003d $r14\n  $r15 \u003d POJOPropertyBuilder$Linked _setters\u003e\n  $r16 \u003d r0._removeNonVisible($r15)\n  POJOPropertyBuilder$Linked _setters\u003e \u003d $r16\n}",
      "B15 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B9",
      "B2 --\u003e B10",
      "B2 --\u003e B12",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e B8",
      "B7 --\u003e B15",
      "B8 --\u003e B15",
      "B9 --\u003e B15",
      "B10 --\u003e B11",
      "B10 --\u003e B15",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertyBuilder#_removeNonVisible(...1)",
        "body": "{\r\n    if (node \u003d\u003d null) {\r\n        return node;\r\n    }\r\n    return node.withoutNonVisible();\r\n}"
      },
      {
        "name": "POJOPropertyBuilder#findAccess(...0)",
        "body": "{\r\n    JsonProperty.Access acc \u003d fromMemberAnnotationsExcept(new WithMember\u003cJsonProperty.Access\u003e() {\r\n\r\n        @Override\r\n        public JsonProperty.Access withMember(AnnotatedMember member) {\r\n            return _annotationIntrospector.findPropertyAccess(member);\r\n        }\r\n    }, JsonProperty.Access.AUTO);\r\n    // [databind#2951] add feature to inverse access logic\r\n    if (_config.isEnabled(MapperFeature.INVERSE_READ_WRITE_ACCESS)) {\r\n        if (acc \u003d\u003d JsonProperty.Access.READ_ONLY) {\r\n            acc \u003d JsonProperty.Access.WRITE_ONLY;\r\n        } else if (acc \u003d\u003d JsonProperty.Access.WRITE_ONLY) {\r\n            acc \u003d JsonProperty.Access.READ_ONLY;\r\n        }\r\n    }\r\n    return acc;\r\n}"
      },
      {
        "name": "POJOPropertyBuilder#getName(...0)",
        "body": "{\r\n    return (_name \u003d\u003d null) ? null : _name.getSimpleName();\r\n}"
      },
      {
        "name": "POJOPropertyBuilder#findExplicitNames(...0)",
        "body": "{\r\n    Set\u003cPropertyName\u003e renamed \u003d null;\r\n    renamed \u003d _findExplicitNames(_fields, renamed);\r\n    renamed \u003d _findExplicitNames(_getters, renamed);\r\n    renamed \u003d _findExplicitNames(_setters, renamed);\r\n    renamed \u003d _findExplicitNames(_ctorParameters, renamed);\r\n    return (renamed \u003d\u003d null) ? Collections.emptySet() : renamed;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "mergeAnnotations",
    "signature": "void mergeAnnotations(boolean)",
    "visibility": "public",
    "body": "{\r\n    if (forSerialization) {\r\n        if (_getters !\u003d null) {\r\n            AnnotationMap ann \u003d _mergeAnnotations(0, _getters, _fields, _ctorParameters, _setters);\r\n            _getters \u003d _applyAnnotations(_getters, ann);\r\n        } else if (_fields !\u003d null) {\r\n            AnnotationMap ann \u003d _mergeAnnotations(0, _fields, _ctorParameters, _setters);\r\n            _fields \u003d _applyAnnotations(_fields, ann);\r\n        }\r\n    } else {\r\n        // for deserialization\r\n        if (_ctorParameters !\u003d null) {\r\n            AnnotationMap ann \u003d _mergeAnnotations(0, _ctorParameters, _setters, _fields, _getters);\r\n            _ctorParameters \u003d _applyAnnotations(_ctorParameters, ann);\r\n        } else if (_setters !\u003d null) {\r\n            AnnotationMap ann \u003d _mergeAnnotations(0, _setters, _fields, _getters);\r\n            _setters \u003d _applyAnnotations(_setters, ann);\r\n        } else if (_fields !\u003d null) {\r\n            AnnotationMap ann \u003d _mergeAnnotations(0, _fields, _getters);\r\n            _fields \u003d _applyAnnotations(_fields, ann);\r\n        }\r\n    }\r\n}",
    "nodes": 12,
    "edges": 17,
    "cc": 7,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B5",
      "B1 : If($r22 \u003d\u003d null) → B2 | else → B3",
      "B3 : If($r23 \u003d\u003d null) → B4 | else → B11",
      "B5 : If($r1 \u003d\u003d null) → B6 | else → B7",
      "B7 : If($r2 \u003d\u003d null) → B8 | else → B9",
      "B9 : If($r3 \u003d\u003d null) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  z0 :\u003d @parameter0: boolean\n  if (z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  $r22 \u003d POJOPropertyBuilder$Linked _getters\u003e\n  if ($r22 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r30 \u003d POJOPropertyBuilder$Linked)[4]\n  $r31 \u003d POJOPropertyBuilder$Linked _getters\u003e\n  $r30[0] \u003d $r31\n  $r32 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  $r30[1] \u003d $r32\n  $r33 \u003d POJOPropertyBuilder$Linked _ctorParameters\u003e\n  $r30[2] \u003d $r33\n  $r34 \u003d POJOPropertyBuilder$Linked _setters\u003e\n  $r30[3] \u003d $r34\n  r37 \u003d r0._mergeAnnotations(0, $r30)\n  $r35 \u003d POJOPropertyBuilder$Linked _getters\u003e\n  $r36 \u003d r0._applyAnnotations($r35, r37)\n  POJOPropertyBuilder$Linked _getters\u003e \u003d $r36\n  goto B11\n}",
      "B3 {\n  $r23 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  if ($r23 \u003d\u003d null) goto B4 else B11\n}",
      "B4 {\n  $r24 \u003d POJOPropertyBuilder$Linked)[3]\n  $r25 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  $r24[0] \u003d $r25\n  $r26 \u003d POJOPropertyBuilder$Linked _ctorParameters\u003e\n  $r24[1] \u003d $r26\n  $r27 \u003d POJOPropertyBuilder$Linked _setters\u003e\n  $r24[2] \u003d $r27\n  r38 \u003d r0._mergeAnnotations(0, $r24)\n  $r28 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  $r29 \u003d r0._applyAnnotations($r28, r38)\n  POJOPropertyBuilder$Linked _fields\u003e \u003d $r29\n  goto B11\n}",
      "B5 {\n  $r1 \u003d POJOPropertyBuilder$Linked _ctorParameters\u003e\n  if ($r1 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r15 \u003d POJOPropertyBuilder$Linked)[4]\n  $r16 \u003d POJOPropertyBuilder$Linked _ctorParameters\u003e\n  $r15[0] \u003d $r16\n  $r17 \u003d POJOPropertyBuilder$Linked _setters\u003e\n  $r15[1] \u003d $r17\n  $r18 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  $r15[2] \u003d $r18\n  $r19 \u003d POJOPropertyBuilder$Linked _getters\u003e\n  $r15[3] \u003d $r19\n  r39 \u003d r0._mergeAnnotations(0, $r15)\n  $r20 \u003d POJOPropertyBuilder$Linked _ctorParameters\u003e\n  $r21 \u003d r0._applyAnnotations($r20, r39)\n  POJOPropertyBuilder$Linked _ctorParameters\u003e \u003d $r21\n  goto B11\n}",
      "B7 {\n  $r2 \u003d POJOPropertyBuilder$Linked _setters\u003e\n  if ($r2 \u003d\u003d null) goto B8 else B9\n}",
      "B8 {\n  $r9 \u003d POJOPropertyBuilder$Linked)[3]\n  $r10 \u003d POJOPropertyBuilder$Linked _setters\u003e\n  $r9[0] \u003d $r10\n  $r11 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  $r9[1] \u003d $r11\n  $r12 \u003d POJOPropertyBuilder$Linked _getters\u003e\n  $r9[2] \u003d $r12\n  r40 \u003d r0._mergeAnnotations(0, $r9)\n  $r13 \u003d POJOPropertyBuilder$Linked _setters\u003e\n  $r14 \u003d r0._applyAnnotations($r13, r40)\n  POJOPropertyBuilder$Linked _setters\u003e \u003d $r14\n  goto B11\n}",
      "B9 {\n  $r3 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  if ($r3 \u003d\u003d null) goto B10 else B11\n}",
      "B10 {\n  $r4 \u003d POJOPropertyBuilder$Linked)[2]\n  $r5 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  $r4[0] \u003d $r5\n  $r6 \u003d POJOPropertyBuilder$Linked _getters\u003e\n  $r4[1] \u003d $r6\n  r41 \u003d r0._mergeAnnotations(0, $r4)\n  $r7 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  $r8 \u003d r0._applyAnnotations($r7, r41)\n  POJOPropertyBuilder$Linked _fields\u003e \u003d $r8\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B11",
      "B3 --\u003e B4",
      "B3 --\u003e B11",
      "B4 --\u003e B11",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertyBuilder#_applyAnnotations(...2)",
        "body": "{\r\n    @SuppressWarnings(\"unchecked\")\r\n    T value \u003d (T) node.value.withAnnotations(ann);\r\n    if (node.next !\u003d null) {\r\n        node \u003d node.withNext(_applyAnnotations(node.next, ann));\r\n    }\r\n    return node.withValue(value);\r\n}"
      },
      {
        "name": "POJOPropertyBuilder#_mergeAnnotations(...5)",
        "body": "(source not found)"
      },
      {
        "name": "POJOPropertyBuilder#_mergeAnnotations(...4)",
        "body": "(source not found)"
      },
      {
        "name": "POJOPropertyBuilder#_mergeAnnotations(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "anyVisible",
    "signature": "boolean anyVisible()",
    "visibility": "public",
    "body": "{\r\n    return _anyVisible(_fields) || _anyVisible(_getters) || _anyVisible(_setters) || _anyVisible(_ctorParameters);\r\n}",
    "nodes": 7,
    "edges": 10,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B4",
      "B1 : If($z1 !\u003d 0) → B2 | else → B4",
      "B2 : If($z2 !\u003d 0) → B3 | else → B4",
      "B3 : If($z3 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  $r1 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  $z0 \u003d r0._anyVisible($r1)\n  if ($z0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $r2 \u003d POJOPropertyBuilder$Linked _getters\u003e\n  $z1 \u003d r0._anyVisible($r2)\n  if ($z1 !\u003d 0) goto B2 else B4\n}",
      "B2 {\n  $r3 \u003d POJOPropertyBuilder$Linked _setters\u003e\n  $z2 \u003d r0._anyVisible($r3)\n  if ($z2 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d POJOPropertyBuilder$Linked _ctorParameters\u003e\n  $z3 \u003d r0._anyVisible($r4)\n  if ($z3 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $z4 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z4 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertyBuilder#_anyVisible(...1)",
        "body": "{\r\n    for (; n !\u003d null; n \u003d n.next) {\r\n        if (n.isVisible) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "anyIgnorals",
    "signature": "boolean anyIgnorals()",
    "visibility": "public",
    "body": "{\r\n    return _anyIgnorals(_fields) || _anyIgnorals(_getters) || _anyIgnorals(_setters) || _anyIgnorals(_ctorParameters);\r\n}",
    "nodes": 7,
    "edges": 10,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B4",
      "B1 : If($z1 !\u003d 0) → B2 | else → B4",
      "B2 : If($z2 !\u003d 0) → B3 | else → B4",
      "B3 : If($z3 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  $r1 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  $z0 \u003d r0._anyIgnorals($r1)\n  if ($z0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $r2 \u003d POJOPropertyBuilder$Linked _getters\u003e\n  $z1 \u003d r0._anyIgnorals($r2)\n  if ($z1 !\u003d 0) goto B2 else B4\n}",
      "B2 {\n  $r3 \u003d POJOPropertyBuilder$Linked _setters\u003e\n  $z2 \u003d r0._anyIgnorals($r3)\n  if ($z2 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d POJOPropertyBuilder$Linked _ctorParameters\u003e\n  $z3 \u003d r0._anyIgnorals($r4)\n  if ($z3 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $z4 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z4 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertyBuilder#_anyIgnorals(...1)",
        "body": "{\r\n    for (; n !\u003d null; n \u003d n.next) {\r\n        if (n.isMarkedIgnored) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "anyExplicitsWithoutIgnoral",
    "signature": "boolean anyExplicitsWithoutIgnoral()",
    "visibility": "public",
    "body": "{\r\n    return _anyExplicitsWithoutIgnoral(_fields) || _anyExplicitsWithoutIgnoral(_getters) || _anyExplicitsWithoutIgnoral(_setters) || // as per [databind#1317], constructor names are special...\r\n    _anyExplicitNamesWithoutIgnoral(_ctorParameters);\r\n}",
    "nodes": 7,
    "edges": 10,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B4",
      "B1 : If($z1 !\u003d 0) → B2 | else → B4",
      "B2 : If($z2 !\u003d 0) → B3 | else → B4",
      "B3 : If($z3 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  $r1 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  $z0 \u003d r0._anyExplicitsWithoutIgnoral($r1)\n  if ($z0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $r2 \u003d POJOPropertyBuilder$Linked _getters\u003e\n  $z1 \u003d r0._anyExplicitsWithoutIgnoral($r2)\n  if ($z1 !\u003d 0) goto B2 else B4\n}",
      "B2 {\n  $r3 \u003d POJOPropertyBuilder$Linked _setters\u003e\n  $z2 \u003d r0._anyExplicitsWithoutIgnoral($r3)\n  if ($z2 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d POJOPropertyBuilder$Linked _ctorParameters\u003e\n  $z3 \u003d r0._anyExplicitNamesWithoutIgnoral($r4)\n  if ($z3 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $z4 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z4 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertyBuilder#_anyExplicitsWithoutIgnoral(...1)",
        "body": "{\r\n    for (; n !\u003d null; n \u003d n.next) {\r\n        if (!n.isMarkedIgnored \u0026\u0026 (n.name !\u003d null \u0026\u0026 n.name.hasSimpleName())) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      },
      {
        "name": "POJOPropertyBuilder#_anyExplicitNamesWithoutIgnoral(...1)",
        "body": "{\r\n    for (; n !\u003d null; n \u003d n.next) {\r\n        if (!n.isMarkedIgnored \u0026\u0026 (n.name !\u003d null \u0026\u0026 n.isNameExplicit)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "findExplicitNames",
    "signature": "java.util.Set findExplicitNames()",
    "visibility": "public",
    "body": "{\r\n    Set\u003cPropertyName\u003e renamed \u003d null;\r\n    renamed \u003d _findExplicitNames(_fields, renamed);\r\n    renamed \u003d _findExplicitNames(_getters, renamed);\r\n    renamed \u003d _findExplicitNames(_setters, renamed);\r\n    renamed \u003d _findExplicitNames(_ctorParameters, renamed);\r\n    return (renamed \u003d\u003d null) ? Collections.emptySet() : renamed;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r8 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  $r1 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  r5 \u003d r0._findExplicitNames($r1, null)\n  $r2 \u003d POJOPropertyBuilder$Linked _getters\u003e\n  r6 \u003d r0._findExplicitNames($r2, r5)\n  $r3 \u003d POJOPropertyBuilder$Linked _setters\u003e\n  r7 \u003d r0._findExplicitNames($r3, r6)\n  $r4 \u003d POJOPropertyBuilder$Linked _ctorParameters\u003e\n  r8 \u003d r0._findExplicitNames($r4, r7)\n  if (r8 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d Collections.emptySet()\n  goto B3\n}",
      "B2 {\n  $r9 \u003d r8\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertyBuilder#_findExplicitNames(...2)",
        "body": "{\r\n    for (; node !\u003d null; node \u003d node.next) {\r\n        /* 30-Mar-2014, tatu: Second check should not be needed, but seems like\r\n             *   removing it can cause nasty exceptions with certain version\r\n             *   combinations (2.4 databind, an older module).\r\n             *   So leaving it in for now until this is resolved\r\n             *   (or version beyond 2.4)\r\n             */\r\n        if (!node.isNameExplicit || node.name \u003d\u003d null) {\r\n            continue;\r\n        }\r\n        if (renamed \u003d\u003d null) {\r\n            renamed \u003d new HashSet\u003cPropertyName\u003e();\r\n        }\r\n        renamed.add(node.name);\r\n    }\r\n    return renamed;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "methodName": "hasExplicitName",
    "signature": "boolean hasExplicitName(com.fasterxml.jackson.databind.PropertyName)",
    "visibility": "public",
    "body": "{\r\n    return _hasExplicitName(_fields, name) || _hasExplicitName(_getters, name) || _hasExplicitName(_setters, name) || _hasExplicitName(_ctorParameters, name);\r\n}",
    "nodes": 7,
    "edges": 10,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B4",
      "B1 : If($z1 !\u003d 0) → B2 | else → B4",
      "B2 : If($z2 !\u003d 0) → B3 | else → B4",
      "B3 : If($z3 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  POJOPropertyBuilder\n  PropertyName\n  $r2 \u003d POJOPropertyBuilder$Linked _fields\u003e\n  $z0 \u003d r0._hasExplicitName($r2, r1)\n  if ($z0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $r3 \u003d POJOPropertyBuilder$Linked _getters\u003e\n  $z1 \u003d r0._hasExplicitName($r3, r1)\n  if ($z1 !\u003d 0) goto B2 else B4\n}",
      "B2 {\n  $r4 \u003d POJOPropertyBuilder$Linked _setters\u003e\n  $z2 \u003d r0._hasExplicitName($r4, r1)\n  if ($z2 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d POJOPropertyBuilder$Linked _ctorParameters\u003e\n  $z3 \u003d r0._hasExplicitName($r5, r1)\n  if ($z3 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $z4 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z4 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJOPropertyBuilder#_hasExplicitName(...2)",
        "body": "{\r\n    for (; node !\u003d null; node \u003d node.next) {\r\n        if (node.isNameExplicit \u0026\u0026 nameToMatch.equals(node.name)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.PotentialCreator",
    "methodName": "introspectParamNames",
    "signature": "com.fasterxml.jackson.databind.introspect.PotentialCreator introspectParamNames(com.fasterxml.jackson.databind.cfg.MapperConfig)",
    "visibility": "public",
    "body": "{\r\n    if (_implicitParamNames !\u003d null) {\r\n        return this;\r\n    }\r\n    final int paramCount \u003d _creator.getParameterCount();\r\n    if (paramCount \u003d\u003d 0) {\r\n        _implicitParamNames \u003d _explicitParamNames \u003d NO_NAMES;\r\n        return this;\r\n    }\r\n    _explicitParamNames \u003d new PropertyName[paramCount];\r\n    _implicitParamNames \u003d new PropertyName[paramCount];\r\n    final AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\r\n    for (int i \u003d 0; i \u003c paramCount; ++i) {\r\n        AnnotatedParameter param \u003d _creator.getParameter(i);\r\n        String rawImplName \u003d intr.findImplicitPropertyName(param);\r\n        if (rawImplName !\u003d null \u0026\u0026 !rawImplName.isEmpty()) {\r\n            _implicitParamNames[i] \u003d PropertyName.construct(rawImplName);\r\n        }\r\n        PropertyName explName \u003d intr.findNameForDeserialization(param);\r\n        if (explName !\u003d null \u0026\u0026 !explName.isEmpty()) {\r\n            _explicitParamNames[i] \u003d explName;\r\n        }\r\n    }\r\n    return this;\r\n}",
    "nodes": 14,
    "edges": 18,
    "cc": 6,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i1 \u003e\u003d i0) → B6 | else → B13",
      "B6 : If(r9 \u003d\u003d null) → B7 | else → B9",
      "B7 : If($z1 !\u003d 0) → B8 | else → B9",
      "B9 : If($r14 \u003d\u003d null) → B10 | else → B12",
      "B10 : If($z0 !\u003d 0) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  PotentialCreator\n  MapperConfig\n  $r1 \u003d PropertyName[] _implicitParamNames\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d AnnotatedWithParams _creator\u003e\n  i0 \u003d $r2.getParameterCount()\n  if (i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r13 \u003d PropertyName[] NO_NAMES\u003e\n  PropertyName[] _explicitParamNames\u003e \u003d $r13\n  PropertyName[] _implicitParamNames\u003e \u003d $r13\n  return\n}",
      "B4 {\n  $r3 \u003d PropertyName)[i0]\n  PropertyName[] _explicitParamNames\u003e \u003d $r3\n  $r4 \u003d PropertyName)[i0]\n  PropertyName[] _implicitParamNames\u003e \u003d $r4\n  r6 \u003d r5.getAnnotationIntrospector()\n  i1 \u003d 0\n}",
      "B5 {\n  if (i1 \u003e\u003d i0) goto B6 else B13\n}",
      "B6 {\n  $r7 \u003d AnnotatedWithParams _creator\u003e\n  r8 \u003d $r7.getParameter(i1)\n  r9 \u003d r6.findImplicitPropertyName(r8)\n  if (r9 \u003d\u003d null) goto B7 else B9\n}",
      "B7 {\n  $z1 \u003d r9.isEmpty()\n  if ($z1 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  $r11 \u003d PropertyName[] _implicitParamNames\u003e\n  $r12 \u003d PropertyName.construct(r9)\n  $r11[i1] \u003d $r12\n}",
      "B9 {\n  $r14 \u003d r6.findNameForDeserialization(r8)\n  if ($r14 \u003d\u003d null) goto B10 else B12\n}",
      "B10 {\n  $z0 \u003d $r14.isEmpty()\n  if ($z0 !\u003d 0) goto B11 else B12\n}",
      "B11 {\n  $r10 \u003d PropertyName[] _explicitParamNames\u003e\n  $r10[i1] \u003d $r14\n}",
      "B12 {\n  i1 \u003d i1 + 1\n  goto B5\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B13",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B5",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.PotentialCreator",
    "methodName": "introspectParamNames",
    "signature": "com.fasterxml.jackson.databind.introspect.PotentialCreator introspectParamNames(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.PropertyName[])",
    "visibility": "public",
    "body": "{\r\n    if (_implicitParamNames !\u003d null) {\r\n        return this;\r\n    }\r\n    final int paramCount \u003d _creator.getParameterCount();\r\n    if (paramCount \u003d\u003d 0) {\r\n        _implicitParamNames \u003d _explicitParamNames \u003d NO_NAMES;\r\n        return this;\r\n    }\r\n    _explicitParamNames \u003d new PropertyName[paramCount];\r\n    _implicitParamNames \u003d implicits;\r\n    final AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\r\n    for (int i \u003d 0; i \u003c paramCount; ++i) {\r\n        AnnotatedParameter param \u003d _creator.getParameter(i);\r\n        PropertyName explName \u003d intr.findNameForDeserialization(param);\r\n        if (explName !\u003d null \u0026\u0026 !explName.isEmpty()) {\r\n            _explicitParamNames[i] \u003d explName;\r\n        }\r\n    }\r\n    return this;\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i1 \u003e\u003d i0) → B6 | else → B10",
      "B6 : If(r9 \u003d\u003d null) → B7 | else → B9",
      "B7 : If($z0 !\u003d 0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  PotentialCreator\n  MapperConfig\n  PropertyName[]\n  $r1 \u003d PropertyName[] _implicitParamNames\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d AnnotatedWithParams _creator\u003e\n  i0 \u003d $r2.getParameterCount()\n  if (i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r11 \u003d PropertyName[] NO_NAMES\u003e\n  PropertyName[] _explicitParamNames\u003e \u003d $r11\n  PropertyName[] _implicitParamNames\u003e \u003d $r11\n  return\n}",
      "B4 {\n  $r3 \u003d PropertyName)[i0]\n  PropertyName[] _explicitParamNames\u003e \u003d $r3\n  PropertyName[] _implicitParamNames\u003e \u003d r4\n  r6 \u003d r5.getAnnotationIntrospector()\n  i1 \u003d 0\n}",
      "B5 {\n  if (i1 \u003e\u003d i0) goto B6 else B10\n}",
      "B6 {\n  $r7 \u003d AnnotatedWithParams _creator\u003e\n  r8 \u003d $r7.getParameter(i1)\n  r9 \u003d r6.findNameForDeserialization(r8)\n  if (r9 \u003d\u003d null) goto B7 else B9\n}",
      "B7 {\n  $z0 \u003d r9.isEmpty()\n  if ($z0 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  $r10 \u003d PropertyName[] _explicitParamNames\u003e\n  $r10[i1] \u003d r9\n}",
      "B9 {\n  i1 \u003d i1 + 1\n  goto B5\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B5",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.PotentialCreator",
    "methodName": "creatorModeOrDefault",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonCreator$Mode creatorModeOrDefault()",
    "visibility": "public",
    "body": "{\r\n    if (_creatorMode \u003d\u003d null) {\r\n        return JsonCreator.Mode.DEFAULT;\r\n    }\r\n    return _creatorMode;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PotentialCreator\n  $r1 \u003d JsonCreator$Mode _creatorMode\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d JsonCreator$Mode DEFAULT\u003e\n  return\n}",
      "B2 {\n  $r2 \u003d JsonCreator$Mode _creatorMode\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.PotentialCreator",
    "methodName": "hasExplicitNames",
    "signature": "boolean hasExplicitNames()",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d 0, end \u003d _explicitParamNames.length; i \u003c end; ++i) {\r\n        if (_explicitParamNames[i] !\u003d null) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B5",
      "B2 : If($r3 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  PotentialCreator\n  i1 \u003d 0\n  $r1 \u003d PropertyName[] _explicitParamNames\u003e\n  i0 \u003d lengthof $r1\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d PropertyName[] _explicitParamNames\u003e\n  $r3 \u003d $r2[i1]\n  if ($r3 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.PotentialCreator",
    "methodName": "hasNameFor",
    "signature": "boolean hasNameFor(int)",
    "visibility": "public",
    "body": "{\r\n    return (_explicitParamNames[ix] !\u003d null) || (_implicitParamNames[ix] !\u003d null);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B2",
      "B1 : If($r4 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  PotentialCreator\n  i0 :\u003d @parameter0: int\n  $r1 \u003d PropertyName[] _explicitParamNames\u003e\n  $r2 \u003d $r1[i0]\n  if ($r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d PropertyName[] _implicitParamNames\u003e\n  $r4 \u003d $r3[i0]\n  if ($r4 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.PotentialCreator",
    "methodName": "hasNameOrInjectForAllParams",
    "signature": "boolean hasNameOrInjectForAllParams(com.fasterxml.jackson.databind.cfg.MapperConfig)",
    "visibility": "public",
    "body": "{\r\n    final AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\r\n    for (int i \u003d 0, end \u003d _implicitParamNames.length; i \u003c end; ++i) {\r\n        if (!hasNameFor(i)) {\r\n            if (intr \u003d\u003d null || intr.findInjectableValue(_creator.getParameter(i)) \u003d\u003d null) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B7",
      "B2 : If($z0 !\u003d 0) → B3 | else → B6",
      "B3 : If(r1 \u003d\u003d null) → B4 | else → B5",
      "B4 : If($r6 !\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  PotentialCreator\n  MapperConfig\n  r1 \u003d r0.getAnnotationIntrospector()\n  i1 \u003d 0\n  $r3 \u003d PropertyName[] _implicitParamNames\u003e\n  i0 \u003d lengthof $r3\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B7\n}",
      "B2 {\n  $z0 \u003d r2.hasNameFor(i1)\n  if ($z0 !\u003d 0) goto B3 else B6\n}",
      "B3 {\n  if (r1 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d AnnotatedWithParams _creator\u003e\n  $r5 \u003d $r4.getParameter(i1)\n  $r6 \u003d r1.findInjectableValue($r5)\n  if ($r6 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B1",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PotentialCreator#hasNameFor(...1)",
        "body": "{\r\n    return (_explicitParamNames[ix] !\u003d null) || (_implicitParamNames[ix] !\u003d null);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.PotentialCreator",
    "methodName": "implicitNameSimple",
    "signature": "java.lang.String implicitNameSimple(int)",
    "visibility": "public",
    "body": "{\r\n    PropertyName pn \u003d _implicitParamNames[ix];\r\n    return (pn \u003d\u003d null) ? null : pn.getSimpleName();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PotentialCreator\n  i0 :\u003d @parameter0: int\n  $r1 \u003d PropertyName[] _implicitParamNames\u003e\n  r2 \u003d $r1[i0]\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d null\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r2.getSimpleName()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.PotentialCreator",
    "methodName": "propertyDefs",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition[] propertyDefs()",
    "visibility": "public",
    "body": "{\r\n    if (_propertyDefs \u003d\u003d null || _propertyDefs.isEmpty()) {\r\n        return new BeanPropertyDefinition[0];\r\n    }\r\n    return _propertyDefs.toArray(new BeanPropertyDefinition[_propertyDefs.size()]);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  PotentialCreator\n  $r1 \u003d List _propertyDefs\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d List _propertyDefs\u003e\n  $z0 \u003d $r3.isEmpty()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d BeanPropertyDefinition)[0]\n  return\n}",
      "B3 {\n  $r5 \u003d List _propertyDefs\u003e\n  $r4 \u003d List _propertyDefs\u003e\n  $i0 \u003d $r4.size()\n  $r6 \u003d BeanPropertyDefinition)[$i0]\n  $r7 \u003d $r5.toArray($r6)\n  $r8 \u003d BeanPropertyDefinition[]) $r7\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.PotentialCreators",
    "methodName": "setPropertiesBased",
    "signature": "void setPropertiesBased(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.PotentialCreator,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (propertiesBased !\u003d null) {\r\n        throw new IllegalArgumentException(String.format(\"Conflicting property-based creators: already had %s creator %s, encountered another: %s\", mode, propertiesBased.creator(), ctor.creator()));\r\n    }\r\n    propertiesBased \u003d ctor.introspectParamNames(config);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PotentialCreators\n  MapperConfig\n  PotentialCreator\n  String\n  $r1 \u003d PotentialCreator propertiesBased\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d IllegalArgumentException\n  $r6 \u003d Object)[3]\n  $r6[0] \u003d r7\n  $r8 \u003d PotentialCreator propertiesBased\u003e\n  $r9 \u003d $r8.creator()\n  $r6[1] \u003d $r9\n  $r10 \u003d r2.creator()\n  $r6[2] \u003d $r10\n  $r11 \u003d String.format(\"Conflicting property-based creators: already had %s creator %s, encountered another: %s\", $r6)\n  new IllegalArgumentException($r11)\n  throw $r5\n}",
      "B2 {\n  $r4 \u003d r2.introspectParamNames(r3)\n  PotentialCreator propertiesBased\u003e \u003d $r4\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.PotentialCreators",
    "methodName": "addExplicitDelegating",
    "signature": "void addExplicitDelegating(com.fasterxml.jackson.databind.introspect.PotentialCreator)",
    "visibility": "public",
    "body": "{\r\n    if (explicitDelegating \u003d\u003d null) {\r\n        explicitDelegating \u003d new ArrayList\u003c\u003e();\r\n    }\r\n    explicitDelegating.add(ctor);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PotentialCreators\n  PotentialCreator\n  $r1 \u003d List explicitDelegating\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d ArrayList\n  new ArrayList()\n  List explicitDelegating\u003e \u003d $r4\n}",
      "B2 {\n  $r3 \u003d List explicitDelegating\u003e\n  $r3.add(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.PotentialCreators",
    "methodName": "hasDelegating",
    "signature": "boolean hasDelegating()",
    "visibility": "public",
    "body": "{\r\n    return (explicitDelegating !\u003d null) \u0026\u0026 !explicitDelegating.isEmpty();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  PotentialCreators\n  $r1 \u003d List explicitDelegating\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d List explicitDelegating\u003e\n  $z0 \u003d $r2.isEmpty()\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.PotentialCreators",
    "methodName": "hasPropertiesBased",
    "signature": "boolean hasPropertiesBased()",
    "visibility": "public",
    "body": "{\r\n    return (propertiesBased !\u003d null);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PotentialCreators\n  $r1 \u003d PotentialCreator propertiesBased\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.PotentialCreators",
    "methodName": "hasPropertiesBasedOrDelegating",
    "signature": "boolean hasPropertiesBasedOrDelegating()",
    "visibility": "public",
    "body": "{\r\n    return (propertiesBased !\u003d null) || (explicitDelegating !\u003d null \u0026\u0026 !explicitDelegating.isEmpty());\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B3",
      "B1 : If($r2 \u003d\u003d null) → B2 | else → B4",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  PotentialCreators\n  $r1 \u003d PotentialCreator propertiesBased\u003e\n  if ($r1 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d List explicitDelegating\u003e\n  if ($r2 \u003d\u003d null) goto B2 else B4\n}",
      "B2 {\n  $r3 \u003d List explicitDelegating\u003e\n  $z0 \u003d $r3.isEmpty()\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $z1 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z1 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.PotentialCreators",
    "methodName": "getExplicitDelegating",
    "signature": "java.util.List getExplicitDelegating()",
    "visibility": "public",
    "body": "{\r\n    return (explicitDelegating \u003d\u003d null) ? Collections.emptyList() : explicitDelegating;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PotentialCreators\n  $r1 \u003d List explicitDelegating\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Collections.emptyList()\n  goto B3\n}",
      "B2 {\n  $r2 \u003d List explicitDelegating\u003e\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.PotentialCreators",
    "methodName": "getImplicitDelegatingFactories",
    "signature": "java.util.List getImplicitDelegatingFactories()",
    "visibility": "public",
    "body": "{\r\n    return (implicitDelegatingFactories \u003d\u003d null) ? Collections.emptyList() : implicitDelegatingFactories;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PotentialCreators\n  $r1 \u003d List implicitDelegatingFactories\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Collections.emptyList()\n  goto B3\n}",
      "B2 {\n  $r2 \u003d List implicitDelegatingFactories\u003e\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.PotentialCreators",
    "methodName": "getImplicitDelegatingConstructors",
    "signature": "java.util.List getImplicitDelegatingConstructors()",
    "visibility": "public",
    "body": "{\r\n    return (implicitDelegatingConstructors \u003d\u003d null) ? Collections.emptyList() : implicitDelegatingConstructors;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PotentialCreators\n  $r1 \u003d List implicitDelegatingConstructors\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Collections.emptyList()\n  goto B3\n}",
      "B2 {\n  $r2 \u003d List implicitDelegatingConstructors\u003e\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "methodName": "setLocalDefinitions",
    "signature": "void setLocalDefinitions(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    if (sourceMixins \u003d\u003d null || sourceMixins.isEmpty()) {\r\n        _localMixIns \u003d null;\r\n    } else {\r\n        Map\u003cClassKey, Class\u003c?\u003e\u003e mixIns \u003d new HashMap\u003cClassKey, Class\u003c?\u003e\u003e(sourceMixins.size());\r\n        for (Map.Entry\u003cClass\u003c?\u003e, Class\u003c?\u003e\u003e en : sourceMixins.entrySet()) {\r\n            mixIns.put(new ClassKey(en.getKey()), en.getValue());\r\n        }\r\n        _localMixIns \u003d mixIns;\r\n    }\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  SimpleMixInResolver\n  Map\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  Map _localMixIns\u003e \u003d null\n  goto B7\n}",
      "B3 {\n  $r2 \u003d HashMap\n  $i0 \u003d r0.size()\n  new HashMap($i0)\n  $r3 \u003d r0.entrySet()\n  r4 \u003d $r3.iterator()\n}",
      "B4 {\n  $z1 \u003d r4.hasNext()\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r5 \u003d r4.next()\n  r6 \u003d Map$Entry) $r5\n  $r7 \u003d ClassKey\n  $r8 \u003d r6.getKey()\n  $r9 \u003d Class) $r8\n  new ClassKey($r9)\n  $r10 \u003d r6.getValue()\n  $r11 \u003d Class) $r10\n  $r2.put($r7, $r11)\n  goto B4\n}",
      "B6 {\n  Map _localMixIns\u003e \u003d $r2\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "methodName": "addLocalDefinition",
    "signature": "void addLocalDefinition(java.lang.Class,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (_localMixIns \u003d\u003d null) {\r\n        _localMixIns \u003d new HashMap\u003cClassKey, Class\u003c?\u003e\u003e();\r\n    }\r\n    _localMixIns.put(new ClassKey(target), mixinSource);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleMixInResolver\n  Class\n  Class\n  $r1 \u003d Map _localMixIns\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d HashMap\n  new HashMap()\n  Map _localMixIns\u003e \u003d $r6\n}",
      "B2 {\n  $r4 \u003d Map _localMixIns\u003e\n  $r2 \u003d ClassKey\n  new ClassKey(r3)\n  $r4.put($r2, r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "methodName": "copy",
    "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver copy()",
    "visibility": "public",
    "body": "{\r\n    ClassIntrospector.MixInResolver overrides \u003d (_overrides \u003d\u003d null) ? null : _overrides.copy();\r\n    Map\u003cClassKey, Class\u003c?\u003e\u003e mixIns \u003d (_localMixIns \u003d\u003d null) ? null : new HashMap\u003cClassKey, Class\u003c?\u003e\u003e(_localMixIns);\r\n    return new SimpleMixInResolver(overrides, mixIns);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B3 : If($r4 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  SimpleMixInResolver\n  $r1 \u003d ClassIntrospector$MixInResolver _overrides\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d ClassIntrospector$MixInResolver _overrides\u003e\n  $r7 \u003d $r2.copy()\n}",
      "B3 {\n  r3 \u003d $r7\n  $r4 \u003d Map _localMixIns\u003e\n  if ($r4 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r8 \u003d null\n  goto B6\n}",
      "B5 {\n  $r8 \u003d HashMap\n  $r5 \u003d Map _localMixIns\u003e\n  new HashMap($r5)\n}",
      "B6 {\n  $r6 \u003d SimpleMixInResolver\n  new SimpleMixInResolver(r3, $r8)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "methodName": "findMixInClassFor",
    "signature": "java.lang.Class findMixInClassFor(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    Class\u003c?\u003e mixin \u003d (_overrides \u003d\u003d null) ? null : _overrides.findMixInClassFor(cls);\r\n    if (mixin \u003d\u003d null \u0026\u0026 (_localMixIns !\u003d null)) {\r\n        mixin \u003d _localMixIns.get(new ClassKey(cls));\r\n    }\r\n    return mixin;\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B3 : If($r8 !\u003d null) → B4 | else → B6",
      "B4 : If($r4 \u003d\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  SimpleMixInResolver\n  Class\n  $r1 \u003d ClassIntrospector$MixInResolver _overrides\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d null\n  goto B3\n}",
      "B2 {\n  $r3 \u003d ClassIntrospector$MixInResolver _overrides\u003e\n  $r8 \u003d $r3.findMixInClassFor(r2)\n}",
      "B3 {\n  r9 \u003d $r8\n  if ($r8 !\u003d null) goto B4 else B6\n}",
      "B4 {\n  $r4 \u003d Map _localMixIns\u003e\n  if ($r4 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r6 \u003d Map _localMixIns\u003e\n  $r5 \u003d ClassKey\n  new ClassKey(r2)\n  $r7 \u003d $r6.get($r5)\n  r9 \u003d Class) $r7\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "methodName": "localSize",
    "signature": "int localSize()",
    "visibility": "public",
    "body": "{\r\n    return (_localMixIns \u003d\u003d null) ? 0 : _localMixIns.size();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleMixInResolver\n  $r1 \u003d Map _localMixIns\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d 0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Map _localMixIns\u003e\n  $i0 \u003d $r2.size()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "methodName": "hasMixIns",
    "signature": "boolean hasMixIns()",
    "visibility": "public",
    "body": "{\r\n    if (_localMixIns \u003d\u003d null) {\r\n        // if neither local mix-ins nor overrides, no mix-ins\r\n        if (_overrides \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        // or, if no local mix-ins and can delegate to resolver\r\n        if (_overrides instanceof SimpleMixInResolver) {\r\n            return ((SimpleMixInResolver) _overrides).hasMixIns();\r\n        }\r\n    }\r\n    // cannot rule out the possibility, so...\r\n    return true;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B5",
      "B1 : If($r2 !\u003d null) → B2 | else → B3",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  SimpleMixInResolver\n  $r1 \u003d Map _localMixIns\u003e\n  if ($r1 !\u003d null) goto B1 else B5\n}",
      "B1 {\n  $r2 \u003d ClassIntrospector$MixInResolver _overrides\u003e\n  if ($r2 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r3 \u003d ClassIntrospector$MixInResolver _overrides\u003e\n  $z0 \u003d SimpleMixInResolver\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d ClassIntrospector$MixInResolver _overrides\u003e\n  $r5 \u003d SimpleMixInResolver) $r4\n  $z1 \u003d $r5.hasMixIns()\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (!ClassUtil.hasClass(o, getClass())) {\r\n        return false;\r\n    }\r\n    VirtualAnnotatedMember other \u003d (VirtualAnnotatedMember) o;\r\n    return (other._declaringClass \u003d\u003d _declaringClass) \u0026\u0026 other._name.equals(_name);\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($r5 !\u003d $r4) → B5 | else → B7",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  VirtualAnnotatedMember\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d r1.getClass()\n  $z0 \u003d ClassUtil.hasClass(r0, $r2)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r3 \u003d VirtualAnnotatedMember) r0\n  $r5 \u003d Class _declaringClass\u003e\n  $r4 \u003d Class _declaringClass\u003e\n  if ($r5 !\u003d $r4) goto B5 else B7\n}",
      "B5 {\n  $r7 \u003d String _name\u003e\n  $r6 \u003d String _name\u003e\n  $z1 \u003d $r7.equals($r6)\n  if ($z1 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $z2 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z2 \u003d 0\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "VirtualAnnotatedMember#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jdk14.JDK14Util",
    "methodName": "findCanonicalRecordConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.PotentialCreator findCanonicalRecordConstructor(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass,java.util.List)",
    "visibility": "public",
    "body": "{\r\n    final RawTypeName[] recordFields \u003d RecordAccessor.instance().getRecordFields(recordClass.getRawType());\r\n    if (recordFields \u003d\u003d null) {\r\n        // not a record, or no reflective access on native image\r\n        return null;\r\n    }\r\n    // And then locate the canonical constructor\r\n    final int argCount \u003d recordFields.length;\r\n    // One special case: zero-arg constructor not included in candidate List\r\n    if (argCount \u003d\u003d 0) {\r\n        // Bit hacky but has to do: create new PotentialCreator let caller deal\r\n        AnnotatedConstructor defCtor \u003d recordClass.getDefaultConstructor();\r\n        if (defCtor !\u003d null) {\r\n            return new PotentialCreator(defCtor, null);\r\n        }\r\n    }\r\n    main_loop: for (PotentialCreator ctor : constructors) {\r\n        if (ctor.paramCount() !\u003d argCount) {\r\n            continue;\r\n        }\r\n        for (int i \u003d 0; i \u003c argCount; ++i) {\r\n            if (!ctor.creator().getRawParameterType(i).equals(recordFields[i].rawType)) {\r\n                continue main_loop;\r\n            }\r\n        }\r\n        // Found it! One more thing; get implicit Record field names:\r\n        final PropertyName[] implicits \u003d new PropertyName[argCount];\r\n        for (int i \u003d 0; i \u003c argCount; ++i) {\r\n            implicits[i] \u003d PropertyName.construct(recordFields[i].name);\r\n        }\r\n        return ctor.introspectParamNames(config, implicits);\r\n    }\r\n    throw new IllegalArgumentException(\"Failed to find the canonical Record constructor of type \" + ClassUtil.getTypeDescription(recordClass.getType()));\r\n}",
    "nodes": 19,
    "edges": 23,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 !\u003d 0) → B3 | else → B5",
      "B3 : If(r22 \u003d\u003d null) → B4 | else → B5",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B18",
      "B7 : If($i1 \u003d\u003d i0) → B8 | else → B9",
      "B10 : If(i2 \u003e\u003d i0) → B11 | else → B14",
      "B11 : If($z0 !\u003d 0) → B12 | else → B13",
      "B15 : If(i3 \u003e\u003d i0) → B16 | else → B17"
    ],
    "blockList": [
      "B0 {\n  MapperConfig\n  AnnotatedClass\n  List\n  $r2 \u003d JDK14Util$RecordAccessor.instance()\n  $r1 \u003d r0.getRawType()\n  r3 \u003d $r2.getRecordFields($r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d lengthof r3\n  if (i0 !\u003d 0) goto B3 else B5\n}",
      "B3 {\n  r22 \u003d r0.getDefaultConstructor()\n  if (r22 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r21 \u003d PotentialCreator\n  new PotentialCreator(r22, null)\n  return\n}",
      "B5 {\n  $r20 \u003d r4.iterator()\n}",
      "B6 {\n  $z1 \u003d $r20.hasNext()\n  if ($z1 \u003d\u003d false) goto B7 else B18\n}",
      "B7 {\n  $r9 \u003d $r20.next()\n  r10 \u003d PotentialCreator) $r9\n  $i1 \u003d r10.paramCount()\n  if ($i1 \u003d\u003d i0) goto B8 else B9\n}",
      "B8 {\n  goto B6\n}",
      "B9 {\n  i2 \u003d 0\n}",
      "B10 {\n  if (i2 \u003e\u003d i0) goto B11 else B14\n}",
      "B11 {\n  $r16 \u003d r10.creator()\n  $r19 \u003d $r16.getRawParameterType(i2)\n  $r17 \u003d r3[i2]\n  $r18 \u003d Class rawType\u003e\n  $z0 \u003d $r19.equals($r18)\n  if ($z0 !\u003d 0) goto B12 else B13\n}",
      "B12 {\n  goto B6\n}",
      "B13 {\n  i2 \u003d i2 + 1\n  goto B10\n}",
      "B14 {\n  r23 \u003d PropertyName)[i0]\n  i3 \u003d 0\n}",
      "B15 {\n  if (i3 \u003e\u003d i0) goto B16 else B17\n}",
      "B16 {\n  $r13 \u003d r3[i3]\n  $r14 \u003d String name\u003e\n  $r15 \u003d PropertyName.construct($r14)\n  r23[i3] \u003d $r15\n  i3 \u003d i3 + 1\n  goto B15\n}",
      "B17 {\n  $r12 \u003d r10.introspectParamNames(r11, r23)\n  return\n}",
      "B18 {\n  $r5 \u003d IllegalArgumentException\n  $r6 \u003d r0.getType()\n  $r7 \u003d ClassUtil.getTypeDescription($r6)\n  $r8 \u003d dynInvoke makeConcatWithConstants($r7)\n  new IllegalArgumentException($r8)\n  throw $r5\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B18",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B6",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B6",
      "B13 --\u003e B10",
      "B14 --\u003e B15",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B15",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.JsonMappingException",
    "methodName": "wrapWithPath",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException wrapWithPath(java.lang.Throwable,com.fasterxml.jackson.databind.JsonMappingException$Reference)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 10,
    "edges": 14,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r7 \u003d\u003d null) → B3 | else → B4",
      "B3 : If($z2 \u003d\u003d false) → B4 | else → B5",
      "B5 : If($z3 \u003d\u003d false) → B6 | else → B8",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  Throwable\n  JsonMappingException$Reference\n  $z0 \u003d JsonMappingException\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r6 \u003d JsonMappingException) r0\n  goto B9\n}",
      "B2 {\n  r7 \u003d ClassUtil.exceptionMessage(r0)\n  if (r7 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $z2 \u003d r7.isEmpty()\n  if ($z2 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r1 \u003d r0.getClass()\n  $r2 \u003d $r1.getName()\n  r7 \u003d dynInvoke makeConcatWithConstants($r2)\n}",
      "B5 {\n  r8 \u003d null\n  $z3 \u003d JacksonException\n  if ($z3 \u003d\u003d false) goto B6 else B8\n}",
      "B6 {\n  $r4 \u003d JacksonException) r0\n  r5 \u003d $r4.getProcessor()\n  $z1 \u003d Closeable\n  if ($z1 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  r8 \u003d Closeable) r5\n}",
      "B8 {\n  $r9 \u003d JsonMappingException\n  new JsonMappingException(r8, r7, r0)\n  r6 \u003d $r9\n}",
      "B9 {\n  r6.prependPath(r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B9",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.JsonMappingException",
    "methodName": "getPath",
    "signature": "java.util.List getPath()",
    "visibility": "public",
    "body": "{\r\n    if (_path \u003d\u003d null) {\r\n        return Collections.emptyList();\r\n    }\r\n    return Collections.unmodifiableList(_path);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JsonMappingException\n  $r1 \u003d LinkedList _path\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d Collections.emptyList()\n  return\n}",
      "B2 {\n  $r2 \u003d LinkedList _path\u003e\n  $r3 \u003d Collections.unmodifiableList($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.JsonMappingException",
    "methodName": "prependPath",
    "signature": "void prependPath(com.fasterxml.jackson.databind.JsonMappingException$Reference)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 \u003e\u003d 1000) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  JsonMappingException\n  JsonMappingException$Reference\n  $r1 \u003d LinkedList _path\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d LinkedList\n  new LinkedList()\n  LinkedList _path\u003e \u003d $r5\n}",
      "B2 {\n  $r2 \u003d LinkedList _path\u003e\n  $i0 \u003d $r2.size()\n  if ($i0 \u003e\u003d 1000) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d LinkedList _path\u003e\n  $r4.addFirst(r3)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsonschema.JsonSchema",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    if (!(o instanceof JsonSchema))\r\n        return false;\r\n    JsonSchema other \u003d (JsonSchema) o;\r\n    if (schema \u003d\u003d null) {\r\n        return other.schema \u003d\u003d null;\r\n    }\r\n    return schema.equals(other.schema);\r\n}",
    "nodes": 12,
    "edges": 12,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($z0 !\u003d 0) → B5 | else → B6",
      "B6 : If($r3 !\u003d null) → B7 | else → B11",
      "B7 : If($r6 !\u003d null) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  JsonSchema\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z0 \u003d JsonSchema\n  if ($z0 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  r2 \u003d JsonSchema) r0\n  $r3 \u003d ObjectNode schema\u003e\n  if ($r3 !\u003d null) goto B7 else B11\n}",
      "B7 {\n  $r6 \u003d ObjectNode schema\u003e\n  if ($r6 !\u003d null) goto B8 else B9\n}",
      "B8 {\n  $z2 \u003d 1\n  goto B10\n}",
      "B9 {\n  $z2 \u003d 0\n}",
      "B10 {\n  return\n}",
      "B11 {\n  $r5 \u003d ObjectNode schema\u003e\n  $r4 \u003d ObjectNode schema\u003e\n  $z1 \u003d $r5.equals($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator",
    "methodName": "validateBaseType",
    "signature": "com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity validateBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    //System.err.println(\"validateBaseType(\"+baseType+\")\");\r\n    final Class\u003c?\u003e rawBase \u003d baseType.getRawClass();\r\n    if (_invalidBaseTypes !\u003d null) {\r\n        if (_invalidBaseTypes.contains(rawBase)) {\r\n            return Validity.DENIED;\r\n        }\r\n    }\r\n    if (_baseTypeMatchers !\u003d null) {\r\n        for (TypeMatcher m : _baseTypeMatchers) {\r\n            if (m.match(ctxt, rawBase)) {\r\n                return Validity.ALLOWED;\r\n            }\r\n        }\r\n    }\r\n    return Validity.INDETERMINATE;\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r3 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B3 : If($r4 \u003d\u003d null) → B4 | else → B9",
      "B5 : If(i1 \u003e\u003d i0) → B6 | else → B9",
      "B6 : If($z0 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  BasicPolymorphicTypeValidator\n  MapperConfig\n  JavaType\n  r1 \u003d r0.getRawClass()\n  $r3 \u003d Set _invalidBaseTypes\u003e\n  if ($r3 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r10 \u003d Set _invalidBaseTypes\u003e\n  $z1 \u003d $r10.contains(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r11 \u003d PolymorphicTypeValidator$Validity DENIED\u003e\n  return\n}",
      "B3 {\n  $r4 \u003d BasicPolymorphicTypeValidator$TypeMatcher[] _baseTypeMatchers\u003e\n  if ($r4 \u003d\u003d null) goto B4 else B9\n}",
      "B4 {\n  r6 \u003d BasicPolymorphicTypeValidator$TypeMatcher[] _baseTypeMatchers\u003e\n  i0 \u003d lengthof r6\n  i1 \u003d 0\n}",
      "B5 {\n  if (i1 \u003e\u003d i0) goto B6 else B9\n}",
      "B6 {\n  r7 \u003d r6[i1]\n  $z0 \u003d r7.match(r8, r1)\n  if ($z0 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $r9 \u003d PolymorphicTypeValidator$Validity ALLOWED\u003e\n  return\n}",
      "B8 {\n  i1 \u003d i1 + 1\n  goto B5\n}",
      "B9 {\n  $r5 \u003d PolymorphicTypeValidator$Validity INDETERMINATE\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B5",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator",
    "methodName": "validateSubClassName",
    "signature": "com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity validateSubClassName(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    //System.err.println(\"validateSubClassName(\u0027\"+subClassName+\"\u0027)\");\r\n    if (_subTypeNameMatchers !\u003d null) {\r\n        for (NameMatcher m : _subTypeNameMatchers) {\r\n            if (m.match(ctxt, subClassName)) {\r\n                return Validity.ALLOWED;\r\n            }\r\n        }\r\n    }\r\n    // could not yet decide, so:\r\n    return Validity.INDETERMINATE;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B6",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B6",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  BasicPolymorphicTypeValidator\n  MapperConfig\n  JavaType\n  String\n  $r1 \u003d BasicPolymorphicTypeValidator$NameMatcher[] _subTypeNameMatchers\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  r3 \u003d BasicPolymorphicTypeValidator$NameMatcher[] _subTypeNameMatchers\u003e\n  i0 \u003d lengthof r3\n  i1 \u003d 0\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B6\n}",
      "B3 {\n  r4 \u003d r3[i1]\n  $z0 \u003d r4.match(r5, r6)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r7 \u003d PolymorphicTypeValidator$Validity ALLOWED\u003e\n  return\n}",
      "B5 {\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B6 {\n  $r2 \u003d PolymorphicTypeValidator$Validity INDETERMINATE\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator",
    "methodName": "validateSubType",
    "signature": "com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity validateSubType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    //System.err.println(\"validateSubType(\"+subType+\")\");\r\n    if (_subClassMatchers !\u003d null) {\r\n        final Class\u003c?\u003e subClass \u003d subType.getRawClass();\r\n        for (TypeMatcher m : _subClassMatchers) {\r\n            if (m.match(ctxt, subClass)) {\r\n                return Validity.ALLOWED;\r\n            }\r\n        }\r\n    }\r\n    // could not decide, callers gets to decide; usually will deny\r\n    return Validity.INDETERMINATE;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B6",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B6",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  BasicPolymorphicTypeValidator\n  MapperConfig\n  JavaType\n  JavaType\n  $r1 \u003d BasicPolymorphicTypeValidator$TypeMatcher[] _subClassMatchers\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  r4 \u003d r3.getRawClass()\n  r5 \u003d BasicPolymorphicTypeValidator$TypeMatcher[] _subClassMatchers\u003e\n  i0 \u003d lengthof r5\n  i1 \u003d 0\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B6\n}",
      "B3 {\n  r6 \u003d r5[i1]\n  $z0 \u003d r6.match(r7, r4)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r8 \u003d PolymorphicTypeValidator$Validity ALLOWED\u003e\n  return\n}",
      "B5 {\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B6 {\n  $r2 \u003d PolymorphicTypeValidator$Validity INDETERMINATE\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator",
    "methodName": "validateBaseType",
    "signature": "com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity validateBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    // Immediately block potentially unsafe base types\r\n    if (isUnsafeBaseType(config, baseType)) {\r\n        return Validity.DENIED;\r\n    }\r\n    // otherwise indicate that type may be ok (so further calls are made --\r\n    // does not matter with base implementation but allows easier sub-classing)\r\n    return Validity.INDETERMINATE;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DefaultBaseTypeLimitingValidator\n  MapperConfig\n  JavaType\n  $z0 \u003d r0.isUnsafeBaseType(r1, r2)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d PolymorphicTypeValidator$Validity DENIED\u003e\n  return\n}",
      "B2 {\n  $r3 \u003d PolymorphicTypeValidator$Validity INDETERMINATE\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DefaultBaseTypeLimitingValidator#isUnsafeBaseType(...2)",
        "body": "{\r\n    return UnsafeBaseTypes.instance.isUnsafeBaseType(baseType.getRawClass());\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator",
    "methodName": "validateSubType",
    "signature": "com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity validateSubType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    return isSafeSubType(config, baseType, subType) ? Validity.ALLOWED : Validity.DENIED;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DefaultBaseTypeLimitingValidator\n  MapperConfig\n  JavaType\n  JavaType\n  $z0 \u003d r0.isSafeSubType(r1, r2, r3)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d PolymorphicTypeValidator$Validity ALLOWED\u003e\n  goto B3\n}",
      "B2 {\n  $r4 \u003d PolymorphicTypeValidator$Validity DENIED\u003e\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DefaultBaseTypeLimitingValidator#isSafeSubType(...3)",
        "body": "{\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer",
    "methodName": "forProperty",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer forProperty(com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    // usually if it\u0027s null:\r\n    return (prop \u003d\u003d _property) ? this : new AsArrayTypeDeserializer(this, prop);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AsArrayTypeDeserializer\n  BeanProperty\n  $r2 \u003d BeanProperty _property\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r3 \u003d AsArrayTypeDeserializer\n  new AsArrayTypeDeserializer(r1, r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer",
    "methodName": "forProperty",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    return (_property \u003d\u003d prop) ? this : new AsArrayTypeSerializer(_idResolver, prop);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AsArrayTypeSerializer\n  BeanProperty\n  $r2 \u003d BeanProperty _property\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r4 \u003d AsArrayTypeSerializer\n  $r3 \u003d TypeIdResolver _idResolver\u003e\n  new AsArrayTypeSerializer($r3, r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.AsDeductionTypeDeserializer",
    "methodName": "forProperty",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer forProperty(com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    return (prop \u003d\u003d _property) ? this : new AsDeductionTypeDeserializer(this, prop);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AsDeductionTypeDeserializer\n  BeanProperty\n  $r2 \u003d BeanProperty _property\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r3 \u003d AsDeductionTypeDeserializer\n  new AsDeductionTypeDeserializer(r1, r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.AsDeductionTypeDeserializer",
    "methodName": "deserializeTypedFromObject",
    "signature": "java.lang.Object deserializeTypedFromObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    JsonToken t \u003d p.currentToken();\r\n    if (t \u003d\u003d JsonToken.START_OBJECT) {\r\n        t \u003d p.nextToken();\r\n    } else if (/*t \u003d\u003d JsonToken.START_ARRAY ||*/\r\n    t !\u003d JsonToken.FIELD_NAME) {\r\n        /* This is most likely due to the fact that not all Java types are\r\n             * serialized as JSON Objects; so if \"as-property\" inclusion is requested,\r\n             * serialization of things like Lists must be instead handled as if\r\n             * \"as-wrapper-array\" was requested.\r\n             * But this can also be due to some custom handling: so, if \"defaultImpl\"\r\n             * is defined, it will be asked to handle this case.\r\n             */\r\n        return _deserializeTypedUsingDefaultImpl(p, ctxt, null, \"Unexpected input\");\r\n    }\r\n    // 03-May-2021, tatu: [databind#3139] Special case, \"empty\" Object\r\n    if (t \u003d\u003d JsonToken.END_OBJECT) {\r\n        String emptySubtype \u003d subtypeFingerprints.get(EMPTY_CLASS_FINGERPRINT);\r\n        if (emptySubtype !\u003d null) {\r\n            // ... and an \"empty\" subtype registered\r\n            return _deserializeTypedForId(p, ctxt, null, emptySubtype);\r\n        }\r\n    }\r\n    List\u003cBitSet\u003e candidates \u003d new LinkedList\u003c\u003e(subtypeFingerprints.keySet());\r\n    // Keep track of processed tokens as we must rewind once after deducing\r\n    // the deserializer to use\r\n    @SuppressWarnings(\"resource\")\r\n    final TokenBuffer tb \u003d ctxt.bufferForInputBuffering(p);\r\n    boolean ignoreCase \u003d ctxt.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);\r\n    for (; t \u003d\u003d JsonToken.FIELD_NAME; t \u003d p.nextToken()) {\r\n        String name \u003d p.currentName();\r\n        if (ignoreCase)\r\n            name \u003d name.toLowerCase();\r\n        tb.copyCurrentStructure(p);\r\n        Integer bit \u003d fieldBitIndex.get(name);\r\n        if (bit !\u003d null) {\r\n            // field is known by at least one subtype\r\n            prune(candidates, bit);\r\n            if (candidates.size() \u003d\u003d 1) {\r\n                return _deserializeTypedForId(p, ctxt, tb, subtypeFingerprints.get(candidates.get(0)));\r\n            }\r\n        }\r\n    }\r\n    // We have zero or multiple candidates, deduction has failed\r\n    String msgToReportIfDefaultImplFailsToo \u003d String.format(\"Cannot deduce unique subtype of %s (%d candidates match)\", ClassUtil.getTypeDescription(_baseType), candidates.size());\r\n    return _deserializeTypedUsingDefaultImpl(p, ctxt, tb, msgToReportIfDefaultImplFailsToo);\r\n}",
    "nodes": 16,
    "edges": 20,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r29 !\u003d $r1) → B1 | else → B2",
      "B2 : If(r29 \u003d\u003d $r2) → B3 | else → B4",
      "B4 : If(r29 !\u003d $r3) → B5 | else → B7",
      "B5 : If(r30 \u003d\u003d null) → B6 | else → B7",
      "B8 : If(r29 !\u003d $r31) → B9 | else → B15",
      "B9 : If($z0 \u003d\u003d false) → B10 | else → B11",
      "B11 : If($r22 \u003d\u003d null) → B12 | else → B14",
      "B12 : If($i2 !\u003d 1) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  AsDeductionTypeDeserializer\n  JsonParser\n  DeserializationContext\n  r29 \u003d r0.currentToken()\n  $r1 \u003d JsonToken START_OBJECT\u003e\n  if (r29 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  r29 \u003d r0.nextToken()\n  goto B4\n}",
      "B2 {\n  $r2 \u003d JsonToken FIELD_NAME\u003e\n  if (r29 \u003d\u003d $r2) goto B3 else B4\n}",
      "B3 {\n  $r28 \u003d r5._deserializeTypedUsingDefaultImpl(r0, r8, null, \"Unexpected input\")\n  return\n}",
      "B4 {\n  $r3 \u003d JsonToken END_OBJECT\u003e\n  if (r29 !\u003d $r3) goto B5 else B7\n}",
      "B5 {\n  $r24 \u003d Map subtypeFingerprints\u003e\n  $r23 \u003d BitSet EMPTY_CLASS_FINGERPRINT\u003e\n  $r25 \u003d $r24.get($r23)\n  r30 \u003d String) $r25\n  if (r30 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r27 \u003d r5._deserializeTypedForId(r0, r8, null, r30)\n  return\n}",
      "B7 {\n  $r4 \u003d LinkedList\n  $r6 \u003d Map subtypeFingerprints\u003e\n  $r7 \u003d $r6.keySet()\n  new LinkedList($r7)\n  $r26 \u003d r8.bufferForInputBuffering(r0)\n  $r9 \u003d MapperFeature ACCEPT_CASE_INSENSITIVE_PROPERTIES\u003e\n  $z0 \u003d r8.isEnabled($r9)\n}",
      "B8 {\n  $r31 \u003d JsonToken FIELD_NAME\u003e\n  if (r29 !\u003d $r31) goto B9 else B15\n}",
      "B9 {\n  r32 \u003d r0.currentName()\n  if ($z0 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  r32 \u003d r32.toLowerCase()\n}",
      "B11 {\n  $r26.copyCurrentStructure(r0)\n  $r15 \u003d Map fieldBitIndex\u003e\n  $r16 \u003d $r15.get(r32)\n  $r22 \u003d Integer) $r16\n  if ($r22 \u003d\u003d null) goto B12 else B14\n}",
      "B12 {\n  $i1 \u003d $r22.intValue()\n  AsDeductionTypeDeserializer.prune($r4, $i1)\n  $i2 \u003d $r4.size()\n  if ($i2 !\u003d 1) goto B13 else B14\n}",
      "B13 {\n  $r17 \u003d Map subtypeFingerprints\u003e\n  $r18 \u003d $r4.get(0)\n  $r19 \u003d $r17.get($r18)\n  $r20 \u003d String) $r19\n  $r21 \u003d r5._deserializeTypedForId(r0, r8, $r26, $r20)\n  return\n}",
      "B14 {\n  r29 \u003d r0.nextToken()\n  goto B8\n}",
      "B15 {\n  $r10 \u003d Object)[2]\n  $r11 \u003d JavaType _baseType\u003e\n  $r12 \u003d ClassUtil.getTypeDescription($r11)\n  $r10[0] \u003d $r12\n  $i0 \u003d $r4.size()\n  $r13 \u003d Integer.valueOf($i0)\n  $r10[1] \u003d $r13\n  r33 \u003d String.format(\"Cannot deduce unique subtype of %s (%d candidates match)\", $r10)\n  $r14 \u003d r5._deserializeTypedUsingDefaultImpl(r0, r8, $r26, r33)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B15",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B14",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B8",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AsDeductionTypeDeserializer#_deserializeTypedUsingDefaultImpl(...4)",
        "body": "(source not found)"
      },
      {
        "name": "AsDeductionTypeDeserializer#prune(...2)",
        "body": "{\r\n    for (Iterator\u003cBitSet\u003e iter \u003d candidates.iterator(); iter.hasNext(); ) {\r\n        if (!iter.next().get(bit)) {\r\n            iter.remove();\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "AsDeductionTypeDeserializer#_deserializeTypedForId(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.AsDeductionTypeSerializer",
    "methodName": "writeTypePrefix",
    "signature": "com.fasterxml.jackson.core.type.WritableTypeId writeTypePrefix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)",
    "visibility": "public",
    "body": "{\r\n    // NOTE: We can NOT simply skip writing since we may have to\r\n    // write surrounding Object or Array start/end markers. But\r\n    // we are not to generate type id to write (compared to base class)\r\n    if (idMetadata.valueShape.isStructStart()) {\r\n        // 03-May-2023, tatu: [databind#3914]: should not write Native Type Id;\r\n        //   but may need to write the value start marker\r\n        if (g.canWriteTypeId()) {\r\n            idMetadata.wrapperWritten \u003d false;\r\n            if (idMetadata.valueShape \u003d\u003d JsonToken.START_OBJECT) {\r\n                g.writeStartObject(idMetadata.forValue);\r\n            } else if (idMetadata.valueShape \u003d\u003d JsonToken.START_ARRAY) {\r\n                g.writeStartArray(idMetadata.forValue);\r\n            }\r\n            return idMetadata;\r\n        }\r\n        // But for non-wrapper types can just use the default handling\r\n        return g.writeTypePrefix(idMetadata);\r\n    }\r\n    return null;\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B8",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B7",
      "B2 : If($r5 !\u003d $r4) → B3 | else → B4",
      "B4 : If($r7 !\u003d $r6) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  AsDeductionTypeSerializer\n  JsonGenerator\n  WritableTypeId\n  $r1 \u003d JsonToken valueShape\u003e\n  $z0 \u003d $r1.isStructStart()\n  if ($z0 \u003d\u003d false) goto B1 else B8\n}",
      "B1 {\n  $z1 \u003d r2.canWriteTypeId()\n  if ($z1 \u003d\u003d false) goto B2 else B7\n}",
      "B2 {\n  WritableTypeId: boolean wrapperWritten\u003e \u003d 0\n  $r5 \u003d JsonToken valueShape\u003e\n  $r4 \u003d JsonToken START_OBJECT\u003e\n  if ($r5 !\u003d $r4) goto B3 else B4\n}",
      "B3 {\n  $r9 \u003d Object forValue\u003e\n  r2.writeStartObject($r9)\n  goto B6\n}",
      "B4 {\n  $r7 \u003d JsonToken valueShape\u003e\n  $r6 \u003d JsonToken START_ARRAY\u003e\n  if ($r7 !\u003d $r6) goto B5 else B6\n}",
      "B5 {\n  $r8 \u003d Object forValue\u003e\n  r2.writeStartArray($r8)\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $r3 \u003d r2.writeTypePrefix(r0)\n  return\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B8",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.AsDeductionTypeSerializer",
    "methodName": "writeTypeSuffix",
    "signature": "com.fasterxml.jackson.core.type.WritableTypeId writeTypeSuffix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)",
    "visibility": "public",
    "body": "{\r\n    return (idMetadata \u003d\u003d null) ? null : g.writeTypeSuffix(idMetadata);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AsDeductionTypeSerializer\n  JsonGenerator\n  WritableTypeId\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d null\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r1.writeTypeSuffix(r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer",
    "methodName": "forProperty",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    return (_property \u003d\u003d prop) ? this : new AsExistingPropertyTypeSerializer(_idResolver, prop, _typePropertyName);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AsExistingPropertyTypeSerializer\n  BeanProperty\n  $r2 \u003d BeanProperty _property\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r5 \u003d AsExistingPropertyTypeSerializer\n  $r4 \u003d TypeIdResolver _idResolver\u003e\n  $r3 \u003d String _typePropertyName\u003e\n  new AsExistingPropertyTypeSerializer($r4, r1, $r3)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer",
    "methodName": "forProperty",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer forProperty(com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    if (prop \u003d\u003d _property) {\r\n        // usually if it\u0027s null\r\n        return this;\r\n    }\r\n    return new AsExternalTypeDeserializer(this, prop);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AsExternalTypeDeserializer\n  BeanProperty\n  $r2 \u003d BeanProperty _property\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d AsExternalTypeDeserializer\n  new AsExternalTypeDeserializer(r1, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer",
    "methodName": "forProperty",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    return (_property \u003d\u003d prop) ? this : new AsExternalTypeSerializer(_idResolver, prop, _typePropertyName);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AsExternalTypeSerializer\n  BeanProperty\n  $r2 \u003d BeanProperty _property\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r5 \u003d AsExternalTypeSerializer\n  $r4 \u003d TypeIdResolver _idResolver\u003e\n  $r3 \u003d String _typePropertyName\u003e\n  new AsExternalTypeSerializer($r4, r1, $r3)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer",
    "methodName": "forProperty",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer forProperty(com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    return (prop \u003d\u003d _property) ? this : new AsPropertyTypeDeserializer(this, prop);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AsPropertyTypeDeserializer\n  BeanProperty\n  $r2 \u003d BeanProperty _property\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r3 \u003d AsPropertyTypeDeserializer\n  new AsPropertyTypeDeserializer(r1, r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer",
    "methodName": "deserializeTypedFromObject",
    "signature": "java.lang.Object deserializeTypedFromObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    // 02-Aug-2013, tatu: May need to use native type ids\r\n    if (p.canReadTypeId()) {\r\n        Object typeId \u003d p.getTypeId();\r\n        if (typeId !\u003d null) {\r\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\r\n        }\r\n    }\r\n    // but first, sanity check to ensure we have START_OBJECT or FIELD_NAME\r\n    JsonToken t \u003d p.currentToken();\r\n    if (t \u003d\u003d JsonToken.START_OBJECT) {\r\n        t \u003d p.nextToken();\r\n    } else if (/*t \u003d\u003d JsonToken.START_ARRAY ||*/\r\n    t !\u003d JsonToken.FIELD_NAME) {\r\n        /* This is most likely due to the fact that not all Java types are\r\n             * serialized as JSON Objects; so if \"as-property\" inclusion is requested,\r\n             * serialization of things like Lists must be instead handled as if\r\n             * \"as-wrapper-array\" was requested.\r\n             * But this can also be due to some custom handling: so, if \"defaultImpl\"\r\n             * is defined, it will be asked to handle this case.\r\n             */\r\n        return _deserializeTypedUsingDefaultImpl(p, ctxt, null, _msgForMissingId);\r\n    }\r\n    // Ok, let\u0027s try to find the property. But first, need token buffer...\r\n    TokenBuffer tb \u003d null;\r\n    boolean ignoreCase \u003d ctxt.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);\r\n    for (; t \u003d\u003d JsonToken.FIELD_NAME; t \u003d p.nextToken()) {\r\n        final String name \u003d p.currentName();\r\n        // to point to the value\r\n        p.nextToken();\r\n        if (name.equals(_typePropertyName) || (ignoreCase \u0026\u0026 name.equalsIgnoreCase(_typePropertyName))) {\r\n            // gotcha!\r\n            // 09-Sep-2021, tatu: [databind#3271]: Avoid converting null to \"null\"\r\n            String typeId \u003d p.getValueAsString();\r\n            if (typeId !\u003d null) {\r\n                return _deserializeTypedForId(p, ctxt, tb, typeId);\r\n            }\r\n        }\r\n        if (tb \u003d\u003d null) {\r\n            tb \u003d ctxt.bufferForInputBuffering(p);\r\n        }\r\n        tb.writeFieldName(name);\r\n        tb.copyCurrentStructure(p);\r\n    }\r\n    return _deserializeTypedUsingDefaultImpl(p, ctxt, tb, _msgForMissingId);\r\n}",
    "nodes": 18,
    "edges": 24,
    "cc": 8,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If(r17 \u003d\u003d null) → B2 | else → B3",
      "B3 : If($r15 !\u003d $r1) → B4 | else → B5",
      "B5 : If($r15 \u003d\u003d $r2) → B6 | else → B7",
      "B8 : If(r18 !\u003d $r20) → B9 | else → B17",
      "B9 : If($z1 !\u003d 0) → B10 | else → B12",
      "B10 : If($z3 \u003d\u003d false) → B11 | else → B14",
      "B11 : If($z2 \u003d\u003d false) → B12 | else → B14",
      "B12 : If($r12 \u003d\u003d null) → B13 | else → B14",
      "B14 : If(r19 !\u003d null) → B15 | else → B16"
    ],
    "blockList": [
      "B0 {\n  AsPropertyTypeDeserializer\n  JsonParser\n  DeserializationContext\n  $z0 \u003d r0.canReadTypeId()\n  if ($z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  r17 \u003d r0.getTypeId()\n  if (r17 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r16 \u003d r5._deserializeWithNativeTypeId(r0, r3, r17)\n  return\n}",
      "B3 {\n  $r15 \u003d r0.currentToken()\n  r18 \u003d $r15\n  $r1 \u003d JsonToken START_OBJECT\u003e\n  if ($r15 !\u003d $r1) goto B4 else B5\n}",
      "B4 {\n  r18 \u003d r0.nextToken()\n  goto B7\n}",
      "B5 {\n  $r2 \u003d JsonToken FIELD_NAME\u003e\n  if ($r15 \u003d\u003d $r2) goto B6 else B7\n}",
      "B6 {\n  $r13 \u003d String _msgForMissingId\u003e\n  $r14 \u003d r5._deserializeTypedUsingDefaultImpl(r0, r3, null, $r13)\n  return\n}",
      "B7 {\n  r19 \u003d null\n  $r4 \u003d MapperFeature ACCEPT_CASE_INSENSITIVE_PROPERTIES\u003e\n  $z3 \u003d r3.isEnabled($r4)\n}",
      "B8 {\n  $r20 \u003d JsonToken FIELD_NAME\u003e\n  if (r18 !\u003d $r20) goto B9 else B17\n}",
      "B9 {\n  r8 \u003d r0.currentName()\n  r0.nextToken()\n  $r9 \u003d String _typePropertyName\u003e\n  $z1 \u003d r8.equals($r9)\n  if ($z1 !\u003d 0) goto B10 else B12\n}",
      "B10 {\n  if ($z3 \u003d\u003d false) goto B11 else B14\n}",
      "B11 {\n  $r11 \u003d String _typePropertyName\u003e\n  $z2 \u003d r8.equalsIgnoreCase($r11)\n  if ($z2 \u003d\u003d false) goto B12 else B14\n}",
      "B12 {\n  $r12 \u003d r0.getValueAsString()\n  if ($r12 \u003d\u003d null) goto B13 else B14\n}",
      "B13 {\n  $r10 \u003d r5._deserializeTypedForId(r0, r3, r19, $r12)\n  return\n}",
      "B14 {\n  if (r19 !\u003d null) goto B15 else B16\n}",
      "B15 {\n  r19 \u003d r3.bufferForInputBuffering(r0)\n}",
      "B16 {\n  r19.writeFieldName(r8)\n  r19.copyCurrentStructure(r0)\n  r18 \u003d r0.nextToken()\n  goto B8\n}",
      "B17 {\n  $r6 \u003d String _msgForMissingId\u003e\n  $r7 \u003d r5._deserializeTypedUsingDefaultImpl(r0, r3, r19, $r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B17",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e B12",
      "B11 --\u003e B14",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B8",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AsPropertyTypeDeserializer#_deserializeTypedUsingDefaultImpl(...4)",
        "body": "{\r\n    // May have default implementation to use\r\n    // 13-Oct-2020, tatu: As per [databind#2775], need to be careful to\r\n    //    avoid ending up using \"nullifying\" deserializer\r\n    if (!hasDefaultImpl()) {\r\n        // or, perhaps we just bumped into a \"natural\" value (boolean/int/double/String)?\r\n        Object result \u003d TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);\r\n        if (result !\u003d null) {\r\n            return result;\r\n        }\r\n        // or, something for which \"as-property\" won\u0027t work, changed into \"wrapper-array\" type:\r\n        if (p.isExpectedStartArrayToken()) {\r\n            return super.deserializeTypedFromAny(p, ctxt);\r\n        }\r\n        if (p.hasToken(JsonToken.VALUE_STRING)) {\r\n            if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\r\n                String str \u003d p.getText().trim();\r\n                if (str.isEmpty()) {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // ... and here we will check for default implementation handling (either\r\n    // genuine, or faked for \"dont fail on bad type id\")\r\n    JsonDeserializer\u003cObject\u003e deser \u003d _findDefaultImplDeserializer(ctxt);\r\n    if (deser \u003d\u003d null) {\r\n        JavaType t \u003d _strictTypeIdHandling ? _handleMissingTypeId(ctxt, priorFailureMsg) : _baseType;\r\n        if (t \u003d\u003d null) {\r\n            // 09-Mar-2017, tatu: Is this the right thing to do?\r\n            return null;\r\n        }\r\n        // ... would this actually work?\r\n        deser \u003d ctxt.findContextualValueDeserializer(t, _property);\r\n    }\r\n    if (tb !\u003d null) {\r\n        tb.writeEndObject();\r\n        p \u003d tb.asParser(p);\r\n        // must move to point to the first token:\r\n        p.nextToken();\r\n    }\r\n    return deser.deserialize(p, ctxt);\r\n}"
      },
      {
        "name": "AsPropertyTypeDeserializer#_deserializeWithNativeTypeId(...3)",
        "body": "(source not found)"
      },
      {
        "name": "AsPropertyTypeDeserializer#_deserializeTypedForId(...4)",
        "body": "{\r\n    JsonDeserializer\u003cObject\u003e deser \u003d _findDeserializer(ctxt, typeId);\r\n    if (_typeIdVisible) {\r\n        // need to merge id back in JSON input?\r\n        if (tb \u003d\u003d null) {\r\n            tb \u003d ctxt.bufferForInputBuffering(p);\r\n        }\r\n        tb.writeFieldName(p.currentName());\r\n        tb.writeString(typeId);\r\n    }\r\n    if (tb !\u003d null) {\r\n        // need to put back skipped properties?\r\n        // 02-Jul-2016, tatu: Depending on for JsonParserSequence is initialized it may\r\n        //   try to access current token; ensure there isn\u0027t one\r\n        p.clearCurrentToken();\r\n        p \u003d JsonParserSequence.createFlattened(false, tb.asParser(p), p);\r\n    }\r\n    if (p.currentToken() !\u003d JsonToken.END_OBJECT) {\r\n        // Must point to the next value; tb had no current, p pointed to VALUE_STRING:\r\n        // to skip past String value\r\n        p.nextToken();\r\n    }\r\n    // deserializer should take care of closing END_OBJECT as well\r\n    return deser.deserialize(p, ctxt);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer",
    "methodName": "deserializeTypedFromAny",
    "signature": "java.lang.Object deserializeTypedFromAny(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    // Sometimes, however, we get an array wrapper; specifically\r\n    // when an array or list has been serialized with type information.\r\n    if (p.hasToken(JsonToken.START_ARRAY)) {\r\n        return super.deserializeTypedFromArray(p, ctxt);\r\n    }\r\n    return deserializeTypedFromObject(p, ctxt);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AsPropertyTypeDeserializer\n  JsonParser\n  DeserializationContext\n  $r1 \u003d JsonToken START_ARRAY\u003e\n  $z0 \u003d r0.hasToken($r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d r2.deserializeTypedFromArray(r0, r3)\n  return\n}",
      "B2 {\n  $r4 \u003d r2.deserializeTypedFromObject(r0, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AsPropertyTypeDeserializer#deserializeTypedFromObject(...2)",
        "body": "{\r\n    // 02-Aug-2013, tatu: May need to use native type ids\r\n    if (p.canReadTypeId()) {\r\n        Object typeId \u003d p.getTypeId();\r\n        if (typeId !\u003d null) {\r\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\r\n        }\r\n    }\r\n    // but first, sanity check to ensure we have START_OBJECT or FIELD_NAME\r\n    JsonToken t \u003d p.currentToken();\r\n    if (t \u003d\u003d JsonToken.START_OBJECT) {\r\n        t \u003d p.nextToken();\r\n    } else if (/*t \u003d\u003d JsonToken.START_ARRAY ||*/\r\n    t !\u003d JsonToken.FIELD_NAME) {\r\n        /* This is most likely due to the fact that not all Java types are\r\n             * serialized as JSON Objects; so if \"as-property\" inclusion is requested,\r\n             * serialization of things like Lists must be instead handled as if\r\n             * \"as-wrapper-array\" was requested.\r\n             * But this can also be due to some custom handling: so, if \"defaultImpl\"\r\n             * is defined, it will be asked to handle this case.\r\n             */\r\n        return _deserializeTypedUsingDefaultImpl(p, ctxt, null, _msgForMissingId);\r\n    }\r\n    // Ok, let\u0027s try to find the property. But first, need token buffer...\r\n    TokenBuffer tb \u003d null;\r\n    boolean ignoreCase \u003d ctxt.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);\r\n    for (; t \u003d\u003d JsonToken.FIELD_NAME; t \u003d p.nextToken()) {\r\n        final String name \u003d p.currentName();\r\n        // to point to the value\r\n        p.nextToken();\r\n        if (name.equals(_typePropertyName) || (ignoreCase \u0026\u0026 name.equalsIgnoreCase(_typePropertyName))) {\r\n            // gotcha!\r\n            // 09-Sep-2021, tatu: [databind#3271]: Avoid converting null to \"null\"\r\n            String typeId \u003d p.getValueAsString();\r\n            if (typeId !\u003d null) {\r\n                return _deserializeTypedForId(p, ctxt, tb, typeId);\r\n            }\r\n        }\r\n        if (tb \u003d\u003d null) {\r\n            tb \u003d ctxt.bufferForInputBuffering(p);\r\n        }\r\n        tb.writeFieldName(name);\r\n        tb.copyCurrentStructure(p);\r\n    }\r\n    return _deserializeTypedUsingDefaultImpl(p, ctxt, tb, _msgForMissingId);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer",
    "methodName": "forProperty",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    return (_property \u003d\u003d prop) ? this : new AsPropertyTypeSerializer(this._idResolver, prop, this._typePropertyName);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AsPropertyTypeSerializer\n  BeanProperty\n  $r2 \u003d BeanProperty _property\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r5 \u003d AsPropertyTypeSerializer\n  $r4 \u003d TypeIdResolver _idResolver\u003e\n  $r3 \u003d String _typePropertyName\u003e\n  new AsPropertyTypeSerializer($r4, r1, $r3)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer",
    "methodName": "forProperty",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer forProperty(com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    return (prop \u003d\u003d _property) ? this : new AsWrapperTypeDeserializer(this, prop);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AsWrapperTypeDeserializer\n  BeanProperty\n  $r2 \u003d BeanProperty _property\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r3 \u003d AsWrapperTypeDeserializer\n  new AsWrapperTypeDeserializer(r1, r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer",
    "methodName": "forProperty",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    return (_property \u003d\u003d prop) ? this : new AsWrapperTypeSerializer(_idResolver, prop);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AsWrapperTypeSerializer\n  BeanProperty\n  $r2 \u003d BeanProperty _property\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r4 \u003d AsWrapperTypeSerializer\n  $r3 \u003d TypeIdResolver _idResolver\u003e\n  new AsWrapperTypeSerializer($r3, r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver",
    "methodName": "idFromValueAndType",
    "signature": "java.lang.String idFromValueAndType(java.lang.Object,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    // 04-Nov-2024, tatu: [databind#4733] Need to resolve enum sub-classes\r\n    //   same way \"ClassNameIdResolver\" does\r\n    rawType \u003d _resolveToParentAsNecessary(rawType);\r\n    String n \u003d rawType.getName();\r\n    if (n.startsWith(_basePackagePrefix)) {\r\n        // note: we will leave the leading dot in there\r\n        return n.substring(_basePackagePrefix.length() - 1);\r\n    }\r\n    return n;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MinimalClassNameIdResolver\n  Object\n  Class\n  r7 \u003d r0._resolveToParentAsNecessary(r6)\n  r1 \u003d r7.getName()\n  $r2 \u003d String _basePackagePrefix\u003e\n  $z0 \u003d r1.startsWith($r2)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d String _basePackagePrefix\u003e\n  $i0 \u003d $r3.length()\n  $i1 \u003d $i0 - 1\n  $r4 \u003d r1.substring($i1)\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MinimalClassNameIdResolver#_resolveToParentAsNecessary(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.SimpleNameIdResolver",
    "methodName": "construct",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.SimpleNameIdResolver construct(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection,boolean,boolean)",
    "visibility": "public",
    "body": "{\r\n    // sanity check\r\n    if (forSer \u003d\u003d forDeser)\r\n        throw new IllegalArgumentException();\r\n    final ConcurrentHashMap\u003cString, String\u003e typeToId;\r\n    final HashMap\u003cString, JavaType\u003e idToType;\r\n    if (forSer) {\r\n        // Only need Class-to-id for serialization; but synchronized since may be\r\n        // lazily built (if adding type-id-mappings dynamically)\r\n        typeToId \u003d new ConcurrentHashMap\u003c\u003e();\r\n        idToType \u003d null;\r\n    } else {\r\n        idToType \u003d new HashMap\u003c\u003e();\r\n        // 14-Apr-2016, tatu: Apparently needed for special case of `defaultImpl`;\r\n        //    see [databind#1198] for details: but essentially we only need room\r\n        //    for a single value.\r\n        typeToId \u003d new ConcurrentHashMap\u003c\u003e(4);\r\n    }\r\n    final boolean caseInsensitive \u003d config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_VALUES);\r\n    if (subtypes !\u003d null) {\r\n        for (NamedType t : subtypes) {\r\n            // no name? Need to figure out default; for now, let\u0027s just\r\n            // use non-qualified class name\r\n            Class\u003c?\u003e cls \u003d t.getType();\r\n            String id \u003d t.hasName() ? t.getName() : _defaultTypeId(cls);\r\n            if (forSer) {\r\n                typeToId.put(cls.getName(), id);\r\n            }\r\n            if (forDeser) {\r\n                // [databind#1983]: for case-insensitive lookups must canonicalize:\r\n                if (caseInsensitive) {\r\n                    id \u003d id.toLowerCase();\r\n                }\r\n                // One more problem; sometimes we have same name for multiple types;\r\n                // if so, use most specific\r\n                // lgtm [java/dereferenced-value-may-be-null]\r\n                JavaType prev \u003d idToType.get(id);\r\n                if (prev !\u003d null) {\r\n                    // Can only override if more specific\r\n                    if (cls.isAssignableFrom(prev.getRawClass())) {\r\n                        // nope, more generic (or same)\r\n                        continue;\r\n                    }\r\n                }\r\n                idToType.put(id, config.constructType(cls));\r\n            }\r\n        }\r\n    }\r\n    return new SimpleNameIdResolver(config, baseType, typeToId, idToType);\r\n}",
    "nodes": 22,
    "edges": 30,
    "cc": 10,
    "flowSummary": [
      "B0 : If(z0 !\u003d z1) → B1 | else → B2",
      "B2 : If(z0 \u003d\u003d false) → B3 | else → B4",
      "B5 : If(r4 \u003d\u003d null) → B6 | else → B21",
      "B7 : If($z5 \u003d\u003d false) → B8 | else → B21",
      "B8 : If($z2 \u003d\u003d false) → B9 | else → B10",
      "B11 : If(z0 \u003d\u003d false) → B12 | else → B13",
      "B13 : If(z1 \u003d\u003d false) → B14 | else → B20",
      "B14 : If($z4 \u003d\u003d false) → B15 | else → B16",
      "B16 : If($r14 \u003d\u003d null) → B17 | else → B19",
      "B17 : If($z3 \u003d\u003d false) → B18 | else → B19"
    ],
    "blockList": [
      "B0 {\n  MapperConfig\n  JavaType\n  Collection\n  z0 :\u003d @parameter3: boolean\n  z1 :\u003d @parameter4: boolean\n  if (z0 !\u003d z1) goto B1 else B2\n}",
      "B1 {\n  $r17 \u003d IllegalArgumentException\n  new IllegalArgumentException()\n  throw $r17\n}",
      "B2 {\n  if (z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r16 \u003d ConcurrentHashMap\n  new ConcurrentHashMap()\n  r18 \u003d $r16\n  r19 \u003d null\n  goto B5\n}",
      "B4 {\n  $r0 \u003d HashMap\n  new HashMap()\n  r19 \u003d $r0\n  $r1 \u003d ConcurrentHashMap\n  new ConcurrentHashMap(4)\n  r18 \u003d $r1\n}",
      "B5 {\n  $r3 \u003d MapperFeature ACCEPT_CASE_INSENSITIVE_VALUES\u003e\n  $z4 \u003d r2.isEnabled($r3)\n  if (r4 \u003d\u003d null) goto B6 else B21\n}",
      "B6 {\n  r7 \u003d r4.iterator()\n}",
      "B7 {\n  $z5 \u003d r7.hasNext()\n  if ($z5 \u003d\u003d false) goto B8 else B21\n}",
      "B8 {\n  $r8 \u003d r7.next()\n  r9 \u003d NamedType) $r8\n  r10 \u003d r9.getType()\n  $z2 \u003d r9.hasName()\n  if ($z2 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r20 \u003d r9.getName()\n  goto B11\n}",
      "B10 {\n  $r20 \u003d SimpleNameIdResolver._defaultTypeId(r10)\n}",
      "B11 {\n  r21 \u003d $r20\n  if (z0 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $r15 \u003d r10.getName()\n  r18.put($r15, $r20)\n}",
      "B13 {\n  if (z1 \u003d\u003d false) goto B14 else B20\n}",
      "B14 {\n  if ($z4 \u003d\u003d false) goto B15 else B16\n}",
      "B15 {\n  r21 \u003d r21.toLowerCase()\n}",
      "B16 {\n  $r11 \u003d r19.get(r21)\n  $r14 \u003d JavaType) $r11\n  if ($r14 \u003d\u003d null) goto B17 else B19\n}",
      "B17 {\n  $r13 \u003d $r14.getRawClass()\n  $z3 \u003d r10.isAssignableFrom($r13)\n  if ($z3 \u003d\u003d false) goto B18 else B19\n}",
      "B18 {\n  goto B7\n}",
      "B19 {\n  $r12 \u003d r2.constructType(r10)\n  r19.put(r21, $r12)\n}",
      "B20 {\n  goto B7\n}",
      "B21 {\n  $r5 \u003d SimpleNameIdResolver\n  new SimpleNameIdResolver(r2, r6, r18, r19)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B21",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B21",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B20",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B17",
      "B16 --\u003e B19",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B7",
      "B19 --\u003e B20",
      "B20 --\u003e B7",
      "B21 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleNameIdResolver#_defaultTypeId(...1)",
        "body": "{\r\n    String n \u003d cls.getName();\r\n    int ix \u003d Math.max(n.lastIndexOf(\u0027.\u0027), n.lastIndexOf(\u0027$\u0027));\r\n    return (ix \u003c 0) ? n : n.substring(ix + 1);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.SimpleNameIdResolver",
    "methodName": "idFromValueAndType",
    "signature": "java.lang.String idFromValueAndType(java.lang.Object,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    // 18-Jan-2013, tatu: We may be called with null value occasionally\r\n    //   it seems; nothing much we can figure out that way.\r\n    if (value \u003d\u003d null) {\r\n        return idFromClass(type);\r\n    }\r\n    return idFromValue(value);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleNameIdResolver\n  Object\n  Class\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r1.idFromClass(r3)\n  return\n}",
      "B2 {\n  $r2 \u003d r1.idFromValue(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleNameIdResolver#idFromClass(...1)",
        "body": "{\r\n    if (clazz \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // 04-Nov-2024, tatu: [databind#4733] Need to resolve enum sub-classes\r\n    //   same way \"ClassNameIdResolver\" does\r\n    clazz \u003d _resolveToParentAsNecessary(clazz);\r\n    // NOTE: although we may need to let `TypeModifier` change actual type to use\r\n    // for id, we can use original type as key for more efficient lookup:\r\n    final String key \u003d clazz.getName();\r\n    String name \u003d _typeToId.get(key);\r\n    if (name \u003d\u003d null) {\r\n        // 29-Nov-2019, tatu: As per test in `TestTypeModifierNameResolution` somehow\r\n        //    we need to do this odd piece here which seems unnecessary but isn\u0027t.\r\n        Class\u003c?\u003e cls \u003d _typeFactory.constructType(clazz).getRawClass();\r\n        // 24-Feb-2011, tatu: As per [JACKSON-498], may need to dynamically look up name\r\n        // can either throw an exception, or use default name...\r\n        if (_config.isAnnotationProcessingEnabled()) {\r\n            BeanDescription beanDesc \u003d _config.introspectClassAnnotations(cls);\r\n            name \u003d _config.getAnnotationIntrospector().findTypeName(beanDesc.getClassInfo());\r\n        }\r\n        if (name \u003d\u003d null) {\r\n            // And if still not found, let\u0027s choose default?\r\n            name \u003d _defaultTypeId(cls);\r\n        }\r\n        _typeToId.put(key, name);\r\n    }\r\n    return name;\r\n}"
      },
      {
        "name": "SimpleNameIdResolver#idFromValue(...1)",
        "body": "{\r\n    return idFromClass(value.getClass());\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.SimpleNameIdResolver",
    "methodName": "getDescForKnownTypeIds",
    "signature": "java.lang.String getDescForKnownTypeIds()",
    "visibility": "public",
    "body": "{\r\n    // 05-May-2020, tatu: As per [databind#1919], only include ids for\r\n    //    non-abstract types\r\n    final TreeSet\u003cString\u003e ids \u003d new TreeSet\u003c\u003e();\r\n    for (Map.Entry\u003cString, JavaType\u003e entry : _idToType.entrySet()) {\r\n        if (entry.getValue().isConcrete()) {\r\n            ids.add(entry.getKey());\r\n        }\r\n    }\r\n    return ids.toString();\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  SimpleNameIdResolver\n  $r0 \u003d TreeSet\n  new TreeSet()\n  $r2 \u003d Map _idToType\u003e\n  $r3 \u003d $r2.entrySet()\n  r4 \u003d $r3.iterator()\n}",
      "B1 {\n  $z0 \u003d r4.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r6 \u003d r4.next()\n  r7 \u003d Map$Entry) $r6\n  $r8 \u003d r7.getValue()\n  $r9 \u003d JavaType) $r8\n  $z1 \u003d $r9.isConcrete()\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r10 \u003d r7.getKey()\n  $r11 \u003d String) $r10\n  $r0.add($r11)\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  $r5 \u003d $r0.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "methodName": "registerSubtypes",
    "signature": "void registerSubtypes(com.fasterxml.jackson.databind.jsontype.NamedType[])",
    "visibility": "public",
    "body": "{\r\n    if (_registeredSubtypes \u003d\u003d null) {\r\n        _registeredSubtypes \u003d new LinkedHashSet\u003cNamedType\u003e();\r\n    }\r\n    for (NamedType type : types) {\r\n        _registeredSubtypes.add(type);\r\n    }\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B3 : If(i1 \u003e\u003d $i0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  StdSubtypeResolver\n  NamedType[]\n  $r1 \u003d LinkedHashSet _registeredSubtypes\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d LinkedHashSet\n  new LinkedHashSet()\n  LinkedHashSet _registeredSubtypes\u003e \u003d $r5\n}",
      "B2 {\n  $i0 \u003d lengthof r2\n  i1 \u003d 0\n}",
      "B3 {\n  if (i1 \u003e\u003d $i0) goto B4 else B5\n}",
      "B4 {\n  r3 \u003d r2[i1]\n  $r4 \u003d LinkedHashSet _registeredSubtypes\u003e\n  $r4.add(r3)\n  i1 \u003d i1 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "methodName": "registerSubtypes",
    "signature": "void registerSubtypes(java.lang.Class[])",
    "visibility": "public",
    "body": "{\r\n    NamedType[] types \u003d new NamedType[classes.length];\r\n    for (int i \u003d 0, len \u003d classes.length; i \u003c len; ++i) {\r\n        types[i] \u003d new NamedType(classes[i]);\r\n    }\r\n    registerSubtypes(types);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  StdSubtypeResolver\n  Class[]\n  $i0 \u003d lengthof r0\n  r1 \u003d NamedType)[$i0]\n  i2 \u003d 0\n  i1 \u003d lengthof r0\n}",
      "B1 {\n  if (i2 \u003e\u003d i1) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d NamedType\n  $r4 \u003d r0[i2]\n  new NamedType($r4)\n  r1[i2] \u003d $r3\n  i2 \u003d i2 + 1\n  goto B1\n}",
      "B3 {\n  r2.registerSubtypes(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdSubtypeResolver#registerSubtypes(...1)",
        "body": "{\r\n    if (_registeredSubtypes \u003d\u003d null) {\r\n        _registeredSubtypes \u003d new LinkedHashSet\u003cNamedType\u003e();\r\n    }\r\n    for (NamedType type : types) {\r\n        _registeredSubtypes.add(type);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "methodName": "registerSubtypes",
    "signature": "void registerSubtypes(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    int len \u003d subtypes.size();\r\n    NamedType[] types \u003d new NamedType[len];\r\n    int i \u003d 0;\r\n    for (Class\u003c?\u003e subtype : subtypes) {\r\n        types[i++] \u003d new NamedType(subtype);\r\n    }\r\n    registerSubtypes(types);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  StdSubtypeResolver\n  Collection\n  i0 \u003d r0.size()\n  r1 \u003d NamedType)[i0]\n  i2 \u003d 0\n  r2 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r2.next()\n  r5 \u003d Class) $r4\n  $i1 \u003d i2\n  i2 \u003d i2 + 1\n  $r6 \u003d NamedType\n  new NamedType(r5)\n  r1[$i1] \u003d $r6\n  goto B1\n}",
      "B3 {\n  r3.registerSubtypes(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdSubtypeResolver#registerSubtypes(...1)",
        "body": "{\r\n    if (_registeredSubtypes \u003d\u003d null) {\r\n        _registeredSubtypes \u003d new LinkedHashSet\u003cNamedType\u003e();\r\n    }\r\n    for (NamedType type : types) {\r\n        _registeredSubtypes.add(type);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "methodName": "collectAndResolveSubtypesByClass",
    "signature": "java.util.Collection collectAndResolveSubtypesByClass(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    final AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\r\n    // for backwards compatibility, must allow null here:\r\n    final Class\u003c?\u003e rawBase;\r\n    if (baseType !\u003d null) {\r\n        rawBase \u003d baseType.getRawClass();\r\n    } else if (property !\u003d null) {\r\n        rawBase \u003d property.getRawType();\r\n    } else {\r\n        throw new IllegalArgumentException(\"Both property and base type are nulls\");\r\n    }\r\n    HashMap\u003cNamedType, NamedType\u003e collected \u003d new HashMap\u003cNamedType, NamedType\u003e();\r\n    // start with registered subtypes (which have precedence)\r\n    if (_registeredSubtypes !\u003d null) {\r\n        for (NamedType subtype : _registeredSubtypes) {\r\n            // is it a subtype of root type?\r\n            if (rawBase.isAssignableFrom(subtype.getType())) {\r\n                // yes\r\n                AnnotatedClass curr \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(config, subtype.getType());\r\n                _collectAndResolve(curr, subtype, config, ai, collected);\r\n            }\r\n        }\r\n    }\r\n    // then annotated types for property itself\r\n    if (property !\u003d null) {\r\n        Collection\u003cNamedType\u003e st \u003d ai.findSubtypes(property);\r\n        if (st !\u003d null) {\r\n            for (NamedType nt : st) {\r\n                AnnotatedClass ac \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\r\n                _collectAndResolve(ac, nt, config, ai, collected);\r\n            }\r\n        }\r\n    }\r\n    NamedType rootType \u003d new NamedType(rawBase, null);\r\n    AnnotatedClass ac \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(config, rawBase);\r\n    // and finally subtypes via annotations from base type (recursively)\r\n    _collectAndResolve(ac, rootType, config, ai, collected);\r\n    return new ArrayList\u003cNamedType\u003e(collected.values());\r\n}",
    "nodes": 17,
    "edges": 23,
    "cc": 8,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(r3 \u003d\u003d null) → B3 | else → B4",
      "B5 : If($r7 \u003d\u003d null) → B6 | else → B11",
      "B7 : If($z1 \u003d\u003d false) → B8 | else → B11",
      "B8 : If($z2 \u003d\u003d false) → B9 | else → B10",
      "B11 : If(r3 \u003d\u003d null) → B12 | else → B16",
      "B12 : If(r19 \u003d\u003d null) → B13 | else → B16",
      "B14 : If($z0 \u003d\u003d false) → B15 | else → B16"
    ],
    "blockList": [
      "B0 {\n  StdSubtypeResolver\n  MapperConfig\n  AnnotatedMember\n  JavaType\n  r1 \u003d r0.getAnnotationIntrospector()\n  if (r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r15 \u003d r2.getRawClass()\n  goto B5\n}",
      "B2 {\n  if (r3 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  r15 \u003d r3.getRawType()\n  goto B5\n}",
      "B4 {\n  $r4 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Both property and base type are nulls\")\n  throw $r4\n}",
      "B5 {\n  $r5 \u003d HashMap\n  new HashMap()\n  $r7 \u003d LinkedHashSet _registeredSubtypes\u003e\n  if ($r7 \u003d\u003d null) goto B6 else B11\n}",
      "B6 {\n  $r11 \u003d LinkedHashSet _registeredSubtypes\u003e\n  r16 \u003d $r11.iterator()\n}",
      "B7 {\n  $z1 \u003d r16.hasNext()\n  if ($z1 \u003d\u003d false) goto B8 else B11\n}",
      "B8 {\n  $r12 \u003d r16.next()\n  r17 \u003d NamedType) $r12\n  $r13 \u003d r17.getType()\n  $z2 \u003d r15.isAssignableFrom($r13)\n  if ($z2 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r14 \u003d r17.getType()\n  r18 \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(r0, $r14)\n  r6._collectAndResolve(r18, r17, r0, r1, $r5)\n}",
      "B10 {\n  goto B7\n}",
      "B11 {\n  if (r3 \u003d\u003d null) goto B12 else B16\n}",
      "B12 {\n  r19 \u003d r1.findSubtypes(r3)\n  if (r19 \u003d\u003d null) goto B13 else B16\n}",
      "B13 {\n  r20 \u003d r19.iterator()\n}",
      "B14 {\n  $z0 \u003d r20.hasNext()\n  if ($z0 \u003d\u003d false) goto B15 else B16\n}",
      "B15 {\n  $r8 \u003d r20.next()\n  r21 \u003d NamedType) $r8\n  $r9 \u003d r21.getType()\n  r10 \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(r0, $r9)\n  r6._collectAndResolve(r10, r21, r0, r1, $r5)\n  goto B14\n}",
      "B16 {\n  $r22 \u003d NamedType\n  new NamedType(r15, null)\n  $r23 \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(r0, r15)\n  r6._collectAndResolve($r23, $r22, r0, r1, $r5)\n  $r24 \u003d ArrayList\n  $r25 \u003d $r5.values()\n  new ArrayList($r25)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B11",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B7",
      "B11 --\u003e B12",
      "B11 --\u003e B16",
      "B12 --\u003e B13",
      "B12 --\u003e B16",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B14",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdSubtypeResolver#_collectAndResolve(...5)",
        "body": "{\r\n    if (!namedType.hasName()) {\r\n        String name \u003d ai.findTypeName(annotatedType);\r\n        if (name !\u003d null) {\r\n            namedType \u003d new NamedType(namedType.getType(), name);\r\n        }\r\n    }\r\n    //For Serialization we only want to return a single NamedType per class so it\u0027s\r\n    //unambiguous what name we use.\r\n    NamedType typeOnlyNamedType \u003d new NamedType(namedType.getType());\r\n    // First things first: is base type itself included?\r\n    if (collectedSubtypes.containsKey(typeOnlyNamedType)) {\r\n        // if so, no recursion; however, may need to update name?\r\n        if (namedType.hasName()) {\r\n            NamedType prev \u003d collectedSubtypes.get(typeOnlyNamedType);\r\n            if (!prev.hasName()) {\r\n                collectedSubtypes.put(typeOnlyNamedType, namedType);\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    // if it wasn\u0027t, add and check subtypes recursively\r\n    collectedSubtypes.put(typeOnlyNamedType, namedType);\r\n    Collection\u003cNamedType\u003e st \u003d ai.findSubtypes(annotatedType);\r\n    if (st !\u003d null \u0026\u0026 !st.isEmpty()) {\r\n        for (NamedType subtype : st) {\r\n            AnnotatedClass subtypeClass \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(config, subtype.getType());\r\n            _collectAndResolve(subtypeClass, subtype, config, ai, collectedSubtypes);\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "methodName": "collectAndResolveSubtypesByClass",
    "signature": "java.util.Collection collectAndResolveSubtypesByClass(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    final AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\r\n    HashMap\u003cNamedType, NamedType\u003e subtypes \u003d new HashMap\u003c\u003e();\r\n    // then consider registered subtypes (which have precedence over annotations)\r\n    if (_registeredSubtypes !\u003d null) {\r\n        Class\u003c?\u003e rawBase \u003d type.getRawType();\r\n        for (NamedType subtype : _registeredSubtypes) {\r\n            // is it a subtype of root type?\r\n            if (rawBase.isAssignableFrom(subtype.getType())) {\r\n                // yes\r\n                AnnotatedClass curr \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(config, subtype.getType());\r\n                _collectAndResolve(curr, subtype, config, ai, subtypes);\r\n            }\r\n        }\r\n    }\r\n    // and then check subtypes via annotations from base type (recursively)\r\n    NamedType rootType \u003d new NamedType(type.getRawType(), null);\r\n    _collectAndResolve(type, rootType, config, ai, subtypes);\r\n    return new ArrayList\u003cNamedType\u003e(subtypes.values());\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r4 \u003d\u003d null) → B1 | else → B6",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B6",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  StdSubtypeResolver\n  MapperConfig\n  AnnotatedClass\n  r1 \u003d r0.getAnnotationIntrospector()\n  $r2 \u003d HashMap\n  new HashMap()\n  $r4 \u003d LinkedHashSet _registeredSubtypes\u003e\n  if ($r4 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  r17 \u003d r6.getRawType()\n  $r10 \u003d LinkedHashSet _registeredSubtypes\u003e\n  r11 \u003d $r10.iterator()\n}",
      "B2 {\n  $z0 \u003d r11.hasNext()\n  if ($z0 \u003d\u003d false) goto B3 else B6\n}",
      "B3 {\n  $r12 \u003d r11.next()\n  r13 \u003d NamedType) $r12\n  $r14 \u003d r13.getType()\n  $z1 \u003d r17.isAssignableFrom($r14)\n  if ($z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r15 \u003d r13.getType()\n  r16 \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(r0, $r15)\n  r3._collectAndResolve(r16, r13, r0, r1, $r2)\n}",
      "B5 {\n  goto B2\n}",
      "B6 {\n  $r5 \u003d NamedType\n  $r7 \u003d r6.getRawType()\n  new NamedType($r7, null)\n  r3._collectAndResolve(r6, $r5, r0, r1, $r2)\n  $r8 \u003d ArrayList\n  $r9 \u003d $r2.values()\n  new ArrayList($r9)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdSubtypeResolver#_collectAndResolve(...5)",
        "body": "{\r\n    if (!namedType.hasName()) {\r\n        String name \u003d ai.findTypeName(annotatedType);\r\n        if (name !\u003d null) {\r\n            namedType \u003d new NamedType(namedType.getType(), name);\r\n        }\r\n    }\r\n    //For Serialization we only want to return a single NamedType per class so it\u0027s\r\n    //unambiguous what name we use.\r\n    NamedType typeOnlyNamedType \u003d new NamedType(namedType.getType());\r\n    // First things first: is base type itself included?\r\n    if (collectedSubtypes.containsKey(typeOnlyNamedType)) {\r\n        // if so, no recursion; however, may need to update name?\r\n        if (namedType.hasName()) {\r\n            NamedType prev \u003d collectedSubtypes.get(typeOnlyNamedType);\r\n            if (!prev.hasName()) {\r\n                collectedSubtypes.put(typeOnlyNamedType, namedType);\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    // if it wasn\u0027t, add and check subtypes recursively\r\n    collectedSubtypes.put(typeOnlyNamedType, namedType);\r\n    Collection\u003cNamedType\u003e st \u003d ai.findSubtypes(annotatedType);\r\n    if (st !\u003d null \u0026\u0026 !st.isEmpty()) {\r\n        for (NamedType subtype : st) {\r\n            AnnotatedClass subtypeClass \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(config, subtype.getType());\r\n            _collectAndResolve(subtypeClass, subtype, config, ai, collectedSubtypes);\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "methodName": "collectAndResolveSubtypesByTypeId",
    "signature": "java.util.Collection collectAndResolveSubtypesByTypeId(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    final AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\r\n    Class\u003c?\u003e rawBase \u003d baseType.getRawClass();\r\n    // Need to keep track of classes that have been handled already\r\n    Set\u003cClass\u003c?\u003e\u003e typesHandled \u003d new LinkedHashSet\u003cClass\u003c?\u003e\u003e();\r\n    Map\u003cString, NamedType\u003e byName \u003d new LinkedHashMap\u003cString, NamedType\u003e();\r\n    // start with lowest-precedence, which is from type hierarchy\r\n    NamedType rootType \u003d new NamedType(rawBase, null);\r\n    AnnotatedClass ac \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(config, rawBase);\r\n    _collectAndResolveByTypeId(ac, rootType, config, typesHandled, byName);\r\n    // then with definitions from property\r\n    if (property !\u003d null) {\r\n        Collection\u003cNamedType\u003e st \u003d ai.findSubtypes(property);\r\n        if (st !\u003d null) {\r\n            for (NamedType nt : st) {\r\n                ac \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\r\n                _collectAndResolveByTypeId(ac, nt, config, typesHandled, byName);\r\n            }\r\n        }\r\n    }\r\n    // and finally explicit type registrations (highest precedence)\r\n    if (_registeredSubtypes !\u003d null) {\r\n        for (NamedType subtype : _registeredSubtypes) {\r\n            // is it a subtype of root type?\r\n            if (rawBase.isAssignableFrom(subtype.getType())) {\r\n                // yes\r\n                AnnotatedClass curr \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(config, subtype.getType());\r\n                _collectAndResolveByTypeId(curr, subtype, config, typesHandled, byName);\r\n            }\r\n        }\r\n    }\r\n    return _combineNamedAndUnnamed(rawBase, typesHandled, byName);\r\n}",
    "nodes": 12,
    "edges": 17,
    "cc": 7,
    "flowSummary": [
      "B0 : If(r8 \u003d\u003d null) → B1 | else → B5",
      "B1 : If(r17 \u003d\u003d null) → B2 | else → B5",
      "B3 : If($z2 \u003d\u003d false) → B4 | else → B5",
      "B5 : If($r21 \u003d\u003d null) → B6 | else → B11",
      "B7 : If($z0 \u003d\u003d false) → B8 | else → B11",
      "B8 : If($z1 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  StdSubtypeResolver\n  MapperConfig\n  AnnotatedMember\n  JavaType\n  r1 \u003d r0.getAnnotationIntrospector()\n  r3 \u003d r2.getRawClass()\n  $r4 \u003d LinkedHashSet\n  new LinkedHashSet()\n  $r5 \u003d LinkedHashMap\n  new LinkedHashMap()\n  $r6 \u003d NamedType\n  new NamedType(r3, null)\n  r16 \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(r0, r3)\n  r7._collectAndResolveByTypeId(r16, $r6, r0, $r4, $r5)\n  if (r8 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  r17 \u003d r1.findSubtypes(r8)\n  if (r17 \u003d\u003d null) goto B2 else B5\n}",
      "B2 {\n  r18 \u003d r17.iterator()\n}",
      "B3 {\n  $z2 \u003d r18.hasNext()\n  if ($z2 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r14 \u003d r18.next()\n  r19 \u003d NamedType) $r14\n  $r15 \u003d r19.getType()\n  r20 \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(r0, $r15)\n  r7._collectAndResolveByTypeId(r20, r19, r0, $r4, $r5)\n  goto B3\n}",
      "B5 {\n  $r21 \u003d LinkedHashSet _registeredSubtypes\u003e\n  if ($r21 \u003d\u003d null) goto B6 else B11\n}",
      "B6 {\n  $r10 \u003d LinkedHashSet _registeredSubtypes\u003e\n  r22 \u003d $r10.iterator()\n}",
      "B7 {\n  $z0 \u003d r22.hasNext()\n  if ($z0 \u003d\u003d false) goto B8 else B11\n}",
      "B8 {\n  $r11 \u003d r22.next()\n  r23 \u003d NamedType) $r11\n  $r12 \u003d r23.getType()\n  $z1 \u003d r3.isAssignableFrom($r12)\n  if ($z1 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r13 \u003d r23.getType()\n  r24 \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(r0, $r13)\n  r7._collectAndResolveByTypeId(r24, r23, r0, $r4, $r5)\n}",
      "B10 {\n  goto B7\n}",
      "B11 {\n  $r9 \u003d r7._combineNamedAndUnnamed(r3, $r4, $r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e B6",
      "B5 --\u003e B11",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B7",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdSubtypeResolver#_combineNamedAndUnnamed(...3)",
        "body": "{\r\n    ArrayList\u003cNamedType\u003e result \u003d new ArrayList\u003cNamedType\u003e(byName.values());\r\n    // Ok, so... we will figure out which classes have no explicitly assigned name,\r\n    // by removing Classes from Set. And for remaining classes, add an anonymous\r\n    // marker\r\n    for (NamedType t : byName.values()) {\r\n        typesHandled.remove(t.getType());\r\n    }\r\n    for (Class\u003c?\u003e cls : typesHandled) {\r\n        // 27-Apr-2017, tatu: [databind#1616] Do not add base type itself unless\r\n        //     it is concrete (or has explicit type name)\r\n        if ((cls \u003d\u003d rawBase) \u0026\u0026 Modifier.isAbstract(cls.getModifiers())) {\r\n            continue;\r\n        }\r\n        result.add(new NamedType(cls));\r\n    }\r\n    return result;\r\n}"
      },
      {
        "name": "StdSubtypeResolver#_collectAndResolveByTypeId(...5)",
        "body": "{\r\n    final AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\r\n    if (!namedType.hasName()) {\r\n        String name \u003d ai.findTypeName(annotatedType);\r\n        if (name !\u003d null) {\r\n            namedType \u003d new NamedType(namedType.getType(), name);\r\n        }\r\n    }\r\n    if (namedType.hasName()) {\r\n        byName.put(namedType.getName(), namedType);\r\n    }\r\n    // only check subtypes if this type hadn\u0027t yet been handled\r\n    if (typesHandled.add(namedType.getType())) {\r\n        Collection\u003cNamedType\u003e st \u003d ai.findSubtypes(annotatedType);\r\n        if (st !\u003d null \u0026\u0026 !st.isEmpty()) {\r\n            for (NamedType subtype : st) {\r\n                AnnotatedClass subtypeClass \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(config, subtype.getType());\r\n                _collectAndResolveByTypeId(subtypeClass, subtype, config, typesHandled, byName);\r\n            }\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "methodName": "collectAndResolveSubtypesByTypeId",
    "signature": "java.util.Collection collectAndResolveSubtypesByTypeId(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    final Class\u003c?\u003e rawBase \u003d baseType.getRawType();\r\n    Set\u003cClass\u003c?\u003e\u003e typesHandled \u003d new LinkedHashSet\u003cClass\u003c?\u003e\u003e();\r\n    Map\u003cString, NamedType\u003e byName \u003d new LinkedHashMap\u003cString, NamedType\u003e();\r\n    NamedType rootType \u003d new NamedType(rawBase, null);\r\n    _collectAndResolveByTypeId(baseType, rootType, config, typesHandled, byName);\r\n    if (_registeredSubtypes !\u003d null) {\r\n        for (NamedType subtype : _registeredSubtypes) {\r\n            // is it a subtype of root type?\r\n            if (rawBase.isAssignableFrom(subtype.getType())) {\r\n                // yes\r\n                AnnotatedClass curr \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(config, subtype.getType());\r\n                _collectAndResolveByTypeId(curr, subtype, config, typesHandled, byName);\r\n            }\r\n        }\r\n    }\r\n    return _combineNamedAndUnnamed(rawBase, typesHandled, byName);\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r7 \u003d\u003d null) → B1 | else → B6",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B6",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  StdSubtypeResolver\n  MapperConfig\n  AnnotatedClass\n  r1 \u003d r0.getRawType()\n  $r2 \u003d LinkedHashSet\n  new LinkedHashSet()\n  $r3 \u003d LinkedHashMap\n  new LinkedHashMap()\n  $r4 \u003d NamedType\n  new NamedType(r1, null)\n  r5._collectAndResolveByTypeId(r0, $r4, r6, $r2, $r3)\n  $r7 \u003d LinkedHashSet _registeredSubtypes\u003e\n  if ($r7 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  $r9 \u003d LinkedHashSet _registeredSubtypes\u003e\n  r10 \u003d $r9.iterator()\n}",
      "B2 {\n  $z0 \u003d r10.hasNext()\n  if ($z0 \u003d\u003d false) goto B3 else B6\n}",
      "B3 {\n  $r11 \u003d r10.next()\n  r12 \u003d NamedType) $r11\n  $r13 \u003d r12.getType()\n  $z1 \u003d r1.isAssignableFrom($r13)\n  if ($z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r14 \u003d r12.getType()\n  r15 \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(r6, $r14)\n  r5._collectAndResolveByTypeId(r15, r12, r6, $r2, $r3)\n}",
      "B5 {\n  goto B2\n}",
      "B6 {\n  $r8 \u003d r5._combineNamedAndUnnamed(r1, $r2, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdSubtypeResolver#_combineNamedAndUnnamed(...3)",
        "body": "{\r\n    ArrayList\u003cNamedType\u003e result \u003d new ArrayList\u003cNamedType\u003e(byName.values());\r\n    // Ok, so... we will figure out which classes have no explicitly assigned name,\r\n    // by removing Classes from Set. And for remaining classes, add an anonymous\r\n    // marker\r\n    for (NamedType t : byName.values()) {\r\n        typesHandled.remove(t.getType());\r\n    }\r\n    for (Class\u003c?\u003e cls : typesHandled) {\r\n        // 27-Apr-2017, tatu: [databind#1616] Do not add base type itself unless\r\n        //     it is concrete (or has explicit type name)\r\n        if ((cls \u003d\u003d rawBase) \u0026\u0026 Modifier.isAbstract(cls.getModifiers())) {\r\n            continue;\r\n        }\r\n        result.add(new NamedType(cls));\r\n    }\r\n    return result;\r\n}"
      },
      {
        "name": "StdSubtypeResolver#_collectAndResolveByTypeId(...5)",
        "body": "{\r\n    final AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\r\n    if (!namedType.hasName()) {\r\n        String name \u003d ai.findTypeName(annotatedType);\r\n        if (name !\u003d null) {\r\n            namedType \u003d new NamedType(namedType.getType(), name);\r\n        }\r\n    }\r\n    if (namedType.hasName()) {\r\n        byName.put(namedType.getName(), namedType);\r\n    }\r\n    // only check subtypes if this type hadn\u0027t yet been handled\r\n    if (typesHandled.add(namedType.getType())) {\r\n        Collection\u003cNamedType\u003e st \u003d ai.findSubtypes(annotatedType);\r\n        if (st !\u003d null \u0026\u0026 !st.isEmpty()) {\r\n            for (NamedType subtype : st) {\r\n                AnnotatedClass subtypeClass \u003d AnnotatedClassResolver.resolveWithoutSuperTypes(config, subtype.getType());\r\n                _collectAndResolveByTypeId(subtypeClass, subtype, config, typesHandled, byName);\r\n            }\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "methodName": "buildTypeSerializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    if (_idType \u003d\u003d JsonTypeInfo.Id.NONE) {\r\n        return null;\r\n    }\r\n    // 03-Oct-2016, tatu: As per [databind#1395] better prevent use for primitives,\r\n    //    regardless of setting\r\n    if (baseType.isPrimitive()) {\r\n        // 19-Jun-2020, tatu: But for [databind#2753], allow overriding\r\n        if (!allowPrimitiveTypes(config, baseType)) {\r\n            return null;\r\n        }\r\n    }\r\n    if (_idType \u003d\u003d JsonTypeInfo.Id.DEDUCTION) {\r\n        // Deduction doesn\u0027t require a type property. We use EXISTING_PROPERTY with a name of \u003cnull\u003e to drive this.\r\n        // 04-Jan-2023, tatu: Actually as per [databind#3711] that won\u0027t quite work so:\r\n        return AsDeductionTypeSerializer.instance();\r\n    }\r\n    TypeIdResolver idRes \u003d idResolver(config, baseType, subTypeValidator(config), subtypes, true, false);\r\n    switch(_includeAs) {\r\n        case WRAPPER_ARRAY:\r\n            return new AsArrayTypeSerializer(idRes, null);\r\n        case PROPERTY:\r\n            return new AsPropertyTypeSerializer(idRes, null, _typeProperty);\r\n        case WRAPPER_OBJECT:\r\n            return new AsWrapperTypeSerializer(idRes, null);\r\n        case EXTERNAL_PROPERTY:\r\n            return new AsExternalTypeSerializer(idRes, null, _typeProperty);\r\n        case EXISTING_PROPERTY:\r\n            // as per [#528]\r\n            return new AsExistingPropertyTypeSerializer(idRes, null, _typeProperty);\r\n    }\r\n    throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \" + _includeAs);\r\n}",
    "nodes": 14,
    "edges": 14,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d $r1) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B5",
      "B3 : If($z1 !\u003d 0) → B4 | else → B5",
      "B5 : If($r5 !\u003d $r4) → B6 | else → B7",
      "B7 : If(switch-on $i1) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  StdTypeResolverBuilder\n  SerializationConfig\n  JavaType\n  Collection\n  $r2 \u003d JsonTypeInfo$Id _idType\u003e\n  $r1 \u003d JsonTypeInfo$Id NONE\u003e\n  if ($r2 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r3.isPrimitive()\n  if ($z0 \u003d\u003d false) goto B3 else B5\n}",
      "B3 {\n  $z1 \u003d r0.allowPrimitiveTypes(r6, r3)\n  if ($z1 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r5 \u003d JsonTypeInfo$Id _idType\u003e\n  $r4 \u003d JsonTypeInfo$Id DEDUCTION\u003e\n  if ($r5 !\u003d $r4) goto B6 else B7\n}",
      "B6 {\n  $r24 \u003d AsDeductionTypeSerializer.instance()\n  return\n}",
      "B7 {\n  $r8 \u003d r0.subTypeValidator(r6)\n  r9 \u003d r0.idResolver(r6, r3, $r8, r7, 1, 0)\n  $r11 \u003d StdTypeResolverBuilder$1: int[] $SwitchMap$com$fasterxml$jackson$annotation$JsonTypeInfo$As\u003e\n  $r10 \u003d JsonTypeInfo$As _includeAs\u003e\n  $i0 \u003d $r10.ordinal()\n  $i1 \u003d $r11[$i0]\n  IllegalStateException; }\n}",
      "B8 {\n  $r19 \u003d AsArrayTypeSerializer\n  new AsArrayTypeSerializer(r9, null)\n  return\n}",
      "B9 {\n  $r17 \u003d AsPropertyTypeSerializer\n  $r18 \u003d String _typeProperty\u003e\n  new AsPropertyTypeSerializer(r9, null, $r18)\n  return\n}",
      "B10 {\n  $r16 \u003d AsWrapperTypeSerializer\n  new AsWrapperTypeSerializer(r9, null)\n  return\n}",
      "B11 {\n  $r14 \u003d AsExternalTypeSerializer\n  $r15 \u003d String _typeProperty\u003e\n  new AsExternalTypeSerializer(r9, null, $r15)\n  return\n}",
      "B12 {\n  $r12 \u003d AsExistingPropertyTypeSerializer\n  $r13 \u003d String _typeProperty\u003e\n  new AsExistingPropertyTypeSerializer(r9, null, $r13)\n  return\n}",
      "B13 {\n  $r20 \u003d IllegalStateException\n  $r21 \u003d JsonTypeInfo$As _includeAs\u003e\n  $r22 \u003d String.valueOf($r21)\n  $r23 \u003d dynInvoke makeConcatWithConstants($r22)\n  new IllegalStateException($r23)\n  throw $r20\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B7 --\u003e B10",
      "B7 --\u003e B11",
      "B7 --\u003e B12",
      "B7 --\u003e B13",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdTypeResolverBuilder#subTypeValidator(...1)",
        "body": "{\r\n    return config.getPolymorphicTypeValidator();\r\n}"
      },
      {
        "name": "StdTypeResolverBuilder#idResolver(...6)",
        "body": "{\r\n    // Custom id resolver?\r\n    if (_customIdResolver !\u003d null) {\r\n        return _customIdResolver;\r\n    }\r\n    if (_idType \u003d\u003d null)\r\n        throw new IllegalStateException(\"Cannot build, \u0027init()\u0027 not yet called\");\r\n    switch(_idType) {\r\n        // Deduction produces class names to be resolved\r\n        case DEDUCTION:\r\n        case CLASS:\r\n            return ClassNameIdResolver.construct(baseType, config, subtypes, subtypeValidator);\r\n        case MINIMAL_CLASS:\r\n            return MinimalClassNameIdResolver.construct(baseType, config, subtypes, subtypeValidator);\r\n        case SIMPLE_NAME:\r\n            return SimpleNameIdResolver.construct(config, baseType, subtypes, forSer, forDeser);\r\n        case NAME:\r\n            return TypeNameIdResolver.construct(config, baseType, subtypes, forSer, forDeser);\r\n        case // hmmh. should never get this far with \u0027none\u0027\r\n        NONE:\r\n            return null;\r\n        // need custom resolver...\r\n        case CUSTOM:\r\n    }\r\n    throw new IllegalStateException(\"Do not know how to construct standard type id resolver for idType: \" + _idType);\r\n}"
      },
      {
        "name": "StdTypeResolverBuilder#allowPrimitiveTypes(...2)",
        "body": "{\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "methodName": "buildTypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer buildTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    if (_idType \u003d\u003d JsonTypeInfo.Id.NONE) {\r\n        return null;\r\n    }\r\n    // 03-Oct-2016, tatu: As per [databind#1395] better prevent use for primitives,\r\n    //    regardless of setting\r\n    if (baseType.isPrimitive()) {\r\n        // 19-Jun-2020, tatu: But for [databind#2753], allow overriding\r\n        if (!allowPrimitiveTypes(config, baseType)) {\r\n            return null;\r\n        }\r\n    }\r\n    // 27-Apr-2019, tatu: Part of [databind#2195]; must first check whether any subtypes\r\n    //    of basetypes might be denied or allowed\r\n    final PolymorphicTypeValidator subTypeValidator \u003d verifyBaseTypeValidity(config, baseType);\r\n    TypeIdResolver idRes \u003d idResolver(config, baseType, subTypeValidator, subtypes, false, true);\r\n    JavaType defaultImpl \u003d defineDefaultImpl(config, baseType);\r\n    if (_idType \u003d\u003d JsonTypeInfo.Id.DEDUCTION) {\r\n        // Deduction doesn\u0027t require an includeAs property\r\n        return new AsDeductionTypeDeserializer(baseType, idRes, defaultImpl, config, subtypes);\r\n    }\r\n    // First, method for converting type info to type id:\r\n    switch(_includeAs) {\r\n        case WRAPPER_ARRAY:\r\n            return new AsArrayTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, defaultImpl);\r\n        case PROPERTY:\r\n        case // as per [#528] same class as PROPERTY\r\n        EXISTING_PROPERTY:\r\n            return new AsPropertyTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, defaultImpl, _includeAs, _strictTypeIdHandling(config, baseType));\r\n        case WRAPPER_OBJECT:\r\n            return new AsWrapperTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, defaultImpl);\r\n        case EXTERNAL_PROPERTY:\r\n            return new AsExternalTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, defaultImpl);\r\n    }\r\n    throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \" + _includeAs);\r\n}",
    "nodes": 13,
    "edges": 13,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d $r1) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B5",
      "B3 : If($z6 !\u003d 0) → B4 | else → B5",
      "B5 : If($r7 !\u003d $r6) → B6 | else → B7",
      "B7 : If(switch-on $i1) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  StdTypeResolverBuilder\n  DeserializationConfig\n  JavaType\n  Collection\n  $r2 \u003d JsonTypeInfo$Id _idType\u003e\n  $r1 \u003d JsonTypeInfo$Id NONE\u003e\n  if ($r2 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r3.isPrimitive()\n  if ($z0 \u003d\u003d false) goto B3 else B5\n}",
      "B3 {\n  $z6 \u003d r0.allowPrimitiveTypes(r4, r3)\n  if ($z6 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r24 \u003d r0.verifyBaseTypeValidity(r4, r3)\n  $r25 \u003d r0.idResolver(r4, r3, $r24, r5, 0, 1)\n  $r26 \u003d r0.defineDefaultImpl(r4, r3)\n  $r7 \u003d JsonTypeInfo$Id _idType\u003e\n  $r6 \u003d JsonTypeInfo$Id DEDUCTION\u003e\n  if ($r7 !\u003d $r6) goto B6 else B7\n}",
      "B6 {\n  $r23 \u003d AsDeductionTypeDeserializer\n  new AsDeductionTypeDeserializer(r3, $r25, $r26, r4, r5)\n  return\n}",
      "B7 {\n  $r9 \u003d StdTypeResolverBuilder$1: int[] $SwitchMap$com$fasterxml$jackson$annotation$JsonTypeInfo$As\u003e\n  $r8 \u003d JsonTypeInfo$As _includeAs\u003e\n  $i0 \u003d $r8.ordinal()\n  $i1 \u003d $r9[$i0]\n  IllegalStateException; }\n}",
      "B8 {\n  $r17 \u003d AsArrayTypeDeserializer\n  $r18 \u003d String _typeProperty\u003e\n  $z5 \u003d StdTypeResolverBuilder: boolean _typeIdVisible\u003e\n  new AsArrayTypeDeserializer(r3, $r25, $r18, $z5, $r26)\n  return\n}",
      "B9 {\n  $r14 \u003d AsPropertyTypeDeserializer\n  $r15 \u003d String _typeProperty\u003e\n  $z3 \u003d StdTypeResolverBuilder: boolean _typeIdVisible\u003e\n  $r16 \u003d JsonTypeInfo$As _includeAs\u003e\n  $z4 \u003d r0._strictTypeIdHandling(r4, r3)\n  new AsPropertyTypeDeserializer(r3, $r25, $r15, $z3, $r26, $r16, $z4)\n  return\n}",
      "B10 {\n  $r12 \u003d AsWrapperTypeDeserializer\n  $r13 \u003d String _typeProperty\u003e\n  $z2 \u003d StdTypeResolverBuilder: boolean _typeIdVisible\u003e\n  new AsWrapperTypeDeserializer(r3, $r25, $r13, $z2, $r26)\n  return\n}",
      "B11 {\n  $r10 \u003d AsExternalTypeDeserializer\n  $r11 \u003d String _typeProperty\u003e\n  $z1 \u003d StdTypeResolverBuilder: boolean _typeIdVisible\u003e\n  new AsExternalTypeDeserializer(r3, $r25, $r11, $z1, $r26)\n  return\n}",
      "B12 {\n  $r19 \u003d IllegalStateException\n  $r20 \u003d JsonTypeInfo$As _includeAs\u003e\n  $r21 \u003d String.valueOf($r20)\n  $r22 \u003d dynInvoke makeConcatWithConstants($r21)\n  new IllegalStateException($r22)\n  throw $r19\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B7 --\u003e B10",
      "B7 --\u003e B11",
      "B7 --\u003e B12",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdTypeResolverBuilder#defineDefaultImpl(...2)",
        "body": "{\r\n    if (_defaultImpl !\u003d null) {\r\n        // 20-Mar-2016, tatu: It is important to do specialization go through\r\n        //   TypeFactory to ensure proper resolution; with 2.7 and before, direct\r\n        //   call to JavaType was used, but that cannot work reliably with 2.7\r\n        // 20-Mar-2016, tatu: Can finally add a check for type compatibility BUT\r\n        //   if so, need to add explicit checks for marker types. Not ideal, but\r\n        //   seems like a reasonable compromise.\r\n        if ((_defaultImpl \u003d\u003d Void.class) || (_defaultImpl \u003d\u003d NoClass.class)) {\r\n            // 18-Sep-2021, tatu: This has specific meaning: these two markers will\r\n            //    be used to conjure `null` value out of invalid type ids\r\n            return config.getTypeFactory().constructType(_defaultImpl);\r\n        }\r\n        if (baseType.hasRawClass(_defaultImpl)) {\r\n            // tiny optimization\r\n            return baseType;\r\n        }\r\n        if (baseType.isTypeOrSuperTypeOf(_defaultImpl)) {\r\n            // most common case with proper base type...\r\n            return config.getTypeFactory().constructSpecializedType(baseType, _defaultImpl);\r\n        }\r\n        if (baseType.hasRawClass(_defaultImpl)) {\r\n            return baseType;\r\n        }\r\n    }\r\n    // use base type as default should always be used as the last choice.\r\n    if (config.isEnabled(MapperFeature.USE_BASE_TYPE_AS_DEFAULT_IMPL) \u0026\u0026 !baseType.isAbstract()) {\r\n        // still can not resolve by default impl, fall back to use base type as default impl\r\n        return baseType;\r\n    }\r\n    return null;\r\n}"
      },
      {
        "name": "StdTypeResolverBuilder#_strictTypeIdHandling(...2)",
        "body": "{\r\n    // [databind#3877]: per-type strict type handling, since 2.16\r\n    if (_requireTypeIdForSubtypes !\u003d null \u0026\u0026 baseType.isConcrete()) {\r\n        return _requireTypeIdForSubtypes;\r\n    }\r\n    if (config.isEnabled(MapperFeature.REQUIRE_TYPE_ID_FOR_SUBTYPES)) {\r\n        return true;\r\n    }\r\n    // Otherwise we will be strict if there\u0027s a type resolver: presumably\r\n    // target type is a (likely abstract) base type and cannot be used as target\r\n    return _hasTypeResolver(config, baseType);\r\n}"
      },
      {
        "name": "StdTypeResolverBuilder#idResolver(...6)",
        "body": "{\r\n    // Custom id resolver?\r\n    if (_customIdResolver !\u003d null) {\r\n        return _customIdResolver;\r\n    }\r\n    if (_idType \u003d\u003d null)\r\n        throw new IllegalStateException(\"Cannot build, \u0027init()\u0027 not yet called\");\r\n    switch(_idType) {\r\n        // Deduction produces class names to be resolved\r\n        case DEDUCTION:\r\n        case CLASS:\r\n            return ClassNameIdResolver.construct(baseType, config, subtypes, subtypeValidator);\r\n        case MINIMAL_CLASS:\r\n            return MinimalClassNameIdResolver.construct(baseType, config, subtypes, subtypeValidator);\r\n        case SIMPLE_NAME:\r\n            return SimpleNameIdResolver.construct(config, baseType, subtypes, forSer, forDeser);\r\n        case NAME:\r\n            return TypeNameIdResolver.construct(config, baseType, subtypes, forSer, forDeser);\r\n        case // hmmh. should never get this far with \u0027none\u0027\r\n        NONE:\r\n            return null;\r\n        // need custom resolver...\r\n        case CUSTOM:\r\n    }\r\n    throw new IllegalStateException(\"Do not know how to construct standard type id resolver for idType: \" + _idType);\r\n}"
      },
      {
        "name": "StdTypeResolverBuilder#allowPrimitiveTypes(...2)",
        "body": "{\r\n    return false;\r\n}"
      },
      {
        "name": "StdTypeResolverBuilder#verifyBaseTypeValidity(...2)",
        "body": "{\r\n    final PolymorphicTypeValidator ptv \u003d subTypeValidator(config);\r\n    if (_idType \u003d\u003d JsonTypeInfo.Id.CLASS || _idType \u003d\u003d JsonTypeInfo.Id.MINIMAL_CLASS) {\r\n        final PolymorphicTypeValidator.Validity validity \u003d ptv.validateBaseType(config, baseType);\r\n        // If no subtypes are legal (that is, base type itself is invalid), indicate problem\r\n        if (validity \u003d\u003d PolymorphicTypeValidator.Validity.DENIED) {\r\n            return reportInvalidBaseType(config, baseType, ptv);\r\n        }\r\n        // If there\u0027s indication that any and all subtypes are fine, replace validator itself:\r\n        if (validity \u003d\u003d PolymorphicTypeValidator.Validity.ALLOWED) {\r\n            return LaissezFaireSubTypeValidator.instance;\r\n        }\r\n        // otherwise just return validator, is to be called for each distinct type\r\n    }\r\n    return ptv;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "methodName": "init",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder init(com.fasterxml.jackson.\u0027annotation\u0027.JsonTypeInfo$Id,com.fasterxml.jackson.databind.jsontype.TypeIdResolver)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdTypeResolverBuilder\n  JsonTypeInfo$Id\n  TypeIdResolver\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"idType cannot be null\")\n  throw $r4\n}",
      "B2 {\n  JsonTypeInfo$Id _idType\u003e \u003d r0\n  TypeIdResolver _customIdResolver\u003e \u003d r2\n  $r3 \u003d r1._propName(null, r0)\n  String _typeProperty\u003e \u003d $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "methodName": "init",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder init(com.fasterxml.jackson.\u0027annotation\u0027.JsonTypeInfo$Value,com.fasterxml.jackson.databind.jsontype.TypeIdResolver)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdTypeResolverBuilder\n  JsonTypeInfo$Value\n  TypeIdResolver\n  TypeIdResolver _customIdResolver\u003e \u003d r1\n  if (r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r0.withSettings(r2)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "methodName": "inclusion",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder inclusion(com.fasterxml.jackson.\u0027annotation\u0027.JsonTypeInfo$As)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdTypeResolverBuilder\n  JsonTypeInfo$As\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"includeAs cannot be null\")\n  throw $r2\n}",
      "B2 {\n  JsonTypeInfo$As _includeAs\u003e \u003d r0\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "methodName": "withDefaultImpl",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder withDefaultImpl(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (_defaultImpl \u003d\u003d defaultImpl) {\r\n        return this;\r\n    }\r\n    ClassUtil.verifyMustOverride(StdTypeResolverBuilder.class, this, \"withDefaultImpl\");\r\n    // NOTE: MUST create new instance, NOT modify this instance\r\n    return new StdTypeResolverBuilder(this, defaultImpl);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdTypeResolverBuilder\n  Class\n  $r2 \u003d Class _defaultImpl\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  ClassUtil.verifyMustOverride(class \"Lcom/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder;\", r0, \"withDefaultImpl\")\n  $r3 \u003d StdTypeResolverBuilder\n  new StdTypeResolverBuilder(r0, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
    "methodName": "validateSubType",
    "signature": "void validateSubType(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)",
    "visibility": "public",
    "body": "{\r\n    // There are certain nasty classes that could cause problems, mostly\r\n    // via default typing -- catch them here.\r\n    final Class\u003c?\u003e raw \u003d type.getRawClass();\r\n    String full \u003d raw.getName();\r\n    main_check: do {\r\n        if (_cfgIllegalClassNames.contains(full)) {\r\n            break;\r\n        }\r\n        // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\r\n        //    for some Spring framework types\r\n        // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\r\n        if (raw.isInterface()) {\r\n            // skip\r\n            ;\r\n        } else if (full.startsWith(PREFIX_SPRING)) {\r\n            for (Class\u003c?\u003e cls \u003d raw; (cls !\u003d null) \u0026\u0026 (cls !\u003d Object.class); cls \u003d cls.getSuperclass()) {\r\n                String name \u003d cls.getSimpleName();\r\n                // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\r\n                if (\"AbstractPointcutAdvisor\".equals(name) || // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\r\n                \"AbstractApplicationContext\".equals(name)) {\r\n                    break main_check;\r\n                }\r\n            }\r\n        } else if (full.startsWith(PREFIX_C3P0)) {\r\n            // [databind#1737]; more 3rd party\r\n            // s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\r\n            // s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");\r\n            // [databind#1931]; more 3rd party\r\n            // com.mchange.v2.c3p0.ComboPooledDataSource\r\n            // com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource\r\n            if (full.endsWith(\"DataSource\")) {\r\n                break main_check;\r\n            }\r\n        }\r\n        return;\r\n    } while (false);\r\n    ctxt.reportBadTypeDefinition(beanDesc, \"Illegal type (%s) to deserialize: prevented for security reasons\", full);\r\n}",
    "nodes": 18,
    "edges": 25,
    "cc": 9,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B13",
      "B6 : If(r10 \u003d\u003d null) → B7 | else → B12",
      "B7 : If(r10 \u003d\u003d class \"Ljava/lang/Object;\") → B8 | else → B12",
      "B8 : If($z5 !\u003d 0) → B9 | else → B17",
      "B9 : If($z6 \u003d\u003d false) → B10 | else → B11",
      "B13 : If($z3 \u003d\u003d false) → B14 | else → B16",
      "B14 : If($z4 \u003d\u003d false) → B15 | else → B16"
    ],
    "blockList": [
      "B0 {\n  SubTypeValidator\n  DeserializationContext\n  JavaType\n  BeanDescription\n  r1 \u003d r0.getRawClass()\n  r2 \u003d r1.getName()\n  $r4 \u003d Set _cfgIllegalClassNames\u003e\n  $z0 \u003d $r4.contains(r2)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  goto B17\n}",
      "B2 {\n  $z1 \u003d r1.isInterface()\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  goto B16\n}",
      "B4 {\n  $z2 \u003d r2.startsWith(\"org.springframework.\")\n  if ($z2 \u003d\u003d false) goto B5 else B13\n}",
      "B5 {\n  r10 \u003d r1\n}",
      "B6 {\n  if (r10 \u003d\u003d null) goto B7 else B12\n}",
      "B7 {\n  if (r10 \u003d\u003d class \"Ljava/lang/Object;\") goto B8 else B12\n}",
      "B8 {\n  r7 \u003d r10.getSimpleName()\n  $r8 \u003d \"AbstractPointcutAdvisor\"\n  $z5 \u003d $r8.equals(r7)\n  if ($z5 !\u003d 0) goto B9 else B17\n}",
      "B9 {\n  $r9 \u003d \"AbstractApplicationContext\"\n  $z6 \u003d $r9.equals(r7)\n  if ($z6 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  goto B17\n}",
      "B11 {\n  r10 \u003d r10.getSuperclass()\n  goto B6\n}",
      "B12 {\n  goto B16\n}",
      "B13 {\n  $z3 \u003d r2.startsWith(\"com.mchange.v2.c3p0.\")\n  if ($z3 \u003d\u003d false) goto B14 else B16\n}",
      "B14 {\n  $z4 \u003d r2.endsWith(\"DataSource\")\n  if ($z4 \u003d\u003d false) goto B15 else B16\n}",
      "B15 {\n  goto B17\n}",
      "B16 {\n  return\n}",
      "B17 {\n  $r11 \u003d Object)[1]\n  $r11[0] \u003d r2\n  r5.reportBadTypeDefinition(r6, \"Illegal type (%s) to deserialize: prevented for security reasons\", $r11)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B17",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B16",
      "B4 --\u003e B5",
      "B4 --\u003e B13",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B12",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B17",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B17",
      "B11 --\u003e B6",
      "B12 --\u003e B16",
      "B13 --\u003e B14",
      "B13 --\u003e B16",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver",
    "methodName": "construct",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver construct(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection,boolean,boolean)",
    "visibility": "public",
    "body": "{\r\n    // sanity check\r\n    if (forSer \u003d\u003d forDeser)\r\n        throw new IllegalArgumentException();\r\n    final ConcurrentHashMap\u003cString, String\u003e typeToId;\r\n    final HashMap\u003cString, JavaType\u003e idToType;\r\n    if (forSer) {\r\n        // Only need Class-to-id for serialization; but synchronized since may be\r\n        // lazily built (if adding type-id-mappings dynamically)\r\n        typeToId \u003d new ConcurrentHashMap\u003c\u003e();\r\n        idToType \u003d null;\r\n    } else {\r\n        idToType \u003d new HashMap\u003c\u003e();\r\n        // 14-Apr-2016, tatu: Apparently needed for special case of `defaultImpl`;\r\n        //    see [databind#1198] for details: but essentially we only need room\r\n        //    for a single value.\r\n        typeToId \u003d new ConcurrentHashMap\u003c\u003e(4);\r\n    }\r\n    final boolean caseInsensitive \u003d config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_VALUES);\r\n    if (subtypes !\u003d null) {\r\n        for (NamedType t : subtypes) {\r\n            // no name? Need to figure out default; for now, let\u0027s just\r\n            // use non-qualified class name\r\n            Class\u003c?\u003e cls \u003d t.getType();\r\n            String id \u003d t.hasName() ? t.getName() : _defaultTypeId(cls);\r\n            if (forSer) {\r\n                typeToId.put(cls.getName(), id);\r\n            }\r\n            if (forDeser) {\r\n                // [databind#1983]: for case-insensitive lookups must canonicalize:\r\n                if (caseInsensitive) {\r\n                    id \u003d id.toLowerCase();\r\n                }\r\n                // One more problem; sometimes we have same name for multiple types;\r\n                // if so, use most specific\r\n                // lgtm [java/dereferenced-value-may-be-null]\r\n                JavaType prev \u003d idToType.get(id);\r\n                if (prev !\u003d null) {\r\n                    // Can only override if more specific\r\n                    if (cls.isAssignableFrom(prev.getRawClass())) {\r\n                        // nope, more generic (or same)\r\n                        continue;\r\n                    }\r\n                }\r\n                idToType.put(id, config.constructType(cls));\r\n            }\r\n        }\r\n    }\r\n    return new TypeNameIdResolver(config, baseType, typeToId, idToType);\r\n}",
    "nodes": 22,
    "edges": 30,
    "cc": 10,
    "flowSummary": [
      "B0 : If(z0 !\u003d z1) → B1 | else → B2",
      "B2 : If(z0 \u003d\u003d false) → B3 | else → B4",
      "B5 : If(r4 \u003d\u003d null) → B6 | else → B21",
      "B7 : If($z5 \u003d\u003d false) → B8 | else → B21",
      "B8 : If($z2 \u003d\u003d false) → B9 | else → B10",
      "B11 : If(z0 \u003d\u003d false) → B12 | else → B13",
      "B13 : If(z1 \u003d\u003d false) → B14 | else → B20",
      "B14 : If($z4 \u003d\u003d false) → B15 | else → B16",
      "B16 : If($r14 \u003d\u003d null) → B17 | else → B19",
      "B17 : If($z3 \u003d\u003d false) → B18 | else → B19"
    ],
    "blockList": [
      "B0 {\n  MapperConfig\n  JavaType\n  Collection\n  z0 :\u003d @parameter3: boolean\n  z1 :\u003d @parameter4: boolean\n  if (z0 !\u003d z1) goto B1 else B2\n}",
      "B1 {\n  $r17 \u003d IllegalArgumentException\n  new IllegalArgumentException()\n  throw $r17\n}",
      "B2 {\n  if (z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r16 \u003d ConcurrentHashMap\n  new ConcurrentHashMap()\n  r18 \u003d $r16\n  r19 \u003d null\n  goto B5\n}",
      "B4 {\n  $r0 \u003d HashMap\n  new HashMap()\n  r19 \u003d $r0\n  $r1 \u003d ConcurrentHashMap\n  new ConcurrentHashMap(4)\n  r18 \u003d $r1\n}",
      "B5 {\n  $r3 \u003d MapperFeature ACCEPT_CASE_INSENSITIVE_VALUES\u003e\n  $z4 \u003d r2.isEnabled($r3)\n  if (r4 \u003d\u003d null) goto B6 else B21\n}",
      "B6 {\n  r7 \u003d r4.iterator()\n}",
      "B7 {\n  $z5 \u003d r7.hasNext()\n  if ($z5 \u003d\u003d false) goto B8 else B21\n}",
      "B8 {\n  $r8 \u003d r7.next()\n  r9 \u003d NamedType) $r8\n  r10 \u003d r9.getType()\n  $z2 \u003d r9.hasName()\n  if ($z2 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r20 \u003d r9.getName()\n  goto B11\n}",
      "B10 {\n  $r20 \u003d TypeNameIdResolver._defaultTypeId(r10)\n}",
      "B11 {\n  r21 \u003d $r20\n  if (z0 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $r15 \u003d r10.getName()\n  r18.put($r15, $r20)\n}",
      "B13 {\n  if (z1 \u003d\u003d false) goto B14 else B20\n}",
      "B14 {\n  if ($z4 \u003d\u003d false) goto B15 else B16\n}",
      "B15 {\n  r21 \u003d r21.toLowerCase()\n}",
      "B16 {\n  $r11 \u003d r19.get(r21)\n  $r14 \u003d JavaType) $r11\n  if ($r14 \u003d\u003d null) goto B17 else B19\n}",
      "B17 {\n  $r13 \u003d $r14.getRawClass()\n  $z3 \u003d r10.isAssignableFrom($r13)\n  if ($z3 \u003d\u003d false) goto B18 else B19\n}",
      "B18 {\n  goto B7\n}",
      "B19 {\n  $r12 \u003d r2.constructType(r10)\n  r19.put(r21, $r12)\n}",
      "B20 {\n  goto B7\n}",
      "B21 {\n  $r5 \u003d TypeNameIdResolver\n  new TypeNameIdResolver(r2, r6, r18, r19)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B21",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B21",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B20",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B17",
      "B16 --\u003e B19",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B7",
      "B19 --\u003e B20",
      "B20 --\u003e B7",
      "B21 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeNameIdResolver#_defaultTypeId(...1)",
        "body": "{\r\n    String n \u003d cls.getName();\r\n    int ix \u003d n.lastIndexOf(\u0027.\u0027);\r\n    return (ix \u003c 0) ? n : n.substring(ix + 1);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver",
    "methodName": "idFromValueAndType",
    "signature": "java.lang.String idFromValueAndType(java.lang.Object,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    // 18-Jan-2013, tatu: We may be called with null value occasionally\r\n    //   it seems; nothing much we can figure out that way.\r\n    if (value \u003d\u003d null) {\r\n        return idFromClass(type);\r\n    }\r\n    return idFromValue(value);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TypeNameIdResolver\n  Object\n  Class\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r1.idFromClass(r3)\n  return\n}",
      "B2 {\n  $r2 \u003d r1.idFromValue(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeNameIdResolver#idFromClass(...1)",
        "body": "{\r\n    if (clazz \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // 04-Nov-2024, tatu: [databind#4733] Need to resolve enum sub-classes\r\n    //   same way \"ClassNameIdResolver\" does\r\n    clazz \u003d _resolveToParentAsNecessary(clazz);\r\n    // NOTE: although we may need to let `TypeModifier` change actual type to use\r\n    // for id, we can use original type as key for more efficient lookup:\r\n    final String key \u003d clazz.getName();\r\n    String name \u003d _typeToId.get(key);\r\n    if (name \u003d\u003d null) {\r\n        // 29-Nov-2019, tatu: As per test in `TestTypeModifierNameResolution` somehow\r\n        //    we need to do this odd piece here which seems unnecessary but isn\u0027t.\r\n        Class\u003c?\u003e cls \u003d _typeFactory.constructType(clazz).getRawClass();\r\n        // 24-Feb-2011, tatu: As per [JACKSON-498], may need to dynamically look up name\r\n        // can either throw an exception, or use default name...\r\n        if (_config.isAnnotationProcessingEnabled()) {\r\n            BeanDescription beanDesc \u003d _config.introspectClassAnnotations(cls);\r\n            name \u003d _config.getAnnotationIntrospector().findTypeName(beanDesc.getClassInfo());\r\n        }\r\n        if (name \u003d\u003d null) {\r\n            // And if still not found, let\u0027s choose default?\r\n            name \u003d _defaultTypeId(cls);\r\n        }\r\n        _typeToId.put(key, name);\r\n    }\r\n    return name;\r\n}"
      },
      {
        "name": "TypeNameIdResolver#idFromValue(...1)",
        "body": "{\r\n    return idFromClass(value.getClass());\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver",
    "methodName": "getDescForKnownTypeIds",
    "signature": "java.lang.String getDescForKnownTypeIds()",
    "visibility": "public",
    "body": "{\r\n    // 05-May-2020, tatu: As per [databind#1919], only include ids for\r\n    //    non-abstract types\r\n    final TreeSet\u003cString\u003e ids \u003d new TreeSet\u003c\u003e();\r\n    for (Map.Entry\u003cString, JavaType\u003e entry : _idToType.entrySet()) {\r\n        if (entry.getValue().isConcrete()) {\r\n            ids.add(entry.getKey());\r\n        }\r\n    }\r\n    return ids.toString();\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  TypeNameIdResolver\n  $r0 \u003d TreeSet\n  new TreeSet()\n  $r2 \u003d Map _idToType\u003e\n  $r3 \u003d $r2.entrySet()\n  r4 \u003d $r3.iterator()\n}",
      "B1 {\n  $z0 \u003d r4.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r6 \u003d r4.next()\n  r7 \u003d Map$Entry) $r6\n  $r8 \u003d r7.getValue()\n  $r9 \u003d JavaType) $r8\n  $z1 \u003d $r9.isConcrete()\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r10 \u003d r7.getKey()\n  $r11 \u003d String) $r10\n  $r0.add($r11)\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  $r5 \u003d $r0.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.NamedType",
    "methodName": "setName",
    "signature": "void setName(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    _name \u003d (name \u003d\u003d null || name.isEmpty()) ? null : name;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  NamedType\n  String\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r1.isEmpty()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d null\n  goto B4\n}",
      "B3 {\n  $r2 \u003d r1\n}",
      "B4 {\n  String _name\u003e \u003d $r2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.NamedType",
    "methodName": "hasName",
    "signature": "boolean hasName()",
    "visibility": "public",
    "body": "{\r\n    return _name !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NamedType\n  $r1 \u003d String _name\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.NamedType",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    if (o.getClass() !\u003d getClass())\r\n        return false;\r\n    NamedType other \u003d (NamedType) o;\r\n    return (_class \u003d\u003d other._class) \u0026\u0026 Objects.equals(_name, other._name);\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($r3 \u003d\u003d $r2) → B5 | else → B6",
      "B6 : If($r6 !\u003d $r5) → B7 | else → B9",
      "B7 : If($z0 \u003d\u003d false) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  NamedType\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d r0.getClass()\n  $r2 \u003d r1.getClass()\n  if ($r3 \u003d\u003d $r2) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  r4 \u003d NamedType) r0\n  $r6 \u003d Class _class\u003e\n  $r5 \u003d Class _class\u003e\n  if ($r6 !\u003d $r5) goto B7 else B9\n}",
      "B7 {\n  $r8 \u003d String _name\u003e\n  $r7 \u003d String _name\u003e\n  $z0 \u003d Objects.equals($r8, $r7)\n  if ($z0 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $z1 \u003d 1\n  goto B10\n}",
      "B9 {\n  $z1 \u003d 0\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NamedType#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.jsontype.NamedType",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    return \"[NamedType, class \" + _class.getName() + \", name: \" + (_name \u003d\u003d null ? \"null\" : (\"\u0027\" + _name + \"\u0027\")) + \"]\";\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NamedType\n  $r1 \u003d Class _class\u003e\n  $r4 \u003d $r1.getName()\n  $r2 \u003d String _name\u003e\n  if ($r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d \"null\"\n  goto B3\n}",
      "B2 {\n  $r3 \u003d String _name\u003e\n  $r6 \u003d dynInvoke makeConcatWithConstants($r3)\n}",
      "B3 {\n  $r5 \u003d dynInvoke makeConcatWithConstants($r4, $r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.MapperFeature",
    "methodName": "collectLongDefaults",
    "signature": "long collectLongDefaults()",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d i0) → B2 | else → B5",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  l2 \u003d 0L\n  r0 \u003d MapperFeature.values()\n  i0 \u003d lengthof r0\n  i3 \u003d 0\n}",
      "B1 {\n  if (i3 \u003e\u003d i0) goto B2 else B5\n}",
      "B2 {\n  r1 \u003d r0[i3]\n  $z0 \u003d r1.enabledByDefault()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $l1 \u003d r1.getLongMask()\n  l2 \u003d l2 | $l1\n}",
      "B4 {\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.MapperFeature",
    "methodName": "enabledIn",
    "signature": "boolean enabledIn(int)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($b4 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MapperFeature\n  i0 :\u003d @parameter0: int\n  $l2 \u003d (long) i0\n  $l1 \u003d MapperFeature: long _mask\u003e\n  $l3 \u003d $l2 \u0026 $l1\n  $b4 \u003d $l3 cmp 0L\n  if ($b4 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.MapperFeature",
    "methodName": "enabledIn",
    "signature": "boolean enabledIn(long)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($b3 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MapperFeature\n  l0 :\u003d @parameter0: long\n  $l1 \u003d MapperFeature: long _mask\u003e\n  $l2 \u003d l0 \u0026 $l1\n  $b3 \u003d $l2 cmp 0L\n  if ($b3 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.MappingIterator",
    "methodName": "close",
    "signature": "void close()",
    "visibility": "public",
    "body": "{\r\n    if (_state !\u003d STATE_CLOSED) {\r\n        _state \u003d STATE_CLOSED;\r\n        if (_parser !\u003d null) {\r\n            _parser.close();\r\n        }\r\n    }\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($r1 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MappingIterator\n  $i0 \u003d MappingIterator: int _state\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  MappingIterator: int _state\u003e \u003d 0\n  $r1 \u003d JsonParser _parser\u003e\n  if ($r1 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d JsonParser _parser\u003e\n  $r2.close()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.MappingIterator",
    "methodName": "hasNextValue",
    "signature": "boolean hasNextValue()",
    "visibility": "public",
    "body": "{\r\n    switch(_state) {\r\n        case STATE_CLOSED:\r\n            return false;\r\n        case STATE_NEED_RESYNC:\r\n            _resync();\r\n        // fall-through\r\n        case STATE_MAY_HAVE_VALUE:\r\n            if (_parser \u003d\u003d null) {\r\n                return false;\r\n            }\r\n            JsonToken t \u003d _parser.currentToken();\r\n            if (t \u003d\u003d null) {\r\n                // un-initialized or cleared; find next\r\n                t \u003d _parser.nextToken();\r\n                // If EOF, no more, or if we hit END_ARRAY (although we don\u0027t clear the token).\r\n                if (t \u003d\u003d null || t \u003d\u003d JsonToken.END_ARRAY) {\r\n                    _state \u003d STATE_CLOSED;\r\n                    if (_closeParser) {\r\n                        _parser.close();\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n            _state \u003d STATE_HAS_VALUE;\r\n            return true;\r\n        case STATE_HAS_VALUE:\r\n    }\r\n    return true;\r\n}",
    "nodes": 13,
    "edges": 16,
    "cc": 5,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B2",
      "B3 : If($r1 !\u003d null) → B4 | else → B5",
      "B5 : If(r6 !\u003d null) → B6 | else → B11",
      "B6 : If(r7 \u003d\u003d null) → B7 | else → B8",
      "B7 : If(r7 !\u003d $r5) → B8 | else → B11",
      "B8 : If($z0 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  MappingIterator\n  $i0 \u003d MappingIterator: int _state\u003e\n  JsonParser _parser\u003e;     case 3: goto return 1;     default: goto return 1; }\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r0._resync()\n}",
      "B3 {\n  $r1 \u003d JsonParser _parser\u003e\n  if ($r1 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r2 \u003d JsonParser _parser\u003e\n  r6 \u003d $r2.currentToken()\n  if (r6 !\u003d null) goto B6 else B11\n}",
      "B6 {\n  $r3 \u003d JsonParser _parser\u003e\n  r7 \u003d $r3.nextToken()\n  if (r7 \u003d\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r5 \u003d JsonToken END_ARRAY\u003e\n  if (r7 !\u003d $r5) goto B8 else B11\n}",
      "B8 {\n  MappingIterator: int _state\u003e \u003d 0\n  $z0 \u003d MappingIterator: boolean _closeParser\u003e\n  if ($z0 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r4 \u003d JsonParser _parser\u003e\n  $r4.close()\n}",
      "B10 {\n  return\n}",
      "B11 {\n  MappingIterator: int _state\u003e \u003d 3\n  return\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B0 --\u003e B12",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B11",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MappingIterator#_resync(...0)",
        "body": "{\r\n    final JsonParser p \u003d _parser;\r\n    // First, a quick check to see if we might have been lucky and no re-sync needed\r\n    if (p.getParsingContext() \u003d\u003d _seqContext) {\r\n        return;\r\n    }\r\n    while (true) {\r\n        JsonToken t \u003d p.nextToken();\r\n        if ((t \u003d\u003d JsonToken.END_ARRAY) || (t \u003d\u003d JsonToken.END_OBJECT)) {\r\n            if (p.getParsingContext() \u003d\u003d _seqContext) {\r\n                p.clearCurrentToken();\r\n                return;\r\n            }\r\n        } else if ((t \u003d\u003d JsonToken.START_ARRAY) || (t \u003d\u003d JsonToken.START_OBJECT)) {\r\n            p.skipChildren();\r\n        } else if (t \u003d\u003d null) {\r\n            return;\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.MappingIterator",
    "methodName": "nextValue",
    "signature": "java.lang.Object nextValue()",
    "visibility": "public",
    "body": "{\r\n    switch(_state) {\r\n        case STATE_CLOSED:\r\n            return _throwNoSuchElement();\r\n        // fall-through, will do re-sync\r\n        case STATE_NEED_RESYNC:\r\n        case STATE_MAY_HAVE_VALUE:\r\n            if (!hasNextValue()) {\r\n                return _throwNoSuchElement();\r\n            }\r\n            break;\r\n        case STATE_HAS_VALUE:\r\n            break;\r\n    }\r\n    int nextState \u003d STATE_NEED_RESYNC;\r\n    try {\r\n        T value;\r\n        if (_updatedValue \u003d\u003d null) {\r\n            value \u003d _deserializer.deserialize(_parser, _context);\r\n        } else {\r\n            _deserializer.deserialize(_parser, _context, _updatedValue);\r\n            value \u003d _updatedValue;\r\n        }\r\n        nextState \u003d STATE_MAY_HAVE_VALUE;\r\n        return value;\r\n    } finally {\r\n        _state \u003d nextState;\r\n        /* 24-Mar-2015, tatu: As per [#733], need to mark token consumed no\r\n             *   matter what, to avoid infinite loop for certain failure cases.\r\n             *   For 2.6 need to improve further.\r\n             */\r\n        _parser.clearCurrentToken();\r\n    }\r\n}",
    "nodes": 9,
    "edges": 9,
    "cc": 2,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($r1 !\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  MappingIterator\n  $i0 \u003d MappingIterator: int _state\u003e\n  MappingIterator: boolean hasNextValue()\u003e();     case 3: goto b1 \u003d 1;     default: goto b1 \u003d 1; }\n}",
      "B1 {\n  $r11 \u003d r0._throwNoSuchElement()\n  return\n}",
      "B2 {\n  $z0 \u003d r0.hasNextValue()\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r10 \u003d r0._throwNoSuchElement()\n  return\n}",
      "B4 {\n  b1 \u003d 1\n  $r1 \u003d Object _updatedValue\u003e\n  if ($r1 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r9 \u003d JsonDeserializer _deserializer\u003e\n  $r8 \u003d JsonParser _parser\u003e\n  $r7 \u003d DeserializationContext _context\u003e\n  r14 \u003d $r9.deserialize($r8, $r7)\n  goto B7\n}",
      "B6 {\n  $r5 \u003d JsonDeserializer _deserializer\u003e\n  $r4 \u003d JsonParser _parser\u003e\n  $r3 \u003d DeserializationContext _context\u003e\n  $r2 \u003d Object _updatedValue\u003e\n  $r5.deserialize($r4, $r3, $r2)\n  r14 \u003d Object _updatedValue\u003e\n}",
      "B7 {\n  b1 \u003d 2\n  MappingIterator: int _state\u003e \u003d 2\n  $r6 \u003d JsonParser _parser\u003e\n  $r6.clearCurrentToken()\n  return\n}",
      "B8 {\n  $r12 :\u003d @caughtexception\n  MappingIterator: int _state\u003e \u003d 1\n  $r13 \u003d JsonParser _parser\u003e\n  $r13.clearCurrentToken()\n  throw $r12\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B0 --\u003e B4",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MappingIterator#hasNextValue(...0)",
        "body": "{\r\n    switch(_state) {\r\n        case STATE_CLOSED:\r\n            return false;\r\n        case STATE_NEED_RESYNC:\r\n            _resync();\r\n        // fall-through\r\n        case STATE_MAY_HAVE_VALUE:\r\n            if (_parser \u003d\u003d null) {\r\n                return false;\r\n            }\r\n            JsonToken t \u003d _parser.currentToken();\r\n            if (t \u003d\u003d null) {\r\n                // un-initialized or cleared; find next\r\n                t \u003d _parser.nextToken();\r\n                // If EOF, no more, or if we hit END_ARRAY (although we don\u0027t clear the token).\r\n                if (t \u003d\u003d null || t \u003d\u003d JsonToken.END_ARRAY) {\r\n                    _state \u003d STATE_CLOSED;\r\n                    if (_closeParser) {\r\n                        _parser.close();\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n            _state \u003d STATE_HAS_VALUE;\r\n            return true;\r\n        case STATE_HAS_VALUE:\r\n    }\r\n    return true;\r\n}"
      },
      {
        "name": "MappingIterator#_throwNoSuchElement(...0)",
        "body": "{\r\n    throw new NoSuchElementException();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.MappingIterator",
    "methodName": "readAll",
    "signature": "java.util.List readAll(java.util.List)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MappingIterator\n  List\n}",
      "B1 {\n  $z0 \u003d r0.hasNextValue()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r0.nextValue()\n  r1.add($r2)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.MappingIterator",
    "methodName": "readAll",
    "signature": "java.util.Collection readAll(java.util.Collection)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MappingIterator\n  Collection\n}",
      "B1 {\n  $z0 \u003d r0.hasNextValue()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r0.nextValue()\n  r1.add($r2)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.MappingJsonFactory",
    "methodName": "hasFormat",
    "signature": "com.fasterxml.jackson.core.format.MatchStrength hasFormat(com.fasterxml.jackson.core.format.InputAccessor)",
    "visibility": "public",
    "body": "{\r\n    if (getClass() \u003d\u003d MappingJsonFactory.class) {\r\n        return hasJSONFormat(acc);\r\n    }\r\n    return null;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d class \"Lcom/fasterxml/jackson/databind/MappingJsonFactory;\") → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MappingJsonFactory\n  InputAccessor\n  $r1 \u003d r0.getClass()\n  if ($r1 !\u003d class \"Lcom/fasterxml/jackson/databind/MappingJsonFactory;\") goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.hasJSONFormat(r2)\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MappingJsonFactory#hasJSONFormat(...1)",
        "body": "(source not found)"
      },
      {
        "name": "MappingJsonFactory#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver",
    "methodName": "addMapping",
    "signature": "com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver addMapping(java.lang.Class,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    // Sanity checks, just in case someone tries to force typing...\r\n    if (superType \u003d\u003d subType) {\r\n        throw new IllegalArgumentException(\"Cannot add mapping from class to itself\");\r\n    }\r\n    if (!superType.isAssignableFrom(subType)) {\r\n        throw new IllegalArgumentException(\"Cannot add mapping from class \" + superType.getName() + \" to \" + subType.getName() + \", as latter is not a subtype of former\");\r\n    }\r\n    if (!Modifier.isAbstract(superType.getModifiers())) {\r\n        throw new IllegalArgumentException(\"Cannot add mapping from class \" + superType.getName() + \" since it is not abstract\");\r\n    }\r\n    _mappings.put(new ClassKey(superType), subType);\r\n    return this;\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  SimpleAbstractTypeResolver\n  Class\n  Class\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $r12 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Cannot add mapping from class to itself\")\n  throw $r12\n}",
      "B2 {\n  $z0 \u003d r0.isAssignableFrom(r1)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r8 \u003d IllegalArgumentException\n  $r10 \u003d r0.getName()\n  $r9 \u003d r1.getName()\n  $r11 \u003d dynInvoke makeConcatWithConstants($r10, $r9)\n  new IllegalArgumentException($r11)\n  throw $r8\n}",
      "B4 {\n  $i0 \u003d r0.getModifiers()\n  $z1 \u003d Modifier.isAbstract($i0)\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r5 \u003d IllegalArgumentException\n  $r6 \u003d r0.getName()\n  $r7 \u003d dynInvoke makeConcatWithConstants($r6)\n  new IllegalArgumentException($r7)\n  throw $r5\n}",
      "B6 {\n  $r4 \u003d HashMap _mappings\u003e\n  $r3 \u003d ClassKey\n  new ClassKey(r0)\n  $r4.put($r3, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver",
    "methodName": "findTypeMapping",
    "signature": "com.fasterxml.jackson.databind.JavaType findTypeMapping(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    // this is the main mapping base, so let\u0027s\r\n    Class\u003c?\u003e src \u003d type.getRawClass();\r\n    Class\u003c?\u003e dst \u003d _mappings.get(new ClassKey(src));\r\n    if (dst \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // 09-Aug-2015, tatu: Instead of direct call via JavaType, better use TypeFactory\r\n    return config.getTypeFactory().constructSpecializedType(type, dst);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r6 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleAbstractTypeResolver\n  DeserializationConfig\n  JavaType\n  r1 \u003d r0.getRawClass()\n  $r4 \u003d HashMap _mappings\u003e\n  $r3 \u003d ClassKey\n  new ClassKey(r1)\n  $r5 \u003d $r4.get($r3)\n  r6 \u003d Class) $r5\n  if (r6 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r8 \u003d r7.getTypeFactory()\n  $r9 \u003d $r8.constructSpecializedType(r0, r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleDeserializers",
    "methodName": "addDeserializer",
    "signature": "void addDeserializer(java.lang.Class,com.fasterxml.jackson.databind.JsonDeserializer)",
    "visibility": "public",
    "body": "{\r\n    ClassKey key \u003d new ClassKey(forClass);\r\n    if (_classMappings \u003d\u003d null) {\r\n        _classMappings \u003d new HashMap\u003cClassKey, JsonDeserializer\u003c?\u003e\u003e();\r\n    }\r\n    _classMappings.put(key, deser);\r\n    // [Issue#227]: generic Enum deserializer?\r\n    if (forClass \u003d\u003d Enum.class) {\r\n        _hasEnumDeserializer \u003d true;\r\n    }\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r3 !\u003d null) → B1 | else → B2",
      "B2 : If(r1 !\u003d class \"Ljava/lang/Enum;\") → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  SimpleDeserializers\n  Class\n  JsonDeserializer\n  $r0 \u003d ClassKey\n  new ClassKey(r1)\n  $r3 \u003d HashMap _classMappings\u003e\n  if ($r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d HashMap\n  new HashMap()\n  HashMap _classMappings\u003e \u003d $r6\n}",
      "B2 {\n  $r5 \u003d HashMap _classMappings\u003e\n  $r5.put($r0, r4)\n  if (r1 !\u003d class \"Ljava/lang/Enum;\") goto B3 else B4\n}",
      "B3 {\n  SimpleDeserializers: boolean _hasEnumDeserializer\u003e \u003d 1\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleDeserializers",
    "methodName": "addDeserializers",
    "signature": "void addDeserializers(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    for (Map.Entry\u003cClass\u003c?\u003e, JsonDeserializer\u003c?\u003e\u003e entry : desers.entrySet()) {\r\n        Class\u003c?\u003e cls \u003d entry.getKey();\r\n        // what a mess... nominal generics safety...\r\n        JsonDeserializer\u003cObject\u003e deser \u003d (JsonDeserializer\u003cObject\u003e) entry.getValue();\r\n        addDeserializer((Class\u003cObject\u003e) cls, deser);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SimpleDeserializers\n  Map\n  $r1 \u003d r0.entrySet()\n  r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d r2.next()\n  r4 \u003d Map$Entry) $r3\n  $r5 \u003d r4.getKey()\n  r6 \u003d Class) $r5\n  $r7 \u003d r4.getValue()\n  r8 \u003d JsonDeserializer) $r7\n  r9.addDeserializer(r6, r8)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleDeserializers#addDeserializer(...2)",
        "body": "{\r\n    ClassKey key \u003d new ClassKey(forClass);\r\n    if (_classMappings \u003d\u003d null) {\r\n        _classMappings \u003d new HashMap\u003cClassKey, JsonDeserializer\u003c?\u003e\u003e();\r\n    }\r\n    _classMappings.put(key, deser);\r\n    // [Issue#227]: generic Enum deserializer?\r\n    if (forClass \u003d\u003d Enum.class) {\r\n        _hasEnumDeserializer \u003d true;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleDeserializers",
    "methodName": "findEnumDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer findEnumDeserializer(java.lang.Class,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)",
    "visibility": "public",
    "body": "{\r\n    if (_classMappings \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    JsonDeserializer\u003c?\u003e deser \u003d _classMappings.get(new ClassKey(type));\r\n    if (deser \u003d\u003d null) {\r\n        // 29-Sep-2019, tatu: Not 100% sure this is workable logic but leaving\r\n        //   as is (wrt [databind#2457]. Probably works ok since this covers direct\r\n        //   sub-classes of `Enum`; but even if custom sub-classes aren\u0027t, unlikely\r\n        //   mapping for those ever requested for deserialization\r\n        if (_hasEnumDeserializer \u0026\u0026 type.isEnum()) {\r\n            deser \u003d _classMappings.get(new ClassKey(Enum.class));\r\n        }\r\n    }\r\n    return deser;\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B2 : If(r11 !\u003d null) → B3 | else → B6",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B6",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  SimpleDeserializers\n  Class\n  DeserializationConfig\n  BeanDescription\n  $r1 \u003d HashMap _classMappings\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d HashMap _classMappings\u003e\n  $r2 \u003d ClassKey\n  new ClassKey(r3)\n  $r5 \u003d $r4.get($r2)\n  r11 \u003d JsonDeserializer) $r5\n  if (r11 !\u003d null) goto B3 else B6\n}",
      "B3 {\n  $z0 \u003d SimpleDeserializers: boolean _hasEnumDeserializer\u003e\n  if ($z0 \u003d\u003d false) goto B4 else B6\n}",
      "B4 {\n  $z1 \u003d r3.isEnum()\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r7 \u003d HashMap _classMappings\u003e\n  $r6 \u003d ClassKey\n  new ClassKey(class \"Ljava/lang/Enum;\")\n  $r8 \u003d $r7.get($r6)\n  r11 \u003d JsonDeserializer) $r8\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleDeserializers",
    "methodName": "findTreeNodeDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer findTreeNodeDeserializer(java.lang.Class,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)",
    "visibility": "public",
    "body": "{\r\n    if (_classMappings \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return _classMappings.get(new ClassKey(nodeType));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleDeserializers\n  Class\n  DeserializationConfig\n  BeanDescription\n  $r1 \u003d HashMap _classMappings\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d HashMap _classMappings\u003e\n  $r2 \u003d ClassKey\n  new ClassKey(r3)\n  $r5 \u003d $r4.get($r2)\n  $r6 \u003d JsonDeserializer) $r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleDeserializers",
    "methodName": "hasDeserializerFor",
    "signature": "boolean hasDeserializerFor(com.fasterxml.jackson.databind.DeserializationConfig,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return (_classMappings !\u003d null) \u0026\u0026 _classMappings.containsKey(new ClassKey(valueType));\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SimpleDeserializers\n  DeserializationConfig\n  Class\n  $r1 \u003d HashMap _classMappings\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r4 \u003d HashMap _classMappings\u003e\n  $r2 \u003d ClassKey\n  new ClassKey(r3)\n  $z0 \u003d $r4.containsKey($r2)\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleKeyDeserializers",
    "methodName": "addDeserializer",
    "signature": "com.fasterxml.jackson.databind.module.SimpleKeyDeserializers addDeserializer(java.lang.Class,com.fasterxml.jackson.databind.KeyDeserializer)",
    "visibility": "public",
    "body": "{\r\n    if (_classMappings \u003d\u003d null) {\r\n        _classMappings \u003d new HashMap\u003cClassKey, KeyDeserializer\u003e();\r\n    }\r\n    _classMappings.put(new ClassKey(forClass), deser);\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleKeyDeserializers\n  Class\n  KeyDeserializer\n  $r1 \u003d HashMap _classMappings\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d HashMap\n  new HashMap()\n  HashMap _classMappings\u003e \u003d $r6\n}",
      "B2 {\n  $r4 \u003d HashMap _classMappings\u003e\n  $r2 \u003d ClassKey\n  new ClassKey(r3)\n  $r4.put($r2, r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleKeyDeserializers",
    "methodName": "findKeyDeserializer",
    "signature": "com.fasterxml.jackson.databind.KeyDeserializer findKeyDeserializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)",
    "visibility": "public",
    "body": "{\r\n    if (_classMappings \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return _classMappings.get(new ClassKey(type.getRawClass()));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleKeyDeserializers\n  JavaType\n  DeserializationConfig\n  BeanDescription\n  $r1 \u003d HashMap _classMappings\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d HashMap _classMappings\u003e\n  $r2 \u003d ClassKey\n  $r5 \u003d r3.getRawClass()\n  new ClassKey($r5)\n  $r6 \u003d $r4.get($r2)\n  $r7 \u003d KeyDeserializer) $r6\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleModule",
    "methodName": "getTypeId",
    "signature": "java.lang.Object getTypeId()",
    "visibility": "public",
    "body": "{\r\n    // 07-Jun-2021, tatu: [databind#3110] Return name as Type Id if name was\r\n    //    explicitly given\r\n    if (_hasExplicitName) {\r\n        return _name;\r\n    }\r\n    // Otherwise behavior same as with 2.12: no registration id for \"throw-away\"\r\n    // instances (to avoid bogus conflicts if user just instantiates SimpleModule)\r\n    // Note: actually... always returning `supet.getTypeId()` should be fine since\r\n    // that would return generated id? Let\u0027s do that actually.\r\n    if (getClass() \u003d\u003d SimpleModule.class) {\r\n        return _name;\r\n    }\r\n    // And for what it is worth, this should usually do the same and we could\r\n    // in fact always just return `_name`. But leaving as-is for now:\r\n    // will essentially return {@code getClass().getName()}.\r\n    return super.getTypeId();\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($r1 !\u003d class \"Lcom/fasterxml/jackson/databind/module/SimpleModule;\") → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  SimpleModule\n  $z0 \u003d SimpleModule: boolean _hasExplicitName\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d String _name\u003e\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getClass()\n  if ($r1 !\u003d class \"Lcom/fasterxml/jackson/databind/module/SimpleModule;\") goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d String _name\u003e\n  return\n}",
      "B4 {\n  $r2 \u003d r0.getTypeId()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleModule#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleModule",
    "methodName": "addSerializer",
    "signature": "com.fasterxml.jackson.databind.module.SimpleModule addSerializer(com.fasterxml.jackson.databind.JsonSerializer)",
    "visibility": "public",
    "body": "{\r\n    _checkNotNull(ser, \"serializer\");\r\n    if (_serializers \u003d\u003d null) {\r\n        _serializers \u003d new SimpleSerializers();\r\n    }\r\n    _serializers.addSerializer(ser);\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleModule\n  JsonSerializer\n  r0._checkNotNull(r1, \"serializer\")\n  $r2 \u003d SimpleSerializers _serializers\u003e\n  if ($r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d SimpleSerializers\n  new SimpleSerializers()\n  SimpleSerializers _serializers\u003e \u003d $r4\n}",
      "B2 {\n  $r3 \u003d SimpleSerializers _serializers\u003e\n  $r3.addSerializer(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleModule#_checkNotNull(...2)",
        "body": "{\r\n    if (thingy \u003d\u003d null) {\r\n        throw new IllegalArgumentException(String.format(\"Cannot pass `null` as %s\", type));\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleModule",
    "methodName": "addSerializer",
    "signature": "com.fasterxml.jackson.databind.module.SimpleModule addSerializer(java.lang.Class,com.fasterxml.jackson.databind.JsonSerializer)",
    "visibility": "public",
    "body": "{\r\n    _checkNotNull(type, \"type to register serializer for\");\r\n    _checkNotNull(ser, \"serializer\");\r\n    if (_serializers \u003d\u003d null) {\r\n        _serializers \u003d new SimpleSerializers();\r\n    }\r\n    _serializers.addSerializer(type, ser);\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleModule\n  Class\n  JsonSerializer\n  r0._checkNotNull(r1, \"type to register serializer for\")\n  r0._checkNotNull(r2, \"serializer\")\n  $r3 \u003d SimpleSerializers _serializers\u003e\n  if ($r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d SimpleSerializers\n  new SimpleSerializers()\n  SimpleSerializers _serializers\u003e \u003d $r5\n}",
      "B2 {\n  $r4 \u003d SimpleSerializers _serializers\u003e\n  $r4.addSerializer(r1, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleModule#_checkNotNull(...2)",
        "body": "{\r\n    if (thingy \u003d\u003d null) {\r\n        throw new IllegalArgumentException(String.format(\"Cannot pass `null` as %s\", type));\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleModule",
    "methodName": "addKeySerializer",
    "signature": "com.fasterxml.jackson.databind.module.SimpleModule addKeySerializer(java.lang.Class,com.fasterxml.jackson.databind.JsonSerializer)",
    "visibility": "public",
    "body": "{\r\n    _checkNotNull(type, \"type to register key serializer for\");\r\n    _checkNotNull(ser, \"key serializer\");\r\n    if (_keySerializers \u003d\u003d null) {\r\n        _keySerializers \u003d new SimpleSerializers();\r\n    }\r\n    _keySerializers.addSerializer(type, ser);\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleModule\n  Class\n  JsonSerializer\n  r0._checkNotNull(r1, \"type to register key serializer for\")\n  r0._checkNotNull(r2, \"key serializer\")\n  $r3 \u003d SimpleSerializers _keySerializers\u003e\n  if ($r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d SimpleSerializers\n  new SimpleSerializers()\n  SimpleSerializers _keySerializers\u003e \u003d $r5\n}",
      "B2 {\n  $r4 \u003d SimpleSerializers _keySerializers\u003e\n  $r4.addSerializer(r1, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleModule#_checkNotNull(...2)",
        "body": "{\r\n    if (thingy \u003d\u003d null) {\r\n        throw new IllegalArgumentException(String.format(\"Cannot pass `null` as %s\", type));\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleModule",
    "methodName": "addDeserializer",
    "signature": "com.fasterxml.jackson.databind.module.SimpleModule addDeserializer(java.lang.Class,com.fasterxml.jackson.databind.JsonDeserializer)",
    "visibility": "public",
    "body": "{\r\n    _checkNotNull(type, \"type to register deserializer for\");\r\n    _checkNotNull(deser, \"deserializer\");\r\n    if (_deserializers \u003d\u003d null) {\r\n        _deserializers \u003d new SimpleDeserializers();\r\n    }\r\n    _deserializers.addDeserializer(type, deser);\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleModule\n  Class\n  JsonDeserializer\n  r0._checkNotNull(r1, \"type to register deserializer for\")\n  r0._checkNotNull(r2, \"deserializer\")\n  $r3 \u003d SimpleDeserializers _deserializers\u003e\n  if ($r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d SimpleDeserializers\n  new SimpleDeserializers()\n  SimpleDeserializers _deserializers\u003e \u003d $r5\n}",
      "B2 {\n  $r4 \u003d SimpleDeserializers _deserializers\u003e\n  $r4.addDeserializer(r1, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleModule#_checkNotNull(...2)",
        "body": "{\r\n    if (thingy \u003d\u003d null) {\r\n        throw new IllegalArgumentException(String.format(\"Cannot pass `null` as %s\", type));\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleModule",
    "methodName": "addKeyDeserializer",
    "signature": "com.fasterxml.jackson.databind.module.SimpleModule addKeyDeserializer(java.lang.Class,com.fasterxml.jackson.databind.KeyDeserializer)",
    "visibility": "public",
    "body": "{\r\n    _checkNotNull(type, \"type to register key deserializer for\");\r\n    _checkNotNull(deser, \"key deserializer\");\r\n    if (_keyDeserializers \u003d\u003d null) {\r\n        _keyDeserializers \u003d new SimpleKeyDeserializers();\r\n    }\r\n    _keyDeserializers.addDeserializer(type, deser);\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleModule\n  Class\n  KeyDeserializer\n  r0._checkNotNull(r1, \"type to register key deserializer for\")\n  r0._checkNotNull(r2, \"key deserializer\")\n  $r3 \u003d SimpleKeyDeserializers _keyDeserializers\u003e\n  if ($r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d SimpleKeyDeserializers\n  new SimpleKeyDeserializers()\n  SimpleKeyDeserializers _keyDeserializers\u003e \u003d $r5\n}",
      "B2 {\n  $r4 \u003d SimpleKeyDeserializers _keyDeserializers\u003e\n  $r4.addDeserializer(r1, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleModule#_checkNotNull(...2)",
        "body": "{\r\n    if (thingy \u003d\u003d null) {\r\n        throw new IllegalArgumentException(String.format(\"Cannot pass `null` as %s\", type));\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleModule",
    "methodName": "addAbstractTypeMapping",
    "signature": "com.fasterxml.jackson.databind.module.SimpleModule addAbstractTypeMapping(java.lang.Class,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    _checkNotNull(superType, \"abstract type to map\");\r\n    _checkNotNull(subType, \"concrete type to map to\");\r\n    if (_abstractTypes \u003d\u003d null) {\r\n        _abstractTypes \u003d new SimpleAbstractTypeResolver();\r\n    }\r\n    // note: addMapping() will verify arguments\r\n    _abstractTypes \u003d _abstractTypes.addMapping(superType, subType);\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleModule\n  Class\n  Class\n  r0._checkNotNull(r1, \"abstract type to map\")\n  r0._checkNotNull(r2, \"concrete type to map to\")\n  $r3 \u003d SimpleAbstractTypeResolver _abstractTypes\u003e\n  if ($r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d SimpleAbstractTypeResolver\n  new SimpleAbstractTypeResolver()\n  SimpleAbstractTypeResolver _abstractTypes\u003e \u003d $r6\n}",
      "B2 {\n  $r4 \u003d SimpleAbstractTypeResolver _abstractTypes\u003e\n  $r5 \u003d $r4.addMapping(r1, r2)\n  SimpleAbstractTypeResolver _abstractTypes\u003e \u003d $r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleModule#_checkNotNull(...2)",
        "body": "{\r\n    if (thingy \u003d\u003d null) {\r\n        throw new IllegalArgumentException(String.format(\"Cannot pass `null` as %s\", type));\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleModule",
    "methodName": "registerSubtypes",
    "signature": "com.fasterxml.jackson.databind.module.SimpleModule registerSubtypes(java.lang.Class[])",
    "visibility": "public",
    "body": "{\r\n    if (_subtypes \u003d\u003d null) {\r\n        _subtypes \u003d new LinkedHashSet\u003c\u003e();\r\n    }\r\n    for (Class\u003c?\u003e subtype : subtypes) {\r\n        _checkNotNull(subtype, \"subtype to register\");\r\n        _subtypes.add(new NamedType(subtype));\r\n    }\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B3 : If(i1 \u003e\u003d $i0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  SimpleModule\n  Class[]\n  $r1 \u003d LinkedHashSet _subtypes\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d LinkedHashSet\n  new LinkedHashSet()\n  LinkedHashSet _subtypes\u003e \u003d $r6\n}",
      "B2 {\n  $i0 \u003d lengthof r2\n  i1 \u003d 0\n}",
      "B3 {\n  if (i1 \u003e\u003d $i0) goto B4 else B5\n}",
      "B4 {\n  r3 \u003d r2[i1]\n  r0._checkNotNull(r3, \"subtype to register\")\n  $r5 \u003d LinkedHashSet _subtypes\u003e\n  $r4 \u003d NamedType\n  new NamedType(r3)\n  $r5.add($r4)\n  i1 \u003d i1 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleModule#_checkNotNull(...2)",
        "body": "{\r\n    if (thingy \u003d\u003d null) {\r\n        throw new IllegalArgumentException(String.format(\"Cannot pass `null` as %s\", type));\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleModule",
    "methodName": "registerSubtypes",
    "signature": "com.fasterxml.jackson.databind.module.SimpleModule registerSubtypes(com.fasterxml.jackson.databind.jsontype.NamedType[])",
    "visibility": "public",
    "body": "{\r\n    if (_subtypes \u003d\u003d null) {\r\n        _subtypes \u003d new LinkedHashSet\u003c\u003e();\r\n    }\r\n    for (NamedType subtype : subtypes) {\r\n        _checkNotNull(subtype, \"subtype to register\");\r\n        _subtypes.add(subtype);\r\n    }\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B3 : If(i1 \u003e\u003d $i0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  SimpleModule\n  NamedType[]\n  $r1 \u003d LinkedHashSet _subtypes\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d LinkedHashSet\n  new LinkedHashSet()\n  LinkedHashSet _subtypes\u003e \u003d $r5\n}",
      "B2 {\n  $i0 \u003d lengthof r2\n  i1 \u003d 0\n}",
      "B3 {\n  if (i1 \u003e\u003d $i0) goto B4 else B5\n}",
      "B4 {\n  r3 \u003d r2[i1]\n  r0._checkNotNull(r3, \"subtype to register\")\n  $r4 \u003d LinkedHashSet _subtypes\u003e\n  $r4.add(r3)\n  i1 \u003d i1 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleModule#_checkNotNull(...2)",
        "body": "{\r\n    if (thingy \u003d\u003d null) {\r\n        throw new IllegalArgumentException(String.format(\"Cannot pass `null` as %s\", type));\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleModule",
    "methodName": "registerSubtypes",
    "signature": "com.fasterxml.jackson.databind.module.SimpleModule registerSubtypes(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    if (_subtypes \u003d\u003d null) {\r\n        _subtypes \u003d new LinkedHashSet\u003c\u003e();\r\n    }\r\n    for (Class\u003c?\u003e subtype : subtypes) {\r\n        _checkNotNull(subtype, \"subtype to register\");\r\n        _subtypes.add(new NamedType(subtype));\r\n    }\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  SimpleModule\n  Collection\n  $r1 \u003d LinkedHashSet _subtypes\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d LinkedHashSet\n  new LinkedHashSet()\n  LinkedHashSet _subtypes\u003e \u003d $r7\n}",
      "B2 {\n  $r8 \u003d r2.iterator()\n}",
      "B3 {\n  $z0 \u003d $r8.hasNext()\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r3 \u003d $r8.next()\n  r4 \u003d Class) $r3\n  r0._checkNotNull(r4, \"subtype to register\")\n  $r6 \u003d LinkedHashSet _subtypes\u003e\n  $r5 \u003d NamedType\n  new NamedType(r4)\n  $r6.add($r5)\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleModule#_checkNotNull(...2)",
        "body": "{\r\n    if (thingy \u003d\u003d null) {\r\n        throw new IllegalArgumentException(String.format(\"Cannot pass `null` as %s\", type));\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleModule",
    "methodName": "addValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.module.SimpleModule addValueInstantiator(java.lang.Class,com.fasterxml.jackson.databind.deser.ValueInstantiator)",
    "visibility": "public",
    "body": "{\r\n    _checkNotNull(beanType, \"class to register value instantiator for\");\r\n    _checkNotNull(inst, \"value instantiator\");\r\n    if (_valueInstantiators \u003d\u003d null) {\r\n        _valueInstantiators \u003d new SimpleValueInstantiators();\r\n    }\r\n    _valueInstantiators \u003d _valueInstantiators.addValueInstantiator(beanType, inst);\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleModule\n  Class\n  ValueInstantiator\n  r0._checkNotNull(r1, \"class to register value instantiator for\")\n  r0._checkNotNull(r2, \"value instantiator\")\n  $r3 \u003d SimpleValueInstantiators _valueInstantiators\u003e\n  if ($r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d SimpleValueInstantiators\n  new SimpleValueInstantiators()\n  SimpleValueInstantiators _valueInstantiators\u003e \u003d $r6\n}",
      "B2 {\n  $r4 \u003d SimpleValueInstantiators _valueInstantiators\u003e\n  $r5 \u003d $r4.addValueInstantiator(r1, r2)\n  SimpleValueInstantiators _valueInstantiators\u003e \u003d $r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleModule#_checkNotNull(...2)",
        "body": "{\r\n    if (thingy \u003d\u003d null) {\r\n        throw new IllegalArgumentException(String.format(\"Cannot pass `null` as %s\", type));\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleModule",
    "methodName": "setMixInAnnotation",
    "signature": "com.fasterxml.jackson.databind.module.SimpleModule setMixInAnnotation(java.lang.Class,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    _checkNotNull(targetType, \"target type\");\r\n    _checkNotNull(mixinClass, \"mixin class\");\r\n    if (_mixins \u003d\u003d null) {\r\n        _mixins \u003d new HashMap\u003cClass\u003c?\u003e, Class\u003c?\u003e\u003e();\r\n    }\r\n    _mixins.put(targetType, mixinClass);\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleModule\n  Class\n  Class\n  r0._checkNotNull(r1, \"target type\")\n  r0._checkNotNull(r2, \"mixin class\")\n  $r3 \u003d HashMap _mixins\u003e\n  if ($r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d HashMap\n  new HashMap()\n  HashMap _mixins\u003e \u003d $r5\n}",
      "B2 {\n  $r4 \u003d HashMap _mixins\u003e\n  $r4.put(r1, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleModule#_checkNotNull(...2)",
        "body": "{\r\n    if (thingy \u003d\u003d null) {\r\n        throw new IllegalArgumentException(String.format(\"Cannot pass `null` as %s\", type));\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleModule",
    "methodName": "setupModule",
    "signature": "void setupModule(com.fasterxml.jackson.databind.Module$SetupContext)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 26,
    "edges": 38,
    "cc": 14,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r2 \u003d\u003d null) → B3 | else → B4",
      "B4 : If($r3 \u003d\u003d null) → B5 | else → B6",
      "B6 : If($r4 \u003d\u003d null) → B7 | else → B8",
      "B8 : If($r5 \u003d\u003d null) → B9 | else → B10",
      "B10 : If($r6 \u003d\u003d null) → B11 | else → B12",
      "B12 : If($r7 \u003d\u003d null) → B13 | else → B14",
      "B14 : If($r8 \u003d\u003d null) → B15 | else → B16",
      "B16 : If($r9 \u003d\u003d null) → B17 | else → B19",
      "B17 : If($i0 \u003c\u003d 0) → B18 | else → B19",
      "B19 : If($r36 \u003d\u003d null) → B20 | else → B21",
      "B21 : If($r10 \u003d\u003d null) → B22 | else → B25",
      "B23 : If($z0 \u003d\u003d false) → B24 | else → B25"
    ],
    "blockList": [
      "B0 {\n  SimpleModule\n  Module$SetupContext\n  $r1 \u003d SimpleSerializers _serializers\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r35 \u003d SimpleSerializers _serializers\u003e\n  r16.addSerializers($r35)\n}",
      "B2 {\n  $r2 \u003d SimpleDeserializers _deserializers\u003e\n  if ($r2 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r34 \u003d SimpleDeserializers _deserializers\u003e\n  r16.addDeserializers($r34)\n}",
      "B4 {\n  $r3 \u003d SimpleSerializers _keySerializers\u003e\n  if ($r3 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r33 \u003d SimpleSerializers _keySerializers\u003e\n  r16.addKeySerializers($r33)\n}",
      "B6 {\n  $r4 \u003d SimpleKeyDeserializers _keyDeserializers\u003e\n  if ($r4 \u003d\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r32 \u003d SimpleKeyDeserializers _keyDeserializers\u003e\n  r16.addKeyDeserializers($r32)\n}",
      "B8 {\n  $r5 \u003d SimpleAbstractTypeResolver _abstractTypes\u003e\n  if ($r5 \u003d\u003d null) goto B9 else B10\n}",
      "B9 {\n  $r31 \u003d SimpleAbstractTypeResolver _abstractTypes\u003e\n  r16.addAbstractTypeResolver($r31)\n}",
      "B10 {\n  $r6 \u003d SimpleValueInstantiators _valueInstantiators\u003e\n  if ($r6 \u003d\u003d null) goto B11 else B12\n}",
      "B11 {\n  $r30 \u003d SimpleValueInstantiators _valueInstantiators\u003e\n  r16.addValueInstantiators($r30)\n}",
      "B12 {\n  $r7 \u003d BeanDeserializerModifier _deserializerModifier\u003e\n  if ($r7 \u003d\u003d null) goto B13 else B14\n}",
      "B13 {\n  $r29 \u003d BeanDeserializerModifier _deserializerModifier\u003e\n  r16.addBeanDeserializerModifier($r29)\n}",
      "B14 {\n  $r8 \u003d BeanSerializerModifier _serializerModifier\u003e\n  if ($r8 \u003d\u003d null) goto B15 else B16\n}",
      "B15 {\n  $r28 \u003d BeanSerializerModifier _serializerModifier\u003e\n  r16.addBeanSerializerModifier($r28)\n}",
      "B16 {\n  $r9 \u003d LinkedHashSet _subtypes\u003e\n  if ($r9 \u003d\u003d null) goto B17 else B19\n}",
      "B17 {\n  $r22 \u003d LinkedHashSet _subtypes\u003e\n  $i0 \u003d $r22.size()\n  if ($i0 \u003c\u003d 0) goto B18 else B19\n}",
      "B18 {\n  $r24 \u003d LinkedHashSet _subtypes\u003e\n  $r23 \u003d LinkedHashSet _subtypes\u003e\n  $i1 \u003d $r23.size()\n  $r25 \u003d NamedType)[$i1]\n  $r26 \u003d $r24.toArray($r25)\n  $r27 \u003d NamedType[]) $r26\n  r16.registerSubtypes($r27)\n}",
      "B19 {\n  $r36 \u003d PropertyNamingStrategy _namingStrategy\u003e\n  if ($r36 \u003d\u003d null) goto B20 else B21\n}",
      "B20 {\n  $r21 \u003d PropertyNamingStrategy _namingStrategy\u003e\n  r16.setNamingStrategy($r21)\n}",
      "B21 {\n  $r10 \u003d HashMap _mixins\u003e\n  if ($r10 \u003d\u003d null) goto B22 else B25\n}",
      "B22 {\n  $r11 \u003d HashMap _mixins\u003e\n  $r12 \u003d $r11.entrySet()\n  r13 \u003d $r12.iterator()\n}",
      "B23 {\n  $z0 \u003d r13.hasNext()\n  if ($z0 \u003d\u003d false) goto B24 else B25\n}",
      "B24 {\n  $r14 \u003d r13.next()\n  r15 \u003d Map$Entry) $r14\n  $r17 \u003d r15.getKey()\n  $r20 \u003d Class) $r17\n  $r18 \u003d r15.getValue()\n  $r19 \u003d Class) $r18\n  r16.setMixInAnnotations($r20, $r19)\n  goto B23\n}",
      "B25 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B17",
      "B16 --\u003e B19",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B21",
      "B21 --\u003e B22",
      "B21 --\u003e B25",
      "B22 --\u003e B23",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B23",
      "B25 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleSerializers",
    "methodName": "addSerializer",
    "signature": "void addSerializer(com.fasterxml.jackson.databind.JsonSerializer)",
    "visibility": "public",
    "body": "{\r\n    // Interface to match?\r\n    Class\u003c?\u003e cls \u003d ser.handledType();\r\n    if (cls \u003d\u003d null || cls \u003d\u003d Object.class) {\r\n        throw new IllegalArgumentException(\"JsonSerializer of type \" + ser.getClass().getName() + \" does not define valid handledType() -- must either register with method that takes type argument \" + \" or make serializer extend \u0027com.fasterxml.jackson.databind.ser.std.StdSerializer\u0027\");\r\n    }\r\n    _addSerializer(cls, ser);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r1 !\u003d class \"Ljava/lang/Object;\") → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SimpleSerializers\n  JsonSerializer\n  r1 \u003d r0.handledType()\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r1 !\u003d class \"Ljava/lang/Object;\") goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d IllegalArgumentException\n  $r3 \u003d r0.getClass()\n  $r4 \u003d $r3.getName()\n  $r5 \u003d dynInvoke makeConcatWithConstants($r4)\n  new IllegalArgumentException($r5)\n  throw $r2\n}",
      "B3 {\n  r6._addSerializer(r1, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleSerializers#_addSerializer(...2)",
        "body": "{\r\n    ClassKey key \u003d new ClassKey(cls);\r\n    // Interface or class type?\r\n    if (cls.isInterface()) {\r\n        if (_interfaceMappings \u003d\u003d null) {\r\n            _interfaceMappings \u003d new HashMap\u003cClassKey, JsonSerializer\u003c?\u003e\u003e();\r\n        }\r\n        _interfaceMappings.put(key, ser);\r\n    } else {\r\n        // nope, class:\r\n        if (_classMappings \u003d\u003d null) {\r\n            _classMappings \u003d new HashMap\u003cClassKey, JsonSerializer\u003c?\u003e\u003e();\r\n        }\r\n        _classMappings.put(key, ser);\r\n        if (cls \u003d\u003d Enum.class) {\r\n            _hasEnumSerializer \u003d true;\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleSerializers",
    "methodName": "addSerializers",
    "signature": "void addSerializers(java.util.List)",
    "visibility": "public",
    "body": "{\r\n    for (JsonSerializer\u003c?\u003e ser : sers) {\r\n        addSerializer(ser);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SimpleSerializers\n  List\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r3 \u003d JsonSerializer) $r2\n  r4.addSerializer(r3)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleSerializers#addSerializer(...1)",
        "body": "{\r\n    // Interface to match?\r\n    Class\u003c?\u003e cls \u003d ser.handledType();\r\n    if (cls \u003d\u003d null || cls \u003d\u003d Object.class) {\r\n        throw new IllegalArgumentException(\"JsonSerializer of type \" + ser.getClass().getName() + \" does not define valid handledType() -- must either register with method that takes type argument \" + \" or make serializer extend \u0027com.fasterxml.jackson.databind.ser.std.StdSerializer\u0027\");\r\n    }\r\n    _addSerializer(cls, ser);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleSerializers",
    "methodName": "findSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer findSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)",
    "visibility": "public",
    "body": "{\r\n    Class\u003c?\u003e cls \u003d type.getRawClass();\r\n    ClassKey key \u003d new ClassKey(cls);\r\n    JsonSerializer\u003c?\u003e ser \u003d null;\r\n    // First: direct match?\r\n    if (cls.isInterface()) {\r\n        if (_interfaceMappings !\u003d null) {\r\n            ser \u003d _interfaceMappings.get(key);\r\n            if (ser !\u003d null) {\r\n                return ser;\r\n            }\r\n        }\r\n    } else {\r\n        if (_classMappings !\u003d null) {\r\n            ser \u003d _classMappings.get(key);\r\n            if (ser !\u003d null) {\r\n                return ser;\r\n            }\r\n            // [Issue#227]: Handle registration of plain `Enum` serializer\r\n            if (_hasEnumSerializer \u0026\u0026 type.isEnumType()) {\r\n                key.reset(Enum.class);\r\n                ser \u003d _classMappings.get(key);\r\n                if (ser !\u003d null) {\r\n                    return ser;\r\n                }\r\n            }\r\n            // If not direct match, maybe super-class match?\r\n            for (Class\u003c?\u003e curr \u003d cls; (curr !\u003d null); curr \u003d curr.getSuperclass()) {\r\n                key.reset(curr);\r\n                ser \u003d _classMappings.get(key);\r\n                if (ser !\u003d null) {\r\n                    return ser;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // No direct match? How about super-interfaces?\r\n    if (_interfaceMappings !\u003d null) {\r\n        ser \u003d _findInterfaceMapping(cls, key);\r\n        if (ser !\u003d null) {\r\n            return ser;\r\n        }\r\n        // still no matches? Maybe interfaces of super classes\r\n        if (!cls.isInterface()) {\r\n            while ((cls \u003d cls.getSuperclass()) !\u003d null) {\r\n                ser \u003d _findInterfaceMapping(cls, key);\r\n                if (ser !\u003d null) {\r\n                    return ser;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 24,
    "edges": 32,
    "cc": 10,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B4",
      "B1 : If($r11 \u003d\u003d null) → B2 | else → B16",
      "B2 : If(r17 \u003d\u003d null) → B3 | else → B16",
      "B4 : If($r3 \u003d\u003d null) → B5 | else → B16",
      "B5 : If(r18 \u003d\u003d null) → B6 | else → B7",
      "B7 : If($z2 \u003d\u003d false) → B8 | else → B11",
      "B8 : If($z3 \u003d\u003d false) → B9 | else → B11",
      "B9 : If(r19 \u003d\u003d null) → B10 | else → B11",
      "B12 : If(r20 \u003d\u003d null) → B13 | else → B16",
      "B13 : If(r21 \u003d\u003d null) → B14 | else → B15",
      "B16 : If($r22 \u003d\u003d null) → B17 | else → B23",
      "B17 : If(r23 \u003d\u003d null) → B18 | else → B19",
      "B19 : If($z1 !\u003d 0) → B20 | else → B23",
      "B20 : If($r4 \u003d\u003d null) → B21 | else → B23",
      "B21 : If(r24 \u003d\u003d null) → B22 | else → B20"
    ],
    "blockList": [
      "B0 {\n  SimpleSerializers\n  SerializationConfig\n  JavaType\n  BeanDescription\n  r16 \u003d r0.getRawClass()\n  $r1 \u003d ClassKey\n  new ClassKey(r16)\n  $z0 \u003d r16.isInterface()\n  if ($z0 \u003d\u003d false) goto B1 else B4\n}",
      "B1 {\n  $r11 \u003d HashMap _interfaceMappings\u003e\n  if ($r11 \u003d\u003d null) goto B2 else B16\n}",
      "B2 {\n  $r12 \u003d HashMap _interfaceMappings\u003e\n  $r13 \u003d $r12.get($r1)\n  r17 \u003d JsonSerializer) $r13\n  if (r17 \u003d\u003d null) goto B3 else B16\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d HashMap _classMappings\u003e\n  if ($r3 \u003d\u003d null) goto B5 else B16\n}",
      "B5 {\n  $r5 \u003d HashMap _classMappings\u003e\n  $r6 \u003d $r5.get($r1)\n  r18 \u003d JsonSerializer) $r6\n  if (r18 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $z2 \u003d SimpleSerializers: boolean _hasEnumSerializer\u003e\n  if ($z2 \u003d\u003d false) goto B8 else B11\n}",
      "B8 {\n  $z3 \u003d r0.isEnumType()\n  if ($z3 \u003d\u003d false) goto B9 else B11\n}",
      "B9 {\n  $r1.reset(class \"Ljava/lang/Enum;\")\n  $r9 \u003d HashMap _classMappings\u003e\n  $r10 \u003d $r9.get($r1)\n  r19 \u003d JsonSerializer) $r10\n  if (r19 \u003d\u003d null) goto B10 else B11\n}",
      "B10 {\n  return\n}",
      "B11 {\n  r20 \u003d r16\n}",
      "B12 {\n  if (r20 \u003d\u003d null) goto B13 else B16\n}",
      "B13 {\n  $r1.reset(r20)\n  $r7 \u003d HashMap _classMappings\u003e\n  $r8 \u003d $r7.get($r1)\n  r21 \u003d JsonSerializer) $r8\n  if (r21 \u003d\u003d null) goto B14 else B15\n}",
      "B14 {\n  return\n}",
      "B15 {\n  r20 \u003d r20.getSuperclass()\n  goto B12\n}",
      "B16 {\n  $r22 \u003d HashMap _interfaceMappings\u003e\n  if ($r22 \u003d\u003d null) goto B17 else B23\n}",
      "B17 {\n  r23 \u003d r2._findInterfaceMapping(r16, $r1)\n  if (r23 \u003d\u003d null) goto B18 else B19\n}",
      "B18 {\n  return\n}",
      "B19 {\n  $z1 \u003d r16.isInterface()\n  if ($z1 !\u003d 0) goto B20 else B23\n}",
      "B20 {\n  $r4 \u003d r16.getSuperclass()\n  r16 \u003d $r4\n  if ($r4 \u003d\u003d null) goto B21 else B23\n}",
      "B21 {\n  r24 \u003d r2._findInterfaceMapping($r4, $r1)\n  if (r24 \u003d\u003d null) goto B22 else B20\n}",
      "B22 {\n  return\n}",
      "B23 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B16",
      "B2 --\u003e B3",
      "B2 --\u003e B16",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B16",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B16",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B12",
      "B16 --\u003e B17",
      "B16 --\u003e B23",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e B20",
      "B19 --\u003e B23",
      "B20 --\u003e B21",
      "B20 --\u003e B23",
      "B21 --\u003e B22",
      "B21 --\u003e B20",
      "B22 --\u003e [EXIT]",
      "B23 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleSerializers#_findInterfaceMapping(...2)",
        "body": "{\r\n    for (Class\u003c?\u003e iface : cls.getInterfaces()) {\r\n        key.reset(iface);\r\n        JsonSerializer\u003c?\u003e ser \u003d _interfaceMappings.get(key);\r\n        if (ser !\u003d null) {\r\n            return ser;\r\n        }\r\n        ser \u003d _findInterfaceMapping(iface, key);\r\n        if (ser !\u003d null) {\r\n            return ser;\r\n        }\r\n    }\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.module.SimpleValueInstantiators",
    "methodName": "findValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator findValueInstantiator(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.deser.ValueInstantiator)",
    "visibility": "public",
    "body": "{\r\n    ValueInstantiator inst \u003d _classMappings.get(new ClassKey(beanDesc.getBeanClass()));\r\n    return (inst \u003d\u003d null) ? defaultInstantiator : inst;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r6 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleValueInstantiators\n  DeserializationConfig\n  BeanDescription\n  ValueInstantiator\n  $r3 \u003d HashMap _classMappings\u003e\n  $r1 \u003d ClassKey\n  $r4 \u003d r2.getBeanClass()\n  new ClassKey($r4)\n  $r5 \u003d $r3.get($r1)\n  r6 \u003d ValueInstantiator) $r5\n  if (r6 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d r7\n  goto B3\n}",
      "B2 {\n  $r9 \u003d r6\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "deepCopy",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode deepCopy()",
    "visibility": "public",
    "body": "{\r\n    ArrayNode ret \u003d arrayNode(_children.size());\r\n    for (JsonNode element : _children) ret._children.add(element.deepCopy());\r\n    return ret;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  $r1 \u003d List _children\u003e\n  $i0 \u003d $r1.size()\n  r2 \u003d r0.arrayNode($i0)\n  $r3 \u003d List _children\u003e\n  r4 \u003d $r3.iterator()\n}",
      "B1 {\n  $z0 \u003d r4.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d r4.next()\n  r6 \u003d JsonNode) $r5\n  $r7 \u003d List _children\u003e\n  $r8 \u003d r6.deepCopy()\n  $r7.add($r8)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#arrayNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.node.ObjectNode \u0027with\u0027(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    JsonPointer ptr \u003d _jsonPointerIfValid(exprOrProperty);\r\n    if (ptr !\u003d null) {\r\n        return withObject(ptr);\r\n    }\r\n    // to give failure\r\n    return super.with(exprOrProperty);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  String\n  r2 \u003d r0._jsonPointerIfValid(r1)\n  if (r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d r0.withObject(r2)\n  return\n}",
      "B2 {\n  $r3 \u003d r0.with(r1)\n  $r4 \u003d ObjectNode) $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#withObject(...1)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#_jsonPointerIfValid(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "withArray",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode withArray(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    JsonPointer ptr \u003d _jsonPointerIfValid(exprOrProperty);\r\n    if (ptr !\u003d null) {\r\n        return withArray(ptr);\r\n    }\r\n    // to give failure\r\n    return super.withArray(exprOrProperty);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  String\n  r2 \u003d r0._jsonPointerIfValid(r1)\n  if (r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d r0.withArray(r2)\n  return\n}",
      "B2 {\n  $r3 \u003d r0.withArray(r1)\n  $r4 \u003d ArrayNode) $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#withArray(...1)",
        "body": "{\r\n    JsonPointer ptr \u003d _jsonPointerIfValid(exprOrProperty);\r\n    if (ptr !\u003d null) {\r\n        return withArray(ptr);\r\n    }\r\n    // to give failure\r\n    return super.withArray(exprOrProperty);\r\n}"
      },
      {
        "name": "ArrayNode#_jsonPointerIfValid(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "get",
    "signature": "com.fasterxml.jackson.databind.JsonNode get(int)",
    "visibility": "public",
    "body": "{\r\n    if ((index \u003e\u003d 0) \u0026\u0026 (index \u003c _children.size())) {\r\n        return _children.get(index);\r\n    }\r\n    return null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B3",
      "B1 : If(i0 \u003e\u003d $i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  if (i0 \u003c 0) goto B1 else B3\n}",
      "B1 {\n  $r1 \u003d List _children\u003e\n  $i1 \u003d $r1.size()\n  if (i0 \u003e\u003d $i1) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d List _children\u003e\n  $r3 \u003d $r2.get(i0)\n  $r4 \u003d JsonNode) $r3\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "path",
    "signature": "com.fasterxml.jackson.databind.JsonNode path(int)",
    "visibility": "public",
    "body": "{\r\n    if (index \u003e\u003d 0 \u0026\u0026 index \u003c _children.size()) {\r\n        return _children.get(index);\r\n    }\r\n    return MissingNode.getInstance();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B3",
      "B1 : If(i0 \u003e\u003d $i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  if (i0 \u003c 0) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d List _children\u003e\n  $i1 \u003d $r2.size()\n  if (i0 \u003e\u003d $i1) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d List _children\u003e\n  $r4 \u003d $r3.get(i0)\n  $r5 \u003d JsonNode) $r4\n  return\n}",
      "B3 {\n  $r0 \u003d MissingNode.getInstance()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "required",
    "signature": "com.fasterxml.jackson.databind.JsonNode required(int)",
    "visibility": "public",
    "body": "{\r\n    if ((index \u003e\u003d 0) \u0026\u0026 (index \u003c _children.size())) {\r\n        return _children.get(index);\r\n    }\r\n    return _reportRequiredViolation(\"No value at index #%d [0, %d) of `ArrayNode`\", index, _children.size());\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B3",
      "B1 : If(i0 \u003e\u003d $i2) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  if (i0 \u003c 0) goto B1 else B3\n}",
      "B1 {\n  $r7 \u003d List _children\u003e\n  $i2 \u003d $r7.size()\n  if (i0 \u003e\u003d $i2) goto B2 else B3\n}",
      "B2 {\n  $r8 \u003d List _children\u003e\n  $r9 \u003d $r8.get(i0)\n  $r10 \u003d JsonNode) $r9\n  return\n}",
      "B3 {\n  $r1 \u003d Object)[2]\n  $r2 \u003d Integer.valueOf(i0)\n  $r1[0] \u003d $r2\n  $r3 \u003d List _children\u003e\n  $i1 \u003d $r3.size()\n  $r4 \u003d Integer.valueOf($i1)\n  $r1[1] \u003d $r4\n  $r5 \u003d r0._reportRequiredViolation(\"No value at index #%d 0, %d) of `ArrayNode`\", $r1)\n  $r6 \u003d JsonNode) $r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#_reportRequiredViolation(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "equals",
    "signature": "boolean equals(java.util.Comparator,com.fasterxml.jackson.databind.JsonNode)",
    "visibility": "public",
    "body": "{\r\n    if (!(o instanceof ArrayNode)) {\r\n        return false;\r\n    }\r\n    ArrayNode other \u003d (ArrayNode) o;\r\n    final int len \u003d _children.size();\r\n    if (other.size() !\u003d len) {\r\n        return false;\r\n    }\r\n    List\u003cJsonNode\u003e l1 \u003d _children;\r\n    List\u003cJsonNode\u003e l2 \u003d other._children;\r\n    for (int i \u003d 0; i \u003c len; ++i) {\r\n        if (!l1.get(i).equals(comparator, l2.get(i))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 10,
    "edges": 10,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($i1 \u003d\u003d i0) → B3 | else → B4",
      "B5 : If(i2 \u003e\u003d i0) → B6 | else → B9",
      "B6 : If($z1 !\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  Comparator\n  JsonNode\n  $z0 \u003d ArrayNode\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r1 \u003d ArrayNode) r0\n  $r3 \u003d List _children\u003e\n  i0 \u003d $r3.size()\n  $i1 \u003d r1.size()\n  if ($i1 \u003d\u003d i0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r4 \u003d List _children\u003e\n  r5 \u003d List _children\u003e\n  i2 \u003d 0\n}",
      "B5 {\n  if (i2 \u003e\u003d i0) goto B6 else B9\n}",
      "B6 {\n  $r6 \u003d r4.get(i2)\n  $r10 \u003d JsonNode) $r6\n  $r8 \u003d r5.get(i2)\n  $r9 \u003d JsonNode) $r8\n  $z1 \u003d $r10.equals(r7, $r9)\n  if ($z1 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  i2 \u003d i2 + 1\n  goto B5\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B5",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "serialize",
    "signature": "void serialize(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    final List\u003cJsonNode\u003e c \u003d _children;\r\n    final int size \u003d c.size();\r\n    g.writeStartArray(this, size);\r\n    for (int i \u003d 0; i \u003c size; ++i) {\r\n        // we\u0027ll typically have array list\r\n        JsonNode value \u003d c.get(i);\r\n        value.serialize(g, provider);\r\n    }\r\n    g.writeEndArray();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  JsonGenerator\n  SerializerProvider\n  r1 \u003d List _children\u003e\n  i0 \u003d r1.size()\n  r2.writeStartArray(r0, i0)\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d r1.get(i1)\n  r4 \u003d JsonNode) $r3\n  r4.serialize(r2, r5)\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  r2.writeEndArray()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "serializeWithType",
    "signature": "void serializeWithType(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "visibility": "public",
    "body": "{\r\n    WritableTypeId typeIdDef \u003d typeSer.writeTypePrefix(g, typeSer.typeId(this, JsonToken.START_ARRAY));\r\n    for (JsonNode n : _children) {\r\n        ((BaseJsonNode) n).serialize(g, provider);\r\n    }\r\n    typeSer.writeTypeSuffix(g, typeIdDef);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  JsonGenerator\n  SerializerProvider\n  TypeSerializer\n  $r3 \u003d JsonToken START_ARRAY\u003e\n  $r4 \u003d r0.typeId(r2, $r3)\n  r5 \u003d r0.writeTypePrefix(r1, $r4)\n  $r6 \u003d List _children\u003e\n  r7 \u003d $r6.iterator()\n}",
      "B1 {\n  $z0 \u003d r7.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r8 \u003d r7.next()\n  r9 \u003d JsonNode) $r8\n  $r11 \u003d BaseJsonNode) r9\n  $r11.serialize(r1, r10)\n  goto B1\n}",
      "B3 {\n  r0.writeTypeSuffix(r1, r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "findValue",
    "signature": "com.fasterxml.jackson.databind.JsonNode findValue(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    for (JsonNode node : _children) {\r\n        JsonNode value \u003d node.findValue(fieldName);\r\n        if (value !\u003d null) {\r\n            return value;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If(r6 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  String\n  $r1 \u003d List _children\u003e\n  r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r3 \u003d r2.next()\n  r4 \u003d JsonNode) $r3\n  r6 \u003d r4.findValue(r5)\n  if (r6 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "findValues",
    "signature": "java.util.List findValues(java.lang.String,java.util.List)",
    "visibility": "public",
    "body": "{\r\n    for (JsonNode node : _children) {\r\n        foundSoFar \u003d node.findValues(fieldName, foundSoFar);\r\n    }\r\n    return foundSoFar;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  String\n  List\n  $r1 \u003d List _children\u003e\n  r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d r2.next()\n  r4 \u003d JsonNode) $r3\n  r6 \u003d r4.findValues(r5, r6)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "findValuesAsText",
    "signature": "java.util.List findValuesAsText(java.lang.String,java.util.List)",
    "visibility": "public",
    "body": "{\r\n    for (JsonNode node : _children) {\r\n        foundSoFar \u003d node.findValuesAsText(fieldName, foundSoFar);\r\n    }\r\n    return foundSoFar;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  String\n  List\n  $r1 \u003d List _children\u003e\n  r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d r2.next()\n  r4 \u003d JsonNode) $r3\n  r6 \u003d r4.findValuesAsText(r5, r6)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "findParent",
    "signature": "com.fasterxml.jackson.databind.node.ObjectNode findParent(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    for (JsonNode node : _children) {\r\n        JsonNode parent \u003d node.findParent(fieldName);\r\n        if (parent !\u003d null) {\r\n            return (ObjectNode) parent;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If(r6 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  String\n  $r1 \u003d List _children\u003e\n  r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r3 \u003d r2.next()\n  r4 \u003d JsonNode) $r3\n  r6 \u003d r4.findParent(r5)\n  if (r6 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r7 \u003d ObjectNode) r6\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "findParents",
    "signature": "java.util.List findParents(java.lang.String,java.util.List)",
    "visibility": "public",
    "body": "{\r\n    for (JsonNode node : _children) {\r\n        foundSoFar \u003d node.findParents(fieldName, foundSoFar);\r\n    }\r\n    return foundSoFar;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  String\n  List\n  $r1 \u003d List _children\u003e\n  r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d r2.next()\n  r4 \u003d JsonNode) $r3\n  r6 \u003d r4.findParents(r5, r6)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "set",
    "signature": "com.fasterxml.jackson.databind.JsonNode set(int,com.fasterxml.jackson.databind.JsonNode)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d null) {\r\n        // let\u0027s not store \u0027raw\u0027 nulls but nodes\r\n        value \u003d nullNode();\r\n    }\r\n    if (index \u003c 0 || index \u003e\u003d _children.size()) {\r\n        throw new IndexOutOfBoundsException(\"Illegal index \" + index + \", array size \" + size());\r\n    }\r\n    return _children.set(index, value);\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r7 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003c 0) → B3 | else → B4",
      "B3 : If(i0 \u003c $i2) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  JsonNode\n  if (r7 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r7 \u003d r1.nullNode()\n}",
      "B2 {\n  if (i0 \u003c 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d List _children\u003e\n  $i2 \u003d $r3.size()\n  if (i0 \u003c $i2) goto B4 else B5\n}",
      "B4 {\n  $r0 \u003d IndexOutOfBoundsException\n  $i1 \u003d r1.size()\n  $r2 \u003d dynInvoke makeConcatWithConstants(i0, $i1)\n  new IndexOutOfBoundsException($r2)\n  throw $r0\n}",
      "B5 {\n  $r4 \u003d List _children\u003e\n  $r5 \u003d $r4.set(i0, r7)\n  $r6 \u003d JsonNode) $r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#size(...0)",
        "body": "{\r\n    return _children.size();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "add",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode add(com.fasterxml.jackson.databind.JsonNode)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d null) {\r\n        // let\u0027s not store \u0027raw\u0027 nulls but nodes\r\n        value \u003d nullNode();\r\n    }\r\n    _add(value);\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  JsonNode\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r1 \u003d r0.nullNode()\n}",
      "B2 {\n  r0._add(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#_add(...1)",
        "body": "{\r\n    _children.add(node);\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "addAll",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode addAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    for (JsonNode node : nodes) {\r\n        add(node);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  Collection\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d r1.next()\n  r4 \u003d JsonNode) $r3\n  r2.add(r4)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#add(...1)",
        "body": "{\r\n    if (value \u003d\u003d null) {\r\n        // let\u0027s not store \u0027raw\u0027 nulls but nodes\r\n        value \u003d nullNode();\r\n    }\r\n    _add(value);\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "insert",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode insert(int,com.fasterxml.jackson.databind.JsonNode)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d null) {\r\n        value \u003d nullNode();\r\n    }\r\n    _insert(index, value);\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  JsonNode\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r1 \u003d r0.nullNode()\n}",
      "B2 {\n  r0._insert(i0, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#_insert(...2)",
        "body": "{\r\n    if (index \u003c 0) {\r\n        _children.add(0, node);\r\n    } else if (index \u003e\u003d _children.size()) {\r\n        _children.add(node);\r\n    } else {\r\n        _children.add(index, node);\r\n    }\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "remove",
    "signature": "com.fasterxml.jackson.databind.JsonNode remove(int)",
    "visibility": "public",
    "body": "{\r\n    if (index \u003e\u003d 0 \u0026\u0026 index \u003c _children.size()) {\r\n        return _children.remove(index);\r\n    }\r\n    return null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B3",
      "B1 : If(i0 \u003e\u003d $i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  if (i0 \u003c 0) goto B1 else B3\n}",
      "B1 {\n  $r1 \u003d List _children\u003e\n  $i1 \u003d $r1.size()\n  if (i0 \u003e\u003d $i1) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d List _children\u003e\n  $r3 \u003d $r2.remove(i0)\n  $r4 \u003d JsonNode) $r3\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "addPOJO",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode addPOJO(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return _add((pojo \u003d\u003d null) ? nullNode() : pojoNode(pojo));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  Object\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0.pojoNode(r1)\n}",
      "B3 {\n  $r2 \u003d r0._add($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#_add(...1)",
        "body": "{\r\n    _children.add(node);\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#pojoNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "addRawValue",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode addRawValue(com.fasterxml.jackson.databind.util.RawValue)",
    "visibility": "public",
    "body": "{\r\n    return _add((raw \u003d\u003d null) ? nullNode() : rawValueNode(raw));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  RawValue\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0.rawValueNode(r1)\n}",
      "B3 {\n  $r2 \u003d r0._add($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#rawValueNode(...1)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#_add(...1)",
        "body": "{\r\n    _children.add(node);\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "add",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode add(java.lang.Short)",
    "visibility": "public",
    "body": "{\r\n    return _add(numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  Short\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $s0 \u003d r1.shortValue()\n  $r3 \u003d r0.numberNode($s0)\n}",
      "B3 {\n  $r2 \u003d r0._add($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#_add(...1)",
        "body": "{\r\n    _children.add(node);\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "add",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode add(java.lang.Integer)",
    "visibility": "public",
    "body": "{\r\n    return _add((v \u003d\u003d null) ? nullNode() : numberNode(v.intValue()));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  Integer\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $i0 \u003d r1.intValue()\n  $r3 \u003d r0.numberNode($i0)\n}",
      "B3 {\n  $r2 \u003d r0._add($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#_add(...1)",
        "body": "{\r\n    _children.add(node);\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "add",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode add(java.lang.Long)",
    "visibility": "public",
    "body": "{\r\n    return _add(numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  Long\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $l0 \u003d r1.longValue()\n  $r3 \u003d r0.numberNode($l0)\n}",
      "B3 {\n  $r2 \u003d r0._add($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#_add(...1)",
        "body": "{\r\n    _children.add(node);\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "add",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode add(java.lang.Float)",
    "visibility": "public",
    "body": "{\r\n    return _add(numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  Float\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $f0 \u003d r1.floatValue()\n  $r3 \u003d r0.numberNode($f0)\n}",
      "B3 {\n  $r2 \u003d r0._add($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#_add(...1)",
        "body": "{\r\n    _children.add(node);\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "add",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode add(java.lang.Double)",
    "visibility": "public",
    "body": "{\r\n    return _add(numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  Double\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $d0 \u003d r1.doubleValue()\n  $r3 \u003d r0.numberNode($d0)\n}",
      "B3 {\n  $r2 \u003d r0._add($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#_add(...1)",
        "body": "{\r\n    _children.add(node);\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "add",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode add(java.math.BigDecimal)",
    "visibility": "public",
    "body": "{\r\n    return _add((v \u003d\u003d null) ? nullNode() : numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  BigDecimal\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0.numberNode(r1)\n}",
      "B3 {\n  $r2 \u003d r0._add($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#_add(...1)",
        "body": "{\r\n    _children.add(node);\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "add",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode add(java.math.BigInteger)",
    "visibility": "public",
    "body": "{\r\n    return _add((v \u003d\u003d null) ? nullNode() : numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  BigInteger\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0.numberNode(r1)\n}",
      "B3 {\n  $r2 \u003d r0._add($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#_add(...1)",
        "body": "{\r\n    _children.add(node);\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "add",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode add(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return _add((v \u003d\u003d null) ? nullNode() : textNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  String\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0.textNode(r1)\n}",
      "B3 {\n  $r2 \u003d r0._add($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#textNode(...1)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#_add(...1)",
        "body": "{\r\n    _children.add(node);\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "add",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode add(java.lang.Boolean)",
    "visibility": "public",
    "body": "{\r\n    return _add(booleanNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  Boolean\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $z0 \u003d r1.booleanValue()\n  $r3 \u003d r0.booleanNode($z0)\n}",
      "B3 {\n  $r2 \u003d r0._add($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#booleanNode(...1)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#_add(...1)",
        "body": "{\r\n    _children.add(node);\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "add",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode add(byte[])",
    "visibility": "public",
    "body": "{\r\n    return _add((v \u003d\u003d null) ? nullNode() : binaryNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  r1 :\u003d @parameter0: byte[]\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0.binaryNode(r1)\n}",
      "B3 {\n  $r2 \u003d r0._add($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#_add(...1)",
        "body": "{\r\n    _children.add(node);\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#binaryNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "insertPOJO",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode insertPOJO(int,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return _insert(index, (pojo \u003d\u003d null) ? nullNode() : pojoNode(pojo));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  Object\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0.pojoNode(r1)\n}",
      "B3 {\n  $r2 \u003d r0._insert(i0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#_insert(...2)",
        "body": "{\r\n    if (index \u003c 0) {\r\n        _children.add(0, node);\r\n    } else if (index \u003e\u003d _children.size()) {\r\n        _children.add(node);\r\n    } else {\r\n        _children.add(index, node);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#pojoNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "insertRawValue",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode insertRawValue(int,com.fasterxml.jackson.databind.util.RawValue)",
    "visibility": "public",
    "body": "{\r\n    return _insert(index, (raw \u003d\u003d null) ? nullNode() : rawValueNode(raw));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  RawValue\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0.rawValueNode(r1)\n}",
      "B3 {\n  $r2 \u003d r0._insert(i0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#rawValueNode(...1)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#_insert(...2)",
        "body": "{\r\n    if (index \u003c 0) {\r\n        _children.add(0, node);\r\n    } else if (index \u003e\u003d _children.size()) {\r\n        _children.add(node);\r\n    } else {\r\n        _children.add(index, node);\r\n    }\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "insert",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode insert(int,java.lang.Short)",
    "visibility": "public",
    "body": "{\r\n    return _insert(index, numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  Short\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $s1 \u003d r1.shortValue()\n  $r3 \u003d r0.numberNode($s1)\n}",
      "B3 {\n  $r2 \u003d r0._insert(i0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#_insert(...2)",
        "body": "{\r\n    if (index \u003c 0) {\r\n        _children.add(0, node);\r\n    } else if (index \u003e\u003d _children.size()) {\r\n        _children.add(node);\r\n    } else {\r\n        _children.add(index, node);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "insert",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode insert(int,java.lang.Integer)",
    "visibility": "public",
    "body": "{\r\n    return _insert(index, (v \u003d\u003d null) ? nullNode() : numberNode(v.intValue()));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  Integer\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $i1 \u003d r1.intValue()\n  $r3 \u003d r0.numberNode($i1)\n}",
      "B3 {\n  $r2 \u003d r0._insert(i0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#_insert(...2)",
        "body": "{\r\n    if (index \u003c 0) {\r\n        _children.add(0, node);\r\n    } else if (index \u003e\u003d _children.size()) {\r\n        _children.add(node);\r\n    } else {\r\n        _children.add(index, node);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "insert",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode insert(int,java.lang.Long)",
    "visibility": "public",
    "body": "{\r\n    return _insert(index, numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  Long\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $l1 \u003d r1.longValue()\n  $r3 \u003d r0.numberNode($l1)\n}",
      "B3 {\n  $r2 \u003d r0._insert(i0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#_insert(...2)",
        "body": "{\r\n    if (index \u003c 0) {\r\n        _children.add(0, node);\r\n    } else if (index \u003e\u003d _children.size()) {\r\n        _children.add(node);\r\n    } else {\r\n        _children.add(index, node);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "insert",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode insert(int,java.lang.Float)",
    "visibility": "public",
    "body": "{\r\n    return _insert(index, numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  Float\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $f0 \u003d r1.floatValue()\n  $r3 \u003d r0.numberNode($f0)\n}",
      "B3 {\n  $r2 \u003d r0._insert(i0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#_insert(...2)",
        "body": "{\r\n    if (index \u003c 0) {\r\n        _children.add(0, node);\r\n    } else if (index \u003e\u003d _children.size()) {\r\n        _children.add(node);\r\n    } else {\r\n        _children.add(index, node);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "insert",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode insert(int,java.lang.Double)",
    "visibility": "public",
    "body": "{\r\n    return _insert(index, numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  Double\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $d0 \u003d r1.doubleValue()\n  $r3 \u003d r0.numberNode($d0)\n}",
      "B3 {\n  $r2 \u003d r0._insert(i0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#_insert(...2)",
        "body": "{\r\n    if (index \u003c 0) {\r\n        _children.add(0, node);\r\n    } else if (index \u003e\u003d _children.size()) {\r\n        _children.add(node);\r\n    } else {\r\n        _children.add(index, node);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "insert",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode insert(int,java.math.BigDecimal)",
    "visibility": "public",
    "body": "{\r\n    return _insert(index, (v \u003d\u003d null) ? nullNode() : numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  BigDecimal\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0.numberNode(r1)\n}",
      "B3 {\n  $r2 \u003d r0._insert(i0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#_insert(...2)",
        "body": "{\r\n    if (index \u003c 0) {\r\n        _children.add(0, node);\r\n    } else if (index \u003e\u003d _children.size()) {\r\n        _children.add(node);\r\n    } else {\r\n        _children.add(index, node);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "insert",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode insert(int,java.math.BigInteger)",
    "visibility": "public",
    "body": "{\r\n    return _insert(index, (v \u003d\u003d null) ? nullNode() : numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  BigInteger\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0.numberNode(r1)\n}",
      "B3 {\n  $r2 \u003d r0._insert(i0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#_insert(...2)",
        "body": "{\r\n    if (index \u003c 0) {\r\n        _children.add(0, node);\r\n    } else if (index \u003e\u003d _children.size()) {\r\n        _children.add(node);\r\n    } else {\r\n        _children.add(index, node);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "insert",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode insert(int,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return _insert(index, (v \u003d\u003d null) ? nullNode() : textNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  String\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0.textNode(r1)\n}",
      "B3 {\n  $r2 \u003d r0._insert(i0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#textNode(...1)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#_insert(...2)",
        "body": "{\r\n    if (index \u003c 0) {\r\n        _children.add(0, node);\r\n    } else if (index \u003e\u003d _children.size()) {\r\n        _children.add(node);\r\n    } else {\r\n        _children.add(index, node);\r\n    }\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "insert",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode insert(int,java.lang.Boolean)",
    "visibility": "public",
    "body": "{\r\n    return _insert(index, booleanNode(v));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  Boolean\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r1.insertNull(i0)\n  return\n}",
      "B2 {\n  $z0 \u003d r0.booleanValue()\n  $r2 \u003d r1.booleanNode($z0)\n  $r3 \u003d r1._insert(i0, $r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#booleanNode(...1)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#_insert(...2)",
        "body": "{\r\n    if (index \u003c 0) {\r\n        _children.add(0, node);\r\n    } else if (index \u003e\u003d _children.size()) {\r\n        _children.add(node);\r\n    } else {\r\n        _children.add(index, node);\r\n    }\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "insert",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode insert(int,byte[])",
    "visibility": "public",
    "body": "{\r\n    if (v \u003d\u003d null) {\r\n        return insertNull(index);\r\n    }\r\n    return _insert(index, binaryNode(v));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  r0 :\u003d @parameter1: byte[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r1.insertNull(i0)\n  return\n}",
      "B2 {\n  $r2 \u003d r1.binaryNode(r0)\n  $r3 \u003d r1._insert(i0, $r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#insertNull(...1)",
        "body": "{\r\n    return _insert(index, nullNode());\r\n}"
      },
      {
        "name": "ArrayNode#binaryNode(...1)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#_insert(...2)",
        "body": "{\r\n    if (index \u003c 0) {\r\n        _children.add(0, node);\r\n    } else if (index \u003e\u003d _children.size()) {\r\n        _children.add(node);\r\n    } else {\r\n        _children.add(index, node);\r\n    }\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "setPOJO",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode setPOJO(int,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return _set(index, (pojo \u003d\u003d null) ? nullNode() : pojoNode(pojo));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  Object\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0.pojoNode(r1)\n}",
      "B3 {\n  $r2 \u003d r0._set(i0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#_set(...2)",
        "body": "{\r\n    if (index \u003c 0 || index \u003e\u003d _children.size()) {\r\n        throw new IndexOutOfBoundsException(\"Illegal index \" + index + \", array size \" + size());\r\n    }\r\n    _children.set(index, node);\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#pojoNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "setRawValue",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode setRawValue(int,com.fasterxml.jackson.databind.util.RawValue)",
    "visibility": "public",
    "body": "{\r\n    return _set(index, (raw \u003d\u003d null) ? nullNode() : rawValueNode(raw));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  RawValue\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0.rawValueNode(r1)\n}",
      "B3 {\n  $r2 \u003d r0._set(i0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#_set(...2)",
        "body": "{\r\n    if (index \u003c 0 || index \u003e\u003d _children.size()) {\r\n        throw new IndexOutOfBoundsException(\"Illegal index \" + index + \", array size \" + size());\r\n    }\r\n    _children.set(index, node);\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#rawValueNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "set",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode set(int,java.lang.Short)",
    "visibility": "public",
    "body": "{\r\n    return _set(index, numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  Short\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $s1 \u003d r1.shortValue()\n  $r3 \u003d r0.numberNode($s1)\n}",
      "B3 {\n  $r2 \u003d r0._set(i0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#_set(...2)",
        "body": "{\r\n    if (index \u003c 0 || index \u003e\u003d _children.size()) {\r\n        throw new IndexOutOfBoundsException(\"Illegal index \" + index + \", array size \" + size());\r\n    }\r\n    _children.set(index, node);\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "set",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode set(int,java.lang.Integer)",
    "visibility": "public",
    "body": "{\r\n    return _set(index, (v \u003d\u003d null) ? nullNode() : numberNode(v.intValue()));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  Integer\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $i1 \u003d r1.intValue()\n  $r3 \u003d r0.numberNode($i1)\n}",
      "B3 {\n  $r2 \u003d r0._set(i0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#_set(...2)",
        "body": "{\r\n    if (index \u003c 0 || index \u003e\u003d _children.size()) {\r\n        throw new IndexOutOfBoundsException(\"Illegal index \" + index + \", array size \" + size());\r\n    }\r\n    _children.set(index, node);\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "set",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode set(int,java.lang.Long)",
    "visibility": "public",
    "body": "{\r\n    return _set(index, numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  Long\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $l1 \u003d r1.longValue()\n  $r3 \u003d r0.numberNode($l1)\n}",
      "B3 {\n  $r2 \u003d r0._set(i0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#_set(...2)",
        "body": "{\r\n    if (index \u003c 0 || index \u003e\u003d _children.size()) {\r\n        throw new IndexOutOfBoundsException(\"Illegal index \" + index + \", array size \" + size());\r\n    }\r\n    _children.set(index, node);\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "set",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode set(int,java.lang.Float)",
    "visibility": "public",
    "body": "{\r\n    return _set(index, numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  Float\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $f0 \u003d r1.floatValue()\n  $r3 \u003d r0.numberNode($f0)\n}",
      "B3 {\n  $r2 \u003d r0._set(i0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#_set(...2)",
        "body": "{\r\n    if (index \u003c 0 || index \u003e\u003d _children.size()) {\r\n        throw new IndexOutOfBoundsException(\"Illegal index \" + index + \", array size \" + size());\r\n    }\r\n    _children.set(index, node);\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "set",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode set(int,java.lang.Double)",
    "visibility": "public",
    "body": "{\r\n    return _set(index, numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  Double\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $d0 \u003d r1.doubleValue()\n  $r3 \u003d r0.numberNode($d0)\n}",
      "B3 {\n  $r2 \u003d r0._set(i0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#_set(...2)",
        "body": "{\r\n    if (index \u003c 0 || index \u003e\u003d _children.size()) {\r\n        throw new IndexOutOfBoundsException(\"Illegal index \" + index + \", array size \" + size());\r\n    }\r\n    _children.set(index, node);\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "set",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode set(int,java.math.BigDecimal)",
    "visibility": "public",
    "body": "{\r\n    return _set(index, (v \u003d\u003d null) ? nullNode() : numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  BigDecimal\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0.numberNode(r1)\n}",
      "B3 {\n  $r2 \u003d r0._set(i0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#_set(...2)",
        "body": "{\r\n    if (index \u003c 0 || index \u003e\u003d _children.size()) {\r\n        throw new IndexOutOfBoundsException(\"Illegal index \" + index + \", array size \" + size());\r\n    }\r\n    _children.set(index, node);\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "set",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode set(int,java.math.BigInteger)",
    "visibility": "public",
    "body": "{\r\n    return _set(index, (v \u003d\u003d null) ? nullNode() : numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  BigInteger\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0.numberNode(r1)\n}",
      "B3 {\n  $r2 \u003d r0._set(i0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#_set(...2)",
        "body": "{\r\n    if (index \u003c 0 || index \u003e\u003d _children.size()) {\r\n        throw new IndexOutOfBoundsException(\"Illegal index \" + index + \", array size \" + size());\r\n    }\r\n    _children.set(index, node);\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "set",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode set(int,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return _set(index, (v \u003d\u003d null) ? nullNode() : textNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  String\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0.textNode(r1)\n}",
      "B3 {\n  $r2 \u003d r0._set(i0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#_set(...2)",
        "body": "{\r\n    if (index \u003c 0 || index \u003e\u003d _children.size()) {\r\n        throw new IndexOutOfBoundsException(\"Illegal index \" + index + \", array size \" + size());\r\n    }\r\n    _children.set(index, node);\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#textNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "set",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode set(int,java.lang.Boolean)",
    "visibility": "public",
    "body": "{\r\n    return _set(index, booleanNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  Boolean\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $z0 \u003d r1.booleanValue()\n  $r3 \u003d r0.booleanNode($z0)\n}",
      "B3 {\n  $r2 \u003d r0._set(i0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#_set(...2)",
        "body": "{\r\n    if (index \u003c 0 || index \u003e\u003d _children.size()) {\r\n        throw new IndexOutOfBoundsException(\"Illegal index \" + index + \", array size \" + size());\r\n    }\r\n    _children.set(index, node);\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#booleanNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "set",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode set(int,byte[])",
    "visibility": "public",
    "body": "{\r\n    return _set(index, (v \u003d\u003d null) ? nullNode() : binaryNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  i0 :\u003d @parameter0: int\n  r1 :\u003d @parameter1: byte[]\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0.binaryNode(r1)\n}",
      "B3 {\n  $r2 \u003d r0._set(i0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayNode#_set(...2)",
        "body": "{\r\n    if (index \u003c 0 || index \u003e\u003d _children.size()) {\r\n        throw new IndexOutOfBoundsException(\"Illegal index \" + index + \", array size \" + size());\r\n    }\r\n    _children.set(index, node);\r\n    return this;\r\n}"
      },
      {
        "name": "ArrayNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayNode#binaryNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ArrayNode",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    if (o instanceof ArrayNode) {\r\n        return _children.equals(((ArrayNode) o)._children);\r\n    }\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  ArrayNode\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z0 \u003d ArrayNode\n  if ($z0 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r4 \u003d List _children\u003e\n  $r2 \u003d ArrayNode) r0\n  $r3 \u003d List _children\u003e\n  $z1 \u003d $r4.equals($r3)\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.BigIntegerNode",
    "methodName": "canConvertToInt",
    "signature": "boolean canConvertToInt()",
    "visibility": "public",
    "body": "{\r\n    return (_value.compareTo(MIN_INTEGER) \u003e\u003d 0) \u0026\u0026 (_value.compareTo(MAX_INTEGER) \u003c\u003d 0);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 \u003c 0) → B1 | else → B3",
      "B1 : If($i1 \u003e 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  BigIntegerNode\n  $r2 \u003d BigInteger _value\u003e\n  $r1 \u003d BigInteger MIN_INTEGER\u003e\n  $i0 \u003d $r2.compareTo($r1)\n  if ($i0 \u003c 0) goto B1 else B3\n}",
      "B1 {\n  $r4 \u003d BigInteger _value\u003e\n  $r3 \u003d BigInteger MAX_INTEGER\u003e\n  $i1 \u003d $r4.compareTo($r3)\n  if ($i1 \u003e 0) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.BigIntegerNode",
    "methodName": "canConvertToLong",
    "signature": "boolean canConvertToLong()",
    "visibility": "public",
    "body": "{\r\n    return (_value.compareTo(MIN_LONG) \u003e\u003d 0) \u0026\u0026 (_value.compareTo(MAX_LONG) \u003c\u003d 0);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 \u003c 0) → B1 | else → B3",
      "B1 : If($i1 \u003e 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  BigIntegerNode\n  $r2 \u003d BigInteger _value\u003e\n  $r1 \u003d BigInteger MIN_LONG\u003e\n  $i0 \u003d $r2.compareTo($r1)\n  if ($i0 \u003c 0) goto B1 else B3\n}",
      "B1 {\n  $r4 \u003d BigInteger _value\u003e\n  $r3 \u003d BigInteger MAX_LONG\u003e\n  $i1 \u003d $r4.compareTo($r3)\n  if ($i1 \u003e 0) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.BigIntegerNode",
    "methodName": "asBoolean",
    "signature": "boolean asBoolean(boolean)",
    "visibility": "public",
    "body": "{\r\n    return !BigInteger.ZERO.equals(_value);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BigIntegerNode\n  z1 :\u003d @parameter0: boolean\n  $r2 \u003d BigInteger ZERO\u003e\n  $r1 \u003d BigInteger _value\u003e\n  $z0 \u003d $r2.equals($r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z2 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z2 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.BigIntegerNode",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    if (o instanceof BigIntegerNode) {\r\n        BigIntegerNode otherNode \u003d (BigIntegerNode) o;\r\n        return Objects.equals(otherNode._value, _value);\r\n    }\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  BigIntegerNode\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z0 \u003d BigIntegerNode\n  if ($z0 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  r2 \u003d BigIntegerNode) r0\n  $r4 \u003d BigInteger _value\u003e\n  $r3 \u003d BigInteger _value\u003e\n  $z1 \u003d Objects.equals($r4, $r3)\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.BinaryNode",
    "methodName": "valueOf",
    "signature": "com.fasterxml.jackson.databind.node.BinaryNode valueOf(byte[])",
    "visibility": "public",
    "body": "{\r\n    if (data \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (data.length \u003d\u003d 0) {\r\n        return EMPTY_BINARY_NODE;\r\n    }\r\n    return new BinaryNode(data);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d BinaryNode EMPTY_BINARY_NODE\u003e\n  return\n}",
      "B4 {\n  $r1 \u003d BinaryNode\n  new BinaryNode(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.BinaryNode",
    "methodName": "valueOf",
    "signature": "com.fasterxml.jackson.databind.node.BinaryNode valueOf(byte[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (data \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (length \u003d\u003d 0) {\r\n        return EMPTY_BINARY_NODE;\r\n    }\r\n    return new BinaryNode(data, offset, length);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  i1 :\u003d @parameter1: int\n  i0 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d BinaryNode EMPTY_BINARY_NODE\u003e\n  return\n}",
      "B4 {\n  $r1 \u003d BinaryNode\n  new BinaryNode(r0, i1, i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.BinaryNode",
    "methodName": "serialize",
    "signature": "void serialize(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (_data \u003d\u003d null) {\r\n        g.writeNull();\r\n        return;\r\n    }\r\n    g.writeBinary(provider.getConfig().getBase64Variant(), _data, 0, _data.length);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BinaryNode\n  JsonGenerator\n  SerializerProvider\n  $r1 \u003d BinaryNode: byte[] _data\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r2.writeNull()\n  return\n}",
      "B2 {\n  $r4 \u003d r3.getConfig()\n  $r7 \u003d $r4.getBase64Variant()\n  $r6 \u003d BinaryNode: byte[] _data\u003e\n  $r5 \u003d BinaryNode: byte[] _data\u003e\n  $i0 \u003d lengthof $r5\n  r2.writeBinary($r7, $r6, 0, $i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.BinaryNode",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    if (o instanceof BinaryNode) {\r\n        byte[] otherData \u003d ((BinaryNode) o)._data;\r\n        if (_data \u003d\u003d otherData) {\r\n            return true;\r\n        }\r\n        if ((_data \u003d\u003d null) || (otherData \u003d\u003d null)) {\r\n            return false;\r\n        }\r\n        return Arrays.equals(_data, otherData);\r\n    }\r\n    return false;\r\n}",
    "nodes": 12,
    "edges": 12,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B11",
      "B5 : If($r4 !\u003d r3) → B6 | else → B7",
      "B7 : If($r5 \u003d\u003d null) → B8 | else → B9",
      "B8 : If(r3 !\u003d null) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  BinaryNode\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z0 \u003d BinaryNode\n  if ($z0 \u003d\u003d false) goto B5 else B11\n}",
      "B5 {\n  $r2 \u003d BinaryNode) r0\n  r3 \u003d BinaryNode: byte[] _data\u003e\n  $r4 \u003d BinaryNode: byte[] _data\u003e\n  if ($r4 !\u003d r3) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $r5 \u003d BinaryNode: byte[] _data\u003e\n  if ($r5 \u003d\u003d null) goto B8 else B9\n}",
      "B8 {\n  if (r3 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $r6 \u003d BinaryNode: byte[] _data\u003e\n  $z1 \u003d Arrays.equals($r6, r3)\n  return\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B11",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.BinaryNode",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    return (_data \u003d\u003d null) ? -1 : _data.length;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BinaryNode\n  $r1 \u003d BinaryNode: byte[] _data\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i2 \u003d (int) -1\n  $i0 \u003d $i2\n  goto B3\n}",
      "B2 {\n  $r2 \u003d BinaryNode: byte[] _data\u003e\n  $i0 \u003d lengthof $r2\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.BooleanNode",
    "methodName": "valueOf",
    "signature": "com.fasterxml.jackson.databind.node.BooleanNode valueOf(boolean)",
    "visibility": "public",
    "body": "{\r\n    return b ? TRUE : FALSE;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  z0 :\u003d @parameter0: boolean\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r0 \u003d BooleanNode TRUE\u003e\n  goto B3\n}",
      "B2 {\n  $r0 \u003d BooleanNode FALSE\u003e\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.BooleanNode",
    "methodName": "asToken",
    "signature": "com.fasterxml.jackson.core.JsonToken asToken()",
    "visibility": "public",
    "body": "{\r\n    return _value ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BooleanNode\n  $z0 \u003d BooleanNode: boolean _value\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d JsonToken VALUE_TRUE\u003e\n  goto B3\n}",
      "B2 {\n  $r1 \u003d JsonToken VALUE_FALSE\u003e\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.BooleanNode",
    "methodName": "asText",
    "signature": "java.lang.String asText()",
    "visibility": "public",
    "body": "{\r\n    return _value ? \"true\" : \"false\";\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BooleanNode\n  $z0 \u003d BooleanNode: boolean _value\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d \"true\"\n  goto B3\n}",
      "B2 {\n  $r1 \u003d \"false\"\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.BooleanNode",
    "methodName": "asInt",
    "signature": "int asInt(int)",
    "visibility": "public",
    "body": "{\r\n    return _value ? 1 : 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BooleanNode\n  i0 :\u003d @parameter0: int\n  $z0 \u003d BooleanNode: boolean _value\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $b1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $b1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.BooleanNode",
    "methodName": "asLong",
    "signature": "long asLong(long)",
    "visibility": "public",
    "body": "{\r\n    return _value ? 1L : 0L;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BooleanNode\n  l0 :\u003d @parameter0: long\n  $z0 \u003d BooleanNode: boolean _value\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $l1 \u003d 1L\n  goto B3\n}",
      "B2 {\n  $l1 \u003d 0L\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.BooleanNode",
    "methodName": "asDouble",
    "signature": "double asDouble(double)",
    "visibility": "public",
    "body": "{\r\n    return _value ? 1.0 : 0.0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BooleanNode\n  d0 :\u003d @parameter0: double\n  $z0 \u003d BooleanNode: boolean _value\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $d1 \u003d 0\n  goto B3\n}",
      "B2 {\n  $d1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.BooleanNode",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    return _value ? 3 : 1;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BooleanNode\n  $z0 \u003d BooleanNode: boolean _value\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $b0 \u003d 3\n  goto B3\n}",
      "B2 {\n  $b0 \u003d 1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.BooleanNode",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    /* 11-Mar-2013, tatu: Apparently ClassLoaders can manage to load\r\n         *    different instances, rendering identity comparisons broken.\r\n         *    So let\u0027s use value instead.\r\n         */\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    if (!(o instanceof BooleanNode)) {\r\n        return false;\r\n    }\r\n    return (_value \u003d\u003d ((BooleanNode) o)._value);\r\n}",
    "nodes": 10,
    "edges": 10,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($z0 !\u003d 0) → B5 | else → B6",
      "B6 : If($z2 !\u003d $z1) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  BooleanNode\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z0 \u003d BooleanNode\n  if ($z0 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $z2 \u003d BooleanNode: boolean _value\u003e\n  $r2 \u003d BooleanNode) r0\n  $z1 \u003d BooleanNode: boolean _value\u003e\n  if ($z2 !\u003d $z1) goto B7 else B8\n}",
      "B7 {\n  $z3 \u003d 1\n  goto B9\n}",
      "B8 {\n  $z3 \u003d 0\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.DecimalNode",
    "methodName": "canConvertToInt",
    "signature": "boolean canConvertToInt()",
    "visibility": "public",
    "body": "{\r\n    return (_value.compareTo(MIN_INTEGER) \u003e\u003d 0) \u0026\u0026 (_value.compareTo(MAX_INTEGER) \u003c\u003d 0);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 \u003c 0) → B1 | else → B3",
      "B1 : If($i1 \u003e 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DecimalNode\n  $r2 \u003d BigDecimal _value\u003e\n  $r1 \u003d BigDecimal MIN_INTEGER\u003e\n  $i0 \u003d $r2.compareTo($r1)\n  if ($i0 \u003c 0) goto B1 else B3\n}",
      "B1 {\n  $r4 \u003d BigDecimal _value\u003e\n  $r3 \u003d BigDecimal MAX_INTEGER\u003e\n  $i1 \u003d $r4.compareTo($r3)\n  if ($i1 \u003e 0) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.DecimalNode",
    "methodName": "canConvertToLong",
    "signature": "boolean canConvertToLong()",
    "visibility": "public",
    "body": "{\r\n    return (_value.compareTo(MIN_LONG) \u003e\u003d 0) \u0026\u0026 (_value.compareTo(MAX_LONG) \u003c\u003d 0);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 \u003c 0) → B1 | else → B3",
      "B1 : If($i1 \u003e 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DecimalNode\n  $r2 \u003d BigDecimal _value\u003e\n  $r1 \u003d BigDecimal MIN_LONG\u003e\n  $i0 \u003d $r2.compareTo($r1)\n  if ($i0 \u003c 0) goto B1 else B3\n}",
      "B1 {\n  $r4 \u003d BigDecimal _value\u003e\n  $r3 \u003d BigDecimal MAX_LONG\u003e\n  $i1 \u003d $r4.compareTo($r3)\n  if ($i1 \u003e 0) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.DecimalNode",
    "methodName": "canConvertToExactIntegral",
    "signature": "boolean canConvertToExactIntegral()",
    "visibility": "public",
    "body": "{\r\n    return (_value.signum() \u003d\u003d 0) || (_value.scale() \u003c\u003d 0) || (_value.stripTrailingZeros().scale() \u003c\u003d 0);\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($i1 \u003c\u003d 0) → B2 | else → B3",
      "B2 : If($i2 \u003e 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DecimalNode\n  $r1 \u003d BigDecimal _value\u003e\n  $i0 \u003d $r1.signum()\n  if ($i0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d BigDecimal _value\u003e\n  $i1 \u003d $r2.scale()\n  if ($i1 \u003c\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d BigDecimal _value\u003e\n  $r4 \u003d $r3.stripTrailingZeros()\n  $i2 \u003d $r4.scale()\n  if ($i2 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  $z0 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z0 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.DecimalNode",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    if (o instanceof DecimalNode) {\r\n        DecimalNode otherNode \u003d (DecimalNode) o;\r\n        if (otherNode._value \u003d\u003d null) {\r\n            return _value \u003d\u003d null;\r\n        } else if (_value \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return otherNode._value.compareTo(_value) \u003d\u003d 0;\r\n    }\r\n    return false;\r\n}",
    "nodes": 17,
    "edges": 18,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B16",
      "B5 : If($r3 !\u003d null) → B6 | else → B10",
      "B6 : If($r7 !\u003d null) → B7 | else → B8",
      "B10 : If($r4 !\u003d null) → B11 | else → B12",
      "B12 : If($i0 !\u003d 0) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  DecimalNode\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z0 \u003d DecimalNode\n  if ($z0 \u003d\u003d false) goto B5 else B16\n}",
      "B5 {\n  r2 \u003d DecimalNode) r0\n  $r3 \u003d BigDecimal _value\u003e\n  if ($r3 !\u003d null) goto B6 else B10\n}",
      "B6 {\n  $r7 \u003d BigDecimal _value\u003e\n  if ($r7 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  $z1 \u003d 1\n  goto B9\n}",
      "B8 {\n  $z1 \u003d 0\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $r4 \u003d BigDecimal _value\u003e\n  if ($r4 !\u003d null) goto B11 else B12\n}",
      "B11 {\n  return\n}",
      "B12 {\n  $r6 \u003d BigDecimal _value\u003e\n  $r5 \u003d BigDecimal _value\u003e\n  $i0 \u003d $r6.compareTo($r5)\n  if ($i0 !\u003d 0) goto B13 else B14\n}",
      "B13 {\n  $z2 \u003d 1\n  goto B15\n}",
      "B14 {\n  $z2 \u003d 0\n}",
      "B15 {\n  return\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B16",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.DecimalNode",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    if (_value \u003d\u003d null) {\r\n        // we need a stable hash code for _value \u003d\u003d null\r\n        return 0;\r\n    }\r\n    // 13-Feb-2024, tatu: Looks weird, but needed for 2.x invariant\r\n    //   where equality tries to account for differences in trailing\r\n    //   zeroes etc (see `equals()` above)\r\n    return Double.hashCode(doubleValue());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DecimalNode\n  $r1 \u003d BigDecimal _value\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $d0 \u003d r0.doubleValue()\n  $i0 \u003d Double.hashCode($d0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DecimalNode#doubleValue(...0)",
        "body": "{\r\n    return _value.doubleValue();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.DoubleNode",
    "methodName": "canConvertToInt",
    "signature": "boolean canConvertToInt()",
    "visibility": "public",
    "body": "{\r\n    return (_value \u003e\u003d Integer.MIN_VALUE \u0026\u0026 _value \u003c\u003d Integer.MAX_VALUE);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i2 \u003c 0) → B1 | else → B3",
      "B1 : If($i3 \u003e 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DoubleNode\n  $d0 \u003d DoubleNode: double _value\u003e\n  $b0 \u003d 147483648E9\n  $i2 \u003d (int) $b0\n  if ($i2 \u003c 0) goto B1 else B3\n}",
      "B1 {\n  $d1 \u003d DoubleNode: double _value\u003e\n  $b1 \u003d 147483647E9\n  $i3 \u003d (int) $b1\n  if ($i3 \u003e 0) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.DoubleNode",
    "methodName": "canConvertToLong",
    "signature": "boolean canConvertToLong()",
    "visibility": "public",
    "body": "{\r\n    return (_value \u003e\u003d Long.MIN_VALUE \u0026\u0026 _value \u003c\u003d Long.MAX_VALUE);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i2 \u003c 0) → B1 | else → B3",
      "B1 : If($i3 \u003e 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DoubleNode\n  $d0 \u003d DoubleNode: double _value\u003e\n  $b0 \u003d 223372036854776E18\n  $i2 \u003d (int) $b0\n  if ($i2 \u003c 0) goto B1 else B3\n}",
      "B1 {\n  $d1 \u003d DoubleNode: double _value\u003e\n  $b1 \u003d 223372036854776E18\n  $i3 \u003d (int) $b1\n  if ($i3 \u003e 0) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.DoubleNode",
    "methodName": "canConvertToExactIntegral",
    "signature": "boolean canConvertToExactIntegral()",
    "visibility": "public",
    "body": "{\r\n    return !Double.isNaN(_value) \u0026\u0026 !Double.isInfinite(_value) \u0026\u0026 (_value \u003d\u003d Math.rint(_value));\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B4",
      "B1 : If($z1 !\u003d 0) → B2 | else → B4",
      "B2 : If($b0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DoubleNode\n  $d0 \u003d DoubleNode: double _value\u003e\n  $z0 \u003d Double.isNaN($d0)\n  if ($z0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $d1 \u003d DoubleNode: double _value\u003e\n  $z1 \u003d Double.isInfinite($d1)\n  if ($z1 !\u003d 0) goto B2 else B4\n}",
      "B2 {\n  $d3 \u003d DoubleNode: double _value\u003e\n  $d2 \u003d DoubleNode: double _value\u003e\n  $d4 \u003d Math.rint($d2)\n  $b0 \u003d $d3 cmpl $d4\n  if ($b0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $z2 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z2 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.DoubleNode",
    "methodName": "isNaN",
    "signature": "boolean isNaN()",
    "visibility": "public",
    "body": "{\r\n    return Double.isNaN(_value) || Double.isInfinite(_value);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DoubleNode\n  $d0 \u003d DoubleNode: double _value\u003e\n  $z0 \u003d Double.isNaN($d0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $d1 \u003d DoubleNode: double _value\u003e\n  $z1 \u003d Double.isInfinite($d1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.DoubleNode",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    if (o instanceof DoubleNode) {\r\n        // We must account for NaNs: NaN does not equal NaN, therefore we have\r\n        // to use Double.compare().\r\n        final double otherValue \u003d ((DoubleNode) o)._value;\r\n        return Double.compare(_value, otherValue) \u003d\u003d 0;\r\n    }\r\n    return false;\r\n}",
    "nodes": 10,
    "edges": 10,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B9",
      "B5 : If($i0 !\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  DoubleNode\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z0 \u003d DoubleNode\n  if ($z0 \u003d\u003d false) goto B5 else B9\n}",
      "B5 {\n  $r2 \u003d DoubleNode) r0\n  d0 \u003d DoubleNode: double _value\u003e\n  $d1 \u003d DoubleNode: double _value\u003e\n  $i0 \u003d Double.compare($d1, d0)\n  if ($i0 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $z1 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z1 \u003d 0\n}",
      "B8 {\n  return\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.FloatNode",
    "methodName": "canConvertToInt",
    "signature": "boolean canConvertToInt()",
    "visibility": "public",
    "body": "{\r\n    return (_value \u003e\u003d Integer.MIN_VALUE \u0026\u0026 _value \u003c\u003d Integer.MAX_VALUE);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i2 \u003c 0) → B1 | else → B3",
      "B1 : If($i3 \u003e 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  FloatNode\n  $f0 \u003d FloatNode: float _value\u003e\n  $b0 \u003d 1474836E9F\n  $i2 \u003d (int) $b0\n  if ($i2 \u003c 0) goto B1 else B3\n}",
      "B1 {\n  $f1 \u003d FloatNode: float _value\u003e\n  $b1 \u003d 1474836E9F\n  $i3 \u003d (int) $b1\n  if ($i3 \u003e 0) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.FloatNode",
    "methodName": "canConvertToLong",
    "signature": "boolean canConvertToLong()",
    "visibility": "public",
    "body": "{\r\n    return (_value \u003e\u003d Long.MIN_VALUE \u0026\u0026 _value \u003c\u003d Long.MAX_VALUE);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i2 \u003c 0) → B1 | else → B3",
      "B1 : If($i3 \u003e 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  FloatNode\n  $f0 \u003d FloatNode: float _value\u003e\n  $b0 \u003d 223372E18F\n  $i2 \u003d (int) $b0\n  if ($i2 \u003c 0) goto B1 else B3\n}",
      "B1 {\n  $f1 \u003d FloatNode: float _value\u003e\n  $b1 \u003d 223372E18F\n  $i3 \u003d (int) $b1\n  if ($i3 \u003e 0) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.FloatNode",
    "methodName": "canConvertToExactIntegral",
    "signature": "boolean canConvertToExactIntegral()",
    "visibility": "public",
    "body": "{\r\n    return !Float.isNaN(_value) \u0026\u0026 !Float.isInfinite(_value) \u0026\u0026 (_value \u003d\u003d Math.round(_value));\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B4",
      "B1 : If($z1 !\u003d 0) → B2 | else → B4",
      "B2 : If($b1 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  FloatNode\n  $f0 \u003d FloatNode: float _value\u003e\n  $z0 \u003d Float.isNaN($f0)\n  if ($z0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $f1 \u003d FloatNode: float _value\u003e\n  $z1 \u003d Float.isInfinite($f1)\n  if ($z1 !\u003d 0) goto B2 else B4\n}",
      "B2 {\n  $f3 \u003d FloatNode: float _value\u003e\n  $f2 \u003d FloatNode: float _value\u003e\n  $i0 \u003d Math.round($f2)\n  $f4 \u003d (float) $i0\n  $b1 \u003d $f3 cmpl $f4\n  if ($b1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $z2 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z2 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.FloatNode",
    "methodName": "isNaN",
    "signature": "boolean isNaN()",
    "visibility": "public",
    "body": "{\r\n    // Java 8 will have `Float.isFinite()` to combine both checks\r\n    return Float.isNaN(_value) || Float.isInfinite(_value);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  FloatNode\n  $f0 \u003d FloatNode: float _value\u003e\n  $z0 \u003d Float.isNaN($f0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $f1 \u003d FloatNode: float _value\u003e\n  $z1 \u003d Float.isInfinite($f1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.FloatNode",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    if (o instanceof FloatNode) {\r\n        // We must account for NaNs: NaN does not equal NaN, therefore we have\r\n        // to use Double.compare().\r\n        final float otherValue \u003d ((FloatNode) o)._value;\r\n        return Float.compare(_value, otherValue) \u003d\u003d 0;\r\n    }\r\n    return false;\r\n}",
    "nodes": 10,
    "edges": 10,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B9",
      "B5 : If($i0 !\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  FloatNode\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z0 \u003d FloatNode\n  if ($z0 \u003d\u003d false) goto B5 else B9\n}",
      "B5 {\n  $r2 \u003d FloatNode) r0\n  f0 \u003d FloatNode: float _value\u003e\n  $f1 \u003d FloatNode: float _value\u003e\n  $i0 \u003d Float.compare($f1, f0)\n  if ($i0 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $z1 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z1 \u003d 0\n}",
      "B8 {\n  return\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.IntNode",
    "methodName": "valueOf",
    "signature": "com.fasterxml.jackson.databind.node.IntNode valueOf(int)",
    "visibility": "public",
    "body": "{\r\n    if (i \u003e MAX_CANONICAL || i \u003c MIN_CANONICAL)\r\n        return new IntNode(i);\r\n    return CANONICALS[i - MIN_CANONICAL];\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003e 10) → B1 | else → B2",
      "B1 : If(i0 \u003e\u003d $i3) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  if (i0 \u003e 10) goto B1 else B2\n}",
      "B1 {\n  $i3 \u003d (int) -1\n  if (i0 \u003e\u003d $i3) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d IntNode\n  new IntNode(i0)\n  return\n}",
      "B3 {\n  $r1 \u003d IntNode[] CANONICALS\u003e\n  $i5 \u003d (int) -1\n  $i1 \u003d i0 - $i5\n  $r2 \u003d $r1[$i1]\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.IntNode",
    "methodName": "asBoolean",
    "signature": "boolean asBoolean(boolean)",
    "visibility": "public",
    "body": "{\r\n    return _value !\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  IntNode\n  z0 :\u003d @parameter0: boolean\n  $i0 \u003d IntNode: int _value\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.IntNode",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    if (o instanceof IntNode) {\r\n        return ((IntNode) o)._value \u003d\u003d _value;\r\n    }\r\n    return false;\r\n}",
    "nodes": 10,
    "edges": 10,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B9",
      "B5 : If($i1 !\u003d $i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  IntNode\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z0 \u003d IntNode\n  if ($z0 \u003d\u003d false) goto B5 else B9\n}",
      "B5 {\n  $r2 \u003d IntNode) r0\n  $i1 \u003d IntNode: int _value\u003e\n  $i0 \u003d IntNode: int _value\u003e\n  if ($i1 !\u003d $i0) goto B6 else B7\n}",
      "B6 {\n  $z1 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z1 \u003d 0\n}",
      "B8 {\n  return\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "methodName": "willStripTrailingBigDecimalZeroes",
    "signature": "boolean willStripTrailingBigDecimalZeroes()",
    "visibility": "public",
    "body": "{\r\n    return !_cfgBigDecimalExact;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JsonNodeFactory\n  $z0 \u003d JsonNodeFactory: boolean _cfgBigDecimalExact\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "methodName": "booleanNode",
    "signature": "com.fasterxml.jackson.databind.node.BooleanNode booleanNode(boolean)",
    "visibility": "public",
    "body": "{\r\n    return v ? BooleanNode.getTrue() : BooleanNode.getFalse();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JsonNodeFactory\n  z0 :\u003d @parameter0: boolean\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d BooleanNode.getTrue()\n  goto B3\n}",
      "B2 {\n  $r1 \u003d BooleanNode.getFalse()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "methodName": "numberNode",
    "signature": "com.fasterxml.jackson.databind.node.ValueNode numberNode(java.lang.Byte)",
    "visibility": "public",
    "body": "{\r\n    return IntNode.valueOf(v);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JsonNodeFactory\n  Byte\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1.nullNode()\n  goto B3\n}",
      "B2 {\n  $i0 \u003d r0.intValue()\n  $r2 \u003d IntNode.valueOf($i0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "methodName": "numberNode",
    "signature": "com.fasterxml.jackson.databind.node.ValueNode numberNode(java.lang.Short)",
    "visibility": "public",
    "body": "{\r\n    return ShortNode.valueOf(v);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JsonNodeFactory\n  Short\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1.nullNode()\n  goto B3\n}",
      "B2 {\n  $s0 \u003d r0.shortValue()\n  $r2 \u003d ShortNode.valueOf($s0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "methodName": "numberNode",
    "signature": "com.fasterxml.jackson.databind.node.ValueNode numberNode(java.lang.Integer)",
    "visibility": "public",
    "body": "{\r\n    return (value \u003d\u003d null) ? nullNode() : IntNode.valueOf(value.intValue());\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JsonNodeFactory\n  Integer\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1.nullNode()\n  goto B3\n}",
      "B2 {\n  $i0 \u003d r0.intValue()\n  $r2 \u003d IntNode.valueOf($i0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JsonNodeFactory#nullNode(...0)",
        "body": "{\r\n    return NullNode.getInstance();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "methodName": "numberNode",
    "signature": "com.fasterxml.jackson.databind.node.ValueNode numberNode(java.lang.Long)",
    "visibility": "public",
    "body": "{\r\n    return LongNode.valueOf(v);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JsonNodeFactory\n  Long\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r2.nullNode()\n  return\n}",
      "B2 {\n  $l0 \u003d r0.longValue()\n  $r1 \u003d LongNode.valueOf($l0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "methodName": "numberNode",
    "signature": "com.fasterxml.jackson.databind.node.ValueNode numberNode(java.math.BigInteger)",
    "visibility": "public",
    "body": "{\r\n    if (v \u003d\u003d null) {\r\n        return nullNode();\r\n    }\r\n    return BigIntegerNode.valueOf(v);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JsonNodeFactory\n  BigInteger\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r2.nullNode()\n  return\n}",
      "B2 {\n  $r1 \u003d BigIntegerNode.valueOf(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JsonNodeFactory#nullNode(...0)",
        "body": "{\r\n    return NullNode.getInstance();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "methodName": "numberNode",
    "signature": "com.fasterxml.jackson.databind.node.ValueNode numberNode(java.lang.Float)",
    "visibility": "public",
    "body": "{\r\n    return FloatNode.valueOf((float) v);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JsonNodeFactory\n  Float\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1.nullNode()\n  goto B3\n}",
      "B2 {\n  $f0 \u003d r0.floatValue()\n  $r2 \u003d FloatNode.valueOf($f0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "methodName": "numberNode",
    "signature": "com.fasterxml.jackson.databind.node.ValueNode numberNode(java.lang.Double)",
    "visibility": "public",
    "body": "{\r\n    return DoubleNode.valueOf(v);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JsonNodeFactory\n  Double\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1.nullNode()\n  goto B3\n}",
      "B2 {\n  $d0 \u003d r0.doubleValue()\n  $r2 \u003d DoubleNode.valueOf($d0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "methodName": "numberNode",
    "signature": "com.fasterxml.jackson.databind.node.ValueNode numberNode(java.math.BigDecimal)",
    "visibility": "public",
    "body": "{\r\n    if (v \u003d\u003d null) {\r\n        return nullNode();\r\n    }\r\n    // 23-Jan-2023, tatu: As per [databind#3651] it\u0027s now up to caller\r\n    //   to do normalization, if any; we will construct node with given value\r\n    return DecimalNode.valueOf(v);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JsonNodeFactory\n  BigDecimal\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r2.nullNode()\n  return\n}",
      "B2 {\n  $r1 \u003d DecimalNode.valueOf(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JsonNodeFactory#nullNode(...0)",
        "body": "{\r\n    return NullNode.getInstance();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.LongNode",
    "methodName": "canConvertToInt",
    "signature": "boolean canConvertToInt()",
    "visibility": "public",
    "body": "{\r\n    return (_value \u003e\u003d Integer.MIN_VALUE \u0026\u0026 _value \u003c\u003d Integer.MAX_VALUE);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i4 \u003c 0) → B1 | else → B3",
      "B1 : If($i5 \u003e 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  LongNode\n  $l0 \u003d LongNode: long _value\u003e\n  $b1 \u003d $l0 cmp -2147483648L\n  $i4 \u003d (int) $b1\n  if ($i4 \u003c 0) goto B1 else B3\n}",
      "B1 {\n  $l2 \u003d LongNode: long _value\u003e\n  $b3 \u003d $l2 cmp 2147483647L\n  $i5 \u003d (int) $b3\n  if ($i5 \u003e 0) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.LongNode",
    "methodName": "asBoolean",
    "signature": "boolean asBoolean(boolean)",
    "visibility": "public",
    "body": "{\r\n    return _value !\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($b1 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  LongNode\n  z0 :\u003d @parameter0: boolean\n  $l0 \u003d LongNode: long _value\u003e\n  $b1 \u003d $l0 cmp 0L\n  if ($b1 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.LongNode",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    if (o instanceof LongNode) {\r\n        return ((LongNode) o)._value \u003d\u003d _value;\r\n    }\r\n    return false;\r\n}",
    "nodes": 10,
    "edges": 10,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B9",
      "B5 : If($b2 !\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  LongNode\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z0 \u003d LongNode\n  if ($z0 \u003d\u003d false) goto B5 else B9\n}",
      "B5 {\n  $r2 \u003d LongNode) r0\n  $l1 \u003d LongNode: long _value\u003e\n  $l0 \u003d LongNode: long _value\u003e\n  $b2 \u003d $l1 cmp $l0\n  if ($b2 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $z1 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z1 \u003d 0\n}",
      "B8 {\n  return\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.MissingNode",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    /* Hmmh. Since there\u0027s just a singleton instance, this fails in all cases but with\r\n         * identity comparison. However: if this placeholder value was to be considered\r\n         * similar to SQL NULL, it shouldn\u0027t even equal itself?\r\n         * That might cause problems when dealing with collections like Sets...\r\n         * so for now, let\u0027s let identity comparison return true.\r\n         */\r\n    return (o \u003d\u003d this);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MissingNode\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.NullNode",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    // 29-Aug-2019, tatu: [databind#2433] Since custom sub-classes are allowed (bad idea probably),\r\n    //     need to do better comparison\r\n    return (o \u003d\u003d this) || (o instanceof NullNode);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d r1) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  NullNode\n  Object\n  if (r0 \u003d\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d NullNode\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "deepCopy",
    "signature": "com.fasterxml.jackson.databind.node.ObjectNode deepCopy()",
    "visibility": "public",
    "body": "{\r\n    ObjectNode ret \u003d objectNode();\r\n    for (Map.Entry\u003cString, JsonNode\u003e entry : _children.entrySet()) {\r\n        ret._children.put(entry.getKey(), entry.getValue().deepCopy());\r\n    }\r\n    return ret;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  r1 \u003d r0.objectNode()\n  $r2 \u003d Map _children\u003e\n  $r3 \u003d $r2.entrySet()\n  r4 \u003d $r3.iterator()\n}",
      "B1 {\n  $z0 \u003d r4.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d r4.next()\n  r6 \u003d Map$Entry) $r5\n  $r7 \u003d Map _children\u003e\n  $r8 \u003d r6.getKey()\n  $r12 \u003d String) $r8\n  $r9 \u003d r6.getValue()\n  $r10 \u003d JsonNode) $r9\n  $r11 \u003d $r10.deepCopy()\n  $r7.put($r12, $r11)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#objectNode(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.node.ObjectNode \u0027with\u0027(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    JsonPointer ptr \u003d _jsonPointerIfValid(exprOrProperty);\r\n    if (ptr !\u003d null) {\r\n        return withObject(ptr);\r\n    }\r\n    JsonNode n \u003d _children.get(exprOrProperty);\r\n    if (n !\u003d null) {\r\n        if (n instanceof ObjectNode) {\r\n            return (ObjectNode) n;\r\n        }\r\n        throw new UnsupportedOperationException(\"Property \u0027\" + exprOrProperty + \"\u0027 has value that is not of type `ObjectNode` (but `\" + n.getClass().getName() + \"`)\");\r\n    }\r\n    ObjectNode result \u003d objectNode();\r\n    _put(exprOrProperty, result);\r\n    return result;\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(r5 \u003d\u003d null) → B3 | else → B6",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  r2 \u003d r0._jsonPointerIfValid(r1)\n  if (r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r12 \u003d r0.withObject(r2)\n  return\n}",
      "B2 {\n  $r3 \u003d Map _children\u003e\n  $r4 \u003d $r3.get(r1)\n  r5 \u003d JsonNode) $r4\n  if (r5 \u003d\u003d null) goto B3 else B6\n}",
      "B3 {\n  $z0 \u003d ObjectNode\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r11 \u003d ObjectNode) r5\n  return\n}",
      "B5 {\n  $r7 \u003d UnsupportedOperationException\n  $r8 \u003d r5.getClass()\n  $r9 \u003d $r8.getName()\n  $r10 \u003d dynInvoke makeConcatWithConstants(r1, $r9)\n  new UnsupportedOperationException($r10)\n  throw $r7\n}",
      "B6 {\n  r6 \u003d r0.objectNode()\n  r0._put(r1, r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#withObject(...1)",
        "body": "{\r\n    JsonPointer ptr \u003d _jsonPointerIfValid(exprOrProperty);\r\n    if (ptr !\u003d null) {\r\n        return withObject(ptr);\r\n    }\r\n    return withObjectProperty(exprOrProperty);\r\n}"
      },
      {
        "name": "ObjectNode#_put(...2)",
        "body": "{\r\n    _children.put(Objects.requireNonNull(propertyName), value);\r\n    return this;\r\n}"
      },
      {
        "name": "ObjectNode#objectNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ObjectNode#_jsonPointerIfValid(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "withObject",
    "signature": "com.fasterxml.jackson.databind.node.ObjectNode withObject(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    JsonPointer ptr \u003d _jsonPointerIfValid(exprOrProperty);\r\n    if (ptr !\u003d null) {\r\n        return withObject(ptr);\r\n    }\r\n    return withObjectProperty(exprOrProperty);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  r2 \u003d r0._jsonPointerIfValid(r1)\n  if (r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r0.withObject(r2)\n  return\n}",
      "B2 {\n  $r3 \u003d r0.withObjectProperty(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#withObjectProperty(...1)",
        "body": "{\r\n    JsonNode child \u003d _children.get(propName);\r\n    if (child \u003d\u003d null || child.isNull()) {\r\n        return putObject(propName);\r\n    }\r\n    if (child.isObject()) {\r\n        return (ObjectNode) child;\r\n    }\r\n    return _reportWrongNodeType(\"Cannot replace `JsonNode` of type `%s` with `ObjectNode` for property \\\"%s\\\" (default mode `OverwriteMode.%s`)\", child.getClass().getName(), propName, OverwriteMode.NULLS);\r\n}"
      },
      {
        "name": "ObjectNode#withObject(...1)",
        "body": "{\r\n    JsonPointer ptr \u003d _jsonPointerIfValid(exprOrProperty);\r\n    if (ptr !\u003d null) {\r\n        return withObject(ptr);\r\n    }\r\n    return withObjectProperty(exprOrProperty);\r\n}"
      },
      {
        "name": "ObjectNode#_jsonPointerIfValid(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "withObjectProperty",
    "signature": "com.fasterxml.jackson.databind.node.ObjectNode withObjectProperty(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    JsonNode child \u003d _children.get(propName);\r\n    if (child \u003d\u003d null || child.isNull()) {\r\n        return putObject(propName);\r\n    }\r\n    if (child.isObject()) {\r\n        return (ObjectNode) child;\r\n    }\r\n    return _reportWrongNodeType(\"Cannot replace `JsonNode` of type `%s` with `ObjectNode` for property \\\"%s\\\" (default mode `OverwriteMode.%s`)\", child.getClass().getName(), propName, OverwriteMode.NULLS);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  $r2 \u003d Map _children\u003e\n  $r3 \u003d $r2.get(r1)\n  r4 \u003d JsonNode) $r3\n  if (r4 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r4.isNull()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d r0.putObject(r1)\n  return\n}",
      "B3 {\n  $z1 \u003d r4.isObject()\n  if ($z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r12 \u003d ObjectNode) r4\n  return\n}",
      "B5 {\n  $r6 \u003d Object)[3]\n  $r7 \u003d r4.getClass()\n  $r8 \u003d $r7.getName()\n  $r6[0] \u003d $r8\n  $r6[1] \u003d r1\n  $r9 \u003d JsonNode$OverwriteMode NULLS\u003e\n  $r6[2] \u003d $r9\n  $r10 \u003d r0._reportWrongNodeType(\"Cannot replace `JsonNode` of type `%s` with `ObjectNode` for property \\\"%s\\\" (default mode `OverwriteMode.%s`)\", $r6)\n  $r11 \u003d ObjectNode) $r10\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#putObject(...1)",
        "body": "{\r\n    ObjectNode n \u003d objectNode();\r\n    _put(propertyName, n);\r\n    return n;\r\n}"
      },
      {
        "name": "ObjectNode#_reportWrongNodeType(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "withArray",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode withArray(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    JsonPointer ptr \u003d _jsonPointerIfValid(exprOrProperty);\r\n    if (ptr !\u003d null) {\r\n        return withArray(ptr);\r\n    }\r\n    JsonNode n \u003d _children.get(exprOrProperty);\r\n    if (n !\u003d null) {\r\n        if (n instanceof ArrayNode) {\r\n            return (ArrayNode) n;\r\n        }\r\n        throw new UnsupportedOperationException(\"Property \u0027\" + exprOrProperty + \"\u0027 has value that is not of type `ArrayNode` (but `\" + n.getClass().getName() + \"`)\");\r\n    }\r\n    ArrayNode result \u003d arrayNode();\r\n    _put(exprOrProperty, result);\r\n    return result;\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(r5 \u003d\u003d null) → B3 | else → B6",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  r2 \u003d r0._jsonPointerIfValid(r1)\n  if (r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r12 \u003d r0.withArray(r2)\n  return\n}",
      "B2 {\n  $r3 \u003d Map _children\u003e\n  $r4 \u003d $r3.get(r1)\n  r5 \u003d JsonNode) $r4\n  if (r5 \u003d\u003d null) goto B3 else B6\n}",
      "B3 {\n  $z0 \u003d ArrayNode\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r11 \u003d ArrayNode) r5\n  return\n}",
      "B5 {\n  $r7 \u003d UnsupportedOperationException\n  $r8 \u003d r5.getClass()\n  $r9 \u003d $r8.getName()\n  $r10 \u003d dynInvoke makeConcatWithConstants(r1, $r9)\n  new UnsupportedOperationException($r10)\n  throw $r7\n}",
      "B6 {\n  r6 \u003d r0.arrayNode()\n  r0._put(r1, r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#withArray(...1)",
        "body": "{\r\n    JsonPointer ptr \u003d _jsonPointerIfValid(exprOrProperty);\r\n    if (ptr !\u003d null) {\r\n        return withArray(ptr);\r\n    }\r\n    JsonNode n \u003d _children.get(exprOrProperty);\r\n    if (n !\u003d null) {\r\n        if (n instanceof ArrayNode) {\r\n            return (ArrayNode) n;\r\n        }\r\n        throw new UnsupportedOperationException(\"Property \u0027\" + exprOrProperty + \"\u0027 has value that is not of type `ArrayNode` (but `\" + n.getClass().getName() + \"`)\");\r\n    }\r\n    ArrayNode result \u003d arrayNode();\r\n    _put(exprOrProperty, result);\r\n    return result;\r\n}"
      },
      {
        "name": "ObjectNode#_put(...2)",
        "body": "{\r\n    _children.put(Objects.requireNonNull(propertyName), value);\r\n    return this;\r\n}"
      },
      {
        "name": "ObjectNode#_jsonPointerIfValid(...1)",
        "body": "(source not found)"
      },
      {
        "name": "ObjectNode#arrayNode(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "withArrayProperty",
    "signature": "com.fasterxml.jackson.databind.node.ArrayNode withArrayProperty(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    JsonNode child \u003d _children.get(propName);\r\n    if (child \u003d\u003d null || child.isNull()) {\r\n        return putArray(propName);\r\n    }\r\n    if (child.isArray()) {\r\n        return (ArrayNode) child;\r\n    }\r\n    return _reportWrongNodeType(\"Cannot replace `JsonNode` of type `%s` with `ArrayNode` for property \\\"%s\\\" with (default mode `OverwriteMode.%s`)\", child.getClass().getName(), propName, OverwriteMode.NULLS);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  $r2 \u003d Map _children\u003e\n  $r3 \u003d $r2.get(r1)\n  r4 \u003d JsonNode) $r3\n  if (r4 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r4.isNull()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d r0.putArray(r1)\n  return\n}",
      "B3 {\n  $z1 \u003d r4.isArray()\n  if ($z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r12 \u003d ArrayNode) r4\n  return\n}",
      "B5 {\n  $r6 \u003d Object)[3]\n  $r7 \u003d r4.getClass()\n  $r8 \u003d $r7.getName()\n  $r6[0] \u003d $r8\n  $r6[1] \u003d r1\n  $r9 \u003d JsonNode$OverwriteMode NULLS\u003e\n  $r6[2] \u003d $r9\n  $r10 \u003d r0._reportWrongNodeType(\"Cannot replace `JsonNode` of type `%s` with `ArrayNode` for property \\\"%s\\\" with (default mode `OverwriteMode.%s`)\", $r6)\n  $r11 \u003d ArrayNode) $r10\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#_reportWrongNodeType(...4)",
        "body": "(source not found)"
      },
      {
        "name": "ObjectNode#putArray(...1)",
        "body": "{\r\n    ArrayNode n \u003d arrayNode();\r\n    _put(propertyName, n);\r\n    return n;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "path",
    "signature": "com.fasterxml.jackson.databind.JsonNode path(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    JsonNode n \u003d _children.get(propertyName);\r\n    if (n !\u003d null) {\r\n        return n;\r\n    }\r\n    return MissingNode.getInstance();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r4 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  $r2 \u003d Map _children\u003e\n  $r3 \u003d $r2.get(r1)\n  r4 \u003d JsonNode) $r3\n  if (r4 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r5 \u003d MissingNode.getInstance()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "required",
    "signature": "com.fasterxml.jackson.databind.JsonNode required(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    JsonNode n \u003d _children.get(propertyName);\r\n    if (n !\u003d null) {\r\n        return n;\r\n    }\r\n    return _reportRequiredViolation(\"No value for property \u0027%s\u0027 of `ObjectNode`\", propertyName);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r4 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  $r2 \u003d Map _children\u003e\n  $r3 \u003d $r2.get(r1)\n  r4 \u003d JsonNode) $r3\n  if (r4 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r5 \u003d Object)[1]\n  $r5[0] \u003d r1\n  $r6 \u003d r0._reportRequiredViolation(\"No value for property \\\u0027%s\\\u0027 of `ObjectNode`\", $r5)\n  $r7 \u003d JsonNode) $r6\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#_reportRequiredViolation(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "equals",
    "signature": "boolean equals(java.util.Comparator,com.fasterxml.jackson.databind.JsonNode)",
    "visibility": "public",
    "body": "{\r\n    if (!(o instanceof ObjectNode)) {\r\n        return false;\r\n    }\r\n    ObjectNode other \u003d (ObjectNode) o;\r\n    Map\u003cString, JsonNode\u003e m1 \u003d _children;\r\n    Map\u003cString, JsonNode\u003e m2 \u003d other._children;\r\n    final int len \u003d m1.size();\r\n    if (m2.size() !\u003d len) {\r\n        return false;\r\n    }\r\n    for (Map.Entry\u003cString, JsonNode\u003e entry : m1.entrySet()) {\r\n        JsonNode v2 \u003d m2.get(entry.getKey());\r\n        if ((v2 \u003d\u003d null) || !entry.getValue().equals(comparator, v2)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($i1 \u003d\u003d i0) → B3 | else → B4",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B10",
      "B6 : If(r11 \u003d\u003d null) → B7 | else → B8",
      "B7 : If($z2 !\u003d 0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  Comparator\n  JsonNode\n  $z0 \u003d ObjectNode\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r1 \u003d ObjectNode) r0\n  r3 \u003d Map _children\u003e\n  r4 \u003d Map _children\u003e\n  i0 \u003d r3.size()\n  $i1 \u003d r4.size()\n  if ($i1 \u003d\u003d i0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r5 \u003d r3.entrySet()\n  r6 \u003d $r5.iterator()\n}",
      "B5 {\n  $z1 \u003d r6.hasNext()\n  if ($z1 \u003d\u003d false) goto B6 else B10\n}",
      "B6 {\n  $r7 \u003d r6.next()\n  r8 \u003d Map$Entry) $r7\n  $r9 \u003d r8.getKey()\n  $r10 \u003d r4.get($r9)\n  r11 \u003d JsonNode) $r10\n  if (r11 \u003d\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r12 \u003d r8.getValue()\n  $r14 \u003d JsonNode) $r12\n  $z2 \u003d $r14.equals(r13, r11)\n  if ($z2 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  return\n}",
      "B9 {\n  goto B5\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B5",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "findValue",
    "signature": "com.fasterxml.jackson.databind.JsonNode findValue(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    JsonNode jsonNode \u003d _children.get(propertyName);\r\n    if (jsonNode !\u003d null) {\r\n        return jsonNode;\r\n    }\r\n    for (JsonNode child : _children.values()) {\r\n        JsonNode value \u003d child.findValue(propertyName);\r\n        if (value !\u003d null) {\r\n            return value;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 \u003d\u003d null) → B1 | else → B2",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B7",
      "B4 : If(r10 \u003d\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  $r2 \u003d Map _children\u003e\n  $r3 \u003d $r2.get(r1)\n  r4 \u003d JsonNode) $r3\n  if (r4 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r5 \u003d Map _children\u003e\n  $r6 \u003d $r5.values()\n  r7 \u003d $r6.iterator()\n}",
      "B3 {\n  $z0 \u003d r7.hasNext()\n  if ($z0 \u003d\u003d false) goto B4 else B7\n}",
      "B4 {\n  $r8 \u003d r7.next()\n  r9 \u003d JsonNode) $r8\n  r10 \u003d r9.findValue(r1)\n  if (r10 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "findValues",
    "signature": "java.util.List findValues(java.lang.String,java.util.List)",
    "visibility": "public",
    "body": "{\r\n    for (Map.Entry\u003cString, JsonNode\u003e entry : _children.entrySet()) {\r\n        if (propertyName.equals(entry.getKey())) {\r\n            if (foundSoFar \u003d\u003d null) {\r\n                foundSoFar \u003d new ArrayList\u003cJsonNode\u003e();\r\n            }\r\n            foundSoFar.add(entry.getValue());\r\n        } else {\r\n            // only add children if parent not added\r\n            foundSoFar \u003d entry.getValue().findValues(propertyName, foundSoFar);\r\n        }\r\n    }\r\n    return foundSoFar;\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B8",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B6",
      "B3 : If(r13 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  List\n  $r1 \u003d Map _children\u003e\n  $r2 \u003d $r1.entrySet()\n  r3 \u003d $r2.iterator()\n}",
      "B1 {\n  $z0 \u003d r3.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B8\n}",
      "B2 {\n  $r4 \u003d r3.next()\n  r5 \u003d Map$Entry) $r4\n  $r7 \u003d r5.getKey()\n  $z1 \u003d r6.equals($r7)\n  if ($z1 \u003d\u003d false) goto B3 else B6\n}",
      "B3 {\n  if (r13 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r12 \u003d ArrayList\n  new ArrayList()\n  r13 \u003d $r12\n}",
      "B5 {\n  $r10 \u003d r5.getValue()\n  $r11 \u003d JsonNode) $r10\n  r13.add($r11)\n  goto B7\n}",
      "B6 {\n  $r8 \u003d r5.getValue()\n  $r9 \u003d JsonNode) $r8\n  r13 \u003d $r9.findValues(r6, r13)\n}",
      "B7 {\n  goto B1\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B1",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "findValuesAsText",
    "signature": "java.util.List findValuesAsText(java.lang.String,java.util.List)",
    "visibility": "public",
    "body": "{\r\n    for (Map.Entry\u003cString, JsonNode\u003e entry : _children.entrySet()) {\r\n        if (propertyName.equals(entry.getKey())) {\r\n            if (foundSoFar \u003d\u003d null) {\r\n                foundSoFar \u003d new ArrayList\u003cString\u003e();\r\n            }\r\n            foundSoFar.add(entry.getValue().asText());\r\n        } else {\r\n            // only add children if parent not added\r\n            foundSoFar \u003d entry.getValue().findValuesAsText(propertyName, foundSoFar);\r\n        }\r\n    }\r\n    return foundSoFar;\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B8",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B6",
      "B3 : If(r14 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  List\n  $r1 \u003d Map _children\u003e\n  $r2 \u003d $r1.entrySet()\n  r3 \u003d $r2.iterator()\n}",
      "B1 {\n  $z0 \u003d r3.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B8\n}",
      "B2 {\n  $r4 \u003d r3.next()\n  r5 \u003d Map$Entry) $r4\n  $r7 \u003d r5.getKey()\n  $z1 \u003d r6.equals($r7)\n  if ($z1 \u003d\u003d false) goto B3 else B6\n}",
      "B3 {\n  if (r14 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r13 \u003d ArrayList\n  new ArrayList()\n  r14 \u003d $r13\n}",
      "B5 {\n  $r10 \u003d r5.getValue()\n  $r11 \u003d JsonNode) $r10\n  $r12 \u003d $r11.asText()\n  r14.add($r12)\n  goto B7\n}",
      "B6 {\n  $r8 \u003d r5.getValue()\n  $r9 \u003d JsonNode) $r8\n  r14 \u003d $r9.findValuesAsText(r6, r14)\n}",
      "B7 {\n  goto B1\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B1",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "findParent",
    "signature": "com.fasterxml.jackson.databind.node.ObjectNode findParent(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    JsonNode jsonNode \u003d _children.get(propertyName);\r\n    if (jsonNode !\u003d null) {\r\n        return this;\r\n    }\r\n    for (JsonNode child : _children.values()) {\r\n        JsonNode value \u003d child.findParent(propertyName);\r\n        if (value !\u003d null) {\r\n            return (ObjectNode) value;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 \u003d\u003d null) → B1 | else → B2",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B7",
      "B4 : If(r10 \u003d\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  $r2 \u003d Map _children\u003e\n  $r3 \u003d $r2.get(r1)\n  r4 \u003d JsonNode) $r3\n  if (r4 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r5 \u003d Map _children\u003e\n  $r6 \u003d $r5.values()\n  r7 \u003d $r6.iterator()\n}",
      "B3 {\n  $z0 \u003d r7.hasNext()\n  if ($z0 \u003d\u003d false) goto B4 else B7\n}",
      "B4 {\n  $r8 \u003d r7.next()\n  r9 \u003d JsonNode) $r8\n  r10 \u003d r9.findParent(r1)\n  if (r10 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r11 \u003d ObjectNode) r10\n  return\n}",
      "B6 {\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "findParents",
    "signature": "java.util.List findParents(java.lang.String,java.util.List)",
    "visibility": "public",
    "body": "{\r\n    for (Map.Entry\u003cString, JsonNode\u003e entry : _children.entrySet()) {\r\n        if (propertyName.equals(entry.getKey())) {\r\n            if (foundSoFar \u003d\u003d null) {\r\n                foundSoFar \u003d new ArrayList\u003cJsonNode\u003e();\r\n            }\r\n            foundSoFar.add(this);\r\n        } else {\r\n            // only add children if parent not added\r\n            foundSoFar \u003d entry.getValue().findParents(propertyName, foundSoFar);\r\n        }\r\n    }\r\n    return foundSoFar;\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B8",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B6",
      "B3 : If(r11 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  List\n  $r1 \u003d Map _children\u003e\n  $r2 \u003d $r1.entrySet()\n  r3 \u003d $r2.iterator()\n}",
      "B1 {\n  $z0 \u003d r3.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B8\n}",
      "B2 {\n  $r4 \u003d r3.next()\n  r5 \u003d Map$Entry) $r4\n  $r7 \u003d r5.getKey()\n  $z1 \u003d r6.equals($r7)\n  if ($z1 \u003d\u003d false) goto B3 else B6\n}",
      "B3 {\n  if (r11 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r10 \u003d ArrayList\n  new ArrayList()\n  r11 \u003d $r10\n}",
      "B5 {\n  r11.add(r0)\n  goto B7\n}",
      "B6 {\n  $r8 \u003d r5.getValue()\n  $r9 \u003d JsonNode) $r8\n  r11 \u003d $r9.findParents(r6, r11)\n}",
      "B7 {\n  goto B1\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B1",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "serialize",
    "signature": "void serialize(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (provider !\u003d null) {\r\n        boolean trimEmptyArray \u003d !provider.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS);\r\n        boolean skipNulls \u003d !provider.isEnabled(JsonNodeFeature.WRITE_NULL_PROPERTIES);\r\n        if (trimEmptyArray || skipNulls) {\r\n            g.writeStartObject(this);\r\n            serializeFilteredContents(g, provider, trimEmptyArray, skipNulls);\r\n            g.writeEndObject();\r\n            return;\r\n        }\r\n    }\r\n    g.writeStartObject(this);\r\n    for (Map.Entry\u003cString, JsonNode\u003e en : _contentsToSerialize(provider).entrySet()) {\r\n        JsonNode value \u003d en.getValue();\r\n        g.writeFieldName(en.getKey());\r\n        value.serialize(g, provider);\r\n    }\r\n    g.writeEndObject();\r\n}",
    "nodes": 14,
    "edges": 18,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B10",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6",
      "B7 : If(z3 !\u003d 0) → B8 | else → B9",
      "B8 : If($z8 \u003d\u003d false) → B9 | else → B10",
      "B11 : If($z6 \u003d\u003d false) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  JsonGenerator\n  SerializerProvider\n  if (r0 \u003d\u003d null) goto B1 else B10\n}",
      "B1 {\n  $r10 \u003d SerializationFeature WRITE_EMPTY_JSON_ARRAYS\u003e\n  $z0 \u003d r0.isEnabled($r10)\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  z3 \u003d $z2\n  $r11 \u003d JsonNodeFeature WRITE_NULL_PROPERTIES\u003e\n  $z1 \u003d r0.isEnabled($r11)\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $z8 \u003d 1\n  $z7 \u003d 1\n  goto B7\n}",
      "B6 {\n  $z8 \u003d 0\n  $z7 \u003d 0\n}",
      "B7 {\n  z5 \u003d $z7\n  if (z3 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  if ($z8 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  r1.writeStartObject(r2)\n  r2.serializeFilteredContents(r1, r0, z3, z5)\n  r1.writeEndObject()\n  return\n}",
      "B10 {\n  r1.writeStartObject(r2)\n  $r3 \u003d r2._contentsToSerialize(r0)\n  $r4 \u003d $r3.entrySet()\n  $r12 \u003d $r4.iterator()\n}",
      "B11 {\n  $z6 \u003d $r12.hasNext()\n  if ($z6 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $r5 \u003d $r12.next()\n  r13 \u003d Map$Entry) $r5\n  $r6 \u003d r13.getValue()\n  r7 \u003d JsonNode) $r6\n  $r8 \u003d r13.getKey()\n  $r9 \u003d String) $r8\n  r1.writeFieldName($r9)\n  r7.serialize(r1, r0)\n  goto B11\n}",
      "B13 {\n  r1.writeEndObject()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B10",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B11",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#_contentsToSerialize(...1)",
        "body": "{\r\n    if (ctxt.isEnabled(JsonNodeFeature.WRITE_PROPERTIES_SORTED)) {\r\n        if (!_children.isEmpty() \u0026\u0026 // 02-Jun-2024, tatu: Avoid unnecessary copy for custom impls\r\n        !(_children instanceof TreeMap\u003c?, ?\u003e)) {\r\n            return new TreeMap\u003c\u003e(_children);\r\n        }\r\n    }\r\n    return _children;\r\n}"
      },
      {
        "name": "ObjectNode#serializeFilteredContents(...4)",
        "body": "{\r\n    for (Map.Entry\u003cString, JsonNode\u003e en : _contentsToSerialize(ctxt).entrySet()) {\r\n        // 17-Feb-2009, tatu: Can we trust that all nodes will always\r\n        //   extend BaseJsonNode? Or if not, at least implement JsonSerializable?\r\n        //   Let\u0027s start with former, change if we must.\r\n        // 19-Jun-2023, tatu: Actually `JsonNode` is enough\r\n        JsonNode value \u003d en.getValue();\r\n        // as per [databind#867], see if WRITE_EMPTY_JSON_ARRAYS feature is disabled,\r\n        // if the feature is disabled, then should not write an empty array\r\n        // to the output, so continue to the next element in the iteration\r\n        if (trimEmptyArray \u0026\u0026 value.isArray() \u0026\u0026 value.isEmpty(ctxt)) {\r\n            continue;\r\n        }\r\n        if (skipNulls \u0026\u0026 value.isNull()) {\r\n            continue;\r\n        }\r\n        g.writeFieldName(en.getKey());\r\n        value.serialize(g, ctxt);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "serializeWithType",
    "signature": "void serializeWithType(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "visibility": "public",
    "body": "{\r\n    boolean trimEmptyArray \u003d false;\r\n    boolean skipNulls \u003d false;\r\n    if (provider !\u003d null) {\r\n        trimEmptyArray \u003d !provider.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS);\r\n        skipNulls \u003d !provider.isEnabled(JsonNodeFeature.WRITE_NULL_PROPERTIES);\r\n    }\r\n    WritableTypeId typeIdDef \u003d typeSer.writeTypePrefix(g, typeSer.typeId(this, JsonToken.START_OBJECT));\r\n    if (trimEmptyArray || skipNulls) {\r\n        serializeFilteredContents(g, provider, trimEmptyArray, skipNulls);\r\n    } else {\r\n        for (Map.Entry\u003cString, JsonNode\u003e en : _contentsToSerialize(provider).entrySet()) {\r\n            JsonNode value \u003d en.getValue();\r\n            g.writeFieldName(en.getKey());\r\n            value.serialize(g, provider);\r\n        }\r\n    }\r\n    typeSer.writeTypeSuffix(g, typeIdDef);\r\n}",
    "nodes": 15,
    "edges": 20,
    "cc": 7,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B8",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3",
      "B4 : If($z2 !\u003d 0) → B5 | else → B6",
      "B8 : If(z3 !\u003d 0) → B9 | else → B10",
      "B9 : If(z4 \u003d\u003d false) → B10 | else → B11",
      "B12 : If($z0 \u003d\u003d false) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  JsonGenerator\n  SerializerProvider\n  TypeSerializer\n  z3 \u003d 0\n  z4 \u003d 0\n  if (r0 \u003d\u003d null) goto B1 else B8\n}",
      "B1 {\n  $r13 \u003d SerializationFeature WRITE_EMPTY_JSON_ARRAYS\u003e\n  $z1 \u003d r0.isEnabled($r13)\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z5 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z5 \u003d 0\n}",
      "B4 {\n  z3 \u003d $z5\n  $r14 \u003d JsonNodeFeature WRITE_NULL_PROPERTIES\u003e\n  $z2 \u003d r0.isEnabled($r14)\n  if ($z2 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $z6 \u003d 1\n  goto B7\n}",
      "B6 {\n  $z6 \u003d 0\n}",
      "B7 {\n  z4 \u003d $z6\n}",
      "B8 {\n  $r15 \u003d JsonToken START_OBJECT\u003e\n  $r16 \u003d r1.typeId(r3, $r15)\n  $r17 \u003d r1.writeTypePrefix(r2, $r16)\n  if (z3 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  if (z4 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  r3.serializeFilteredContents(r2, r0, z3, z4)\n  goto B14\n}",
      "B11 {\n  $r4 \u003d r3._contentsToSerialize(r0)\n  $r5 \u003d $r4.entrySet()\n  r6 \u003d $r5.iterator()\n}",
      "B12 {\n  $z0 \u003d r6.hasNext()\n  if ($z0 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  $r7 \u003d r6.next()\n  r8 \u003d Map$Entry) $r7\n  $r9 \u003d r8.getValue()\n  r10 \u003d JsonNode) $r9\n  $r11 \u003d r8.getKey()\n  $r12 \u003d String) $r11\n  r2.writeFieldName($r12)\n  r10.serialize(r2, r0)\n  goto B12\n}",
      "B14 {\n  r1.writeTypeSuffix(r2, $r17)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B8",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B12",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#_contentsToSerialize(...1)",
        "body": "{\r\n    if (ctxt.isEnabled(JsonNodeFeature.WRITE_PROPERTIES_SORTED)) {\r\n        if (!_children.isEmpty() \u0026\u0026 // 02-Jun-2024, tatu: Avoid unnecessary copy for custom impls\r\n        !(_children instanceof TreeMap\u003c?, ?\u003e)) {\r\n            return new TreeMap\u003c\u003e(_children);\r\n        }\r\n    }\r\n    return _children;\r\n}"
      },
      {
        "name": "ObjectNode#serializeFilteredContents(...4)",
        "body": "{\r\n    for (Map.Entry\u003cString, JsonNode\u003e en : _contentsToSerialize(ctxt).entrySet()) {\r\n        // 17-Feb-2009, tatu: Can we trust that all nodes will always\r\n        //   extend BaseJsonNode? Or if not, at least implement JsonSerializable?\r\n        //   Let\u0027s start with former, change if we must.\r\n        // 19-Jun-2023, tatu: Actually `JsonNode` is enough\r\n        JsonNode value \u003d en.getValue();\r\n        // as per [databind#867], see if WRITE_EMPTY_JSON_ARRAYS feature is disabled,\r\n        // if the feature is disabled, then should not write an empty array\r\n        // to the output, so continue to the next element in the iteration\r\n        if (trimEmptyArray \u0026\u0026 value.isArray() \u0026\u0026 value.isEmpty(ctxt)) {\r\n            continue;\r\n        }\r\n        if (skipNulls \u0026\u0026 value.isNull()) {\r\n            continue;\r\n        }\r\n        g.writeFieldName(en.getKey());\r\n        value.serialize(g, ctxt);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "set",
    "signature": "com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d null) {\r\n        value \u003d nullNode();\r\n    }\r\n    return (T) _put(propertyName, value);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  JsonNode\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r3 \u003d r0.nullNode()\n}",
      "B2 {\n  $r2 \u003d r0._put(r1, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ObjectNode#_put(...2)",
        "body": "{\r\n    _children.put(Objects.requireNonNull(propertyName), value);\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "setAll",
    "signature": "com.fasterxml.jackson.databind.JsonNode setAll(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    for (Map.Entry\u003cString, ? extends JsonNode\u003e en : properties.entrySet()) {\r\n        JsonNode n \u003d en.getValue();\r\n        if (n \u003d\u003d null) {\r\n            n \u003d nullNode();\r\n        }\r\n        _put(en.getKey(), n);\r\n    }\r\n    return (T) this;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If(r9 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  Map\n  $r1 \u003d r0.entrySet()\n  r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r4 \u003d r2.next()\n  r5 \u003d Map$Entry) $r4\n  $r6 \u003d r5.getValue()\n  r9 \u003d JsonNode) $r6\n  if (r9 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  r9 \u003d r3.nullNode()\n}",
      "B4 {\n  $r7 \u003d r5.getKey()\n  $r8 \u003d String) $r7\n  r3._put($r8, r9)\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ObjectNode#_put(...2)",
        "body": "{\r\n    _children.put(Objects.requireNonNull(propertyName), value);\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "replace",
    "signature": "com.fasterxml.jackson.databind.JsonNode replace(java.lang.String,com.fasterxml.jackson.databind.JsonNode)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d null) {\r\n        // let\u0027s not store \u0027raw\u0027 nulls but nodes\r\n        value \u003d nullNode();\r\n    }\r\n    return _children.put(Objects.requireNonNull(propertyName), value);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r7 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  JsonNode\n  if (r7 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r7 \u003d r0.nullNode()\n}",
      "B2 {\n  $r2 \u003d Map _children\u003e\n  $r3 \u003d Objects.requireNonNull(r1)\n  $r4 \u003d String) $r3\n  $r5 \u003d $r2.put($r4, r7)\n  $r6 \u003d JsonNode) $r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#nullNode(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "put",
    "signature": "com.fasterxml.jackson.databind.JsonNode put(java.lang.String,com.fasterxml.jackson.databind.JsonNode)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d null) {\r\n        // let\u0027s not store \u0027raw\u0027 nulls but nodes\r\n        value \u003d nullNode();\r\n    }\r\n    return _children.put(Objects.requireNonNull(propertyName), value);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r7 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  JsonNode\n  if (r7 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r7 \u003d r0.nullNode()\n}",
      "B2 {\n  $r2 \u003d Map _children\u003e\n  $r3 \u003d Objects.requireNonNull(r1)\n  $r4 \u003d String) $r3\n  $r5 \u003d $r2.put($r4, r7)\n  $r6 \u003d JsonNode) $r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#nullNode(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "putIfAbsent",
    "signature": "com.fasterxml.jackson.databind.JsonNode putIfAbsent(java.lang.String,com.fasterxml.jackson.databind.JsonNode)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d null) {\r\n        // let\u0027s not store \u0027raw\u0027 nulls but nodes\r\n        value \u003d nullNode();\r\n    }\r\n    return _children.putIfAbsent(Objects.requireNonNull(propertyName), value);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r7 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  JsonNode\n  if (r7 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r7 \u003d r0.nullNode()\n}",
      "B2 {\n  $r2 \u003d Map _children\u003e\n  $r3 \u003d Objects.requireNonNull(r1)\n  $r4 \u003d String) $r3\n  $r5 \u003d $r2.putIfAbsent($r4, r7)\n  $r6 \u003d JsonNode) $r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#nullNode(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "put",
    "signature": "com.fasterxml.jackson.databind.node.ObjectNode put(java.lang.String,java.lang.Short)",
    "visibility": "public",
    "body": "{\r\n    return _put(propertyName, numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  Short\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $s0 \u003d r2.shortValue()\n  $r4 \u003d r0.numberNode($s0)\n}",
      "B3 {\n  $r3 \u003d r0._put(r1, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#_put(...2)",
        "body": "{\r\n    _children.put(Objects.requireNonNull(propertyName), value);\r\n    return this;\r\n}"
      },
      {
        "name": "ObjectNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "put",
    "signature": "com.fasterxml.jackson.databind.node.ObjectNode put(java.lang.String,java.lang.Integer)",
    "visibility": "public",
    "body": "{\r\n    return _put(propertyName, (v \u003d\u003d null) ? nullNode() : numberNode(v.intValue()));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  Integer\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $i0 \u003d r2.intValue()\n  $r4 \u003d r0.numberNode($i0)\n}",
      "B3 {\n  $r3 \u003d r0._put(r1, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ObjectNode#_put(...2)",
        "body": "{\r\n    _children.put(Objects.requireNonNull(propertyName), value);\r\n    return this;\r\n}"
      },
      {
        "name": "ObjectNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "put",
    "signature": "com.fasterxml.jackson.databind.node.ObjectNode put(java.lang.String,java.lang.Long)",
    "visibility": "public",
    "body": "{\r\n    return _put(propertyName, numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  Long\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $l0 \u003d r2.longValue()\n  $r4 \u003d r0.numberNode($l0)\n}",
      "B3 {\n  $r3 \u003d r0._put(r1, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#_put(...2)",
        "body": "{\r\n    _children.put(Objects.requireNonNull(propertyName), value);\r\n    return this;\r\n}"
      },
      {
        "name": "ObjectNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "put",
    "signature": "com.fasterxml.jackson.databind.node.ObjectNode put(java.lang.String,java.lang.Float)",
    "visibility": "public",
    "body": "{\r\n    return _put(propertyName, numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  Float\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $f0 \u003d r2.floatValue()\n  $r4 \u003d r0.numberNode($f0)\n}",
      "B3 {\n  $r3 \u003d r0._put(r1, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#_put(...2)",
        "body": "{\r\n    _children.put(Objects.requireNonNull(propertyName), value);\r\n    return this;\r\n}"
      },
      {
        "name": "ObjectNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "put",
    "signature": "com.fasterxml.jackson.databind.node.ObjectNode put(java.lang.String,java.lang.Double)",
    "visibility": "public",
    "body": "{\r\n    return _put(propertyName, numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  Double\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $d0 \u003d r2.doubleValue()\n  $r4 \u003d r0.numberNode($d0)\n}",
      "B3 {\n  $r3 \u003d r0._put(r1, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#_put(...2)",
        "body": "{\r\n    _children.put(Objects.requireNonNull(propertyName), value);\r\n    return this;\r\n}"
      },
      {
        "name": "ObjectNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "put",
    "signature": "com.fasterxml.jackson.databind.node.ObjectNode put(java.lang.String,java.math.BigDecimal)",
    "visibility": "public",
    "body": "{\r\n    return _put(propertyName, (v \u003d\u003d null) ? nullNode() : numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  BigDecimal\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r0.numberNode(r2)\n}",
      "B3 {\n  $r3 \u003d r0._put(r1, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ObjectNode#_put(...2)",
        "body": "{\r\n    _children.put(Objects.requireNonNull(propertyName), value);\r\n    return this;\r\n}"
      },
      {
        "name": "ObjectNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "put",
    "signature": "com.fasterxml.jackson.databind.node.ObjectNode put(java.lang.String,java.math.BigInteger)",
    "visibility": "public",
    "body": "{\r\n    return _put(propertyName, (v \u003d\u003d null) ? nullNode() : numberNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  BigInteger\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r0.numberNode(r2)\n}",
      "B3 {\n  $r3 \u003d r0._put(r1, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ObjectNode#_put(...2)",
        "body": "{\r\n    _children.put(Objects.requireNonNull(propertyName), value);\r\n    return this;\r\n}"
      },
      {
        "name": "ObjectNode#numberNode(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "put",
    "signature": "com.fasterxml.jackson.databind.node.ObjectNode put(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return _put(propertyName, (v \u003d\u003d null) ? nullNode() : textNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  String\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r0.textNode(r2)\n}",
      "B3 {\n  $r3 \u003d r0._put(r1, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ObjectNode#textNode(...1)",
        "body": "(source not found)"
      },
      {
        "name": "ObjectNode#_put(...2)",
        "body": "{\r\n    _children.put(Objects.requireNonNull(propertyName), value);\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "put",
    "signature": "com.fasterxml.jackson.databind.node.ObjectNode put(java.lang.String,java.lang.Boolean)",
    "visibility": "public",
    "body": "{\r\n    return _put(propertyName, booleanNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  Boolean\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $z0 \u003d r2.booleanValue()\n  $r4 \u003d r0.booleanNode($z0)\n}",
      "B3 {\n  $r3 \u003d r0._put(r1, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#booleanNode(...1)",
        "body": "(source not found)"
      },
      {
        "name": "ObjectNode#_put(...2)",
        "body": "{\r\n    _children.put(Objects.requireNonNull(propertyName), value);\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "put",
    "signature": "com.fasterxml.jackson.databind.node.ObjectNode put(java.lang.String,byte[])",
    "visibility": "public",
    "body": "{\r\n    return _put(propertyName, (v \u003d\u003d null) ? nullNode() : binaryNode(v));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  String\n  r2 :\u003d @parameter1: byte[]\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r0.nullNode()\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r0.binaryNode(r2)\n}",
      "B3 {\n  $r3 \u003d r0._put(r1, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#nullNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ObjectNode#binaryNode(...1)",
        "body": "(source not found)"
      },
      {
        "name": "ObjectNode#_put(...2)",
        "body": "{\r\n    _children.put(Objects.requireNonNull(propertyName), value);\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ObjectNode",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    if (o instanceof ObjectNode) {\r\n        return _childrenEqual((ObjectNode) o);\r\n    }\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  ObjectNode\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z0 \u003d ObjectNode\n  if ($z0 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r2 \u003d ObjectNode) r0\n  $z1 \u003d r1._childrenEqual($r2)\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectNode#_childrenEqual(...1)",
        "body": "{\r\n    return _children.equals(other._children);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.POJONode",
    "methodName": "binaryValue",
    "signature": "byte[] binaryValue()",
    "visibility": "public",
    "body": "{\r\n    if (_value instanceof byte[]) {\r\n        return (byte[]) _value;\r\n    }\r\n    return super.binaryValue();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  POJONode\n  $r1 \u003d Object _value\u003e\n  $z0 \u003d $r1 instanceof byte[]\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Object _value\u003e\n  $r4 \u003d (byte[]) $r3\n  return\n}",
      "B2 {\n  $r2 \u003d r0.binaryValue()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.POJONode",
    "methodName": "asText",
    "signature": "java.lang.String asText()",
    "visibility": "public",
    "body": "{\r\n    return (_value \u003d\u003d null) ? \"null\" : _value.toString();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  POJONode\n  $r1 \u003d Object _value\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d \"null\"\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Object _value\u003e\n  $r3 \u003d $r2.toString()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.POJONode",
    "methodName": "asText",
    "signature": "java.lang.String asText(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return (_value \u003d\u003d null) ? defaultValue : _value.toString();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  POJONode\n  String\n  $r1 \u003d Object _value\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r3\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Object _value\u003e\n  $r4 \u003d $r2.toString()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.POJONode",
    "methodName": "asBoolean",
    "signature": "boolean asBoolean(boolean)",
    "visibility": "public",
    "body": "{\r\n    if (_value !\u003d null \u0026\u0026 _value instanceof Boolean) {\r\n        return ((Boolean) _value).booleanValue();\r\n    }\r\n    return defaultValue;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  POJONode\n  z0 :\u003d @parameter0: boolean\n  $r1 \u003d Object _value\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d Object _value\u003e\n  $z1 \u003d Boolean\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d Object _value\u003e\n  $r4 \u003d Boolean) $r3\n  $z2 \u003d $r4.booleanValue()\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.POJONode",
    "methodName": "asInt",
    "signature": "int asInt(int)",
    "visibility": "public",
    "body": "{\r\n    if (_value instanceof Number) {\r\n        return ((Number) _value).intValue();\r\n    }\r\n    return defaultValue;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  POJONode\n  i0 :\u003d @parameter0: int\n  $r1 \u003d Object _value\u003e\n  $z0 \u003d Number\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Object _value\u003e\n  $r3 \u003d Number) $r2\n  $i1 \u003d $r3.intValue()\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.POJONode",
    "methodName": "asLong",
    "signature": "long asLong(long)",
    "visibility": "public",
    "body": "{\r\n    if (_value instanceof Number) {\r\n        return ((Number) _value).longValue();\r\n    }\r\n    return defaultValue;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  POJONode\n  l0 :\u003d @parameter0: long\n  $r1 \u003d Object _value\u003e\n  $z0 \u003d Number\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Object _value\u003e\n  $r3 \u003d Number) $r2\n  $l1 \u003d $r3.longValue()\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.POJONode",
    "methodName": "asDouble",
    "signature": "double asDouble(double)",
    "visibility": "public",
    "body": "{\r\n    if (_value instanceof Number) {\r\n        return ((Number) _value).doubleValue();\r\n    }\r\n    return defaultValue;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  POJONode\n  d0 :\u003d @parameter0: double\n  $r1 \u003d Object _value\u003e\n  $z0 \u003d Number\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Object _value\u003e\n  $r3 \u003d Number) $r2\n  $d1 \u003d $r3.doubleValue()\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.POJONode",
    "methodName": "serialize",
    "signature": "void serialize(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (_value \u003d\u003d null) {\r\n        ctxt.defaultSerializeNull(gen);\r\n    } else if (_value instanceof JsonSerializable) {\r\n        ((JsonSerializable) _value).serialize(gen, ctxt);\r\n    } else {\r\n        // 25-May-2018, tatu: [databind#1991] do not call via generator but through context;\r\n        //    this to preserve contextual information\r\n        ctxt.defaultSerializeValue(_value, gen);\r\n    }\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  POJONode\n  JsonGenerator\n  SerializerProvider\n  $r1 \u003d Object _value\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r3.defaultSerializeNull(r4)\n  goto B5\n}",
      "B2 {\n  $r2 \u003d Object _value\u003e\n  $z0 \u003d JsonSerializable\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d Object _value\u003e\n  $r7 \u003d JsonSerializable) $r6\n  $r7.serialize(r4, r3)\n  goto B5\n}",
      "B4 {\n  $r5 \u003d Object _value\u003e\n  r3.defaultSerializeValue($r5, r4)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.POJONode",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    if (o instanceof POJONode) {\r\n        return _pojoEquals((POJONode) o);\r\n    }\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  POJONode\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z0 \u003d POJONode\n  if ($z0 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r2 \u003d POJONode) r0\n  $z1 \u003d r1._pojoEquals($r2)\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "POJONode#_pojoEquals(...1)",
        "body": "{\r\n    if (_value \u003d\u003d null) {\r\n        return other._value \u003d\u003d null;\r\n    }\r\n    return _value.equals(other._value);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ShortNode",
    "methodName": "asBoolean",
    "signature": "boolean asBoolean(boolean)",
    "visibility": "public",
    "body": "{\r\n    return _value !\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($s0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ShortNode\n  z0 :\u003d @parameter0: boolean\n  $s0 \u003d ShortNode: short _value\u003e\n  if ($s0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.ShortNode",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    if (o instanceof ShortNode) {\r\n        return ((ShortNode) o)._value \u003d\u003d _value;\r\n    }\r\n    return false;\r\n}",
    "nodes": 10,
    "edges": 10,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B9",
      "B5 : If($i2 !\u003d $i3) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  ShortNode\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z0 \u003d ShortNode\n  if ($z0 \u003d\u003d false) goto B5 else B9\n}",
      "B5 {\n  $r2 \u003d ShortNode) r0\n  $s1 \u003d ShortNode: short _value\u003e\n  $s0 \u003d ShortNode: short _value\u003e\n  $i2 \u003d (int) $s1\n  $i3 \u003d (int) $s0\n  if ($i2 !\u003d $i3) goto B6 else B7\n}",
      "B6 {\n  $z1 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z1 \u003d 0\n}",
      "B8 {\n  return\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.TextNode",
    "methodName": "valueOf",
    "signature": "com.fasterxml.jackson.databind.node.TextNode valueOf(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (v \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (v.isEmpty()) {\r\n        return EMPTY_STRING_NODE;\r\n    }\r\n    return new TextNode(v);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d TextNode EMPTY_STRING_NODE\u003e\n  return\n}",
      "B4 {\n  $r1 \u003d TextNode\n  new TextNode(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.TextNode",
    "methodName": "asText",
    "signature": "java.lang.String asText(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return (_value \u003d\u003d null) ? defaultValue : _value;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TextNode\n  String\n  $r1 \u003d String _value\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r2\n  goto B3\n}",
      "B2 {\n  $r3 \u003d String _value\u003e\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.TextNode",
    "methodName": "asBoolean",
    "signature": "boolean asBoolean(boolean)",
    "visibility": "public",
    "body": "{\r\n    if (_value !\u003d null) {\r\n        String v \u003d _value.trim();\r\n        if (\"true\".equals(v)) {\r\n            return true;\r\n        }\r\n        if (\"false\".equals(v)) {\r\n            return false;\r\n        }\r\n    }\r\n    return defaultValue;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B5",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B3 : If($z2 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  TextNode\n  z0 :\u003d @parameter0: boolean\n  $r1 \u003d String _value\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  $r2 \u003d String _value\u003e\n  r3 \u003d $r2.trim()\n  $r4 \u003d \"true\"\n  $z1 \u003d $r4.equals(r3)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r5 \u003d \"false\"\n  $z2 \u003d $r5.equals(r3)\n  if ($z2 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.TextNode",
    "methodName": "serialize",
    "signature": "void serialize(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (_value \u003d\u003d null) {\r\n        g.writeNull();\r\n    } else {\r\n        g.writeString(_value);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TextNode\n  JsonGenerator\n  SerializerProvider\n  $r1 \u003d String _value\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r2.writeNull()\n  goto B3\n}",
      "B2 {\n  $r3 \u003d String _value\u003e\n  r2.writeString($r3)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.TextNode",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    if (o instanceof TextNode) {\r\n        return Objects.equals(((TextNode) o)._value, _value);\r\n    }\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  TextNode\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z0 \u003d TextNode\n  if ($z0 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r2 \u003d TextNode) r0\n  $r4 \u003d String _value\u003e\n  $r3 \u003d String _value\u003e\n  $z1 \u003d Objects.equals($r4, $r3)\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.TreeTraversingParser",
    "methodName": "close",
    "signature": "void close()",
    "visibility": "public",
    "body": "{\r\n    if (!_closed) {\r\n        _closed \u003d true;\r\n        _nodeCursor \u003d null;\r\n        _updateTokenToNull();\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeTraversingParser\n  $z0 \u003d TreeTraversingParser: boolean _closed\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  TreeTraversingParser: boolean _closed\u003e \u003d 1\n  NodeCursor _nodeCursor\u003e \u003d null\n  r0._updateTokenToNull()\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeTraversingParser#_updateTokenToNull(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.TreeTraversingParser",
    "methodName": "nextToken",
    "signature": "com.fasterxml.jackson.core.JsonToken nextToken()",
    "visibility": "public",
    "body": "{\r\n    _nullSafeUpdateToken(_nodeCursor.nextToken());\r\n    if (_currToken \u003d\u003d null) {\r\n        // if not already set\r\n        _closed \u003d true;\r\n        return null;\r\n    }\r\n    switch(_currToken) {\r\n        case START_OBJECT:\r\n            _nodeCursor \u003d _nodeCursor.startObject();\r\n            break;\r\n        case START_ARRAY:\r\n            _nodeCursor \u003d _nodeCursor.startArray();\r\n            break;\r\n        case END_OBJECT:\r\n        case END_ARRAY:\r\n            _nodeCursor \u003d _nodeCursor.getParent();\r\n        default:\r\n    }\r\n    return _currToken;\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r3 !\u003d null) → B1 | else → B2",
      "B2 : If(switch-on $i1) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  TreeTraversingParser\n  $r1 \u003d NodeCursor _nodeCursor\u003e\n  $r2 \u003d $r1.nextToken()\n  r0._nullSafeUpdateToken($r2)\n  $r3 \u003d JsonToken _currToken\u003e\n  if ($r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  TreeTraversingParser: boolean _closed\u003e \u003d 1\n  return\n}",
      "B2 {\n  $r5 \u003d TreeTraversingParser$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonToken\u003e\n  $r4 \u003d JsonToken _currToken\u003e\n  $i0 \u003d $r4.ordinal()\n  $i1 \u003d $r5[$i0]\n  JsonToken _currToken\u003e; }\n}",
      "B3 {\n  $r10 \u003d NodeCursor _nodeCursor\u003e\n  $r11 \u003d $r10.startObject()\n  NodeCursor _nodeCursor\u003e \u003d $r11\n  goto B6\n}",
      "B4 {\n  $r8 \u003d NodeCursor _nodeCursor\u003e\n  $r9 \u003d $r8.startArray()\n  NodeCursor _nodeCursor\u003e \u003d $r9\n  goto B6\n}",
      "B5 {\n  $r6 \u003d NodeCursor _nodeCursor\u003e\n  $r7 \u003d $r6.getParent()\n  NodeCursor _nodeCursor\u003e \u003d $r7\n}",
      "B6 {\n  $r12 \u003d JsonToken _currToken\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B2 --\u003e B5",
      "B2 --\u003e B6",
      "B3 --\u003e B6",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeTraversingParser#_nullSafeUpdateToken(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.TreeTraversingParser",
    "methodName": "skipChildren",
    "signature": "com.fasterxml.jackson.core.JsonParser skipChildren()",
    "visibility": "public",
    "body": "{\r\n    if (_currToken \u003d\u003d JsonToken.START_OBJECT) {\r\n        _nodeCursor \u003d _nodeCursor.getParent();\r\n        _updateToken(JsonToken.END_OBJECT);\r\n    } else if (_currToken \u003d\u003d JsonToken.START_ARRAY) {\r\n        _nodeCursor \u003d _nodeCursor.getParent();\r\n        _updateToken(JsonToken.END_ARRAY);\r\n    }\r\n    return this;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r2 !\u003d $r1) → B1 | else → B2",
      "B2 : If($r4 !\u003d $r3) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  TreeTraversingParser\n  $r2 \u003d JsonToken _currToken\u003e\n  $r1 \u003d JsonToken START_OBJECT\u003e\n  if ($r2 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d NodeCursor _nodeCursor\u003e\n  $r9 \u003d $r8.getParent()\n  NodeCursor _nodeCursor\u003e \u003d $r9\n  $r10 \u003d JsonToken END_OBJECT\u003e\n  r0._updateToken($r10)\n  goto B4\n}",
      "B2 {\n  $r4 \u003d JsonToken _currToken\u003e\n  $r3 \u003d JsonToken START_ARRAY\u003e\n  if ($r4 !\u003d $r3) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d NodeCursor _nodeCursor\u003e\n  $r6 \u003d $r5.getParent()\n  NodeCursor _nodeCursor\u003e \u003d $r6\n  $r7 \u003d JsonToken END_ARRAY\u003e\n  r0._updateToken($r7)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeTraversingParser#_updateToken(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.TreeTraversingParser",
    "methodName": "currentName",
    "signature": "java.lang.String currentName()",
    "visibility": "public",
    "body": "{\r\n    NodeCursor crsr \u003d _nodeCursor;\r\n    if (_currToken \u003d\u003d JsonToken.START_OBJECT || _currToken \u003d\u003d JsonToken.START_ARRAY) {\r\n        crsr \u003d crsr.getParent();\r\n    }\r\n    return (crsr \u003d\u003d null) ? null : crsr.getCurrentName();\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d $r1) → B1 | else → B2",
      "B1 : If($r4 !\u003d $r3) → B2 | else → B3",
      "B3 : If(r5 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  TreeTraversingParser\n  r5 \u003d NodeCursor _nodeCursor\u003e\n  $r2 \u003d JsonToken _currToken\u003e\n  $r1 \u003d JsonToken START_OBJECT\u003e\n  if ($r2 \u003d\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d JsonToken _currToken\u003e\n  $r3 \u003d JsonToken START_ARRAY\u003e\n  if ($r4 !\u003d $r3) goto B2 else B3\n}",
      "B2 {\n  r5 \u003d r5.getParent()\n}",
      "B3 {\n  if (r5 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r6 \u003d null\n  goto B6\n}",
      "B5 {\n  $r6 \u003d r5.getCurrentName()\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.TreeTraversingParser",
    "methodName": "overrideCurrentName",
    "signature": "void overrideCurrentName(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    NodeCursor crsr \u003d _nodeCursor;\r\n    if (_currToken \u003d\u003d JsonToken.START_OBJECT || _currToken \u003d\u003d JsonToken.START_ARRAY) {\r\n        crsr \u003d crsr.getParent();\r\n    }\r\n    if (crsr !\u003d null) {\r\n        crsr.overrideCurrentName(name);\r\n    }\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d $r1) → B1 | else → B2",
      "B1 : If($r5 !\u003d $r4) → B2 | else → B3",
      "B3 : If(r6 \u003d\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  TreeTraversingParser\n  String\n  r6 \u003d NodeCursor _nodeCursor\u003e\n  $r2 \u003d JsonToken _currToken\u003e\n  $r1 \u003d JsonToken START_OBJECT\u003e\n  if ($r2 \u003d\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d JsonToken _currToken\u003e\n  $r4 \u003d JsonToken START_ARRAY\u003e\n  if ($r5 !\u003d $r4) goto B2 else B3\n}",
      "B2 {\n  r6 \u003d r6.getParent()\n}",
      "B3 {\n  if (r6 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  r6.overrideCurrentName(r3)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.TreeTraversingParser",
    "methodName": "getText",
    "signature": "java.lang.String getText()",
    "visibility": "public",
    "body": "{\r\n    if (_currToken \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // need to separate handling a bit...\r\n    switch(_currToken) {\r\n        case FIELD_NAME:\r\n            return _nodeCursor.getCurrentName();\r\n        case VALUE_STRING:\r\n            return currentNode().textValue();\r\n        case VALUE_NUMBER_INT:\r\n        case VALUE_NUMBER_FLOAT:\r\n            return String.valueOf(currentNode().numberValue());\r\n        case VALUE_EMBEDDED_OBJECT:\r\n            JsonNode n \u003d currentNode();\r\n            if (n !\u003d null \u0026\u0026 n.isBinary()) {\r\n                // this will convert it to base64\r\n                return n.asText();\r\n            }\r\n        default:\r\n            return _currToken.asString();\r\n    }\r\n}",
    "nodes": 10,
    "edges": 11,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B2 : If(switch-on $i1) → B3 | else → B4",
      "B6 : If(r4 \u003d\u003d null) → B7 | else → B9",
      "B7 : If($z0 \u003d\u003d false) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  TreeTraversingParser\n  $r1 \u003d JsonToken _currToken\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d TreeTraversingParser$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonToken\u003e\n  $r2 \u003d JsonToken _currToken\u003e\n  $i0 \u003d $r2.ordinal()\n  $i1 \u003d $r3[$i0]\n  JsonToken _currToken\u003e; }\n}",
      "B3 {\n  $r11 \u003d NodeCursor _nodeCursor\u003e\n  $r12 \u003d $r11.getCurrentName()\n  return\n}",
      "B4 {\n  $r9 \u003d r0.currentNode()\n  $r10 \u003d $r9.textValue()\n  return\n}",
      "B5 {\n  $r6 \u003d r0.currentNode()\n  $r7 \u003d $r6.numberValue()\n  $r8 \u003d String.valueOf($r7)\n  return\n}",
      "B6 {\n  r4 \u003d r0.currentNode()\n  if (r4 \u003d\u003d null) goto B7 else B9\n}",
      "B7 {\n  $z0 \u003d r4.isBinary()\n  if ($z0 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $r5 \u003d r4.asText()\n  return\n}",
      "B9 {\n  $r13 \u003d JsonToken _currToken\u003e\n  $r14 \u003d $r13.asString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B2 --\u003e B5",
      "B2 --\u003e B6",
      "B2 --\u003e B9",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeTraversingParser#currentNode(...0)",
        "body": "{\r\n    if (_closed || _nodeCursor \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return _nodeCursor.currentNode();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.TreeTraversingParser",
    "methodName": "getNumberType",
    "signature": "com.fasterxml.jackson.core.JsonParser$NumberType getNumberType()",
    "visibility": "public",
    "body": "{\r\n    JsonNode n \u003d currentNumericNode();\r\n    return (n \u003d\u003d null) ? null : n.numberType();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeTraversingParser\n  r1 \u003d r0.currentNumericNode()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r1.numberType()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeTraversingParser#currentNumericNode(...0)",
        "body": "{\r\n    JsonNode n \u003d currentNode();\r\n    if (n \u003d\u003d null || !n.isNumber()) {\r\n        JsonToken t \u003d (n \u003d\u003d null) ? null : n.asToken();\r\n        throw _constructError(\"Current token (\" + t + \") not numeric, cannot use numeric value accessors\");\r\n    }\r\n    return n;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.TreeTraversingParser",
    "methodName": "getNumberTypeFP",
    "signature": "com.fasterxml.jackson.core.JsonParser$NumberTypeFP getNumberTypeFP()",
    "visibility": "public",
    "body": "{\r\n    NumberType nt \u003d getNumberType();\r\n    if (nt \u003d\u003d NumberType.BIG_DECIMAL) {\r\n        return NumberTypeFP.BIG_DECIMAL;\r\n    }\r\n    if (nt \u003d\u003d NumberType.DOUBLE) {\r\n        return NumberTypeFP.DOUBLE64;\r\n    }\r\n    if (nt \u003d\u003d NumberType.FLOAT) {\r\n        return NumberTypeFP.FLOAT32;\r\n    }\r\n    return NumberTypeFP.UNKNOWN;\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r1 !\u003d $r2) → B1 | else → B2",
      "B2 : If(r1 !\u003d $r3) → B3 | else → B4",
      "B4 : If(r1 !\u003d $r4) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  TreeTraversingParser\n  r1 \u003d r0.getNumberType()\n  $r2 \u003d JsonParser$NumberType BIG_DECIMAL\u003e\n  if (r1 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d JsonParser$NumberTypeFP BIG_DECIMAL\u003e\n  return\n}",
      "B2 {\n  $r3 \u003d JsonParser$NumberType DOUBLE\u003e\n  if (r1 !\u003d $r3) goto B3 else B4\n}",
      "B3 {\n  $r7 \u003d JsonParser$NumberTypeFP DOUBLE64\u003e\n  return\n}",
      "B4 {\n  $r4 \u003d JsonParser$NumberType FLOAT\u003e\n  if (r1 !\u003d $r4) goto B5 else B6\n}",
      "B5 {\n  $r6 \u003d JsonParser$NumberTypeFP FLOAT32\u003e\n  return\n}",
      "B6 {\n  $r5 \u003d JsonParser$NumberTypeFP UNKNOWN\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeTraversingParser#getNumberType(...0)",
        "body": "{\r\n    JsonNode n \u003d currentNumericNode();\r\n    return (n \u003d\u003d null) ? null : n.numberType();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.TreeTraversingParser",
    "methodName": "getIntValue",
    "signature": "int getIntValue()",
    "visibility": "public",
    "body": "{\r\n    final NumericNode node \u003d (NumericNode) currentNumericNode();\r\n    if (!node.canConvertToInt()) {\r\n        reportOverflowInt();\r\n    }\r\n    return node.intValue();\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeTraversingParser\n  $r1 \u003d r0.currentNumericNode()\n  r2 \u003d NumericNode) $r1\n  $z0 \u003d r2.canConvertToInt()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.reportOverflowInt()\n}",
      "B2 {\n  $i0 \u003d r2.intValue()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeTraversingParser#reportOverflowInt(...0)",
        "body": "(source not found)"
      },
      {
        "name": "TreeTraversingParser#currentNumericNode(...0)",
        "body": "{\r\n    JsonNode n \u003d currentNode();\r\n    if (n \u003d\u003d null || !n.isNumber()) {\r\n        JsonToken t \u003d (n \u003d\u003d null) ? null : n.asToken();\r\n        throw _constructError(\"Current token (\" + t + \") not numeric, cannot use numeric value accessors\");\r\n    }\r\n    return n;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.TreeTraversingParser",
    "methodName": "getLongValue",
    "signature": "long getLongValue()",
    "visibility": "public",
    "body": "{\r\n    final NumericNode node \u003d (NumericNode) currentNumericNode();\r\n    if (!node.canConvertToLong()) {\r\n        reportOverflowLong();\r\n    }\r\n    return node.longValue();\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeTraversingParser\n  $r1 \u003d r0.currentNumericNode()\n  r2 \u003d NumericNode) $r1\n  $z0 \u003d r2.canConvertToLong()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.reportOverflowLong()\n}",
      "B2 {\n  $l0 \u003d r2.longValue()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeTraversingParser#reportOverflowLong(...0)",
        "body": "(source not found)"
      },
      {
        "name": "TreeTraversingParser#currentNumericNode(...0)",
        "body": "{\r\n    JsonNode n \u003d currentNode();\r\n    if (n \u003d\u003d null || !n.isNumber()) {\r\n        JsonToken t \u003d (n \u003d\u003d null) ? null : n.asToken();\r\n        throw _constructError(\"Current token (\" + t + \") not numeric, cannot use numeric value accessors\");\r\n    }\r\n    return n;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.TreeTraversingParser",
    "methodName": "getEmbeddedObject",
    "signature": "java.lang.Object getEmbeddedObject()",
    "visibility": "public",
    "body": "{\r\n    if (!_closed) {\r\n        JsonNode n \u003d currentNode();\r\n        if (n !\u003d null) {\r\n            if (n.isPojo()) {\r\n                return ((POJONode) n).getPojo();\r\n            }\r\n            if (n.isBinary()) {\r\n                return ((BinaryNode) n).binaryValue();\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B6",
      "B1 : If(r1 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  TreeTraversingParser\n  $z0 \u003d TreeTraversingParser: boolean _closed\u003e\n  if ($z0 !\u003d 0) goto B1 else B6\n}",
      "B1 {\n  r1 \u003d r0.currentNode()\n  if (r1 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $z1 \u003d r1.isPojo()\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d POJONode) r1\n  $r5 \u003d $r4.getPojo()\n  return\n}",
      "B4 {\n  $z2 \u003d r1.isBinary()\n  if ($z2 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r2 \u003d BinaryNode) r1\n  $r3 \u003d $r2.binaryValue()\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeTraversingParser#currentNode(...0)",
        "body": "{\r\n    if (_closed || _nodeCursor \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return _nodeCursor.currentNode();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.TreeTraversingParser",
    "methodName": "isNaN",
    "signature": "boolean isNaN()",
    "visibility": "public",
    "body": "{\r\n    if (!_closed) {\r\n        JsonNode n \u003d currentNode();\r\n        if (n instanceof NumericNode) {\r\n            return ((NumericNode) n).isNaN();\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TreeTraversingParser\n  $z0 \u003d TreeTraversingParser: boolean _closed\u003e\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  r1 \u003d r0.currentNode()\n  $z1 \u003d NumericNode\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d NumericNode) r1\n  $z2 \u003d $r2.isNaN()\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeTraversingParser#currentNode(...0)",
        "body": "{\r\n    if (_closed || _nodeCursor \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return _nodeCursor.currentNode();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.TreeTraversingParser",
    "methodName": "getBinaryValue",
    "signature": "byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant)",
    "visibility": "public",
    "body": "{\r\n    // Multiple possibilities...\r\n    JsonNode n \u003d currentNode();\r\n    if (n !\u003d null) {\r\n        // [databind#2096]: although `binaryValue()` works for real binary node\r\n        // and embedded \"POJO\" node, coercion from TextNode may require variant, so:\r\n        if (n instanceof TextNode) {\r\n            return ((TextNode) n).getBinaryValue(b64variant);\r\n        }\r\n        return n.binaryValue();\r\n    }\r\n    // otherwise return null to mark we have no binary content\r\n    return null;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B4",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TreeTraversingParser\n  Base64Variant\n  r1 \u003d r0.currentNode()\n  if (r1 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $z0 \u003d TextNode\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d TextNode) r1\n  $r5 \u003d $r4.getBinaryValue(r3)\n  return\n}",
      "B3 {\n  $r2 \u003d r1.binaryValue()\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeTraversingParser#currentNode(...0)",
        "body": "{\r\n    if (_closed || _nodeCursor \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return _nodeCursor.currentNode();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.node.TreeTraversingParser",
    "methodName": "readBinaryValue",
    "signature": "int readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)",
    "visibility": "public",
    "body": "{\r\n    byte[] data \u003d getBinaryValue(b64variant);\r\n    if (data !\u003d null) {\r\n        out.write(data, 0, data.length);\r\n        return data.length;\r\n    }\r\n    return 0;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeTraversingParser\n  Base64Variant\n  OutputStream\n  r2 \u003d r0.getBinaryValue(r1)\n  if (r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d lengthof r2\n  r3.write(r2, 0, $i0)\n  $i1 \u003d lengthof r2\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeTraversingParser#getBinaryValue(...1)",
        "body": "{\r\n    // Multiple possibilities...\r\n    JsonNode n \u003d currentNode();\r\n    if (n !\u003d null) {\r\n        // [databind#2096]: although `binaryValue()` works for real binary node\r\n        // and embedded \"POJO\" node, coercion from TextNode may require variant, so:\r\n        if (n instanceof TextNode) {\r\n            return ((TextNode) n).getBinaryValue(b64variant);\r\n        }\r\n        return n.binaryValue();\r\n    }\r\n    // otherwise return null to mark we have no binary content\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "registerModule",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper registerModule(com.fasterxml.jackson.databind.Module)",
    "visibility": "public",
    "body": "{\r\n    _assertNotNull(\"module\", module);\r\n    // Let\u0027s ensure we have access to name and version information,\r\n    // even if we do not have immediate use for either. This way we know\r\n    // that they will be available from beginning\r\n    String name \u003d module.getModuleName();\r\n    if (name \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Module without defined name\");\r\n    }\r\n    Version version \u003d module.version();\r\n    if (version \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Module without defined version\");\r\n    }\r\n    // [databind#2432]: Modules may depend on other modules; if so, register those first\r\n    for (Module dep : module.getDependencies()) {\r\n        registerModule(dep);\r\n    }\r\n    // then module itself\r\n    if (isEnabled(MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS)) {\r\n        Object typeId \u003d module.getTypeId();\r\n        if (typeId !\u003d null) {\r\n            if (_registeredModuleTypes \u003d\u003d null) {\r\n                // plus let\u0027s keep them in order too, easier to debug or expose\r\n                // in registration order if that matter\r\n                _registeredModuleTypes \u003d new LinkedHashSet\u003c\u003e();\r\n            }\r\n            // try adding; if already had it, should skip\r\n            if (!_registeredModuleTypes.add(typeId)) {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    // And then call registration\r\n    module.setupModule(new Module.SetupContext() {\r\n\r\n        // // // Accessors\r\n        @Override\r\n        public Version getMapperVersion() {\r\n            return version();\r\n        }\r\n\r\n        @SuppressWarnings(\"unchecked\")\r\n        @Override\r\n        public \u003cC extends ObjectCodec\u003e C getOwner() {\r\n            // why do we need the cast here?!?\r\n            return (C) ObjectMapper.this;\r\n        }\r\n\r\n        @Override\r\n        public TypeFactory getTypeFactory() {\r\n            return _typeFactory;\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(MapperFeature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(DeserializationFeature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(SerializationFeature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(JsonFactory.Feature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(JsonParser.Feature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(JsonGenerator.Feature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        // // // Mutant accessors\r\n        @Override\r\n        public MutableConfigOverride configOverride(Class\u003c?\u003e type) {\r\n            return ObjectMapper.this.configOverride(type);\r\n        }\r\n\r\n        // // // Methods for registering handlers: deserializers\r\n        @Override\r\n        public void addDeserializers(Deserializers d) {\r\n            DeserializerFactory df \u003d _deserializationContext._factory.withAdditionalDeserializers(d);\r\n            _deserializationContext \u003d _deserializationContext.with(df);\r\n        }\r\n\r\n        @Override\r\n        public void addKeyDeserializers(KeyDeserializers d) {\r\n            DeserializerFactory df \u003d _deserializationContext._factory.withAdditionalKeyDeserializers(d);\r\n            _deserializationContext \u003d _deserializationContext.with(df);\r\n        }\r\n\r\n        @Override\r\n        public void addBeanDeserializerModifier(BeanDeserializerModifier modifier) {\r\n            DeserializerFactory df \u003d _deserializationContext._factory.withDeserializerModifier(modifier);\r\n            _deserializationContext \u003d _deserializationContext.with(df);\r\n        }\r\n\r\n        // // // Methods for registering handlers: serializers\r\n        @Override\r\n        public void addSerializers(Serializers s) {\r\n            _serializerFactory \u003d _serializerFactory.withAdditionalSerializers(s);\r\n        }\r\n\r\n        @Override\r\n        public void addKeySerializers(Serializers s) {\r\n            _serializerFactory \u003d _serializerFactory.withAdditionalKeySerializers(s);\r\n        }\r\n\r\n        @Override\r\n        public void addBeanSerializerModifier(BeanSerializerModifier modifier) {\r\n            _serializerFactory \u003d _serializerFactory.withSerializerModifier(modifier);\r\n        }\r\n\r\n        // // // Methods for registering handlers: other\r\n        @Override\r\n        public void addAbstractTypeResolver(AbstractTypeResolver resolver) {\r\n            DeserializerFactory df \u003d _deserializationContext._factory.withAbstractTypeResolver(resolver);\r\n            _deserializationContext \u003d _deserializationContext.with(df);\r\n        }\r\n\r\n        @Override\r\n        public void addTypeModifier(TypeModifier modifier) {\r\n            TypeFactory f \u003d _typeFactory;\r\n            f \u003d f.withModifier(modifier);\r\n            setTypeFactory(f);\r\n        }\r\n\r\n        @Override\r\n        public void addValueInstantiators(ValueInstantiators instantiators) {\r\n            DeserializerFactory df \u003d _deserializationContext._factory.withValueInstantiators(instantiators);\r\n            _deserializationContext \u003d _deserializationContext.with(df);\r\n        }\r\n\r\n        @Override\r\n        public void setClassIntrospector(ClassIntrospector ci) {\r\n            _deserializationConfig \u003d _deserializationConfig.with(ci);\r\n            _serializationConfig \u003d _serializationConfig.with(ci);\r\n        }\r\n\r\n        @Override\r\n        public void insertAnnotationIntrospector(AnnotationIntrospector ai) {\r\n            _deserializationConfig \u003d _deserializationConfig.withInsertedAnnotationIntrospector(ai);\r\n            _serializationConfig \u003d _serializationConfig.withInsertedAnnotationIntrospector(ai);\r\n        }\r\n\r\n        @Override\r\n        public void appendAnnotationIntrospector(AnnotationIntrospector ai) {\r\n            _deserializationConfig \u003d _deserializationConfig.withAppendedAnnotationIntrospector(ai);\r\n            _serializationConfig \u003d _serializationConfig.withAppendedAnnotationIntrospector(ai);\r\n        }\r\n\r\n        @Override\r\n        public void registerSubtypes(Class\u003c?\u003e... subtypes) {\r\n            ObjectMapper.this.registerSubtypes(subtypes);\r\n        }\r\n\r\n        @Override\r\n        public void registerSubtypes(NamedType... subtypes) {\r\n            ObjectMapper.this.registerSubtypes(subtypes);\r\n        }\r\n\r\n        @Override\r\n        public void registerSubtypes(Collection\u003cClass\u003c?\u003e\u003e subtypes) {\r\n            ObjectMapper.this.registerSubtypes(subtypes);\r\n        }\r\n\r\n        @Override\r\n        public void setMixInAnnotations(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\r\n            addMixIn(target, mixinSource);\r\n        }\r\n\r\n        @Override\r\n        public void addDeserializationProblemHandler(DeserializationProblemHandler handler) {\r\n            addHandler(handler);\r\n        }\r\n\r\n        @Override\r\n        public void setNamingStrategy(PropertyNamingStrategy naming) {\r\n            setPropertyNamingStrategy(naming);\r\n        }\r\n    });\r\n    return this;\r\n}",
    "nodes": 14,
    "edges": 17,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2",
      "B2 : If(r3 !\u003d null) → B3 | else → B4",
      "B5 : If($z0 \u003d\u003d false) → B6 | else → B7",
      "B7 : If($z1 \u003d\u003d false) → B8 | else → B13",
      "B8 : If(r14 \u003d\u003d null) → B9 | else → B13",
      "B9 : If($r6 !\u003d null) → B10 | else → B11",
      "B11 : If($z2 !\u003d 0) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  Module\n  r0._assertNotNull(\"module\", r1)\n  r2 \u003d r1.getModuleName()\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r12 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Module without defined name\")\n  throw $r12\n}",
      "B2 {\n  r3 \u003d r1.version()\n  if (r3 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r11 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Module without defined version\")\n  throw $r11\n}",
      "B4 {\n  $r4 \u003d r1.getDependencies()\n  r13 \u003d $r4.iterator()\n}",
      "B5 {\n  $z0 \u003d r13.hasNext()\n  if ($z0 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r9 \u003d r13.next()\n  r10 \u003d Module) $r9\n  r0.registerModule(r10)\n  goto B5\n}",
      "B7 {\n  $r5 \u003d MapperFeature IGNORE_DUPLICATE_MODULE_REGISTRATIONS\u003e\n  $z1 \u003d r0.isEnabled($r5)\n  if ($z1 \u003d\u003d false) goto B8 else B13\n}",
      "B8 {\n  r14 \u003d r1.getTypeId()\n  if (r14 \u003d\u003d null) goto B9 else B13\n}",
      "B9 {\n  $r6 \u003d Set _registeredModuleTypes\u003e\n  if ($r6 !\u003d null) goto B10 else B11\n}",
      "B10 {\n  $r8 \u003d LinkedHashSet\n  new LinkedHashSet()\n  Set _registeredModuleTypes\u003e \u003d $r8\n}",
      "B11 {\n  $r7 \u003d Set _registeredModuleTypes\u003e\n  $z2 \u003d $r7.add(r14)\n  if ($z2 !\u003d 0) goto B12 else B13\n}",
      "B12 {\n  return\n}",
      "B13 {\n  $r15 \u003d ObjectMapper$1\n  new ObjectMapper$1(r0)\n  r1.setupModule($r15)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e B8",
      "B7 --\u003e B13",
      "B8 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectMapper#registerSubtypes(...1)",
        "body": "{\r\n    getSubtypeResolver().registerSubtypes(classes);\r\n}"
      },
      {
        "name": "ObjectMapper#isEnabled(...1)",
        "body": "{\r\n    // ok to use either one, should be kept in sync\r\n    return _serializationConfig.isEnabled(f);\r\n}"
      },
      {
        "name": "ObjectMapper#addMixIn(...2)",
        "body": "{\r\n    _mixIns.addLocalDefinition(target, mixinSource);\r\n    return this;\r\n}"
      },
      {
        "name": "ObjectMapper#addHandler(...1)",
        "body": "{\r\n    _deserializationConfig \u003d _deserializationConfig.withHandler(h);\r\n    return this;\r\n}"
      },
      {
        "name": "ObjectMapper#configOverride(...1)",
        "body": "{\r\n    return _configOverrides.findOrCreateOverride(type);\r\n}"
      },
      {
        "name": "ObjectMapper#registerModule(...1)",
        "body": "{\r\n    _assertNotNull(\"module\", module);\r\n    // Let\u0027s ensure we have access to name and version information,\r\n    // even if we do not have immediate use for either. This way we know\r\n    // that they will be available from beginning\r\n    String name \u003d module.getModuleName();\r\n    if (name \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Module without defined name\");\r\n    }\r\n    Version version \u003d module.version();\r\n    if (version \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Module without defined version\");\r\n    }\r\n    // [databind#2432]: Modules may depend on other modules; if so, register those first\r\n    for (Module dep : module.getDependencies()) {\r\n        registerModule(dep);\r\n    }\r\n    // then module itself\r\n    if (isEnabled(MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS)) {\r\n        Object typeId \u003d module.getTypeId();\r\n        if (typeId !\u003d null) {\r\n            if (_registeredModuleTypes \u003d\u003d null) {\r\n                // plus let\u0027s keep them in order too, easier to debug or expose\r\n                // in registration order if that matter\r\n                _registeredModuleTypes \u003d new LinkedHashSet\u003c\u003e();\r\n            }\r\n            // try adding; if already had it, should skip\r\n            if (!_registeredModuleTypes.add(typeId)) {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    // And then call registration\r\n    module.setupModule(new Module.SetupContext() {\r\n\r\n        // // // Accessors\r\n        @Override\r\n        public Version getMapperVersion() {\r\n            return version();\r\n        }\r\n\r\n        @SuppressWarnings(\"unchecked\")\r\n        @Override\r\n        public \u003cC extends ObjectCodec\u003e C getOwner() {\r\n            // why do we need the cast here?!?\r\n            return (C) ObjectMapper.this;\r\n        }\r\n\r\n        @Override\r\n        public TypeFactory getTypeFactory() {\r\n            return _typeFactory;\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(MapperFeature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(DeserializationFeature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(SerializationFeature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(JsonFactory.Feature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(JsonParser.Feature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(JsonGenerator.Feature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        // // // Mutant accessors\r\n        @Override\r\n        public MutableConfigOverride configOverride(Class\u003c?\u003e type) {\r\n            return ObjectMapper.this.configOverride(type);\r\n        }\r\n\r\n        // // // Methods for registering handlers: deserializers\r\n        @Override\r\n        public void addDeserializers(Deserializers d) {\r\n            DeserializerFactory df \u003d _deserializationContext._factory.withAdditionalDeserializers(d);\r\n            _deserializationContext \u003d _deserializationContext.with(df);\r\n        }\r\n\r\n        @Override\r\n        public void addKeyDeserializers(KeyDeserializers d) {\r\n            DeserializerFactory df \u003d _deserializationContext._factory.withAdditionalKeyDeserializers(d);\r\n            _deserializationContext \u003d _deserializationContext.with(df);\r\n        }\r\n\r\n        @Override\r\n        public void addBeanDeserializerModifier(BeanDeserializerModifier modifier) {\r\n            DeserializerFactory df \u003d _deserializationContext._factory.withDeserializerModifier(modifier);\r\n            _deserializationContext \u003d _deserializationContext.with(df);\r\n        }\r\n\r\n        // // // Methods for registering handlers: serializers\r\n        @Override\r\n        public void addSerializers(Serializers s) {\r\n            _serializerFactory \u003d _serializerFactory.withAdditionalSerializers(s);\r\n        }\r\n\r\n        @Override\r\n        public void addKeySerializers(Serializers s) {\r\n            _serializerFactory \u003d _serializerFactory.withAdditionalKeySerializers(s);\r\n        }\r\n\r\n        @Override\r\n        public void addBeanSerializerModifier(BeanSerializerModifier modifier) {\r\n            _serializerFactory \u003d _serializerFactory.withSerializerModifier(modifier);\r\n        }\r\n\r\n        // // // Methods for registering handlers: other\r\n        @Override\r\n        public void addAbstractTypeResolver(AbstractTypeResolver resolver) {\r\n            DeserializerFactory df \u003d _deserializationContext._factory.withAbstractTypeResolver(resolver);\r\n            _deserializationContext \u003d _deserializationContext.with(df);\r\n        }\r\n\r\n        @Override\r\n        public void addTypeModifier(TypeModifier modifier) {\r\n            TypeFactory f \u003d _typeFactory;\r\n            f \u003d f.withModifier(modifier);\r\n            setTypeFactory(f);\r\n        }\r\n\r\n        @Override\r\n        public void addValueInstantiators(ValueInstantiators instantiators) {\r\n            DeserializerFactory df \u003d _deserializationContext._factory.withValueInstantiators(instantiators);\r\n            _deserializationContext \u003d _deserializationContext.with(df);\r\n        }\r\n\r\n        @Override\r\n        public void setClassIntrospector(ClassIntrospector ci) {\r\n            _deserializationConfig \u003d _deserializationConfig.with(ci);\r\n            _serializationConfig \u003d _serializationConfig.with(ci);\r\n        }\r\n\r\n        @Override\r\n        public void insertAnnotationIntrospector(AnnotationIntrospector ai) {\r\n            _deserializationConfig \u003d _deserializationConfig.withInsertedAnnotationIntrospector(ai);\r\n            _serializationConfig \u003d _serializationConfig.withInsertedAnnotationIntrospector(ai);\r\n        }\r\n\r\n        @Override\r\n        public void appendAnnotationIntrospector(AnnotationIntrospector ai) {\r\n            _deserializationConfig \u003d _deserializationConfig.withAppendedAnnotationIntrospector(ai);\r\n            _serializationConfig \u003d _serializationConfig.withAppendedAnnotationIntrospector(ai);\r\n        }\r\n\r\n        @Override\r\n        public void registerSubtypes(Class\u003c?\u003e... subtypes) {\r\n            ObjectMapper.this.registerSubtypes(subtypes);\r\n        }\r\n\r\n        @Override\r\n        public void registerSubtypes(NamedType... subtypes) {\r\n            ObjectMapper.this.registerSubtypes(subtypes);\r\n        }\r\n\r\n        @Override\r\n        public void registerSubtypes(Collection\u003cClass\u003c?\u003e\u003e subtypes) {\r\n            ObjectMapper.this.registerSubtypes(subtypes);\r\n        }\r\n\r\n        @Override\r\n        public void setMixInAnnotations(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\r\n            addMixIn(target, mixinSource);\r\n        }\r\n\r\n        @Override\r\n        public void addDeserializationProblemHandler(DeserializationProblemHandler handler) {\r\n            addHandler(handler);\r\n        }\r\n\r\n        @Override\r\n        public void setNamingStrategy(PropertyNamingStrategy naming) {\r\n            setPropertyNamingStrategy(naming);\r\n        }\r\n    });\r\n    return this;\r\n}"
      },
      {
        "name": "ObjectMapper#version(...0)",
        "body": "{\r\n    return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\r\n}"
      },
      {
        "name": "ObjectMapper#_assertNotNull(...2)",
        "body": "{\r\n    if (src \u003d\u003d null) {\r\n        throw new IllegalArgumentException(String.format(\"argument \\\"%s\\\" is null\", paramName));\r\n    }\r\n}"
      },
      {
        "name": "ObjectMapper#setTypeFactory(...1)",
        "body": "{\r\n    _typeFactory \u003d f;\r\n    _deserializationConfig \u003d _deserializationConfig.with(f);\r\n    _serializationConfig \u003d _serializationConfig.with(f);\r\n    return this;\r\n}"
      },
      {
        "name": "ObjectMapper#setPropertyNamingStrategy(...1)",
        "body": "{\r\n    _serializationConfig \u003d _serializationConfig.with(s);\r\n    _deserializationConfig \u003d _deserializationConfig.with(s);\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "registerModules",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper registerModules(com.fasterxml.jackson.databind.Module[])",
    "visibility": "public",
    "body": "{\r\n    for (Module module : modules) {\r\n        registerModule(module);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  Module[]\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r0[i1]\n  r1.registerModule(r2)\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectMapper#registerModule(...1)",
        "body": "{\r\n    _assertNotNull(\"module\", module);\r\n    // Let\u0027s ensure we have access to name and version information,\r\n    // even if we do not have immediate use for either. This way we know\r\n    // that they will be available from beginning\r\n    String name \u003d module.getModuleName();\r\n    if (name \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Module without defined name\");\r\n    }\r\n    Version version \u003d module.version();\r\n    if (version \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Module without defined version\");\r\n    }\r\n    // [databind#2432]: Modules may depend on other modules; if so, register those first\r\n    for (Module dep : module.getDependencies()) {\r\n        registerModule(dep);\r\n    }\r\n    // then module itself\r\n    if (isEnabled(MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS)) {\r\n        Object typeId \u003d module.getTypeId();\r\n        if (typeId !\u003d null) {\r\n            if (_registeredModuleTypes \u003d\u003d null) {\r\n                // plus let\u0027s keep them in order too, easier to debug or expose\r\n                // in registration order if that matter\r\n                _registeredModuleTypes \u003d new LinkedHashSet\u003c\u003e();\r\n            }\r\n            // try adding; if already had it, should skip\r\n            if (!_registeredModuleTypes.add(typeId)) {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    // And then call registration\r\n    module.setupModule(new Module.SetupContext() {\r\n\r\n        // // // Accessors\r\n        @Override\r\n        public Version getMapperVersion() {\r\n            return version();\r\n        }\r\n\r\n        @SuppressWarnings(\"unchecked\")\r\n        @Override\r\n        public \u003cC extends ObjectCodec\u003e C getOwner() {\r\n            // why do we need the cast here?!?\r\n            return (C) ObjectMapper.this;\r\n        }\r\n\r\n        @Override\r\n        public TypeFactory getTypeFactory() {\r\n            return _typeFactory;\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(MapperFeature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(DeserializationFeature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(SerializationFeature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(JsonFactory.Feature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(JsonParser.Feature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(JsonGenerator.Feature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        // // // Mutant accessors\r\n        @Override\r\n        public MutableConfigOverride configOverride(Class\u003c?\u003e type) {\r\n            return ObjectMapper.this.configOverride(type);\r\n        }\r\n\r\n        // // // Methods for registering handlers: deserializers\r\n        @Override\r\n        public void addDeserializers(Deserializers d) {\r\n            DeserializerFactory df \u003d _deserializationContext._factory.withAdditionalDeserializers(d);\r\n            _deserializationContext \u003d _deserializationContext.with(df);\r\n        }\r\n\r\n        @Override\r\n        public void addKeyDeserializers(KeyDeserializers d) {\r\n            DeserializerFactory df \u003d _deserializationContext._factory.withAdditionalKeyDeserializers(d);\r\n            _deserializationContext \u003d _deserializationContext.with(df);\r\n        }\r\n\r\n        @Override\r\n        public void addBeanDeserializerModifier(BeanDeserializerModifier modifier) {\r\n            DeserializerFactory df \u003d _deserializationContext._factory.withDeserializerModifier(modifier);\r\n            _deserializationContext \u003d _deserializationContext.with(df);\r\n        }\r\n\r\n        // // // Methods for registering handlers: serializers\r\n        @Override\r\n        public void addSerializers(Serializers s) {\r\n            _serializerFactory \u003d _serializerFactory.withAdditionalSerializers(s);\r\n        }\r\n\r\n        @Override\r\n        public void addKeySerializers(Serializers s) {\r\n            _serializerFactory \u003d _serializerFactory.withAdditionalKeySerializers(s);\r\n        }\r\n\r\n        @Override\r\n        public void addBeanSerializerModifier(BeanSerializerModifier modifier) {\r\n            _serializerFactory \u003d _serializerFactory.withSerializerModifier(modifier);\r\n        }\r\n\r\n        // // // Methods for registering handlers: other\r\n        @Override\r\n        public void addAbstractTypeResolver(AbstractTypeResolver resolver) {\r\n            DeserializerFactory df \u003d _deserializationContext._factory.withAbstractTypeResolver(resolver);\r\n            _deserializationContext \u003d _deserializationContext.with(df);\r\n        }\r\n\r\n        @Override\r\n        public void addTypeModifier(TypeModifier modifier) {\r\n            TypeFactory f \u003d _typeFactory;\r\n            f \u003d f.withModifier(modifier);\r\n            setTypeFactory(f);\r\n        }\r\n\r\n        @Override\r\n        public void addValueInstantiators(ValueInstantiators instantiators) {\r\n            DeserializerFactory df \u003d _deserializationContext._factory.withValueInstantiators(instantiators);\r\n            _deserializationContext \u003d _deserializationContext.with(df);\r\n        }\r\n\r\n        @Override\r\n        public void setClassIntrospector(ClassIntrospector ci) {\r\n            _deserializationConfig \u003d _deserializationConfig.with(ci);\r\n            _serializationConfig \u003d _serializationConfig.with(ci);\r\n        }\r\n\r\n        @Override\r\n        public void insertAnnotationIntrospector(AnnotationIntrospector ai) {\r\n            _deserializationConfig \u003d _deserializationConfig.withInsertedAnnotationIntrospector(ai);\r\n            _serializationConfig \u003d _serializationConfig.withInsertedAnnotationIntrospector(ai);\r\n        }\r\n\r\n        @Override\r\n        public void appendAnnotationIntrospector(AnnotationIntrospector ai) {\r\n            _deserializationConfig \u003d _deserializationConfig.withAppendedAnnotationIntrospector(ai);\r\n            _serializationConfig \u003d _serializationConfig.withAppendedAnnotationIntrospector(ai);\r\n        }\r\n\r\n        @Override\r\n        public void registerSubtypes(Class\u003c?\u003e... subtypes) {\r\n            ObjectMapper.this.registerSubtypes(subtypes);\r\n        }\r\n\r\n        @Override\r\n        public void registerSubtypes(NamedType... subtypes) {\r\n            ObjectMapper.this.registerSubtypes(subtypes);\r\n        }\r\n\r\n        @Override\r\n        public void registerSubtypes(Collection\u003cClass\u003c?\u003e\u003e subtypes) {\r\n            ObjectMapper.this.registerSubtypes(subtypes);\r\n        }\r\n\r\n        @Override\r\n        public void setMixInAnnotations(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\r\n            addMixIn(target, mixinSource);\r\n        }\r\n\r\n        @Override\r\n        public void addDeserializationProblemHandler(DeserializationProblemHandler handler) {\r\n            addHandler(handler);\r\n        }\r\n\r\n        @Override\r\n        public void setNamingStrategy(PropertyNamingStrategy naming) {\r\n            setPropertyNamingStrategy(naming);\r\n        }\r\n    });\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "registerModules",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper registerModules(java.lang.Iterable)",
    "visibility": "public",
    "body": "{\r\n    _assertNotNull(\"modules\", modules);\r\n    for (Module module : modules) {\r\n        registerModule(module);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  Iterable\n  r0._assertNotNull(\"modules\", r1)\n  r2 \u003d r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d r2.next()\n  r4 \u003d Module) $r3\n  r0.registerModule(r4)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectMapper#registerModule(...1)",
        "body": "{\r\n    _assertNotNull(\"module\", module);\r\n    // Let\u0027s ensure we have access to name and version information,\r\n    // even if we do not have immediate use for either. This way we know\r\n    // that they will be available from beginning\r\n    String name \u003d module.getModuleName();\r\n    if (name \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Module without defined name\");\r\n    }\r\n    Version version \u003d module.version();\r\n    if (version \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Module without defined version\");\r\n    }\r\n    // [databind#2432]: Modules may depend on other modules; if so, register those first\r\n    for (Module dep : module.getDependencies()) {\r\n        registerModule(dep);\r\n    }\r\n    // then module itself\r\n    if (isEnabled(MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS)) {\r\n        Object typeId \u003d module.getTypeId();\r\n        if (typeId !\u003d null) {\r\n            if (_registeredModuleTypes \u003d\u003d null) {\r\n                // plus let\u0027s keep them in order too, easier to debug or expose\r\n                // in registration order if that matter\r\n                _registeredModuleTypes \u003d new LinkedHashSet\u003c\u003e();\r\n            }\r\n            // try adding; if already had it, should skip\r\n            if (!_registeredModuleTypes.add(typeId)) {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    // And then call registration\r\n    module.setupModule(new Module.SetupContext() {\r\n\r\n        // // // Accessors\r\n        @Override\r\n        public Version getMapperVersion() {\r\n            return version();\r\n        }\r\n\r\n        @SuppressWarnings(\"unchecked\")\r\n        @Override\r\n        public \u003cC extends ObjectCodec\u003e C getOwner() {\r\n            // why do we need the cast here?!?\r\n            return (C) ObjectMapper.this;\r\n        }\r\n\r\n        @Override\r\n        public TypeFactory getTypeFactory() {\r\n            return _typeFactory;\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(MapperFeature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(DeserializationFeature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(SerializationFeature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(JsonFactory.Feature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(JsonParser.Feature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        @Override\r\n        public boolean isEnabled(JsonGenerator.Feature f) {\r\n            return ObjectMapper.this.isEnabled(f);\r\n        }\r\n\r\n        // // // Mutant accessors\r\n        @Override\r\n        public MutableConfigOverride configOverride(Class\u003c?\u003e type) {\r\n            return ObjectMapper.this.configOverride(type);\r\n        }\r\n\r\n        // // // Methods for registering handlers: deserializers\r\n        @Override\r\n        public void addDeserializers(Deserializers d) {\r\n            DeserializerFactory df \u003d _deserializationContext._factory.withAdditionalDeserializers(d);\r\n            _deserializationContext \u003d _deserializationContext.with(df);\r\n        }\r\n\r\n        @Override\r\n        public void addKeyDeserializers(KeyDeserializers d) {\r\n            DeserializerFactory df \u003d _deserializationContext._factory.withAdditionalKeyDeserializers(d);\r\n            _deserializationContext \u003d _deserializationContext.with(df);\r\n        }\r\n\r\n        @Override\r\n        public void addBeanDeserializerModifier(BeanDeserializerModifier modifier) {\r\n            DeserializerFactory df \u003d _deserializationContext._factory.withDeserializerModifier(modifier);\r\n            _deserializationContext \u003d _deserializationContext.with(df);\r\n        }\r\n\r\n        // // // Methods for registering handlers: serializers\r\n        @Override\r\n        public void addSerializers(Serializers s) {\r\n            _serializerFactory \u003d _serializerFactory.withAdditionalSerializers(s);\r\n        }\r\n\r\n        @Override\r\n        public void addKeySerializers(Serializers s) {\r\n            _serializerFactory \u003d _serializerFactory.withAdditionalKeySerializers(s);\r\n        }\r\n\r\n        @Override\r\n        public void addBeanSerializerModifier(BeanSerializerModifier modifier) {\r\n            _serializerFactory \u003d _serializerFactory.withSerializerModifier(modifier);\r\n        }\r\n\r\n        // // // Methods for registering handlers: other\r\n        @Override\r\n        public void addAbstractTypeResolver(AbstractTypeResolver resolver) {\r\n            DeserializerFactory df \u003d _deserializationContext._factory.withAbstractTypeResolver(resolver);\r\n            _deserializationContext \u003d _deserializationContext.with(df);\r\n        }\r\n\r\n        @Override\r\n        public void addTypeModifier(TypeModifier modifier) {\r\n            TypeFactory f \u003d _typeFactory;\r\n            f \u003d f.withModifier(modifier);\r\n            setTypeFactory(f);\r\n        }\r\n\r\n        @Override\r\n        public void addValueInstantiators(ValueInstantiators instantiators) {\r\n            DeserializerFactory df \u003d _deserializationContext._factory.withValueInstantiators(instantiators);\r\n            _deserializationContext \u003d _deserializationContext.with(df);\r\n        }\r\n\r\n        @Override\r\n        public void setClassIntrospector(ClassIntrospector ci) {\r\n            _deserializationConfig \u003d _deserializationConfig.with(ci);\r\n            _serializationConfig \u003d _serializationConfig.with(ci);\r\n        }\r\n\r\n        @Override\r\n        public void insertAnnotationIntrospector(AnnotationIntrospector ai) {\r\n            _deserializationConfig \u003d _deserializationConfig.withInsertedAnnotationIntrospector(ai);\r\n            _serializationConfig \u003d _serializationConfig.withInsertedAnnotationIntrospector(ai);\r\n        }\r\n\r\n        @Override\r\n        public void appendAnnotationIntrospector(AnnotationIntrospector ai) {\r\n            _deserializationConfig \u003d _deserializationConfig.withAppendedAnnotationIntrospector(ai);\r\n            _serializationConfig \u003d _serializationConfig.withAppendedAnnotationIntrospector(ai);\r\n        }\r\n\r\n        @Override\r\n        public void registerSubtypes(Class\u003c?\u003e... subtypes) {\r\n            ObjectMapper.this.registerSubtypes(subtypes);\r\n        }\r\n\r\n        @Override\r\n        public void registerSubtypes(NamedType... subtypes) {\r\n            ObjectMapper.this.registerSubtypes(subtypes);\r\n        }\r\n\r\n        @Override\r\n        public void registerSubtypes(Collection\u003cClass\u003c?\u003e\u003e subtypes) {\r\n            ObjectMapper.this.registerSubtypes(subtypes);\r\n        }\r\n\r\n        @Override\r\n        public void setMixInAnnotations(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\r\n            addMixIn(target, mixinSource);\r\n        }\r\n\r\n        @Override\r\n        public void addDeserializationProblemHandler(DeserializationProblemHandler handler) {\r\n            addHandler(handler);\r\n        }\r\n\r\n        @Override\r\n        public void setNamingStrategy(PropertyNamingStrategy naming) {\r\n            setPropertyNamingStrategy(naming);\r\n        }\r\n    });\r\n    return this;\r\n}"
      },
      {
        "name": "ObjectMapper#_assertNotNull(...2)",
        "body": "{\r\n    if (src \u003d\u003d null) {\r\n        throw new IllegalArgumentException(String.format(\"argument \\\"%s\\\" is null\", paramName));\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "getRegisteredModuleIds",
    "signature": "java.util.Set getRegisteredModuleIds()",
    "visibility": "public",
    "body": "{\r\n    return (_registeredModuleTypes \u003d\u003d null) ? Collections.emptySet() : Collections.unmodifiableSet(_registeredModuleTypes);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  $r1 \u003d Set _registeredModuleTypes\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Collections.emptySet()\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Set _registeredModuleTypes\u003e\n  $r3 \u003d Collections.unmodifiableSet($r2)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "findModules",
    "signature": "java.util.List findModules(java.lang.ClassLoader)",
    "visibility": "public",
    "body": "{\r\n    ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003cModule\u003e();\r\n    ServiceLoader\u003cModule\u003e loader \u003d secureGetServiceLoader(Module.class, classLoader);\r\n    for (Module module : loader) {\r\n        modules.add(module);\r\n    }\r\n    return modules;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ClassLoader\n  $r0 \u003d ArrayList\n  new ArrayList()\n  r2 \u003d ObjectMapper.secureGetServiceLoader(class \"Lcom/fasterxml/jackson/databind/Module;\", r1)\n  r3 \u003d r2.iterator()\n}",
      "B1 {\n  $z0 \u003d r3.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r3.next()\n  r5 \u003d Module) $r4\n  $r0.add(r5)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectMapper#secureGetServiceLoader(...2)",
        "body": "{\r\n    final SecurityManager sm \u003d System.getSecurityManager();\r\n    if (sm \u003d\u003d null) {\r\n        return (classLoader \u003d\u003d null) ? ServiceLoader.load(clazz) : ServiceLoader.load(clazz, classLoader);\r\n    }\r\n    return AccessController.doPrivileged(new PrivilegedAction\u003cServiceLoader\u003cT\u003e\u003e() {\r\n\r\n        @Override\r\n        public ServiceLoader\u003cT\u003e run() {\r\n            return (classLoader \u003d\u003d null) ? ServiceLoader.load(clazz) : ServiceLoader.load(clazz, classLoader);\r\n        }\r\n    });\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "setMixInResolver",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper setMixInResolver(com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d $r4) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  ClassIntrospector$MixInResolver\n  $r2 \u003d SimpleMixInResolver _mixIns\u003e\n  r3 \u003d $r2.withOverrides(r1)\n  $r4 \u003d SimpleMixInResolver _mixIns\u003e\n  if (r3 \u003d\u003d $r4) goto B1 else B2\n}",
      "B1 {\n  SimpleMixInResolver _mixIns\u003e \u003d r3\n  $r5 \u003d DeserializationConfig\n  $r6 \u003d DeserializationConfig _deserializationConfig\u003e\n  new DeserializationConfig($r6, r3)\n  DeserializationConfig _deserializationConfig\u003e \u003d $r5\n  $r7 \u003d SerializationConfig\n  $r8 \u003d SerializationConfig _serializationConfig\u003e\n  new SerializationConfig($r8, r3)\n  SerializationConfig _serializationConfig\u003e \u003d $r7\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "activateDefaultTyping",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper activateDefaultTyping(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator,com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping,com.fasterxml.jackson.\u0027annotation\u0027.JsonTypeInfo$As)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  PolymorphicTypeValidator\n  ObjectMapper$DefaultTyping\n  JsonTypeInfo$As\n  $r1 \u003d JsonTypeInfo$As EXTERNAL_PROPERTY\u003e\n  if (r0 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d IllegalArgumentException\n  $r9 \u003d String.valueOf(r0)\n  $r10 \u003d dynInvoke makeConcatWithConstants($r9)\n  new IllegalArgumentException($r10)\n  throw $r8\n}",
      "B2 {\n  r11 \u003d r2._constructDefaultTypeResolverBuilder(r3, r4)\n  $r5 \u003d JsonTypeInfo$Id CLASS\u003e\n  r6 \u003d JsonTypeInfo$Value.construct($r5, r0, null, null, 0, null)\n  r12 \u003d r11.withSettings(r6)\n  $r7 \u003d r2.setDefaultTyping(r12)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "configure",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.databind.MapperFeature,boolean)",
    "visibility": "public",
    "body": "{\r\n    _serializationConfig \u003d state ? _serializationConfig.with(f) : _serializationConfig.without(f);\r\n    _deserializationConfig \u003d state ? _deserializationConfig.with(f) : _deserializationConfig.without(f);\r\n    return this;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If(z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  MapperFeature\n  z0 :\u003d @parameter1: boolean\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r12 \u003d SerializationConfig _serializationConfig\u003e\n  $r11 \u003d MapperFeature)[1]\n  $r11[0] \u003d r2\n  $r13 \u003d $r12.with($r11)\n  $r14 \u003d SerializationConfig) $r13\n  goto B3\n}",
      "B2 {\n  $r3 \u003d SerializationConfig _serializationConfig\u003e\n  $r1 \u003d MapperFeature)[1]\n  $r1[0] \u003d r2\n  $r4 \u003d $r3.without($r1)\n  $r14 \u003d SerializationConfig) $r4\n}",
      "B3 {\n  SerializationConfig _serializationConfig\u003e \u003d $r14\n  if (z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r9 \u003d DeserializationConfig _deserializationConfig\u003e\n  $r8 \u003d MapperFeature)[1]\n  $r8[0] \u003d r2\n  $r10 \u003d $r9.with($r8)\n  $r15 \u003d DeserializationConfig) $r10\n  goto B6\n}",
      "B5 {\n  $r6 \u003d DeserializationConfig _deserializationConfig\u003e\n  $r5 \u003d MapperFeature)[1]\n  $r5[0] \u003d r2\n  $r7 \u003d $r6.without($r5)\n  $r15 \u003d DeserializationConfig) $r7\n}",
      "B6 {\n  DeserializationConfig _deserializationConfig\u003e \u003d $r15\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "configure",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.databind.SerializationFeature,boolean)",
    "visibility": "public",
    "body": "{\r\n    _serializationConfig \u003d state ? _serializationConfig.with(f) : _serializationConfig.without(f);\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  SerializationFeature\n  z0 :\u003d @parameter1: boolean\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d SerializationConfig _serializationConfig\u003e\n  $r4 \u003d $r3.with(r1)\n  goto B3\n}",
      "B2 {\n  $r2 \u003d SerializationConfig _serializationConfig\u003e\n  $r4 \u003d $r2.without(r1)\n}",
      "B3 {\n  SerializationConfig _serializationConfig\u003e \u003d $r4\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "configure",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.databind.DeserializationFeature,boolean)",
    "visibility": "public",
    "body": "{\r\n    _deserializationConfig \u003d state ? _deserializationConfig.with(f) : _deserializationConfig.without(f);\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  DeserializationFeature\n  z0 :\u003d @parameter1: boolean\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d DeserializationConfig _deserializationConfig\u003e\n  $r4 \u003d $r3.with(r1)\n  goto B3\n}",
      "B2 {\n  $r2 \u003d DeserializationConfig _deserializationConfig\u003e\n  $r4 \u003d $r2.without(r1)\n}",
      "B3 {\n  DeserializationConfig _deserializationConfig\u003e \u003d $r4\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "configure",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.databind.cfg.DatatypeFeature,boolean)",
    "visibility": "public",
    "body": "{\r\n    if (state) {\r\n        _deserializationConfig \u003d _deserializationConfig.with(f);\r\n        _serializationConfig \u003d _serializationConfig.with(f);\r\n    } else {\r\n        _deserializationConfig \u003d _deserializationConfig.without(f);\r\n        _serializationConfig \u003d _serializationConfig.without(f);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  DatatypeFeature\n  z0 :\u003d @parameter1: boolean\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d DeserializationConfig _deserializationConfig\u003e\n  $r9 \u003d $r8.with(r1)\n  $r10 \u003d DeserializationConfig) $r9\n  DeserializationConfig _deserializationConfig\u003e \u003d $r10\n  $r11 \u003d SerializationConfig _serializationConfig\u003e\n  $r12 \u003d $r11.with(r1)\n  $r13 \u003d SerializationConfig) $r12\n  SerializationConfig _serializationConfig\u003e \u003d $r13\n  goto B3\n}",
      "B2 {\n  $r2 \u003d DeserializationConfig _deserializationConfig\u003e\n  $r3 \u003d $r2.without(r1)\n  $r4 \u003d DeserializationConfig) $r3\n  DeserializationConfig _deserializationConfig\u003e \u003d $r4\n  $r5 \u003d SerializationConfig _serializationConfig\u003e\n  $r6 \u003d $r5.without(r1)\n  $r7 \u003d SerializationConfig) $r6\n  SerializationConfig _serializationConfig\u003e \u003d $r7\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "enable",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper enable(com.fasterxml.jackson.core.JsonParser$Feature[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  JsonParser$Feature[]\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r0[i1]\n  $r3 \u003d JsonFactory _jsonFactory\u003e\n  $r3.enable(r2)\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "disable",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper disable(com.fasterxml.jackson.core.JsonParser$Feature[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  JsonParser$Feature[]\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r0[i1]\n  $r3 \u003d JsonFactory _jsonFactory\u003e\n  $r3.disable(r2)\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "enable",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper enable(com.fasterxml.jackson.core.JsonGenerator$Feature[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  JsonGenerator$Feature[]\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r0[i1]\n  $r3 \u003d JsonFactory _jsonFactory\u003e\n  $r3.enable(r2)\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "disable",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper disable(com.fasterxml.jackson.core.JsonGenerator$Feature[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  JsonGenerator$Feature[]\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r0[i1]\n  $r3 \u003d JsonFactory _jsonFactory\u003e\n  $r3.disable(r2)\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "readTree",
    "signature": "com.fasterxml.jackson.core.TreeNode readTree(com.fasterxml.jackson.core.JsonParser)",
    "visibility": "public",
    "body": "{\r\n    _assertNotNull(\"p\", p);\r\n    // Must check for EOF here before calling readValue(), since that\u0027ll choke on it otherwise\r\n    DeserializationConfig cfg \u003d getDeserializationConfig();\r\n    JsonToken t \u003d p.currentToken();\r\n    if (t \u003d\u003d null) {\r\n        t \u003d p.nextToken();\r\n        if (t \u003d\u003d null) {\r\n            return null;\r\n        }\r\n    }\r\n    // NOTE! _readValue() will check for trailing tokens\r\n    JsonNode n \u003d (JsonNode) _readValue(cfg, p, constructType(JsonNode.class));\r\n    if (n \u003d\u003d null) {\r\n        n \u003d getNodeFactory().nullNode();\r\n    }\r\n    @SuppressWarnings(\"unchecked\")\r\n    T result \u003d (T) n;\r\n    return result;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r7 !\u003d null) → B1 | else → B3",
      "B1 : If(r8 !\u003d null) → B2 | else → B3",
      "B3 : If($r6 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  JsonParser\n  r0._assertNotNull(\"p\", r1)\n  r2 \u003d r0.getDeserializationConfig()\n  r7 \u003d r1.currentToken()\n  if (r7 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  r8 \u003d r1.nextToken()\n  if (r8 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r3 \u003d r0.constructType(class \"Lcom/fasterxml/jackson/databind/JsonNode;\")\n  $r4 \u003d r0._readValue(r2, r1, $r3)\n  $r6 \u003d JsonNode) $r4\n  r9 \u003d $r6\n  if ($r6 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r5 \u003d r0.getNodeFactory()\n  r9 \u003d $r5.nullNode()\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectMapper#constructType(...1)",
        "body": "{\r\n    _assertNotNull(\"t\", t);\r\n    return _typeFactory.constructType(t);\r\n}"
      },
      {
        "name": "ObjectMapper#_readValue(...3)",
        "body": "{\r\n    // First: may need to read the next token, to initialize\r\n    // state (either before first read from parser, or after\r\n    // previous token has been cleared)\r\n    final Object result;\r\n    JsonToken t \u003d _initForReading(p, valueType);\r\n    final DefaultDeserializationContext ctxt \u003d createDeserializationContext(p, cfg);\r\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n        // Ask JsonDeserializer what \u0027null value\u0027 to use:\r\n        result \u003d _findRootDeserializer(ctxt, valueType).getNullValue(ctxt);\r\n    } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\r\n        result \u003d null;\r\n    } else if (t \u003d\u003d JsonToken.NOT_AVAILABLE) {\r\n        // 28-Jan-2025, tatu: [databind#4932] Need to handle this case too\r\n        result \u003d null;\r\n    } else {\r\n        // pointing to event other than null\r\n        result \u003d ctxt.readRootValue(p, valueType, _findRootDeserializer(ctxt, valueType), null);\r\n    }\r\n    // Need to consume the token too\r\n    p.clearCurrentToken();\r\n    if (cfg.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) {\r\n        _verifyNoTrailingTokens(p, ctxt, valueType);\r\n    }\r\n    return result;\r\n}"
      },
      {
        "name": "ObjectMapper#getNodeFactory(...0)",
        "body": "{\r\n    return _deserializationConfig.getNodeFactory();\r\n}"
      },
      {
        "name": "ObjectMapper#_assertNotNull(...2)",
        "body": "{\r\n    if (src \u003d\u003d null) {\r\n        throw new IllegalArgumentException(String.format(\"argument \\\"%s\\\" is null\", paramName));\r\n    }\r\n}"
      },
      {
        "name": "ObjectMapper#getDeserializationConfig(...0)",
        "body": "{\r\n    return _deserializationConfig;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "writeValue",
    "signature": "void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    _assertNotNull(\"g\", g);\r\n    SerializationConfig config \u003d getSerializationConfig();\r\n    /* 12-May-2015/2.6, tatu: Looks like we do NOT want to call the usual\r\n         *    \u0027config.initialize(g)` here, since it is assumed that generator\r\n         *    has been configured by caller. But for some reason we don\u0027t\r\n         *    trust indentation settings...\r\n         */\r\n    // 10-Aug-2012, tatu: as per [Issue#12], must handle indentation:\r\n    if (config.isEnabled(SerializationFeature.INDENT_OUTPUT)) {\r\n        if (g.getPrettyPrinter() \u003d\u003d null) {\r\n            g.setPrettyPrinter(config.constructDefaultPrettyPrinter());\r\n        }\r\n    }\r\n    if (config.isEnabled(SerializationFeature.CLOSE_CLOSEABLE) \u0026\u0026 (value instanceof Closeable)) {\r\n        _writeCloseableValue(g, value, config);\r\n    } else {\r\n        _serializerProvider(config).serializeValue(g, value);\r\n        if (config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) {\r\n            g.flush();\r\n        }\r\n    }\r\n}",
    "nodes": 9,
    "edges": 13,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($r7 !\u003d null) → B2 | else → B3",
      "B3 : If($z3 \u003d\u003d false) → B4 | else → B6",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B6",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  JsonGenerator\n  Object\n  r0._assertNotNull(\"g\", r1)\n  r2 \u003d r0.getSerializationConfig()\n  $r3 \u003d SerializationFeature INDENT_OUTPUT\u003e\n  $z0 \u003d r2.isEnabled($r3)\n  if ($z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $r7 \u003d r1.getPrettyPrinter()\n  if ($r7 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r8 \u003d r2.constructDefaultPrettyPrinter()\n  r1.setPrettyPrinter($r8)\n}",
      "B3 {\n  $r9 \u003d SerializationFeature CLOSE_CLOSEABLE\u003e\n  $z3 \u003d r2.isEnabled($r9)\n  if ($z3 \u003d\u003d false) goto B4 else B6\n}",
      "B4 {\n  $z2 \u003d Closeable\n  if ($z2 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  r0._writeCloseableValue(r1, r4, r2)\n  goto B8\n}",
      "B6 {\n  $r5 \u003d r0._serializerProvider(r2)\n  $r5.serializeValue(r1, r4)\n  $r6 \u003d SerializationFeature FLUSH_AFTER_WRITE_VALUE\u003e\n  $z1 \u003d r2.isEnabled($r6)\n  if ($z1 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  r1.flush()\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectMapper#getSerializationConfig(...0)",
        "body": "{\r\n    return _serializationConfig;\r\n}"
      },
      {
        "name": "ObjectMapper#_writeCloseableValue(...3)",
        "body": "{\r\n    Closeable toClose \u003d (Closeable) value;\r\n    try {\r\n        _serializerProvider(cfg).serializeValue(g, value);\r\n        if (cfg.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) {\r\n            g.flush();\r\n        }\r\n    } catch (Exception e) {\r\n        ClassUtil.closeOnFailAndThrowAsIOE(null, toClose, e);\r\n        return;\r\n    }\r\n    toClose.close();\r\n}"
      },
      {
        "name": "ObjectMapper#_serializerProvider(...1)",
        "body": "{\r\n    return _serializerProvider.createInstance(config, _serializerFactory);\r\n}"
      },
      {
        "name": "ObjectMapper#_assertNotNull(...2)",
        "body": "{\r\n    if (src \u003d\u003d null) {\r\n        throw new IllegalArgumentException(String.format(\"argument \\\"%s\\\" is null\", paramName));\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "writeTree",
    "signature": "void writeTree(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.TreeNode)",
    "visibility": "public",
    "body": "{\r\n    _assertNotNull(\"g\", g);\r\n    SerializationConfig config \u003d getSerializationConfig();\r\n    _serializerProvider(config).serializeValue(g, rootNode);\r\n    if (config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) {\r\n        g.flush();\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  JsonGenerator\n  TreeNode\n  r0._assertNotNull(\"g\", r1)\n  r2 \u003d r0.getSerializationConfig()\n  $r4 \u003d r0._serializerProvider(r2)\n  $r4.serializeValue(r1, r3)\n  $r5 \u003d SerializationFeature FLUSH_AFTER_WRITE_VALUE\u003e\n  $z0 \u003d r2.isEnabled($r5)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r1.flush()\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectMapper#getSerializationConfig(...0)",
        "body": "{\r\n    return _serializationConfig;\r\n}"
      },
      {
        "name": "ObjectMapper#_serializerProvider(...1)",
        "body": "{\r\n    return _serializerProvider.createInstance(config, _serializerFactory);\r\n}"
      },
      {
        "name": "ObjectMapper#_assertNotNull(...2)",
        "body": "{\r\n    if (src \u003d\u003d null) {\r\n        throw new IllegalArgumentException(String.format(\"argument \\\"%s\\\" is null\", paramName));\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "writeTree",
    "signature": "void writeTree(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.JsonNode)",
    "visibility": "public",
    "body": "{\r\n    _assertNotNull(\"g\", g);\r\n    SerializationConfig config \u003d getSerializationConfig();\r\n    _serializerProvider(config).serializeValue(g, rootNode);\r\n    if (config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) {\r\n        g.flush();\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  JsonGenerator\n  JsonNode\n  r0._assertNotNull(\"g\", r1)\n  r2 \u003d r0.getSerializationConfig()\n  $r4 \u003d r0._serializerProvider(r2)\n  $r4.serializeValue(r1, r3)\n  $r5 \u003d SerializationFeature FLUSH_AFTER_WRITE_VALUE\u003e\n  $z0 \u003d r2.isEnabled($r5)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r1.flush()\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectMapper#getSerializationConfig(...0)",
        "body": "{\r\n    return _serializationConfig;\r\n}"
      },
      {
        "name": "ObjectMapper#_serializerProvider(...1)",
        "body": "{\r\n    return _serializerProvider.createInstance(config, _serializerFactory);\r\n}"
      },
      {
        "name": "ObjectMapper#_assertNotNull(...2)",
        "body": "{\r\n    if (src \u003d\u003d null) {\r\n        throw new IllegalArgumentException(String.format(\"argument \\\"%s\\\" is null\", paramName));\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "treeToValue",
    "signature": "java.lang.Object treeToValue(com.fasterxml.jackson.core.TreeNode,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (n \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    try {\r\n        // 25-Jan-2019, tatu: [databind#2220] won\u0027t prevent existing coercions here\r\n        // Simple cast when we just want to cast to, say, ObjectNode\r\n        if (TreeNode.class.isAssignableFrom(valueType) \u0026\u0026 valueType.isAssignableFrom(n.getClass())) {\r\n            return (T) n;\r\n        }\r\n        final JsonToken tt \u003d n.asToken();\r\n        // 20-Apr-2016, tatu: Another thing: for VALUE_EMBEDDED_OBJECT, assume similar\r\n        //    short-cut coercion\r\n        if (tt \u003d\u003d JsonToken.VALUE_EMBEDDED_OBJECT) {\r\n            if (n instanceof POJONode) {\r\n                Object ob \u003d ((POJONode) n).getPojo();\r\n                if ((ob \u003d\u003d null) || valueType.isInstance(ob)) {\r\n                    return (T) ob;\r\n                }\r\n            }\r\n        }\r\n        // 22-Aug-2019, tatu: [databind#2430] Consider \"null node\" (minor optimization)\r\n        // 08-Dec-2020, tatu: Alas, lead to [databind#2972], optimization gets complicated\r\n        //    so leave out for now...\r\n        /*if (tt \u003d\u003d JsonToken.VALUE_NULL) {\r\n                 return null;\r\n            }*/\r\n        return readValue(treeAsTokens(n), valueType);\r\n    } catch (JsonProcessingException e) {\r\n        // 12-Nov-2020, tatu: These can legit happen, during conversion, especially\r\n        //   with things like Builders that validate arguments.\r\n        throw e;\r\n    } catch (IOException e) {\r\n        // should not occur, no real i/o...\r\n        throw new IllegalArgumentException(e.getMessage(), e);\r\n    }\r\n}",
    "nodes": 13,
    "edges": 14,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B5",
      "B3 : If($z3 \u003d\u003d false) → B4 | else → B5",
      "B5 : If($r8 !\u003d $r3) → B6 | else → B10",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B10",
      "B7 : If(r6 \u003d\u003d null) → B8 | else → B9",
      "B8 : If($z2 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  TreeNode\n  Class\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d class \"Lcom/fasterxml/jackson/core/TreeNode;\"\n  $z0 \u003d $r2.isAssignableFrom(r1)\n  if ($z0 \u003d\u003d false) goto B3 else B5\n}",
      "B3 {\n  $r7 \u003d r0.getClass()\n  $z3 \u003d r1.isAssignableFrom($r7)\n  if ($z3 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r8 \u003d r0.asToken()\n  $r3 \u003d JsonToken VALUE_EMBEDDED_OBJECT\u003e\n  if ($r8 !\u003d $r3) goto B6 else B10\n}",
      "B6 {\n  $z1 \u003d POJONode\n  if ($z1 \u003d\u003d false) goto B7 else B10\n}",
      "B7 {\n  $r5 \u003d POJONode) r0\n  r6 \u003d $r5.getPojo()\n  if (r6 \u003d\u003d null) goto B8 else B9\n}",
      "B8 {\n  $z2 \u003d r1.isInstance(r6)\n  if ($z2 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $r13 \u003d r4.treeAsTokens(r0)\n  $r14 \u003d r4.readValue($r13, r1)\n  return\n}",
      "B11 {\n  $r12 :\u003d @caughtexception\n  throw $r12\n}",
      "B12 {\n  $r9 :\u003d @caughtexception\n  $r10 \u003d IllegalArgumentException\n  $r11 \u003d $r9.getMessage()\n  new IllegalArgumentException($r11, $r9)\n  throw $r10\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectMapper#treeAsTokens(...1)",
        "body": "{\r\n    _assertNotNull(\"n\", n);\r\n    return new TreeTraversingParser((JsonNode) n, this);\r\n}"
      },
      {
        "name": "ObjectMapper#readValue(...2)",
        "body": "{\r\n    _assertNotNull(\"p\", p);\r\n    return (T) _readValue(getDeserializationConfig(), p, _typeFactory.constructType(valueType));\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "treeToValue",
    "signature": "java.lang.Object treeToValue(com.fasterxml.jackson.core.TreeNode,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    // Implementation copied from the type-erased variant\r\n    if (n \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    try {\r\n        if (valueType.isTypeOrSubTypeOf(TreeNode.class) \u0026\u0026 valueType.isTypeOrSuperTypeOf(n.getClass())) {\r\n            return (T) n;\r\n        }\r\n        final JsonToken tt \u003d n.asToken();\r\n        if (tt \u003d\u003d JsonToken.VALUE_EMBEDDED_OBJECT) {\r\n            if (n instanceof POJONode) {\r\n                Object ob \u003d ((POJONode) n).getPojo();\r\n                if ((ob \u003d\u003d null) || valueType.isTypeOrSuperTypeOf(ob.getClass())) {\r\n                    return (T) ob;\r\n                }\r\n            }\r\n        }\r\n        return (T) readValue(treeAsTokens(n), valueType);\r\n    } catch (JsonProcessingException e) {\r\n        // 12-Nov-2020, tatu: These can legit happen, during conversion, especially\r\n        //   with things like Builders that validate arguments.\r\n        throw e;\r\n    } catch (IOException e) {\r\n        // should not occur, no real i/o...\r\n        throw new IllegalArgumentException(e.getMessage(), e);\r\n    }\r\n}",
    "nodes": 13,
    "edges": 14,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B5",
      "B3 : If($z3 \u003d\u003d false) → B4 | else → B5",
      "B5 : If($r8 !\u003d $r2) → B6 | else → B10",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B10",
      "B7 : If(r5 \u003d\u003d null) → B8 | else → B9",
      "B8 : If($z2 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  TreeNode\n  JavaType\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r1.isTypeOrSubTypeOf(class \"Lcom/fasterxml/jackson/core/TreeNode;\")\n  if ($z0 \u003d\u003d false) goto B3 else B5\n}",
      "B3 {\n  $r7 \u003d r0.getClass()\n  $z3 \u003d r1.isTypeOrSuperTypeOf($r7)\n  if ($z3 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r8 \u003d r0.asToken()\n  $r2 \u003d JsonToken VALUE_EMBEDDED_OBJECT\u003e\n  if ($r8 !\u003d $r2) goto B6 else B10\n}",
      "B6 {\n  $z1 \u003d POJONode\n  if ($z1 \u003d\u003d false) goto B7 else B10\n}",
      "B7 {\n  $r4 \u003d POJONode) r0\n  r5 \u003d $r4.getPojo()\n  if (r5 \u003d\u003d null) goto B8 else B9\n}",
      "B8 {\n  $r6 \u003d r5.getClass()\n  $z2 \u003d r1.isTypeOrSuperTypeOf($r6)\n  if ($z2 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $r13 \u003d r3.treeAsTokens(r0)\n  $r14 \u003d r3.readValue($r13, r1)\n  return\n}",
      "B11 {\n  $r12 :\u003d @caughtexception\n  throw $r12\n}",
      "B12 {\n  $r9 :\u003d @caughtexception\n  $r10 \u003d IllegalArgumentException\n  $r11 \u003d $r9.getMessage()\n  new IllegalArgumentException($r11, $r9)\n  throw $r10\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectMapper#treeAsTokens(...1)",
        "body": "{\r\n    _assertNotNull(\"n\", n);\r\n    return new TreeTraversingParser((JsonNode) n, this);\r\n}"
      },
      {
        "name": "ObjectMapper#readValue(...2)",
        "body": "{\r\n    _assertNotNull(\"p\", p);\r\n    return (T) _readValue(getDeserializationConfig(), p, _typeFactory.constructType(valueType));\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "valueToTree",
    "signature": "com.fasterxml.jackson.databind.JsonNode valueToTree(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    // [databind#2430]: `null` should become \"null node\":\r\n    if (fromValue \u003d\u003d null) {\r\n        return (T) getNodeFactory().nullNode();\r\n    }\r\n    // inlined \u0027writeValue\u0027 with minor changes:\r\n    // first: disable wrapping when writing\r\n    // [databind#4047] Fixes `SerializationFeature.WRAP_ROOT_VALUE` being ignored\r\n    final SerializationConfig config \u003d getSerializationConfig();\r\n    final DefaultSerializerProvider context \u003d _serializerProvider(config);\r\n    // Then create TokenBuffer to use as JsonGenerator\r\n    TokenBuffer buf \u003d context.bufferForValueConversion(this);\r\n    if (isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\r\n        buf \u003d buf.forceUseOfBigDecimal(true);\r\n    }\r\n    try {\r\n        context.serializeValue(buf, fromValue);\r\n        try (JsonParser p \u003d buf.asParser()) {\r\n            return readTree(p);\r\n        }\r\n    } catch (IOException e) {\r\n        // should not occur, no real i/o...\r\n        throw new IllegalArgumentException(e.getMessage(), e);\r\n    }\r\n}",
    "nodes": 12,
    "edges": 12,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($r6 \u003d\u003d null) → B5 | else → B6",
      "B7 : If($r6 \u003d\u003d null) → B8 | else → B10"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d r1.getNodeFactory()\n  $r9 \u003d $r8.nullNode()\n  return\n}",
      "B2 {\n  r2 \u003d r1.getSerializationConfig()\n  r3 \u003d r1._serializerProvider(r2)\n  r15 \u003d r3.bufferForValueConversion(r1)\n  $r4 \u003d DeserializationFeature USE_BIG_DECIMAL_FOR_FLOATS\u003e\n  $z0 \u003d r1.isEnabled($r4)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  r15 \u003d r15.forceUseOfBigDecimal(1)\n}",
      "B4 {\n  r3.serializeValue(r15, r0)\n  $r6 \u003d r15.asParser()\n  $r5 \u003d r1.readTree($r6)\n  $r7 \u003d JsonNode) $r5\n  if ($r6 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r6.close()\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $r14 :\u003d @caughtexception\n  if ($r6 \u003d\u003d null) goto B8 else B10\n}",
      "B8 {\n  $r6.close()\n  goto B10\n}",
      "B9 {\n  $r13 :\u003d @caughtexception\n  $r14.addSuppressed($r13)\n}",
      "B10 {\n  throw $r14\n}",
      "B11 {\n  $r10 :\u003d @caughtexception\n  $r11 \u003d IllegalArgumentException\n  $r12 \u003d $r10.getMessage()\n  new IllegalArgumentException($r12, $r10)\n  throw $r11\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectMapper#isEnabled(...1)",
        "body": "{\r\n    // ok to use either one, should be kept in sync\r\n    return _serializationConfig.isEnabled(f);\r\n}"
      },
      {
        "name": "ObjectMapper#getSerializationConfig(...0)",
        "body": "{\r\n    return _serializationConfig;\r\n}"
      },
      {
        "name": "ObjectMapper#_serializerProvider(...1)",
        "body": "{\r\n    return _serializerProvider.createInstance(config, _serializerFactory);\r\n}"
      },
      {
        "name": "ObjectMapper#readTree(...1)",
        "body": "{\r\n    _assertNotNull(\"p\", p);\r\n    // Must check for EOF here before calling readValue(), since that\u0027ll choke on it otherwise\r\n    DeserializationConfig cfg \u003d getDeserializationConfig();\r\n    JsonToken t \u003d p.currentToken();\r\n    if (t \u003d\u003d null) {\r\n        t \u003d p.nextToken();\r\n        if (t \u003d\u003d null) {\r\n            return null;\r\n        }\r\n    }\r\n    // NOTE! _readValue() will check for trailing tokens\r\n    JsonNode n \u003d (JsonNode) _readValue(cfg, p, constructType(JsonNode.class));\r\n    if (n \u003d\u003d null) {\r\n        n \u003d getNodeFactory().nullNode();\r\n    }\r\n    @SuppressWarnings(\"unchecked\")\r\n    T result \u003d (T) n;\r\n    return result;\r\n}"
      },
      {
        "name": "ObjectMapper#getNodeFactory(...0)",
        "body": "{\r\n    return _deserializationConfig.getNodeFactory();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "writerFor",
    "signature": "com.fasterxml.jackson.databind.ObjectWriter writerFor(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return _newWriter(getSerializationConfig(), ((rootType \u003d\u003d null) ? null : _typeFactory.constructType(rootType)), /*PrettyPrinter*/\r\n    null);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  Class\n  $r3 \u003d r0.getSerializationConfig()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d TypeFactory _typeFactory\u003e\n  $r5 \u003d $r2.constructType(r1)\n}",
      "B3 {\n  $r4 \u003d r0._newWriter($r3, $r5, null)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectMapper#getSerializationConfig(...0)",
        "body": "{\r\n    return _serializationConfig;\r\n}"
      },
      {
        "name": "ObjectMapper#_newWriter(...3)",
        "body": "{\r\n    return new ObjectWriter(this, config, rootType, pp);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "writerFor",
    "signature": "com.fasterxml.jackson.databind.ObjectWriter writerFor(com.fasterxml.jackson.core.type.TypeReference)",
    "visibility": "public",
    "body": "{\r\n    return _newWriter(getSerializationConfig(), ((rootType \u003d\u003d null) ? null : _typeFactory.constructType(rootType)), /*PrettyPrinter*/\r\n    null);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  TypeReference\n  $r3 \u003d r0.getSerializationConfig()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d TypeFactory _typeFactory\u003e\n  $r5 \u003d $r2.constructType(r1)\n}",
      "B3 {\n  $r4 \u003d r0._newWriter($r3, $r5, null)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectMapper#getSerializationConfig(...0)",
        "body": "{\r\n    return _serializationConfig;\r\n}"
      },
      {
        "name": "ObjectMapper#_newWriter(...3)",
        "body": "{\r\n    return new ObjectWriter(this, config, rootType, pp);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "writer",
    "signature": "com.fasterxml.jackson.databind.ObjectWriter writer(com.fasterxml.jackson.core.PrettyPrinter)",
    "visibility": "public",
    "body": "{\r\n    if (pp \u003d\u003d null) {\r\n        // need to use a marker to indicate explicit disabling of pp\r\n        pp \u003d ObjectWriter.NULL_PRETTY_PRINTER;\r\n    }\r\n    return _newWriter(getSerializationConfig(), /*root type*/\r\n    null, pp);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  PrettyPrinter\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r3 \u003d PrettyPrinter NULL_PRETTY_PRINTER\u003e\n}",
      "B2 {\n  $r1 \u003d r0.getSerializationConfig()\n  $r2 \u003d r0._newWriter($r1, null, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectMapper#getSerializationConfig(...0)",
        "body": "{\r\n    return _serializationConfig;\r\n}"
      },
      {
        "name": "ObjectMapper#_newWriter(...3)",
        "body": "{\r\n    return new ObjectWriter(this, config, rootType, pp);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "writerWithType",
    "signature": "com.fasterxml.jackson.databind.ObjectWriter writerWithType(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return _newWriter(getSerializationConfig(), // 15-Mar-2013, tatu: Important! Indicate that static typing is needed:\r\n    ((rootType \u003d\u003d null) ? null : _typeFactory.constructType(rootType)), /*PrettyPrinter*/\r\n    null);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  Class\n  $r3 \u003d r0.getSerializationConfig()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d TypeFactory _typeFactory\u003e\n  $r5 \u003d $r2.constructType(r1)\n}",
      "B3 {\n  $r4 \u003d r0._newWriter($r3, $r5, null)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectMapper#getSerializationConfig(...0)",
        "body": "{\r\n    return _serializationConfig;\r\n}"
      },
      {
        "name": "ObjectMapper#_newWriter(...3)",
        "body": "{\r\n    return new ObjectWriter(this, config, rootType, pp);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "writerWithType",
    "signature": "com.fasterxml.jackson.databind.ObjectWriter writerWithType(com.fasterxml.jackson.core.type.TypeReference)",
    "visibility": "public",
    "body": "{\r\n    return _newWriter(getSerializationConfig(), // 15-Mar-2013, tatu: Important! Indicate that static typing is needed:\r\n    ((rootType \u003d\u003d null) ? null : _typeFactory.constructType(rootType)), /*PrettyPrinter*/\r\n    null);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  TypeReference\n  $r3 \u003d r0.getSerializationConfig()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d TypeFactory _typeFactory\u003e\n  $r5 \u003d $r2.constructType(r1)\n}",
      "B3 {\n  $r4 \u003d r0._newWriter($r3, $r5, null)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectMapper#getSerializationConfig(...0)",
        "body": "{\r\n    return _serializationConfig;\r\n}"
      },
      {
        "name": "ObjectMapper#_newWriter(...3)",
        "body": "{\r\n    return new ObjectWriter(this, config, rootType, pp);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "readerForUpdating",
    "signature": "com.fasterxml.jackson.databind.ObjectReader readerForUpdating(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    JavaType t \u003d (valueToUpdate \u003d\u003d null) ? null : _typeFactory.constructType(valueToUpdate.getClass());\r\n    return _newReader(getDeserializationConfig(), t, valueToUpdate, null, _injectableValues);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d TypeFactory _typeFactory\u003e\n  $r3 \u003d r0.getClass()\n  $r7 \u003d $r2.constructType($r3)\n}",
      "B3 {\n  $r5 \u003d r1.getDeserializationConfig()\n  $r4 \u003d InjectableValues _injectableValues\u003e\n  $r6 \u003d r1._newReader($r5, $r7, r0, null, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectMapper#_newReader(...5)",
        "body": "{\r\n    return new ObjectReader(this, config, valueType, valueToUpdate, schema, injectableValues);\r\n}"
      },
      {
        "name": "ObjectMapper#getDeserializationConfig(...0)",
        "body": "{\r\n    return _deserializationConfig;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "readerFor",
    "signature": "com.fasterxml.jackson.databind.ObjectReader readerFor(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    JavaType t \u003d (type \u003d\u003d null) ? null : _typeFactory.constructType(type);\r\n    return _newReader(getDeserializationConfig(), t, null, null, _injectableValues);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  Class\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d TypeFactory _typeFactory\u003e\n  $r6 \u003d $r2.constructType(r0)\n}",
      "B3 {\n  $r4 \u003d r1.getDeserializationConfig()\n  $r3 \u003d InjectableValues _injectableValues\u003e\n  $r5 \u003d r1._newReader($r4, $r6, null, null, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectMapper#_newReader(...5)",
        "body": "{\r\n    return new ObjectReader(this, config, valueType, valueToUpdate, schema, injectableValues);\r\n}"
      },
      {
        "name": "ObjectMapper#getDeserializationConfig(...0)",
        "body": "{\r\n    return _deserializationConfig;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "updateValue",
    "signature": "java.lang.Object updateValue(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B8",
      "B1 : If(r1 \u003d\u003d null) → B2 | else → B8",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  Object\n  Object\n  r13 \u003d r0\n  if (r0 \u003d\u003d null) goto B1 else B8\n}",
      "B1 {\n  if (r1 \u003d\u003d null) goto B2 else B8\n}",
      "B2 {\n  $r4 \u003d r2.getSerializationConfig()\n  $r3 \u003d SerializationFeature WRAP_ROOT_VALUE\u003e\n  r5 \u003d $r4.without($r3)\n  r6 \u003d r2._serializerProvider(r5)\n  r14 \u003d r6.bufferForValueConversion(r2)\n  $r7 \u003d DeserializationFeature USE_BIG_DECIMAL_FOR_FLOATS\u003e\n  $z0 \u003d r2.isEnabled($r7)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  r14 \u003d r14.forceUseOfBigDecimal(1)\n}",
      "B4 {\n  r6.serializeValue(r14, r1)\n  $r9 \u003d r14.asParser()\n  $r8 \u003d r2.readerForUpdating(r0)\n  r13 \u003d $r8.readValue($r9)\n  $r9.close()\n  goto B8\n}",
      "B5 {\n  $r10 :\u003d @caughtexception\n  $z1 \u003d JsonMappingException\n  if ($z1 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r12 \u003d JsonMappingException) $r10\n  throw $r12\n}",
      "B7 {\n  $r11 \u003d JsonMappingException.fromUnexpectedIOE($r10)\n  throw $r11\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B8",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectMapper",
    "methodName": "acceptJsonFormatVisitor",
    "signature": "void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper)",
    "visibility": "public",
    "body": "{\r\n    if (type \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"type must be provided\");\r\n    }\r\n    _serializerProvider(getSerializationConfig()).acceptJsonFormatVisitor(type, visitor);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectMapper\n  JavaType\n  JsonFormatVisitorWrapper\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"type must be provided\")\n  throw $r5\n}",
      "B2 {\n  $r2 \u003d r1.getSerializationConfig()\n  $r4 \u003d r1._serializerProvider($r2)\n  $r4.acceptJsonFormatVisitor(r0, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectMapper#getSerializationConfig(...0)",
        "body": "{\r\n    return _serializationConfig;\r\n}"
      },
      {
        "name": "ObjectMapper#_serializerProvider(...1)",
        "body": "{\r\n    return _serializerProvider.createInstance(config, _serializerFactory);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.ObjectReader \u0027with\u0027(com.fasterxml.jackson.databind.InjectableValues)",
    "visibility": "public",
    "body": "{\r\n    if (_injectableValues \u003d\u003d injectableValues) {\r\n        return this;\r\n    }\r\n    return _new(this, _config, _valueType, _rootDeserializer, _valueToUpdate, _schema, injectableValues, _dataFormatReaders);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  InjectableValues\n  $r2 \u003d InjectableValues _injectableValues\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r8 \u003d DeserializationConfig _config\u003e\n  $r7 \u003d JavaType _valueType\u003e\n  $r6 \u003d JsonDeserializer _rootDeserializer\u003e\n  $r5 \u003d Object _valueToUpdate\u003e\n  $r4 \u003d FormatSchema _schema\u003e\n  $r3 \u003d DataFormatReaders _dataFormatReaders\u003e\n  $r9 \u003d r0._new(r0, $r8, $r7, $r6, $r5, $r4, r1, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#_new(...8)",
        "body": "{\r\n    return new ObjectReader(base, config, valueType, rootDeser, valueToUpdate, schema, injectableValues, dataFormatReaders);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.ObjectReader \u0027with\u0027(com.fasterxml.jackson.core.JsonFactory)",
    "visibility": "public",
    "body": "{\r\n    if (f \u003d\u003d _parserFactory) {\r\n        return this;\r\n    }\r\n    ObjectReader r \u003d _new(this, f);\r\n    // Also, try re-linking, if possible...\r\n    if (f.getCodec() \u003d\u003d null) {\r\n        f.setCodec(r);\r\n    }\r\n    return r;\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2",
      "B2 : If($r4 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  JsonFactory\n  $r2 \u003d JsonFactory _parserFactory\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r3 \u003d r1._new(r1, r0)\n  $r4 \u003d r0.getCodec()\n  if ($r4 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  r0.setCodec(r3)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#_new(...2)",
        "body": "{\r\n    return new ObjectReader(base, f);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.ObjectReader \u0027with\u0027(com.fasterxml.jackson.core.FormatSchema)",
    "visibility": "public",
    "body": "{\r\n    if (_schema \u003d\u003d schema) {\r\n        return this;\r\n    }\r\n    _verifySchemaType(schema);\r\n    return _new(this, _config, _valueType, _rootDeserializer, _valueToUpdate, schema, _injectableValues, _dataFormatReaders);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  FormatSchema\n  $r2 \u003d FormatSchema _schema\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r0._verifySchemaType(r1)\n  $r8 \u003d DeserializationConfig _config\u003e\n  $r7 \u003d JavaType _valueType\u003e\n  $r6 \u003d JsonDeserializer _rootDeserializer\u003e\n  $r5 \u003d Object _valueToUpdate\u003e\n  $r4 \u003d InjectableValues _injectableValues\u003e\n  $r3 \u003d DataFormatReaders _dataFormatReaders\u003e\n  $r9 \u003d r0._new(r0, $r8, $r7, $r6, $r5, r1, $r4, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#_verifySchemaType(...1)",
        "body": "{\r\n    if (schema !\u003d null) {\r\n        if (!_parserFactory.canUseSchema(schema)) {\r\n            throw new IllegalArgumentException(\"Cannot use FormatSchema of type \" + schema.getClass().getName() + \" for format \" + _parserFactory.getFormatName());\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "ObjectReader#_new(...8)",
        "body": "{\r\n    return new ObjectReader(base, config, valueType, rootDeser, valueToUpdate, schema, injectableValues, dataFormatReaders);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "forType",
    "signature": "com.fasterxml.jackson.databind.ObjectReader forType(com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    if (valueType !\u003d null \u0026\u0026 valueType.equals(_valueType)) {\r\n        return this;\r\n    }\r\n    JsonDeserializer\u003cObject\u003e rootDeser \u003d _prefetchRootDeserializer(valueType);\r\n    // type is stored here, no need to make a copy of config\r\n    DataFormatReaders det \u003d _dataFormatReaders;\r\n    if (det !\u003d null) {\r\n        det \u003d det.withType(valueType);\r\n    }\r\n    return _new(this, _config, valueType, rootDeser, _valueToUpdate, _schema, _injectableValues, det);\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3",
      "B3 : If($r9 \u003d\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  JavaType\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r7 \u003d JavaType _valueType\u003e\n  $z0 \u003d r0.equals($r7)\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r8 \u003d r1._prefetchRootDeserializer(r0)\n  $r9 \u003d DataFormatReaders _dataFormatReaders\u003e\n  r10 \u003d $r9\n  if ($r9 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  r10 \u003d $r9.withType(r0)\n}",
      "B5 {\n  $r5 \u003d DeserializationConfig _config\u003e\n  $r4 \u003d Object _valueToUpdate\u003e\n  $r3 \u003d FormatSchema _schema\u003e\n  $r2 \u003d InjectableValues _injectableValues\u003e\n  $r6 \u003d r1._new(r1, $r5, r0, $r8, $r4, $r3, $r2, r10)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#_new(...8)",
        "body": "{\r\n    return new ObjectReader(base, config, valueType, rootDeser, valueToUpdate, schema, injectableValues, dataFormatReaders);\r\n}"
      },
      {
        "name": "ObjectReader#_prefetchRootDeserializer(...1)",
        "body": "{\r\n    if ((valueType \u003d\u003d null) || !_config.isEnabled(DeserializationFeature.EAGER_DESERIALIZER_FETCH)) {\r\n        return null;\r\n    }\r\n    // already cached?\r\n    JsonDeserializer\u003cObject\u003e deser \u003d _rootDeserializers.get(valueType);\r\n    if (deser \u003d\u003d null) {\r\n        try {\r\n            // If not, need to resolve; for which we need a temporary context as well:\r\n            DeserializationContext ctxt \u003d createDummyDeserializationContext();\r\n            deser \u003d ctxt.findRootValueDeserializer(valueType);\r\n            if (deser !\u003d null) {\r\n                _rootDeserializers.put(valueType, deser);\r\n            }\r\n            return deser;\r\n        } catch (JacksonException e) {\r\n            // need to swallow?\r\n        }\r\n    }\r\n    return deser;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "withValueToUpdate",
    "signature": "com.fasterxml.jackson.databind.ObjectReader withValueToUpdate(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d _valueToUpdate)\r\n        return this;\r\n    if (value \u003d\u003d null) {\r\n        // 18-Oct-2016, tatu: Actually, should be allowed, to remove value\r\n        //   to update, if any\r\n        return _new(this, _config, _valueType, _rootDeserializer, null, _schema, _injectableValues, _dataFormatReaders);\r\n    }\r\n    JavaType t;\r\n    /* no real benefit from pre-fetching, as updating readers are much\r\n         * less likely to be reused, and value type may also be forced\r\n         * with a later chained call...\r\n         */\r\n    if (_valueType \u003d\u003d null) {\r\n        t \u003d _config.constructType(value.getClass());\r\n    } else {\r\n        t \u003d _valueType;\r\n    }\r\n    return _new(this, _config, t, _rootDeserializer, value, _schema, _injectableValues, _dataFormatReaders);\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($r3 !\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  Object\n  $r2 \u003d Object _valueToUpdate\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r17 \u003d DeserializationConfig _config\u003e\n  $r16 \u003d JavaType _valueType\u003e\n  $r15 \u003d JsonDeserializer _rootDeserializer\u003e\n  $r14 \u003d FormatSchema _schema\u003e\n  $r13 \u003d InjectableValues _injectableValues\u003e\n  $r12 \u003d DataFormatReaders _dataFormatReaders\u003e\n  $r18 \u003d r1._new(r1, $r17, $r16, $r15, null, $r14, $r13, $r12)\n  return\n}",
      "B4 {\n  $r3 \u003d JavaType _valueType\u003e\n  if ($r3 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r10 \u003d DeserializationConfig _config\u003e\n  $r11 \u003d r0.getClass()\n  r19 \u003d $r10.constructType($r11)\n  goto B7\n}",
      "B6 {\n  r19 \u003d JavaType _valueType\u003e\n}",
      "B7 {\n  $r8 \u003d DeserializationConfig _config\u003e\n  $r7 \u003d JsonDeserializer _rootDeserializer\u003e\n  $r6 \u003d FormatSchema _schema\u003e\n  $r5 \u003d InjectableValues _injectableValues\u003e\n  $r4 \u003d DataFormatReaders _dataFormatReaders\u003e\n  $r9 \u003d r1._new(r1, $r8, r19, $r7, r0, $r6, $r5, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#_new(...8)",
        "body": "{\r\n    return new ObjectReader(base, config, valueType, rootDeser, valueToUpdate, schema, injectableValues, dataFormatReaders);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "readValue",
    "signature": "java.lang.Object readValue(java.io.InputStream)",
    "visibility": "public",
    "body": "{\r\n    if (_dataFormatReaders !\u003d null) {\r\n        return (T) _detectBindAndClose(_dataFormatReaders.findFormat(src), false);\r\n    }\r\n    return (T) _bindAndClose(_considerFilter(createParser(src), false));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  InputStream\n  $r1 \u003d DataFormatReaders _dataFormatReaders\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d DataFormatReaders _dataFormatReaders\u003e\n  $r7 \u003d $r6.findFormat(r2)\n  $r8 \u003d r0._detectBindAndClose($r7, 0)\n  return\n}",
      "B2 {\n  $r3 \u003d r0.createParser(r2)\n  $r4 \u003d r0._considerFilter($r3, 0)\n  $r5 \u003d r0._bindAndClose($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#createParser(...1)",
        "body": "{\r\n    _assertNotNull(\"src\", src);\r\n    return _config.initialize(_parserFactory.createParser(src), _schema);\r\n}"
      },
      {
        "name": "ObjectReader#_bindAndClose(...1)",
        "body": "{\r\n    try (JsonParser p \u003d p0) {\r\n        Object result;\r\n        final DefaultDeserializationContext ctxt \u003d createDeserializationContext(p);\r\n        JsonToken t \u003d _initForReading(ctxt, p);\r\n        if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n            if (_valueToUpdate \u003d\u003d null) {\r\n                result \u003d _findRootDeserializer(ctxt).getNullValue(ctxt);\r\n            } else {\r\n                result \u003d _valueToUpdate;\r\n            }\r\n        } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\r\n            result \u003d _valueToUpdate;\r\n        } else if (t \u003d\u003d JsonToken.NOT_AVAILABLE) {\r\n            // 28-Jan-2025, tatu: [databind#4932] Need to handle this case too\r\n            result \u003d _valueToUpdate;\r\n        } else {\r\n            result \u003d ctxt.readRootValue(p, _valueType, _findRootDeserializer(ctxt), _valueToUpdate);\r\n        }\r\n        // No need to consume the token as parser gets closed anyway\r\n        if (_config.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) {\r\n            _verifyNoTrailingTokens(p, ctxt, _valueType);\r\n        }\r\n        return result;\r\n    }\r\n}"
      },
      {
        "name": "ObjectReader#_detectBindAndClose(...2)",
        "body": "{\r\n    if (!match.hasMatch()) {\r\n        _reportUnkownFormat(_dataFormatReaders, match);\r\n    }\r\n    JsonParser p \u003d match.createParserWithMatch();\r\n    // One more thing: we Own the input stream now; and while it\u0027s\r\n    // not super clean way to do it, we must ensure closure so:\r\n    if (forceClosing) {\r\n        p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE);\r\n    }\r\n    // important: use matching ObjectReader (may not be \u0027this\u0027)\r\n    return match.getReader()._bindAndClose(p);\r\n}"
      },
      {
        "name": "ObjectReader#_considerFilter(...2)",
        "body": "{\r\n    // 26-Mar-2016, tatu: Need to allow multiple-matches at least if we have\r\n    //    have a multiple-value read (that is, \"readValues()\").\r\n    return ((_filter \u003d\u003d null) || FilteringParserDelegate.class.isInstance(p)) ? p : new FilteringParserDelegate(p, _filter, Inclusion.ONLY_INCLUDE_ALL, multiValue);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "readValue",
    "signature": "java.lang.Object readValue(java.io.Reader)",
    "visibility": "public",
    "body": "{\r\n    if (_dataFormatReaders !\u003d null) {\r\n        _reportUndetectableSource(src);\r\n    }\r\n    return (T) _bindAndClose(_considerFilter(createParser(src), false));\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  Reader\n  $r1 \u003d DataFormatReaders _dataFormatReaders\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r0._reportUndetectableSource(r2)\n}",
      "B2 {\n  $r3 \u003d r0.createParser(r2)\n  $r4 \u003d r0._considerFilter($r3, 0)\n  $r5 \u003d r0._bindAndClose($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#createParser(...1)",
        "body": "{\r\n    _assertNotNull(\"src\", src);\r\n    return _config.initialize(_parserFactory.createParser(src), _schema);\r\n}"
      },
      {
        "name": "ObjectReader#_bindAndClose(...1)",
        "body": "{\r\n    try (JsonParser p \u003d p0) {\r\n        Object result;\r\n        final DefaultDeserializationContext ctxt \u003d createDeserializationContext(p);\r\n        JsonToken t \u003d _initForReading(ctxt, p);\r\n        if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n            if (_valueToUpdate \u003d\u003d null) {\r\n                result \u003d _findRootDeserializer(ctxt).getNullValue(ctxt);\r\n            } else {\r\n                result \u003d _valueToUpdate;\r\n            }\r\n        } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\r\n            result \u003d _valueToUpdate;\r\n        } else if (t \u003d\u003d JsonToken.NOT_AVAILABLE) {\r\n            // 28-Jan-2025, tatu: [databind#4932] Need to handle this case too\r\n            result \u003d _valueToUpdate;\r\n        } else {\r\n            result \u003d ctxt.readRootValue(p, _valueType, _findRootDeserializer(ctxt), _valueToUpdate);\r\n        }\r\n        // No need to consume the token as parser gets closed anyway\r\n        if (_config.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) {\r\n            _verifyNoTrailingTokens(p, ctxt, _valueType);\r\n        }\r\n        return result;\r\n    }\r\n}"
      },
      {
        "name": "ObjectReader#_reportUndetectableSource(...1)",
        "body": "{\r\n    // 17-Aug-2015, tatu: Unfortunately, no parser/generator available so:\r\n    throw new JsonParseException(null, \"Cannot use source of type \" + src.getClass().getName() + \" with format auto-detection: must be byte- not char-based\");\r\n}"
      },
      {
        "name": "ObjectReader#_considerFilter(...2)",
        "body": "{\r\n    // 26-Mar-2016, tatu: Need to allow multiple-matches at least if we have\r\n    //    have a multiple-value read (that is, \"readValues()\").\r\n    return ((_filter \u003d\u003d null) || FilteringParserDelegate.class.isInstance(p)) ? p : new FilteringParserDelegate(p, _filter, Inclusion.ONLY_INCLUDE_ALL, multiValue);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "readValue",
    "signature": "java.lang.Object readValue(byte[])",
    "visibility": "public",
    "body": "{\r\n    if (_dataFormatReaders !\u003d null) {\r\n        return (T) _detectBindAndClose(content, 0, content.length);\r\n    }\r\n    return (T) _bindAndClose(_considerFilter(createParser(content), false));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  r2 :\u003d @parameter0: byte[]\n  $r1 \u003d DataFormatReaders _dataFormatReaders\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d lengthof r2\n  $r6 \u003d r0._detectBindAndClose(r2, 0, $i0)\n  return\n}",
      "B2 {\n  $r3 \u003d r0.createParser(r2)\n  $r4 \u003d r0._considerFilter($r3, 0)\n  $r5 \u003d r0._bindAndClose($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#createParser(...1)",
        "body": "{\r\n    _assertNotNull(\"src\", src);\r\n    return _config.initialize(_parserFactory.createParser(src), _schema);\r\n}"
      },
      {
        "name": "ObjectReader#_bindAndClose(...1)",
        "body": "{\r\n    try (JsonParser p \u003d p0) {\r\n        Object result;\r\n        final DefaultDeserializationContext ctxt \u003d createDeserializationContext(p);\r\n        JsonToken t \u003d _initForReading(ctxt, p);\r\n        if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n            if (_valueToUpdate \u003d\u003d null) {\r\n                result \u003d _findRootDeserializer(ctxt).getNullValue(ctxt);\r\n            } else {\r\n                result \u003d _valueToUpdate;\r\n            }\r\n        } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\r\n            result \u003d _valueToUpdate;\r\n        } else if (t \u003d\u003d JsonToken.NOT_AVAILABLE) {\r\n            // 28-Jan-2025, tatu: [databind#4932] Need to handle this case too\r\n            result \u003d _valueToUpdate;\r\n        } else {\r\n            result \u003d ctxt.readRootValue(p, _valueType, _findRootDeserializer(ctxt), _valueToUpdate);\r\n        }\r\n        // No need to consume the token as parser gets closed anyway\r\n        if (_config.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) {\r\n            _verifyNoTrailingTokens(p, ctxt, _valueType);\r\n        }\r\n        return result;\r\n    }\r\n}"
      },
      {
        "name": "ObjectReader#_detectBindAndClose(...3)",
        "body": "{\r\n    DataFormatReaders.Match match \u003d _dataFormatReaders.findFormat(src, offset, length);\r\n    if (!match.hasMatch()) {\r\n        _reportUnkownFormat(_dataFormatReaders, match);\r\n    }\r\n    JsonParser p \u003d match.createParserWithMatch();\r\n    return match.getReader()._bindAndClose(p);\r\n}"
      },
      {
        "name": "ObjectReader#_considerFilter(...2)",
        "body": "{\r\n    // 26-Mar-2016, tatu: Need to allow multiple-matches at least if we have\r\n    //    have a multiple-value read (that is, \"readValues()\").\r\n    return ((_filter \u003d\u003d null) || FilteringParserDelegate.class.isInstance(p)) ? p : new FilteringParserDelegate(p, _filter, Inclusion.ONLY_INCLUDE_ALL, multiValue);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "readValue",
    "signature": "java.lang.Object readValue(byte[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (_dataFormatReaders !\u003d null) {\r\n        return (T) _detectBindAndClose(buffer, offset, length);\r\n    }\r\n    return (T) _bindAndClose(_considerFilter(createParser(buffer, offset, length), false));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  r2 :\u003d @parameter0: byte[]\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  $r1 \u003d DataFormatReaders _dataFormatReaders\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d r0._detectBindAndClose(r2, i0, i1)\n  return\n}",
      "B2 {\n  $r3 \u003d r0.createParser(r2, i0, i1)\n  $r4 \u003d r0._considerFilter($r3, 0)\n  $r5 \u003d r0._bindAndClose($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#_bindAndClose(...1)",
        "body": "{\r\n    try (JsonParser p \u003d p0) {\r\n        Object result;\r\n        final DefaultDeserializationContext ctxt \u003d createDeserializationContext(p);\r\n        JsonToken t \u003d _initForReading(ctxt, p);\r\n        if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n            if (_valueToUpdate \u003d\u003d null) {\r\n                result \u003d _findRootDeserializer(ctxt).getNullValue(ctxt);\r\n            } else {\r\n                result \u003d _valueToUpdate;\r\n            }\r\n        } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\r\n            result \u003d _valueToUpdate;\r\n        } else if (t \u003d\u003d JsonToken.NOT_AVAILABLE) {\r\n            // 28-Jan-2025, tatu: [databind#4932] Need to handle this case too\r\n            result \u003d _valueToUpdate;\r\n        } else {\r\n            result \u003d ctxt.readRootValue(p, _valueType, _findRootDeserializer(ctxt), _valueToUpdate);\r\n        }\r\n        // No need to consume the token as parser gets closed anyway\r\n        if (_config.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) {\r\n            _verifyNoTrailingTokens(p, ctxt, _valueType);\r\n        }\r\n        return result;\r\n    }\r\n}"
      },
      {
        "name": "ObjectReader#_detectBindAndClose(...3)",
        "body": "{\r\n    DataFormatReaders.Match match \u003d _dataFormatReaders.findFormat(src, offset, length);\r\n    if (!match.hasMatch()) {\r\n        _reportUnkownFormat(_dataFormatReaders, match);\r\n    }\r\n    JsonParser p \u003d match.createParserWithMatch();\r\n    return match.getReader()._bindAndClose(p);\r\n}"
      },
      {
        "name": "ObjectReader#createParser(...3)",
        "body": "{\r\n    _assertNotNull(\"content\", content);\r\n    return _config.initialize(_parserFactory.createParser(content, offset, len), _schema);\r\n}"
      },
      {
        "name": "ObjectReader#_considerFilter(...2)",
        "body": "{\r\n    // 26-Mar-2016, tatu: Need to allow multiple-matches at least if we have\r\n    //    have a multiple-value read (that is, \"readValues()\").\r\n    return ((_filter \u003d\u003d null) || FilteringParserDelegate.class.isInstance(p)) ? p : new FilteringParserDelegate(p, _filter, Inclusion.ONLY_INCLUDE_ALL, multiValue);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "readValue",
    "signature": "java.lang.Object readValue(java.io.File)",
    "visibility": "public",
    "body": "{\r\n    if (_dataFormatReaders !\u003d null) {\r\n        return (T) _detectBindAndClose(_dataFormatReaders.findFormat(_inputStream(src)), true);\r\n    }\r\n    return (T) _bindAndClose(_considerFilter(createParser(src), false));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  File\n  $r1 \u003d DataFormatReaders _dataFormatReaders\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d DataFormatReaders _dataFormatReaders\u003e\n  $r7 \u003d r0._inputStream(r2)\n  $r8 \u003d $r6.findFormat($r7)\n  $r9 \u003d r0._detectBindAndClose($r8, 1)\n  return\n}",
      "B2 {\n  $r3 \u003d r0.createParser(r2)\n  $r4 \u003d r0._considerFilter($r3, 0)\n  $r5 \u003d r0._bindAndClose($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#createParser(...1)",
        "body": "{\r\n    _assertNotNull(\"src\", src);\r\n    return _config.initialize(_parserFactory.createParser(src), _schema);\r\n}"
      },
      {
        "name": "ObjectReader#_bindAndClose(...1)",
        "body": "{\r\n    try (JsonParser p \u003d p0) {\r\n        Object result;\r\n        final DefaultDeserializationContext ctxt \u003d createDeserializationContext(p);\r\n        JsonToken t \u003d _initForReading(ctxt, p);\r\n        if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n            if (_valueToUpdate \u003d\u003d null) {\r\n                result \u003d _findRootDeserializer(ctxt).getNullValue(ctxt);\r\n            } else {\r\n                result \u003d _valueToUpdate;\r\n            }\r\n        } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\r\n            result \u003d _valueToUpdate;\r\n        } else if (t \u003d\u003d JsonToken.NOT_AVAILABLE) {\r\n            // 28-Jan-2025, tatu: [databind#4932] Need to handle this case too\r\n            result \u003d _valueToUpdate;\r\n        } else {\r\n            result \u003d ctxt.readRootValue(p, _valueType, _findRootDeserializer(ctxt), _valueToUpdate);\r\n        }\r\n        // No need to consume the token as parser gets closed anyway\r\n        if (_config.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) {\r\n            _verifyNoTrailingTokens(p, ctxt, _valueType);\r\n        }\r\n        return result;\r\n    }\r\n}"
      },
      {
        "name": "ObjectReader#_inputStream(...1)",
        "body": "{\r\n    return src.openStream();\r\n}"
      },
      {
        "name": "ObjectReader#_detectBindAndClose(...2)",
        "body": "{\r\n    if (!match.hasMatch()) {\r\n        _reportUnkownFormat(_dataFormatReaders, match);\r\n    }\r\n    JsonParser p \u003d match.createParserWithMatch();\r\n    // One more thing: we Own the input stream now; and while it\u0027s\r\n    // not super clean way to do it, we must ensure closure so:\r\n    if (forceClosing) {\r\n        p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE);\r\n    }\r\n    // important: use matching ObjectReader (may not be \u0027this\u0027)\r\n    return match.getReader()._bindAndClose(p);\r\n}"
      },
      {
        "name": "ObjectReader#_considerFilter(...2)",
        "body": "{\r\n    // 26-Mar-2016, tatu: Need to allow multiple-matches at least if we have\r\n    //    have a multiple-value read (that is, \"readValues()\").\r\n    return ((_filter \u003d\u003d null) || FilteringParserDelegate.class.isInstance(p)) ? p : new FilteringParserDelegate(p, _filter, Inclusion.ONLY_INCLUDE_ALL, multiValue);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "readValue",
    "signature": "java.lang.Object readValue(java.net.URL)",
    "visibility": "public",
    "body": "{\r\n    if (_dataFormatReaders !\u003d null) {\r\n        return (T) _detectBindAndClose(_dataFormatReaders.findFormat(_inputStream(src)), true);\r\n    }\r\n    return (T) _bindAndClose(_considerFilter(createParser(src), false));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  URL\n  $r1 \u003d DataFormatReaders _dataFormatReaders\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d DataFormatReaders _dataFormatReaders\u003e\n  $r7 \u003d r0._inputStream(r2)\n  $r8 \u003d $r6.findFormat($r7)\n  $r9 \u003d r0._detectBindAndClose($r8, 1)\n  return\n}",
      "B2 {\n  $r3 \u003d r0.createParser(r2)\n  $r4 \u003d r0._considerFilter($r3, 0)\n  $r5 \u003d r0._bindAndClose($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#createParser(...1)",
        "body": "{\r\n    _assertNotNull(\"src\", src);\r\n    return _config.initialize(_parserFactory.createParser(src), _schema);\r\n}"
      },
      {
        "name": "ObjectReader#_bindAndClose(...1)",
        "body": "{\r\n    try (JsonParser p \u003d p0) {\r\n        Object result;\r\n        final DefaultDeserializationContext ctxt \u003d createDeserializationContext(p);\r\n        JsonToken t \u003d _initForReading(ctxt, p);\r\n        if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n            if (_valueToUpdate \u003d\u003d null) {\r\n                result \u003d _findRootDeserializer(ctxt).getNullValue(ctxt);\r\n            } else {\r\n                result \u003d _valueToUpdate;\r\n            }\r\n        } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\r\n            result \u003d _valueToUpdate;\r\n        } else if (t \u003d\u003d JsonToken.NOT_AVAILABLE) {\r\n            // 28-Jan-2025, tatu: [databind#4932] Need to handle this case too\r\n            result \u003d _valueToUpdate;\r\n        } else {\r\n            result \u003d ctxt.readRootValue(p, _valueType, _findRootDeserializer(ctxt), _valueToUpdate);\r\n        }\r\n        // No need to consume the token as parser gets closed anyway\r\n        if (_config.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) {\r\n            _verifyNoTrailingTokens(p, ctxt, _valueType);\r\n        }\r\n        return result;\r\n    }\r\n}"
      },
      {
        "name": "ObjectReader#_inputStream(...1)",
        "body": "{\r\n    return src.openStream();\r\n}"
      },
      {
        "name": "ObjectReader#_detectBindAndClose(...2)",
        "body": "{\r\n    if (!match.hasMatch()) {\r\n        _reportUnkownFormat(_dataFormatReaders, match);\r\n    }\r\n    JsonParser p \u003d match.createParserWithMatch();\r\n    // One more thing: we Own the input stream now; and while it\u0027s\r\n    // not super clean way to do it, we must ensure closure so:\r\n    if (forceClosing) {\r\n        p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE);\r\n    }\r\n    // important: use matching ObjectReader (may not be \u0027this\u0027)\r\n    return match.getReader()._bindAndClose(p);\r\n}"
      },
      {
        "name": "ObjectReader#_considerFilter(...2)",
        "body": "{\r\n    // 26-Mar-2016, tatu: Need to allow multiple-matches at least if we have\r\n    //    have a multiple-value read (that is, \"readValues()\").\r\n    return ((_filter \u003d\u003d null) || FilteringParserDelegate.class.isInstance(p)) ? p : new FilteringParserDelegate(p, _filter, Inclusion.ONLY_INCLUDE_ALL, multiValue);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "readValue",
    "signature": "java.lang.Object readValue(com.fasterxml.jackson.databind.JsonNode)",
    "visibility": "public",
    "body": "{\r\n    _assertNotNull(\"content\", content);\r\n    if (_dataFormatReaders !\u003d null) {\r\n        _reportUndetectableSource(content);\r\n    }\r\n    return (T) _bindAndClose(_considerFilter(treeAsTokens(content), false));\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  JsonNode\n  r0._assertNotNull(\"content\", r1)\n  $r2 \u003d DataFormatReaders _dataFormatReaders\u003e\n  if ($r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r0._reportUndetectableSource(r1)\n}",
      "B2 {\n  $r3 \u003d r0.treeAsTokens(r1)\n  $r4 \u003d r0._considerFilter($r3, 0)\n  $r5 \u003d r0._bindAndClose($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#_bindAndClose(...1)",
        "body": "{\r\n    try (JsonParser p \u003d p0) {\r\n        Object result;\r\n        final DefaultDeserializationContext ctxt \u003d createDeserializationContext(p);\r\n        JsonToken t \u003d _initForReading(ctxt, p);\r\n        if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n            if (_valueToUpdate \u003d\u003d null) {\r\n                result \u003d _findRootDeserializer(ctxt).getNullValue(ctxt);\r\n            } else {\r\n                result \u003d _valueToUpdate;\r\n            }\r\n        } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\r\n            result \u003d _valueToUpdate;\r\n        } else if (t \u003d\u003d JsonToken.NOT_AVAILABLE) {\r\n            // 28-Jan-2025, tatu: [databind#4932] Need to handle this case too\r\n            result \u003d _valueToUpdate;\r\n        } else {\r\n            result \u003d ctxt.readRootValue(p, _valueType, _findRootDeserializer(ctxt), _valueToUpdate);\r\n        }\r\n        // No need to consume the token as parser gets closed anyway\r\n        if (_config.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) {\r\n            _verifyNoTrailingTokens(p, ctxt, _valueType);\r\n        }\r\n        return result;\r\n    }\r\n}"
      },
      {
        "name": "ObjectReader#treeAsTokens(...1)",
        "body": "{\r\n    _assertNotNull(\"n\", n);\r\n    // 05-Dec-2017, tatu: Important! Must clear \"valueToUpdate\" since we do not\r\n    //    want update to be applied here, as a side effect\r\n    ObjectReader codec \u003d withValueToUpdate(null);\r\n    return new TreeTraversingParser((JsonNode) n, codec);\r\n}"
      },
      {
        "name": "ObjectReader#_reportUndetectableSource(...1)",
        "body": "{\r\n    // 17-Aug-2015, tatu: Unfortunately, no parser/generator available so:\r\n    throw new JsonParseException(null, \"Cannot use source of type \" + src.getClass().getName() + \" with format auto-detection: must be byte- not char-based\");\r\n}"
      },
      {
        "name": "ObjectReader#_assertNotNull(...2)",
        "body": "{\r\n    if (src \u003d\u003d null) {\r\n        throw new IllegalArgumentException(String.format(\"argument \\\"%s\\\" is null\", paramName));\r\n    }\r\n}"
      },
      {
        "name": "ObjectReader#_considerFilter(...2)",
        "body": "{\r\n    // 26-Mar-2016, tatu: Need to allow multiple-matches at least if we have\r\n    //    have a multiple-value read (that is, \"readValues()\").\r\n    return ((_filter \u003d\u003d null) || FilteringParserDelegate.class.isInstance(p)) ? p : new FilteringParserDelegate(p, _filter, Inclusion.ONLY_INCLUDE_ALL, multiValue);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "readValue",
    "signature": "java.lang.Object readValue(java.io.DataInput)",
    "visibility": "public",
    "body": "{\r\n    if (_dataFormatReaders !\u003d null) {\r\n        _reportUndetectableSource(src);\r\n    }\r\n    return (T) _bindAndClose(_considerFilter(createParser(src), false));\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  DataInput\n  $r1 \u003d DataFormatReaders _dataFormatReaders\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r0._reportUndetectableSource(r2)\n}",
      "B2 {\n  $r3 \u003d r0.createParser(r2)\n  $r4 \u003d r0._considerFilter($r3, 0)\n  $r5 \u003d r0._bindAndClose($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#createParser(...1)",
        "body": "{\r\n    _assertNotNull(\"src\", src);\r\n    return _config.initialize(_parserFactory.createParser(src), _schema);\r\n}"
      },
      {
        "name": "ObjectReader#_bindAndClose(...1)",
        "body": "{\r\n    try (JsonParser p \u003d p0) {\r\n        Object result;\r\n        final DefaultDeserializationContext ctxt \u003d createDeserializationContext(p);\r\n        JsonToken t \u003d _initForReading(ctxt, p);\r\n        if (t \u003d\u003d JsonToken.VALUE_NULL) {\r\n            if (_valueToUpdate \u003d\u003d null) {\r\n                result \u003d _findRootDeserializer(ctxt).getNullValue(ctxt);\r\n            } else {\r\n                result \u003d _valueToUpdate;\r\n            }\r\n        } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\r\n            result \u003d _valueToUpdate;\r\n        } else if (t \u003d\u003d JsonToken.NOT_AVAILABLE) {\r\n            // 28-Jan-2025, tatu: [databind#4932] Need to handle this case too\r\n            result \u003d _valueToUpdate;\r\n        } else {\r\n            result \u003d ctxt.readRootValue(p, _valueType, _findRootDeserializer(ctxt), _valueToUpdate);\r\n        }\r\n        // No need to consume the token as parser gets closed anyway\r\n        if (_config.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) {\r\n            _verifyNoTrailingTokens(p, ctxt, _valueType);\r\n        }\r\n        return result;\r\n    }\r\n}"
      },
      {
        "name": "ObjectReader#_reportUndetectableSource(...1)",
        "body": "{\r\n    // 17-Aug-2015, tatu: Unfortunately, no parser/generator available so:\r\n    throw new JsonParseException(null, \"Cannot use source of type \" + src.getClass().getName() + \" with format auto-detection: must be byte- not char-based\");\r\n}"
      },
      {
        "name": "ObjectReader#_considerFilter(...2)",
        "body": "{\r\n    // 26-Mar-2016, tatu: Need to allow multiple-matches at least if we have\r\n    //    have a multiple-value read (that is, \"readValues()\").\r\n    return ((_filter \u003d\u003d null) || FilteringParserDelegate.class.isInstance(p)) ? p : new FilteringParserDelegate(p, _filter, Inclusion.ONLY_INCLUDE_ALL, multiValue);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "readTree",
    "signature": "com.fasterxml.jackson.databind.JsonNode readTree(java.io.InputStream)",
    "visibility": "public",
    "body": "{\r\n    if (_dataFormatReaders !\u003d null) {\r\n        return _detectBindAndCloseAsTree(src);\r\n    }\r\n    return _bindAndCloseAsTree(_considerFilter(createParser(src), false));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  InputStream\n  $r1 \u003d DataFormatReaders _dataFormatReaders\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d r0._detectBindAndCloseAsTree(r2)\n  return\n}",
      "B2 {\n  $r3 \u003d r0.createParser(r2)\n  $r4 \u003d r0._considerFilter($r3, 0)\n  $r5 \u003d r0._bindAndCloseAsTree($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#_detectBindAndCloseAsTree(...1)",
        "body": "{\r\n    DataFormatReaders.Match match \u003d _dataFormatReaders.findFormat(in);\r\n    if (!match.hasMatch()) {\r\n        _reportUnkownFormat(_dataFormatReaders, match);\r\n    }\r\n    JsonParser p \u003d match.createParserWithMatch();\r\n    p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE);\r\n    return match.getReader()._bindAndCloseAsTree(p);\r\n}"
      },
      {
        "name": "ObjectReader#_bindAndCloseAsTree(...1)",
        "body": "{\r\n    try (JsonParser p \u003d p0) {\r\n        return _bindAsTree(p);\r\n    }\r\n}"
      },
      {
        "name": "ObjectReader#createParser(...1)",
        "body": "{\r\n    _assertNotNull(\"src\", src);\r\n    return _config.initialize(_parserFactory.createParser(src), _schema);\r\n}"
      },
      {
        "name": "ObjectReader#_considerFilter(...2)",
        "body": "{\r\n    // 26-Mar-2016, tatu: Need to allow multiple-matches at least if we have\r\n    //    have a multiple-value read (that is, \"readValues()\").\r\n    return ((_filter \u003d\u003d null) || FilteringParserDelegate.class.isInstance(p)) ? p : new FilteringParserDelegate(p, _filter, Inclusion.ONLY_INCLUDE_ALL, multiValue);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "readTree",
    "signature": "com.fasterxml.jackson.databind.JsonNode readTree(java.io.Reader)",
    "visibility": "public",
    "body": "{\r\n    if (_dataFormatReaders !\u003d null) {\r\n        _reportUndetectableSource(src);\r\n    }\r\n    return _bindAndCloseAsTree(_considerFilter(createParser(src), false));\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  Reader\n  $r1 \u003d DataFormatReaders _dataFormatReaders\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r0._reportUndetectableSource(r2)\n}",
      "B2 {\n  $r3 \u003d r0.createParser(r2)\n  $r4 \u003d r0._considerFilter($r3, 0)\n  $r5 \u003d r0._bindAndCloseAsTree($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#_bindAndCloseAsTree(...1)",
        "body": "{\r\n    try (JsonParser p \u003d p0) {\r\n        return _bindAsTree(p);\r\n    }\r\n}"
      },
      {
        "name": "ObjectReader#createParser(...1)",
        "body": "{\r\n    _assertNotNull(\"src\", src);\r\n    return _config.initialize(_parserFactory.createParser(src), _schema);\r\n}"
      },
      {
        "name": "ObjectReader#_reportUndetectableSource(...1)",
        "body": "{\r\n    // 17-Aug-2015, tatu: Unfortunately, no parser/generator available so:\r\n    throw new JsonParseException(null, \"Cannot use source of type \" + src.getClass().getName() + \" with format auto-detection: must be byte- not char-based\");\r\n}"
      },
      {
        "name": "ObjectReader#_considerFilter(...2)",
        "body": "{\r\n    // 26-Mar-2016, tatu: Need to allow multiple-matches at least if we have\r\n    //    have a multiple-value read (that is, \"readValues()\").\r\n    return ((_filter \u003d\u003d null) || FilteringParserDelegate.class.isInstance(p)) ? p : new FilteringParserDelegate(p, _filter, Inclusion.ONLY_INCLUDE_ALL, multiValue);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "readTree",
    "signature": "com.fasterxml.jackson.databind.JsonNode readTree(byte[])",
    "visibility": "public",
    "body": "{\r\n    _assertNotNull(\"json\", json);\r\n    if (_dataFormatReaders !\u003d null) {\r\n        _reportUndetectableSource(json);\r\n    }\r\n    return _bindAndCloseAsTree(_considerFilter(createParser(json), false));\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  r1 :\u003d @parameter0: byte[]\n  r0._assertNotNull(\"json\", r1)\n  $r2 \u003d DataFormatReaders _dataFormatReaders\u003e\n  if ($r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r0._reportUndetectableSource(r1)\n}",
      "B2 {\n  $r3 \u003d r0.createParser(r1)\n  $r4 \u003d r0._considerFilter($r3, 0)\n  $r5 \u003d r0._bindAndCloseAsTree($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#_bindAndCloseAsTree(...1)",
        "body": "{\r\n    try (JsonParser p \u003d p0) {\r\n        return _bindAsTree(p);\r\n    }\r\n}"
      },
      {
        "name": "ObjectReader#createParser(...1)",
        "body": "{\r\n    _assertNotNull(\"src\", src);\r\n    return _config.initialize(_parserFactory.createParser(src), _schema);\r\n}"
      },
      {
        "name": "ObjectReader#_reportUndetectableSource(...1)",
        "body": "{\r\n    // 17-Aug-2015, tatu: Unfortunately, no parser/generator available so:\r\n    throw new JsonParseException(null, \"Cannot use source of type \" + src.getClass().getName() + \" with format auto-detection: must be byte- not char-based\");\r\n}"
      },
      {
        "name": "ObjectReader#_assertNotNull(...2)",
        "body": "{\r\n    if (src \u003d\u003d null) {\r\n        throw new IllegalArgumentException(String.format(\"argument \\\"%s\\\" is null\", paramName));\r\n    }\r\n}"
      },
      {
        "name": "ObjectReader#_considerFilter(...2)",
        "body": "{\r\n    // 26-Mar-2016, tatu: Need to allow multiple-matches at least if we have\r\n    //    have a multiple-value read (that is, \"readValues()\").\r\n    return ((_filter \u003d\u003d null) || FilteringParserDelegate.class.isInstance(p)) ? p : new FilteringParserDelegate(p, _filter, Inclusion.ONLY_INCLUDE_ALL, multiValue);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "readTree",
    "signature": "com.fasterxml.jackson.databind.JsonNode readTree(byte[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (_dataFormatReaders !\u003d null) {\r\n        _reportUndetectableSource(json);\r\n    }\r\n    return _bindAndCloseAsTree(_considerFilter(createParser(json, offset, len), false));\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  r2 :\u003d @parameter0: byte[]\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  $r1 \u003d DataFormatReaders _dataFormatReaders\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r0._reportUndetectableSource(r2)\n}",
      "B2 {\n  $r3 \u003d r0.createParser(r2, i0, i1)\n  $r4 \u003d r0._considerFilter($r3, 0)\n  $r5 \u003d r0._bindAndCloseAsTree($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#_bindAndCloseAsTree(...1)",
        "body": "{\r\n    try (JsonParser p \u003d p0) {\r\n        return _bindAsTree(p);\r\n    }\r\n}"
      },
      {
        "name": "ObjectReader#_reportUndetectableSource(...1)",
        "body": "{\r\n    // 17-Aug-2015, tatu: Unfortunately, no parser/generator available so:\r\n    throw new JsonParseException(null, \"Cannot use source of type \" + src.getClass().getName() + \" with format auto-detection: must be byte- not char-based\");\r\n}"
      },
      {
        "name": "ObjectReader#createParser(...3)",
        "body": "{\r\n    _assertNotNull(\"content\", content);\r\n    return _config.initialize(_parserFactory.createParser(content, offset, len), _schema);\r\n}"
      },
      {
        "name": "ObjectReader#_considerFilter(...2)",
        "body": "{\r\n    // 26-Mar-2016, tatu: Need to allow multiple-matches at least if we have\r\n    //    have a multiple-value read (that is, \"readValues()\").\r\n    return ((_filter \u003d\u003d null) || FilteringParserDelegate.class.isInstance(p)) ? p : new FilteringParserDelegate(p, _filter, Inclusion.ONLY_INCLUDE_ALL, multiValue);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "readTree",
    "signature": "com.fasterxml.jackson.databind.JsonNode readTree(java.io.DataInput)",
    "visibility": "public",
    "body": "{\r\n    if (_dataFormatReaders !\u003d null) {\r\n        _reportUndetectableSource(src);\r\n    }\r\n    return _bindAndCloseAsTree(_considerFilter(createParser(src), false));\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  DataInput\n  $r1 \u003d DataFormatReaders _dataFormatReaders\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r0._reportUndetectableSource(r2)\n}",
      "B2 {\n  $r3 \u003d r0.createParser(r2)\n  $r4 \u003d r0._considerFilter($r3, 0)\n  $r5 \u003d r0._bindAndCloseAsTree($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#_bindAndCloseAsTree(...1)",
        "body": "{\r\n    try (JsonParser p \u003d p0) {\r\n        return _bindAsTree(p);\r\n    }\r\n}"
      },
      {
        "name": "ObjectReader#createParser(...1)",
        "body": "{\r\n    _assertNotNull(\"src\", src);\r\n    return _config.initialize(_parserFactory.createParser(src), _schema);\r\n}"
      },
      {
        "name": "ObjectReader#_reportUndetectableSource(...1)",
        "body": "{\r\n    // 17-Aug-2015, tatu: Unfortunately, no parser/generator available so:\r\n    throw new JsonParseException(null, \"Cannot use source of type \" + src.getClass().getName() + \" with format auto-detection: must be byte- not char-based\");\r\n}"
      },
      {
        "name": "ObjectReader#_considerFilter(...2)",
        "body": "{\r\n    // 26-Mar-2016, tatu: Need to allow multiple-matches at least if we have\r\n    //    have a multiple-value read (that is, \"readValues()\").\r\n    return ((_filter \u003d\u003d null) || FilteringParserDelegate.class.isInstance(p)) ? p : new FilteringParserDelegate(p, _filter, Inclusion.ONLY_INCLUDE_ALL, multiValue);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "readValues",
    "signature": "com.fasterxml.jackson.databind.MappingIterator readValues(java.io.InputStream)",
    "visibility": "public",
    "body": "{\r\n    if (_dataFormatReaders !\u003d null) {\r\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\r\n    }\r\n    return _bindAndReadValues(_considerFilter(createParser(src), true));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  InputStream\n  $r1 \u003d DataFormatReaders _dataFormatReaders\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d DataFormatReaders _dataFormatReaders\u003e\n  $r7 \u003d $r6.findFormat(r2)\n  $r8 \u003d r0._detectBindAndReadValues($r7, 0)\n  return\n}",
      "B2 {\n  $r3 \u003d r0.createParser(r2)\n  $r4 \u003d r0._considerFilter($r3, 1)\n  $r5 \u003d r0._bindAndReadValues($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#_detectBindAndReadValues(...2)",
        "body": "{\r\n    if (!match.hasMatch()) {\r\n        _reportUnkownFormat(_dataFormatReaders, match);\r\n    }\r\n    JsonParser p \u003d match.createParserWithMatch();\r\n    // One more thing: we Own the input stream now; and while it\u0027s\r\n    // not super clean way to do it, we must ensure closure so:\r\n    if (forceClosing) {\r\n        p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE);\r\n    }\r\n    // important: use matching ObjectReader (may not be \u0027this\u0027)\r\n    return match.getReader()._bindAndReadValues(p);\r\n}"
      },
      {
        "name": "ObjectReader#createParser(...1)",
        "body": "{\r\n    _assertNotNull(\"src\", src);\r\n    return _config.initialize(_parserFactory.createParser(src), _schema);\r\n}"
      },
      {
        "name": "ObjectReader#_bindAndReadValues(...1)",
        "body": "{\r\n    DeserializationContext ctxt \u003d createDeserializationContext(p);\r\n    _initForMultiRead(ctxt, p);\r\n    p.nextToken();\r\n    return _newIterator(p, ctxt, _findRootDeserializer(ctxt), true);\r\n}"
      },
      {
        "name": "ObjectReader#_considerFilter(...2)",
        "body": "{\r\n    // 26-Mar-2016, tatu: Need to allow multiple-matches at least if we have\r\n    //    have a multiple-value read (that is, \"readValues()\").\r\n    return ((_filter \u003d\u003d null) || FilteringParserDelegate.class.isInstance(p)) ? p : new FilteringParserDelegate(p, _filter, Inclusion.ONLY_INCLUDE_ALL, multiValue);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "readValues",
    "signature": "com.fasterxml.jackson.databind.MappingIterator readValues(java.io.Reader)",
    "visibility": "public",
    "body": "{\r\n    if (_dataFormatReaders !\u003d null) {\r\n        _reportUndetectableSource(src);\r\n    }\r\n    JsonParser p \u003d _considerFilter(createParser(src), true);\r\n    DeserializationContext ctxt \u003d createDeserializationContext(p);\r\n    _initForMultiRead(ctxt, p);\r\n    p.nextToken();\r\n    return _newIterator(p, ctxt, _findRootDeserializer(ctxt), true);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  Reader\n  $r1 \u003d DataFormatReaders _dataFormatReaders\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r0._reportUndetectableSource(r2)\n}",
      "B2 {\n  $r3 \u003d r0.createParser(r2)\n  $r6 \u003d r0._considerFilter($r3, 1)\n  $r7 \u003d r0.createDeserializationContext($r6)\n  r0._initForMultiRead($r7, $r6)\n  $r6.nextToken()\n  $r4 \u003d r0._findRootDeserializer($r7)\n  $r5 \u003d r0._newIterator($r6, $r7, $r4, 1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#createDeserializationContext(...1)",
        "body": "{\r\n    return _context.createInstance(_config, p, _injectableValues);\r\n}"
      },
      {
        "name": "ObjectReader#_findRootDeserializer(...1)",
        "body": "{\r\n    if (_rootDeserializer !\u003d null) {\r\n        return _rootDeserializer;\r\n    }\r\n    // Sanity check: must have actual type...\r\n    JavaType t \u003d _valueType;\r\n    if (t \u003d\u003d null) {\r\n        ctxt.reportBadDefinition((JavaType) null, \"No value type configured for ObjectReader\");\r\n    }\r\n    // First: have we already seen it?\r\n    JsonDeserializer\u003cObject\u003e deser \u003d _rootDeserializers.get(t);\r\n    if (deser !\u003d null) {\r\n        return deser;\r\n    }\r\n    // Nope: need to ask provider to resolve it\r\n    deser \u003d ctxt.findRootValueDeserializer(t);\r\n    if (deser \u003d\u003d null) {\r\n        // can this happen?\r\n        ctxt.reportBadDefinition(t, \"Cannot find a deserializer for type \" + t);\r\n    }\r\n    _rootDeserializers.put(t, deser);\r\n    return deser;\r\n}"
      },
      {
        "name": "ObjectReader#createParser(...1)",
        "body": "{\r\n    _assertNotNull(\"src\", src);\r\n    return _config.initialize(_parserFactory.createParser(src), _schema);\r\n}"
      },
      {
        "name": "ObjectReader#_initForMultiRead(...2)",
        "body": "{\r\n    _config.initialize(p, _schema);\r\n}"
      },
      {
        "name": "ObjectReader#_reportUndetectableSource(...1)",
        "body": "{\r\n    // 17-Aug-2015, tatu: Unfortunately, no parser/generator available so:\r\n    throw new JsonParseException(null, \"Cannot use source of type \" + src.getClass().getName() + \" with format auto-detection: must be byte- not char-based\");\r\n}"
      },
      {
        "name": "ObjectReader#_considerFilter(...2)",
        "body": "{\r\n    // 26-Mar-2016, tatu: Need to allow multiple-matches at least if we have\r\n    //    have a multiple-value read (that is, \"readValues()\").\r\n    return ((_filter \u003d\u003d null) || FilteringParserDelegate.class.isInstance(p)) ? p : new FilteringParserDelegate(p, _filter, Inclusion.ONLY_INCLUDE_ALL, multiValue);\r\n}"
      },
      {
        "name": "ObjectReader#_newIterator(...4)",
        "body": "{\r\n    return new MappingIterator\u003cT\u003e(_valueType, p, ctxt, deser, parserManaged, _valueToUpdate);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "readValues",
    "signature": "com.fasterxml.jackson.databind.MappingIterator readValues(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (_dataFormatReaders !\u003d null) {\r\n        _reportUndetectableSource(json);\r\n    }\r\n    JsonParser p \u003d _considerFilter(createParser(json), true);\r\n    DeserializationContext ctxt \u003d createDeserializationContext(p);\r\n    _initForMultiRead(ctxt, p);\r\n    p.nextToken();\r\n    return _newIterator(p, ctxt, _findRootDeserializer(ctxt), true);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  String\n  $r1 \u003d DataFormatReaders _dataFormatReaders\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r0._reportUndetectableSource(r2)\n}",
      "B2 {\n  $r3 \u003d r0.createParser(r2)\n  $r6 \u003d r0._considerFilter($r3, 1)\n  $r7 \u003d r0.createDeserializationContext($r6)\n  r0._initForMultiRead($r7, $r6)\n  $r6.nextToken()\n  $r4 \u003d r0._findRootDeserializer($r7)\n  $r5 \u003d r0._newIterator($r6, $r7, $r4, 1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#createDeserializationContext(...1)",
        "body": "{\r\n    return _context.createInstance(_config, p, _injectableValues);\r\n}"
      },
      {
        "name": "ObjectReader#_findRootDeserializer(...1)",
        "body": "{\r\n    if (_rootDeserializer !\u003d null) {\r\n        return _rootDeserializer;\r\n    }\r\n    // Sanity check: must have actual type...\r\n    JavaType t \u003d _valueType;\r\n    if (t \u003d\u003d null) {\r\n        ctxt.reportBadDefinition((JavaType) null, \"No value type configured for ObjectReader\");\r\n    }\r\n    // First: have we already seen it?\r\n    JsonDeserializer\u003cObject\u003e deser \u003d _rootDeserializers.get(t);\r\n    if (deser !\u003d null) {\r\n        return deser;\r\n    }\r\n    // Nope: need to ask provider to resolve it\r\n    deser \u003d ctxt.findRootValueDeserializer(t);\r\n    if (deser \u003d\u003d null) {\r\n        // can this happen?\r\n        ctxt.reportBadDefinition(t, \"Cannot find a deserializer for type \" + t);\r\n    }\r\n    _rootDeserializers.put(t, deser);\r\n    return deser;\r\n}"
      },
      {
        "name": "ObjectReader#createParser(...1)",
        "body": "{\r\n    _assertNotNull(\"src\", src);\r\n    return _config.initialize(_parserFactory.createParser(src), _schema);\r\n}"
      },
      {
        "name": "ObjectReader#_initForMultiRead(...2)",
        "body": "{\r\n    _config.initialize(p, _schema);\r\n}"
      },
      {
        "name": "ObjectReader#_reportUndetectableSource(...1)",
        "body": "{\r\n    // 17-Aug-2015, tatu: Unfortunately, no parser/generator available so:\r\n    throw new JsonParseException(null, \"Cannot use source of type \" + src.getClass().getName() + \" with format auto-detection: must be byte- not char-based\");\r\n}"
      },
      {
        "name": "ObjectReader#_considerFilter(...2)",
        "body": "{\r\n    // 26-Mar-2016, tatu: Need to allow multiple-matches at least if we have\r\n    //    have a multiple-value read (that is, \"readValues()\").\r\n    return ((_filter \u003d\u003d null) || FilteringParserDelegate.class.isInstance(p)) ? p : new FilteringParserDelegate(p, _filter, Inclusion.ONLY_INCLUDE_ALL, multiValue);\r\n}"
      },
      {
        "name": "ObjectReader#_newIterator(...4)",
        "body": "{\r\n    return new MappingIterator\u003cT\u003e(_valueType, p, ctxt, deser, parserManaged, _valueToUpdate);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "readValues",
    "signature": "com.fasterxml.jackson.databind.MappingIterator readValues(byte[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (_dataFormatReaders !\u003d null) {\r\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);\r\n    }\r\n    return _bindAndReadValues(_considerFilter(createParser(src, offset, length), true));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  r2 :\u003d @parameter0: byte[]\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  $r1 \u003d DataFormatReaders _dataFormatReaders\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d DataFormatReaders _dataFormatReaders\u003e\n  $r7 \u003d $r6.findFormat(r2, i0, i1)\n  $r8 \u003d r0._detectBindAndReadValues($r7, 0)\n  return\n}",
      "B2 {\n  $r3 \u003d r0.createParser(r2, i0, i1)\n  $r4 \u003d r0._considerFilter($r3, 1)\n  $r5 \u003d r0._bindAndReadValues($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#_detectBindAndReadValues(...2)",
        "body": "{\r\n    if (!match.hasMatch()) {\r\n        _reportUnkownFormat(_dataFormatReaders, match);\r\n    }\r\n    JsonParser p \u003d match.createParserWithMatch();\r\n    // One more thing: we Own the input stream now; and while it\u0027s\r\n    // not super clean way to do it, we must ensure closure so:\r\n    if (forceClosing) {\r\n        p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE);\r\n    }\r\n    // important: use matching ObjectReader (may not be \u0027this\u0027)\r\n    return match.getReader()._bindAndReadValues(p);\r\n}"
      },
      {
        "name": "ObjectReader#_bindAndReadValues(...1)",
        "body": "{\r\n    DeserializationContext ctxt \u003d createDeserializationContext(p);\r\n    _initForMultiRead(ctxt, p);\r\n    p.nextToken();\r\n    return _newIterator(p, ctxt, _findRootDeserializer(ctxt), true);\r\n}"
      },
      {
        "name": "ObjectReader#createParser(...3)",
        "body": "{\r\n    _assertNotNull(\"content\", content);\r\n    return _config.initialize(_parserFactory.createParser(content, offset, len), _schema);\r\n}"
      },
      {
        "name": "ObjectReader#_considerFilter(...2)",
        "body": "{\r\n    // 26-Mar-2016, tatu: Need to allow multiple-matches at least if we have\r\n    //    have a multiple-value read (that is, \"readValues()\").\r\n    return ((_filter \u003d\u003d null) || FilteringParserDelegate.class.isInstance(p)) ? p : new FilteringParserDelegate(p, _filter, Inclusion.ONLY_INCLUDE_ALL, multiValue);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "readValues",
    "signature": "com.fasterxml.jackson.databind.MappingIterator readValues(java.io.File)",
    "visibility": "public",
    "body": "{\r\n    if (_dataFormatReaders !\u003d null) {\r\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(_inputStream(src)), false);\r\n    }\r\n    return _bindAndReadValues(_considerFilter(createParser(src), true));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  File\n  $r1 \u003d DataFormatReaders _dataFormatReaders\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d DataFormatReaders _dataFormatReaders\u003e\n  $r7 \u003d r0._inputStream(r2)\n  $r8 \u003d $r6.findFormat($r7)\n  $r9 \u003d r0._detectBindAndReadValues($r8, 0)\n  return\n}",
      "B2 {\n  $r3 \u003d r0.createParser(r2)\n  $r4 \u003d r0._considerFilter($r3, 1)\n  $r5 \u003d r0._bindAndReadValues($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#_detectBindAndReadValues(...2)",
        "body": "{\r\n    if (!match.hasMatch()) {\r\n        _reportUnkownFormat(_dataFormatReaders, match);\r\n    }\r\n    JsonParser p \u003d match.createParserWithMatch();\r\n    // One more thing: we Own the input stream now; and while it\u0027s\r\n    // not super clean way to do it, we must ensure closure so:\r\n    if (forceClosing) {\r\n        p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE);\r\n    }\r\n    // important: use matching ObjectReader (may not be \u0027this\u0027)\r\n    return match.getReader()._bindAndReadValues(p);\r\n}"
      },
      {
        "name": "ObjectReader#createParser(...1)",
        "body": "{\r\n    _assertNotNull(\"src\", src);\r\n    return _config.initialize(_parserFactory.createParser(src), _schema);\r\n}"
      },
      {
        "name": "ObjectReader#_bindAndReadValues(...1)",
        "body": "{\r\n    DeserializationContext ctxt \u003d createDeserializationContext(p);\r\n    _initForMultiRead(ctxt, p);\r\n    p.nextToken();\r\n    return _newIterator(p, ctxt, _findRootDeserializer(ctxt), true);\r\n}"
      },
      {
        "name": "ObjectReader#_inputStream(...1)",
        "body": "{\r\n    return src.openStream();\r\n}"
      },
      {
        "name": "ObjectReader#_considerFilter(...2)",
        "body": "{\r\n    // 26-Mar-2016, tatu: Need to allow multiple-matches at least if we have\r\n    //    have a multiple-value read (that is, \"readValues()\").\r\n    return ((_filter \u003d\u003d null) || FilteringParserDelegate.class.isInstance(p)) ? p : new FilteringParserDelegate(p, _filter, Inclusion.ONLY_INCLUDE_ALL, multiValue);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "readValues",
    "signature": "com.fasterxml.jackson.databind.MappingIterator readValues(java.net.URL)",
    "visibility": "public",
    "body": "{\r\n    if (_dataFormatReaders !\u003d null) {\r\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(_inputStream(src)), true);\r\n    }\r\n    return _bindAndReadValues(_considerFilter(createParser(src), true));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  URL\n  $r1 \u003d DataFormatReaders _dataFormatReaders\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d DataFormatReaders _dataFormatReaders\u003e\n  $r7 \u003d r0._inputStream(r2)\n  $r8 \u003d $r6.findFormat($r7)\n  $r9 \u003d r0._detectBindAndReadValues($r8, 1)\n  return\n}",
      "B2 {\n  $r3 \u003d r0.createParser(r2)\n  $r4 \u003d r0._considerFilter($r3, 1)\n  $r5 \u003d r0._bindAndReadValues($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#_detectBindAndReadValues(...2)",
        "body": "{\r\n    if (!match.hasMatch()) {\r\n        _reportUnkownFormat(_dataFormatReaders, match);\r\n    }\r\n    JsonParser p \u003d match.createParserWithMatch();\r\n    // One more thing: we Own the input stream now; and while it\u0027s\r\n    // not super clean way to do it, we must ensure closure so:\r\n    if (forceClosing) {\r\n        p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE);\r\n    }\r\n    // important: use matching ObjectReader (may not be \u0027this\u0027)\r\n    return match.getReader()._bindAndReadValues(p);\r\n}"
      },
      {
        "name": "ObjectReader#createParser(...1)",
        "body": "{\r\n    _assertNotNull(\"src\", src);\r\n    return _config.initialize(_parserFactory.createParser(src), _schema);\r\n}"
      },
      {
        "name": "ObjectReader#_bindAndReadValues(...1)",
        "body": "{\r\n    DeserializationContext ctxt \u003d createDeserializationContext(p);\r\n    _initForMultiRead(ctxt, p);\r\n    p.nextToken();\r\n    return _newIterator(p, ctxt, _findRootDeserializer(ctxt), true);\r\n}"
      },
      {
        "name": "ObjectReader#_inputStream(...1)",
        "body": "{\r\n    return src.openStream();\r\n}"
      },
      {
        "name": "ObjectReader#_considerFilter(...2)",
        "body": "{\r\n    // 26-Mar-2016, tatu: Need to allow multiple-matches at least if we have\r\n    //    have a multiple-value read (that is, \"readValues()\").\r\n    return ((_filter \u003d\u003d null) || FilteringParserDelegate.class.isInstance(p)) ? p : new FilteringParserDelegate(p, _filter, Inclusion.ONLY_INCLUDE_ALL, multiValue);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectReader",
    "methodName": "readValues",
    "signature": "com.fasterxml.jackson.databind.MappingIterator readValues(java.io.DataInput)",
    "visibility": "public",
    "body": "{\r\n    if (_dataFormatReaders !\u003d null) {\r\n        _reportUndetectableSource(src);\r\n    }\r\n    return _bindAndReadValues(_considerFilter(createParser(src), true));\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectReader\n  DataInput\n  $r1 \u003d DataFormatReaders _dataFormatReaders\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r0._reportUndetectableSource(r2)\n}",
      "B2 {\n  $r3 \u003d r0.createParser(r2)\n  $r4 \u003d r0._considerFilter($r3, 1)\n  $r5 \u003d r0._bindAndReadValues($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectReader#createParser(...1)",
        "body": "{\r\n    _assertNotNull(\"src\", src);\r\n    return _config.initialize(_parserFactory.createParser(src), _schema);\r\n}"
      },
      {
        "name": "ObjectReader#_bindAndReadValues(...1)",
        "body": "{\r\n    DeserializationContext ctxt \u003d createDeserializationContext(p);\r\n    _initForMultiRead(ctxt, p);\r\n    p.nextToken();\r\n    return _newIterator(p, ctxt, _findRootDeserializer(ctxt), true);\r\n}"
      },
      {
        "name": "ObjectReader#_reportUndetectableSource(...1)",
        "body": "{\r\n    // 17-Aug-2015, tatu: Unfortunately, no parser/generator available so:\r\n    throw new JsonParseException(null, \"Cannot use source of type \" + src.getClass().getName() + \" with format auto-detection: must be byte- not char-based\");\r\n}"
      },
      {
        "name": "ObjectReader#_considerFilter(...2)",
        "body": "{\r\n    // 26-Mar-2016, tatu: Need to allow multiple-matches at least if we have\r\n    //    have a multiple-value read (that is, \"readValues()\").\r\n    return ((_filter \u003d\u003d null) || FilteringParserDelegate.class.isInstance(p)) ? p : new FilteringParserDelegate(p, _filter, Inclusion.ONLY_INCLUDE_ALL, multiValue);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectWriter",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.ObjectWriter \u0027with\u0027(com.fasterxml.jackson.databind.ser.FilterProvider)",
    "visibility": "public",
    "body": "{\r\n    if (filterProvider \u003d\u003d _config.getFilterProvider()) {\r\n        return this;\r\n    }\r\n    return _new(this, _config.withFilters(filterProvider));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectWriter\n  FilterProvider\n  $r2 \u003d SerializationConfig _config\u003e\n  $r3 \u003d $r2.getFilterProvider()\n  if (r0 !\u003d $r3) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d SerializationConfig _config\u003e\n  $r5 \u003d $r4.withFilters(r0)\n  $r6 \u003d r1._new(r1, $r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectWriter#_new(...2)",
        "body": "{\r\n    return new ObjectWriter(base, f);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectWriter",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.ObjectWriter \u0027with\u0027(com.fasterxml.jackson.core.JsonFactory)",
    "visibility": "public",
    "body": "{\r\n    return (f \u003d\u003d _generatorFactory) ? this : _new(this, f);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectWriter\n  JsonFactory\n  $r2 \u003d JsonFactory _generatorFactory\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r1._new(r1, r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectWriter#_new(...2)",
        "body": "{\r\n    return new ObjectWriter(base, f);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ObjectWriter",
    "methodName": "writeValue",
    "signature": "void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    _assertNotNull(\"g\", g);\r\n    _configureGenerator(g);\r\n    if (_config.isEnabled(SerializationFeature.CLOSE_CLOSEABLE) \u0026\u0026 (value instanceof Closeable)) {\r\n        Closeable toClose \u003d (Closeable) value;\r\n        try {\r\n            _prefetch.serialize(g, value, _serializerProvider());\r\n            if (_config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) {\r\n                g.flush();\r\n            }\r\n        } catch (Exception e) {\r\n            ClassUtil.closeOnFailAndThrowAsIOE(null, toClose, e);\r\n            return;\r\n        }\r\n        toClose.close();\r\n    } else {\r\n        _prefetch.serialize(g, value, _serializerProvider());\r\n        if (_config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) {\r\n            g.flush();\r\n        }\r\n    }\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B7",
      "B1 : If($z2 \u003d\u003d false) → B2 | else → B7",
      "B2 : If($z3 \u003d\u003d false) → B3 | else → B4",
      "B7 : If($z1 \u003d\u003d false) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  ObjectWriter\n  JsonGenerator\n  Object\n  r0._assertNotNull(\"g\", r1)\n  r0._configureGenerator(r1)\n  $r3 \u003d SerializationConfig _config\u003e\n  $r2 \u003d SerializationFeature CLOSE_CLOSEABLE\u003e\n  $z0 \u003d $r3.isEnabled($r2)\n  if ($z0 \u003d\u003d false) goto B1 else B7\n}",
      "B1 {\n  $z2 \u003d Closeable\n  if ($z2 \u003d\u003d false) goto B2 else B7\n}",
      "B2 {\n  r9 \u003d Closeable) r4\n  $r10 \u003d ObjectWriter$Prefetch _prefetch\u003e\n  $r11 \u003d r0._serializerProvider()\n  $r10.serialize(r1, r4, $r11)\n  $r13 \u003d SerializationConfig _config\u003e\n  $r12 \u003d SerializationFeature FLUSH_AFTER_WRITE_VALUE\u003e\n  $z3 \u003d $r13.isEnabled($r12)\n  if ($z3 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  r1.flush()\n}",
      "B4 {\n  goto B6\n}",
      "B5 {\n  $r14 :\u003d @caughtexception\n  ClassUtil.closeOnFailAndThrowAsIOE(null, r9, $r14)\n  return\n}",
      "B6 {\n  r9.close()\n  goto B9\n}",
      "B7 {\n  $r5 \u003d ObjectWriter$Prefetch _prefetch\u003e\n  $r6 \u003d r0._serializerProvider()\n  $r5.serialize(r1, r4, $r6)\n  $r8 \u003d SerializationConfig _config\u003e\n  $r7 \u003d SerializationFeature FLUSH_AFTER_WRITE_VALUE\u003e\n  $z1 \u003d $r8.isEnabled($r7)\n  if ($z1 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  r1.flush()\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B7",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectWriter#_serializerProvider(...0)",
        "body": "{\r\n    return _serializerProvider.createInstance(_config, _serializerFactory);\r\n}"
      },
      {
        "name": "ObjectWriter#_configureGenerator(...1)",
        "body": "{\r\n    // order is slightly significant: both may change PrettyPrinter\r\n    // settings.\r\n    // since 2.5\r\n    _config.initialize(gen);\r\n    _generatorSettings.initialize(gen);\r\n    return gen;\r\n}"
      },
      {
        "name": "ObjectWriter#_assertNotNull(...2)",
        "body": "{\r\n    if (src \u003d\u003d null) {\r\n        throw new IllegalArgumentException(String.format(\"argument \\\"%s\\\" is null\", paramName));\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.PropertyMetadata",
    "methodName": "construct",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata construct(java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if ((desc !\u003d null) || (index !\u003d null) || (defaultValue !\u003d null)) {\r\n        return new PropertyMetadata(req, desc, index, defaultValue, null, null, null);\r\n    }\r\n    if (req \u003d\u003d null) {\r\n        return STD_REQUIRED_OR_OPTIONAL;\r\n    }\r\n    return req ? STD_REQUIRED : STD_OPTIONAL;\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B3",
      "B1 : If(r2 !\u003d null) → B2 | else → B3",
      "B2 : If(r3 \u003d\u003d null) → B3 | else → B4",
      "B4 : If(r1 !\u003d null) → B5 | else → B6",
      "B6 : If($z0 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  Boolean\n  String\n  Integer\n  String\n  if (r0 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  if (r2 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  if (r3 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d PropertyMetadata\n  new PropertyMetadata(r1, r0, r2, r3, null, null, null)\n  return\n}",
      "B4 {\n  if (r1 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r4 \u003d PropertyMetadata STD_REQUIRED_OR_OPTIONAL\u003e\n  return\n}",
      "B6 {\n  $z0 \u003d r1.booleanValue()\n  if ($z0 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $r6 \u003d PropertyMetadata STD_REQUIRED\u003e\n  goto B9\n}",
      "B8 {\n  $r6 \u003d PropertyMetadata STD_OPTIONAL\u003e\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.PropertyMetadata",
    "methodName": "construct",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata construct(boolean,java.lang.String,java.lang.Integer,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if ((desc !\u003d null) || (index !\u003d null) || (defaultValue !\u003d null)) {\r\n        return new PropertyMetadata(req, desc, index, defaultValue, null, null, null);\r\n    }\r\n    if (req \u003d\u003d null) {\r\n        return STD_REQUIRED_OR_OPTIONAL;\r\n    }\r\n    return req ? STD_REQUIRED : STD_OPTIONAL;\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B3",
      "B1 : If(r1 !\u003d null) → B2 | else → B3",
      "B2 : If(r2 \u003d\u003d null) → B3 | else → B4",
      "B4 : If(z0 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  z0 :\u003d @parameter0: boolean\n  String\n  Integer\n  String\n  if (r0 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  if (r2 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d PropertyMetadata\n  $r4 \u003d Boolean.valueOf(z0)\n  new PropertyMetadata($r4, r0, r1, r2, null, null, null)\n  return\n}",
      "B4 {\n  if (z0 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r5 \u003d PropertyMetadata STD_REQUIRED\u003e\n  goto B7\n}",
      "B6 {\n  $r5 \u003d PropertyMetadata STD_OPTIONAL\u003e\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.PropertyMetadata",
    "methodName": "withDefaultValue",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata withDefaultValue(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if ((def \u003d\u003d null) || def.isEmpty()) {\r\n        if (_defaultValue \u003d\u003d null) {\r\n            return this;\r\n        }\r\n        def \u003d null;\r\n    } else if (def.equals(_defaultValue)) {\r\n        return this;\r\n    }\r\n    return new PropertyMetadata(_required, _description, _index, def, _mergeInfo, _valueNulls, _contentNulls);\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r10 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($r1 !\u003d null) → B3 | else → B4",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  PropertyMetadata\n  String\n  if (r10 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r10.isEmpty()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r1 \u003d String _defaultValue\u003e\n  if ($r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r10 \u003d null\n  goto B7\n}",
      "B5 {\n  $r9 \u003d String _defaultValue\u003e\n  $z1 \u003d r10.equals($r9)\n  if ($z1 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $r2 \u003d PropertyMetadata\n  $r8 \u003d Boolean _required\u003e\n  $r7 \u003d String _description\u003e\n  $r6 \u003d Integer _index\u003e\n  $r5 \u003d PropertyMetadata$MergeInfo _mergeInfo\u003e\n  $r4 \u003d Nulls _valueNulls\u003e\n  $r3 \u003d Nulls _contentNulls\u003e\n  new PropertyMetadata($r8, $r7, $r6, r10, $r5, $r4, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.PropertyMetadata",
    "methodName": "withRequired",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata withRequired(java.lang.Boolean)",
    "visibility": "public",
    "body": "{\r\n    if (b \u003d\u003d null) {\r\n        if (_required \u003d\u003d null) {\r\n            return this;\r\n        }\r\n    } else if (b.equals(_required)) {\r\n        return this;\r\n    }\r\n    return new PropertyMetadata(b, _description, _index, _defaultValue, _mergeInfo, _valueNulls, _contentNulls);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B3",
      "B1 : If($r10 !\u003d null) → B2 | else → B5",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  PropertyMetadata\n  Boolean\n  if (r0 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r10 \u003d Boolean _required\u003e\n  if ($r10 !\u003d null) goto B2 else B5\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r2 \u003d Boolean _required\u003e\n  $z0 \u003d r0.equals($r2)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r3 \u003d PropertyMetadata\n  $r9 \u003d String _description\u003e\n  $r8 \u003d Integer _index\u003e\n  $r7 \u003d String _defaultValue\u003e\n  $r6 \u003d PropertyMetadata$MergeInfo _mergeInfo\u003e\n  $r5 \u003d Nulls _valueNulls\u003e\n  $r4 \u003d Nulls _contentNulls\u003e\n  new PropertyMetadata(r0, $r9, $r8, $r7, $r6, $r5, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.PropertyMetadata",
    "methodName": "hasDefaultValue",
    "signature": "boolean hasDefaultValue()",
    "visibility": "public",
    "body": "{\r\n    return (_defaultValue !\u003d null);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PropertyMetadata\n  $r1 \u003d String _defaultValue\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.PropertyMetadata",
    "methodName": "isRequired",
    "signature": "boolean isRequired()",
    "visibility": "public",
    "body": "{\r\n    return (_required !\u003d null) \u0026\u0026 _required.booleanValue();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  PropertyMetadata\n  $r1 \u003d Boolean _required\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d Boolean _required\u003e\n  $z0 \u003d $r2.booleanValue()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.PropertyMetadata",
    "methodName": "hasIndex",
    "signature": "boolean hasIndex()",
    "visibility": "public",
    "body": "{\r\n    return _index !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PropertyMetadata\n  $r1 \u003d Integer _index\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.PropertyName",
    "methodName": "construct",
    "signature": "com.fasterxml.jackson.databind.PropertyName construct(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (simpleName \u003d\u003d null || simpleName.isEmpty()) {\r\n        return USE_DEFAULT;\r\n    }\r\n    return new PropertyName(InternCache.instance.intern(simpleName), null);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d PropertyName USE_DEFAULT\u003e\n  return\n}",
      "B3 {\n  $r2 \u003d PropertyName\n  $r3 \u003d InternCache instance\u003e\n  $r4 \u003d $r3.intern(r0)\n  new PropertyName($r4, null)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.PropertyName",
    "methodName": "construct",
    "signature": "com.fasterxml.jackson.databind.PropertyName construct(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (simpleName \u003d\u003d null) {\r\n        simpleName \u003d \"\";\r\n    }\r\n    if (ns \u003d\u003d null \u0026\u0026 simpleName.isEmpty()) {\r\n        return USE_DEFAULT;\r\n    }\r\n    return new PropertyName(InternCache.instance.intern(simpleName), ns);\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r5 !\u003d null) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  if (r5 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r5 \u003d \"\"\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r5.isEmpty()\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d PropertyName USE_DEFAULT\u003e\n  return\n}",
      "B5 {\n  $r1 \u003d PropertyName\n  $r2 \u003d InternCache instance\u003e\n  $r3 \u003d $r2.intern(r5)\n  new PropertyName($r3, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.PropertyName",
    "methodName": "merge",
    "signature": "com.fasterxml.jackson.databind.PropertyName merge(com.fasterxml.jackson.databind.PropertyName,com.fasterxml.jackson.databind.PropertyName)",
    "visibility": "public",
    "body": "{\r\n    if (name1 \u003d\u003d null) {\r\n        return name2;\r\n    }\r\n    if (name2 \u003d\u003d null) {\r\n        return name1;\r\n    }\r\n    // 22-Jun-2024, tatu: [databind#4595] Should not merge NO_NAME\r\n    if (name1 \u003d\u003d NO_NAME) {\r\n        return name1;\r\n    }\r\n    String ns \u003d _nonEmpty(name1._namespace, name2._namespace);\r\n    String simple \u003d _nonEmpty(name1._simpleName, name2._simpleName);\r\n    // But see if we can just return one of arguments as-is:\r\n    if (ns \u003d\u003d name1._namespace \u0026\u0026 simple \u003d\u003d name1._simpleName) {\r\n        return name1;\r\n    }\r\n    if (ns \u003d\u003d name2._namespace \u0026\u0026 simple \u003d\u003d name2._simpleName) {\r\n        return name2;\r\n    }\r\n    return construct(simple, ns);\r\n}",
    "nodes": 13,
    "edges": 14,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r1 !\u003d null) → B3 | else → B4",
      "B4 : If(r0 !\u003d $r2) → B5 | else → B6",
      "B6 : If(r5 !\u003d $r9) → B7 | else → B9",
      "B7 : If(r8 !\u003d $r13) → B8 | else → B9",
      "B9 : If(r5 !\u003d $r10) → B10 | else → B12",
      "B10 : If(r8 !\u003d $r12) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  PropertyName\n  PropertyName\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r2 \u003d PropertyName NO_NAME\u003e\n  if (r0 !\u003d $r2) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r4 \u003d String _namespace\u003e\n  $r3 \u003d String _namespace\u003e\n  r5 \u003d PropertyName._nonEmpty($r4, $r3)\n  $r7 \u003d String _simpleName\u003e\n  $r6 \u003d String _simpleName\u003e\n  r8 \u003d PropertyName._nonEmpty($r7, $r6)\n  $r9 \u003d String _namespace\u003e\n  if (r5 !\u003d $r9) goto B7 else B9\n}",
      "B7 {\n  $r13 \u003d String _simpleName\u003e\n  if (r8 !\u003d $r13) goto B8 else B9\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $r10 \u003d String _namespace\u003e\n  if (r5 !\u003d $r10) goto B10 else B12\n}",
      "B10 {\n  $r12 \u003d String _simpleName\u003e\n  if (r8 !\u003d $r12) goto B11 else B12\n}",
      "B11 {\n  return\n}",
      "B12 {\n  $r11 \u003d PropertyName.construct(r8, r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PropertyName#construct(...2)",
        "body": "{\r\n    if (simpleName \u003d\u003d null) {\r\n        simpleName \u003d \"\";\r\n    }\r\n    if (ns \u003d\u003d null \u0026\u0026 simpleName.isEmpty()) {\r\n        return USE_DEFAULT;\r\n    }\r\n    return new PropertyName(InternCache.instance.intern(simpleName), ns);\r\n}"
      },
      {
        "name": "PropertyName#_nonEmpty(...2)",
        "body": "{\r\n    if (str1 \u003d\u003d null) {\r\n        return str2;\r\n    }\r\n    if (str2 \u003d\u003d null) {\r\n        return str1;\r\n    }\r\n    if (str1.isEmpty()) {\r\n        return str2;\r\n    }\r\n    return str1;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.PropertyName",
    "methodName": "internSimpleName",
    "signature": "com.fasterxml.jackson.databind.PropertyName internSimpleName()",
    "visibility": "public",
    "body": "{\r\n    if (_simpleName.isEmpty()) {\r\n        // empty String is canonical already\r\n        return this;\r\n    }\r\n    String interned \u003d InternCache.instance.intern(_simpleName);\r\n    if (interned \u003d\u003d _simpleName) {\r\n        // was already interned\r\n        return this;\r\n    }\r\n    return new PropertyName(interned, _namespace);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r4 !\u003d $r5) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  PropertyName\n  $r1 \u003d String _simpleName\u003e\n  $z0 \u003d $r1.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d InternCache instance\u003e\n  $r2 \u003d String _simpleName\u003e\n  r4 \u003d $r3.intern($r2)\n  $r5 \u003d String _simpleName\u003e\n  if (r4 !\u003d $r5) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r6 \u003d PropertyName\n  $r7 \u003d String _namespace\u003e\n  new PropertyName(r4, $r7)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.PropertyName",
    "methodName": "withSimpleName",
    "signature": "com.fasterxml.jackson.databind.PropertyName withSimpleName(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (simpleName \u003d\u003d null) {\r\n        simpleName \u003d \"\";\r\n    }\r\n    if (simpleName.equals(_simpleName)) {\r\n        return this;\r\n    }\r\n    return new PropertyName(simpleName, _namespace);\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  PropertyName\n  String\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r4 \u003d \"\"\n}",
      "B2 {\n  $r1 \u003d String _simpleName\u003e\n  $z0 \u003d r4.equals($r1)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r2 \u003d PropertyName\n  $r3 \u003d String _namespace\u003e\n  new PropertyName(r4, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.PropertyName",
    "methodName": "withNamespace",
    "signature": "com.fasterxml.jackson.databind.PropertyName withNamespace(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (ns \u003d\u003d null) {\r\n        if (_namespace \u003d\u003d null) {\r\n            return this;\r\n        }\r\n    } else if (ns.equals(_namespace)) {\r\n        return this;\r\n    }\r\n    return new PropertyName(_simpleName, ns);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B3",
      "B1 : If($r5 !\u003d null) → B2 | else → B5",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  PropertyName\n  String\n  if (r0 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r5 \u003d String _namespace\u003e\n  if ($r5 !\u003d null) goto B2 else B5\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r2 \u003d String _namespace\u003e\n  $z0 \u003d r0.equals($r2)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r3 \u003d PropertyName\n  $r4 \u003d String _simpleName\u003e\n  new PropertyName($r4, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.PropertyName",
    "methodName": "simpleAsEncoded",
    "signature": "com.fasterxml.jackson.core.SerializableString simpleAsEncoded(com.fasterxml.jackson.databind.cfg.MapperConfig)",
    "visibility": "public",
    "body": "{\r\n    SerializableString sstr \u003d _encodedSimple;\r\n    if (sstr \u003d\u003d null) {\r\n        if (config \u003d\u003d null) {\r\n            sstr \u003d new SerializedString(_simpleName);\r\n        } else {\r\n            sstr \u003d config.compileString(_simpleName);\r\n        }\r\n        _encodedSimple \u003d sstr;\r\n    }\r\n    return sstr;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r5 !\u003d null) → B1 | else → B5",
      "B1 : If(r1 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  PropertyName\n  MapperConfig\n  r5 \u003d SerializableString _encodedSimple\u003e\n  if (r5 !\u003d null) goto B1 else B5\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d SerializedString\n  $r4 \u003d String _simpleName\u003e\n  new SerializedString($r4)\n  r5 \u003d $r3\n  goto B4\n}",
      "B3 {\n  $r2 \u003d String _simpleName\u003e\n  r5 \u003d r1.compileString($r2)\n}",
      "B4 {\n  SerializableString _encodedSimple\u003e \u003d r5\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.PropertyName",
    "methodName": "hasSimpleName",
    "signature": "boolean hasSimpleName()",
    "visibility": "public",
    "body": "{\r\n    return !_simpleName.isEmpty();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PropertyName\n  $r1 \u003d String _simpleName\u003e\n  $z0 \u003d $r1.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.PropertyName",
    "methodName": "hasNamespace",
    "signature": "boolean hasNamespace()",
    "visibility": "public",
    "body": "{\r\n    return _namespace !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PropertyName\n  $r1 \u003d String _namespace\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.PropertyName",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty()",
    "visibility": "public",
    "body": "{\r\n    return (_namespace \u003d\u003d null) \u0026\u0026 (_simpleName.isEmpty());\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  PropertyName\n  $r1 \u003d String _namespace\u003e\n  if ($r1 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d String _simpleName\u003e\n  $z0 \u003d $r2.isEmpty()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.PropertyName",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    // 13-Nov-2012, tatu: by default, require strict type equality.\r\n    //   Re-evaluate if this becomes an issue.\r\n    if (o.getClass() !\u003d getClass())\r\n        return false;\r\n    // 13-Nov-2012, tatu: Should we have specific rules on matching USE_DEFAULT?\r\n    //   (like, it only ever matching exact instance)\r\n    //   If we did, would need to check symmetrically; that is, if either \u0027this\u0027\r\n    //   or \u0027o\u0027 was USE_DEFAULT, both would have to be.\r\n    PropertyName other \u003d (PropertyName) o;\r\n    if (_simpleName \u003d\u003d null) {\r\n        if (other._simpleName !\u003d null)\r\n            return false;\r\n    } else if (!_simpleName.equals(other._simpleName)) {\r\n        return false;\r\n    }\r\n    if (_namespace \u003d\u003d null) {\r\n        return (null \u003d\u003d other._namespace);\r\n    }\r\n    return _namespace.equals(other._namespace);\r\n}",
    "nodes": 17,
    "edges": 18,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($r3 \u003d\u003d $r2) → B5 | else → B6",
      "B6 : If($r5 !\u003d null) → B7 | else → B9",
      "B7 : If($r12 \u003d\u003d null) → B8 | else → B11",
      "B9 : If($z0 !\u003d 0) → B10 | else → B11",
      "B11 : If($r8 !\u003d null) → B12 | else → B16",
      "B12 : If(null !\u003d $r11) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  PropertyName\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d r0.getClass()\n  $r2 \u003d r1.getClass()\n  if ($r3 \u003d\u003d $r2) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  r4 \u003d PropertyName) r0\n  $r5 \u003d String _simpleName\u003e\n  if ($r5 !\u003d null) goto B7 else B9\n}",
      "B7 {\n  $r12 \u003d String _simpleName\u003e\n  if ($r12 \u003d\u003d null) goto B8 else B11\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $r7 \u003d String _simpleName\u003e\n  $r6 \u003d String _simpleName\u003e\n  $z0 \u003d $r7.equals($r6)\n  if ($z0 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  return\n}",
      "B11 {\n  $r8 \u003d String _namespace\u003e\n  if ($r8 !\u003d null) goto B12 else B16\n}",
      "B12 {\n  $r11 \u003d String _namespace\u003e\n  if (null !\u003d $r11) goto B13 else B14\n}",
      "B13 {\n  $z2 \u003d 1\n  goto B15\n}",
      "B14 {\n  $z2 \u003d 0\n}",
      "B15 {\n  return\n}",
      "B16 {\n  $r10 \u003d String _namespace\u003e\n  $r9 \u003d String _namespace\u003e\n  $z1 \u003d $r10.equals($r9)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B16",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PropertyName#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.PropertyName",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    if (_namespace \u003d\u003d null) {\r\n        return _simpleName;\r\n    }\r\n    return \"{\" + _namespace + \"}\" + _simpleName;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PropertyName\n  $r1 \u003d String _namespace\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d String _simpleName\u003e\n  return\n}",
      "B2 {\n  $r3 \u003d String _namespace\u003e\n  $r2 \u003d String _simpleName\u003e\n  $r4 \u003d dynInvoke makeConcatWithConstants($r3, $r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SequenceWriter",
    "methodName": "init",
    "signature": "com.fasterxml.jackson.databind.SequenceWriter init(boolean)",
    "visibility": "public",
    "body": "{\r\n    if (wrapInArray) {\r\n        _generator.writeStartArray();\r\n        _openArray \u003d true;\r\n    }\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SequenceWriter\n  z0 :\u003d @parameter0: boolean\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d JsonGenerator _generator\u003e\n  $r1.writeStartArray()\n  SequenceWriter: boolean _openArray\u003e \u003d 1\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SequenceWriter",
    "methodName": "write",
    "signature": "com.fasterxml.jackson.databind.SequenceWriter write(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d null) {\r\n        _provider.serializeValue(_generator, null);\r\n        return this;\r\n    }\r\n    if (_cfgCloseCloseable \u0026\u0026 (value instanceof Closeable)) {\r\n        return _writeCloseableValue(value);\r\n    }\r\n    JsonSerializer\u003cObject\u003e ser \u003d _rootSerializer;\r\n    if (ser \u003d\u003d null) {\r\n        Class\u003c?\u003e type \u003d value.getClass();\r\n        ser \u003d _dynamicSerializers.serializerFor(type);\r\n        if (ser \u003d\u003d null) {\r\n            ser \u003d _findAndAddDynamic(type);\r\n        }\r\n    }\r\n    _provider.serializeValue(_generator, value, null, ser);\r\n    if (_cfgFlush) {\r\n        _generator.flush();\r\n    }\r\n    return this;\r\n}",
    "nodes": 11,
    "edges": 14,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B5",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B5",
      "B5 : If($r5 !\u003d null) → B6 | else → B8",
      "B6 : If(r9 !\u003d null) → B7 | else → B8",
      "B8 : If($z2 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  SequenceWriter\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d DefaultSerializerProvider _provider\u003e\n  $r7 \u003d JsonGenerator _generator\u003e\n  $r8.serializeValue($r7, null)\n  return\n}",
      "B2 {\n  $z0 \u003d SequenceWriter: boolean _cfgCloseCloseable\u003e\n  if ($z0 \u003d\u003d false) goto B3 else B5\n}",
      "B3 {\n  $z1 \u003d Closeable\n  if ($z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r6 \u003d r1._writeCloseableValue(r0)\n  return\n}",
      "B5 {\n  $r5 \u003d JsonSerializer _rootSerializer\u003e\n  r9 \u003d $r5\n  if ($r5 !\u003d null) goto B6 else B8\n}",
      "B6 {\n  r3 \u003d r0.getClass()\n  $r4 \u003d PropertySerializerMap _dynamicSerializers\u003e\n  r9 \u003d $r4.serializerFor(r3)\n  if (r9 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  r9 \u003d r1._findAndAddDynamic(r3)\n}",
      "B8 {\n  $r10 \u003d DefaultSerializerProvider _provider\u003e\n  $r11 \u003d JsonGenerator _generator\u003e\n  $r10.serializeValue($r11, r0, null, r9)\n  $z2 \u003d SequenceWriter: boolean _cfgFlush\u003e\n  if ($z2 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r2 \u003d JsonGenerator _generator\u003e\n  $r2.flush()\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SequenceWriter#_writeCloseableValue(...1)",
        "body": "{\r\n    Closeable toClose \u003d (Closeable) value;\r\n    try {\r\n        JsonSerializer\u003cObject\u003e ser \u003d _rootSerializer;\r\n        if (ser \u003d\u003d null) {\r\n            Class\u003c?\u003e type \u003d value.getClass();\r\n            ser \u003d _dynamicSerializers.serializerFor(type);\r\n            if (ser \u003d\u003d null) {\r\n                ser \u003d _findAndAddDynamic(type);\r\n            }\r\n        }\r\n        _provider.serializeValue(_generator, value, null, ser);\r\n        if (_cfgFlush) {\r\n            _generator.flush();\r\n        }\r\n        Closeable tmpToClose \u003d toClose;\r\n        toClose \u003d null;\r\n        tmpToClose.close();\r\n    } finally {\r\n        if (toClose !\u003d null) {\r\n            try {\r\n                toClose.close();\r\n            } catch (IOException ioe) {\r\n            }\r\n        }\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "SequenceWriter#_findAndAddDynamic(...1)",
        "body": "{\r\n    PropertySerializerMap.SerializerAndMapResult result;\r\n    if (_typeSerializer \u003d\u003d null) {\r\n        result \u003d _dynamicSerializers.findAndAddRootValueSerializer(type, _provider);\r\n    } else {\r\n        result \u003d _dynamicSerializers.addSerializer(type, new TypeWrappedSerializer(_typeSerializer, _provider.findValueSerializer(type, null)));\r\n    }\r\n    _dynamicSerializers \u003d result.map;\r\n    return result.serializer;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SequenceWriter",
    "methodName": "write",
    "signature": "com.fasterxml.jackson.databind.SequenceWriter write(java.lang.Object,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d null) {\r\n        _provider.serializeValue(_generator, null);\r\n        return this;\r\n    }\r\n    if (_cfgCloseCloseable \u0026\u0026 (value instanceof Closeable)) {\r\n        return _writeCloseableValue(value, type);\r\n    }\r\n    /* 15-Dec-2014, tatu: I wonder if this could become problematic. It shouldn\u0027t\r\n         *   really, since trying to use differently paramterized types in a sequence\r\n         *   is likely to run into other issues. But who knows; if it does become an\r\n         *   issue, may need to implement alternative, JavaType-based map.\r\n         */\r\n    JsonSerializer\u003cObject\u003e ser \u003d _dynamicSerializers.serializerFor(type.getRawClass());\r\n    if (ser \u003d\u003d null) {\r\n        ser \u003d _findAndAddDynamic(type);\r\n    }\r\n    _provider.serializeValue(_generator, value, type, ser);\r\n    if (_cfgFlush) {\r\n        _generator.flush();\r\n    }\r\n    return this;\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B5",
      "B3 : If($z2 \u003d\u003d false) → B4 | else → B5",
      "B5 : If($r8 !\u003d null) → B6 | else → B7",
      "B7 : If($z1 \u003d\u003d false) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  SequenceWriter\n  Object\n  JavaType\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r11 \u003d DefaultSerializerProvider _provider\u003e\n  $r10 \u003d JsonGenerator _generator\u003e\n  $r11.serializeValue($r10, null)\n  return\n}",
      "B2 {\n  $z0 \u003d SequenceWriter: boolean _cfgCloseCloseable\u003e\n  if ($z0 \u003d\u003d false) goto B3 else B5\n}",
      "B3 {\n  $z2 \u003d Closeable\n  if ($z2 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r9 \u003d r1._writeCloseableValue(r0, r2)\n  return\n}",
      "B5 {\n  $r3 \u003d PropertySerializerMap _dynamicSerializers\u003e\n  $r4 \u003d r2.getRawClass()\n  $r8 \u003d $r3.serializerFor($r4)\n  r12 \u003d $r8\n  if ($r8 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  r12 \u003d r1._findAndAddDynamic(r2)\n}",
      "B7 {\n  $r6 \u003d DefaultSerializerProvider _provider\u003e\n  $r5 \u003d JsonGenerator _generator\u003e\n  $r6.serializeValue($r5, r0, r2, r12)\n  $z1 \u003d SequenceWriter: boolean _cfgFlush\u003e\n  if ($z1 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $r7 \u003d JsonGenerator _generator\u003e\n  $r7.flush()\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SequenceWriter#_writeCloseableValue(...2)",
        "body": "{\r\n    Closeable toClose \u003d (Closeable) value;\r\n    try {\r\n        // 15-Dec-2014, tatu: As per above, could be problem that we do not pass generic type\r\n        JsonSerializer\u003cObject\u003e ser \u003d _dynamicSerializers.serializerFor(type.getRawClass());\r\n        if (ser \u003d\u003d null) {\r\n            ser \u003d _findAndAddDynamic(type);\r\n        }\r\n        _provider.serializeValue(_generator, value, type, ser);\r\n        if (_cfgFlush) {\r\n            _generator.flush();\r\n        }\r\n        Closeable tmpToClose \u003d toClose;\r\n        toClose \u003d null;\r\n        tmpToClose.close();\r\n    } finally {\r\n        if (toClose !\u003d null) {\r\n            try {\r\n                toClose.close();\r\n            } catch (IOException ioe) {\r\n            }\r\n        }\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "SequenceWriter#_findAndAddDynamic(...1)",
        "body": "{\r\n    PropertySerializerMap.SerializerAndMapResult result;\r\n    if (_typeSerializer \u003d\u003d null) {\r\n        result \u003d _dynamicSerializers.findAndAddRootValueSerializer(type, _provider);\r\n    } else {\r\n        result \u003d _dynamicSerializers.addSerializer(type, new TypeWrappedSerializer(_typeSerializer, _provider.findValueSerializer(type, null)));\r\n    }\r\n    _dynamicSerializers \u003d result.map;\r\n    return result.serializer;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SequenceWriter",
    "methodName": "writeAll",
    "signature": "com.fasterxml.jackson.databind.SequenceWriter writeAll(java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d 0, len \u003d value.length; i \u003c len; ++i) {\r\n        write(value[i]);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SequenceWriter\n  Object[]\n  i1 \u003d 0\n  i0 \u003d lengthof r0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r0[i1]\n  r1.write($r2)\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SequenceWriter#write(...1)",
        "body": "{\r\n    if (value \u003d\u003d null) {\r\n        _provider.serializeValue(_generator, null);\r\n        return this;\r\n    }\r\n    if (_cfgCloseCloseable \u0026\u0026 (value instanceof Closeable)) {\r\n        return _writeCloseableValue(value);\r\n    }\r\n    JsonSerializer\u003cObject\u003e ser \u003d _rootSerializer;\r\n    if (ser \u003d\u003d null) {\r\n        Class\u003c?\u003e type \u003d value.getClass();\r\n        ser \u003d _dynamicSerializers.serializerFor(type);\r\n        if (ser \u003d\u003d null) {\r\n            ser \u003d _findAndAddDynamic(type);\r\n        }\r\n    }\r\n    _provider.serializeValue(_generator, value, null, ser);\r\n    if (_cfgFlush) {\r\n        _generator.flush();\r\n    }\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SequenceWriter",
    "methodName": "writeAll",
    "signature": "com.fasterxml.jackson.databind.SequenceWriter writeAll(java.util.Collection)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SequenceWriter\n  Collection\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  r3 \u003d r1.next()\n  r2.write(r3)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SequenceWriter",
    "methodName": "writeAll",
    "signature": "com.fasterxml.jackson.databind.SequenceWriter writeAll(java.lang.Iterable)",
    "visibility": "public",
    "body": "{\r\n    for (Object value : iterable) {\r\n        write(value);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SequenceWriter\n  Iterable\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  r3 \u003d r1.next()\n  r2.write(r3)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SequenceWriter#write(...1)",
        "body": "{\r\n    if (value \u003d\u003d null) {\r\n        _provider.serializeValue(_generator, null);\r\n        return this;\r\n    }\r\n    if (_cfgCloseCloseable \u0026\u0026 (value instanceof Closeable)) {\r\n        return _writeCloseableValue(value);\r\n    }\r\n    JsonSerializer\u003cObject\u003e ser \u003d _rootSerializer;\r\n    if (ser \u003d\u003d null) {\r\n        Class\u003c?\u003e type \u003d value.getClass();\r\n        ser \u003d _dynamicSerializers.serializerFor(type);\r\n        if (ser \u003d\u003d null) {\r\n            ser \u003d _findAndAddDynamic(type);\r\n        }\r\n    }\r\n    _provider.serializeValue(_generator, value, null, ser);\r\n    if (_cfgFlush) {\r\n        _generator.flush();\r\n    }\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SequenceWriter",
    "methodName": "flush",
    "signature": "void flush()",
    "visibility": "public",
    "body": "{\r\n    if (!_closed) {\r\n        _generator.flush();\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SequenceWriter\n  $z0 \u003d SequenceWriter: boolean _closed\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d JsonGenerator _generator\u003e\n  $r1.flush()\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SequenceWriter",
    "methodName": "close",
    "signature": "void close()",
    "visibility": "public",
    "body": "{\r\n    if (!_closed) {\r\n        _closed \u003d true;\r\n        if (_openArray) {\r\n            _openArray \u003d false;\r\n            _generator.writeEndArray();\r\n        }\r\n        if (_closeGenerator) {\r\n            _generator.close();\r\n        }\r\n    }\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B5",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B3 : If($z2 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  SequenceWriter\n  $z0 \u003d SequenceWriter: boolean _closed\u003e\n  if ($z0 !\u003d 0) goto B1 else B5\n}",
      "B1 {\n  SequenceWriter: boolean _closed\u003e \u003d 1\n  $z1 \u003d SequenceWriter: boolean _openArray\u003e\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  SequenceWriter: boolean _openArray\u003e \u003d 0\n  $r2 \u003d JsonGenerator _generator\u003e\n  $r2.writeEndArray()\n}",
      "B3 {\n  $z2 \u003d SequenceWriter: boolean _closeGenerator\u003e\n  if ($z2 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r1 \u003d JsonGenerator _generator\u003e\n  $r1.close()\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.AnyGetterWriter",
    "methodName": "getAndSerialize",
    "signature": "void getAndSerialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    Object value \u003d _accessor.getValue(bean);\r\n    if (value \u003d\u003d null) {\r\n        return;\r\n    }\r\n    if (!(value instanceof Map\u003c?, ?\u003e)) {\r\n        provider.reportBadDefinition(_property.getType(), String.format(\"Value returned by \u0027any-getter\u0027 %s() not java.util.Map but %s\", _accessor.getName(), value.getClass().getName()));\r\n    }\r\n    // 23-Feb-2015, tatu: Nasty, but has to do (for now)\r\n    if (_mapSerializer !\u003d null) {\r\n        _mapSerializer.serializeWithoutTypeInfo((Map\u003c?, ?\u003e) value, gen, provider);\r\n        return;\r\n    }\r\n    _serializer.serialize(value, gen, provider);\r\n}",
    "nodes": 7,
    "edges": 7,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($r4 \u003d\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  AnyGetterWriter\n  Object\n  JsonGenerator\n  SerializerProvider\n  $r2 \u003d AnnotatedMember _accessor\u003e\n  r3 \u003d $r2.getValue(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d Map\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r10 \u003d BeanProperty _property\u003e\n  $r17 \u003d $r10.getType()\n  $r11 \u003d Object)[2]\n  $r12 \u003d AnnotatedMember _accessor\u003e\n  $r13 \u003d $r12.getName()\n  $r11[0] \u003d $r13\n  $r14 \u003d r3.getClass()\n  $r15 \u003d $r14.getName()\n  $r11[1] \u003d $r15\n  $r16 \u003d String.format(\"Value returned by \\\u0027any-getter\\\u0027 %s() not java.util.Map but %s\", $r11)\n  r6.reportBadDefinition($r17, $r16)\n}",
      "B4 {\n  $r4 \u003d MapSerializer _mapSerializer\u003e\n  if ($r4 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r9 \u003d MapSerializer _mapSerializer\u003e\n  $r8 \u003d Map) r3\n  $r9.serializeWithoutTypeInfo($r8, r5, r6)\n  return\n}",
      "B6 {\n  $r7 \u003d JsonSerializer _serializer\u003e\n  $r7.serialize(r3, r5, r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.AnyGetterWriter",
    "methodName": "getAndFilter",
    "signature": "void getAndFilter(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter)",
    "visibility": "public",
    "body": "{\r\n    Object value \u003d _accessor.getValue(bean);\r\n    if (value \u003d\u003d null) {\r\n        return;\r\n    }\r\n    if (!(value instanceof Map\u003c?, ?\u003e)) {\r\n        provider.reportBadDefinition(_property.getType(), String.format(\"Value returned by \u0027any-getter\u0027 (%s()) not java.util.Map but %s\", _accessor.getName(), value.getClass().getName()));\r\n    }\r\n    // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\r\n    if (_mapSerializer !\u003d null) {\r\n        _mapSerializer.serializeFilteredAnyProperties(provider, gen, bean, (Map\u003c?, ?\u003e) value, filter, null);\r\n        return;\r\n    }\r\n    // ... not sure how custom handler would do it\r\n    _serializer.serialize(value, gen, provider);\r\n}",
    "nodes": 7,
    "edges": 7,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($r4 \u003d\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  AnyGetterWriter\n  Object\n  JsonGenerator\n  SerializerProvider\n  PropertyFilter\n  $r2 \u003d AnnotatedMember _accessor\u003e\n  r3 \u003d $r2.getValue(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d Map\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r11 \u003d BeanProperty _property\u003e\n  $r18 \u003d $r11.getType()\n  $r12 \u003d Object)[2]\n  $r13 \u003d AnnotatedMember _accessor\u003e\n  $r14 \u003d $r13.getName()\n  $r12[0] \u003d $r14\n  $r15 \u003d r3.getClass()\n  $r16 \u003d $r15.getName()\n  $r12[1] \u003d $r16\n  $r17 \u003d String.format(\"Value returned by \\\u0027any-getter\\\u0027 (%s()) not java.util.Map but %s\", $r12)\n  r6.reportBadDefinition($r18, $r17)\n}",
      "B4 {\n  $r4 \u003d MapSerializer _mapSerializer\u003e\n  if ($r4 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r10 \u003d MapSerializer _mapSerializer\u003e\n  $r9 \u003d Map) r3\n  $r10.serializeFilteredAnyProperties(r6, r5, r1, $r9, r8, null)\n  return\n}",
      "B6 {\n  $r7 \u003d JsonSerializer _serializer\u003e\n  $r7.serialize(r3, r5, r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.AnyGetterWriter",
    "methodName": "resolve",
    "signature": "void resolve(com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\r\n    if (_serializer instanceof ContextualSerializer) {\r\n        JsonSerializer\u003c?\u003e ser \u003d provider.handlePrimaryContextualization(_serializer, _property);\r\n        _serializer \u003d (JsonSerializer\u003cObject\u003e) ser;\r\n        if (ser instanceof MapSerializer) {\r\n            _mapSerializer \u003d (MapSerializer) ser;\r\n        }\r\n    }\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  AnyGetterWriter\n  SerializerProvider\n  $r1 \u003d JsonSerializer _serializer\u003e\n  $z0 \u003d ContextualSerializer\n  if ($z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $r4 \u003d JsonSerializer _serializer\u003e\n  $r3 \u003d BeanProperty _property\u003e\n  r5 \u003d r2.handlePrimaryContextualization($r4, $r3)\n  JsonSerializer _serializer\u003e \u003d r5\n  $z1 \u003d MapSerializer\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d MapSerializer) r5\n  MapSerializer _mapSerializer\u003e \u003d $r6\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter",
    "methodName": "rename",
    "signature": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter rename(com.fasterxml.jackson.databind.util.NameTransformer)",
    "visibility": "public",
    "body": "{\r\n    String newName \u003d transformer.transform(_name.getValue());\r\n    if (newName.equals(_name.toString())) {\r\n        return this;\r\n    }\r\n    return _new(PropertyName.construct(newName));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyWriter\n  NameTransformer\n  $r2 \u003d SerializedString _name\u003e\n  $r3 \u003d $r2.getValue()\n  r4 \u003d r0.transform($r3)\n  $r5 \u003d SerializedString _name\u003e\n  $r6 \u003d $r5.toString()\n  $z0 \u003d r4.equals($r6)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r7 \u003d PropertyName.construct(r4)\n  $r8 \u003d r1._new($r7)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPropertyWriter#_new(...1)",
        "body": "{\r\n    return new BeanPropertyWriter(this, newName);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter",
    "methodName": "assignSerializer",
    "signature": "void assignSerializer(com.fasterxml.jackson.databind.JsonSerializer)",
    "visibility": "public",
    "body": "{\r\n    // may need to disable check in future?\r\n    if ((_serializer !\u003d null) \u0026\u0026 (_serializer !\u003d ser)) {\r\n        throw new IllegalStateException(String.format(\"Cannot override _serializer: had a %s, trying to set to %s\", ClassUtil.classNameOf(_serializer), ClassUtil.classNameOf(ser)));\r\n    }\r\n    _serializer \u003d ser;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($r3 \u003d\u003d r2) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyWriter\n  JsonSerializer\n  $r1 \u003d JsonSerializer _serializer\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r3 \u003d JsonSerializer _serializer\u003e\n  if ($r3 \u003d\u003d r2) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d IllegalStateException\n  $r5 \u003d Object)[2]\n  $r6 \u003d JsonSerializer _serializer\u003e\n  $r7 \u003d ClassUtil.classNameOf($r6)\n  $r5[0] \u003d $r7\n  $r8 \u003d ClassUtil.classNameOf(r2)\n  $r5[1] \u003d $r8\n  $r9 \u003d String.format(\"Cannot override _serializer: had a %s, trying to set to %s\", $r5)\n  new IllegalStateException($r9)\n  throw $r4\n}",
      "B3 {\n  JsonSerializer _serializer\u003e \u003d r2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter",
    "methodName": "assignNullSerializer",
    "signature": "void assignNullSerializer(com.fasterxml.jackson.databind.JsonSerializer)",
    "visibility": "public",
    "body": "{\r\n    // may need to disable check in future?\r\n    if ((_nullSerializer !\u003d null) \u0026\u0026 (_nullSerializer !\u003d nullSer)) {\r\n        throw new IllegalStateException(String.format(\"Cannot override _nullSerializer: had a %s, trying to set to %s\", ClassUtil.classNameOf(_nullSerializer), ClassUtil.classNameOf(nullSer)));\r\n    }\r\n    _nullSerializer \u003d nullSer;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($r3 \u003d\u003d r2) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyWriter\n  JsonSerializer\n  $r1 \u003d JsonSerializer _nullSerializer\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r3 \u003d JsonSerializer _nullSerializer\u003e\n  if ($r3 \u003d\u003d r2) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d IllegalStateException\n  $r5 \u003d Object)[2]\n  $r6 \u003d JsonSerializer _nullSerializer\u003e\n  $r7 \u003d ClassUtil.classNameOf($r6)\n  $r5[0] \u003d $r7\n  $r8 \u003d ClassUtil.classNameOf(r2)\n  $r5[1] \u003d $r8\n  $r9 \u003d String.format(\"Cannot override _nullSerializer: had a %s, trying to set to %s\", $r5)\n  new IllegalStateException($r9)\n  throw $r4\n}",
      "B3 {\n  JsonSerializer _nullSerializer\u003e \u003d r2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter",
    "methodName": "getAnnotation",
    "signature": "java.lang.\u0027annotation\u0027.Annotation getAnnotation(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return (_member \u003d\u003d null) ? null : _member.getAnnotation(acls);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyWriter\n  Class\n  $r1 \u003d AnnotatedMember _member\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r3 \u003d AnnotatedMember _member\u003e\n  $r4 \u003d $r3.getAnnotation(r2)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter",
    "methodName": "getContextAnnotation",
    "signature": "java.lang.\u0027annotation\u0027.Annotation getContextAnnotation(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return (_contextAnnotations \u003d\u003d null) ? null : _contextAnnotations.get(acls);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyWriter\n  Class\n  $r1 \u003d Annotations _contextAnnotations\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r3 \u003d Annotations _contextAnnotations\u003e\n  $r4 \u003d $r3.get(r2)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter",
    "methodName": "getInternalSetting",
    "signature": "java.lang.Object getInternalSetting(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return (_internalSettings \u003d\u003d null) ? null : _internalSettings.get(key);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyWriter\n  Object\n  $r1 \u003d HashMap _internalSettings\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r3 \u003d HashMap _internalSettings\u003e\n  $r4 \u003d $r3.get(r2)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter",
    "methodName": "setInternalSetting",
    "signature": "java.lang.Object setInternalSetting(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (_internalSettings \u003d\u003d null) {\r\n        _internalSettings \u003d new HashMap\u003cObject, Object\u003e();\r\n    }\r\n    return _internalSettings.put(key, value);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyWriter\n  Object\n  Object\n  $r1 \u003d HashMap _internalSettings\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d HashMap\n  new HashMap()\n  HashMap _internalSettings\u003e \u003d $r6\n}",
      "B2 {\n  $r4 \u003d HashMap _internalSettings\u003e\n  $r5 \u003d $r4.put(r2, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter",
    "methodName": "removeInternalSetting",
    "signature": "java.lang.Object removeInternalSetting(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    Object removed \u003d null;\r\n    if (_internalSettings !\u003d null) {\r\n        removed \u003d _internalSettings.remove(key);\r\n        // to reduce memory usage, let\u0027s also drop the Map itself, if empty\r\n        if (_internalSettings.size() \u003d\u003d 0) {\r\n            _internalSettings \u003d null;\r\n        }\r\n    }\r\n    return removed;\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($i0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyWriter\n  Object\n  r5 \u003d null\n  $r1 \u003d HashMap _internalSettings\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r3 \u003d HashMap _internalSettings\u003e\n  r5 \u003d $r3.remove(r2)\n  $r4 \u003d HashMap _internalSettings\u003e\n  $i0 \u003d $r4.size()\n  if ($i0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  HashMap _internalSettings\u003e \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter",
    "methodName": "hasSerializer",
    "signature": "boolean hasSerializer()",
    "visibility": "public",
    "body": "{\r\n    return _serializer !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyWriter\n  $r1 \u003d JsonSerializer _serializer\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter",
    "methodName": "hasNullSerializer",
    "signature": "boolean hasNullSerializer()",
    "visibility": "public",
    "body": "{\r\n    return _nullSerializer !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyWriter\n  $r1 \u003d JsonSerializer _nullSerializer\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter",
    "methodName": "wouldConflictWithName",
    "signature": "boolean wouldConflictWithName(com.fasterxml.jackson.databind.PropertyName)",
    "visibility": "public",
    "body": "{\r\n    if (_wrapperName !\u003d null) {\r\n        return _wrapperName.equals(name);\r\n    }\r\n    // Bit convoluted since our support for namespaces is spotty but:\r\n    return name.hasSimpleName(_name.getValue()) \u0026\u0026 !name.hasNamespace();\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B5",
      "B3 : If($z1 !\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyWriter\n  PropertyName\n  $r1 \u003d PropertyName _wrapperName\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d PropertyName _wrapperName\u003e\n  $z2 \u003d $r5.equals(r2)\n  return\n}",
      "B2 {\n  $r3 \u003d SerializedString _name\u003e\n  $r4 \u003d $r3.getValue()\n  $z0 \u003d r2.hasSimpleName($r4)\n  if ($z0 \u003d\u003d false) goto B3 else B5\n}",
      "B3 {\n  $z1 \u003d r2.hasNamespace()\n  if ($z1 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $z3 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z3 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter",
    "methodName": "getRawSerializationType",
    "signature": "java.lang.Class getRawSerializationType()",
    "visibility": "public",
    "body": "{\r\n    return (_cfgSerializationType \u003d\u003d null) ? null : _cfgSerializationType.getRawClass();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyWriter\n  $r1 \u003d JavaType _cfgSerializationType\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d JavaType _cfgSerializationType\u003e\n  $r3 \u003d $r2.getRawClass()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter",
    "methodName": "getPropertyType",
    "signature": "java.lang.Class getPropertyType()",
    "visibility": "public",
    "body": "{\r\n    if (_accessorMethod !\u003d null) {\r\n        return _accessorMethod.getReturnType();\r\n    }\r\n    if (_field !\u003d null) {\r\n        return _field.getType();\r\n    }\r\n    return null;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r2 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyWriter\n  $r1 \u003d Method _accessorMethod\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d Method _accessorMethod\u003e\n  $r6 \u003d $r5.getReturnType()\n  return\n}",
      "B2 {\n  $r2 \u003d Field _field\u003e\n  if ($r2 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d Field _field\u003e\n  $r4 \u003d $r3.getType()\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter",
    "methodName": "getGenericPropertyType",
    "signature": "java.lang.reflect.Type getGenericPropertyType()",
    "visibility": "public",
    "body": "{\r\n    if (_accessorMethod !\u003d null) {\r\n        return _accessorMethod.getGenericReturnType();\r\n    }\r\n    if (_field !\u003d null) {\r\n        return _field.getGenericType();\r\n    }\r\n    return null;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r2 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyWriter\n  $r1 \u003d Method _accessorMethod\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d Method _accessorMethod\u003e\n  $r6 \u003d $r5.getGenericReturnType()\n  return\n}",
      "B2 {\n  $r2 \u003d Field _field\u003e\n  if ($r2 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d Field _field\u003e\n  $r4 \u003d $r3.getGenericType()\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter",
    "methodName": "serializeAsField",
    "signature": "void serializeAsField(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    // inlined \u0027get()\u0027\r\n    final Object value \u003d (_accessorMethod \u003d\u003d null) ? _field.get(bean) : _accessorMethod.invoke(bean, (Object[]) null);\r\n    // Null handling is bit different, check that first\r\n    if (value \u003d\u003d null) {\r\n        // 20-Jun-2022, tatu: Defer checking of null, see [databind#3481]\r\n        if ((_suppressableValue !\u003d null) \u0026\u0026 prov.includeFilterSuppressNulls(_suppressableValue)) {\r\n            return;\r\n        }\r\n        if (_nullSerializer !\u003d null) {\r\n            gen.writeFieldName(_name);\r\n            _nullSerializer.serialize(null, gen, prov);\r\n        }\r\n        return;\r\n    }\r\n    // then find serializer to use\r\n    JsonSerializer\u003cObject\u003e ser \u003d _serializer;\r\n    if (ser \u003d\u003d null) {\r\n        Class\u003c?\u003e cls \u003d value.getClass();\r\n        PropertySerializerMap m \u003d _dynamicSerializers;\r\n        ser \u003d m.serializerFor(cls);\r\n        if (ser \u003d\u003d null) {\r\n            ser \u003d _findAndAddDynamic(m, cls, prov);\r\n        }\r\n    }\r\n    // and then see if we must suppress certain values (default, empty)\r\n    if (_suppressableValue !\u003d null) {\r\n        if (MARKER_FOR_EMPTY \u003d\u003d _suppressableValue) {\r\n            if (ser.isEmpty(prov, value)) {\r\n                return;\r\n            }\r\n        } else if (_suppressableValue.equals(value)) {\r\n            return;\r\n        }\r\n    }\r\n    // For non-nulls: simple check for direct cycles\r\n    if (value \u003d\u003d bean) {\r\n        // four choices: exception; handled by call; pass-through or write null\r\n        if (_handleSelfReference(bean, gen, prov, ser)) {\r\n            return;\r\n        }\r\n    }\r\n    gen.writeFieldName(_name);\r\n    if (_typeSerializer \u003d\u003d null) {\r\n        ser.serialize(value, gen, prov);\r\n    } else {\r\n        ser.serializeWithType(value, gen, prov, _typeSerializer);\r\n    }\r\n}",
    "nodes": 26,
    "edges": 34,
    "cc": 10,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B3 : If($r22 !\u003d null) → B4 | else → B10",
      "B4 : If($r16 \u003d\u003d null) → B5 | else → B7",
      "B5 : If($z3 \u003d\u003d false) → B6 | else → B7",
      "B7 : If($r17 \u003d\u003d null) → B8 | else → B9",
      "B10 : If(r23 !\u003d null) → B11 | else → B13",
      "B11 : If(r23 !\u003d null) → B12 | else → B13",
      "B13 : If($r24 \u003d\u003d null) → B14 | else → B19",
      "B14 : If($r12 !\u003d $r11) → B15 | else → B17",
      "B15 : If($z2 \u003d\u003d false) → B16 | else → B19",
      "B17 : If($z1 \u003d\u003d false) → B18 | else → B19",
      "B19 : If(r5 !\u003d r2) → B20 | else → B22",
      "B20 : If($z0 \u003d\u003d false) → B21 | else → B22",
      "B22 : If($r8 !\u003d null) → B23 | else → B24"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyWriter\n  Object\n  JsonGenerator\n  SerializerProvider\n  $r1 \u003d Method _accessorMethod\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r21 \u003d Field _field\u003e\n  $r22 \u003d $r21.get(r2)\n  goto B3\n}",
      "B2 {\n  $r4 \u003d Method _accessorMethod\u003e\n  $r3 \u003d Object[]) null\n  $r22 \u003d $r4.invoke(r2, $r3)\n}",
      "B3 {\n  r5 \u003d $r22\n  if ($r22 !\u003d null) goto B4 else B10\n}",
      "B4 {\n  $r16 \u003d Object _suppressableValue\u003e\n  if ($r16 \u003d\u003d null) goto B5 else B7\n}",
      "B5 {\n  $r20 \u003d Object _suppressableValue\u003e\n  $z3 \u003d r9.includeFilterSuppressNulls($r20)\n  if ($z3 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $r17 \u003d JsonSerializer _nullSerializer\u003e\n  if ($r17 \u003d\u003d null) goto B8 else B9\n}",
      "B8 {\n  $r18 \u003d SerializedString _name\u003e\n  r6.writeFieldName($r18)\n  $r19 \u003d JsonSerializer _nullSerializer\u003e\n  $r19.serialize(null, r6, r9)\n}",
      "B9 {\n  return\n}",
      "B10 {\n  r23 \u003d JsonSerializer _serializer\u003e\n  if (r23 !\u003d null) goto B11 else B13\n}",
      "B11 {\n  r14 \u003d $r22.getClass()\n  r15 \u003d PropertySerializerMap _dynamicSerializers\u003e\n  r23 \u003d r15.serializerFor(r14)\n  if (r23 !\u003d null) goto B12 else B13\n}",
      "B12 {\n  r23 \u003d r0._findAndAddDynamic(r15, r14, r9)\n}",
      "B13 {\n  $r24 \u003d Object _suppressableValue\u003e\n  if ($r24 \u003d\u003d null) goto B14 else B19\n}",
      "B14 {\n  $r12 \u003d Object MARKER_FOR_EMPTY\u003e\n  $r11 \u003d Object _suppressableValue\u003e\n  if ($r12 !\u003d $r11) goto B15 else B17\n}",
      "B15 {\n  $z2 \u003d r23.isEmpty(r9, r5)\n  if ($z2 \u003d\u003d false) goto B16 else B19\n}",
      "B16 {\n  return\n}",
      "B17 {\n  $r13 \u003d Object _suppressableValue\u003e\n  $z1 \u003d $r13.equals(r5)\n  if ($z1 \u003d\u003d false) goto B18 else B19\n}",
      "B18 {\n  return\n}",
      "B19 {\n  if (r5 !\u003d r2) goto B20 else B22\n}",
      "B20 {\n  $z0 \u003d r0._handleSelfReference(r2, r6, r9, r23)\n  if ($z0 \u003d\u003d false) goto B21 else B22\n}",
      "B21 {\n  return\n}",
      "B22 {\n  $r7 \u003d SerializedString _name\u003e\n  r6.writeFieldName($r7)\n  $r8 \u003d TypeSerializer _typeSerializer\u003e\n  if ($r8 !\u003d null) goto B23 else B24\n}",
      "B23 {\n  r23.serialize(r5, r6, r9)\n  goto B25\n}",
      "B24 {\n  $r10 \u003d TypeSerializer _typeSerializer\u003e\n  r23.serializeWithType(r5, r6, r9, $r10)\n}",
      "B25 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B10",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B19",
      "B14 --\u003e B15",
      "B14 --\u003e B17",
      "B15 --\u003e B16",
      "B15 --\u003e B19",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e B20",
      "B19 --\u003e B22",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e [EXIT]",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B25",
      "B25 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPropertyWriter#_handleSelfReference(...4)",
        "body": "{\r\n    if (!ser.usesObjectId()) {\r\n        if (prov.isEnabled(SerializationFeature.FAIL_ON_SELF_REFERENCES)) {\r\n            // 05-Feb-2013, tatu: Usually a problem, but NOT if we are handling\r\n            // object id; this may be the case for BeanSerializers at least.\r\n            // 13-Feb-2014, tatu: another possible ok case: custom serializer\r\n            // (something OTHER than {@link BeanSerializerBase}\r\n            if (ser instanceof BeanSerializerBase) {\r\n                prov.reportBadDefinition(getType(), \"Direct self-reference leading to cycle\");\r\n            }\r\n        } else if (prov.isEnabled(SerializationFeature.WRITE_SELF_REFERENCES_AS_NULL)) {\r\n            if (_nullSerializer !\u003d null) {\r\n                // 23-Oct-2019, tatu: Tricky part -- caller does not specify if it\u0027s\r\n                //   \"as property\" (in JSON Object) or \"as element\" (JSON array, via\r\n                //   \u0027POJO-as-array\u0027). And since Afterburner calls method can not easily\r\n                //   start passing info either. So check generator to see...\r\n                //   (note: not considering ROOT context as possibility, does not seem legal)\r\n                if (!gen.getOutputContext().inArray()) {\r\n                    gen.writeFieldName(_name);\r\n                }\r\n                _nullSerializer.serialize(null, gen, prov);\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      },
      {
        "name": "BeanPropertyWriter#_findAndAddDynamic(...3)",
        "body": "{\r\n    PropertySerializerMap.SerializerAndMapResult result;\r\n    if (_nonTrivialBaseType !\u003d null) {\r\n        JavaType t \u003d provider.constructSpecializedType(_nonTrivialBaseType, type);\r\n        result \u003d map.findAndAddPrimarySerializer(t, provider, this);\r\n    } else {\r\n        result \u003d map.findAndAddPrimarySerializer(type, provider, this);\r\n    }\r\n    // did we get a new map of serializers? If so, start using it\r\n    if (map !\u003d result.map) {\r\n        _dynamicSerializers \u003d result.map;\r\n    }\r\n    return result.serializer;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter",
    "methodName": "serializeAsOmittedField",
    "signature": "void serializeAsOmittedField(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (!gen.canOmitFields()) {\r\n        gen.writeOmittedField(_name.getValue());\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyWriter\n  Object\n  JsonGenerator\n  SerializerProvider\n  $z0 \u003d r0.canOmitFields()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d SerializedString _name\u003e\n  $r3 \u003d $r2.getValue()\n  r0.writeOmittedField($r3)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter",
    "methodName": "serializeAsElement",
    "signature": "void serializeAsElement(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    // inlined \u0027get()\u0027\r\n    final Object value \u003d (_accessorMethod \u003d\u003d null) ? _field.get(bean) : _accessorMethod.invoke(bean, (Object[]) null);\r\n    if (value \u003d\u003d null) {\r\n        // nulls need specialized handling\r\n        if (_nullSerializer !\u003d null) {\r\n            _nullSerializer.serialize(null, gen, prov);\r\n        } else {\r\n            // can NOT suppress entries in tabular output\r\n            gen.writeNull();\r\n        }\r\n        return;\r\n    }\r\n    // otherwise find serializer to use\r\n    JsonSerializer\u003cObject\u003e ser \u003d _serializer;\r\n    if (ser \u003d\u003d null) {\r\n        Class\u003c?\u003e cls \u003d value.getClass();\r\n        PropertySerializerMap map \u003d _dynamicSerializers;\r\n        ser \u003d map.serializerFor(cls);\r\n        if (ser \u003d\u003d null) {\r\n            ser \u003d _findAndAddDynamic(map, cls, prov);\r\n        }\r\n    }\r\n    // and then see if we must suppress certain values (default, empty)\r\n    if (_suppressableValue !\u003d null) {\r\n        if (MARKER_FOR_EMPTY \u003d\u003d _suppressableValue) {\r\n            if (ser.isEmpty(prov, value)) {\r\n                // can NOT suppress entries in\r\n                // tabular output\r\n                serializeAsPlaceholder(bean, gen, prov);\r\n                return;\r\n            }\r\n        } else if (_suppressableValue.equals(value)) {\r\n            // can NOT suppress entries in tabular output\r\n            serializeAsPlaceholder(bean, gen, prov);\r\n            return;\r\n        }\r\n    }\r\n    // For non-nulls: simple check for direct cycles\r\n    if (value \u003d\u003d bean) {\r\n        if (_handleSelfReference(bean, gen, prov, ser)) {\r\n            return;\r\n        }\r\n    }\r\n    if (_typeSerializer \u003d\u003d null) {\r\n        ser.serialize(value, gen, prov);\r\n    } else {\r\n        ser.serializeWithType(value, gen, prov, _typeSerializer);\r\n    }\r\n}",
    "nodes": 24,
    "edges": 31,
    "cc": 9,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B3 : If($r18 !\u003d null) → B4 | else → B8",
      "B4 : If($r15 \u003d\u003d null) → B5 | else → B6",
      "B8 : If(r19 !\u003d null) → B9 | else → B11",
      "B9 : If(r19 !\u003d null) → B10 | else → B11",
      "B11 : If($r20 \u003d\u003d null) → B12 | else → B17",
      "B12 : If($r11 !\u003d $r10) → B13 | else → B15",
      "B13 : If($z2 \u003d\u003d false) → B14 | else → B17",
      "B15 : If($z1 \u003d\u003d false) → B16 | else → B17",
      "B17 : If(r5 !\u003d r2) → B18 | else → B20",
      "B18 : If($z0 \u003d\u003d false) → B19 | else → B20",
      "B20 : If($r6 !\u003d null) → B21 | else → B22"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyWriter\n  Object\n  JsonGenerator\n  SerializerProvider\n  $r1 \u003d Method _accessorMethod\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r17 \u003d Field _field\u003e\n  $r18 \u003d $r17.get(r2)\n  goto B3\n}",
      "B2 {\n  $r4 \u003d Method _accessorMethod\u003e\n  $r3 \u003d Object[]) null\n  $r18 \u003d $r4.invoke(r2, $r3)\n}",
      "B3 {\n  r5 \u003d $r18\n  if ($r18 !\u003d null) goto B4 else B8\n}",
      "B4 {\n  $r15 \u003d JsonSerializer _nullSerializer\u003e\n  if ($r15 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r16 \u003d JsonSerializer _nullSerializer\u003e\n  $r16.serialize(null, r7, r8)\n  goto B7\n}",
      "B6 {\n  r7.writeNull()\n}",
      "B7 {\n  return\n}",
      "B8 {\n  r19 \u003d JsonSerializer _serializer\u003e\n  if (r19 !\u003d null) goto B9 else B11\n}",
      "B9 {\n  r13 \u003d $r18.getClass()\n  r14 \u003d PropertySerializerMap _dynamicSerializers\u003e\n  r19 \u003d r14.serializerFor(r13)\n  if (r19 !\u003d null) goto B10 else B11\n}",
      "B10 {\n  r19 \u003d r0._findAndAddDynamic(r14, r13, r8)\n}",
      "B11 {\n  $r20 \u003d Object _suppressableValue\u003e\n  if ($r20 \u003d\u003d null) goto B12 else B17\n}",
      "B12 {\n  $r11 \u003d Object MARKER_FOR_EMPTY\u003e\n  $r10 \u003d Object _suppressableValue\u003e\n  if ($r11 !\u003d $r10) goto B13 else B15\n}",
      "B13 {\n  $z2 \u003d r19.isEmpty(r8, r5)\n  if ($z2 \u003d\u003d false) goto B14 else B17\n}",
      "B14 {\n  r0.serializeAsPlaceholder(r2, r7, r8)\n  return\n}",
      "B15 {\n  $r12 \u003d Object _suppressableValue\u003e\n  $z1 \u003d $r12.equals(r5)\n  if ($z1 \u003d\u003d false) goto B16 else B17\n}",
      "B16 {\n  r0.serializeAsPlaceholder(r2, r7, r8)\n  return\n}",
      "B17 {\n  if (r5 !\u003d r2) goto B18 else B20\n}",
      "B18 {\n  $z0 \u003d r0._handleSelfReference(r2, r7, r8, r19)\n  if ($z0 \u003d\u003d false) goto B19 else B20\n}",
      "B19 {\n  return\n}",
      "B20 {\n  $r6 \u003d TypeSerializer _typeSerializer\u003e\n  if ($r6 !\u003d null) goto B21 else B22\n}",
      "B21 {\n  r19.serialize(r5, r7, r8)\n  goto B23\n}",
      "B22 {\n  $r9 \u003d TypeSerializer _typeSerializer\u003e\n  r19.serializeWithType(r5, r7, r8, $r9)\n}",
      "B23 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B17",
      "B12 --\u003e B13",
      "B12 --\u003e B15",
      "B13 --\u003e B14",
      "B13 --\u003e B17",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e B18",
      "B17 --\u003e B20",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B23",
      "B23 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPropertyWriter#serializeAsPlaceholder(...3)",
        "body": "{\r\n    if (_nullSerializer !\u003d null) {\r\n        _nullSerializer.serialize(null, gen, prov);\r\n    } else {\r\n        gen.writeNull();\r\n    }\r\n}"
      },
      {
        "name": "BeanPropertyWriter#_handleSelfReference(...4)",
        "body": "{\r\n    if (!ser.usesObjectId()) {\r\n        if (prov.isEnabled(SerializationFeature.FAIL_ON_SELF_REFERENCES)) {\r\n            // 05-Feb-2013, tatu: Usually a problem, but NOT if we are handling\r\n            // object id; this may be the case for BeanSerializers at least.\r\n            // 13-Feb-2014, tatu: another possible ok case: custom serializer\r\n            // (something OTHER than {@link BeanSerializerBase}\r\n            if (ser instanceof BeanSerializerBase) {\r\n                prov.reportBadDefinition(getType(), \"Direct self-reference leading to cycle\");\r\n            }\r\n        } else if (prov.isEnabled(SerializationFeature.WRITE_SELF_REFERENCES_AS_NULL)) {\r\n            if (_nullSerializer !\u003d null) {\r\n                // 23-Oct-2019, tatu: Tricky part -- caller does not specify if it\u0027s\r\n                //   \"as property\" (in JSON Object) or \"as element\" (JSON array, via\r\n                //   \u0027POJO-as-array\u0027). And since Afterburner calls method can not easily\r\n                //   start passing info either. So check generator to see...\r\n                //   (note: not considering ROOT context as possibility, does not seem legal)\r\n                if (!gen.getOutputContext().inArray()) {\r\n                    gen.writeFieldName(_name);\r\n                }\r\n                _nullSerializer.serialize(null, gen, prov);\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      },
      {
        "name": "BeanPropertyWriter#_findAndAddDynamic(...3)",
        "body": "{\r\n    PropertySerializerMap.SerializerAndMapResult result;\r\n    if (_nonTrivialBaseType !\u003d null) {\r\n        JavaType t \u003d provider.constructSpecializedType(_nonTrivialBaseType, type);\r\n        result \u003d map.findAndAddPrimarySerializer(t, provider, this);\r\n    } else {\r\n        result \u003d map.findAndAddPrimarySerializer(type, provider, this);\r\n    }\r\n    // did we get a new map of serializers? If so, start using it\r\n    if (map !\u003d result.map) {\r\n        _dynamicSerializers \u003d result.map;\r\n    }\r\n    return result.serializer;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter",
    "methodName": "serializeAsPlaceholder",
    "signature": "void serializeAsPlaceholder(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (_nullSerializer !\u003d null) {\r\n        _nullSerializer.serialize(null, gen, prov);\r\n    } else {\r\n        gen.writeNull();\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyWriter\n  Object\n  JsonGenerator\n  SerializerProvider\n  $r1 \u003d JsonSerializer _nullSerializer\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d JsonSerializer _nullSerializer\u003e\n  $r4.serialize(null, r2, r3)\n  goto B3\n}",
      "B2 {\n  r2.writeNull()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter",
    "methodName": "depositSchemaProperty",
    "signature": "void depositSchemaProperty(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (v !\u003d null) {\r\n        if (isRequired()) {\r\n            v.property(this);\r\n        } else {\r\n            v.optionalProperty(this);\r\n        }\r\n    }\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B4",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyWriter\n  JsonObjectFormatVisitor\n  SerializerProvider\n  if (r0 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $z0 \u003d r1.isRequired()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  r0.property(r1)\n  goto B4\n}",
      "B3 {\n  r0.optionalProperty(r1)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPropertyWriter#isRequired(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter",
    "methodName": "depositSchemaProperty",
    "signature": "void depositSchemaProperty(com.fasterxml.jackson.databind.node.ObjectNode,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    JavaType propType \u003d getSerializationType();\r\n    // 03-Dec-2010, tatu: SchemaAware REALLY should use JavaType, but alas\r\n    // it doesn\u0027t...\r\n    Type hint \u003d (propType \u003d\u003d null) ? getType() : propType.getRawClass();\r\n    JsonNode schemaNode;\r\n    // Maybe it already has annotated/statically configured serializer?\r\n    JsonSerializer\u003cObject\u003e ser \u003d getSerializer();\r\n    if (ser \u003d\u003d null) {\r\n        // nope\r\n        ser \u003d provider.findValueSerializer(getType(), this);\r\n    }\r\n    boolean isOptional \u003d !isRequired();\r\n    if (ser instanceof com.fasterxml.jackson.databind.jsonschema.SchemaAware) {\r\n        schemaNode \u003d ((com.fasterxml.jackson.databind.jsonschema.SchemaAware) ser).getSchema(provider, hint, isOptional);\r\n    } else {\r\n        schemaNode \u003d com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode();\r\n    }\r\n    _depositSchemaProperty(propertiesNode, schemaNode);\r\n}",
    "nodes": 12,
    "edges": 15,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B3 : If($r7 !\u003d null) → B4 | else → B5",
      "B5 : If($z0 !\u003d 0) → B6 | else → B7",
      "B8 : If($z1 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyWriter\n  ObjectNode\n  SerializerProvider\n  r1 \u003d r0.getSerializationType()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d r0.getType()\n  goto B3\n}",
      "B2 {\n  $r8 \u003d r1.getRawClass()\n}",
      "B3 {\n  r2 \u003d $r8\n  $r7 \u003d r0.getSerializer()\n  r9 \u003d $r7\n  if ($r7 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r6 \u003d r0.getType()\n  r9 \u003d r4.findValueSerializer($r6, r0)\n}",
      "B5 {\n  $z0 \u003d r0.isRequired()\n  if ($z0 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $z2 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z2 \u003d 0\n}",
      "B8 {\n  $z1 \u003d SchemaAware\n  if ($z1 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r5 \u003d SchemaAware) r9\n  r10 \u003d $r5.getSchema(r4, r2, $z2)\n  goto B11\n}",
      "B10 {\n  r10 \u003d JsonSchema.getDefaultSchemaNode()\n}",
      "B11 {\n  r0._depositSchemaProperty(r3, r10)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPropertyWriter#getSerializer(...0)",
        "body": "{\r\n    return _serializer;\r\n}"
      },
      {
        "name": "BeanPropertyWriter#getSerializationType(...0)",
        "body": "{\r\n    return _cfgSerializationType;\r\n}"
      },
      {
        "name": "BeanPropertyWriter#getType(...0)",
        "body": "{\r\n    return _declaredType;\r\n}"
      },
      {
        "name": "BeanPropertyWriter#_depositSchemaProperty(...2)",
        "body": "{\r\n    propertiesNode.set(getName(), schemaNode);\r\n}"
      },
      {
        "name": "BeanPropertyWriter#isRequired(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter",
    "methodName": "get",
    "signature": "java.lang.Object get(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return (_accessorMethod \u003d\u003d null) ? _field.get(bean) : _accessorMethod.invoke(bean, (Object[]) null);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyWriter\n  Object\n  $r1 \u003d Method _accessorMethod\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d Field _field\u003e\n  $r6 \u003d $r5.get(r2)\n  goto B3\n}",
      "B2 {\n  $r4 \u003d Method _accessorMethod\u003e\n  $r3 \u003d Object[]) null\n  $r6 \u003d $r4.invoke(r2, $r3)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanPropertyWriter",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    StringBuilder sb \u003d new StringBuilder(40);\r\n    sb.append(\"property \u0027\").append(getName()).append(\"\u0027 (\");\r\n    if (_accessorMethod !\u003d null) {\r\n        sb.append(\"via method \").append(_accessorMethod.getDeclaringClass().getName()).append(\"#\").append(_accessorMethod.getName());\r\n    } else if (_field !\u003d null) {\r\n        sb.append(\"field \\\"\").append(_field.getDeclaringClass().getName()).append(\"#\").append(_field.getName());\r\n    } else {\r\n        sb.append(\"virtual\");\r\n    }\r\n    if (_serializer \u003d\u003d null) {\r\n        sb.append(\", no static serializer\");\r\n    } else {\r\n        sb.append(\", static serializer of type \" + _serializer.getClass().getName());\r\n    }\r\n    sb.append(\u0027)\u0027);\r\n    return sb.toString();\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r5 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r6 \u003d\u003d null) → B3 | else → B4",
      "B5 : If($r28 !\u003d null) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyWriter\n  $r0 \u003d StringBuilder\n  new StringBuilder(40)\n  $r3 \u003d $r0.append(\"property \\\u0027\")\n  $r2 \u003d r1.getName()\n  $r4 \u003d $r3.append($r2)\n  $r4.append(\"\\\u0027 (\")\n  $r5 \u003d Method _accessorMethod\u003e\n  if ($r5 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r23 \u003d $r0.append(\"via method \")\n  $r20 \u003d Method _accessorMethod\u003e\n  $r21 \u003d $r20.getDeclaringClass()\n  $r22 \u003d $r21.getName()\n  $r24 \u003d $r23.append($r22)\n  $r27 \u003d $r24.append(\"#\")\n  $r25 \u003d Method _accessorMethod\u003e\n  $r26 \u003d $r25.getName()\n  $r27.append($r26)\n  goto B5\n}",
      "B2 {\n  $r6 \u003d Field _field\u003e\n  if ($r6 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r15 \u003d $r0.append(\"field \\\"\")\n  $r12 \u003d Field _field\u003e\n  $r13 \u003d $r12.getDeclaringClass()\n  $r14 \u003d $r13.getName()\n  $r16 \u003d $r15.append($r14)\n  $r19 \u003d $r16.append(\"#\")\n  $r17 \u003d Field _field\u003e\n  $r18 \u003d $r17.getName()\n  $r19.append($r18)\n  goto B5\n}",
      "B4 {\n  $r0.append(\"virtual\")\n}",
      "B5 {\n  $r28 \u003d JsonSerializer _serializer\u003e\n  if ($r28 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r0.append(\", no static serializer\")\n  goto B8\n}",
      "B7 {\n  $r7 \u003d JsonSerializer _serializer\u003e\n  $r8 \u003d $r7.getClass()\n  $r9 \u003d $r8.getName()\n  $r10 \u003d dynInvoke makeConcatWithConstants($r9)\n  $r0.append($r10)\n}",
      "B8 {\n  $r0.append(41)\n  $r11 \u003d $r0.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPropertyWriter#getName(...0)",
        "body": "{\r\n    return _name.getValue();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanSerializer",
    "methodName": "serialize",
    "signature": "void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (_objectIdWriter !\u003d null) {\r\n        // [databind#631]\r\n        gen.assignCurrentValue(bean);\r\n        _serializeWithObjectId(bean, gen, provider, true);\r\n        return;\r\n    }\r\n    gen.writeStartObject(bean);\r\n    if (_propertyFilterId !\u003d null) {\r\n        serializeFieldsFiltered(bean, gen, provider);\r\n    } else {\r\n        serializeFields(bean, gen, provider);\r\n    }\r\n    gen.writeEndObject();\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r4 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  BeanSerializer\n  Object\n  JsonGenerator\n  SerializerProvider\n  $r1 \u003d ObjectIdWriter _objectIdWriter\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r2.assignCurrentValue(r3)\n  r0._serializeWithObjectId(r3, r2, r5, 1)\n  return\n}",
      "B2 {\n  r2.writeStartObject(r3)\n  $r4 \u003d Object _propertyFilterId\u003e\n  if ($r4 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  r0.serializeFieldsFiltered(r3, r2, r5)\n  goto B5\n}",
      "B4 {\n  r0.serializeFields(r3, r2, r5)\n}",
      "B5 {\n  r2.writeEndObject()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanSerializer#serializeFields(...3)",
        "body": "(source not found)"
      },
      {
        "name": "BeanSerializer#_serializeWithObjectId(...4)",
        "body": "(source not found)"
      },
      {
        "name": "BeanSerializer#serializeFieldsFiltered(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanSerializerBuilder",
    "methodName": "setFilteredProperties",
    "signature": "void setFilteredProperties(com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])",
    "visibility": "public",
    "body": "{\r\n    if (properties !\u003d null) {\r\n        if (properties.length !\u003d _properties.size()) {\r\n            // as per [databind#1612]\r\n            throw new IllegalArgumentException(String.format(\"Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)\", properties.length, _properties.size()));\r\n        }\r\n    }\r\n    _filteredProperties \u003d properties;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($i1 \u003d\u003d $i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  BeanSerializerBuilder\n  BeanPropertyWriter[]\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $i1 \u003d lengthof r0\n  $r2 \u003d List _properties\u003e\n  $i0 \u003d $r2.size()\n  if ($i1 \u003d\u003d $i0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d IllegalArgumentException\n  $r4 \u003d Object)[2]\n  $i2 \u003d lengthof r0\n  $r5 \u003d Integer.valueOf($i2)\n  $r4[0] \u003d $r5\n  $r6 \u003d List _properties\u003e\n  $i3 \u003d $r6.size()\n  $r7 \u003d Integer.valueOf($i3)\n  $r4[1] \u003d $r7\n  $r8 \u003d String.format(\"Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)\", $r4)\n  new IllegalArgumentException($r8)\n  throw $r3\n}",
      "B3 {\n  BeanPropertyWriter[] _filteredProperties\u003e \u003d r0\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanSerializerBuilder",
    "methodName": "setTypeId",
    "signature": "void setTypeId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "visibility": "public",
    "body": "{\r\n    // Not legal to use multiple ones...\r\n    if (_typeId !\u003d null) {\r\n        throw new IllegalArgumentException(\"Multiple type ids specified with \" + _typeId + \" and \" + idProp);\r\n    }\r\n    _typeId \u003d idProp;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanSerializerBuilder\n  AnnotatedMember\n  $r1 \u003d AnnotatedMember _typeId\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IllegalArgumentException\n  $r4 \u003d AnnotatedMember _typeId\u003e\n  $r6 \u003d String.valueOf($r4)\n  $r5 \u003d String.valueOf(r2)\n  $r7 \u003d dynInvoke makeConcatWithConstants($r6, $r5)\n  new IllegalArgumentException($r7)\n  throw $r3\n}",
      "B2 {\n  AnnotatedMember _typeId\u003e \u003d r2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanSerializerBuilder",
    "methodName": "hasProperties",
    "signature": "boolean hasProperties()",
    "visibility": "public",
    "body": "{\r\n    return (_properties !\u003d null) \u0026\u0026 (_properties.size() \u003e 0);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($i0 \u003c\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  BeanSerializerBuilder\n  $r1 \u003d List _properties\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d List _properties\u003e\n  $i0 \u003d $r2.size()\n  if ($i0 \u003c\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanSerializerBuilder",
    "methodName": "build",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer build()",
    "visibility": "public",
    "body": "{\r\n    // [databind#2789]: There can be a case wherein `_typeId` is used, but\r\n    // nothing else. Rare but has happened; so force access.\r\n    if (_typeId !\u003d null) {\r\n        if (_config.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\r\n            _typeId.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\r\n        }\r\n    }\r\n    if (_anyGetter !\u003d null) {\r\n        _anyGetter.fixAccess(_config);\r\n    }\r\n    BeanPropertyWriter[] properties;\r\n    // No properties, any getter or object id writer?\r\n    // No real serializer; caller gets to handle\r\n    if (_properties \u003d\u003d null || _properties.isEmpty()) {\r\n        if (_anyGetter \u003d\u003d null \u0026\u0026 _objectIdWriter \u003d\u003d null) {\r\n            // NOTE! Caller may still call `createDummy()` later on\r\n            return null;\r\n        }\r\n        properties \u003d NO_PROPERTIES;\r\n    } else {\r\n        properties \u003d _properties.toArray(new BeanPropertyWriter[_properties.size()]);\r\n        if (_config.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\r\n            for (int i \u003d 0, end \u003d properties.length; i \u003c end; ++i) {\r\n                properties[i].fixAccess(_config);\r\n            }\r\n        }\r\n    }\r\n    // 27-Apr-2017, tatu: Verify that filtered-properties settings are compatible\r\n    if (_filteredProperties !\u003d null) {\r\n        if (_filteredProperties.length !\u003d _properties.size()) {\r\n            // lgtm [java/dereferenced-value-may-be-null]\r\n            throw new IllegalStateException(String.format(\"Mismatch between `properties` size (%d), `filteredProperties` (%s): should have as many (or `null` for latter)\", _properties.size(), _filteredProperties.length));\r\n        }\r\n    }\r\n    return new BeanSerializer(_beanDesc.getType(), this, properties, _filteredProperties);\r\n}",
    "nodes": 19,
    "edges": 27,
    "cc": 10,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z2 \u003d\u003d false) → B2 | else → B3",
      "B3 : If($r34 \u003d\u003d null) → B4 | else → B5",
      "B5 : If($r2 \u003d\u003d null) → B6 | else → B7",
      "B6 : If($z0 \u003d\u003d false) → B7 | else → B11",
      "B7 : If($r3 !\u003d null) → B8 | else → B10",
      "B8 : If($r17 !\u003d null) → B9 | else → B10",
      "B11 : If($z1 \u003d\u003d false) → B12 | else → B15",
      "B13 : If(i6 \u003e\u003d i5) → B14 | else → B15",
      "B15 : If($r36 \u003d\u003d null) → B16 | else → B18",
      "B16 : If($i1 \u003d\u003d $i0) → B17 | else → B18"
    ],
    "blockList": [
      "B0 {\n  BeanSerializerBuilder\n  $r1 \u003d AnnotatedMember _typeId\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r30 \u003d SerializationConfig _config\u003e\n  $r29 \u003d MapperFeature CAN_OVERRIDE_ACCESS_MODIFIERS\u003e\n  $z2 \u003d $r30.isEnabled($r29)\n  if ($z2 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r33 \u003d AnnotatedMember _typeId\u003e\n  $r32 \u003d SerializationConfig _config\u003e\n  $r31 \u003d MapperFeature OVERRIDE_PUBLIC_ACCESS_MODIFIERS\u003e\n  $z3 \u003d $r32.isEnabled($r31)\n  $r33.fixAccess($z3)\n}",
      "B3 {\n  $r34 \u003d AnyGetterWriter _anyGetter\u003e\n  if ($r34 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r28 \u003d AnyGetterWriter _anyGetter\u003e\n  $r27 \u003d SerializationConfig _config\u003e\n  $r28.fixAccess($r27)\n}",
      "B5 {\n  $r2 \u003d List _properties\u003e\n  if ($r2 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r18 \u003d List _properties\u003e\n  $z0 \u003d $r18.isEmpty()\n  if ($z0 \u003d\u003d false) goto B7 else B11\n}",
      "B7 {\n  $r3 \u003d AnyGetterWriter _anyGetter\u003e\n  if ($r3 !\u003d null) goto B8 else B10\n}",
      "B8 {\n  $r17 \u003d ObjectIdWriter _objectIdWriter\u003e\n  if ($r17 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  r35 \u003d BeanPropertyWriter[] NO_PROPERTIES\u003e\n  goto B15\n}",
      "B11 {\n  $r20 \u003d List _properties\u003e\n  $r19 \u003d List _properties\u003e\n  $i4 \u003d $r19.size()\n  $r21 \u003d BeanPropertyWriter)[$i4]\n  $r22 \u003d $r20.toArray($r21)\n  r35 \u003d BeanPropertyWriter[]) $r22\n  $r24 \u003d SerializationConfig _config\u003e\n  $r23 \u003d MapperFeature CAN_OVERRIDE_ACCESS_MODIFIERS\u003e\n  $z1 \u003d $r24.isEnabled($r23)\n  if ($z1 \u003d\u003d false) goto B12 else B15\n}",
      "B12 {\n  i6 \u003d 0\n  i5 \u003d lengthof r35\n}",
      "B13 {\n  if (i6 \u003e\u003d i5) goto B14 else B15\n}",
      "B14 {\n  $r26 \u003d r35[i6]\n  $r25 \u003d SerializationConfig _config\u003e\n  $r26.fixAccess($r25)\n  i6 \u003d i6 + 1\n  goto B13\n}",
      "B15 {\n  $r36 \u003d BeanPropertyWriter[] _filteredProperties\u003e\n  if ($r36 \u003d\u003d null) goto B16 else B18\n}",
      "B16 {\n  $r8 \u003d BeanPropertyWriter[] _filteredProperties\u003e\n  $i1 \u003d lengthof $r8\n  $r9 \u003d List _properties\u003e\n  $i0 \u003d $r9.size()\n  if ($i1 \u003d\u003d $i0) goto B17 else B18\n}",
      "B17 {\n  $r10 \u003d IllegalStateException\n  $r11 \u003d Object)[2]\n  $r12 \u003d List _properties\u003e\n  $i2 \u003d $r12.size()\n  $r13 \u003d Integer.valueOf($i2)\n  $r11[0] \u003d $r13\n  $r14 \u003d BeanPropertyWriter[] _filteredProperties\u003e\n  $i3 \u003d lengthof $r14\n  $r15 \u003d Integer.valueOf($i3)\n  $r11[1] \u003d $r15\n  $r16 \u003d String.format(\"Mismatch between `properties` size (%d), `filteredProperties` (%s): should have as many (or `null` for latter)\", $r11)\n  new IllegalStateException($r16)\n  throw $r10\n}",
      "B18 {\n  $r4 \u003d BeanSerializer\n  $r5 \u003d BeanDescription _beanDesc\u003e\n  $r7 \u003d $r5.getType()\n  $r6 \u003d BeanPropertyWriter[] _filteredProperties\u003e\n  new BeanSerializer($r7, r0, r35, $r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B15",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B13",
      "B15 --\u003e B16",
      "B15 --\u003e B18",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "methodName": "withConfig",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerFactory withConfig(com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig)",
    "visibility": "public",
    "body": "{\r\n    if (_factoryConfig \u003d\u003d config) {\r\n        return this;\r\n    }\r\n    /* 22-Nov-2010, tatu: Handling of subtypes is tricky if we do immutable-with-copy-ctor;\r\n         *    and we pretty much have to here either choose between losing subtype instance\r\n         *    when registering additional serializers, or losing serializers.\r\n         *    Instead, let\u0027s actually just throw an error if this method is called when subtype\r\n         *    has not properly overridden this method; this to indicate problem as soon as possible.\r\n         */\r\n    if (getClass() !\u003d BeanSerializerFactory.class) {\r\n        throw new IllegalStateException(\"Subtype of BeanSerializerFactory (\" + getClass().getName() + \") has not properly overridden method \u0027withAdditionalSerializers\u0027: cannot instantiate subtype with \" + \"additional serializer definitions\");\r\n    }\r\n    return new BeanSerializerFactory(config);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2",
      "B2 : If($r3 \u003d\u003d class \"Lcom/fasterxml/jackson/databind/ser/BeanSerializerFactory;\") → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  BeanSerializerFactory\n  SerializerFactoryConfig\n  $r2 \u003d SerializerFactoryConfig _factoryConfig\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d r0.getClass()\n  if ($r3 \u003d\u003d class \"Lcom/fasterxml/jackson/databind/ser/BeanSerializerFactory;\") goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d IllegalStateException\n  $r6 \u003d r0.getClass()\n  $r7 \u003d $r6.getName()\n  $r8 \u003d dynInvoke makeConcatWithConstants($r7)\n  new IllegalStateException($r8)\n  throw $r5\n}",
      "B4 {\n  $r4 \u003d BeanSerializerFactory\n  new BeanSerializerFactory(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanSerializerFactory#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "methodName": "createSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer createSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    // Very first thing, let\u0027s check if there is explicit serializer annotation:\r\n    final SerializationConfig config \u003d prov.getConfig();\r\n    BeanDescription beanDesc \u003d config.introspect(origType);\r\n    JsonSerializer\u003c?\u003e ser \u003d findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\r\n    if (ser !\u003d null) {\r\n        return (JsonSerializer\u003cObject\u003e) ser;\r\n    }\r\n    boolean staticTyping;\r\n    // Next: we may have annotations that further indicate actual type to use (a super type)\r\n    final AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\r\n    JavaType type;\r\n    if (intr \u003d\u003d null) {\r\n        type \u003d origType;\r\n    } else {\r\n        try {\r\n            type \u003d intr.refineSerializationType(config, beanDesc.getClassInfo(), origType);\r\n        } catch (JsonMappingException e) {\r\n            return prov.reportBadTypeDefinition(beanDesc, e.getMessage());\r\n        }\r\n    }\r\n    if (type \u003d\u003d origType) {\r\n        // no changes, won\u0027t force static typing\r\n        staticTyping \u003d false;\r\n    } else {\r\n        // changes; assume static typing; plus, need to re-introspect if class differs\r\n        staticTyping \u003d true;\r\n        if (!type.hasRawClass(origType.getRawClass())) {\r\n            beanDesc \u003d config.introspect(type);\r\n        }\r\n    }\r\n    // Slight detour: do we have a Converter to consider?\r\n    Converter\u003cObject, Object\u003e conv \u003d beanDesc.findSerializationConverter();\r\n    if (conv \u003d\u003d null) {\r\n        // no, simple\r\n        return (JsonSerializer\u003cObject\u003e) _createSerializer2(prov, type, beanDesc, staticTyping);\r\n    }\r\n    JavaType delegateType \u003d conv.getOutputType(prov.getTypeFactory());\r\n    // One more twist, as per [databind#288]; probably need to get new BeanDesc\r\n    if (!delegateType.hasRawClass(type.getRawClass())) {\r\n        beanDesc \u003d config.introspect(delegateType);\r\n        // [#359]: explicitly check (again) for @JsonSerializer...\r\n        ser \u003d findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\r\n    }\r\n    // [databind#731]: Should skip if nominally java.lang.Object\r\n    if (ser \u003d\u003d null \u0026\u0026 !delegateType.isJavaLangObject()) {\r\n        ser \u003d _createSerializer2(prov, delegateType, beanDesc, true);\r\n    }\r\n    return new StdDelegatingSerializer(conv, delegateType, ser);\r\n}",
    "nodes": 18,
    "edges": 22,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r19 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(r5 !\u003d null) → B3 | else → B4",
      "B6 : If(r20 !\u003d r2) → B7 | else → B8",
      "B8 : If($z0 !\u003d 0) → B9 | else → B10",
      "B10 : If($r21 !\u003d null) → B11 | else → B12",
      "B12 : If($z1 !\u003d 0) → B13 | else → B14",
      "B14 : If(r19 !\u003d null) → B15 | else → B17",
      "B15 : If($z2 !\u003d 0) → B16 | else → B17"
    ],
    "blockList": [
      "B0 {\n  BeanSerializerFactory\n  SerializerProvider\n  JavaType\n  r1 \u003d r0.getConfig()\n  r18 \u003d r1.introspect(r2)\n  $r4 \u003d r18.getClassInfo()\n  r19 \u003d r3.findSerializerFromAnnotation(r0, $r4)\n  if (r19 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r5 \u003d r1.getAnnotationIntrospector()\n  if (r5 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  r20 \u003d r2\n  goto B6\n}",
      "B4 {\n  $r6 \u003d r18.getClassInfo()\n  r20 \u003d r5.refineSerializationType(r1, $r6, r2)\n  goto B6\n}",
      "B5 {\n  $r13 :\u003d @caughtexception\n  $r15 \u003d $r13.getMessage()\n  $r14 \u003d Object)[0]\n  $r16 \u003d r0.reportBadTypeDefinition(r18, $r15, $r14)\n  $r17 \u003d JsonSerializer) $r16\n  return\n}",
      "B6 {\n  if (r20 !\u003d r2) goto B7 else B8\n}",
      "B7 {\n  z3 \u003d 0\n  goto B10\n}",
      "B8 {\n  z3 \u003d 1\n  $r7 \u003d r2.getRawClass()\n  $z0 \u003d r20.hasRawClass($r7)\n  if ($z0 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  r18 \u003d r1.introspect(r20)\n}",
      "B10 {\n  $r21 \u003d r18.findSerializationConverter()\n  if ($r21 !\u003d null) goto B11 else B12\n}",
      "B11 {\n  $r12 \u003d r3._createSerializer2(r0, r20, r18, z3)\n  return\n}",
      "B12 {\n  $r8 \u003d r0.getTypeFactory()\n  r9 \u003d $r21.getOutputType($r8)\n  $r10 \u003d r20.getRawClass()\n  $z1 \u003d r9.hasRawClass($r10)\n  if ($z1 !\u003d 0) goto B13 else B14\n}",
      "B13 {\n  r18 \u003d r1.introspect(r9)\n  $r11 \u003d r18.getClassInfo()\n  r19 \u003d r3.findSerializerFromAnnotation(r0, $r11)\n}",
      "B14 {\n  if (r19 !\u003d null) goto B15 else B17\n}",
      "B15 {\n  $z2 \u003d r9.isJavaLangObject()\n  if ($z2 !\u003d 0) goto B16 else B17\n}",
      "B16 {\n  r19 \u003d r3._createSerializer2(r0, r9, r18, 1)\n}",
      "B17 {\n  $r22 \u003d StdDelegatingSerializer\n  new StdDelegatingSerializer($r21, r9, r19)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B17",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanSerializerFactory#findSerializerFromAnnotation(...2)",
        "body": "(source not found)"
      },
      {
        "name": "BeanSerializerFactory#_createSerializer2(...4)",
        "body": "{\r\n    JsonSerializer\u003c?\u003e ser \u003d null;\r\n    final SerializationConfig config \u003d prov.getConfig();\r\n    // Container types differ from non-container types\r\n    // (note: called method checks for module-provided serializers)\r\n    if (type.isContainerType()) {\r\n        if (!staticTyping) {\r\n            staticTyping \u003d usesStaticTyping(config, beanDesc);\r\n        }\r\n        // 03-Aug-2012, tatu: As per [databind#40], may require POJO serializer...\r\n        ser \u003d buildContainerSerializer(prov, type, beanDesc, staticTyping);\r\n        // Will return right away, since called method does post-processing:\r\n        if (ser !\u003d null) {\r\n            return ser;\r\n        }\r\n    } else {\r\n        if (type.isReferenceType()) {\r\n            ser \u003d findReferenceSerializer(prov, (ReferenceType) type, beanDesc, staticTyping);\r\n        } else {\r\n            // Modules may provide serializers of POJO types:\r\n            for (Serializers serializers : customSerializers()) {\r\n                ser \u003d serializers.findSerializer(config, type, beanDesc);\r\n                if (ser !\u003d null) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // 25-Jun-2015, tatu: Then JsonSerializable, @JsonValue etc. NOTE! Prior to 2.6,\r\n        //    this call was BEFORE custom serializer lookup, which was wrong.\r\n        if (ser \u003d\u003d null) {\r\n            ser \u003d findSerializerByAnnotations(prov, type, beanDesc);\r\n        }\r\n    }\r\n    if (ser \u003d\u003d null) {\r\n        // Otherwise, we will check \"primary types\"; both marker types that\r\n        // indicate specific handling (JsonSerializable), or main types that have\r\n        // precedence over container types\r\n        ser \u003d findSerializerByLookup(type, config, beanDesc, staticTyping);\r\n        if (ser \u003d\u003d null) {\r\n            ser \u003d findSerializerByPrimaryType(prov, type, beanDesc, staticTyping);\r\n            if (ser \u003d\u003d null) {\r\n                // And this is where this class comes in: if type is not a\r\n                // known \"primary JDK type\", perhaps it\u0027s a bean? We can still\r\n                // get a null, if we can\u0027t find a single suitable bean property.\r\n                ser \u003d findBeanOrAddOnSerializer(prov, type, beanDesc, staticTyping);\r\n                // 18-Sep-2014, tatu: Actually, as per [jackson-databind#539], need to get\r\n                //   \u0027unknown\u0027 serializer assigned earlier, here, so that it gets properly\r\n                //   post-processed\r\n                if (ser \u003d\u003d null) {\r\n                    ser \u003d prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (ser !\u003d null) {\r\n        // [databind#120]: Allow post-processing\r\n        if (_factoryConfig.hasSerializerModifiers()) {\r\n            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\r\n                ser \u003d mod.modifySerializer(config, beanDesc, ser);\r\n            }\r\n        }\r\n    }\r\n    return ser;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "methodName": "findBeanOrAddOnSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer findBeanOrAddOnSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)",
    "visibility": "public",
    "body": "{\r\n    // First things first: we know some types are not beans...\r\n    if (!isPotentialBeanType(type.getRawClass())) {\r\n        // 03-Aug-2012, tatu: Except we do need to allow serializers for Enums,\r\n        //   as per [databind#24], [databind#2576]\r\n        if (!ClassUtil.isEnumType(type.getRawClass())) {\r\n            return null;\r\n        }\r\n    }\r\n    return constructBeanOrAddOnSerializer(prov, type, beanDesc, staticTyping);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If($z2 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  BeanSerializerFactory\n  SerializerProvider\n  JavaType\n  BeanDescription\n  z1 :\u003d @parameter3: boolean\n  $r2 \u003d r1.getRawClass()\n  $z0 \u003d r0.isPotentialBeanType($r2)\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $r6 \u003d r1.getRawClass()\n  $z2 \u003d ClassUtil.isEnumType($r6)\n  if ($z2 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r5 \u003d r0.constructBeanOrAddOnSerializer(r3, r1, r4, z1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanSerializerFactory#constructBeanOrAddOnSerializer(...4)",
        "body": "{\r\n    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\r\n    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\r\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\r\n        return prov.getUnknownTypeSerializer(Object.class);\r\n        //            throw new IllegalArgumentException(\"Cannot create bean serializer for Object.class\");\r\n    }\r\n    JsonSerializer\u003c?\u003e ser \u003d _findUnsupportedTypeSerializer(prov, type, beanDesc);\r\n    if (ser !\u003d null) {\r\n        return (JsonSerializer\u003cObject\u003e) ser;\r\n    }\r\n    // 02-Sep-2021, tatu: [databind#3244] Should not try \"proper\" serialization of\r\n    //      things like ObjectMapper, JsonParser or JsonGenerator...\r\n    if (_isUnserializableJacksonType(prov, type)) {\r\n        return new ToEmptyObjectSerializer(type);\r\n    }\r\n    // 08-Feb-2025, tatu: [databind#4963] Need to have explicit serializer for\r\n    //   Map.Entry type that are from JDK (for others just use regular introspection)\r\n    if (type.isTypeOrSubTypeOf(Map.Entry.class) \u0026\u0026 ClassUtil.isJDKClass(type.getRawClass())) {\r\n        return (JsonSerializer\u003cObject\u003e) (JsonSerializer\u003c?\u003e) MapEntryAsPOJOSerializer.create(prov, type);\r\n    }\r\n    final SerializationConfig config \u003d prov.getConfig();\r\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\r\n    builder.setConfig(config);\r\n    // First: any detectable (auto-detect, annotations) properties to serialize?\r\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\r\n    if (props \u003d\u003d null) {\r\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\r\n    } else {\r\n        props \u003d removeOverlappingTypeIds(prov, beanDesc, builder, props);\r\n    }\r\n    // [databind#638]: Allow injection of \"virtual\" properties:\r\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\r\n    // [JACKSON-440] Need to allow modification bean properties to serialize:\r\n    if (_factoryConfig.hasSerializerModifiers()) {\r\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\r\n            props \u003d mod.changeProperties(config, beanDesc, props);\r\n        }\r\n    }\r\n    // Any properties to suppress?\r\n    // 10-Dec-2021, tatu: [databind#3305] Some JDK types need special help\r\n    //    (initially, `CharSequence` with its `isEmpty()` default impl)\r\n    props \u003d filterUnwantedJDKProperties(config, beanDesc, props);\r\n    props \u003d filterBeanProperties(config, beanDesc, props);\r\n    // Need to allow reordering of properties to serialize\r\n    if (_factoryConfig.hasSerializerModifiers()) {\r\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\r\n            props \u003d mod.orderProperties(config, beanDesc, props);\r\n        }\r\n    }\r\n    // And if Object Id is needed, some preparation for that as well: better\r\n    // do before view handling, mostly for the custom id case which needs\r\n    // access to a property\r\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\r\n    builder.setProperties(props);\r\n    builder.setFilterId(findFilterId(config, beanDesc));\r\n    AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\r\n    if (anyGetter !\u003d null) {\r\n        JavaType anyType \u003d anyGetter.getType();\r\n        // copied from BasicSerializerFactory.buildMapSerializer():\r\n        JavaType valueType \u003d anyType.getContentType();\r\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\r\n        // last 2 nulls; don\u0027t know key, value serializers (yet)\r\n        // 23-Feb-2015, tatu: As per [databind#705], need to support custom serializers\r\n        JsonSerializer\u003c?\u003e anySer \u003d findSerializerFromAnnotation(prov, anyGetter);\r\n        if (anySer \u003d\u003d null) {\r\n            // TODO: support \u0027@JsonIgnoreProperties\u0027 with any setter?\r\n            anySer \u003d MapSerializer.construct(/* ignored props*/\r\n            (Set\u003cString\u003e) null, anyType, config.isEnabled(MapperFeature.USE_STATIC_TYPING), typeSer, null, null, /*filterId*/\r\n            null);\r\n        }\r\n        // TODO: can we find full PropertyName?\r\n        PropertyName name \u003d PropertyName.construct(anyGetter.getName());\r\n        BeanProperty.Std anyProp \u003d new BeanProperty.Std(name, valueType, null, anyGetter, PropertyMetadata.STD_OPTIONAL);\r\n        // Check if there is an accessor exposed for the anyGetter\r\n        BeanPropertyWriter anyGetterProp \u003d null;\r\n        int anyGetterIndex \u003d -1;\r\n        for (int i \u003d 0; i \u003c props.size(); i++) {\r\n            BeanPropertyWriter prop \u003d props.get(i);\r\n            // Either any-getter as field...\r\n            if (Objects.equals(prop.getName(), anyGetter.getName()) || // or as method\r\n            Objects.equals(prop.getMember().getMember(), anyGetter.getMember())) {\r\n                anyGetterProp \u003d prop;\r\n                anyGetterIndex \u003d i;\r\n                break;\r\n            }\r\n        }\r\n        if (anyGetterIndex !\u003d -1) {\r\n            // There is prop is already in place, just need to replace it\r\n            AnyGetterWriter anyGetterWriter \u003d new AnyGetterWriter(anyGetterProp, anyProp, anyGetter, anySer);\r\n            props.set(anyGetterIndex, anyGetterWriter);\r\n        } else {\r\n            // Otherwise just add it at the end, but won\u0027t be sorted...\r\n            // This is case where JsonAnyGetter is private/protected,\r\n            BeanPropertyDefinition anyGetterPropDef \u003d SimpleBeanPropertyDefinition.construct(config, anyGetter, name);\r\n            BeanPropertyWriter anyPropWriter \u003d _constructWriter(prov, anyGetterPropDef, new PropertyBuilder(config, beanDesc), staticTyping, anyGetter);\r\n            props.add(new AnyGetterWriter(anyPropWriter, anyProp, anyGetter, anySer));\r\n        }\r\n    }\r\n    // Next: need to gather view information, if any:\r\n    processViews(config, builder);\r\n    // Finally: let interested parties mess with the result bit more...\r\n    if (_factoryConfig.hasSerializerModifiers()) {\r\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\r\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\r\n        }\r\n    }\r\n    try {\r\n        ser \u003d builder.build();\r\n    } catch (RuntimeException e) {\r\n        return prov.reportBadTypeDefinition(beanDesc, \"Failed to construct BeanSerializer for %s: (%s) %s\", beanDesc.getType(), e.getClass().getName(), e.getMessage());\r\n    }\r\n    if (ser \u003d\u003d null) {\r\n        // Means that no properties were found\r\n        // 21-Aug-2020, tatu: Empty Records should be fine tho\r\n        // 18-Mar-2022, yawkat: [databind#3417] Record will also appear empty when missing\r\n        // reflection info. needsReflectionConfiguration will check that a constructor is present,\r\n        // else we fall back to the empty bean error msg\r\n        if (type.isRecordType() \u0026\u0026 !NativeImageUtil.needsReflectionConfiguration(type.getRawClass())) {\r\n            return builder.createDummy();\r\n        }\r\n        // 06-Aug-2019, tatu: As per [databind#2390], we need to check for add-ons here,\r\n        //    before considering fallbacks\r\n        ser \u003d (JsonSerializer\u003cObject\u003e) findSerializerByAddonType(config, type, beanDesc, staticTyping);\r\n        if (ser \u003d\u003d null) {\r\n            // If we get this far, there were no properties found, so no regular BeanSerializer\r\n            // would be constructed. But, couple of exceptions.\r\n            // First: if there are known annotations, just create \u0027empty bean\u0027 serializer\r\n            if (beanDesc.hasKnownClassAnnotations()) {\r\n                return builder.createDummy();\r\n            }\r\n        }\r\n    }\r\n    return (JsonSerializer\u003cObject\u003e) ser;\r\n}"
      },
      {
        "name": "BeanSerializerFactory#isPotentialBeanType(...1)",
        "body": "{\r\n    return (ClassUtil.canBeABeanType(type) \u003d\u003d null) \u0026\u0026 !ClassUtil.isProxyType(type);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "methodName": "findPropertyTypeSerializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeSerializer findPropertyTypeSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "visibility": "public",
    "body": "{\r\n    AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\r\n    TypeResolverBuilder\u003c?\u003e b \u003d ai.findPropertyTypeResolver(config, accessor, baseType);\r\n    TypeSerializer typeSer;\r\n    // Defaulting: if no annotations on member, check value class\r\n    if (b \u003d\u003d null) {\r\n        typeSer \u003d createTypeSerializer(config, baseType);\r\n    } else {\r\n        Collection\u003cNamedType\u003e subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypesByClass(config, accessor, baseType);\r\n        typeSer \u003d b.buildTypeSerializer(config, baseType, subtypes);\r\n    }\r\n    return typeSer;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanSerializerFactory\n  JavaType\n  SerializationConfig\n  AnnotatedMember\n  r1 \u003d r0.getAnnotationIntrospector()\n  r4 \u003d r1.findPropertyTypeResolver(r0, r2, r3)\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r8 \u003d r7.createTypeSerializer(r0, r3)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r0.getSubtypeResolver()\n  r6 \u003d $r5.collectAndResolveSubtypesByClass(r0, r2, r3)\n  r8 \u003d r4.buildTypeSerializer(r0, r3, r6)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanSerializerFactory#createTypeSerializer(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "methodName": "findPropertyContentTypeSerializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeSerializer findPropertyContentTypeSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "visibility": "public",
    "body": "{\r\n    JavaType contentType \u003d containerType.getContentType();\r\n    AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\r\n    TypeResolverBuilder\u003c?\u003e b \u003d ai.findPropertyContentTypeResolver(config, accessor, containerType);\r\n    TypeSerializer typeSer;\r\n    // Defaulting: if no annotations on member, check value class\r\n    if (b \u003d\u003d null) {\r\n        typeSer \u003d createTypeSerializer(config, contentType);\r\n    } else {\r\n        Collection\u003cNamedType\u003e subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypesByClass(config, accessor, contentType);\r\n        typeSer \u003d b.buildTypeSerializer(config, contentType, subtypes);\r\n    }\r\n    return typeSer;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r5 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanSerializerFactory\n  JavaType\n  SerializationConfig\n  AnnotatedMember\n  r1 \u003d r0.getContentType()\n  r3 \u003d r2.getAnnotationIntrospector()\n  r5 \u003d r3.findPropertyContentTypeResolver(r2, r4, r0)\n  if (r5 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r9 \u003d r8.createTypeSerializer(r2, r1)\n  goto B3\n}",
      "B2 {\n  $r6 \u003d r2.getSubtypeResolver()\n  r7 \u003d $r6.collectAndResolveSubtypesByClass(r2, r4, r1)\n  r9 \u003d r5.buildTypeSerializer(r2, r1, r7)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanSerializerFactory#createTypeSerializer(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer",
    "methodName": "serializeWithType",
    "signature": "void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "visibility": "public",
    "body": "{\r\n    /* 10-Dec-2014, tatu: Not sure if this can be made to work reliably;\r\n         *   but for sure delegating to default implementation will not work. So:\r\n         */\r\n    if (_objectIdWriter !\u003d null) {\r\n        _serializeWithObjectId(bean, gen, provider, typeSer);\r\n        return;\r\n    }\r\n    WritableTypeId typeIdDef \u003d _typeIdDef(typeSer, bean, JsonToken.START_ARRAY);\r\n    typeSer.writeTypePrefix(gen, typeIdDef);\r\n    gen.assignCurrentValue(bean);\r\n    serializeAsArray(bean, gen, provider);\r\n    typeSer.writeTypeSuffix(gen, typeIdDef);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanAsArraySerializer\n  Object\n  JsonGenerator\n  SerializerProvider\n  TypeSerializer\n  $r1 \u003d ObjectIdWriter _objectIdWriter\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r0._serializeWithObjectId(r3, r6, r7, r2)\n  return\n}",
      "B2 {\n  $r4 \u003d JsonToken START_ARRAY\u003e\n  r5 \u003d r0._typeIdDef(r2, r3, $r4)\n  r2.writeTypePrefix(r6, r5)\n  r6.assignCurrentValue(r3)\n  r0.serializeAsArray(r3, r6, r7)\n  r2.writeTypeSuffix(r6, r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanAsArraySerializer#serializeAsArray(...3)",
        "body": "{\r\n    final BeanPropertyWriter[] props;\r\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getActiveView() !\u003d null) {\r\n        props \u003d _filteredProps;\r\n    } else {\r\n        props \u003d _props;\r\n    }\r\n    int i \u003d 0;\r\n    try {\r\n        for (final int len \u003d props.length; i \u003c len; ++i) {\r\n            BeanPropertyWriter prop \u003d props[i];\r\n            if (prop \u003d\u003d null) {\r\n                // can have nulls in filtered list; but if so, MUST write placeholders\r\n                gen.writeNull();\r\n            } else {\r\n                prop.serializeAsElement(bean, gen, provider);\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        wrapAndThrow(provider, e, bean, props[i].getName());\r\n    } catch (StackOverflowError e) {\r\n        DatabindException mapE \u003d JsonMappingException.from(gen, \"Infinite recursion (StackOverflowError)\", e);\r\n        mapE.prependPath(bean, props[i].getName());\r\n        throw mapE;\r\n    }\r\n}"
      },
      {
        "name": "BeanAsArraySerializer#_serializeWithObjectId(...4)",
        "body": "(source not found)"
      },
      {
        "name": "BeanAsArraySerializer#_typeIdDef(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer",
    "methodName": "serialize",
    "signature": "void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED) \u0026\u0026 hasSingleElement(provider)) {\r\n        serializeAsArray(bean, gen, provider);\r\n        return;\r\n    }\r\n    /* note: it is assumed here that limitations (type id, object id,\r\n         * any getter, filtering) have already been checked; so code here\r\n         * is trivial.\r\n         */\r\n    gen.writeStartArray(bean);\r\n    serializeAsArray(bean, gen, provider);\r\n    gen.writeEndArray();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  BeanAsArraySerializer\n  Object\n  JsonGenerator\n  SerializerProvider\n  $r1 \u003d SerializationFeature WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED\u003e\n  $z0 \u003d r0.isEnabled($r1)\n  if ($z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $z1 \u003d r4.hasSingleElement(r0)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  r4.serializeAsArray(r3, r2, r0)\n  return\n}",
      "B3 {\n  r2.writeStartArray(r3)\n  r4.serializeAsArray(r3, r2, r0)\n  r2.writeEndArray()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanAsArraySerializer#serializeAsArray(...3)",
        "body": "{\r\n    final BeanPropertyWriter[] props;\r\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getActiveView() !\u003d null) {\r\n        props \u003d _filteredProps;\r\n    } else {\r\n        props \u003d _props;\r\n    }\r\n    int i \u003d 0;\r\n    try {\r\n        for (final int len \u003d props.length; i \u003c len; ++i) {\r\n            BeanPropertyWriter prop \u003d props[i];\r\n            if (prop \u003d\u003d null) {\r\n                // can have nulls in filtered list; but if so, MUST write placeholders\r\n                gen.writeNull();\r\n            } else {\r\n                prop.serializeAsElement(bean, gen, provider);\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        wrapAndThrow(provider, e, bean, props[i].getName());\r\n    } catch (StackOverflowError e) {\r\n        DatabindException mapE \u003d JsonMappingException.from(gen, \"Infinite recursion (StackOverflowError)\", e);\r\n        mapE.prependPath(bean, props[i].getName());\r\n        throw mapE;\r\n    }\r\n}"
      },
      {
        "name": "BeanAsArraySerializer#hasSingleElement(...1)",
        "body": "{\r\n    final BeanPropertyWriter[] props;\r\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getActiveView() !\u003d null) {\r\n        props \u003d _filteredProps;\r\n    } else {\r\n        props \u003d _props;\r\n    }\r\n    return props.length \u003d\u003d 1;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer",
    "methodName": "hasSingleElement",
    "signature": "boolean hasSingleElement(java.util.List)",
    "visibility": "public",
    "body": "{\r\n    return (value.size() \u003d\u003d 1);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  IndexedListSerializer\n  List\n  $i0 \u003d r0.size()\n  if ($i0 !\u003d 1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer",
    "methodName": "serialize",
    "signature": "void serialize(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d value.size();\r\n    if (len \u003d\u003d 1) {\r\n        if (((_unwrapSingle \u003d\u003d null) \u0026\u0026 provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) || (_unwrapSingle \u003d\u003d Boolean.TRUE)) {\r\n            serializeContents(value, gen, provider);\r\n            return;\r\n        }\r\n    }\r\n    gen.writeStartArray(value, len);\r\n    serializeContents(value, gen, provider);\r\n    gen.writeEndArray();\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i0 !\u003d 1) → B1 | else → B5",
      "B1 : If($r4 !\u003d null) → B2 | else → B3",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B3 : If($r6 !\u003d $r5) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  IndexedListSerializer\n  List\n  JsonGenerator\n  SerializerProvider\n  i0 \u003d r0.size()\n  if (i0 !\u003d 1) goto B1 else B5\n}",
      "B1 {\n  $r4 \u003d Boolean _unwrapSingle\u003e\n  if ($r4 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d SerializationFeature WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED\u003e\n  $z0 \u003d r3.isEnabled($r7)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d Boolean _unwrapSingle\u003e\n  $r5 \u003d Boolean TRUE\u003e\n  if ($r6 !\u003d $r5) goto B4 else B5\n}",
      "B4 {\n  r2.serializeContents(r0, r1, r3)\n  return\n}",
      "B5 {\n  r1.writeStartArray(r0, i0)\n  r2.serializeContents(r0, r1, r3)\n  r1.writeEndArray()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IndexedListSerializer#serializeContents(...3)",
        "body": "{\r\n    if (_elementSerializer !\u003d null) {\r\n        serializeContentsUsing(value, g, provider, _elementSerializer);\r\n        return;\r\n    }\r\n    if (_valueTypeSerializer !\u003d null) {\r\n        serializeTypedContents(value, g, provider);\r\n        return;\r\n    }\r\n    final int len \u003d value.size();\r\n    if (len \u003d\u003d 0) {\r\n        return;\r\n    }\r\n    int i \u003d 0;\r\n    try {\r\n        PropertySerializerMap serializers \u003d _dynamicSerializers;\r\n        for (; i \u003c len; ++i) {\r\n            Object elem \u003d value.get(i);\r\n            if (elem \u003d\u003d null) {\r\n                provider.defaultSerializeNull(g);\r\n            } else {\r\n                Class\u003c?\u003e cc \u003d elem.getClass();\r\n                JsonSerializer\u003cObject\u003e serializer \u003d serializers.serializerFor(cc);\r\n                if (serializer \u003d\u003d null) {\r\n                    // To fix [JACKSON-508]\r\n                    if (_elementType.hasGenericTypes()) {\r\n                        serializer \u003d _findAndAddDynamic(serializers, provider.constructSpecializedType(_elementType, cc), provider);\r\n                    } else {\r\n                        serializer \u003d _findAndAddDynamic(serializers, cc, provider);\r\n                    }\r\n                    serializers \u003d _dynamicSerializers;\r\n                }\r\n                serializer.serialize(elem, g, provider);\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        wrapAndThrow(provider, e, value, i);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer",
    "methodName": "serializeContents",
    "signature": "void serializeContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (_elementSerializer !\u003d null) {\r\n        serializeContentsUsing(value, g, provider, _elementSerializer);\r\n        return;\r\n    }\r\n    if (_valueTypeSerializer !\u003d null) {\r\n        serializeTypedContents(value, g, provider);\r\n        return;\r\n    }\r\n    final int len \u003d value.size();\r\n    if (len \u003d\u003d 0) {\r\n        return;\r\n    }\r\n    int i \u003d 0;\r\n    try {\r\n        PropertySerializerMap serializers \u003d _dynamicSerializers;\r\n        for (; i \u003c len; ++i) {\r\n            Object elem \u003d value.get(i);\r\n            if (elem \u003d\u003d null) {\r\n                provider.defaultSerializeNull(g);\r\n            } else {\r\n                Class\u003c?\u003e cc \u003d elem.getClass();\r\n                JsonSerializer\u003cObject\u003e serializer \u003d serializers.serializerFor(cc);\r\n                if (serializer \u003d\u003d null) {\r\n                    // To fix [JACKSON-508]\r\n                    if (_elementType.hasGenericTypes()) {\r\n                        serializer \u003d _findAndAddDynamic(serializers, provider.constructSpecializedType(_elementType, cc), provider);\r\n                    } else {\r\n                        serializer \u003d _findAndAddDynamic(serializers, cc, provider);\r\n                    }\r\n                    serializers \u003d _dynamicSerializers;\r\n                }\r\n                serializer.serialize(elem, g, provider);\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        wrapAndThrow(provider, e, value, i);\r\n    }\r\n}",
    "nodes": 20,
    "edges": 23,
    "cc": 5,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r2 \u003d\u003d null) → B3 | else → B4",
      "B4 : If(i0 !\u003d 0) → B5 | else → B6",
      "B7 : If(i1 \u003e\u003d i0) → B8 | else → B17",
      "B8 : If(r4 !\u003d null) → B9 | else → B10",
      "B10 : If(r14 !\u003d null) → B11 | else → B15",
      "B11 : If($z0 \u003d\u003d false) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  IndexedListSerializer\n  List\n  JsonGenerator\n  SerializerProvider\n  $r1 \u003d JsonSerializer _elementSerializer\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r11 \u003d JsonSerializer _elementSerializer\u003e\n  r0.serializeContentsUsing(r3, r6, r7, $r11)\n  return\n}",
      "B2 {\n  $r2 \u003d TypeSerializer _valueTypeSerializer\u003e\n  if ($r2 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  r0.serializeTypedContents(r3, r6, r7)\n  return\n}",
      "B4 {\n  i0 \u003d r3.size()\n  if (i0 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i1 \u003d 0\n  r13 \u003d PropertySerializerMap _dynamicSerializers\u003e\n}",
      "B7 {\n  if (i1 \u003e\u003d i0) goto B8 else B17\n}",
      "B8 {\n  r4 \u003d r3.get(i1)\n  if (r4 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  r7.defaultSerializeNull(r6)\n  goto B16\n}",
      "B10 {\n  r5 \u003d r4.getClass()\n  r14 \u003d r13.serializerFor(r5)\n  if (r14 !\u003d null) goto B11 else B15\n}",
      "B11 {\n  $r8 \u003d JavaType _elementType\u003e\n  $z0 \u003d $r8.hasGenericTypes()\n  if ($z0 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $r9 \u003d JavaType _elementType\u003e\n  $r10 \u003d r7.constructSpecializedType($r9, r5)\n  r14 \u003d r0._findAndAddDynamic(r13, $r10, r7)\n  goto B14\n}",
      "B13 {\n  r14 \u003d r0._findAndAddDynamic(r13, r5, r7)\n}",
      "B14 {\n  r13 \u003d PropertySerializerMap _dynamicSerializers\u003e\n}",
      "B15 {\n  r14.serialize(r4, r6, r7)\n}",
      "B16 {\n  i1 \u003d i1 + 1\n  goto B7\n}",
      "B17 {\n  goto B19\n}",
      "B18 {\n  $r12 :\u003d @caughtexception\n  r0.wrapAndThrow(r7, $r12, r3, i1)\n}",
      "B19 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B17",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B16",
      "B10 --\u003e B11",
      "B10 --\u003e B15",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B15 --\u003e B16",
      "B16 --\u003e B7",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IndexedListSerializer#serializeContentsUsing(...4)",
        "body": "{\r\n    final int len \u003d value.size();\r\n    if (len \u003d\u003d 0) {\r\n        return;\r\n    }\r\n    final TypeSerializer typeSer \u003d _valueTypeSerializer;\r\n    for (int i \u003d 0; i \u003c len; ++i) {\r\n        Object elem \u003d value.get(i);\r\n        try {\r\n            if (elem \u003d\u003d null) {\r\n                provider.defaultSerializeNull(jgen);\r\n            } else if (typeSer \u003d\u003d null) {\r\n                ser.serialize(elem, jgen, provider);\r\n            } else {\r\n                ser.serializeWithType(elem, jgen, provider, typeSer);\r\n            }\r\n        } catch (Exception e) {\r\n            // [JACKSON-55] Need to add reference information\r\n            wrapAndThrow(provider, e, value, i);\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "IndexedListSerializer#serializeTypedContents(...3)",
        "body": "{\r\n    final int len \u003d value.size();\r\n    if (len \u003d\u003d 0) {\r\n        return;\r\n    }\r\n    int i \u003d 0;\r\n    try {\r\n        final TypeSerializer typeSer \u003d _valueTypeSerializer;\r\n        PropertySerializerMap serializers \u003d _dynamicSerializers;\r\n        for (; i \u003c len; ++i) {\r\n            Object elem \u003d value.get(i);\r\n            if (elem \u003d\u003d null) {\r\n                provider.defaultSerializeNull(jgen);\r\n            } else {\r\n                Class\u003c?\u003e cc \u003d elem.getClass();\r\n                JsonSerializer\u003cObject\u003e serializer \u003d serializers.serializerFor(cc);\r\n                if (serializer \u003d\u003d null) {\r\n                    // To fix [JACKSON-508]\r\n                    if (_elementType.hasGenericTypes()) {\r\n                        serializer \u003d _findAndAddDynamic(serializers, provider.constructSpecializedType(_elementType, cc), provider);\r\n                    } else {\r\n                        serializer \u003d _findAndAddDynamic(serializers, cc, provider);\r\n                    }\r\n                    serializers \u003d _dynamicSerializers;\r\n                }\r\n                serializer.serializeWithType(elem, jgen, provider, typeSer);\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        wrapAndThrow(provider, e, value, i);\r\n    }\r\n}"
      },
      {
        "name": "IndexedListSerializer#_findAndAddDynamic(...3)",
        "body": "(source not found)"
      },
      {
        "name": "IndexedListSerializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer",
    "methodName": "serializeContentsUsing",
    "signature": "void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d value.size();\r\n    if (len \u003d\u003d 0) {\r\n        return;\r\n    }\r\n    final TypeSerializer typeSer \u003d _valueTypeSerializer;\r\n    for (int i \u003d 0; i \u003c len; ++i) {\r\n        Object elem \u003d value.get(i);\r\n        try {\r\n            if (elem \u003d\u003d null) {\r\n                provider.defaultSerializeNull(jgen);\r\n            } else if (typeSer \u003d\u003d null) {\r\n                ser.serialize(elem, jgen, provider);\r\n            } else {\r\n                ser.serializeWithType(elem, jgen, provider, typeSer);\r\n            }\r\n        } catch (Exception e) {\r\n            // [JACKSON-55] Need to add reference information\r\n            wrapAndThrow(provider, e, value, i);\r\n        }\r\n    }\r\n}",
    "nodes": 13,
    "edges": 15,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i0 !\u003d 0) → B1 | else → B2",
      "B3 : If(i1 \u003e\u003d i0) → B4 | else → B12",
      "B4 : If(r3 !\u003d null) → B5 | else → B6",
      "B6 : If(r2 !\u003d null) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  IndexedListSerializer\n  List\n  JsonGenerator\n  SerializerProvider\n  JsonSerializer\n  i0 \u003d r0.size()\n  if (i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r2 \u003d TypeSerializer _valueTypeSerializer\u003e\n  i1 \u003d 0\n}",
      "B3 {\n  if (i1 \u003e\u003d i0) goto B4 else B12\n}",
      "B4 {\n  r3 \u003d r0.get(i1)\n  if (r3 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  r6.defaultSerializeNull(r5)\n  goto B9\n}",
      "B6 {\n  if (r2 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  r4.serialize(r3, r5, r6)\n  goto B9\n}",
      "B8 {\n  r4.serializeWithType(r3, r5, r6, r2)\n}",
      "B9 {\n  goto B11\n}",
      "B10 {\n  $r7 :\u003d @caughtexception\n  r1.wrapAndThrow(r6, $r7, r0, i1)\n}",
      "B11 {\n  i1 \u003d i1 + 1\n  goto B3\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B12",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B3",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IndexedListSerializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer",
    "methodName": "serializeTypedContents",
    "signature": "void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d value.size();\r\n    if (len \u003d\u003d 0) {\r\n        return;\r\n    }\r\n    int i \u003d 0;\r\n    try {\r\n        final TypeSerializer typeSer \u003d _valueTypeSerializer;\r\n        PropertySerializerMap serializers \u003d _dynamicSerializers;\r\n        for (; i \u003c len; ++i) {\r\n            Object elem \u003d value.get(i);\r\n            if (elem \u003d\u003d null) {\r\n                provider.defaultSerializeNull(jgen);\r\n            } else {\r\n                Class\u003c?\u003e cc \u003d elem.getClass();\r\n                JsonSerializer\u003cObject\u003e serializer \u003d serializers.serializerFor(cc);\r\n                if (serializer \u003d\u003d null) {\r\n                    // To fix [JACKSON-508]\r\n                    if (_elementType.hasGenericTypes()) {\r\n                        serializer \u003d _findAndAddDynamic(serializers, provider.constructSpecializedType(_elementType, cc), provider);\r\n                    } else {\r\n                        serializer \u003d _findAndAddDynamic(serializers, cc, provider);\r\n                    }\r\n                    serializers \u003d _dynamicSerializers;\r\n                }\r\n                serializer.serializeWithType(elem, jgen, provider, typeSer);\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        wrapAndThrow(provider, e, value, i);\r\n    }\r\n}",
    "nodes": 16,
    "edges": 19,
    "cc": 5,
    "flowSummary": [
      "B0 : If(i0 !\u003d 0) → B1 | else → B2",
      "B3 : If(i1 \u003e\u003d i0) → B4 | else → B13",
      "B4 : If(r2 !\u003d null) → B5 | else → B6",
      "B6 : If(r12 !\u003d null) → B7 | else → B11",
      "B7 : If($z0 \u003d\u003d false) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  IndexedListSerializer\n  List\n  JsonGenerator\n  SerializerProvider\n  i0 \u003d r0.size()\n  if (i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i1 \u003d 0\n  r10 \u003d TypeSerializer _valueTypeSerializer\u003e\n  r11 \u003d PropertySerializerMap _dynamicSerializers\u003e\n}",
      "B3 {\n  if (i1 \u003e\u003d i0) goto B4 else B13\n}",
      "B4 {\n  r2 \u003d r0.get(i1)\n  if (r2 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  r5.defaultSerializeNull(r4)\n  goto B12\n}",
      "B6 {\n  r3 \u003d r2.getClass()\n  r12 \u003d r11.serializerFor(r3)\n  if (r12 !\u003d null) goto B7 else B11\n}",
      "B7 {\n  $r6 \u003d JavaType _elementType\u003e\n  $z0 \u003d $r6.hasGenericTypes()\n  if ($z0 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $r7 \u003d JavaType _elementType\u003e\n  $r8 \u003d r5.constructSpecializedType($r7, r3)\n  r12 \u003d r1._findAndAddDynamic(r11, $r8, r5)\n  goto B10\n}",
      "B9 {\n  r12 \u003d r1._findAndAddDynamic(r11, r3, r5)\n}",
      "B10 {\n  r11 \u003d PropertySerializerMap _dynamicSerializers\u003e\n}",
      "B11 {\n  r12.serializeWithType(r2, r4, r5, r10)\n}",
      "B12 {\n  i1 \u003d i1 + 1\n  goto B3\n}",
      "B13 {\n  goto B15\n}",
      "B14 {\n  $r9 :\u003d @caughtexception\n  r1.wrapAndThrow(r5, $r9, r0, i1)\n}",
      "B15 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B13",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B12",
      "B6 --\u003e B7",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B12 --\u003e B3",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IndexedListSerializer#_findAndAddDynamic(...3)",
        "body": "(source not found)"
      },
      {
        "name": "IndexedListSerializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer",
    "methodName": "serialize",
    "signature": "void serialize(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d value.size();\r\n    if (len \u003d\u003d 1) {\r\n        if (((_unwrapSingle \u003d\u003d null) \u0026\u0026 provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) || (_unwrapSingle \u003d\u003d Boolean.TRUE)) {\r\n            serializeContents(value, g, provider, 1);\r\n            return;\r\n        }\r\n    }\r\n    g.writeStartArray(value, len);\r\n    serializeContents(value, g, provider, len);\r\n    g.writeEndArray();\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i0 !\u003d 1) → B1 | else → B5",
      "B1 : If($r4 !\u003d null) → B2 | else → B3",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B3 : If($r6 !\u003d $r5) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  IndexedStringListSerializer\n  List\n  JsonGenerator\n  SerializerProvider\n  i0 \u003d r0.size()\n  if (i0 !\u003d 1) goto B1 else B5\n}",
      "B1 {\n  $r4 \u003d Boolean _unwrapSingle\u003e\n  if ($r4 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d SerializationFeature WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED\u003e\n  $z0 \u003d r3.isEnabled($r7)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d Boolean _unwrapSingle\u003e\n  $r5 \u003d Boolean TRUE\u003e\n  if ($r6 !\u003d $r5) goto B4 else B5\n}",
      "B4 {\n  r2.serializeContents(r0, r1, r3, 1)\n  return\n}",
      "B5 {\n  r1.writeStartArray(r0, i0)\n  r2.serializeContents(r0, r1, r3, i0)\n  r1.writeEndArray()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IndexedStringListSerializer#serializeContents(...4)",
        "body": "{\r\n    int i \u003d 0;\r\n    try {\r\n        for (; i \u003c len; ++i) {\r\n            String str \u003d value.get(i);\r\n            if (str \u003d\u003d null) {\r\n                provider.defaultSerializeNull(g);\r\n            } else {\r\n                g.writeString(str);\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        wrapAndThrow(provider, e, value, i);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.IteratorSerializer",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Iterator)",
    "visibility": "public",
    "body": "{\r\n    return !value.hasNext();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  IteratorSerializer\n  SerializerProvider\n  Iterator\n  $z0 \u003d r0.hasNext()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.IteratorSerializer",
    "methodName": "serializeContents",
    "signature": "void serializeContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (!value.hasNext()) {\r\n        return;\r\n    }\r\n    JsonSerializer\u003cObject\u003e serializer \u003d _elementSerializer;\r\n    if (serializer \u003d\u003d null) {\r\n        _serializeDynamicContents(value, g, provider);\r\n        return;\r\n    }\r\n    final TypeSerializer typeSer \u003d _valueTypeSerializer;\r\n    do {\r\n        Object elem \u003d value.next();\r\n        if (elem \u003d\u003d null) {\r\n            provider.defaultSerializeNull(g);\r\n        } else if (typeSer \u003d\u003d null) {\r\n            serializer.serialize(elem, g, provider);\r\n        } else {\r\n            serializer.serializeWithType(elem, g, provider, typeSer);\r\n        }\r\n    } while (value.hasNext());\r\n}",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If(r2 !\u003d null) → B3 | else → B4",
      "B5 : If($r6 !\u003d null) → B6 | else → B7",
      "B7 : If(r3 !\u003d null) → B8 | else → B9",
      "B10 : If($z1 !\u003d 0) → B11 | else → B5"
    ],
    "blockList": [
      "B0 {\n  IteratorSerializer\n  Iterator\n  JsonGenerator\n  SerializerProvider\n  $z0 \u003d r0.hasNext()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r2 \u003d JsonSerializer _elementSerializer\u003e\n  if (r2 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  r1._serializeDynamicContents(r0, r4, r5)\n  return\n}",
      "B4 {\n  r3 \u003d TypeSerializer _valueTypeSerializer\u003e\n}",
      "B5 {\n  $r6 \u003d r0.next()\n  if ($r6 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  r5.defaultSerializeNull(r4)\n  goto B10\n}",
      "B7 {\n  if (r3 !\u003d null) goto B8 else B9\n}",
      "B8 {\n  r2.serialize($r6, r4, r5)\n  goto B10\n}",
      "B9 {\n  r2.serializeWithType($r6, r4, r5, r3)\n}",
      "B10 {\n  $z1 \u003d r0.hasNext()\n  if ($z1 !\u003d 0) goto B11 else B5\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B5",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IteratorSerializer#_serializeDynamicContents(...3)",
        "body": "{\r\n    final TypeSerializer typeSer \u003d _valueTypeSerializer;\r\n    PropertySerializerMap serializers \u003d _dynamicSerializers;\r\n    do {\r\n        Object elem \u003d value.next();\r\n        if (elem \u003d\u003d null) {\r\n            provider.defaultSerializeNull(g);\r\n            continue;\r\n        }\r\n        Class\u003c?\u003e cc \u003d elem.getClass();\r\n        JsonSerializer\u003cObject\u003e serializer \u003d serializers.serializerFor(cc);\r\n        if (serializer \u003d\u003d null) {\r\n            if (_elementType.hasGenericTypes()) {\r\n                serializer \u003d _findAndAddDynamic(serializers, provider.constructSpecializedType(_elementType, cc), provider);\r\n            } else {\r\n                serializer \u003d _findAndAddDynamic(serializers, cc, provider);\r\n            }\r\n            serializers \u003d _dynamicSerializers;\r\n        }\r\n        if (typeSer \u003d\u003d null) {\r\n            serializer.serialize(elem, g, provider);\r\n        } else {\r\n            serializer.serializeWithType(elem, g, provider, typeSer);\r\n        }\r\n    } while (value.hasNext());\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer",
    "methodName": "withContentInclusion",
    "signature": "com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer withContentInclusion(java.lang.Object,boolean)",
    "visibility": "public",
    "body": "{\r\n    if ((_suppressableValue \u003d\u003d suppressableValue) \u0026\u0026 (_suppressNulls \u003d\u003d suppressNulls)) {\r\n        return this;\r\n    }\r\n    return new MapEntrySerializer(this, _property, _valueTypeSerializer, _keySerializer, _valueSerializer, suppressableValue, suppressNulls);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B3",
      "B1 : If($z1 !\u003d z0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MapEntrySerializer\n  Object\n  z0 :\u003d @parameter1: boolean\n  $r2 \u003d Object _suppressableValue\u003e\n  if ($r2 !\u003d r1) goto B1 else B3\n}",
      "B1 {\n  $z1 \u003d MapEntrySerializer: boolean _suppressNulls\u003e\n  if ($z1 !\u003d z0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r3 \u003d MapEntrySerializer\n  $r7 \u003d BeanProperty _property\u003e\n  $r6 \u003d TypeSerializer _valueTypeSerializer\u003e\n  $r5 \u003d JsonSerializer _keySerializer\u003e\n  $r4 \u003d JsonSerializer _valueSerializer\u003e\n  new MapEntrySerializer(r0, $r7, $r6, $r5, $r4, r1, z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer",
    "methodName": "createContextual",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    JsonSerializer\u003c?\u003e ser \u003d null;\r\n    JsonSerializer\u003c?\u003e keySer \u003d null;\r\n    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\r\n    final AnnotatedMember propertyAcc \u003d (property \u003d\u003d null) ? null : property.getMember();\r\n    // First: if we have a property, may have property-annotation overrides\r\n    if (propertyAcc !\u003d null \u0026\u0026 intr !\u003d null) {\r\n        Object serDef \u003d intr.findKeySerializer(propertyAcc);\r\n        if (serDef !\u003d null) {\r\n            keySer \u003d provider.serializerInstance(propertyAcc, serDef);\r\n        }\r\n        serDef \u003d intr.findContentSerializer(propertyAcc);\r\n        if (serDef !\u003d null) {\r\n            ser \u003d provider.serializerInstance(propertyAcc, serDef);\r\n        }\r\n    }\r\n    if (ser \u003d\u003d null) {\r\n        ser \u003d _valueSerializer;\r\n    }\r\n    // [databind#124]: May have a content converter\r\n    ser \u003d findContextualConvertingSerializer(provider, property, ser);\r\n    if (ser \u003d\u003d null) {\r\n        // 30-Sep-2012, tatu: One more thing -- if explicit content type is annotated,\r\n        //   we can consider it a static case as well.\r\n        // 20-Aug-2013, tatu: Need to avoid trying to access serializer for java.lang.Object tho\r\n        if (_valueTypeIsStatic \u0026\u0026 !_valueType.isJavaLangObject()) {\r\n            ser \u003d provider.findContentValueSerializer(_valueType, property);\r\n        }\r\n    }\r\n    if (keySer \u003d\u003d null) {\r\n        keySer \u003d _keySerializer;\r\n    }\r\n    if (keySer \u003d\u003d null) {\r\n        keySer \u003d provider.findKeySerializer(_keyType, property);\r\n    } else {\r\n        keySer \u003d provider.handleSecondaryContextualization(keySer, property);\r\n    }\r\n    Object valueToSuppress \u003d _suppressableValue;\r\n    boolean suppressNulls \u003d _suppressNulls;\r\n    if (property !\u003d null) {\r\n        JsonInclude.Value inclV \u003d property.findPropertyInclusion(provider.getConfig(), null);\r\n        if (inclV !\u003d null) {\r\n            JsonInclude.Include incl \u003d inclV.getContentInclusion();\r\n            if (incl !\u003d JsonInclude.Include.USE_DEFAULTS) {\r\n                switch(incl) {\r\n                    case NON_DEFAULT:\r\n                        valueToSuppress \u003d BeanUtil.getDefaultValue(_valueType);\r\n                        suppressNulls \u003d true;\r\n                        if (valueToSuppress !\u003d null) {\r\n                            if (valueToSuppress.getClass().isArray()) {\r\n                                valueToSuppress \u003d ArrayBuilders.getArrayComparator(valueToSuppress);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case NON_ABSENT:\r\n                        suppressNulls \u003d true;\r\n                        valueToSuppress \u003d _valueType.isReferenceType() ? MARKER_FOR_EMPTY : null;\r\n                        break;\r\n                    case NON_EMPTY:\r\n                        suppressNulls \u003d true;\r\n                        valueToSuppress \u003d MARKER_FOR_EMPTY;\r\n                        break;\r\n                    case CUSTOM:\r\n                        valueToSuppress \u003d provider.includeFilterInstance(null, inclV.getContentFilter());\r\n                        if (valueToSuppress \u003d\u003d null) {\r\n                            // is this legal?\r\n                            suppressNulls \u003d true;\r\n                        } else {\r\n                            suppressNulls \u003d provider.includeFilterSuppressNulls(valueToSuppress);\r\n                        }\r\n                        break;\r\n                    case NON_NULL:\r\n                        valueToSuppress \u003d null;\r\n                        suppressNulls \u003d true;\r\n                        break;\r\n                    // default\r\n                    case ALWAYS:\r\n                    default:\r\n                        valueToSuppress \u003d null;\r\n                        // 30-Sep-2016, tatu: Should not need to check global flags here,\r\n                        //   if inclusion forced to be ALWAYS\r\n                        suppressNulls \u003d false;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // but note: no (full) filtering or sorting (unlike Maps)\r\n    return withResolved(property, keySer, ser, valueToSuppress, suppressNulls);\r\n}",
    "nodes": 38,
    "edges": 60,
    "cc": 24,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2",
      "B3 : If($r21 \u003d\u003d null) → B4 | else → B9",
      "B4 : If(r1 \u003d\u003d null) → B5 | else → B9",
      "B5 : If(r22 \u003d\u003d null) → B6 | else → B7",
      "B7 : If($r18 \u003d\u003d null) → B8 | else → B9",
      "B9 : If(r19 !\u003d null) → B10 | else → B11",
      "B11 : If($r17 !\u003d null) → B12 | else → B15",
      "B12 : If($z2 \u003d\u003d false) → B13 | else → B15",
      "B13 : If($z3 !\u003d 0) → B14 | else → B15",
      "B15 : If(r20 !\u003d null) → B16 | else → B17",
      "B17 : If(r20 !\u003d null) → B18 | else → B19",
      "B20 : If(r2 \u003d\u003d null) → B21 | else → B37",
      "B21 : If(r6 \u003d\u003d null) → B22 | else → B37",
      "B22 : If(r7 \u003d\u003d $r8) → B23 | else → B37",
      "B23 : If(switch-on $i1) → B24 | else → B27",
      "B24 : If(r25 \u003d\u003d null) → B25 | else → B37",
      "B25 : If($z1 \u003d\u003d false) → B26 | else → B37",
      "B27 : If($z0 \u003d\u003d false) → B28 | else → B29",
      "B32 : If(r25 !\u003d null) → B33 | else → B34"
    ],
    "blockList": [
      "B0 {\n  MapEntrySerializer\n  SerializerProvider\n  BeanProperty\n  r19 \u003d null\n  r20 \u003d null\n  r1 \u003d r0.getAnnotationIntrospector()\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r21 \u003d null\n  goto B3\n}",
      "B2 {\n  $r21 \u003d r2.getMember()\n}",
      "B3 {\n  r3 \u003d $r21\n  if ($r21 \u003d\u003d null) goto B4 else B9\n}",
      "B4 {\n  if (r1 \u003d\u003d null) goto B5 else B9\n}",
      "B5 {\n  r22 \u003d r1.findKeySerializer($r21)\n  if (r22 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  r20 \u003d r0.serializerInstance($r21, r22)\n}",
      "B7 {\n  $r18 \u003d r1.findContentSerializer(r3)\n  if ($r18 \u003d\u003d null) goto B8 else B9\n}",
      "B8 {\n  r19 \u003d r0.serializerInstance(r3, $r18)\n}",
      "B9 {\n  if (r19 !\u003d null) goto B10 else B11\n}",
      "B10 {\n  r19 \u003d JsonSerializer _valueSerializer\u003e\n}",
      "B11 {\n  $r17 \u003d r4.findContextualConvertingSerializer(r0, r2, r19)\n  r23 \u003d $r17\n  if ($r17 !\u003d null) goto B12 else B15\n}",
      "B12 {\n  $z2 \u003d MapEntrySerializer: boolean _valueTypeIsStatic\u003e\n  if ($z2 \u003d\u003d false) goto B13 else B15\n}",
      "B13 {\n  $r15 \u003d JavaType _valueType\u003e\n  $z3 \u003d $r15.isJavaLangObject()\n  if ($z3 !\u003d 0) goto B14 else B15\n}",
      "B14 {\n  $r16 \u003d JavaType _valueType\u003e\n  r23 \u003d r0.findContentValueSerializer($r16, r2)\n}",
      "B15 {\n  if (r20 !\u003d null) goto B16 else B17\n}",
      "B16 {\n  r20 \u003d JsonSerializer _keySerializer\u003e\n}",
      "B17 {\n  if (r20 !\u003d null) goto B18 else B19\n}",
      "B18 {\n  $r14 \u003d JavaType _keyType\u003e\n  r24 \u003d r0.findKeySerializer($r14, r2)\n  goto B20\n}",
      "B19 {\n  r24 \u003d r0.handleSecondaryContextualization(r20, r2)\n}",
      "B20 {\n  r25 \u003d Object _suppressableValue\u003e\n  z4 \u003d MapEntrySerializer: boolean _suppressNulls\u003e\n  if (r2 \u003d\u003d null) goto B21 else B37\n}",
      "B21 {\n  $r5 \u003d r0.getConfig()\n  r6 \u003d r2.findPropertyInclusion($r5, null)\n  if (r6 \u003d\u003d null) goto B22 else B37\n}",
      "B22 {\n  r7 \u003d r6.getContentInclusion()\n  $r8 \u003d JsonInclude$Include USE_DEFAULTS\u003e\n  if (r7 \u003d\u003d $r8) goto B23 else B37\n}",
      "B23 {\n  $r9 \u003d MapEntrySerializer$1: int[] $SwitchMap$com$fasterxml$jackson$annotation$JsonInclude$Include\u003e\n  $i0 \u003d r7.ordinal()\n  $i1 \u003d $r9[$i0]\n  Class getContentFilter()\u003e();     case 5: goto r25 \u003d null;     case 6: goto r25 \u003d null;     default: goto r25 \u003d null; }\n}",
      "B24 {\n  $r12 \u003d JavaType _valueType\u003e\n  r25 \u003d BeanUtil.getDefaultValue($r12)\n  z4 \u003d 1\n  if (r25 \u003d\u003d null) goto B25 else B37\n}",
      "B25 {\n  $r13 \u003d r25.getClass()\n  $z1 \u003d $r13.isArray()\n  if ($z1 \u003d\u003d false) goto B26 else B37\n}",
      "B26 {\n  r25 \u003d ArrayBuilders.getArrayComparator(r25)\n  goto B37\n}",
      "B27 {\n  z4 \u003d 1\n  $r11 \u003d JavaType _valueType\u003e\n  $z0 \u003d $r11.isReferenceType()\n  if ($z0 \u003d\u003d false) goto B28 else B29\n}",
      "B28 {\n  $r26 \u003d Object MARKER_FOR_EMPTY\u003e\n  goto B30\n}",
      "B29 {\n  $r26 \u003d null\n}",
      "B30 {\n  r25 \u003d $r26\n  goto B37\n}",
      "B31 {\n  z4 \u003d 1\n  r25 \u003d Object MARKER_FOR_EMPTY\u003e\n  goto B37\n}",
      "B32 {\n  $r10 \u003d r6.getContentFilter()\n  r25 \u003d r0.includeFilterInstance(null, $r10)\n  if (r25 !\u003d null) goto B33 else B34\n}",
      "B33 {\n  z4 \u003d 1\n  goto B37\n}",
      "B34 {\n  z4 \u003d r0.includeFilterSuppressNulls(r25)\n  goto B37\n}",
      "B35 {\n  r25 \u003d null\n  z4 \u003d 1\n  goto B37\n}",
      "B36 {\n  r25 \u003d null\n  z4 \u003d 0\n}",
      "B37 {\n  $r27 \u003d r4.withResolved(r2, r24, r23, r25, z4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B15",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B20",
      "B20 --\u003e B21",
      "B20 --\u003e B37",
      "B21 --\u003e B22",
      "B21 --\u003e B37",
      "B22 --\u003e B23",
      "B22 --\u003e B37",
      "B23 --\u003e B24",
      "B23 --\u003e B27",
      "B23 --\u003e B31",
      "B23 --\u003e B32",
      "B23 --\u003e B35",
      "B23 --\u003e B36",
      "B24 --\u003e B25",
      "B24 --\u003e B37",
      "B25 --\u003e B26",
      "B25 --\u003e B37",
      "B26 --\u003e B37",
      "B27 --\u003e B28",
      "B27 --\u003e B29",
      "B28 --\u003e B30",
      "B29 --\u003e B30",
      "B30 --\u003e B37",
      "B31 --\u003e B37",
      "B32 --\u003e B33",
      "B32 --\u003e B34",
      "B33 --\u003e B37",
      "B34 --\u003e B37",
      "B35 --\u003e B37",
      "B36 --\u003e B37",
      "B37 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapEntrySerializer#findContextualConvertingSerializer(...3)",
        "body": "(source not found)"
      },
      {
        "name": "MapEntrySerializer#withResolved(...5)",
        "body": "{\r\n    return new MapEntrySerializer(this, property, _valueTypeSerializer, keySerializer, valueSerializer, suppressableValue, suppressNulls);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map$Entry)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 11,
    "edges": 11,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B2 : If($r3 !\u003d null) → B3 | else → B4",
      "B4 : If(r10 !\u003d null) → B5 | else → B8",
      "B5 : If(r10 !\u003d null) → B6 | else → B8",
      "B8 : If($r11 !\u003d $r12) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  MapEntrySerializer\n  SerializerProvider\n  Map$Entry\n  r1 \u003d r0.getValue()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z2 \u003d MapEntrySerializer: boolean _suppressNulls\u003e\n  return\n}",
      "B2 {\n  $r3 \u003d Object _suppressableValue\u003e\n  if ($r3 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r10 \u003d JsonSerializer _valueSerializer\u003e\n  if (r10 !\u003d null) goto B5 else B8\n}",
      "B5 {\n  r6 \u003d r1.getClass()\n  $r7 \u003d PropertySerializerMap _dynamicValueSerializers\u003e\n  r10 \u003d $r7.serializerFor(r6)\n  if (r10 !\u003d null) goto B6 else B8\n}",
      "B6 {\n  $r8 \u003d PropertySerializerMap _dynamicValueSerializers\u003e\n  r10 \u003d r2._findAndAddDynamic($r8, r6, r5)\n  goto B8\n}",
      "B7 {\n  $r9 :\u003d @caughtexception\n  return\n}",
      "B8 {\n  $r11 \u003d Object _suppressableValue\u003e\n  $r12 \u003d Object MARKER_FOR_EMPTY\u003e\n  if ($r11 !\u003d $r12) goto B9 else B10\n}",
      "B9 {\n  $z1 \u003d r10.isEmpty(r5, r1)\n  return\n}",
      "B10 {\n  $r4 \u003d Object _suppressableValue\u003e\n  $z0 \u003d $r4.equals(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter",
    "methodName": "construct",
    "signature": "com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter construct(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.PropertyName,com.fasterxml.jackson.\u0027annotation\u0027.ObjectIdGenerator,boolean)",
    "visibility": "public",
    "body": "{\r\n    String simpleName \u003d (propName \u003d\u003d null) ? null : propName.getSimpleName();\r\n    SerializableString serName \u003d (simpleName \u003d\u003d null) ? null : new SerializedString(simpleName);\r\n    return new ObjectIdWriter(idType, serName, generator, null, alwaysAsId);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If($r4 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  JavaType\n  PropertyName\n  ObjectIdGenerator\n  z0 :\u003d @parameter3: boolean\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r0.getSimpleName()\n}",
      "B3 {\n  if ($r4 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r5 \u003d null\n  goto B6\n}",
      "B5 {\n  $r5 \u003d SerializedString\n  new SerializedString($r4)\n}",
      "B6 {\n  $r1 \u003d ObjectIdWriter\n  new ObjectIdWriter(r2, $r5, r3, null, z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter",
    "methodName": "withAlwaysAsId",
    "signature": "com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter withAlwaysAsId(boolean)",
    "visibility": "public",
    "body": "{\r\n    if (newState \u003d\u003d alwaysAsId) {\r\n        return this;\r\n    }\r\n    return new ObjectIdWriter(idType, propertyName, generator, serializer, newState);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(z0 !\u003d $z1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectIdWriter\n  z0 :\u003d @parameter0: boolean\n  $z1 \u003d ObjectIdWriter: boolean alwaysAsId\u003e\n  if (z0 !\u003d $z1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d ObjectIdWriter\n  $r5 \u003d JavaType idType\u003e\n  $r4 \u003d SerializableString propertyName\u003e\n  $r3 \u003d ObjectIdGenerator generator\u003e\n  $r2 \u003d JsonSerializer serializer\u003e\n  new ObjectIdWriter($r5, $r4, $r3, $r2, z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator",
    "methodName": "canUseFor",
    "signature": "boolean canUseFor(com.fasterxml.jackson.\u0027annotation\u0027.ObjectIdGenerator)",
    "visibility": "public",
    "body": "{\r\n    if (gen.getClass() \u003d\u003d getClass()) {\r\n        PropertyBasedObjectIdGenerator other \u003d (PropertyBasedObjectIdGenerator) gen;\r\n        if (other.getScope() \u003d\u003d _scope) {\r\n            /* 26-Jul-2012, tatu: This is actually not enough, because the property\r\n                 *   accessor within BeanPropertyWriter won\u0027t work for other property fields\r\n                 *  (see [https://github.com/FasterXML/jackson-module-jaxb-annotations/issues/9]\r\n                 *  for details).\r\n                 *  So we need to verify that underlying property is actually the same.\r\n                 */\r\n            return (other._property \u003d\u003d _property);\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r3 !\u003d $r2) → B1 | else → B6",
      "B1 : If($r6 !\u003d $r5) → B2 | else → B6",
      "B2 : If($r8 !\u003d $r7) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  PropertyBasedObjectIdGenerator\n  ObjectIdGenerator\n  $r3 \u003d r0.getClass()\n  $r2 \u003d r1.getClass()\n  if ($r3 !\u003d $r2) goto B1 else B6\n}",
      "B1 {\n  r4 \u003d PropertyBasedObjectIdGenerator) r0\n  $r6 \u003d r4.getScope()\n  $r5 \u003d Class _scope\u003e\n  if ($r6 !\u003d $r5) goto B2 else B6\n}",
      "B2 {\n  $r8 \u003d BeanPropertyWriter _property\u003e\n  $r7 \u003d BeanPropertyWriter _property\u003e\n  if ($r8 !\u003d $r7) goto B3 else B4\n}",
      "B3 {\n  $z0 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z0 \u003d 0\n}",
      "B5 {\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PropertyBasedObjectIdGenerator#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator",
    "methodName": "forScope",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.ObjectIdGenerator forScope(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return (scope \u003d\u003d _scope) ? this : new PropertyBasedObjectIdGenerator(scope, _property);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PropertyBasedObjectIdGenerator\n  Class\n  $r2 \u003d Class _scope\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r4 \u003d PropertyBasedObjectIdGenerator\n  $r3 \u003d BeanPropertyWriter _property\u003e\n  new PropertyBasedObjectIdGenerator(r0, $r3)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator",
    "methodName": "key",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.ObjectIdGenerator$IdKey key(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (key \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // should we use general type for all; or type of property itself?\r\n    return new IdKey(getClass(), _scope, key);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PropertyBasedObjectIdGenerator\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d ObjectIdGenerator$IdKey\n  $r4 \u003d r2.getClass()\n  $r3 \u003d Class _scope\u003e\n  new ObjectIdGenerator$IdKey($r4, $r3, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PropertyBasedObjectIdGenerator#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap",
    "methodName": "typedValueSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer typedValueSerializer(com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    Bucket bucket \u003d _buckets[TypeKey.typedHash(type) \u0026 _mask];\r\n    if (bucket \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (bucket.matchesTyped(type)) {\r\n        return bucket.value;\r\n    }\r\n    while ((bucket \u003d bucket.next) !\u003d null) {\r\n        if (bucket.matchesTyped(type)) {\r\n            return bucket.value;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r6 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($r3 \u003d\u003d null) → B5 | else → B7",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ReadOnlyClassToSerializerMap\n  JavaType\n  $r2 \u003d ReadOnlyClassToSerializerMap$Bucket[] _buckets\u003e\n  $i1 \u003d TypeKey.typedHash(r1)\n  $i0 \u003d ReadOnlyClassToSerializerMap: int _mask\u003e\n  $i2 \u003d $i1 \u0026 $i0\n  r6 \u003d $r2[$i2]\n  if (r6 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r6.matchesTyped(r1)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d JsonSerializer value\u003e\n  return\n}",
      "B4 {\n  $r3 \u003d ReadOnlyClassToSerializerMap$Bucket next\u003e\n  r6 \u003d $r3\n  if ($r3 \u003d\u003d null) goto B5 else B7\n}",
      "B5 {\n  $z1 \u003d $r3.matchesTyped(r1)\n  if ($z1 \u003d\u003d false) goto B6 else B4\n}",
      "B6 {\n  $r4 \u003d JsonSerializer value\u003e\n  return\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap",
    "methodName": "typedValueSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer typedValueSerializer(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    Bucket bucket \u003d _buckets[TypeKey.typedHash(type) \u0026 _mask];\r\n    if (bucket \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (bucket.matchesTyped(type)) {\r\n        return bucket.value;\r\n    }\r\n    while ((bucket \u003d bucket.next) !\u003d null) {\r\n        if (bucket.matchesTyped(type)) {\r\n            return bucket.value;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r6 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($r3 \u003d\u003d null) → B5 | else → B7",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ReadOnlyClassToSerializerMap\n  Class\n  $r2 \u003d ReadOnlyClassToSerializerMap$Bucket[] _buckets\u003e\n  $i1 \u003d TypeKey.typedHash(r1)\n  $i0 \u003d ReadOnlyClassToSerializerMap: int _mask\u003e\n  $i2 \u003d $i1 \u0026 $i0\n  r6 \u003d $r2[$i2]\n  if (r6 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r6.matchesTyped(r1)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d JsonSerializer value\u003e\n  return\n}",
      "B4 {\n  $r3 \u003d ReadOnlyClassToSerializerMap$Bucket next\u003e\n  r6 \u003d $r3\n  if ($r3 \u003d\u003d null) goto B5 else B7\n}",
      "B5 {\n  $z1 \u003d $r3.matchesTyped(r1)\n  if ($z1 \u003d\u003d false) goto B6 else B4\n}",
      "B6 {\n  $r4 \u003d JsonSerializer value\u003e\n  return\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap",
    "methodName": "untypedValueSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer untypedValueSerializer(com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    Bucket bucket \u003d _buckets[TypeKey.untypedHash(type) \u0026 _mask];\r\n    if (bucket \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (bucket.matchesUntyped(type)) {\r\n        return bucket.value;\r\n    }\r\n    while ((bucket \u003d bucket.next) !\u003d null) {\r\n        if (bucket.matchesUntyped(type)) {\r\n            return bucket.value;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r6 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($r3 \u003d\u003d null) → B5 | else → B7",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ReadOnlyClassToSerializerMap\n  JavaType\n  $r2 \u003d ReadOnlyClassToSerializerMap$Bucket[] _buckets\u003e\n  $i1 \u003d TypeKey.untypedHash(r1)\n  $i0 \u003d ReadOnlyClassToSerializerMap: int _mask\u003e\n  $i2 \u003d $i1 \u0026 $i0\n  r6 \u003d $r2[$i2]\n  if (r6 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r6.matchesUntyped(r1)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d JsonSerializer value\u003e\n  return\n}",
      "B4 {\n  $r3 \u003d ReadOnlyClassToSerializerMap$Bucket next\u003e\n  r6 \u003d $r3\n  if ($r3 \u003d\u003d null) goto B5 else B7\n}",
      "B5 {\n  $z1 \u003d $r3.matchesUntyped(r1)\n  if ($z1 \u003d\u003d false) goto B6 else B4\n}",
      "B6 {\n  $r4 \u003d JsonSerializer value\u003e\n  return\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap",
    "methodName": "untypedValueSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer untypedValueSerializer(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    Bucket bucket \u003d _buckets[TypeKey.untypedHash(type) \u0026 _mask];\r\n    if (bucket \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (bucket.matchesUntyped(type)) {\r\n        return bucket.value;\r\n    }\r\n    while ((bucket \u003d bucket.next) !\u003d null) {\r\n        if (bucket.matchesUntyped(type)) {\r\n            return bucket.value;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r6 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($r3 \u003d\u003d null) → B5 | else → B7",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ReadOnlyClassToSerializerMap\n  Class\n  $r2 \u003d ReadOnlyClassToSerializerMap$Bucket[] _buckets\u003e\n  $i1 \u003d TypeKey.untypedHash(r1)\n  $i0 \u003d ReadOnlyClassToSerializerMap: int _mask\u003e\n  $i2 \u003d $i1 \u0026 $i0\n  r6 \u003d $r2[$i2]\n  if (r6 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r6.matchesUntyped(r1)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d JsonSerializer value\u003e\n  return\n}",
      "B4 {\n  $r3 \u003d ReadOnlyClassToSerializerMap$Bucket next\u003e\n  r6 \u003d $r3\n  if ($r3 \u003d\u003d null) goto B5 else B7\n}",
      "B5 {\n  $z1 \u003d $r3.matchesUntyped(r1)\n  if ($z1 \u003d\u003d false) goto B6 else B4\n}",
      "B6 {\n  $r4 \u003d JsonSerializer value\u003e\n  return\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter",
    "methodName": "serializeAsField",
    "signature": "void serializeAsField(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.BeanPropertyWriter)",
    "visibility": "public",
    "body": "{\r\n    if (include(writer)) {\r\n        writer.serializeAsField(bean, jgen, provider);\r\n    } else if (!jgen.canOmitFields()) {\r\n        // since 2.3\r\n        writer.serializeAsOmittedField(bean, jgen, provider);\r\n    }\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  SimpleBeanPropertyFilter\n  Object\n  JsonGenerator\n  SerializerProvider\n  BeanPropertyWriter\n  $z0 \u003d r0.include(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r1.serializeAsField(r3, r2, r4)\n  goto B4\n}",
      "B2 {\n  $z1 \u003d r2.canOmitFields()\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  r1.serializeAsOmittedField(r3, r2, r4)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleBeanPropertyFilter#include(...1)",
        "body": "{\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter",
    "methodName": "depositSchemaProperty",
    "signature": "void depositSchemaProperty(com.fasterxml.jackson.databind.ser.BeanPropertyWriter,com.fasterxml.jackson.databind.node.ObjectNode,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (include(writer)) {\r\n        writer.depositSchemaProperty(propertiesNode, provider);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleBeanPropertyFilter\n  BeanPropertyWriter\n  ObjectNode\n  SerializerProvider\n  $z0 \u003d r0.include(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r1.depositSchemaProperty(r2, r3)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleBeanPropertyFilter#include(...1)",
        "body": "{\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter",
    "methodName": "depositSchemaProperty",
    "signature": "void depositSchemaProperty(com.fasterxml.jackson.databind.ser.BeanPropertyWriter,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (include(writer)) {\r\n        writer.depositSchemaProperty(objectVisitor, provider);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleBeanPropertyFilter\n  BeanPropertyWriter\n  JsonObjectFormatVisitor\n  SerializerProvider\n  $z0 \u003d r0.include(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r1.depositSchemaProperty(r2, r3)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleBeanPropertyFilter#include(...1)",
        "body": "{\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter",
    "methodName": "serializeAsField",
    "signature": "void serializeAsField(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyWriter)",
    "visibility": "public",
    "body": "{\r\n    if (include(writer)) {\r\n        writer.serializeAsField(pojo, jgen, provider);\r\n    } else if (!jgen.canOmitFields()) {\r\n        // since 2.3\r\n        writer.serializeAsOmittedField(pojo, jgen, provider);\r\n    } else if (writer instanceof AnyGetterWriter) {\r\n        ((AnyGetterWriter) writer).getAndFilter(pojo, jgen, provider, this);\r\n    }\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  SimpleBeanPropertyFilter\n  Object\n  JsonGenerator\n  SerializerProvider\n  PropertyWriter\n  $z0 \u003d r0.include(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r1.serializeAsField(r3, r2, r4)\n  goto B6\n}",
      "B2 {\n  $z1 \u003d r2.canOmitFields()\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  r1.serializeAsOmittedField(r3, r2, r4)\n  goto B6\n}",
      "B4 {\n  $z2 \u003d AnyGetterWriter\n  if ($z2 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r5 \u003d AnyGetterWriter) r1\n  $r5.getAndFilter(r3, r2, r4, r0)\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleBeanPropertyFilter#include(...1)",
        "body": "{\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter",
    "methodName": "serializeAsElement",
    "signature": "void serializeAsElement(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyWriter)",
    "visibility": "public",
    "body": "{\r\n    if (includeElement(elementValue)) {\r\n        writer.serializeAsElement(elementValue, jgen, provider);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleBeanPropertyFilter\n  Object\n  JsonGenerator\n  SerializerProvider\n  PropertyWriter\n  $z0 \u003d r0.includeElement(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r2.serializeAsElement(r1, r3, r4)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleBeanPropertyFilter#includeElement(...1)",
        "body": "{\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter",
    "methodName": "depositSchemaProperty",
    "signature": "void depositSchemaProperty(com.fasterxml.jackson.databind.ser.PropertyWriter,com.fasterxml.jackson.databind.node.ObjectNode,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (include(writer)) {\r\n        writer.depositSchemaProperty(propertiesNode, provider);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleBeanPropertyFilter\n  PropertyWriter\n  ObjectNode\n  SerializerProvider\n  $z0 \u003d r0.include(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r1.depositSchemaProperty(r2, r3)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleBeanPropertyFilter#include(...1)",
        "body": "{\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter",
    "methodName": "depositSchemaProperty",
    "signature": "void depositSchemaProperty(com.fasterxml.jackson.databind.ser.PropertyWriter,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (include(writer)) {\r\n        writer.depositSchemaProperty(objectVisitor, provider);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleBeanPropertyFilter\n  PropertyWriter\n  JsonObjectFormatVisitor\n  SerializerProvider\n  $z0 \u003d r0.include(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r1.depositSchemaProperty(r2, r3)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleBeanPropertyFilter#include(...1)",
        "body": "{\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider",
    "methodName": "findPropertyFilter",
    "signature": "com.fasterxml.jackson.databind.ser.PropertyFilter findPropertyFilter(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    PropertyFilter f \u003d _filtersById.get(filterId);\r\n    if (f \u003d\u003d null) {\r\n        f \u003d _defaultFilter;\r\n        if (f \u003d\u003d null \u0026\u0026 _cfgFailOnUnknownId) {\r\n            throw new IllegalArgumentException(\"No filter configured with id \u0027\" + filterId + \"\u0027 (type \" + filterId.getClass().getName() + \")\");\r\n        }\r\n    }\r\n    return f;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r10 !\u003d null) → B1 | else → B4",
      "B1 : If(r10 !\u003d null) → B2 | else → B4",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  SimpleFilterProvider\n  Object\n  Object\n  $r2 \u003d Map _filtersById\u003e\n  $r3 \u003d $r2.get(r1)\n  r10 \u003d PropertyFilter) $r3\n  if (r10 !\u003d null) goto B1 else B4\n}",
      "B1 {\n  r10 \u003d PropertyFilter _defaultFilter\u003e\n  if (r10 !\u003d null) goto B2 else B4\n}",
      "B2 {\n  $z0 \u003d SimpleFilterProvider: boolean _cfgFailOnUnknownId\u003e\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d IllegalArgumentException\n  $r7 \u003d String.valueOf(r1)\n  $r5 \u003d r1.getClass()\n  $r6 \u003d $r5.getName()\n  $r8 \u003d dynInvoke makeConcatWithConstants($r7, $r6)\n  new IllegalArgumentException($r8)\n  throw $r4\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.StringArraySerializer",
    "methodName": "createContextual",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    // 29-Sep-2012, tatu: Actually, we need to do much more contextual\r\n    //    checking here since we finally know for sure the property,\r\n    //    and it may have overrides\r\n    JsonSerializer\u003c?\u003e ser \u003d null;\r\n    // First: if we have a property, may have property-annotation overrides\r\n    if (property !\u003d null) {\r\n        final AnnotationIntrospector ai \u003d provider.getAnnotationIntrospector();\r\n        AnnotatedMember m \u003d property.getMember();\r\n        if (m !\u003d null) {\r\n            Object serDef \u003d ai.findContentSerializer(m);\r\n            if (serDef !\u003d null) {\r\n                ser \u003d provider.serializerInstance(m, serDef);\r\n            }\r\n        }\r\n    }\r\n    // but since formats have both property overrides and global per-type defaults,\r\n    // need to do that separately\r\n    Boolean unwrapSingle \u003d findFormatFeature(provider, property, String[].class, JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED);\r\n    if (ser \u003d\u003d null) {\r\n        ser \u003d _elementSerializer;\r\n    }\r\n    // May have a content converter\r\n    ser \u003d findContextualConvertingSerializer(provider, property, ser);\r\n    if (ser \u003d\u003d null) {\r\n        ser \u003d provider.findContentValueSerializer(String.class, property);\r\n    }\r\n    // Optimization: default serializer just writes String, so we can avoid a call:\r\n    if (isDefaultSerializer(ser)) {\r\n        ser \u003d null;\r\n    }\r\n    // note: will never have TypeSerializer, because Strings are \"natural\" type\r\n    if ((ser \u003d\u003d _elementSerializer) \u0026\u0026 (Objects.equals(unwrapSingle, _unwrapSingle))) {\r\n        return this;\r\n    }\r\n    return new StringArraySerializer(this, property, ser, unwrapSingle);\r\n}",
    "nodes": 14,
    "edges": 20,
    "cc": 8,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B4",
      "B1 : If(r7 \u003d\u003d null) → B2 | else → B4",
      "B2 : If(r8 \u003d\u003d null) → B3 | else → B4",
      "B4 : If(r9 !\u003d null) → B5 | else → B6",
      "B6 : If($r6 !\u003d null) → B7 | else → B8",
      "B8 : If($z0 \u003d\u003d false) → B9 | else → B10",
      "B10 : If(r13 !\u003d $r3) → B11 | else → B13",
      "B11 : If($z1 \u003d\u003d false) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  StringArraySerializer\n  SerializerProvider\n  BeanProperty\n  r9 \u003d null\n  if (r0 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  r10 \u003d r2.getAnnotationIntrospector()\n  r7 \u003d r0.getMember()\n  if (r7 \u003d\u003d null) goto B2 else B4\n}",
      "B2 {\n  r8 \u003d r10.findContentSerializer(r7)\n  if (r8 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  r9 \u003d r2.serializerInstance(r7, r8)\n}",
      "B4 {\n  $r11 \u003d JsonFormat$Feature WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED\u003e\n  $r12 \u003d r1.findFormatFeature(r2, r0, class \"Ljava/lang/String;\", $r11)\n  if (r9 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  r9 \u003d JsonSerializer _elementSerializer\u003e\n}",
      "B6 {\n  $r6 \u003d r1.findContextualConvertingSerializer(r2, r0, r9)\n  r13 \u003d $r6\n  if ($r6 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  r13 \u003d r2.findContentValueSerializer(class \"Ljava/lang/String;\", r0)\n}",
      "B8 {\n  $z0 \u003d r1.isDefaultSerializer(r13)\n  if ($z0 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  r13 \u003d null\n}",
      "B10 {\n  $r3 \u003d JsonSerializer _elementSerializer\u003e\n  if (r13 !\u003d $r3) goto B11 else B13\n}",
      "B11 {\n  $r5 \u003d Boolean _unwrapSingle\u003e\n  $z1 \u003d Objects.equals($r12, $r5)\n  if ($z1 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  return\n}",
      "B13 {\n  $r4 \u003d StringArraySerializer\n  new StringArraySerializer(r1, r0, r13, $r12)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringArraySerializer#findContextualConvertingSerializer(...3)",
        "body": "(source not found)"
      },
      {
        "name": "StringArraySerializer#findFormatFeature(...4)",
        "body": "(source not found)"
      },
      {
        "name": "StringArraySerializer#isDefaultSerializer(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.StringArraySerializer",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    return (value.length \u003d\u003d 0);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StringArraySerializer\n  SerializerProvider\n  String[]\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.StringArraySerializer",
    "methodName": "hasSingleElement",
    "signature": "boolean hasSingleElement(java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    return (value.length \u003d\u003d 1);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StringArraySerializer\n  String[]\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.StringArraySerializer",
    "methodName": "serialize",
    "signature": "void serialize(java.lang.String[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d value.length;\r\n    if (len \u003d\u003d 1) {\r\n        if (((_unwrapSingle \u003d\u003d null) \u0026\u0026 provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) || (_unwrapSingle \u003d\u003d Boolean.TRUE)) {\r\n            serializeContents(value, gen, provider);\r\n            return;\r\n        }\r\n    }\r\n    gen.writeStartArray(value, len);\r\n    serializeContents(value, gen, provider);\r\n    gen.writeEndArray();\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i0 !\u003d 1) → B1 | else → B5",
      "B1 : If($r4 !\u003d null) → B2 | else → B3",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B3 : If($r6 !\u003d $r5) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  StringArraySerializer\n  String[]\n  JsonGenerator\n  SerializerProvider\n  i0 \u003d lengthof r0\n  if (i0 !\u003d 1) goto B1 else B5\n}",
      "B1 {\n  $r4 \u003d Boolean _unwrapSingle\u003e\n  if ($r4 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d SerializationFeature WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED\u003e\n  $z0 \u003d r3.isEnabled($r7)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d Boolean _unwrapSingle\u003e\n  $r5 \u003d Boolean TRUE\u003e\n  if ($r6 !\u003d $r5) goto B4 else B5\n}",
      "B4 {\n  r2.serializeContents(r0, r1, r3)\n  return\n}",
      "B5 {\n  r1.writeStartArray(r0, i0)\n  r2.serializeContents(r0, r1, r3)\n  r1.writeEndArray()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringArraySerializer#serializeContents(...3)",
        "body": "{\r\n    final int len \u003d value.length;\r\n    if (len \u003d\u003d 0) {\r\n        return;\r\n    }\r\n    if (_elementSerializer !\u003d null) {\r\n        serializeContentsSlow(value, gen, provider, _elementSerializer);\r\n        return;\r\n    }\r\n    for (int i \u003d 0; i \u003c len; ++i) {\r\n        String str \u003d value[i];\r\n        if (str \u003d\u003d null) {\r\n            gen.writeNull();\r\n        } else {\r\n            gen.writeString(value[i]);\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.StringArraySerializer",
    "methodName": "serializeContents",
    "signature": "void serializeContents(java.lang.String[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d value.length;\r\n    if (len \u003d\u003d 0) {\r\n        return;\r\n    }\r\n    if (_elementSerializer !\u003d null) {\r\n        serializeContentsSlow(value, gen, provider, _elementSerializer);\r\n        return;\r\n    }\r\n    for (int i \u003d 0; i \u003c len; ++i) {\r\n        String str \u003d value[i];\r\n        if (str \u003d\u003d null) {\r\n            gen.writeNull();\r\n        } else {\r\n            gen.writeString(value[i]);\r\n        }\r\n    }\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 !\u003d 0) → B1 | else → B2",
      "B2 : If($r2 \u003d\u003d null) → B3 | else → B4",
      "B5 : If(i1 \u003e\u003d i0) → B6 | else → B10",
      "B6 : If(r3 !\u003d null) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  StringArraySerializer\n  String[]\n  JsonGenerator\n  SerializerProvider\n  i0 \u003d lengthof r0\n  if (i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d JsonSerializer _elementSerializer\u003e\n  if ($r2 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r7 \u003d JsonSerializer _elementSerializer\u003e\n  r1.serializeContentsSlow(r0, r4, r6, $r7)\n  return\n}",
      "B4 {\n  i1 \u003d 0\n}",
      "B5 {\n  if (i1 \u003e\u003d i0) goto B6 else B10\n}",
      "B6 {\n  r3 \u003d r0[i1]\n  if (r3 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  r4.writeNull()\n  goto B9\n}",
      "B8 {\n  $r5 \u003d r0[i1]\n  r4.writeString($r5)\n}",
      "B9 {\n  i1 \u003d i1 + 1\n  goto B5\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B5",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringArraySerializer#serializeContentsSlow(...4)",
        "body": "{\r\n    for (int i \u003d 0, len \u003d value.length; i \u003c len; ++i) {\r\n        String str \u003d value[i];\r\n        if (str \u003d\u003d null) {\r\n            provider.defaultSerializeNull(gen);\r\n        } else {\r\n            ser.serialize(value[i], gen, provider);\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer",
    "methodName": "serialize",
    "signature": "void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d value.size();\r\n    if (len \u003d\u003d 1) {\r\n        if (((_unwrapSingle \u003d\u003d null) \u0026\u0026 provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) || (_unwrapSingle \u003d\u003d Boolean.TRUE)) {\r\n            serializeContents(value, g, provider);\r\n            return;\r\n        }\r\n    }\r\n    g.writeStartArray(value, len);\r\n    serializeContents(value, g, provider);\r\n    g.writeEndArray();\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i0 !\u003d 1) → B1 | else → B5",
      "B1 : If($r4 !\u003d null) → B2 | else → B3",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B3 : If($r6 !\u003d $r5) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  StringCollectionSerializer\n  Collection\n  JsonGenerator\n  SerializerProvider\n  i0 \u003d r0.size()\n  if (i0 !\u003d 1) goto B1 else B5\n}",
      "B1 {\n  $r4 \u003d Boolean _unwrapSingle\u003e\n  if ($r4 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d SerializationFeature WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED\u003e\n  $z0 \u003d r3.isEnabled($r7)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d Boolean _unwrapSingle\u003e\n  $r5 \u003d Boolean TRUE\u003e\n  if ($r6 !\u003d $r5) goto B4 else B5\n}",
      "B4 {\n  r2.serializeContents(r0, r1, r3)\n  return\n}",
      "B5 {\n  r1.writeStartArray(r0, i0)\n  r2.serializeContents(r0, r1, r3)\n  r1.writeEndArray()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringCollectionSerializer#serializeContents(...3)",
        "body": "{\r\n    int i \u003d 0;\r\n    try {\r\n        for (String str : value) {\r\n            if (str \u003d\u003d null) {\r\n                provider.defaultSerializeNull(g);\r\n            } else {\r\n                g.writeString(str);\r\n            }\r\n            ++i;\r\n        }\r\n    } catch (Exception e) {\r\n        wrapAndThrow(provider, e, value, i);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer",
    "methodName": "createContextual",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    // 13-Mar-2017, tatu: Should we call `TypeSerializer.forProperty()`?\r\n    JsonSerializer\u003c?\u003e ser \u003d _serializer;\r\n    if (ser instanceof ContextualSerializer) {\r\n        ser \u003d provider.handleSecondaryContextualization(ser, property);\r\n    }\r\n    if (ser \u003d\u003d _serializer) {\r\n        return this;\r\n    }\r\n    return new TypeWrappedSerializer(_typeSerializer, ser);\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r6 !\u003d $r1) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  TypeWrappedSerializer\n  SerializerProvider\n  BeanProperty\n  r6 \u003d JsonSerializer _serializer\u003e\n  $z0 \u003d ContextualSerializer\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r6 \u003d r4.handleSecondaryContextualization(r6, r5)\n}",
      "B2 {\n  $r1 \u003d JsonSerializer _serializer\u003e\n  if (r6 !\u003d $r1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r2 \u003d TypeWrappedSerializer\n  $r3 \u003d TypeSerializer _typeSerializer\u003e\n  new TypeWrappedSerializer($r3, r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer",
    "methodName": "serialize",
    "signature": "void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    // 27-Nov-2009, tatu: As per [JACKSON-201] may or may not fail...\r\n    if (ctxt.isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)) {\r\n        failForEmpty(ctxt, value);\r\n    }\r\n    super.serialize(value, gen, ctxt);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  UnknownSerializer\n  Object\n  JsonGenerator\n  SerializerProvider\n  $r1 \u003d SerializationFeature FAIL_ON_EMPTY_BEANS\u003e\n  $z0 \u003d r0.isEnabled($r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r2.failForEmpty(r0, r3)\n}",
      "B2 {\n  r2.serialize(r3, r4, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "UnknownSerializer#failForEmpty(...2)",
        "body": "{\r\n    Class\u003c?\u003e cl \u003d value.getClass();\r\n    if (NativeImageUtil.needsReflectionConfiguration(cl)) {\r\n        prov.reportBadDefinition(handledType(), String.format(\"No serializer found for class %s and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS). This appears to be a native image, in which case you may need to configure reflection for the class that is to be serialized\", cl.getName()));\r\n    } else {\r\n        prov.reportBadDefinition(handledType(), String.format(\"No serializer found for class %s and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)\", cl.getName()));\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer",
    "methodName": "serializeWithType",
    "signature": "void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "visibility": "public",
    "body": "{\r\n    if (ctxt.isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)) {\r\n        failForEmpty(ctxt, value);\r\n    }\r\n    super.serializeWithType(value, gen, ctxt, typeSer);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  UnknownSerializer\n  Object\n  JsonGenerator\n  SerializerProvider\n  TypeSerializer\n  $r1 \u003d SerializationFeature FAIL_ON_EMPTY_BEANS\u003e\n  $z0 \u003d r0.isEnabled($r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r2.failForEmpty(r0, r3)\n}",
      "B2 {\n  r2.serializeWithType(r3, r4, r0, r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "UnknownSerializer#failForEmpty(...2)",
        "body": "{\r\n    Class\u003c?\u003e cl \u003d value.getClass();\r\n    if (NativeImageUtil.needsReflectionConfiguration(cl)) {\r\n        prov.reportBadDefinition(handledType(), String.format(\"No serializer found for class %s and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS). This appears to be a native image, in which case you may need to configure reflection for the class that is to be serialized\", cl.getName()));\r\n    } else {\r\n        prov.reportBadDefinition(handledType(), String.format(\"No serializer found for class %s and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)\", cl.getName()));\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter",
    "methodName": "serializeAsField",
    "signature": "void serializeAsField(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    final Object value \u003d get(bean);\r\n    if (value \u003d\u003d null) {\r\n        // Hmmh. I assume we MUST pretty much suppress nulls, since we\r\n        // can\u0027t really unwrap them...\r\n        return;\r\n    }\r\n    JsonSerializer\u003cObject\u003e ser \u003d _serializer;\r\n    if (ser \u003d\u003d null) {\r\n        Class\u003c?\u003e cls \u003d value.getClass();\r\n        PropertySerializerMap map \u003d _dynamicSerializers;\r\n        ser \u003d map.serializerFor(cls);\r\n        if (ser \u003d\u003d null) {\r\n            ser \u003d _findAndAddDynamic(map, cls, prov);\r\n        }\r\n    }\r\n    if (_suppressableValue !\u003d null) {\r\n        if (MARKER_FOR_EMPTY \u003d\u003d _suppressableValue) {\r\n            if (ser.isEmpty(prov, value)) {\r\n                return;\r\n            }\r\n        } else if (_suppressableValue.equals(value)) {\r\n            return;\r\n        }\r\n    }\r\n    // For non-nulls, first: simple check for direct cycles\r\n    if (value \u003d\u003d bean) {\r\n        if (_handleSelfReference(bean, gen, prov, ser)) {\r\n            return;\r\n        }\r\n    }\r\n    // note: must verify we are using unwrapping serializer; if not, will write field name\r\n    if (!ser.isUnwrappingSerializer()) {\r\n        gen.writeFieldName(_name);\r\n    }\r\n    if (_typeSerializer \u003d\u003d null) {\r\n        ser.serialize(value, gen, prov);\r\n    } else {\r\n        ser.serializeWithType(value, gen, prov, _typeSerializer);\r\n    }\r\n}",
    "nodes": 20,
    "edges": 26,
    "cc": 8,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2",
      "B2 : If(r13 !\u003d null) → B3 | else → B5",
      "B3 : If(r13 !\u003d null) → B4 | else → B5",
      "B5 : If($r14 \u003d\u003d null) → B6 | else → B11",
      "B6 : If($r9 !\u003d $r8) → B7 | else → B9",
      "B7 : If($z3 \u003d\u003d false) → B8 | else → B11",
      "B9 : If($z2 \u003d\u003d false) → B10 | else → B11",
      "B11 : If(r2 !\u003d r1) → B12 | else → B14",
      "B12 : If($z1 \u003d\u003d false) → B13 | else → B14",
      "B14 : If($z0 !\u003d 0) → B15 | else → B16",
      "B16 : If($r3 !\u003d null) → B17 | else → B18"
    ],
    "blockList": [
      "B0 {\n  UnwrappingBeanPropertyWriter\n  Object\n  JsonGenerator\n  SerializerProvider\n  r2 \u003d r0.get(r1)\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r13 \u003d JsonSerializer _serializer\u003e\n  if (r13 !\u003d null) goto B3 else B5\n}",
      "B3 {\n  r11 \u003d r2.getClass()\n  r12 \u003d PropertySerializerMap _dynamicSerializers\u003e\n  r13 \u003d r12.serializerFor(r11)\n  if (r13 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  r13 \u003d r0._findAndAddDynamic(r12, r11, r5)\n}",
      "B5 {\n  $r14 \u003d Object _suppressableValue\u003e\n  if ($r14 \u003d\u003d null) goto B6 else B11\n}",
      "B6 {\n  $r9 \u003d Object MARKER_FOR_EMPTY\u003e\n  $r8 \u003d Object _suppressableValue\u003e\n  if ($r9 !\u003d $r8) goto B7 else B9\n}",
      "B7 {\n  $z3 \u003d r13.isEmpty(r5, r2)\n  if ($z3 \u003d\u003d false) goto B8 else B11\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $r10 \u003d Object _suppressableValue\u003e\n  $z2 \u003d $r10.equals(r2)\n  if ($z2 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  return\n}",
      "B11 {\n  if (r2 !\u003d r1) goto B12 else B14\n}",
      "B12 {\n  $z1 \u003d r0._handleSelfReference(r1, r4, r5, r13)\n  if ($z1 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  return\n}",
      "B14 {\n  $z0 \u003d r13.isUnwrappingSerializer()\n  if ($z0 !\u003d 0) goto B15 else B16\n}",
      "B15 {\n  $r7 \u003d SerializedString _name\u003e\n  r4.writeFieldName($r7)\n}",
      "B16 {\n  $r3 \u003d TypeSerializer _typeSerializer\u003e\n  if ($r3 !\u003d null) goto B17 else B18\n}",
      "B17 {\n  r13.serialize(r2, r4, r5)\n  goto B19\n}",
      "B18 {\n  $r6 \u003d TypeSerializer _typeSerializer\u003e\n  r13.serializeWithType(r2, r4, r5, $r6)\n}",
      "B19 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B11",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B14",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "UnwrappingBeanPropertyWriter#_handleSelfReference(...4)",
        "body": "(source not found)"
      },
      {
        "name": "UnwrappingBeanPropertyWriter#get(...1)",
        "body": "(source not found)"
      },
      {
        "name": "UnwrappingBeanPropertyWriter#_findAndAddDynamic(...3)",
        "body": "{\r\n    JsonSerializer\u003cObject\u003e serializer;\r\n    if (_nonTrivialBaseType !\u003d null) {\r\n        JavaType subtype \u003d provider.constructSpecializedType(_nonTrivialBaseType, type);\r\n        serializer \u003d provider.findValueSerializer(subtype, this);\r\n    } else {\r\n        serializer \u003d provider.findValueSerializer(type, this);\r\n    }\r\n    NameTransformer t \u003d _nameTransformer;\r\n    if (serializer.isUnwrappingSerializer() \u0026\u0026 // as per [databind#2060], need to also check this, in case someone writes\r\n    // custom implementation that does not extend standard implementation:\r\n    (serializer instanceof UnwrappingBeanSerializer)) {\r\n        t \u003d NameTransformer.chainedTransformer(t, ((UnwrappingBeanSerializer) serializer)._nameTransformer);\r\n    }\r\n    serializer \u003d serializer.unwrappingSerializer(t);\r\n    _dynamicSerializers \u003d _dynamicSerializers.newWith(type, serializer);\r\n    return serializer;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter",
    "methodName": "assignSerializer",
    "signature": "void assignSerializer(com.fasterxml.jackson.databind.JsonSerializer)",
    "visibility": "public",
    "body": "{\r\n    if (ser !\u003d null) {\r\n        NameTransformer t \u003d _nameTransformer;\r\n        if (ser.isUnwrappingSerializer() \u0026\u0026 // as per [databind#2060], need to also check this, in case someone writes\r\n        // custom implementation that does not extend standard implementation:\r\n        (ser instanceof UnwrappingBeanSerializer)) {\r\n            t \u003d NameTransformer.chainedTransformer(t, ((UnwrappingBeanSerializer) ser)._nameTransformer);\r\n        }\r\n        ser \u003d ser.unwrappingSerializer(t);\r\n    }\r\n    super.assignSerializer(ser);\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B5",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B4",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  UnwrappingBeanPropertyWriter\n  JsonSerializer\n  if (r3 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  r4 \u003d NameTransformer _nameTransformer\u003e\n  $z0 \u003d r3.isUnwrappingSerializer()\n  if ($z0 \u003d\u003d false) goto B2 else B4\n}",
      "B2 {\n  $z1 \u003d UnwrappingBeanSerializer\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d UnwrappingBeanSerializer) r3\n  $r2 \u003d NameTransformer _nameTransformer\u003e\n  r4 \u003d NameTransformer.chainedTransformer(r4, $r2)\n}",
      "B4 {\n  r3 \u003d r3.unwrappingSerializer(r4)\n}",
      "B5 {\n  r0.assignSerializer(r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter",
    "methodName": "depositSchemaProperty",
    "signature": "void depositSchemaProperty(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    JsonSerializer\u003cObject\u003e ser \u003d provider.findValueSerializer(this.getType(), this).unwrappingSerializer(_nameTransformer);\r\n    if (ser.isUnwrappingSerializer()) {\r\n        ser.acceptJsonFormatVisitor(new JsonFormatVisitorWrapper.Base(provider) {\r\n\r\n            // an unwrapping serializer will always expect ObjectFormat,\r\n            // hence, the other cases do not have to be implemented\r\n            @Override\r\n            public JsonObjectFormatVisitor expectObjectFormat(JavaType type) throws JsonMappingException {\r\n                return visitor;\r\n            }\r\n        }, this.getType());\r\n    } else {\r\n        super.depositSchemaProperty(visitor, provider);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  UnwrappingBeanPropertyWriter\n  JsonObjectFormatVisitor\n  SerializerProvider\n  $r2 \u003d r1.getType()\n  $r4 \u003d r0.findValueSerializer($r2, r1)\n  $r3 \u003d NameTransformer _nameTransformer\u003e\n  r5 \u003d $r4.unwrappingSerializer($r3)\n  $z0 \u003d r5.isUnwrappingSerializer()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d UnwrappingBeanPropertyWriter$1\n  new UnwrappingBeanPropertyWriter$1(r1, r0, r6)\n  $r8 \u003d r1.getType()\n  r5.acceptJsonFormatVisitor($r7, $r8)\n  goto B3\n}",
      "B2 {\n  r1.depositSchemaProperty(r6, r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "UnwrappingBeanPropertyWriter#getType(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer",
    "methodName": "serialize",
    "signature": "void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    // [databind#631]\r\n    gen.assignCurrentValue(bean);\r\n    if (_objectIdWriter !\u003d null) {\r\n        _serializeWithObjectId(bean, gen, provider, false);\r\n        return;\r\n    }\r\n    if (_propertyFilterId !\u003d null) {\r\n        serializeFieldsFiltered(bean, gen, provider);\r\n    } else {\r\n        serializeFields(bean, gen, provider);\r\n    }\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r3 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r4 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  UnwrappingBeanSerializer\n  Object\n  JsonGenerator\n  SerializerProvider\n  r0.assignCurrentValue(r1)\n  $r3 \u003d ObjectIdWriter _objectIdWriter\u003e\n  if ($r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r2._serializeWithObjectId(r1, r0, r5, 0)\n  return\n}",
      "B2 {\n  $r4 \u003d Object _propertyFilterId\u003e\n  if ($r4 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  r2.serializeFieldsFiltered(r1, r0, r5)\n  goto B5\n}",
      "B4 {\n  r2.serializeFields(r1, r0, r5)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "UnwrappingBeanSerializer#serializeFields(...3)",
        "body": "(source not found)"
      },
      {
        "name": "UnwrappingBeanSerializer#_serializeWithObjectId(...4)",
        "body": "(source not found)"
      },
      {
        "name": "UnwrappingBeanSerializer#serializeFieldsFiltered(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer",
    "methodName": "serializeWithType",
    "signature": "void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "visibility": "public",
    "body": "{\r\n    if (provider.isEnabled(SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS)) {\r\n        provider.reportBadDefinition(handledType(), \"Unwrapped property requires use of type information: cannot serialize without disabling `SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS`\");\r\n    }\r\n    // [databind#631]\r\n    gen.assignCurrentValue(bean);\r\n    if (_objectIdWriter !\u003d null) {\r\n        _serializeWithObjectId(bean, gen, provider, typeSer);\r\n        return;\r\n    }\r\n    if (_propertyFilterId !\u003d null) {\r\n        serializeFieldsFiltered(bean, gen, provider);\r\n    } else {\r\n        serializeFields(bean, gen, provider);\r\n    }\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($r5 \u003d\u003d null) → B3 | else → B4",
      "B4 : If($r6 \u003d\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  UnwrappingBeanSerializer\n  Object\n  JsonGenerator\n  SerializerProvider\n  TypeSerializer\n  $r1 \u003d SerializationFeature FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS\u003e\n  $z0 \u003d r0.isEnabled($r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d r4.handledType()\n  r0.reportBadDefinition($r8, \"Unwrapped property requires use of type information: cannot serialize without disabling `SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS`\")\n}",
      "B2 {\n  r2.assignCurrentValue(r3)\n  $r5 \u003d ObjectIdWriter _objectIdWriter\u003e\n  if ($r5 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  r4._serializeWithObjectId(r3, r2, r0, r7)\n  return\n}",
      "B4 {\n  $r6 \u003d Object _propertyFilterId\u003e\n  if ($r6 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  r4.serializeFieldsFiltered(r3, r2, r0)\n  goto B7\n}",
      "B6 {\n  r4.serializeFields(r3, r2, r0)\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "UnwrappingBeanSerializer#serializeFields(...3)",
        "body": "(source not found)"
      },
      {
        "name": "UnwrappingBeanSerializer#_serializeWithObjectId(...4)",
        "body": "(source not found)"
      },
      {
        "name": "UnwrappingBeanSerializer#handledType(...0)",
        "body": "(source not found)"
      },
      {
        "name": "UnwrappingBeanSerializer#serializeFieldsFiltered(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.WritableObjectId",
    "methodName": "writeAsId",
    "signature": "boolean writeAsId(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)",
    "visibility": "public",
    "body": "{\r\n    if ((id !\u003d null) \u0026\u0026 (idWritten || w.alwaysAsId)) {\r\n        // 03-Aug-2013, tatu: Prefer Native Object Ids if available\r\n        if (gen.canWriteObjectId()) {\r\n            gen.writeObjectRef(String.valueOf(id));\r\n        } else {\r\n            w.serializer.serialize(id, gen, provider);\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B7",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3",
      "B2 : If($z2 \u003d\u003d false) → B3 | else → B7",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  WritableObjectId\n  JsonGenerator\n  SerializerProvider\n  ObjectIdWriter\n  $r1 \u003d Object id\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B7\n}",
      "B1 {\n  $z0 \u003d WritableObjectId: boolean idWritten\u003e\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d ObjectIdWriter: boolean alwaysAsId\u003e\n  if ($z2 \u003d\u003d false) goto B3 else B7\n}",
      "B3 {\n  $z1 \u003d r2.canWriteObjectId()\n  if ($z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r7 \u003d Object id\u003e\n  $r8 \u003d String.valueOf($r7)\n  r2.writeObjectRef($r8)\n  goto B6\n}",
      "B5 {\n  $r6 \u003d JsonSerializer serializer\u003e\n  $r5 \u003d Object id\u003e\n  $r6.serialize($r5, r2, r4)\n}",
      "B6 {\n  return\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B7",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.WritableObjectId",
    "methodName": "generateId",
    "signature": "java.lang.Object generateId(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    // 04-Jun-2016, tatu: As per [databind#1255], need to consider possibility of\r\n    //    id being generated for \"alwaysAsId\", but not being written as POJO; regardless,\r\n    //    need to use existing id if there is one:\r\n    if (id \u003d\u003d null) {\r\n        id \u003d generator.generateId(forPojo);\r\n    }\r\n    return id;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  WritableObjectId\n  Object\n  $r1 \u003d Object id\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d ObjectIdGenerator generator\u003e\n  $r5 \u003d $r4.generateId(r3)\n  Object id\u003e \u003d $r5\n}",
      "B2 {\n  $r2 \u003d Object id\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.impl.WritableObjectId",
    "methodName": "writeAsField",
    "signature": "void writeAsField(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)",
    "visibility": "public",
    "body": "{\r\n    idWritten \u003d true;\r\n    // 03-Aug-2013, tatu: Prefer Native Object Ids if available\r\n    if (gen.canWriteObjectId()) {\r\n        // Need to assume String(ified) ids, for now... could add \u0027long\u0027 variant?\r\n        // 05-Feb-2019, tatu: But in special case of `null` we should not coerce -- whether\r\n        //   we should even call is an open question, but for now do pass to let generator\r\n        //   decide what to do, if anything.\r\n        String idStr \u003d (id \u003d\u003d null) ? null : String.valueOf(id);\r\n        gen.writeObjectId(idStr);\r\n        return;\r\n    }\r\n    SerializableString name \u003d w.propertyName;\r\n    if (name !\u003d null) {\r\n        // 05-Feb-2019, tatu: How about `null` id? For now, write\r\n        gen.writeFieldName(name);\r\n        w.serializer.serialize(id, gen, provider);\r\n    }\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B5",
      "B1 : If($r6 !\u003d null) → B2 | else → B3",
      "B5 : If(r9 \u003d\u003d null) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  WritableObjectId\n  JsonGenerator\n  SerializerProvider\n  ObjectIdWriter\n  WritableObjectId: boolean idWritten\u003e \u003d 1\n  $z0 \u003d r1.canWriteObjectId()\n  if ($z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  $r6 \u003d Object id\u003e\n  if ($r6 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r8 \u003d null\n  goto B4\n}",
      "B3 {\n  $r7 \u003d Object id\u003e\n  $r8 \u003d String.valueOf($r7)\n}",
      "B4 {\n  r1.writeObjectId($r8)\n  return\n}",
      "B5 {\n  r9 \u003d SerializableString propertyName\u003e\n  if (r9 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  r1.writeFieldName(r9)\n  $r5 \u003d JsonSerializer serializer\u003e\n  $r4 \u003d Object id\u003e\n  $r5.serialize($r4, r1, r3)\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "methodName": "getReadOnlyLookupMap",
    "signature": "com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap getReadOnlyLookupMap()",
    "visibility": "public",
    "body": "{\r\n    ReadOnlyClassToSerializerMap m \u003d _readOnlyMap.get();\r\n    if (m !\u003d null) {\r\n        return m;\r\n    }\r\n    return _makeReadOnlyLookupMap();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializerCache\n  $r1 \u003d AtomicReference _readOnlyMap\u003e\n  $r2 \u003d $r1.get()\n  r3 \u003d ReadOnlyClassToSerializerMap) $r2\n  if (r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d r0._makeReadOnlyLookupMap()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SerializerCache#_makeReadOnlyLookupMap(...0)",
        "body": "{\r\n    // double-locking; safe, but is it really needed? Not doing that is only a perf problem,\r\n    // not correctness\r\n    ReadOnlyClassToSerializerMap m \u003d _readOnlyMap.get();\r\n    if (m \u003d\u003d null) {\r\n        m \u003d ReadOnlyClassToSerializerMap.from(_sharedMap);\r\n        _readOnlyMap.set(m);\r\n    }\r\n    return m;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "methodName": "addTypedSerializer",
    "signature": "void addTypedSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer)",
    "visibility": "public",
    "body": "{\r\n    synchronized (this) {\r\n        if (_sharedMap.put(new TypeKey(type, true), ser) \u003d\u003d null) {\r\n            // let\u0027s invalidate the read-only copy, too, to get it updated\r\n            _readOnlyMap.set(null);\r\n        }\r\n    }\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r5 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializerCache\n  JavaType\n  JsonSerializer\n  entermonitor r0\n  $r3 \u003d LookupCache _sharedMap\u003e\n  $r1 \u003d TypeKey\n  new TypeKey(r2, 1)\n  $r5 \u003d $r3.put($r1, r4)\n  if ($r5 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d AtomicReference _readOnlyMap\u003e\n  $r6.set(null)\n}",
      "B2 {\n  exitmonitor r0\n  goto B4\n}",
      "B3 {\n  $r7 :\u003d @caughtexception\n  exitmonitor r0\n  throw $r7\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "methodName": "addTypedSerializer",
    "signature": "void addTypedSerializer(java.lang.Class,com.fasterxml.jackson.databind.JsonSerializer)",
    "visibility": "public",
    "body": "{\r\n    synchronized (this) {\r\n        if (_sharedMap.put(new TypeKey(cls, true), ser) \u003d\u003d null) {\r\n            // let\u0027s invalidate the read-only copy, too, to get it updated\r\n            _readOnlyMap.set(null);\r\n        }\r\n    }\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r5 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializerCache\n  Class\n  JsonSerializer\n  entermonitor r0\n  $r3 \u003d LookupCache _sharedMap\u003e\n  $r1 \u003d TypeKey\n  new TypeKey(r2, 1)\n  $r5 \u003d $r3.put($r1, r4)\n  if ($r5 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d AtomicReference _readOnlyMap\u003e\n  $r6.set(null)\n}",
      "B2 {\n  exitmonitor r0\n  goto B4\n}",
      "B3 {\n  $r7 :\u003d @caughtexception\n  exitmonitor r0\n  throw $r7\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "methodName": "addAndResolveNonTypedSerializer",
    "signature": "void addAndResolveNonTypedSerializer(java.lang.Class,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    synchronized (this) {\r\n        if (_sharedMap.put(new TypeKey(type, false), ser) \u003d\u003d null) {\r\n            _readOnlyMap.set(null);\r\n        }\r\n        // Need resolution to handle cyclic POJO type dependencies\r\n        /* 14-May-2011, tatu: Resolving needs to be done in synchronized manner;\r\n             *   this because while we do need to register instance first, we also must\r\n             *   keep lock until resolution is complete.\r\n             */\r\n        if (ser instanceof ResolvableSerializer) {\r\n            ((ResolvableSerializer) ser).resolve(provider);\r\n        }\r\n    }\r\n}",
    "nodes": 7,
    "edges": 7,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r5 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  SerializerCache\n  Class\n  JsonSerializer\n  SerializerProvider\n  entermonitor r0\n  $r3 \u003d LookupCache _sharedMap\u003e\n  $r1 \u003d TypeKey\n  new TypeKey(r2, 0)\n  $r5 \u003d $r3.put($r1, r4)\n  if ($r5 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d AtomicReference _readOnlyMap\u003e\n  $r8.set(null)\n}",
      "B2 {\n  $z0 \u003d ResolvableSerializer\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r7 \u003d ResolvableSerializer) r4\n  $r7.resolve(r6)\n}",
      "B4 {\n  exitmonitor r0\n  goto B6\n}",
      "B5 {\n  $r9 :\u003d @caughtexception\n  exitmonitor r0\n  throw $r9\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "methodName": "addAndResolveNonTypedSerializer",
    "signature": "void addAndResolveNonTypedSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    synchronized (this) {\r\n        if (_sharedMap.put(new TypeKey(type, false), ser) \u003d\u003d null) {\r\n            _readOnlyMap.set(null);\r\n        }\r\n        // Need resolution to handle cyclic POJO type dependencies\r\n        /* 14-May-2011, tatu: Resolving needs to be done in synchronized manner;\r\n             *   this because while we do need to register instance first, we also must\r\n             *   keep lock until resolution is complete.\r\n             */\r\n        if (ser instanceof ResolvableSerializer) {\r\n            ((ResolvableSerializer) ser).resolve(provider);\r\n        }\r\n    }\r\n}",
    "nodes": 7,
    "edges": 7,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r5 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  SerializerCache\n  JavaType\n  JsonSerializer\n  SerializerProvider\n  entermonitor r0\n  $r3 \u003d LookupCache _sharedMap\u003e\n  $r1 \u003d TypeKey\n  new TypeKey(r2, 0)\n  $r5 \u003d $r3.put($r1, r4)\n  if ($r5 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d AtomicReference _readOnlyMap\u003e\n  $r8.set(null)\n}",
      "B2 {\n  $z0 \u003d ResolvableSerializer\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r7 \u003d ResolvableSerializer) r4\n  $r7.resolve(r6)\n}",
      "B4 {\n  exitmonitor r0\n  goto B6\n}",
      "B5 {\n  $r9 :\u003d @caughtexception\n  exitmonitor r0\n  throw $r9\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "methodName": "addAndResolveNonTypedSerializer",
    "signature": "void addAndResolveNonTypedSerializer(java.lang.Class,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    synchronized (this) {\r\n        Object ob1 \u003d _sharedMap.put(new TypeKey(rawType, false), ser);\r\n        Object ob2 \u003d _sharedMap.put(new TypeKey(fullType, false), ser);\r\n        if ((ob1 \u003d\u003d null) || (ob2 \u003d\u003d null)) {\r\n            _readOnlyMap.set(null);\r\n        }\r\n        if (ser instanceof ResolvableSerializer) {\r\n            ((ResolvableSerializer) ser).resolve(provider);\r\n        }\r\n    }\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r5 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r9 !\u003d null) → B2 | else → B3",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  SerializerCache\n  Class\n  JavaType\n  JsonSerializer\n  SerializerProvider\n  entermonitor r0\n  $r3 \u003d LookupCache _sharedMap\u003e\n  $r1 \u003d TypeKey\n  new TypeKey(r2, 0)\n  r5 \u003d $r3.put($r1, r4)\n  $r8 \u003d LookupCache _sharedMap\u003e\n  $r6 \u003d TypeKey\n  new TypeKey(r7, 0)\n  r9 \u003d $r8.put($r6, r4)\n  if (r5 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r9 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r10 \u003d AtomicReference _readOnlyMap\u003e\n  $r10.set(null)\n}",
      "B3 {\n  $z0 \u003d ResolvableSerializer\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r12 \u003d ResolvableSerializer) r4\n  $r12.resolve(r11)\n}",
      "B5 {\n  exitmonitor r0\n  goto B7\n}",
      "B6 {\n  $r13 :\u003d @caughtexception\n  exitmonitor r0\n  throw $r13\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "methodName": "createContextual",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    // 16-Mar-2021, tatu: As per [databind#3080], was passing wrapper type\r\n    //    always; should not have.\r\n    JsonFormat.Value format \u003d findFormatOverrides(serializers, property, handledType());\r\n    if (format !\u003d null) {\r\n        JsonFormat.Shape shape \u003d format.getShape();\r\n        if (shape.isNumeric()) {\r\n            return new AsNumber(_forPrimitive);\r\n        }\r\n        if (shape \u003d\u003d JsonFormat.Shape.STRING) {\r\n            return new ToStringSerializer(_handledType);\r\n        }\r\n    }\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 \u003d\u003d null) → B1 | else → B5",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3",
      "B3 : If(r5 !\u003d $r6) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  BooleanSerializer\n  SerializerProvider\n  BeanProperty\n  $r3 \u003d r0.handledType()\n  r4 \u003d r0.findFormatOverrides(r1, r2, $r3)\n  if (r4 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  r5 \u003d r4.getShape()\n  $z0 \u003d r5.isNumeric()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r9 \u003d BooleanSerializer$AsNumber\n  $z1 \u003d BooleanSerializer: boolean _forPrimitive\u003e\n  new BooleanSerializer$AsNumber($z1)\n  return\n}",
      "B3 {\n  $r6 \u003d JsonFormat$Shape STRING\u003e\n  if (r5 !\u003d $r6) goto B4 else B5\n}",
      "B4 {\n  $r7 \u003d ToStringSerializer\n  $r8 \u003d Class _handledType\u003e\n  new ToStringSerializer($r8)\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BooleanSerializer#findFormatOverrides(...3)",
        "body": "(source not found)"
      },
      {
        "name": "BooleanSerializer#handledType(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "methodName": "getSchema",
    "signature": "com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)",
    "visibility": "public",
    "body": "{\r\n    return createSchemaNode(\"boolean\", !_forPrimitive);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BooleanSerializer\n  SerializerProvider\n  Type\n  $z0 \u003d BooleanSerializer: boolean _forPrimitive\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  $r1 \u003d r0.createSchemaNode(\"boolean\", $z1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BooleanSerializer#createSchemaNode(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.ByteArraySerializer",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,byte[])",
    "visibility": "public",
    "body": "{\r\n    return value.length \u003d\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ByteArraySerializer\n  SerializerProvider\n  r0 :\u003d @parameter1: byte[]\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.ByteArraySerializer",
    "methodName": "acceptJsonFormatVisitor",
    "signature": "void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    // 14-Mar-2016, tatu: while logically (and within JVM) binary, gets encoded as Base64 String,\r\n    // let\u0027s try to indicate it is array of Bytes... difficult, thanks to JSON Schema\u0027s\r\n    // lackluster listing of types\r\n    //\r\n    // TODO: for 2.8, make work either as String/base64, or array of numbers,\r\n    //   with a qualifier that can be used to determine it\u0027s byte[]\r\n    JsonArrayFormatVisitor v2 \u003d visitor.expectArrayFormat(typeHint);\r\n    if (v2 !\u003d null) {\r\n        v2.itemsFormat(JsonFormatTypes.INTEGER);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ByteArraySerializer\n  JsonFormatVisitorWrapper\n  JavaType\n  r2 \u003d r0.expectArrayFormat(r1)\n  if (r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d JsonFormatTypes INTEGER\u003e\n  r2.itemsFormat($r3)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.ByteBufferSerializer",
    "methodName": "serialize",
    "signature": "void serialize(java.nio.ByteBuffer,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    // first, simple case when wrapping an array...\r\n    if (bbuf.hasArray()) {\r\n        final int pos \u003d bbuf.position();\r\n        gen.writeBinary(bbuf.array(), bbuf.arrayOffset() + pos, bbuf.limit() - pos);\r\n        return;\r\n    }\r\n    // the other case is more complicated however. Best to handle with InputStream wrapper.\r\n    // Prior to jackson-databind#4164 we rewound here, but that didn\u0027t match heap buffer behavior.\r\n    ByteBuffer copy \u003d bbuf.asReadOnlyBuffer();\r\n    InputStream in \u003d new ByteBufferBackedInputStream(copy);\r\n    gen.writeBinary(in, copy.remaining());\r\n    in.close();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ByteBufferSerializer\n  ByteBuffer\n  JsonGenerator\n  SerializerProvider\n  $z0 \u003d r0.hasArray()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  i5 \u003d r0.position()\n  $r3 \u003d r0.array()\n  $i1 \u003d r0.arrayOffset()\n  $i4 \u003d $i1 + i5\n  $i2 \u003d r0.limit()\n  $i3 \u003d $i2 - i5\n  r2.writeBinary($r3, $i4, $i3)\n  return\n}",
      "B2 {\n  r6 \u003d r0.asReadOnlyBuffer()\n  $r1 \u003d ByteBufferBackedInputStream\n  new ByteBufferBackedInputStream(r6)\n  $i0 \u003d r6.remaining()\n  r2.writeBinary($r1, $i0)\n  $r1.close()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.ByteBufferSerializer",
    "methodName": "acceptJsonFormatVisitor",
    "signature": "void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    // 31-Mar-2017, tatu: Use same type as `ByteArraySerializer`: not optimal but has to do\r\n    JsonArrayFormatVisitor v2 \u003d visitor.expectArrayFormat(typeHint);\r\n    if (v2 !\u003d null) {\r\n        v2.itemsFormat(JsonFormatTypes.INTEGER);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ByteBufferSerializer\n  JsonFormatVisitorWrapper\n  JavaType\n  r2 \u003d r0.expectArrayFormat(r1)\n  if (r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d JsonFormatTypes INTEGER\u003e\n  r2.itemsFormat($r3)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer",
    "methodName": "serialize",
    "signature": "void serialize(java.util.Calendar,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (_asTimestamp(provider)) {\r\n        g.writeNumber(_timestamp(value));\r\n        return;\r\n    }\r\n    _serializeAsString(value.getTime(), g, provider);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CalendarSerializer\n  Calendar\n  JsonGenerator\n  SerializerProvider\n  $z0 \u003d r0._asTimestamp(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $l0 \u003d r0._timestamp(r2)\n  r3.writeNumber($l0)\n  return\n}",
      "B2 {\n  $r4 \u003d r2.getTime()\n  r0._serializeAsString($r4, r3, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CalendarSerializer#_timestamp(...1)",
        "body": "{\r\n    return (value \u003d\u003d null) ? 0L : value.getTimeInMillis();\r\n}"
      },
      {
        "name": "CalendarSerializer#_asTimestamp(...1)",
        "body": "(source not found)"
      },
      {
        "name": "CalendarSerializer#_serializeAsString(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.CollectionSerializer",
    "methodName": "hasSingleElement",
    "signature": "boolean hasSingleElement(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    return value.size() \u003d\u003d 1;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CollectionSerializer\n  Collection\n  $i0 \u003d r0.size()\n  if ($i0 !\u003d 1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.CollectionSerializer",
    "methodName": "serialize",
    "signature": "void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d value.size();\r\n    if (len \u003d\u003d 1) {\r\n        if (((_unwrapSingle \u003d\u003d null) \u0026\u0026 provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) || (_unwrapSingle \u003d\u003d Boolean.TRUE)) {\r\n            serializeContents(value, g, provider);\r\n            return;\r\n        }\r\n    }\r\n    g.writeStartArray(value, len);\r\n    serializeContents(value, g, provider);\r\n    g.writeEndArray();\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i0 !\u003d 1) → B1 | else → B5",
      "B1 : If($r4 !\u003d null) → B2 | else → B3",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B3 : If($r6 !\u003d $r5) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  CollectionSerializer\n  Collection\n  JsonGenerator\n  SerializerProvider\n  i0 \u003d r0.size()\n  if (i0 !\u003d 1) goto B1 else B5\n}",
      "B1 {\n  $r4 \u003d Boolean _unwrapSingle\u003e\n  if ($r4 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d SerializationFeature WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED\u003e\n  $z0 \u003d r3.isEnabled($r7)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d Boolean _unwrapSingle\u003e\n  $r5 \u003d Boolean TRUE\u003e\n  if ($r6 !\u003d $r5) goto B4 else B5\n}",
      "B4 {\n  r2.serializeContents(r0, r1, r3)\n  return\n}",
      "B5 {\n  r1.writeStartArray(r0, i0)\n  r2.serializeContents(r0, r1, r3)\n  r1.writeEndArray()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionSerializer#serializeContents(...3)",
        "body": "{\r\n    g.assignCurrentValue(value);\r\n    if (_elementSerializer !\u003d null) {\r\n        serializeContentsUsing(value, g, provider, _elementSerializer);\r\n        return;\r\n    }\r\n    Iterator\u003c?\u003e it \u003d value.iterator();\r\n    if (!it.hasNext()) {\r\n        return;\r\n    }\r\n    PropertySerializerMap serializers \u003d _dynamicSerializers;\r\n    // [databind#4849]/[databind#4214]: need to check for EnumSet\r\n    final TypeSerializer typeSer \u003d (_maybeEnumSet \u0026\u0026 value instanceof EnumSet\u003c?\u003e) ? null : _valueTypeSerializer;\r\n    int i \u003d 0;\r\n    try {\r\n        do {\r\n            Object elem \u003d it.next();\r\n            if (elem \u003d\u003d null) {\r\n                provider.defaultSerializeNull(g);\r\n            } else {\r\n                Class\u003c?\u003e cc \u003d elem.getClass();\r\n                JsonSerializer\u003cObject\u003e serializer \u003d serializers.serializerFor(cc);\r\n                if (serializer \u003d\u003d null) {\r\n                    if (_elementType.hasGenericTypes()) {\r\n                        serializer \u003d _findAndAddDynamic(serializers, provider.constructSpecializedType(_elementType, cc), provider);\r\n                    } else {\r\n                        serializer \u003d _findAndAddDynamic(serializers, cc, provider);\r\n                    }\r\n                    serializers \u003d _dynamicSerializers;\r\n                }\r\n                if (typeSer \u003d\u003d null) {\r\n                    serializer.serialize(elem, g, provider);\r\n                } else {\r\n                    serializer.serializeWithType(elem, g, provider, typeSer);\r\n                }\r\n            }\r\n            ++i;\r\n        } while (it.hasNext());\r\n    } catch (Exception e) {\r\n        wrapAndThrow(provider, e, value, i);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.CollectionSerializer",
    "methodName": "serializeContents",
    "signature": "void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    g.assignCurrentValue(value);\r\n    if (_elementSerializer !\u003d null) {\r\n        serializeContentsUsing(value, g, provider, _elementSerializer);\r\n        return;\r\n    }\r\n    Iterator\u003c?\u003e it \u003d value.iterator();\r\n    if (!it.hasNext()) {\r\n        return;\r\n    }\r\n    PropertySerializerMap serializers \u003d _dynamicSerializers;\r\n    // [databind#4849]/[databind#4214]: need to check for EnumSet\r\n    final TypeSerializer typeSer \u003d (_maybeEnumSet \u0026\u0026 value instanceof EnumSet\u003c?\u003e) ? null : _valueTypeSerializer;\r\n    int i \u003d 0;\r\n    try {\r\n        do {\r\n            Object elem \u003d it.next();\r\n            if (elem \u003d\u003d null) {\r\n                provider.defaultSerializeNull(g);\r\n            } else {\r\n                Class\u003c?\u003e cc \u003d elem.getClass();\r\n                JsonSerializer\u003cObject\u003e serializer \u003d serializers.serializerFor(cc);\r\n                if (serializer \u003d\u003d null) {\r\n                    if (_elementType.hasGenericTypes()) {\r\n                        serializer \u003d _findAndAddDynamic(serializers, provider.constructSpecializedType(_elementType, cc), provider);\r\n                    } else {\r\n                        serializer \u003d _findAndAddDynamic(serializers, cc, provider);\r\n                    }\r\n                    serializers \u003d _dynamicSerializers;\r\n                }\r\n                if (typeSer \u003d\u003d null) {\r\n                    serializer.serialize(elem, g, provider);\r\n                } else {\r\n                    serializer.serializeWithType(elem, g, provider, typeSer);\r\n                }\r\n            }\r\n            ++i;\r\n        } while (it.hasNext());\r\n    } catch (Exception e) {\r\n        wrapAndThrow(provider, e, value, i);\r\n    }\r\n}",
    "nodes": 23,
    "edges": 29,
    "cc": 8,
    "flowSummary": [
      "B0 : If($r3 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B7",
      "B5 : If($z3 \u003d\u003d false) → B6 | else → B7",
      "B9 : If($r15 !\u003d null) → B10 | else → B11",
      "B11 : If(r16 !\u003d null) → B12 | else → B16",
      "B12 : If($z2 \u003d\u003d false) → B13 | else → B14",
      "B16 : If(r5 !\u003d null) → B17 | else → B18",
      "B19 : If($z4 !\u003d 0) → B20 | else → B9"
    ],
    "blockList": [
      "B0 {\n  CollectionSerializer\n  Collection\n  JsonGenerator\n  SerializerProvider\n  r0.assignCurrentValue(r1)\n  $r3 \u003d JsonSerializer _elementSerializer\u003e\n  if ($r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r11 \u003d JsonSerializer _elementSerializer\u003e\n  r2.serializeContentsUsing(r1, r0, r7, $r11)\n  return\n}",
      "B2 {\n  r4 \u003d r1.iterator()\n  $z0 \u003d r4.hasNext()\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r13 \u003d PropertySerializerMap _dynamicSerializers\u003e\n  $z1 \u003d CollectionSerializer: boolean _maybeEnumSet\u003e\n  if ($z1 \u003d\u003d false) goto B5 else B7\n}",
      "B5 {\n  $z3 \u003d EnumSet\n  if ($z3 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r14 \u003d null\n  goto B8\n}",
      "B7 {\n  $r14 \u003d TypeSerializer _valueTypeSerializer\u003e\n}",
      "B8 {\n  r5 \u003d $r14\n  i0 \u003d 0\n}",
      "B9 {\n  $r15 \u003d r4.next()\n  if ($r15 !\u003d null) goto B10 else B11\n}",
      "B10 {\n  r7.defaultSerializeNull(r0)\n  goto B19\n}",
      "B11 {\n  r6 \u003d $r15.getClass()\n  r16 \u003d r13.serializerFor(r6)\n  if (r16 !\u003d null) goto B12 else B16\n}",
      "B12 {\n  $r8 \u003d JavaType _elementType\u003e\n  $z2 \u003d $r8.hasGenericTypes()\n  if ($z2 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  $r9 \u003d JavaType _elementType\u003e\n  $r10 \u003d r7.constructSpecializedType($r9, r6)\n  r16 \u003d r2._findAndAddDynamic(r13, $r10, r7)\n  goto B15\n}",
      "B14 {\n  r16 \u003d r2._findAndAddDynamic(r13, r6, r7)\n}",
      "B15 {\n  r13 \u003d PropertySerializerMap _dynamicSerializers\u003e\n}",
      "B16 {\n  if (r5 !\u003d null) goto B17 else B18\n}",
      "B17 {\n  r16.serialize($r15, r0, r7)\n  goto B19\n}",
      "B18 {\n  r16.serializeWithType($r15, r0, r7, r5)\n}",
      "B19 {\n  i0 \u003d i0 + 1\n  $z4 \u003d r4.hasNext()\n  if ($z4 !\u003d 0) goto B20 else B9\n}",
      "B20 {\n  goto B22\n}",
      "B21 {\n  $r12 :\u003d @caughtexception\n  r2.wrapAndThrow(r7, $r12, r1, i0)\n}",
      "B22 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B19",
      "B11 --\u003e B12",
      "B11 --\u003e B16",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B16",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B19 --\u003e B9",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B22 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionSerializer#serializeContentsUsing(...4)",
        "body": "{\r\n    Iterator\u003c?\u003e it \u003d value.iterator();\r\n    if (it.hasNext()) {\r\n        // [databind#4849]/[databind#4214]: need to check for EnumSet\r\n        final TypeSerializer typeSer \u003d (_maybeEnumSet \u0026\u0026 value instanceof EnumSet\u003c?\u003e) ? null : _valueTypeSerializer;\r\n        int i \u003d 0;\r\n        do {\r\n            Object elem \u003d it.next();\r\n            try {\r\n                if (elem \u003d\u003d null) {\r\n                    provider.defaultSerializeNull(g);\r\n                } else {\r\n                    if (typeSer \u003d\u003d null) {\r\n                        ser.serialize(elem, g, provider);\r\n                    } else {\r\n                        ser.serializeWithType(elem, g, provider, typeSer);\r\n                    }\r\n                }\r\n                ++i;\r\n            } catch (Exception e) {\r\n                wrapAndThrow(provider, e, value, i);\r\n            }\r\n        } while (it.hasNext());\r\n    }\r\n}"
      },
      {
        "name": "CollectionSerializer#_findAndAddDynamic(...3)",
        "body": "(source not found)"
      },
      {
        "name": "CollectionSerializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.CollectionSerializer",
    "methodName": "serializeContentsUsing",
    "signature": "void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)",
    "visibility": "public",
    "body": "{\r\n    Iterator\u003c?\u003e it \u003d value.iterator();\r\n    if (it.hasNext()) {\r\n        // [databind#4849]/[databind#4214]: need to check for EnumSet\r\n        final TypeSerializer typeSer \u003d (_maybeEnumSet \u0026\u0026 value instanceof EnumSet\u003c?\u003e) ? null : _valueTypeSerializer;\r\n        int i \u003d 0;\r\n        do {\r\n            Object elem \u003d it.next();\r\n            try {\r\n                if (elem \u003d\u003d null) {\r\n                    provider.defaultSerializeNull(g);\r\n                } else {\r\n                    if (typeSer \u003d\u003d null) {\r\n                        ser.serialize(elem, g, provider);\r\n                    } else {\r\n                        ser.serializeWithType(elem, g, provider, typeSer);\r\n                    }\r\n                }\r\n                ++i;\r\n            } catch (Exception e) {\r\n                wrapAndThrow(provider, e, value, i);\r\n            }\r\n        } while (it.hasNext());\r\n    }\r\n}",
    "nodes": 15,
    "edges": 20,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B14",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B4",
      "B2 : If($z3 \u003d\u003d false) → B3 | else → B4",
      "B6 : If($r9 !\u003d null) → B7 | else → B8",
      "B8 : If(r3 !\u003d null) → B9 | else → B10",
      "B13 : If($z2 !\u003d 0) → B14 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CollectionSerializer\n  Collection\n  JsonGenerator\n  SerializerProvider\n  JsonSerializer\n  r1 \u003d r0.iterator()\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B1 else B14\n}",
      "B1 {\n  $z1 \u003d CollectionSerializer: boolean _maybeEnumSet\u003e\n  if ($z1 \u003d\u003d false) goto B2 else B4\n}",
      "B2 {\n  $z3 \u003d EnumSet\n  if ($z3 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r8 \u003d null\n  goto B5\n}",
      "B4 {\n  $r8 \u003d TypeSerializer _valueTypeSerializer\u003e\n}",
      "B5 {\n  r3 \u003d $r8\n  i0 \u003d 0\n}",
      "B6 {\n  $r9 \u003d r1.next()\n  if ($r9 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  r6.defaultSerializeNull(r5)\n  goto B11\n}",
      "B8 {\n  if (r3 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  r4.serialize($r9, r5, r6)\n  goto B11\n}",
      "B10 {\n  r4.serializeWithType($r9, r5, r6, r3)\n}",
      "B11 {\n  i0 \u003d i0 + 1\n  goto B13\n}",
      "B12 {\n  $r7 :\u003d @caughtexception\n  r2.wrapAndThrow(r6, $r7, r0, i0)\n}",
      "B13 {\n  $z2 \u003d r1.hasNext()\n  if ($z2 !\u003d 0) goto B14 else B6\n}",
      "B14 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B14",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B6",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionSerializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.DateSerializer",
    "methodName": "serialize",
    "signature": "void serialize(java.util.Date,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (_asTimestamp(provider)) {\r\n        g.writeNumber(_timestamp(value));\r\n        return;\r\n    }\r\n    _serializeAsString(value, g, provider);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DateSerializer\n  Date\n  JsonGenerator\n  SerializerProvider\n  $z0 \u003d r0._asTimestamp(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $l0 \u003d r0._timestamp(r2)\n  r3.writeNumber($l0)\n  return\n}",
      "B2 {\n  r0._serializeAsString(r2, r3, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DateSerializer#_timestamp(...1)",
        "body": "{\r\n    return (value \u003d\u003d null) ? 0L : value.getTime();\r\n}"
      },
      {
        "name": "DateSerializer#_asTimestamp(...1)",
        "body": "(source not found)"
      },
      {
        "name": "DateSerializer#_serializeAsString(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.EnumSerializer",
    "methodName": "createContextual",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    JsonFormat.Value format \u003d findFormatOverrides(serializers, property, handledType());\r\n    if (format !\u003d null) {\r\n        Class\u003c?\u003e type \u003d handledType();\r\n        Boolean serializeAsIndex \u003d _isShapeWrittenUsingIndex(type, format, false, _serializeAsIndex);\r\n        if (!Objects.equals(serializeAsIndex, _serializeAsIndex)) {\r\n            return new EnumSerializer(_values, serializeAsIndex, _valuesByEnumNaming, _valuesByToString);\r\n        }\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  EnumSerializer\n  SerializerProvider\n  BeanProperty\n  $r3 \u003d r0.handledType()\n  r4 \u003d r0.findFormatOverrides(r1, r2, $r3)\n  if (r4 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  r5 \u003d r0.handledType()\n  $r6 \u003d Boolean _serializeAsIndex\u003e\n  r7 \u003d EnumSerializer._isShapeWrittenUsingIndex(r5, r4, 0, $r6)\n  $r8 \u003d Boolean _serializeAsIndex\u003e\n  $z0 \u003d Objects.equals(r7, $r8)\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r9 \u003d EnumSerializer\n  $r12 \u003d EnumValues _values\u003e\n  $r11 \u003d EnumValues _valuesByEnumNaming\u003e\n  $r10 \u003d EnumValues _valuesByToString\u003e\n  new EnumSerializer($r12, r7, $r11, $r10)\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumSerializer#findFormatOverrides(...3)",
        "body": "(source not found)"
      },
      {
        "name": "EnumSerializer#_isShapeWrittenUsingIndex(...4)",
        "body": "{\r\n    JsonFormat.Shape shape \u003d (format \u003d\u003d null) ? null : format.getShape();\r\n    if (shape \u003d\u003d null) {\r\n        return defaultValue;\r\n    }\r\n    // i.e. \"default\", check dynamically\r\n    if (shape \u003d\u003d Shape.ANY || shape \u003d\u003d Shape.SCALAR) {\r\n        return defaultValue;\r\n    }\r\n    // 19-May-2016, tatu: also consider \"natural\" shape\r\n    if (shape \u003d\u003d Shape.STRING || shape \u003d\u003d Shape.NATURAL) {\r\n        return Boolean.FALSE;\r\n    }\r\n    // 01-Oct-2014, tatu: For convenience, consider \"as-array\" to also mean \u0027yes, use index\u0027)\r\n    if (shape.isNumeric() || (shape \u003d\u003d Shape.ARRAY)) {\r\n        return Boolean.TRUE;\r\n    }\r\n    // 07-Mar-2017, tatu: Also means `OBJECT` not available as property annotation...\r\n    throw new IllegalArgumentException(String.format(\"Unsupported serialization shape (%s) for Enum %s, not supported as %s annotation\", shape, enumClass.getName(), (fromClass ? \"class\" : \"property\")));\r\n}"
      },
      {
        "name": "EnumSerializer#handledType(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.EnumSerializer",
    "methodName": "serialize",
    "signature": "void serialize(java.lang.Enum,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (_valuesByEnumNaming !\u003d null) {\r\n        gen.writeString(_valuesByEnumNaming.serializedValueFor(en));\r\n        return;\r\n    }\r\n    if (_serializeAsIndex(serializers)) {\r\n        gen.writeNumber(en.ordinal());\r\n        return;\r\n    }\r\n    // [databind#749]: or via toString()?\r\n    if (serializers.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING)) {\r\n        gen.writeString(_valuesByToString.serializedValueFor(en));\r\n        return;\r\n    }\r\n    gen.writeString(_values.serializedValueFor(en));\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  EnumSerializer\n  Enum\n  JsonGenerator\n  SerializerProvider\n  $r1 \u003d EnumValues _valuesByEnumNaming\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d EnumValues _valuesByEnumNaming\u003e\n  $r11 \u003d $r10.serializedValueFor(r5)\n  r4.writeString($r11)\n  return\n}",
      "B2 {\n  $z0 \u003d r0._serializeAsIndex(r2)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $i0 \u003d r5.ordinal()\n  r4.writeNumber($i0)\n  return\n}",
      "B4 {\n  $r3 \u003d SerializationFeature WRITE_ENUMS_USING_TO_STRING\u003e\n  $z1 \u003d r2.isEnabled($r3)\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r8 \u003d EnumValues _valuesByToString\u003e\n  $r9 \u003d $r8.serializedValueFor(r5)\n  r4.writeString($r9)\n  return\n}",
      "B6 {\n  $r6 \u003d EnumValues _values\u003e\n  $r7 \u003d $r6.serializedValueFor(r5)\n  r4.writeString($r7)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumSerializer#_serializeAsIndex(...1)",
        "body": "{\r\n    if (_serializeAsIndex !\u003d null) {\r\n        return _serializeAsIndex;\r\n    }\r\n    return serializers.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.EnumSerializer",
    "methodName": "getSchema",
    "signature": "com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)",
    "visibility": "public",
    "body": "{\r\n    if (_serializeAsIndex(provider)) {\r\n        return createSchemaNode(\"integer\", true);\r\n    }\r\n    ObjectNode objectNode \u003d createSchemaNode(\"string\", true);\r\n    if (typeHint !\u003d null) {\r\n        JavaType type \u003d provider.constructType(typeHint);\r\n        if (type.isEnumType()) {\r\n            ArrayNode enumNode \u003d objectNode.putArray(\"enum\");\r\n            for (SerializableString value : _values.values()) {\r\n                enumNode.add(value.getValue());\r\n            }\r\n        }\r\n    }\r\n    return objectNode;\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r3 \u003d\u003d null) → B3 | else → B7",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B7",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  EnumSerializer\n  SerializerProvider\n  Type\n  $z0 \u003d r0._serializeAsIndex(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r12 \u003d r0.createSchemaNode(\"integer\", 1)\n  return\n}",
      "B2 {\n  r2 \u003d r0.createSchemaNode(\"string\", 1)\n  if (r3 \u003d\u003d null) goto B3 else B7\n}",
      "B3 {\n  r4 \u003d r1.constructType(r3)\n  $z1 \u003d r4.isEnumType()\n  if ($z1 \u003d\u003d false) goto B4 else B7\n}",
      "B4 {\n  r5 \u003d r2.putArray(\"enum\")\n  $r6 \u003d EnumValues _values\u003e\n  $r7 \u003d $r6.values()\n  r8 \u003d $r7.iterator()\n}",
      "B5 {\n  $z2 \u003d r8.hasNext()\n  if ($z2 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r9 \u003d r8.next()\n  r10 \u003d SerializableString) $r9\n  $r11 \u003d r10.getValue()\n  r5.add($r11)\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumSerializer#_serializeAsIndex(...1)",
        "body": "{\r\n    if (_serializeAsIndex !\u003d null) {\r\n        return _serializeAsIndex;\r\n    }\r\n    return serializers.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX);\r\n}"
      },
      {
        "name": "EnumSerializer#createSchemaNode(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.EnumSerializer",
    "methodName": "acceptJsonFormatVisitor",
    "signature": "void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    SerializerProvider serializers \u003d visitor.getProvider();\r\n    if (_serializeAsIndex(serializers)) {\r\n        visitIntFormat(visitor, typeHint, JsonParser.NumberType.INT);\r\n        return;\r\n    }\r\n    JsonStringFormatVisitor stringVisitor \u003d visitor.expectStringFormat(typeHint);\r\n    if (stringVisitor !\u003d null) {\r\n        Set\u003cString\u003e enums \u003d new LinkedHashSet\u003cString\u003e();\r\n        // Use toString()?\r\n        if ((serializers !\u003d null) \u0026\u0026 serializers.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING)) {\r\n            for (SerializableString value : _valuesByToString.values()) {\r\n                enums.add(value.getValue());\r\n            }\r\n        } else {\r\n            // No, serialize using name() or explicit overrides\r\n            for (SerializableString value : _values.values()) {\r\n                enums.add(value.getValue());\r\n            }\r\n        }\r\n        stringVisitor.enumTypes(enums);\r\n    }\r\n}",
    "nodes": 14,
    "edges": 18,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r4 \u003d\u003d null) → B3 | else → B13",
      "B3 : If(r1 \u003d\u003d null) → B4 | else → B9",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B9",
      "B6 : If($z2 \u003d\u003d false) → B7 | else → B8",
      "B10 : If($z3 \u003d\u003d false) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  EnumSerializer\n  JsonFormatVisitorWrapper\n  JavaType\n  r1 \u003d r0.getProvider()\n  $z0 \u003d r2._serializeAsIndex(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r16 \u003d JsonParser$NumberType INT\u003e\n  r2.visitIntFormat(r0, r3, $r16)\n  return\n}",
      "B2 {\n  r4 \u003d r0.expectStringFormat(r3)\n  if (r4 \u003d\u003d null) goto B3 else B13\n}",
      "B3 {\n  $r5 \u003d LinkedHashSet\n  new LinkedHashSet()\n  if (r1 \u003d\u003d null) goto B4 else B9\n}",
      "B4 {\n  $r10 \u003d SerializationFeature WRITE_ENUMS_USING_TO_STRING\u003e\n  $z1 \u003d r1.isEnabled($r10)\n  if ($z1 \u003d\u003d false) goto B5 else B9\n}",
      "B5 {\n  $r12 \u003d EnumValues _valuesByToString\u003e\n  $r13 \u003d $r12.values()\n  r17 \u003d $r13.iterator()\n}",
      "B6 {\n  $z2 \u003d r17.hasNext()\n  if ($z2 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $r14 \u003d r17.next()\n  r18 \u003d SerializableString) $r14\n  $r15 \u003d r18.getValue()\n  $r5.add($r15)\n  goto B6\n}",
      "B8 {\n  goto B12\n}",
      "B9 {\n  $r6 \u003d EnumValues _values\u003e\n  $r7 \u003d $r6.values()\n  $r11 \u003d $r7.iterator()\n}",
      "B10 {\n  $z3 \u003d $r11.hasNext()\n  if ($z3 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  $r8 \u003d $r11.next()\n  r19 \u003d SerializableString) $r8\n  $r9 \u003d r19.getValue()\n  $r5.add($r9)\n  goto B10\n}",
      "B12 {\n  r4.enumTypes($r5)\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B13",
      "B3 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B6",
      "B8 --\u003e B12",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B10",
      "B12 --\u003e B13",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumSerializer#_serializeAsIndex(...1)",
        "body": "{\r\n    if (_serializeAsIndex !\u003d null) {\r\n        return _serializeAsIndex;\r\n    }\r\n    return serializers.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX);\r\n}"
      },
      {
        "name": "EnumSerializer#visitIntFormat(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.EnumSetSerializer",
    "methodName": "hasSingleElement",
    "signature": "boolean hasSingleElement(java.util.EnumSet)",
    "visibility": "public",
    "body": "{\r\n    return value.size() \u003d\u003d 1;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  EnumSetSerializer\n  EnumSet\n  $i0 \u003d r0.size()\n  if ($i0 !\u003d 1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.EnumSetSerializer",
    "methodName": "serialize",
    "signature": "void serialize(java.util.EnumSet,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d value.size();\r\n    if (len \u003d\u003d 1) {\r\n        if (((_unwrapSingle \u003d\u003d null) \u0026\u0026 provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) || (_unwrapSingle \u003d\u003d Boolean.TRUE)) {\r\n            serializeContents(value, gen, provider);\r\n            return;\r\n        }\r\n    }\r\n    gen.writeStartArray(value, len);\r\n    serializeContents(value, gen, provider);\r\n    gen.writeEndArray();\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i0 !\u003d 1) → B1 | else → B5",
      "B1 : If($r4 !\u003d null) → B2 | else → B3",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B3 : If($r6 !\u003d $r5) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  EnumSetSerializer\n  EnumSet\n  JsonGenerator\n  SerializerProvider\n  i0 \u003d r0.size()\n  if (i0 !\u003d 1) goto B1 else B5\n}",
      "B1 {\n  $r4 \u003d Boolean _unwrapSingle\u003e\n  if ($r4 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d SerializationFeature WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED\u003e\n  $z0 \u003d r3.isEnabled($r7)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d Boolean _unwrapSingle\u003e\n  $r5 \u003d Boolean TRUE\u003e\n  if ($r6 !\u003d $r5) goto B4 else B5\n}",
      "B4 {\n  r2.serializeContents(r0, r1, r3)\n  return\n}",
      "B5 {\n  r1.writeStartArray(r0, i0)\n  r2.serializeContents(r0, r1, r3)\n  r1.writeEndArray()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumSetSerializer#serializeContents(...3)",
        "body": "{\r\n    gen.assignCurrentValue(value);\r\n    JsonSerializer\u003cObject\u003e enumSer \u003d _elementSerializer;\r\n    // Need to dynamically find instance serializer; unfortunately\r\n    // that seems to be the only way to figure out type (no accessors\r\n    // to the enum class that set knows)\r\n    for (Enum\u003c?\u003e en : value) {\r\n        if (enumSer \u003d\u003d null) {\r\n            enumSer \u003d provider.findContentValueSerializer(en.getDeclaringClass(), _property);\r\n        }\r\n        enumSer.serialize(en, gen, provider);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.EnumSetSerializer",
    "methodName": "serializeContents",
    "signature": "void serializeContents(java.util.EnumSet,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    gen.assignCurrentValue(value);\r\n    JsonSerializer\u003cObject\u003e enumSer \u003d _elementSerializer;\r\n    // Need to dynamically find instance serializer; unfortunately\r\n    // that seems to be the only way to figure out type (no accessors\r\n    // to the enum class that set knows)\r\n    for (Enum\u003c?\u003e en : value) {\r\n        if (enumSer \u003d\u003d null) {\r\n            enumSer \u003d provider.findContentValueSerializer(en.getDeclaringClass(), _property);\r\n        }\r\n        enumSer.serialize(en, gen, provider);\r\n    }\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If(r9 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  EnumSetSerializer\n  EnumSet\n  JsonGenerator\n  SerializerProvider\n  r0.assignCurrentValue(r1)\n  r9 \u003d JsonSerializer _elementSerializer\u003e\n  r3 \u003d r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r3.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r4 \u003d r3.next()\n  r5 \u003d Enum) $r4\n  if (r9 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r8 \u003d r5.getDeclaringClass()\n  $r7 \u003d BeanProperty _property\u003e\n  r9 \u003d r6.findContentValueSerializer($r8, $r7)\n}",
      "B4 {\n  r9.serialize(r5, r0, r6)\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.InetAddressSerializer",
    "methodName": "createContextual",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    JsonFormat.Value format \u003d findFormatOverrides(serializers, property, handledType());\r\n    boolean asNumeric \u003d false;\r\n    if (format !\u003d null) {\r\n        JsonFormat.Shape shape \u003d format.getShape();\r\n        if (shape.isNumeric() || shape \u003d\u003d JsonFormat.Shape.ARRAY) {\r\n            asNumeric \u003d true;\r\n        }\r\n    }\r\n    if (asNumeric !\u003d _asNumeric) {\r\n        return new InetAddressSerializer(asNumeric);\r\n    }\r\n    return this;\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r4 \u003d\u003d null) → B1 | else → B4",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3",
      "B2 : If(r6 !\u003d $r7) → B3 | else → B4",
      "B4 : If(z3 \u003d\u003d $z2) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  InetAddressSerializer\n  SerializerProvider\n  BeanProperty\n  $r3 \u003d r0.handledType()\n  r4 \u003d r0.findFormatOverrides(r1, r2, $r3)\n  z1 \u003d 0\n  z4 \u003d 0\n  z3 \u003d 0\n  if (r4 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  r6 \u003d r4.getShape()\n  $z0 \u003d r6.isNumeric()\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d JsonFormat$Shape ARRAY\u003e\n  if (r6 !\u003d $r7) goto B3 else B4\n}",
      "B3 {\n  z1 \u003d 1\n  z4 \u003d 1\n  z3 \u003d 1\n}",
      "B4 {\n  $z2 \u003d InetAddressSerializer: boolean _asNumeric\u003e\n  if (z3 \u003d\u003d $z2) goto B5 else B6\n}",
      "B5 {\n  $r5 \u003d InetAddressSerializer\n  new InetAddressSerializer(z4)\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "InetAddressSerializer#findFormatOverrides(...3)",
        "body": "(source not found)"
      },
      {
        "name": "InetAddressSerializer#handledType(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.InetAddressSerializer",
    "methodName": "serialize",
    "signature": "void serialize(java.net.InetAddress,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    String str;\r\n    if (_asNumeric) {\r\n        // since 2.9\r\n        str \u003d value.getHostAddress();\r\n    } else {\r\n        // Ok: get textual description; choose \"more specific\" part\r\n        str \u003d value.toString().trim();\r\n        int ix \u003d str.indexOf(\u0027/\u0027);\r\n        if (ix \u003e\u003d 0) {\r\n            if (ix \u003d\u003d 0) {\r\n                // missing host name; use address\r\n                str \u003d str.substring(1);\r\n            } else {\r\n                // otherwise use name\r\n                str \u003d str.substring(0, ix);\r\n            }\r\n        }\r\n    }\r\n    g.writeString(str);\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(i0 \u003c 0) → B3 | else → B6",
      "B3 : If(i0 !\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  InetAddressSerializer\n  InetAddress\n  JsonGenerator\n  SerializerProvider\n  $z0 \u003d InetAddressSerializer: boolean _asNumeric\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r5 \u003d r1.getHostAddress()\n  goto B6\n}",
      "B2 {\n  $r2 \u003d r1.toString()\n  r5 \u003d $r2.trim()\n  i0 \u003d r5.indexOf(47)\n  if (i0 \u003c 0) goto B3 else B6\n}",
      "B3 {\n  if (i0 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  r5 \u003d r5.substring(1)\n  goto B6\n}",
      "B5 {\n  r5 \u003d r5.substring(0, i0)\n}",
      "B6 {\n  r3.writeString(r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer",
    "methodName": "serialize",
    "signature": "void serialize(java.net.InetSocketAddress,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    InetAddress addr \u003d value.getAddress();\r\n    String str \u003d addr \u003d\u003d null ? value.getHostName() : addr.toString().trim();\r\n    int ix \u003d str.indexOf(\u0027/\u0027);\r\n    if (ix \u003e\u003d 0) {\r\n        if (ix \u003d\u003d 0) {\r\n            // missing host name; use address\r\n            str \u003d addr instanceof Inet6Address ? // bracket IPv6 addresses with\r\n            \"[\" + str.substring(1) + \"]\" : str.substring(1);\r\n        } else {\r\n            // otherwise use name\r\n            str \u003d str.substring(0, ix);\r\n        }\r\n    }\r\n    jgen.writeString(str + \":\" + value.getPort());\r\n}",
    "nodes": 11,
    "edges": 14,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B3 : If($i0 \u003c 0) → B4 | else → B10",
      "B4 : If($i0 !\u003d 0) → B5 | else → B9",
      "B5 : If($z0 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  InetSocketAddressSerializer\n  InetSocketAddress\n  JsonGenerator\n  SerializerProvider\n  r1 \u003d r0.getAddress()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d r0.getHostName()\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r1.toString()\n  $r7 \u003d $r2.trim()\n}",
      "B3 {\n  r8 \u003d $r7\n  $i0 \u003d $r7.indexOf(47)\n  if ($i0 \u003c 0) goto B4 else B10\n}",
      "B4 {\n  if ($i0 !\u003d 0) goto B5 else B9\n}",
      "B5 {\n  $z0 \u003d Inet6Address\n  if ($z0 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r4 \u003d $r7.substring(1)\n  $r9 \u003d dynInvoke makeConcatWithConstants($r4)\n  goto B8\n}",
      "B7 {\n  $r9 \u003d $r7.substring(1)\n}",
      "B8 {\n  r8 \u003d $r9\n  goto B10\n}",
      "B9 {\n  r8 \u003d $r7.substring(0, $i0)\n}",
      "B10 {\n  $i1 \u003d r0.getPort()\n  $r10 \u003d dynInvoke makeConcatWithConstants(r8, $i1)\n  r3.writeString($r10)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B10",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.IterableSerializer",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)",
    "visibility": "public",
    "body": "{\r\n    // Not really good way to implement this, but has to do for now:\r\n    return !value.iterator().hasNext();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  IterableSerializer\n  SerializerProvider\n  Iterable\n  $r1 \u003d r0.iterator()\n  $z0 \u003d $r1.hasNext()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.IterableSerializer",
    "methodName": "hasSingleElement",
    "signature": "boolean hasSingleElement(java.lang.Iterable)",
    "visibility": "public",
    "body": "{\r\n    // we can do it actually (fixed in 2.3.1)\r\n    if (value !\u003d null) {\r\n        Iterator\u003c?\u003e it \u003d value.iterator();\r\n        if (it.hasNext()) {\r\n            it.next();\r\n            return !it.hasNext();\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B6",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B6",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  IterableSerializer\n  Iterable\n  if (r0 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  r1 \u003d r0.iterator()\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B6\n}",
      "B2 {\n  r1.next()\n  $z1 \u003d r1.hasNext()\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $z2 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z2 \u003d 0\n}",
      "B5 {\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.IterableSerializer",
    "methodName": "serialize",
    "signature": "void serialize(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (((_unwrapSingle \u003d\u003d null) \u0026\u0026 provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) || (_unwrapSingle \u003d\u003d Boolean.TRUE)) {\r\n        if (hasSingleElement(value)) {\r\n            serializeContents(value, gen, provider);\r\n            return;\r\n        }\r\n    }\r\n    gen.writeStartArray(value);\r\n    serializeContents(value, gen, provider);\r\n    gen.writeEndArray();\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3",
      "B2 : If($r3 !\u003d $r2) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  IterableSerializer\n  Iterable\n  JsonGenerator\n  SerializerProvider\n  $r1 \u003d Boolean _unwrapSingle\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d SerializationFeature WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED\u003e\n  $z1 \u003d r6.isEnabled($r7)\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d Boolean _unwrapSingle\u003e\n  $r2 \u003d Boolean TRUE\u003e\n  if ($r3 !\u003d $r2) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.hasSingleElement(r5)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  r0.serializeContents(r5, r4, r6)\n  return\n}",
      "B5 {\n  r4.writeStartArray(r5)\n  r0.serializeContents(r5, r4, r6)\n  r4.writeEndArray()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IterableSerializer#hasSingleElement(...1)",
        "body": "{\r\n    // we can do it actually (fixed in 2.3.1)\r\n    if (value !\u003d null) {\r\n        Iterator\u003c?\u003e it \u003d value.iterator();\r\n        if (it.hasNext()) {\r\n            it.next();\r\n            return !it.hasNext();\r\n        }\r\n    }\r\n    return false;\r\n}"
      },
      {
        "name": "IterableSerializer#serializeContents(...3)",
        "body": "{\r\n    Iterator\u003c?\u003e it \u003d value.iterator();\r\n    if (it.hasNext()) {\r\n        final TypeSerializer typeSer \u003d _valueTypeSerializer;\r\n        JsonSerializer\u003cObject\u003e prevSerializer \u003d null;\r\n        Class\u003c?\u003e prevClass \u003d null;\r\n        do {\r\n            Object elem \u003d it.next();\r\n            if (elem \u003d\u003d null) {\r\n                provider.defaultSerializeNull(jgen);\r\n                continue;\r\n            }\r\n            JsonSerializer\u003cObject\u003e currSerializer \u003d _elementSerializer;\r\n            if (currSerializer \u003d\u003d null) {\r\n                // Minor optimization to avoid most lookups:\r\n                Class\u003c?\u003e cc \u003d elem.getClass();\r\n                if (cc \u003d\u003d prevClass) {\r\n                    currSerializer \u003d prevSerializer;\r\n                } else {\r\n                    currSerializer \u003d provider.findValueSerializer(cc, _property);\r\n                    prevSerializer \u003d currSerializer;\r\n                    prevClass \u003d cc;\r\n                }\r\n            }\r\n            if (typeSer \u003d\u003d null) {\r\n                currSerializer.serialize(elem, jgen, provider);\r\n            } else {\r\n                currSerializer.serializeWithType(elem, jgen, provider, typeSer);\r\n            }\r\n        } while (it.hasNext());\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.IterableSerializer",
    "methodName": "serializeContents",
    "signature": "void serializeContents(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    Iterator\u003c?\u003e it \u003d value.iterator();\r\n    if (it.hasNext()) {\r\n        final TypeSerializer typeSer \u003d _valueTypeSerializer;\r\n        JsonSerializer\u003cObject\u003e prevSerializer \u003d null;\r\n        Class\u003c?\u003e prevClass \u003d null;\r\n        do {\r\n            Object elem \u003d it.next();\r\n            if (elem \u003d\u003d null) {\r\n                provider.defaultSerializeNull(jgen);\r\n                continue;\r\n            }\r\n            JsonSerializer\u003cObject\u003e currSerializer \u003d _elementSerializer;\r\n            if (currSerializer \u003d\u003d null) {\r\n                // Minor optimization to avoid most lookups:\r\n                Class\u003c?\u003e cc \u003d elem.getClass();\r\n                if (cc \u003d\u003d prevClass) {\r\n                    currSerializer \u003d prevSerializer;\r\n                } else {\r\n                    currSerializer \u003d provider.findValueSerializer(cc, _property);\r\n                    prevSerializer \u003d currSerializer;\r\n                    prevClass \u003d cc;\r\n                }\r\n            }\r\n            if (typeSer \u003d\u003d null) {\r\n                currSerializer.serialize(elem, jgen, provider);\r\n            } else {\r\n                currSerializer.serializeWithType(elem, jgen, provider, typeSer);\r\n            }\r\n        } while (it.hasNext());\r\n    }\r\n}",
    "nodes": 13,
    "edges": 18,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B12",
      "B2 : If($r6 !\u003d null) → B3 | else → B4",
      "B4 : If(r11 !\u003d null) → B5 | else → B8",
      "B5 : If(r7 !\u003d r10) → B6 | else → B7",
      "B8 : If(r3 !\u003d null) → B9 | else → B10",
      "B11 : If($z1 !\u003d 0) → B12 | else → B2"
    ],
    "blockList": [
      "B0 {\n  IterableSerializer\n  Iterable\n  JsonGenerator\n  SerializerProvider\n  r1 \u003d r0.iterator()\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B1 else B12\n}",
      "B1 {\n  r3 \u003d TypeSerializer _valueTypeSerializer\u003e\n  r9 \u003d null\n  r10 \u003d null\n}",
      "B2 {\n  $r6 \u003d r1.next()\n  if ($r6 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  r5.defaultSerializeNull(r4)\n  goto B11\n}",
      "B4 {\n  r11 \u003d JsonSerializer _elementSerializer\u003e\n  if (r11 !\u003d null) goto B5 else B8\n}",
      "B5 {\n  r7 \u003d $r6.getClass()\n  if (r7 !\u003d r10) goto B6 else B7\n}",
      "B6 {\n  r11 \u003d r9\n  goto B8\n}",
      "B7 {\n  $r8 \u003d BeanProperty _property\u003e\n  r11 \u003d r5.findValueSerializer(r7, $r8)\n  r9 \u003d r11\n  r10 \u003d r7\n}",
      "B8 {\n  if (r3 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  r11.serialize($r6, r4, r5)\n  goto B11\n}",
      "B10 {\n  r11.serializeWithType($r6, r4, r5, r3)\n}",
      "B11 {\n  $z1 \u003d r1.hasNext()\n  if ($z1 !\u003d 0) goto B12 else B2\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B12",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B11",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B2",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    // 31-Oct-2020, tatu: Should perhaps catch access issue here... ?\r\n    Object referenced \u003d _accessor.getValue(bean);\r\n    if (referenced \u003d\u003d null) {\r\n        return true;\r\n    }\r\n    JsonSerializer\u003cObject\u003e ser \u003d _valueSerializer;\r\n    if (ser \u003d\u003d null) {\r\n        try {\r\n            ser \u003d _findDynamicSerializer(ctxt, referenced.getClass());\r\n        } catch (JsonMappingException e) {\r\n            throw new RuntimeJsonMappingException(e);\r\n        }\r\n    }\r\n    return ser.isEmpty(ctxt, referenced);\r\n}",
    "nodes": 6,
    "edges": 5,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B2 : If(r8 !\u003d null) → B3 | else → B5"
    ],
    "blockList": [
      "B0 {\n  JsonValueSerializer\n  SerializerProvider\n  Object\n  $r2 \u003d AnnotatedMember _accessor\u003e\n  r3 \u003d $r2.getValue(r1)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r8 \u003d JsonSerializer _valueSerializer\u003e\n  if (r8 !\u003d null) goto B3 else B5\n}",
      "B3 {\n  $r5 \u003d r3.getClass()\n  r8 \u003d r0._findDynamicSerializer(r4, $r5)\n  goto B5\n}",
      "B4 {\n  $r6 :\u003d @caughtexception\n  $r7 \u003d RuntimeJsonMappingException\n  new RuntimeJsonMappingException($r6)\n  throw $r7\n}",
      "B5 {\n  $z0 \u003d r8.isEmpty(r4, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JsonValueSerializer#_findDynamicSerializer(...2)",
        "body": "{\r\n    JsonSerializer\u003cObject\u003e serializer \u003d _dynamicSerializers.serializerFor(valueClass);\r\n    if (serializer \u003d\u003d null) {\r\n        if (_valueType.hasGenericTypes()) {\r\n            final JavaType fullType \u003d ctxt.constructSpecializedType(_valueType, valueClass);\r\n            serializer \u003d ctxt.findPrimaryPropertySerializer(fullType, _property);\r\n            serializer \u003d _withIgnoreProperties(serializer, _ignoredProperties);\r\n            PropertySerializerMap.SerializerAndMapResult result \u003d _dynamicSerializers.addSerializer(fullType, serializer);\r\n            _dynamicSerializers \u003d result.map;\r\n        } else {\r\n            serializer \u003d ctxt.findPrimaryPropertySerializer(valueClass, _property);\r\n            // [databind#3647] : Support `@JsonIgnoreProperties` to work with `@JsonValue`\r\n            serializer \u003d _withIgnoreProperties(serializer, _ignoredProperties);\r\n            PropertySerializerMap.SerializerAndMapResult result \u003d _dynamicSerializers.addSerializer(valueClass, serializer);\r\n            _dynamicSerializers \u003d result.map;\r\n        }\r\n    }\r\n    return serializer;\r\n    /*\r\n        if (_valueType.hasGenericTypes()) {\r\n            JavaType fullType \u003d ctxt.constructSpecializedType(_valueType, valueClass);\r\n            // 31-Oct-2020, tatu: Should not get typed/root serializer, but for now has to do:\r\n            serializer \u003d ctxt.findTypedValueSerializer(fullType, false, _property);\r\n            PropertySerializerMap.SerializerAndMapResult result \u003d _dynamicSerializers.addSerializer(fullType, serializer);\r\n            // did we get a new map of serializers? If so, start using it\r\n            _dynamicSerializers \u003d result.map;\r\n            return serializer;\r\n        } else {\r\n            // 31-Oct-2020, tatu: Should not get typed/root serializer, but for now has to do:\r\n            serializer \u003d ctxt.findTypedValueSerializer(valueClass, false, _property);\r\n            PropertySerializerMap.SerializerAndMapResult result \u003d _dynamicSerializers.addSerializer(valueClass, serializer);\r\n            // did we get a new map of serializers? If so, start using it\r\n            _dynamicSerializers \u003d result.map;\r\n            return serializer;\r\n        }\r\n        */\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer",
    "methodName": "createContextual",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    TypeSerializer typeSer \u003d _valueTypeSerializer;\r\n    if (typeSer !\u003d null) {\r\n        typeSer \u003d typeSer.forProperty(property);\r\n    }\r\n    JsonSerializer\u003c?\u003e ser \u003d _valueSerializer;\r\n    if (ser \u003d\u003d null) {\r\n        // Can only assign serializer statically if the declared type is final:\r\n        // if not, we don\u0027t really know the actual type until we get the instance.\r\n        // 10-Mar-2010, tatu: Except if static typing is to be used\r\n        if (ctxt.isEnabled(MapperFeature.USE_STATIC_TYPING) || _valueType.isFinal()) {\r\n            /* 10-Mar-2010, tatu: Ideally we would actually separate out type\r\n                 *   serializer from value serializer; but, alas, there\u0027s no access\r\n                 *   to serializer factory at this point...\r\n                 */\r\n            // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\r\n            ser \u003d ctxt.findPrimaryPropertySerializer(_valueType, property);\r\n            ser \u003d _withIgnoreProperties(ser, _ignoredProperties);\r\n            /* 09-Dec-2010, tatu: Turns out we must add special handling for\r\n                 *   cases where \"native\" (aka \"natural\") type is being serialized,\r\n                 *   using standard serializer\r\n                 */\r\n            boolean forceTypeInformation \u003d isNaturalTypeWithStdHandling(_valueType.getRawClass(), ser);\r\n            return withResolved(property, typeSer, ser, forceTypeInformation);\r\n        }\r\n        // [databind#2822]: better hold on to \"property\", regardless\r\n        if (property !\u003d _property) {\r\n            return withResolved(property, typeSer, ser, _forceTypeInformation);\r\n        }\r\n    } else {\r\n        // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\r\n        ser \u003d ctxt.handlePrimaryContextualization(ser, property);\r\n        return withResolved(property, typeSer, ser, _forceTypeInformation);\r\n    }\r\n    return this;\r\n}",
    "nodes": 10,
    "edges": 11,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r16 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r15 !\u003d null) → B3 | else → B8",
      "B3 : If($z1 !\u003d 0) → B4 | else → B5",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B6",
      "B6 : If(r2 \u003d\u003d $r11) → B7 | else → B9"
    ],
    "blockList": [
      "B0 {\n  JsonValueSerializer\n  SerializerProvider\n  BeanProperty\n  r16 \u003d TypeSerializer _valueTypeSerializer\u003e\n  if (r16 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r16 \u003d r16.forProperty(r2)\n}",
      "B2 {\n  $r15 \u003d JsonSerializer _valueSerializer\u003e\n  if ($r15 !\u003d null) goto B3 else B8\n}",
      "B3 {\n  $r4 \u003d MapperFeature USE_STATIC_TYPING\u003e\n  $z1 \u003d r1.isEnabled($r4)\n  if ($z1 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r10 \u003d JavaType _valueType\u003e\n  $z2 \u003d $r10.isFinal()\n  if ($z2 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r5 \u003d JavaType _valueType\u003e\n  $r13 \u003d r1.findPrimaryPropertySerializer($r5, r2)\n  $r6 \u003d Set _ignoredProperties\u003e\n  $r14 \u003d JsonValueSerializer._withIgnoreProperties($r13, $r6)\n  $r7 \u003d JavaType _valueType\u003e\n  $r8 \u003d $r7.getRawClass()\n  $z4 \u003d r0.isNaturalTypeWithStdHandling($r8, $r14)\n  $r9 \u003d r0.withResolved(r2, r16, $r14, $z4)\n  return\n}",
      "B6 {\n  $r11 \u003d BeanProperty _property\u003e\n  if (r2 \u003d\u003d $r11) goto B7 else B9\n}",
      "B7 {\n  $z3 \u003d JsonValueSerializer: boolean _forceTypeInformation\u003e\n  $r12 \u003d r0.withResolved(r2, r16, $r15, $z3)\n  return\n}",
      "B8 {\n  r17 \u003d r1.handlePrimaryContextualization($r15, r2)\n  $z0 \u003d JsonValueSerializer: boolean _forceTypeInformation\u003e\n  $r3 \u003d r0.withResolved(r2, r16, r17, $z0)\n  return\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B8",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JsonValueSerializer#isNaturalTypeWithStdHandling(...2)",
        "body": "{\r\n    // First: do we have a natural type being handled?\r\n    if (rawType.isPrimitive()) {\r\n        if (rawType !\u003d Integer.TYPE \u0026\u0026 rawType !\u003d Boolean.TYPE \u0026\u0026 rawType !\u003d Double.TYPE) {\r\n            return false;\r\n        }\r\n    } else {\r\n        if (rawType !\u003d String.class \u0026\u0026 rawType !\u003d Integer.class \u0026\u0026 rawType !\u003d Boolean.class \u0026\u0026 rawType !\u003d Double.class) {\r\n            return false;\r\n        }\r\n    }\r\n    return isDefaultSerializer(ser);\r\n}"
      },
      {
        "name": "JsonValueSerializer#_withIgnoreProperties(...2)",
        "body": "{\r\n    if (ser !\u003d null) {\r\n        if (!ignoredProperties.isEmpty()) {\r\n            ser \u003d ser.withIgnoredProperties(ignoredProperties);\r\n        }\r\n    }\r\n    return (JsonSerializer\u003cObject\u003e) ser;\r\n}"
      },
      {
        "name": "JsonValueSerializer#withResolved(...4)",
        "body": "{\r\n    if ((_property \u003d\u003d property) \u0026\u0026 (_valueTypeSerializer \u003d\u003d vts) \u0026\u0026 (_valueSerializer \u003d\u003d ser) \u0026\u0026 (forceTypeInfo \u003d\u003d _forceTypeInformation)) {\r\n        return this;\r\n    }\r\n    return new JsonValueSerializer(this, property, vts, ser, forceTypeInfo);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer",
    "methodName": "serialize",
    "signature": "void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    Object value;\r\n    try {\r\n        value \u003d _accessor.getValue(bean);\r\n    } catch (Exception e) {\r\n        value \u003d null;\r\n        wrapAndThrow(ctxt, e, bean, _accessor.getName() + \"()\");\r\n    }\r\n    if (value \u003d\u003d null) {\r\n        ctxt.defaultSerializeNull(gen);\r\n    } else {\r\n        JsonSerializer\u003cObject\u003e ser \u003d _valueSerializer;\r\n        if (ser \u003d\u003d null) {\r\n            ser \u003d _findDynamicSerializer(ctxt, value.getClass());\r\n        }\r\n        if (_valueTypeSerializer !\u003d null) {\r\n            ser.serializeWithType(value, gen, ctxt, _valueTypeSerializer);\r\n        } else {\r\n            ser.serialize(value, gen, ctxt);\r\n        }\r\n    }\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B2 : If(r12 !\u003d null) → B3 | else → B4",
      "B4 : If(r13 !\u003d null) → B5 | else → B6",
      "B6 : If($r3 \u003d\u003d null) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  JsonValueSerializer\n  Object\n  JsonGenerator\n  SerializerProvider\n  $r2 \u003d AnnotatedMember _accessor\u003e\n  r12 \u003d $r2.getValue(r1)\n  goto B2\n}",
      "B1 {\n  $r8 :\u003d @caughtexception\n  r12 \u003d null\n  $r9 \u003d AnnotatedMember _accessor\u003e\n  $r10 \u003d $r9.getName()\n  $r11 \u003d dynInvoke makeConcatWithConstants($r10)\n  r0.wrapAndThrow(r5, $r8, r1, $r11)\n}",
      "B2 {\n  if (r12 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  r5.defaultSerializeNull(r4)\n  goto B9\n}",
      "B4 {\n  r13 \u003d JsonSerializer _valueSerializer\u003e\n  if (r13 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r7 \u003d r12.getClass()\n  r13 \u003d r0._findDynamicSerializer(r5, $r7)\n}",
      "B6 {\n  $r3 \u003d TypeSerializer _valueTypeSerializer\u003e\n  if ($r3 \u003d\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r6 \u003d TypeSerializer _valueTypeSerializer\u003e\n  r13.serializeWithType(r12, r4, r5, $r6)\n  goto B9\n}",
      "B8 {\n  r13.serialize(r12, r4, r5)\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JsonValueSerializer#_findDynamicSerializer(...2)",
        "body": "{\r\n    JsonSerializer\u003cObject\u003e serializer \u003d _dynamicSerializers.serializerFor(valueClass);\r\n    if (serializer \u003d\u003d null) {\r\n        if (_valueType.hasGenericTypes()) {\r\n            final JavaType fullType \u003d ctxt.constructSpecializedType(_valueType, valueClass);\r\n            serializer \u003d ctxt.findPrimaryPropertySerializer(fullType, _property);\r\n            serializer \u003d _withIgnoreProperties(serializer, _ignoredProperties);\r\n            PropertySerializerMap.SerializerAndMapResult result \u003d _dynamicSerializers.addSerializer(fullType, serializer);\r\n            _dynamicSerializers \u003d result.map;\r\n        } else {\r\n            serializer \u003d ctxt.findPrimaryPropertySerializer(valueClass, _property);\r\n            // [databind#3647] : Support `@JsonIgnoreProperties` to work with `@JsonValue`\r\n            serializer \u003d _withIgnoreProperties(serializer, _ignoredProperties);\r\n            PropertySerializerMap.SerializerAndMapResult result \u003d _dynamicSerializers.addSerializer(valueClass, serializer);\r\n            _dynamicSerializers \u003d result.map;\r\n        }\r\n    }\r\n    return serializer;\r\n    /*\r\n        if (_valueType.hasGenericTypes()) {\r\n            JavaType fullType \u003d ctxt.constructSpecializedType(_valueType, valueClass);\r\n            // 31-Oct-2020, tatu: Should not get typed/root serializer, but for now has to do:\r\n            serializer \u003d ctxt.findTypedValueSerializer(fullType, false, _property);\r\n            PropertySerializerMap.SerializerAndMapResult result \u003d _dynamicSerializers.addSerializer(fullType, serializer);\r\n            // did we get a new map of serializers? If so, start using it\r\n            _dynamicSerializers \u003d result.map;\r\n            return serializer;\r\n        } else {\r\n            // 31-Oct-2020, tatu: Should not get typed/root serializer, but for now has to do:\r\n            serializer \u003d ctxt.findTypedValueSerializer(valueClass, false, _property);\r\n            PropertySerializerMap.SerializerAndMapResult result \u003d _dynamicSerializers.addSerializer(valueClass, serializer);\r\n            // did we get a new map of serializers? If so, start using it\r\n            _dynamicSerializers \u003d result.map;\r\n            return serializer;\r\n        }\r\n        */\r\n}"
      },
      {
        "name": "JsonValueSerializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer",
    "methodName": "serializeWithType",
    "signature": "void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "visibility": "public",
    "body": "{\r\n    // Regardless of other parts, first need to find value to serialize:\r\n    Object value;\r\n    try {\r\n        value \u003d _accessor.getValue(bean);\r\n    } catch (Exception e) {\r\n        value \u003d null;\r\n        wrapAndThrow(ctxt, e, bean, _accessor.getName() + \"()\");\r\n    }\r\n    // and if we got null, can also just write it directly\r\n    if (value \u003d\u003d null) {\r\n        ctxt.defaultSerializeNull(gen);\r\n        return;\r\n    }\r\n    JsonSerializer\u003cObject\u003e ser \u003d _valueSerializer;\r\n    if (ser \u003d\u003d null) {\r\n        // no serializer yet? Need to fetch\r\n        ser \u003d _findDynamicSerializer(ctxt, value.getClass());\r\n    } else {\r\n        // 09-Dec-2010, tatu: To work around natural type\u0027s refusal to add type info, we do\r\n        //    this (note: type is for the wrapper type, not enclosed value!)\r\n        if (_forceTypeInformation) {\r\n            // Confusing? Type id is for POJO and NOT for value returned by JsonValue accessor...\r\n            WritableTypeId typeIdDef \u003d typeSer0.writeTypePrefix(gen, typeSer0.typeId(bean, JsonToken.VALUE_STRING));\r\n            ser.serialize(value, gen, ctxt);\r\n            typeSer0.writeTypeSuffix(gen, typeIdDef);\r\n            return;\r\n        }\r\n    }\r\n    // 28-Sep-2016, tatu: As per [databind#1385], we do need to do some juggling\r\n    //    to use different Object for type id (logical type) and actual serialization\r\n    //    (delegate type).\r\n    TypeSerializerRerouter rr \u003d new TypeSerializerRerouter(typeSer0, bean);\r\n    ser.serializeWithType(value, gen, ctxt, rr);\r\n}",
    "nodes": 9,
    "edges": 9,
    "cc": 2,
    "flowSummary": [
      "B2 : If(r14 !\u003d null) → B3 | else → B4",
      "B4 : If(r15 !\u003d null) → B5 | else → B6",
      "B6 : If($z0 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  JsonValueSerializer\n  Object\n  JsonGenerator\n  SerializerProvider\n  TypeSerializer\n  $r2 \u003d AnnotatedMember _accessor\u003e\n  r14 \u003d $r2.getValue(r1)\n  goto B2\n}",
      "B1 {\n  $r10 :\u003d @caughtexception\n  r14 \u003d null\n  $r11 \u003d AnnotatedMember _accessor\u003e\n  $r12 \u003d $r11.getName()\n  $r13 \u003d dynInvoke makeConcatWithConstants($r12)\n  r0.wrapAndThrow(r6, $r10, r1, $r13)\n}",
      "B2 {\n  if (r14 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  r6.defaultSerializeNull(r5)\n  return\n}",
      "B4 {\n  r15 \u003d JsonSerializer _valueSerializer\u003e\n  if (r15 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r9 \u003d r14.getClass()\n  r15 \u003d r0._findDynamicSerializer(r6, $r9)\n  goto B8\n}",
      "B6 {\n  $z0 \u003d JsonValueSerializer: boolean _forceTypeInformation\u003e\n  if ($z0 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $r7 \u003d JsonToken VALUE_STRING\u003e\n  $r8 \u003d r4.typeId(r1, $r7)\n  r16 \u003d r4.writeTypePrefix(r5, $r8)\n  r15.serialize(r14, r5, r6)\n  r4.writeTypeSuffix(r5, r16)\n  return\n}",
      "B8 {\n  $r3 \u003d JsonValueSerializer$TypeSerializerRerouter\n  new JsonValueSerializer$TypeSerializerRerouter(r4, r1)\n  r15.serializeWithType(r14, r5, r6, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JsonValueSerializer#_findDynamicSerializer(...2)",
        "body": "{\r\n    JsonSerializer\u003cObject\u003e serializer \u003d _dynamicSerializers.serializerFor(valueClass);\r\n    if (serializer \u003d\u003d null) {\r\n        if (_valueType.hasGenericTypes()) {\r\n            final JavaType fullType \u003d ctxt.constructSpecializedType(_valueType, valueClass);\r\n            serializer \u003d ctxt.findPrimaryPropertySerializer(fullType, _property);\r\n            serializer \u003d _withIgnoreProperties(serializer, _ignoredProperties);\r\n            PropertySerializerMap.SerializerAndMapResult result \u003d _dynamicSerializers.addSerializer(fullType, serializer);\r\n            _dynamicSerializers \u003d result.map;\r\n        } else {\r\n            serializer \u003d ctxt.findPrimaryPropertySerializer(valueClass, _property);\r\n            // [databind#3647] : Support `@JsonIgnoreProperties` to work with `@JsonValue`\r\n            serializer \u003d _withIgnoreProperties(serializer, _ignoredProperties);\r\n            PropertySerializerMap.SerializerAndMapResult result \u003d _dynamicSerializers.addSerializer(valueClass, serializer);\r\n            _dynamicSerializers \u003d result.map;\r\n        }\r\n    }\r\n    return serializer;\r\n    /*\r\n        if (_valueType.hasGenericTypes()) {\r\n            JavaType fullType \u003d ctxt.constructSpecializedType(_valueType, valueClass);\r\n            // 31-Oct-2020, tatu: Should not get typed/root serializer, but for now has to do:\r\n            serializer \u003d ctxt.findTypedValueSerializer(fullType, false, _property);\r\n            PropertySerializerMap.SerializerAndMapResult result \u003d _dynamicSerializers.addSerializer(fullType, serializer);\r\n            // did we get a new map of serializers? If so, start using it\r\n            _dynamicSerializers \u003d result.map;\r\n            return serializer;\r\n        } else {\r\n            // 31-Oct-2020, tatu: Should not get typed/root serializer, but for now has to do:\r\n            serializer \u003d ctxt.findTypedValueSerializer(valueClass, false, _property);\r\n            PropertySerializerMap.SerializerAndMapResult result \u003d _dynamicSerializers.addSerializer(valueClass, serializer);\r\n            // did we get a new map of serializers? If so, start using it\r\n            _dynamicSerializers \u003d result.map;\r\n            return serializer;\r\n        }\r\n        */\r\n}"
      },
      {
        "name": "JsonValueSerializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer",
    "methodName": "getSchema",
    "signature": "com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)",
    "visibility": "public",
    "body": "{\r\n    if (_valueSerializer instanceof com.fasterxml.jackson.databind.jsonschema.SchemaAware) {\r\n        return ((com.fasterxml.jackson.databind.jsonschema.SchemaAware) _valueSerializer).getSchema(ctxt, null);\r\n    }\r\n    return com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JsonValueSerializer\n  SerializerProvider\n  Type\n  $r1 \u003d JsonSerializer _valueSerializer\u003e\n  $z0 \u003d SchemaAware\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d JsonSerializer _valueSerializer\u003e\n  $r5 \u003d SchemaAware) $r3\n  $r6 \u003d $r5.getSchema(r4, null)\n  return\n}",
      "B2 {\n  $r2 \u003d JsonSchema.getDefaultSchemaNode()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer",
    "methodName": "acceptJsonFormatVisitor",
    "signature": "void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    /* 27-Apr-2015, tatu: First things first; for JSON Schema introspection,\r\n         *    Enum types that use `@JsonValue` are special (but NOT necessarily\r\n         *    anything else that RETURNS an enum!)\r\n         *    So we will need to add special\r\n         *    handling here (see https://github.com/FasterXML/jackson-module-jsonSchema/issues/57\r\n         *    for details).\r\n         *\r\n         *    Note that meaning of JsonValue, then, is very different for Enums. Sigh.\r\n         */\r\n    Class\u003c?\u003e declaring \u003d _accessor.getDeclaringClass();\r\n    if ((declaring !\u003d null) \u0026\u0026 ClassUtil.isEnumType(declaring)) {\r\n        if (_acceptJsonFormatVisitorForEnum(visitor, typeHint, declaring)) {\r\n            return;\r\n        }\r\n    }\r\n    JsonSerializer\u003cObject\u003e ser \u003d _valueSerializer;\r\n    if (ser \u003d\u003d null) {\r\n        ser \u003d visitor.getProvider().findTypedValueSerializer(_valueType, false, _property);\r\n        if (ser \u003d\u003d null) {\r\n            // can this ever occur?\r\n            visitor.expectAnyFormat(typeHint);\r\n            return;\r\n        }\r\n    }\r\n    ser.acceptJsonFormatVisitor(visitor, _valueType);\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B4",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B4",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($r9 !\u003d null) → B5 | else → B7",
      "B5 : If(r10 !\u003d null) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  JsonValueSerializer\n  JsonFormatVisitorWrapper\n  JavaType\n  $r1 \u003d AnnotatedMember _accessor\u003e\n  r2 \u003d $r1.getDeclaringClass()\n  if (r2 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $z0 \u003d ClassUtil.isEnumType(r2)\n  if ($z0 \u003d\u003d false) goto B2 else B4\n}",
      "B2 {\n  $z1 \u003d r0._acceptJsonFormatVisitorForEnum(r3, r8, r2)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r9 \u003d JsonSerializer _valueSerializer\u003e\n  r10 \u003d $r9\n  if ($r9 !\u003d null) goto B5 else B7\n}",
      "B5 {\n  $r7 \u003d r3.getProvider()\n  $r6 \u003d JavaType _valueType\u003e\n  $r5 \u003d BeanProperty _property\u003e\n  r10 \u003d $r7.findTypedValueSerializer($r6, 0, $r5)\n  if (r10 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  r3.expectAnyFormat(r8)\n  return\n}",
      "B7 {\n  $r4 \u003d JavaType _valueType\u003e\n  r10.acceptJsonFormatVisitor(r3, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JsonValueSerializer#_acceptJsonFormatVisitorForEnum(...3)",
        "body": "{\r\n    // Copied from EnumSerializer#acceptJsonFormatVisitor\r\n    JsonStringFormatVisitor stringVisitor \u003d visitor.expectStringFormat(typeHint);\r\n    if (stringVisitor !\u003d null) {\r\n        Set\u003cString\u003e enums \u003d new LinkedHashSet\u003cString\u003e();\r\n        for (Object en : enumType.getEnumConstants()) {\r\n            try {\r\n                // 21-Apr-2016, tatu: This is convoluted to the max, but essentially we\r\n                //   call `@JsonValue`-annotated accessor method on all Enum members,\r\n                //   so it all \"works out\". To some degree.\r\n                enums.add(String.valueOf(_accessor.getValue(en)));\r\n            } catch (Exception e) {\r\n                Throwable t \u003d e;\r\n                while (t instanceof InvocationTargetException \u0026\u0026 t.getCause() !\u003d null) {\r\n                    t \u003d t.getCause();\r\n                }\r\n                ClassUtil.throwIfError(t);\r\n                throw JsonMappingException.wrapWithPath(t, en, _accessor.getName() + \"()\");\r\n            }\r\n        }\r\n        stringVisitor.enumTypes(enums);\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.MapProperty",
    "methodName": "getName",
    "signature": "java.lang.String getName()",
    "visibility": "public",
    "body": "{\r\n    if (_key instanceof String) {\r\n        return (String) _key;\r\n    }\r\n    return String.valueOf(_key);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MapProperty\n  $r1 \u003d Object _key\u003e\n  $z0 \u003d String\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d Object _key\u003e\n  $r5 \u003d String) $r4\n  return\n}",
      "B2 {\n  $r2 \u003d Object _key\u003e\n  $r3 \u003d String.valueOf($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.MapProperty",
    "methodName": "serializeAsField",
    "signature": "void serializeAsField(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    _keySerializer.serialize(_key, gen, provider);\r\n    if (_typeSerializer \u003d\u003d null) {\r\n        _valueSerializer.serialize(_value, gen, provider);\r\n    } else {\r\n        _valueSerializer.serializeWithType(_value, gen, provider, _typeSerializer);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r5 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MapProperty\n  Object\n  JsonGenerator\n  SerializerProvider\n  $r4 \u003d JsonSerializer _keySerializer\u003e\n  $r3 \u003d Object _key\u003e\n  $r4.serialize($r3, r1, r2)\n  $r5 \u003d TypeSerializer _typeSerializer\u003e\n  if ($r5 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d JsonSerializer _valueSerializer\u003e\n  $r9 \u003d Object _value\u003e\n  $r10.serialize($r9, r1, r2)\n  goto B3\n}",
      "B2 {\n  $r8 \u003d JsonSerializer _valueSerializer\u003e\n  $r7 \u003d Object _value\u003e\n  $r6 \u003d TypeSerializer _typeSerializer\u003e\n  $r8.serializeWithType($r7, r1, r2, $r6)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.MapProperty",
    "methodName": "serializeAsOmittedField",
    "signature": "void serializeAsOmittedField(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (!gen.canOmitFields()) {\r\n        gen.writeOmittedField(getName());\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MapProperty\n  Object\n  JsonGenerator\n  SerializerProvider\n  $z0 \u003d r0.canOmitFields()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1.getName()\n  r0.writeOmittedField($r2)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapProperty#getName(...0)",
        "body": "{\r\n    if (_key instanceof String) {\r\n        return (String) _key;\r\n    }\r\n    return String.valueOf(_key);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.MapProperty",
    "methodName": "serializeAsElement",
    "signature": "void serializeAsElement(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (_typeSerializer \u003d\u003d null) {\r\n        _valueSerializer.serialize(_value, gen, provider);\r\n    } else {\r\n        _valueSerializer.serializeWithType(_value, gen, provider, _typeSerializer);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MapProperty\n  Object\n  JsonGenerator\n  SerializerProvider\n  $r1 \u003d TypeSerializer _typeSerializer\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d JsonSerializer _valueSerializer\u003e\n  $r7 \u003d Object _value\u003e\n  $r8.serialize($r7, r2, r3)\n  goto B3\n}",
      "B2 {\n  $r6 \u003d JsonSerializer _valueSerializer\u003e\n  $r5 \u003d Object _value\u003e\n  $r4 \u003d TypeSerializer _typeSerializer\u003e\n  $r6.serializeWithType($r5, r2, r3, $r4)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.MapSerializer",
    "methodName": "_withValueTypeSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.MapSerializer _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "visibility": "public",
    "body": "{\r\n    if (_valueTypeSerializer \u003d\u003d vts) {\r\n        return this;\r\n    }\r\n    _ensureOverride(\"_withValueTypeSerializer\");\r\n    return new MapSerializer(this, vts, _suppressableValue, _suppressNulls);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MapSerializer\n  TypeSerializer\n  $r2 \u003d TypeSerializer _valueTypeSerializer\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r0._ensureOverride(\"_withValueTypeSerializer\")\n  $r3 \u003d MapSerializer\n  $r4 \u003d Object _suppressableValue\u003e\n  $z0 \u003d MapSerializer: boolean _suppressNulls\u003e\n  new MapSerializer(r0, r1, $r4, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapSerializer#_ensureOverride(...1)",
        "body": "{\r\n    ClassUtil.verifyMustOverride(MapSerializer.class, this, method);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.MapSerializer",
    "methodName": "withResolved",
    "signature": "com.fasterxml.jackson.databind.ser.std.MapSerializer withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.util.Set,java.util.Set,boolean)",
    "visibility": "public",
    "body": "{\r\n    _ensureOverride(\"withResolved\");\r\n    MapSerializer ser \u003d new MapSerializer(this, property, keySerializer, valueSerializer, ignored, included);\r\n    if (sortKeys !\u003d ser._sortKeys) {\r\n        ser \u003d new MapSerializer(ser, _filterId, sortKeys);\r\n    }\r\n    return ser;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d $z1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MapSerializer\n  BeanProperty\n  JsonSerializer\n  JsonSerializer\n  Set\n  Set\n  z0 :\u003d @parameter5: boolean\n  r0._ensureOverride(\"withResolved\")\n  $r1 \u003d MapSerializer\n  new MapSerializer(r0, r2, r3, r4, r5, r6)\n  r9 \u003d $r1\n  $z1 \u003d MapSerializer: boolean _sortKeys\u003e\n  if (z0 \u003d\u003d $z1) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d MapSerializer\n  $r8 \u003d Object _filterId\u003e\n  new MapSerializer($r1, $r8, z0)\n  r9 \u003d $r7\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapSerializer#_ensureOverride(...1)",
        "body": "{\r\n    ClassUtil.verifyMustOverride(MapSerializer.class, this, method);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.MapSerializer",
    "methodName": "withFilterId",
    "signature": "com.fasterxml.jackson.databind.ser.std.MapSerializer withFilterId(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (_filterId \u003d\u003d filterId) {\r\n        return this;\r\n    }\r\n    _ensureOverride(\"withFilterId\");\r\n    return new MapSerializer(this, filterId, _sortKeys);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MapSerializer\n  Object\n  $r2 \u003d Object _filterId\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r0._ensureOverride(\"withFilterId\")\n  $r3 \u003d MapSerializer\n  $z0 \u003d MapSerializer: boolean _sortKeys\u003e\n  new MapSerializer(r0, r1, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapSerializer#_ensureOverride(...1)",
        "body": "{\r\n    ClassUtil.verifyMustOverride(MapSerializer.class, this, method);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.MapSerializer",
    "methodName": "withContentInclusion",
    "signature": "com.fasterxml.jackson.databind.ser.std.MapSerializer withContentInclusion(java.lang.Object,boolean)",
    "visibility": "public",
    "body": "{\r\n    if ((suppressableValue \u003d\u003d _suppressableValue) \u0026\u0026 (suppressNulls \u003d\u003d _suppressNulls)) {\r\n        return this;\r\n    }\r\n    _ensureOverride(\"withContentInclusion\");\r\n    return new MapSerializer(this, _valueTypeSerializer, suppressableValue, suppressNulls);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B3",
      "B1 : If(z0 !\u003d $z1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MapSerializer\n  Object\n  z0 :\u003d @parameter1: boolean\n  $r2 \u003d Object _suppressableValue\u003e\n  if (r0 !\u003d $r2) goto B1 else B3\n}",
      "B1 {\n  $z1 \u003d MapSerializer: boolean _suppressNulls\u003e\n  if (z0 !\u003d $z1) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  r1._ensureOverride(\"withContentInclusion\")\n  $r3 \u003d MapSerializer\n  $r4 \u003d TypeSerializer _valueTypeSerializer\u003e\n  new MapSerializer(r1, $r4, r0, z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapSerializer#_ensureOverride(...1)",
        "body": "{\r\n    ClassUtil.verifyMustOverride(MapSerializer.class, this, method);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.MapSerializer",
    "methodName": "construct",
    "signature": "com.fasterxml.jackson.databind.ser.std.MapSerializer construct(java.util.Set,java.util.Set,com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    JavaType keyType, valueType;\r\n    if (mapType \u003d\u003d null) {\r\n        keyType \u003d valueType \u003d UNSPECIFIED_TYPE;\r\n    } else {\r\n        keyType \u003d mapType.getKeyType();\r\n        if (mapType.hasRawClass(java.util.Properties.class)) {\r\n            // 25-Mar-2020, tatu: [databind#2657] Since non-standard Properties may actually\r\n            //     contain non-Strings, demote value type to raw `Object`\r\n            valueType \u003d TypeFactory.unknownType();\r\n        } else {\r\n            valueType \u003d mapType.getContentType();\r\n        }\r\n    }\r\n    // If value type is final, it\u0027s same as forcing static value typing:\r\n    if (!staticValueType) {\r\n        staticValueType \u003d (valueType !\u003d null \u0026\u0026 valueType.isFinal());\r\n    } else {\r\n        // also: Object.class cannot be handled as static, ever\r\n        if (valueType.getRawClass() \u003d\u003d Object.class) {\r\n            staticValueType \u003d false;\r\n        }\r\n    }\r\n    MapSerializer ser \u003d new MapSerializer(ignoredEntries, includedEntries, keyType, valueType, staticValueType, vts, keySerializer, valueSerializer);\r\n    if (filterId !\u003d null) {\r\n        ser \u003d ser.withFilterId(filterId);\r\n    }\r\n    return ser;\r\n}",
    "nodes": 16,
    "edges": 22,
    "cc": 8,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B5 : If(z2 !\u003d 0) → B6 | else → B11",
      "B6 : If(r9 \u003d\u003d null) → B7 | else → B9",
      "B7 : If($z1 \u003d\u003d false) → B8 | else → B9",
      "B11 : If($r1 !\u003d class \"Ljava/lang/Object;\") → B12 | else → B13",
      "B13 : If(r7 \u003d\u003d null) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  Set\n  Set\n  JavaType\n  z2 :\u003d @parameter3: boolean\n  TypeSerializer\n  JsonSerializer\n  JsonSerializer\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d JavaType UNSPECIFIED_TYPE\u003e\n  r9 \u003d $r8\n  r10 \u003d $r8\n  goto B5\n}",
      "B2 {\n  r10 \u003d r0.getKeyType()\n  $z0 \u003d r0.hasRawClass(class \"Ljava/util/Properties;\")\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  r9 \u003d TypeFactory.unknownType()\n  goto B5\n}",
      "B4 {\n  r9 \u003d r0.getContentType()\n}",
      "B5 {\n  if (z2 !\u003d 0) goto B6 else B11\n}",
      "B6 {\n  if (r9 \u003d\u003d null) goto B7 else B9\n}",
      "B7 {\n  $z1 \u003d r9.isFinal()\n  if ($z1 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $z3 \u003d 1\n  goto B10\n}",
      "B9 {\n  $z3 \u003d 0\n}",
      "B10 {\n  z2 \u003d $z3\n  goto B13\n}",
      "B11 {\n  $r1 \u003d r9.getRawClass()\n  if ($r1 !\u003d class \"Ljava/lang/Object;\") goto B12 else B13\n}",
      "B12 {\n  z2 \u003d 0\n}",
      "B13 {\n  $r11 \u003d MapSerializer\n  new MapSerializer(r2, r3, r10, r9, z2, r4, r5, r6)\n  r12 \u003d $r11\n  if (r7 \u003d\u003d null) goto B14 else B15\n}",
      "B14 {\n  r12 \u003d $r11.withFilterId(r7)\n}",
      "B15 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B11",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.MapSerializer",
    "methodName": "createContextual",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    JsonSerializer\u003c?\u003e ser \u003d null;\r\n    JsonSerializer\u003c?\u003e keySer \u003d null;\r\n    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\r\n    final AnnotatedMember propertyAcc \u003d (property \u003d\u003d null) ? null : property.getMember();\r\n    // First: if we have a property, may have property-annotation overrides\r\n    if (_neitherNull(propertyAcc, intr)) {\r\n        Object serDef \u003d intr.findKeySerializer(propertyAcc);\r\n        if (serDef !\u003d null) {\r\n            keySer \u003d provider.serializerInstance(propertyAcc, serDef);\r\n        }\r\n        serDef \u003d intr.findContentSerializer(propertyAcc);\r\n        if (serDef !\u003d null) {\r\n            ser \u003d provider.serializerInstance(propertyAcc, serDef);\r\n        }\r\n    }\r\n    if (ser \u003d\u003d null) {\r\n        ser \u003d _valueSerializer;\r\n    }\r\n    // [databind#124]: May have a content converter\r\n    ser \u003d findContextualConvertingSerializer(provider, property, ser);\r\n    if (ser \u003d\u003d null) {\r\n        // 30-Sep-2012, tatu: One more thing -- if explicit content type is annotated,\r\n        //   we can consider it a static case as well.\r\n        // 20-Aug-2013, tatu: Need to avoid trying to access serializer for java.lang.Object tho\r\n        if (_valueTypeIsStatic \u0026\u0026 !_valueType.isJavaLangObject()) {\r\n            ser \u003d provider.findContentValueSerializer(_valueType, property);\r\n        }\r\n    }\r\n    if (keySer \u003d\u003d null) {\r\n        keySer \u003d _keySerializer;\r\n    }\r\n    if (keySer \u003d\u003d null) {\r\n        keySer \u003d provider.findKeySerializer(_keyType, property);\r\n    } else {\r\n        keySer \u003d provider.handleSecondaryContextualization(keySer, property);\r\n    }\r\n    Set\u003cString\u003e ignored \u003d _ignoredEntries;\r\n    Set\u003cString\u003e included \u003d _includedEntries;\r\n    boolean sortKeys \u003d false;\r\n    if (_neitherNull(propertyAcc, intr)) {\r\n        final SerializationConfig config \u003d provider.getConfig();\r\n        // ignorals\r\n        Set\u003cString\u003e newIgnored \u003d intr.findPropertyIgnoralByName(config, propertyAcc).findIgnoredForSerialization();\r\n        if (_nonEmpty(newIgnored)) {\r\n            ignored \u003d (ignored \u003d\u003d null) ? new HashSet\u003cString\u003e() : new HashSet\u003cString\u003e(ignored);\r\n            for (String str : newIgnored) {\r\n                ignored.add(str);\r\n            }\r\n        }\r\n        // inclusions\r\n        Set\u003cString\u003e newIncluded \u003d intr.findPropertyInclusionByName(config, propertyAcc).getIncluded();\r\n        if (newIncluded !\u003d null) {\r\n            included \u003d (included \u003d\u003d null) ? new HashSet\u003cString\u003e() : new HashSet\u003cString\u003e(included);\r\n            for (String str : newIncluded) {\r\n                included.add(str);\r\n            }\r\n        }\r\n        // sort key\r\n        Boolean b \u003d intr.findSerializationSortAlphabetically(propertyAcc);\r\n        sortKeys \u003d Boolean.TRUE.equals(b);\r\n    }\r\n    JsonFormat.Value format \u003d findFormatOverrides(provider, property, Map.class);\r\n    if (format !\u003d null) {\r\n        Boolean B \u003d format.getFeature(JsonFormat.Feature.WRITE_SORTED_MAP_ENTRIES);\r\n        if (B !\u003d null) {\r\n            sortKeys \u003d B;\r\n        }\r\n    }\r\n    MapSerializer mser \u003d withResolved(property, keySer, ser, ignored, included, sortKeys);\r\n    // [databind#307]: allow filtering\r\n    if (propertyAcc !\u003d null) {\r\n        Object filterId \u003d intr.findFilterId(propertyAcc);\r\n        if (filterId !\u003d null) {\r\n            mser \u003d mser.withFilterId(filterId);\r\n        }\r\n    }\r\n    JsonInclude.Value inclV \u003d findIncludeOverrides(provider, property, Map.class);\r\n    if (inclV !\u003d null) {\r\n        JsonInclude.Include incl \u003d inclV.getContentInclusion();\r\n        if (incl !\u003d JsonInclude.Include.USE_DEFAULTS) {\r\n            Object valueToSuppress;\r\n            boolean suppressNulls;\r\n            switch(incl) {\r\n                case NON_DEFAULT:\r\n                    valueToSuppress \u003d BeanUtil.getDefaultValue(_valueType);\r\n                    suppressNulls \u003d true;\r\n                    if (valueToSuppress !\u003d null) {\r\n                        if (valueToSuppress.getClass().isArray()) {\r\n                            valueToSuppress \u003d ArrayBuilders.getArrayComparator(valueToSuppress);\r\n                        }\r\n                    }\r\n                    break;\r\n                case NON_ABSENT:\r\n                    suppressNulls \u003d true;\r\n                    valueToSuppress \u003d _valueType.isReferenceType() ? MARKER_FOR_EMPTY : null;\r\n                    break;\r\n                case NON_EMPTY:\r\n                    suppressNulls \u003d true;\r\n                    valueToSuppress \u003d MARKER_FOR_EMPTY;\r\n                    break;\r\n                case CUSTOM:\r\n                    valueToSuppress \u003d provider.includeFilterInstance(null, inclV.getContentFilter());\r\n                    if (valueToSuppress \u003d\u003d null) {\r\n                        // is this legal?\r\n                        suppressNulls \u003d true;\r\n                    } else {\r\n                        suppressNulls \u003d provider.includeFilterSuppressNulls(valueToSuppress);\r\n                    }\r\n                    break;\r\n                case NON_NULL:\r\n                    valueToSuppress \u003d null;\r\n                    suppressNulls \u003d true;\r\n                    break;\r\n                // default\r\n                case ALWAYS:\r\n                default:\r\n                    valueToSuppress \u003d null;\r\n                    // 30-Sep-2016, tatu: Should not need to check global flags here,\r\n                    //   if inclusion forced to be ALWAYS\r\n                    suppressNulls \u003d false;\r\n                    break;\r\n            }\r\n            mser \u003d mser.withContentInclusion(valueToSuppress, suppressNulls);\r\n        }\r\n    }\r\n    return mser;\r\n}",
    "nodes": 59,
    "edges": 90,
    "cc": 33,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B8",
      "B4 : If(r31 \u003d\u003d null) → B5 | else → B6",
      "B6 : If($r27 \u003d\u003d null) → B7 | else → B8",
      "B8 : If(r28 !\u003d null) → B9 | else → B10",
      "B10 : If($r26 !\u003d null) → B11 | else → B14",
      "B11 : If($z5 \u003d\u003d false) → B12 | else → B14",
      "B12 : If($z6 !\u003d 0) → B13 | else → B14",
      "B14 : If(r29 !\u003d null) → B15 | else → B16",
      "B16 : If(r29 !\u003d null) → B17 | else → B18",
      "B19 : If($z1 \u003d\u003d false) → B20 | else → B35",
      "B20 : If($z4 \u003d\u003d false) → B21 | else → B27",
      "B21 : If($r22 !\u003d null) → B22 | else → B23",
      "B25 : If($z8 \u003d\u003d false) → B26 | else → B27",
      "B27 : If($r18 \u003d\u003d null) → B28 | else → B34",
      "B28 : If($r23 !\u003d null) → B29 | else → B30",
      "B32 : If($z9 \u003d\u003d false) → B33 | else → B34",
      "B35 : If($r42 \u003d\u003d null) → B36 | else → B38",
      "B36 : If(r43 \u003d\u003d null) → B37 | else → B38",
      "B38 : If(r3 \u003d\u003d null) → B39 | else → B41",
      "B39 : If(r46 \u003d\u003d null) → B40 | else → B41",
      "B41 : If($r47 \u003d\u003d null) → B42 | else → B58",
      "B42 : If(r48 \u003d\u003d $r5) → B43 | else → B58",
      "B43 : If(switch-on $i1) → B44 | else → B47",
      "B44 : If(r49 \u003d\u003d null) → B45 | else → B57",
      "B45 : If($z3 \u003d\u003d false) → B46 | else → B57",
      "B47 : If($z2 \u003d\u003d false) → B48 | else → B49",
      "B52 : If(r49 !\u003d null) → B53 | else → B54"
    ],
    "blockList": [
      "B0 {\n  MapSerializer\n  SerializerProvider\n  BeanProperty\n  r28 \u003d null\n  r29 \u003d null\n  r1 \u003d r0.getAnnotationIntrospector()\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r30 \u003d null\n  goto B3\n}",
      "B2 {\n  $r30 \u003d r2.getMember()\n}",
      "B3 {\n  r3 \u003d $r30\n  $z0 \u003d MapSerializer._neitherNull($r30, r1)\n  if ($z0 \u003d\u003d false) goto B4 else B8\n}",
      "B4 {\n  r31 \u003d r1.findKeySerializer($r30)\n  if (r31 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  r29 \u003d r0.serializerInstance($r30, r31)\n}",
      "B6 {\n  $r27 \u003d r1.findContentSerializer(r3)\n  if ($r27 \u003d\u003d null) goto B7 else B8\n}",
      "B7 {\n  r28 \u003d r0.serializerInstance(r3, $r27)\n}",
      "B8 {\n  if (r28 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  r28 \u003d JsonSerializer _valueSerializer\u003e\n}",
      "B10 {\n  $r26 \u003d r4.findContextualConvertingSerializer(r0, r2, r28)\n  r32 \u003d $r26\n  if ($r26 !\u003d null) goto B11 else B14\n}",
      "B11 {\n  $z5 \u003d MapSerializer: boolean _valueTypeIsStatic\u003e\n  if ($z5 \u003d\u003d false) goto B12 else B14\n}",
      "B12 {\n  $r24 \u003d JavaType _valueType\u003e\n  $z6 \u003d $r24.isJavaLangObject()\n  if ($z6 !\u003d 0) goto B13 else B14\n}",
      "B13 {\n  $r25 \u003d JavaType _valueType\u003e\n  r32 \u003d r0.findContentValueSerializer($r25, r2)\n}",
      "B14 {\n  if (r29 !\u003d null) goto B15 else B16\n}",
      "B15 {\n  r29 \u003d JsonSerializer _keySerializer\u003e\n}",
      "B16 {\n  if (r29 !\u003d null) goto B17 else B18\n}",
      "B17 {\n  $r21 \u003d JavaType _keyType\u003e\n  r33 \u003d r0.findKeySerializer($r21, r2)\n  goto B19\n}",
      "B18 {\n  r33 \u003d r0.handleSecondaryContextualization(r29, r2)\n}",
      "B19 {\n  $r22 \u003d Set _ignoredEntries\u003e\n  r34 \u003d $r22\n  $r23 \u003d Set _includedEntries\u003e\n  r35 \u003d $r23\n  z7 \u003d 0\n  $z1 \u003d MapSerializer._neitherNull(r3, r1)\n  if ($z1 \u003d\u003d false) goto B20 else B35\n}",
      "B20 {\n  r36 \u003d r0.getConfig()\n  $r12 \u003d r1.findPropertyIgnoralByName(r36, r3)\n  r37 \u003d $r12.findIgnoredForSerialization()\n  $z4 \u003d MapSerializer._nonEmpty(r37)\n  if ($z4 \u003d\u003d false) goto B21 else B27\n}",
      "B21 {\n  if ($r22 !\u003d null) goto B22 else B23\n}",
      "B22 {\n  $r38 \u003d HashSet\n  new HashSet()\n  goto B24\n}",
      "B23 {\n  $r38 \u003d HashSet\n  new HashSet($r22)\n}",
      "B24 {\n  r34 \u003d $r38\n  $r20 \u003d r37.iterator()\n}",
      "B25 {\n  $z8 \u003d $r20.hasNext()\n  if ($z8 \u003d\u003d false) goto B26 else B27\n}",
      "B26 {\n  $r19 \u003d $r20.next()\n  r39 \u003d String) $r19\n  r34.add(r39)\n  goto B25\n}",
      "B27 {\n  $r13 \u003d r1.findPropertyInclusionByName(r36, r3)\n  $r18 \u003d $r13.getIncluded()\n  if ($r18 \u003d\u003d null) goto B28 else B34\n}",
      "B28 {\n  if ($r23 !\u003d null) goto B29 else B30\n}",
      "B29 {\n  $r40 \u003d HashSet\n  new HashSet()\n  goto B31\n}",
      "B30 {\n  $r40 \u003d HashSet\n  new HashSet($r23)\n}",
      "B31 {\n  r35 \u003d $r40\n  $r17 \u003d $r18.iterator()\n}",
      "B32 {\n  $z9 \u003d $r17.hasNext()\n  if ($z9 \u003d\u003d false) goto B33 else B34\n}",
      "B33 {\n  $r16 \u003d $r17.next()\n  r41 \u003d String) $r16\n  r35.add(r41)\n  goto B32\n}",
      "B34 {\n  $r15 \u003d r1.findSerializationSortAlphabetically(r3)\n  $r14 \u003d Boolean TRUE\u003e\n  z7 \u003d $r14.equals($r15)\n}",
      "B35 {\n  $r42 \u003d r4.findFormatOverrides(r0, r2, class \"Ljava/util/Map;\")\n  if ($r42 \u003d\u003d null) goto B36 else B38\n}",
      "B36 {\n  $r11 \u003d JsonFormat$Feature WRITE_SORTED_MAP_ENTRIES\u003e\n  r43 \u003d $r42.getFeature($r11)\n  if (r43 \u003d\u003d null) goto B37 else B38\n}",
      "B37 {\n  z7 \u003d r43.booleanValue()\n}",
      "B38 {\n  $r44 \u003d r4.withResolved(r2, r33, r32, r34, r35, z7)\n  r45 \u003d $r44\n  if (r3 \u003d\u003d null) goto B39 else B41\n}",
      "B39 {\n  r46 \u003d r1.findFilterId(r3)\n  if (r46 \u003d\u003d null) goto B40 else B41\n}",
      "B40 {\n  r45 \u003d $r44.withFilterId(r46)\n}",
      "B41 {\n  $r47 \u003d r4.findIncludeOverrides(r0, r2, class \"Ljava/util/Map;\")\n  if ($r47 \u003d\u003d null) goto B42 else B58\n}",
      "B42 {\n  r48 \u003d $r47.getContentInclusion()\n  $r5 \u003d JsonInclude$Include USE_DEFAULTS\u003e\n  if (r48 \u003d\u003d $r5) goto B43 else B58\n}",
      "B43 {\n  $r6 \u003d MapSerializer$1: int[] $SwitchMap$com$fasterxml$jackson$annotation$JsonInclude$Include\u003e\n  $i0 \u003d r48.ordinal()\n  $i1 \u003d $r6[$i0]\n  Class getContentFilter()\u003e();     case 5: goto r49 \u003d null;     case 6: goto r49 \u003d null;     default: goto r49 \u003d null; }\n}",
      "B44 {\n  $r9 \u003d JavaType _valueType\u003e\n  r49 \u003d BeanUtil.getDefaultValue($r9)\n  z10 \u003d 1\n  if (r49 \u003d\u003d null) goto B45 else B57\n}",
      "B45 {\n  $r10 \u003d r49.getClass()\n  $z3 \u003d $r10.isArray()\n  if ($z3 \u003d\u003d false) goto B46 else B57\n}",
      "B46 {\n  r49 \u003d ArrayBuilders.getArrayComparator(r49)\n  goto B57\n}",
      "B47 {\n  z10 \u003d 1\n  $r8 \u003d JavaType _valueType\u003e\n  $z2 \u003d $r8.isReferenceType()\n  if ($z2 \u003d\u003d false) goto B48 else B49\n}",
      "B48 {\n  $r50 \u003d Object MARKER_FOR_EMPTY\u003e\n  goto B50\n}",
      "B49 {\n  $r50 \u003d null\n}",
      "B50 {\n  r49 \u003d $r50\n  goto B57\n}",
      "B51 {\n  z10 \u003d 1\n  r49 \u003d Object MARKER_FOR_EMPTY\u003e\n  goto B57\n}",
      "B52 {\n  $r7 \u003d $r47.getContentFilter()\n  r49 \u003d r0.includeFilterInstance(null, $r7)\n  if (r49 !\u003d null) goto B53 else B54\n}",
      "B53 {\n  z10 \u003d 1\n  goto B57\n}",
      "B54 {\n  z10 \u003d r0.includeFilterSuppressNulls(r49)\n  goto B57\n}",
      "B55 {\n  r49 \u003d null\n  z10 \u003d 1\n  goto B57\n}",
      "B56 {\n  r49 \u003d null\n  z10 \u003d 0\n}",
      "B57 {\n  r45 \u003d r45.withContentInclusion(r49, z10)\n}",
      "B58 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e B12",
      "B11 --\u003e B14",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B19 --\u003e B35",
      "B20 --\u003e B21",
      "B20 --\u003e B27",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B24",
      "B24 --\u003e B25",
      "B25 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B25",
      "B27 --\u003e B28",
      "B27 --\u003e B34",
      "B28 --\u003e B29",
      "B28 --\u003e B30",
      "B29 --\u003e B31",
      "B30 --\u003e B31",
      "B31 --\u003e B32",
      "B32 --\u003e B33",
      "B32 --\u003e B34",
      "B33 --\u003e B32",
      "B34 --\u003e B35",
      "B35 --\u003e B36",
      "B35 --\u003e B38",
      "B36 --\u003e B37",
      "B36 --\u003e B38",
      "B37 --\u003e B38",
      "B38 --\u003e B39",
      "B38 --\u003e B41",
      "B39 --\u003e B40",
      "B39 --\u003e B41",
      "B40 --\u003e B41",
      "B41 --\u003e B42",
      "B41 --\u003e B58",
      "B42 --\u003e B43",
      "B42 --\u003e B58",
      "B43 --\u003e B44",
      "B43 --\u003e B47",
      "B43 --\u003e B51",
      "B43 --\u003e B52",
      "B43 --\u003e B55",
      "B43 --\u003e B56",
      "B44 --\u003e B45",
      "B44 --\u003e B57",
      "B45 --\u003e B46",
      "B45 --\u003e B57",
      "B46 --\u003e B57",
      "B47 --\u003e B48",
      "B47 --\u003e B49",
      "B48 --\u003e B50",
      "B49 --\u003e B50",
      "B50 --\u003e B57",
      "B51 --\u003e B57",
      "B52 --\u003e B53",
      "B52 --\u003e B54",
      "B53 --\u003e B57",
      "B54 --\u003e B57",
      "B55 --\u003e B57",
      "B56 --\u003e B57",
      "B57 --\u003e B58",
      "B58 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapSerializer#findContextualConvertingSerializer(...3)",
        "body": "(source not found)"
      },
      {
        "name": "MapSerializer#findFormatOverrides(...3)",
        "body": "(source not found)"
      },
      {
        "name": "MapSerializer#_neitherNull(...2)",
        "body": "(source not found)"
      },
      {
        "name": "MapSerializer#withResolved(...6)",
        "body": "{\r\n    _ensureOverride(\"withResolved\");\r\n    MapSerializer ser \u003d new MapSerializer(this, property, keySerializer, valueSerializer, ignored, included);\r\n    if (sortKeys !\u003d ser._sortKeys) {\r\n        ser \u003d new MapSerializer(ser, _filterId, sortKeys);\r\n    }\r\n    return ser;\r\n}"
      },
      {
        "name": "MapSerializer#_nonEmpty(...1)",
        "body": "(source not found)"
      },
      {
        "name": "MapSerializer#findIncludeOverrides(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.MapSerializer",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    if (value.isEmpty()) {\r\n        return true;\r\n    }\r\n    // 05-Nove-2015, tatu: Simple cases are cheap, but for recursive\r\n    //   emptiness checking we actually need to see if values are empty as well.\r\n    Object supp \u003d _suppressableValue;\r\n    if ((supp \u003d\u003d null) \u0026\u0026 !_suppressNulls) {\r\n        return false;\r\n    }\r\n    JsonSerializer\u003cObject\u003e valueSer \u003d _valueSerializer;\r\n    final boolean checkEmpty \u003d (MARKER_FOR_EMPTY \u003d\u003d supp);\r\n    if (valueSer !\u003d null) {\r\n        for (Object elemValue : value.values()) {\r\n            if (elemValue \u003d\u003d null) {\r\n                if (_suppressNulls) {\r\n                    continue;\r\n                }\r\n                return false;\r\n            }\r\n            if (checkEmpty) {\r\n                if (!valueSer.isEmpty(prov, elemValue)) {\r\n                    return false;\r\n                }\r\n            } else if ((supp \u003d\u003d null) || !supp.equals(value)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    // But if not statically known, try this:\r\n    for (Object elemValue : value.values()) {\r\n        if (elemValue \u003d\u003d null) {\r\n            if (_suppressNulls) {\r\n                continue;\r\n            }\r\n            return false;\r\n        }\r\n        try {\r\n            valueSer \u003d _findSerializer(prov, elemValue);\r\n        } catch (DatabindException e) {\r\n            // Ugh... cannot just throw as-is, so...\r\n            // 05-Nov-2015, tatu: For now, probably best not to assume empty then\r\n            return false;\r\n        }\r\n        if (checkEmpty) {\r\n            if (!valueSer.isEmpty(prov, elemValue)) {\r\n                return false;\r\n            }\r\n        } else if ((supp \u003d\u003d null) || !supp.equals(value)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 39,
    "edges": 47,
    "cc": 10,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r2 !\u003d null) → B3 | else → B5",
      "B3 : If($z8 !\u003d 0) → B4 | else → B5",
      "B5 : If($r3 !\u003d r2) → B6 | else → B7",
      "B8 : If($r7 \u003d\u003d null) → B9 | else → B23",
      "B10 : If($z10 \u003d\u003d false) → B11 | else → B22",
      "B11 : If(r10 !\u003d null) → B12 | else → B15",
      "B12 : If($z7 \u003d\u003d false) → B13 | else → B14",
      "B15 : If(z1 \u003d\u003d false) → B16 | else → B18",
      "B16 : If($z6 !\u003d 0) → B17 | else → B21",
      "B18 : If(r2 \u003d\u003d null) → B19 | else → B20",
      "B19 : If($z5 !\u003d 0) → B20 | else → B21",
      "B24 : If($z11 \u003d\u003d false) → B25 | else → B38",
      "B25 : If(r12 !\u003d null) → B26 | else → B29",
      "B26 : If($z4 \u003d\u003d false) → B27 | else → B28",
      "B31 : If(z1 \u003d\u003d false) → B32 | else → B34",
      "B32 : If($z3 !\u003d 0) → B33 | else → B37",
      "B34 : If(r2 \u003d\u003d null) → B35 | else → B36",
      "B35 : If($z2 !\u003d 0) → B36 | else → B37"
    ],
    "blockList": [
      "B0 {\n  MapSerializer\n  SerializerProvider\n  Map\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r2 \u003d Object _suppressableValue\u003e\n  if (r2 !\u003d null) goto B3 else B5\n}",
      "B3 {\n  $z8 \u003d MapSerializer: boolean _suppressNulls\u003e\n  if ($z8 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r7 \u003d JsonSerializer _valueSerializer\u003e\n  $r3 \u003d Object MARKER_FOR_EMPTY\u003e\n  if ($r3 !\u003d r2) goto B6 else B7\n}",
      "B6 {\n  $z9 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z9 \u003d 0\n}",
      "B8 {\n  z1 \u003d $z9\n  if ($r7 \u003d\u003d null) goto B9 else B23\n}",
      "B9 {\n  $r6 \u003d r0.values()\n  r9 \u003d $r6.iterator()\n}",
      "B10 {\n  $z10 \u003d r9.hasNext()\n  if ($z10 \u003d\u003d false) goto B11 else B22\n}",
      "B11 {\n  r10 \u003d r9.next()\n  if (r10 !\u003d null) goto B12 else B15\n}",
      "B12 {\n  $z7 \u003d MapSerializer: boolean _suppressNulls\u003e\n  if ($z7 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  goto B10\n}",
      "B14 {\n  return\n}",
      "B15 {\n  if (z1 \u003d\u003d false) goto B16 else B18\n}",
      "B16 {\n  $z6 \u003d $r7.isEmpty(r5, r10)\n  if ($z6 !\u003d 0) goto B17 else B21\n}",
      "B17 {\n  return\n}",
      "B18 {\n  if (r2 \u003d\u003d null) goto B19 else B20\n}",
      "B19 {\n  $z5 \u003d r2.equals(r0)\n  if ($z5 !\u003d 0) goto B20 else B21\n}",
      "B20 {\n  return\n}",
      "B21 {\n  goto B10\n}",
      "B22 {\n  return\n}",
      "B23 {\n  $r4 \u003d r0.values()\n  r11 \u003d $r4.iterator()\n}",
      "B24 {\n  $z11 \u003d r11.hasNext()\n  if ($z11 \u003d\u003d false) goto B25 else B38\n}",
      "B25 {\n  r12 \u003d r11.next()\n  if (r12 !\u003d null) goto B26 else B29\n}",
      "B26 {\n  $z4 \u003d MapSerializer: boolean _suppressNulls\u003e\n  if ($z4 \u003d\u003d false) goto B27 else B28\n}",
      "B27 {\n  goto B24\n}",
      "B28 {\n  return\n}",
      "B29 {\n  r13 \u003d r1._findSerializer(r5, r12)\n  goto B31\n}",
      "B30 {\n  $r8 :\u003d @caughtexception\n  return\n}",
      "B31 {\n  if (z1 \u003d\u003d false) goto B32 else B34\n}",
      "B32 {\n  $z3 \u003d r13.isEmpty(r5, r12)\n  if ($z3 !\u003d 0) goto B33 else B37\n}",
      "B33 {\n  return\n}",
      "B34 {\n  if (r2 \u003d\u003d null) goto B35 else B36\n}",
      "B35 {\n  $z2 \u003d r2.equals(r0)\n  if ($z2 !\u003d 0) goto B36 else B37\n}",
      "B36 {\n  return\n}",
      "B37 {\n  goto B24\n}",
      "B38 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B23",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B22",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B10",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B16",
      "B15 --\u003e B18",
      "B16 --\u003e B17",
      "B16 --\u003e B21",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e [EXIT]",
      "B21 --\u003e B10",
      "B22 --\u003e [EXIT]",
      "B23 --\u003e B24",
      "B24 --\u003e B25",
      "B24 --\u003e B38",
      "B25 --\u003e B26",
      "B25 --\u003e B29",
      "B26 --\u003e B27",
      "B26 --\u003e B28",
      "B27 --\u003e B24",
      "B28 --\u003e [EXIT]",
      "B29 --\u003e B31",
      "B30 --\u003e [EXIT]",
      "B31 --\u003e B32",
      "B31 --\u003e B34",
      "B32 --\u003e B33",
      "B32 --\u003e B37",
      "B33 --\u003e [EXIT]",
      "B34 --\u003e B35",
      "B34 --\u003e B36",
      "B35 --\u003e B36",
      "B35 --\u003e B37",
      "B36 --\u003e [EXIT]",
      "B37 --\u003e B24",
      "B38 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapSerializer#_findSerializer(...2)",
        "body": "{\r\n    final Class\u003c?\u003e cc \u003d value.getClass();\r\n    JsonSerializer\u003cObject\u003e valueSer \u003d _dynamicValueSerializers.serializerFor(cc);\r\n    if (valueSer !\u003d null) {\r\n        return valueSer;\r\n    }\r\n    if (_valueType.hasGenericTypes()) {\r\n        return _findAndAddDynamic(_dynamicValueSerializers, provider.constructSpecializedType(_valueType, cc), provider);\r\n    }\r\n    return _findAndAddDynamic(_dynamicValueSerializers, cc, provider);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.MapSerializer",
    "methodName": "hasSingleElement",
    "signature": "boolean hasSingleElement(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    return (value.size() \u003d\u003d 1);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MapSerializer\n  Map\n  $i0 \u003d r0.size()\n  if ($i0 !\u003d 1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.MapSerializer",
    "methodName": "serializeWithoutTypeInfo",
    "signature": "void serializeWithoutTypeInfo(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (!value.isEmpty()) {\r\n        if (_sortKeys || provider.isEnabled(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS)) {\r\n            value \u003d _orderEntries(value, gen, provider);\r\n        }\r\n        PropertyFilter pf;\r\n        if ((_filterId !\u003d null) \u0026\u0026 (pf \u003d findPropertyFilter(provider, _filterId, value)) !\u003d null) {\r\n            serializeFilteredFields(value, gen, provider, pf, _suppressableValue);\r\n        } else if ((_suppressableValue !\u003d null) || _suppressNulls) {\r\n            serializeOptionalFields(value, gen, provider, _suppressableValue);\r\n        } else if (_valueSerializer !\u003d null) {\r\n            serializeFieldsUsing(value, gen, provider, _valueSerializer);\r\n        } else {\r\n            serializeFields(value, gen, provider);\r\n        }\r\n    }\r\n}",
    "nodes": 14,
    "edges": 21,
    "cc": 9,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B13",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3",
      "B2 : If($z3 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($r12 \u003d\u003d null) → B5 | else → B7",
      "B5 : If($r8 \u003d\u003d null) → B6 | else → B7",
      "B7 : If($r3 !\u003d null) → B8 | else → B9",
      "B8 : If($z2 \u003d\u003d false) → B9 | else → B10",
      "B10 : If($r5 \u003d\u003d null) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  MapSerializer\n  Map\n  JsonGenerator\n  SerializerProvider\n  $z0 \u003d r11.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B13\n}",
      "B1 {\n  $z1 \u003d MapSerializer: boolean _sortKeys\u003e\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r10 \u003d SerializationFeature ORDER_MAP_ENTRIES_BY_KEYS\u003e\n  $z3 \u003d r2.isEnabled($r10)\n  if ($z3 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  r11 \u003d r0._orderEntries(r11, r1, r2)\n}",
      "B4 {\n  $r12 \u003d Object _filterId\u003e\n  if ($r12 \u003d\u003d null) goto B5 else B7\n}",
      "B5 {\n  $r7 \u003d Object _filterId\u003e\n  $r8 \u003d r0.findPropertyFilter(r2, $r7, r11)\n  if ($r8 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r9 \u003d Object _suppressableValue\u003e\n  r0.serializeFilteredFields(r11, r1, r2, $r8, $r9)\n  goto B13\n}",
      "B7 {\n  $r3 \u003d Object _suppressableValue\u003e\n  if ($r3 !\u003d null) goto B8 else B9\n}",
      "B8 {\n  $z2 \u003d MapSerializer: boolean _suppressNulls\u003e\n  if ($z2 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r4 \u003d Object _suppressableValue\u003e\n  r0.serializeOptionalFields(r11, r1, r2, $r4)\n  goto B13\n}",
      "B10 {\n  $r5 \u003d JsonSerializer _valueSerializer\u003e\n  if ($r5 \u003d\u003d null) goto B11 else B12\n}",
      "B11 {\n  $r6 \u003d JsonSerializer _valueSerializer\u003e\n  r0.serializeFieldsUsing(r11, r1, r2, $r6)\n  goto B13\n}",
      "B12 {\n  r0.serializeFields(r11, r1, r2)\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B13",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B13",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B13",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapSerializer#serializeFieldsUsing(...4)",
        "body": "{\r\n    final JsonSerializer\u003cObject\u003e keySerializer \u003d _keySerializer;\r\n    final TypeSerializer typeSer \u003d _valueTypeSerializer;\r\n    for (Map.Entry\u003c?, ?\u003e entry : value.entrySet()) {\r\n        Object keyElem \u003d entry.getKey();\r\n        if ((_inclusionChecker !\u003d null) \u0026\u0026 _inclusionChecker.shouldIgnore(keyElem)) {\r\n            continue;\r\n        }\r\n        if (keyElem \u003d\u003d null) {\r\n            provider.findNullKeySerializer(_keyType, _property).serialize(null, gen, provider);\r\n        } else {\r\n            keySerializer.serialize(keyElem, gen, provider);\r\n        }\r\n        final Object valueElem \u003d entry.getValue();\r\n        if (valueElem \u003d\u003d null) {\r\n            provider.defaultSerializeNull(gen);\r\n        } else {\r\n            try {\r\n                if (typeSer \u003d\u003d null) {\r\n                    ser.serialize(valueElem, gen, provider);\r\n                } else {\r\n                    ser.serializeWithType(valueElem, gen, provider, typeSer);\r\n                }\r\n            } catch (Exception e) {\r\n                wrapAndThrow(provider, e, value, String.valueOf(keyElem));\r\n            }\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "MapSerializer#serializeFields(...3)",
        "body": "{\r\n    // If value type needs polymorphic type handling, some more work needed:\r\n    if (_valueTypeSerializer !\u003d null) {\r\n        serializeTypedFields(value, gen, provider, null);\r\n        return;\r\n    }\r\n    final JsonSerializer\u003cObject\u003e keySerializer \u003d _keySerializer;\r\n    Object keyElem \u003d null;\r\n    try {\r\n        for (Map.Entry\u003c?, ?\u003e entry : value.entrySet()) {\r\n            Object valueElem \u003d entry.getValue();\r\n            // First, serialize key\r\n            keyElem \u003d entry.getKey();\r\n            if (keyElem \u003d\u003d null) {\r\n                provider.findNullKeySerializer(_keyType, _property).serialize(null, gen, provider);\r\n            } else {\r\n                // One twist: is entry ignorable? If so, skip\r\n                if ((_inclusionChecker !\u003d null) \u0026\u0026 _inclusionChecker.shouldIgnore(keyElem)) {\r\n                    continue;\r\n                }\r\n                keySerializer.serialize(keyElem, gen, provider);\r\n            }\r\n            // And then value\r\n            if (valueElem \u003d\u003d null) {\r\n                provider.defaultSerializeNull(gen);\r\n                continue;\r\n            }\r\n            JsonSerializer\u003cObject\u003e serializer \u003d _valueSerializer;\r\n            if (serializer \u003d\u003d null) {\r\n                serializer \u003d _findSerializer(provider, valueElem);\r\n            }\r\n            serializer.serialize(valueElem, gen, provider);\r\n        }\r\n    } catch (Exception e) {\r\n        // Add reference information\r\n        wrapAndThrow(provider, e, value, String.valueOf(keyElem));\r\n    }\r\n}"
      },
      {
        "name": "MapSerializer#serializeOptionalFields(...4)",
        "body": "{\r\n    // If value type needs polymorphic type handling, some more work needed:\r\n    if (_valueTypeSerializer !\u003d null) {\r\n        serializeTypedFields(value, gen, provider, suppressableValue);\r\n        return;\r\n    }\r\n    final boolean checkEmpty \u003d (MARKER_FOR_EMPTY \u003d\u003d suppressableValue);\r\n    for (Map.Entry\u003c?, ?\u003e entry : value.entrySet()) {\r\n        // First find key serializer\r\n        final Object keyElem \u003d entry.getKey();\r\n        JsonSerializer\u003cObject\u003e keySerializer;\r\n        if (keyElem \u003d\u003d null) {\r\n            keySerializer \u003d provider.findNullKeySerializer(_keyType, _property);\r\n        } else {\r\n            if ((_inclusionChecker !\u003d null) \u0026\u0026 _inclusionChecker.shouldIgnore(keyElem)) {\r\n                continue;\r\n            }\r\n            keySerializer \u003d _keySerializer;\r\n        }\r\n        // Then value serializer\r\n        final Object valueElem \u003d entry.getValue();\r\n        JsonSerializer\u003cObject\u003e valueSer;\r\n        if (valueElem \u003d\u003d null) {\r\n            if (_suppressNulls) {\r\n                // all suppressions include null-suppression\r\n                continue;\r\n            }\r\n            valueSer \u003d provider.getDefaultNullValueSerializer();\r\n        } else {\r\n            valueSer \u003d _valueSerializer;\r\n            if (valueSer \u003d\u003d null) {\r\n                valueSer \u003d _findSerializer(provider, valueElem);\r\n            }\r\n            // also may need to skip non-empty values:\r\n            if (checkEmpty) {\r\n                if (valueSer.isEmpty(provider, valueElem)) {\r\n                    continue;\r\n                }\r\n            } else if (suppressableValue !\u003d null) {\r\n                if (suppressableValue.equals(valueElem)) {\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        // and then serialize, if all went well\r\n        try {\r\n            keySerializer.serialize(keyElem, gen, provider);\r\n            valueSer.serialize(valueElem, gen, provider);\r\n        } catch (Exception e) {\r\n            wrapAndThrow(provider, e, value, String.valueOf(keyElem));\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "MapSerializer#findPropertyFilter(...3)",
        "body": "(source not found)"
      },
      {
        "name": "MapSerializer#_orderEntries(...3)",
        "body": "{\r\n    // minor optimization: may already be sorted?\r\n    if (input instanceof SortedMap\u003c?, ?\u003e) {\r\n        return input;\r\n    }\r\n    // or is it empty? then no need to sort either\r\n    if (input.isEmpty()) {\r\n        return input;\r\n    }\r\n    // [databind#4773] Since 2.19: We should not try sorting Maps with uncomparable keys\r\n    // And first key is a good enough sample for now.\r\n    Object firstKey \u003d input.keySet().iterator().next();\r\n    if (!Comparable.class.isInstance(firstKey)) {\r\n        // We cannot sort incomparable keys, should we fail or just skip sorting?\r\n        if (!provider.isEnabled(SerializationFeature.FAIL_ON_ORDER_MAP_BY_INCOMPARABLE_KEY)) {\r\n            return input;\r\n        } else {\r\n            Class\u003c?\u003e clazz \u003d firstKey \u003d\u003d null ? Object.class : firstKey.getClass();\r\n            provider.reportBadDefinition(clazz, String.format(\"Cannot order Map entries by key of incomparable type %s, consider disabling \" + \"`SerializationFeature.FAIL_ON_ORDER_MAP_BY_INCOMPARABLE_KEY` to simply skip sorting\", ClassUtil.classNameOf(firstKey)));\r\n        }\r\n    }\r\n    // [databind#1411]: TreeMap does not like null key... (although note that\r\n    //   check above should prevent this code from being called in that case)\r\n    // [databind#153]: but, apparently, some custom Maps do manage hit this\r\n    //   problem.\r\n    if (_hasNullKey(input)) {\r\n        TreeMap\u003cObject, Object\u003e result \u003d new TreeMap\u003cObject, Object\u003e();\r\n        for (Map.Entry\u003c?, ?\u003e entry : input.entrySet()) {\r\n            Object key \u003d entry.getKey();\r\n            if (key \u003d\u003d null) {\r\n                _writeNullKeyedEntry(gen, provider, entry.getValue());\r\n                continue;\r\n            }\r\n            result.put(key, entry.getValue());\r\n        }\r\n        return result;\r\n    }\r\n    return new TreeMap\u003cObject, Object\u003e(input);\r\n}"
      },
      {
        "name": "MapSerializer#serializeFilteredFields(...5)",
        "body": "{\r\n    final MapProperty prop \u003d new MapProperty(_valueTypeSerializer, _property);\r\n    final boolean checkEmpty \u003d (MARKER_FOR_EMPTY \u003d\u003d suppressableValue);\r\n    for (Map.Entry\u003c?, ?\u003e entry : value.entrySet()) {\r\n        // First, serialize key; unless ignorable by key\r\n        final Object keyElem \u003d entry.getKey();\r\n        if ((_inclusionChecker !\u003d null) \u0026\u0026 _inclusionChecker.shouldIgnore(keyElem)) {\r\n            continue;\r\n        }\r\n        JsonSerializer\u003cObject\u003e keySerializer;\r\n        if (keyElem \u003d\u003d null) {\r\n            keySerializer \u003d provider.findNullKeySerializer(_keyType, _property);\r\n        } else {\r\n            keySerializer \u003d _keySerializer;\r\n        }\r\n        // or by value; nulls often suppressed\r\n        final Object valueElem \u003d entry.getValue();\r\n        JsonSerializer\u003cObject\u003e valueSer;\r\n        // And then value\r\n        if (valueElem \u003d\u003d null) {\r\n            if (_suppressNulls) {\r\n                continue;\r\n            }\r\n            valueSer \u003d provider.getDefaultNullValueSerializer();\r\n        } else {\r\n            valueSer \u003d _valueSerializer;\r\n            if (valueSer \u003d\u003d null) {\r\n                valueSer \u003d _findSerializer(provider, valueElem);\r\n            }\r\n            // also may need to skip non-empty values:\r\n            if (checkEmpty) {\r\n                if (valueSer.isEmpty(provider, valueElem)) {\r\n                    continue;\r\n                }\r\n            } else if (suppressableValue !\u003d null) {\r\n                if (suppressableValue.equals(valueElem)) {\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        // and with that, ask filter to handle it\r\n        prop.reset(keyElem, valueElem, keySerializer, valueSer);\r\n        try {\r\n            filter.serializeAsField(value, gen, provider, prop);\r\n        } catch (Exception e) {\r\n            wrapAndThrow(provider, e, value, String.valueOf(keyElem));\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.MapSerializer",
    "methodName": "serializeFields",
    "signature": "void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    // If value type needs polymorphic type handling, some more work needed:\r\n    if (_valueTypeSerializer !\u003d null) {\r\n        serializeTypedFields(value, gen, provider, null);\r\n        return;\r\n    }\r\n    final JsonSerializer\u003cObject\u003e keySerializer \u003d _keySerializer;\r\n    Object keyElem \u003d null;\r\n    try {\r\n        for (Map.Entry\u003c?, ?\u003e entry : value.entrySet()) {\r\n            Object valueElem \u003d entry.getValue();\r\n            // First, serialize key\r\n            keyElem \u003d entry.getKey();\r\n            if (keyElem \u003d\u003d null) {\r\n                provider.findNullKeySerializer(_keyType, _property).serialize(null, gen, provider);\r\n            } else {\r\n                // One twist: is entry ignorable? If so, skip\r\n                if ((_inclusionChecker !\u003d null) \u0026\u0026 _inclusionChecker.shouldIgnore(keyElem)) {\r\n                    continue;\r\n                }\r\n                keySerializer.serialize(keyElem, gen, provider);\r\n            }\r\n            // And then value\r\n            if (valueElem \u003d\u003d null) {\r\n                provider.defaultSerializeNull(gen);\r\n                continue;\r\n            }\r\n            JsonSerializer\u003cObject\u003e serializer \u003d _valueSerializer;\r\n            if (serializer \u003d\u003d null) {\r\n                serializer \u003d _findSerializer(provider, valueElem);\r\n            }\r\n            serializer.serialize(valueElem, gen, provider);\r\n        }\r\n    } catch (Exception e) {\r\n        // Add reference information\r\n        wrapAndThrow(provider, e, value, String.valueOf(keyElem));\r\n    }\r\n}",
    "nodes": 18,
    "edges": 23,
    "cc": 7,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B15",
      "B4 : If(r17 !\u003d null) → B5 | else → B6",
      "B6 : If($r8 \u003d\u003d null) → B7 | else → B9",
      "B7 : If($z0 \u003d\u003d false) → B8 | else → B9",
      "B10 : If(r7 !\u003d null) → B11 | else → B12",
      "B12 : If(r19 !\u003d null) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  MapSerializer\n  Map\n  JsonGenerator\n  SerializerProvider\n  $r1 \u003d TypeSerializer _valueTypeSerializer\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r0.serializeTypedFields(r3, r9, r10, null)\n  return\n}",
      "B2 {\n  r2 \u003d JsonSerializer _keySerializer\u003e\n  r17 \u003d null\n  $r4 \u003d r3.entrySet()\n  r18 \u003d $r4.iterator()\n}",
      "B3 {\n  $z1 \u003d r18.hasNext()\n  if ($z1 \u003d\u003d false) goto B4 else B15\n}",
      "B4 {\n  $r5 \u003d r18.next()\n  r6 \u003d Map$Entry) $r5\n  r7 \u003d r6.getValue()\n  r17 \u003d r6.getKey()\n  if (r17 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r13 \u003d JavaType _keyType\u003e\n  $r12 \u003d BeanProperty _property\u003e\n  $r14 \u003d r10.findNullKeySerializer($r13, $r12)\n  $r14.serialize(null, r9, r10)\n  goto B10\n}",
      "B6 {\n  $r8 \u003d IgnorePropertiesUtil$Checker _inclusionChecker\u003e\n  if ($r8 \u003d\u003d null) goto B7 else B9\n}",
      "B7 {\n  $r11 \u003d IgnorePropertiesUtil$Checker _inclusionChecker\u003e\n  $z0 \u003d $r11.shouldIgnore(r17)\n  if ($z0 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  goto B3\n}",
      "B9 {\n  r2.serialize(r17, r9, r10)\n}",
      "B10 {\n  if (r7 !\u003d null) goto B11 else B12\n}",
      "B11 {\n  r10.defaultSerializeNull(r9)\n  goto B3\n}",
      "B12 {\n  r19 \u003d JsonSerializer _valueSerializer\u003e\n  if (r19 !\u003d null) goto B13 else B14\n}",
      "B13 {\n  r19 \u003d r0._findSerializer(r10, r7)\n}",
      "B14 {\n  r19.serialize(r7, r9, r10)\n  goto B3\n}",
      "B15 {\n  goto B17\n}",
      "B16 {\n  $r15 :\u003d @caughtexception\n  $r16 \u003d String.valueOf(r17)\n  r0.wrapAndThrow(r10, $r15, r3, $r16)\n}",
      "B17 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B15",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B3",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B3",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B3",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapSerializer#serializeTypedFields(...4)",
        "body": "{\r\n    final boolean checkEmpty \u003d (MARKER_FOR_EMPTY \u003d\u003d suppressableValue);\r\n    for (Map.Entry\u003c?, ?\u003e entry : value.entrySet()) {\r\n        Object keyElem \u003d entry.getKey();\r\n        JsonSerializer\u003cObject\u003e keySerializer;\r\n        if (keyElem \u003d\u003d null) {\r\n            keySerializer \u003d provider.findNullKeySerializer(_keyType, _property);\r\n        } else {\r\n            // One twist: is entry ignorable? If so, skip\r\n            if ((_inclusionChecker !\u003d null) \u0026\u0026 _inclusionChecker.shouldIgnore(keyElem)) {\r\n                continue;\r\n            }\r\n            keySerializer \u003d _keySerializer;\r\n        }\r\n        final Object valueElem \u003d entry.getValue();\r\n        // And then value\r\n        JsonSerializer\u003cObject\u003e valueSer;\r\n        if (valueElem \u003d\u003d null) {\r\n            if (_suppressNulls) {\r\n                // all suppression include null suppression\r\n                continue;\r\n            }\r\n            valueSer \u003d provider.getDefaultNullValueSerializer();\r\n        } else {\r\n            valueSer \u003d _valueSerializer;\r\n            if (valueSer \u003d\u003d null) {\r\n                valueSer \u003d _findSerializer(provider, valueElem);\r\n            }\r\n            // also may need to skip non-empty values:\r\n            if (checkEmpty) {\r\n                if (valueSer.isEmpty(provider, valueElem)) {\r\n                    continue;\r\n                }\r\n            } else if (suppressableValue !\u003d null) {\r\n                if (suppressableValue.equals(valueElem)) {\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        keySerializer.serialize(keyElem, gen, provider);\r\n        try {\r\n            valueSer.serializeWithType(valueElem, gen, provider, _valueTypeSerializer);\r\n        } catch (Exception e) {\r\n            wrapAndThrow(provider, e, value, String.valueOf(keyElem));\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "MapSerializer#_findSerializer(...2)",
        "body": "{\r\n    final Class\u003c?\u003e cc \u003d value.getClass();\r\n    JsonSerializer\u003cObject\u003e valueSer \u003d _dynamicValueSerializers.serializerFor(cc);\r\n    if (valueSer !\u003d null) {\r\n        return valueSer;\r\n    }\r\n    if (_valueType.hasGenericTypes()) {\r\n        return _findAndAddDynamic(_dynamicValueSerializers, provider.constructSpecializedType(_valueType, cc), provider);\r\n    }\r\n    return _findAndAddDynamic(_dynamicValueSerializers, cc, provider);\r\n}"
      },
      {
        "name": "MapSerializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.MapSerializer",
    "methodName": "serializeOptionalFields",
    "signature": "void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    // If value type needs polymorphic type handling, some more work needed:\r\n    if (_valueTypeSerializer !\u003d null) {\r\n        serializeTypedFields(value, gen, provider, suppressableValue);\r\n        return;\r\n    }\r\n    final boolean checkEmpty \u003d (MARKER_FOR_EMPTY \u003d\u003d suppressableValue);\r\n    for (Map.Entry\u003c?, ?\u003e entry : value.entrySet()) {\r\n        // First find key serializer\r\n        final Object keyElem \u003d entry.getKey();\r\n        JsonSerializer\u003cObject\u003e keySerializer;\r\n        if (keyElem \u003d\u003d null) {\r\n            keySerializer \u003d provider.findNullKeySerializer(_keyType, _property);\r\n        } else {\r\n            if ((_inclusionChecker !\u003d null) \u0026\u0026 _inclusionChecker.shouldIgnore(keyElem)) {\r\n                continue;\r\n            }\r\n            keySerializer \u003d _keySerializer;\r\n        }\r\n        // Then value serializer\r\n        final Object valueElem \u003d entry.getValue();\r\n        JsonSerializer\u003cObject\u003e valueSer;\r\n        if (valueElem \u003d\u003d null) {\r\n            if (_suppressNulls) {\r\n                // all suppressions include null-suppression\r\n                continue;\r\n            }\r\n            valueSer \u003d provider.getDefaultNullValueSerializer();\r\n        } else {\r\n            valueSer \u003d _valueSerializer;\r\n            if (valueSer \u003d\u003d null) {\r\n                valueSer \u003d _findSerializer(provider, valueElem);\r\n            }\r\n            // also may need to skip non-empty values:\r\n            if (checkEmpty) {\r\n                if (valueSer.isEmpty(provider, valueElem)) {\r\n                    continue;\r\n                }\r\n            } else if (suppressableValue !\u003d null) {\r\n                if (suppressableValue.equals(valueElem)) {\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        // and then serialize, if all went well\r\n        try {\r\n            keySerializer.serialize(keyElem, gen, provider);\r\n            valueSer.serialize(valueElem, gen, provider);\r\n        } catch (Exception e) {\r\n            wrapAndThrow(provider, e, value, String.valueOf(keyElem));\r\n        }\r\n    }\r\n}",
    "nodes": 29,
    "edges": 40,
    "cc": 13,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r3 !\u003d r2) → B3 | else → B4",
      "B6 : If($z6 \u003d\u003d false) → B7 | else → B28",
      "B7 : If(r8 !\u003d null) → B8 | else → B9",
      "B9 : If($r9 \u003d\u003d null) → B10 | else → B12",
      "B10 : If($z4 \u003d\u003d false) → B11 | else → B12",
      "B13 : If($r19 !\u003d null) → B14 | else → B17",
      "B14 : If($z3 \u003d\u003d false) → B15 | else → B16",
      "B17 : If(r20 !\u003d null) → B18 | else → B19",
      "B19 : If(z0 \u003d\u003d false) → B20 | else → B22",
      "B20 : If($z2 \u003d\u003d false) → B21 | else → B25",
      "B22 : If(r2 \u003d\u003d null) → B23 | else → B25",
      "B23 : If($z1 \u003d\u003d false) → B24 | else → B25"
    ],
    "blockList": [
      "B0 {\n  MapSerializer\n  Map\n  JsonGenerator\n  SerializerProvider\n  Object\n  $r1 \u003d TypeSerializer _valueTypeSerializer\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r0.serializeTypedFields(r4, r10, r11, r2)\n  return\n}",
      "B2 {\n  $r3 \u003d Object MARKER_FOR_EMPTY\u003e\n  if ($r3 !\u003d r2) goto B3 else B4\n}",
      "B3 {\n  $z5 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z5 \u003d 0\n}",
      "B5 {\n  z0 \u003d $z5\n  $r5 \u003d r4.entrySet()\n  $r15 \u003d $r5.iterator()\n}",
      "B6 {\n  $z6 \u003d $r15.hasNext()\n  if ($z6 \u003d\u003d false) goto B7 else B28\n}",
      "B7 {\n  $r6 \u003d $r15.next()\n  r7 \u003d Map$Entry) $r6\n  r8 \u003d r7.getKey()\n  if (r8 !\u003d null) goto B8 else B9\n}",
      "B8 {\n  $r14 \u003d JavaType _keyType\u003e\n  $r13 \u003d BeanProperty _property\u003e\n  r18 \u003d r11.findNullKeySerializer($r14, $r13)\n  goto B13\n}",
      "B9 {\n  $r9 \u003d IgnorePropertiesUtil$Checker _inclusionChecker\u003e\n  if ($r9 \u003d\u003d null) goto B10 else B12\n}",
      "B10 {\n  $r12 \u003d IgnorePropertiesUtil$Checker _inclusionChecker\u003e\n  $z4 \u003d $r12.shouldIgnore(r8)\n  if ($z4 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  goto B6\n}",
      "B12 {\n  r18 \u003d JsonSerializer _keySerializer\u003e\n}",
      "B13 {\n  $r19 \u003d r7.getValue()\n  if ($r19 !\u003d null) goto B14 else B17\n}",
      "B14 {\n  $z3 \u003d MapSerializer: boolean _suppressNulls\u003e\n  if ($z3 \u003d\u003d false) goto B15 else B16\n}",
      "B15 {\n  goto B6\n}",
      "B16 {\n  r20 \u003d r11.getDefaultNullValueSerializer()\n  goto B25\n}",
      "B17 {\n  r20 \u003d JsonSerializer _valueSerializer\u003e\n  if (r20 !\u003d null) goto B18 else B19\n}",
      "B18 {\n  r20 \u003d r0._findSerializer(r11, $r19)\n}",
      "B19 {\n  if (z0 \u003d\u003d false) goto B20 else B22\n}",
      "B20 {\n  $z2 \u003d r20.isEmpty(r11, $r19)\n  if ($z2 \u003d\u003d false) goto B21 else B25\n}",
      "B21 {\n  goto B6\n}",
      "B22 {\n  if (r2 \u003d\u003d null) goto B23 else B25\n}",
      "B23 {\n  $z1 \u003d r2.equals($r19)\n  if ($z1 \u003d\u003d false) goto B24 else B25\n}",
      "B24 {\n  goto B6\n}",
      "B25 {\n  r18.serialize(r8, r10, r11)\n  r20.serialize($r19, r10, r11)\n  goto B27\n}",
      "B26 {\n  $r16 :\u003d @caughtexception\n  $r17 \u003d String.valueOf(r8)\n  r0.wrapAndThrow(r11, $r16, r4, $r17)\n}",
      "B27 {\n  goto B6\n}",
      "B28 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B28",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B6",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B17",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B6",
      "B16 --\u003e B25",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B19 --\u003e B22",
      "B20 --\u003e B21",
      "B20 --\u003e B25",
      "B21 --\u003e B6",
      "B22 --\u003e B23",
      "B22 --\u003e B25",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B6",
      "B25 --\u003e B27",
      "B26 --\u003e B27",
      "B27 --\u003e B6",
      "B28 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapSerializer#serializeTypedFields(...4)",
        "body": "{\r\n    final boolean checkEmpty \u003d (MARKER_FOR_EMPTY \u003d\u003d suppressableValue);\r\n    for (Map.Entry\u003c?, ?\u003e entry : value.entrySet()) {\r\n        Object keyElem \u003d entry.getKey();\r\n        JsonSerializer\u003cObject\u003e keySerializer;\r\n        if (keyElem \u003d\u003d null) {\r\n            keySerializer \u003d provider.findNullKeySerializer(_keyType, _property);\r\n        } else {\r\n            // One twist: is entry ignorable? If so, skip\r\n            if ((_inclusionChecker !\u003d null) \u0026\u0026 _inclusionChecker.shouldIgnore(keyElem)) {\r\n                continue;\r\n            }\r\n            keySerializer \u003d _keySerializer;\r\n        }\r\n        final Object valueElem \u003d entry.getValue();\r\n        // And then value\r\n        JsonSerializer\u003cObject\u003e valueSer;\r\n        if (valueElem \u003d\u003d null) {\r\n            if (_suppressNulls) {\r\n                // all suppression include null suppression\r\n                continue;\r\n            }\r\n            valueSer \u003d provider.getDefaultNullValueSerializer();\r\n        } else {\r\n            valueSer \u003d _valueSerializer;\r\n            if (valueSer \u003d\u003d null) {\r\n                valueSer \u003d _findSerializer(provider, valueElem);\r\n            }\r\n            // also may need to skip non-empty values:\r\n            if (checkEmpty) {\r\n                if (valueSer.isEmpty(provider, valueElem)) {\r\n                    continue;\r\n                }\r\n            } else if (suppressableValue !\u003d null) {\r\n                if (suppressableValue.equals(valueElem)) {\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        keySerializer.serialize(keyElem, gen, provider);\r\n        try {\r\n            valueSer.serializeWithType(valueElem, gen, provider, _valueTypeSerializer);\r\n        } catch (Exception e) {\r\n            wrapAndThrow(provider, e, value, String.valueOf(keyElem));\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "MapSerializer#_findSerializer(...2)",
        "body": "{\r\n    final Class\u003c?\u003e cc \u003d value.getClass();\r\n    JsonSerializer\u003cObject\u003e valueSer \u003d _dynamicValueSerializers.serializerFor(cc);\r\n    if (valueSer !\u003d null) {\r\n        return valueSer;\r\n    }\r\n    if (_valueType.hasGenericTypes()) {\r\n        return _findAndAddDynamic(_dynamicValueSerializers, provider.constructSpecializedType(_valueType, cc), provider);\r\n    }\r\n    return _findAndAddDynamic(_dynamicValueSerializers, cc, provider);\r\n}"
      },
      {
        "name": "MapSerializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.MapSerializer",
    "methodName": "serializeFieldsUsing",
    "signature": "void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)",
    "visibility": "public",
    "body": "{\r\n    final JsonSerializer\u003cObject\u003e keySerializer \u003d _keySerializer;\r\n    final TypeSerializer typeSer \u003d _valueTypeSerializer;\r\n    for (Map.Entry\u003c?, ?\u003e entry : value.entrySet()) {\r\n        Object keyElem \u003d entry.getKey();\r\n        if ((_inclusionChecker !\u003d null) \u0026\u0026 _inclusionChecker.shouldIgnore(keyElem)) {\r\n            continue;\r\n        }\r\n        if (keyElem \u003d\u003d null) {\r\n            provider.findNullKeySerializer(_keyType, _property).serialize(null, gen, provider);\r\n        } else {\r\n            keySerializer.serialize(keyElem, gen, provider);\r\n        }\r\n        final Object valueElem \u003d entry.getValue();\r\n        if (valueElem \u003d\u003d null) {\r\n            provider.defaultSerializeNull(gen);\r\n        } else {\r\n            try {\r\n                if (typeSer \u003d\u003d null) {\r\n                    ser.serialize(valueElem, gen, provider);\r\n                } else {\r\n                    ser.serializeWithType(valueElem, gen, provider, typeSer);\r\n                }\r\n            } catch (Exception e) {\r\n                wrapAndThrow(provider, e, value, String.valueOf(keyElem));\r\n            }\r\n        }\r\n    }\r\n}",
    "nodes": 17,
    "edges": 22,
    "cc": 7,
    "flowSummary": [
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B16",
      "B2 : If($r9 \u003d\u003d null) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5",
      "B5 : If(r8 !\u003d null) → B6 | else → B7",
      "B8 : If($r16 !\u003d null) → B9 | else → B10",
      "B10 : If(r2 !\u003d null) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  MapSerializer\n  Map\n  JsonGenerator\n  SerializerProvider\n  JsonSerializer\n  r1 \u003d JsonSerializer _keySerializer\u003e\n  r2 \u003d TypeSerializer _valueTypeSerializer\u003e\n  $r4 \u003d r3.entrySet()\n  r5 \u003d $r4.iterator()\n}",
      "B1 {\n  $z1 \u003d r5.hasNext()\n  if ($z1 \u003d\u003d false) goto B2 else B16\n}",
      "B2 {\n  $r6 \u003d r5.next()\n  r7 \u003d Map$Entry) $r6\n  r8 \u003d r7.getKey()\n  $r9 \u003d IgnorePropertiesUtil$Checker _inclusionChecker\u003e\n  if ($r9 \u003d\u003d null) goto B3 else B5\n}",
      "B3 {\n  $r17 \u003d IgnorePropertiesUtil$Checker _inclusionChecker\u003e\n  $z0 \u003d $r17.shouldIgnore(r8)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  if (r8 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r14 \u003d JavaType _keyType\u003e\n  $r13 \u003d BeanProperty _property\u003e\n  $r15 \u003d r11.findNullKeySerializer($r14, $r13)\n  $r15.serialize(null, r10, r11)\n  goto B8\n}",
      "B7 {\n  r1.serialize(r8, r10, r11)\n}",
      "B8 {\n  $r16 \u003d r7.getValue()\n  if ($r16 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  r11.defaultSerializeNull(r10)\n  goto B15\n}",
      "B10 {\n  if (r2 !\u003d null) goto B11 else B12\n}",
      "B11 {\n  r12.serialize($r16, r10, r11)\n  goto B13\n}",
      "B12 {\n  r12.serializeWithType($r16, r10, r11, r2)\n}",
      "B13 {\n  goto B15\n}",
      "B14 {\n  $r18 :\u003d @caughtexception\n  $r19 \u003d String.valueOf(r8)\n  r0.wrapAndThrow(r11, $r18, r3, $r19)\n}",
      "B15 {\n  goto B1\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B16",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B1",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B15",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B1",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapSerializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.MapSerializer",
    "methodName": "serializeFilteredFields",
    "signature": "void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final MapProperty prop \u003d new MapProperty(_valueTypeSerializer, _property);\r\n    final boolean checkEmpty \u003d (MARKER_FOR_EMPTY \u003d\u003d suppressableValue);\r\n    for (Map.Entry\u003c?, ?\u003e entry : value.entrySet()) {\r\n        // First, serialize key; unless ignorable by key\r\n        final Object keyElem \u003d entry.getKey();\r\n        if ((_inclusionChecker !\u003d null) \u0026\u0026 _inclusionChecker.shouldIgnore(keyElem)) {\r\n            continue;\r\n        }\r\n        JsonSerializer\u003cObject\u003e keySerializer;\r\n        if (keyElem \u003d\u003d null) {\r\n            keySerializer \u003d provider.findNullKeySerializer(_keyType, _property);\r\n        } else {\r\n            keySerializer \u003d _keySerializer;\r\n        }\r\n        // or by value; nulls often suppressed\r\n        final Object valueElem \u003d entry.getValue();\r\n        JsonSerializer\u003cObject\u003e valueSer;\r\n        // And then value\r\n        if (valueElem \u003d\u003d null) {\r\n            if (_suppressNulls) {\r\n                continue;\r\n            }\r\n            valueSer \u003d provider.getDefaultNullValueSerializer();\r\n        } else {\r\n            valueSer \u003d _valueSerializer;\r\n            if (valueSer \u003d\u003d null) {\r\n                valueSer \u003d _findSerializer(provider, valueElem);\r\n            }\r\n            // also may need to skip non-empty values:\r\n            if (checkEmpty) {\r\n                if (valueSer.isEmpty(provider, valueElem)) {\r\n                    continue;\r\n                }\r\n            } else if (suppressableValue !\u003d null) {\r\n                if (suppressableValue.equals(valueElem)) {\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        // and with that, ask filter to handle it\r\n        prop.reset(keyElem, valueElem, keySerializer, valueSer);\r\n        try {\r\n            filter.serializeAsField(value, gen, provider, prop);\r\n        } catch (Exception e) {\r\n            wrapAndThrow(provider, e, value, String.valueOf(keyElem));\r\n        }\r\n    }\r\n}",
    "nodes": 27,
    "edges": 38,
    "cc": 13,
    "flowSummary": [
      "B0 : If($r5 !\u003d r4) → B1 | else → B2",
      "B4 : If($z6 \u003d\u003d false) → B5 | else → B26",
      "B5 : If($r11 \u003d\u003d null) → B6 | else → B8",
      "B6 : If($z4 \u003d\u003d false) → B7 | else → B8",
      "B8 : If(r10 !\u003d null) → B9 | else → B10",
      "B11 : If($r17 !\u003d null) → B12 | else → B15",
      "B12 : If($z3 \u003d\u003d false) → B13 | else → B14",
      "B15 : If(r23 !\u003d null) → B16 | else → B17",
      "B17 : If(z0 \u003d\u003d false) → B18 | else → B20",
      "B18 : If($z2 \u003d\u003d false) → B19 | else → B23",
      "B20 : If(r4 \u003d\u003d null) → B21 | else → B23",
      "B21 : If($z1 \u003d\u003d false) → B22 | else → B23"
    ],
    "blockList": [
      "B0 {\n  MapSerializer\n  Map\n  JsonGenerator\n  SerializerProvider\n  PropertyFilter\n  Object\n  $r0 \u003d MapProperty\n  $r3 \u003d TypeSerializer _valueTypeSerializer\u003e\n  $r2 \u003d BeanProperty _property\u003e\n  new MapProperty($r3, $r2)\n  $r5 \u003d Object MARKER_FOR_EMPTY\u003e\n  if ($r5 !\u003d r4) goto B1 else B2\n}",
      "B1 {\n  $z5 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z5 \u003d 0\n}",
      "B3 {\n  z0 \u003d $z5\n  $r7 \u003d r6.entrySet()\n  $r19 \u003d $r7.iterator()\n}",
      "B4 {\n  $z6 \u003d $r19.hasNext()\n  if ($z6 \u003d\u003d false) goto B5 else B26\n}",
      "B5 {\n  $r8 \u003d $r19.next()\n  r9 \u003d Map$Entry) $r8\n  r10 \u003d r9.getKey()\n  $r11 \u003d IgnorePropertiesUtil$Checker _inclusionChecker\u003e\n  if ($r11 \u003d\u003d null) goto B6 else B8\n}",
      "B6 {\n  $r18 \u003d IgnorePropertiesUtil$Checker _inclusionChecker\u003e\n  $z4 \u003d $r18.shouldIgnore(r10)\n  if ($z4 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  goto B4\n}",
      "B8 {\n  if (r10 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  $r16 \u003d JavaType _keyType\u003e\n  $r15 \u003d BeanProperty _property\u003e\n  r22 \u003d r14.findNullKeySerializer($r16, $r15)\n  goto B11\n}",
      "B10 {\n  r22 \u003d JsonSerializer _keySerializer\u003e\n}",
      "B11 {\n  $r17 \u003d r9.getValue()\n  if ($r17 !\u003d null) goto B12 else B15\n}",
      "B12 {\n  $z3 \u003d MapSerializer: boolean _suppressNulls\u003e\n  if ($z3 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  goto B4\n}",
      "B14 {\n  r23 \u003d r14.getDefaultNullValueSerializer()\n  goto B23\n}",
      "B15 {\n  r23 \u003d JsonSerializer _valueSerializer\u003e\n  if (r23 !\u003d null) goto B16 else B17\n}",
      "B16 {\n  r23 \u003d r1._findSerializer(r14, $r17)\n}",
      "B17 {\n  if (z0 \u003d\u003d false) goto B18 else B20\n}",
      "B18 {\n  $z2 \u003d r23.isEmpty(r14, $r17)\n  if ($z2 \u003d\u003d false) goto B19 else B23\n}",
      "B19 {\n  goto B4\n}",
      "B20 {\n  if (r4 \u003d\u003d null) goto B21 else B23\n}",
      "B21 {\n  $z1 \u003d r4.equals($r17)\n  if ($z1 \u003d\u003d false) goto B22 else B23\n}",
      "B22 {\n  goto B4\n}",
      "B23 {\n  $r0.reset(r10, $r17, r22, r23)\n  r12.serializeAsField(r6, r13, r14, $r0)\n  goto B25\n}",
      "B24 {\n  $r20 :\u003d @caughtexception\n  $r21 \u003d String.valueOf(r10)\n  r1.wrapAndThrow(r14, $r20, r6, $r21)\n}",
      "B25 {\n  goto B4\n}",
      "B26 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B26",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B4",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B4",
      "B14 --\u003e B23",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e B18",
      "B17 --\u003e B20",
      "B18 --\u003e B19",
      "B18 --\u003e B23",
      "B19 --\u003e B4",
      "B20 --\u003e B21",
      "B20 --\u003e B23",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B4",
      "B23 --\u003e B25",
      "B24 --\u003e B25",
      "B25 --\u003e B4",
      "B26 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapSerializer#_findSerializer(...2)",
        "body": "{\r\n    final Class\u003c?\u003e cc \u003d value.getClass();\r\n    JsonSerializer\u003cObject\u003e valueSer \u003d _dynamicValueSerializers.serializerFor(cc);\r\n    if (valueSer !\u003d null) {\r\n        return valueSer;\r\n    }\r\n    if (_valueType.hasGenericTypes()) {\r\n        return _findAndAddDynamic(_dynamicValueSerializers, provider.constructSpecializedType(_valueType, cc), provider);\r\n    }\r\n    return _findAndAddDynamic(_dynamicValueSerializers, cc, provider);\r\n}"
      },
      {
        "name": "MapSerializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.MapSerializer",
    "methodName": "serializeTypedFields",
    "signature": "void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final boolean checkEmpty \u003d (MARKER_FOR_EMPTY \u003d\u003d suppressableValue);\r\n    for (Map.Entry\u003c?, ?\u003e entry : value.entrySet()) {\r\n        Object keyElem \u003d entry.getKey();\r\n        JsonSerializer\u003cObject\u003e keySerializer;\r\n        if (keyElem \u003d\u003d null) {\r\n            keySerializer \u003d provider.findNullKeySerializer(_keyType, _property);\r\n        } else {\r\n            // One twist: is entry ignorable? If so, skip\r\n            if ((_inclusionChecker !\u003d null) \u0026\u0026 _inclusionChecker.shouldIgnore(keyElem)) {\r\n                continue;\r\n            }\r\n            keySerializer \u003d _keySerializer;\r\n        }\r\n        final Object valueElem \u003d entry.getValue();\r\n        // And then value\r\n        JsonSerializer\u003cObject\u003e valueSer;\r\n        if (valueElem \u003d\u003d null) {\r\n            if (_suppressNulls) {\r\n                // all suppression include null suppression\r\n                continue;\r\n            }\r\n            valueSer \u003d provider.getDefaultNullValueSerializer();\r\n        } else {\r\n            valueSer \u003d _valueSerializer;\r\n            if (valueSer \u003d\u003d null) {\r\n                valueSer \u003d _findSerializer(provider, valueElem);\r\n            }\r\n            // also may need to skip non-empty values:\r\n            if (checkEmpty) {\r\n                if (valueSer.isEmpty(provider, valueElem)) {\r\n                    continue;\r\n                }\r\n            } else if (suppressableValue !\u003d null) {\r\n                if (suppressableValue.equals(valueElem)) {\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        keySerializer.serialize(keyElem, gen, provider);\r\n        try {\r\n            valueSer.serializeWithType(valueElem, gen, provider, _valueTypeSerializer);\r\n        } catch (Exception e) {\r\n            wrapAndThrow(provider, e, value, String.valueOf(keyElem));\r\n        }\r\n    }\r\n}",
    "nodes": 27,
    "edges": 38,
    "cc": 13,
    "flowSummary": [
      "B0 : If($r1 !\u003d r0) → B1 | else → B2",
      "B4 : If($z6 \u003d\u003d false) → B5 | else → B26",
      "B5 : If(r6 !\u003d null) → B6 | else → B7",
      "B7 : If($r8 \u003d\u003d null) → B8 | else → B10",
      "B8 : If($z4 \u003d\u003d false) → B9 | else → B10",
      "B11 : If($r18 !\u003d null) → B12 | else → B15",
      "B12 : If($z3 \u003d\u003d false) → B13 | else → B14",
      "B15 : If(r19 !\u003d null) → B16 | else → B17",
      "B17 : If(z0 \u003d\u003d false) → B18 | else → B20",
      "B18 : If($z2 \u003d\u003d false) → B19 | else → B23",
      "B20 : If(r0 \u003d\u003d null) → B21 | else → B23",
      "B21 : If($z1 \u003d\u003d false) → B22 | else → B23"
    ],
    "blockList": [
      "B0 {\n  MapSerializer\n  Map\n  JsonGenerator\n  SerializerProvider\n  Object\n  $r1 \u003d Object MARKER_FOR_EMPTY\u003e\n  if ($r1 !\u003d r0) goto B1 else B2\n}",
      "B1 {\n  $z5 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z5 \u003d 0\n}",
      "B3 {\n  z0 \u003d $z5\n  $r3 \u003d r2.entrySet()\n  $r14 \u003d $r3.iterator()\n}",
      "B4 {\n  $z6 \u003d $r14.hasNext()\n  if ($z6 \u003d\u003d false) goto B5 else B26\n}",
      "B5 {\n  $r4 \u003d $r14.next()\n  r5 \u003d Map$Entry) $r4\n  r6 \u003d r5.getKey()\n  if (r6 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r13 \u003d JavaType _keyType\u003e\n  $r12 \u003d BeanProperty _property\u003e\n  r17 \u003d r10.findNullKeySerializer($r13, $r12)\n  goto B11\n}",
      "B7 {\n  $r8 \u003d IgnorePropertiesUtil$Checker _inclusionChecker\u003e\n  if ($r8 \u003d\u003d null) goto B8 else B10\n}",
      "B8 {\n  $r11 \u003d IgnorePropertiesUtil$Checker _inclusionChecker\u003e\n  $z4 \u003d $r11.shouldIgnore(r6)\n  if ($z4 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  goto B4\n}",
      "B10 {\n  r17 \u003d JsonSerializer _keySerializer\u003e\n}",
      "B11 {\n  $r18 \u003d r5.getValue()\n  if ($r18 !\u003d null) goto B12 else B15\n}",
      "B12 {\n  $z3 \u003d MapSerializer: boolean _suppressNulls\u003e\n  if ($z3 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  goto B4\n}",
      "B14 {\n  r19 \u003d r10.getDefaultNullValueSerializer()\n  goto B23\n}",
      "B15 {\n  r19 \u003d JsonSerializer _valueSerializer\u003e\n  if (r19 !\u003d null) goto B16 else B17\n}",
      "B16 {\n  r19 \u003d r7._findSerializer(r10, $r18)\n}",
      "B17 {\n  if (z0 \u003d\u003d false) goto B18 else B20\n}",
      "B18 {\n  $z2 \u003d r19.isEmpty(r10, $r18)\n  if ($z2 \u003d\u003d false) goto B19 else B23\n}",
      "B19 {\n  goto B4\n}",
      "B20 {\n  if (r0 \u003d\u003d null) goto B21 else B23\n}",
      "B21 {\n  $z1 \u003d r0.equals($r18)\n  if ($z1 \u003d\u003d false) goto B22 else B23\n}",
      "B22 {\n  goto B4\n}",
      "B23 {\n  r17.serialize(r6, r9, r10)\n  $r20 \u003d TypeSerializer _valueTypeSerializer\u003e\n  r19.serializeWithType($r18, r9, r10, $r20)\n  goto B25\n}",
      "B24 {\n  $r15 :\u003d @caughtexception\n  $r16 \u003d String.valueOf(r6)\n  r7.wrapAndThrow(r10, $r15, r2, $r16)\n}",
      "B25 {\n  goto B4\n}",
      "B26 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B26",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B4",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B4",
      "B14 --\u003e B23",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e B18",
      "B17 --\u003e B20",
      "B18 --\u003e B19",
      "B18 --\u003e B23",
      "B19 --\u003e B4",
      "B20 --\u003e B21",
      "B20 --\u003e B23",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B4",
      "B23 --\u003e B25",
      "B24 --\u003e B25",
      "B25 --\u003e B4",
      "B26 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapSerializer#_findSerializer(...2)",
        "body": "{\r\n    final Class\u003c?\u003e cc \u003d value.getClass();\r\n    JsonSerializer\u003cObject\u003e valueSer \u003d _dynamicValueSerializers.serializerFor(cc);\r\n    if (valueSer !\u003d null) {\r\n        return valueSer;\r\n    }\r\n    if (_valueType.hasGenericTypes()) {\r\n        return _findAndAddDynamic(_dynamicValueSerializers, provider.constructSpecializedType(_valueType, cc), provider);\r\n    }\r\n    return _findAndAddDynamic(_dynamicValueSerializers, cc, provider);\r\n}"
      },
      {
        "name": "MapSerializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.MapSerializer",
    "methodName": "serializeFilteredAnyProperties",
    "signature": "void serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final MapProperty prop \u003d new MapProperty(_valueTypeSerializer, _property);\r\n    final boolean checkEmpty \u003d (MARKER_FOR_EMPTY \u003d\u003d suppressableValue);\r\n    for (Map.Entry\u003c?, ?\u003e entry : value.entrySet()) {\r\n        // First, serialize key; unless ignorable by key\r\n        final Object keyElem \u003d entry.getKey();\r\n        if ((_inclusionChecker !\u003d null) \u0026\u0026 _inclusionChecker.shouldIgnore(keyElem)) {\r\n            continue;\r\n        }\r\n        JsonSerializer\u003cObject\u003e keySerializer;\r\n        if (keyElem \u003d\u003d null) {\r\n            keySerializer \u003d provider.findNullKeySerializer(_keyType, _property);\r\n        } else {\r\n            keySerializer \u003d _keySerializer;\r\n        }\r\n        // or by value; nulls often suppressed\r\n        final Object valueElem \u003d entry.getValue();\r\n        JsonSerializer\u003cObject\u003e valueSer;\r\n        // And then value\r\n        if (valueElem \u003d\u003d null) {\r\n            if (_suppressNulls) {\r\n                continue;\r\n            }\r\n            valueSer \u003d provider.getDefaultNullValueSerializer();\r\n        } else {\r\n            valueSer \u003d _valueSerializer;\r\n            if (valueSer \u003d\u003d null) {\r\n                valueSer \u003d _findSerializer(provider, valueElem);\r\n            }\r\n            // also may need to skip non-empty values:\r\n            if (checkEmpty) {\r\n                if (valueSer.isEmpty(provider, valueElem)) {\r\n                    continue;\r\n                }\r\n            } else if (suppressableValue !\u003d null) {\r\n                if (suppressableValue.equals(valueElem)) {\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        // and with that, ask filter to handle it\r\n        prop.reset(keyElem, valueElem, keySerializer, valueSer);\r\n        try {\r\n            filter.serializeAsField(bean, gen, provider, prop);\r\n        } catch (Exception e) {\r\n            wrapAndThrow(provider, e, value, String.valueOf(keyElem));\r\n        }\r\n    }\r\n}",
    "nodes": 27,
    "edges": 38,
    "cc": 13,
    "flowSummary": [
      "B0 : If($r5 !\u003d r4) → B1 | else → B2",
      "B4 : If($z6 \u003d\u003d false) → B5 | else → B26",
      "B5 : If($r11 \u003d\u003d null) → B6 | else → B8",
      "B6 : If($z4 \u003d\u003d false) → B7 | else → B8",
      "B8 : If(r10 !\u003d null) → B9 | else → B10",
      "B11 : If($r18 !\u003d null) → B12 | else → B15",
      "B12 : If($z3 \u003d\u003d false) → B13 | else → B14",
      "B15 : If(r24 !\u003d null) → B16 | else → B17",
      "B17 : If(z0 \u003d\u003d false) → B18 | else → B20",
      "B18 : If($z2 \u003d\u003d false) → B19 | else → B23",
      "B20 : If(r4 \u003d\u003d null) → B21 | else → B23",
      "B21 : If($z1 \u003d\u003d false) → B22 | else → B23"
    ],
    "blockList": [
      "B0 {\n  MapSerializer\n  SerializerProvider\n  JsonGenerator\n  Object\n  Map\n  PropertyFilter\n  Object\n  $r0 \u003d MapProperty\n  $r3 \u003d TypeSerializer _valueTypeSerializer\u003e\n  $r2 \u003d BeanProperty _property\u003e\n  new MapProperty($r3, $r2)\n  $r5 \u003d Object MARKER_FOR_EMPTY\u003e\n  if ($r5 !\u003d r4) goto B1 else B2\n}",
      "B1 {\n  $z5 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z5 \u003d 0\n}",
      "B3 {\n  z0 \u003d $z5\n  $r7 \u003d r6.entrySet()\n  $r20 \u003d $r7.iterator()\n}",
      "B4 {\n  $z6 \u003d $r20.hasNext()\n  if ($z6 \u003d\u003d false) goto B5 else B26\n}",
      "B5 {\n  $r8 \u003d $r20.next()\n  r9 \u003d Map$Entry) $r8\n  r10 \u003d r9.getKey()\n  $r11 \u003d IgnorePropertiesUtil$Checker _inclusionChecker\u003e\n  if ($r11 \u003d\u003d null) goto B6 else B8\n}",
      "B6 {\n  $r19 \u003d IgnorePropertiesUtil$Checker _inclusionChecker\u003e\n  $z4 \u003d $r19.shouldIgnore(r10)\n  if ($z4 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  goto B4\n}",
      "B8 {\n  if (r10 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  $r17 \u003d JavaType _keyType\u003e\n  $r16 \u003d BeanProperty _property\u003e\n  r23 \u003d r15.findNullKeySerializer($r17, $r16)\n  goto B11\n}",
      "B10 {\n  r23 \u003d JsonSerializer _keySerializer\u003e\n}",
      "B11 {\n  $r18 \u003d r9.getValue()\n  if ($r18 !\u003d null) goto B12 else B15\n}",
      "B12 {\n  $z3 \u003d MapSerializer: boolean _suppressNulls\u003e\n  if ($z3 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  goto B4\n}",
      "B14 {\n  r24 \u003d r15.getDefaultNullValueSerializer()\n  goto B23\n}",
      "B15 {\n  r24 \u003d JsonSerializer _valueSerializer\u003e\n  if (r24 !\u003d null) goto B16 else B17\n}",
      "B16 {\n  r24 \u003d r1._findSerializer(r15, $r18)\n}",
      "B17 {\n  if (z0 \u003d\u003d false) goto B18 else B20\n}",
      "B18 {\n  $z2 \u003d r24.isEmpty(r15, $r18)\n  if ($z2 \u003d\u003d false) goto B19 else B23\n}",
      "B19 {\n  goto B4\n}",
      "B20 {\n  if (r4 \u003d\u003d null) goto B21 else B23\n}",
      "B21 {\n  $z1 \u003d r4.equals($r18)\n  if ($z1 \u003d\u003d false) goto B22 else B23\n}",
      "B22 {\n  goto B4\n}",
      "B23 {\n  $r0.reset(r10, $r18, r23, r24)\n  r12.serializeAsField(r13, r14, r15, $r0)\n  goto B25\n}",
      "B24 {\n  $r21 :\u003d @caughtexception\n  $r22 \u003d String.valueOf(r10)\n  r1.wrapAndThrow(r15, $r21, r6, $r22)\n}",
      "B25 {\n  goto B4\n}",
      "B26 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B26",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B4",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B4",
      "B14 --\u003e B23",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e B18",
      "B17 --\u003e B20",
      "B18 --\u003e B19",
      "B18 --\u003e B23",
      "B19 --\u003e B4",
      "B20 --\u003e B21",
      "B20 --\u003e B23",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B4",
      "B23 --\u003e B25",
      "B24 --\u003e B25",
      "B25 --\u003e B4",
      "B26 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapSerializer#_findSerializer(...2)",
        "body": "{\r\n    final Class\u003c?\u003e cc \u003d value.getClass();\r\n    JsonSerializer\u003cObject\u003e valueSer \u003d _dynamicValueSerializers.serializerFor(cc);\r\n    if (valueSer !\u003d null) {\r\n        return valueSer;\r\n    }\r\n    if (_valueType.hasGenericTypes()) {\r\n        return _findAndAddDynamic(_dynamicValueSerializers, provider.constructSpecializedType(_valueType, cc), provider);\r\n    }\r\n    return _findAndAddDynamic(_dynamicValueSerializers, cc, provider);\r\n}"
      },
      {
        "name": "MapSerializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.MapSerializer",
    "methodName": "acceptJsonFormatVisitor",
    "signature": "void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    JsonMapFormatVisitor v2 \u003d visitor.expectMapFormat(typeHint);\r\n    if (v2 !\u003d null) {\r\n        v2.keyFormat(_keySerializer, _keyType);\r\n        JsonSerializer\u003c?\u003e valueSer \u003d _valueSerializer;\r\n        if (valueSer \u003d\u003d null) {\r\n            valueSer \u003d _findAndAddDynamic(_dynamicValueSerializers, _valueType, visitor.getProvider());\r\n        }\r\n        v2.valueFormat(valueSer, _valueType);\r\n    }\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B4",
      "B1 : If(r10 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MapSerializer\n  JsonFormatVisitorWrapper\n  JavaType\n  r2 \u003d r0.expectMapFormat(r1)\n  if (r2 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r5 \u003d JsonSerializer _keySerializer\u003e\n  $r4 \u003d JavaType _keyType\u003e\n  r2.keyFormat($r5, $r4)\n  r10 \u003d JsonSerializer _valueSerializer\u003e\n  if (r10 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d PropertySerializerMap _dynamicValueSerializers\u003e\n  $r8 \u003d JavaType _valueType\u003e\n  $r9 \u003d r0.getProvider()\n  r10 \u003d r3._findAndAddDynamic($r7, $r8, $r9)\n}",
      "B3 {\n  $r6 \u003d JavaType _valueType\u003e\n  r2.valueFormat(r10, $r6)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapSerializer#_findAndAddDynamic(...3)",
        "body": "{\r\n    PropertySerializerMap.SerializerAndMapResult result \u003d map.findAndAddSecondarySerializer(type, provider, _property);\r\n    // did we get a new map of serializers? If so, start using it\r\n    if (map !\u003d result.map) {\r\n        _dynamicValueSerializers \u003d result.map;\r\n    }\r\n    return result.serializer;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
    "methodName": "createContextual",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    JsonFormat.Value format \u003d findFormatOverrides(prov, property, handledType());\r\n    if (format !\u003d null) {\r\n        switch(format.getShape()) {\r\n            case STRING:\r\n                // [databind#2264]: Need special handling for `BigDecimal`\r\n                if (((Class\u003c?\u003e) handledType()) \u003d\u003d BigDecimal.class) {\r\n                    return bigDecimalAsStringSerializer();\r\n                }\r\n                return ToStringSerializer.instance;\r\n            default:\r\n        }\r\n    }\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 \u003d\u003d null) → B1 | else → B5",
      "B1 : If(switch-on $i1) → B2 | else → B5",
      "B2 : If($r7 !\u003d class \"Ljava/math/BigDecimal;\") → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  NumberSerializer\n  SerializerProvider\n  BeanProperty\n  $r3 \u003d r0.handledType()\n  r4 \u003d r0.findFormatOverrides(r1, r2, $r3)\n  if (r4 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  $r5 \u003d NumberSerializer$1: int[] $SwitchMap$com$fasterxml$jackson$annotation$JsonFormat$Shape\u003e\n  $r6 \u003d r4.getShape()\n  $i0 \u003d $r6.ordinal()\n  $i1 \u003d $r5[$i0]\n  Class handledType()\u003e();     default: goto return r0; }\n}",
      "B2 {\n  $r7 \u003d r0.handledType()\n  if ($r7 !\u003d class \"Ljava/math/BigDecimal;\") goto B3 else B4\n}",
      "B3 {\n  $r9 \u003d NumberSerializer.bigDecimalAsStringSerializer()\n  return\n}",
      "B4 {\n  $r8 \u003d ToStringSerializer instance\u003e\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NumberSerializer#findFormatOverrides(...3)",
        "body": "(source not found)"
      },
      {
        "name": "NumberSerializer#handledType(...0)",
        "body": "(source not found)"
      },
      {
        "name": "NumberSerializer#bigDecimalAsStringSerializer(...0)",
        "body": "{\r\n    return BigDecimalAsStringSerializer.BD_INSTANCE;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
    "methodName": "serialize",
    "signature": "void serialize(java.lang.Number,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    // should mostly come in as one of these two:\r\n    if (value instanceof BigDecimal) {\r\n        g.writeNumber((BigDecimal) value);\r\n    } else if (value instanceof BigInteger) {\r\n        g.writeNumber((BigInteger) value);\r\n        // These should not occur, as more specific methods should have been called; but\r\n        // just in case let\u0027s cover all bases:\r\n    } else if (value instanceof Long) {\r\n        g.writeNumber(value.longValue());\r\n    } else if (value instanceof Double) {\r\n        g.writeNumber(value.doubleValue());\r\n    } else if (value instanceof Float) {\r\n        g.writeNumber(value.floatValue());\r\n    } else if (value instanceof Integer || value instanceof Byte || value instanceof Short) {\r\n        // doesn\u0027t need to be cast to smaller numbers\r\n        g.writeNumber(value.intValue());\r\n    } else {\r\n        // We\u0027ll have to use fallback \"untyped\" number write method\r\n        g.writeNumber(value.toString());\r\n    }\r\n}",
    "nodes": 16,
    "edges": 23,
    "cc": 9,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B6",
      "B6 : If($z3 \u003d\u003d false) → B7 | else → B8",
      "B8 : If($z4 \u003d\u003d false) → B9 | else → B10",
      "B10 : If($z5 !\u003d 0) → B11 | else → B13",
      "B11 : If($z6 !\u003d 0) → B12 | else → B13",
      "B12 : If($z7 \u003d\u003d false) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  NumberSerializer\n  Number\n  JsonGenerator\n  SerializerProvider\n  $z0 \u003d BigDecimal\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d BigDecimal) r0\n  r1.writeNumber($r4)\n  goto B15\n}",
      "B2 {\n  $z1 \u003d BigInteger\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d BigInteger) r0\n  r1.writeNumber($r3)\n  goto B15\n}",
      "B4 {\n  $z2 \u003d Long\n  if ($z2 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $l0 \u003d r0.longValue()\n  r1.writeNumber($l0)\n  goto B15\n}",
      "B6 {\n  $z3 \u003d Double\n  if ($z3 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $d0 \u003d r0.doubleValue()\n  r1.writeNumber($d0)\n  goto B15\n}",
      "B8 {\n  $z4 \u003d Float\n  if ($z4 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $f0 \u003d r0.floatValue()\n  r1.writeNumber($f0)\n  goto B15\n}",
      "B10 {\n  $z5 \u003d Integer\n  if ($z5 !\u003d 0) goto B11 else B13\n}",
      "B11 {\n  $z6 \u003d Byte\n  if ($z6 !\u003d 0) goto B12 else B13\n}",
      "B12 {\n  $z7 \u003d Short\n  if ($z7 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  $i1 \u003d r0.intValue()\n  r1.writeNumber($i1)\n  goto B15\n}",
      "B14 {\n  $r2 \u003d r0.toString()\n  r1.writeNumber($r2)\n}",
      "B15 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B15",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B15",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B15",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B15",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B15",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
    "methodName": "getSchema",
    "signature": "com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)",
    "visibility": "public",
    "body": "{\r\n    return createSchemaNode(_isInt ? \"integer\" : \"number\", true);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NumberSerializer\n  SerializerProvider\n  Type\n  $z0 \u003d NumberSerializer: boolean _isInt\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d \"integer\"\n  goto B3\n}",
      "B2 {\n  $r4 \u003d \"number\"\n}",
      "B3 {\n  $r1 \u003d r0.createSchemaNode($r4, 1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NumberSerializer#createSchemaNode(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
    "methodName": "acceptJsonFormatVisitor",
    "signature": "void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    if (_isInt) {\r\n        visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\r\n    } else {\r\n        if (((Class\u003c?\u003e) handledType()) \u003d\u003d BigDecimal.class) {\r\n            visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\r\n        } else {\r\n            // otherwise bit unclear what to call... but let\u0027s try:\r\n            /*JsonNumberFormatVisitor v2 \u003d*/\r\n            visitor.expectNumberFormat(typeHint);\r\n        }\r\n    }\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($r1 !\u003d class \"Ljava/math/BigDecimal;\") → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  NumberSerializer\n  JsonFormatVisitorWrapper\n  JavaType\n  $z0 \u003d NumberSerializer: boolean _isInt\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d JsonParser$NumberType BIG_INTEGER\u003e\n  r0.visitIntFormat(r2, r3, $r5)\n  goto B5\n}",
      "B2 {\n  $r1 \u003d r0.handledType()\n  if ($r1 !\u003d class \"Ljava/math/BigDecimal;\") goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d JsonParser$NumberType BIG_DECIMAL\u003e\n  r0.visitFloatFormat(r2, r3, $r4)\n  goto B5\n}",
      "B4 {\n  r2.expectNumberFormat(r3)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NumberSerializer#visitFloatFormat(...3)",
        "body": "(source not found)"
      },
      {
        "name": "NumberSerializer#visitIntFormat(...3)",
        "body": "(source not found)"
      },
      {
        "name": "NumberSerializer#handledType(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer",
    "methodName": "withResolved",
    "signature": "com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.lang.Boolean)",
    "visibility": "public",
    "body": "{\r\n    if ((_property \u003d\u003d prop) \u0026\u0026 (ser \u003d\u003d _elementSerializer) \u0026\u0026 (_valueTypeSerializer \u003d\u003d vts) \u0026\u0026 (Objects.equals(_unwrapSingle, unwrapSingle))) {\r\n        return this;\r\n    }\r\n    return new ObjectArraySerializer(this, prop, vts, ser, unwrapSingle);\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B5",
      "B1 : If(r4 !\u003d $r6) → B2 | else → B5",
      "B2 : If($r7 !\u003d r3) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ObjectArraySerializer\n  BeanProperty\n  TypeSerializer\n  JsonSerializer\n  Boolean\n  $r2 \u003d BeanProperty _property\u003e\n  if ($r2 !\u003d r1) goto B1 else B5\n}",
      "B1 {\n  $r6 \u003d JsonSerializer _elementSerializer\u003e\n  if (r4 !\u003d $r6) goto B2 else B5\n}",
      "B2 {\n  $r7 \u003d TypeSerializer _valueTypeSerializer\u003e\n  if ($r7 !\u003d r3) goto B3 else B5\n}",
      "B3 {\n  $r8 \u003d Boolean _unwrapSingle\u003e\n  $z0 \u003d Objects.equals($r8, r5)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r9 \u003d ObjectArraySerializer\n  new ObjectArraySerializer(r0, r1, r3, r4, r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer",
    "methodName": "createContextual",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    TypeSerializer vts \u003d _valueTypeSerializer;\r\n    if (vts !\u003d null) {\r\n        vts \u003d vts.forProperty(property);\r\n    }\r\n    JsonSerializer\u003c?\u003e ser \u003d null;\r\n    Boolean unwrapSingle \u003d null;\r\n    // First: if we have a property, may have property-annotation overrides\r\n    if (property !\u003d null) {\r\n        AnnotatedMember m \u003d property.getMember();\r\n        final AnnotationIntrospector intr \u003d serializers.getAnnotationIntrospector();\r\n        if (m !\u003d null) {\r\n            Object serDef \u003d intr.findContentSerializer(m);\r\n            if (serDef !\u003d null) {\r\n                ser \u003d serializers.serializerInstance(m, serDef);\r\n            }\r\n        }\r\n    }\r\n    JsonFormat.Value format \u003d findFormatOverrides(serializers, property, handledType());\r\n    if (format !\u003d null) {\r\n        unwrapSingle \u003d format.getFeature(JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED);\r\n    }\r\n    if (ser \u003d\u003d null) {\r\n        ser \u003d _elementSerializer;\r\n    }\r\n    // [databind#124]: May have a content converter\r\n    ser \u003d findContextualConvertingSerializer(serializers, property, ser);\r\n    if (ser \u003d\u003d null) {\r\n        // 30-Sep-2012, tatu: One more thing -- if explicit content type is annotated,\r\n        //   we can consider it a static case as well.\r\n        if (_elementType !\u003d null) {\r\n            if (_staticTyping \u0026\u0026 !_elementType.isJavaLangObject()) {\r\n                ser \u003d serializers.findContentValueSerializer(_elementType, property);\r\n            }\r\n        }\r\n    }\r\n    return withResolved(property, vts, ser, unwrapSingle);\r\n}",
    "nodes": 16,
    "edges": 25,
    "cc": 11,
    "flowSummary": [
      "B0 : If(r10 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(r1 \u003d\u003d null) → B3 | else → B6",
      "B3 : If(r13 \u003d\u003d null) → B4 | else → B6",
      "B4 : If(r9 \u003d\u003d null) → B5 | else → B6",
      "B6 : If($r15 \u003d\u003d null) → B7 | else → B8",
      "B8 : If(r11 !\u003d null) → B9 | else → B10",
      "B10 : If($r6 !\u003d null) → B11 | else → B15",
      "B11 : If($r3 \u003d\u003d null) → B12 | else → B15",
      "B12 : If($z0 \u003d\u003d false) → B13 | else → B15",
      "B13 : If($z1 !\u003d 0) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  ObjectArraySerializer\n  SerializerProvider\n  BeanProperty\n  r10 \u003d TypeSerializer _valueTypeSerializer\u003e\n  if (r10 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r10 \u003d r10.forProperty(r1)\n}",
      "B2 {\n  r11 \u003d null\n  r12 \u003d null\n  if (r1 \u003d\u003d null) goto B3 else B6\n}",
      "B3 {\n  r13 \u003d r1.getMember()\n  r8 \u003d r2.getAnnotationIntrospector()\n  if (r13 \u003d\u003d null) goto B4 else B6\n}",
      "B4 {\n  r9 \u003d r8.findContentSerializer(r13)\n  if (r9 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  r11 \u003d r2.serializerInstance(r13, r9)\n}",
      "B6 {\n  $r14 \u003d r0.handledType()\n  $r15 \u003d r0.findFormatOverrides(r2, r1, $r14)\n  if ($r15 \u003d\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r7 \u003d JsonFormat$Feature WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED\u003e\n  r12 \u003d $r15.getFeature($r7)\n}",
      "B8 {\n  if (r11 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  r11 \u003d JsonSerializer _elementSerializer\u003e\n}",
      "B10 {\n  $r6 \u003d r0.findContextualConvertingSerializer(r2, r1, r11)\n  r16 \u003d $r6\n  if ($r6 !\u003d null) goto B11 else B15\n}",
      "B11 {\n  $r3 \u003d JavaType _elementType\u003e\n  if ($r3 \u003d\u003d null) goto B12 else B15\n}",
      "B12 {\n  $z0 \u003d ObjectArraySerializer: boolean _staticTyping\u003e\n  if ($z0 \u003d\u003d false) goto B13 else B15\n}",
      "B13 {\n  $r4 \u003d JavaType _elementType\u003e\n  $z1 \u003d $r4.isJavaLangObject()\n  if ($z1 !\u003d 0) goto B14 else B15\n}",
      "B14 {\n  $r5 \u003d JavaType _elementType\u003e\n  r16 \u003d r2.findContentValueSerializer($r5, r1)\n}",
      "B15 {\n  $r17 \u003d r0.withResolved(r1, r10, r16, r12)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B15",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B15",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectArraySerializer#findFormatOverrides(...3)",
        "body": "(source not found)"
      },
      {
        "name": "ObjectArraySerializer#findContextualConvertingSerializer(...3)",
        "body": "(source not found)"
      },
      {
        "name": "ObjectArraySerializer#handledType(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ObjectArraySerializer#withResolved(...4)",
        "body": "{\r\n    if ((_property \u003d\u003d prop) \u0026\u0026 (ser \u003d\u003d _elementSerializer) \u0026\u0026 (_valueTypeSerializer \u003d\u003d vts) \u0026\u0026 (Objects.equals(_unwrapSingle, unwrapSingle))) {\r\n        return this;\r\n    }\r\n    return new ObjectArraySerializer(this, prop, vts, ser, unwrapSingle);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    return value.length \u003d\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectArraySerializer\n  SerializerProvider\n  Object[]\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer",
    "methodName": "hasSingleElement",
    "signature": "boolean hasSingleElement(java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    return (value.length \u003d\u003d 1);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectArraySerializer\n  Object[]\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer",
    "methodName": "serialize",
    "signature": "void serialize(java.lang.Object[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d value.length;\r\n    if (len \u003d\u003d 1) {\r\n        if (((_unwrapSingle \u003d\u003d null) \u0026\u0026 provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)) || (_unwrapSingle \u003d\u003d Boolean.TRUE)) {\r\n            serializeContents(value, gen, provider);\r\n            return;\r\n        }\r\n    }\r\n    gen.writeStartArray(value, len);\r\n    serializeContents(value, gen, provider);\r\n    gen.writeEndArray();\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i0 !\u003d 1) → B1 | else → B5",
      "B1 : If($r4 !\u003d null) → B2 | else → B3",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B3 : If($r6 !\u003d $r5) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ObjectArraySerializer\n  Object[]\n  JsonGenerator\n  SerializerProvider\n  i0 \u003d lengthof r0\n  if (i0 !\u003d 1) goto B1 else B5\n}",
      "B1 {\n  $r4 \u003d Boolean _unwrapSingle\u003e\n  if ($r4 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d SerializationFeature WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED\u003e\n  $z0 \u003d r3.isEnabled($r7)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d Boolean _unwrapSingle\u003e\n  $r5 \u003d Boolean TRUE\u003e\n  if ($r6 !\u003d $r5) goto B4 else B5\n}",
      "B4 {\n  r2.serializeContents(r0, r1, r3)\n  return\n}",
      "B5 {\n  r1.writeStartArray(r0, i0)\n  r2.serializeContents(r0, r1, r3)\n  r1.writeEndArray()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectArraySerializer#serializeContents(...3)",
        "body": "{\r\n    final int len \u003d value.length;\r\n    if (len \u003d\u003d 0) {\r\n        return;\r\n    }\r\n    if (_elementSerializer !\u003d null) {\r\n        serializeContentsUsing(value, gen, provider, _elementSerializer);\r\n        return;\r\n    }\r\n    if (_valueTypeSerializer !\u003d null) {\r\n        serializeTypedContents(value, gen, provider);\r\n        return;\r\n    }\r\n    int i \u003d 0;\r\n    Object elem \u003d null;\r\n    try {\r\n        PropertySerializerMap serializers \u003d _dynamicSerializers;\r\n        for (; i \u003c len; ++i) {\r\n            elem \u003d value[i];\r\n            if (elem \u003d\u003d null) {\r\n                provider.defaultSerializeNull(gen);\r\n                continue;\r\n            }\r\n            Class\u003c?\u003e cc \u003d elem.getClass();\r\n            JsonSerializer\u003cObject\u003e serializer \u003d serializers.serializerFor(cc);\r\n            if (serializer \u003d\u003d null) {\r\n                if (_elementType.hasGenericTypes()) {\r\n                    serializer \u003d _findAndAddDynamic(serializers, provider.constructSpecializedType(_elementType, cc), provider);\r\n                } else {\r\n                    serializer \u003d _findAndAddDynamic(serializers, cc, provider);\r\n                }\r\n            }\r\n            serializer.serialize(elem, gen, provider);\r\n        }\r\n    } catch (Exception e) {\r\n        wrapAndThrow(provider, e, elem, i);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer",
    "methodName": "serializeContents",
    "signature": "void serializeContents(java.lang.Object[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d value.length;\r\n    if (len \u003d\u003d 0) {\r\n        return;\r\n    }\r\n    if (_elementSerializer !\u003d null) {\r\n        serializeContentsUsing(value, gen, provider, _elementSerializer);\r\n        return;\r\n    }\r\n    if (_valueTypeSerializer !\u003d null) {\r\n        serializeTypedContents(value, gen, provider);\r\n        return;\r\n    }\r\n    int i \u003d 0;\r\n    Object elem \u003d null;\r\n    try {\r\n        PropertySerializerMap serializers \u003d _dynamicSerializers;\r\n        for (; i \u003c len; ++i) {\r\n            elem \u003d value[i];\r\n            if (elem \u003d\u003d null) {\r\n                provider.defaultSerializeNull(gen);\r\n                continue;\r\n            }\r\n            Class\u003c?\u003e cc \u003d elem.getClass();\r\n            JsonSerializer\u003cObject\u003e serializer \u003d serializers.serializerFor(cc);\r\n            if (serializer \u003d\u003d null) {\r\n                if (_elementType.hasGenericTypes()) {\r\n                    serializer \u003d _findAndAddDynamic(serializers, provider.constructSpecializedType(_elementType, cc), provider);\r\n                } else {\r\n                    serializer \u003d _findAndAddDynamic(serializers, cc, provider);\r\n                }\r\n            }\r\n            serializer.serialize(elem, gen, provider);\r\n        }\r\n    } catch (Exception e) {\r\n        wrapAndThrow(provider, e, elem, i);\r\n    }\r\n}",
    "nodes": 19,
    "edges": 22,
    "cc": 5,
    "flowSummary": [
      "B0 : If(i0 !\u003d 0) → B1 | else → B2",
      "B2 : If($r2 \u003d\u003d null) → B3 | else → B4",
      "B4 : If($r3 \u003d\u003d null) → B5 | else → B6",
      "B7 : If(i1 \u003e\u003d i0) → B8 | else → B16",
      "B8 : If(r12 !\u003d null) → B9 | else → B10",
      "B10 : If(r14 !\u003d null) → B11 | else → B14",
      "B11 : If($z0 \u003d\u003d false) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  ObjectArraySerializer\n  Object[]\n  JsonGenerator\n  SerializerProvider\n  i0 \u003d lengthof r0\n  if (i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d JsonSerializer _elementSerializer\u003e\n  if ($r2 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r10 \u003d JsonSerializer _elementSerializer\u003e\n  r1.serializeContentsUsing(r0, r5, r6, $r10)\n  return\n}",
      "B4 {\n  $r3 \u003d TypeSerializer _valueTypeSerializer\u003e\n  if ($r3 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  r1.serializeTypedContents(r0, r5, r6)\n  return\n}",
      "B6 {\n  i1 \u003d 0\n  r12 \u003d null\n  r13 \u003d PropertySerializerMap _dynamicSerializers\u003e\n}",
      "B7 {\n  if (i1 \u003e\u003d i0) goto B8 else B16\n}",
      "B8 {\n  r12 \u003d r0[i1]\n  if (r12 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  r6.defaultSerializeNull(r5)\n  goto B15\n}",
      "B10 {\n  r4 \u003d r12.getClass()\n  r14 \u003d r13.serializerFor(r4)\n  if (r14 !\u003d null) goto B11 else B14\n}",
      "B11 {\n  $r7 \u003d JavaType _elementType\u003e\n  $z0 \u003d $r7.hasGenericTypes()\n  if ($z0 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $r8 \u003d JavaType _elementType\u003e\n  $r9 \u003d r6.constructSpecializedType($r8, r4)\n  r14 \u003d r1._findAndAddDynamic(r13, $r9, r6)\n  goto B14\n}",
      "B13 {\n  r14 \u003d r1._findAndAddDynamic(r13, r4, r6)\n}",
      "B14 {\n  r14.serialize(r12, r5, r6)\n}",
      "B15 {\n  i1 \u003d i1 + 1\n  goto B7\n}",
      "B16 {\n  goto B18\n}",
      "B17 {\n  $r11 :\u003d @caughtexception\n  r1.wrapAndThrow(r6, $r11, r12, i1)\n}",
      "B18 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B16",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B15",
      "B10 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B15 --\u003e B7",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectArraySerializer#serializeContentsUsing(...4)",
        "body": "{\r\n    final int len \u003d value.length;\r\n    final TypeSerializer typeSer \u003d _valueTypeSerializer;\r\n    int i \u003d 0;\r\n    Object elem \u003d null;\r\n    try {\r\n        for (; i \u003c len; ++i) {\r\n            elem \u003d value[i];\r\n            if (elem \u003d\u003d null) {\r\n                provider.defaultSerializeNull(jgen);\r\n                continue;\r\n            }\r\n            if (typeSer \u003d\u003d null) {\r\n                ser.serialize(elem, jgen, provider);\r\n            } else {\r\n                ser.serializeWithType(elem, jgen, provider, typeSer);\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        wrapAndThrow(provider, e, elem, i);\r\n    }\r\n}"
      },
      {
        "name": "ObjectArraySerializer#serializeTypedContents(...3)",
        "body": "{\r\n    final int len \u003d value.length;\r\n    final TypeSerializer typeSer \u003d _valueTypeSerializer;\r\n    int i \u003d 0;\r\n    Object elem \u003d null;\r\n    try {\r\n        PropertySerializerMap serializers \u003d _dynamicSerializers;\r\n        for (; i \u003c len; ++i) {\r\n            elem \u003d value[i];\r\n            if (elem \u003d\u003d null) {\r\n                provider.defaultSerializeNull(jgen);\r\n                continue;\r\n            }\r\n            Class\u003c?\u003e cc \u003d elem.getClass();\r\n            JsonSerializer\u003cObject\u003e serializer \u003d serializers.serializerFor(cc);\r\n            if (serializer \u003d\u003d null) {\r\n                serializer \u003d _findAndAddDynamic(serializers, cc, provider);\r\n            }\r\n            serializer.serializeWithType(elem, jgen, provider, typeSer);\r\n        }\r\n    } catch (Exception e) {\r\n        wrapAndThrow(provider, e, elem, i);\r\n    }\r\n}"
      },
      {
        "name": "ObjectArraySerializer#_findAndAddDynamic(...3)",
        "body": "{\r\n    PropertySerializerMap.SerializerAndMapResult result \u003d map.findAndAddSecondarySerializer(type, provider, _property);\r\n    // did we get a new map of serializers? If so, start using it\r\n    if (map !\u003d result.map) {\r\n        _dynamicSerializers \u003d result.map;\r\n    }\r\n    return result.serializer;\r\n}"
      },
      {
        "name": "ObjectArraySerializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer",
    "methodName": "serializeContentsUsing",
    "signature": "void serializeContentsUsing(java.lang.Object[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d value.length;\r\n    final TypeSerializer typeSer \u003d _valueTypeSerializer;\r\n    int i \u003d 0;\r\n    Object elem \u003d null;\r\n    try {\r\n        for (; i \u003c len; ++i) {\r\n            elem \u003d value[i];\r\n            if (elem \u003d\u003d null) {\r\n                provider.defaultSerializeNull(jgen);\r\n                continue;\r\n            }\r\n            if (typeSer \u003d\u003d null) {\r\n                ser.serialize(elem, jgen, provider);\r\n            } else {\r\n                ser.serializeWithType(elem, jgen, provider, typeSer);\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        wrapAndThrow(provider, e, elem, i);\r\n    }\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B8",
      "B2 : If(r7 !\u003d null) → B3 | else → B4",
      "B4 : If(r2 !\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  ObjectArraySerializer\n  Object[]\n  JsonGenerator\n  SerializerProvider\n  JsonSerializer\n  i0 \u003d lengthof r0\n  r2 \u003d TypeSerializer _valueTypeSerializer\u003e\n  i1 \u003d 0\n  r7 \u003d null\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B8\n}",
      "B2 {\n  r7 \u003d r0[i1]\n  if (r7 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  r5.defaultSerializeNull(r4)\n  goto B7\n}",
      "B4 {\n  if (r2 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  r3.serialize(r7, r4, r5)\n  goto B7\n}",
      "B6 {\n  r3.serializeWithType(r7, r4, r5, r2)\n}",
      "B7 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B8 {\n  goto B10\n}",
      "B9 {\n  $r6 :\u003d @caughtexception\n  r1.wrapAndThrow(r5, $r6, r7, i1)\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B1",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectArraySerializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer",
    "methodName": "serializeTypedContents",
    "signature": "void serializeTypedContents(java.lang.Object[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d value.length;\r\n    final TypeSerializer typeSer \u003d _valueTypeSerializer;\r\n    int i \u003d 0;\r\n    Object elem \u003d null;\r\n    try {\r\n        PropertySerializerMap serializers \u003d _dynamicSerializers;\r\n        for (; i \u003c len; ++i) {\r\n            elem \u003d value[i];\r\n            if (elem \u003d\u003d null) {\r\n                provider.defaultSerializeNull(jgen);\r\n                continue;\r\n            }\r\n            Class\u003c?\u003e cc \u003d elem.getClass();\r\n            JsonSerializer\u003cObject\u003e serializer \u003d serializers.serializerFor(cc);\r\n            if (serializer \u003d\u003d null) {\r\n                serializer \u003d _findAndAddDynamic(serializers, cc, provider);\r\n            }\r\n            serializer.serializeWithType(elem, jgen, provider, typeSer);\r\n        }\r\n    } catch (Exception e) {\r\n        wrapAndThrow(provider, e, elem, i);\r\n    }\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B8",
      "B2 : If(r7 !\u003d null) → B3 | else → B4",
      "B4 : If(r9 !\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  ObjectArraySerializer\n  Object[]\n  JsonGenerator\n  SerializerProvider\n  i0 \u003d lengthof r0\n  r2 \u003d TypeSerializer _valueTypeSerializer\u003e\n  i1 \u003d 0\n  r7 \u003d null\n  r8 \u003d PropertySerializerMap _dynamicSerializers\u003e\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B8\n}",
      "B2 {\n  r7 \u003d r0[i1]\n  if (r7 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  r5.defaultSerializeNull(r4)\n  goto B7\n}",
      "B4 {\n  r3 \u003d r7.getClass()\n  r9 \u003d r8.serializerFor(r3)\n  if (r9 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  r9 \u003d r1._findAndAddDynamic(r8, r3, r5)\n}",
      "B6 {\n  r9.serializeWithType(r7, r4, r5, r2)\n}",
      "B7 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B8 {\n  goto B10\n}",
      "B9 {\n  $r6 :\u003d @caughtexception\n  r1.wrapAndThrow(r5, $r6, r7, i1)\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B7 --\u003e B1",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectArraySerializer#_findAndAddDynamic(...3)",
        "body": "{\r\n    PropertySerializerMap.SerializerAndMapResult result \u003d map.findAndAddSecondarySerializer(type, provider, _property);\r\n    // did we get a new map of serializers? If so, start using it\r\n    if (map !\u003d result.map) {\r\n        _dynamicSerializers \u003d result.map;\r\n    }\r\n    return result.serializer;\r\n}"
      },
      {
        "name": "ObjectArraySerializer#wrapAndThrow(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer",
    "methodName": "acceptJsonFormatVisitor",
    "signature": "void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    JsonArrayFormatVisitor arrayVisitor \u003d visitor.expectArrayFormat(typeHint);\r\n    if (arrayVisitor !\u003d null) {\r\n        JavaType contentType \u003d _elementType;\r\n        // [databind#1793]: Was getting `null` for `typeHint`. But why would we even use it...\r\n        /*\r\n            TypeFactory tf \u003d visitor.getProvider().getTypeFactory();\r\n            contentType \u003d tf.moreSpecificType(_elementType, typeHint.getContentType());\r\n            if (contentType \u003d\u003d null) {\r\n                visitor.getProvider().reportBadDefinition(_elementType,\r\n                        \"Could not resolve type: \"+_elementType);\r\n            }\r\n*/\r\n        JsonSerializer\u003c?\u003e valueSer \u003d _elementSerializer;\r\n        if (valueSer \u003d\u003d null) {\r\n            valueSer \u003d visitor.getProvider().findContentValueSerializer(contentType, _property);\r\n        }\r\n        arrayVisitor.itemsFormat(valueSer, contentType);\r\n    }\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B4",
      "B1 : If(r7 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ObjectArraySerializer\n  JsonFormatVisitorWrapper\n  JavaType\n  r2 \u003d r0.expectArrayFormat(r1)\n  if (r2 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  r4 \u003d JavaType _elementType\u003e\n  r7 \u003d JsonSerializer _elementSerializer\u003e\n  if (r7 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d r0.getProvider()\n  $r5 \u003d BeanProperty _property\u003e\n  r7 \u003d $r6.findContentValueSerializer(r4, $r5)\n}",
      "B3 {\n  r2.itemsFormat(r7, r4)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.SerializableSerializer",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializable)",
    "visibility": "public",
    "body": "{\r\n    if (value instanceof JsonSerializable.Base) {\r\n        return ((JsonSerializable.Base) value).isEmpty(serializers);\r\n    }\r\n    return false;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializableSerializer\n  SerializerProvider\n  JsonSerializable\n  $z0 \u003d JsonSerializable$Base\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d JsonSerializable$Base) r0\n  $z1 \u003d $r2.isEmpty(r1)\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.SqlDateSerializer",
    "methodName": "serialize",
    "signature": "void serialize(java.sql.Date,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (_asTimestamp(provider)) {\r\n        g.writeNumber(_timestamp(value));\r\n        return;\r\n    }\r\n    // Alas, can\u0027t just call `_serializeAsString()`....\r\n    if (_customFormat \u003d\u003d null) {\r\n        // 11-Oct-2016, tatu: For backwards-compatibility purposes, we shall just use\r\n        //    the awful standard JDK serialization via `sqlDate.toString()`... this\r\n        //    is problematic in multiple ways (including using arbitrary timezone...)\r\n        g.writeString(value.toString());\r\n        return;\r\n    }\r\n    _serializeAsString(value, g, provider);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($r2 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  SqlDateSerializer\n  Date\n  JsonGenerator\n  SerializerProvider\n  $z0 \u003d r0._asTimestamp(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $l0 \u003d r0._timestamp(r3)\n  r4.writeNumber($l0)\n  return\n}",
      "B2 {\n  $r2 \u003d DateFormat _customFormat\u003e\n  if ($r2 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d r3.toString()\n  r4.writeString($r5)\n  return\n}",
      "B4 {\n  r0._serializeAsString(r3, r4, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SqlDateSerializer#_timestamp(...1)",
        "body": "{\r\n    return (value \u003d\u003d null) ? 0L : value.getTime();\r\n}"
      },
      {
        "name": "SqlDateSerializer#_asTimestamp(...1)",
        "body": "(source not found)"
      },
      {
        "name": "SqlDateSerializer#_serializeAsString(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer",
    "methodName": "resolve",
    "signature": "void resolve(com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if ((_delegateSerializer !\u003d null) \u0026\u0026 (_delegateSerializer instanceof ResolvableSerializer)) {\r\n        ((ResolvableSerializer) _delegateSerializer).resolve(provider);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  StdDelegatingSerializer\n  SerializerProvider\n  $r1 \u003d JsonSerializer _delegateSerializer\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d JsonSerializer _delegateSerializer\u003e\n  $z0 \u003d ResolvableSerializer\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d JsonSerializer _delegateSerializer\u003e\n  $r5 \u003d ResolvableSerializer) $r3\n  $r5.resolve(r4)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer",
    "methodName": "createContextual",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    JsonSerializer\u003c?\u003e delSer \u003d _delegateSerializer;\r\n    JavaType delegateType \u003d _delegateType;\r\n    if (delSer \u003d\u003d null) {\r\n        // Otherwise, need to locate serializer to delegate to. For that we need type information...\r\n        if (delegateType \u003d\u003d null) {\r\n            delegateType \u003d _converter.getOutputType(provider.getTypeFactory());\r\n        }\r\n        // 02-Apr-2015, tatu: For \"dynamic case\", where type is only specified as\r\n        //    java.lang.Object (or missing generic), [databind#731]\r\n        if (!delegateType.isJavaLangObject()) {\r\n            delSer \u003d provider.findValueSerializer(delegateType);\r\n        }\r\n    }\r\n    if (delSer instanceof ContextualSerializer) {\r\n        delSer \u003d provider.handleSecondaryContextualization(delSer, property);\r\n    }\r\n    if (delSer \u003d\u003d _delegateSerializer \u0026\u0026 delegateType \u003d\u003d _delegateType) {\r\n        return this;\r\n    }\r\n    return withDelegate(_converter, delegateType, delSer);\r\n}",
    "nodes": 11,
    "edges": 15,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r9 !\u003d null) → B1 | else → B5",
      "B1 : If(r10 !\u003d null) → B2 | else → B3",
      "B3 : If($z0 !\u003d 0) → B4 | else → B5",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B7",
      "B7 : If(r9 !\u003d $r1) → B8 | else → B10",
      "B8 : If(r10 !\u003d $r4) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  StdDelegatingSerializer\n  SerializerProvider\n  BeanProperty\n  r9 \u003d JsonSerializer _delegateSerializer\u003e\n  r10 \u003d JavaType _delegateType\u003e\n  if (r9 !\u003d null) goto B1 else B5\n}",
      "B1 {\n  if (r10 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d Converter _converter\u003e\n  $r8 \u003d r5.getTypeFactory()\n  r10 \u003d $r7.getOutputType($r8)\n}",
      "B3 {\n  $z0 \u003d r10.isJavaLangObject()\n  if ($z0 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  r9 \u003d r5.findValueSerializer(r10)\n}",
      "B5 {\n  $z1 \u003d ContextualSerializer\n  if ($z1 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  r9 \u003d r5.handleSecondaryContextualization(r9, r6)\n}",
      "B7 {\n  $r1 \u003d JsonSerializer _delegateSerializer\u003e\n  if (r9 !\u003d $r1) goto B8 else B10\n}",
      "B8 {\n  $r4 \u003d JavaType _delegateType\u003e\n  if (r10 !\u003d $r4) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $r2 \u003d Converter _converter\u003e\n  $r3 \u003d r0.withDelegate($r2, r10, r9)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdDelegatingSerializer#withDelegate(...3)",
        "body": "{\r\n    ClassUtil.verifyMustOverride(StdDelegatingSerializer.class, this, \"withDelegate\");\r\n    return new StdDelegatingSerializer(converter, delegateType, delegateSerializer);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer",
    "methodName": "serialize",
    "signature": "void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    Object delegateValue \u003d convertValue(ctxt, value);\r\n    // should we accept nulls?\r\n    if (delegateValue \u003d\u003d null) {\r\n        ctxt.defaultSerializeNull(gen);\r\n        return;\r\n    }\r\n    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\r\n    JsonSerializer\u003cObject\u003e ser \u003d _delegateSerializer;\r\n    if (ser \u003d\u003d null) {\r\n        ser \u003d _findSerializer(delegateValue, ctxt);\r\n    }\r\n    ser.serialize(delegateValue, gen, ctxt);\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B2 : If(r5 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StdDelegatingSerializer\n  Object\n  JsonGenerator\n  SerializerProvider\n  r3 \u003d r0.convertValue(r1, r2)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r1.defaultSerializeNull(r4)\n  return\n}",
      "B2 {\n  r5 \u003d JsonSerializer _delegateSerializer\u003e\n  if (r5 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  r5 \u003d r0._findSerializer(r3, r1)\n}",
      "B4 {\n  r5.serialize(r3, r4, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdDelegatingSerializer#convertValue(...2)",
        "body": "{\r\n    return _converter.convert(ctxt, value);\r\n}"
      },
      {
        "name": "StdDelegatingSerializer#_findSerializer(...2)",
        "body": "{\r\n    // NOTE: will NOT call contextualization\r\n    JsonSerializer\u003cObject\u003e ser \u003d serializers.findValueSerializer(value.getClass());\r\n    // ... so we need to do it separately\r\n    if (ser instanceof ContextualSerializer) {\r\n        // 25-Jan-2025, tatu: Should we hold on to `BeanProperty` from `createContextual`?\r\n        ser \u003d (JsonSerializer\u003cObject\u003e) ((ContextualSerializer) ser).createContextual(serializers, null);\r\n    }\r\n    return ser;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer",
    "methodName": "serializeWithType",
    "signature": "void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "visibility": "public",
    "body": "{\r\n    // 03-Oct-2012, tatu: This is actually unlikely to work ok... but for now,\r\n    //    let\u0027s give it a chance?\r\n    Object delegateValue \u003d convertValue(ctxt, value);\r\n    // consider null (to be consistent with serialize method above)\r\n    if (delegateValue \u003d\u003d null) {\r\n        ctxt.defaultSerializeNull(gen);\r\n        return;\r\n    }\r\n    JsonSerializer\u003cObject\u003e ser \u003d _delegateSerializer;\r\n    if (ser \u003d\u003d null) {\r\n        ser \u003d _findSerializer(delegateValue, ctxt);\r\n    }\r\n    ser.serializeWithType(delegateValue, gen, ctxt, typeSer);\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B2 : If(r6 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StdDelegatingSerializer\n  Object\n  JsonGenerator\n  SerializerProvider\n  TypeSerializer\n  r3 \u003d r0.convertValue(r1, r2)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r1.defaultSerializeNull(r4)\n  return\n}",
      "B2 {\n  r6 \u003d JsonSerializer _delegateSerializer\u003e\n  if (r6 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  r6 \u003d r0._findSerializer(r3, r1)\n}",
      "B4 {\n  r6.serializeWithType(r3, r4, r1, r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdDelegatingSerializer#convertValue(...2)",
        "body": "{\r\n    return _converter.convert(ctxt, value);\r\n}"
      },
      {
        "name": "StdDelegatingSerializer#_findSerializer(...2)",
        "body": "{\r\n    // NOTE: will NOT call contextualization\r\n    JsonSerializer\u003cObject\u003e ser \u003d serializers.findValueSerializer(value.getClass());\r\n    // ... so we need to do it separately\r\n    if (ser instanceof ContextualSerializer) {\r\n        // 25-Jan-2025, tatu: Should we hold on to `BeanProperty` from `createContextual`?\r\n        ser \u003d (JsonSerializer\u003cObject\u003e) ((ContextualSerializer) ser).createContextual(serializers, null);\r\n    }\r\n    return ser;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    Object delegateValue \u003d convertValue(ctxt, value);\r\n    if (delegateValue \u003d\u003d null) {\r\n        return true;\r\n    }\r\n    if (_delegateSerializer \u003d\u003d null) {\r\n        // best we can do for now, too costly to look up\r\n        return (value \u003d\u003d null);\r\n    }\r\n    return _delegateSerializer.isEmpty(ctxt, delegateValue);\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B2 : If($r4 !\u003d null) → B3 | else → B7",
      "B3 : If(r2 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  StdDelegatingSerializer\n  SerializerProvider\n  Object\n  r3 \u003d r0.convertValue(r1, r2)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d JsonSerializer _delegateSerializer\u003e\n  if ($r4 !\u003d null) goto B3 else B7\n}",
      "B3 {\n  if (r2 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $z1 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z1 \u003d 0\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $r5 \u003d JsonSerializer _delegateSerializer\u003e\n  $z0 \u003d $r5.isEmpty(r1, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdDelegatingSerializer#convertValue(...2)",
        "body": "{\r\n    return _converter.convert(ctxt, value);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer",
    "methodName": "getSchema",
    "signature": "com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)",
    "visibility": "public",
    "body": "{\r\n    if (_delegateSerializer instanceof com.fasterxml.jackson.databind.jsonschema.SchemaAware) {\r\n        return ((com.fasterxml.jackson.databind.jsonschema.SchemaAware) _delegateSerializer).getSchema(provider, typeHint);\r\n    }\r\n    return super.getSchema(provider, typeHint);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdDelegatingSerializer\n  SerializerProvider\n  Type\n  $r1 \u003d JsonSerializer _delegateSerializer\u003e\n  $z0 \u003d SchemaAware\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d JsonSerializer _delegateSerializer\u003e\n  $r6 \u003d SchemaAware) $r5\n  $r7 \u003d $r6.getSchema(r2, r3)\n  return\n}",
      "B2 {\n  $r4 \u003d r0.getSchema(r2, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer",
    "methodName": "getSchema",
    "signature": "com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type,boolean)",
    "visibility": "public",
    "body": "{\r\n    if (_delegateSerializer instanceof com.fasterxml.jackson.databind.jsonschema.SchemaAware) {\r\n        return ((com.fasterxml.jackson.databind.jsonschema.SchemaAware) _delegateSerializer).getSchema(provider, typeHint, isOptional);\r\n    }\r\n    return super.getSchema(provider, typeHint);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdDelegatingSerializer\n  SerializerProvider\n  Type\n  z1 :\u003d @parameter2: boolean\n  $r1 \u003d JsonSerializer _delegateSerializer\u003e\n  $z0 \u003d SchemaAware\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d JsonSerializer _delegateSerializer\u003e\n  $r6 \u003d SchemaAware) $r5\n  $r7 \u003d $r6.getSchema(r2, r3, z1)\n  return\n}",
      "B2 {\n  $r4 \u003d r0.getSchema(r2, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer",
    "methodName": "acceptJsonFormatVisitor",
    "signature": "void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    /* 03-Sep-2012, tatu: Not sure if this can be made to really work\r\n         *    properly... but for now, try this:\r\n         */\r\n    // 02-Apr-2015, tatu: For dynamic case, very little we can do\r\n    if (_delegateSerializer !\u003d null) {\r\n        _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdDelegatingSerializer\n  JsonFormatVisitorWrapper\n  JavaType\n  $r1 \u003d JsonSerializer _delegateSerializer\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d JsonSerializer _delegateSerializer\u003e\n  $r4.acceptJsonFormatVisitor(r2, r3)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.UUID)",
    "visibility": "public",
    "body": "{\r\n    // Null UUID is empty, so...\r\n    return value.getLeastSignificantBits() \u003d\u003d 0L \u0026\u0026 value.getMostSignificantBits() \u003d\u003d 0L;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($b1 !\u003d 0) → B1 | else → B3",
      "B1 : If($b3 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  UUIDSerializer\n  SerializerProvider\n  UUID\n  $l0 \u003d r0.getLeastSignificantBits()\n  $b1 \u003d $l0 cmp 0L\n  if ($b1 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $l2 \u003d r0.getMostSignificantBits()\n  $b3 \u003d $l2 cmp 0L\n  if ($b3 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer",
    "methodName": "createContextual",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)",
    "visibility": "public",
    "body": "{\r\n    JsonFormat.Value format \u003d findFormatOverrides(serializers, property, handledType());\r\n    Boolean asBinary \u003d null;\r\n    if (format !\u003d null) {\r\n        JsonFormat.Shape shape \u003d format.getShape();\r\n        if (shape \u003d\u003d JsonFormat.Shape.BINARY) {\r\n            asBinary \u003d true;\r\n        } else if (shape \u003d\u003d JsonFormat.Shape.STRING) {\r\n            asBinary \u003d false;\r\n        }\r\n        // otherwise leave as `null` meaning about same as NATURAL\r\n    }\r\n    if (!Objects.equals(asBinary, _asBinary)) {\r\n        return new UUIDSerializer(asBinary);\r\n    }\r\n    return this;\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r4 \u003d\u003d null) → B1 | else → B5",
      "B1 : If(r6 !\u003d $r7) → B2 | else → B3",
      "B3 : If(r6 !\u003d $r8) → B4 | else → B5",
      "B5 : If($z0 !\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  UUIDSerializer\n  SerializerProvider\n  BeanProperty\n  $r3 \u003d r0.handledType()\n  r4 \u003d r0.findFormatOverrides(r1, r2, $r3)\n  r9 \u003d null\n  if (r4 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  r6 \u003d r4.getShape()\n  $r7 \u003d JsonFormat$Shape BINARY\u003e\n  if (r6 !\u003d $r7) goto B2 else B3\n}",
      "B2 {\n  r9 \u003d Boolean.valueOf(1)\n  goto B5\n}",
      "B3 {\n  $r8 \u003d JsonFormat$Shape STRING\u003e\n  if (r6 !\u003d $r8) goto B4 else B5\n}",
      "B4 {\n  r9 \u003d Boolean.valueOf(0)\n}",
      "B5 {\n  $r10 \u003d Boolean _asBinary\u003e\n  $z0 \u003d Objects.equals(r9, $r10)\n  if ($z0 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $r5 \u003d UUIDSerializer\n  new UUIDSerializer(r9)\n  return\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "UUIDSerializer#findFormatOverrides(...3)",
        "body": "(source not found)"
      },
      {
        "name": "UUIDSerializer#handledType(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer",
    "methodName": "serialize",
    "signature": "void serialize(java.util.UUID,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    // First: perhaps we could serialize it as raw binary data?\r\n    if (_writeAsBinary(gen)) {\r\n        gen.writeBinary(_asBytes(value));\r\n        return;\r\n    }\r\n    // UUID.toString() works ok functionally, but we can make it go much faster\r\n    // (by 4x with micro-benchmark)\r\n    final char[] ch \u003d new char[36];\r\n    final long msb \u003d value.getMostSignificantBits();\r\n    _appendInt((int) (msb \u003e\u003e 32), ch, 0);\r\n    ch[8] \u003d \u0027-\u0027;\r\n    int i \u003d (int) msb;\r\n    _appendShort(i \u003e\u003e\u003e 16, ch, 9);\r\n    ch[13] \u003d \u0027-\u0027;\r\n    _appendShort(i, ch, 14);\r\n    ch[18] \u003d \u0027-\u0027;\r\n    final long lsb \u003d value.getLeastSignificantBits();\r\n    _appendShort((int) (lsb \u003e\u003e\u003e 48), ch, 19);\r\n    ch[23] \u003d \u0027-\u0027;\r\n    _appendShort((int) (lsb \u003e\u003e\u003e 32), ch, 24);\r\n    _appendInt((int) lsb, ch, 28);\r\n    gen.writeString(ch, 0, 36);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  UUIDSerializer\n  UUID\n  JsonGenerator\n  SerializerProvider\n  $z0 \u003d r0._writeAsBinary(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d UUIDSerializer._asBytes(r3)\n  r1.writeBinary($r4)\n  return\n}",
      "B2 {\n  r2 \u003d newarray (char)[36]\n  l0 \u003d r3.getMostSignificantBits()\n  $l1 \u003d l0 \u003e\u003e 32\n  $i2 \u003d (int) $l1\n  UUIDSerializer._appendInt($i2, r2, 0)\n  r2[8] \u003d 45\n  i3 \u003d (int) l0\n  $i4 \u003d i3 \u003e\u003e\u003e 16\n  UUIDSerializer._appendShort($i4, r2, 9)\n  r2[13] \u003d 45\n  UUIDSerializer._appendShort(i3, r2, 14)\n  r2[18] \u003d 45\n  l5 \u003d r3.getLeastSignificantBits()\n  $l6 \u003d l5 \u003e\u003e\u003e 48\n  $i7 \u003d (int) $l6\n  UUIDSerializer._appendShort($i7, r2, 19)\n  r2[23] \u003d 45\n  $l8 \u003d l5 \u003e\u003e\u003e 32\n  $i9 \u003d (int) $l8\n  UUIDSerializer._appendShort($i9, r2, 24)\n  $i10 \u003d (int) l5\n  UUIDSerializer._appendInt($i10, r2, 28)\n  r1.writeString(r2, 0, 36)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "UUIDSerializer#_appendInt(...3)",
        "body": "{\r\n    _appendShort(bits \u003e\u003e 16, ch, offset);\r\n    _appendShort(bits, ch, offset + 4);\r\n}"
      },
      {
        "name": "UUIDSerializer#_asBytes(...1)",
        "body": "{\r\n    byte[] buffer \u003d new byte[16];\r\n    long hi \u003d uuid.getMostSignificantBits();\r\n    long lo \u003d uuid.getLeastSignificantBits();\r\n    _appendInt((int) (hi \u003e\u003e 32), buffer, 0);\r\n    _appendInt((int) hi, buffer, 4);\r\n    _appendInt((int) (lo \u003e\u003e 32), buffer, 8);\r\n    _appendInt((int) lo, buffer, 12);\r\n    return buffer;\r\n}"
      },
      {
        "name": "UUIDSerializer#_writeAsBinary(...1)",
        "body": "{\r\n    if (_asBinary !\u003d null) {\r\n        return _asBinary;\r\n    }\r\n    // 07-Dec-2013, tatu: One nasty case; that of TokenBuffer. While it can\r\n    //   technically retain binary data, we do not want to do use binary\r\n    //   with it, as that results in UUIDs getting converted to Base64 for\r\n    //   most conversions.\r\n    return !(g instanceof TokenBuffer) \u0026\u0026 g.canWriteBinaryNatively();\r\n}"
      },
      {
        "name": "UUIDSerializer#_appendShort(...3)",
        "body": "{\r\n    ch[offset] \u003d HEX_CHARS[(bits \u003e\u003e 12) \u0026 0xF];\r\n    ch[++offset] \u003d HEX_CHARS[(bits \u003e\u003e 8) \u0026 0xF];\r\n    ch[++offset] \u003d HEX_CHARS[(bits \u003e\u003e 4) \u0026 0xF];\r\n    ch[++offset] \u003d HEX_CHARS[bits \u0026 0xF];\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "withRootName",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig withRootName(com.fasterxml.jackson.databind.PropertyName)",
    "visibility": "public",
    "body": "{\r\n    if (rootName \u003d\u003d null) {\r\n        if (_rootName \u003d\u003d null) {\r\n            return this;\r\n        }\r\n    } else if (rootName.equals(_rootName)) {\r\n        return this;\r\n    }\r\n    return new SerializationConfig(this, rootName);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B3",
      "B1 : If($r4 !\u003d null) → B2 | else → B5",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  PropertyName\n  if (r0 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r4 \u003d PropertyName _rootName\u003e\n  if ($r4 !\u003d null) goto B2 else B5\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r2 \u003d PropertyName _rootName\u003e\n  $z0 \u003d r0.equals($r2)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r3 \u003d SerializationConfig\n  new SerializationConfig(r1, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig \u0027with\u0027(com.fasterxml.jackson.databind.jsontype.SubtypeResolver)",
    "visibility": "public",
    "body": "{\r\n    return (str \u003d\u003d _subtypeResolver) ? this : new SerializationConfig(this, str);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  SubtypeResolver\n  $r2 \u003d SubtypeResolver _subtypeResolver\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r3 \u003d SerializationConfig\n  new SerializationConfig(r1, r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "withView",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig withView(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return (_view \u003d\u003d view) ? this : new SerializationConfig(this, view);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  Class\n  $r2 \u003d Class _view\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r3 \u003d SerializationConfig\n  new SerializationConfig(r0, r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig \u0027with\u0027(com.fasterxml.jackson.databind.cfg.ContextAttributes)",
    "visibility": "public",
    "body": "{\r\n    return (attrs \u003d\u003d _attributes) ? this : new SerializationConfig(this, attrs);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  ContextAttributes\n  $r2 \u003d ContextAttributes _attributes\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r3 \u003d SerializationConfig\n  new SerializationConfig(r1, r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig \u0027with\u0027(java.text.DateFormat)",
    "visibility": "public",
    "body": "{\r\n    SerializationConfig cfg \u003d super.with(df);\r\n    // Also need to toggle this feature based on existence of date format:\r\n    if (df \u003d\u003d null) {\r\n        return cfg.with(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\r\n    }\r\n    return cfg.without(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  DateFormat\n  $r2 \u003d r0.with(r1)\n  r3 \u003d SerializationConfig) $r2\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d SerializationFeature WRITE_DATES_AS_TIMESTAMPS\u003e\n  $r7 \u003d r3.with($r6)\n  return\n}",
      "B2 {\n  $r4 \u003d SerializationFeature WRITE_DATES_AS_TIMESTAMPS\u003e\n  $r5 \u003d r3.without($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig \u0027with\u0027(com.fasterxml.jackson.databind.SerializationFeature)",
    "visibility": "public",
    "body": "{\r\n    int newSerFeatures \u003d _serFeatures | feature.getMask();\r\n    return (newSerFeatures \u003d\u003d _serFeatures) ? this : new SerializationConfig(this, _mapperFeatures, newSerFeatures, _generatorFeatures, _generatorFeaturesToChange, _formatWriteFeatures, _formatWriteFeaturesToChange);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i2 !\u003d $i3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  SerializationFeature\n  $i0 \u003d SerializationConfig: int _serFeatures\u003e\n  $i1 \u003d r1.getMask()\n  i2 \u003d $i0 | $i1\n  $i3 \u003d SerializationConfig: int _serFeatures\u003e\n  if (i2 !\u003d $i3) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d SerializationConfig\n  $l8 \u003d SerializationConfig: long _mapperFeatures\u003e\n  $i7 \u003d SerializationConfig: int _generatorFeatures\u003e\n  $i6 \u003d SerializationConfig: int _generatorFeaturesToChange\u003e\n  $i5 \u003d SerializationConfig: int _formatWriteFeatures\u003e\n  $i4 \u003d SerializationConfig: int _formatWriteFeaturesToChange\u003e\n  new SerializationConfig(r0, $l8, i2, $i7, $i6, $i5, $i4)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig \u0027with\u0027(com.fasterxml.jackson.databind.SerializationFeature,com.fasterxml.jackson.databind.SerializationFeature[])",
    "visibility": "public",
    "body": "{\r\n    int newSerFeatures \u003d _serFeatures | first.getMask();\r\n    for (SerializationFeature f : features) {\r\n        newSerFeatures |\u003d f.getMask();\r\n    }\r\n    return (newSerFeatures \u003d\u003d _serFeatures) ? this : new SerializationConfig(this, _mapperFeatures, newSerFeatures, _generatorFeatures, _generatorFeaturesToChange, _formatWriteFeatures, _formatWriteFeaturesToChange);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i11 \u003e\u003d i2) → B2 | else → B3",
      "B3 : If(i10 !\u003d $i3) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  SerializationFeature\n  SerializationFeature[]\n  $i0 \u003d SerializationConfig: int _serFeatures\u003e\n  $i1 \u003d r1.getMask()\n  i10 \u003d $i0 | $i1\n  i2 \u003d lengthof r2\n  i11 \u003d 0\n}",
      "B1 {\n  if (i11 \u003e\u003d i2) goto B2 else B3\n}",
      "B2 {\n  r3 \u003d r2[i11]\n  $i9 \u003d r3.getMask()\n  i10 \u003d i10 | $i9\n  i11 \u003d i11 + 1\n  goto B1\n}",
      "B3 {\n  $i3 \u003d SerializationConfig: int _serFeatures\u003e\n  if (i10 !\u003d $i3) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d r0\n  goto B6\n}",
      "B5 {\n  $r4 \u003d SerializationConfig\n  $l8 \u003d SerializationConfig: long _mapperFeatures\u003e\n  $i7 \u003d SerializationConfig: int _generatorFeatures\u003e\n  $i6 \u003d SerializationConfig: int _generatorFeaturesToChange\u003e\n  $i5 \u003d SerializationConfig: int _formatWriteFeatures\u003e\n  $i4 \u003d SerializationConfig: int _formatWriteFeaturesToChange\u003e\n  new SerializationConfig(r0, $l8, i10, $i7, $i6, $i5, $i4)\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "withFeatures",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig withFeatures(com.fasterxml.jackson.databind.SerializationFeature[])",
    "visibility": "public",
    "body": "{\r\n    int newSerFeatures \u003d _serFeatures;\r\n    for (SerializationFeature f : features) {\r\n        newSerFeatures |\u003d f.getMask();\r\n    }\r\n    return (newSerFeatures \u003d\u003d _serFeatures) ? this : new SerializationConfig(this, _mapperFeatures, newSerFeatures, _generatorFeatures, _generatorFeaturesToChange, _formatWriteFeatures, _formatWriteFeaturesToChange);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i9 \u003e\u003d i0) → B2 | else → B3",
      "B3 : If(i8 !\u003d $i1) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  SerializationFeature[]\n  i8 \u003d SerializationConfig: int _serFeatures\u003e\n  i0 \u003d lengthof r1\n  i9 \u003d 0\n}",
      "B1 {\n  if (i9 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r1[i9]\n  $i7 \u003d r2.getMask()\n  i8 \u003d i8 | $i7\n  i9 \u003d i9 + 1\n  goto B1\n}",
      "B3 {\n  $i1 \u003d SerializationConfig: int _serFeatures\u003e\n  if (i8 !\u003d $i1) goto B4 else B5\n}",
      "B4 {\n  $r3 \u003d r0\n  goto B6\n}",
      "B5 {\n  $r3 \u003d SerializationConfig\n  $l6 \u003d SerializationConfig: long _mapperFeatures\u003e\n  $i5 \u003d SerializationConfig: int _generatorFeatures\u003e\n  $i4 \u003d SerializationConfig: int _generatorFeaturesToChange\u003e\n  $i3 \u003d SerializationConfig: int _formatWriteFeatures\u003e\n  $i2 \u003d SerializationConfig: int _formatWriteFeaturesToChange\u003e\n  new SerializationConfig(r0, $l6, i8, $i5, $i4, $i3, $i2)\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "without",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig without(com.fasterxml.jackson.databind.SerializationFeature)",
    "visibility": "public",
    "body": "{\r\n    int newSerFeatures \u003d _serFeatures \u0026 ~feature.getMask();\r\n    return (newSerFeatures \u003d\u003d _serFeatures) ? this : new SerializationConfig(this, _mapperFeatures, newSerFeatures, _generatorFeatures, _generatorFeaturesToChange, _formatWriteFeatures, _formatWriteFeaturesToChange);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i3 !\u003d $i4) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  SerializationFeature\n  $i0 \u003d SerializationConfig: int _serFeatures\u003e\n  $i1 \u003d r1.getMask()\n  $i11 \u003d (int) -1\n  $i2 \u003d $i1 ^ $i11\n  i3 \u003d $i0 \u0026 $i2\n  $i4 \u003d SerializationConfig: int _serFeatures\u003e\n  if (i3 !\u003d $i4) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r3 \u003d SerializationConfig\n  $r2 \u003d $r3\n  $l9 \u003d SerializationConfig: long _mapperFeatures\u003e\n  $i8 \u003d SerializationConfig: int _generatorFeatures\u003e\n  $i7 \u003d SerializationConfig: int _generatorFeaturesToChange\u003e\n  $i6 \u003d SerializationConfig: int _formatWriteFeatures\u003e\n  $i5 \u003d SerializationConfig: int _formatWriteFeaturesToChange\u003e\n  new SerializationConfig(r0, $l9, i3, $i8, $i7, $i6, $i5)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "without",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig without(com.fasterxml.jackson.databind.SerializationFeature,com.fasterxml.jackson.databind.SerializationFeature[])",
    "visibility": "public",
    "body": "{\r\n    int newSerFeatures \u003d _serFeatures \u0026 ~first.getMask();\r\n    for (SerializationFeature f : features) {\r\n        newSerFeatures \u0026\u003d ~f.getMask();\r\n    }\r\n    return (newSerFeatures \u003d\u003d _serFeatures) ? this : new SerializationConfig(this, _mapperFeatures, newSerFeatures, _generatorFeatures, _generatorFeaturesToChange, _formatWriteFeatures, _formatWriteFeaturesToChange);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i13 \u003e\u003d i3) → B2 | else → B3",
      "B3 : If(i12 !\u003d $i4) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  SerializationFeature\n  SerializationFeature[]\n  $i0 \u003d SerializationConfig: int _serFeatures\u003e\n  $i1 \u003d r1.getMask()\n  $i15 \u003d (int) -1\n  $i2 \u003d $i1 ^ $i15\n  i12 \u003d $i0 \u0026 $i2\n  i3 \u003d lengthof r2\n  i13 \u003d 0\n}",
      "B1 {\n  if (i13 \u003e\u003d i3) goto B2 else B3\n}",
      "B2 {\n  r3 \u003d r2[i13]\n  $i10 \u003d r3.getMask()\n  $i17 \u003d (int) -1\n  $i11 \u003d $i10 ^ $i17\n  i12 \u003d i12 \u0026 $i11\n  i13 \u003d i13 + 1\n  goto B1\n}",
      "B3 {\n  $i4 \u003d SerializationConfig: int _serFeatures\u003e\n  if (i12 !\u003d $i4) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d r0\n  goto B6\n}",
      "B5 {\n  $r5 \u003d SerializationConfig\n  $r4 \u003d $r5\n  $l9 \u003d SerializationConfig: long _mapperFeatures\u003e\n  $i8 \u003d SerializationConfig: int _generatorFeatures\u003e\n  $i7 \u003d SerializationConfig: int _generatorFeaturesToChange\u003e\n  $i6 \u003d SerializationConfig: int _formatWriteFeatures\u003e\n  $i5 \u003d SerializationConfig: int _formatWriteFeaturesToChange\u003e\n  new SerializationConfig(r0, $l9, i12, $i8, $i7, $i6, $i5)\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "withoutFeatures",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig withoutFeatures(com.fasterxml.jackson.databind.SerializationFeature[])",
    "visibility": "public",
    "body": "{\r\n    int newSerFeatures \u003d _serFeatures;\r\n    for (SerializationFeature f : features) {\r\n        newSerFeatures \u0026\u003d ~f.getMask();\r\n    }\r\n    return (newSerFeatures \u003d\u003d _serFeatures) ? this : new SerializationConfig(this, _mapperFeatures, newSerFeatures, _generatorFeatures, _generatorFeaturesToChange, _formatWriteFeatures, _formatWriteFeaturesToChange);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i10 \u003e\u003d i0) → B2 | else → B3",
      "B3 : If(i9 !\u003d $i1) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  SerializationFeature[]\n  i9 \u003d SerializationConfig: int _serFeatures\u003e\n  i0 \u003d lengthof r1\n  i10 \u003d 0\n}",
      "B1 {\n  if (i10 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r1[i10]\n  $i7 \u003d r2.getMask()\n  $i12 \u003d (int) -1\n  $i8 \u003d $i7 ^ $i12\n  i9 \u003d i9 \u0026 $i8\n  i10 \u003d i10 + 1\n  goto B1\n}",
      "B3 {\n  $i1 \u003d SerializationConfig: int _serFeatures\u003e\n  if (i9 !\u003d $i1) goto B4 else B5\n}",
      "B4 {\n  $r3 \u003d r0\n  goto B6\n}",
      "B5 {\n  $r4 \u003d SerializationConfig\n  $r3 \u003d $r4\n  $l6 \u003d SerializationConfig: long _mapperFeatures\u003e\n  $i5 \u003d SerializationConfig: int _generatorFeatures\u003e\n  $i4 \u003d SerializationConfig: int _generatorFeaturesToChange\u003e\n  $i3 \u003d SerializationConfig: int _formatWriteFeatures\u003e\n  $i2 \u003d SerializationConfig: int _formatWriteFeaturesToChange\u003e\n  new SerializationConfig(r0, $l6, i9, $i5, $i4, $i3, $i2)\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig \u0027with\u0027(com.fasterxml.jackson.core.JsonGenerator$Feature)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i6 !\u003d i2) → B1 | else → B3",
      "B1 : If($i11 !\u003d i5) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  JsonGenerator$Feature\n  $i0 \u003d SerializationConfig: int _generatorFeatures\u003e\n  $i1 \u003d r1.getMask()\n  i2 \u003d $i0 | $i1\n  $i3 \u003d SerializationConfig: int _generatorFeaturesToChange\u003e\n  $i4 \u003d r1.getMask()\n  i5 \u003d $i3 | $i4\n  $i6 \u003d SerializationConfig: int _generatorFeatures\u003e\n  if ($i6 !\u003d i2) goto B1 else B3\n}",
      "B1 {\n  $i11 \u003d SerializationConfig: int _generatorFeaturesToChange\u003e\n  if ($i11 !\u003d i5) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r2 \u003d SerializationConfig\n  $l10 \u003d SerializationConfig: long _mapperFeatures\u003e\n  $i9 \u003d SerializationConfig: int _serFeatures\u003e\n  $i8 \u003d SerializationConfig: int _formatWriteFeatures\u003e\n  $i7 \u003d SerializationConfig: int _formatWriteFeaturesToChange\u003e\n  new SerializationConfig(r0, $l10, $i9, i2, i5, $i8, $i7)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "withFeatures",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig withFeatures(com.fasterxml.jackson.core.JsonGenerator$Feature[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B1 : If(i10 \u003e\u003d i0) → B2 | else → B3",
      "B3 : If($i1 !\u003d i8) → B4 | else → B6",
      "B4 : If($i6 !\u003d i9) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  JsonGenerator$Feature[]\n  i8 \u003d SerializationConfig: int _generatorFeatures\u003e\n  i9 \u003d SerializationConfig: int _generatorFeaturesToChange\u003e\n  i0 \u003d lengthof r1\n  i10 \u003d 0\n}",
      "B1 {\n  if (i10 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r1[i10]\n  i7 \u003d r2.getMask()\n  i8 \u003d i8 | i7\n  i9 \u003d i9 | i7\n  i10 \u003d i10 + 1\n  goto B1\n}",
      "B3 {\n  $i1 \u003d SerializationConfig: int _generatorFeatures\u003e\n  if ($i1 !\u003d i8) goto B4 else B6\n}",
      "B4 {\n  $i6 \u003d SerializationConfig: int _generatorFeaturesToChange\u003e\n  if ($i6 !\u003d i9) goto B5 else B6\n}",
      "B5 {\n  $r3 \u003d r0\n  goto B7\n}",
      "B6 {\n  $r3 \u003d SerializationConfig\n  $l5 \u003d SerializationConfig: long _mapperFeatures\u003e\n  $i4 \u003d SerializationConfig: int _serFeatures\u003e\n  $i3 \u003d SerializationConfig: int _formatWriteFeatures\u003e\n  $i2 \u003d SerializationConfig: int _formatWriteFeaturesToChange\u003e\n  new SerializationConfig(r0, $l5, $i4, i8, i9, $i3, $i2)\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "without",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig without(com.fasterxml.jackson.core.JsonGenerator$Feature)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i7 !\u003d i3) → B1 | else → B3",
      "B1 : If($i12 !\u003d i6) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  JsonGenerator$Feature\n  $i0 \u003d SerializationConfig: int _generatorFeatures\u003e\n  $i1 \u003d r1.getMask()\n  $i14 \u003d (int) -1\n  $i2 \u003d $i1 ^ $i14\n  i3 \u003d $i0 \u0026 $i2\n  $i4 \u003d SerializationConfig: int _generatorFeaturesToChange\u003e\n  $i5 \u003d r1.getMask()\n  i6 \u003d $i4 | $i5\n  $i7 \u003d SerializationConfig: int _generatorFeatures\u003e\n  if ($i7 !\u003d i3) goto B1 else B3\n}",
      "B1 {\n  $i12 \u003d SerializationConfig: int _generatorFeaturesToChange\u003e\n  if ($i12 !\u003d i6) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r3 \u003d SerializationConfig\n  $r2 \u003d $r3\n  $l11 \u003d SerializationConfig: long _mapperFeatures\u003e\n  $i10 \u003d SerializationConfig: int _serFeatures\u003e\n  $i9 \u003d SerializationConfig: int _formatWriteFeatures\u003e\n  $i8 \u003d SerializationConfig: int _formatWriteFeaturesToChange\u003e\n  new SerializationConfig(r0, $l11, $i10, i3, i6, $i9, $i8)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "withoutFeatures",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig withoutFeatures(com.fasterxml.jackson.core.JsonGenerator$Feature[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B1 : If(i11 \u003e\u003d i0) → B2 | else → B3",
      "B3 : If($i1 !\u003d i9) → B4 | else → B6",
      "B4 : If($i6 !\u003d i10) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  JsonGenerator$Feature[]\n  i9 \u003d SerializationConfig: int _generatorFeatures\u003e\n  i10 \u003d SerializationConfig: int _generatorFeaturesToChange\u003e\n  i0 \u003d lengthof r1\n  i11 \u003d 0\n}",
      "B1 {\n  if (i11 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r1[i11]\n  i7 \u003d r2.getMask()\n  $i13 \u003d (int) -1\n  $i8 \u003d i7 ^ $i13\n  i9 \u003d i9 \u0026 $i8\n  i10 \u003d i10 | i7\n  i11 \u003d i11 + 1\n  goto B1\n}",
      "B3 {\n  $i1 \u003d SerializationConfig: int _generatorFeatures\u003e\n  if ($i1 !\u003d i9) goto B4 else B6\n}",
      "B4 {\n  $i6 \u003d SerializationConfig: int _generatorFeaturesToChange\u003e\n  if ($i6 !\u003d i10) goto B5 else B6\n}",
      "B5 {\n  $r3 \u003d r0\n  goto B7\n}",
      "B6 {\n  $r4 \u003d SerializationConfig\n  $r3 \u003d $r4\n  $l5 \u003d SerializationConfig: long _mapperFeatures\u003e\n  $i4 \u003d SerializationConfig: int _serFeatures\u003e\n  $i3 \u003d SerializationConfig: int _formatWriteFeatures\u003e\n  $i2 \u003d SerializationConfig: int _formatWriteFeaturesToChange\u003e\n  new SerializationConfig(r0, $l5, $i4, i9, i10, $i3, $i2)\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig \u0027with\u0027(com.fasterxml.jackson.core.FormatFeature)",
    "visibility": "public",
    "body": "{\r\n    // 27-Oct-2018, tatu: Alas, complexity due to newly (2.10) refactored json-features:\r\n    if (feature instanceof JsonWriteFeature) {\r\n        return _withJsonWriteFeatures(feature);\r\n    }\r\n    int newSet \u003d _formatWriteFeatures | feature.getMask();\r\n    int newMask \u003d _formatWriteFeaturesToChange | feature.getMask();\r\n    return ((_formatWriteFeatures \u003d\u003d newSet) \u0026\u0026 (_formatWriteFeaturesToChange \u003d\u003d newMask)) ? this : new SerializationConfig(this, _mapperFeatures, _serFeatures, _generatorFeatures, _generatorFeaturesToChange, newSet, newMask);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($i6 !\u003d i2) → B3 | else → B5",
      "B3 : If($i11 !\u003d i5) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  FormatFeature\n  $z0 \u003d JsonWriteFeature\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d FormatFeature)[1]\n  $r2[0] \u003d r0\n  $r3 \u003d r1._withJsonWriteFeatures($r2)\n  return\n}",
      "B2 {\n  $i0 \u003d SerializationConfig: int _formatWriteFeatures\u003e\n  $i1 \u003d r0.getMask()\n  i2 \u003d $i0 | $i1\n  $i3 \u003d SerializationConfig: int _formatWriteFeaturesToChange\u003e\n  $i4 \u003d r0.getMask()\n  i5 \u003d $i3 | $i4\n  $i6 \u003d SerializationConfig: int _formatWriteFeatures\u003e\n  if ($i6 !\u003d i2) goto B3 else B5\n}",
      "B3 {\n  $i11 \u003d SerializationConfig: int _formatWriteFeaturesToChange\u003e\n  if ($i11 !\u003d i5) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d r1\n  goto B6\n}",
      "B5 {\n  $r4 \u003d SerializationConfig\n  $l10 \u003d SerializationConfig: long _mapperFeatures\u003e\n  $i9 \u003d SerializationConfig: int _serFeatures\u003e\n  $i8 \u003d SerializationConfig: int _generatorFeatures\u003e\n  $i7 \u003d SerializationConfig: int _generatorFeaturesToChange\u003e\n  new SerializationConfig(r1, $l10, $i9, $i8, $i7, i2, i5)\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SerializationConfig#_withJsonWriteFeatures(...1)",
        "body": "{\r\n    int parserSet \u003d _generatorFeatures;\r\n    int parserMask \u003d _generatorFeaturesToChange;\r\n    int newSet \u003d _formatWriteFeatures;\r\n    int newMask \u003d _formatWriteFeaturesToChange;\r\n    for (FormatFeature f : features) {\r\n        final int mask \u003d f.getMask();\r\n        newSet |\u003d mask;\r\n        newMask |\u003d mask;\r\n        if (f instanceof JsonWriteFeature) {\r\n            JsonGenerator.Feature oldF \u003d ((JsonWriteFeature) f).mappedFeature();\r\n            if (oldF !\u003d null) {\r\n                final int pmask \u003d oldF.getMask();\r\n                parserSet |\u003d pmask;\r\n                parserMask |\u003d pmask;\r\n            }\r\n        }\r\n    }\r\n    return ((_formatWriteFeatures \u003d\u003d newSet) \u0026\u0026 (_formatWriteFeaturesToChange \u003d\u003d newMask) \u0026\u0026 (_generatorFeatures \u003d\u003d parserSet) \u0026\u0026 (_generatorFeaturesToChange \u003d\u003d parserMask)) ? this : new SerializationConfig(this, _mapperFeatures, _serFeatures, parserSet, parserMask, newSet, newMask);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "withFeatures",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig withFeatures(com.fasterxml.jackson.core.FormatFeature[])",
    "visibility": "public",
    "body": "{\r\n    // 27-Oct-2018, tatu: Alas, complexity due to newly (2.10) refactored json-features:\r\n    if (features.length \u003e 0 \u0026\u0026 (features[0] instanceof JsonWriteFeature)) {\r\n        return _withJsonWriteFeatures(features);\r\n    }\r\n    int newSet \u003d _formatWriteFeatures;\r\n    int newMask \u003d _formatWriteFeaturesToChange;\r\n    for (FormatFeature f : features) {\r\n        int mask \u003d f.getMask();\r\n        newSet |\u003d mask;\r\n        newMask |\u003d mask;\r\n    }\r\n    return ((_formatWriteFeatures \u003d\u003d newSet) \u0026\u0026 (_formatWriteFeaturesToChange \u003d\u003d newMask)) ? this : new SerializationConfig(this, _mapperFeatures, _serFeatures, _generatorFeatures, _generatorFeaturesToChange, newSet, newMask);\r\n}",
    "nodes": 11,
    "edges": 14,
    "cc": 5,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i11 \u003e\u003d $i8) → B5 | else → B6",
      "B6 : If($i1 !\u003d i9) → B7 | else → B9",
      "B7 : If($i6 !\u003d i10) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  FormatFeature[]\n  $i0 \u003d lengthof r0\n  if ($i0 \u003c\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $r3 \u003d r0[0]\n  $z0 \u003d JsonWriteFeature\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r1._withJsonWriteFeatures(r0)\n  return\n}",
      "B3 {\n  i9 \u003d SerializationConfig: int _formatWriteFeatures\u003e\n  i10 \u003d SerializationConfig: int _formatWriteFeaturesToChange\u003e\n  $i8 \u003d lengthof r0\n  i11 \u003d 0\n}",
      "B4 {\n  if (i11 \u003e\u003d $i8) goto B5 else B6\n}",
      "B5 {\n  r2 \u003d r0[i11]\n  i7 \u003d r2.getMask()\n  i9 \u003d i9 | i7\n  i10 \u003d i10 | i7\n  i11 \u003d i11 + 1\n  goto B4\n}",
      "B6 {\n  $i1 \u003d SerializationConfig: int _formatWriteFeatures\u003e\n  if ($i1 !\u003d i9) goto B7 else B9\n}",
      "B7 {\n  $i6 \u003d SerializationConfig: int _formatWriteFeaturesToChange\u003e\n  if ($i6 !\u003d i10) goto B8 else B9\n}",
      "B8 {\n  $r5 \u003d r1\n  goto B10\n}",
      "B9 {\n  $r5 \u003d SerializationConfig\n  $l5 \u003d SerializationConfig: long _mapperFeatures\u003e\n  $i4 \u003d SerializationConfig: int _serFeatures\u003e\n  $i3 \u003d SerializationConfig: int _generatorFeatures\u003e\n  $i2 \u003d SerializationConfig: int _generatorFeaturesToChange\u003e\n  new SerializationConfig(r1, $l5, $i4, $i3, $i2, i9, i10)\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SerializationConfig#_withJsonWriteFeatures(...1)",
        "body": "{\r\n    int parserSet \u003d _generatorFeatures;\r\n    int parserMask \u003d _generatorFeaturesToChange;\r\n    int newSet \u003d _formatWriteFeatures;\r\n    int newMask \u003d _formatWriteFeaturesToChange;\r\n    for (FormatFeature f : features) {\r\n        final int mask \u003d f.getMask();\r\n        newSet |\u003d mask;\r\n        newMask |\u003d mask;\r\n        if (f instanceof JsonWriteFeature) {\r\n            JsonGenerator.Feature oldF \u003d ((JsonWriteFeature) f).mappedFeature();\r\n            if (oldF !\u003d null) {\r\n                final int pmask \u003d oldF.getMask();\r\n                parserSet |\u003d pmask;\r\n                parserMask |\u003d pmask;\r\n            }\r\n        }\r\n    }\r\n    return ((_formatWriteFeatures \u003d\u003d newSet) \u0026\u0026 (_formatWriteFeaturesToChange \u003d\u003d newMask) \u0026\u0026 (_generatorFeatures \u003d\u003d parserSet) \u0026\u0026 (_generatorFeaturesToChange \u003d\u003d parserMask)) ? this : new SerializationConfig(this, _mapperFeatures, _serFeatures, parserSet, parserMask, newSet, newMask);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "without",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig without(com.fasterxml.jackson.core.FormatFeature)",
    "visibility": "public",
    "body": "{\r\n    // 27-Oct-2018, tatu: Alas, complexity due to newly (2.10) refactored json-features:\r\n    if (feature instanceof JsonWriteFeature) {\r\n        return _withoutJsonWriteFeatures(feature);\r\n    }\r\n    int newSet \u003d _formatWriteFeatures \u0026 ~feature.getMask();\r\n    int newMask \u003d _formatWriteFeaturesToChange | feature.getMask();\r\n    return ((_formatWriteFeatures \u003d\u003d newSet) \u0026\u0026 (_formatWriteFeaturesToChange \u003d\u003d newMask)) ? this : new SerializationConfig(this, _mapperFeatures, _serFeatures, _generatorFeatures, _generatorFeaturesToChange, newSet, newMask);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($i7 !\u003d i3) → B3 | else → B5",
      "B3 : If($i12 !\u003d i6) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  FormatFeature\n  $z0 \u003d JsonWriteFeature\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d FormatFeature)[1]\n  $r2[0] \u003d r0\n  $r3 \u003d r1._withoutJsonWriteFeatures($r2)\n  return\n}",
      "B2 {\n  $i0 \u003d SerializationConfig: int _formatWriteFeatures\u003e\n  $i1 \u003d r0.getMask()\n  $i14 \u003d (int) -1\n  $i2 \u003d $i1 ^ $i14\n  i3 \u003d $i0 \u0026 $i2\n  $i4 \u003d SerializationConfig: int _formatWriteFeaturesToChange\u003e\n  $i5 \u003d r0.getMask()\n  i6 \u003d $i4 | $i5\n  $i7 \u003d SerializationConfig: int _formatWriteFeatures\u003e\n  if ($i7 !\u003d i3) goto B3 else B5\n}",
      "B3 {\n  $i12 \u003d SerializationConfig: int _formatWriteFeaturesToChange\u003e\n  if ($i12 !\u003d i6) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d r1\n  goto B6\n}",
      "B5 {\n  $r5 \u003d SerializationConfig\n  $r4 \u003d $r5\n  $l11 \u003d SerializationConfig: long _mapperFeatures\u003e\n  $i10 \u003d SerializationConfig: int _serFeatures\u003e\n  $i9 \u003d SerializationConfig: int _generatorFeatures\u003e\n  $i8 \u003d SerializationConfig: int _generatorFeaturesToChange\u003e\n  new SerializationConfig(r1, $l11, $i10, $i9, $i8, i3, i6)\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SerializationConfig#_withoutJsonWriteFeatures(...1)",
        "body": "{\r\n    int parserSet \u003d _generatorFeatures;\r\n    int parserMask \u003d _generatorFeaturesToChange;\r\n    int newSet \u003d _formatWriteFeatures;\r\n    int newMask \u003d _formatWriteFeaturesToChange;\r\n    for (FormatFeature f : features) {\r\n        final int mask \u003d f.getMask();\r\n        newSet \u0026\u003d ~mask;\r\n        newMask |\u003d mask;\r\n        if (f instanceof JsonWriteFeature) {\r\n            JsonGenerator.Feature oldF \u003d ((JsonWriteFeature) f).mappedFeature();\r\n            if (oldF !\u003d null) {\r\n                final int pmask \u003d oldF.getMask();\r\n                parserSet \u0026\u003d ~pmask;\r\n                parserMask |\u003d pmask;\r\n            }\r\n        }\r\n    }\r\n    return ((_formatWriteFeatures \u003d\u003d newSet) \u0026\u0026 (_formatWriteFeaturesToChange \u003d\u003d newMask) \u0026\u0026 (_generatorFeatures \u003d\u003d parserSet) \u0026\u0026 (_generatorFeaturesToChange \u003d\u003d parserMask)) ? this : new SerializationConfig(this, _mapperFeatures, _serFeatures, parserSet, parserMask, newSet, newMask);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "withoutFeatures",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig withoutFeatures(com.fasterxml.jackson.core.FormatFeature[])",
    "visibility": "public",
    "body": "{\r\n    if (features.length \u003e 0 \u0026\u0026 (features[0] instanceof JsonWriteFeature)) {\r\n        return _withoutJsonWriteFeatures(features);\r\n    }\r\n    int newSet \u003d _formatWriteFeatures;\r\n    int newMask \u003d _formatWriteFeaturesToChange;\r\n    for (FormatFeature f : features) {\r\n        int mask \u003d f.getMask();\r\n        newSet \u0026\u003d ~mask;\r\n        newMask |\u003d mask;\r\n    }\r\n    return ((_formatWriteFeatures \u003d\u003d newSet) \u0026\u0026 (_formatWriteFeaturesToChange \u003d\u003d newMask)) ? this : new SerializationConfig(this, _mapperFeatures, _serFeatures, _generatorFeatures, _generatorFeaturesToChange, newSet, newMask);\r\n}",
    "nodes": 11,
    "edges": 14,
    "cc": 5,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i12 \u003e\u003d $i9) → B5 | else → B6",
      "B6 : If($i1 !\u003d i10) → B7 | else → B9",
      "B7 : If($i6 !\u003d i11) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  FormatFeature[]\n  $i0 \u003d lengthof r0\n  if ($i0 \u003c\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $r3 \u003d r0[0]\n  $z0 \u003d JsonWriteFeature\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r1._withoutJsonWriteFeatures(r0)\n  return\n}",
      "B3 {\n  i10 \u003d SerializationConfig: int _formatWriteFeatures\u003e\n  i11 \u003d SerializationConfig: int _formatWriteFeaturesToChange\u003e\n  $i9 \u003d lengthof r0\n  i12 \u003d 0\n}",
      "B4 {\n  if (i12 \u003e\u003d $i9) goto B5 else B6\n}",
      "B5 {\n  r2 \u003d r0[i12]\n  i7 \u003d r2.getMask()\n  $i14 \u003d (int) -1\n  $i8 \u003d i7 ^ $i14\n  i10 \u003d i10 \u0026 $i8\n  i11 \u003d i11 | i7\n  i12 \u003d i12 + 1\n  goto B4\n}",
      "B6 {\n  $i1 \u003d SerializationConfig: int _formatWriteFeatures\u003e\n  if ($i1 !\u003d i10) goto B7 else B9\n}",
      "B7 {\n  $i6 \u003d SerializationConfig: int _formatWriteFeaturesToChange\u003e\n  if ($i6 !\u003d i11) goto B8 else B9\n}",
      "B8 {\n  $r5 \u003d r1\n  goto B10\n}",
      "B9 {\n  $r6 \u003d SerializationConfig\n  $r5 \u003d $r6\n  $l5 \u003d SerializationConfig: long _mapperFeatures\u003e\n  $i4 \u003d SerializationConfig: int _serFeatures\u003e\n  $i3 \u003d SerializationConfig: int _generatorFeatures\u003e\n  $i2 \u003d SerializationConfig: int _generatorFeaturesToChange\u003e\n  new SerializationConfig(r1, $l5, $i4, $i3, $i2, i10, i11)\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SerializationConfig#_withoutJsonWriteFeatures(...1)",
        "body": "{\r\n    int parserSet \u003d _generatorFeatures;\r\n    int parserMask \u003d _generatorFeaturesToChange;\r\n    int newSet \u003d _formatWriteFeatures;\r\n    int newMask \u003d _formatWriteFeaturesToChange;\r\n    for (FormatFeature f : features) {\r\n        final int mask \u003d f.getMask();\r\n        newSet \u0026\u003d ~mask;\r\n        newMask |\u003d mask;\r\n        if (f instanceof JsonWriteFeature) {\r\n            JsonGenerator.Feature oldF \u003d ((JsonWriteFeature) f).mappedFeature();\r\n            if (oldF !\u003d null) {\r\n                final int pmask \u003d oldF.getMask();\r\n                parserSet \u0026\u003d ~pmask;\r\n                parserMask |\u003d pmask;\r\n            }\r\n        }\r\n    }\r\n    return ((_formatWriteFeatures \u003d\u003d newSet) \u0026\u0026 (_formatWriteFeaturesToChange \u003d\u003d newMask) \u0026\u0026 (_generatorFeatures \u003d\u003d parserSet) \u0026\u0026 (_generatorFeaturesToChange \u003d\u003d parserMask)) ? this : new SerializationConfig(this, _mapperFeatures, _serFeatures, parserSet, parserMask, newSet, newMask);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "withFilters",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig withFilters(com.fasterxml.jackson.databind.ser.FilterProvider)",
    "visibility": "public",
    "body": "{\r\n    return (filterProvider \u003d\u003d _filterProvider) ? this : new SerializationConfig(this, filterProvider);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  FilterProvider\n  $r2 \u003d FilterProvider _filterProvider\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r3 \u003d SerializationConfig\n  new SerializationConfig(r1, r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "withDefaultPrettyPrinter",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig withDefaultPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)",
    "visibility": "public",
    "body": "{\r\n    return (_defaultPrettyPrinter \u003d\u003d pp) ? this : new SerializationConfig(this, pp);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  PrettyPrinter\n  $r2 \u003d PrettyPrinter _defaultPrettyPrinter\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r3 \u003d SerializationConfig\n  new SerializationConfig(r0, r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "with",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig \u0027with\u0027(com.fasterxml.jackson.databind.cfg.ConstructorDetector)",
    "visibility": "public",
    "body": "{\r\n    if (_ctorDetector \u003d\u003d ctorDetector) {\r\n        return this;\r\n    }\r\n    return new SerializationConfig(this, ctorDetector);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  ConstructorDetector\n  $r2 \u003d ConstructorDetector _ctorDetector\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d SerializationConfig\n  new SerializationConfig(r0, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "constructDefaultPrettyPrinter",
    "signature": "com.fasterxml.jackson.core.PrettyPrinter constructDefaultPrettyPrinter()",
    "visibility": "public",
    "body": "{\r\n    PrettyPrinter pp \u003d _defaultPrettyPrinter;\r\n    if (pp instanceof Instantiatable\u003c?\u003e) {\r\n        pp \u003d (PrettyPrinter) ((Instantiatable\u003c?\u003e) pp).createInstance();\r\n    }\r\n    return pp;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  r3 \u003d PrettyPrinter _defaultPrettyPrinter\u003e\n  $z0 \u003d Instantiatable\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d Instantiatable) r3\n  $r2 \u003d $r1.createInstance()\n  r3 \u003d PrettyPrinter) $r2\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "initialize",
    "signature": "void initialize(com.fasterxml.jackson.core.JsonGenerator)",
    "visibility": "public",
    "body": "{\r\n    if (SerializationFeature.INDENT_OUTPUT.enabledIn(_serFeatures)) {\r\n        // but do not override an explicitly set one\r\n        if (g.getPrettyPrinter() \u003d\u003d null) {\r\n            PrettyPrinter pp \u003d constructDefaultPrettyPrinter();\r\n            if (pp !\u003d null) {\r\n                g.setPrettyPrinter(pp);\r\n            }\r\n        }\r\n    }\r\n    @SuppressWarnings(\"deprecation\")\r\n    boolean useBigDec \u003d SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_serFeatures);\r\n    int mask \u003d _generatorFeaturesToChange;\r\n    if ((mask !\u003d 0) || useBigDec) {\r\n        int newFlags \u003d _generatorFeatures;\r\n        // although deprecated, needs to be supported for now\r\n        if (useBigDec) {\r\n            int f \u003d JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN.getMask();\r\n            newFlags |\u003d f;\r\n            mask |\u003d f;\r\n        }\r\n        g.overrideStdFeatures(newFlags, mask);\r\n    }\r\n    if (_formatWriteFeaturesToChange !\u003d 0) {\r\n        g.overrideFormatFeatures(_formatWriteFeatures, _formatWriteFeaturesToChange);\r\n    }\r\n}",
    "nodes": 12,
    "edges": 18,
    "cc": 8,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B4",
      "B1 : If($r4 !\u003d null) → B2 | else → B4",
      "B2 : If(r5 \u003d\u003d null) → B3 | else → B4",
      "B4 : If($i6 !\u003d 0) → B5 | else → B6",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B9",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B8",
      "B9 : If($i9 \u003d\u003d false) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  JsonGenerator\n  $r1 \u003d SerializationFeature INDENT_OUTPUT\u003e\n  $i0 \u003d SerializationConfig: int _serFeatures\u003e\n  $z0 \u003d $r1.enabledIn($i0)\n  if ($z0 \u003d\u003d false) goto B1 else B4\n}",
      "B1 {\n  $r4 \u003d r2.getPrettyPrinter()\n  if ($r4 !\u003d null) goto B2 else B4\n}",
      "B2 {\n  r5 \u003d r0.constructDefaultPrettyPrinter()\n  if (r5 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  r2.setPrettyPrinter(r5)\n}",
      "B4 {\n  $r6 \u003d SerializationFeature WRITE_BIGDECIMAL_AS_PLAIN\u003e\n  $i5 \u003d SerializationConfig: int _serFeatures\u003e\n  $z1 \u003d $r6.enabledIn($i5)\n  $i6 \u003d SerializationConfig: int _generatorFeaturesToChange\u003e\n  i7 \u003d $i6\n  if ($i6 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  if ($z1 \u003d\u003d false) goto B6 else B9\n}",
      "B6 {\n  $i4 \u003d SerializationConfig: int _generatorFeatures\u003e\n  i8 \u003d $i4\n  if ($z1 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $r3 \u003d JsonGenerator$Feature WRITE_BIGDECIMAL_AS_PLAIN\u003e\n  i3 \u003d $r3.getMask()\n  i8 \u003d $i4 | i3\n  i7 \u003d $i6 | i3\n}",
      "B8 {\n  r2.overrideStdFeatures(i8, i7)\n}",
      "B9 {\n  $i9 \u003d SerializationConfig: int _formatWriteFeaturesToChange\u003e\n  if ($i9 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  $i2 \u003d SerializationConfig: int _formatWriteFeatures\u003e\n  $i1 \u003d SerializationConfig: int _formatWriteFeaturesToChange\u003e\n  r2.overrideFormatFeatures($i2, $i1)\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SerializationConfig#constructDefaultPrettyPrinter(...0)",
        "body": "{\r\n    PrettyPrinter pp \u003d _defaultPrettyPrinter;\r\n    if (pp instanceof Instantiatable\u003c?\u003e) {\r\n        pp \u003d (PrettyPrinter) ((Instantiatable\u003c?\u003e) pp).createInstance();\r\n    }\r\n    return pp;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "getSerializationInclusion",
    "signature": "com.fasterxml.jackson.\u0027annotation\u0027.JsonInclude$Include getSerializationInclusion()",
    "visibility": "public",
    "body": "{\r\n    JsonInclude.Include incl \u003d getDefaultPropertyInclusion().getValueInclusion();\r\n    return (incl \u003d\u003d JsonInclude.Include.USE_DEFAULTS) ? JsonInclude.Include.ALWAYS : incl;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 !\u003d $r3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  $r1 \u003d r0.getDefaultPropertyInclusion()\n  r2 \u003d $r1.getValueInclusion()\n  $r3 \u003d JsonInclude$Include USE_DEFAULTS\u003e\n  if (r2 !\u003d $r3) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d JsonInclude$Include ALWAYS\u003e\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r2\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SerializationConfig#getDefaultPropertyInclusion(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "useRootWrapping",
    "signature": "boolean useRootWrapping()",
    "visibility": "public",
    "body": "{\r\n    if (_rootName !\u003d null) {\r\n        // empty String disables wrapping; non-empty enables\r\n        return !_rootName.isEmpty();\r\n    }\r\n    return isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B5",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  $r1 \u003d PropertyName _rootName\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  $r3 \u003d PropertyName _rootName\u003e\n  $z1 \u003d $r3.isEmpty()\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r2 \u003d SerializationFeature WRAP_ROOT_VALUE\u003e\n  $z0 \u003d r0.isEnabled($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SerializationConfig#isEnabled(...1)",
        "body": "{\r\n    return (_serFeatures \u0026 feature.getMask()) !\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "isEnabled",
    "signature": "boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)",
    "visibility": "public",
    "body": "{\r\n    return (_serFeatures \u0026 feature.getMask()) !\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  SerializationFeature\n  $i0 \u003d SerializationConfig: int _serFeatures\u003e\n  $i1 \u003d r1.getMask()\n  $i2 \u003d $i0 \u0026 $i1\n  if ($i2 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "isEnabled",
    "signature": "boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature,com.fasterxml.jackson.core.JsonFactory)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003d\u003d false) → B1 | else → B5",
      "B1 : If($i5 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  JsonGenerator$Feature\n  JsonFactory\n  i0 \u003d r0.getMask()\n  $i1 \u003d SerializationConfig: int _generatorFeaturesToChange\u003e\n  $i2 \u003d $i1 \u0026 i0\n  if ($i2 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  $i3 \u003d SerializationConfig: int _generatorFeatures\u003e\n  $i4 \u003d r0.getMask()\n  $i5 \u003d $i3 \u0026 $i4\n  if ($i5 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $z0 \u003d r2.isEnabled(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "hasSerializationFeatures",
    "signature": "boolean hasSerializationFeatures(int)",
    "visibility": "public",
    "body": "{\r\n    return (_serFeatures \u0026 featureMask) \u003d\u003d featureMask;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 !\u003d i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  i0 :\u003d @parameter0: int\n  $i1 \u003d SerializationConfig: int _serFeatures\u003e\n  $i2 \u003d $i1 \u0026 i0\n  if ($i2 !\u003d i0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationConfig",
    "methodName": "getConstructorDetector",
    "signature": "com.fasterxml.jackson.databind.cfg.ConstructorDetector getConstructorDetector()",
    "visibility": "public",
    "body": "{\r\n    if (_ctorDetector \u003d\u003d null) {\r\n        return ConstructorDetector.DEFAULT;\r\n    }\r\n    return _ctorDetector;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  $r1 \u003d ConstructorDetector _ctorDetector\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d ConstructorDetector DEFAULT\u003e\n  return\n}",
      "B2 {\n  $r2 \u003d ConstructorDetector _ctorDetector\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.SerializationFeature",
    "methodName": "enabledIn",
    "signature": "boolean enabledIn(int)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializationFeature\n  i0 :\u003d @parameter0: int\n  $i1 \u003d SerializationFeature: int _mask\u003e\n  $i2 \u003d i0 \u0026 $i1\n  if ($i2 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ArrayType",
    "methodName": "withTypeHandler",
    "signature": "com.fasterxml.jackson.databind.type.ArrayType withTypeHandler(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (h \u003d\u003d _typeHandler) {\r\n        return this;\r\n    }\r\n    return new ArrayType(_componentType, _bindings, _emptyArray, _valueHandler, h, _asStatic);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayType\n  Object\n  $r2 \u003d Object _typeHandler\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d ArrayType\n  $r7 \u003d JavaType _componentType\u003e\n  $r6 \u003d TypeBindings _bindings\u003e\n  $r5 \u003d Object _emptyArray\u003e\n  $r4 \u003d Object _valueHandler\u003e\n  $z0 \u003d ArrayType: boolean _asStatic\u003e\n  new ArrayType($r7, $r6, $r5, $r4, r0, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ArrayType",
    "methodName": "withContentTypeHandler",
    "signature": "com.fasterxml.jackson.databind.type.ArrayType withContentTypeHandler(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (h \u003d\u003d _componentType.\u003cObject\u003egetTypeHandler()) {\r\n        return this;\r\n    }\r\n    return new ArrayType(_componentType.withTypeHandler(h), _bindings, _emptyArray, _valueHandler, _typeHandler, _asStatic);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayType\n  Object\n  $r2 \u003d JavaType _componentType\u003e\n  $r3 \u003d $r2.getTypeHandler()\n  if (r0 !\u003d $r3) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d ArrayType\n  $r5 \u003d JavaType _componentType\u003e\n  $r10 \u003d $r5.withTypeHandler(r0)\n  $r9 \u003d TypeBindings _bindings\u003e\n  $r8 \u003d Object _emptyArray\u003e\n  $r7 \u003d Object _valueHandler\u003e\n  $r6 \u003d Object _typeHandler\u003e\n  $z0 \u003d ArrayType: boolean _asStatic\u003e\n  new ArrayType($r10, $r9, $r8, $r7, $r6, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ArrayType",
    "methodName": "withValueHandler",
    "signature": "com.fasterxml.jackson.databind.type.ArrayType withValueHandler(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (h \u003d\u003d _valueHandler) {\r\n        return this;\r\n    }\r\n    return new ArrayType(_componentType, _bindings, _emptyArray, h, _typeHandler, _asStatic);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayType\n  Object\n  $r2 \u003d Object _valueHandler\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d ArrayType\n  $r7 \u003d JavaType _componentType\u003e\n  $r6 \u003d TypeBindings _bindings\u003e\n  $r5 \u003d Object _emptyArray\u003e\n  $r4 \u003d Object _typeHandler\u003e\n  $z0 \u003d ArrayType: boolean _asStatic\u003e\n  new ArrayType($r7, $r6, $r5, r0, $r4, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ArrayType",
    "methodName": "withContentValueHandler",
    "signature": "com.fasterxml.jackson.databind.type.ArrayType withContentValueHandler(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (h \u003d\u003d _componentType.\u003cObject\u003egetValueHandler()) {\r\n        return this;\r\n    }\r\n    return new ArrayType(_componentType.withValueHandler(h), _bindings, _emptyArray, _valueHandler, _typeHandler, _asStatic);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayType\n  Object\n  $r2 \u003d JavaType _componentType\u003e\n  $r3 \u003d $r2.getValueHandler()\n  if (r0 !\u003d $r3) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d ArrayType\n  $r5 \u003d JavaType _componentType\u003e\n  $r10 \u003d $r5.withValueHandler(r0)\n  $r9 \u003d TypeBindings _bindings\u003e\n  $r8 \u003d Object _emptyArray\u003e\n  $r7 \u003d Object _valueHandler\u003e\n  $r6 \u003d Object _typeHandler\u003e\n  $z0 \u003d ArrayType: boolean _asStatic\u003e\n  new ArrayType($r10, $r9, $r8, $r7, $r6, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ArrayType",
    "methodName": "withStaticTyping",
    "signature": "com.fasterxml.jackson.databind.type.ArrayType withStaticTyping()",
    "visibility": "public",
    "body": "{\r\n    if (_asStatic) {\r\n        return this;\r\n    }\r\n    return new ArrayType(_componentType.withStaticTyping(), _bindings, _emptyArray, _valueHandler, _typeHandler, true);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayType\n  $z0 \u003d ArrayType: boolean _asStatic\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d ArrayType\n  $r2 \u003d JavaType _componentType\u003e\n  $r7 \u003d $r2.withStaticTyping()\n  $r6 \u003d TypeBindings _bindings\u003e\n  $r5 \u003d Object _emptyArray\u003e\n  $r4 \u003d Object _valueHandler\u003e\n  $r3 \u003d Object _typeHandler\u003e\n  new ArrayType($r7, $r6, $r5, $r4, $r3, 1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ArrayType",
    "methodName": "hasHandlers",
    "signature": "boolean hasHandlers()",
    "visibility": "public",
    "body": "{\r\n    return super.hasHandlers() || _componentType.hasHandlers();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ArrayType\n  $z0 \u003d r0.hasHandlers()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d JavaType _componentType\u003e\n  $z1 \u003d $r1.hasHandlers()\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ArrayType",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    if (o.getClass() !\u003d getClass())\r\n        return false;\r\n    ArrayType other \u003d (ArrayType) o;\r\n    return _componentType.equals(other._componentType);\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($r3 \u003d\u003d $r2) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  ArrayType\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d r0.getClass()\n  $r2 \u003d r1.getClass()\n  if ($r3 \u003d\u003d $r2) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  r4 \u003d ArrayType) r0\n  $r6 \u003d JavaType _componentType\u003e\n  $r5 \u003d JavaType _componentType\u003e\n  $z0 \u003d $r6.equals($r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayType#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ClassKey",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    if (o.getClass() !\u003d getClass())\r\n        return false;\r\n    ClassKey other \u003d (ClassKey) o;\r\n    /* Is it possible to have different Class object for same name + class loader combo?\r\n         * Let\u0027s assume answer is no: if this is wrong, will need to uncomment following functionality\r\n         */\r\n    /*\r\n        return (other._className.equals(_className))\r\n            \u0026\u0026 (other._class.getClassLoader() \u003d\u003d _class.getClassLoader());\r\n        */\r\n    return other._class \u003d\u003d _class;\r\n}",
    "nodes": 10,
    "edges": 10,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($r3 \u003d\u003d $r2) → B5 | else → B6",
      "B6 : If($r6 !\u003d $r5) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  ClassKey\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d r0.getClass()\n  $r2 \u003d r1.getClass()\n  if ($r3 \u003d\u003d $r2) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  r4 \u003d ClassKey) r0\n  $r6 \u003d Class _class\u003e\n  $r5 \u003d Class _class\u003e\n  if ($r6 !\u003d $r5) goto B7 else B8\n}",
      "B7 {\n  $z0 \u003d 1\n  goto B9\n}",
      "B8 {\n  $z0 \u003d 0\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassKey#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ClassStack",
    "methodName": "addSelfReference",
    "signature": "void addSelfReference(com.fasterxml.jackson.databind.type.ResolvedRecursiveType)",
    "visibility": "public",
    "body": "{\r\n    if (_selfRefs \u003d\u003d null) {\r\n        _selfRefs \u003d new ArrayList\u003cResolvedRecursiveType\u003e();\r\n    }\r\n    _selfRefs.add(ref);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ClassStack\n  ResolvedRecursiveType\n  $r1 \u003d ArrayList _selfRefs\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d ArrayList\n  new ArrayList()\n  ArrayList _selfRefs\u003e \u003d $r4\n}",
      "B2 {\n  $r3 \u003d ArrayList _selfRefs\u003e\n  $r3.add(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ClassStack",
    "methodName": "resolveSelfReferences",
    "signature": "void resolveSelfReferences(com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    if (_selfRefs !\u003d null) {\r\n        for (ResolvedRecursiveType ref : _selfRefs) {\r\n            ref.setReference(resolved);\r\n        }\r\n    }\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B4",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ClassStack\n  JavaType\n  $r1 \u003d ArrayList _selfRefs\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r2 \u003d ArrayList _selfRefs\u003e\n  r3 \u003d $r2.iterator()\n}",
      "B2 {\n  $z0 \u003d r3.hasNext()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d r3.next()\n  r5 \u003d ResolvedRecursiveType) $r4\n  r5.setReference(r6)\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ClassStack",
    "methodName": "find",
    "signature": "com.fasterxml.jackson.databind.type.ClassStack find(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (_current \u003d\u003d cls)\r\n        return this;\r\n    for (ClassStack curr \u003d _parent; curr !\u003d null; curr \u003d curr._parent) {\r\n        if (curr._current \u003d\u003d cls) {\r\n            return curr;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2",
      "B3 : If(r4 \u003d\u003d null) → B4 | else → B7",
      "B4 : If($r3 !\u003d r1) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  ClassStack\n  Class\n  $r2 \u003d Class _current\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r4 \u003d ClassStack _parent\u003e\n}",
      "B3 {\n  if (r4 \u003d\u003d null) goto B4 else B7\n}",
      "B4 {\n  $r3 \u003d Class _current\u003e\n  if ($r3 !\u003d r1) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  r4 \u003d ClassStack _parent\u003e\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ClassStack",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    StringBuilder sb \u003d new StringBuilder();\r\n    sb.append(\"[ClassStack (self-refs: \").append((_selfRefs \u003d\u003d null) ? \"0\" : String.valueOf(_selfRefs.size())).append(\u0027)\u0027);\r\n    for (ClassStack curr \u003d this; curr !\u003d null; curr \u003d curr._parent) {\r\n        sb.append(\u0027 \u0027).append(curr._current.getName());\r\n    }\r\n    sb.append(\u0027]\u0027);\r\n    return sb.toString();\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B2",
      "B4 : If(r11 \u003d\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  ClassStack\n  $r0 \u003d StringBuilder\n  new StringBuilder()\n  $r4 \u003d $r0.append(\"ClassStack (self-refs: \")\n  $r2 \u003d ArrayList _selfRefs\u003e\n  if ($r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d \"0\"\n  goto B3\n}",
      "B2 {\n  $r3 \u003d ArrayList _selfRefs\u003e\n  $i0 \u003d $r3.size()\n  $r10 \u003d String.valueOf($i0)\n}",
      "B3 {\n  $r5 \u003d $r4.append($r10)\n  $r5.append(41)\n  r11 \u003d r1\n}",
      "B4 {\n  if (r11 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r9 \u003d $r0.append(32)\n  $r7 \u003d Class _current\u003e\n  $r8 \u003d $r7.getName()\n  $r9.append($r8)\n  r11 \u003d ClassStack _parent\u003e\n  goto B4\n}",
      "B6 {\n  $r0.append(93)\n  $r6 \u003d $r0.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "methodName": "construct",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType construct(java.lang.Class,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    // First: may need to fabricate TypeBindings (needed for refining into\r\n    // concrete collection types, as per [databind#1102])\r\n    TypeVariable\u003c?\u003e[] vars \u003d rawType.getTypeParameters();\r\n    TypeBindings bindings;\r\n    if ((vars \u003d\u003d null) || (vars.length !\u003d 1)) {\r\n        bindings \u003d TypeBindings.emptyBindings();\r\n    } else {\r\n        bindings \u003d TypeBindings.create(rawType, elemT);\r\n    }\r\n    return new CollectionLikeType(rawType, bindings, _bogusSuperClass(rawType), null, elemT, null, null, false);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($i0 \u003d\u003d 1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Class\n  JavaType\n  r1 \u003d r0.getTypeParameters()\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d lengthof r1\n  if ($i0 \u003d\u003d 1) goto B2 else B3\n}",
      "B2 {\n  r5 \u003d TypeBindings.emptyBindings()\n  goto B4\n}",
      "B3 {\n  r5 \u003d TypeBindings.create(r0, r3)\n}",
      "B4 {\n  $r2 \u003d CollectionLikeType\n  $r4 \u003d CollectionLikeType._bogusSuperClass(r0)\n  new CollectionLikeType(r0, r5, $r4, null, r3, null, null, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionLikeType#_bogusSuperClass(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "methodName": "upgradeFrom",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType upgradeFrom(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    // 19-Oct-2015, tatu: Not sure if and how other types could be used as base;\r\n    //    will cross that bridge if and when need be\r\n    if (baseType instanceof TypeBase) {\r\n        return new CollectionLikeType((TypeBase) baseType, elementType);\r\n    }\r\n    throw new IllegalArgumentException(\"Cannot upgrade from an instance of \" + baseType.getClass());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JavaType\n  JavaType\n  $z0 \u003d TypeBase\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d CollectionLikeType\n  $r7 \u003d TypeBase) r0\n  new CollectionLikeType($r7, r6)\n  return\n}",
      "B2 {\n  $r1 \u003d IllegalArgumentException\n  $r2 \u003d r0.getClass()\n  $r3 \u003d String.valueOf($r2)\n  $r4 \u003d dynInvoke makeConcatWithConstants($r3)\n  new IllegalArgumentException($r4)\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "methodName": "withContentType",
    "signature": "com.fasterxml.jackson.databind.JavaType withContentType(com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    if (_elementType \u003d\u003d contentType) {\r\n        return this;\r\n    }\r\n    return new CollectionLikeType(_class, _bindings, _superClass, _superInterfaces, contentType, _valueHandler, _typeHandler, _asStatic);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CollectionLikeType\n  JavaType\n  $r2 \u003d JavaType _elementType\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d CollectionLikeType\n  $r9 \u003d Class _class\u003e\n  $r8 \u003d TypeBindings _bindings\u003e\n  $r7 \u003d JavaType _superClass\u003e\n  $r6 \u003d JavaType[] _superInterfaces\u003e\n  $r5 \u003d Object _valueHandler\u003e\n  $r4 \u003d Object _typeHandler\u003e\n  $z0 \u003d CollectionLikeType: boolean _asStatic\u003e\n  new CollectionLikeType($r9, $r8, $r7, $r6, r1, $r5, $r4, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "methodName": "withHandlersFrom",
    "signature": "com.fasterxml.jackson.databind.JavaType withHandlersFrom(com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    JavaType type \u003d super.withHandlersFrom(src);\r\n    JavaType srcCt \u003d src.getContentType();\r\n    if (srcCt !\u003d null) {\r\n        JavaType ct \u003d _elementType.withHandlersFrom(srcCt);\r\n        if (ct !\u003d _elementType) {\r\n            type \u003d type.withContentType(ct);\r\n        }\r\n    }\r\n    return type;\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r4 \u003d\u003d $r5) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CollectionLikeType\n  JavaType\n  r6 \u003d r0.withHandlersFrom(r1)\n  r2 \u003d r1.getContentType()\n  if (r2 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r3 \u003d JavaType _elementType\u003e\n  r4 \u003d $r3.withHandlersFrom(r2)\n  $r5 \u003d JavaType _elementType\u003e\n  if (r4 \u003d\u003d $r5) goto B2 else B3\n}",
      "B2 {\n  r6 \u003d r6.withContentType(r4)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "methodName": "withStaticTyping",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType withStaticTyping()",
    "visibility": "public",
    "body": "{\r\n    if (_asStatic) {\r\n        return this;\r\n    }\r\n    return new CollectionLikeType(_class, _bindings, _superClass, _superInterfaces, _elementType.withStaticTyping(), _valueHandler, _typeHandler, true);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CollectionLikeType\n  $z0 \u003d CollectionLikeType: boolean _asStatic\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d CollectionLikeType\n  $r3 \u003d Class _class\u003e\n  $r4 \u003d TypeBindings _bindings\u003e\n  $r5 \u003d JavaType _superClass\u003e\n  $r6 \u003d JavaType[] _superInterfaces\u003e\n  $r2 \u003d JavaType _elementType\u003e\n  $r9 \u003d $r2.withStaticTyping()\n  $r8 \u003d Object _valueHandler\u003e\n  $r7 \u003d Object _typeHandler\u003e\n  new CollectionLikeType($r3, $r4, $r5, $r6, $r9, $r8, $r7, 1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "methodName": "hasHandlers",
    "signature": "boolean hasHandlers()",
    "visibility": "public",
    "body": "{\r\n    return super.hasHandlers() || _elementType.hasHandlers();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CollectionLikeType\n  $z0 \u003d r0.hasHandlers()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d JavaType _elementType\u003e\n  $z1 \u003d $r1.hasHandlers()\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    if (o.getClass() !\u003d getClass())\r\n        return false;\r\n    CollectionLikeType other \u003d (CollectionLikeType) o;\r\n    return (_class \u003d\u003d other._class) \u0026\u0026 _elementType.equals(other._elementType);\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($r3 \u003d\u003d $r2) → B5 | else → B6",
      "B6 : If($r6 !\u003d $r5) → B7 | else → B9",
      "B7 : If($z0 \u003d\u003d false) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  CollectionLikeType\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d r0.getClass()\n  $r2 \u003d r1.getClass()\n  if ($r3 \u003d\u003d $r2) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  r4 \u003d CollectionLikeType) r0\n  $r6 \u003d Class _class\u003e\n  $r5 \u003d Class _class\u003e\n  if ($r6 !\u003d $r5) goto B7 else B9\n}",
      "B7 {\n  $r8 \u003d JavaType _elementType\u003e\n  $r7 \u003d JavaType _elementType\u003e\n  $z0 \u003d $r8.equals($r7)\n  if ($z0 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $z1 \u003d 1\n  goto B10\n}",
      "B9 {\n  $z1 \u003d 0\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionLikeType#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.CollectionType",
    "methodName": "construct",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType construct(java.lang.Class,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    // First: may need to fabricate TypeBindings (needed for refining into\r\n    // concrete collection types, as per [databind#1102])\r\n    TypeVariable\u003c?\u003e[] vars \u003d rawType.getTypeParameters();\r\n    TypeBindings bindings;\r\n    if ((vars \u003d\u003d null) || (vars.length !\u003d 1)) {\r\n        bindings \u003d TypeBindings.emptyBindings();\r\n    } else {\r\n        bindings \u003d TypeBindings.create(rawType, elemT);\r\n    }\r\n    return new CollectionType(rawType, bindings, // !!! TODO: Wrong, does have supertypes, but:\r\n    _bogusSuperClass(rawType), null, elemT, null, null, false);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($i0 \u003d\u003d 1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Class\n  JavaType\n  r1 \u003d r0.getTypeParameters()\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d lengthof r1\n  if ($i0 \u003d\u003d 1) goto B2 else B3\n}",
      "B2 {\n  r5 \u003d TypeBindings.emptyBindings()\n  goto B4\n}",
      "B3 {\n  r5 \u003d TypeBindings.create(r0, r3)\n}",
      "B4 {\n  $r2 \u003d CollectionType\n  $r4 \u003d CollectionType._bogusSuperClass(r0)\n  new CollectionType(r0, r5, $r4, null, r3, null, null, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionType#_bogusSuperClass(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.CollectionType",
    "methodName": "withContentType",
    "signature": "com.fasterxml.jackson.databind.JavaType withContentType(com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    if (_elementType \u003d\u003d contentType) {\r\n        return this;\r\n    }\r\n    return new CollectionType(_class, _bindings, _superClass, _superInterfaces, contentType, _valueHandler, _typeHandler, _asStatic);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CollectionType\n  JavaType\n  $r2 \u003d JavaType _elementType\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d CollectionType\n  $r9 \u003d Class _class\u003e\n  $r8 \u003d TypeBindings _bindings\u003e\n  $r7 \u003d JavaType _superClass\u003e\n  $r6 \u003d JavaType[] _superInterfaces\u003e\n  $r5 \u003d Object _valueHandler\u003e\n  $r4 \u003d Object _typeHandler\u003e\n  $z0 \u003d CollectionType: boolean _asStatic\u003e\n  new CollectionType($r9, $r8, $r7, $r6, r1, $r5, $r4, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.CollectionType",
    "methodName": "withStaticTyping",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType withStaticTyping()",
    "visibility": "public",
    "body": "{\r\n    if (_asStatic) {\r\n        return this;\r\n    }\r\n    return new CollectionType(_class, _bindings, _superClass, _superInterfaces, _elementType.withStaticTyping(), _valueHandler, _typeHandler, true);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CollectionType\n  $z0 \u003d CollectionType: boolean _asStatic\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d CollectionType\n  $r3 \u003d Class _class\u003e\n  $r4 \u003d TypeBindings _bindings\u003e\n  $r5 \u003d JavaType _superClass\u003e\n  $r6 \u003d JavaType[] _superInterfaces\u003e\n  $r2 \u003d JavaType _elementType\u003e\n  $r9 \u003d $r2.withStaticTyping()\n  $r8 \u003d Object _valueHandler\u003e\n  $r7 \u003d Object _typeHandler\u003e\n  new CollectionType($r3, $r4, $r5, $r6, $r9, $r8, $r7, 1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.IterationType",
    "methodName": "upgradeFrom",
    "signature": "com.fasterxml.jackson.databind.type.IterationType upgradeFrom(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(iteratedType);\r\n    // 19-Oct-2015, tatu: Not sure if and how other types could be used as base;\r\n    //    will cross that bridge if and when need be\r\n    if (baseType instanceof TypeBase) {\r\n        return new IterationType((TypeBase) baseType, iteratedType);\r\n    }\r\n    throw new IllegalArgumentException(\"Cannot upgrade from an instance of \" + baseType.getClass());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JavaType\n  JavaType\n  Objects.requireNonNull(r0)\n  $z0 \u003d TypeBase\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d IterationType\n  $r7 \u003d TypeBase) r1\n  new IterationType($r7, r0)\n  return\n}",
      "B2 {\n  $r2 \u003d IllegalArgumentException\n  $r3 \u003d r1.getClass()\n  $r4 \u003d String.valueOf($r3)\n  $r5 \u003d dynInvoke makeConcatWithConstants($r4)\n  new IllegalArgumentException($r5)\n  throw $r2\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.IterationType",
    "methodName": "withContentType",
    "signature": "com.fasterxml.jackson.databind.JavaType withContentType(com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    if (_iteratedType \u003d\u003d contentType) {\r\n        return this;\r\n    }\r\n    return new IterationType(_class, _bindings, _superClass, _superInterfaces, contentType, _valueHandler, _typeHandler, _asStatic);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  IterationType\n  JavaType\n  $r2 \u003d JavaType _iteratedType\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d IterationType\n  $r9 \u003d Class _class\u003e\n  $r8 \u003d TypeBindings _bindings\u003e\n  $r7 \u003d JavaType _superClass\u003e\n  $r6 \u003d JavaType[] _superInterfaces\u003e\n  $r5 \u003d Object _valueHandler\u003e\n  $r4 \u003d Object _typeHandler\u003e\n  $z0 \u003d IterationType: boolean _asStatic\u003e\n  new IterationType($r9, $r8, $r7, $r6, r1, $r5, $r4, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.IterationType",
    "methodName": "withTypeHandler",
    "signature": "com.fasterxml.jackson.databind.type.IterationType withTypeHandler(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (h \u003d\u003d _typeHandler) {\r\n        return this;\r\n    }\r\n    return new IterationType(_class, _bindings, _superClass, _superInterfaces, _iteratedType, _valueHandler, h, _asStatic);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  IterationType\n  Object\n  $r2 \u003d Object _typeHandler\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d IterationType\n  $r9 \u003d Class _class\u003e\n  $r8 \u003d TypeBindings _bindings\u003e\n  $r7 \u003d JavaType _superClass\u003e\n  $r6 \u003d JavaType[] _superInterfaces\u003e\n  $r5 \u003d JavaType _iteratedType\u003e\n  $r4 \u003d Object _valueHandler\u003e\n  $z0 \u003d IterationType: boolean _asStatic\u003e\n  new IterationType($r9, $r8, $r7, $r6, $r5, $r4, r0, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.IterationType",
    "methodName": "withContentTypeHandler",
    "signature": "com.fasterxml.jackson.databind.type.IterationType withContentTypeHandler(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (h \u003d\u003d _iteratedType.\u003cObject\u003egetTypeHandler()) {\r\n        return this;\r\n    }\r\n    return new IterationType(_class, _bindings, _superClass, _superInterfaces, _iteratedType.withTypeHandler(h), _valueHandler, _typeHandler, _asStatic);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  IterationType\n  Object\n  $r2 \u003d JavaType _iteratedType\u003e\n  $r3 \u003d $r2.getTypeHandler()\n  if (r0 !\u003d $r3) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d IterationType\n  $r6 \u003d Class _class\u003e\n  $r7 \u003d TypeBindings _bindings\u003e\n  $r8 \u003d JavaType _superClass\u003e\n  $r9 \u003d JavaType[] _superInterfaces\u003e\n  $r5 \u003d JavaType _iteratedType\u003e\n  $r12 \u003d $r5.withTypeHandler(r0)\n  $r11 \u003d Object _valueHandler\u003e\n  $r10 \u003d Object _typeHandler\u003e\n  $z0 \u003d IterationType: boolean _asStatic\u003e\n  new IterationType($r6, $r7, $r8, $r9, $r12, $r11, $r10, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.IterationType",
    "methodName": "withValueHandler",
    "signature": "com.fasterxml.jackson.databind.type.IterationType withValueHandler(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (h \u003d\u003d _valueHandler) {\r\n        return this;\r\n    }\r\n    return new IterationType(_class, _bindings, _superClass, _superInterfaces, _iteratedType, h, _typeHandler, _asStatic);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  IterationType\n  Object\n  $r2 \u003d Object _valueHandler\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d IterationType\n  $r9 \u003d Class _class\u003e\n  $r8 \u003d TypeBindings _bindings\u003e\n  $r7 \u003d JavaType _superClass\u003e\n  $r6 \u003d JavaType[] _superInterfaces\u003e\n  $r5 \u003d JavaType _iteratedType\u003e\n  $r4 \u003d Object _typeHandler\u003e\n  $z0 \u003d IterationType: boolean _asStatic\u003e\n  new IterationType($r9, $r8, $r7, $r6, $r5, r0, $r4, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.IterationType",
    "methodName": "withContentValueHandler",
    "signature": "com.fasterxml.jackson.databind.type.IterationType withContentValueHandler(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (h \u003d\u003d _iteratedType.\u003cObject\u003egetValueHandler()) {\r\n        return this;\r\n    }\r\n    return new IterationType(_class, _bindings, _superClass, _superInterfaces, _iteratedType.withValueHandler(h), _valueHandler, _typeHandler, _asStatic);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  IterationType\n  Object\n  $r2 \u003d JavaType _iteratedType\u003e\n  $r3 \u003d $r2.getValueHandler()\n  if (r0 !\u003d $r3) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d IterationType\n  $r6 \u003d Class _class\u003e\n  $r7 \u003d TypeBindings _bindings\u003e\n  $r8 \u003d JavaType _superClass\u003e\n  $r9 \u003d JavaType[] _superInterfaces\u003e\n  $r5 \u003d JavaType _iteratedType\u003e\n  $r12 \u003d $r5.withValueHandler(r0)\n  $r11 \u003d Object _valueHandler\u003e\n  $r10 \u003d Object _typeHandler\u003e\n  $z0 \u003d IterationType: boolean _asStatic\u003e\n  new IterationType($r6, $r7, $r8, $r9, $r12, $r11, $r10, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.IterationType",
    "methodName": "withStaticTyping",
    "signature": "com.fasterxml.jackson.databind.type.IterationType withStaticTyping()",
    "visibility": "public",
    "body": "{\r\n    if (_asStatic) {\r\n        return this;\r\n    }\r\n    return new IterationType(_class, _bindings, _superClass, _superInterfaces, _iteratedType.withStaticTyping(), _valueHandler, _typeHandler, true);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  IterationType\n  $z0 \u003d IterationType: boolean _asStatic\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d IterationType\n  $r3 \u003d Class _class\u003e\n  $r4 \u003d TypeBindings _bindings\u003e\n  $r5 \u003d JavaType _superClass\u003e\n  $r6 \u003d JavaType[] _superInterfaces\u003e\n  $r2 \u003d JavaType _iteratedType\u003e\n  $r9 \u003d $r2.withStaticTyping()\n  $r8 \u003d Object _valueHandler\u003e\n  $r7 \u003d Object _typeHandler\u003e\n  new IterationType($r3, $r4, $r5, $r6, $r9, $r8, $r7, 1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.LogicalType",
    "methodName": "fromClass",
    "signature": "com.fasterxml.jackson.databind.type.LogicalType fromClass(java.lang.Class,com.fasterxml.jackson.databind.type.LogicalType)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 13,
    "edges": 12,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B6",
      "B3 : If(r0 !\u003d class \"[B\") → B4 | else → B5",
      "B6 : If($z2 \u003d\u003d false) → B7 | else → B8",
      "B8 : If($z3 \u003d\u003d false) → B9 | else → B10",
      "B10 : If(r0 !\u003d class \"Ljava/lang/String;\") → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  Class\n  LogicalType\n  $z0 \u003d r0.isEnum()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d LogicalType Enum\u003e\n  return\n}",
      "B2 {\n  $z1 \u003d r0.isArray()\n  if ($z1 \u003d\u003d false) goto B3 else B6\n}",
      "B3 {\n  if (r0 !\u003d class \"[B\") goto B4 else B5\n}",
      "B4 {\n  $r8 \u003d LogicalType Binary\u003e\n  return\n}",
      "B5 {\n  $r7 \u003d LogicalType Array\u003e\n  return\n}",
      "B6 {\n  $r1 \u003d class \"Ljava/util/Collection;\"\n  $z2 \u003d $r1.isAssignableFrom(r0)\n  if ($z2 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $r6 \u003d LogicalType Collection\u003e\n  return\n}",
      "B8 {\n  $r2 \u003d class \"Ljava/util/Map;\"\n  $z3 \u003d $r2.isAssignableFrom(r0)\n  if ($z3 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r5 \u003d LogicalType Map\u003e\n  return\n}",
      "B10 {\n  if (r0 !\u003d class \"Ljava/lang/String;\") goto B11 else B12\n}",
      "B11 {\n  $r4 \u003d LogicalType Textual\u003e\n  return\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.MapLikeType",
    "methodName": "upgradeFrom",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType upgradeFrom(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    // 19-Oct-2015, tatu: Not sure if and how other types could be used as\r\n    // base;\r\n    // will cross that bridge if and when need be\r\n    if (baseType instanceof TypeBase) {\r\n        return new MapLikeType((TypeBase) baseType, keyT, valueT);\r\n    }\r\n    throw new IllegalArgumentException(\"Cannot upgrade from an instance of \" + baseType.getClass());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JavaType\n  JavaType\n  JavaType\n  $z0 \u003d TypeBase\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d MapLikeType\n  $r8 \u003d TypeBase) r0\n  new MapLikeType($r8, r6, r7)\n  return\n}",
      "B2 {\n  $r1 \u003d IllegalArgumentException\n  $r2 \u003d r0.getClass()\n  $r3 \u003d String.valueOf($r2)\n  $r4 \u003d dynInvoke makeConcatWithConstants($r3)\n  new IllegalArgumentException($r4)\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.MapLikeType",
    "methodName": "construct",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType construct(java.lang.Class,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    // First: may need to fabricate TypeBindings (needed for refining into\r\n    // concrete collection types, as per [databind#1102])\r\n    TypeVariable\u003c?\u003e[] vars \u003d rawType.getTypeParameters();\r\n    TypeBindings bindings;\r\n    if ((vars \u003d\u003d null) || (vars.length !\u003d 2)) {\r\n        bindings \u003d TypeBindings.emptyBindings();\r\n    } else {\r\n        bindings \u003d TypeBindings.create(rawType, keyT, valueT);\r\n    }\r\n    return new MapLikeType(rawType, bindings, _bogusSuperClass(rawType), null, keyT, valueT, null, null, false);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($i0 \u003d\u003d 2) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Class\n  JavaType\n  JavaType\n  r1 \u003d r0.getTypeParameters()\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d lengthof r1\n  if ($i0 \u003d\u003d 2) goto B2 else B3\n}",
      "B2 {\n  r6 \u003d TypeBindings.emptyBindings()\n  goto B4\n}",
      "B3 {\n  r6 \u003d TypeBindings.create(r0, r3, r4)\n}",
      "B4 {\n  $r2 \u003d MapLikeType\n  $r5 \u003d MapLikeType._bogusSuperClass(r0)\n  new MapLikeType(r0, r6, $r5, null, r3, r4, null, null, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapLikeType#_bogusSuperClass(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.MapLikeType",
    "methodName": "withKeyType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType withKeyType(com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    if (keyType \u003d\u003d _keyType) {\r\n        return this;\r\n    }\r\n    return new MapLikeType(_class, _bindings, _superClass, _superInterfaces, keyType, _valueType, _valueHandler, _typeHandler, _asStatic);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MapLikeType\n  JavaType\n  $r2 \u003d JavaType _keyType\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d MapLikeType\n  $r10 \u003d Class _class\u003e\n  $r9 \u003d TypeBindings _bindings\u003e\n  $r8 \u003d JavaType _superClass\u003e\n  $r7 \u003d JavaType[] _superInterfaces\u003e\n  $r6 \u003d JavaType _valueType\u003e\n  $r5 \u003d Object _valueHandler\u003e\n  $r4 \u003d Object _typeHandler\u003e\n  $z0 \u003d MapLikeType: boolean _asStatic\u003e\n  new MapLikeType($r10, $r9, $r8, $r7, r0, $r6, $r5, $r4, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.MapLikeType",
    "methodName": "withContentType",
    "signature": "com.fasterxml.jackson.databind.JavaType withContentType(com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    if (_valueType \u003d\u003d contentType) {\r\n        return this;\r\n    }\r\n    return new MapLikeType(_class, _bindings, _superClass, _superInterfaces, _keyType, contentType, _valueHandler, _typeHandler, _asStatic);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MapLikeType\n  JavaType\n  $r2 \u003d JavaType _valueType\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d MapLikeType\n  $r10 \u003d Class _class\u003e\n  $r9 \u003d TypeBindings _bindings\u003e\n  $r8 \u003d JavaType _superClass\u003e\n  $r7 \u003d JavaType[] _superInterfaces\u003e\n  $r6 \u003d JavaType _keyType\u003e\n  $r5 \u003d Object _valueHandler\u003e\n  $r4 \u003d Object _typeHandler\u003e\n  $z0 \u003d MapLikeType: boolean _asStatic\u003e\n  new MapLikeType($r10, $r9, $r8, $r7, $r6, r1, $r5, $r4, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.MapLikeType",
    "methodName": "withHandlersFrom",
    "signature": "com.fasterxml.jackson.databind.JavaType withHandlersFrom(com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    JavaType type \u003d super.withHandlersFrom(src);\r\n    JavaType srcKeyType \u003d src.getKeyType();\r\n    // \"withKeyType()\" not part of JavaType, hence must verify:\r\n    if (type instanceof MapLikeType) {\r\n        if (srcKeyType !\u003d null) {\r\n            JavaType ct \u003d _keyType.withHandlersFrom(srcKeyType);\r\n            if (ct !\u003d _keyType) {\r\n                type \u003d ((MapLikeType) type).withKeyType(ct);\r\n            }\r\n        }\r\n    }\r\n    JavaType srcCt \u003d src.getContentType();\r\n    if (srcCt !\u003d null) {\r\n        JavaType ct \u003d _valueType.withHandlersFrom(srcCt);\r\n        if (ct !\u003d _valueType) {\r\n            type \u003d type.withContentType(ct);\r\n        }\r\n    }\r\n    return type;\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B4",
      "B1 : If(r2 \u003d\u003d null) → B2 | else → B4",
      "B2 : If(r10 \u003d\u003d $r7) → B3 | else → B4",
      "B4 : If($r11 \u003d\u003d null) → B5 | else → B7",
      "B5 : If(r4 \u003d\u003d $r5) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  MapLikeType\n  JavaType\n  r9 \u003d r0.withHandlersFrom(r1)\n  r2 \u003d r1.getKeyType()\n  $z0 \u003d MapLikeType\n  if ($z0 \u003d\u003d false) goto B1 else B4\n}",
      "B1 {\n  if (r2 \u003d\u003d null) goto B2 else B4\n}",
      "B2 {\n  $r6 \u003d JavaType _keyType\u003e\n  r10 \u003d $r6.withHandlersFrom(r2)\n  $r7 \u003d JavaType _keyType\u003e\n  if (r10 \u003d\u003d $r7) goto B3 else B4\n}",
      "B3 {\n  $r8 \u003d MapLikeType) r9\n  r9 \u003d $r8.withKeyType(r10)\n}",
      "B4 {\n  $r11 \u003d r1.getContentType()\n  if ($r11 \u003d\u003d null) goto B5 else B7\n}",
      "B5 {\n  $r3 \u003d JavaType _valueType\u003e\n  r4 \u003d $r3.withHandlersFrom($r11)\n  $r5 \u003d JavaType _valueType\u003e\n  if (r4 \u003d\u003d $r5) goto B6 else B7\n}",
      "B6 {\n  r9 \u003d r9.withContentType(r4)\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.MapLikeType",
    "methodName": "withStaticTyping",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType withStaticTyping()",
    "visibility": "public",
    "body": "{\r\n    if (_asStatic) {\r\n        return this;\r\n    }\r\n    return new MapLikeType(_class, _bindings, _superClass, _superInterfaces, _keyType, _valueType.withStaticTyping(), _valueHandler, _typeHandler, true);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MapLikeType\n  $z0 \u003d MapLikeType: boolean _asStatic\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d MapLikeType\n  $r3 \u003d Class _class\u003e\n  $r4 \u003d TypeBindings _bindings\u003e\n  $r5 \u003d JavaType _superClass\u003e\n  $r6 \u003d JavaType[] _superInterfaces\u003e\n  $r7 \u003d JavaType _keyType\u003e\n  $r2 \u003d JavaType _valueType\u003e\n  $r10 \u003d $r2.withStaticTyping()\n  $r9 \u003d Object _valueHandler\u003e\n  $r8 \u003d Object _typeHandler\u003e\n  new MapLikeType($r3, $r4, $r5, $r6, $r7, $r10, $r9, $r8, 1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.MapLikeType",
    "methodName": "hasHandlers",
    "signature": "boolean hasHandlers()",
    "visibility": "public",
    "body": "{\r\n    return super.hasHandlers() || _valueType.hasHandlers() || _keyType.hasHandlers();\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3",
      "B2 : If($z2 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  MapLikeType\n  $z0 \u003d r0.hasHandlers()\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $r1 \u003d JavaType _valueType\u003e\n  $z1 \u003d $r1.hasHandlers()\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d JavaType _keyType\u003e\n  $z2 \u003d $r2.hasHandlers()\n  if ($z2 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $z3 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z3 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.MapLikeType",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    if (o.getClass() !\u003d getClass())\r\n        return false;\r\n    MapLikeType other \u003d (MapLikeType) o;\r\n    return (_class \u003d\u003d other._class) \u0026\u0026 _keyType.equals(other._keyType) \u0026\u0026 _valueType.equals(other._valueType);\r\n}",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($r3 \u003d\u003d $r2) → B5 | else → B6",
      "B6 : If($r6 !\u003d $r5) → B7 | else → B10",
      "B7 : If($z0 \u003d\u003d false) → B8 | else → B10",
      "B8 : If($z1 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  MapLikeType\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d r0.getClass()\n  $r2 \u003d r1.getClass()\n  if ($r3 \u003d\u003d $r2) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  r4 \u003d MapLikeType) r0\n  $r6 \u003d Class _class\u003e\n  $r5 \u003d Class _class\u003e\n  if ($r6 !\u003d $r5) goto B7 else B10\n}",
      "B7 {\n  $r8 \u003d JavaType _keyType\u003e\n  $r7 \u003d JavaType _keyType\u003e\n  $z0 \u003d $r8.equals($r7)\n  if ($z0 \u003d\u003d false) goto B8 else B10\n}",
      "B8 {\n  $r10 \u003d JavaType _valueType\u003e\n  $r9 \u003d JavaType _valueType\u003e\n  $z1 \u003d $r10.equals($r9)\n  if ($z1 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $z2 \u003d 1\n  goto B11\n}",
      "B10 {\n  $z2 \u003d 0\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapLikeType#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.MapType",
    "methodName": "construct",
    "signature": "com.fasterxml.jackson.databind.type.MapType construct(java.lang.Class,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    // First: may need to fabricate TypeBindings (needed for refining into\r\n    // concrete collection types, as per [databind#1102])\r\n    TypeVariable\u003c?\u003e[] vars \u003d rawType.getTypeParameters();\r\n    TypeBindings bindings;\r\n    if ((vars \u003d\u003d null) || (vars.length !\u003d 2)) {\r\n        bindings \u003d TypeBindings.emptyBindings();\r\n    } else {\r\n        bindings \u003d TypeBindings.create(rawType, keyT, valueT);\r\n    }\r\n    // !!! TODO: Wrong, does have supertypes\r\n    return new MapType(rawType, bindings, _bogusSuperClass(rawType), null, keyT, valueT, null, null, false);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($i0 \u003d\u003d 2) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Class\n  JavaType\n  JavaType\n  r1 \u003d r0.getTypeParameters()\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d lengthof r1\n  if ($i0 \u003d\u003d 2) goto B2 else B3\n}",
      "B2 {\n  r6 \u003d TypeBindings.emptyBindings()\n  goto B4\n}",
      "B3 {\n  r6 \u003d TypeBindings.create(r0, r3, r4)\n}",
      "B4 {\n  $r2 \u003d MapType\n  $r5 \u003d MapType._bogusSuperClass(r0)\n  new MapType(r0, r6, $r5, null, r3, r4, null, null, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapType#_bogusSuperClass(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.MapType",
    "methodName": "withStaticTyping",
    "signature": "com.fasterxml.jackson.databind.type.MapType withStaticTyping()",
    "visibility": "public",
    "body": "{\r\n    if (_asStatic) {\r\n        return this;\r\n    }\r\n    return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType.withStaticTyping(), _valueType.withStaticTyping(), _valueHandler, _typeHandler, true);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MapType\n  $z0 \u003d MapType: boolean _asStatic\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d MapType\n  $r3 \u003d Class _class\u003e\n  $r4 \u003d TypeBindings _bindings\u003e\n  $r5 \u003d JavaType _superClass\u003e\n  $r6 \u003d JavaType[] _superInterfaces\u003e\n  $r2 \u003d JavaType _keyType\u003e\n  $r11 \u003d $r2.withStaticTyping()\n  $r7 \u003d JavaType _valueType\u003e\n  $r10 \u003d $r7.withStaticTyping()\n  $r9 \u003d Object _valueHandler\u003e\n  $r8 \u003d Object _typeHandler\u003e\n  new MapType($r3, $r4, $r5, $r6, $r11, $r10, $r9, $r8, 1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.MapType",
    "methodName": "withContentType",
    "signature": "com.fasterxml.jackson.databind.JavaType withContentType(com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    if (_valueType \u003d\u003d contentType) {\r\n        return this;\r\n    }\r\n    return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType, contentType, _valueHandler, _typeHandler, _asStatic);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MapType\n  JavaType\n  $r2 \u003d JavaType _valueType\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d MapType\n  $r10 \u003d Class _class\u003e\n  $r9 \u003d TypeBindings _bindings\u003e\n  $r8 \u003d JavaType _superClass\u003e\n  $r7 \u003d JavaType[] _superInterfaces\u003e\n  $r6 \u003d JavaType _keyType\u003e\n  $r5 \u003d Object _valueHandler\u003e\n  $r4 \u003d Object _typeHandler\u003e\n  $z0 \u003d MapType: boolean _asStatic\u003e\n  new MapType($r10, $r9, $r8, $r7, $r6, r1, $r5, $r4, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.MapType",
    "methodName": "withKeyType",
    "signature": "com.fasterxml.jackson.databind.type.MapType withKeyType(com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    if (keyType \u003d\u003d _keyType) {\r\n        return this;\r\n    }\r\n    return new MapType(_class, _bindings, _superClass, _superInterfaces, keyType, _valueType, _valueHandler, _typeHandler, _asStatic);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MapType\n  JavaType\n  $r2 \u003d JavaType _keyType\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d MapType\n  $r10 \u003d Class _class\u003e\n  $r9 \u003d TypeBindings _bindings\u003e\n  $r8 \u003d JavaType _superClass\u003e\n  $r7 \u003d JavaType[] _superInterfaces\u003e\n  $r6 \u003d JavaType _valueType\u003e\n  $r5 \u003d Object _valueHandler\u003e\n  $r4 \u003d Object _typeHandler\u003e\n  $z0 \u003d MapType: boolean _asStatic\u003e\n  new MapType($r10, $r9, $r8, $r7, r0, $r6, $r5, $r4, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ReferenceType",
    "methodName": "upgradeFrom",
    "signature": "com.fasterxml.jackson.databind.type.ReferenceType upgradeFrom(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    if (refdType \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Missing referencedType\");\r\n    }\r\n    // 19-Oct-2015, tatu: Not sure if and how other types could be used as base;\r\n    //    will cross that bridge if and when need be\r\n    if (baseType instanceof TypeBase) {\r\n        return new ReferenceType((TypeBase) baseType, refdType);\r\n    }\r\n    throw new IllegalArgumentException(\"Cannot upgrade from an instance of \" + baseType.getClass());\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  JavaType\n  JavaType\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Missing referencedType\")\n  throw $r8\n}",
      "B2 {\n  $z0 \u003d TypeBase\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d ReferenceType\n  $r7 \u003d TypeBase) r1\n  new ReferenceType($r7, r0)\n  return\n}",
      "B4 {\n  $r2 \u003d IllegalArgumentException\n  $r3 \u003d r1.getClass()\n  $r4 \u003d String.valueOf($r3)\n  $r5 \u003d dynInvoke makeConcatWithConstants($r4)\n  new IllegalArgumentException($r5)\n  throw $r2\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ReferenceType",
    "methodName": "withContentType",
    "signature": "com.fasterxml.jackson.databind.JavaType withContentType(com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    if (_referencedType \u003d\u003d contentType) {\r\n        return this;\r\n    }\r\n    return new ReferenceType(_class, _bindings, _superClass, _superInterfaces, contentType, _anchorType, _valueHandler, _typeHandler, _asStatic);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ReferenceType\n  JavaType\n  $r2 \u003d JavaType _referencedType\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d ReferenceType\n  $r10 \u003d Class _class\u003e\n  $r9 \u003d TypeBindings _bindings\u003e\n  $r8 \u003d JavaType _superClass\u003e\n  $r7 \u003d JavaType[] _superInterfaces\u003e\n  $r6 \u003d JavaType _anchorType\u003e\n  $r5 \u003d Object _valueHandler\u003e\n  $r4 \u003d Object _typeHandler\u003e\n  $z0 \u003d ReferenceType: boolean _asStatic\u003e\n  new ReferenceType($r10, $r9, $r8, $r7, r1, $r6, $r5, $r4, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ReferenceType",
    "methodName": "withTypeHandler",
    "signature": "com.fasterxml.jackson.databind.type.ReferenceType withTypeHandler(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (h \u003d\u003d _typeHandler) {\r\n        return this;\r\n    }\r\n    return new ReferenceType(_class, _bindings, _superClass, _superInterfaces, _referencedType, _anchorType, _valueHandler, h, _asStatic);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ReferenceType\n  Object\n  $r2 \u003d Object _typeHandler\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d ReferenceType\n  $r10 \u003d Class _class\u003e\n  $r9 \u003d TypeBindings _bindings\u003e\n  $r8 \u003d JavaType _superClass\u003e\n  $r7 \u003d JavaType[] _superInterfaces\u003e\n  $r6 \u003d JavaType _referencedType\u003e\n  $r5 \u003d JavaType _anchorType\u003e\n  $r4 \u003d Object _valueHandler\u003e\n  $z0 \u003d ReferenceType: boolean _asStatic\u003e\n  new ReferenceType($r10, $r9, $r8, $r7, $r6, $r5, $r4, r0, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ReferenceType",
    "methodName": "withContentTypeHandler",
    "signature": "com.fasterxml.jackson.databind.type.ReferenceType withContentTypeHandler(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (h \u003d\u003d _referencedType.\u003cObject\u003egetTypeHandler()) {\r\n        return this;\r\n    }\r\n    return new ReferenceType(_class, _bindings, _superClass, _superInterfaces, _referencedType.withTypeHandler(h), _anchorType, _valueHandler, _typeHandler, _asStatic);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ReferenceType\n  Object\n  $r2 \u003d JavaType _referencedType\u003e\n  $r3 \u003d $r2.getTypeHandler()\n  if (r0 !\u003d $r3) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d ReferenceType\n  $r6 \u003d Class _class\u003e\n  $r7 \u003d TypeBindings _bindings\u003e\n  $r8 \u003d JavaType _superClass\u003e\n  $r9 \u003d JavaType[] _superInterfaces\u003e\n  $r5 \u003d JavaType _referencedType\u003e\n  $r13 \u003d $r5.withTypeHandler(r0)\n  $r12 \u003d JavaType _anchorType\u003e\n  $r11 \u003d Object _valueHandler\u003e\n  $r10 \u003d Object _typeHandler\u003e\n  $z0 \u003d ReferenceType: boolean _asStatic\u003e\n  new ReferenceType($r6, $r7, $r8, $r9, $r13, $r12, $r11, $r10, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ReferenceType",
    "methodName": "withValueHandler",
    "signature": "com.fasterxml.jackson.databind.type.ReferenceType withValueHandler(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (h \u003d\u003d _valueHandler) {\r\n        return this;\r\n    }\r\n    return new ReferenceType(_class, _bindings, _superClass, _superInterfaces, _referencedType, _anchorType, h, _typeHandler, _asStatic);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ReferenceType\n  Object\n  $r2 \u003d Object _valueHandler\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d ReferenceType\n  $r10 \u003d Class _class\u003e\n  $r9 \u003d TypeBindings _bindings\u003e\n  $r8 \u003d JavaType _superClass\u003e\n  $r7 \u003d JavaType[] _superInterfaces\u003e\n  $r6 \u003d JavaType _referencedType\u003e\n  $r5 \u003d JavaType _anchorType\u003e\n  $r4 \u003d Object _typeHandler\u003e\n  $z0 \u003d ReferenceType: boolean _asStatic\u003e\n  new ReferenceType($r10, $r9, $r8, $r7, $r6, $r5, r0, $r4, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ReferenceType",
    "methodName": "withContentValueHandler",
    "signature": "com.fasterxml.jackson.databind.type.ReferenceType withContentValueHandler(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (h \u003d\u003d _referencedType.\u003cObject\u003egetValueHandler()) {\r\n        return this;\r\n    }\r\n    return new ReferenceType(_class, _bindings, _superClass, _superInterfaces, _referencedType.withValueHandler(h), _anchorType, _valueHandler, _typeHandler, _asStatic);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ReferenceType\n  Object\n  $r2 \u003d JavaType _referencedType\u003e\n  $r3 \u003d $r2.getValueHandler()\n  if (r0 !\u003d $r3) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d ReferenceType\n  $r6 \u003d Class _class\u003e\n  $r7 \u003d TypeBindings _bindings\u003e\n  $r8 \u003d JavaType _superClass\u003e\n  $r9 \u003d JavaType[] _superInterfaces\u003e\n  $r5 \u003d JavaType _referencedType\u003e\n  $r13 \u003d $r5.withValueHandler(r0)\n  $r12 \u003d JavaType _anchorType\u003e\n  $r11 \u003d Object _valueHandler\u003e\n  $r10 \u003d Object _typeHandler\u003e\n  $z0 \u003d ReferenceType: boolean _asStatic\u003e\n  new ReferenceType($r6, $r7, $r8, $r9, $r13, $r12, $r11, $r10, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ReferenceType",
    "methodName": "withStaticTyping",
    "signature": "com.fasterxml.jackson.databind.type.ReferenceType withStaticTyping()",
    "visibility": "public",
    "body": "{\r\n    if (_asStatic) {\r\n        return this;\r\n    }\r\n    return new ReferenceType(_class, _bindings, _superClass, _superInterfaces, _referencedType.withStaticTyping(), _anchorType, _valueHandler, _typeHandler, true);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ReferenceType\n  $z0 \u003d ReferenceType: boolean _asStatic\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d ReferenceType\n  $r3 \u003d Class _class\u003e\n  $r4 \u003d TypeBindings _bindings\u003e\n  $r5 \u003d JavaType _superClass\u003e\n  $r6 \u003d JavaType[] _superInterfaces\u003e\n  $r2 \u003d JavaType _referencedType\u003e\n  $r10 \u003d $r2.withStaticTyping()\n  $r9 \u003d JavaType _anchorType\u003e\n  $r8 \u003d Object _valueHandler\u003e\n  $r7 \u003d Object _typeHandler\u003e\n  new ReferenceType($r3, $r4, $r5, $r6, $r10, $r9, $r8, $r7, 1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ReferenceType",
    "methodName": "isAnchorType",
    "signature": "boolean isAnchorType()",
    "visibility": "public",
    "body": "{\r\n    return (_anchorType \u003d\u003d this);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d r0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ReferenceType\n  $r1 \u003d JavaType _anchorType\u003e\n  if ($r1 !\u003d r0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ReferenceType",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    if (o.getClass() !\u003d getClass())\r\n        return false;\r\n    ReferenceType other \u003d (ReferenceType) o;\r\n    if (other._class !\u003d _class)\r\n        return false;\r\n    // Otherwise actually mostly worry about referenced type\r\n    return _referencedType.equals(other._referencedType);\r\n}",
    "nodes": 9,
    "edges": 8,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($r3 \u003d\u003d $r2) → B5 | else → B6",
      "B6 : If($r6 \u003d\u003d $r5) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  ReferenceType\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d r0.getClass()\n  $r2 \u003d r1.getClass()\n  if ($r3 \u003d\u003d $r2) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  r4 \u003d ReferenceType) r0\n  $r6 \u003d Class _class\u003e\n  $r5 \u003d Class _class\u003e\n  if ($r6 \u003d\u003d $r5) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $r8 \u003d JavaType _referencedType\u003e\n  $r7 \u003d JavaType _referencedType\u003e\n  $z0 \u003d $r8.equals($r7)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ReferenceType#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ResolvedRecursiveType",
    "methodName": "setReference",
    "signature": "void setReference(com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    // sanity check; should not be called multiple times\r\n    if (_referencedType !\u003d null) {\r\n        throw new IllegalStateException(\"Trying to re-set self reference; old value \u003d \" + _referencedType + \", new \u003d \" + ref);\r\n    }\r\n    _referencedType \u003d ref;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ResolvedRecursiveType\n  JavaType\n  $r1 \u003d JavaType _referencedType\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IllegalStateException\n  $r4 \u003d JavaType _referencedType\u003e\n  $r6 \u003d String.valueOf($r4)\n  $r5 \u003d String.valueOf(r2)\n  $r7 \u003d dynInvoke makeConcatWithConstants($r6, $r5)\n  new IllegalStateException($r7)\n  throw $r3\n}",
      "B2 {\n  JavaType _referencedType\u003e \u003d r2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ResolvedRecursiveType",
    "methodName": "getSuperClass",
    "signature": "com.fasterxml.jackson.databind.JavaType getSuperClass()",
    "visibility": "public",
    "body": "{\r\n    if (_referencedType !\u003d null) {\r\n        return _referencedType.getSuperClass();\r\n    }\r\n    return super.getSuperClass();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ResolvedRecursiveType\n  $r1 \u003d JavaType _referencedType\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d JavaType _referencedType\u003e\n  $r4 \u003d $r3.getSuperClass()\n  return\n}",
      "B2 {\n  $r2 \u003d r0.getSuperClass()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ResolvedRecursiveType",
    "methodName": "getBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings getBindings()",
    "visibility": "public",
    "body": "{\r\n    if (_referencedType !\u003d null) {\r\n        // `null` before resolution [databind#2395]\r\n        return _referencedType.getBindings();\r\n    }\r\n    return super.getBindings();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ResolvedRecursiveType\n  $r1 \u003d JavaType _referencedType\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d JavaType _referencedType\u003e\n  $r4 \u003d $r3.getBindings()\n  return\n}",
      "B2 {\n  $r2 \u003d r0.getBindings()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ResolvedRecursiveType",
    "methodName": "getGenericSignature",
    "signature": "java.lang.StringBuilder getGenericSignature(java.lang.StringBuilder)",
    "visibility": "public",
    "body": "{\r\n    // 30-Oct-2019, tatu: Alas, need to break recursion, otherwise we\u0027ll\r\n    //    end up in StackOverflowError... two choices; \u0027?\u0027 for \"not known\",\r\n    //    or erased signature.\r\n    if (_referencedType !\u003d null) {\r\n        //            return _referencedType.getGenericSignature(sb);\r\n        return _referencedType.getErasedSignature(sb);\r\n    }\r\n    return sb.append(\"?\");\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ResolvedRecursiveType\n  StringBuilder\n  $r1 \u003d JavaType _referencedType\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d JavaType _referencedType\u003e\n  $r5 \u003d $r4.getErasedSignature(r2)\n  return\n}",
      "B2 {\n  $r3 \u003d r2.append(\"?\")\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ResolvedRecursiveType",
    "methodName": "getErasedSignature",
    "signature": "java.lang.StringBuilder getErasedSignature(java.lang.StringBuilder)",
    "visibility": "public",
    "body": "{\r\n    if (_referencedType !\u003d null) {\r\n        return _referencedType.getErasedSignature(sb);\r\n    }\r\n    return sb;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ResolvedRecursiveType\n  StringBuilder\n  $r1 \u003d JavaType _referencedType\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d JavaType _referencedType\u003e\n  $r4 \u003d $r3.getErasedSignature(r2)\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.ResolvedRecursiveType",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    StringBuilder sb \u003d new StringBuilder(40).append(\"[recursive type; \");\r\n    if (_referencedType \u003d\u003d null) {\r\n        sb.append(\"UNRESOLVED\");\r\n    } else {\r\n        // [databind#1301]: Typically resolves to a loop so short-cut\r\n        //   and only include type-erased class\r\n        sb.append(_referencedType.getRawClass().getName());\r\n    }\r\n    return sb.toString();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ResolvedRecursiveType\n  $r0 \u003d StringBuilder\n  new StringBuilder(40)\n  r1 \u003d $r0.append(\"recursive type; \")\n  $r3 \u003d JavaType _referencedType\u003e\n  if ($r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r1.append(\"UNRESOLVED\")\n  goto B3\n}",
      "B2 {\n  $r4 \u003d JavaType _referencedType\u003e\n  $r5 \u003d $r4.getRawClass()\n  $r6 \u003d $r5.getName()\n  r1.append($r6)\n}",
      "B3 {\n  $r7 \u003d r1.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.SimpleType",
    "methodName": "construct",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType construct(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    /* Let\u0027s add sanity checks, just to ensure no\r\n         * Map/Collection entries are constructed\r\n         */\r\n    if (Map.class.isAssignableFrom(cls)) {\r\n        throw new IllegalArgumentException(\"Cannot construct SimpleType for a Map (class: \" + cls.getName() + \")\");\r\n    }\r\n    if (Collection.class.isAssignableFrom(cls)) {\r\n        throw new IllegalArgumentException(\"Cannot construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\r\n    }\r\n    // ... and while we are at it, not array types either\r\n    if (cls.isArray()) {\r\n        throw new IllegalArgumentException(\"Cannot construct SimpleType for an array (class: \" + cls.getName() + \")\");\r\n    }\r\n    TypeBindings b \u003d TypeBindings.emptyBindings();\r\n    return new SimpleType(cls, b, _buildSuperClass(cls.getSuperclass(), b), null, null, null, false);\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Class\n  $r1 \u003d class \"Ljava/util/Map;\"\n  $z0 \u003d $r1.isAssignableFrom(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r13 \u003d IllegalArgumentException\n  $r14 \u003d r0.getName()\n  $r15 \u003d dynInvoke makeConcatWithConstants($r14)\n  new IllegalArgumentException($r15)\n  throw $r13\n}",
      "B2 {\n  $r2 \u003d class \"Ljava/util/Collection;\"\n  $z1 \u003d $r2.isAssignableFrom(r0)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r10 \u003d IllegalArgumentException\n  $r11 \u003d r0.getName()\n  $r12 \u003d dynInvoke makeConcatWithConstants($r11)\n  new IllegalArgumentException($r12)\n  throw $r10\n}",
      "B4 {\n  $z2 \u003d r0.isArray()\n  if ($z2 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r7 \u003d IllegalArgumentException\n  $r8 \u003d r0.getName()\n  $r9 \u003d dynInvoke makeConcatWithConstants($r8)\n  new IllegalArgumentException($r9)\n  throw $r7\n}",
      "B6 {\n  r3 \u003d TypeBindings.emptyBindings()\n  $r4 \u003d SimpleType\n  $r5 \u003d r0.getSuperclass()\n  $r6 \u003d SimpleType._buildSuperClass($r5, r3)\n  new SimpleType(r0, r3, $r6, null, null, null, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleType#_buildSuperClass(...2)",
        "body": "{\r\n    if (superClass \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (superClass \u003d\u003d Object.class) {\r\n        return TypeFactory.unknownType();\r\n    }\r\n    JavaType superSuper \u003d _buildSuperClass(superClass.getSuperclass(), b);\r\n    return new SimpleType(superClass, b, superSuper, null, null, null, false);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.SimpleType",
    "methodName": "withTypeHandler",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType withTypeHandler(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (_typeHandler \u003d\u003d h) {\r\n        return this;\r\n    }\r\n    return new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleType\n  Object\n  $r2 \u003d Object _typeHandler\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d SimpleType\n  $r8 \u003d Class _class\u003e\n  $r7 \u003d TypeBindings _bindings\u003e\n  $r6 \u003d JavaType _superClass\u003e\n  $r5 \u003d JavaType[] _superInterfaces\u003e\n  $r4 \u003d Object _valueHandler\u003e\n  $z0 \u003d SimpleType: boolean _asStatic\u003e\n  new SimpleType($r8, $r7, $r6, $r5, $r4, r1, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.SimpleType",
    "methodName": "withValueHandler",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType withValueHandler(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (h \u003d\u003d _valueHandler) {\r\n        return this;\r\n    }\r\n    return new SimpleType(_class, _bindings, _superClass, _superInterfaces, h, _typeHandler, _asStatic);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleType\n  Object\n  $r2 \u003d Object _valueHandler\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d SimpleType\n  $r8 \u003d Class _class\u003e\n  $r7 \u003d TypeBindings _bindings\u003e\n  $r6 \u003d JavaType _superClass\u003e\n  $r5 \u003d JavaType[] _superInterfaces\u003e\n  $r4 \u003d Object _typeHandler\u003e\n  $z0 \u003d SimpleType: boolean _asStatic\u003e\n  new SimpleType($r8, $r7, $r6, $r5, r0, $r4, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.SimpleType",
    "methodName": "withStaticTyping",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType withStaticTyping()",
    "visibility": "public",
    "body": "{\r\n    return _asStatic ? this : new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, _typeHandler, true);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleType\n  $z0 \u003d SimpleType: boolean _asStatic\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r7 \u003d SimpleType\n  $r6 \u003d Class _class\u003e\n  $r5 \u003d TypeBindings _bindings\u003e\n  $r4 \u003d JavaType _superClass\u003e\n  $r3 \u003d JavaType[] _superInterfaces\u003e\n  $r2 \u003d Object _valueHandler\u003e\n  $r1 \u003d Object _typeHandler\u003e\n  new SimpleType($r6, $r5, $r4, $r3, $r2, $r1, 1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.SimpleType",
    "methodName": "getGenericSignature",
    "signature": "java.lang.StringBuilder getGenericSignature(java.lang.StringBuilder)",
    "visibility": "public",
    "body": "{\r\n    _classSignature(_class, sb, false);\r\n    final int count \u003d _bindings.size();\r\n    if (count \u003e 0) {\r\n        sb.append(\u0027\u003c\u0027);\r\n        for (int i \u003d 0; i \u003c count; ++i) {\r\n            sb \u003d containedType(i).getGenericSignature(sb);\r\n        }\r\n        sb.append(\u0027\u003e\u0027);\r\n    }\r\n    sb.append(\u0027;\u0027);\r\n    return sb;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003c\u003d 0) → B1 | else → B5",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  SimpleType\n  StringBuilder\n  $r1 \u003d Class _class\u003e\n  SimpleType._classSignature($r1, r4, 0)\n  $r2 \u003d TypeBindings _bindings\u003e\n  i0 \u003d $r2.size()\n  if (i0 \u003c\u003d 0) goto B1 else B5\n}",
      "B1 {\n  r4.append(60)\n  i1 \u003d 0\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d r0.containedType(i1)\n  r4 \u003d $r3.getGenericSignature(r4)\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B4 {\n  r4.append(62)\n}",
      "B5 {\n  r4.append(59)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleType#containedType(...1)",
        "body": "(source not found)"
      },
      {
        "name": "SimpleType#_classSignature(...3)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.SimpleType",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    if (o.getClass() !\u003d getClass())\r\n        return false;\r\n    SimpleType other \u003d (SimpleType) o;\r\n    // Classes must be identical...\r\n    if (other._class !\u003d this._class)\r\n        return false;\r\n    // And finally, generic bindings, if any\r\n    TypeBindings b1 \u003d _bindings;\r\n    TypeBindings b2 \u003d other._bindings;\r\n    return b1.equals(b2);\r\n}",
    "nodes": 9,
    "edges": 8,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($r3 \u003d\u003d $r2) → B5 | else → B6",
      "B6 : If($r6 \u003d\u003d $r5) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  SimpleType\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d r0.getClass()\n  $r2 \u003d r1.getClass()\n  if ($r3 \u003d\u003d $r2) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  r4 \u003d SimpleType) r0\n  $r6 \u003d Class _class\u003e\n  $r5 \u003d Class _class\u003e\n  if ($r6 \u003d\u003d $r5) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  r7 \u003d TypeBindings _bindings\u003e\n  r8 \u003d TypeBindings _bindings\u003e\n  $z0 \u003d r7.equals(r8)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleType#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeBindings",
    "methodName": "create",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings create(java.lang.Class,java.util.List)",
    "visibility": "public",
    "body": "{\r\n    JavaType[] types \u003d (typeList \u003d\u003d null || typeList.isEmpty()) ? NO_TYPES : typeList.toArray(NO_TYPES);\r\n    return create(erasedType, types);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Class\n  List\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d JavaType[] NO_TYPES\u003e\n  goto B4\n}",
      "B3 {\n  $r3 \u003d JavaType[] NO_TYPES\u003e\n  $r4 \u003d r0.toArray($r3)\n  $r5 \u003d JavaType[]) $r4\n}",
      "B4 {\n  $r2 \u003d TypeBindings.create(r1, $r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeBindings#create(...2)",
        "body": "{\r\n    JavaType[] types \u003d (typeList \u003d\u003d null || typeList.isEmpty()) ? NO_TYPES : typeList.toArray(NO_TYPES);\r\n    return create(erasedType, types);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeBindings",
    "methodName": "create",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings create(java.lang.Class,com.fasterxml.jackson.databind.JavaType[])",
    "visibility": "public",
    "body": "{\r\n    if (types \u003d\u003d null) {\r\n        types \u003d NO_TYPES;\r\n    } else\r\n        switch(types.length) {\r\n            case 1:\r\n                return create(erasedType, types[0]);\r\n            case 2:\r\n                return create(erasedType, types[0], types[1]);\r\n        }\r\n    TypeVariable\u003c?\u003e[] vars \u003d erasedType.getTypeParameters();\r\n    String[] names;\r\n    if (vars \u003d\u003d null || vars.length \u003d\u003d 0) {\r\n        names \u003d NO_STRINGS;\r\n    } else {\r\n        int len \u003d vars.length;\r\n        names \u003d new String[len];\r\n        for (int i \u003d 0; i \u003c len; ++i) {\r\n            names[i] \u003d vars[i].getName();\r\n        }\r\n    }\r\n    // Check here to give better error message\r\n    if (names.length !\u003d types.length) {\r\n        throw new IllegalArgumentException(\"Cannot create TypeBindings for class \" + erasedType.getName() + \" with \" + types.length + \" type parameter\" + ((types.length \u003d\u003d 1) ? \"\" : \"s\") + \": class expects \" + names.length);\r\n    }\r\n    return new TypeBindings(names, types, null);\r\n}",
    "nodes": 17,
    "edges": 21,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r13 !\u003d null) → B1 | else → B2",
      "B2 : If(switch-on $i0) → B3 | else → B4",
      "B5 : If($r12 \u003d\u003d null) → B6 | else → B7",
      "B6 : If($i6 !\u003d 0) → B7 | else → B8",
      "B9 : If(i8 \u003e\u003d i7) → B10 | else → B11",
      "B11 : If($i2 \u003d\u003d $i1) → B12 | else → B16",
      "B12 : If($i3 !\u003d 1) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  Class\n  JavaType[]\n  if (r13 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r13 \u003d JavaType[] NO_TYPES\u003e\n  goto B5\n}",
      "B2 {\n  $i0 \u003d lengthof r13\n  TypeVariable[] getTypeParameters()\u003e(); }\n}",
      "B3 {\n  $r4 \u003d r13[0]\n  $r5 \u003d TypeBindings.create(r0, $r4)\n  return\n}",
      "B4 {\n  $r2 \u003d r13[0]\n  $r1 \u003d r13[1]\n  $r3 \u003d TypeBindings.create(r0, $r2, $r1)\n  return\n}",
      "B5 {\n  $r12 \u003d r0.getTypeParameters()\n  if ($r12 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  $i6 \u003d lengthof $r12\n  if ($i6 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  r14 \u003d String[] NO_STRINGS\u003e\n  goto B11\n}",
      "B8 {\n  i7 \u003d lengthof $r12\n  r14 \u003d String)[i7]\n  i8 \u003d 0\n}",
      "B9 {\n  if (i8 \u003e\u003d i7) goto B10 else B11\n}",
      "B10 {\n  $r10 \u003d $r12[i8]\n  $r11 \u003d $r10.getName()\n  r14[i8] \u003d $r11\n  i8 \u003d i8 + 1\n  goto B9\n}",
      "B11 {\n  $i2 \u003d lengthof r14\n  $i1 \u003d lengthof r13\n  if ($i2 \u003d\u003d $i1) goto B12 else B16\n}",
      "B12 {\n  $r7 \u003d IllegalArgumentException\n  $r8 \u003d r0.getName()\n  $i5 \u003d lengthof r13\n  $i3 \u003d lengthof r13\n  if ($i3 !\u003d 1) goto B13 else B14\n}",
      "B13 {\n  $r15 \u003d \"\"\n  goto B15\n}",
      "B14 {\n  $r15 \u003d \"s\"\n}",
      "B15 {\n  $i4 \u003d lengthof r14\n  $r9 \u003d dynInvoke makeConcatWithConstants($r8, $i5, $r15, $i4)\n  new IllegalArgumentException($r9)\n  throw $r7\n}",
      "B16 {\n  $r6 \u003d TypeBindings\n  new TypeBindings(r14, r13, null)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B2 --\u003e B5",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B9",
      "B11 --\u003e B12",
      "B11 --\u003e B16",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeBindings#create(...3)",
        "body": "{\r\n    // 30-Oct-2015, tatu: Minor optimization for relatively common cases\r\n    TypeVariable\u003c?\u003e[] vars \u003d TypeParamStash.paramsFor2(erasedType);\r\n    int varLen \u003d (vars \u003d\u003d null) ? 0 : vars.length;\r\n    if (varLen !\u003d 2) {\r\n        throw new IllegalArgumentException(\"Cannot create TypeBindings for class \" + erasedType.getName() + \" with 2 type parameters: class expects \" + varLen);\r\n    }\r\n    return new TypeBindings(new String[] { vars[0].getName(), vars[1].getName() }, new JavaType[] { typeArg1, typeArg2 }, null);\r\n}"
      },
      {
        "name": "TypeBindings#create(...2)",
        "body": "{\r\n    JavaType[] types \u003d (typeList \u003d\u003d null || typeList.isEmpty()) ? NO_TYPES : typeList.toArray(NO_TYPES);\r\n    return create(erasedType, types);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeBindings",
    "methodName": "create",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings create(java.lang.Class,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    if (types \u003d\u003d null) {\r\n        types \u003d NO_TYPES;\r\n    } else\r\n        switch(types.length) {\r\n            case 1:\r\n                return create(erasedType, types[0]);\r\n            case 2:\r\n                return create(erasedType, types[0], types[1]);\r\n        }\r\n    TypeVariable\u003c?\u003e[] vars \u003d erasedType.getTypeParameters();\r\n    String[] names;\r\n    if (vars \u003d\u003d null || vars.length \u003d\u003d 0) {\r\n        names \u003d NO_STRINGS;\r\n    } else {\r\n        int len \u003d vars.length;\r\n        names \u003d new String[len];\r\n        for (int i \u003d 0; i \u003c len; ++i) {\r\n            names[i] \u003d vars[i].getName();\r\n        }\r\n    }\r\n    // Check here to give better error message\r\n    if (names.length !\u003d types.length) {\r\n        throw new IllegalArgumentException(\"Cannot create TypeBindings for class \" + erasedType.getName() + \" with \" + types.length + \" type parameter\" + ((types.length \u003d\u003d 1) ? \"\" : \"s\") + \": class expects \" + names.length);\r\n    }\r\n    return new TypeBindings(names, types, null);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B3 : If($i0 \u003d\u003d 1) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Class\n  JavaType\n  r1 \u003d TypeBindings$TypeParamStash.paramsFor1(r0)\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d 0\n  goto B3\n}",
      "B2 {\n  $i0 \u003d lengthof r1\n}",
      "B3 {\n  if ($i0 \u003d\u003d 1) goto B4 else B5\n}",
      "B4 {\n  $r8 \u003d IllegalArgumentException\n  $r9 \u003d r0.getName()\n  $r10 \u003d dynInvoke makeConcatWithConstants($r9, $i0)\n  new IllegalArgumentException($r10)\n  throw $r8\n}",
      "B5 {\n  $r2 \u003d TypeBindings\n  $r3 \u003d String)[1]\n  $r4 \u003d r1[0]\n  $r5 \u003d $r4.getName()\n  $r3[0] \u003d $r5\n  $r6 \u003d JavaType)[1]\n  $r6[0] \u003d r7\n  new TypeBindings($r3, $r6, null)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeBindings#create(...3)",
        "body": "{\r\n    // 30-Oct-2015, tatu: Minor optimization for relatively common cases\r\n    TypeVariable\u003c?\u003e[] vars \u003d TypeParamStash.paramsFor2(erasedType);\r\n    int varLen \u003d (vars \u003d\u003d null) ? 0 : vars.length;\r\n    if (varLen !\u003d 2) {\r\n        throw new IllegalArgumentException(\"Cannot create TypeBindings for class \" + erasedType.getName() + \" with 2 type parameters: class expects \" + varLen);\r\n    }\r\n    return new TypeBindings(new String[] { vars[0].getName(), vars[1].getName() }, new JavaType[] { typeArg1, typeArg2 }, null);\r\n}"
      },
      {
        "name": "TypeBindings#create(...2)",
        "body": "{\r\n    JavaType[] types \u003d (typeList \u003d\u003d null || typeList.isEmpty()) ? NO_TYPES : typeList.toArray(NO_TYPES);\r\n    return create(erasedType, types);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeBindings",
    "methodName": "create",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings create(java.lang.Class,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    // 30-Oct-2015, tatu: Minor optimization for relatively common cases\r\n    TypeVariable\u003c?\u003e[] vars \u003d TypeParamStash.paramsFor2(erasedType);\r\n    int varLen \u003d (vars \u003d\u003d null) ? 0 : vars.length;\r\n    if (varLen !\u003d 2) {\r\n        throw new IllegalArgumentException(\"Cannot create TypeBindings for class \" + erasedType.getName() + \" with 2 type parameters: class expects \" + varLen);\r\n    }\r\n    return new TypeBindings(new String[] { vars[0].getName(), vars[1].getName() }, new JavaType[] { typeArg1, typeArg2 }, null);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B3 : If($i0 \u003d\u003d 2) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Class\n  JavaType\n  JavaType\n  r1 \u003d TypeBindings$TypeParamStash.paramsFor2(r0)\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d 0\n  goto B3\n}",
      "B2 {\n  $i0 \u003d lengthof r1\n}",
      "B3 {\n  if ($i0 \u003d\u003d 2) goto B4 else B5\n}",
      "B4 {\n  $r11 \u003d IllegalArgumentException\n  $r12 \u003d r0.getName()\n  $r13 \u003d dynInvoke makeConcatWithConstants($r12, $i0)\n  new IllegalArgumentException($r13)\n  throw $r11\n}",
      "B5 {\n  $r2 \u003d TypeBindings\n  $r3 \u003d String)[2]\n  $r4 \u003d r1[0]\n  $r5 \u003d $r4.getName()\n  $r3[0] \u003d $r5\n  $r6 \u003d r1[1]\n  $r7 \u003d $r6.getName()\n  $r3[1] \u003d $r7\n  $r8 \u003d JavaType)[2]\n  $r8[0] \u003d r9\n  $r8[1] \u003d r10\n  new TypeBindings($r3, $r8, null)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeBindings",
    "methodName": "create",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings create(java.util.List,java.util.List)",
    "visibility": "public",
    "body": "{\r\n    if (names \u003d\u003d null || names.isEmpty() || types \u003d\u003d null || types.isEmpty()) {\r\n        return EMPTY;\r\n    }\r\n    return new TypeBindings(names.toArray(NO_STRINGS), types.toArray(NO_TYPES), null);\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B4",
      "B1 : If($z0 !\u003d 0) → B2 | else → B4",
      "B2 : If(r1 \u003d\u003d null) → B3 | else → B4",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  List\n  List\n  if (r0 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $z0 \u003d r0.isEmpty()\n  if ($z0 !\u003d 0) goto B2 else B4\n}",
      "B2 {\n  if (r1 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $z1 \u003d r1.isEmpty()\n  if ($z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r9 \u003d TypeBindings EMPTY\u003e\n  return\n}",
      "B5 {\n  $r2 \u003d TypeBindings\n  $r3 \u003d String[] NO_STRINGS\u003e\n  $r4 \u003d r0.toArray($r3)\n  $r8 \u003d String[]) $r4\n  $r5 \u003d JavaType[] NO_TYPES\u003e\n  $r6 \u003d r1.toArray($r5)\n  $r7 \u003d JavaType[]) $r6\n  new TypeBindings($r8, $r7, null)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeBindings",
    "methodName": "createIfNeeded",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings createIfNeeded(java.lang.Class,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    TypeVariable\u003c?\u003e[] vars \u003d erasedType.getTypeParameters();\r\n    int varLen \u003d (vars \u003d\u003d null) ? 0 : vars.length;\r\n    if (varLen \u003d\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    if (varLen !\u003d 1) {\r\n        throw new IllegalArgumentException(\"Cannot create TypeBindings for class \" + erasedType.getName() + \" with 1 type parameter: class expects \" + varLen);\r\n    }\r\n    return new TypeBindings(new String[] { vars[0].getName() }, new JavaType[] { typeArg1 }, null);\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B3 : If($i0 !\u003d 0) → B4 | else → B5",
      "B5 : If($i0 \u003d\u003d 1) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Class\n  JavaType\n  r1 \u003d r0.getTypeParameters()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d 0\n  goto B3\n}",
      "B2 {\n  $i0 \u003d lengthof r1\n}",
      "B3 {\n  if ($i0 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r11 \u003d TypeBindings EMPTY\u003e\n  return\n}",
      "B5 {\n  if ($i0 \u003d\u003d 1) goto B6 else B7\n}",
      "B6 {\n  $r8 \u003d IllegalArgumentException\n  $r9 \u003d r0.getName()\n  $r10 \u003d dynInvoke makeConcatWithConstants($r9, $i0)\n  new IllegalArgumentException($r10)\n  throw $r8\n}",
      "B7 {\n  $r2 \u003d TypeBindings\n  $r3 \u003d String)[1]\n  $r4 \u003d r1[0]\n  $r5 \u003d $r4.getName()\n  $r3[0] \u003d $r5\n  $r6 \u003d JavaType)[1]\n  $r6[0] \u003d r7\n  new TypeBindings($r3, $r6, null)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeBindings",
    "methodName": "createIfNeeded",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings createIfNeeded(java.lang.Class,com.fasterxml.jackson.databind.JavaType[])",
    "visibility": "public",
    "body": "{\r\n    TypeVariable\u003c?\u003e[] vars \u003d erasedType.getTypeParameters();\r\n    int varLen \u003d (vars \u003d\u003d null) ? 0 : vars.length;\r\n    if (varLen \u003d\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    if (varLen !\u003d 1) {\r\n        throw new IllegalArgumentException(\"Cannot create TypeBindings for class \" + erasedType.getName() + \" with 1 type parameter: class expects \" + varLen);\r\n    }\r\n    return new TypeBindings(new String[] { vars[0].getName() }, new JavaType[] { typeArg1 }, null);\r\n}",
    "nodes": 14,
    "edges": 17,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($i0 !\u003d 0) → B2 | else → B3",
      "B3 : If(r10 !\u003d null) → B4 | else → B5",
      "B6 : If(i7 \u003e\u003d $i6) → B7 | else → B8",
      "B8 : If($i2 \u003d\u003d $i1) → B9 | else → B13",
      "B9 : If($i3 !\u003d 1) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  Class\n  JavaType[]\n  r1 \u003d r0.getTypeParameters()\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d lengthof r1\n  if ($i0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d TypeBindings EMPTY\u003e\n  return\n}",
      "B3 {\n  if (r10 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  r10 \u003d JavaType[] NO_TYPES\u003e\n}",
      "B5 {\n  $i6 \u003d lengthof r1\n  $r9 \u003d String)[$i6]\n  i7 \u003d 0\n}",
      "B6 {\n  if (i7 \u003e\u003d $i6) goto B7 else B8\n}",
      "B7 {\n  $r7 \u003d r1[i7]\n  $r8 \u003d $r7.getName()\n  $r9[i7] \u003d $r8\n  i7 \u003d i7 + 1\n  goto B6\n}",
      "B8 {\n  $i2 \u003d lengthof $r9\n  $i1 \u003d lengthof r10\n  if ($i2 \u003d\u003d $i1) goto B9 else B13\n}",
      "B9 {\n  $r4 \u003d IllegalArgumentException\n  $r5 \u003d r0.getName()\n  $i5 \u003d lengthof r10\n  $i3 \u003d lengthof r10\n  if ($i3 !\u003d 1) goto B10 else B11\n}",
      "B10 {\n  $r11 \u003d \"\"\n  goto B12\n}",
      "B11 {\n  $r11 \u003d \"s\"\n}",
      "B12 {\n  $i4 \u003d lengthof $r9\n  $r6 \u003d dynInvoke makeConcatWithConstants($r5, $i5, $r11, $i4)\n  new IllegalArgumentException($r6)\n  throw $r4\n}",
      "B13 {\n  $r3 \u003d TypeBindings\n  new TypeBindings($r9, r10, null)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B6",
      "B8 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeBindings",
    "methodName": "withUnboundVariable",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings withUnboundVariable(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    int len \u003d (_unboundVariables \u003d\u003d null) ? 0 : _unboundVariables.length;\r\n    String[] names \u003d (len \u003d\u003d 0) ? new String[1] : Arrays.copyOf(_unboundVariables, len + 1);\r\n    names[len] \u003d name;\r\n    return new TypeBindings(_names, _types, names);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B3 : If($i2 !\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  TypeBindings\n  String\n  $r1 \u003d String[] _unboundVariables\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i2 \u003d 0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d String[] _unboundVariables\u003e\n  $i2 \u003d lengthof $r2\n}",
      "B3 {\n  i0 \u003d $i2\n  if ($i2 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r9 \u003d String)[1]\n  goto B6\n}",
      "B5 {\n  $r3 \u003d String[] _unboundVariables\u003e\n  $i1 \u003d $i2 + 1\n  $r4 \u003d Arrays.copyOf($r3, $i1)\n  $r9 \u003d String[]) $r4\n}",
      "B6 {\n  $r9[i0] \u003d r5\n  $r6 \u003d TypeBindings\n  $r8 \u003d String[] _names\u003e\n  $r7 \u003d JavaType[] _types\u003e\n  new TypeBindings($r8, $r7, $r9)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeBindings",
    "methodName": "withoutVariable",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings withoutVariable(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    int index \u003d Arrays.asList(_names).indexOf(name);\r\n    if (index \u003d\u003d -1) {\r\n        return this;\r\n    }\r\n    JavaType[] newTypes \u003d _types.clone();\r\n    newTypes[index] \u003d null;\r\n    return new TypeBindings(_names, newTypes, _unboundVariables);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 !\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TypeBindings\n  String\n  $r1 \u003d String[] _names\u003e\n  $r3 \u003d Arrays.asList($r1)\n  i0 \u003d $r3.indexOf(r2)\n  $i2 \u003d (int) -1\n  if (i0 !\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d JavaType[] _types\u003e\n  $r5 \u003d $r4.clone()\n  r6 \u003d JavaType[]) $r5\n  r6[i0] \u003d null\n  $r10 \u003d TypeBindings\n  $r9 \u003d String[] _names\u003e\n  $r8 \u003d String[] _unboundVariables\u003e\n  new TypeBindings($r9, r6, $r8)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeBindings",
    "methodName": "findBoundType",
    "signature": "com.fasterxml.jackson.databind.JavaType findBoundType(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d 0, len \u003d _names.length; i \u003c len; ++i) {\r\n        if (name.equals(_names[i])) {\r\n            JavaType t \u003d _types[i];\r\n            if (t instanceof ResolvedRecursiveType) {\r\n                ResolvedRecursiveType rrt \u003d (ResolvedRecursiveType) t;\r\n                JavaType t2 \u003d rrt.getSelfReferencedType();\r\n                if (t2 !\u003d null) {\r\n                    t \u003d t2;\r\n                } else {\r\n                    /* 25-Feb-2016, tatu: Looks like a potential problem, but alas\r\n                         *   we have a test where this should NOT fail and things... seem\r\n                         *   to work. So be it.\r\n                         */\r\n                    /*\r\n                        throw new IllegalStateException(String.format\r\n(\"Unresolved ResolvedRecursiveType for parameter \u0027%s\u0027 (index #%d; erased type %s)\",\r\nname, i, t.getRawClass()));\r\n*/\r\n                }\r\n            }\r\n            return t;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B8",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B7",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B6",
      "B4 : If(r7 \u003d\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  TypeBindings\n  String\n  i1 \u003d 0\n  $r1 \u003d String[] _names\u003e\n  i0 \u003d lengthof $r1\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B8\n}",
      "B2 {\n  $r3 \u003d String[] _names\u003e\n  $r4 \u003d $r3[i1]\n  $z0 \u003d r2.equals($r4)\n  if ($z0 \u003d\u003d false) goto B3 else B7\n}",
      "B3 {\n  $r5 \u003d JavaType[] _types\u003e\n  r8 \u003d $r5[i1]\n  $z1 \u003d ResolvedRecursiveType\n  if ($z1 \u003d\u003d false) goto B4 else B6\n}",
      "B4 {\n  r6 \u003d ResolvedRecursiveType) r8\n  r7 \u003d r6.getSelfReferencedType()\n  if (r7 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  r8 \u003d r7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B1",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeBindings",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty()",
    "visibility": "public",
    "body": "{\r\n    return (_types.length \u003d\u003d 0);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TypeBindings\n  $r1 \u003d JavaType[] _types\u003e\n  $i0 \u003d lengthof $r1\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeBindings",
    "methodName": "getBoundName",
    "signature": "java.lang.String getBoundName(int)",
    "visibility": "public",
    "body": "{\r\n    if (index \u003c 0 || index \u003e\u003d _names.length) {\r\n        return null;\r\n    }\r\n    return _names[index];\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B2",
      "B1 : If(i0 \u003c $i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TypeBindings\n  i0 :\u003d @parameter0: int\n  if (i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d String[] _names\u003e\n  $i1 \u003d lengthof $r1\n  if (i0 \u003c $i1) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r2 \u003d String[] _names\u003e\n  $r3 \u003d $r2[i0]\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeBindings",
    "methodName": "getBoundType",
    "signature": "com.fasterxml.jackson.databind.JavaType getBoundType(int)",
    "visibility": "public",
    "body": "{\r\n    if (index \u003c 0 || index \u003e\u003d _types.length) {\r\n        return null;\r\n    }\r\n    JavaType type \u003d _types[index];\r\n    if (type \u003d\u003d null) {\r\n        type \u003d TypeFactory.unknownType();\r\n    }\r\n    return type;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B2",
      "B1 : If(i0 \u003c $i1) → B2 | else → B3",
      "B3 : If(r3 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  TypeBindings\n  i0 :\u003d @parameter0: int\n  if (i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d JavaType[] _types\u003e\n  $i1 \u003d lengthof $r1\n  if (i0 \u003c $i1) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r2 \u003d JavaType[] _types\u003e\n  r3 \u003d $r2[i0]\n  if (r3 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  r3 \u003d TypeFactory.unknownType()\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeBindings",
    "methodName": "getBoundTypeOrNull",
    "signature": "com.fasterxml.jackson.databind.JavaType getBoundTypeOrNull(int)",
    "visibility": "public",
    "body": "{\r\n    if (index \u003c 0 || index \u003e\u003d _types.length) {\r\n        return null;\r\n    }\r\n    return _types[index];\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B2",
      "B1 : If(i0 \u003c $i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TypeBindings\n  i0 :\u003d @parameter0: int\n  if (i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d JavaType[] _types\u003e\n  $i1 \u003d lengthof $r1\n  if (i0 \u003c $i1) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r2 \u003d JavaType[] _types\u003e\n  $r3 \u003d $r2[i0]\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeBindings",
    "methodName": "getTypeParameters",
    "signature": "java.util.List getTypeParameters()",
    "visibility": "public",
    "body": "{\r\n    if (_types.length \u003d\u003d 0) {\r\n        return Collections.emptyList();\r\n    }\r\n    List\u003cJavaType\u003e list \u003d Arrays.asList(_types);\r\n    if (list.contains(null)) {\r\n        // jackson-databind#4122\r\n        list \u003d new ArrayList\u003c\u003e(list);\r\n        for (int i \u003d 0; i \u003c list.size(); i++) {\r\n            if (list.get(i) \u003d\u003d null) {\r\n                list.set(i, TypeFactory.unknownType());\r\n            }\r\n        }\r\n    }\r\n    return list;\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B8",
      "B4 : If(i2 \u003e\u003d $i1) → B5 | else → B8",
      "B5 : If($r4 !\u003d null) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  TypeBindings\n  $r1 \u003d JavaType[] _types\u003e\n  $i0 \u003d lengthof $r1\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d Collections.emptyList()\n  return\n}",
      "B2 {\n  $r2 \u003d JavaType[] _types\u003e\n  r7 \u003d Arrays.asList($r2)\n  $z0 \u003d r7.contains(null)\n  if ($z0 \u003d\u003d false) goto B3 else B8\n}",
      "B3 {\n  $r3 \u003d ArrayList\n  new ArrayList(r7)\n  r7 \u003d $r3\n  i2 \u003d 0\n}",
      "B4 {\n  $i1 \u003d $r3.size()\n  if (i2 \u003e\u003d $i1) goto B5 else B8\n}",
      "B5 {\n  $r4 \u003d $r3.get(i2)\n  if ($r4 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r5 \u003d TypeFactory.unknownType()\n  $r3.set(i2, $r5)\n}",
      "B7 {\n  i2 \u003d i2 + 1\n  goto B4\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B8",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B4",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeBindings",
    "methodName": "hasUnbound",
    "signature": "boolean hasUnbound(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (_unboundVariables !\u003d null) {\r\n        for (int i \u003d _unboundVariables.length; --i \u003e\u003d 0; ) {\r\n            if (name.equals(_unboundVariables[i])) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B5",
      "B2 : If(i0 \u003c 0) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TypeBindings\n  String\n  $r1 \u003d String[] _unboundVariables\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  $r2 \u003d String[] _unboundVariables\u003e\n  i0 \u003d lengthof $r2\n}",
      "B2 {\n  $i2 \u003d (int) -1\n  i0 \u003d i0 + $i2\n  if (i0 \u003c 0) goto B3 else B5\n}",
      "B3 {\n  $r4 \u003d String[] _unboundVariables\u003e\n  $r5 \u003d $r4[i0]\n  $z0 \u003d r3.equals($r5)\n  if ($z0 \u003d\u003d false) goto B4 else B2\n}",
      "B4 {\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeBindings",
    "methodName": "asKey",
    "signature": "java.lang.Object asKey(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    // safe to pass _types array without copy since it is not exposed via\r\n    // any access, nor modified by this class\r\n    if (invalidCacheKey()) {\r\n        // If placeholders are present, no key may be returned because the key is unhelpful without context.\r\n        return null;\r\n    }\r\n    return new AsKey(rawBase, _types, _hashCode);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TypeBindings\n  Class\n  $z0 \u003d r0.invalidCacheKey()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d TypeBindings$AsKey\n  $r3 \u003d JavaType[] _types\u003e\n  $i0 \u003d TypeBindings: int _hashCode\u003e\n  new TypeBindings$AsKey(r2, $r3, $i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeBindings#invalidCacheKey(...0)",
        "body": "{\r\n    for (JavaType type : _types) {\r\n        if (type instanceof IdentityEqualityType) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeBindings",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    if (_types.length \u003d\u003d 0) {\r\n        return \"\u003c\u003e\";\r\n    }\r\n    StringBuilder sb \u003d new StringBuilder();\r\n    sb.append(\u0027\u003c\u0027);\r\n    for (int i \u003d 0, len \u003d _types.length; i \u003c len; ++i) {\r\n        if (i \u003e 0) {\r\n            sb.append(\u0027,\u0027);\r\n        }\r\n        //            sb \u003d _types[i].appendBriefDescription(sb);\r\n        JavaType type \u003d _types[i];\r\n        if (type \u003d\u003d null) {\r\n            sb.append(\"?\");\r\n        } else {\r\n            sb.append(type.getGenericSignature());\r\n        }\r\n    }\r\n    sb.append(\u0027\u003e\u0027);\r\n    return sb.toString();\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B3 : If(i2 \u003e\u003d i1) → B4 | else → B10",
      "B4 : If(i2 \u003c\u003d 0) → B5 | else → B6",
      "B6 : If($r7 !\u003d null) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  TypeBindings\n  $r1 \u003d JavaType[] _types\u003e\n  $i0 \u003d lengthof $r1\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d StringBuilder\n  new StringBuilder()\n  $r2.append(60)\n  i2 \u003d 0\n  $r3 \u003d JavaType[] _types\u003e\n  i1 \u003d lengthof $r3\n}",
      "B3 {\n  if (i2 \u003e\u003d i1) goto B4 else B10\n}",
      "B4 {\n  if (i2 \u003c\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r2.append(44)\n}",
      "B6 {\n  $r5 \u003d JavaType[] _types\u003e\n  $r7 \u003d $r5[i2]\n  if ($r7 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r2.append(\"?\")\n  goto B9\n}",
      "B8 {\n  $r6 \u003d $r7.getGenericSignature()\n  $r2.append($r6)\n}",
      "B9 {\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B10 {\n  $r2.append(62)\n  $r4 \u003d $r2.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B10",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B3",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeBindings",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (!ClassUtil.hasClass(o, getClass())) {\r\n        return false;\r\n    }\r\n    TypeBindings other \u003d (TypeBindings) o;\r\n    // hashCode and equality are based solely on _types.\r\n    return _hashCode \u003d\u003d other._hashCode \u0026\u0026 Arrays.equals(_types, other._types);\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($i1 !\u003d $i0) → B5 | else → B7",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  TypeBindings\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d r1.getClass()\n  $z0 \u003d ClassUtil.hasClass(r0, $r2)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r3 \u003d TypeBindings) r0\n  $i1 \u003d TypeBindings: int _hashCode\u003e\n  $i0 \u003d TypeBindings: int _hashCode\u003e\n  if ($i1 !\u003d $i0) goto B5 else B7\n}",
      "B5 {\n  $r5 \u003d JavaType[] _types\u003e\n  $r4 \u003d JavaType[] _types\u003e\n  $z1 \u003d Arrays.equals($r5, $r4)\n  if ($z1 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $z2 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z2 \u003d 0\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeBindings#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeFactory",
    "methodName": "withModifier",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory withModifier(com.fasterxml.jackson.databind.type.TypeModifier)",
    "visibility": "public",
    "body": "{\r\n    LookupCache\u003cObject, JavaType\u003e typeCache \u003d _typeCache;\r\n    TypeModifier[] mods;\r\n    if (mod \u003d\u003d null) {\r\n        // mostly for unit tests\r\n        mods \u003d null;\r\n        // 30-Jun-2016, tatu: for some reason expected semantics are to clear cache\r\n        //    in this case; can\u0027t recall why, but keeping the same\r\n        typeCache \u003d null;\r\n    } else if (_modifiers \u003d\u003d null) {\r\n        mods \u003d new TypeModifier[] { mod };\r\n        // 29-Jul-2019, tatu: Actually I think we better clear cache in this case\r\n        //    as well to ensure no leakage occurs (see [databind#2395])\r\n        typeCache \u003d null;\r\n    } else {\r\n        // but may keep existing cache otherwise\r\n        mods \u003d ArrayBuilders.insertInListNoDup(_modifiers, mod);\r\n    }\r\n    return new TypeFactory(typeCache, _parser, mods, _classLoader);\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B2 : If($r2 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  TypeFactory\n  TypeModifier\n  r6 \u003d LookupCache _typeCache\u003e\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r7 \u003d null\n  r6 \u003d null\n  goto B5\n}",
      "B2 {\n  $r2 \u003d TypeModifier[] _modifiers\u003e\n  if ($r2 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d TypeModifier)[1]\n  $r5[0] \u003d r1\n  r7 \u003d $r5\n  r6 \u003d null\n  goto B5\n}",
      "B4 {\n  $r3 \u003d TypeModifier[] _modifiers\u003e\n  $r4 \u003d ArrayBuilders.insertInListNoDup($r3, r1)\n  r7 \u003d TypeModifier[]) $r4\n}",
      "B5 {\n  $r8 \u003d TypeFactory\n  $r9 \u003d TypeParser _parser\u003e\n  $r10 \u003d ClassLoader _classLoader\u003e\n  new TypeFactory(r6, $r9, r7, $r10)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeFactory",
    "methodName": "rawClass",
    "signature": "java.lang.Class rawClass(java.lang.reflect.Type)",
    "visibility": "public",
    "body": "{\r\n    if (t instanceof Class\u003c?\u003e) {\r\n        return (Class\u003c?\u003e) t;\r\n    } else if (t instanceof JavaType) {\r\n        return ((JavaType) t).getRawClass();\r\n    } else if (t instanceof GenericArrayType) {\r\n        return Array.newInstance(rawClass(((GenericArrayType) t).getGenericComponentType()), 0).getClass();\r\n    } else if (t instanceof ParameterizedType) {\r\n        return rawClass(((ParameterizedType) t).getRawType());\r\n    } else if (t instanceof TypeVariable\u003c?\u003e) {\r\n        return rawClass(((TypeVariable\u003c?\u003e) t).getBounds()[0]);\r\n    } else if (t instanceof WildcardType) {\r\n        return rawClass(((WildcardType) t).getUpperBounds()[0]);\r\n    }\r\n    // fallback\r\n    // 12-Oct-2024, tatu: Seems unnecessary (replacing with throw does not\r\n    //   fail any tests), but left for 2.x, changed in 3.0\r\n    return defaultInstance().constructType(t).getRawClass();\r\n}",
    "nodes": 13,
    "edges": 12,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B6",
      "B6 : If($z3 \u003d\u003d false) → B7 | else → B8",
      "B8 : If($z4 \u003d\u003d false) → B9 | else → B10",
      "B10 : If($z5 \u003d\u003d false) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  Type\n  $z0 \u003d Class\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r22 \u003d Class) r0\n  return\n}",
      "B2 {\n  $z1 \u003d JavaType\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r20 \u003d JavaType) r0\n  $r21 \u003d $r20.getRawClass()\n  return\n}",
      "B4 {\n  $z2 \u003d GenericArrayType\n  if ($z2 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r15 \u003d GenericArrayType) r0\n  $r16 \u003d $r15.getGenericComponentType()\n  $r17 \u003d TypeFactory.rawClass($r16)\n  $r18 \u003d Array.newInstance($r17, 0)\n  $r19 \u003d $r18.getClass()\n  return\n}",
      "B6 {\n  $z3 \u003d ParameterizedType\n  if ($z3 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $r12 \u003d ParameterizedType) r0\n  $r13 \u003d $r12.getRawType()\n  $r14 \u003d TypeFactory.rawClass($r13)\n  return\n}",
      "B8 {\n  $z4 \u003d TypeVariable\n  if ($z4 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r8 \u003d TypeVariable) r0\n  $r9 \u003d $r8.getBounds()\n  $r10 \u003d $r9[0]\n  $r11 \u003d TypeFactory.rawClass($r10)\n  return\n}",
      "B10 {\n  $z5 \u003d WildcardType\n  if ($z5 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  $r4 \u003d WildcardType) r0\n  $r5 \u003d $r4.getUpperBounds()\n  $r6 \u003d $r5[0]\n  $r7 \u003d TypeFactory.rawClass($r6)\n  return\n}",
      "B12 {\n  $r1 \u003d TypeFactory.defaultInstance()\n  $r2 \u003d $r1.constructType(r0)\n  $r3 \u003d $r2.getRawClass()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeFactory#rawClass(...1)",
        "body": "{\r\n    if (t instanceof Class\u003c?\u003e) {\r\n        return (Class\u003c?\u003e) t;\r\n    } else if (t instanceof JavaType) {\r\n        return ((JavaType) t).getRawClass();\r\n    } else if (t instanceof GenericArrayType) {\r\n        return Array.newInstance(rawClass(((GenericArrayType) t).getGenericComponentType()), 0).getClass();\r\n    } else if (t instanceof ParameterizedType) {\r\n        return rawClass(((ParameterizedType) t).getRawType());\r\n    } else if (t instanceof TypeVariable\u003c?\u003e) {\r\n        return rawClass(((TypeVariable\u003c?\u003e) t).getBounds()[0]);\r\n    } else if (t instanceof WildcardType) {\r\n        return rawClass(((WildcardType) t).getUpperBounds()[0]);\r\n    }\r\n    // fallback\r\n    // 12-Oct-2024, tatu: Seems unnecessary (replacing with throw does not\r\n    //   fail any tests), but left for 2.x, changed in 3.0\r\n    return defaultInstance().constructType(t).getRawClass();\r\n}"
      },
      {
        "name": "TypeFactory#defaultInstance(...0)",
        "body": "{\r\n    return instance;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeFactory",
    "methodName": "findClass",
    "signature": "java.lang.Class findClass(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (className.indexOf(\u0027.\u0027) \u003c 0) {\r\n        Class\u003c?\u003e prim \u003d _findPrimitive(className);\r\n        if (prim !\u003d null) {\r\n            return prim;\r\n        }\r\n    }\r\n    // Two-phase lookup: first using context ClassLoader; then default\r\n    Throwable prob \u003d null;\r\n    ClassLoader loader \u003d this.getClassLoader();\r\n    if (loader \u003d\u003d null) {\r\n        loader \u003d Thread.currentThread().getContextClassLoader();\r\n    }\r\n    if (loader !\u003d null) {\r\n        try {\r\n            return classForName(className, true, loader);\r\n        } catch (Exception e) {\r\n            prob \u003d ClassUtil.getRootCause(e);\r\n        }\r\n    }\r\n    try {\r\n        return classForName(className);\r\n    } catch (Exception e) {\r\n        if (prob \u003d\u003d null) {\r\n            prob \u003d ClassUtil.getRootCause(e);\r\n        }\r\n    }\r\n    ClassUtil.throwIfRTE(prob);\r\n    throw new ClassNotFoundException(prob.getMessage(), prob);\r\n}",
    "nodes": 12,
    "edges": 13,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 \u003e\u003d 0) → B1 | else → B3",
      "B1 : If(r10 \u003d\u003d null) → B2 | else → B3",
      "B3 : If($r5 !\u003d null) → B4 | else → B5",
      "B5 : If(r12 \u003d\u003d null) → B6 | else → B8",
      "B9 : If(r11 !\u003d null) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  TypeFactory\n  String\n  $i0 \u003d r0.indexOf(46)\n  if ($i0 \u003e\u003d 0) goto B1 else B3\n}",
      "B1 {\n  r10 \u003d r1._findPrimitive(r0)\n  if (r10 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  r11 \u003d null\n  $r5 \u003d r1.getClassLoader()\n  r12 \u003d $r5\n  if ($r5 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d Thread.currentThread()\n  r12 \u003d $r4.getContextClassLoader()\n}",
      "B5 {\n  if (r12 \u003d\u003d null) goto B6 else B8\n}",
      "B6 {\n  $r3 \u003d r1.classForName(r0, 1, r12)\n  return\n}",
      "B7 {\n  $r9 :\u003d @caughtexception\n  r11 \u003d ClassUtil.getRootCause($r9)\n}",
      "B8 {\n  $r2 \u003d r1.classForName(r0)\n  return\n}",
      "B9 {\n  $r6 :\u003d @caughtexception\n  if (r11 !\u003d null) goto B10 else B11\n}",
      "B10 {\n  r11 \u003d ClassUtil.getRootCause($r6)\n}",
      "B11 {\n  ClassUtil.throwIfRTE(r11)\n  $r7 \u003d ClassNotFoundException\n  $r8 \u003d r11.getMessage()\n  new ClassNotFoundException($r8, r11)\n  throw $r7\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeFactory#_findPrimitive(...1)",
        "body": "{\r\n    if (\"int\".equals(className))\r\n        return Integer.TYPE;\r\n    if (\"long\".equals(className))\r\n        return Long.TYPE;\r\n    if (\"float\".equals(className))\r\n        return Float.TYPE;\r\n    if (\"double\".equals(className))\r\n        return Double.TYPE;\r\n    if (\"boolean\".equals(className))\r\n        return Boolean.TYPE;\r\n    if (\"byte\".equals(className))\r\n        return Byte.TYPE;\r\n    if (\"char\".equals(className))\r\n        return Character.TYPE;\r\n    if (\"short\".equals(className))\r\n        return Short.TYPE;\r\n    if (\"void\".equals(className))\r\n        return Void.TYPE;\r\n    return null;\r\n}"
      },
      {
        "name": "TypeFactory#classForName(...3)",
        "body": "{\r\n    return Class.forName(name, true, loader);\r\n}"
      },
      {
        "name": "TypeFactory#classForName(...1)",
        "body": "{\r\n    return Class.forName(name);\r\n}"
      },
      {
        "name": "TypeFactory#getClassLoader(...0)",
        "body": "{\r\n    return _classLoader;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeFactory",
    "methodName": "constructSpecializedType",
    "signature": "com.fasterxml.jackson.databind.JavaType constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class,boolean)",
    "visibility": "public",
    "body": "{\r\n    // simple optimization to avoid costly introspection if type-erased type does NOT differ\r\n    final Class\u003c?\u003e rawBase \u003d baseType.getRawClass();\r\n    if (rawBase \u003d\u003d subclass) {\r\n        return baseType;\r\n    }\r\n    JavaType newType;\r\n    // also: if we start from untyped, not much to save\r\n    do {\r\n        // bogus loop to be able to break\r\n        if (rawBase \u003d\u003d Object.class) {\r\n            newType \u003d _fromClass(null, subclass, EMPTY_BINDINGS);\r\n            break;\r\n        }\r\n        if (!rawBase.isAssignableFrom(subclass)) {\r\n            throw new IllegalArgumentException(String.format(\"Class %s not subtype of %s\", ClassUtil.nameOf(subclass), ClassUtil.getTypeDescription(baseType)));\r\n        }\r\n        // A few special cases where we can simplify handling:\r\n        // (1) A small set of \"well-known\" List/Map subtypes where can take a short-cut\r\n        if (baseType.isContainerType()) {\r\n            if (baseType.isMapLikeType()) {\r\n                if ((subclass \u003d\u003d HashMap.class) || (subclass \u003d\u003d LinkedHashMap.class) || (subclass \u003d\u003d EnumMap.class) || (subclass \u003d\u003d TreeMap.class)) {\r\n                    newType \u003d _fromClass(null, subclass, TypeBindings.create(subclass, baseType.getKeyType(), baseType.getContentType()));\r\n                    break;\r\n                }\r\n            } else if (baseType.isCollectionLikeType()) {\r\n                if ((subclass \u003d\u003d ArrayList.class) || (subclass \u003d\u003d LinkedList.class) || (subclass \u003d\u003d HashSet.class) || (subclass \u003d\u003d TreeSet.class)) {\r\n                    newType \u003d _fromClass(null, subclass, TypeBindings.create(subclass, baseType.getContentType()));\r\n                    break;\r\n                }\r\n                // 29-Oct-2015, tatu: One further shortcut: there are variants of `EnumSet`,\r\n                //    but they are impl details and we basically do not care...\r\n                if (rawBase \u003d\u003d EnumSet.class) {\r\n                    return baseType;\r\n                }\r\n            }\r\n        }\r\n        // (2) Original target type has no generics -- just resolve subtype\r\n        if (baseType.getBindings().isEmpty()) {\r\n            newType \u003d _fromClass(null, subclass, EMPTY_BINDINGS);\r\n            break;\r\n        }\r\n        // (3) Sub-class does not take type parameters -- just resolve subtype\r\n        int typeParamCount \u003d subclass.getTypeParameters().length;\r\n        if (typeParamCount \u003d\u003d 0) {\r\n            newType \u003d _fromClass(null, subclass, EMPTY_BINDINGS);\r\n            break;\r\n        }\r\n        // (4) If all else fails, do the full traversal using placeholders\r\n        TypeBindings tb \u003d _bindingsForSubtype(baseType, typeParamCount, subclass, relaxedCompatibilityCheck);\r\n        newType \u003d _fromClass(null, subclass, tb);\r\n    } while (false);\r\n    // 25-Sep-2016, tatu: As per [databind#1384] also need to ensure handlers get\r\n    //   copied as well\r\n    newType \u003d newType.withHandlersFrom(baseType);\r\n    return newType;\r\n}",
    "nodes": 27,
    "edges": 40,
    "cc": 15,
    "flowSummary": [
      "B0 : If(r1 !\u003d r2) → B1 | else → B2",
      "B2 : If(r1 !\u003d class \"Ljava/lang/Object;\") → B3 | else → B4",
      "B4 : If($z0 !\u003d 0) → B5 | else → B6",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B21",
      "B7 : If($z3 \u003d\u003d false) → B8 | else → B13",
      "B8 : If(r2 \u003d\u003d class \"Ljava/util/HashMap;\") → B9 | else → B12",
      "B9 : If(r2 \u003d\u003d class \"Ljava/util/LinkedHashMap;\") → B10 | else → B12",
      "B10 : If(r2 \u003d\u003d class \"Ljava/util/EnumMap;\") → B11 | else → B12",
      "B11 : If(r2 !\u003d class \"Ljava/util/TreeMap;\") → B12 | else → B21",
      "B13 : If($z4 \u003d\u003d false) → B14 | else → B21",
      "B14 : If(r2 \u003d\u003d class \"Ljava/util/ArrayList;\") → B15 | else → B18",
      "B15 : If(r2 \u003d\u003d class \"Ljava/util/LinkedList;\") → B16 | else → B18",
      "B16 : If(r2 \u003d\u003d class \"Ljava/util/HashSet;\") → B17 | else → B18",
      "B17 : If(r2 !\u003d class \"Ljava/util/TreeSet;\") → B18 | else → B19",
      "B19 : If(r1 !\u003d class \"Ljava/util/EnumSet;\") → B20 | else → B21",
      "B21 : If($z5 \u003d\u003d false) → B22 | else → B23",
      "B23 : If(i0 !\u003d 0) → B24 | else → B25"
    ],
    "blockList": [
      "B0 {\n  TypeFactory\n  JavaType\n  Class\n  z2 :\u003d @parameter2: boolean\n  r1 \u003d r0.getRawClass()\n  if (r1 !\u003d r2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d class \"Ljava/lang/Object;\") goto B3 else B4\n}",
      "B3 {\n  $r13 \u003d TypeBindings EMPTY_BINDINGS\u003e\n  r14 \u003d r4._fromClass(null, r2, $r13)\n  goto B26\n}",
      "B4 {\n  $z0 \u003d r1.isAssignableFrom(r2)\n  if ($z0 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r8 \u003d IllegalArgumentException\n  $r9 \u003d Object)[2]\n  $r10 \u003d ClassUtil.nameOf(r2)\n  $r9[0] \u003d $r10\n  $r11 \u003d ClassUtil.getTypeDescription(r0)\n  $r9[1] \u003d $r11\n  $r12 \u003d String.format(\"Class %s not subtype of %s\", $r9)\n  new IllegalArgumentException($r12)\n  throw $r8\n}",
      "B6 {\n  $z1 \u003d r0.isContainerType()\n  if ($z1 \u003d\u003d false) goto B7 else B21\n}",
      "B7 {\n  $z3 \u003d r0.isMapLikeType()\n  if ($z3 \u003d\u003d false) goto B8 else B13\n}",
      "B8 {\n  if (r2 \u003d\u003d class \"Ljava/util/HashMap;\") goto B9 else B12\n}",
      "B9 {\n  if (r2 \u003d\u003d class \"Ljava/util/LinkedHashMap;\") goto B10 else B12\n}",
      "B10 {\n  if (r2 \u003d\u003d class \"Ljava/util/EnumMap;\") goto B11 else B12\n}",
      "B11 {\n  if (r2 !\u003d class \"Ljava/util/TreeMap;\") goto B12 else B21\n}",
      "B12 {\n  $r15 \u003d r0.getKeyType()\n  $r16 \u003d r0.getContentType()\n  $r17 \u003d TypeBindings.create(r2, $r15, $r16)\n  r14 \u003d r4._fromClass(null, r2, $r17)\n  goto B26\n}",
      "B13 {\n  $z4 \u003d r0.isCollectionLikeType()\n  if ($z4 \u003d\u003d false) goto B14 else B21\n}",
      "B14 {\n  if (r2 \u003d\u003d class \"Ljava/util/ArrayList;\") goto B15 else B18\n}",
      "B15 {\n  if (r2 \u003d\u003d class \"Ljava/util/LinkedList;\") goto B16 else B18\n}",
      "B16 {\n  if (r2 \u003d\u003d class \"Ljava/util/HashSet;\") goto B17 else B18\n}",
      "B17 {\n  if (r2 !\u003d class \"Ljava/util/TreeSet;\") goto B18 else B19\n}",
      "B18 {\n  $r18 \u003d r0.getContentType()\n  $r19 \u003d TypeBindings.create(r2, $r18)\n  r14 \u003d r4._fromClass(null, r2, $r19)\n  goto B26\n}",
      "B19 {\n  if (r1 !\u003d class \"Ljava/util/EnumSet;\") goto B20 else B21\n}",
      "B20 {\n  return\n}",
      "B21 {\n  $r20 \u003d r0.getBindings()\n  $z5 \u003d $r20.isEmpty()\n  if ($z5 \u003d\u003d false) goto B22 else B23\n}",
      "B22 {\n  $r7 \u003d TypeBindings EMPTY_BINDINGS\u003e\n  r14 \u003d r4._fromClass(null, r2, $r7)\n  goto B26\n}",
      "B23 {\n  $r3 \u003d r2.getTypeParameters()\n  i0 \u003d lengthof $r3\n  if (i0 !\u003d 0) goto B24 else B25\n}",
      "B24 {\n  $r6 \u003d TypeBindings EMPTY_BINDINGS\u003e\n  r14 \u003d r4._fromClass(null, r2, $r6)\n  goto B26\n}",
      "B25 {\n  r5 \u003d r4._bindingsForSubtype(r0, i0, r2, z2)\n  r14 \u003d r4._fromClass(null, r2, r5)\n}",
      "B26 {\n  $r21 \u003d r14.withHandlersFrom(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B26",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B21",
      "B7 --\u003e B8",
      "B7 --\u003e B13",
      "B8 --\u003e B9",
      "B8 --\u003e B12",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B11 --\u003e B21",
      "B12 --\u003e B26",
      "B13 --\u003e B14",
      "B13 --\u003e B21",
      "B14 --\u003e B15",
      "B14 --\u003e B18",
      "B15 --\u003e B16",
      "B15 --\u003e B18",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B26",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e [EXIT]",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B26",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B26",
      "B26 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeFactory#_bindingsForSubtype(...4)",
        "body": "{\r\n    PlaceholderForType[] placeholders \u003d new PlaceholderForType[typeParamCount];\r\n    for (int i \u003d 0; i \u003c typeParamCount; ++i) {\r\n        placeholders[i] \u003d new PlaceholderForType(i);\r\n    }\r\n    TypeBindings b \u003d TypeBindings.create(subclass, placeholders);\r\n    // First: pseudo-resolve to get placeholders in place:\r\n    JavaType tmpSub \u003d _fromClass(null, subclass, b);\r\n    // Then find super-type\r\n    JavaType baseWithPlaceholders \u003d tmpSub.findSuperType(baseType.getRawClass());\r\n    if (baseWithPlaceholders \u003d\u003d null) {\r\n        // should be found but...\r\n        throw new IllegalArgumentException(String.format(\"Internal error: unable to locate supertype (%s) from resolved subtype %s\", baseType.getRawClass().getName(), subclass.getName()));\r\n    }\r\n    // and traverse type hierarchies to both verify and to resolve placeholders\r\n    String error \u003d _resolveTypePlaceholders(baseType, baseWithPlaceholders);\r\n    if (error !\u003d null) {\r\n        // 28-Mar-2020, tatu: As per [databind#2632], need to ignore the issue in\r\n        //   some cases. For now, just fully ignore; may need to refine in future\r\n        if (!relaxedCompatibilityCheck) {\r\n            throw new IllegalArgumentException(\"Failed to specialize base type \" + baseType.toCanonical() + \" as \" + subclass.getName() + \", problem: \" + error);\r\n        }\r\n    }\r\n    final JavaType[] typeParams \u003d new JavaType[typeParamCount];\r\n    for (int i \u003d 0; i \u003c typeParamCount; ++i) {\r\n        JavaType t \u003d placeholders[i].actualType();\r\n        // 18-Oct-2017, tatu: Looks like sometimes we have incomplete bindings (even if not\r\n        //     common, it is possible if subtype is type-erased class with added type\r\n        //     variable -- see test(s) with \"bogus\" type(s)).\r\n        if (t \u003d\u003d null) {\r\n            t \u003d unknownType();\r\n        }\r\n        typeParams[i] \u003d t;\r\n    }\r\n    return TypeBindings.create(subclass, typeParams);\r\n}"
      },
      {
        "name": "TypeFactory#_fromClass(...3)",
        "body": "{\r\n    // Very first thing: small set of core types we know well:\r\n    JavaType result \u003d _findWellKnownSimple(rawType);\r\n    if (result !\u003d null) {\r\n        return result;\r\n    }\r\n    // Barring that, we may have recently constructed an instance\r\n    final Object key;\r\n    if ((bindings \u003d\u003d null) || bindings.isEmpty()) {\r\n        key \u003d rawType;\r\n    } else {\r\n        key \u003d bindings.asKey(rawType);\r\n    }\r\n    // ok, cache object is synced\r\n    result \u003d key \u003d\u003d null ? null : _typeCache.get(key);\r\n    if (result !\u003d null) {\r\n        return result;\r\n    }\r\n    // 15-Oct-2015, tatu: recursive reference?\r\n    if (context \u003d\u003d null) {\r\n        context \u003d new ClassStack(rawType);\r\n    } else {\r\n        ClassStack prev \u003d context.find(rawType);\r\n        if (prev !\u003d null) {\r\n            // Self-reference: needs special handling, then...\r\n            ResolvedRecursiveType selfRef \u003d new ResolvedRecursiveType(rawType, EMPTY_BINDINGS);\r\n            prev.addSelfReference(selfRef);\r\n            return selfRef;\r\n        }\r\n        // no, but need to update context to allow for proper cycle resolution\r\n        context \u003d context.child(rawType);\r\n    }\r\n    // First: do we have an array type?\r\n    if (rawType.isArray()) {\r\n        result \u003d ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings), bindings);\r\n    } else {\r\n        // If not, need to proceed by first resolving parent type hierarchy\r\n        JavaType superClass;\r\n        JavaType[] superInterfaces;\r\n        if (rawType.isInterface()) {\r\n            superClass \u003d null;\r\n            superInterfaces \u003d _resolveSuperInterfaces(context, rawType, bindings);\r\n        } else {\r\n            // Note: even Enums can implement interfaces, so cannot drop those\r\n            superClass \u003d _resolveSuperClass(context, rawType, bindings);\r\n            superInterfaces \u003d _resolveSuperInterfaces(context, rawType, bindings);\r\n        }\r\n        // 19-Oct-2015, tatu: Bit messy, but we need to \u0027fix\u0027 java.util.Properties here...\r\n        if (rawType \u003d\u003d Properties.class) {\r\n            result \u003d MapType.construct(rawType, bindings, superClass, superInterfaces, CORE_TYPE_STRING, CORE_TYPE_STRING);\r\n        } else // And then check what flavor of type we got. Start by asking resolved\r\n        // super-type if refinement is all that is needed?\r\n        if (superClass !\u003d null) {\r\n            result \u003d superClass.refine(rawType, bindings, superClass, superInterfaces);\r\n        }\r\n        // if not, perhaps we are now resolving a well-known class or interface?\r\n        if (result \u003d\u003d null) {\r\n            result \u003d _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces);\r\n            if (result \u003d\u003d null) {\r\n                result \u003d _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);\r\n                if (result \u003d\u003d null) {\r\n                    // but if nothing else, \"simple\" class for now:\r\n                    result \u003d _newSimpleType(rawType, bindings, superClass, superInterfaces);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    context.resolveSelfReferences(result);\r\n    // 16-Jul-2016, tatu: [databind#1302] is solved different way, but ideally we shouldn\u0027t\r\n    //     cache anything with partially resolved `ResolvedRecursiveType`... so maybe improve\r\n    if (key !\u003d null \u0026\u0026 !result.hasHandlers()) {\r\n        // cache object syncs\r\n        _typeCache.putIfAbsent(key, result);\r\n    }\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeFactory",
    "methodName": "constructGeneralizedType",
    "signature": "com.fasterxml.jackson.databind.JavaType constructGeneralizedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    // simple optimization to avoid costly introspection if type-erased type does NOT differ\r\n    final Class\u003c?\u003e rawBase \u003d baseType.getRawClass();\r\n    if (rawBase \u003d\u003d superClass) {\r\n        return baseType;\r\n    }\r\n    JavaType superType \u003d baseType.findSuperType(superClass);\r\n    if (superType \u003d\u003d null) {\r\n        // Most likely, caller did not verify sub/super-type relationship\r\n        if (!superClass.isAssignableFrom(rawBase)) {\r\n            throw new IllegalArgumentException(String.format(\"Class %s not a super-type of %s\", superClass.getName(), baseType));\r\n        }\r\n        // 01-Nov-2015, tatu: Should never happen, but ch\r\n        throw new IllegalArgumentException(String.format(\"Internal error: class %s not included as super-type for %s\", superClass.getName(), baseType));\r\n    }\r\n    return superType;\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r1 !\u003d r2) → B1 | else → B2",
      "B2 : If(r3 !\u003d null) → B3 | else → B6",
      "B3 : If($z0 !\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  TypeFactory\n  JavaType\n  Class\n  r1 \u003d r0.getRawClass()\n  if (r1 !\u003d r2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r3 \u003d r0.findSuperType(r2)\n  if (r3 !\u003d null) goto B3 else B6\n}",
      "B3 {\n  $z0 \u003d r2.isAssignableFrom(r1)\n  if ($z0 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r8 \u003d IllegalArgumentException\n  $r9 \u003d Object)[2]\n  $r10 \u003d r2.getName()\n  $r9[0] \u003d $r10\n  $r9[1] \u003d r0\n  $r11 \u003d String.format(\"Class %s not a super-type of %s\", $r9)\n  new IllegalArgumentException($r11)\n  throw $r8\n}",
      "B5 {\n  $r4 \u003d IllegalArgumentException\n  $r5 \u003d Object)[2]\n  $r6 \u003d r2.getName()\n  $r5[0] \u003d $r6\n  $r5[1] \u003d r0\n  $r7 \u003d String.format(\"Internal error: class %s not included as super-type for %s\", $r5)\n  new IllegalArgumentException($r7)\n  throw $r4\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeFactory",
    "methodName": "findTypeParameters",
    "signature": "com.fasterxml.jackson.databind.JavaType[] findTypeParameters(com.fasterxml.jackson.databind.JavaType,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    JavaType match \u003d type.findSuperType(expType);\r\n    if (match \u003d\u003d null) {\r\n        return NO_TYPES;\r\n    }\r\n    return match.getBindings().typeParameterArray();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TypeFactory\n  JavaType\n  Class\n  r2 \u003d r0.findSuperType(r1)\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d JavaType[] NO_TYPES\u003e\n  return\n}",
      "B2 {\n  $r3 \u003d r2.getBindings()\n  $r4 \u003d $r3.typeParameterArray()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeFactory",
    "methodName": "findFirstTypeParameter",
    "signature": "com.fasterxml.jackson.databind.JavaType findFirstTypeParameter(com.fasterxml.jackson.databind.JavaType,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    JavaType match \u003d type.findSuperType(expType);\r\n    if (match !\u003d null) {\r\n        JavaType t \u003d match.getBindings().getBoundTypeOrNull(0);\r\n        if (t !\u003d null) {\r\n            return t;\r\n        }\r\n    }\r\n    return _unknownType();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r6 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TypeFactory\n  JavaType\n  Class\n  r2 \u003d r0.findSuperType(r1)\n  if (r2 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r5 \u003d r2.getBindings()\n  r6 \u003d $r5.getBoundTypeOrNull(0)\n  if (r6 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r4 \u003d r3._unknownType()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeFactory#_unknownType(...0)",
        "body": "{\r\n    // 15-Sep-2015, tatu: Prior to 2.7, we constructed new instance for each call.\r\n    //    This may have been due to potential mutability of the instance; but that\r\n    //    should not be issue any more, and creation is somewhat wasteful. So let\u0027s\r\n    //    try reusing singleton/fly-weight instance.\r\n    return CORE_TYPE_OBJECT;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeFactory",
    "methodName": "moreSpecificType",
    "signature": "com.fasterxml.jackson.databind.JavaType moreSpecificType(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    if (type1 \u003d\u003d null) {\r\n        return type2;\r\n    }\r\n    if (type2 \u003d\u003d null) {\r\n        return type1;\r\n    }\r\n    Class\u003c?\u003e raw1 \u003d type1.getRawClass();\r\n    Class\u003c?\u003e raw2 \u003d type2.getRawClass();\r\n    if (raw1 \u003d\u003d raw2) {\r\n        return type1;\r\n    }\r\n    // TODO: maybe try sub-classing, to retain generic types?\r\n    if (raw1.isAssignableFrom(raw2)) {\r\n        return type2;\r\n    }\r\n    return type1;\r\n}",
    "nodes": 9,
    "edges": 8,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r1 !\u003d null) → B3 | else → B4",
      "B4 : If(r2 !\u003d r3) → B5 | else → B6",
      "B6 : If($z0 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  TypeFactory\n  JavaType\n  JavaType\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d r0.getRawClass()\n  r3 \u003d r1.getRawClass()\n  if (r2 !\u003d r3) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $z0 \u003d r2.isAssignableFrom(r3)\n  if ($z0 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeFactory",
    "methodName": "constructType",
    "signature": "com.fasterxml.jackson.databind.JavaType constructType(java.lang.reflect.Type,com.fasterxml.jackson.databind.type.TypeBindings)",
    "visibility": "public",
    "body": "{\r\n    // 15-Jun-2020, tatu: To resolve (parts of) [databind#2796], need to\r\n    //    call _fromClass() directly if we get `Class` argument\r\n    if (type instanceof Class\u003c?\u003e) {\r\n        JavaType resultType \u003d _fromClass(null, (Class\u003c?\u003e) type, bindings);\r\n        return _applyModifiers(type, resultType);\r\n    }\r\n    return _fromAny(null, type, bindings);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TypeFactory\n  Type\n  TypeBindings\n  $z0 \u003d Class\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d Class) r0\n  r5 \u003d r1._fromClass(null, $r4, r2)\n  $r6 \u003d r1._applyModifiers(r0, r5)\n  return\n}",
      "B2 {\n  $r3 \u003d r1._fromAny(null, r0, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeFactory#_applyModifiers(...2)",
        "body": "{\r\n    if (_modifiers \u003d\u003d null) {\r\n        return resolvedType;\r\n    }\r\n    JavaType resultType \u003d resolvedType;\r\n    TypeBindings b \u003d resultType.getBindings();\r\n    if (b \u003d\u003d null) {\r\n        b \u003d EMPTY_BINDINGS;\r\n    }\r\n    for (TypeModifier mod : _modifiers) {\r\n        JavaType t \u003d mod.modifyType(resultType, srcType, b, this);\r\n        if (t \u003d\u003d null) {\r\n            throw new IllegalStateException(String.format(\"TypeModifier %s (of type %s) return null for type %s\", mod, mod.getClass().getName(), resultType));\r\n        }\r\n        resultType \u003d t;\r\n    }\r\n    return resultType;\r\n}"
      },
      {
        "name": "TypeFactory#_fromClass(...3)",
        "body": "{\r\n    // Very first thing: small set of core types we know well:\r\n    JavaType result \u003d _findWellKnownSimple(rawType);\r\n    if (result !\u003d null) {\r\n        return result;\r\n    }\r\n    // Barring that, we may have recently constructed an instance\r\n    final Object key;\r\n    if ((bindings \u003d\u003d null) || bindings.isEmpty()) {\r\n        key \u003d rawType;\r\n    } else {\r\n        key \u003d bindings.asKey(rawType);\r\n    }\r\n    // ok, cache object is synced\r\n    result \u003d key \u003d\u003d null ? null : _typeCache.get(key);\r\n    if (result !\u003d null) {\r\n        return result;\r\n    }\r\n    // 15-Oct-2015, tatu: recursive reference?\r\n    if (context \u003d\u003d null) {\r\n        context \u003d new ClassStack(rawType);\r\n    } else {\r\n        ClassStack prev \u003d context.find(rawType);\r\n        if (prev !\u003d null) {\r\n            // Self-reference: needs special handling, then...\r\n            ResolvedRecursiveType selfRef \u003d new ResolvedRecursiveType(rawType, EMPTY_BINDINGS);\r\n            prev.addSelfReference(selfRef);\r\n            return selfRef;\r\n        }\r\n        // no, but need to update context to allow for proper cycle resolution\r\n        context \u003d context.child(rawType);\r\n    }\r\n    // First: do we have an array type?\r\n    if (rawType.isArray()) {\r\n        result \u003d ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings), bindings);\r\n    } else {\r\n        // If not, need to proceed by first resolving parent type hierarchy\r\n        JavaType superClass;\r\n        JavaType[] superInterfaces;\r\n        if (rawType.isInterface()) {\r\n            superClass \u003d null;\r\n            superInterfaces \u003d _resolveSuperInterfaces(context, rawType, bindings);\r\n        } else {\r\n            // Note: even Enums can implement interfaces, so cannot drop those\r\n            superClass \u003d _resolveSuperClass(context, rawType, bindings);\r\n            superInterfaces \u003d _resolveSuperInterfaces(context, rawType, bindings);\r\n        }\r\n        // 19-Oct-2015, tatu: Bit messy, but we need to \u0027fix\u0027 java.util.Properties here...\r\n        if (rawType \u003d\u003d Properties.class) {\r\n            result \u003d MapType.construct(rawType, bindings, superClass, superInterfaces, CORE_TYPE_STRING, CORE_TYPE_STRING);\r\n        } else // And then check what flavor of type we got. Start by asking resolved\r\n        // super-type if refinement is all that is needed?\r\n        if (superClass !\u003d null) {\r\n            result \u003d superClass.refine(rawType, bindings, superClass, superInterfaces);\r\n        }\r\n        // if not, perhaps we are now resolving a well-known class or interface?\r\n        if (result \u003d\u003d null) {\r\n            result \u003d _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces);\r\n            if (result \u003d\u003d null) {\r\n                result \u003d _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);\r\n                if (result \u003d\u003d null) {\r\n                    // but if nothing else, \"simple\" class for now:\r\n                    result \u003d _newSimpleType(rawType, bindings, superClass, superInterfaces);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    context.resolveSelfReferences(result);\r\n    // 16-Jul-2016, tatu: [databind#1302] is solved different way, but ideally we shouldn\u0027t\r\n    //     cache anything with partially resolved `ResolvedRecursiveType`... so maybe improve\r\n    if (key !\u003d null \u0026\u0026 !result.hasHandlers()) {\r\n        // cache object syncs\r\n        _typeCache.putIfAbsent(key, result);\r\n    }\r\n    return result;\r\n}"
      },
      {
        "name": "TypeFactory#_fromAny(...3)",
        "body": "{\r\n    JavaType resultType;\r\n    // simple class?\r\n    if (srcType instanceof Class\u003c?\u003e) {\r\n        // Important: remove possible bindings since this is type-erased thingy\r\n        resultType \u003d _fromClass(context, (Class\u003c?\u003e) srcType, EMPTY_BINDINGS);\r\n    } else // But if not, need to start resolving.\r\n    if (srcType instanceof ParameterizedType) {\r\n        resultType \u003d _fromParamType(context, (ParameterizedType) srcType, bindings);\r\n    } else if (srcType instanceof JavaType) {\r\n        // [databind#116]\r\n        // no need to modify further if we already had JavaType\r\n        return (JavaType) srcType;\r\n    } else if (srcType instanceof GenericArrayType) {\r\n        resultType \u003d _fromArrayType(context, (GenericArrayType) srcType, bindings);\r\n    } else if (srcType instanceof TypeVariable\u003c?\u003e) {\r\n        resultType \u003d _fromVariable(context, (TypeVariable\u003c?\u003e) srcType, bindings);\r\n    } else if (srcType instanceof WildcardType) {\r\n        resultType \u003d _fromWildcard(context, (WildcardType) srcType, bindings);\r\n    } else {\r\n        // sanity check\r\n        throw new IllegalArgumentException(\"Unrecognized Type: \" + ((srcType \u003d\u003d null) ? \"[null]\" : srcType.toString()));\r\n    }\r\n    // 21-Feb-2016, nateB/tatu: as per [databind#1129] (applied for 2.7.2),\r\n    //   we do need to let all kinds of types to be refined, esp. for Scala module.\r\n    return _applyModifiers(srcType, resultType);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeFactory",
    "methodName": "constructType",
    "signature": "com.fasterxml.jackson.databind.JavaType constructType(java.lang.reflect.Type,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    JavaType contextType \u003d (contextClass \u003d\u003d null) ? null : constructType(contextClass);\r\n    return constructType(type, contextType);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TypeFactory\n  Type\n  Class\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r1.constructType(r0)\n}",
      "B3 {\n  $r3 \u003d r1.constructType(r2, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeFactory#constructType(...2)",
        "body": "{\r\n    // 15-Jun-2020, tatu: To resolve (parts of) [databind#2796], need to\r\n    //    call _fromClass() directly if we get `Class` argument\r\n    if (type instanceof Class\u003c?\u003e) {\r\n        JavaType resultType \u003d _fromClass(null, (Class\u003c?\u003e) type, bindings);\r\n        return _applyModifiers(type, resultType);\r\n    }\r\n    return _fromAny(null, type, bindings);\r\n}"
      },
      {
        "name": "TypeFactory#constructType(...1)",
        "body": "{\r\n    return _fromAny(null, type, EMPTY_BINDINGS);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeFactory",
    "methodName": "constructType",
    "signature": "com.fasterxml.jackson.databind.JavaType constructType(java.lang.reflect.Type,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    TypeBindings bindings;\r\n    if (contextType \u003d\u003d null) {\r\n        bindings \u003d EMPTY_BINDINGS;\r\n    } else {\r\n        bindings \u003d contextType.getBindings();\r\n        // 16-Nov-2016, tatu: Unfortunately as per [databind#1456] this can\u0027t\r\n        //   be made to work for some cases used to work (even if accidentally);\r\n        //   however, we can try a simple heuristic to increase chances of\r\n        //   compatibility from 2.6 code\r\n        if (type.getClass() !\u003d Class.class) {\r\n            // Ok: so, ideally we would test super-interfaces if necessary;\r\n            // but let\u0027s assume most if not all cases are for classes.\r\n            while (bindings.isEmpty()) {\r\n                contextType \u003d contextType.getSuperClass();\r\n                if (contextType \u003d\u003d null) {\r\n                    break;\r\n                }\r\n                bindings \u003d contextType.getBindings();\r\n            }\r\n        }\r\n    }\r\n    return _fromAny(null, type, bindings);\r\n}",
    "nodes": 8,
    "edges": 11,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B2 : If($r1 \u003d\u003d class \"Ljava/lang/Class;\") → B3 | else → B7",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B7",
      "B4 : If(r3 !\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  TypeFactory\n  Type\n  JavaType\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r4 \u003d TypeBindings EMPTY_BINDINGS\u003e\n  goto B7\n}",
      "B2 {\n  r4 \u003d r3.getBindings()\n  $r1 \u003d r0.getClass()\n  if ($r1 \u003d\u003d class \"Ljava/lang/Class;\") goto B3 else B7\n}",
      "B3 {\n  $z0 \u003d r4.isEmpty()\n  if ($z0 \u003d\u003d false) goto B4 else B7\n}",
      "B4 {\n  r3 \u003d r3.getSuperClass()\n  if (r3 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  goto B7\n}",
      "B6 {\n  r4 \u003d r3.getBindings()\n  goto B3\n}",
      "B7 {\n  $r5 \u003d r2._fromAny(null, r0, r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeFactory#_fromAny(...3)",
        "body": "{\r\n    JavaType resultType;\r\n    // simple class?\r\n    if (srcType instanceof Class\u003c?\u003e) {\r\n        // Important: remove possible bindings since this is type-erased thingy\r\n        resultType \u003d _fromClass(context, (Class\u003c?\u003e) srcType, EMPTY_BINDINGS);\r\n    } else // But if not, need to start resolving.\r\n    if (srcType instanceof ParameterizedType) {\r\n        resultType \u003d _fromParamType(context, (ParameterizedType) srcType, bindings);\r\n    } else if (srcType instanceof JavaType) {\r\n        // [databind#116]\r\n        // no need to modify further if we already had JavaType\r\n        return (JavaType) srcType;\r\n    } else if (srcType instanceof GenericArrayType) {\r\n        resultType \u003d _fromArrayType(context, (GenericArrayType) srcType, bindings);\r\n    } else if (srcType instanceof TypeVariable\u003c?\u003e) {\r\n        resultType \u003d _fromVariable(context, (TypeVariable\u003c?\u003e) srcType, bindings);\r\n    } else if (srcType instanceof WildcardType) {\r\n        resultType \u003d _fromWildcard(context, (WildcardType) srcType, bindings);\r\n    } else {\r\n        // sanity check\r\n        throw new IllegalArgumentException(\"Unrecognized Type: \" + ((srcType \u003d\u003d null) ? \"[null]\" : srcType.toString()));\r\n    }\r\n    // 21-Feb-2016, nateB/tatu: as per [databind#1129] (applied for 2.7.2),\r\n    //   we do need to let all kinds of types to be refined, esp. for Scala module.\r\n    return _applyModifiers(srcType, resultType);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeFactory",
    "methodName": "constructCollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType constructCollectionType(java.lang.Class,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    TypeBindings bindings \u003d TypeBindings.createIfNeeded(collectionClass, elementType);\r\n    CollectionType result \u003d (CollectionType) _fromClass(null, collectionClass, bindings);\r\n    // 17-May-2017, tatu: As per [databind#1415], we better verify bound values if (but only if)\r\n    //    type being resolved was non-generic (i.e.element type was ignored)\r\n    if (bindings.isEmpty() \u0026\u0026 (elementType !\u003d null)) {\r\n        JavaType t \u003d result.findSuperType(Collection.class);\r\n        JavaType realET \u003d t.getContentType();\r\n        if (!realET.equals(elementType)) {\r\n            throw new IllegalArgumentException(String.format(\"Non-generic Collection class %s did not resolve to something with element type %s but %s \", ClassUtil.nameOf(collectionClass), elementType, realET));\r\n        }\r\n    }\r\n    return result;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B4",
      "B1 : If(r1 \u003d\u003d null) → B2 | else → B4",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  TypeFactory\n  Class\n  JavaType\n  r2 \u003d TypeBindings.createIfNeeded(r0, r1)\n  $r4 \u003d r3._fromClass(null, r0, r2)\n  r5 \u003d CollectionType) $r4\n  $z0 \u003d r2.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B4\n}",
      "B1 {\n  if (r1 \u003d\u003d null) goto B2 else B4\n}",
      "B2 {\n  r6 \u003d r5.findSuperType(class \"Ljava/util/Collection;\")\n  r7 \u003d r6.getContentType()\n  $z1 \u003d r7.equals(r1)\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r8 \u003d IllegalArgumentException\n  $r9 \u003d Object)[3]\n  $r10 \u003d ClassUtil.nameOf(r0)\n  $r9[0] \u003d $r10\n  $r9[1] \u003d r1\n  $r9[2] \u003d r7\n  $r11 \u003d String.format(\"Non-generic Collection class %s did not resolve to something with element type %s but %s \", $r9)\n  new IllegalArgumentException($r11)\n  throw $r8\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeFactory#_fromClass(...3)",
        "body": "{\r\n    // Very first thing: small set of core types we know well:\r\n    JavaType result \u003d _findWellKnownSimple(rawType);\r\n    if (result !\u003d null) {\r\n        return result;\r\n    }\r\n    // Barring that, we may have recently constructed an instance\r\n    final Object key;\r\n    if ((bindings \u003d\u003d null) || bindings.isEmpty()) {\r\n        key \u003d rawType;\r\n    } else {\r\n        key \u003d bindings.asKey(rawType);\r\n    }\r\n    // ok, cache object is synced\r\n    result \u003d key \u003d\u003d null ? null : _typeCache.get(key);\r\n    if (result !\u003d null) {\r\n        return result;\r\n    }\r\n    // 15-Oct-2015, tatu: recursive reference?\r\n    if (context \u003d\u003d null) {\r\n        context \u003d new ClassStack(rawType);\r\n    } else {\r\n        ClassStack prev \u003d context.find(rawType);\r\n        if (prev !\u003d null) {\r\n            // Self-reference: needs special handling, then...\r\n            ResolvedRecursiveType selfRef \u003d new ResolvedRecursiveType(rawType, EMPTY_BINDINGS);\r\n            prev.addSelfReference(selfRef);\r\n            return selfRef;\r\n        }\r\n        // no, but need to update context to allow for proper cycle resolution\r\n        context \u003d context.child(rawType);\r\n    }\r\n    // First: do we have an array type?\r\n    if (rawType.isArray()) {\r\n        result \u003d ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings), bindings);\r\n    } else {\r\n        // If not, need to proceed by first resolving parent type hierarchy\r\n        JavaType superClass;\r\n        JavaType[] superInterfaces;\r\n        if (rawType.isInterface()) {\r\n            superClass \u003d null;\r\n            superInterfaces \u003d _resolveSuperInterfaces(context, rawType, bindings);\r\n        } else {\r\n            // Note: even Enums can implement interfaces, so cannot drop those\r\n            superClass \u003d _resolveSuperClass(context, rawType, bindings);\r\n            superInterfaces \u003d _resolveSuperInterfaces(context, rawType, bindings);\r\n        }\r\n        // 19-Oct-2015, tatu: Bit messy, but we need to \u0027fix\u0027 java.util.Properties here...\r\n        if (rawType \u003d\u003d Properties.class) {\r\n            result \u003d MapType.construct(rawType, bindings, superClass, superInterfaces, CORE_TYPE_STRING, CORE_TYPE_STRING);\r\n        } else // And then check what flavor of type we got. Start by asking resolved\r\n        // super-type if refinement is all that is needed?\r\n        if (superClass !\u003d null) {\r\n            result \u003d superClass.refine(rawType, bindings, superClass, superInterfaces);\r\n        }\r\n        // if not, perhaps we are now resolving a well-known class or interface?\r\n        if (result \u003d\u003d null) {\r\n            result \u003d _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces);\r\n            if (result \u003d\u003d null) {\r\n                result \u003d _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);\r\n                if (result \u003d\u003d null) {\r\n                    // but if nothing else, \"simple\" class for now:\r\n                    result \u003d _newSimpleType(rawType, bindings, superClass, superInterfaces);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    context.resolveSelfReferences(result);\r\n    // 16-Jul-2016, tatu: [databind#1302] is solved different way, but ideally we shouldn\u0027t\r\n    //     cache anything with partially resolved `ResolvedRecursiveType`... so maybe improve\r\n    if (key !\u003d null \u0026\u0026 !result.hasHandlers()) {\r\n        // cache object syncs\r\n        _typeCache.putIfAbsent(key, result);\r\n    }\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeFactory",
    "methodName": "constructCollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType constructCollectionLikeType(java.lang.Class,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    JavaType type \u003d _fromClass(null, collectionClass, TypeBindings.createIfNeeded(collectionClass, elementType));\r\n    if (type instanceof CollectionLikeType) {\r\n        return (CollectionLikeType) type;\r\n    }\r\n    return CollectionLikeType.upgradeFrom(type, elementType);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TypeFactory\n  Class\n  JavaType\n  $r3 \u003d TypeBindings.createIfNeeded(r1, r2)\n  r4 \u003d r0._fromClass(null, r1, $r3)\n  $z0 \u003d CollectionLikeType\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d CollectionLikeType) r4\n  return\n}",
      "B2 {\n  $r5 \u003d CollectionLikeType.upgradeFrom(r4, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeFactory#_fromClass(...3)",
        "body": "{\r\n    // Very first thing: small set of core types we know well:\r\n    JavaType result \u003d _findWellKnownSimple(rawType);\r\n    if (result !\u003d null) {\r\n        return result;\r\n    }\r\n    // Barring that, we may have recently constructed an instance\r\n    final Object key;\r\n    if ((bindings \u003d\u003d null) || bindings.isEmpty()) {\r\n        key \u003d rawType;\r\n    } else {\r\n        key \u003d bindings.asKey(rawType);\r\n    }\r\n    // ok, cache object is synced\r\n    result \u003d key \u003d\u003d null ? null : _typeCache.get(key);\r\n    if (result !\u003d null) {\r\n        return result;\r\n    }\r\n    // 15-Oct-2015, tatu: recursive reference?\r\n    if (context \u003d\u003d null) {\r\n        context \u003d new ClassStack(rawType);\r\n    } else {\r\n        ClassStack prev \u003d context.find(rawType);\r\n        if (prev !\u003d null) {\r\n            // Self-reference: needs special handling, then...\r\n            ResolvedRecursiveType selfRef \u003d new ResolvedRecursiveType(rawType, EMPTY_BINDINGS);\r\n            prev.addSelfReference(selfRef);\r\n            return selfRef;\r\n        }\r\n        // no, but need to update context to allow for proper cycle resolution\r\n        context \u003d context.child(rawType);\r\n    }\r\n    // First: do we have an array type?\r\n    if (rawType.isArray()) {\r\n        result \u003d ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings), bindings);\r\n    } else {\r\n        // If not, need to proceed by first resolving parent type hierarchy\r\n        JavaType superClass;\r\n        JavaType[] superInterfaces;\r\n        if (rawType.isInterface()) {\r\n            superClass \u003d null;\r\n            superInterfaces \u003d _resolveSuperInterfaces(context, rawType, bindings);\r\n        } else {\r\n            // Note: even Enums can implement interfaces, so cannot drop those\r\n            superClass \u003d _resolveSuperClass(context, rawType, bindings);\r\n            superInterfaces \u003d _resolveSuperInterfaces(context, rawType, bindings);\r\n        }\r\n        // 19-Oct-2015, tatu: Bit messy, but we need to \u0027fix\u0027 java.util.Properties here...\r\n        if (rawType \u003d\u003d Properties.class) {\r\n            result \u003d MapType.construct(rawType, bindings, superClass, superInterfaces, CORE_TYPE_STRING, CORE_TYPE_STRING);\r\n        } else // And then check what flavor of type we got. Start by asking resolved\r\n        // super-type if refinement is all that is needed?\r\n        if (superClass !\u003d null) {\r\n            result \u003d superClass.refine(rawType, bindings, superClass, superInterfaces);\r\n        }\r\n        // if not, perhaps we are now resolving a well-known class or interface?\r\n        if (result \u003d\u003d null) {\r\n            result \u003d _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces);\r\n            if (result \u003d\u003d null) {\r\n                result \u003d _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);\r\n                if (result \u003d\u003d null) {\r\n                    // but if nothing else, \"simple\" class for now:\r\n                    result \u003d _newSimpleType(rawType, bindings, superClass, superInterfaces);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    context.resolveSelfReferences(result);\r\n    // 16-Jul-2016, tatu: [databind#1302] is solved different way, but ideally we shouldn\u0027t\r\n    //     cache anything with partially resolved `ResolvedRecursiveType`... so maybe improve\r\n    if (key !\u003d null \u0026\u0026 !result.hasHandlers()) {\r\n        // cache object syncs\r\n        _typeCache.putIfAbsent(key, result);\r\n    }\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeFactory",
    "methodName": "constructMapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType constructMapType(java.lang.Class,java.lang.Class,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    JavaType kt, vt;\r\n    if (mapClass \u003d\u003d Properties.class) {\r\n        kt \u003d vt \u003d CORE_TYPE_STRING;\r\n    } else {\r\n        kt \u003d _fromClass(null, keyClass, EMPTY_BINDINGS);\r\n        vt \u003d _fromClass(null, valueClass, EMPTY_BINDINGS);\r\n    }\r\n    return constructMapType(mapClass, kt, vt);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d class \"Ljava/util/Properties;\") → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TypeFactory\n  Class\n  Class\n  Class\n  if (r0 !\u003d class \"Ljava/util/Properties;\") goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d SimpleType CORE_TYPE_STRING\u003e\n  r8 \u003d $r7\n  r9 \u003d $r7\n  goto B3\n}",
      "B2 {\n  $r3 \u003d TypeBindings EMPTY_BINDINGS\u003e\n  r9 \u003d r1._fromClass(null, r2, $r3)\n  $r5 \u003d TypeBindings EMPTY_BINDINGS\u003e\n  r8 \u003d r1._fromClass(null, r4, $r5)\n}",
      "B3 {\n  $r6 \u003d r1.constructMapType(r0, r9, r8)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeFactory#constructMapType(...3)",
        "body": "{\r\n    JavaType kt, vt;\r\n    if (mapClass \u003d\u003d Properties.class) {\r\n        kt \u003d vt \u003d CORE_TYPE_STRING;\r\n    } else {\r\n        kt \u003d _fromClass(null, keyClass, EMPTY_BINDINGS);\r\n        vt \u003d _fromClass(null, valueClass, EMPTY_BINDINGS);\r\n    }\r\n    return constructMapType(mapClass, kt, vt);\r\n}"
      },
      {
        "name": "TypeFactory#_fromClass(...3)",
        "body": "{\r\n    // Very first thing: small set of core types we know well:\r\n    JavaType result \u003d _findWellKnownSimple(rawType);\r\n    if (result !\u003d null) {\r\n        return result;\r\n    }\r\n    // Barring that, we may have recently constructed an instance\r\n    final Object key;\r\n    if ((bindings \u003d\u003d null) || bindings.isEmpty()) {\r\n        key \u003d rawType;\r\n    } else {\r\n        key \u003d bindings.asKey(rawType);\r\n    }\r\n    // ok, cache object is synced\r\n    result \u003d key \u003d\u003d null ? null : _typeCache.get(key);\r\n    if (result !\u003d null) {\r\n        return result;\r\n    }\r\n    // 15-Oct-2015, tatu: recursive reference?\r\n    if (context \u003d\u003d null) {\r\n        context \u003d new ClassStack(rawType);\r\n    } else {\r\n        ClassStack prev \u003d context.find(rawType);\r\n        if (prev !\u003d null) {\r\n            // Self-reference: needs special handling, then...\r\n            ResolvedRecursiveType selfRef \u003d new ResolvedRecursiveType(rawType, EMPTY_BINDINGS);\r\n            prev.addSelfReference(selfRef);\r\n            return selfRef;\r\n        }\r\n        // no, but need to update context to allow for proper cycle resolution\r\n        context \u003d context.child(rawType);\r\n    }\r\n    // First: do we have an array type?\r\n    if (rawType.isArray()) {\r\n        result \u003d ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings), bindings);\r\n    } else {\r\n        // If not, need to proceed by first resolving parent type hierarchy\r\n        JavaType superClass;\r\n        JavaType[] superInterfaces;\r\n        if (rawType.isInterface()) {\r\n            superClass \u003d null;\r\n            superInterfaces \u003d _resolveSuperInterfaces(context, rawType, bindings);\r\n        } else {\r\n            // Note: even Enums can implement interfaces, so cannot drop those\r\n            superClass \u003d _resolveSuperClass(context, rawType, bindings);\r\n            superInterfaces \u003d _resolveSuperInterfaces(context, rawType, bindings);\r\n        }\r\n        // 19-Oct-2015, tatu: Bit messy, but we need to \u0027fix\u0027 java.util.Properties here...\r\n        if (rawType \u003d\u003d Properties.class) {\r\n            result \u003d MapType.construct(rawType, bindings, superClass, superInterfaces, CORE_TYPE_STRING, CORE_TYPE_STRING);\r\n        } else // And then check what flavor of type we got. Start by asking resolved\r\n        // super-type if refinement is all that is needed?\r\n        if (superClass !\u003d null) {\r\n            result \u003d superClass.refine(rawType, bindings, superClass, superInterfaces);\r\n        }\r\n        // if not, perhaps we are now resolving a well-known class or interface?\r\n        if (result \u003d\u003d null) {\r\n            result \u003d _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces);\r\n            if (result \u003d\u003d null) {\r\n                result \u003d _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);\r\n                if (result \u003d\u003d null) {\r\n                    // but if nothing else, \"simple\" class for now:\r\n                    result \u003d _newSimpleType(rawType, bindings, superClass, superInterfaces);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    context.resolveSelfReferences(result);\r\n    // 16-Jul-2016, tatu: [databind#1302] is solved different way, but ideally we shouldn\u0027t\r\n    //     cache anything with partially resolved `ResolvedRecursiveType`... so maybe improve\r\n    if (key !\u003d null \u0026\u0026 !result.hasHandlers()) {\r\n        // cache object syncs\r\n        _typeCache.putIfAbsent(key, result);\r\n    }\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeFactory",
    "methodName": "constructMapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType constructMapType(java.lang.Class,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    TypeBindings bindings \u003d TypeBindings.createIfNeeded(mapClass, new JavaType[] { keyType, valueType });\r\n    MapType result \u003d (MapType) _fromClass(null, mapClass, bindings);\r\n    // 17-May-2017, tatu: As per [databind#1415], we better verify bound values if (but only if)\r\n    //    type being resolved was non-generic (i.e.element type was ignored)\r\n    if (bindings.isEmpty()) {\r\n        JavaType t \u003d result.findSuperType(Map.class);\r\n        JavaType realKT \u003d t.getKeyType();\r\n        if (!realKT.equals(keyType)) {\r\n            throw new IllegalArgumentException(String.format(\"Non-generic Map class %s did not resolve to something with key type %s but %s \", ClassUtil.nameOf(mapClass), keyType, realKT));\r\n        }\r\n        JavaType realVT \u003d t.getContentType();\r\n        if (!realVT.equals(valueType)) {\r\n            throw new IllegalArgumentException(String.format(\"Non-generic Map class %s did not resolve to something with value type %s but %s \", ClassUtil.nameOf(mapClass), valueType, realVT));\r\n        }\r\n    }\r\n    return result;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B5",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3",
      "B3 : If($z2 !\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  TypeFactory\n  Class\n  JavaType\n  JavaType\n  $r1 \u003d JavaType)[2]\n  $r1[0] \u003d r2\n  $r1[1] \u003d r3\n  r4 \u003d TypeBindings.createIfNeeded(r0, $r1)\n  $r6 \u003d r5._fromClass(null, r0, r4)\n  r7 \u003d MapType) $r6\n  $z0 \u003d r4.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  r8 \u003d r7.findSuperType(class \"Ljava/util/Map;\")\n  r9 \u003d r8.getKeyType()\n  $z1 \u003d r9.equals(r2)\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r15 \u003d IllegalArgumentException\n  $r16 \u003d Object)[3]\n  $r17 \u003d ClassUtil.nameOf(r0)\n  $r16[0] \u003d $r17\n  $r16[1] \u003d r2\n  $r16[2] \u003d r9\n  $r18 \u003d String.format(\"Non-generic Map class %s did not resolve to something with key type %s but %s \", $r16)\n  new IllegalArgumentException($r18)\n  throw $r15\n}",
      "B3 {\n  r10 \u003d r8.getContentType()\n  $z2 \u003d r10.equals(r3)\n  if ($z2 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r11 \u003d IllegalArgumentException\n  $r12 \u003d Object)[3]\n  $r13 \u003d ClassUtil.nameOf(r0)\n  $r12[0] \u003d $r13\n  $r12[1] \u003d r3\n  $r12[2] \u003d r10\n  $r14 \u003d String.format(\"Non-generic Map class %s did not resolve to something with value type %s but %s \", $r12)\n  new IllegalArgumentException($r14)\n  throw $r11\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeFactory#_fromClass(...3)",
        "body": "{\r\n    // Very first thing: small set of core types we know well:\r\n    JavaType result \u003d _findWellKnownSimple(rawType);\r\n    if (result !\u003d null) {\r\n        return result;\r\n    }\r\n    // Barring that, we may have recently constructed an instance\r\n    final Object key;\r\n    if ((bindings \u003d\u003d null) || bindings.isEmpty()) {\r\n        key \u003d rawType;\r\n    } else {\r\n        key \u003d bindings.asKey(rawType);\r\n    }\r\n    // ok, cache object is synced\r\n    result \u003d key \u003d\u003d null ? null : _typeCache.get(key);\r\n    if (result !\u003d null) {\r\n        return result;\r\n    }\r\n    // 15-Oct-2015, tatu: recursive reference?\r\n    if (context \u003d\u003d null) {\r\n        context \u003d new ClassStack(rawType);\r\n    } else {\r\n        ClassStack prev \u003d context.find(rawType);\r\n        if (prev !\u003d null) {\r\n            // Self-reference: needs special handling, then...\r\n            ResolvedRecursiveType selfRef \u003d new ResolvedRecursiveType(rawType, EMPTY_BINDINGS);\r\n            prev.addSelfReference(selfRef);\r\n            return selfRef;\r\n        }\r\n        // no, but need to update context to allow for proper cycle resolution\r\n        context \u003d context.child(rawType);\r\n    }\r\n    // First: do we have an array type?\r\n    if (rawType.isArray()) {\r\n        result \u003d ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings), bindings);\r\n    } else {\r\n        // If not, need to proceed by first resolving parent type hierarchy\r\n        JavaType superClass;\r\n        JavaType[] superInterfaces;\r\n        if (rawType.isInterface()) {\r\n            superClass \u003d null;\r\n            superInterfaces \u003d _resolveSuperInterfaces(context, rawType, bindings);\r\n        } else {\r\n            // Note: even Enums can implement interfaces, so cannot drop those\r\n            superClass \u003d _resolveSuperClass(context, rawType, bindings);\r\n            superInterfaces \u003d _resolveSuperInterfaces(context, rawType, bindings);\r\n        }\r\n        // 19-Oct-2015, tatu: Bit messy, but we need to \u0027fix\u0027 java.util.Properties here...\r\n        if (rawType \u003d\u003d Properties.class) {\r\n            result \u003d MapType.construct(rawType, bindings, superClass, superInterfaces, CORE_TYPE_STRING, CORE_TYPE_STRING);\r\n        } else // And then check what flavor of type we got. Start by asking resolved\r\n        // super-type if refinement is all that is needed?\r\n        if (superClass !\u003d null) {\r\n            result \u003d superClass.refine(rawType, bindings, superClass, superInterfaces);\r\n        }\r\n        // if not, perhaps we are now resolving a well-known class or interface?\r\n        if (result \u003d\u003d null) {\r\n            result \u003d _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces);\r\n            if (result \u003d\u003d null) {\r\n                result \u003d _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);\r\n                if (result \u003d\u003d null) {\r\n                    // but if nothing else, \"simple\" class for now:\r\n                    result \u003d _newSimpleType(rawType, bindings, superClass, superInterfaces);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    context.resolveSelfReferences(result);\r\n    // 16-Jul-2016, tatu: [databind#1302] is solved different way, but ideally we shouldn\u0027t\r\n    //     cache anything with partially resolved `ResolvedRecursiveType`... so maybe improve\r\n    if (key !\u003d null \u0026\u0026 !result.hasHandlers()) {\r\n        // cache object syncs\r\n        _typeCache.putIfAbsent(key, result);\r\n    }\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeFactory",
    "methodName": "constructMapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType constructMapLikeType(java.lang.Class,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    // 19-Oct-2015, tatu: Allow case of no-type-variables, since it seems likely to be\r\n    //    a valid use case here\r\n    JavaType type \u003d _fromClass(null, mapClass, TypeBindings.createIfNeeded(mapClass, new JavaType[] { keyType, valueType }));\r\n    if (type instanceof MapLikeType) {\r\n        return (MapLikeType) type;\r\n    }\r\n    return MapLikeType.upgradeFrom(type, keyType, valueType);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TypeFactory\n  Class\n  JavaType\n  JavaType\n  $r2 \u003d JavaType)[2]\n  $r2[0] \u003d r3\n  $r2[1] \u003d r4\n  $r5 \u003d TypeBindings.createIfNeeded(r1, $r2)\n  r6 \u003d r0._fromClass(null, r1, $r5)\n  $z0 \u003d MapLikeType\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d MapLikeType) r6\n  return\n}",
      "B2 {\n  $r7 \u003d MapLikeType.upgradeFrom(r6, r3, r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeFactory#_fromClass(...3)",
        "body": "{\r\n    // Very first thing: small set of core types we know well:\r\n    JavaType result \u003d _findWellKnownSimple(rawType);\r\n    if (result !\u003d null) {\r\n        return result;\r\n    }\r\n    // Barring that, we may have recently constructed an instance\r\n    final Object key;\r\n    if ((bindings \u003d\u003d null) || bindings.isEmpty()) {\r\n        key \u003d rawType;\r\n    } else {\r\n        key \u003d bindings.asKey(rawType);\r\n    }\r\n    // ok, cache object is synced\r\n    result \u003d key \u003d\u003d null ? null : _typeCache.get(key);\r\n    if (result !\u003d null) {\r\n        return result;\r\n    }\r\n    // 15-Oct-2015, tatu: recursive reference?\r\n    if (context \u003d\u003d null) {\r\n        context \u003d new ClassStack(rawType);\r\n    } else {\r\n        ClassStack prev \u003d context.find(rawType);\r\n        if (prev !\u003d null) {\r\n            // Self-reference: needs special handling, then...\r\n            ResolvedRecursiveType selfRef \u003d new ResolvedRecursiveType(rawType, EMPTY_BINDINGS);\r\n            prev.addSelfReference(selfRef);\r\n            return selfRef;\r\n        }\r\n        // no, but need to update context to allow for proper cycle resolution\r\n        context \u003d context.child(rawType);\r\n    }\r\n    // First: do we have an array type?\r\n    if (rawType.isArray()) {\r\n        result \u003d ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings), bindings);\r\n    } else {\r\n        // If not, need to proceed by first resolving parent type hierarchy\r\n        JavaType superClass;\r\n        JavaType[] superInterfaces;\r\n        if (rawType.isInterface()) {\r\n            superClass \u003d null;\r\n            superInterfaces \u003d _resolveSuperInterfaces(context, rawType, bindings);\r\n        } else {\r\n            // Note: even Enums can implement interfaces, so cannot drop those\r\n            superClass \u003d _resolveSuperClass(context, rawType, bindings);\r\n            superInterfaces \u003d _resolveSuperInterfaces(context, rawType, bindings);\r\n        }\r\n        // 19-Oct-2015, tatu: Bit messy, but we need to \u0027fix\u0027 java.util.Properties here...\r\n        if (rawType \u003d\u003d Properties.class) {\r\n            result \u003d MapType.construct(rawType, bindings, superClass, superInterfaces, CORE_TYPE_STRING, CORE_TYPE_STRING);\r\n        } else // And then check what flavor of type we got. Start by asking resolved\r\n        // super-type if refinement is all that is needed?\r\n        if (superClass !\u003d null) {\r\n            result \u003d superClass.refine(rawType, bindings, superClass, superInterfaces);\r\n        }\r\n        // if not, perhaps we are now resolving a well-known class or interface?\r\n        if (result \u003d\u003d null) {\r\n            result \u003d _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces);\r\n            if (result \u003d\u003d null) {\r\n                result \u003d _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);\r\n                if (result \u003d\u003d null) {\r\n                    // but if nothing else, \"simple\" class for now:\r\n                    result \u003d _newSimpleType(rawType, bindings, superClass, superInterfaces);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    context.resolveSelfReferences(result);\r\n    // 16-Jul-2016, tatu: [databind#1302] is solved different way, but ideally we shouldn\u0027t\r\n    //     cache anything with partially resolved `ResolvedRecursiveType`... so maybe improve\r\n    if (key !\u003d null \u0026\u0026 !result.hasHandlers()) {\r\n        // cache object syncs\r\n        _typeCache.putIfAbsent(key, result);\r\n    }\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeFactory",
    "methodName": "constructParametricType",
    "signature": "com.fasterxml.jackson.databind.JavaType constructParametricType(java.lang.Class,java.lang.Class[])",
    "visibility": "public",
    "body": "{\r\n    int len \u003d parameterClasses.length;\r\n    JavaType[] pt \u003d new JavaType[len];\r\n    for (int i \u003d 0; i \u003c len; ++i) {\r\n        pt[i] \u003d _fromClass(null, parameterClasses[i], EMPTY_BINDINGS);\r\n    }\r\n    return constructParametricType(parametrized, pt);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TypeFactory\n  Class\n  Class[]\n  i0 \u003d lengthof r0\n  r1 \u003d JavaType)[i0]\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d r0[i1]\n  $r5 \u003d TypeBindings EMPTY_BINDINGS\u003e\n  $r7 \u003d r2._fromClass(null, $r6, $r5)\n  r1[i1] \u003d $r7\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  $r4 \u003d r2.constructParametricType(r3, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeFactory#constructParametricType(...2)",
        "body": "{\r\n    int len \u003d parameterClasses.length;\r\n    JavaType[] pt \u003d new JavaType[len];\r\n    for (int i \u003d 0; i \u003c len; ++i) {\r\n        pt[i] \u003d _fromClass(null, parameterClasses[i], EMPTY_BINDINGS);\r\n    }\r\n    return constructParametricType(parametrized, pt);\r\n}"
      },
      {
        "name": "TypeFactory#_fromClass(...3)",
        "body": "{\r\n    // Very first thing: small set of core types we know well:\r\n    JavaType result \u003d _findWellKnownSimple(rawType);\r\n    if (result !\u003d null) {\r\n        return result;\r\n    }\r\n    // Barring that, we may have recently constructed an instance\r\n    final Object key;\r\n    if ((bindings \u003d\u003d null) || bindings.isEmpty()) {\r\n        key \u003d rawType;\r\n    } else {\r\n        key \u003d bindings.asKey(rawType);\r\n    }\r\n    // ok, cache object is synced\r\n    result \u003d key \u003d\u003d null ? null : _typeCache.get(key);\r\n    if (result !\u003d null) {\r\n        return result;\r\n    }\r\n    // 15-Oct-2015, tatu: recursive reference?\r\n    if (context \u003d\u003d null) {\r\n        context \u003d new ClassStack(rawType);\r\n    } else {\r\n        ClassStack prev \u003d context.find(rawType);\r\n        if (prev !\u003d null) {\r\n            // Self-reference: needs special handling, then...\r\n            ResolvedRecursiveType selfRef \u003d new ResolvedRecursiveType(rawType, EMPTY_BINDINGS);\r\n            prev.addSelfReference(selfRef);\r\n            return selfRef;\r\n        }\r\n        // no, but need to update context to allow for proper cycle resolution\r\n        context \u003d context.child(rawType);\r\n    }\r\n    // First: do we have an array type?\r\n    if (rawType.isArray()) {\r\n        result \u003d ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings), bindings);\r\n    } else {\r\n        // If not, need to proceed by first resolving parent type hierarchy\r\n        JavaType superClass;\r\n        JavaType[] superInterfaces;\r\n        if (rawType.isInterface()) {\r\n            superClass \u003d null;\r\n            superInterfaces \u003d _resolveSuperInterfaces(context, rawType, bindings);\r\n        } else {\r\n            // Note: even Enums can implement interfaces, so cannot drop those\r\n            superClass \u003d _resolveSuperClass(context, rawType, bindings);\r\n            superInterfaces \u003d _resolveSuperInterfaces(context, rawType, bindings);\r\n        }\r\n        // 19-Oct-2015, tatu: Bit messy, but we need to \u0027fix\u0027 java.util.Properties here...\r\n        if (rawType \u003d\u003d Properties.class) {\r\n            result \u003d MapType.construct(rawType, bindings, superClass, superInterfaces, CORE_TYPE_STRING, CORE_TYPE_STRING);\r\n        } else // And then check what flavor of type we got. Start by asking resolved\r\n        // super-type if refinement is all that is needed?\r\n        if (superClass !\u003d null) {\r\n            result \u003d superClass.refine(rawType, bindings, superClass, superInterfaces);\r\n        }\r\n        // if not, perhaps we are now resolving a well-known class or interface?\r\n        if (result \u003d\u003d null) {\r\n            result \u003d _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces);\r\n            if (result \u003d\u003d null) {\r\n                result \u003d _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);\r\n                if (result \u003d\u003d null) {\r\n                    // but if nothing else, \"simple\" class for now:\r\n                    result \u003d _newSimpleType(rawType, bindings, superClass, superInterfaces);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    context.resolveSelfReferences(result);\r\n    // 16-Jul-2016, tatu: [databind#1302] is solved different way, but ideally we shouldn\u0027t\r\n    //     cache anything with partially resolved `ResolvedRecursiveType`... so maybe improve\r\n    if (key !\u003d null \u0026\u0026 !result.hasHandlers()) {\r\n        // cache object syncs\r\n        _typeCache.putIfAbsent(key, result);\r\n    }\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeParser",
    "methodName": "withFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser withFactory(com.fasterxml.jackson.databind.type.TypeFactory)",
    "visibility": "public",
    "body": "{\r\n    return (f \u003d\u003d _factory) ? this : new TypeParser(f);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TypeParser\n  TypeFactory\n  $r2 \u003d TypeFactory _factory\u003e\n  if (r0 !\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r3 \u003d TypeParser\n  new TypeParser(r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.type.TypeParser",
    "methodName": "parse",
    "signature": "com.fasterxml.jackson.databind.JavaType parse(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (canonical.length() \u003e MAX_TYPE_LENGTH) {\r\n        throw new IllegalArgumentException(String.format(\"Failed to parse type %s: too long (%d characters), maximum length allowed: %d\", _quoteTruncated(canonical), canonical.length(), MAX_TYPE_LENGTH));\r\n    }\r\n    MyTokenizer tokens \u003d new MyTokenizer(canonical.trim());\r\n    JavaType type \u003d parseType(tokens, MAX_TYPE_NESTING);\r\n    // must be end, now\r\n    if (tokens.hasMoreTokens()) {\r\n        throw _problem(tokens, \"Unexpected tokens after complete type\");\r\n    }\r\n    return type;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d $i3) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  TypeParser\n  String\n  $i0 \u003d r0.length()\n  $i3 \u003d (int) 64000\n  if ($i0 \u003c\u003d $i3) goto B1 else B2\n}",
      "B1 {\n  $r12 \u003d IllegalArgumentException\n  $r7 \u003d Object)[3]\n  $r8 \u003d TypeParser._quoteTruncated(r0)\n  $r7[0] \u003d $r8\n  $i1 \u003d r0.length()\n  $r9 \u003d Integer.valueOf($i1)\n  $r7[1] \u003d $r9\n  $i5 \u003d (int) 64000\n  $r10 \u003d Integer.valueOf($i5)\n  $r7[2] \u003d $r10\n  $r11 \u003d String.format(\"Failed to parse type %s: too long (%d characters), maximum length allowed: %d\", $r7)\n  new IllegalArgumentException($r11)\n  throw $r12\n}",
      "B2 {\n  $r13 \u003d TypeParser$MyTokenizer\n  $r2 \u003d r0.trim()\n  new TypeParser$MyTokenizer($r2)\n  r4 \u003d r3.parseType($r13, 1000)\n  $z0 \u003d $r13.hasMoreTokens()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d r3._problem($r13, \"Unexpected tokens after complete type\")\n  throw $r5\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeParser#parseType(...2)",
        "body": "{\r\n    if (!tokens.hasMoreTokens()) {\r\n        throw _problem(tokens, \"Unexpected end-of-string\");\r\n    }\r\n    Class\u003c?\u003e base \u003d findClass(tokens.nextToken(), tokens);\r\n    // either end (ok, non generic type), or generics\r\n    if (tokens.hasMoreTokens()) {\r\n        String token \u003d tokens.nextToken();\r\n        if (\"\u003c\".equals(token)) {\r\n            List\u003cJavaType\u003e parameterTypes \u003d parseTypes(tokens, nestingAllowed - 1);\r\n            TypeBindings b \u003d TypeBindings.create(base, parameterTypes);\r\n            return _factory._fromClass(null, base, b);\r\n        }\r\n        // can be comma that separates types, or closing \u0027\u003e\u0027\r\n        tokens.pushBack(token);\r\n    }\r\n    return _factory._fromClass(null, base, TypeBindings.emptyBindings());\r\n}"
      },
      {
        "name": "TypeParser#_problem(...2)",
        "body": "{\r\n    return new IllegalArgumentException(String.format(\"Failed to parse type %s (remaining: %s): %s\", _quoteTruncated(tokens.getAllInput()), _quoteTruncated(tokens.getRemainingInput()), msg));\r\n}"
      },
      {
        "name": "TypeParser#_quoteTruncated(...1)",
        "body": "{\r\n    if (str.length() \u003c\u003d 1000) {\r\n        return \"\u0027\" + str + \"\u0027\";\r\n    }\r\n    return String.format(\"\u0027%s...\u0027[truncated %d charaters]\", str.substring(0, 1000), str.length() - 1000);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ArrayBuilders",
    "methodName": "getBooleanBuilder",
    "signature": "com.fasterxml.jackson.databind.util.ArrayBuilders$BooleanBuilder getBooleanBuilder()",
    "visibility": "public",
    "body": "{\r\n    if (_booleanBuilder \u003d\u003d null) {\r\n        _booleanBuilder \u003d new BooleanBuilder();\r\n    }\r\n    return _booleanBuilder;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayBuilders\n  $r1 \u003d ArrayBuilders$BooleanBuilder _booleanBuilder\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d ArrayBuilders$BooleanBuilder\n  new ArrayBuilders$BooleanBuilder()\n  ArrayBuilders$BooleanBuilder _booleanBuilder\u003e \u003d $r3\n}",
      "B2 {\n  $r2 \u003d ArrayBuilders$BooleanBuilder _booleanBuilder\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ArrayBuilders",
    "methodName": "getByteBuilder",
    "signature": "com.fasterxml.jackson.databind.util.ArrayBuilders$ByteBuilder getByteBuilder()",
    "visibility": "public",
    "body": "{\r\n    if (_byteBuilder \u003d\u003d null) {\r\n        _byteBuilder \u003d new ByteBuilder();\r\n    }\r\n    return _byteBuilder;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayBuilders\n  $r1 \u003d ArrayBuilders$ByteBuilder _byteBuilder\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d ArrayBuilders$ByteBuilder\n  new ArrayBuilders$ByteBuilder()\n  ArrayBuilders$ByteBuilder _byteBuilder\u003e \u003d $r3\n}",
      "B2 {\n  $r2 \u003d ArrayBuilders$ByteBuilder _byteBuilder\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ArrayBuilders",
    "methodName": "getShortBuilder",
    "signature": "com.fasterxml.jackson.databind.util.ArrayBuilders$ShortBuilder getShortBuilder()",
    "visibility": "public",
    "body": "{\r\n    if (_shortBuilder \u003d\u003d null) {\r\n        _shortBuilder \u003d new ShortBuilder();\r\n    }\r\n    return _shortBuilder;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayBuilders\n  $r1 \u003d ArrayBuilders$ShortBuilder _shortBuilder\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d ArrayBuilders$ShortBuilder\n  new ArrayBuilders$ShortBuilder()\n  ArrayBuilders$ShortBuilder _shortBuilder\u003e \u003d $r3\n}",
      "B2 {\n  $r2 \u003d ArrayBuilders$ShortBuilder _shortBuilder\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ArrayBuilders",
    "methodName": "getIntBuilder",
    "signature": "com.fasterxml.jackson.databind.util.ArrayBuilders$IntBuilder getIntBuilder()",
    "visibility": "public",
    "body": "{\r\n    if (_intBuilder \u003d\u003d null) {\r\n        _intBuilder \u003d new IntBuilder();\r\n    }\r\n    return _intBuilder;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayBuilders\n  $r1 \u003d ArrayBuilders$IntBuilder _intBuilder\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d ArrayBuilders$IntBuilder\n  new ArrayBuilders$IntBuilder()\n  ArrayBuilders$IntBuilder _intBuilder\u003e \u003d $r3\n}",
      "B2 {\n  $r2 \u003d ArrayBuilders$IntBuilder _intBuilder\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ArrayBuilders",
    "methodName": "getLongBuilder",
    "signature": "com.fasterxml.jackson.databind.util.ArrayBuilders$LongBuilder getLongBuilder()",
    "visibility": "public",
    "body": "{\r\n    if (_longBuilder \u003d\u003d null) {\r\n        _longBuilder \u003d new LongBuilder();\r\n    }\r\n    return _longBuilder;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayBuilders\n  $r1 \u003d ArrayBuilders$LongBuilder _longBuilder\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d ArrayBuilders$LongBuilder\n  new ArrayBuilders$LongBuilder()\n  ArrayBuilders$LongBuilder _longBuilder\u003e \u003d $r3\n}",
      "B2 {\n  $r2 \u003d ArrayBuilders$LongBuilder _longBuilder\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ArrayBuilders",
    "methodName": "getFloatBuilder",
    "signature": "com.fasterxml.jackson.databind.util.ArrayBuilders$FloatBuilder getFloatBuilder()",
    "visibility": "public",
    "body": "{\r\n    if (_floatBuilder \u003d\u003d null) {\r\n        _floatBuilder \u003d new FloatBuilder();\r\n    }\r\n    return _floatBuilder;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayBuilders\n  $r1 \u003d ArrayBuilders$FloatBuilder _floatBuilder\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d ArrayBuilders$FloatBuilder\n  new ArrayBuilders$FloatBuilder()\n  ArrayBuilders$FloatBuilder _floatBuilder\u003e \u003d $r3\n}",
      "B2 {\n  $r2 \u003d ArrayBuilders$FloatBuilder _floatBuilder\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ArrayBuilders",
    "methodName": "getDoubleBuilder",
    "signature": "com.fasterxml.jackson.databind.util.ArrayBuilders$DoubleBuilder getDoubleBuilder()",
    "visibility": "public",
    "body": "{\r\n    if (_doubleBuilder \u003d\u003d null) {\r\n        _doubleBuilder \u003d new DoubleBuilder();\r\n    }\r\n    return _doubleBuilder;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayBuilders\n  $r1 \u003d ArrayBuilders$DoubleBuilder _doubleBuilder\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d ArrayBuilders$DoubleBuilder\n  new ArrayBuilders$DoubleBuilder()\n  ArrayBuilders$DoubleBuilder _doubleBuilder\u003e \u003d $r3\n}",
      "B2 {\n  $r2 \u003d ArrayBuilders$DoubleBuilder _doubleBuilder\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ArrayBuilders",
    "methodName": "arrayToSet",
    "signature": "java.util.HashSet arrayToSet(java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B5",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  if (r0 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  i0 \u003d lengthof r0\n  $r2 \u003d HashSet\n  new HashSet(i0)\n  i1 \u003d 0\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d r0[i1]\n  $r2.add($r3)\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r1 \u003d HashSet\n  new HashSet()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ArrayBuilders",
    "methodName": "insertInListNoDup",
    "signature": "java.lang.Object[] insertInListNoDup(java.lang.Object[],java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d i0) → B2 | else → B9",
      "B2 : If($r5 !\u003d r4) → B3 | else → B8",
      "B3 : If(i3 !\u003d 0) → B4 | else → B5",
      "B5 : If(i2 \u003c\u003d 0) → B6 | else → B7",
      "B9 : If(i0 \u003c\u003d 0) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  Object\n  i0 \u003d lengthof r0\n  i3 \u003d 0\n}",
      "B1 {\n  if (i3 \u003e\u003d i0) goto B2 else B9\n}",
      "B2 {\n  $r5 \u003d r0[i3]\n  if ($r5 !\u003d r4) goto B3 else B8\n}",
      "B3 {\n  if (i3 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r6 \u003d r0.getClass()\n  $r7 \u003d $r6.getComponentType()\n  $r8 \u003d Array.newInstance($r7, i0)\n  r9 \u003d Object[]) $r8\n  System.arraycopy(r0, 0, r9, 1, i3)\n  r9[0] \u003d r4\n  i4 \u003d i3 + 1\n  i2 \u003d i0 - i4\n  if (i2 \u003c\u003d 0) goto B6 else B7\n}",
      "B6 {\n  System.arraycopy(r0, i4, r9, i4, i2)\n}",
      "B7 {\n  return\n}",
      "B8 {\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B9 {\n  $r1 \u003d r0.getClass()\n  $r2 \u003d $r1.getComponentType()\n  $i1 \u003d i0 + 1\n  $r3 \u003d Array.newInstance($r2, $i1)\n  r10 \u003d Object[]) $r3\n  if (i0 \u003c\u003d 0) goto B10 else B11\n}",
      "B10 {\n  System.arraycopy(r0, 0, r10, 1, i0)\n}",
      "B11 {\n  r10[0] \u003d r4\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B9",
      "B2 --\u003e B3",
      "B2 --\u003e B8",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B1",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ArrayIterator",
    "methodName": "hasNext",
    "signature": "boolean hasNext()",
    "visibility": "public",
    "body": "{\r\n    return _index \u003c _a.length;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003e\u003d $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayIterator\n  $i1 \u003d ArrayIterator: int _index\u003e\n  $r1 \u003d Object[] _a\u003e\n  $i0 \u003d lengthof $r1\n  if ($i1 \u003e\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ArrayIterator",
    "methodName": "next",
    "signature": "java.lang.Object next()",
    "visibility": "public",
    "body": "{\r\n    if (_index \u003e\u003d _a.length) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    return _a[_index++];\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i1 \u003c $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayIterator\n  $i1 \u003d ArrayIterator: int _index\u003e\n  $r1 \u003d Object[] _a\u003e\n  $i0 \u003d lengthof $r1\n  if ($i1 \u003c $i0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r4\n}",
      "B2 {\n  $r2 \u003d Object[] _a\u003e\n  $i2 \u003d ArrayIterator: int _index\u003e\n  $i3 \u003d $i2 + 1\n  ArrayIterator: int _index\u003e \u003d $i3\n  $r3 \u003d $r2[$i2]\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.BeanUtil",
    "methodName": "okNameForGetter",
    "signature": "java.lang.String okNameForGetter(com.fasterxml.jackson.databind.introspect.AnnotatedMethod,boolean)",
    "visibility": "public",
    "body": "{\r\n    String name \u003d am.getName();\r\n    String str \u003d okNameForIsGetter(am, name, stdNaming);\r\n    if (str \u003d\u003d null) {\r\n        str \u003d okNameForRegularGetter(am, name, stdNaming);\r\n    }\r\n    return str;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AnnotatedMethod\n  z0 :\u003d @parameter1: boolean\n  r1 \u003d r0.getName()\n  r2 \u003d BeanUtil.okNameForIsGetter(r0, r1, z0)\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r2 \u003d BeanUtil.okNameForRegularGetter(r0, r1, z0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanUtil#okNameForIsGetter(...3)",
        "body": "{\r\n    if (name.startsWith(\"is\")) {\r\n        // plus, must return a boolean\r\n        Class\u003c?\u003e rt \u003d am.getRawType();\r\n        if (rt \u003d\u003d Boolean.class || rt \u003d\u003d Boolean.TYPE) {\r\n            return stdNaming ? stdManglePropertyName(name, 2) : legacyManglePropertyName(name, 2);\r\n        }\r\n    }\r\n    return null;\r\n}"
      },
      {
        "name": "BeanUtil#okNameForRegularGetter(...3)",
        "body": "{\r\n    if (name.startsWith(\"get\")) {\r\n        /* 16-Feb-2009, tatu: To handle [JACKSON-53], need to block\r\n             *   CGLib-provided method \"getCallbacks\". Not sure of exact\r\n             *   safe criteria to get decent coverage without false matches;\r\n             *   but for now let\u0027s assume there\u0027s no reason to use any\r\n             *   such getter from CGLib.\r\n             *   But let\u0027s try this approach...\r\n             */\r\n        if (\"getCallbacks\".equals(name)) {\r\n            if (isCglibGetCallbacks(am)) {\r\n                return null;\r\n            }\r\n        } else if (\"getMetaClass\".equals(name)) {\r\n            // 30-Apr-2009, tatu: Need to suppress serialization of a cyclic reference\r\n            if (isGroovyMetaClassGetter(am)) {\r\n                return null;\r\n            }\r\n        }\r\n        return stdNaming ? stdManglePropertyName(name, 3) : legacyManglePropertyName(name, 3);\r\n    }\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.BeanUtil",
    "methodName": "okNameForRegularGetter",
    "signature": "java.lang.String okNameForRegularGetter(com.fasterxml.jackson.databind.introspect.AnnotatedMethod,java.lang.String,boolean)",
    "visibility": "public",
    "body": "{\r\n    if (name.startsWith(\"get\")) {\r\n        /* 16-Feb-2009, tatu: To handle [JACKSON-53], need to block\r\n             *   CGLib-provided method \"getCallbacks\". Not sure of exact\r\n             *   safe criteria to get decent coverage without false matches;\r\n             *   but for now let\u0027s assume there\u0027s no reason to use any\r\n             *   such getter from CGLib.\r\n             *   But let\u0027s try this approach...\r\n             */\r\n        if (\"getCallbacks\".equals(name)) {\r\n            if (isCglibGetCallbacks(am)) {\r\n                return null;\r\n            }\r\n        } else if (\"getMetaClass\".equals(name)) {\r\n            // 30-Apr-2009, tatu: Need to suppress serialization of a cyclic reference\r\n            if (isGroovyMetaClassGetter(am)) {\r\n                return null;\r\n            }\r\n        }\r\n        return stdNaming ? stdManglePropertyName(name, 3) : legacyManglePropertyName(name, 3);\r\n    }\r\n    return null;\r\n}",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B11",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B4",
      "B2 : If($z5 \u003d\u003d false) → B3 | else → B7",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B7",
      "B5 : If($z4 \u003d\u003d false) → B6 | else → B7",
      "B7 : If(z3 \u003d\u003d false) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  AnnotatedMethod\n  String\n  z3 :\u003d @parameter2: boolean\n  $z0 \u003d r0.startsWith(\"get\")\n  if ($z0 \u003d\u003d false) goto B1 else B11\n}",
      "B1 {\n  $r1 \u003d \"getCallbacks\"\n  $z1 \u003d $r1.equals(r0)\n  if ($z1 \u003d\u003d false) goto B2 else B4\n}",
      "B2 {\n  $z5 \u003d BeanUtil.isCglibGetCallbacks(r3)\n  if ($z5 \u003d\u003d false) goto B3 else B7\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r2 \u003d \"getMetaClass\"\n  $z2 \u003d $r2.equals(r0)\n  if ($z2 \u003d\u003d false) goto B5 else B7\n}",
      "B5 {\n  $z4 \u003d BeanUtil.isGroovyMetaClassGetter(r3)\n  if ($z4 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  if (z3 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $r4 \u003d BeanUtil.stdManglePropertyName(r0, 3)\n  goto B10\n}",
      "B9 {\n  $r4 \u003d BeanUtil.legacyManglePropertyName(r0, 3)\n}",
      "B10 {\n  return\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B11",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanUtil#isGroovyMetaClassGetter(...1)",
        "body": "{\r\n    return am.getRawType().getName().startsWith(\"groovy.lang\");\r\n}"
      },
      {
        "name": "BeanUtil#isCglibGetCallbacks(...1)",
        "body": "{\r\n    Class\u003c?\u003e rt \u003d am.getRawType();\r\n    // Ok, first: must return an array type\r\n    if (rt.isArray()) {\r\n        // And that type needs to be \"net.sf.cglib.proxy.Callback\".\r\n        // Theoretically could just be a type that implements it, but\r\n        // for now let\u0027s keep things simple, fix if need be.\r\n        Class\u003c?\u003e compType \u003d rt.getComponentType();\r\n        // Actually, let\u0027s just verify it\u0027s a \"net.sf.cglib.*\" class/interface\r\n        final String className \u003d compType.getName();\r\n        if (className.contains(\".cglib\")) {\r\n            return className.startsWith(\"net.sf.cglib\") || // also, as per [JACKSON-177]\r\n            className.startsWith(\"org.hibernate.repackage.cglib\") || // and [core#674]\r\n            className.startsWith(\"org.springframework.cglib\");\r\n        }\r\n    }\r\n    return false;\r\n}"
      },
      {
        "name": "BeanUtil#stdManglePropertyName(...2)",
        "body": "{\r\n    final int end \u003d basename.length();\r\n    if (end \u003d\u003d offset) {\r\n        // empty name, nope\r\n        return null;\r\n    }\r\n    // first: if it doesn\u0027t start with capital, return as-is\r\n    char c0 \u003d basename.charAt(offset);\r\n    char c1 \u003d Character.toLowerCase(c0);\r\n    if (c0 \u003d\u003d c1) {\r\n        return basename.substring(offset);\r\n    }\r\n    // 17-Dec-2014, tatu: As per [databind#653], need to follow more\r\n    //   closely Java Beans spec; specifically, if two first are upper-case,\r\n    //   then no lower-casing should be done.\r\n    if ((offset + 1) \u003c end) {\r\n        if (Character.isUpperCase(basename.charAt(offset + 1))) {\r\n            return basename.substring(offset);\r\n        }\r\n    }\r\n    StringBuilder sb \u003d new StringBuilder(end - offset);\r\n    sb.append(c1);\r\n    sb.append(basename, offset + 1, end);\r\n    return sb.toString();\r\n}"
      },
      {
        "name": "BeanUtil#legacyManglePropertyName(...2)",
        "body": "{\r\n    final int end \u003d basename.length();\r\n    if (end \u003d\u003d offset) {\r\n        // empty name, nope\r\n        return null;\r\n    }\r\n    // next check: is the first character upper case? If not, return as is\r\n    char c \u003d basename.charAt(offset);\r\n    char d \u003d Character.toLowerCase(c);\r\n    if (c \u003d\u003d d) {\r\n        return basename.substring(offset);\r\n    }\r\n    // otherwise, lower case initial chars. Common case first, just one char\r\n    StringBuilder sb \u003d new StringBuilder(end - offset);\r\n    sb.append(d);\r\n    int i \u003d offset + 1;\r\n    for (; i \u003c end; ++i) {\r\n        c \u003d basename.charAt(i);\r\n        d \u003d Character.toLowerCase(c);\r\n        if (c \u003d\u003d d) {\r\n            sb.append(basename, i, end);\r\n            break;\r\n        }\r\n        sb.append(d);\r\n    }\r\n    return sb.toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.BeanUtil",
    "methodName": "okNameForIsGetter",
    "signature": "java.lang.String okNameForIsGetter(com.fasterxml.jackson.databind.introspect.AnnotatedMethod,java.lang.String,boolean)",
    "visibility": "public",
    "body": "{\r\n    if (name.startsWith(\"is\")) {\r\n        // plus, must return a boolean\r\n        Class\u003c?\u003e rt \u003d am.getRawType();\r\n        if (rt \u003d\u003d Boolean.class || rt \u003d\u003d Boolean.TYPE) {\r\n            return stdNaming ? stdManglePropertyName(name, 2) : legacyManglePropertyName(name, 2);\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B7",
      "B1 : If(r2 \u003d\u003d class \"Ljava/lang/Boolean;\") → B2 | else → B3",
      "B2 : If(r2 !\u003d $r3) → B3 | else → B7",
      "B3 : If(z1 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  AnnotatedMethod\n  String\n  z1 :\u003d @parameter2: boolean\n  $z0 \u003d r0.startsWith(\"is\")\n  if ($z0 \u003d\u003d false) goto B1 else B7\n}",
      "B1 {\n  r2 \u003d r1.getRawType()\n  if (r2 \u003d\u003d class \"Ljava/lang/Boolean;\") goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d Class TYPE\u003e\n  if (r2 !\u003d $r3) goto B3 else B7\n}",
      "B3 {\n  if (z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d BeanUtil.stdManglePropertyName(r0, 2)\n  goto B6\n}",
      "B5 {\n  $r4 \u003d BeanUtil.legacyManglePropertyName(r0, 2)\n}",
      "B6 {\n  return\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B7",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanUtil#stdManglePropertyName(...2)",
        "body": "{\r\n    final int end \u003d basename.length();\r\n    if (end \u003d\u003d offset) {\r\n        // empty name, nope\r\n        return null;\r\n    }\r\n    // first: if it doesn\u0027t start with capital, return as-is\r\n    char c0 \u003d basename.charAt(offset);\r\n    char c1 \u003d Character.toLowerCase(c0);\r\n    if (c0 \u003d\u003d c1) {\r\n        return basename.substring(offset);\r\n    }\r\n    // 17-Dec-2014, tatu: As per [databind#653], need to follow more\r\n    //   closely Java Beans spec; specifically, if two first are upper-case,\r\n    //   then no lower-casing should be done.\r\n    if ((offset + 1) \u003c end) {\r\n        if (Character.isUpperCase(basename.charAt(offset + 1))) {\r\n            return basename.substring(offset);\r\n        }\r\n    }\r\n    StringBuilder sb \u003d new StringBuilder(end - offset);\r\n    sb.append(c1);\r\n    sb.append(basename, offset + 1, end);\r\n    return sb.toString();\r\n}"
      },
      {
        "name": "BeanUtil#legacyManglePropertyName(...2)",
        "body": "{\r\n    final int end \u003d basename.length();\r\n    if (end \u003d\u003d offset) {\r\n        // empty name, nope\r\n        return null;\r\n    }\r\n    // next check: is the first character upper case? If not, return as is\r\n    char c \u003d basename.charAt(offset);\r\n    char d \u003d Character.toLowerCase(c);\r\n    if (c \u003d\u003d d) {\r\n        return basename.substring(offset);\r\n    }\r\n    // otherwise, lower case initial chars. Common case first, just one char\r\n    StringBuilder sb \u003d new StringBuilder(end - offset);\r\n    sb.append(d);\r\n    int i \u003d offset + 1;\r\n    for (; i \u003c end; ++i) {\r\n        c \u003d basename.charAt(i);\r\n        d \u003d Character.toLowerCase(c);\r\n        if (c \u003d\u003d d) {\r\n            sb.append(basename, i, end);\r\n            break;\r\n        }\r\n        sb.append(d);\r\n    }\r\n    return sb.toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.BeanUtil",
    "methodName": "okNameForMutator",
    "signature": "java.lang.String okNameForMutator(com.fasterxml.jackson.databind.introspect.AnnotatedMethod,java.lang.String,boolean)",
    "visibility": "public",
    "body": "{\r\n    String name \u003d am.getName();\r\n    if (name.startsWith(prefix)) {\r\n        return stdNaming ? stdManglePropertyName(name, prefix.length()) : legacyManglePropertyName(name, prefix.length());\r\n    }\r\n    return null;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B5",
      "B1 : If(z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  AnnotatedMethod\n  String\n  z1 :\u003d @parameter2: boolean\n  r1 \u003d r0.getName()\n  $z0 \u003d r1.startsWith(r2)\n  if ($z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  if (z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d r2.length()\n  $r3 \u003d BeanUtil.stdManglePropertyName(r1, $i1)\n  goto B4\n}",
      "B3 {\n  $i0 \u003d r2.length()\n  $r3 \u003d BeanUtil.legacyManglePropertyName(r1, $i0)\n}",
      "B4 {\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanUtil#stdManglePropertyName(...2)",
        "body": "{\r\n    final int end \u003d basename.length();\r\n    if (end \u003d\u003d offset) {\r\n        // empty name, nope\r\n        return null;\r\n    }\r\n    // first: if it doesn\u0027t start with capital, return as-is\r\n    char c0 \u003d basename.charAt(offset);\r\n    char c1 \u003d Character.toLowerCase(c0);\r\n    if (c0 \u003d\u003d c1) {\r\n        return basename.substring(offset);\r\n    }\r\n    // 17-Dec-2014, tatu: As per [databind#653], need to follow more\r\n    //   closely Java Beans spec; specifically, if two first are upper-case,\r\n    //   then no lower-casing should be done.\r\n    if ((offset + 1) \u003c end) {\r\n        if (Character.isUpperCase(basename.charAt(offset + 1))) {\r\n            return basename.substring(offset);\r\n        }\r\n    }\r\n    StringBuilder sb \u003d new StringBuilder(end - offset);\r\n    sb.append(c1);\r\n    sb.append(basename, offset + 1, end);\r\n    return sb.toString();\r\n}"
      },
      {
        "name": "BeanUtil#legacyManglePropertyName(...2)",
        "body": "{\r\n    final int end \u003d basename.length();\r\n    if (end \u003d\u003d offset) {\r\n        // empty name, nope\r\n        return null;\r\n    }\r\n    // next check: is the first character upper case? If not, return as is\r\n    char c \u003d basename.charAt(offset);\r\n    char d \u003d Character.toLowerCase(c);\r\n    if (c \u003d\u003d d) {\r\n        return basename.substring(offset);\r\n    }\r\n    // otherwise, lower case initial chars. Common case first, just one char\r\n    StringBuilder sb \u003d new StringBuilder(end - offset);\r\n    sb.append(d);\r\n    int i \u003d offset + 1;\r\n    for (; i \u003c end; ++i) {\r\n        c \u003d basename.charAt(i);\r\n        d \u003d Character.toLowerCase(c);\r\n        if (c \u003d\u003d d) {\r\n            sb.append(basename, i, end);\r\n            break;\r\n        }\r\n        sb.append(d);\r\n    }\r\n    return sb.toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.BeanUtil",
    "methodName": "getDefaultValue",
    "signature": "java.lang.Object getDefaultValue(com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    // 06-Nov-2015, tatu: Returning null is fine for Object types; but need special\r\n    //   handling for primitives since they are never passed as nulls.\r\n    Class\u003c?\u003e cls \u003d type.getRawClass();\r\n    // 30-Sep-2016, tatu: Also works for Wrappers, so both `Integer.TYPE` and `Integer.class`\r\n    //    would return `Integer.TYPE`\r\n    Class\u003c?\u003e prim \u003d ClassUtil.primitiveType(cls);\r\n    if (prim !\u003d null) {\r\n        return ClassUtil.defaultValue(prim);\r\n    }\r\n    if (type.isContainerType() || type.isReferenceType()) {\r\n        return JsonInclude.Include.NON_EMPTY;\r\n    }\r\n    if (cls \u003d\u003d String.class) {\r\n        return \"\";\r\n    }\r\n    // 09-Mar-2016, tatu: Not sure how far this path we want to go but for now\r\n    //   let\u0027s add `java.util.Date` and `java.util.Calendar`, as per [databind#1550]\r\n    if (type.isTypeOrSubTypeOf(Date.class)) {\r\n        return new Date(0L);\r\n    }\r\n    if (type.isTypeOrSubTypeOf(Calendar.class)) {\r\n        Calendar c \u003d new GregorianCalendar();\r\n        c.setTimeInMillis(0L);\r\n        return c;\r\n    }\r\n    return null;\r\n}",
    "nodes": 12,
    "edges": 12,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B5",
      "B5 : If(r1 !\u003d class \"Ljava/lang/String;\") → B6 | else → B7",
      "B7 : If($z2 \u003d\u003d false) → B8 | else → B9",
      "B9 : If($z3 \u003d\u003d false) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  JavaType\n  r1 \u003d r0.getRawClass()\n  r2 \u003d ClassUtil.primitiveType(r1)\n  if (r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d ClassUtil.defaultValue(r2)\n  return\n}",
      "B2 {\n  $z0 \u003d r0.isContainerType()\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $z1 \u003d r0.isReferenceType()\n  if ($z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r3 \u003d JsonInclude$Include NON_EMPTY\u003e\n  return\n}",
      "B5 {\n  if (r1 !\u003d class \"Ljava/lang/String;\") goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $z2 \u003d r0.isTypeOrSubTypeOf(class \"Ljava/util/Date;\")\n  if ($z2 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $r5 \u003d Date\n  new Date(0L)\n  return\n}",
      "B9 {\n  $z3 \u003d r0.isTypeOrSubTypeOf(class \"Ljava/util/Calendar;\")\n  if ($z3 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  $r4 \u003d GregorianCalendar\n  new GregorianCalendar()\n  $r4.setTimeInMillis(0L)\n  return\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.BeanUtil",
    "methodName": "stdManglePropertyName",
    "signature": "java.lang.String stdManglePropertyName(java.lang.String,int)",
    "visibility": "public",
    "body": "{\r\n    final int end \u003d basename.length();\r\n    if (end \u003d\u003d offset) {\r\n        // empty name, nope\r\n        return null;\r\n    }\r\n    // first: if it doesn\u0027t start with capital, return as-is\r\n    char c0 \u003d basename.charAt(offset);\r\n    char c1 \u003d Character.toLowerCase(c0);\r\n    if (c0 \u003d\u003d c1) {\r\n        return basename.substring(offset);\r\n    }\r\n    // 17-Dec-2014, tatu: As per [databind#653], need to follow more\r\n    //   closely Java Beans spec; specifically, if two first are upper-case,\r\n    //   then no lower-casing should be done.\r\n    if ((offset + 1) \u003c end) {\r\n        if (Character.isUpperCase(basename.charAt(offset + 1))) {\r\n            return basename.substring(offset);\r\n        }\r\n    }\r\n    StringBuilder sb \u003d new StringBuilder(end - offset);\r\n    sb.append(c1);\r\n    sb.append(basename, offset + 1, end);\r\n    return sb.toString();\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 !\u003d i1) → B1 | else → B2",
      "B2 : If($i9 !\u003d $i10) → B3 | else → B4",
      "B4 : If($i4 \u003e\u003d i0) → B5 | else → B7",
      "B5 : If($z0 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  String\n  i1 :\u003d @parameter1: int\n  i0 \u003d r0.length()\n  if (i0 !\u003d i1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  c2 \u003d r0.charAt(i1)\n  c3 \u003d Character.toLowerCase(c2)\n  $i9 \u003d (int) c2\n  $i10 \u003d (int) c3\n  if ($i9 !\u003d $i10) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d r0.substring(i1)\n  return\n}",
      "B4 {\n  $i4 \u003d i1 + 1\n  if ($i4 \u003e\u003d i0) goto B5 else B7\n}",
      "B5 {\n  $i7 \u003d i1 + 1\n  $c8 \u003d r0.charAt($i7)\n  $z0 \u003d Character.isUpperCase($c8)\n  if ($z0 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r3 \u003d r0.substring(i1)\n  return\n}",
      "B7 {\n  $r5 \u003d StringBuilder\n  $i5 \u003d i0 - i1\n  new StringBuilder($i5)\n  $r5.append(c3)\n  $i6 \u003d i1 + 1\n  $r5.append(r0, $i6, i0)\n  $r2 \u003d $r5.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.BeanUtil",
    "methodName": "checkUnsupportedType",
    "signature": "java.lang.String checkUnsupportedType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    final String className \u003d type.getRawClass().getName();\r\n    String typeName, moduleName;\r\n    MapperFeature failFeature \u003d null;\r\n    if (isJava8TimeClass(className)) {\r\n        // [modules-java8#207]: do NOT check/block helper types in sub-packages,\r\n        // but only main-level types (to avoid issues with module)\r\n        if (className.indexOf(\u0027.\u0027, 10) \u003e\u003d 0) {\r\n            return null;\r\n        }\r\n        // [databind#4718]: Also don\u0027t worry about Exception type(s)\r\n        if (type.isTypeOrSubTypeOf(Throwable.class)) {\r\n            return null;\r\n        }\r\n        failFeature \u003d MapperFeature.REQUIRE_HANDLERS_FOR_JAVA8_TIMES;\r\n        final boolean fail \u003d (config \u003d\u003d null) || config.isEnabled(failFeature);\r\n        if (!fail) {\r\n            return null;\r\n        }\r\n        typeName \u003d \"Java 8 date/time\";\r\n        moduleName \u003d \"com.fasterxml.jackson.datatype:jackson-datatype-jsr310\";\r\n    } else if (isJodaTimeClass(className)) {\r\n        typeName \u003d \"Joda date/time\";\r\n        moduleName \u003d \"com.fasterxml.jackson.datatype:jackson-datatype-joda\";\r\n    } else if (isJava8OptionalClass(className)) {\r\n        failFeature \u003d MapperFeature.REQUIRE_HANDLERS_FOR_JAVA8_OPTIONALS;\r\n        final boolean fail \u003d (config \u003d\u003d null) || config.isEnabled(failFeature);\r\n        if (!fail) {\r\n            return null;\r\n        }\r\n        typeName \u003d \"Java 8 optional\";\r\n        moduleName \u003d \"com.fasterxml.jackson.datatype:jackson-datatype-jdk8\";\r\n    } else {\r\n        return null;\r\n    }\r\n    String str \u003d String.format(\"%s type %s not supported by default: add Module \\\"%s\\\" to enable handling\", typeName, ClassUtil.getTypeDescription(type), moduleName);\r\n    if (failFeature !\u003d null) {\r\n        str \u003d String.format(\"%s (or disable `MapperFeature.%s`)\", str, failFeature.name());\r\n    }\r\n    return str;\r\n}",
    "nodes": 26,
    "edges": 32,
    "cc": 8,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B12",
      "B1 : If($i0 \u003c 0) → B2 | else → B3",
      "B3 : If($z4 \u003d\u003d false) → B4 | else → B5",
      "B5 : If(r3 \u003d\u003d null) → B6 | else → B7",
      "B6 : If($z5 \u003d\u003d false) → B7 | else → B8",
      "B9 : If($z6 !\u003d 0) → B10 | else → B11",
      "B12 : If($z1 \u003d\u003d false) → B13 | else → B14",
      "B14 : If($z2 \u003d\u003d false) → B15 | else → B22",
      "B15 : If(r3 \u003d\u003d null) → B16 | else → B17",
      "B16 : If($z3 \u003d\u003d false) → B17 | else → B18",
      "B19 : If($z7 !\u003d 0) → B20 | else → B21",
      "B23 : If(r6 \u003d\u003d null) → B24 | else → B25"
    ],
    "blockList": [
      "B0 {\n  MapperConfig\n  JavaType\n  $r1 \u003d r0.getRawClass()\n  r2 \u003d $r1.getName()\n  r6 \u003d null\n  $z0 \u003d BeanUtil.isJava8TimeClass(r2)\n  if ($z0 \u003d\u003d false) goto B1 else B12\n}",
      "B1 {\n  $i0 \u003d r2.indexOf(46, 10)\n  if ($i0 \u003c 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $z4 \u003d r0.isTypeOrSubTypeOf(class \"Ljava/lang/Throwable;\")\n  if ($z4 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  r6 \u003d MapperFeature REQUIRE_HANDLERS_FOR_JAVA8_TIMES\u003e\n  if (r3 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  $z5 \u003d r3.isEnabled(r6)\n  if ($z5 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $z6 \u003d 1\n  goto B9\n}",
      "B8 {\n  $z6 \u003d 0\n}",
      "B9 {\n  if ($z6 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  return\n}",
      "B11 {\n  r7 \u003d \"Java 8 date/time\"\n  r8 \u003d datatype:jackson-datatype-jsr310\"\n  goto B23\n}",
      "B12 {\n  $z1 \u003d BeanUtil.isJodaTimeClass(r2)\n  if ($z1 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  r7 \u003d \"Joda date/time\"\n  r8 \u003d datatype:jackson-datatype-joda\"\n  goto B23\n}",
      "B14 {\n  $z2 \u003d BeanUtil.isJava8OptionalClass(r2)\n  if ($z2 \u003d\u003d false) goto B15 else B22\n}",
      "B15 {\n  r6 \u003d MapperFeature REQUIRE_HANDLERS_FOR_JAVA8_OPTIONALS\u003e\n  if (r3 \u003d\u003d null) goto B16 else B17\n}",
      "B16 {\n  $z3 \u003d r3.isEnabled(r6)\n  if ($z3 \u003d\u003d false) goto B17 else B18\n}",
      "B17 {\n  $z7 \u003d 1\n  goto B19\n}",
      "B18 {\n  $z7 \u003d 0\n}",
      "B19 {\n  if ($z7 !\u003d 0) goto B20 else B21\n}",
      "B20 {\n  return\n}",
      "B21 {\n  r7 \u003d \"Java 8 optional\"\n  r8 \u003d datatype:jackson-datatype-jdk8\"\n  goto B23\n}",
      "B22 {\n  return\n}",
      "B23 {\n  $r9 \u003d Object)[3]\n  $r9[0] \u003d r7\n  $r10 \u003d ClassUtil.getTypeDescription(r0)\n  $r9[1] \u003d $r10\n  $r9[2] \u003d r8\n  $r11 \u003d String.format(\"%s type %s not supported by default: add Module \\\"%s\\\" to enable handling\", $r9)\n  r12 \u003d $r11\n  if (r6 \u003d\u003d null) goto B24 else B25\n}",
      "B24 {\n  $r4 \u003d Object)[2]\n  $r4[0] \u003d $r11\n  $r5 \u003d r6.name()\n  $r4[1] \u003d $r5\n  r12 \u003d String.format(\"%s (or disable `MapperFeature.%s`)\", $r4)\n}",
      "B25 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B12",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B23",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B23",
      "B14 --\u003e B15",
      "B14 --\u003e B22",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e [EXIT]",
      "B21 --\u003e B23",
      "B22 --\u003e [EXIT]",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B25",
      "B25 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanUtil#isJodaTimeClass(...1)",
        "body": "{\r\n    return isJodaTimeClass(rawType.getName());\r\n}"
      },
      {
        "name": "BeanUtil#isJava8OptionalClass(...1)",
        "body": "{\r\n    return isJava8OptionalClass(rawType.getName());\r\n}"
      },
      {
        "name": "BeanUtil#isJava8TimeClass(...1)",
        "body": "{\r\n    return isJava8TimeClass(rawType.getName());\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream",
    "methodName": "read",
    "signature": "int read()",
    "visibility": "public",
    "body": "{\r\n    return _b.hasRemaining() ? (_b.get() \u0026 0xFF) : -1;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ByteBufferBackedInputStream\n  $r1 \u003d ByteBuffer _b\u003e\n  $z0 \u003d $r1.hasRemaining()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d ByteBuffer _b\u003e\n  $b0 \u003d $r2.get()\n  $s1 \u003d $b0 \u0026 255\n  goto B3\n}",
      "B2 {\n  $s1 \u003d -1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream",
    "methodName": "read",
    "signature": "int read(byte[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (!_b.hasRemaining())\r\n        return -1;\r\n    len \u003d Math.min(len, _b.remaining());\r\n    _b.get(bytes, off, len);\r\n    return len;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ByteBufferBackedInputStream\n  r3 :\u003d @parameter0: byte[]\n  i1 :\u003d @parameter1: int\n  i2 :\u003d @parameter2: int\n  $r1 \u003d ByteBuffer _b\u003e\n  $z0 \u003d $r1.hasRemaining()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $i5 \u003d (int) -1\n  return\n}",
      "B2 {\n  $r2 \u003d ByteBuffer _b\u003e\n  $i0 \u003d $r2.remaining()\n  i3 \u003d Math.min(i2, $i0)\n  $r4 \u003d ByteBuffer _b\u003e\n  $r4.get(r3, i1, i3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "findSuperTypes",
    "signature": "java.util.List findSuperTypes(com.fasterxml.jackson.databind.JavaType,java.lang.Class,boolean)",
    "visibility": "public",
    "body": "{\r\n    if ((type \u003d\u003d null) || type.hasRawClass(endBefore) || type.hasRawClass(Object.class)) {\r\n        return Collections.emptyList();\r\n    }\r\n    List\u003cJavaType\u003e result \u003d new ArrayList\u003cJavaType\u003e(8);\r\n    _addSuperTypes(type, endBefore, result, addClassItself);\r\n    return result;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  JavaType\n  Class\n  z2 :\u003d @parameter2: boolean\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d r0.hasRawClass(r1)\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d r0.hasRawClass(class \"Ljava/lang/Object;\")\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d Collections.emptyList()\n  return\n}",
      "B4 {\n  $r2 \u003d ArrayList\n  new ArrayList(8)\n  ClassUtil._addSuperTypes(r0, r1, $r2, z2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtil#_addSuperTypes(...4)",
        "body": "{\r\n    if (type \u003d\u003d null) {\r\n        return;\r\n    }\r\n    final Class\u003c?\u003e cls \u003d type.getRawClass();\r\n    if (cls \u003d\u003d endBefore || cls \u003d\u003d Object.class) {\r\n        return;\r\n    }\r\n    if (addClassItself) {\r\n        if (result.contains(type)) {\r\n            // already added, no need to check supers\r\n            return;\r\n        }\r\n        result.add(type);\r\n    }\r\n    for (JavaType intCls : type.getInterfaces()) {\r\n        _addSuperTypes(intCls, endBefore, result, true);\r\n    }\r\n    _addSuperTypes(type.getSuperClass(), endBefore, result, true);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "findRawSuperTypes",
    "signature": "java.util.List findRawSuperTypes(java.lang.Class,java.lang.Class,boolean)",
    "visibility": "public",
    "body": "{\r\n    if ((cls \u003d\u003d null) || (cls \u003d\u003d endBefore) || (cls \u003d\u003d Object.class)) {\r\n        return Collections.emptyList();\r\n    }\r\n    List\u003cClass\u003c?\u003e\u003e result \u003d new ArrayList\u003cClass\u003c?\u003e\u003e(8);\r\n    _addRawSuperTypes(cls, endBefore, result, addClassItself);\r\n    return result;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r0 \u003d\u003d r1) → B2 | else → B3",
      "B2 : If(r0 !\u003d class \"Ljava/lang/Object;\") → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Class\n  Class\n  z0 :\u003d @parameter2: boolean\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  if (r0 \u003d\u003d r1) goto B2 else B3\n}",
      "B2 {\n  if (r0 !\u003d class \"Ljava/lang/Object;\") goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d Collections.emptyList()\n  return\n}",
      "B4 {\n  $r2 \u003d ArrayList\n  new ArrayList(8)\n  ClassUtil._addRawSuperTypes(r0, r1, $r2, z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtil#_addRawSuperTypes(...4)",
        "body": "{\r\n    if (cls \u003d\u003d endBefore || cls \u003d\u003d null || cls \u003d\u003d Object.class) {\r\n        return;\r\n    }\r\n    if (addClassItself) {\r\n        if (result.contains(cls)) {\r\n            // already added, no need to check supers\r\n            return;\r\n        }\r\n        result.add(cls);\r\n    }\r\n    for (Class\u003c?\u003e intCls : _interfaces(cls)) {\r\n        _addRawSuperTypes(intCls, endBefore, result, true);\r\n    }\r\n    _addRawSuperTypes(cls.getSuperclass(), endBefore, result, true);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "findSuperClasses",
    "signature": "java.util.List findSuperClasses(java.lang.Class,java.lang.Class,boolean)",
    "visibility": "public",
    "body": "{\r\n    List\u003cClass\u003c?\u003e\u003e result \u003d new ArrayList\u003cClass\u003c?\u003e\u003e(8);\r\n    if ((cls !\u003d null) \u0026\u0026 (cls !\u003d endBefore)) {\r\n        if (addClassItself) {\r\n            result.add(cls);\r\n        }\r\n        while ((cls \u003d cls.getSuperclass()) !\u003d null) {\r\n            if (cls \u003d\u003d endBefore) {\r\n                break;\r\n            }\r\n            result.add(cls);\r\n        }\r\n    }\r\n    return result;\r\n}",
    "nodes": 9,
    "edges": 13,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B8",
      "B1 : If(r2 \u003d\u003d r1) → B2 | else → B8",
      "B2 : If(z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($r3 \u003d\u003d null) → B5 | else → B8",
      "B5 : If($r3 !\u003d r1) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Class\n  Class\n  z0 :\u003d @parameter2: boolean\n  $r0 \u003d ArrayList\n  new ArrayList(8)\n  if (r2 \u003d\u003d null) goto B1 else B8\n}",
      "B1 {\n  if (r2 \u003d\u003d r1) goto B2 else B8\n}",
      "B2 {\n  if (z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r0.add(r2)\n}",
      "B4 {\n  $r3 \u003d r2.getSuperclass()\n  r2 \u003d $r3\n  if ($r3 \u003d\u003d null) goto B5 else B8\n}",
      "B5 {\n  if ($r3 !\u003d r1) goto B6 else B7\n}",
      "B6 {\n  goto B8\n}",
      "B7 {\n  $r0.add($r3)\n  goto B4\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B8",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B4",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "canBeABeanType",
    "signature": "java.lang.String canBeABeanType(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    // First: language constructs that ain\u0027t beans:\r\n    if (type.isAnnotation()) {\r\n        return \"annotation\";\r\n    }\r\n    if (type.isArray()) {\r\n        return \"array\";\r\n    }\r\n    if (Enum.class.isAssignableFrom(type)) {\r\n        return \"enum\";\r\n    }\r\n    if (type.isPrimitive()) {\r\n        return \"primitive\";\r\n    }\r\n    // Anything else? Seems valid, then\r\n    return null;\r\n}",
    "nodes": 9,
    "edges": 8,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B6",
      "B6 : If($z3 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  Class\n  $z0 \u003d r0.isAnnotation()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z1 \u003d r0.isArray()\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r1 \u003d class \"Ljava/lang/Enum;\"\n  $z2 \u003d $r1.isAssignableFrom(r0)\n  if ($z2 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $z3 \u003d r0.isPrimitive()\n  if ($z3 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "isLocalType",
    "signature": "java.lang.String isLocalType(java.lang.Class,boolean)",
    "visibility": "public",
    "body": "{\r\n    /* As per [JACKSON-187], GAE seems to throw SecurityExceptions\r\n         * here and there... and GAE itself has a bug, too\r\n         * Bah. So we need to catch some wayward exceptions on GAE\r\n         */\r\n    try {\r\n        final boolean isStatic \u003d Modifier.isStatic(type.getModifiers());\r\n        // one more: method locals, anonymous, are not good:\r\n        // 23-Jun-2020, tatu: [databind#2758] With JDK14+ should allow\r\n        //    local Record types, however\r\n        if (!isStatic \u0026\u0026 hasEnclosingMethod(type)) {\r\n            return \"local/anonymous\";\r\n        }\r\n        /* But how about non-static inner classes? Can\u0027t construct\r\n             * easily (theoretically, we could try to check if parent\r\n             * happens to be enclosing... but that gets convoluted)\r\n             */\r\n        if (!allowNonStatic) {\r\n            if (!isStatic \u0026\u0026 getEnclosingClass(type) !\u003d null) {\r\n                return \"non-static member class\";\r\n            }\r\n        }\r\n    } catch (SecurityException e) {\r\n    } catch (NullPointerException e) {\r\n    }\r\n    return null;\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If(z2 !\u003d 0) → B1 | else → B3",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B3 : If(z0 !\u003d 0) → B4 | else → B7",
      "B4 : If(z2 !\u003d 0) → B5 | else → B7",
      "B5 : If($r1 \u003d\u003d null) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Class\n  z0 :\u003d @parameter1: boolean\n  $i0 \u003d r0.getModifiers()\n  z2 \u003d Modifier.isStatic($i0)\n  if (z2 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $z1 \u003d ClassUtil.hasEnclosingMethod(r0)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  if (z0 !\u003d 0) goto B4 else B7\n}",
      "B4 {\n  if (z2 !\u003d 0) goto B5 else B7\n}",
      "B5 {\n  $r1 \u003d ClassUtil.getEnclosingClass(r0)\n  if ($r1 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  goto B10\n}",
      "B8 {\n  $r3 :\u003d @caughtexception\n  goto B10\n}",
      "B9 {\n  $r2 :\u003d @caughtexception\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B10",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtil#getEnclosingClass(...1)",
        "body": "{\r\n    // Caching does not seem worthwhile, as per profiling\r\n    return isObjectOrPrimitive(cls) ? null : cls.getEnclosingClass();\r\n}"
      },
      {
        "name": "ClassUtil#hasEnclosingMethod(...1)",
        "body": "{\r\n    return !isObjectOrPrimitive(cls) \u0026\u0026 (cls.getEnclosingMethod() !\u003d null);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "getOuterClass",
    "signature": "java.lang.Class getOuterClass(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    // as above, GAE has some issues...\r\n    if (!Modifier.isStatic(type.getModifiers())) {\r\n        try {\r\n            // one more: method locals, anonymous, are not good:\r\n            if (hasEnclosingMethod(type)) {\r\n                return null;\r\n            }\r\n            return getEnclosingClass(type);\r\n        } catch (SecurityException e) {\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 6,
    "edges": 5,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B5",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Class\n  $i0 \u003d r0.getModifiers()\n  $z0 \u003d Modifier.isStatic($i0)\n  if ($z0 !\u003d 0) goto B1 else B5\n}",
      "B1 {\n  $z1 \u003d ClassUtil.hasEnclosingMethod(r0)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r1 \u003d ClassUtil.getEnclosingClass(r0)\n  return\n}",
      "B4 {\n  $r2 :\u003d @caughtexception\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtil#getEnclosingClass(...1)",
        "body": "{\r\n    // Caching does not seem worthwhile, as per profiling\r\n    return isObjectOrPrimitive(cls) ? null : cls.getEnclosingClass();\r\n}"
      },
      {
        "name": "ClassUtil#hasEnclosingMethod(...1)",
        "body": "{\r\n    return !isObjectOrPrimitive(cls) \u0026\u0026 (cls.getEnclosingMethod() !\u003d null);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "isProxyType",
    "signature": "boolean isProxyType(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    // As per [databind#57], should NOT disqualify JDK proxy:\r\n    /*\r\n        // Then: well-known proxy (etc) classes\r\n        if (Proxy.isProxyClass(type)) {\r\n            return true;\r\n        }\r\n        */\r\n    String name \u003d type.getName();\r\n    // Hibernate uses proxies heavily as well:\r\n    if (name.startsWith(\"net.sf.cglib.proxy.\") || name.startsWith(\"org.hibernate.proxy.\")) {\r\n        return true;\r\n    }\r\n    // Not one of known proxies, nope:\r\n    return false;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Class\n  r1 \u003d r0.getName()\n  $z0 \u003d r1.startsWith(\"net.sf.cglib.proxy.\")\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d r1.startsWith(\"org.hibernate.proxy.\")\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "isConcrete",
    "signature": "boolean isConcrete(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    int mod \u003d type.getModifiers();\r\n    return (mod \u0026 (Modifier.INTERFACE | Modifier.ABSTRACT)) \u003d\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  i0 \u003d r0.getModifiers()\n  $i1 \u003d i0 \u0026 1536\n  if ($i1 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "isConcrete",
    "signature": "boolean isConcrete(java.lang.reflect.Member)",
    "visibility": "public",
    "body": "{\r\n    int mod \u003d member.getModifiers();\r\n    return (mod \u0026 (Modifier.INTERFACE | Modifier.ABSTRACT)) \u003d\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Member\n  i0 \u003d r0.getModifiers()\n  $i1 \u003d i0 \u0026 1536\n  if ($i1 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "isCollectionMapOrArray",
    "signature": "boolean isCollectionMapOrArray(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (type.isArray())\r\n        return true;\r\n    if (Collection.class.isAssignableFrom(type))\r\n        return true;\r\n    if (Map.class.isAssignableFrom(type))\r\n        return true;\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Class\n  $z0 \u003d r0.isArray()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d class \"Ljava/util/Collection;\"\n  $z1 \u003d $r1.isAssignableFrom(r0)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r2 \u003d class \"Ljava/util/Map;\"\n  $z2 \u003d $r2.isAssignableFrom(r0)\n  if ($z2 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "isBogusClass",
    "signature": "boolean isBogusClass(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return (cls \u003d\u003d Void.class || cls \u003d\u003d Void.TYPE || cls \u003d\u003d com.fasterxml.jackson.databind.annotation.NoClass.class);\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d class \"Ljava/lang/Void;\") → B1 | else → B3",
      "B1 : If(r0 \u003d\u003d $r1) → B2 | else → B3",
      "B2 : If(r0 !\u003d class \"Lcom/fasterxml/jackson/databind/annotation/NoClass;\") → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Class\n  if (r0 \u003d\u003d class \"Ljava/lang/Void;\") goto B1 else B3\n}",
      "B1 {\n  $r1 \u003d Class TYPE\u003e\n  if (r0 \u003d\u003d $r1) goto B2 else B3\n}",
      "B2 {\n  if (r0 !\u003d class \"Lcom/fasterxml/jackson/databind/annotation/NoClass;\") goto B3 else B4\n}",
      "B3 {\n  $z0 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z0 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "isRecordType",
    "signature": "boolean isRecordType(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    Class\u003c?\u003e parent \u003d cls.getSuperclass();\r\n    return (parent !\u003d null) \u0026\u0026 \"java.lang.Record\".equals(parent.getName());\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Class\n  r1 \u003d r0.getSuperclass()\n  if (r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r3 \u003d Record\"\n  $r2 \u003d r1.getName()\n  $z0 \u003d $r3.equals($r2)\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "isObjectOrPrimitive",
    "signature": "boolean isObjectOrPrimitive(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return (cls \u003d\u003d CLS_OBJECT) || cls.isPrimitive();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d $r1) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Class\n  $r1 \u003d Class CLS_OBJECT\u003e\n  if (r0 \u003d\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r0.isPrimitive()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "hasClass",
    "signature": "boolean hasClass(java.lang.Object,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    // 10-Nov-2016, tatu: Could use `Class.isInstance()` if we didn\u0027t care\r\n    //    about being exactly that type\r\n    return (inst !\u003d null) \u0026\u0026 (inst.getClass() \u003d\u003d raw);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($r2 !\u003d r1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Object\n  Class\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d r0.getClass()\n  if ($r2 !\u003d r1) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "verifyMustOverride",
    "signature": "void verifyMustOverride(java.lang.Class,java.lang.Object,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (instance.getClass() !\u003d expType) {\r\n        throw new IllegalStateException(String.format(\"Sub-class %s (of class %s) must override method \u0027%s\u0027\", instance.getClass().getName(), expType.getName(), method));\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  Object\n  String\n  $r2 \u003d r0.getClass()\n  if ($r2 \u003d\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IllegalStateException\n  $r4 \u003d Object)[3]\n  $r5 \u003d r0.getClass()\n  $r6 \u003d $r5.getName()\n  $r4[0] \u003d $r6\n  $r7 \u003d r1.getName()\n  $r4[1] \u003d $r7\n  $r4[2] \u003d r8\n  $r9 \u003d String.format(\"Sub-class %s (of class %s) must override method \\\u0027%s\\\u0027\", $r4)\n  new IllegalStateException($r9)\n  throw $r3\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "hasGetterSignature",
    "signature": "boolean hasGetterSignature(java.lang.reflect.Method)",
    "visibility": "public",
    "body": "{\r\n    // First: static methods can\u0027t be getters\r\n    if (Modifier.isStatic(m.getModifiers())) {\r\n        return false;\r\n    }\r\n    // Must take no args\r\n    if (m.getParameterTypes().length !\u003d 0) {\r\n        return false;\r\n    }\r\n    // Can\u0027t be a void method\r\n    if (Void.TYPE \u003d\u003d m.getReturnType()) {\r\n        return false;\r\n    }\r\n    // Otherwise looks ok:\r\n    return true;\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($i1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($r2 !\u003d $r3) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Method\n  $i0 \u003d r0.getModifiers()\n  $z0 \u003d Modifier.isStatic($i0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getParameterTypes()\n  $i1 \u003d lengthof $r1\n  if ($i1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r2 \u003d Class TYPE\u003e\n  $r3 \u003d r0.getReturnType()\n  if ($r2 !\u003d $r3) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "throwIfError",
    "signature": "java.lang.Throwable throwIfError(java.lang.Throwable)",
    "visibility": "public",
    "body": "{\r\n    if (t instanceof Error) {\r\n        throw (Error) t;\r\n    }\r\n    return t;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Throwable\n  $z0 \u003d Error\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d Error) r0\n  throw $r1\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "throwIfRTE",
    "signature": "java.lang.Throwable throwIfRTE(java.lang.Throwable)",
    "visibility": "public",
    "body": "{\r\n    if (t instanceof RuntimeException) {\r\n        throw (RuntimeException) t;\r\n    }\r\n    return t;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Throwable\n  $z0 \u003d RuntimeException\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d RuntimeException) r0\n  throw $r1\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "throwIfIOE",
    "signature": "java.lang.Throwable throwIfIOE(java.lang.Throwable)",
    "visibility": "public",
    "body": "{\r\n    if (t instanceof IOException) {\r\n        throw (IOException) t;\r\n    }\r\n    return t;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Throwable\n  $z0 \u003d IOException\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d IOException) r0\n  throw $r1\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "getRootCause",
    "signature": "java.lang.Throwable getRootCause(java.lang.Throwable)",
    "visibility": "public",
    "body": "{\r\n    while (t.getCause() !\u003d null) {\r\n        t \u003d t.getCause();\r\n    }\r\n    return t;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($r0 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Throwable\n}",
      "B1 {\n  $r0 \u003d r1.getCause()\n  if ($r0 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  r1 \u003d r1.getCause()\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "throwAsMappingException",
    "signature": "java.lang.Object throwAsMappingException(com.fasterxml.jackson.databind.DeserializationContext,java.io.IOException)",
    "visibility": "public",
    "body": "{\r\n    if (e0 instanceof JsonMappingException) {\r\n        throw (JsonMappingException) e0;\r\n    }\r\n    throw JsonMappingException.from(ctxt, e0.getMessage()).withCause(e0);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DeserializationContext\n  IOException\n  $z0 \u003d JsonMappingException\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d JsonMappingException) r0\n  throw $r5\n}",
      "B2 {\n  $r2 \u003d r0.getMessage()\n  $r3 \u003d JsonMappingException.from(r1, $r2)\n  $r4 \u003d $r3.withCause(r0)\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "closeOnFailAndThrowAsIOE",
    "signature": "void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.lang.Exception)",
    "visibility": "public",
    "body": "{\r\n    // 04-Mar-2014, tatu: Let\u0027s try to prevent auto-closing of\r\n    //    structures, which typically causes more damage.\r\n    g.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);\r\n    try {\r\n        g.close();\r\n    } catch (Exception e) {\r\n        fail.addSuppressed(e);\r\n    }\r\n    throwIfIOE(fail);\r\n    throwIfRTE(fail);\r\n    throw new RuntimeException(fail);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  JsonGenerator\n  Exception\n  $r1 \u003d JsonGenerator$Feature AUTO_CLOSE_JSON_CONTENT\u003e\n  r0.disable($r1)\n  r0.close()\n  goto B2\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  r2.addSuppressed($r4)\n}",
      "B2 {\n  ClassUtil.throwIfIOE(r2)\n  ClassUtil.throwIfRTE(r2)\n  $r3 \u003d RuntimeException\n  new RuntimeException(r2)\n  throw $r3\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtil#throwIfRTE(...1)",
        "body": "{\r\n    if (t instanceof RuntimeException) {\r\n        throw (RuntimeException) t;\r\n    }\r\n    return t;\r\n}"
      },
      {
        "name": "ClassUtil#throwIfIOE(...1)",
        "body": "{\r\n    if (t instanceof IOException) {\r\n        throw (IOException) t;\r\n    }\r\n    return t;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "closeOnFailAndThrowAsIOE",
    "signature": "void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator,java.io.Closeable,java.lang.Exception)",
    "visibility": "public",
    "body": "{\r\n    if (g !\u003d null) {\r\n        g.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);\r\n        try {\r\n            g.close();\r\n        } catch (Exception e) {\r\n            fail.addSuppressed(e);\r\n        }\r\n    }\r\n    if (toClose !\u003d null) {\r\n        try {\r\n            toClose.close();\r\n        } catch (Exception e) {\r\n            fail.addSuppressed(e);\r\n        }\r\n    }\r\n    throwIfIOE(fail);\r\n    throwIfRTE(fail);\r\n    throw new RuntimeException(fail);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B3 : If(r1 \u003d\u003d null) → B4 | else → B6"
    ],
    "blockList": [
      "B0 {\n  JsonGenerator\n  Closeable\n  Exception\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r3 \u003d JsonGenerator$Feature AUTO_CLOSE_JSON_CONTENT\u003e\n  r0.disable($r3)\n  r0.close()\n  goto B3\n}",
      "B2 {\n  $r5 :\u003d @caughtexception\n  r2.addSuppressed($r5)\n}",
      "B3 {\n  if (r1 \u003d\u003d null) goto B4 else B6\n}",
      "B4 {\n  r1.close()\n  goto B6\n}",
      "B5 {\n  $r4 :\u003d @caughtexception\n  r2.addSuppressed($r4)\n}",
      "B6 {\n  ClassUtil.throwIfIOE(r2)\n  ClassUtil.throwIfRTE(r2)\n  $r6 \u003d RuntimeException\n  new RuntimeException(r2)\n  throw $r6\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtil#throwIfRTE(...1)",
        "body": "{\r\n    if (t instanceof RuntimeException) {\r\n        throw (RuntimeException) t;\r\n    }\r\n    return t;\r\n}"
      },
      {
        "name": "ClassUtil#throwIfIOE(...1)",
        "body": "{\r\n    if (t instanceof IOException) {\r\n        throw (IOException) t;\r\n    }\r\n    return t;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "classOf",
    "signature": "java.lang.Class classOf(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (inst \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return inst.getClass();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getClass()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "rawClass",
    "signature": "java.lang.Class rawClass(com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    if (t \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return t.getRawClass();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JavaType\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getRawClass()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "nonNull",
    "signature": "java.lang.Object nonNull(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "nullOrToString",
    "signature": "java.lang.String nullOrToString(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return value.toString();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "nonNullString",
    "signature": "java.lang.String nonNullString(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return \"\";\r\n    }\r\n    return str;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "quotedOr",
    "signature": "java.lang.String quotedOr(java.lang.Object,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return forNull;\r\n    }\r\n    return String.format(\"\\\"%s\\\"\", str);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d Object)[1]\n  $r1[0] \u003d r0\n  $r2 \u003d String.format(\"\\\"%s\\\"\", $r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "getClassDescription",
    "signature": "java.lang.String getClassDescription(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (classOrInstance \u003d\u003d null) {\r\n        return \"unknown\";\r\n    }\r\n    Class\u003c?\u003e cls \u003d (classOrInstance instanceof Class\u003c?\u003e) ? (Class\u003c?\u003e) classOrInstance : classOrInstance.getClass();\r\n    return nameOf(cls);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d Class\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d Class) r0\n  goto B5\n}",
      "B4 {\n  $r2 \u003d r0.getClass()\n}",
      "B5 {\n  $r1 \u003d ClassUtil.nameOf($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtil#nameOf(...1)",
        "body": "{\r\n    if (cls \u003d\u003d null) {\r\n        return \"[null]\";\r\n    }\r\n    int index \u003d 0;\r\n    while (cls.isArray()) {\r\n        ++index;\r\n        cls \u003d cls.getComponentType();\r\n    }\r\n    String base \u003d cls.isPrimitive() ? cls.getSimpleName() : cls.getName();\r\n    if (index \u003e 0) {\r\n        StringBuilder sb \u003d new StringBuilder(base);\r\n        do {\r\n            sb.append(\"[]\");\r\n        } while (--index \u003e 0);\r\n        base \u003d sb.toString();\r\n    }\r\n    return backticked(base);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "getTypeDescription",
    "signature": "java.lang.String getTypeDescription(com.fasterxml.jackson.databind.JavaType)",
    "visibility": "public",
    "body": "{\r\n    if (fullType \u003d\u003d null) {\r\n        return \"[null]\";\r\n    }\r\n    // 07-Dec-2023, tatu: Instead of cryptic notation for array types\r\n    //    (JLS-specified for JDK deserialization), let\u0027s use trailing \"[]\"s\r\n    //    to indicate dimensions instead\r\n    int arrays \u003d 0;\r\n    while (fullType.isArrayType()) {\r\n        ++arrays;\r\n        fullType \u003d fullType.getContentType();\r\n    }\r\n    StringBuilder sb \u003d new StringBuilder(80).append(\u0027`\u0027);\r\n    sb.append(fullType.toCanonical());\r\n    while (arrays-- \u003e 0) {\r\n        sb.append(\"[]\");\r\n    }\r\n    return sb.append(\u0027`\u0027).toString();\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r5 !\u003d null) → B1 | else → B2",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5",
      "B6 : If($i0 \u003c\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  JavaType\n  if (r5 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i1 \u003d 0\n}",
      "B3 {\n  $z0 \u003d r5.isArrayType()\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  i1 \u003d i1 + 1\n  r5 \u003d r5.getContentType()\n  goto B3\n}",
      "B5 {\n  $r6 \u003d StringBuilder\n  new StringBuilder(80)\n  r1 \u003d $r6.append(96)\n  $r2 \u003d r5.toCanonical()\n  r1.append($r2)\n}",
      "B6 {\n  $i0 \u003d i1\n  $i3 \u003d (int) -1\n  i1 \u003d i1 + $i3\n  if ($i0 \u003c\u003d 0) goto B7 else B8\n}",
      "B7 {\n  r1.append(\"\")\n  goto B6\n}",
      "B8 {\n  $r3 \u003d r1.append(96)\n  $r4 \u003d $r3.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B6",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "classNameOf",
    "signature": "java.lang.String classNameOf(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (inst \u003d\u003d null) {\r\n        return \"[null]\";\r\n    }\r\n    Class\u003c?\u003e raw \u003d (inst instanceof Class\u003c?\u003e) ? (Class\u003c?\u003e) inst : inst.getClass();\r\n    return nameOf(raw);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d Class\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d Class) r0\n  goto B5\n}",
      "B4 {\n  $r2 \u003d r0.getClass()\n}",
      "B5 {\n  $r1 \u003d ClassUtil.nameOf($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtil#nameOf(...1)",
        "body": "{\r\n    if (cls \u003d\u003d null) {\r\n        return \"[null]\";\r\n    }\r\n    int index \u003d 0;\r\n    while (cls.isArray()) {\r\n        ++index;\r\n        cls \u003d cls.getComponentType();\r\n    }\r\n    String base \u003d cls.isPrimitive() ? cls.getSimpleName() : cls.getName();\r\n    if (index \u003e 0) {\r\n        StringBuilder sb \u003d new StringBuilder(base);\r\n        do {\r\n            sb.append(\"[]\");\r\n        } while (--index \u003e 0);\r\n        base \u003d sb.toString();\r\n    }\r\n    return backticked(base);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "nameOf",
    "signature": "java.lang.String nameOf(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (cls \u003d\u003d null) {\r\n        return \"[null]\";\r\n    }\r\n    int index \u003d 0;\r\n    while (cls.isArray()) {\r\n        ++index;\r\n        cls \u003d cls.getComponentType();\r\n    }\r\n    String base \u003d cls.isPrimitive() ? cls.getSimpleName() : cls.getName();\r\n    if (index \u003e 0) {\r\n        StringBuilder sb \u003d new StringBuilder(base);\r\n        do {\r\n            sb.append(\"[]\");\r\n        } while (--index \u003e 0);\r\n        base \u003d sb.toString();\r\n    }\r\n    return backticked(base);\r\n}",
    "nodes": 13,
    "edges": 16,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B7",
      "B8 : If(i0 \u003c\u003d 0) → B9 | else → B12",
      "B10 : If(i0 \u003e 0) → B11 | else → B10"
    ],
    "blockList": [
      "B0 {\n  Class\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d 0\n}",
      "B3 {\n  $z0 \u003d r2.isArray()\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  i0 \u003d i0 + 1\n  r2 \u003d r2.getComponentType()\n  goto B3\n}",
      "B5 {\n  $z1 \u003d r2.isPrimitive()\n  if ($z1 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r3 \u003d r2.getSimpleName()\n  goto B8\n}",
      "B7 {\n  $r3 \u003d r2.getName()\n}",
      "B8 {\n  r4 \u003d $r3\n  if (i0 \u003c\u003d 0) goto B9 else B12\n}",
      "B9 {\n  $r5 \u003d StringBuilder\n  new StringBuilder($r3)\n}",
      "B10 {\n  $r5.append(\"\")\n  $i2 \u003d (int) -1\n  i0 \u003d i0 + $i2\n  if (i0 \u003e 0) goto B11 else B10\n}",
      "B11 {\n  r4 \u003d $r5.toString()\n}",
      "B12 {\n  $r0 \u003d ClassUtil.backticked(r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B12",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B10",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtil#backticked(...1)",
        "body": "{\r\n    if (text \u003d\u003d null) {\r\n        return \"[null]\";\r\n    }\r\n    return new StringBuilder(text.length() + 2).append(\u0027`\u0027).append(text).append(\u0027`\u0027).toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "nameOf",
    "signature": "java.lang.String nameOf(com.fasterxml.jackson.databind.util.Named)",
    "visibility": "public",
    "body": "{\r\n    if (named \u003d\u003d null) {\r\n        return \"[null]\";\r\n    }\r\n    return apostrophed(named.getName());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Named\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getName()\n  $r2 \u003d ClassUtil.apostrophed($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtil#apostrophed(...1)",
        "body": "{\r\n    if (text \u003d\u003d null) {\r\n        return \"[null]\";\r\n    }\r\n    return new StringBuilder(text.length() + 2).append(\u0027\\\u0027\u0027).append(text).append(\u0027\\\u0027\u0027).toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "name",
    "signature": "java.lang.String name(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (name \u003d\u003d null) {\r\n        return \"[null]\";\r\n    }\r\n    return apostrophed(name);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d ClassUtil.apostrophed(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtil#apostrophed(...1)",
        "body": "{\r\n    if (text \u003d\u003d null) {\r\n        return \"[null]\";\r\n    }\r\n    return new StringBuilder(text.length() + 2).append(\u0027\\\u0027\u0027).append(text).append(\u0027\\\u0027\u0027).toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "name",
    "signature": "java.lang.String name(com.fasterxml.jackson.databind.PropertyName)",
    "visibility": "public",
    "body": "{\r\n    if (name \u003d\u003d null) {\r\n        return \"[null]\";\r\n    }\r\n    // 26-Aug-2020, tatu: Should we consider namespace somehow?\r\n    return apostrophed(name.getSimpleName());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PropertyName\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getSimpleName()\n  $r2 \u003d ClassUtil.apostrophed($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtil#apostrophed(...1)",
        "body": "{\r\n    if (text \u003d\u003d null) {\r\n        return \"[null]\";\r\n    }\r\n    return new StringBuilder(text.length() + 2).append(\u0027\\\u0027\u0027).append(text).append(\u0027\\\u0027\u0027).toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "backticked",
    "signature": "java.lang.String backticked(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (text \u003d\u003d null) {\r\n        return \"[null]\";\r\n    }\r\n    return new StringBuilder(text.length() + 2).append(\u0027`\u0027).append(text).append(\u0027`\u0027).toString();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d StringBuilder\n  $i0 \u003d r0.length()\n  $i1 \u003d $i0 + 2\n  new StringBuilder($i1)\n  $r2 \u003d $r1.append(96)\n  $r3 \u003d $r2.append(r0)\n  $r4 \u003d $r3.append(96)\n  $r5 \u003d $r4.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "apostrophed",
    "signature": "java.lang.String apostrophed(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (text \u003d\u003d null) {\r\n        return \"[null]\";\r\n    }\r\n    return new StringBuilder(text.length() + 2).append(\u0027\\\u0027\u0027).append(text).append(\u0027\\\u0027\u0027).toString();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d StringBuilder\n  $i0 \u003d r0.length()\n  $i1 \u003d $i0 + 2\n  new StringBuilder($i1)\n  $r2 \u003d $r1.append(39)\n  $r3 \u003d $r2.append(r0)\n  $r4 \u003d $r3.append(39)\n  $r5 \u003d $r4.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "exceptionMessage",
    "signature": "java.lang.String exceptionMessage(java.lang.Throwable)",
    "visibility": "public",
    "body": "{\r\n    if (t instanceof JacksonException) {\r\n        return ((JacksonException) t).getOriginalMessage();\r\n    }\r\n    if (t instanceof InvocationTargetException \u0026\u0026 t.getCause() !\u003d null) {\r\n        return t.getCause().getMessage();\r\n    }\r\n    return t.getMessage();\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B5",
      "B3 : If($r2 \u003d\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Throwable\n  $z0 \u003d JacksonException\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d JacksonException) r0\n  $r6 \u003d $r5.getOriginalMessage()\n  return\n}",
      "B2 {\n  $z1 \u003d InvocationTargetException\n  if ($z1 \u003d\u003d false) goto B3 else B5\n}",
      "B3 {\n  $r2 \u003d r0.getCause()\n  if ($r2 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r3 \u003d r0.getCause()\n  $r4 \u003d $r3.getMessage()\n  return\n}",
      "B5 {\n  $r1 \u003d r0.getMessage()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "defaultValue",
    "signature": "java.lang.Object defaultValue(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (cls \u003d\u003d Integer.TYPE) {\r\n        return Integer.valueOf(0);\r\n    }\r\n    if (cls \u003d\u003d Long.TYPE) {\r\n        return Long.valueOf(0L);\r\n    }\r\n    if (cls \u003d\u003d Boolean.TYPE) {\r\n        return Boolean.FALSE;\r\n    }\r\n    if (cls \u003d\u003d Double.TYPE) {\r\n        return Double.valueOf(0.0);\r\n    }\r\n    if (cls \u003d\u003d Float.TYPE) {\r\n        return Float.valueOf(0.0f);\r\n    }\r\n    if (cls \u003d\u003d Byte.TYPE) {\r\n        return Byte.valueOf((byte) 0);\r\n    }\r\n    if (cls \u003d\u003d Short.TYPE) {\r\n        return Short.valueOf((short) 0);\r\n    }\r\n    if (cls \u003d\u003d Character.TYPE) {\r\n        return \u0027\\0\u0027;\r\n    }\r\n    throw new IllegalArgumentException(\"Class \" + cls.getName() + \" is not a primitive type\");\r\n}",
    "nodes": 17,
    "edges": 16,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d $r2) → B3 | else → B4",
      "B4 : If(r0 !\u003d $r3) → B5 | else → B6",
      "B6 : If(r0 !\u003d $r4) → B7 | else → B8",
      "B8 : If(r0 !\u003d $r5) → B9 | else → B10",
      "B10 : If(r0 !\u003d $r6) → B11 | else → B12",
      "B12 : If(r0 !\u003d $r7) → B13 | else → B14",
      "B14 : If(r0 !\u003d $r8) → B15 | else → B16"
    ],
    "blockList": [
      "B0 {\n  Class\n  $r1 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $r19 \u003d Integer.valueOf(0)\n  return\n}",
      "B2 {\n  $r2 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r2) goto B3 else B4\n}",
      "B3 {\n  $r18 \u003d Long.valueOf(0L)\n  return\n}",
      "B4 {\n  $r3 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r3) goto B5 else B6\n}",
      "B5 {\n  $r17 \u003d Boolean FALSE\u003e\n  return\n}",
      "B6 {\n  $r4 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r4) goto B7 else B8\n}",
      "B7 {\n  $r16 \u003d Double.valueOf(0.0)\n  return\n}",
      "B8 {\n  $r5 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r5) goto B9 else B10\n}",
      "B9 {\n  $r15 \u003d Float.valueOf(0.0F)\n  return\n}",
      "B10 {\n  $r6 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r6) goto B11 else B12\n}",
      "B11 {\n  $r14 \u003d Byte.valueOf(0)\n  return\n}",
      "B12 {\n  $r7 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r7) goto B13 else B14\n}",
      "B13 {\n  $r13 \u003d Short.valueOf(0)\n  return\n}",
      "B14 {\n  $r8 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r8) goto B15 else B16\n}",
      "B15 {\n  $r12 \u003d Character.valueOf(0)\n  return\n}",
      "B16 {\n  $r9 \u003d IllegalArgumentException\n  $r10 \u003d r0.getName()\n  $r11 \u003d dynInvoke makeConcatWithConstants($r10)\n  new IllegalArgumentException($r11)\n  throw $r9\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "wrapperType",
    "signature": "java.lang.Class wrapperType(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (primitiveType \u003d\u003d Integer.TYPE) {\r\n        return Integer.class;\r\n    }\r\n    if (primitiveType \u003d\u003d Long.TYPE) {\r\n        return Long.class;\r\n    }\r\n    if (primitiveType \u003d\u003d Boolean.TYPE) {\r\n        return Boolean.class;\r\n    }\r\n    if (primitiveType \u003d\u003d Double.TYPE) {\r\n        return Double.class;\r\n    }\r\n    if (primitiveType \u003d\u003d Float.TYPE) {\r\n        return Float.class;\r\n    }\r\n    if (primitiveType \u003d\u003d Byte.TYPE) {\r\n        return Byte.class;\r\n    }\r\n    if (primitiveType \u003d\u003d Short.TYPE) {\r\n        return Short.class;\r\n    }\r\n    if (primitiveType \u003d\u003d Character.TYPE) {\r\n        return Character.class;\r\n    }\r\n    throw new IllegalArgumentException(\"Class \" + primitiveType.getName() + \" is not a primitive type\");\r\n}",
    "nodes": 17,
    "edges": 16,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d $r2) → B3 | else → B4",
      "B4 : If(r0 !\u003d $r3) → B5 | else → B6",
      "B6 : If(r0 !\u003d $r4) → B7 | else → B8",
      "B8 : If(r0 !\u003d $r5) → B9 | else → B10",
      "B10 : If(r0 !\u003d $r6) → B11 | else → B12",
      "B12 : If(r0 !\u003d $r7) → B13 | else → B14",
      "B14 : If(r0 !\u003d $r8) → B15 | else → B16"
    ],
    "blockList": [
      "B0 {\n  Class\n  $r1 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r3) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r4 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r4) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $r5 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r5) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $r6 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r6) goto B11 else B12\n}",
      "B11 {\n  return\n}",
      "B12 {\n  $r7 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r7) goto B13 else B14\n}",
      "B13 {\n  return\n}",
      "B14 {\n  $r8 \u003d Class TYPE\u003e\n  if (r0 !\u003d $r8) goto B15 else B16\n}",
      "B15 {\n  return\n}",
      "B16 {\n  $r9 \u003d IllegalArgumentException\n  $r10 \u003d r0.getName()\n  $r11 \u003d dynInvoke makeConcatWithConstants($r10)\n  new IllegalArgumentException($r11)\n  throw $r9\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "primitiveType",
    "signature": "java.lang.Class primitiveType(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (type.isPrimitive()) {\r\n        return type;\r\n    }\r\n    if (type \u003d\u003d Integer.class) {\r\n        return Integer.TYPE;\r\n    }\r\n    if (type \u003d\u003d Long.class) {\r\n        return Long.TYPE;\r\n    }\r\n    if (type \u003d\u003d Boolean.class) {\r\n        return Boolean.TYPE;\r\n    }\r\n    if (type \u003d\u003d Double.class) {\r\n        return Double.TYPE;\r\n    }\r\n    if (type \u003d\u003d Float.class) {\r\n        return Float.TYPE;\r\n    }\r\n    if (type \u003d\u003d Byte.class) {\r\n        return Byte.TYPE;\r\n    }\r\n    if (type \u003d\u003d Short.class) {\r\n        return Short.TYPE;\r\n    }\r\n    if (type \u003d\u003d Character.class) {\r\n        return Character.TYPE;\r\n    }\r\n    return null;\r\n}",
    "nodes": 19,
    "edges": 18,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r0 !\u003d class \"Ljava/lang/Integer;\") → B3 | else → B4",
      "B4 : If(r0 !\u003d class \"Ljava/lang/Long;\") → B5 | else → B6",
      "B6 : If(r0 !\u003d class \"Ljava/lang/Boolean;\") → B7 | else → B8",
      "B8 : If(r0 !\u003d class \"Ljava/lang/Double;\") → B9 | else → B10",
      "B10 : If(r0 !\u003d class \"Ljava/lang/Float;\") → B11 | else → B12",
      "B12 : If(r0 !\u003d class \"Ljava/lang/Byte;\") → B13 | else → B14",
      "B14 : If(r0 !\u003d class \"Ljava/lang/Short;\") → B15 | else → B16",
      "B16 : If(r0 !\u003d class \"Ljava/lang/Character;\") → B17 | else → B18"
    ],
    "blockList": [
      "B0 {\n  Class\n  $z0 \u003d r0.isPrimitive()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d class \"Ljava/lang/Integer;\") goto B3 else B4\n}",
      "B3 {\n  $r8 \u003d Class TYPE\u003e\n  return\n}",
      "B4 {\n  if (r0 !\u003d class \"Ljava/lang/Long;\") goto B5 else B6\n}",
      "B5 {\n  $r7 \u003d Class TYPE\u003e\n  return\n}",
      "B6 {\n  if (r0 !\u003d class \"Ljava/lang/Boolean;\") goto B7 else B8\n}",
      "B7 {\n  $r6 \u003d Class TYPE\u003e\n  return\n}",
      "B8 {\n  if (r0 !\u003d class \"Ljava/lang/Double;\") goto B9 else B10\n}",
      "B9 {\n  $r5 \u003d Class TYPE\u003e\n  return\n}",
      "B10 {\n  if (r0 !\u003d class \"Ljava/lang/Float;\") goto B11 else B12\n}",
      "B11 {\n  $r4 \u003d Class TYPE\u003e\n  return\n}",
      "B12 {\n  if (r0 !\u003d class \"Ljava/lang/Byte;\") goto B13 else B14\n}",
      "B13 {\n  $r3 \u003d Class TYPE\u003e\n  return\n}",
      "B14 {\n  if (r0 !\u003d class \"Ljava/lang/Short;\") goto B15 else B16\n}",
      "B15 {\n  $r2 \u003d Class TYPE\u003e\n  return\n}",
      "B16 {\n  if (r0 !\u003d class \"Ljava/lang/Character;\") goto B17 else B18\n}",
      "B17 {\n  $r1 \u003d Class TYPE\u003e\n  return\n}",
      "B18 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "checkAndFixAccess",
    "signature": "void checkAndFixAccess(java.lang.reflect.Member,boolean)",
    "visibility": "public",
    "body": "{\r\n    // We know all members are also accessible objects...\r\n    AccessibleObject ao \u003d (AccessibleObject) member;\r\n    // 14-Jan-2009, tatu: It seems safe and potentially beneficial to\r\n    //   always to make it accessible (latter because it will force\r\n    //   skipping checks we have no use for...), so let\u0027s always call it.\r\n    try {\r\n        // 15-Apr-2021, tatu: With JDK 14+ we will be hitting access limitations\r\n        //    esp. wrt JDK types so let\u0027s change a bit\r\n        final Class\u003c?\u003e declaringClass \u003d member.getDeclaringClass();\r\n        boolean isPublic \u003d Modifier.isPublic(member.getModifiers()) \u0026\u0026 Modifier.isPublic(declaringClass.getModifiers());\r\n        if (!isPublic || (evenIfAlreadyPublic \u0026\u0026 !isJDKClass(declaringClass))) {\r\n            ao.setAccessible(true);\r\n        }\r\n    } catch (SecurityException se) {\r\n        // 17-Apr-2009, tatu: This can fail on platforms like\r\n        // Google App Engine); so let\u0027s only fail if we really needed it...\r\n        if (!ao.isAccessible()) {\r\n            Class\u003c?\u003e declClass \u003d member.getDeclaringClass();\r\n            throw new IllegalArgumentException(\"Cannot access \" + member + \" (from class \" + declClass.getName() + \"; failed to set access: \" + se.getMessage());\r\n        }\r\n        // 14-Apr-2021, tatu: [databind#3118] Java 9/JPMS causes new fails...\r\n        //    But while our baseline is Java 8, must check name\r\n    } catch (RuntimeException se) {\r\n        if (\"InaccessibleObjectException\".equals(se.getClass().getSimpleName())) {\r\n            throw new IllegalArgumentException(String.format(\"Failed to call `setAccess()` on %s \u0027%s\u0027 (of class %s) due to `%s`, problem: %s\", member.getClass().getSimpleName(), member.getName(), nameOf(member.getDeclaringClass()), se.getClass().getName(), se.getMessage()), se);\r\n        }\r\n        throw se;\r\n    }\r\n}",
    "nodes": 16,
    "edges": 19,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($z3 \u003d\u003d false) → B2 | else → B3",
      "B4 : If($z6 \u003d\u003d false) → B5 | else → B7",
      "B5 : If(z1 \u003d\u003d false) → B6 | else → B8",
      "B6 : If($z2 !\u003d 0) → B7 | else → B8",
      "B9 : If($z5 !\u003d 0) → B10 | else → B11",
      "B12 : If($z4 \u003d\u003d false) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  Member\n  z1 :\u003d @parameter1: boolean\n  r1 \u003d AccessibleObject) r0\n  r23 \u003d r0.getDeclaringClass()\n  $i0 \u003d r0.getModifiers()\n  $z0 \u003d Modifier.isPublic($i0)\n  if ($z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $i1 \u003d r23.getModifiers()\n  $z3 \u003d Modifier.isPublic($i1)\n  if ($z3 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z6 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z6 \u003d 0\n}",
      "B4 {\n  if ($z6 \u003d\u003d false) goto B5 else B7\n}",
      "B5 {\n  if (z1 \u003d\u003d false) goto B6 else B8\n}",
      "B6 {\n  $z2 \u003d ClassUtil.isJDKClass(r23)\n  if ($z2 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  r1.setAccessible(1)\n}",
      "B8 {\n  goto B15\n}",
      "B9 {\n  $r17 :\u003d @caughtexception\n  $z5 \u003d r1.isAccessible()\n  if ($z5 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  r24 \u003d r0.getDeclaringClass()\n  $r18 \u003d IllegalArgumentException\n  $r21 \u003d String.valueOf(r0)\n  $r20 \u003d r24.getName()\n  $r19 \u003d $r17.getMessage()\n  $r22 \u003d dynInvoke makeConcatWithConstants($r21, $r20, $r19)\n  new IllegalArgumentException($r22)\n  throw $r18\n}",
      "B11 {\n  goto B15\n}",
      "B12 {\n  $r2 :\u003d @caughtexception\n  $r5 \u003d \"InaccessibleObjectException\"\n  $r3 \u003d $r2.getClass()\n  $r4 \u003d $r3.getSimpleName()\n  $z4 \u003d $r5.equals($r4)\n  if ($z4 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  $r6 \u003d IllegalArgumentException\n  $r7 \u003d Object)[5]\n  $r8 \u003d r0.getClass()\n  $r9 \u003d $r8.getSimpleName()\n  $r7[0] \u003d $r9\n  $r10 \u003d r0.getName()\n  $r7[1] \u003d $r10\n  $r11 \u003d r0.getDeclaringClass()\n  $r12 \u003d ClassUtil.nameOf($r11)\n  $r7[2] \u003d $r12\n  $r13 \u003d $r2.getClass()\n  $r14 \u003d $r13.getName()\n  $r7[3] \u003d $r14\n  $r15 \u003d $r2.getMessage()\n  $r7[4] \u003d $r15\n  $r16 \u003d String.format(\"Failed to call `setAccess()` on %s \\\u0027%s\\\u0027 (of class %s) due to `%s`, problem: %s\", $r7)\n  new IllegalArgumentException($r16, $r2)\n  throw $r6\n}",
      "B14 {\n  throw $r2\n}",
      "B15 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B15",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtil#nameOf(...1)",
        "body": "{\r\n    if (cls \u003d\u003d null) {\r\n        return \"[null]\";\r\n    }\r\n    int index \u003d 0;\r\n    while (cls.isArray()) {\r\n        ++index;\r\n        cls \u003d cls.getComponentType();\r\n    }\r\n    String base \u003d cls.isPrimitive() ? cls.getSimpleName() : cls.getName();\r\n    if (index \u003e 0) {\r\n        StringBuilder sb \u003d new StringBuilder(base);\r\n        do {\r\n            sb.append(\"[]\");\r\n        } while (--index \u003e 0);\r\n        base \u003d sb.toString();\r\n    }\r\n    return backticked(base);\r\n}"
      },
      {
        "name": "ClassUtil#isJDKClass(...1)",
        "body": "{\r\n    final String clsName \u003d rawType.getName();\r\n    return clsName.startsWith(\"java.\") || clsName.startsWith(\"javax.\") || clsName.startsWith(\"sun.\");\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "findEnumType",
    "signature": "java.lang.Class findEnumType(java.util.EnumSet)",
    "visibility": "public",
    "body": "{\r\n    // First things first: if not empty, easy to determine\r\n    if (!s.isEmpty()) {\r\n        return findEnumType(s.iterator().next());\r\n    }\r\n    // Otherwise need to locate using an internal field\r\n    return EnumTypeLocator.instance.enumTypeFor(s);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  EnumSet\n  $z0 \u003d r0.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.iterator()\n  $r4 \u003d $r3.next()\n  $r5 \u003d Enum) $r4\n  $r6 \u003d ClassUtil.findEnumType($r5)\n  return\n}",
      "B2 {\n  $r1 \u003d ClassUtil$EnumTypeLocator instance\u003e\n  $r2 \u003d $r1.enumTypeFor(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtil#findEnumType(...1)",
        "body": "{\r\n    // First things first: if not empty, easy to determine\r\n    if (!s.isEmpty()) {\r\n        return findEnumType(s.iterator().next());\r\n    }\r\n    // Otherwise need to locate using an internal field\r\n    return EnumTypeLocator.instance.enumTypeFor(s);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "findEnumType",
    "signature": "java.lang.Class findEnumType(java.util.EnumMap)",
    "visibility": "public",
    "body": "{\r\n    if (!m.isEmpty()) {\r\n        return findEnumType(m.keySet().iterator().next());\r\n    }\r\n    // Otherwise need to locate using an internal field\r\n    return EnumTypeLocator.instance.enumTypeFor(m);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  EnumMap\n  $z0 \u003d r0.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.keySet()\n  $r4 \u003d $r3.iterator()\n  $r5 \u003d $r4.next()\n  $r6 \u003d Enum) $r5\n  $r7 \u003d ClassUtil.findEnumType($r6)\n  return\n}",
      "B2 {\n  $r1 \u003d ClassUtil$EnumTypeLocator instance\u003e\n  $r2 \u003d $r1.enumTypeFor(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtil#findEnumType(...1)",
        "body": "{\r\n    // First things first: if not empty, easy to determine\r\n    if (!s.isEmpty()) {\r\n        return findEnumType(s.iterator().next());\r\n    }\r\n    // Otherwise need to locate using an internal field\r\n    return EnumTypeLocator.instance.enumTypeFor(s);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "findEnumType",
    "signature": "java.lang.Class findEnumType(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    // enums with \"body\" are sub-classes of the formal type\r\n    if (cls.getSuperclass() !\u003d Enum.class) {\r\n        cls \u003d cls.getSuperclass();\r\n    }\r\n    return (Class\u003c? extends Enum\u003c?\u003e\u003e) cls;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r0 \u003d\u003d class \"Ljava/lang/Enum;\") → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  $r0 \u003d r1.getSuperclass()\n  if ($r0 \u003d\u003d class \"Ljava/lang/Enum;\") goto B1 else B2\n}",
      "B1 {\n  r1 \u003d r1.getSuperclass()\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "findFirstAnnotatedEnumValue",
    "signature": "java.lang.Enum findFirstAnnotatedEnumValue(java.lang.Class,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    Field[] fields \u003d enumClass.getDeclaredFields();\r\n    for (Field field : fields) {\r\n        if (field.isEnumConstant()) {\r\n            Annotation defaultValueAnnotation \u003d field.getAnnotation(annotationClass);\r\n            if (defaultValueAnnotation !\u003d null) {\r\n                final String name \u003d field.getName();\r\n                for (Enum\u003c?\u003e enumValue : enumClass.getEnumConstants()) {\r\n                    if (name.equals(enumValue.name())) {\r\n                        return enumValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 11,
    "edges": 14,
    "cc": 5,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d i0) → B2 | else → B10",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B9",
      "B3 : If(r4 \u003d\u003d null) → B4 | else → B9",
      "B5 : If(i3 \u003e\u003d i1) → B6 | else → B9",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  Class\n  Class\n  r1 \u003d r0.getDeclaredFields()\n  i0 \u003d lengthof r1\n  i2 \u003d 0\n}",
      "B1 {\n  if (i2 \u003e\u003d i0) goto B2 else B10\n}",
      "B2 {\n  r2 \u003d r1[i2]\n  $z0 \u003d r2.isEnumConstant()\n  if ($z0 \u003d\u003d false) goto B3 else B9\n}",
      "B3 {\n  r4 \u003d r2.getAnnotation(r3)\n  if (r4 \u003d\u003d null) goto B4 else B9\n}",
      "B4 {\n  r5 \u003d r2.getName()\n  $r6 \u003d r0.getEnumConstants()\n  r7 \u003d Enum[]) $r6\n  i1 \u003d lengthof r7\n  i3 \u003d 0\n}",
      "B5 {\n  if (i3 \u003e\u003d i1) goto B6 else B9\n}",
      "B6 {\n  r8 \u003d r7[i3]\n  $r9 \u003d r8.name()\n  $z1 \u003d r5.equals($r9)\n  if ($z1 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  i3 \u003d i3 + 1\n  goto B5\n}",
      "B9 {\n  i2 \u003d i2 + 1\n  goto B1\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B10",
      "B2 --\u003e B3",
      "B2 --\u003e B9",
      "B3 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B5",
      "B9 --\u003e B1",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "isJacksonStdImpl",
    "signature": "boolean isJacksonStdImpl(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return (impl \u003d\u003d null) || isJacksonStdImpl(impl.getClass());\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d r0.getClass()\n  $z0 \u003d ClassUtil.isJacksonStdImpl($r1)\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtil#isJacksonStdImpl(...1)",
        "body": "{\r\n    return (impl \u003d\u003d null) || isJacksonStdImpl(impl.getClass());\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "isJacksonStdImpl",
    "signature": "boolean isJacksonStdImpl(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return (implClass.getAnnotation(JacksonStdImpl.class) !\u003d null);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  $r1 \u003d r0.getAnnotation(class \"Lcom/fasterxml/jackson/databind/annotation/JacksonStdImpl;\")\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "isJDKClass",
    "signature": "boolean isJDKClass(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    final String clsName \u003d rawType.getName();\r\n    return clsName.startsWith(\"java.\") || clsName.startsWith(\"javax.\") || clsName.startsWith(\"sun.\");\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3",
      "B2 : If($z2 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Class\n  r1 \u003d r0.getName()\n  $z0 \u003d r1.startsWith(\"java.\")\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $z1 \u003d r1.startsWith(\"javax.\")\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d r1.startsWith(\"sun.\")\n  if ($z2 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $z3 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z3 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "isJDK17OrAbove",
    "signature": "boolean isJDK17OrAbove()",
    "visibility": "public",
    "body": "{\r\n    try {\r\n        return getJDKMajorVersion() \u003e\u003d 17;\r\n    } catch (Throwable t) {\r\n        ExceptionUtil.rethrowIfFatal(t);\r\n        System.err.println(\"Failed to determine JDK major version, assuming pre-JDK-17; problem: \" + t);\r\n        return false;\r\n    }\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 \u003c 17) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  $i0 \u003d ClassUtil.getJDKMajorVersion()\n  if ($i0 \u003c 17) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r0 :\u003d @caughtexception\n  ExceptionUtil.rethrowIfFatal($r0)\n  $r1 \u003d PrintStream err\u003e\n  $r2 \u003d String.valueOf($r0)\n  $r3 \u003d dynInvoke makeConcatWithConstants($r2)\n  $r1.println($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtil#getJDKMajorVersion(...0)",
        "body": "{\r\n    String version;\r\n    try {\r\n        version \u003d System.getProperty(\"java.version\");\r\n    } catch (SecurityException e) {\r\n        throw new IllegalStateException(\"Could not access \u0027java.version\u0027: cannot determine JDK major version\");\r\n    }\r\n    if (version.startsWith(\"1.\")) {\r\n        // 25-Nov-2022, tatu: We\u0027ll consider JDK 8 to be the baseline since\r\n        //    Jackson 2.15+ only runs on 8 and above\r\n        return 8;\r\n    }\r\n    int dotIndex \u003d version.indexOf(\".\");\r\n    String cleaned \u003d (dotIndex \u003c 0) ? version : version.substring(0, dotIndex);\r\n    try {\r\n        return Integer.parseInt(cleaned);\r\n    } catch (NumberFormatException e) {\r\n        throw new IllegalStateException(\"Invalid JDK version String \u0027\" + version + \"\u0027 cannot determine JDK major version\");\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "isNonStaticInnerClass",
    "signature": "boolean isNonStaticInnerClass(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return !Modifier.isStatic(cls.getModifiers()) \u0026\u0026 (getEnclosingClass(cls) !\u003d null);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If($r1 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Class\n  $i0 \u003d r0.getModifiers()\n  $z0 \u003d Modifier.isStatic($i0)\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $r1 \u003d ClassUtil.getEnclosingClass(r0)\n  if ($r1 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtil#getEnclosingClass(...1)",
        "body": "{\r\n    // Caching does not seem worthwhile, as per profiling\r\n    return isObjectOrPrimitive(cls) ? null : cls.getEnclosingClass();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "getPackageName",
    "signature": "java.lang.String getPackageName(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    Package pkg \u003d cls.getPackage();\r\n    return (pkg \u003d\u003d null) ? null : pkg.getName();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  r1 \u003d r0.getPackage()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r1.getName()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "hasEnclosingMethod",
    "signature": "boolean hasEnclosingMethod(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return !isObjectOrPrimitive(cls) \u0026\u0026 (cls.getEnclosingMethod() !\u003d null);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If($r1 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Class\n  $z0 \u003d ClassUtil.isObjectOrPrimitive(r0)\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $r1 \u003d r0.getEnclosingMethod()\n  if ($r1 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtil#isObjectOrPrimitive(...1)",
        "body": "{\r\n    return (cls \u003d\u003d CLS_OBJECT) || cls.isPrimitive();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "findClassAnnotations",
    "signature": "java.lang.\u0027annotation\u0027.Annotation[] findClassAnnotations(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (isObjectOrPrimitive(cls)) {\r\n        return NO_ANNOTATIONS;\r\n    }\r\n    return cls.getDeclaredAnnotations();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  $z0 \u003d ClassUtil.isObjectOrPrimitive(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Annotation[] NO_ANNOTATIONS\u003e\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getDeclaredAnnotations()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtil#isObjectOrPrimitive(...1)",
        "body": "{\r\n    return (cls \u003d\u003d CLS_OBJECT) || cls.isPrimitive();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "getConstructors",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil$Ctor[] getConstructors(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    // Note: can NOT skip abstract classes as they may be used with mix-ins\r\n    // and for regular use shouldn\u0027t really matter.\r\n    if (cls.isInterface() || isObjectOrPrimitive(cls)) {\r\n        return NO_CTORS;\r\n    }\r\n    Constructor\u003c?\u003e[] rawCtors \u003d cls.getDeclaredConstructors();\r\n    final int len \u003d rawCtors.length;\r\n    Ctor[] result \u003d new Ctor[len];\r\n    for (int i \u003d 0; i \u003c len; ++i) {\r\n        result[i] \u003d new Ctor(rawCtors[i]);\r\n    }\r\n    return result;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i1 \u003e\u003d i0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Class\n  $z0 \u003d r0.isInterface()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d ClassUtil.isObjectOrPrimitive(r0)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d ClassUtil$Ctor[] NO_CTORS\u003e\n  return\n}",
      "B3 {\n  r2 \u003d r0.getDeclaredConstructors()\n  i0 \u003d lengthof r2\n  r3 \u003d ClassUtil$Ctor)[i0]\n  i1 \u003d 0\n}",
      "B4 {\n  if (i1 \u003e\u003d i0) goto B5 else B6\n}",
      "B5 {\n  $r4 \u003d ClassUtil$Ctor\n  $r5 \u003d r2[i1]\n  new ClassUtil$Ctor($r5)\n  r3[i1] \u003d $r4\n  i1 \u003d i1 + 1\n  goto B4\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtil#isObjectOrPrimitive(...1)",
        "body": "{\r\n    return (cls \u003d\u003d CLS_OBJECT) || cls.isPrimitive();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "getDeclaringClass",
    "signature": "java.lang.Class getDeclaringClass(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return isObjectOrPrimitive(cls) ? null : cls.getDeclaringClass();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  $z0 \u003d ClassUtil.isObjectOrPrimitive(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d null\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0.getDeclaringClass()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtil#isObjectOrPrimitive(...1)",
        "body": "{\r\n    return (cls \u003d\u003d CLS_OBJECT) || cls.isPrimitive();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ClassUtil",
    "methodName": "getEnclosingClass",
    "signature": "java.lang.Class getEnclosingClass(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    // Caching does not seem worthwhile, as per profiling\r\n    return isObjectOrPrimitive(cls) ? null : cls.getEnclosingClass();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  $z0 \u003d ClassUtil.isObjectOrPrimitive(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d null\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0.getEnclosingClass()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtil#isObjectOrPrimitive(...1)",
        "body": "{\r\n    return (cls \u003d\u003d CLS_OBJECT) || cls.isPrimitive();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.CompactStringObjectMap",
    "methodName": "construct",
    "signature": "com.fasterxml.jackson.databind.util.CompactStringObjectMap construct(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    if (all.isEmpty()) {\r\n        // can this happen?\r\n        return EMPTY;\r\n    }\r\n    // First: calculate size of primary hash area\r\n    final int size \u003d findSize(all.size());\r\n    final int mask \u003d size - 1;\r\n    // and allocate enough to contain primary/secondary, expand for spillovers as need be\r\n    int alloc \u003d (size + (size \u003e\u003e 1)) * 2;\r\n    Object[] hashArea \u003d new Object[alloc];\r\n    int spillCount \u003d 0;\r\n    for (Map.Entry\u003cString, T\u003e entry : all.entrySet()) {\r\n        String key \u003d entry.getKey();\r\n        // 09-Sep-2019, tatu: [databind#2309] skip `null`s if any included\r\n        if (key \u003d\u003d null) {\r\n            continue;\r\n        }\r\n        int slot \u003d key.hashCode() \u0026 mask;\r\n        int ix \u003d slot + slot;\r\n        // primary slot not free?\r\n        if (hashArea[ix] !\u003d null) {\r\n            // secondary?\r\n            ix \u003d (size + (slot \u003e\u003e 1)) \u003c\u003c 1;\r\n            if (hashArea[ix] !\u003d null) {\r\n                // ok, spill over.\r\n                ix \u003d ((size + (size \u003e\u003e 1)) \u003c\u003c 1) + spillCount;\r\n                spillCount +\u003d 2;\r\n                if (ix \u003e\u003d hashArea.length) {\r\n                    hashArea \u003d Arrays.copyOf(hashArea, hashArea.length + 4);\r\n                }\r\n            }\r\n        }\r\n        hashArea[ix] \u003d key;\r\n        hashArea[ix + 1] \u003d entry.getValue();\r\n    }\r\n    return new CompactStringObjectMap(mask, spillCount, hashArea);\r\n}",
    "nodes": 12,
    "edges": 16,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B11",
      "B4 : If(r7 !\u003d null) → B5 | else → B6",
      "B6 : If($r8 \u003d\u003d null) → B7 | else → B10",
      "B7 : If($r9 \u003d\u003d null) → B8 | else → B10",
      "B8 : If(i17 \u003c $i13) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  Map\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d CompactStringObjectMap EMPTY\u003e\n  return\n}",
      "B2 {\n  $i0 \u003d r0.size()\n  i1 \u003d CompactStringObjectMap.findSize($i0)\n  i2 \u003d i1 - 1\n  $i3 \u003d i1 \u003e\u003e 1\n  $i4 \u003d i1 + $i3\n  i5 \u003d $i4 * 2\n  r11 \u003d Object)[i5]\n  i16 \u003d 0\n  $r1 \u003d r0.entrySet()\n  r2 \u003d $r1.iterator()\n}",
      "B3 {\n  $z1 \u003d r2.hasNext()\n  if ($z1 \u003d\u003d false) goto B4 else B11\n}",
      "B4 {\n  $r4 \u003d r2.next()\n  r5 \u003d Map$Entry) $r4\n  $r6 \u003d r5.getKey()\n  r7 \u003d String) $r6\n  if (r7 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  goto B3\n}",
      "B6 {\n  $i6 \u003d r7.hashCode()\n  i7 \u003d $i6 \u0026 i2\n  i17 \u003d i7 + i7\n  $r8 \u003d r11[i17]\n  if ($r8 \u003d\u003d null) goto B7 else B10\n}",
      "B7 {\n  $i8 \u003d i7 \u003e\u003e 1\n  $i9 \u003d i1 + $i8\n  i17 \u003d $i9 \u003c\u003c 1\n  $r9 \u003d r11[i17]\n  if ($r9 \u003d\u003d null) goto B8 else B10\n}",
      "B8 {\n  $i10 \u003d i1 \u003e\u003e 1\n  $i11 \u003d i1 + $i10\n  $i12 \u003d $i11 \u003c\u003c 1\n  i17 \u003d $i12 + i16\n  i16 \u003d i16 + 2\n  $i13 \u003d lengthof r11\n  if (i17 \u003c $i13) goto B9 else B10\n}",
      "B9 {\n  $i14 \u003d lengthof r11\n  $i15 \u003d $i14 + 4\n  r11 \u003d Arrays.copyOf(r11, $i15)\n}",
      "B10 {\n  r11[i17] \u003d r7\n  $i18 \u003d i17 + 1\n  $r12 \u003d r5.getValue()\n  r11[$i18] \u003d $r12\n  goto B3\n}",
      "B11 {\n  $r3 \u003d CompactStringObjectMap\n  new CompactStringObjectMap(i2, i16, r11)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B11",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B3",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B3",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CompactStringObjectMap#findSize(...1)",
        "body": "{\r\n    if (size \u003c\u003d 5) {\r\n        return 8;\r\n    }\r\n    if (size \u003c\u003d 12) {\r\n        return 16;\r\n    }\r\n    // at most 80% full\r\n    int needed \u003d size + (size \u003e\u003e 2);\r\n    int result \u003d 32;\r\n    while (result \u003c needed) {\r\n        result +\u003d result;\r\n    }\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.CompactStringObjectMap",
    "methodName": "find",
    "signature": "java.lang.Object find(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    int slot \u003d key.hashCode() \u0026 _hashMask;\r\n    int ix \u003d (slot \u003c\u003c 1);\r\n    Object match \u003d _hashArea[ix];\r\n    if ((match \u003d\u003d key) || key.equals(match)) {\r\n        return _hashArea[ix + 1];\r\n    }\r\n    return _find2(key, slot, match);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d r0) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CompactStringObjectMap\n  String\n  $i1 \u003d r0.hashCode()\n  $i0 \u003d CompactStringObjectMap: int _hashMask\u003e\n  i2 \u003d $i1 \u0026 $i0\n  i3 \u003d i2 \u003c\u003c 1\n  $r2 \u003d Object[] _hashArea\u003e\n  r3 \u003d $r2[i3]\n  if (r3 \u003d\u003d r0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r0.equals(r3)\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d Object[] _hashArea\u003e\n  $i4 \u003d i3 + 1\n  $r5 \u003d $r4[$i4]\n  return\n}",
      "B3 {\n  $r6 \u003d r1._find2(r0, i2, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CompactStringObjectMap#_find2(...3)",
        "body": "{\r\n    if (match \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    int hashSize \u003d _hashMask + 1;\r\n    int ix \u003d (hashSize + (slot \u003e\u003e 1)) \u003c\u003c 1;\r\n    match \u003d _hashArea[ix];\r\n    if (key.equals(match)) {\r\n        return _hashArea[ix + 1];\r\n    }\r\n    if (match !\u003d null) {\r\n        // _findFromSpill(...)\r\n        int i \u003d (hashSize + (hashSize \u003e\u003e 1)) \u003c\u003c 1;\r\n        for (int end \u003d i + _spillCount; i \u003c end; i +\u003d 2) {\r\n            match \u003d _hashArea[i];\r\n            if ((match \u003d\u003d key) || key.equals(match)) {\r\n                return _hashArea[i + 1];\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.CompactStringObjectMap",
    "methodName": "findCaseInsensitive",
    "signature": "java.lang.Object findCaseInsensitive(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d 0, end \u003d _hashArea.length; i \u003c end; i +\u003d 2) {\r\n        Object k2 \u003d _hashArea[i];\r\n        if (k2 !\u003d null) {\r\n            String s \u003d (String) k2;\r\n            if (s.equalsIgnoreCase(key)) {\r\n                // lgtm [java/index-out-of-bounds]\r\n                return _hashArea[i + 1];\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d i0) → B2 | else → B6",
      "B2 : If(r3 \u003d\u003d null) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  CompactStringObjectMap\n  String\n  i2 \u003d 0\n  $r1 \u003d Object[] _hashArea\u003e\n  i0 \u003d lengthof $r1\n}",
      "B1 {\n  if (i2 \u003e\u003d i0) goto B2 else B6\n}",
      "B2 {\n  $r2 \u003d Object[] _hashArea\u003e\n  r3 \u003d $r2[i2]\n  if (r3 \u003d\u003d null) goto B3 else B5\n}",
      "B3 {\n  r4 \u003d String) r3\n  $z0 \u003d r4.equalsIgnoreCase(r5)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r6 \u003d Object[] _hashArea\u003e\n  $i1 \u003d i2 + 1\n  $r7 \u003d $r6[$i1]\n  return\n}",
      "B5 {\n  i2 \u003d i2 + 2\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.CompactStringObjectMap",
    "methodName": "keys",
    "signature": "java.util.List keys()",
    "visibility": "public",
    "body": "{\r\n    final int end \u003d _hashArea.length;\r\n    List\u003cString\u003e keys \u003d new ArrayList\u003cString\u003e(end \u003e\u003e 2);\r\n    for (int i \u003d 0; i \u003c end; i +\u003d 2) {\r\n        Object key \u003d _hashArea[i];\r\n        if (key !\u003d null) {\r\n            keys.add((String) key);\r\n        }\r\n    }\r\n    return keys;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d i0) → B2 | else → B5",
      "B2 : If(r4 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CompactStringObjectMap\n  $r1 \u003d Object[] _hashArea\u003e\n  i0 \u003d lengthof $r1\n  $r2 \u003d ArrayList\n  $i1 \u003d i0 \u003e\u003e 2\n  new ArrayList($i1)\n  i2 \u003d 0\n}",
      "B1 {\n  if (i2 \u003e\u003d i0) goto B2 else B5\n}",
      "B2 {\n  $r3 \u003d Object[] _hashArea\u003e\n  r4 \u003d $r3[i2]\n  if (r4 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d String) r4\n  $r2.add($r5)\n}",
      "B4 {\n  i2 \u003d i2 + 2\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.EnumResolver",
    "methodName": "constructFor",
    "signature": "com.fasterxml.jackson.databind.util.EnumResolver constructFor(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    // prepare data\r\n    final AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\r\n    final boolean isIgnoreCase \u003d config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\r\n    final Class\u003c?\u003e enumCls0 \u003d annotatedClass.getRawType();\r\n    final Class\u003cEnum\u003c?\u003e\u003e enumCls \u003d _enumClass(enumCls0);\r\n    final Enum\u003c?\u003e[] enumConstants \u003d _enumConstants(enumCls0);\r\n    // introspect\r\n    String[] names \u003d ai.findEnumValues(config, annotatedClass, enumConstants, new String[enumConstants.length]);\r\n    final String[][] allAliases \u003d new String[names.length][];\r\n    ai.findEnumAliases(config, annotatedClass, enumConstants, allAliases);\r\n    // finally, build\r\n    HashMap\u003cString, Enum\u003c?\u003e\u003e map \u003d new HashMap\u003cString, Enum\u003c?\u003e\u003e();\r\n    for (int i \u003d 0, len \u003d enumConstants.length; i \u003c len; ++i) {\r\n        final Enum\u003c?\u003e enumValue \u003d enumConstants[i];\r\n        String name \u003d names[i];\r\n        if (name \u003d\u003d null) {\r\n            name \u003d enumValue.name();\r\n        }\r\n        map.put(name, enumValue);\r\n        String[] aliases \u003d allAliases[i];\r\n        if (aliases !\u003d null) {\r\n            for (String alias : aliases) {\r\n                // Avoid overriding any primary names\r\n                map.putIfAbsent(alias, enumValue);\r\n            }\r\n        }\r\n    }\r\n    return new EnumResolver(enumCls, enumConstants, map, _enumDefault(ai, annotatedClass, enumConstants), isIgnoreCase, false);\r\n}",
    "nodes": 10,
    "edges": 13,
    "cc": 5,
    "flowSummary": [
      "B1 : If(i4 \u003e\u003d i2) → B2 | else → B9",
      "B2 : If(r16 !\u003d null) → B3 | else → B4",
      "B4 : If($r15 \u003d\u003d null) → B5 | else → B8",
      "B6 : If(i5 \u003e\u003d i3) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  AnnotatedClass\n  r1 \u003d r0.getAnnotationIntrospector()\n  $r2 \u003d MapperFeature ACCEPT_CASE_INSENSITIVE_ENUMS\u003e\n  z0 \u003d r0.isEnabled($r2)\n  r4 \u003d r3.getRawType()\n  r5 \u003d EnumResolver._enumClass(r4)\n  r6 \u003d EnumResolver._enumConstants(r4)\n  $i0 \u003d lengthof r6\n  $r7 \u003d String)[$i0]\n  r8 \u003d r1.findEnumValues(r0, r3, r6, $r7)\n  $i1 \u003d lengthof r8\n  r9 \u003d String[])[$i1]\n  r1.findEnumAliases(r0, r3, r6, r9)\n  $r10 \u003d HashMap\n  new HashMap()\n  i4 \u003d 0\n  i2 \u003d lengthof r6\n}",
      "B1 {\n  if (i4 \u003e\u003d i2) goto B2 else B9\n}",
      "B2 {\n  r13 \u003d r6[i4]\n  r16 \u003d r8[i4]\n  if (r16 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  r16 \u003d r13.name()\n}",
      "B4 {\n  $r10.put(r16, r13)\n  $r15 \u003d r9[i4]\n  if ($r15 \u003d\u003d null) goto B5 else B8\n}",
      "B5 {\n  i3 \u003d lengthof $r15\n  i5 \u003d 0\n}",
      "B6 {\n  if (i5 \u003e\u003d i3) goto B7 else B8\n}",
      "B7 {\n  r14 \u003d $r15[i5]\n  $r10.putIfAbsent(r14, r13)\n  i5 \u003d i5 + 1\n  goto B6\n}",
      "B8 {\n  i4 \u003d i4 + 1\n  goto B1\n}",
      "B9 {\n  $r11 \u003d EnumResolver\n  $r12 \u003d EnumResolver._enumDefault(r1, r3, r6)\n  new EnumResolver(r5, r6, $r10, $r12, z0, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B9",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B6",
      "B8 --\u003e B1",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumResolver#_enumConstants(...1)",
        "body": "{\r\n    final Enum\u003c?\u003e[] enumValues \u003d _enumClass(enumCls).getEnumConstants();\r\n    if (enumValues \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"No enum constants for class \" + enumCls.getName());\r\n    }\r\n    return enumValues;\r\n}"
      },
      {
        "name": "EnumResolver#_enumDefault(...3)",
        "body": "{\r\n    return (intr !\u003d null) ? intr.findDefaultEnumValue(annotatedClass, enums) : null;\r\n}"
      },
      {
        "name": "EnumResolver#_enumClass(...1)",
        "body": "{\r\n    return (Class\u003cEnum\u003c?\u003e\u003e) enumCls0;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.EnumResolver",
    "methodName": "constructFor",
    "signature": "com.fasterxml.jackson.databind.util.EnumResolver constructFor(com.fasterxml.jackson.databind.DeserializationConfig,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    final AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\r\n    final boolean isIgnoreCase \u003d config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\r\n    final Class\u003cEnum\u003c?\u003e\u003e enumCls \u003d _enumClass(enumCls0);\r\n    final Enum\u003c?\u003e[] enumConstants \u003d _enumConstants(enumCls0);\r\n    String[] names \u003d ai.findEnumValues(enumCls, enumConstants, new String[enumConstants.length]);\r\n    final String[][] allAliases \u003d new String[names.length][];\r\n    ai.findEnumAliases(enumCls, enumConstants, allAliases);\r\n    HashMap\u003cString, Enum\u003c?\u003e\u003e map \u003d new HashMap\u003cString, Enum\u003c?\u003e\u003e();\r\n    for (int i \u003d 0, len \u003d enumConstants.length; i \u003c len; ++i) {\r\n        final Enum\u003c?\u003e enumValue \u003d enumConstants[i];\r\n        String name \u003d names[i];\r\n        if (name \u003d\u003d null) {\r\n            name \u003d enumValue.name();\r\n        }\r\n        map.put(name, enumValue);\r\n        String[] aliases \u003d allAliases[i];\r\n        if (aliases !\u003d null) {\r\n            for (String alias : aliases) {\r\n                // Avoid overriding any primary names\r\n                map.putIfAbsent(alias, enumValue);\r\n            }\r\n        }\r\n    }\r\n    return new EnumResolver(enumCls, enumConstants, map, _enumDefault(ai, enumCls), isIgnoreCase, false);\r\n}",
    "nodes": 10,
    "edges": 13,
    "cc": 5,
    "flowSummary": [
      "B1 : If(i4 \u003e\u003d i2) → B2 | else → B9",
      "B2 : If(r15 !\u003d null) → B3 | else → B4",
      "B4 : If($r14 \u003d\u003d null) → B5 | else → B8",
      "B6 : If(i5 \u003e\u003d i3) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  Class\n  r1 \u003d r0.getAnnotationIntrospector()\n  $r2 \u003d MapperFeature ACCEPT_CASE_INSENSITIVE_ENUMS\u003e\n  z0 \u003d r0.isEnabled($r2)\n  r4 \u003d EnumResolver._enumClass(r3)\n  r5 \u003d EnumResolver._enumConstants(r3)\n  $i0 \u003d lengthof r5\n  $r6 \u003d String)[$i0]\n  r7 \u003d r1.findEnumValues(r4, r5, $r6)\n  $i1 \u003d lengthof r7\n  r8 \u003d String[])[$i1]\n  r1.findEnumAliases(r4, r5, r8)\n  $r9 \u003d HashMap\n  new HashMap()\n  i4 \u003d 0\n  i2 \u003d lengthof r5\n}",
      "B1 {\n  if (i4 \u003e\u003d i2) goto B2 else B9\n}",
      "B2 {\n  r12 \u003d r5[i4]\n  r15 \u003d r7[i4]\n  if (r15 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  r15 \u003d r12.name()\n}",
      "B4 {\n  $r9.put(r15, r12)\n  $r14 \u003d r8[i4]\n  if ($r14 \u003d\u003d null) goto B5 else B8\n}",
      "B5 {\n  i3 \u003d lengthof $r14\n  i5 \u003d 0\n}",
      "B6 {\n  if (i5 \u003e\u003d i3) goto B7 else B8\n}",
      "B7 {\n  r13 \u003d $r14[i5]\n  $r9.putIfAbsent(r13, r12)\n  i5 \u003d i5 + 1\n  goto B6\n}",
      "B8 {\n  i4 \u003d i4 + 1\n  goto B1\n}",
      "B9 {\n  $r10 \u003d EnumResolver\n  $r11 \u003d EnumResolver._enumDefault(r1, r4)\n  new EnumResolver(r4, r5, $r9, $r11, z0, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B9",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B6",
      "B8 --\u003e B1",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumResolver#_enumConstants(...1)",
        "body": "{\r\n    final Enum\u003c?\u003e[] enumValues \u003d _enumClass(enumCls).getEnumConstants();\r\n    if (enumValues \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"No enum constants for class \" + enumCls.getName());\r\n    }\r\n    return enumValues;\r\n}"
      },
      {
        "name": "EnumResolver#_enumDefault(...2)",
        "body": "{\r\n    return (intr !\u003d null) ? intr.findDefaultEnumValue(_enumClass(enumCls)) : null;\r\n}"
      },
      {
        "name": "EnumResolver#_enumClass(...1)",
        "body": "{\r\n    return (Class\u003cEnum\u003c?\u003e\u003e) enumCls0;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.EnumResolver",
    "methodName": "constructUsingToString",
    "signature": "com.fasterxml.jackson.databind.util.EnumResolver constructUsingToString(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    // prepare data\r\n    final AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\r\n    final boolean isIgnoreCase \u003d config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\r\n    final Class\u003c?\u003e enumCls0 \u003d annotatedClass.getRawType();\r\n    final Class\u003cEnum\u003c?\u003e\u003e enumCls \u003d _enumClass(enumCls0);\r\n    final Enum\u003c?\u003e[] enumConstants \u003d _enumConstants(enumCls0);\r\n    // introspect\r\n    final String[] names \u003d new String[enumConstants.length];\r\n    final String[][] allAliases \u003d new String[enumConstants.length][];\r\n    if (ai !\u003d null) {\r\n        ai.findEnumValues(config, annotatedClass, enumConstants, names);\r\n        ai.findEnumAliases(config, annotatedClass, enumConstants, allAliases);\r\n    }\r\n    // finally, build\r\n    // from last to first, so that in case of duplicate values, first wins\r\n    HashMap\u003cString, Enum\u003c?\u003e\u003e map \u003d new HashMap\u003cString, Enum\u003c?\u003e\u003e();\r\n    for (int i \u003d enumConstants.length; --i \u003e\u003d 0; ) {\r\n        Enum\u003c?\u003e enumValue \u003d enumConstants[i];\r\n        String name \u003d names[i];\r\n        if (name \u003d\u003d null) {\r\n            name \u003d enumValue.toString();\r\n        }\r\n        map.put(name, enumValue);\r\n        String[] aliases \u003d allAliases[i];\r\n        if (aliases !\u003d null) {\r\n            for (String alias : aliases) {\r\n                // Avoid overriding any primary names\r\n                map.putIfAbsent(alias, enumValue);\r\n            }\r\n        }\r\n    }\r\n    return new EnumResolver(enumCls, enumConstants, map, _enumDefault(ai, annotatedClass, enumConstants), isIgnoreCase, false);\r\n}",
    "nodes": 12,
    "edges": 16,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B3 : If(i3 \u003c 0) → B4 | else → B11",
      "B4 : If(r15 !\u003d null) → B5 | else → B6",
      "B6 : If($r14 \u003d\u003d null) → B7 | else → B10",
      "B8 : If(i4 \u003e\u003d i2) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  AnnotatedClass\n  r1 \u003d r0.getAnnotationIntrospector()\n  $r2 \u003d MapperFeature ACCEPT_CASE_INSENSITIVE_ENUMS\u003e\n  z0 \u003d r0.isEnabled($r2)\n  r4 \u003d r3.getRawType()\n  r5 \u003d EnumResolver._enumClass(r4)\n  r6 \u003d EnumResolver._enumConstants(r4)\n  $i0 \u003d lengthof r6\n  r7 \u003d String)[$i0]\n  $i1 \u003d lengthof r6\n  r8 \u003d String[])[$i1]\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r1.findEnumValues(r0, r3, r6, r7)\n  r1.findEnumAliases(r0, r3, r6, r8)\n}",
      "B2 {\n  $r16 \u003d HashMap\n  new HashMap()\n  i3 \u003d lengthof r6\n}",
      "B3 {\n  $i6 \u003d (int) -1\n  i3 \u003d i3 + $i6\n  if (i3 \u003c 0) goto B4 else B11\n}",
      "B4 {\n  r12 \u003d r6[i3]\n  r15 \u003d r7[i3]\n  if (r15 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  r15 \u003d r12.toString()\n}",
      "B6 {\n  $r16.put(r15, r12)\n  $r14 \u003d r8[i3]\n  if ($r14 \u003d\u003d null) goto B7 else B10\n}",
      "B7 {\n  i2 \u003d lengthof $r14\n  i4 \u003d 0\n}",
      "B8 {\n  if (i4 \u003e\u003d i2) goto B9 else B10\n}",
      "B9 {\n  r13 \u003d $r14[i4]\n  $r16.putIfAbsent(r13, r12)\n  i4 \u003d i4 + 1\n  goto B8\n}",
      "B10 {\n  goto B3\n}",
      "B11 {\n  $r17 \u003d EnumResolver\n  $r11 \u003d EnumResolver._enumDefault(r1, r3, r6)\n  new EnumResolver(r5, r6, $r16, $r11, z0, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B11",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B8",
      "B10 --\u003e B3",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumResolver#_enumConstants(...1)",
        "body": "{\r\n    final Enum\u003c?\u003e[] enumValues \u003d _enumClass(enumCls).getEnumConstants();\r\n    if (enumValues \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"No enum constants for class \" + enumCls.getName());\r\n    }\r\n    return enumValues;\r\n}"
      },
      {
        "name": "EnumResolver#_enumDefault(...3)",
        "body": "{\r\n    return (intr !\u003d null) ? intr.findDefaultEnumValue(annotatedClass, enums) : null;\r\n}"
      },
      {
        "name": "EnumResolver#_enumClass(...1)",
        "body": "{\r\n    return (Class\u003cEnum\u003c?\u003e\u003e) enumCls0;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.EnumResolver",
    "methodName": "constructUsingToString",
    "signature": "com.fasterxml.jackson.databind.util.EnumResolver constructUsingToString(com.fasterxml.jackson.databind.DeserializationConfig,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    final AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\r\n    final boolean isIgnoreCase \u003d config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\r\n    final Class\u003cEnum\u003c?\u003e\u003e enumCls \u003d _enumClass(enumCls0);\r\n    final Enum\u003c?\u003e[] enumConstants \u003d _enumConstants(enumCls0);\r\n    HashMap\u003cString, Enum\u003c?\u003e\u003e map \u003d new HashMap\u003cString, Enum\u003c?\u003e\u003e();\r\n    final String[][] allAliases \u003d new String[enumConstants.length][];\r\n    if (ai !\u003d null) {\r\n        ai.findEnumAliases(enumCls, enumConstants, allAliases);\r\n    }\r\n    // from last to first, so that in case of duplicate values, first wins\r\n    for (int i \u003d enumConstants.length; --i \u003e\u003d 0; ) {\r\n        Enum\u003c?\u003e enumValue \u003d enumConstants[i];\r\n        map.put(enumValue.toString(), enumValue);\r\n        String[] aliases \u003d allAliases[i];\r\n        if (aliases !\u003d null) {\r\n            for (String alias : aliases) {\r\n                // Avoid overriding any primary names\r\n                map.putIfAbsent(alias, enumValue);\r\n            }\r\n        }\r\n    }\r\n    return new EnumResolver(enumCls, enumConstants, map, _enumDefault(ai, enumCls), isIgnoreCase, false);\r\n}",
    "nodes": 10,
    "edges": 13,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B3 : If(i2 \u003c 0) → B4 | else → B9",
      "B4 : If(r12 \u003d\u003d null) → B5 | else → B8",
      "B6 : If(i3 \u003e\u003d i1) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  Class\n  r1 \u003d r0.getAnnotationIntrospector()\n  $r2 \u003d MapperFeature ACCEPT_CASE_INSENSITIVE_ENUMS\u003e\n  z0 \u003d r0.isEnabled($r2)\n  r4 \u003d EnumResolver._enumClass(r3)\n  r5 \u003d EnumResolver._enumConstants(r3)\n  $r14 \u003d HashMap\n  new HashMap()\n  $i0 \u003d lengthof r5\n  r7 \u003d String[])[$i0]\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r1.findEnumAliases(r4, r5, r7)\n}",
      "B2 {\n  i2 \u003d lengthof r5\n}",
      "B3 {\n  $i5 \u003d (int) -1\n  i2 \u003d i2 + $i5\n  if (i2 \u003c 0) goto B4 else B9\n}",
      "B4 {\n  r10 \u003d r5[i2]\n  $r11 \u003d r10.toString()\n  $r14.put($r11, r10)\n  r12 \u003d r7[i2]\n  if (r12 \u003d\u003d null) goto B5 else B8\n}",
      "B5 {\n  i1 \u003d lengthof r12\n  i3 \u003d 0\n}",
      "B6 {\n  if (i3 \u003e\u003d i1) goto B7 else B8\n}",
      "B7 {\n  r13 \u003d r12[i3]\n  $r14.putIfAbsent(r13, r10)\n  i3 \u003d i3 + 1\n  goto B6\n}",
      "B8 {\n  goto B3\n}",
      "B9 {\n  $r15 \u003d EnumResolver\n  $r9 \u003d EnumResolver._enumDefault(r1, r4)\n  new EnumResolver(r4, r5, $r14, $r9, z0, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B6",
      "B8 --\u003e B3",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumResolver#_enumConstants(...1)",
        "body": "{\r\n    final Enum\u003c?\u003e[] enumValues \u003d _enumClass(enumCls).getEnumConstants();\r\n    if (enumValues \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"No enum constants for class \" + enumCls.getName());\r\n    }\r\n    return enumValues;\r\n}"
      },
      {
        "name": "EnumResolver#_enumDefault(...2)",
        "body": "{\r\n    return (intr !\u003d null) ? intr.findDefaultEnumValue(_enumClass(enumCls)) : null;\r\n}"
      },
      {
        "name": "EnumResolver#_enumClass(...1)",
        "body": "{\r\n    return (Class\u003cEnum\u003c?\u003e\u003e) enumCls0;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.EnumResolver",
    "methodName": "constructUsingIndex",
    "signature": "com.fasterxml.jackson.databind.util.EnumResolver constructUsingIndex(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    // prepare data\r\n    final AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\r\n    final boolean isIgnoreCase \u003d config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\r\n    final Class\u003c?\u003e enumCls0 \u003d annotatedClass.getRawType();\r\n    final Class\u003cEnum\u003c?\u003e\u003e enumCls \u003d _enumClass(enumCls0);\r\n    final Enum\u003c?\u003e[] enumConstants \u003d _enumConstants(enumCls0);\r\n    // finally, build\r\n    // from last to first, so that in case of duplicate values, first wins\r\n    HashMap\u003cString, Enum\u003c?\u003e\u003e map \u003d new HashMap\u003c\u003e();\r\n    for (int i \u003d enumConstants.length; --i \u003e\u003d 0; ) {\r\n        Enum\u003c?\u003e enumValue \u003d enumConstants[i];\r\n        map.put(String.valueOf(i), enumValue);\r\n    }\r\n    return new EnumResolver(enumCls, enumConstants, map, _enumDefault(ai, annotatedClass, enumConstants), isIgnoreCase, false);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i0 \u003c 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  AnnotatedClass\n  r1 \u003d r0.getAnnotationIntrospector()\n  $r2 \u003d MapperFeature ACCEPT_CASE_INSENSITIVE_ENUMS\u003e\n  z0 \u003d r0.isEnabled($r2)\n  r4 \u003d r3.getRawType()\n  r5 \u003d EnumResolver._enumClass(r4)\n  r6 \u003d EnumResolver._enumConstants(r4)\n  $r12 \u003d HashMap\n  new HashMap()\n  i0 \u003d lengthof r6\n}",
      "B1 {\n  $i2 \u003d (int) -1\n  i0 \u003d i0 + $i2\n  if (i0 \u003c 0) goto B2 else B3\n}",
      "B2 {\n  r10 \u003d r6[i0]\n  $r11 \u003d String.valueOf(i0)\n  $r12.put($r11, r10)\n  goto B1\n}",
      "B3 {\n  $r13 \u003d EnumResolver\n  $r9 \u003d EnumResolver._enumDefault(r1, r3, r6)\n  new EnumResolver(r5, r6, $r12, $r9, z0, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumResolver#_enumConstants(...1)",
        "body": "{\r\n    final Enum\u003c?\u003e[] enumValues \u003d _enumClass(enumCls).getEnumConstants();\r\n    if (enumValues \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"No enum constants for class \" + enumCls.getName());\r\n    }\r\n    return enumValues;\r\n}"
      },
      {
        "name": "EnumResolver#_enumDefault(...3)",
        "body": "{\r\n    return (intr !\u003d null) ? intr.findDefaultEnumValue(annotatedClass, enums) : null;\r\n}"
      },
      {
        "name": "EnumResolver#_enumClass(...1)",
        "body": "{\r\n    return (Class\u003cEnum\u003c?\u003e\u003e) enumCls0;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.EnumResolver",
    "methodName": "constructUsingIndex",
    "signature": "com.fasterxml.jackson.databind.util.EnumResolver constructUsingIndex(com.fasterxml.jackson.databind.DeserializationConfig,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    final AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\r\n    final boolean isIgnoreCase \u003d config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\r\n    final Class\u003cEnum\u003c?\u003e\u003e enumCls \u003d _enumClass(enumCls0);\r\n    final Enum\u003c?\u003e[] enumConstants \u003d _enumConstants(enumCls0);\r\n    HashMap\u003cString, Enum\u003c?\u003e\u003e map \u003d new HashMap\u003c\u003e();\r\n    // from last to first, so that in case of duplicate values, first wins\r\n    for (int i \u003d enumConstants.length; --i \u003e\u003d 0; ) {\r\n        Enum\u003c?\u003e enumValue \u003d enumConstants[i];\r\n        map.put(String.valueOf(i), enumValue);\r\n    }\r\n    return new EnumResolver(enumCls, enumConstants, map, _enumDefault(ai, enumCls), isIgnoreCase, false);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i0 \u003c 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  Class\n  r1 \u003d r0.getAnnotationIntrospector()\n  $r2 \u003d MapperFeature ACCEPT_CASE_INSENSITIVE_ENUMS\u003e\n  z0 \u003d r0.isEnabled($r2)\n  r4 \u003d EnumResolver._enumClass(r3)\n  r5 \u003d EnumResolver._enumConstants(r3)\n  $r11 \u003d HashMap\n  new HashMap()\n  i0 \u003d lengthof r5\n}",
      "B1 {\n  $i2 \u003d (int) -1\n  i0 \u003d i0 + $i2\n  if (i0 \u003c 0) goto B2 else B3\n}",
      "B2 {\n  r9 \u003d r5[i0]\n  $r10 \u003d String.valueOf(i0)\n  $r11.put($r10, r9)\n  goto B1\n}",
      "B3 {\n  $r12 \u003d EnumResolver\n  $r8 \u003d EnumResolver._enumDefault(r1, r4)\n  new EnumResolver(r4, r5, $r11, $r8, z0, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumResolver#_enumConstants(...1)",
        "body": "{\r\n    final Enum\u003c?\u003e[] enumValues \u003d _enumClass(enumCls).getEnumConstants();\r\n    if (enumValues \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"No enum constants for class \" + enumCls.getName());\r\n    }\r\n    return enumValues;\r\n}"
      },
      {
        "name": "EnumResolver#_enumDefault(...2)",
        "body": "{\r\n    return (intr !\u003d null) ? intr.findDefaultEnumValue(_enumClass(enumCls)) : null;\r\n}"
      },
      {
        "name": "EnumResolver#_enumClass(...1)",
        "body": "{\r\n    return (Class\u003cEnum\u003c?\u003e\u003e) enumCls0;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.EnumResolver",
    "methodName": "constructUsingEnumNamingStrategy",
    "signature": "com.fasterxml.jackson.databind.util.EnumResolver constructUsingEnumNamingStrategy(com.fasterxml.jackson.databind.DeserializationConfig,java.lang.Class,com.fasterxml.jackson.databind.EnumNamingStrategy)",
    "visibility": "public",
    "body": "{\r\n    final AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\r\n    final boolean isIgnoreCase \u003d config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\r\n    final Class\u003cEnum\u003c?\u003e\u003e enumCls \u003d _enumClass(enumCls0);\r\n    final Enum\u003c?\u003e[] enumConstants \u003d _enumConstants(enumCls0);\r\n    HashMap\u003cString, Enum\u003c?\u003e\u003e map \u003d new HashMap\u003c\u003e();\r\n    // introspect\r\n    final String[] names \u003d new String[enumConstants.length];\r\n    final String[][] allAliases \u003d new String[enumConstants.length][];\r\n    if (ai !\u003d null) {\r\n        ai.findEnumValues(enumCls, enumConstants, names);\r\n        ai.findEnumAliases(enumCls, enumConstants, allAliases);\r\n    }\r\n    // from last to first, so that in case of duplicate values, first wins\r\n    for (int i \u003d enumConstants.length; --i \u003e\u003d 0; ) {\r\n        Enum\u003c?\u003e anEnum \u003d enumConstants[i];\r\n        String name \u003d names[i];\r\n        if (name \u003d\u003d null) {\r\n            name \u003d enumNamingStrategy.convertEnumToExternalName(anEnum.name());\r\n        }\r\n        map.put(name, anEnum);\r\n        String[] aliases \u003d allAliases[i];\r\n        if (aliases !\u003d null) {\r\n            for (String alias : aliases) {\r\n                // avoid replacing any primary names\r\n                map.putIfAbsent(alias, anEnum);\r\n            }\r\n        }\r\n    }\r\n    return new EnumResolver(enumCls, enumConstants, map, _enumDefault(ai, enumCls), isIgnoreCase, false);\r\n}",
    "nodes": 12,
    "edges": 16,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B3 : If(i3 \u003c 0) → B4 | else → B11",
      "B4 : If(r16 !\u003d null) → B5 | else → B6",
      "B6 : If($r15 \u003d\u003d null) → B7 | else → B10",
      "B8 : If(i4 \u003e\u003d i2) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  Class\n  EnumNamingStrategy\n  r1 \u003d r0.getAnnotationIntrospector()\n  $r2 \u003d MapperFeature ACCEPT_CASE_INSENSITIVE_ENUMS\u003e\n  z0 \u003d r0.isEnabled($r2)\n  r4 \u003d EnumResolver._enumClass(r3)\n  r5 \u003d EnumResolver._enumConstants(r3)\n  $r17 \u003d HashMap\n  new HashMap()\n  $i0 \u003d lengthof r5\n  r7 \u003d String)[$i0]\n  $i1 \u003d lengthof r5\n  r8 \u003d String[])[$i1]\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r1.findEnumValues(r4, r5, r7)\n  r1.findEnumAliases(r4, r5, r8)\n}",
      "B2 {\n  i3 \u003d lengthof r5\n}",
      "B3 {\n  $i6 \u003d (int) -1\n  i3 \u003d i3 + $i6\n  if (i3 \u003c 0) goto B4 else B11\n}",
      "B4 {\n  r11 \u003d r5[i3]\n  r16 \u003d r7[i3]\n  if (r16 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r14 \u003d r11.name()\n  r16 \u003d r13.convertEnumToExternalName($r14)\n}",
      "B6 {\n  $r17.put(r16, r11)\n  $r15 \u003d r8[i3]\n  if ($r15 \u003d\u003d null) goto B7 else B10\n}",
      "B7 {\n  i2 \u003d lengthof $r15\n  i4 \u003d 0\n}",
      "B8 {\n  if (i4 \u003e\u003d i2) goto B9 else B10\n}",
      "B9 {\n  r12 \u003d $r15[i4]\n  $r17.putIfAbsent(r12, r11)\n  i4 \u003d i4 + 1\n  goto B8\n}",
      "B10 {\n  goto B3\n}",
      "B11 {\n  $r18 \u003d EnumResolver\n  $r10 \u003d EnumResolver._enumDefault(r1, r4)\n  new EnumResolver(r4, r5, $r17, $r10, z0, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B11",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B8",
      "B10 --\u003e B3",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumResolver#_enumConstants(...1)",
        "body": "{\r\n    final Enum\u003c?\u003e[] enumValues \u003d _enumClass(enumCls).getEnumConstants();\r\n    if (enumValues \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"No enum constants for class \" + enumCls.getName());\r\n    }\r\n    return enumValues;\r\n}"
      },
      {
        "name": "EnumResolver#_enumDefault(...2)",
        "body": "{\r\n    return (intr !\u003d null) ? intr.findDefaultEnumValue(_enumClass(enumCls)) : null;\r\n}"
      },
      {
        "name": "EnumResolver#_enumClass(...1)",
        "body": "{\r\n    return (Class\u003cEnum\u003c?\u003e\u003e) enumCls0;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.EnumResolver",
    "methodName": "constructUsingEnumNamingStrategy",
    "signature": "com.fasterxml.jackson.databind.util.EnumResolver constructUsingEnumNamingStrategy(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass,com.fasterxml.jackson.databind.EnumNamingStrategy)",
    "visibility": "public",
    "body": "{\r\n    // prepare data\r\n    final AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\r\n    final boolean isIgnoreCase \u003d config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\r\n    final Class\u003c?\u003e enumCls0 \u003d annotatedClass.getRawType();\r\n    final Class\u003cEnum\u003c?\u003e\u003e enumCls \u003d _enumClass(enumCls0);\r\n    final Enum\u003c?\u003e[] enumConstants \u003d _enumConstants(enumCls0);\r\n    // introspect\r\n    final String[] names \u003d new String[enumConstants.length];\r\n    final String[][] allAliases \u003d new String[enumConstants.length][];\r\n    if (ai !\u003d null) {\r\n        ai.findEnumValues(config, annotatedClass, enumConstants, names);\r\n        ai.findEnumAliases(config, annotatedClass, enumConstants, allAliases);\r\n    }\r\n    // finally build\r\n    // from last to first, so that in case of duplicate values, first wins\r\n    HashMap\u003cString, Enum\u003c?\u003e\u003e map \u003d new HashMap\u003c\u003e();\r\n    for (int i \u003d enumConstants.length; --i \u003e\u003d 0; ) {\r\n        Enum\u003c?\u003e anEnum \u003d enumConstants[i];\r\n        String name \u003d names[i];\r\n        if (name \u003d\u003d null) {\r\n            name \u003d enumNamingStrategy.convertEnumToExternalName(anEnum.name());\r\n        }\r\n        map.put(name, anEnum);\r\n        String[] aliases \u003d allAliases[i];\r\n        if (aliases !\u003d null) {\r\n            for (String alias : aliases) {\r\n                // avoid replacing any primary names\r\n                map.putIfAbsent(alias, anEnum);\r\n            }\r\n        }\r\n    }\r\n    return new EnumResolver(enumCls, enumConstants, map, _enumDefault(ai, annotatedClass, enumConstants), isIgnoreCase, false);\r\n}",
    "nodes": 12,
    "edges": 16,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B3 : If(i3 \u003c 0) → B4 | else → B11",
      "B4 : If(r17 !\u003d null) → B5 | else → B6",
      "B6 : If($r16 \u003d\u003d null) → B7 | else → B10",
      "B8 : If(i4 \u003e\u003d i2) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  AnnotatedClass\n  EnumNamingStrategy\n  r1 \u003d r0.getAnnotationIntrospector()\n  $r2 \u003d MapperFeature ACCEPT_CASE_INSENSITIVE_ENUMS\u003e\n  z0 \u003d r0.isEnabled($r2)\n  r4 \u003d r3.getRawType()\n  r5 \u003d EnumResolver._enumClass(r4)\n  r6 \u003d EnumResolver._enumConstants(r4)\n  $i0 \u003d lengthof r6\n  r7 \u003d String)[$i0]\n  $i1 \u003d lengthof r6\n  r8 \u003d String[])[$i1]\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r1.findEnumValues(r0, r3, r6, r7)\n  r1.findEnumAliases(r0, r3, r6, r8)\n}",
      "B2 {\n  $r18 \u003d HashMap\n  new HashMap()\n  i3 \u003d lengthof r6\n}",
      "B3 {\n  $i6 \u003d (int) -1\n  i3 \u003d i3 + $i6\n  if (i3 \u003c 0) goto B4 else B11\n}",
      "B4 {\n  r12 \u003d r6[i3]\n  r17 \u003d r7[i3]\n  if (r17 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r15 \u003d r12.name()\n  r17 \u003d r14.convertEnumToExternalName($r15)\n}",
      "B6 {\n  $r18.put(r17, r12)\n  $r16 \u003d r8[i3]\n  if ($r16 \u003d\u003d null) goto B7 else B10\n}",
      "B7 {\n  i2 \u003d lengthof $r16\n  i4 \u003d 0\n}",
      "B8 {\n  if (i4 \u003e\u003d i2) goto B9 else B10\n}",
      "B9 {\n  r13 \u003d $r16[i4]\n  $r18.putIfAbsent(r13, r12)\n  i4 \u003d i4 + 1\n  goto B8\n}",
      "B10 {\n  goto B3\n}",
      "B11 {\n  $r19 \u003d EnumResolver\n  $r11 \u003d EnumResolver._enumDefault(r1, r3, r6)\n  new EnumResolver(r5, r6, $r18, $r11, z0, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B11",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B8",
      "B10 --\u003e B3",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumResolver#_enumConstants(...1)",
        "body": "{\r\n    final Enum\u003c?\u003e[] enumValues \u003d _enumClass(enumCls).getEnumConstants();\r\n    if (enumValues \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"No enum constants for class \" + enumCls.getName());\r\n    }\r\n    return enumValues;\r\n}"
      },
      {
        "name": "EnumResolver#_enumDefault(...3)",
        "body": "{\r\n    return (intr !\u003d null) ? intr.findDefaultEnumValue(annotatedClass, enums) : null;\r\n}"
      },
      {
        "name": "EnumResolver#_enumClass(...1)",
        "body": "{\r\n    return (Class\u003cEnum\u003c?\u003e\u003e) enumCls0;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.EnumResolver",
    "methodName": "constructUsingMethod",
    "signature": "com.fasterxml.jackson.databind.util.EnumResolver constructUsingMethod(com.fasterxml.jackson.databind.DeserializationConfig,java.lang.Class,com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "visibility": "public",
    "body": "{\r\n    final AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\r\n    final boolean isIgnoreCase \u003d config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\r\n    final Class\u003cEnum\u003c?\u003e\u003e enumCls \u003d _enumClass(enumCls0);\r\n    final Enum\u003c?\u003e[] enumConstants \u003d _enumConstants(enumCls0);\r\n    HashMap\u003cString, Enum\u003c?\u003e\u003e map \u003d new HashMap\u003cString, Enum\u003c?\u003e\u003e();\r\n    // from last to first, so that in case of duplicate values, first wins\r\n    for (int i \u003d enumConstants.length; --i \u003e\u003d 0; ) {\r\n        Enum\u003c?\u003e en \u003d enumConstants[i];\r\n        try {\r\n            Object o \u003d accessor.getValue(en);\r\n            if (o !\u003d null) {\r\n                map.put(o.toString(), en);\r\n            }\r\n        } catch (Exception e) {\r\n            throw new IllegalArgumentException(\"Failed to access @JsonValue of Enum value \" + en + \": \" + e.getMessage());\r\n        }\r\n    }\r\n    return new EnumResolver(enumCls, enumConstants, map, _enumDefault(ai, enumCls), isIgnoreCase, // 26-Sep-2021, tatu: [databind#1850] Need to consider \"from int\" case\r\n    _isIntType(accessor.getRawType()));\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i0 \u003c 0) → B2 | else → B7",
      "B2 : If(r18 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  Class\n  AnnotatedMember\n  r1 \u003d r0.getAnnotationIntrospector()\n  $r2 \u003d MapperFeature ACCEPT_CASE_INSENSITIVE_ENUMS\u003e\n  z0 \u003d r0.isEnabled($r2)\n  r4 \u003d EnumResolver._enumClass(r3)\n  r5 \u003d EnumResolver._enumConstants(r3)\n  $r19 \u003d HashMap\n  new HashMap()\n  i0 \u003d lengthof r5\n}",
      "B1 {\n  $i2 \u003d (int) -1\n  i0 \u003d i0 + $i2\n  if (i0 \u003c 0) goto B2 else B7\n}",
      "B2 {\n  r11 \u003d r5[i0]\n  r18 \u003d r8.getValue(r11)\n  if (r18 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r12 \u003d r18.toString()\n  $r19.put($r12, r11)\n}",
      "B4 {\n  goto B6\n}",
      "B5 {\n  $r13 :\u003d @caughtexception\n  $r20 \u003d IllegalArgumentException\n  $r16 \u003d String.valueOf(r11)\n  $r15 \u003d $r13.getMessage()\n  $r17 \u003d dynInvoke makeConcatWithConstants($r16, $r15)\n  new IllegalArgumentException($r17)\n  throw $r20\n}",
      "B6 {\n  goto B1\n}",
      "B7 {\n  $r21 \u003d EnumResolver\n  $r10 \u003d EnumResolver._enumDefault(r1, r4)\n  $r9 \u003d r8.getRawType()\n  $z1 \u003d EnumResolver._isIntType($r9)\n  new EnumResolver(r4, r5, $r19, $r10, z0, $z1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B1",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumResolver#_enumConstants(...1)",
        "body": "{\r\n    final Enum\u003c?\u003e[] enumValues \u003d _enumClass(enumCls).getEnumConstants();\r\n    if (enumValues \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"No enum constants for class \" + enumCls.getName());\r\n    }\r\n    return enumValues;\r\n}"
      },
      {
        "name": "EnumResolver#_isIntType(...1)",
        "body": "{\r\n    if (erasedType.isPrimitive()) {\r\n        erasedType \u003d ClassUtil.wrapperType(erasedType);\r\n    }\r\n    return (erasedType \u003d\u003d Long.class) || (erasedType \u003d\u003d Integer.class) || (erasedType \u003d\u003d Short.class) || (erasedType \u003d\u003d Byte.class);\r\n}"
      },
      {
        "name": "EnumResolver#_enumDefault(...2)",
        "body": "{\r\n    return (intr !\u003d null) ? intr.findDefaultEnumValue(_enumClass(enumCls)) : null;\r\n}"
      },
      {
        "name": "EnumResolver#_enumClass(...1)",
        "body": "{\r\n    return (Class\u003cEnum\u003c?\u003e\u003e) enumCls0;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.EnumResolver",
    "methodName": "constructUsingMethod",
    "signature": "com.fasterxml.jackson.databind.util.EnumResolver constructUsingMethod(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass,com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "visibility": "public",
    "body": "{\r\n    // prepare data\r\n    final AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\r\n    final boolean isIgnoreCase \u003d config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\r\n    final Class\u003c?\u003e enumCls0 \u003d annotatedClass.getRawType();\r\n    final Class\u003cEnum\u003c?\u003e\u003e enumCls \u003d _enumClass(enumCls0);\r\n    final Enum\u003c?\u003e[] enumConstants \u003d _enumConstants(enumCls0);\r\n    // build\r\n    HashMap\u003cString, Enum\u003c?\u003e\u003e map \u003d new HashMap\u003cString, Enum\u003c?\u003e\u003e();\r\n    // from last to first, so that in case of duplicate values, first wins\r\n    for (int i \u003d enumConstants.length; --i \u003e\u003d 0; ) {\r\n        Enum\u003c?\u003e en \u003d enumConstants[i];\r\n        try {\r\n            Object o \u003d accessor.getValue(en);\r\n            if (o !\u003d null) {\r\n                map.put(o.toString(), en);\r\n            }\r\n        } catch (Exception e) {\r\n            throw new IllegalArgumentException(\"Failed to access @JsonValue of Enum value \" + en + \": \" + e.getMessage());\r\n        }\r\n    }\r\n    return new EnumResolver(enumCls, enumConstants, map, _enumDefault(ai, annotatedClass, enumConstants), isIgnoreCase, // 26-Sep-2021, tatu: [databind#1850] Need to consider \"from int\" case\r\n    _isIntType(accessor.getRawType()));\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i0 \u003c 0) → B2 | else → B7",
      "B2 : If(r19 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DeserializationConfig\n  AnnotatedClass\n  AnnotatedMember\n  r1 \u003d r0.getAnnotationIntrospector()\n  $r2 \u003d MapperFeature ACCEPT_CASE_INSENSITIVE_ENUMS\u003e\n  z0 \u003d r0.isEnabled($r2)\n  r4 \u003d r3.getRawType()\n  r5 \u003d EnumResolver._enumClass(r4)\n  r6 \u003d EnumResolver._enumConstants(r4)\n  $r20 \u003d HashMap\n  new HashMap()\n  i0 \u003d lengthof r6\n}",
      "B1 {\n  $i2 \u003d (int) -1\n  i0 \u003d i0 + $i2\n  if (i0 \u003c 0) goto B2 else B7\n}",
      "B2 {\n  r12 \u003d r6[i0]\n  r19 \u003d r9.getValue(r12)\n  if (r19 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r13 \u003d r19.toString()\n  $r20.put($r13, r12)\n}",
      "B4 {\n  goto B6\n}",
      "B5 {\n  $r14 :\u003d @caughtexception\n  $r21 \u003d IllegalArgumentException\n  $r17 \u003d String.valueOf(r12)\n  $r16 \u003d $r14.getMessage()\n  $r18 \u003d dynInvoke makeConcatWithConstants($r17, $r16)\n  new IllegalArgumentException($r18)\n  throw $r21\n}",
      "B6 {\n  goto B1\n}",
      "B7 {\n  $r22 \u003d EnumResolver\n  $r11 \u003d EnumResolver._enumDefault(r1, r3, r6)\n  $r10 \u003d r9.getRawType()\n  $z1 \u003d EnumResolver._isIntType($r10)\n  new EnumResolver(r5, r6, $r20, $r11, z0, $z1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B1",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumResolver#_enumConstants(...1)",
        "body": "{\r\n    final Enum\u003c?\u003e[] enumValues \u003d _enumClass(enumCls).getEnumConstants();\r\n    if (enumValues \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"No enum constants for class \" + enumCls.getName());\r\n    }\r\n    return enumValues;\r\n}"
      },
      {
        "name": "EnumResolver#_isIntType(...1)",
        "body": "{\r\n    if (erasedType.isPrimitive()) {\r\n        erasedType \u003d ClassUtil.wrapperType(erasedType);\r\n    }\r\n    return (erasedType \u003d\u003d Long.class) || (erasedType \u003d\u003d Integer.class) || (erasedType \u003d\u003d Short.class) || (erasedType \u003d\u003d Byte.class);\r\n}"
      },
      {
        "name": "EnumResolver#_enumDefault(...3)",
        "body": "{\r\n    return (intr !\u003d null) ? intr.findDefaultEnumValue(annotatedClass, enums) : null;\r\n}"
      },
      {
        "name": "EnumResolver#_enumClass(...1)",
        "body": "{\r\n    return (Class\u003cEnum\u003c?\u003e\u003e) enumCls0;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.EnumResolver",
    "methodName": "findEnum",
    "signature": "java.lang.Enum findEnum(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    Enum\u003c?\u003e en \u003d _enumsById.get(key);\r\n    if (en \u003d\u003d null) {\r\n        if (_isIgnoreCase) {\r\n            return _findEnumCaseInsensitive(key);\r\n        }\r\n    }\r\n    return en;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  EnumResolver\n  String\n  $r2 \u003d HashMap _enumsById\u003e\n  $r3 \u003d $r2.get(r1)\n  r4 \u003d Enum) $r3\n  if (r4 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d EnumResolver: boolean _isIgnoreCase\u003e\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d r0._findEnumCaseInsensitive(r1)\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumResolver#_findEnumCaseInsensitive(...1)",
        "body": "{\r\n    for (Map.Entry\u003cString, Enum\u003c?\u003e\u003e entry : _enumsById.entrySet()) {\r\n        if (key.equalsIgnoreCase(entry.getKey())) {\r\n            return entry.getValue();\r\n        }\r\n    }\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.EnumResolver",
    "methodName": "getEnum",
    "signature": "java.lang.Enum getEnum(int)",
    "visibility": "public",
    "body": "{\r\n    if (index \u003c 0 || index \u003e\u003d _enums.length) {\r\n        return null;\r\n    }\r\n    return _enums[index];\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B2",
      "B1 : If(i0 \u003c $i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  EnumResolver\n  i0 :\u003d @parameter0: int\n  if (i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d Enum[] _enums\u003e\n  $i1 \u003d lengthof $r1\n  if (i0 \u003c $i1) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r2 \u003d Enum[] _enums\u003e\n  $r3 \u003d $r2[i0]\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.EnumResolver",
    "methodName": "getEnums",
    "signature": "java.util.List getEnums()",
    "visibility": "public",
    "body": "{\r\n    ArrayList\u003cEnum\u003c?\u003e\u003e enums \u003d new ArrayList\u003cEnum\u003c?\u003e\u003e(_enums.length);\r\n    for (Enum\u003c?\u003e e : _enums) {\r\n        enums.add(e);\r\n    }\r\n    return enums;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  EnumResolver\n  $r0 \u003d ArrayList\n  $r2 \u003d Enum[] _enums\u003e\n  $i0 \u003d lengthof $r2\n  new ArrayList($i0)\n  r3 \u003d Enum[] _enums\u003e\n  i1 \u003d lengthof r3\n  i2 \u003d 0\n}",
      "B1 {\n  if (i2 \u003e\u003d i1) goto B2 else B3\n}",
      "B2 {\n  r4 \u003d r3[i2]\n  $r0.add(r4)\n  i2 \u003d i2 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.EnumValues",
    "methodName": "construct",
    "signature": "com.fasterxml.jackson.databind.util.EnumValues construct(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    if (config.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING)) {\r\n        return constructFromToString(config, annotatedClass);\r\n    }\r\n    return constructFromName(config, annotatedClass);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SerializationConfig\n  AnnotatedClass\n  $r1 \u003d SerializationFeature WRITE_ENUMS_USING_TO_STRING\u003e\n  $z0 \u003d r0.isEnabled($r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d EnumValues.constructFromToString(r0, r2)\n  return\n}",
      "B2 {\n  $r3 \u003d EnumValues.constructFromName(r0, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumValues#constructFromToString(...2)",
        "body": "{\r\n    // prepare data\r\n    final AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\r\n    final boolean useLowerCase \u003d config.isEnabled(EnumFeature.WRITE_ENUMS_TO_LOWERCASE);\r\n    final Class\u003c?\u003e enumCls0 \u003d annotatedClass.getRawType();\r\n    final Class\u003cEnum\u003c?\u003e\u003e enumCls \u003d _enumClass(enumCls0);\r\n    final Enum\u003c?\u003e[] enumConstants \u003d _enumConstants(enumCls0);\r\n    // introspect\r\n    String[] names \u003d new String[enumConstants.length];\r\n    if (ai !\u003d null) {\r\n        ai.findEnumValues(config, annotatedClass, enumConstants, names);\r\n    }\r\n    // build\r\n    SerializableString[] textual \u003d new SerializableString[enumConstants.length];\r\n    for (int i \u003d 0; i \u003c enumConstants.length; i++) {\r\n        String enumToString \u003d enumConstants[i].toString();\r\n        // 01-Feb-2024, tatu: [databind#4355] Nulls not great but... let\u0027s\r\n        //   coerce into \"\" for backwards compatibility\r\n        enumToString \u003d (enumToString \u003d\u003d null) ? \"\" : enumToString;\r\n        String name \u003d _findNameToUse(names[i], enumToString, useLowerCase);\r\n        textual[i] \u003d config.compileString(name);\r\n    }\r\n    return construct(enumCls, textual);\r\n}"
      },
      {
        "name": "EnumValues#constructFromName(...2)",
        "body": "{\r\n    // Enum types with per-instance sub-classes need special handling\r\n    Class\u003c? extends Enum\u003c?\u003e\u003e enumCls \u003d ClassUtil.findEnumType(enumClass);\r\n    boolean useLowerCase \u003d config.isEnabled(EnumFeature.WRITE_ENUMS_TO_LOWERCASE);\r\n    Enum\u003c?\u003e[] enumValues \u003d enumCls.getEnumConstants();\r\n    if (enumValues \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Cannot determine enum constants for Class \" + enumClass.getName());\r\n    }\r\n    String[] names \u003d config.getAnnotationIntrospector().findEnumValues(enumCls, enumValues, new String[enumValues.length]);\r\n    SerializableString[] textual \u003d new SerializableString[enumValues.length];\r\n    for (int i \u003d 0, len \u003d enumValues.length; i \u003c len; ++i) {\r\n        Enum\u003c?\u003e en \u003d enumValues[i];\r\n        String name \u003d _findNameToUse(names[i], enumValues[i].name(), useLowerCase);\r\n        textual[en.ordinal()] \u003d config.compileString(name);\r\n    }\r\n    return construct(enumClass, textual);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.EnumValues",
    "methodName": "constructFromName",
    "signature": "com.fasterxml.jackson.databind.util.EnumValues constructFromName(com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    // Enum types with per-instance sub-classes need special handling\r\n    Class\u003c? extends Enum\u003c?\u003e\u003e enumCls \u003d ClassUtil.findEnumType(enumClass);\r\n    boolean useLowerCase \u003d config.isEnabled(EnumFeature.WRITE_ENUMS_TO_LOWERCASE);\r\n    Enum\u003c?\u003e[] enumValues \u003d enumCls.getEnumConstants();\r\n    if (enumValues \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Cannot determine enum constants for Class \" + enumClass.getName());\r\n    }\r\n    String[] names \u003d config.getAnnotationIntrospector().findEnumValues(enumCls, enumValues, new String[enumValues.length]);\r\n    SerializableString[] textual \u003d new SerializableString[enumValues.length];\r\n    for (int i \u003d 0, len \u003d enumValues.length; i \u003c len; ++i) {\r\n        Enum\u003c?\u003e en \u003d enumValues[i];\r\n        String name \u003d _findNameToUse(names[i], enumValues[i].name(), useLowerCase);\r\n        textual[en.ordinal()] \u003d config.compileString(name);\r\n    }\r\n    return construct(enumClass, textual);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r5 !\u003d null) → B1 | else → B2",
      "B3 : If(i4 \u003e\u003d i2) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MapperConfig\n  Class\n  r1 \u003d ClassUtil.findEnumType(r0)\n  $r3 \u003d EnumFeature WRITE_ENUMS_TO_LOWERCASE\u003e\n  z0 \u003d r2.isEnabled($r3)\n  $r4 \u003d r1.getEnumConstants()\n  r5 \u003d Enum[]) $r4\n  if (r5 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r17 \u003d IllegalArgumentException\n  $r18 \u003d r0.getName()\n  $r19 \u003d dynInvoke makeConcatWithConstants($r18)\n  new IllegalArgumentException($r19)\n  throw $r17\n}",
      "B2 {\n  $r7 \u003d r2.getAnnotationIntrospector()\n  $i0 \u003d lengthof r5\n  $r6 \u003d String)[$i0]\n  r8 \u003d $r7.findEnumValues(r1, r5, $r6)\n  $i1 \u003d lengthof r5\n  r9 \u003d SerializableString)[$i1]\n  i4 \u003d 0\n  i2 \u003d lengthof r5\n}",
      "B3 {\n  if (i4 \u003e\u003d i2) goto B4 else B5\n}",
      "B4 {\n  r11 \u003d r5[i4]\n  $r13 \u003d r8[i4]\n  $r12 \u003d r5[i4]\n  $r14 \u003d $r12.name()\n  r15 \u003d EnumValues._findNameToUse($r13, $r14, z0)\n  $i3 \u003d r11.ordinal()\n  $r16 \u003d r2.compileString(r15)\n  r9[$i3] \u003d $r16\n  i4 \u003d i4 + 1\n  goto B3\n}",
      "B5 {\n  $r10 \u003d EnumValues.construct(r0, r9)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumValues#_findNameToUse(...3)",
        "body": "{\r\n    // If explicitly named, like @JsonProperty-annotated, then use it\r\n    if (explicitName !\u003d null) {\r\n        return explicitName;\r\n    }\r\n    // [databind#4788] Since 2.18.2 : EnumFeature.WRITE_ENUMS_TO_LOWERCASE should not\r\n    //                 override @JsonProperty values\r\n    if (toLowerCase) {\r\n        return otherName.toLowerCase();\r\n    }\r\n    return otherName;\r\n}"
      },
      {
        "name": "EnumValues#construct(...2)",
        "body": "{\r\n    if (config.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING)) {\r\n        return constructFromToString(config, annotatedClass);\r\n    }\r\n    return constructFromName(config, annotatedClass);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.EnumValues",
    "methodName": "constructFromName",
    "signature": "com.fasterxml.jackson.databind.util.EnumValues constructFromName(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    // prepare data\r\n    final AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\r\n    final boolean useLowerCase \u003d config.isEnabled(EnumFeature.WRITE_ENUMS_TO_LOWERCASE);\r\n    final Class\u003c?\u003e enumCls0 \u003d annotatedClass.getRawType();\r\n    final Class\u003cEnum\u003c?\u003e\u003e enumCls \u003d _enumClass(enumCls0);\r\n    final Enum\u003c?\u003e[] enumConstants \u003d _enumConstants(enumCls0);\r\n    // introspect\r\n    String[] names \u003d ai.findEnumValues(config, annotatedClass, enumConstants, new String[enumConstants.length]);\r\n    // build\r\n    SerializableString[] textual \u003d new SerializableString[enumConstants.length];\r\n    for (int i \u003d 0, len \u003d enumConstants.length; i \u003c len; ++i) {\r\n        Enum\u003c?\u003e enumValue \u003d enumConstants[i];\r\n        String name \u003d _findNameToUse(names[i], enumValue.name(), useLowerCase);\r\n        textual[enumValue.ordinal()] \u003d config.compileString(name);\r\n    }\r\n    return construct(enumCls, textual);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i4 \u003e\u003d i2) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MapperConfig\n  AnnotatedClass\n  r1 \u003d r0.getAnnotationIntrospector()\n  $r2 \u003d EnumFeature WRITE_ENUMS_TO_LOWERCASE\u003e\n  z0 \u003d r0.isEnabled($r2)\n  r4 \u003d r3.getRawType()\n  r5 \u003d EnumValues._enumClass(r4)\n  r6 \u003d EnumValues._enumConstants(r4)\n  $i0 \u003d lengthof r6\n  $r7 \u003d String)[$i0]\n  r8 \u003d r1.findEnumValues(r0, r3, r6, $r7)\n  $i1 \u003d lengthof r6\n  r9 \u003d SerializableString)[$i1]\n  i4 \u003d 0\n  i2 \u003d lengthof r6\n}",
      "B1 {\n  if (i4 \u003e\u003d i2) goto B2 else B3\n}",
      "B2 {\n  r11 \u003d r6[i4]\n  $r12 \u003d r8[i4]\n  $r13 \u003d r11.name()\n  r14 \u003d EnumValues._findNameToUse($r12, $r13, z0)\n  $i3 \u003d r11.ordinal()\n  $r15 \u003d r0.compileString(r14)\n  r9[$i3] \u003d $r15\n  i4 \u003d i4 + 1\n  goto B1\n}",
      "B3 {\n  $r10 \u003d EnumValues.construct(r5, r9)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumValues#_findNameToUse(...3)",
        "body": "{\r\n    // If explicitly named, like @JsonProperty-annotated, then use it\r\n    if (explicitName !\u003d null) {\r\n        return explicitName;\r\n    }\r\n    // [databind#4788] Since 2.18.2 : EnumFeature.WRITE_ENUMS_TO_LOWERCASE should not\r\n    //                 override @JsonProperty values\r\n    if (toLowerCase) {\r\n        return otherName.toLowerCase();\r\n    }\r\n    return otherName;\r\n}"
      },
      {
        "name": "EnumValues#_enumConstants(...1)",
        "body": "{\r\n    final Enum\u003c?\u003e[] enumValues \u003d ClassUtil.findEnumType(enumCls).getEnumConstants();\r\n    if (enumValues \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"No enum constants for class \" + enumCls.getName());\r\n    }\r\n    return enumValues;\r\n}"
      },
      {
        "name": "EnumValues#construct(...2)",
        "body": "{\r\n    if (config.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING)) {\r\n        return constructFromToString(config, annotatedClass);\r\n    }\r\n    return constructFromName(config, annotatedClass);\r\n}"
      },
      {
        "name": "EnumValues#_enumClass(...1)",
        "body": "{\r\n    return (Class\u003cEnum\u003c?\u003e\u003e) enumCls0;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.EnumValues",
    "methodName": "constructFromToString",
    "signature": "com.fasterxml.jackson.databind.util.EnumValues constructFromToString(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "visibility": "public",
    "body": "{\r\n    // prepare data\r\n    final AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\r\n    final boolean useLowerCase \u003d config.isEnabled(EnumFeature.WRITE_ENUMS_TO_LOWERCASE);\r\n    final Class\u003c?\u003e enumCls0 \u003d annotatedClass.getRawType();\r\n    final Class\u003cEnum\u003c?\u003e\u003e enumCls \u003d _enumClass(enumCls0);\r\n    final Enum\u003c?\u003e[] enumConstants \u003d _enumConstants(enumCls0);\r\n    // introspect\r\n    String[] names \u003d new String[enumConstants.length];\r\n    if (ai !\u003d null) {\r\n        ai.findEnumValues(config, annotatedClass, enumConstants, names);\r\n    }\r\n    // build\r\n    SerializableString[] textual \u003d new SerializableString[enumConstants.length];\r\n    for (int i \u003d 0; i \u003c enumConstants.length; i++) {\r\n        String enumToString \u003d enumConstants[i].toString();\r\n        // 01-Feb-2024, tatu: [databind#4355] Nulls not great but... let\u0027s\r\n        //   coerce into \"\" for backwards compatibility\r\n        enumToString \u003d (enumToString \u003d\u003d null) ? \"\" : enumToString;\r\n        String name \u003d _findNameToUse(names[i], enumToString, useLowerCase);\r\n        textual[i] \u003d config.compileString(name);\r\n    }\r\n    return construct(enumCls, textual);\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B3 : If(i2 \u003e\u003d $i3) → B4 | else → B8",
      "B4 : If(r14 !\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  MapperConfig\n  AnnotatedClass\n  r1 \u003d r0.getAnnotationIntrospector()\n  $r2 \u003d EnumFeature WRITE_ENUMS_TO_LOWERCASE\u003e\n  z0 \u003d r0.isEnabled($r2)\n  r4 \u003d r3.getRawType()\n  r5 \u003d EnumValues._enumClass(r4)\n  r6 \u003d EnumValues._enumConstants(r4)\n  $i0 \u003d lengthof r6\n  r7 \u003d String)[$i0]\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r1.findEnumValues(r0, r3, r6, r7)\n}",
      "B2 {\n  $i1 \u003d lengthof r6\n  $r13 \u003d SerializableString)[$i1]\n  i2 \u003d 0\n}",
      "B3 {\n  $i3 \u003d lengthof r6\n  if (i2 \u003e\u003d $i3) goto B4 else B8\n}",
      "B4 {\n  $r9 \u003d r6[i2]\n  r14 \u003d $r9.toString()\n  if (r14 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r15 \u003d \"\"\n  goto B7\n}",
      "B6 {\n  $r15 \u003d r14\n}",
      "B7 {\n  $r10 \u003d r7[i2]\n  $r12 \u003d EnumValues._findNameToUse($r10, $r15, z0)\n  $r11 \u003d r0.compileString($r12)\n  $r13[i2] \u003d $r11\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B8 {\n  $r8 \u003d EnumValues.construct(r5, $r13)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B3",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumValues#_findNameToUse(...3)",
        "body": "{\r\n    // If explicitly named, like @JsonProperty-annotated, then use it\r\n    if (explicitName !\u003d null) {\r\n        return explicitName;\r\n    }\r\n    // [databind#4788] Since 2.18.2 : EnumFeature.WRITE_ENUMS_TO_LOWERCASE should not\r\n    //                 override @JsonProperty values\r\n    if (toLowerCase) {\r\n        return otherName.toLowerCase();\r\n    }\r\n    return otherName;\r\n}"
      },
      {
        "name": "EnumValues#_enumConstants(...1)",
        "body": "{\r\n    final Enum\u003c?\u003e[] enumValues \u003d ClassUtil.findEnumType(enumCls).getEnumConstants();\r\n    if (enumValues \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"No enum constants for class \" + enumCls.getName());\r\n    }\r\n    return enumValues;\r\n}"
      },
      {
        "name": "EnumValues#construct(...2)",
        "body": "{\r\n    if (config.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING)) {\r\n        return constructFromToString(config, annotatedClass);\r\n    }\r\n    return constructFromName(config, annotatedClass);\r\n}"
      },
      {
        "name": "EnumValues#_enumClass(...1)",
        "body": "{\r\n    return (Class\u003cEnum\u003c?\u003e\u003e) enumCls0;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.EnumValues",
    "methodName": "constructFromToString",
    "signature": "com.fasterxml.jackson.databind.util.EnumValues constructFromToString(com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    Class\u003c? extends Enum\u003c?\u003e\u003e cls \u003d ClassUtil.findEnumType(enumClass);\r\n    Enum\u003c?\u003e[] values \u003d cls.getEnumConstants();\r\n    if (values \u003d\u003d null) {\r\n        // can this ever occur?\r\n        throw new IllegalArgumentException(\"Cannot determine enum constants for Class \" + enumClass.getName());\r\n    }\r\n    ArrayList\u003cString\u003e external \u003d new ArrayList\u003c\u003e(values.length);\r\n    for (Enum\u003c?\u003e en : values) {\r\n        external.add(en.toString());\r\n    }\r\n    return construct(config, enumClass, external);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B3 : If(i2 \u003e\u003d i1) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MapperConfig\n  Class\n  r1 \u003d ClassUtil.findEnumType(r0)\n  $r2 \u003d r1.getEnumConstants()\n  r3 \u003d Enum[]) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d IllegalArgumentException\n  $r10 \u003d r0.getName()\n  $r11 \u003d dynInvoke makeConcatWithConstants($r10)\n  new IllegalArgumentException($r11)\n  throw $r9\n}",
      "B2 {\n  $r4 \u003d ArrayList\n  $i0 \u003d lengthof r3\n  new ArrayList($i0)\n  i1 \u003d lengthof r3\n  i2 \u003d 0\n}",
      "B3 {\n  if (i2 \u003e\u003d i1) goto B4 else B5\n}",
      "B4 {\n  r7 \u003d r3[i2]\n  $r8 \u003d r7.toString()\n  $r4.add($r8)\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B5 {\n  $r6 \u003d EnumValues.construct(r5, r0, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumValues#construct(...3)",
        "body": "{\r\n    final int len \u003d externalValues.size();\r\n    SerializableString[] textual \u003d new SerializableString[len];\r\n    for (int i \u003d 0; i \u003c len; ++i) {\r\n        textual[i] \u003d config.compileString(externalValues.get(i));\r\n    }\r\n    return construct(enumClass, textual);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.EnumValues",
    "methodName": "constructUsingEnumNamingStrategy",
    "signature": "com.fasterxml.jackson.databind.util.EnumValues constructUsingEnumNamingStrategy(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass,com.fasterxml.jackson.databind.EnumNamingStrategy)",
    "visibility": "public",
    "body": "{\r\n    // prepare data\r\n    final AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\r\n    final boolean useLowerCase \u003d config.isEnabled(EnumFeature.WRITE_ENUMS_TO_LOWERCASE);\r\n    final Class\u003c?\u003e enumCls0 \u003d annotatedClass.getRawType();\r\n    final Class\u003cEnum\u003c?\u003e\u003e enumCls \u003d _enumClass(enumCls0);\r\n    final Enum\u003c?\u003e[] enumConstants \u003d _enumConstants(enumCls0);\r\n    // introspect\r\n    String[] names \u003d new String[enumConstants.length];\r\n    if (ai !\u003d null) {\r\n        ai.findEnumValues(config, annotatedClass, enumConstants, names);\r\n    }\r\n    // build\r\n    SerializableString[] textual \u003d new SerializableString[enumConstants.length];\r\n    for (int i \u003d 0, len \u003d enumConstants.length; i \u003c len; i++) {\r\n        Enum\u003c?\u003e enumValue \u003d enumConstants[i];\r\n        String name \u003d _findNameToUse(names[i], namingStrategy.convertEnumToExternalName(enumValue.name()), useLowerCase);\r\n        textual[i] \u003d config.compileString(name);\r\n    }\r\n    return construct(enumCls, textual);\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B3 : If(i3 \u003e\u003d $i2) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MapperConfig\n  AnnotatedClass\n  EnumNamingStrategy\n  r1 \u003d r0.getAnnotationIntrospector()\n  $r2 \u003d EnumFeature WRITE_ENUMS_TO_LOWERCASE\u003e\n  z0 \u003d r0.isEnabled($r2)\n  r4 \u003d r3.getRawType()\n  r5 \u003d EnumValues._enumClass(r4)\n  r6 \u003d EnumValues._enumConstants(r4)\n  $i0 \u003d lengthof r6\n  r7 \u003d String)[$i0]\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r1.findEnumValues(r0, r3, r6, r7)\n}",
      "B2 {\n  $i1 \u003d lengthof r6\n  $r16 \u003d SerializableString)[$i1]\n  i3 \u003d 0\n  $i2 \u003d lengthof r6\n}",
      "B3 {\n  if (i3 \u003e\u003d $i2) goto B4 else B5\n}",
      "B4 {\n  r9 \u003d r6[i3]\n  $r11 \u003d r7[i3]\n  $r12 \u003d r9.name()\n  $r13 \u003d r10.convertEnumToExternalName($r12)\n  r14 \u003d EnumValues._findNameToUse($r11, $r13, z0)\n  $r15 \u003d r0.compileString(r14)\n  $r16[i3] \u003d $r15\n  i3 \u003d i3 + 1\n  goto B3\n}",
      "B5 {\n  $r8 \u003d EnumValues.construct(r5, $r16)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumValues#_findNameToUse(...3)",
        "body": "{\r\n    // If explicitly named, like @JsonProperty-annotated, then use it\r\n    if (explicitName !\u003d null) {\r\n        return explicitName;\r\n    }\r\n    // [databind#4788] Since 2.18.2 : EnumFeature.WRITE_ENUMS_TO_LOWERCASE should not\r\n    //                 override @JsonProperty values\r\n    if (toLowerCase) {\r\n        return otherName.toLowerCase();\r\n    }\r\n    return otherName;\r\n}"
      },
      {
        "name": "EnumValues#_enumConstants(...1)",
        "body": "{\r\n    final Enum\u003c?\u003e[] enumValues \u003d ClassUtil.findEnumType(enumCls).getEnumConstants();\r\n    if (enumValues \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"No enum constants for class \" + enumCls.getName());\r\n    }\r\n    return enumValues;\r\n}"
      },
      {
        "name": "EnumValues#construct(...2)",
        "body": "{\r\n    if (config.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING)) {\r\n        return constructFromToString(config, annotatedClass);\r\n    }\r\n    return constructFromName(config, annotatedClass);\r\n}"
      },
      {
        "name": "EnumValues#_enumClass(...1)",
        "body": "{\r\n    return (Class\u003cEnum\u003c?\u003e\u003e) enumCls0;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.EnumValues",
    "methodName": "constructUsingEnumNamingStrategy",
    "signature": "com.fasterxml.jackson.databind.util.EnumValues constructUsingEnumNamingStrategy(com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class,com.fasterxml.jackson.databind.EnumNamingStrategy)",
    "visibility": "public",
    "body": "{\r\n    Class\u003c? extends Enum\u003c?\u003e\u003e cls \u003d ClassUtil.findEnumType(enumClass);\r\n    Enum\u003c?\u003e[] values \u003d cls.getEnumConstants();\r\n    if (values \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Cannot determine enum constants for Class \" + enumClass.getName());\r\n    }\r\n    ArrayList\u003cString\u003e external \u003d new ArrayList\u003c\u003e(values.length);\r\n    for (Enum\u003c?\u003e en : values) {\r\n        external.add(namingStrategy.convertEnumToExternalName(en.name()));\r\n    }\r\n    return construct(config, enumClass, external);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2",
      "B3 : If(i2 \u003e\u003d i1) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MapperConfig\n  Class\n  EnumNamingStrategy\n  r1 \u003d ClassUtil.findEnumType(r0)\n  $r2 \u003d r1.getEnumConstants()\n  r3 \u003d Enum[]) $r2\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r11 \u003d IllegalArgumentException\n  $r12 \u003d r0.getName()\n  $r13 \u003d dynInvoke makeConcatWithConstants($r12)\n  new IllegalArgumentException($r13)\n  throw $r11\n}",
      "B2 {\n  $r4 \u003d ArrayList\n  $i0 \u003d lengthof r3\n  new ArrayList($i0)\n  i1 \u003d lengthof r3\n  i2 \u003d 0\n}",
      "B3 {\n  if (i2 \u003e\u003d i1) goto B4 else B5\n}",
      "B4 {\n  r7 \u003d r3[i2]\n  $r9 \u003d r7.name()\n  $r10 \u003d r8.convertEnumToExternalName($r9)\n  $r4.add($r10)\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B5 {\n  $r6 \u003d EnumValues.construct(r5, r0, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumValues#construct(...3)",
        "body": "{\r\n    final int len \u003d externalValues.size();\r\n    SerializableString[] textual \u003d new SerializableString[len];\r\n    for (int i \u003d 0; i \u003c len; ++i) {\r\n        textual[i] \u003d config.compileString(externalValues.get(i));\r\n    }\r\n    return construct(enumClass, textual);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.EnumValues",
    "methodName": "construct",
    "signature": "com.fasterxml.jackson.databind.util.EnumValues construct(com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class,java.util.List)",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d externalValues.size();\r\n    SerializableString[] textual \u003d new SerializableString[len];\r\n    for (int i \u003d 0; i \u003c len; ++i) {\r\n        textual[i] \u003d config.compileString(externalValues.get(i));\r\n    }\r\n    return construct(enumClass, textual);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MapperConfig\n  Class\n  List\n  i0 \u003d r0.size()\n  r1 \u003d SerializableString)[i0]\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d r0.get(i1)\n  $r6 \u003d String) $r5\n  $r7 \u003d r4.compileString($r6)\n  r1[i1] \u003d $r7\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  $r3 \u003d EnumValues.construct(r2, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumValues#construct(...2)",
        "body": "{\r\n    if (config.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING)) {\r\n        return constructFromToString(config, annotatedClass);\r\n    }\r\n    return constructFromName(config, annotatedClass);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.EnumValues",
    "methodName": "internalMap",
    "signature": "java.util.EnumMap internalMap()",
    "visibility": "public",
    "body": "{\r\n    EnumMap\u003c?, SerializableString\u003e result \u003d _asMap;\r\n    if (result \u003d\u003d null) {\r\n        // Alas, need to create it in a round-about way, due to typing constraints...\r\n        Map\u003cEnum\u003c?\u003e, SerializableString\u003e map \u003d new LinkedHashMap\u003cEnum\u003c?\u003e, SerializableString\u003e();\r\n        for (Enum\u003c?\u003e en : _values) {\r\n            map.put(en, _textual[en.ordinal()]);\r\n        }\r\n        _asMap \u003d result \u003d new EnumMap(map);\r\n    }\r\n    return result;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r7 !\u003d null) → B1 | else → B5",
      "B2 : If(i2 \u003e\u003d i0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  EnumValues\n  r7 \u003d EnumMap _asMap\u003e\n  if (r7 !\u003d null) goto B1 else B5\n}",
      "B1 {\n  $r1 \u003d LinkedHashMap\n  new LinkedHashMap()\n  r2 \u003d Enum[] _values\u003e\n  i0 \u003d lengthof r2\n  i2 \u003d 0\n}",
      "B2 {\n  if (i2 \u003e\u003d i0) goto B3 else B4\n}",
      "B3 {\n  r4 \u003d r2[i2]\n  $r5 \u003d SerializableString[] _textual\u003e\n  $i1 \u003d r4.ordinal()\n  $r6 \u003d $r5[$i1]\n  $r1.put(r4, $r6)\n  i2 \u003d i2 + 1\n  goto B2\n}",
      "B4 {\n  $r3 \u003d EnumMap\n  new EnumMap($r1)\n  r7 \u003d $r3\n  EnumMap _asMap\u003e \u003d $r3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ExceptionUtil",
    "methodName": "rethrowIfFatal",
    "signature": "void rethrowIfFatal(java.lang.Throwable)",
    "visibility": "public",
    "body": "{\r\n    if (isFatal(throwable)) {\r\n        if (throwable instanceof Error) {\r\n            throw (Error) throwable;\r\n        }\r\n        if (throwable instanceof RuntimeException) {\r\n            throw (RuntimeException) throwable;\r\n        }\r\n        throw new RuntimeException(throwable);\r\n    }\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B6",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B3 : If($z2 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Throwable\n  $z0 \u003d ExceptionUtil.isFatal(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B6\n}",
      "B1 {\n  $z1 \u003d Error\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d Error) r0\n  throw $r3\n}",
      "B3 {\n  $z2 \u003d RuntimeException\n  if ($z2 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r2 \u003d RuntimeException) r0\n  throw $r2\n}",
      "B5 {\n  $r1 \u003d RuntimeException\n  new RuntimeException(r0)\n  throw $r1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ExceptionUtil#isFatal(...1)",
        "body": "{\r\n    return (throwable instanceof VirtualMachineError || throwable instanceof ThreadDeath || throwable instanceof InterruptedException || throwable instanceof ClassCircularityError || throwable instanceof ClassFormatError || throwable instanceof IncompatibleClassChangeError || throwable instanceof BootstrapMethodError || throwable instanceof VerifyError);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.IgnorePropertiesUtil",
    "methodName": "shouldIgnore",
    "signature": "boolean shouldIgnore(java.lang.Object,java.util.Collection,java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    if (toIgnore \u003d\u003d null \u0026\u0026 toInclude \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (toInclude \u003d\u003d null) {\r\n        return toIgnore.contains(value);\r\n    }\r\n    if (toIgnore \u003d\u003d null) {\r\n        return !toInclude.contains(value);\r\n    }\r\n    // NOTE: conflict between both, JsonIncludeProperties will take priority.\r\n    return !toInclude.contains(value) || toIgnore.contains(value);\r\n}",
    "nodes": 15,
    "edges": 18,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B3",
      "B1 : If(r1 !\u003d null) → B2 | else → B3",
      "B3 : If(r1 !\u003d null) → B4 | else → B5",
      "B5 : If(r0 !\u003d null) → B6 | else → B10",
      "B6 : If($z2 !\u003d 0) → B7 | else → B8",
      "B10 : If($z0 \u003d\u003d false) → B11 | else → B12",
      "B11 : If($z1 \u003d\u003d false) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  Object\n  Collection\n  Collection\n  if (r0 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  if (r1 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $z3 \u003d r0.contains(r2)\n  return\n}",
      "B5 {\n  if (r0 !\u003d null) goto B6 else B10\n}",
      "B6 {\n  $z2 \u003d r1.contains(r2)\n  if ($z2 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $z4 \u003d 1\n  goto B9\n}",
      "B8 {\n  $z4 \u003d 0\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $z0 \u003d r1.contains(r2)\n  if ($z0 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  $z1 \u003d r0.contains(r2)\n  if ($z1 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $z5 \u003d 1\n  goto B14\n}",
      "B13 {\n  $z5 \u003d 0\n}",
      "B14 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.IgnorePropertiesUtil",
    "methodName": "buildCheckerIfNeeded",
    "signature": "com.fasterxml.jackson.databind.util.IgnorePropertiesUtil$Checker buildCheckerIfNeeded(java.util.Set,java.util.Set)",
    "visibility": "public",
    "body": "{\r\n    // First: no-op case\r\n    if ((toInclude \u003d\u003d null) \u0026\u0026 ((toIgnore \u003d\u003d null) || toIgnore.isEmpty())) {\r\n        return null;\r\n    }\r\n    return Checker.construct(toIgnore, toInclude);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B4",
      "B1 : If(r1 \u003d\u003d null) → B2 | else → B3",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Set\n  Set\n  if (r0 !\u003d null) goto B1 else B4\n}",
      "B1 {\n  if (r1 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d r1.isEmpty()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r2 \u003d IgnorePropertiesUtil$Checker.construct(r1, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.IgnorePropertiesUtil",
    "methodName": "combineNamesToInclude",
    "signature": "java.util.Set combineNamesToInclude(java.util.Set,java.util.Set)",
    "visibility": "public",
    "body": "{\r\n    if (prevToInclude \u003d\u003d null) {\r\n        return newToInclude;\r\n    }\r\n    if (newToInclude \u003d\u003d null) {\r\n        return prevToInclude;\r\n    }\r\n    final Set\u003cString\u003e result \u003d new HashSet\u003c\u003e();\r\n    // Make the intersection with the previously included properties\r\n    for (String prop : newToInclude) {\r\n        if (prevToInclude.contains(prop)) {\r\n            result.add(prop);\r\n        }\r\n    }\r\n    return result;\r\n}",
    "nodes": 10,
    "edges": 11,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r1 !\u003d null) → B3 | else → B4",
      "B5 : If($z0 \u003d\u003d false) → B6 | else → B9",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  Set\n  Set\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r2 \u003d HashSet\n  new HashSet()\n  r3 \u003d r1.iterator()\n}",
      "B5 {\n  $z0 \u003d r3.hasNext()\n  if ($z0 \u003d\u003d false) goto B6 else B9\n}",
      "B6 {\n  $r4 \u003d r3.next()\n  r5 \u003d String) $r4\n  $z1 \u003d r0.contains(r5)\n  if ($z1 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $r2.add(r5)\n}",
      "B8 {\n  goto B5\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B5",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap",
    "methodName": "setCapacity",
    "signature": "void setCapacity(long)",
    "visibility": "public",
    "body": "{\r\n    checkArgument(capacity \u003e\u003d 0);\r\n    evictionLock.lock();\r\n    try {\r\n        this.capacity.lazySet(Math.min(capacity, MAXIMUM_CAPACITY));\r\n        drainBuffers();\r\n        evict();\r\n    } finally {\r\n        evictionLock.unlock();\r\n    }\r\n}",
    "nodes": 6,
    "edges": 5,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i3 \u003c 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PrivateMaxEntriesMap\n  l0 :\u003d @parameter0: long\n  $b1 \u003d l0 cmp 0L\n  $i3 \u003d (int) $b1\n  if ($i3 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  PrivateMaxEntriesMap.checkArgument($z0)\n  $r1 \u003d Lock evictionLock\u003e\n  $r1.lock()\n  $r2 \u003d AtomicLong capacity\u003e\n  $l2 \u003d Math.min(l0, 9223372034707292160L)\n  $r2.lazySet($l2)\n  r0.drainBuffers()\n  r0.evict()\n  $r3 \u003d Lock evictionLock\u003e\n  $r3.unlock()\n  goto B5\n}",
      "B4 {\n  $r4 :\u003d @caughtexception\n  $r5 \u003d Lock evictionLock\u003e\n  $r5.unlock()\n  throw $r4\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PrivateMaxEntriesMap#evict(...0)",
        "body": "{\r\n    // Attempts to evict entries from the map if it exceeds the maximum\r\n    // capacity. If the eviction fails due to a concurrent removal of the\r\n    // victim, that removal may cancel out the addition that triggered this\r\n    // eviction. The victim is eagerly unlinked before the removal task so\r\n    // that if an eviction is still required then a new victim will be chosen\r\n    // for removal.\r\n    while (hasOverflowed()) {\r\n        final Node\u003cK, V\u003e node \u003d evictionDeque.poll();\r\n        // If weighted values are used, then the pending operations will adjust\r\n        // the size to reflect the correct weight\r\n        if (node \u003d\u003d null) {\r\n            return;\r\n        }\r\n        data.remove(node.key, node);\r\n        makeDead(node);\r\n    }\r\n}"
      },
      {
        "name": "PrivateMaxEntriesMap#checkArgument(...1)",
        "body": "{\r\n    if (!expression) {\r\n        throw new IllegalArgumentException();\r\n    }\r\n}"
      },
      {
        "name": "PrivateMaxEntriesMap#drainBuffers(...0)",
        "body": "{\r\n    drainReadBuffers();\r\n    drainWriteBuffer();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap",
    "methodName": "clear",
    "signature": "void clear()",
    "visibility": "public",
    "body": "{\r\n    evictionLock.lock();\r\n    try {\r\n        // Discard all entries\r\n        Node\u003cK, V\u003e node;\r\n        while ((node \u003d evictionDeque.poll()) !\u003d null) {\r\n            data.remove(node.key, node);\r\n            makeDead(node);\r\n        }\r\n        // Discard all pending reads\r\n        for (int i \u003d 0; i \u003c readBuffers.length(); i++) {\r\n            readBuffers.lazySet(i, null);\r\n        }\r\n        // Apply all pending writes\r\n        Runnable task;\r\n        while ((task \u003d writeBuffer.poll()) !\u003d null) {\r\n            task.run();\r\n        }\r\n    } finally {\r\n        evictionLock.unlock();\r\n    }\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B1 : If($r4 \u003d\u003d null) → B2 | else → B3",
      "B4 : If(i1 \u003e\u003d $i0) → B5 | else → B6",
      "B6 : If($r8 \u003d\u003d null) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  PrivateMaxEntriesMap\n  $r1 \u003d Lock evictionLock\u003e\n  $r1.lock()\n}",
      "B1 {\n  $r2 \u003d LinkedDeque evictionDeque\u003e\n  $r3 \u003d $r2.poll()\n  $r4 \u003d PrivateMaxEntriesMap$Node) $r3\n  if ($r4 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r12 \u003d ConcurrentMap data\u003e\n  $r11 \u003d Object key\u003e\n  $r12.remove($r11, $r4)\n  r0.makeDead($r4)\n  goto B1\n}",
      "B3 {\n  i1 \u003d 0\n}",
      "B4 {\n  $r5 \u003d AtomicReferenceArray readBuffers\u003e\n  $i0 \u003d $r5.length()\n  if (i1 \u003e\u003d $i0) goto B5 else B6\n}",
      "B5 {\n  $r10 \u003d AtomicReferenceArray readBuffers\u003e\n  $r10.lazySet(i1, null)\n  i1 \u003d i1 + 1\n  goto B4\n}",
      "B6 {\n  $r6 \u003d Queue writeBuffer\u003e\n  $r7 \u003d $r6.poll()\n  $r8 \u003d Runnable) $r7\n  if ($r8 \u003d\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r8.run()\n  goto B6\n}",
      "B8 {\n  $r9 \u003d Lock evictionLock\u003e\n  $r9.unlock()\n  goto B10\n}",
      "B9 {\n  $r13 :\u003d @caughtexception\n  $r14 \u003d Lock evictionLock\u003e\n  $r14.unlock()\n  throw $r13\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B6",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PrivateMaxEntriesMap#makeDead(...1)",
        "body": "{\r\n    for (; ; ) {\r\n        WeightedValue\u003cV\u003e current \u003d node.get();\r\n        WeightedValue\u003cV\u003e dead \u003d new WeightedValue\u003cV\u003e(current.value, 0);\r\n        if (node.compareAndSet(current, dead)) {\r\n            weightedSize.lazySet(weightedSize.get() - Math.abs(current.weight));\r\n            return;\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap",
    "methodName": "containsValue",
    "signature": "boolean containsValue(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    checkNotNull(value);\r\n    for (Node\u003cK, V\u003e node : data.values()) {\r\n        if (node.getValue().equals(value)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  PrivateMaxEntriesMap\n  Object\n  PrivateMaxEntriesMap.checkNotNull(r0)\n  $r2 \u003d ConcurrentMap data\u003e\n  $r3 \u003d $r2.values()\n  r4 \u003d $r3.iterator()\n}",
      "B1 {\n  $z0 \u003d r4.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r5 \u003d r4.next()\n  r6 \u003d PrivateMaxEntriesMap$Node) $r5\n  $r7 \u003d r6.getValue()\n  $z1 \u003d $r7.equals(r0)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PrivateMaxEntriesMap#checkNotNull(...1)",
        "body": "{\r\n    if (o \u003d\u003d null) {\r\n        throw new NullPointerException();\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap",
    "methodName": "get",
    "signature": "java.lang.Object get(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final Node\u003cK, V\u003e node \u003d data.get(key);\r\n    if (node \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    afterRead(node);\r\n    return node.getValue();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PrivateMaxEntriesMap\n  Object\n  $r2 \u003d ConcurrentMap data\u003e\n  $r3 \u003d $r2.get(r1)\n  r4 \u003d PrivateMaxEntriesMap$Node) $r3\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r0.afterRead(r4)\n  $r5 \u003d r4.getValue()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PrivateMaxEntriesMap#afterRead(...1)",
        "body": "{\r\n    final int bufferIndex \u003d readBufferIndex();\r\n    final long writeCount \u003d recordRead(bufferIndex, node);\r\n    drainOnReadIfNeeded(bufferIndex, writeCount);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap",
    "methodName": "remove",
    "signature": "java.lang.Object remove(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final Node\u003cK, V\u003e node \u003d data.remove(key);\r\n    if (node \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    makeRetired(node);\r\n    afterWrite(new RemovalTask(node));\r\n    return node.getValue();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PrivateMaxEntriesMap\n  Object\n  $r2 \u003d ConcurrentMap data\u003e\n  $r3 \u003d $r2.remove(r1)\n  r4 \u003d PrivateMaxEntriesMap$Node) $r3\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r0.makeRetired(r4)\n  $r5 \u003d PrivateMaxEntriesMap$RemovalTask\n  new PrivateMaxEntriesMap$RemovalTask(r0, r4)\n  r0.afterWrite($r5)\n  $r6 \u003d r4.getValue()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PrivateMaxEntriesMap#makeRetired(...1)",
        "body": "{\r\n    for (; ; ) {\r\n        final WeightedValue\u003cV\u003e current \u003d node.get();\r\n        if (!current.isAlive()) {\r\n            return;\r\n        }\r\n        final WeightedValue\u003cV\u003e retired \u003d new WeightedValue\u003cV\u003e(current.value, -current.weight);\r\n        if (node.compareAndSet(current, retired)) {\r\n            return;\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "PrivateMaxEntriesMap#afterWrite(...1)",
        "body": "{\r\n    writeBuffer.add(task);\r\n    drainStatus.lazySet(REQUIRED);\r\n    tryToDrainBuffers();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap",
    "methodName": "remove",
    "signature": "boolean remove(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final Node\u003cK, V\u003e node \u003d data.get(key);\r\n    if ((node \u003d\u003d null) || (value \u003d\u003d null)) {\r\n        return false;\r\n    }\r\n    WeightedValue\u003cV\u003e weightedValue \u003d node.get();\r\n    for (; ; ) {\r\n        if (weightedValue.contains(value)) {\r\n            if (tryToRetire(node, weightedValue)) {\r\n                if (data.remove(key, node)) {\r\n                    afterWrite(new RemovalTask(node));\r\n                    return true;\r\n                }\r\n            } else {\r\n                weightedValue \u003d node.get();\r\n                if (weightedValue.isAlive()) {\r\n                    // retry as an intermediate update may have replaced the value with\r\n                    // an equal instance that has a different reference identity\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}",
    "nodes": 11,
    "edges": 14,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r4 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r5 !\u003d null) → B2 | else → B3",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B10",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B8",
      "B6 : If($z3 \u003d\u003d false) → B7 | else → B10",
      "B8 : If($z2 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  PrivateMaxEntriesMap\n  Object\n  Object\n  $r2 \u003d ConcurrentMap data\u003e\n  $r3 \u003d $r2.get(r1)\n  r4 \u003d PrivateMaxEntriesMap$Node) $r3\n  if (r4 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r5 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r6 \u003d r4.get()\n  r10 \u003d PrivateMaxEntriesMap$WeightedValue) $r6\n}",
      "B4 {\n  $z0 \u003d r10.contains(r5)\n  if ($z0 \u003d\u003d false) goto B5 else B10\n}",
      "B5 {\n  $z1 \u003d r0.tryToRetire(r4, r10)\n  if ($z1 \u003d\u003d false) goto B6 else B8\n}",
      "B6 {\n  $r8 \u003d ConcurrentMap data\u003e\n  $z3 \u003d $r8.remove(r1, r4)\n  if ($z3 \u003d\u003d false) goto B7 else B10\n}",
      "B7 {\n  $r9 \u003d PrivateMaxEntriesMap$RemovalTask\n  new PrivateMaxEntriesMap$RemovalTask(r0, r4)\n  r0.afterWrite($r9)\n  return\n}",
      "B8 {\n  $r7 \u003d r4.get()\n  r10 \u003d PrivateMaxEntriesMap$WeightedValue) $r7\n  $z2 \u003d r10.isAlive()\n  if ($z2 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  goto B4\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B10",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B4",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PrivateMaxEntriesMap#tryToRetire(...2)",
        "body": "{\r\n    if (expect.isAlive()) {\r\n        final WeightedValue\u003cV\u003e retired \u003d new WeightedValue\u003cV\u003e(expect.value, -expect.weight);\r\n        return node.compareAndSet(expect, retired);\r\n    }\r\n    return false;\r\n}"
      },
      {
        "name": "PrivateMaxEntriesMap#afterWrite(...1)",
        "body": "{\r\n    writeBuffer.add(task);\r\n    drainStatus.lazySet(REQUIRED);\r\n    tryToDrainBuffers();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap",
    "methodName": "replace",
    "signature": "java.lang.Object replace(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 10,
    "edges": 11,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r6 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B9",
      "B5 : If(i1 !\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  PrivateMaxEntriesMap\n  Object\n  Object\n  PrivateMaxEntriesMap.checkNotNull(r0)\n  PrivateMaxEntriesMap.checkNotNull(r1)\n  $r2 \u003d PrivateMaxEntriesMap$WeightedValue\n  new PrivateMaxEntriesMap$WeightedValue(r1, 1)\n  $r4 \u003d ConcurrentMap data\u003e\n  $r5 \u003d $r4.get(r0)\n  r6 \u003d PrivateMaxEntriesMap$Node) $r5\n  if (r6 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r7 \u003d r6.get()\n  $r8 \u003d PrivateMaxEntriesMap$WeightedValue) $r7\n  $z0 \u003d $r8.isAlive()\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z1 \u003d r6.compareAndSet($r8, $r2)\n  if ($z1 \u003d\u003d false) goto B5 else B9\n}",
      "B5 {\n  $i0 \u003d PrivateMaxEntriesMap$WeightedValue: int weight\u003e\n  i1 \u003d 1 - $i0\n  if (i1 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  r3.afterRead(r6)\n  goto B8\n}",
      "B7 {\n  $r9 \u003d PrivateMaxEntriesMap$UpdateTask\n  new PrivateMaxEntriesMap$UpdateTask(r3, r6, i1)\n  r3.afterWrite($r9)\n}",
      "B8 {\n  $r10 \u003d Object value\u003e\n  return\n}",
      "B9 {\n  goto B2\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B2"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap",
    "methodName": "replace",
    "signature": "boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r7 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B3 : If($z1 !\u003d 0) → B4 | else → B5",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B10",
      "B6 : If(i1 !\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  PrivateMaxEntriesMap\n  Object\n  Object\n  Object\n  PrivateMaxEntriesMap.checkNotNull(r0)\n  PrivateMaxEntriesMap.checkNotNull(r1)\n  PrivateMaxEntriesMap.checkNotNull(r2)\n  $r3 \u003d PrivateMaxEntriesMap$WeightedValue\n  new PrivateMaxEntriesMap$WeightedValue(r2, 1)\n  $r5 \u003d ConcurrentMap data\u003e\n  $r6 \u003d $r5.get(r0)\n  r7 \u003d PrivateMaxEntriesMap$Node) $r6\n  if (r7 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r8 \u003d r7.get()\n  $r9 \u003d PrivateMaxEntriesMap$WeightedValue) $r8\n  $z0 \u003d $r9.isAlive()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $z1 \u003d $r9.contains(r1)\n  if ($z1 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $z2 \u003d r7.compareAndSet($r9, $r3)\n  if ($z2 \u003d\u003d false) goto B6 else B10\n}",
      "B6 {\n  $i0 \u003d PrivateMaxEntriesMap$WeightedValue: int weight\u003e\n  i1 \u003d 1 - $i0\n  if (i1 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  r4.afterRead(r7)\n  goto B9\n}",
      "B8 {\n  $r10 \u003d PrivateMaxEntriesMap$UpdateTask\n  new PrivateMaxEntriesMap$UpdateTask(r4, r7, i1)\n  r4.afterWrite($r10)\n}",
      "B9 {\n  return\n}",
      "B10 {\n  goto B2\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B2"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap",
    "methodName": "keySet",
    "signature": "java.util.Set keySet()",
    "visibility": "public",
    "body": "{\r\n    final Set\u003cK\u003e ks \u003d keySet;\r\n    return (ks \u003d\u003d null) ? (keySet \u003d new KeySet()) : ks;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PrivateMaxEntriesMap\n  r1 \u003d Set keySet\u003e\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d PrivateMaxEntriesMap$KeySet\n  $r2 \u003d $r3\n  new PrivateMaxEntriesMap$KeySet(r0)\n  Set keySet\u003e \u003d $r3\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap",
    "methodName": "values",
    "signature": "java.util.Collection values()",
    "visibility": "public",
    "body": "{\r\n    final Collection\u003cV\u003e vs \u003d values;\r\n    return (vs \u003d\u003d null) ? (values \u003d new Values()) : vs;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PrivateMaxEntriesMap\n  r1 \u003d Collection values\u003e\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d PrivateMaxEntriesMap$Values\n  $r2 \u003d $r3\n  new PrivateMaxEntriesMap$Values(r0)\n  Collection values\u003e \u003d $r3\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap",
    "methodName": "entrySet",
    "signature": "java.util.Set entrySet()",
    "visibility": "public",
    "body": "{\r\n    final Set\u003cEntry\u003cK, V\u003e\u003e es \u003d entrySet;\r\n    return (es \u003d\u003d null) ? (entrySet \u003d new EntrySet()) : es;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PrivateMaxEntriesMap\n  r1 \u003d Set entrySet\u003e\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d PrivateMaxEntriesMap$EntrySet\n  $r2 \u003d $r3\n  new PrivateMaxEntriesMap$EntrySet(r0)\n  Set entrySet\u003e \u003d $r3\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ISO8601Utils",
    "methodName": "format",
    "signature": "java.lang.String format(java.util.Date,boolean,java.util.TimeZone,java.util.Locale)",
    "visibility": "public",
    "body": "{\r\n    Calendar calendar \u003d new GregorianCalendar(tz, loc);\r\n    calendar.setTime(date);\r\n    // estimate capacity of buffer as close as we can (yeah, that\u0027s pedantic ;)\r\n    StringBuilder sb \u003d new StringBuilder(30);\r\n    sb.append(String.format(\"%04d-%02d-%02dT%02d:%02d:%02d\", calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH), calendar.get(Calendar.HOUR_OF_DAY), calendar.get(Calendar.MINUTE), calendar.get(Calendar.SECOND)));\r\n    if (millis) {\r\n        sb.append(String.format(\".%03d\", calendar.get(Calendar.MILLISECOND)));\r\n    }\r\n    int offset \u003d tz.getOffset(calendar.getTimeInMillis());\r\n    if (offset !\u003d 0) {\r\n        int hours \u003d Math.abs((offset / (60 * 1000)) / 60);\r\n        int minutes \u003d Math.abs((offset / (60 * 1000)) % 60);\r\n        sb.append(String.format(\"%c%02d:%02d\", (offset \u003c 0 ? \u0027-\u0027 : \u0027+\u0027), hours, minutes));\r\n    } else {\r\n        sb.append(\u0027Z\u0027);\r\n    }\r\n    return sb.toString();\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($i15 \u003d\u003d false) → B3 | else → B7",
      "B3 : If($i15 \u003e\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Date\n  z0 :\u003d @parameter1: boolean\n  TimeZone\n  Locale\n  $r22 \u003d GregorianCalendar\n  new GregorianCalendar(r1, r2)\n  $r22.setTime(r3)\n  $r23 \u003d StringBuilder\n  new StringBuilder(30)\n  $r5 \u003d Object)[6]\n  $i0 \u003d $r22.get(1)\n  $r6 \u003d Integer.valueOf($i0)\n  $r5[0] \u003d $r6\n  $i1 \u003d $r22.get(2)\n  $i2 \u003d $i1 + 1\n  $r7 \u003d Integer.valueOf($i2)\n  $r5[1] \u003d $r7\n  $i3 \u003d $r22.get(5)\n  $r8 \u003d Integer.valueOf($i3)\n  $r5[2] \u003d $r8\n  $i4 \u003d $r22.get(11)\n  $r9 \u003d Integer.valueOf($i4)\n  $r5[3] \u003d $r9\n  $i5 \u003d $r22.get(12)\n  $r10 \u003d Integer.valueOf($i5)\n  $r5[4] \u003d $r10\n  $i6 \u003d $r22.get(13)\n  $r11 \u003d Integer.valueOf($i6)\n  $r5[5] \u003d $r11\n  $r12 \u003d String.format(\"%04d-%02d-%02dT%02d:%02d:%02d\", $r5)\n  $r23.append($r12)\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r19 \u003d Object)[1]\n  $i14 \u003d $r22.get(14)\n  $r20 \u003d Integer.valueOf($i14)\n  $r19[0] \u003d $r20\n  $r21 \u003d String.format(\".%03d\", $r19)\n  $r23.append($r21)\n}",
      "B2 {\n  $l7 \u003d $r22.getTimeInMillis()\n  $i15 \u003d r1.getOffset($l7)\n  if ($i15 \u003d\u003d false) goto B3 else B7\n}",
      "B3 {\n  $i18 \u003d (int) 60000\n  $i8 \u003d $i15 / $i18\n  $i9 \u003d $i8 / 60\n  i10 \u003d Math.abs($i9)\n  $i20 \u003d (int) 60000\n  $i11 \u003d $i15 / $i20\n  $i12 \u003d $i11 % 60\n  i13 \u003d Math.abs($i12)\n  $r14 \u003d Object)[3]\n  if ($i15 \u003e\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $c16 \u003d 45\n  goto B6\n}",
      "B5 {\n  $c16 \u003d 43\n}",
      "B6 {\n  $r15 \u003d Character.valueOf($c16)\n  $r14[0] \u003d $r15\n  $r16 \u003d Integer.valueOf(i10)\n  $r14[1] \u003d $r16\n  $r17 \u003d Integer.valueOf(i13)\n  $r14[2] \u003d $r17\n  $r18 \u003d String.format(\"%c%02d:%02d\", $r14)\n  $r23.append($r18)\n  goto B8\n}",
      "B7 {\n  $r23.append(90)\n}",
      "B8 {\n  $r13 \u003d $r23.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ISO8601Utils",
    "methodName": "parse",
    "signature": "java.util.Date parse(java.lang.String,java.text.ParsePosition)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(date);\r\n    Exception fail \u003d null;\r\n    try {\r\n        int offset \u003d pos.getIndex();\r\n        // extract year\r\n        int year \u003d parseInt(date, offset, offset +\u003d 4);\r\n        if (checkOffset(date, offset, \u0027-\u0027)) {\r\n            offset +\u003d 1;\r\n        }\r\n        // extract month\r\n        int month \u003d parseInt(date, offset, offset +\u003d 2);\r\n        if (checkOffset(date, offset, \u0027-\u0027)) {\r\n            offset +\u003d 1;\r\n        }\r\n        // extract day\r\n        int day \u003d parseInt(date, offset, offset +\u003d 2);\r\n        // default time value\r\n        int hour \u003d 0;\r\n        int minutes \u003d 0;\r\n        int seconds \u003d 0;\r\n        // always use 0 otherwise returned date will include millis of current time\r\n        int milliseconds \u003d 0;\r\n        // if the value has no time component (and no time zone), we are done\r\n        boolean hasT \u003d checkOffset(date, offset, \u0027T\u0027);\r\n        if (!hasT \u0026\u0026 (date.length() \u003c\u003d offset)) {\r\n            Calendar calendar \u003d new GregorianCalendar(year, month - 1, day);\r\n            pos.setIndex(offset);\r\n            return calendar.getTime();\r\n        }\r\n        if (hasT) {\r\n            // extract hours, minutes, seconds and milliseconds\r\n            hour \u003d parseInt(date, offset +\u003d 1, offset +\u003d 2);\r\n            if (checkOffset(date, offset, \u0027:\u0027)) {\r\n                offset +\u003d 1;\r\n            }\r\n            minutes \u003d parseInt(date, offset, offset +\u003d 2);\r\n            if (checkOffset(date, offset, \u0027:\u0027)) {\r\n                offset +\u003d 1;\r\n            }\r\n            // second and milliseconds can be optional\r\n            if (date.length() \u003e offset) {\r\n                char c \u003d date.charAt(offset);\r\n                if (c !\u003d \u0027Z\u0027 \u0026\u0026 c !\u003d \u0027+\u0027 \u0026\u0026 c !\u003d \u0027-\u0027) {\r\n                    seconds \u003d parseInt(date, offset, offset +\u003d 2);\r\n                    // truncate up to 3 leap seconds\r\n                    if (seconds \u003e 59 \u0026\u0026 seconds \u003c 63)\r\n                        seconds \u003d 59;\r\n                    // milliseconds can be optional in the format\r\n                    if (checkOffset(date, offset, \u0027.\u0027)) {\r\n                        offset +\u003d 1;\r\n                        // assume at least one digit\r\n                        int endOffset \u003d indexOfNonDigit(date, offset + 1);\r\n                        // parse up to 3 digits\r\n                        int parseEndOffset \u003d Math.min(endOffset, offset + 3);\r\n                        int fraction \u003d parseInt(date, offset, parseEndOffset);\r\n                        // compensate for \"missing\" digits\r\n                        switch(// number of digits parsed\r\n                        parseEndOffset - offset) {\r\n                            case 2:\r\n                                milliseconds \u003d fraction * 10;\r\n                                break;\r\n                            case 1:\r\n                                milliseconds \u003d fraction * 100;\r\n                                break;\r\n                            default:\r\n                                milliseconds \u003d fraction;\r\n                        }\r\n                        offset \u003d endOffset;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // extract timezone\r\n        if (date.length() \u003c\u003d offset) {\r\n            throw new IllegalArgumentException(\"No time zone indicator\");\r\n        }\r\n        TimeZone timezone \u003d null;\r\n        char timezoneIndicator \u003d date.charAt(offset);\r\n        if (timezoneIndicator \u003d\u003d \u0027Z\u0027) {\r\n            timezone \u003d TIMEZONE_Z;\r\n            offset +\u003d 1;\r\n        } else if (timezoneIndicator \u003d\u003d \u0027+\u0027 || timezoneIndicator \u003d\u003d \u0027-\u0027) {\r\n            String timezoneOffset \u003d date.substring(offset);\r\n            offset +\u003d timezoneOffset.length();\r\n            // 18-Jun-2015, tatu: Minor simplification, skip offset of \"+0000\"/\"+00:00\"\r\n            if (\"+0000\".equals(timezoneOffset) || \"+00:00\".equals(timezoneOffset)) {\r\n                timezone \u003d TIMEZONE_Z;\r\n            } else {\r\n                // 18-Jun-2015, tatu: Looks like offsets only work from GMT, not UTC...\r\n                //    not sure why, but that\u0027s the way it looks. Further, Javadocs for\r\n                //    `java.util.TimeZone` specifically instruct use of GMT as base for\r\n                //    custom timezones... odd.\r\n                String timezoneId \u003d \"GMT\" + timezoneOffset;\r\n                //                    String timezoneId \u003d \"UTC\" + timezoneOffset;\r\n                timezone \u003d TimeZone.getTimeZone(timezoneId);\r\n                String act \u003d timezone.getID();\r\n                if (!act.equals(timezoneId)) {\r\n                    /* 22-Jan-2015, tatu: Looks like canonical version has colons, but we may be given\r\n                         *    one without. If so, don\u0027t sweat.\r\n                         *   Yes, very inefficient. Hopefully not hit often.\r\n                         *   If it becomes a perf problem, add \u0027loose\u0027 comparison instead.\r\n                         */\r\n                    String cleaned \u003d act.replace(\":\", \"\");\r\n                    if (!cleaned.equals(timezoneId)) {\r\n                        throw new IndexOutOfBoundsException(\"Mismatching time zone indicator: \" + timezoneId + \" given, resolves to \" + timezone.getID());\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            throw new IndexOutOfBoundsException(\"Invalid time zone indicator \u0027\" + timezoneIndicator + \"\u0027\");\r\n        }\r\n        Calendar calendar \u003d new GregorianCalendar(timezone);\r\n        calendar.setLenient(false);\r\n        calendar.set(Calendar.YEAR, year);\r\n        calendar.set(Calendar.MONTH, month - 1);\r\n        calendar.set(Calendar.DAY_OF_MONTH, day);\r\n        calendar.set(Calendar.HOUR_OF_DAY, hour);\r\n        calendar.set(Calendar.MINUTE, minutes);\r\n        calendar.set(Calendar.SECOND, seconds);\r\n        calendar.set(Calendar.MILLISECOND, milliseconds);\r\n        pos.setIndex(offset);\r\n        return calendar.getTime();\r\n        // If we get a ParseException it\u0027ll already have the right message/offset.\r\n        // Other exception types can convert here.\r\n    } catch (Exception e) {\r\n        fail \u003d e;\r\n    }\r\n    String input \u003d (date \u003d\u003d null) ? null : (\u0027\"\u0027 + date + \u0027\"\u0027);\r\n    String msg \u003d fail.getMessage();\r\n    if (msg \u003d\u003d null || msg.isEmpty()) {\r\n        msg \u003d \"(\" + fail.getClass().getName() + \")\";\r\n    }\r\n    ParseException ex \u003d new ParseException(\"Failed to parse date \" + input + \": \" + msg, pos.getIndex());\r\n    ex.initCause(fail);\r\n    throw ex;\r\n}",
    "nodes": 47,
    "edges": 68,
    "cc": 23,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z8 !\u003d 0) → B5 | else → B7",
      "B5 : If($i7 \u003e i15) → B6 | else → B7",
      "B7 : If($z8 \u003d\u003d false) → B8 | else → B25",
      "B8 : If($z6 \u003d\u003d false) → B9 | else → B10",
      "B10 : If($z7 \u003d\u003d false) → B11 | else → B12",
      "B12 : If($i2 \u003c\u003d i15) → B13 | else → B25",
      "B13 : If($i31 \u003d\u003d 90) → B14 | else → B25",
      "B14 : If($i32 \u003d\u003d 43) → B15 | else → B25",
      "B15 : If($i33 \u003d\u003d 45) → B16 | else → B25",
      "B16 : If(i18 \u003c\u003d 59) → B17 | else → B19",
      "B17 : If(i18 \u003e\u003d 63) → B18 | else → B19",
      "B19 : If($z10 \u003d\u003d false) → B20 | else → B25",
      "B20 : If(switch-on $i6) → B22 | else → B21",
      "B25 : If($i27 \u003e i15) → B26 | else → B27",
      "B27 : If($i34 !\u003d 90) → B28 | else → B29",
      "B29 : If($i35 \u003d\u003d 43) → B30 | else → B31",
      "B30 : If($i36 !\u003d 45) → B31 | else → B38",
      "B31 : If($z2 !\u003d 0) → B32 | else → B33",
      "B32 : If($z3 \u003d\u003d false) → B33 | else → B34",
      "B34 : If($z4 !\u003d 0) → B35 | else → B37",
      "B35 : If($z5 !\u003d 0) → B36 | else → B37",
      "B40 : If(r0 !\u003d null) → B41 | else → B42",
      "B43 : If($r20 \u003d\u003d null) → B44 | else → B45",
      "B44 : If($z9 \u003d\u003d false) → B45 | else → B46"
    ],
    "blockList": [
      "B0 {\n  String\n  ParsePosition\n  Objects.requireNonNull(r0)\n  i11 \u003d r1.getIndex()\n  i12 \u003d i11 + 4\n  i13 \u003d ISO8601Utils.parseInt(r0, i11, i12)\n  $z0 \u003d ISO8601Utils.checkOffset(r0, i12, 45)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  i12 \u003d i12 + 1\n}",
      "B2 {\n  i14 \u003d i12 + 2\n  $i10 \u003d ISO8601Utils.parseInt(r0, i12, i14)\n  $z1 \u003d ISO8601Utils.checkOffset(r0, i14, 45)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  i14 \u003d i14 + 1\n}",
      "B4 {\n  i15 \u003d i14 + 2\n  $i9 \u003d ISO8601Utils.parseInt(r0, i14, i15)\n  i16 \u003d 0\n  i17 \u003d 0\n  i18 \u003d 0\n  i19 \u003d 0\n  $z8 \u003d ISO8601Utils.checkOffset(r0, i15, 84)\n  if ($z8 !\u003d 0) goto B5 else B7\n}",
      "B5 {\n  $i7 \u003d r0.length()\n  if ($i7 \u003e i15) goto B6 else B7\n}",
      "B6 {\n  $r28 \u003d GregorianCalendar\n  $i8 \u003d $i10 - 1\n  new GregorianCalendar(i13, $i8, $i9)\n  r1.setIndex(i15)\n  $r16 \u003d $r28.getTime()\n  return\n}",
      "B7 {\n  if ($z8 \u003d\u003d false) goto B8 else B25\n}",
      "B8 {\n  i20 \u003d i15 + 1\n  i21 \u003d i20 + 2\n  i16 \u003d ISO8601Utils.parseInt(r0, i20, i21)\n  $z6 \u003d ISO8601Utils.checkOffset(r0, i21, 58)\n  if ($z6 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  i21 \u003d i21 + 1\n}",
      "B10 {\n  i15 \u003d i21 + 2\n  i17 \u003d ISO8601Utils.parseInt(r0, i21, i15)\n  $z7 \u003d ISO8601Utils.checkOffset(r0, i15, 58)\n  if ($z7 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  i15 \u003d i15 + 1\n}",
      "B12 {\n  $i2 \u003d r0.length()\n  if ($i2 \u003c\u003d i15) goto B13 else B25\n}",
      "B13 {\n  c22 \u003d r0.charAt(i15)\n  $i31 \u003d (int) c22\n  if ($i31 \u003d\u003d 90) goto B14 else B25\n}",
      "B14 {\n  $i32 \u003d (int) c22\n  if ($i32 \u003d\u003d 43) goto B15 else B25\n}",
      "B15 {\n  $i33 \u003d (int) c22\n  if ($i33 \u003d\u003d 45) goto B16 else B25\n}",
      "B16 {\n  $i3 \u003d i15\n  i15 \u003d i15 + 2\n  i18 \u003d ISO8601Utils.parseInt(r0, $i3, i15)\n  if (i18 \u003c\u003d 59) goto B17 else B19\n}",
      "B17 {\n  if (i18 \u003e\u003d 63) goto B18 else B19\n}",
      "B18 {\n  i18 \u003d 59\n}",
      "B19 {\n  $z10 \u003d ISO8601Utils.checkOffset(r0, i15, 46)\n  if ($z10 \u003d\u003d false) goto B20 else B25\n}",
      "B20 {\n  i23 \u003d i15 + 1\n  $i4 \u003d i23 + 1\n  i24 \u003d ISO8601Utils.indexOfNonDigit(r0, $i4)\n  $i5 \u003d i23 + 3\n  i25 \u003d Math.min(i24, $i5)\n  i26 \u003d ISO8601Utils.parseInt(r0, i23, i25)\n  $i6 \u003d i25 - i23\n  lookupswitch($i6) {     case 1: goto i19 \u003d i26 * 100;     case 2: goto i19 \u003d i26 * 10;     default: goto i19 \u003d i26; }\n}",
      "B21 {\n  i19 \u003d i26 * 10\n  goto B24\n}",
      "B22 {\n  i19 \u003d i26 * 100\n  goto B24\n}",
      "B23 {\n  i19 \u003d i26\n}",
      "B24 {\n  i15 \u003d i24\n}",
      "B25 {\n  $i27 \u003d r0.length()\n  if ($i27 \u003e i15) goto B26 else B27\n}",
      "B26 {\n  $r29 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"No time zone indicator\")\n  throw $r29\n}",
      "B27 {\n  c28 \u003d r0.charAt(i15)\n  $i34 \u003d (int) c28\n  if ($i34 !\u003d 90) goto B28 else B29\n}",
      "B28 {\n  r21 \u003d TimeZone TIMEZONE_Z\u003e\n  i29 \u003d i15 + 1\n  goto B39\n}",
      "B29 {\n  $i35 \u003d (int) c28\n  if ($i35 \u003d\u003d 43) goto B30 else B31\n}",
      "B30 {\n  $i36 \u003d (int) c28\n  if ($i36 !\u003d 45) goto B31 else B38\n}",
      "B31 {\n  $r13 \u003d r0.substring(i15)\n  $i0 \u003d $r13.length()\n  i29 \u003d i15 + $i0\n  $r2 \u003d \"+0000\"\n  $z2 \u003d $r2.equals($r13)\n  if ($z2 !\u003d 0) goto B32 else B33\n}",
      "B32 {\n  $r5 \u003d \"+00:00\"\n  $z3 \u003d $r5.equals($r13)\n  if ($z3 \u003d\u003d false) goto B33 else B34\n}",
      "B33 {\n  r21 \u003d TimeZone TIMEZONE_Z\u003e\n  goto B37\n}",
      "B34 {\n  r22 \u003d dynInvoke makeConcatWithConstants($r13)\n  r21 \u003d TimeZone.getTimeZone(r22)\n  r6 \u003d r21.getID()\n  $z4 \u003d r6.equals(r22)\n  if ($z4 !\u003d 0) goto B35 else B37\n}",
      "B35 {\n  r7 \u003d r6.replace(\":\", \"\")\n  $z5 \u003d r7.equals(r22)\n  if ($z5 !\u003d 0) goto B36 else B37\n}",
      "B36 {\n  $r30 \u003d IndexOutOfBoundsException\n  $r9 \u003d r21.getID()\n  $r10 \u003d dynInvoke makeConcatWithConstants(r22, $r9)\n  new IndexOutOfBoundsException($r10)\n  throw $r30\n}",
      "B37 {\n  goto B39\n}",
      "B38 {\n  $r31 \u003d IndexOutOfBoundsException\n  $r12 \u003d dynInvoke makeConcatWithConstants(c28)\n  new IndexOutOfBoundsException($r12)\n  throw $r31\n}",
      "B39 {\n  $r32 \u003d GregorianCalendar\n  new GregorianCalendar(r21)\n  $r32.setLenient(0)\n  $r32.set(1, i13)\n  $i1 \u003d $i10 - 1\n  $r32.set(2, $i1)\n  $r32.set(5, $i9)\n  $r32.set(11, i16)\n  $r32.set(12, i17)\n  $r32.set(13, i18)\n  $r32.set(14, i19)\n  r1.setIndex(i29)\n  $r4 \u003d $r32.getTime()\n  return\n}",
      "B40 {\n  $r17 :\u003d @caughtexception\n  if (r0 !\u003d null) goto B41 else B42\n}",
      "B41 {\n  $r23 \u003d null\n  goto B43\n}",
      "B42 {\n  $r23 \u003d dynInvoke makeConcatWithConstants(r0)\n}",
      "B43 {\n  r24 \u003d $r23\n  $r20 \u003d $r17.getMessage()\n  r25 \u003d $r20\n  if ($r20 \u003d\u003d null) goto B44 else B45\n}",
      "B44 {\n  $z9 \u003d $r20.isEmpty()\n  if ($z9 \u003d\u003d false) goto B45 else B46\n}",
      "B45 {\n  $r18 \u003d $r17.getClass()\n  $r19 \u003d $r18.getName()\n  r25 \u003d dynInvoke makeConcatWithConstants($r19)\n}",
      "B46 {\n  $r33 \u003d ParseException\n  $r27 \u003d dynInvoke makeConcatWithConstants(r24, r25)\n  $i30 \u003d r1.getIndex()\n  new ParseException($r27, $i30)\n  $r33.initCause($r17)\n  throw $r33\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B25",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B25",
      "B13 --\u003e B14",
      "B13 --\u003e B25",
      "B14 --\u003e B15",
      "B14 --\u003e B25",
      "B15 --\u003e B16",
      "B15 --\u003e B25",
      "B16 --\u003e B17",
      "B16 --\u003e B19",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B19 --\u003e B25",
      "B20 --\u003e B22",
      "B20 --\u003e B21",
      "B20 --\u003e B23",
      "B21 --\u003e B24",
      "B22 --\u003e B24",
      "B23 --\u003e B24",
      "B24 --\u003e B25",
      "B25 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e [EXIT]",
      "B27 --\u003e B28",
      "B27 --\u003e B29",
      "B28 --\u003e B39",
      "B29 --\u003e B30",
      "B29 --\u003e B31",
      "B30 --\u003e B31",
      "B30 --\u003e B38",
      "B31 --\u003e B32",
      "B31 --\u003e B33",
      "B32 --\u003e B33",
      "B32 --\u003e B34",
      "B33 --\u003e B37",
      "B34 --\u003e B35",
      "B34 --\u003e B37",
      "B35 --\u003e B36",
      "B35 --\u003e B37",
      "B36 --\u003e [EXIT]",
      "B37 --\u003e B39",
      "B38 --\u003e [EXIT]",
      "B39 --\u003e [EXIT]",
      "B40 --\u003e B41",
      "B40 --\u003e B42",
      "B41 --\u003e B43",
      "B42 --\u003e B43",
      "B43 --\u003e B44",
      "B43 --\u003e B45",
      "B44 --\u003e B45",
      "B44 --\u003e B46",
      "B45 --\u003e B46",
      "B46 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ISO8601Utils#parseInt(...3)",
        "body": "{\r\n    if (beginIndex \u003c 0 || endIndex \u003e value.length() || beginIndex \u003e endIndex) {\r\n        throw new NumberFormatException(value);\r\n    }\r\n    // use same logic as in Integer.parseInt() but less generic we\u0027re not supporting negative values\r\n    int i \u003d beginIndex;\r\n    int result \u003d 0;\r\n    int digit;\r\n    if (i \u003c endIndex) {\r\n        digit \u003d Character.digit(value.charAt(i++), 10);\r\n        if (digit \u003c 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value.substring(beginIndex, endIndex));\r\n        }\r\n        result \u003d -digit;\r\n    }\r\n    while (i \u003c endIndex) {\r\n        digit \u003d Character.digit(value.charAt(i++), 10);\r\n        if (digit \u003c 0) {\r\n            throw new NumberFormatException(\"Invalid number: \" + value.substring(beginIndex, endIndex));\r\n        }\r\n        result *\u003d 10;\r\n        result -\u003d digit;\r\n    }\r\n    return -result;\r\n}"
      },
      {
        "name": "ISO8601Utils#indexOfNonDigit(...2)",
        "body": "{\r\n    for (int i \u003d offset; i \u003c string.length(); i++) {\r\n        char c \u003d string.charAt(i);\r\n        if (c \u003c \u00270\u0027 || c \u003e \u00279\u0027)\r\n            return i;\r\n    }\r\n    return string.length();\r\n}"
      },
      {
        "name": "ISO8601Utils#checkOffset(...3)",
        "body": "{\r\n    return (offset \u003c value.length()) \u0026\u0026 (value.charAt(offset) \u003d\u003d expected);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.JSONPObject",
    "methodName": "serialize",
    "signature": "void serialize(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    // First, wrapping:\r\n    gen.writeRaw(_function);\r\n    gen.writeRaw(\u0027(\u0027);\r\n    if (_value \u003d\u003d null) {\r\n        provider.defaultSerializeNull(gen);\r\n    } else {\r\n        // NOTE: Escape line-separator characters that break JSONP only if no custom character escapes are set.\r\n        // If custom escapes are in place JSONP-breaking characters will not be escaped and it is recommended to\r\n        // add escaping for those (see JsonpCharacterEscapes class).\r\n        boolean override \u003d (gen.getCharacterEscapes() \u003d\u003d null);\r\n        if (override) {\r\n            gen.setCharacterEscapes(JsonpCharacterEscapes.instance());\r\n        }\r\n        try {\r\n            if (_serializationType !\u003d null) {\r\n                provider.findTypedValueSerializer(_serializationType, true, null).serialize(_value, gen, provider);\r\n            } else {\r\n                provider.findTypedValueSerializer(_value.getClass(), true, null).serialize(_value, gen, provider);\r\n            }\r\n        } finally {\r\n            if (override) {\r\n                gen.setCharacterEscapes(null);\r\n            }\r\n        }\r\n    }\r\n    gen.writeRaw(\u0027)\u0027);\r\n}",
    "nodes": 16,
    "edges": 20,
    "cc": 6,
    "flowSummary": [
      "B0 : If($r3 !\u003d null) → B1 | else → B2",
      "B2 : If($r4 !\u003d null) → B3 | else → B4",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B7",
      "B7 : If($r5 \u003d\u003d null) → B8 | else → B9",
      "B10 : If(z0 \u003d\u003d false) → B11 | else → B15",
      "B12 : If(z0 \u003d\u003d false) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  JSONPObject\n  JsonGenerator\n  SerializerProvider\n  $r2 \u003d String _function\u003e\n  r0.writeRaw($r2)\n  r0.writeRaw(40)\n  $r3 \u003d Object _value\u003e\n  if ($r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r6.defaultSerializeNull(r0)\n  goto B15\n}",
      "B2 {\n  $r4 \u003d r0.getCharacterEscapes()\n  if ($r4 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $z3 \u003d 1\n  $z2 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z3 \u003d 0\n  $z2 \u003d 0\n}",
      "B5 {\n  z0 \u003d $z3\n  if ($z2 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r14 \u003d JsonpCharacterEscapes.instance()\n  r0.setCharacterEscapes($r14)\n}",
      "B7 {\n  $r5 \u003d JavaType _serializationType\u003e\n  if ($r5 \u003d\u003d null) goto B8 else B9\n}",
      "B8 {\n  $r11 \u003d JavaType _serializationType\u003e\n  $r13 \u003d r6.findTypedValueSerializer($r11, 1, null)\n  $r12 \u003d Object _value\u003e\n  $r13.serialize($r12, r0, r6)\n  goto B10\n}",
      "B9 {\n  $r7 \u003d Object _value\u003e\n  $r8 \u003d $r7.getClass()\n  $r10 \u003d r6.findTypedValueSerializer($r8, 1, null)\n  $r9 \u003d Object _value\u003e\n  $r10.serialize($r9, r0, r6)\n}",
      "B10 {\n  if (z0 \u003d\u003d false) goto B11 else B15\n}",
      "B11 {\n  r0.setCharacterEscapes(null)\n  goto B15\n}",
      "B12 {\n  $r15 :\u003d @caughtexception\n  if (z0 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  r0.setCharacterEscapes(null)\n}",
      "B14 {\n  throw $r15\n}",
      "B15 {\n  r0.writeRaw(41)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B15",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B15",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.JSONWrappedObject",
    "methodName": "serialize",
    "signature": "void serialize(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    // First, wrapping:\r\n    if (_prefix !\u003d null)\r\n        jgen.writeRaw(_prefix);\r\n    if (_value \u003d\u003d null) {\r\n        provider.defaultSerializeNull(jgen);\r\n    } else if (_serializationType !\u003d null) {\r\n        provider.findTypedValueSerializer(_serializationType, true, null).serialize(_value, jgen, provider);\r\n    } else {\r\n        Class\u003c?\u003e cls \u003d _value.getClass();\r\n        provider.findTypedValueSerializer(cls, true, null).serialize(_value, jgen, provider);\r\n    }\r\n    if (_suffix !\u003d null)\r\n        jgen.writeRaw(_suffix);\r\n}",
    "nodes": 10,
    "edges": 13,
    "cc": 5,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r2 !\u003d null) → B3 | else → B4",
      "B4 : If($r3 \u003d\u003d null) → B5 | else → B6",
      "B7 : If($r15 \u003d\u003d null) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  JSONWrappedObject\n  JsonGenerator\n  SerializerProvider\n  $r1 \u003d String _prefix\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r14 \u003d String _prefix\u003e\n  r7.writeRaw($r14)\n}",
      "B2 {\n  $r2 \u003d Object _value\u003e\n  if ($r2 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  r6.defaultSerializeNull(r7)\n  goto B7\n}",
      "B4 {\n  $r3 \u003d JavaType _serializationType\u003e\n  if ($r3 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r11 \u003d JavaType _serializationType\u003e\n  $r13 \u003d r6.findTypedValueSerializer($r11, 1, null)\n  $r12 \u003d Object _value\u003e\n  $r13.serialize($r12, r7, r6)\n  goto B7\n}",
      "B6 {\n  $r4 \u003d Object _value\u003e\n  r5 \u003d $r4.getClass()\n  $r9 \u003d r6.findTypedValueSerializer(r5, 1, null)\n  $r8 \u003d Object _value\u003e\n  $r9.serialize($r8, r7, r6)\n}",
      "B7 {\n  $r15 \u003d String _suffix\u003e\n  if ($r15 \u003d\u003d null) goto B8 else B9\n}",
      "B8 {\n  $r10 \u003d String _suffix\u003e\n  r7.writeRaw($r10)\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.LinkedNode",
    "methodName": "linkNext",
    "signature": "void linkNext(com.fasterxml.jackson.databind.util.LinkedNode)",
    "visibility": "public",
    "body": "{\r\n    if (next !\u003d null) {\r\n        // sanity check\r\n        throw new IllegalStateException();\r\n    }\r\n    next \u003d n;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  LinkedNode\n  LinkedNode\n  $r1 \u003d LinkedNode next\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IllegalStateException\n  new IllegalStateException()\n  throw $r3\n}",
      "B2 {\n  LinkedNode next\u003e \u003d r2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.LinkedNode",
    "methodName": "contains",
    "signature": "boolean contains(com.fasterxml.jackson.databind.util.LinkedNode,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(r2 \u003d\u003d null) → B2 | else → B5",
      "B2 : If($r1 !\u003d r0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  LinkedNode\n  Object\n}",
      "B1 {\n  if (r2 \u003d\u003d null) goto B2 else B5\n}",
      "B2 {\n  $r1 \u003d r2.value()\n  if ($r1 !\u003d r0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d r2.next()\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.LRUMap",
    "methodName": "contents",
    "signature": "void contents(java.util.function.BiConsumer)",
    "visibility": "public",
    "body": "{\r\n    for (Map.Entry\u003cK, V\u003e entry : _map.entrySet()) {\r\n        consumer.accept(entry.getKey(), entry.getValue());\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  LRUMap\n  BiConsumer\n  $r1 \u003d PrivateMaxEntriesMap _map\u003e\n  $r2 \u003d $r1.entrySet()\n  r3 \u003d $r2.iterator()\n}",
      "B1 {\n  $z0 \u003d r3.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r3.next()\n  r5 \u003d Map$Entry) $r4\n  $r8 \u003d r5.getKey()\n  $r7 \u003d r5.getValue()\n  r6.accept($r8, $r7)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.NativeImageUtil",
    "methodName": "isInNativeImageAndIsAtRuntime",
    "signature": "boolean isInNativeImageAndIsAtRuntime()",
    "visibility": "public",
    "body": "{\r\n    return RUNNING_IN_SVM \u0026\u0026 \"runtime\".equals(System.getProperty(\"org.graalvm.nativeimage.imagecode\"));\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  $z0 \u003d NativeImageUtil: boolean RUNNING_IN_SVM\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $r1 \u003d \"runtime\"\n  $r0 \u003d System.getProperty(\"org.graalvm.nativeimage.imagecode\")\n  $z1 \u003d $r1.equals($r0)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.NativeImageUtil",
    "methodName": "isUnsupportedFeatureError",
    "signature": "boolean isUnsupportedFeatureError(java.lang.Throwable)",
    "visibility": "public",
    "body": "{\r\n    if (!isInNativeImageAndIsAtRuntime()) {\r\n        return false;\r\n    }\r\n    if (e instanceof InvocationTargetException) {\r\n        e \u003d e.getCause();\r\n    }\r\n    return e.getClass().getName().equals(\"com.oracle.svm.core.jdk.UnsupportedFeatureError\");\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Throwable\n  $z0 \u003d NativeImageUtil.isInNativeImageAndIsAtRuntime()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z1 \u003d InvocationTargetException\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  r2 \u003d r2.getCause()\n}",
      "B4 {\n  $r0 \u003d r2.getClass()\n  $r1 \u003d $r0.getName()\n  $z2 \u003d $r1.equals(\"com.oracle.svm.core.jdk.UnsupportedFeatureError\")\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NativeImageUtil#isInNativeImageAndIsAtRuntime(...0)",
        "body": "{\r\n    return RUNNING_IN_SVM \u0026\u0026 \"runtime\".equals(System.getProperty(\"org.graalvm.nativeimage.imagecode\"));\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.NativeImageUtil",
    "methodName": "needsReflectionConfiguration",
    "signature": "boolean needsReflectionConfiguration(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (!isInNativeImageAndIsAtRuntime()) {\r\n        return false;\r\n    }\r\n    // records list their fields but not other members\r\n    return (cl.getDeclaredFields().length \u003d\u003d 0 || ClassUtil.isRecordType(cl)) \u0026\u0026 cl.getDeclaredMethods().length \u003d\u003d 0 \u0026\u0026 cl.getDeclaredConstructors().length \u003d\u003d 0;\r\n}",
    "nodes": 9,
    "edges": 12,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($i0 \u003d\u003d false) → B3 | else → B4",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B7",
      "B4 : If($i1 !\u003d 0) → B5 | else → B7",
      "B5 : If($i2 !\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Class\n  $z0 \u003d NativeImageUtil.isInNativeImageAndIsAtRuntime()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getDeclaredFields()\n  $i0 \u003d lengthof $r1\n  if ($i0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $z1 \u003d ClassUtil.isRecordType(r0)\n  if ($z1 \u003d\u003d false) goto B4 else B7\n}",
      "B4 {\n  $r2 \u003d r0.getDeclaredMethods()\n  $i1 \u003d lengthof $r2\n  if ($i1 !\u003d 0) goto B5 else B7\n}",
      "B5 {\n  $r3 \u003d r0.getDeclaredConstructors()\n  $i2 \u003d lengthof $r3\n  if ($i2 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $z2 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z2 \u003d 0\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NativeImageUtil#isInNativeImageAndIsAtRuntime(...0)",
        "body": "{\r\n    return RUNNING_IN_SVM \u0026\u0026 \"runtime\".equals(System.getProperty(\"org.graalvm.nativeimage.imagecode\"));\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ObjectBuffer",
    "methodName": "resetAndStart",
    "signature": "java.lang.Object[] resetAndStart()",
    "visibility": "public",
    "body": "{\r\n    _reset();\r\n    if (_freeBuffer \u003d\u003d null) {\r\n        return (_freeBuffer \u003d new Object[12]);\r\n    }\r\n    return _freeBuffer;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectBuffer\n  r0._reset()\n  $r1 \u003d Object[] _freeBuffer\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Object)[12]\n  Object[] _freeBuffer\u003e \u003d $r3\n  return\n}",
      "B2 {\n  $r2 \u003d Object[] _freeBuffer\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectBuffer#_reset(...0)",
        "body": "{\r\n    // can we reuse the last (and thereby biggest) array for next time?\r\n    if (_tail !\u003d null) {\r\n        _freeBuffer \u003d _tail.value();\r\n    }\r\n    // either way, must discard current contents\r\n    _head \u003d _tail \u003d null;\r\n    _size \u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ObjectBuffer",
    "methodName": "resetAndStart",
    "signature": "java.lang.Object[] resetAndStart(java.lang.Object[],int)",
    "visibility": "public",
    "body": "{\r\n    _reset();\r\n    if ((_freeBuffer \u003d\u003d null) || (_freeBuffer.length \u003c count)) {\r\n        _freeBuffer \u003d new Object[Math.max(12, count)];\r\n    }\r\n    System.arraycopy(base, 0, _freeBuffer, 0, count);\r\n    return _freeBuffer;\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($i2 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ObjectBuffer\n  Object[]\n  i0 :\u003d @parameter1: int\n  r0._reset()\n  $r1 \u003d Object[] _freeBuffer\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d Object[] _freeBuffer\u003e\n  $i2 \u003d lengthof $r4\n  if ($i2 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d Math.max(12, i0)\n  $r2 \u003d Object)[$i1]\n  Object[] _freeBuffer\u003e \u003d $r2\n}",
      "B3 {\n  $r5 \u003d Object[] _freeBuffer\u003e\n  System.arraycopy(r3, 0, $r5, 0, i0)\n  $r6 \u003d Object[] _freeBuffer\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectBuffer#_reset(...0)",
        "body": "{\r\n    // can we reuse the last (and thereby biggest) array for next time?\r\n    if (_tail !\u003d null) {\r\n        _freeBuffer \u003d _tail.value();\r\n    }\r\n    // either way, must discard current contents\r\n    _head \u003d _tail \u003d null;\r\n    _size \u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ObjectBuffer",
    "methodName": "appendCompletedChunk",
    "signature": "java.lang.Object[] appendCompletedChunk(java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    LinkedNode\u003cObject[]\u003e next \u003d new LinkedNode\u003cObject[]\u003e(fullChunk, null);\r\n    if (_head \u003d\u003d null) {\r\n        // first chunk\r\n        _head \u003d _tail \u003d next;\r\n    } else {\r\n        // have something already\r\n        _tail.linkNext(next);\r\n        _tail \u003d next;\r\n    }\r\n    int len \u003d fullChunk.length;\r\n    _size +\u003d len;\r\n    // double the size for small chunks\r\n    if (len \u003c SMALL_CHUNK) {\r\n        len +\u003d len;\r\n    } else if (len \u003c MAX_CHUNK) {\r\n        // but by +25% for larger (to limit overhead)\r\n        len +\u003d (len \u003e\u003e 2);\r\n    }\r\n    return new Object[len];\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r3 !\u003d null) → B1 | else → B2",
      "B3 : If($i3 \u003e\u003d 16384) → B4 | else → B5",
      "B5 : If($i3 \u003e\u003d 262144) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  ObjectBuffer\n  Object[]\n  $r0 \u003d LinkedNode\n  new LinkedNode(r1, null)\n  $r3 \u003d LinkedNode _head\u003e\n  if ($r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  LinkedNode _tail\u003e \u003d $r0\n  LinkedNode _head\u003e \u003d $r0\n  goto B3\n}",
      "B2 {\n  $r4 \u003d LinkedNode _tail\u003e\n  $r4.linkNext($r0)\n  LinkedNode _tail\u003e \u003d $r0\n}",
      "B3 {\n  $i3 \u003d lengthof r1\n  i4 \u003d $i3\n  $i0 \u003d ObjectBuffer: int _size\u003e\n  $i1 \u003d $i0 + $i3\n  ObjectBuffer: int _size\u003e \u003d $i1\n  if ($i3 \u003e\u003d 16384) goto B4 else B5\n}",
      "B4 {\n  i4 \u003d $i3 + $i3\n  goto B7\n}",
      "B5 {\n  if ($i3 \u003e\u003d 262144) goto B6 else B7\n}",
      "B6 {\n  $i2 \u003d $i3 \u003e\u003e 2\n  i4 \u003d $i3 + $i2\n}",
      "B7 {\n  $r5 \u003d Object)[i4]\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ObjectBuffer",
    "methodName": "completeAndClearBuffer",
    "signature": "void completeAndClearBuffer(java.lang.Object[],int,java.util.List)",
    "visibility": "public",
    "body": "{\r\n    for (LinkedNode\u003cObject[]\u003e n \u003d _head; n !\u003d null; n \u003d n.next()) {\r\n        Object[] curr \u003d n.value();\r\n        for (int i \u003d 0, len \u003d curr.length; i \u003c len; ++i) {\r\n            resultList.add(curr[i]);\r\n        }\r\n    }\r\n    // and then the last one\r\n    for (int i \u003d 0; i \u003c lastChunkEntries; ++i) {\r\n        resultList.add(lastChunk[i]);\r\n    }\r\n    _reset();\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B1 : If(r7 \u003d\u003d null) → B2 | else → B6",
      "B3 : If(i2 \u003e\u003d i1) → B4 | else → B5",
      "B7 : If(i3 \u003e\u003d i0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  ObjectBuffer\n  Object[]\n  i0 :\u003d @parameter1: int\n  List\n  r7 \u003d LinkedNode _head\u003e\n}",
      "B1 {\n  if (r7 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $r4 \u003d r7.value()\n  r5 \u003d Object[]) $r4\n  i2 \u003d 0\n  i1 \u003d lengthof r5\n}",
      "B3 {\n  if (i2 \u003e\u003d i1) goto B4 else B5\n}",
      "B4 {\n  $r6 \u003d r5[i2]\n  r1.add($r6)\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B5 {\n  r7 \u003d r7.next()\n  goto B1\n}",
      "B6 {\n  i3 \u003d 0\n}",
      "B7 {\n  if (i3 \u003e\u003d i0) goto B8 else B9\n}",
      "B8 {\n  $r3 \u003d r2[i3]\n  r1.add($r3)\n  i3 \u003d i3 + 1\n  goto B7\n}",
      "B9 {\n  r0._reset()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e B1",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B7",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectBuffer#_reset(...0)",
        "body": "{\r\n    // can we reuse the last (and thereby biggest) array for next time?\r\n    if (_tail !\u003d null) {\r\n        _freeBuffer \u003d _tail.value();\r\n    }\r\n    // either way, must discard current contents\r\n    _head \u003d _tail \u003d null;\r\n    _size \u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ObjectBuffer",
    "methodName": "initialCapacity",
    "signature": "int initialCapacity()",
    "visibility": "public",
    "body": "{\r\n    return (_freeBuffer \u003d\u003d null) ? 0 : _freeBuffer.length;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectBuffer\n  $r1 \u003d Object[] _freeBuffer\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d 0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Object[] _freeBuffer\u003e\n  $i0 \u003d lengthof $r2\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.RawValue",
    "methodName": "serialize",
    "signature": "void serialize(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)",
    "visibility": "public",
    "body": "{\r\n    if (_value instanceof JsonSerializable) {\r\n        ((JsonSerializable) _value).serialize(gen, serializers);\r\n    } else {\r\n        _serialize(gen);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  RawValue\n  JsonGenerator\n  SerializerProvider\n  $r1 \u003d Object _value\u003e\n  $z0 \u003d JsonSerializable\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Object _value\u003e\n  $r5 \u003d JsonSerializable) $r3\n  $r5.serialize(r2, r4)\n  goto B3\n}",
      "B2 {\n  r0._serialize(r2)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "RawValue#_serialize(...1)",
        "body": "{\r\n    if (_value instanceof SerializableString) {\r\n        gen.writeRawValue((SerializableString) _value);\r\n    } else {\r\n        gen.writeRawValue(String.valueOf(_value));\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.RawValue",
    "methodName": "serializeWithType",
    "signature": "void serializeWithType(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "visibility": "public",
    "body": "{\r\n    if (_value instanceof JsonSerializable) {\r\n        ((JsonSerializable) _value).serializeWithType(gen, serializers, typeSer);\r\n    } else if (_value instanceof SerializableString) {\r\n        /* Since these are not really to be deserialized (with or without type info),\r\n             * just re-route as regular write, which will create one... hopefully it works\r\n             */\r\n        serialize(gen, serializers);\r\n    }\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  RawValue\n  JsonGenerator\n  SerializerProvider\n  TypeSerializer\n  $r1 \u003d Object _value\u003e\n  $z0 \u003d JsonSerializable\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d Object _value\u003e\n  $r7 \u003d JsonSerializable) $r5\n  $r7.serializeWithType(r3, r4, r6)\n  goto B4\n}",
      "B2 {\n  $r2 \u003d Object _value\u003e\n  $z1 \u003d SerializableString\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  r0.serialize(r3, r4)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "RawValue#serialize(...2)",
        "body": "{\r\n    if (_value instanceof JsonSerializable) {\r\n        ((JsonSerializable) _value).serialize(gen, serializers);\r\n    } else {\r\n        _serialize(gen);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.RawValue",
    "methodName": "serialize",
    "signature": "void serialize(com.fasterxml.jackson.core.JsonGenerator)",
    "visibility": "public",
    "body": "{\r\n    if (_value instanceof JsonSerializable) {\r\n        // No SerializerProvider passed, must go via generator, callback\r\n        gen.writeObject(_value);\r\n    } else {\r\n        _serialize(gen);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  RawValue\n  JsonGenerator\n  $r1 \u003d Object _value\u003e\n  $z0 \u003d JsonSerializable\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Object _value\u003e\n  r2.writeObject($r3)\n  goto B3\n}",
      "B2 {\n  r0._serialize(r2)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "RawValue#_serialize(...1)",
        "body": "{\r\n    if (_value instanceof SerializableString) {\r\n        gen.writeRawValue((SerializableString) _value);\r\n    } else {\r\n        gen.writeRawValue(String.valueOf(_value));\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.RawValue",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (!(o instanceof RawValue))\r\n        return false;\r\n    RawValue other \u003d (RawValue) o;\r\n    if (_value \u003d\u003d other._value) {\r\n        return true;\r\n    }\r\n    return (_value !\u003d null) \u0026\u0026 _value.equals(other._value);\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($r4 !\u003d $r3) → B5 | else → B6",
      "B6 : If($r5 \u003d\u003d null) → B7 | else → B9",
      "B7 : If($z1 \u003d\u003d false) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  RawValue\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d RawValue\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d RawValue) r0\n  $r4 \u003d Object _value\u003e\n  $r3 \u003d Object _value\u003e\n  if ($r4 !\u003d $r3) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r5 \u003d Object _value\u003e\n  if ($r5 \u003d\u003d null) goto B7 else B9\n}",
      "B7 {\n  $r7 \u003d Object _value\u003e\n  $r6 \u003d Object _value\u003e\n  $z1 \u003d $r7.equals($r6)\n  if ($z1 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $z2 \u003d 1\n  goto B10\n}",
      "B9 {\n  $z2 \u003d 0\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.RawValue",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    return (_value \u003d\u003d null) ? 0 : _value.hashCode();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  RawValue\n  $r1 \u003d Object _value\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d 0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Object _value\u003e\n  $i0 \u003d $r2.hashCode()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.RootNameLookup",
    "methodName": "findRootName",
    "signature": "com.fasterxml.jackson.databind.PropertyName findRootName(java.lang.Class,com.fasterxml.jackson.databind.cfg.MapperConfig)",
    "visibility": "public",
    "body": "{\r\n    ClassKey key \u003d new ClassKey(rootType);\r\n    PropertyName name \u003d _rootNames.get(key);\r\n    if (name !\u003d null) {\r\n        return name;\r\n    }\r\n    BeanDescription beanDesc \u003d config.introspectClassAnnotations(rootType);\r\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\r\n    AnnotatedClass ac \u003d beanDesc.getClassInfo();\r\n    name \u003d intr.findRootName(ac);\r\n    // No answer so far? Let\u0027s just default to using simple class name\r\n    if (name \u003d\u003d null || !name.hasSimpleName()) {\r\n        // Should we strip out enclosing class tho? For now, nope:\r\n        name \u003d PropertyName.construct(rootType.getSimpleName());\r\n    }\r\n    _rootNames.put(key, name);\r\n    return name;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r10 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(r11 \u003d\u003d null) → B3 | else → B4",
      "B3 : If($z0 !\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  RootNameLookup\n  Class\n  MapperConfig\n  $r0 \u003d ClassKey\n  new ClassKey(r1)\n  $r3 \u003d LRUMap _rootNames\u003e\n  $r4 \u003d $r3.get($r0)\n  r10 \u003d PropertyName) $r4\n  if (r10 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r6 \u003d r5.introspectClassAnnotations(r1)\n  r7 \u003d r5.getAnnotationIntrospector()\n  r8 \u003d r6.getClassInfo()\n  r11 \u003d r7.findRootName(r8)\n  if (r11 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $z0 \u003d r11.hasSimpleName()\n  if ($z0 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r9 \u003d r1.getSimpleName()\n  r11 \u003d PropertyName.construct($r9)\n}",
      "B5 {\n  $r12 \u003d LRUMap _rootNames\u003e\n  $r12.put($r0, r11)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition",
    "methodName": "construct",
    "signature": "com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition construct(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember,com.fasterxml.jackson.databind.PropertyName,com.fasterxml.jackson.databind.PropertyMetadata,com.fasterxml.jackson.\u0027annotation\u0027.JsonInclude$Include)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r0 !\u003d $r7) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MapperConfig\n  AnnotatedMember\n  PropertyName\n  PropertyMetadata\n  JsonInclude$Include\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d JsonInclude$Include USE_DEFAULTS\u003e\n  if (r0 !\u003d $r7) goto B2 else B3\n}",
      "B2 {\n  $r8 \u003d JsonInclude$Value EMPTY_INCLUDE\u003e\n  goto B4\n}",
      "B3 {\n  $r8 \u003d JsonInclude$Value.construct(r0, null)\n}",
      "B4 {\n  $r1 \u003d SimpleBeanPropertyDefinition\n  $r6 \u003d r2.getAnnotationIntrospector()\n  new SimpleBeanPropertyDefinition($r6, r3, r4, r5, $r8)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition",
    "methodName": "withSimpleName",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition withSimpleName(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (_fullName.hasSimpleName(newName) \u0026\u0026 !_fullName.hasNamespace()) {\r\n        return this;\r\n    }\r\n    return new SimpleBeanPropertyDefinition(_annotationIntrospector, _member, new PropertyName(newName), _metadata, _inclusion);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SimpleBeanPropertyDefinition\n  String\n  $r2 \u003d PropertyName _fullName\u003e\n  $z0 \u003d $r2.hasSimpleName(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $r9 \u003d PropertyName _fullName\u003e\n  $z1 \u003d $r9.hasNamespace()\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r3 \u003d SimpleBeanPropertyDefinition\n  $r5 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r6 \u003d AnnotatedMember _member\u003e\n  $r4 \u003d PropertyName\n  new PropertyName(r1)\n  $r8 \u003d PropertyMetadata _metadata\u003e\n  $r7 \u003d JsonInclude$Value _inclusion\u003e\n  new SimpleBeanPropertyDefinition($r5, $r6, $r4, $r8, $r7)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition",
    "methodName": "withName",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition withName(com.fasterxml.jackson.databind.PropertyName)",
    "visibility": "public",
    "body": "{\r\n    if (_fullName.equals(newName)) {\r\n        return this;\r\n    }\r\n    return new SimpleBeanPropertyDefinition(_annotationIntrospector, _member, newName, _metadata, _inclusion);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleBeanPropertyDefinition\n  PropertyName\n  $r2 \u003d PropertyName _fullName\u003e\n  $z0 \u003d $r2.equals(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d SimpleBeanPropertyDefinition\n  $r7 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r6 \u003d AnnotatedMember _member\u003e\n  $r5 \u003d PropertyMetadata _metadata\u003e\n  $r4 \u003d JsonInclude$Value _inclusion\u003e\n  new SimpleBeanPropertyDefinition($r7, $r6, r1, $r5, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition",
    "methodName": "withMetadata",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition withMetadata(com.fasterxml.jackson.databind.PropertyMetadata)",
    "visibility": "public",
    "body": "{\r\n    if (metadata.equals(_metadata)) {\r\n        return this;\r\n    }\r\n    return new SimpleBeanPropertyDefinition(_annotationIntrospector, _member, _fullName, metadata, _inclusion);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleBeanPropertyDefinition\n  PropertyMetadata\n  $r2 \u003d PropertyMetadata _metadata\u003e\n  $z0 \u003d r0.equals($r2)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d SimpleBeanPropertyDefinition\n  $r7 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r6 \u003d AnnotatedMember _member\u003e\n  $r5 \u003d PropertyName _fullName\u003e\n  $r4 \u003d JsonInclude$Value _inclusion\u003e\n  new SimpleBeanPropertyDefinition($r7, $r6, $r5, r0, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition",
    "methodName": "withInclusion",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition withInclusion(com.fasterxml.jackson.\u0027annotation\u0027.JsonInclude$Value)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleBeanPropertyDefinition\n  JsonInclude$Value\n  $r2 \u003d JsonInclude$Value _inclusion\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d SimpleBeanPropertyDefinition\n  $r7 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r6 \u003d AnnotatedMember _member\u003e\n  $r5 \u003d PropertyName _fullName\u003e\n  $r4 \u003d PropertyMetadata _metadata\u003e\n  new SimpleBeanPropertyDefinition($r7, $r6, $r5, $r4, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition",
    "methodName": "getWrapperName",
    "signature": "com.fasterxml.jackson.databind.PropertyName getWrapperName()",
    "visibility": "public",
    "body": "{\r\n    if ((_annotationIntrospector \u003d\u003d null) || (_member \u003d\u003d null)) {\r\n        return null;\r\n    }\r\n    return _annotationIntrospector.findWrapperName(_member);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($r2 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SimpleBeanPropertyDefinition\n  $r1 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d AnnotatedMember _member\u003e\n  if ($r2 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r4 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  $r3 \u003d AnnotatedMember _member\u003e\n  $r5 \u003d $r4.findWrapperName($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition",
    "methodName": "getPrimaryType",
    "signature": "com.fasterxml.jackson.databind.JavaType getPrimaryType()",
    "visibility": "public",
    "body": "{\r\n    if (_member \u003d\u003d null) {\r\n        return TypeFactory.unknownType();\r\n    }\r\n    return _member.getType();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleBeanPropertyDefinition\n  $r1 \u003d AnnotatedMember _member\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d TypeFactory.unknownType()\n  return\n}",
      "B2 {\n  $r2 \u003d AnnotatedMember _member\u003e\n  $r3 \u003d $r2.getType()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition",
    "methodName": "getRawPrimaryType",
    "signature": "java.lang.Class getRawPrimaryType()",
    "visibility": "public",
    "body": "{\r\n    if (_member \u003d\u003d null) {\r\n        return Object.class;\r\n    }\r\n    return _member.getRawType();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleBeanPropertyDefinition\n  $r1 \u003d AnnotatedMember _member\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d AnnotatedMember _member\u003e\n  $r3 \u003d $r2.getRawType()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition",
    "methodName": "findAliases",
    "signature": "java.util.List findAliases()",
    "visibility": "public",
    "body": "{\r\n    AnnotatedMember ann \u003d getPrimaryMember();\r\n    if (ann !\u003d null) {\r\n        List\u003cPropertyName\u003e propertyNames \u003d _annotationIntrospector.findPropertyAliases(ann);\r\n        if (propertyNames !\u003d null) {\r\n            return propertyNames;\r\n        }\r\n    }\r\n    return Collections.emptyList();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r4 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SimpleBeanPropertyDefinition\n  r1 \u003d r0.getPrimaryMember()\n  if (r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r3 \u003d AnnotationIntrospector _annotationIntrospector\u003e\n  r4 \u003d $r3.findPropertyAliases(r1)\n  if (r4 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r2 \u003d Collections.emptyList()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleBeanPropertyDefinition#getPrimaryMember(...0)",
        "body": "{\r\n    return _member;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition",
    "methodName": "hasGetter",
    "signature": "boolean hasGetter()",
    "visibility": "public",
    "body": "{\r\n    return (getGetter() !\u003d null);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleBeanPropertyDefinition\n  $r1 \u003d r0.getGetter()\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleBeanPropertyDefinition#getGetter(...0)",
        "body": "{\r\n    if ((_member instanceof AnnotatedMethod) \u0026\u0026 ((AnnotatedMethod) _member).getParameterCount() \u003d\u003d 0) {\r\n        return (AnnotatedMethod) _member;\r\n    }\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition",
    "methodName": "hasSetter",
    "signature": "boolean hasSetter()",
    "visibility": "public",
    "body": "{\r\n    return (getSetter() !\u003d null);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleBeanPropertyDefinition\n  $r1 \u003d r0.getSetter()\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleBeanPropertyDefinition#getSetter(...0)",
        "body": "{\r\n    if ((_member instanceof AnnotatedMethod) \u0026\u0026 ((AnnotatedMethod) _member).getParameterCount() \u003d\u003d 1) {\r\n        return (AnnotatedMethod) _member;\r\n    }\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition",
    "methodName": "getGetter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod getGetter()",
    "visibility": "public",
    "body": "{\r\n    if ((_member instanceof AnnotatedMethod) \u0026\u0026 ((AnnotatedMethod) _member).getParameterCount() \u003d\u003d 0) {\r\n        return (AnnotatedMethod) _member;\r\n    }\r\n    return null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($i0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SimpleBeanPropertyDefinition\n  $r1 \u003d AnnotatedMember _member\u003e\n  $z0 \u003d AnnotatedMethod\n  if ($z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d AnnotatedMember _member\u003e\n  $r3 \u003d AnnotatedMethod) $r2\n  $i0 \u003d $r3.getParameterCount()\n  if ($i0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d AnnotatedMember _member\u003e\n  $r5 \u003d AnnotatedMethod) $r4\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition",
    "methodName": "getSetter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod getSetter()",
    "visibility": "public",
    "body": "{\r\n    if ((_member instanceof AnnotatedMethod) \u0026\u0026 ((AnnotatedMethod) _member).getParameterCount() \u003d\u003d 1) {\r\n        return (AnnotatedMethod) _member;\r\n    }\r\n    return null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($i0 !\u003d 1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SimpleBeanPropertyDefinition\n  $r1 \u003d AnnotatedMember _member\u003e\n  $z0 \u003d AnnotatedMethod\n  if ($z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d AnnotatedMember _member\u003e\n  $r3 \u003d AnnotatedMethod) $r2\n  $i0 \u003d $r3.getParameterCount()\n  if ($i0 !\u003d 1) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d AnnotatedMember _member\u003e\n  $r5 \u003d AnnotatedMethod) $r4\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition",
    "methodName": "getField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedField getField()",
    "visibility": "public",
    "body": "{\r\n    return (_member instanceof AnnotatedField) ? (AnnotatedField) _member : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleBeanPropertyDefinition\n  $r1 \u003d AnnotatedMember _member\u003e\n  $z0 \u003d AnnotatedField\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d AnnotatedMember _member\u003e\n  $r3 \u003d AnnotatedField) $r2\n  goto B3\n}",
      "B2 {\n  $r3 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition",
    "methodName": "getConstructorParameter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter getConstructorParameter()",
    "visibility": "public",
    "body": "{\r\n    return (_member instanceof AnnotatedParameter) ? (AnnotatedParameter) _member : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleBeanPropertyDefinition\n  $r1 \u003d AnnotatedMember _member\u003e\n  $z0 \u003d AnnotatedParameter\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d AnnotatedMember _member\u003e\n  $r3 \u003d AnnotatedParameter) $r2\n  goto B3\n}",
      "B2 {\n  $r3 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition",
    "methodName": "getConstructorParameters",
    "signature": "java.util.Iterator getConstructorParameters()",
    "visibility": "public",
    "body": "{\r\n    AnnotatedParameter param \u003d getConstructorParameter();\r\n    if (param \u003d\u003d null) {\r\n        return ClassUtil.emptyIterator();\r\n    }\r\n    return Collections.singleton(param).iterator();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleBeanPropertyDefinition\n  r1 \u003d r0.getConstructorParameter()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d ClassUtil.emptyIterator()\n  return\n}",
      "B2 {\n  $r2 \u003d Collections.singleton(r1)\n  $r3 \u003d $r2.iterator()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleBeanPropertyDefinition#getConstructorParameter(...0)",
        "body": "{\r\n    return (_member instanceof AnnotatedParameter) ? (AnnotatedParameter) _member : null;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "methodName": "withTimeZone",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat withTimeZone(java.util.TimeZone)",
    "visibility": "public",
    "body": "{\r\n    if (tz \u003d\u003d null) {\r\n        tz \u003d DEFAULT_TIMEZONE;\r\n    }\r\n    if ((tz \u003d\u003d _timezone) || tz.equals(_timezone)) {\r\n        return this;\r\n    }\r\n    return new StdDateFormat(tz, _locale, _lenient, _tzSerializedWithColon);\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r6 !\u003d null) → B1 | else → B2",
      "B2 : If(r6 \u003d\u003d $r1) → B3 | else → B4",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  StdDateFormat\n  TimeZone\n  if (r6 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r6 \u003d TimeZone DEFAULT_TIMEZONE\u003e\n}",
      "B2 {\n  $r1 \u003d TimeZone _timezone\u003e\n  if (r6 \u003d\u003d $r1) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d TimeZone _timezone\u003e\n  $z0 \u003d r6.equals($r2)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r3 \u003d StdDateFormat\n  $r5 \u003d Locale _locale\u003e\n  $r4 \u003d Boolean _lenient\u003e\n  $z1 \u003d StdDateFormat: boolean _tzSerializedWithColon\u003e\n  new StdDateFormat(r6, $r5, $r4, $z1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "methodName": "withLocale",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat withLocale(java.util.Locale)",
    "visibility": "public",
    "body": "{\r\n    if (loc.equals(_locale)) {\r\n        return this;\r\n    }\r\n    return new StdDateFormat(_timezone, loc, _lenient, _tzSerializedWithColon);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdDateFormat\n  Locale\n  $r2 \u003d Locale _locale\u003e\n  $z0 \u003d r0.equals($r2)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d StdDateFormat\n  $r5 \u003d TimeZone _timezone\u003e\n  $r4 \u003d Boolean _lenient\u003e\n  $z1 \u003d StdDateFormat: boolean _tzSerializedWithColon\u003e\n  new StdDateFormat($r5, r0, $r4, $z1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "methodName": "withLenient",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat withLenient(java.lang.Boolean)",
    "visibility": "public",
    "body": "{\r\n    if (_equals(b, _lenient)) {\r\n        return this;\r\n    }\r\n    return new StdDateFormat(_timezone, _locale, b, _tzSerializedWithColon);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdDateFormat\n  Boolean\n  $r2 \u003d Boolean _lenient\u003e\n  $z0 \u003d StdDateFormat._equals(r0, $r2)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d StdDateFormat\n  $r5 \u003d TimeZone _timezone\u003e\n  $r4 \u003d Locale _locale\u003e\n  $z1 \u003d StdDateFormat: boolean _tzSerializedWithColon\u003e\n  new StdDateFormat($r5, $r4, r0, $z1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdDateFormat#_equals(...2)",
        "body": "{\r\n    if (value1 \u003d\u003d value2) {\r\n        return true;\r\n    }\r\n    return (value1 !\u003d null) \u0026\u0026 value1.equals(value2);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "methodName": "withColonInTimeZone",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat withColonInTimeZone(boolean)",
    "visibility": "public",
    "body": "{\r\n    if (_tzSerializedWithColon \u003d\u003d b) {\r\n        return this;\r\n    }\r\n    return new StdDateFormat(_timezone, _locale, _lenient, b);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z1 !\u003d z0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdDateFormat\n  z0 :\u003d @parameter0: boolean\n  $z1 \u003d StdDateFormat: boolean _tzSerializedWithColon\u003e\n  if ($z1 !\u003d z0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d StdDateFormat\n  $r4 \u003d TimeZone _timezone\u003e\n  $r3 \u003d Locale _locale\u003e\n  $r2 \u003d Boolean _lenient\u003e\n  new StdDateFormat($r4, $r3, $r2, z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "methodName": "setTimeZone",
    "signature": "void setTimeZone(java.util.TimeZone)",
    "visibility": "public",
    "body": "{\r\n    // DateFormats are timezone-specific (via Calendar contained),\r\n    // so need to reset instances if timezone changes:\r\n    if (!tz.equals(_timezone)) {\r\n        _clearFormats();\r\n        _timezone \u003d tz;\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdDateFormat\n  TimeZone\n  $r2 \u003d TimeZone _timezone\u003e\n  $z0 \u003d r0.equals($r2)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r1._clearFormats()\n  TimeZone _timezone\u003e \u003d r0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdDateFormat#_clearFormats(...0)",
        "body": "{\r\n    _formatRFC1123 \u003d null;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "methodName": "setLenient",
    "signature": "void setLenient(boolean)",
    "visibility": "public",
    "body": "{\r\n    Boolean newValue \u003d Boolean.valueOf(enabled);\r\n    if (!_equals(newValue, _lenient)) {\r\n        _lenient \u003d newValue;\r\n        // and since leniency settings may have been used:\r\n        _clearFormats();\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z1 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdDateFormat\n  z0 :\u003d @parameter0: boolean\n  r0 \u003d Boolean.valueOf(z0)\n  $r2 \u003d Boolean _lenient\u003e\n  $z1 \u003d StdDateFormat._equals(r0, $r2)\n  if ($z1 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  Boolean _lenient\u003e \u003d r0\n  r1._clearFormats()\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdDateFormat#_equals(...2)",
        "body": "{\r\n    if (value1 \u003d\u003d value2) {\r\n        return true;\r\n    }\r\n    return (value1 !\u003d null) \u0026\u0026 value1.equals(value2);\r\n}"
      },
      {
        "name": "StdDateFormat#_clearFormats(...0)",
        "body": "{\r\n    _formatRFC1123 \u003d null;\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "methodName": "isLenient",
    "signature": "boolean isLenient()",
    "visibility": "public",
    "body": "{\r\n    // default is, I believe, true\r\n    return (_lenient \u003d\u003d null) || _lenient;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  StdDateFormat\n  $r1 \u003d Boolean _lenient\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Boolean _lenient\u003e\n  $z0 \u003d $r2.booleanValue()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "methodName": "parse",
    "signature": "java.util.Date parse(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    dateStr \u003d dateStr.trim();\r\n    ParsePosition pos \u003d new ParsePosition(0);\r\n    Date dt \u003d _parseDate(dateStr, pos);\r\n    if (dt !\u003d null) {\r\n        return dt;\r\n    }\r\n    StringBuilder sb \u003d new StringBuilder();\r\n    for (String f : ALL_FORMATS) {\r\n        if (sb.length() \u003e 0) {\r\n            sb.append(\"\\\", \\\"\");\r\n        } else {\r\n            sb.append(\u0027\"\u0027);\r\n        }\r\n        sb.append(f);\r\n    }\r\n    sb.append(\u0027\"\u0027);\r\n    throw new ParseException(String.format(\"Cannot parse date \\\"%s\\\": not compatible with any of standard forms (%s)\", dateStr, sb.toString()), pos.getErrorIndex());\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B2",
      "B3 : If(i3 \u003e\u003d i0) → B4 | else → B8",
      "B4 : If($i2 \u003c\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  StdDateFormat\n  String\n  r11 \u003d r10.trim()\n  $r0 \u003d ParsePosition\n  new ParsePosition(0)\n  r2 \u003d r1._parseDate(r11, $r0)\n  if (r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  r4 \u003d String[] ALL_FORMATS\u003e\n  i0 \u003d lengthof r4\n  i3 \u003d 0\n}",
      "B3 {\n  if (i3 \u003e\u003d i0) goto B4 else B8\n}",
      "B4 {\n  r9 \u003d r4[i3]\n  $i2 \u003d $r3.length()\n  if ($i2 \u003c\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r3.append(\"\\\", \\\"\")\n  goto B7\n}",
      "B6 {\n  $r3.append(34)\n}",
      "B7 {\n  $r3.append(r9)\n  i3 \u003d i3 + 1\n  goto B3\n}",
      "B8 {\n  $r3.append(34)\n  $r5 \u003d ParseException\n  $r6 \u003d Object)[2]\n  $r6[0] \u003d r11\n  $r7 \u003d $r3.toString()\n  $r6[1] \u003d $r7\n  $r8 \u003d String.format(\"Cannot parse date \\\"%s\\\": not compatible with any of standard forms (%s)\", $r6)\n  $i1 \u003d $r0.getErrorIndex()\n  new ParseException($r8, $i1)\n  throw $r5\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B3",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdDateFormat#_parseDate(...2)",
        "body": "{\r\n    if (looksLikeISO8601(dateStr)) {\r\n        // also includes \"plain\"\r\n        return parseAsISO8601(dateStr, pos);\r\n    }\r\n    // Also consider \"stringified\" simple time stamp\r\n    int i \u003d dateStr.length();\r\n    while (--i \u003e\u003d 0) {\r\n        char ch \u003d dateStr.charAt(i);\r\n        if (ch \u003c \u00270\u0027 || ch \u003e \u00279\u0027) {\r\n            // 07-Aug-2013, tatu: And [databind#267] points out that negative numbers should also work\r\n            if (i \u003e 0 || ch !\u003d \u0027-\u0027) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if ((i \u003c 0) \u0026\u0026 // let\u0027s just assume negative numbers are fine (can\u0027t be RFC-1123 anyway); check length for positive\r\n    (dateStr.charAt(0) \u003d\u003d \u0027-\u0027 || NumberInput.inLongRange(dateStr, false))) {\r\n        return _parseDateFromLong(dateStr, pos);\r\n    }\r\n    // Otherwise, fall back to using RFC 1123. NOTE: call will NOT throw, just returns `null`\r\n    return parseAsRFC1123(dateStr, pos);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "methodName": "format",
    "signature": "java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)",
    "visibility": "public",
    "body": "{\r\n    TimeZone tz \u003d _timezone;\r\n    if (tz \u003d\u003d null) {\r\n        tz \u003d DEFAULT_TIMEZONE;\r\n    }\r\n    _format(tz, _locale, date, toAppendTo);\r\n    return toAppendTo;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r5 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdDateFormat\n  Date\n  StringBuffer\n  FieldPosition\n  r5 \u003d TimeZone _timezone\u003e\n  if (r5 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r5 \u003d TimeZone DEFAULT_TIMEZONE\u003e\n}",
      "B2 {\n  $r3 \u003d Locale _locale\u003e\n  r0._format(r5, $r3, r1, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StdDateFormat#_format(...4)",
        "body": "{\r\n    Calendar cal \u003d _getCalendar(tz);\r\n    cal.setTime(date);\r\n    // [databind#2167]: handle range beyond [1, 9999]\r\n    final int year \u003d cal.get(Calendar.YEAR);\r\n    // Assuming GregorianCalendar, special handling needed for BCE (aka BC)\r\n    if (cal.get(Calendar.ERA) \u003d\u003d GregorianCalendar.BC) {\r\n        _formatBCEYear(buffer, year);\r\n    } else {\r\n        if (year \u003e 9999) {\r\n            // 22-Nov-2018, tatu: Handling beyond 4-digits is not well specified wrt ISO-8601, but\r\n            //   it seems that plus prefix IS mandated. Padding is an open question, but since agreeement\r\n            //   for max length would be needed, we ewould need to limit to arbitrary length\r\n            //   like five digits (erroring out if beyond or padding to that as minimum).\r\n            //   Instead, let\u0027s just print number out as is and let decoder try to make sense of it.\r\n            buffer.append(\u0027+\u0027);\r\n        }\r\n        pad4(buffer, year);\r\n    }\r\n    buffer.append(\u0027-\u0027);\r\n    pad2(buffer, cal.get(Calendar.MONTH) + 1);\r\n    buffer.append(\u0027-\u0027);\r\n    pad2(buffer, cal.get(Calendar.DAY_OF_MONTH));\r\n    buffer.append(\u0027T\u0027);\r\n    pad2(buffer, cal.get(Calendar.HOUR_OF_DAY));\r\n    buffer.append(\u0027:\u0027);\r\n    pad2(buffer, cal.get(Calendar.MINUTE));\r\n    buffer.append(\u0027:\u0027);\r\n    pad2(buffer, cal.get(Calendar.SECOND));\r\n    buffer.append(\u0027.\u0027);\r\n    pad3(buffer, cal.get(Calendar.MILLISECOND));\r\n    int offset \u003d tz.getOffset(cal.getTimeInMillis());\r\n    if (offset !\u003d 0) {\r\n        int hours \u003d Math.abs((offset / (60 * 1000)) / 60);\r\n        int minutes \u003d Math.abs((offset / (60 * 1000)) % 60);\r\n        buffer.append(offset \u003c 0 ? \u0027-\u0027 : \u0027+\u0027);\r\n        pad2(buffer, hours);\r\n        if (_tzSerializedWithColon) {\r\n            buffer.append(\u0027:\u0027);\r\n        }\r\n        pad2(buffer, minutes);\r\n    } else {\r\n        // 24-Jun-2017, tatu: While `Z` would be conveniently short, older specs\r\n        //   mandate use of full `+0000`\r\n        // 06-Mar-2020, tatu: Actually statement should read \"for compatibility reasons\"\r\n        //   and not standards (unless it is wrt RFC-1123). This will change in 3.0 at latest\r\n        //            formatted.append(\u0027Z\u0027);\r\n        if (_tzSerializedWithColon) {\r\n            buffer.append(\"+00:00\");\r\n        } else {\r\n            buffer.append(\"+0000\");\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "methodName": "toPattern",
    "signature": "java.lang.String toPattern()",
    "visibility": "public",
    "body": "{\r\n    // same as SimpleDateFormat\r\n    StringBuilder sb \u003d new StringBuilder(100);\r\n    sb.append(\"[one of: \u0027\").append(DATE_FORMAT_STR_ISO8601).append(\"\u0027, \u0027\").append(DATE_FORMAT_STR_RFC1123).append(\"\u0027 (\");\r\n    sb.append(Boolean.FALSE.equals(_lenient) ? \"strict\" : \"lenient\").append(\")]\");\r\n    return sb.toString();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdDateFormat\n  $r0 \u003d StringBuilder\n  new StringBuilder(100)\n  $r1 \u003d $r0.append(\"one of: \\\u0027\")\n  $r2 \u003d $r1.append(\"yyyy-MM-dd\\\u0027T\\\u0027HH:mm:ss.SSSX\")\n  $r3 \u003d $r2.append(\"\\\u0027, \\\u0027\")\n  $r4 \u003d $r3.append(\"EEE, dd MMM yyyy HH:mm:ss zzz\")\n  $r4.append(\"\\\u0027 (\")\n  $r7 \u003d Boolean FALSE\u003e\n  $r6 \u003d Boolean _lenient\u003e\n  $z0 \u003d $r7.equals($r6)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d \"strict\"\n  goto B3\n}",
      "B2 {\n  $r10 \u003d \"lenient\"\n}",
      "B3 {\n  $r8 \u003d $r0.append($r10)\n  $r8.append(\")\")\n  $r9 \u003d $r0.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return (o \u003d\u003d this);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StdDateFormat\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TokenBuffer",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty()",
    "visibility": "public",
    "body": "{\r\n    return (_appendAt \u003d\u003d 0) \u0026\u0026 (_first \u003d\u003d _last);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B3",
      "B1 : If($r2 !\u003d $r1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TokenBuffer\n  $i0 \u003d TokenBuffer: int _appendAt\u003e\n  if ($i0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d TokenBuffer$Segment _first\u003e\n  $r1 \u003d TokenBuffer$Segment _last\u003e\n  if ($r2 !\u003d $r1) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TokenBuffer",
    "methodName": "append",
    "signature": "com.fasterxml.jackson.databind.util.TokenBuffer append(com.fasterxml.jackson.databind.util.TokenBuffer)",
    "visibility": "public",
    "body": "{\r\n    // Important? If source has native ids, need to store\r\n    if (!_hasNativeTypeIds) {\r\n        _hasNativeTypeIds \u003d other.canWriteTypeId();\r\n    }\r\n    if (!_hasNativeObjectIds) {\r\n        _hasNativeObjectIds \u003d other.canWriteObjectId();\r\n    }\r\n    _mayHaveNativeIds \u003d _hasNativeTypeIds || _hasNativeObjectIds;\r\n    JsonParser p \u003d other.asParser();\r\n    while (p.nextToken() !\u003d null) {\r\n        copyCurrentStructure(p);\r\n    }\r\n    return this;\r\n}",
    "nodes": 12,
    "edges": 16,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4",
      "B4 : If($z2 !\u003d 0) → B5 | else → B6",
      "B5 : If($z3 \u003d\u003d false) → B6 | else → B7",
      "B9 : If($r3 \u003d\u003d null) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  TokenBuffer\n  TokenBuffer\n  $z0 \u003d TokenBuffer: boolean _hasNativeTypeIds\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z5 \u003d r1.canWriteTypeId()\n  TokenBuffer: boolean _hasNativeTypeIds\u003e \u003d $z5\n}",
      "B2 {\n  $z1 \u003d TokenBuffer: boolean _hasNativeObjectIds\u003e\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $z4 \u003d r1.canWriteObjectId()\n  TokenBuffer: boolean _hasNativeObjectIds\u003e \u003d $z4\n}",
      "B4 {\n  $z2 \u003d TokenBuffer: boolean _hasNativeTypeIds\u003e\n  if ($z2 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $z3 \u003d TokenBuffer: boolean _hasNativeObjectIds\u003e\n  if ($z3 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $z6 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z6 \u003d 0\n}",
      "B8 {\n  TokenBuffer: boolean _mayHaveNativeIds\u003e \u003d $z6\n  $r2 \u003d r1.asParser()\n}",
      "B9 {\n  $r3 \u003d $r2.nextToken()\n  if ($r3 \u003d\u003d null) goto B10 else B11\n}",
      "B10 {\n  r0.copyCurrentStructure($r2)\n  goto B9\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B9",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenBuffer#copyCurrentStructure(...1)",
        "body": "{\r\n    JsonToken t \u003d p.currentToken();\r\n    // Let\u0027s handle field-name separately first\r\n    if (t \u003d\u003d JsonToken.FIELD_NAME) {\r\n        if (_mayHaveNativeIds) {\r\n            _checkNativeIds(p);\r\n        }\r\n        writeFieldName(p.currentName());\r\n        t \u003d p.nextToken();\r\n        // fall-through to copy the associated value\r\n    } else if (t \u003d\u003d null) {\r\n        // 13-Dec-2023, tatu: For some unexpected EOF cases we may end up here, so:\r\n        throw new JsonEOFException(p, null, \"Unexpected end-of-input\");\r\n    }\r\n    // We\u0027ll do minor handling here to separate structured, scalar values,\r\n    // then delegate appropriately.\r\n    // Plus also deal with oddity of \"dangling\" END_OBJECT/END_ARRAY\r\n    switch(t) {\r\n        case START_ARRAY:\r\n            if (_mayHaveNativeIds) {\r\n                _checkNativeIds(p);\r\n            }\r\n            writeStartArray();\r\n            _copyBufferContents(p);\r\n            break;\r\n        case START_OBJECT:\r\n            if (_mayHaveNativeIds) {\r\n                _checkNativeIds(p);\r\n            }\r\n            writeStartObject();\r\n            _copyBufferContents(p);\r\n            break;\r\n        case END_ARRAY:\r\n            writeEndArray();\r\n            break;\r\n        case END_OBJECT:\r\n            writeEndObject();\r\n            break;\r\n        default:\r\n            // others are simple:\r\n            _copyBufferValue(p, t);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TokenBuffer",
    "methodName": "serialize",
    "signature": "void serialize(com.fasterxml.jackson.core.JsonGenerator)",
    "visibility": "public",
    "body": "{\r\n    Segment segment \u003d _first;\r\n    int ptr \u003d -1;\r\n    final boolean checkIds \u003d _mayHaveNativeIds;\r\n    boolean hasIds \u003d checkIds \u0026\u0026 (segment.hasIds());\r\n    while (true) {\r\n        if (++ptr \u003e\u003d Segment.TOKENS_PER_SEGMENT) {\r\n            ptr \u003d 0;\r\n            segment \u003d segment.next();\r\n            if (segment \u003d\u003d null)\r\n                break;\r\n            hasIds \u003d checkIds \u0026\u0026 (segment.hasIds());\r\n        }\r\n        JsonToken t \u003d segment.type(ptr);\r\n        if (t \u003d\u003d null)\r\n            break;\r\n        if (hasIds) {\r\n            Object id \u003d segment.findObjectId(ptr);\r\n            if (id !\u003d null) {\r\n                gen.writeObjectId(id);\r\n            }\r\n            id \u003d segment.findTypeId(ptr);\r\n            if (id !\u003d null) {\r\n                gen.writeTypeId(id);\r\n            }\r\n        }\r\n        // Note: copied from \u0027copyCurrentEvent\u0027...\r\n        switch(t) {\r\n            case START_OBJECT:\r\n                gen.writeStartObject();\r\n                break;\r\n            case END_OBJECT:\r\n                gen.writeEndObject();\r\n                break;\r\n            case START_ARRAY:\r\n                gen.writeStartArray();\r\n                break;\r\n            case END_ARRAY:\r\n                gen.writeEndArray();\r\n                break;\r\n            case FIELD_NAME:\r\n                {\r\n                    // 13-Dec-2010, tatu: Maybe we should start using different type tokens to reduce casting?\r\n                    Object ob \u003d segment.get(ptr);\r\n                    if (ob instanceof SerializableString) {\r\n                        gen.writeFieldName((SerializableString) ob);\r\n                    } else {\r\n                        gen.writeFieldName((String) ob);\r\n                    }\r\n                }\r\n                break;\r\n            case VALUE_STRING:\r\n                {\r\n                    Object ob \u003d segment.get(ptr);\r\n                    if (ob instanceof SerializableString) {\r\n                        gen.writeString((SerializableString) ob);\r\n                    } else {\r\n                        gen.writeString((String) ob);\r\n                    }\r\n                }\r\n                break;\r\n            case VALUE_NUMBER_INT:\r\n                {\r\n                    Object n \u003d segment.get(ptr);\r\n                    if (n instanceof Integer) {\r\n                        gen.writeNumber((Integer) n);\r\n                    } else if (n instanceof BigInteger) {\r\n                        gen.writeNumber((BigInteger) n);\r\n                    } else if (n instanceof Long) {\r\n                        gen.writeNumber((Long) n);\r\n                    } else if (n instanceof Short) {\r\n                        gen.writeNumber((Short) n);\r\n                    } else {\r\n                        gen.writeNumber(((Number) n).intValue());\r\n                    }\r\n                }\r\n                break;\r\n            case VALUE_NUMBER_FLOAT:\r\n                {\r\n                    Object n \u003d segment.get(ptr);\r\n                    if (n instanceof Double) {\r\n                        gen.writeNumber((Double) n);\r\n                    } else if (n instanceof BigDecimal) {\r\n                        gen.writeNumber((BigDecimal) n);\r\n                    } else if (n instanceof Float) {\r\n                        gen.writeNumber((Float) n);\r\n                    } else if (n \u003d\u003d null) {\r\n                        gen.writeNull();\r\n                    } else if (n instanceof String) {\r\n                        gen.writeNumber((String) n);\r\n                    } else {\r\n                        _reportError(String.format(\"Unrecognized value type for VALUE_NUMBER_FLOAT: %s, cannot serialize\", n.getClass().getName()));\r\n                    }\r\n                }\r\n                break;\r\n            case VALUE_TRUE:\r\n                gen.writeBoolean(true);\r\n                break;\r\n            case VALUE_FALSE:\r\n                gen.writeBoolean(false);\r\n                break;\r\n            case VALUE_NULL:\r\n                gen.writeNull();\r\n                break;\r\n            case VALUE_EMBEDDED_OBJECT:\r\n                {\r\n                    Object value \u003d segment.get(ptr);\r\n                    // 01-Sep-2016, tatu: as per [databind#1361], should use `writeEmbeddedObject()`;\r\n                    //    however, may need to consider alternatives for some well-known types\r\n                    //    first\r\n                    if (value instanceof RawValue) {\r\n                        ((RawValue) value).serialize(gen);\r\n                    } else if (value instanceof JsonSerializable) {\r\n                        gen.writeObject(value);\r\n                    } else {\r\n                        gen.writeEmbeddedObject(value);\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                throw new RuntimeException(\"Internal error: should never end up through this code path\");\r\n        }\r\n    }\r\n}",
    "nodes": 67,
    "edges": 100,
    "cc": 35,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($z14 \u003d\u003d false) → B2 | else → B3",
      "B5 : If(i4 \u003c 16) → B6 | else → B13",
      "B6 : If(r22 !\u003d null) → B7 | else → B8",
      "B8 : If(z0 \u003d\u003d false) → B9 | else → B11",
      "B9 : If($z13 \u003d\u003d false) → B10 | else → B11",
      "B13 : If($r23 !\u003d null) → B14 | else → B15",
      "B15 : If(z16 \u003d\u003d false) → B16 | else → B20",
      "B16 : If(r24 \u003d\u003d null) → B17 | else → B18",
      "B18 : If($r21 \u003d\u003d null) → B19 | else → B20",
      "B20 : If(switch-on $i6) → B21 | else → B22",
      "B25 : If($z12 \u003d\u003d false) → B26 | else → B27",
      "B29 : If($z11 \u003d\u003d false) → B30 | else → B31",
      "B33 : If($z7 \u003d\u003d false) → B34 | else → B35",
      "B35 : If($z8 \u003d\u003d false) → B36 | else → B37",
      "B37 : If($z9 \u003d\u003d false) → B38 | else → B39",
      "B39 : If($z10 \u003d\u003d false) → B40 | else → B41",
      "B43 : If($z3 \u003d\u003d false) → B44 | else → B45",
      "B45 : If($z4 \u003d\u003d false) → B46 | else → B47",
      "B47 : If($z5 \u003d\u003d false) → B48 | else → B49",
      "B49 : If(r29 !\u003d null) → B50 | else → B51",
      "B51 : If($z6 \u003d\u003d false) → B52 | else → B53",
      "B58 : If($z1 \u003d\u003d false) → B59 | else → B60",
      "B60 : If($z2 \u003d\u003d false) → B61 | else → B62"
    ],
    "blockList": [
      "B0 {\n  TokenBuffer\n  JsonGenerator\n  r22 \u003d TokenBuffer$Segment _first\u003e\n  $i8 \u003d (int) -1\n  i4 \u003d $i8\n  z0 \u003d TokenBuffer: boolean _mayHaveNativeIds\u003e\n  if (z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $z14 \u003d r22.hasIds()\n  if ($z14 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z15 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z15 \u003d 0\n}",
      "B4 {\n  z16 \u003d $z15\n}",
      "B5 {\n  i4 \u003d i4 + 1\n  if (i4 \u003c 16) goto B6 else B13\n}",
      "B6 {\n  i4 \u003d 0\n  r22 \u003d r22.next()\n  if (r22 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  goto B66\n}",
      "B8 {\n  if (z0 \u003d\u003d false) goto B9 else B11\n}",
      "B9 {\n  $z13 \u003d r22.hasIds()\n  if ($z13 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  $z17 \u003d 1\n  goto B12\n}",
      "B11 {\n  $z17 \u003d 0\n}",
      "B12 {\n  z16 \u003d $z17\n}",
      "B13 {\n  $r23 \u003d r22.type(i4)\n  if ($r23 !\u003d null) goto B14 else B15\n}",
      "B14 {\n  goto B66\n}",
      "B15 {\n  if (z16 \u003d\u003d false) goto B16 else B20\n}",
      "B16 {\n  r24 \u003d r22.findObjectId(i4)\n  if (r24 \u003d\u003d null) goto B17 else B18\n}",
      "B17 {\n  r1.writeObjectId(r24)\n}",
      "B18 {\n  $r21 \u003d r22.findTypeId(i4)\n  if ($r21 \u003d\u003d null) goto B19 else B20\n}",
      "B19 {\n  r1.writeTypeId($r21)\n}",
      "B20 {\n  $r25 \u003d TokenBuffer$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonToken\u003e\n  $i5 \u003d $r23.ordinal()\n  $i6 \u003d $r25[$i5]\n  RuntimeException; }\n}",
      "B21 {\n  r1.writeStartObject()\n  goto B65\n}",
      "B22 {\n  r1.writeEndObject()\n  goto B65\n}",
      "B23 {\n  r1.writeStartArray()\n  goto B65\n}",
      "B24 {\n  r1.writeEndArray()\n  goto B65\n}",
      "B25 {\n  r26 \u003d r22.get(i4)\n  $z12 \u003d SerializableString\n  if ($z12 \u003d\u003d false) goto B26 else B27\n}",
      "B26 {\n  $r19 \u003d SerializableString) r26\n  r1.writeFieldName($r19)\n  goto B28\n}",
      "B27 {\n  $r18 \u003d String) r26\n  r1.writeFieldName($r18)\n}",
      "B28 {\n  goto B65\n}",
      "B29 {\n  r27 \u003d r22.get(i4)\n  $z11 \u003d SerializableString\n  if ($z11 \u003d\u003d false) goto B30 else B31\n}",
      "B30 {\n  $r17 \u003d SerializableString) r27\n  r1.writeString($r17)\n  goto B32\n}",
      "B31 {\n  $r16 \u003d String) r27\n  r1.writeString($r16)\n}",
      "B32 {\n  goto B65\n}",
      "B33 {\n  r28 \u003d r22.get(i4)\n  $z7 \u003d Integer\n  if ($z7 \u003d\u003d false) goto B34 else B35\n}",
      "B34 {\n  $r15 \u003d Integer) r28\n  $i3 \u003d $r15.intValue()\n  r1.writeNumber($i3)\n  goto B42\n}",
      "B35 {\n  $z8 \u003d BigInteger\n  if ($z8 \u003d\u003d false) goto B36 else B37\n}",
      "B36 {\n  $r14 \u003d BigInteger) r28\n  r1.writeNumber($r14)\n  goto B42\n}",
      "B37 {\n  $z9 \u003d Long\n  if ($z9 \u003d\u003d false) goto B38 else B39\n}",
      "B38 {\n  $r13 \u003d Long) r28\n  $l2 \u003d $r13.longValue()\n  r1.writeNumber($l2)\n  goto B42\n}",
      "B39 {\n  $z10 \u003d Short\n  if ($z10 \u003d\u003d false) goto B40 else B41\n}",
      "B40 {\n  $r12 \u003d Short) r28\n  $s1 \u003d $r12.shortValue()\n  r1.writeNumber($s1)\n  goto B42\n}",
      "B41 {\n  $r11 \u003d Number) r28\n  $i0 \u003d $r11.intValue()\n  r1.writeNumber($i0)\n}",
      "B42 {\n  goto B65\n}",
      "B43 {\n  r29 \u003d r22.get(i4)\n  $z3 \u003d Double\n  if ($z3 \u003d\u003d false) goto B44 else B45\n}",
      "B44 {\n  $r10 \u003d Double) r29\n  $d0 \u003d $r10.doubleValue()\n  r1.writeNumber($d0)\n  goto B54\n}",
      "B45 {\n  $z4 \u003d BigDecimal\n  if ($z4 \u003d\u003d false) goto B46 else B47\n}",
      "B46 {\n  $r9 \u003d BigDecimal) r29\n  r1.writeNumber($r9)\n  goto B54\n}",
      "B47 {\n  $z5 \u003d Float\n  if ($z5 \u003d\u003d false) goto B48 else B49\n}",
      "B48 {\n  $r8 \u003d Float) r29\n  $f0 \u003d $r8.floatValue()\n  r1.writeNumber($f0)\n  goto B54\n}",
      "B49 {\n  if (r29 !\u003d null) goto B50 else B51\n}",
      "B50 {\n  r1.writeNull()\n  goto B54\n}",
      "B51 {\n  $z6 \u003d String\n  if ($z6 \u003d\u003d false) goto B52 else B53\n}",
      "B52 {\n  $r7 \u003d String) r29\n  r1.writeNumber($r7)\n  goto B54\n}",
      "B53 {\n  $r3 \u003d Object)[1]\n  $r4 \u003d r29.getClass()\n  $r5 \u003d $r4.getName()\n  $r3[0] \u003d $r5\n  $r6 \u003d String.format(\"Unrecognized value type for VALUE_NUMBER_FLOAT: %s, cannot serialize\", $r3)\n  r0._reportError($r6)\n}",
      "B54 {\n  goto B65\n}",
      "B55 {\n  r1.writeBoolean(1)\n  goto B65\n}",
      "B56 {\n  r1.writeBoolean(0)\n  goto B65\n}",
      "B57 {\n  r1.writeNull()\n  goto B65\n}",
      "B58 {\n  r30 \u003d r22.get(i4)\n  $z1 \u003d RawValue\n  if ($z1 \u003d\u003d false) goto B59 else B60\n}",
      "B59 {\n  $r2 \u003d RawValue) r30\n  $r2.serialize(r1)\n  goto B63\n}",
      "B60 {\n  $z2 \u003d JsonSerializable\n  if ($z2 \u003d\u003d false) goto B61 else B62\n}",
      "B61 {\n  r1.writeObject(r30)\n  goto B63\n}",
      "B62 {\n  r1.writeEmbeddedObject(r30)\n}",
      "B63 {\n  goto B65\n}",
      "B64 {\n  $r31 \u003d RuntimeException\n  new RuntimeException(\"Internal error: should never end up through this code path\")\n  throw $r31\n}",
      "B65 {\n  goto B5\n}",
      "B66 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B13",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B66",
      "B8 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B66",
      "B15 --\u003e B16",
      "B15 --\u003e B20",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B20",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B20 --\u003e B23",
      "B20 --\u003e B24",
      "B20 --\u003e B25",
      "B20 --\u003e B29",
      "B20 --\u003e B33",
      "B20 --\u003e B43",
      "B20 --\u003e B55",
      "B20 --\u003e B56",
      "B20 --\u003e B57",
      "B20 --\u003e B58",
      "B20 --\u003e B64",
      "B21 --\u003e B65",
      "B22 --\u003e B65",
      "B23 --\u003e B65",
      "B24 --\u003e B65",
      "B25 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B28",
      "B27 --\u003e B28",
      "B28 --\u003e B65",
      "B29 --\u003e B30",
      "B29 --\u003e B31",
      "B30 --\u003e B32",
      "B31 --\u003e B32",
      "B32 --\u003e B65",
      "B33 --\u003e B34",
      "B33 --\u003e B35",
      "B34 --\u003e B42",
      "B35 --\u003e B36",
      "B35 --\u003e B37",
      "B36 --\u003e B42",
      "B37 --\u003e B38",
      "B37 --\u003e B39",
      "B38 --\u003e B42",
      "B39 --\u003e B40",
      "B39 --\u003e B41",
      "B40 --\u003e B42",
      "B41 --\u003e B42",
      "B42 --\u003e B65",
      "B43 --\u003e B44",
      "B43 --\u003e B45",
      "B44 --\u003e B54",
      "B45 --\u003e B46",
      "B45 --\u003e B47",
      "B46 --\u003e B54",
      "B47 --\u003e B48",
      "B47 --\u003e B49",
      "B48 --\u003e B54",
      "B49 --\u003e B50",
      "B49 --\u003e B51",
      "B50 --\u003e B54",
      "B51 --\u003e B52",
      "B51 --\u003e B53",
      "B52 --\u003e B54",
      "B53 --\u003e B54",
      "B54 --\u003e B65",
      "B55 --\u003e B65",
      "B56 --\u003e B65",
      "B57 --\u003e B65",
      "B58 --\u003e B59",
      "B58 --\u003e B60",
      "B59 --\u003e B63",
      "B60 --\u003e B61",
      "B60 --\u003e B62",
      "B61 --\u003e B63",
      "B62 --\u003e B63",
      "B63 --\u003e B65",
      "B64 --\u003e [EXIT]",
      "B65 --\u003e B5",
      "B66 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenBuffer#_reportError(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TokenBuffer",
    "methodName": "deserialize",
    "signature": "com.fasterxml.jackson.databind.util.TokenBuffer deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)",
    "visibility": "public",
    "body": "{\r\n    if (!p.hasToken(JsonToken.FIELD_NAME)) {\r\n        copyCurrentStructure(p);\r\n        return this;\r\n    }\r\n    // 28-Oct-2014, tatu: As per [databind#592], need to support a special case of starting from\r\n    //    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need\r\n    //    to assume one did exist.\r\n    JsonToken t;\r\n    writeStartObject();\r\n    do {\r\n        copyCurrentStructure(p);\r\n    } while ((t \u003d p.nextToken()) \u003d\u003d JsonToken.FIELD_NAME);\r\n    if (t !\u003d JsonToken.END_OBJECT) {\r\n        ctxt.reportWrongTokenException(TokenBuffer.class, JsonToken.END_OBJECT, \"Expected END_OBJECT after copying contents of a JsonParser into TokenBuffer, got \" + t);\r\n        // never gets here\r\n    }\r\n    writeEndObject();\r\n    return this;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B3 : If($r3 \u003d\u003d $r4) → B4 | else → B3",
      "B4 : If($r3 \u003d\u003d $r5) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  TokenBuffer\n  JsonParser\n  DeserializationContext\n  $r1 \u003d JsonToken FIELD_NAME\u003e\n  $z0 \u003d r0.hasToken($r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r2.copyCurrentStructure(r0)\n  return\n}",
      "B2 {\n  r2.writeStartObject()\n}",
      "B3 {\n  r2.copyCurrentStructure(r0)\n  $r3 \u003d r0.nextToken()\n  $r4 \u003d JsonToken FIELD_NAME\u003e\n  if ($r3 \u003d\u003d $r4) goto B4 else B3\n}",
      "B4 {\n  $r5 \u003d JsonToken END_OBJECT\u003e\n  if ($r3 \u003d\u003d $r5) goto B5 else B6\n}",
      "B5 {\n  $r7 \u003d JsonToken END_OBJECT\u003e\n  $r8 \u003d String.valueOf($r3)\n  $r10 \u003d dynInvoke makeConcatWithConstants($r8)\n  $r9 \u003d Object)[0]\n  r6.reportWrongTokenException(class \"Lcom/fasterxml/jackson/databind/util/TokenBuffer;\", $r7, $r10, $r9)\n}",
      "B6 {\n  r2.writeEndObject()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B3",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenBuffer#writeEndObject(...0)",
        "body": "{\r\n    _appendEndMarker(JsonToken.END_OBJECT);\r\n    // Let\u0027s allow unbalanced tho... i.e. not run out of root level, ever\r\n    JsonWriteContext c \u003d _writeContext.getParent();\r\n    if (c !\u003d null) {\r\n        _writeContext \u003d c;\r\n    }\r\n}"
      },
      {
        "name": "TokenBuffer#writeStartObject(...0)",
        "body": "{\r\n    _writeContext.writeValue();\r\n    _appendStartMarker(JsonToken.START_OBJECT);\r\n    _writeContext \u003d _writeContext.createChildObjectContext();\r\n}"
      },
      {
        "name": "TokenBuffer#copyCurrentStructure(...1)",
        "body": "{\r\n    JsonToken t \u003d p.currentToken();\r\n    // Let\u0027s handle field-name separately first\r\n    if (t \u003d\u003d JsonToken.FIELD_NAME) {\r\n        if (_mayHaveNativeIds) {\r\n            _checkNativeIds(p);\r\n        }\r\n        writeFieldName(p.currentName());\r\n        t \u003d p.nextToken();\r\n        // fall-through to copy the associated value\r\n    } else if (t \u003d\u003d null) {\r\n        // 13-Dec-2023, tatu: For some unexpected EOF cases we may end up here, so:\r\n        throw new JsonEOFException(p, null, \"Unexpected end-of-input\");\r\n    }\r\n    // We\u0027ll do minor handling here to separate structured, scalar values,\r\n    // then delegate appropriately.\r\n    // Plus also deal with oddity of \"dangling\" END_OBJECT/END_ARRAY\r\n    switch(t) {\r\n        case START_ARRAY:\r\n            if (_mayHaveNativeIds) {\r\n                _checkNativeIds(p);\r\n            }\r\n            writeStartArray();\r\n            _copyBufferContents(p);\r\n            break;\r\n        case START_OBJECT:\r\n            if (_mayHaveNativeIds) {\r\n                _checkNativeIds(p);\r\n            }\r\n            writeStartObject();\r\n            _copyBufferContents(p);\r\n            break;\r\n        case END_ARRAY:\r\n            writeEndArray();\r\n            break;\r\n        case END_OBJECT:\r\n            writeEndObject();\r\n            break;\r\n        default:\r\n            // others are simple:\r\n            _copyBufferValue(p, t);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TokenBuffer",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    // Let\u0027s print up to 100 first tokens...\r\n    final int MAX_COUNT \u003d 100;\r\n    StringBuilder sb \u003d new StringBuilder();\r\n    sb.append(\"[TokenBuffer: \");\r\n    /*\r\nsb.append(\"NativeTypeIds\u003d\").append(_hasNativeTypeIds).append(\",\");\r\nsb.append(\"NativeObjectIds\u003d\").append(_hasNativeObjectIds).append(\",\");\r\n*/\r\n    JsonParser jp \u003d asParser();\r\n    int count \u003d 0;\r\n    final boolean hasNativeIds \u003d _hasNativeTypeIds || _hasNativeObjectIds;\r\n    while (true) {\r\n        JsonToken t;\r\n        try {\r\n            t \u003d jp.nextToken();\r\n            if (t \u003d\u003d null)\r\n                break;\r\n            if (hasNativeIds) {\r\n                _appendNativeIds(sb);\r\n            }\r\n            if (count \u003c MAX_COUNT) {\r\n                if (count \u003e 0) {\r\n                    sb.append(\", \");\r\n                }\r\n                sb.append(t.toString());\r\n                if (t \u003d\u003d JsonToken.FIELD_NAME) {\r\n                    sb.append(\u0027(\u0027);\r\n                    sb.append(jp.currentName());\r\n                    sb.append(\u0027)\u0027);\r\n                }\r\n            }\r\n        } catch (IOException ioe) {\r\n            // should never occur\r\n            throw new IllegalStateException(ioe);\r\n        }\r\n        ++count;\r\n    }\r\n    if (count \u003e\u003d MAX_COUNT) {\r\n        sb.append(\" ... (truncated \").append(count - MAX_COUNT).append(\" entries)\");\r\n    }\r\n    sb.append(\u0027]\u0027);\r\n    return sb.toString();\r\n}",
    "nodes": 20,
    "edges": 26,
    "cc": 8,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z2 \u003d\u003d false) → B2 | else → B3",
      "B5 : If($r11 !\u003d null) → B6 | else → B7",
      "B7 : If(z1 \u003d\u003d false) → B8 | else → B9",
      "B9 : If(i1 \u003e\u003d 100) → B10 | else → B14",
      "B10 : If(i1 \u003c\u003d 0) → B11 | else → B12",
      "B12 : If($r11 !\u003d $r4) → B13 | else → B14",
      "B17 : If(i1 \u003c 100) → B18 | else → B19"
    ],
    "blockList": [
      "B0 {\n  TokenBuffer\n  $r0 \u003d StringBuilder\n  new StringBuilder()\n  $r0.append(\"TokenBuffer: \")\n  r2 \u003d r1.asParser()\n  i1 \u003d 0\n  $z0 \u003d TokenBuffer: boolean _hasNativeTypeIds\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z2 \u003d TokenBuffer: boolean _hasNativeObjectIds\u003e\n  if ($z2 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z3 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z3 \u003d 0\n}",
      "B4 {\n  z1 \u003d $z3\n}",
      "B5 {\n  $r11 \u003d r2.nextToken()\n  if ($r11 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  goto B17\n}",
      "B7 {\n  if (z1 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  r1._appendNativeIds($r0)\n}",
      "B9 {\n  if (i1 \u003e\u003d 100) goto B10 else B14\n}",
      "B10 {\n  if (i1 \u003c\u003d 0) goto B11 else B12\n}",
      "B11 {\n  $r0.append(\", \")\n}",
      "B12 {\n  $r3 \u003d $r11.toString()\n  $r0.append($r3)\n  $r4 \u003d JsonToken FIELD_NAME\u003e\n  if ($r11 !\u003d $r4) goto B13 else B14\n}",
      "B13 {\n  $r0.append(40)\n  $r5 \u003d r2.currentName()\n  $r0.append($r5)\n  $r0.append(41)\n}",
      "B14 {\n  goto B16\n}",
      "B15 {\n  $r9 :\u003d @caughtexception\n  $r10 \u003d IllegalStateException\n  new IllegalStateException($r9)\n  throw $r10\n}",
      "B16 {\n  i1 \u003d i1 + 1\n  goto B5\n}",
      "B17 {\n  if (i1 \u003c 100) goto B18 else B19\n}",
      "B18 {\n  $r7 \u003d $r0.append(\" ... (truncated \")\n  $i0 \u003d i1 - 100\n  $r8 \u003d $r7.append($i0)\n  $r8.append(\" entries)\")\n}",
      "B19 {\n  $r0.append(93)\n  $r6 \u003d $r0.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B17",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B14",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B5",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenBuffer#asParser(...0)",
        "body": "{\r\n    return asParser(_objectCodec);\r\n}"
      },
      {
        "name": "TokenBuffer#_appendNativeIds(...1)",
        "body": "{\r\n    Object objectId \u003d _last.findObjectId(_appendAt - 1);\r\n    if (objectId !\u003d null) {\r\n        sb.append(\"[objectId\u003d\").append(String.valueOf(objectId)).append(\u0027]\u0027);\r\n    }\r\n    Object typeId \u003d _last.findTypeId(_appendAt - 1);\r\n    if (typeId !\u003d null) {\r\n        sb.append(\"[typeId\u003d\").append(String.valueOf(typeId)).append(\u0027]\u0027);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TokenBuffer",
    "methodName": "isEnabled",
    "signature": "boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TokenBuffer\n  JsonGenerator$Feature\n  $i0 \u003d TokenBuffer: int _generatorFeatures\u003e\n  $i1 \u003d r1.getMask()\n  $i2 \u003d $i0 \u0026 $i1\n  if ($i2 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TokenBuffer",
    "methodName": "writeEndArray",
    "signature": "void writeEndArray()",
    "visibility": "public",
    "body": "{\r\n    _appendEndMarker(JsonToken.END_ARRAY);\r\n    // Let\u0027s allow unbalanced tho... i.e. not run out of root level, ever\r\n    JsonWriteContext c \u003d _writeContext.getParent();\r\n    if (c !\u003d null) {\r\n        _writeContext \u003d c;\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TokenBuffer\n  $r1 \u003d JsonToken END_ARRAY\u003e\n  r0._appendEndMarker($r1)\n  $r2 \u003d JsonWriteContext _writeContext\u003e\n  r3 \u003d $r2.getParent()\n  if (r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  JsonWriteContext _writeContext\u003e \u003d r3\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenBuffer#_appendEndMarker(...1)",
        "body": "{\r\n    // NOTE: type/object id not relevant\r\n    Segment next \u003d _last.append(_appendAt, type);\r\n    if (next \u003d\u003d null) {\r\n        ++_appendAt;\r\n    } else {\r\n        _last \u003d next;\r\n        _appendAt \u003d 1;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TokenBuffer",
    "methodName": "writeEndObject",
    "signature": "void writeEndObject()",
    "visibility": "public",
    "body": "{\r\n    _appendEndMarker(JsonToken.END_OBJECT);\r\n    // Let\u0027s allow unbalanced tho... i.e. not run out of root level, ever\r\n    JsonWriteContext c \u003d _writeContext.getParent();\r\n    if (c !\u003d null) {\r\n        _writeContext \u003d c;\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TokenBuffer\n  $r1 \u003d JsonToken END_OBJECT\u003e\n  r0._appendEndMarker($r1)\n  $r2 \u003d JsonWriteContext _writeContext\u003e\n  r3 \u003d $r2.getParent()\n  if (r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  JsonWriteContext _writeContext\u003e \u003d r3\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenBuffer#_appendEndMarker(...1)",
        "body": "{\r\n    // NOTE: type/object id not relevant\r\n    Segment next \u003d _last.append(_appendAt, type);\r\n    if (next \u003d\u003d null) {\r\n        ++_appendAt;\r\n    } else {\r\n        _last \u003d next;\r\n        _appendAt \u003d 1;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TokenBuffer",
    "methodName": "writeString",
    "signature": "void writeString(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (text \u003d\u003d null) {\r\n        writeNull();\r\n    } else {\r\n        _appendValue(JsonToken.VALUE_STRING, text);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TokenBuffer\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r1.writeNull()\n  goto B3\n}",
      "B2 {\n  $r2 \u003d JsonToken VALUE_STRING\u003e\n  r1._appendValue($r2, r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenBuffer#_appendValue(...2)",
        "body": "{\r\n    _writeContext.writeValue();\r\n    Segment next;\r\n    if (_hasNativeId) {\r\n        next \u003d _last.append(_appendAt, type, value, _objectId, _typeId);\r\n    } else {\r\n        next \u003d _last.append(_appendAt, type, value);\r\n    }\r\n    if (next \u003d\u003d null) {\r\n        ++_appendAt;\r\n    } else {\r\n        _last \u003d next;\r\n        _appendAt \u003d 1;\r\n    }\r\n}"
      },
      {
        "name": "TokenBuffer#writeNull(...0)",
        "body": "{\r\n    _appendValue(JsonToken.VALUE_NULL);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TokenBuffer",
    "methodName": "writeString",
    "signature": "void writeString(com.fasterxml.jackson.core.SerializableString)",
    "visibility": "public",
    "body": "{\r\n    if (text \u003d\u003d null) {\r\n        writeNull();\r\n    } else {\r\n        _appendValue(JsonToken.VALUE_STRING, text);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TokenBuffer\n  SerializableString\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r1.writeNull()\n  goto B3\n}",
      "B2 {\n  $r2 \u003d JsonToken VALUE_STRING\u003e\n  r1._appendValue($r2, r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenBuffer#_appendValue(...2)",
        "body": "{\r\n    _writeContext.writeValue();\r\n    Segment next;\r\n    if (_hasNativeId) {\r\n        next \u003d _last.append(_appendAt, type, value, _objectId, _typeId);\r\n    } else {\r\n        next \u003d _last.append(_appendAt, type, value);\r\n    }\r\n    if (next \u003d\u003d null) {\r\n        ++_appendAt;\r\n    } else {\r\n        _last \u003d next;\r\n        _appendAt \u003d 1;\r\n    }\r\n}"
      },
      {
        "name": "TokenBuffer#writeNull(...0)",
        "body": "{\r\n    _appendValue(JsonToken.VALUE_NULL);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TokenBuffer",
    "methodName": "writeString",
    "signature": "void writeString(java.io.Reader,int)",
    "visibility": "public",
    "body": "{\r\n    if (reader \u003d\u003d null) {\r\n        _reportError(\"null reader\");\r\n    }\r\n    int toRead \u003d (len \u003e\u003d 0) ? len : Integer.MAX_VALUE;\r\n    // 11-Mar-2023, tatu: Really crude implementation, but it is not\r\n    //    expected this method gets often used. Feel free to send a PR\r\n    //    for more optimal handling if you got an itch. :)\r\n    final char[] buf \u003d new char[1000];\r\n    StringBuilder sb \u003d new StringBuilder(1000);\r\n    while (toRead \u003e 0) {\r\n        int toReadNow \u003d Math.min(toRead, buf.length);\r\n        int numRead \u003d reader.read(buf, 0, toReadNow);\r\n        if (numRead \u003c\u003d 0) {\r\n            break;\r\n        }\r\n        sb.append(buf, 0, numRead);\r\n        toRead -\u003d numRead;\r\n    }\r\n    if (toRead \u003e 0 \u0026\u0026 len \u003e\u003d 0) {\r\n        _reportError(\"Was not able to read enough from reader\");\r\n    }\r\n    _appendValue(JsonToken.VALUE_STRING, sb.toString());\r\n}",
    "nodes": 14,
    "edges": 19,
    "cc": 7,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003c 0) → B3 | else → B4",
      "B6 : If(i5 \u003c\u003d 0) → B7 | else → B10",
      "B7 : If(i3 \u003e 0) → B8 | else → B9",
      "B10 : If(i5 \u003c\u003d 0) → B11 | else → B13",
      "B11 : If(i0 \u003c 0) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  TokenBuffer\n  Reader\n  i0 :\u003d @parameter1: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r2._reportError(\"null reader\")\n}",
      "B2 {\n  if (i0 \u003c 0) goto B3 else B4\n}",
      "B3 {\n  $i4 \u003d i0\n  goto B5\n}",
      "B4 {\n  $i4 \u003d 2147483647\n}",
      "B5 {\n  i5 \u003d $i4\n  $r3 \u003d newarray (char)[1000]\n  $r1 \u003d StringBuilder\n  new StringBuilder(1000)\n}",
      "B6 {\n  if (i5 \u003c\u003d 0) goto B7 else B10\n}",
      "B7 {\n  $i1 \u003d lengthof $r3\n  i2 \u003d Math.min(i5, $i1)\n  i3 \u003d r0.read($r3, 0, i2)\n  if (i3 \u003e 0) goto B8 else B9\n}",
      "B8 {\n  goto B10\n}",
      "B9 {\n  $r1.append($r3, 0, i3)\n  i5 \u003d i5 - i3\n  goto B6\n}",
      "B10 {\n  if (i5 \u003c\u003d 0) goto B11 else B13\n}",
      "B11 {\n  if (i0 \u003c 0) goto B12 else B13\n}",
      "B12 {\n  r2._reportError(\"Was not able to read enough from reader\")\n}",
      "B13 {\n  $r4 \u003d JsonToken VALUE_STRING\u003e\n  $r5 \u003d $r1.toString()\n  r2._appendValue($r4, $r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B6",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenBuffer#_appendValue(...2)",
        "body": "{\r\n    _writeContext.writeValue();\r\n    Segment next;\r\n    if (_hasNativeId) {\r\n        next \u003d _last.append(_appendAt, type, value, _objectId, _typeId);\r\n    } else {\r\n        next \u003d _last.append(_appendAt, type, value);\r\n    }\r\n    if (next \u003d\u003d null) {\r\n        ++_appendAt;\r\n    } else {\r\n        _last \u003d next;\r\n        _appendAt \u003d 1;\r\n    }\r\n}"
      },
      {
        "name": "TokenBuffer#_reportError(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TokenBuffer",
    "methodName": "writeRawValue",
    "signature": "void writeRawValue(java.lang.String,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (offset \u003e 0 || len !\u003d text.length()) {\r\n        text \u003d text.substring(offset, offset + len);\r\n    }\r\n    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003e 0) → B1 | else → B2",
      "B1 : If(i1 \u003d\u003d $i3) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TokenBuffer\n  String\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  if (i0 \u003e 0) goto B1 else B2\n}",
      "B1 {\n  $i3 \u003d r1.length()\n  if (i1 \u003d\u003d $i3) goto B2 else B3\n}",
      "B2 {\n  $i2 \u003d i0 + i1\n  r1 \u003d r1.substring(i0, $i2)\n}",
      "B3 {\n  $r2 \u003d JsonToken VALUE_EMBEDDED_OBJECT\u003e\n  $r3 \u003d RawValue\n  new RawValue(r1)\n  r0._appendValue($r2, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenBuffer#_appendValue(...2)",
        "body": "{\r\n    _writeContext.writeValue();\r\n    Segment next;\r\n    if (_hasNativeId) {\r\n        next \u003d _last.append(_appendAt, type, value, _objectId, _typeId);\r\n    } else {\r\n        next \u003d _last.append(_appendAt, type, value);\r\n    }\r\n    if (next \u003d\u003d null) {\r\n        ++_appendAt;\r\n    } else {\r\n        _last \u003d next;\r\n        _appendAt \u003d 1;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TokenBuffer",
    "methodName": "writeNumber",
    "signature": "void writeNumber(java.math.BigDecimal)",
    "visibility": "public",
    "body": "{\r\n    if (dec \u003d\u003d null) {\r\n        writeNull();\r\n    } else {\r\n        _appendValue(JsonToken.VALUE_NUMBER_FLOAT, dec);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TokenBuffer\n  BigDecimal\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r1.writeNull()\n  goto B3\n}",
      "B2 {\n  $r2 \u003d JsonToken VALUE_NUMBER_FLOAT\u003e\n  r1._appendValue($r2, r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenBuffer#_appendValue(...2)",
        "body": "{\r\n    _writeContext.writeValue();\r\n    Segment next;\r\n    if (_hasNativeId) {\r\n        next \u003d _last.append(_appendAt, type, value, _objectId, _typeId);\r\n    } else {\r\n        next \u003d _last.append(_appendAt, type, value);\r\n    }\r\n    if (next \u003d\u003d null) {\r\n        ++_appendAt;\r\n    } else {\r\n        _last \u003d next;\r\n        _appendAt \u003d 1;\r\n    }\r\n}"
      },
      {
        "name": "TokenBuffer#writeNull(...0)",
        "body": "{\r\n    _appendValue(JsonToken.VALUE_NULL);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TokenBuffer",
    "methodName": "writeNumber",
    "signature": "void writeNumber(java.math.BigInteger)",
    "visibility": "public",
    "body": "{\r\n    if (v \u003d\u003d null) {\r\n        writeNull();\r\n    } else {\r\n        _appendValue(JsonToken.VALUE_NUMBER_INT, v);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TokenBuffer\n  BigInteger\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r1.writeNull()\n  goto B3\n}",
      "B2 {\n  $r2 \u003d JsonToken VALUE_NUMBER_INT\u003e\n  r1._appendValue($r2, r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenBuffer#_appendValue(...2)",
        "body": "{\r\n    _writeContext.writeValue();\r\n    Segment next;\r\n    if (_hasNativeId) {\r\n        next \u003d _last.append(_appendAt, type, value, _objectId, _typeId);\r\n    } else {\r\n        next \u003d _last.append(_appendAt, type, value);\r\n    }\r\n    if (next \u003d\u003d null) {\r\n        ++_appendAt;\r\n    } else {\r\n        _last \u003d next;\r\n        _appendAt \u003d 1;\r\n    }\r\n}"
      },
      {
        "name": "TokenBuffer#writeNull(...0)",
        "body": "{\r\n    _appendValue(JsonToken.VALUE_NULL);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TokenBuffer",
    "methodName": "writeNumber",
    "signature": "void writeNumber(java.lang.String,boolean)",
    "visibility": "public",
    "body": "{\r\n    _appendValue(isInteger ? JsonToken.VALUE_NUMBER_INT : JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TokenBuffer\n  String\n  z0 :\u003d @parameter1: boolean\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d JsonToken VALUE_NUMBER_INT\u003e\n  goto B3\n}",
      "B2 {\n  $r2 \u003d JsonToken VALUE_NUMBER_FLOAT\u003e\n}",
      "B3 {\n  r0._appendValue($r2, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenBuffer#_appendValue(...2)",
        "body": "{\r\n    _writeContext.writeValue();\r\n    Segment next;\r\n    if (_hasNativeId) {\r\n        next \u003d _last.append(_appendAt, type, value, _objectId, _typeId);\r\n    } else {\r\n        next \u003d _last.append(_appendAt, type, value);\r\n    }\r\n    if (next \u003d\u003d null) {\r\n        ++_appendAt;\r\n    } else {\r\n        _last \u003d next;\r\n        _appendAt \u003d 1;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TokenBuffer",
    "methodName": "writeBoolean",
    "signature": "void writeBoolean(boolean)",
    "visibility": "public",
    "body": "{\r\n    _appendValue(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TokenBuffer\n  z0 :\u003d @parameter0: boolean\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d JsonToken VALUE_TRUE\u003e\n  goto B3\n}",
      "B2 {\n  $r1 \u003d JsonToken VALUE_FALSE\u003e\n}",
      "B3 {\n  r0._appendValue($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenBuffer#_appendValue(...1)",
        "body": "{\r\n    _writeContext.writeValue();\r\n    Segment next;\r\n    if (_hasNativeId) {\r\n        next \u003d _last.append(_appendAt, type, _objectId, _typeId);\r\n    } else {\r\n        next \u003d _last.append(_appendAt, type);\r\n    }\r\n    if (next \u003d\u003d null) {\r\n        ++_appendAt;\r\n    } else {\r\n        _last \u003d next;\r\n        // since we added first at 0\r\n        _appendAt \u003d 1;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TokenBuffer",
    "methodName": "writeObject",
    "signature": "void writeObject(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d null) {\r\n        writeNull();\r\n        return;\r\n    }\r\n    Class\u003c?\u003e raw \u003d value.getClass();\r\n    if (raw \u003d\u003d byte[].class || (value instanceof RawValue)) {\r\n        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, value);\r\n        return;\r\n    }\r\n    if (_objectCodec \u003d\u003d null) {\r\n        // 28-May-2014, tatu: Tricky choice here; if no codec, should we\r\n        //   err out, or just embed? For now, do latter.\r\n        //          throw new XxxException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\r\n        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, value);\r\n    } else {\r\n        _objectCodec.writeValue(this, value);\r\n    }\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r1 \u003d\u003d class \"[B\") → B3 | else → B4",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5",
      "B5 : If($r4 !\u003d null) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  TokenBuffer\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r2.writeNull()\n  return\n}",
      "B2 {\n  r1 \u003d r0.getClass()\n  if (r1 \u003d\u003d class \"[B\") goto B3 else B4\n}",
      "B3 {\n  $z0 \u003d RawValue\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r3 \u003d JsonToken VALUE_EMBEDDED_OBJECT\u003e\n  r2._appendValue($r3, r0)\n  return\n}",
      "B5 {\n  $r4 \u003d ObjectCodec _objectCodec\u003e\n  if ($r4 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r6 \u003d JsonToken VALUE_EMBEDDED_OBJECT\u003e\n  r2._appendValue($r6, r0)\n  goto B8\n}",
      "B7 {\n  $r5 \u003d ObjectCodec _objectCodec\u003e\n  $r5.writeValue(r2, r0)\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenBuffer#_appendValue(...2)",
        "body": "{\r\n    _writeContext.writeValue();\r\n    Segment next;\r\n    if (_hasNativeId) {\r\n        next \u003d _last.append(_appendAt, type, value, _objectId, _typeId);\r\n    } else {\r\n        next \u003d _last.append(_appendAt, type, value);\r\n    }\r\n    if (next \u003d\u003d null) {\r\n        ++_appendAt;\r\n    } else {\r\n        _last \u003d next;\r\n        _appendAt \u003d 1;\r\n    }\r\n}"
      },
      {
        "name": "TokenBuffer#writeNull(...0)",
        "body": "{\r\n    _appendValue(JsonToken.VALUE_NULL);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TokenBuffer",
    "methodName": "writeTree",
    "signature": "void writeTree(com.fasterxml.jackson.core.TreeNode)",
    "visibility": "public",
    "body": "{\r\n    if (node \u003d\u003d null) {\r\n        writeNull();\r\n        return;\r\n    }\r\n    if (_objectCodec \u003d\u003d null) {\r\n        // as with \u0027writeObject()\u0027, is codec optional?\r\n        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, node);\r\n    } else {\r\n        _objectCodec.writeTree(this, node);\r\n    }\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($r2 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  TokenBuffer\n  TreeNode\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r1.writeNull()\n  return\n}",
      "B2 {\n  $r2 \u003d ObjectCodec _objectCodec\u003e\n  if ($r2 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d JsonToken VALUE_EMBEDDED_OBJECT\u003e\n  r1._appendValue($r4, r0)\n  goto B5\n}",
      "B4 {\n  $r3 \u003d ObjectCodec _objectCodec\u003e\n  $r3.writeTree(r1, r0)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenBuffer#_appendValue(...2)",
        "body": "{\r\n    _writeContext.writeValue();\r\n    Segment next;\r\n    if (_hasNativeId) {\r\n        next \u003d _last.append(_appendAt, type, value, _objectId, _typeId);\r\n    } else {\r\n        next \u003d _last.append(_appendAt, type, value);\r\n    }\r\n    if (next \u003d\u003d null) {\r\n        ++_appendAt;\r\n    } else {\r\n        _last \u003d next;\r\n        _appendAt \u003d 1;\r\n    }\r\n}"
      },
      {
        "name": "TokenBuffer#writeNull(...0)",
        "body": "{\r\n    _appendValue(JsonToken.VALUE_NULL);\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TokenBuffer",
    "methodName": "copyCurrentEvent",
    "signature": "void copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)",
    "visibility": "public",
    "body": "{\r\n    if (_mayHaveNativeIds) {\r\n        _checkNativeIds(p);\r\n    }\r\n    switch(p.currentToken()) {\r\n        case START_OBJECT:\r\n            writeStartObject();\r\n            break;\r\n        case END_OBJECT:\r\n            writeEndObject();\r\n            break;\r\n        case START_ARRAY:\r\n            writeStartArray();\r\n            break;\r\n        case END_ARRAY:\r\n            writeEndArray();\r\n            break;\r\n        case FIELD_NAME:\r\n            writeFieldName(p.currentName());\r\n            break;\r\n        case VALUE_STRING:\r\n            if (p.hasTextCharacters()) {\r\n                writeString(p.getTextCharacters(), p.getTextOffset(), p.getTextLength());\r\n            } else {\r\n                writeString(p.getText());\r\n            }\r\n            break;\r\n        case VALUE_NUMBER_INT:\r\n            switch(p.getNumberType()) {\r\n                case INT:\r\n                    writeNumber(p.getIntValue());\r\n                    break;\r\n                case BIG_INTEGER:\r\n                    writeLazyInteger(p.getNumberValueDeferred());\r\n                    break;\r\n                default:\r\n                    writeNumber(p.getLongValue());\r\n            }\r\n            break;\r\n        case VALUE_NUMBER_FLOAT:\r\n            writeLazyDecimal(p.getNumberValueDeferred());\r\n            break;\r\n        case VALUE_TRUE:\r\n            writeBoolean(true);\r\n            break;\r\n        case VALUE_FALSE:\r\n            writeBoolean(false);\r\n            break;\r\n        case VALUE_NULL:\r\n            writeNull();\r\n            break;\r\n        case VALUE_EMBEDDED_OBJECT:\r\n            writeObject(p.getEmbeddedObject());\r\n            break;\r\n        default:\r\n            throw new RuntimeException(\"Internal error: unexpected token: \" + p.currentToken());\r\n    }\r\n}",
    "nodes": 22,
    "edges": 36,
    "cc": 16,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(switch-on $i1) → B3 | else → B4",
      "B8 : If($z1 \u003d\u003d false) → B9 | else → B10",
      "B11 : If(switch-on $i3) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  TokenBuffer\n  JsonParser\n  $z0 \u003d TokenBuffer: boolean _mayHaveNativeIds\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r0._checkNativeIds(r1)\n}",
      "B2 {\n  $r2 \u003d TokenBuffer$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonToken\u003e\n  $r3 \u003d r1.currentToken()\n  $i0 \u003d $r3.ordinal()\n  $i1 \u003d $r2[$i0]\n  RuntimeException; }\n}",
      "B3 {\n  r0.writeStartObject()\n  goto B21\n}",
      "B4 {\n  r0.writeEndObject()\n  goto B21\n}",
      "B5 {\n  r0.writeStartArray()\n  goto B21\n}",
      "B6 {\n  r0.writeEndArray()\n  goto B21\n}",
      "B7 {\n  $r11 \u003d r1.currentName()\n  r0.writeFieldName($r11)\n  goto B21\n}",
      "B8 {\n  $z1 \u003d r1.hasTextCharacters()\n  if ($z1 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r10 \u003d r1.getTextCharacters()\n  $i7 \u003d r1.getTextOffset()\n  $i6 \u003d r1.getTextLength()\n  r0.writeString($r10, $i7, $i6)\n  goto B21\n}",
      "B10 {\n  $r9 \u003d r1.getText()\n  r0.writeString($r9)\n  goto B21\n}",
      "B11 {\n  $r6 \u003d TokenBuffer$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonParser$NumberType\u003e\n  $r7 \u003d r1.getNumberType()\n  $i2 \u003d $r7.ordinal()\n  $i3 \u003d $r6[$i2]\n  JsonParser: long getLongValue()\u003e(); }\n}",
      "B12 {\n  $i4 \u003d r1.getIntValue()\n  r0.writeNumber($i4)\n  goto B21\n}",
      "B13 {\n  $r8 \u003d r1.getNumberValueDeferred()\n  r0.writeLazyInteger($r8)\n  goto B21\n}",
      "B14 {\n  $l5 \u003d r1.getLongValue()\n  r0.writeNumber($l5)\n  goto B21\n}",
      "B15 {\n  $r5 \u003d r1.getNumberValueDeferred()\n  r0.writeLazyDecimal($r5)\n  goto B21\n}",
      "B16 {\n  r0.writeBoolean(1)\n  goto B21\n}",
      "B17 {\n  r0.writeBoolean(0)\n  goto B21\n}",
      "B18 {\n  r0.writeNull()\n  goto B21\n}",
      "B19 {\n  $r4 \u003d r1.getEmbeddedObject()\n  r0.writeObject($r4)\n  goto B21\n}",
      "B20 {\n  $r12 \u003d RuntimeException\n  $r13 \u003d r1.currentToken()\n  $r14 \u003d String.valueOf($r13)\n  $r15 \u003d dynInvoke makeConcatWithConstants($r14)\n  new RuntimeException($r15)\n  throw $r12\n}",
      "B21 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B2 --\u003e B5",
      "B2 --\u003e B6",
      "B2 --\u003e B7",
      "B2 --\u003e B8",
      "B2 --\u003e B11",
      "B2 --\u003e B15",
      "B2 --\u003e B16",
      "B2 --\u003e B17",
      "B2 --\u003e B18",
      "B2 --\u003e B19",
      "B2 --\u003e B20",
      "B3 --\u003e B21",
      "B4 --\u003e B21",
      "B5 --\u003e B21",
      "B6 --\u003e B21",
      "B7 --\u003e B21",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B21",
      "B10 --\u003e B21",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B11 --\u003e B14",
      "B12 --\u003e B21",
      "B13 --\u003e B21",
      "B14 --\u003e B21",
      "B15 --\u003e B21",
      "B16 --\u003e B21",
      "B17 --\u003e B21",
      "B18 --\u003e B21",
      "B19 --\u003e B21",
      "B20 --\u003e [EXIT]",
      "B21 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenBuffer#writeObject(...1)",
        "body": "{\r\n    if (value \u003d\u003d null) {\r\n        writeNull();\r\n        return;\r\n    }\r\n    Class\u003c?\u003e raw \u003d value.getClass();\r\n    if (raw \u003d\u003d byte[].class || (value instanceof RawValue)) {\r\n        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, value);\r\n        return;\r\n    }\r\n    if (_objectCodec \u003d\u003d null) {\r\n        // 28-May-2014, tatu: Tricky choice here; if no codec, should we\r\n        //   err out, or just embed? For now, do latter.\r\n        //          throw new XxxException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\r\n        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, value);\r\n    } else {\r\n        _objectCodec.writeValue(this, value);\r\n    }\r\n}"
      },
      {
        "name": "TokenBuffer#writeEndArray(...0)",
        "body": "{\r\n    _appendEndMarker(JsonToken.END_ARRAY);\r\n    // Let\u0027s allow unbalanced tho... i.e. not run out of root level, ever\r\n    JsonWriteContext c \u003d _writeContext.getParent();\r\n    if (c !\u003d null) {\r\n        _writeContext \u003d c;\r\n    }\r\n}"
      },
      {
        "name": "TokenBuffer#writeLazyInteger(...1)",
        "body": "{\r\n    _appendValue(JsonToken.VALUE_NUMBER_INT, encodedValue);\r\n}"
      },
      {
        "name": "TokenBuffer#writeBoolean(...1)",
        "body": "{\r\n    _appendValue(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\r\n}"
      },
      {
        "name": "TokenBuffer#writeNull(...0)",
        "body": "{\r\n    _appendValue(JsonToken.VALUE_NULL);\r\n}"
      },
      {
        "name": "TokenBuffer#writeStartArray(...0)",
        "body": "{\r\n    _writeContext.writeValue();\r\n    _appendStartMarker(JsonToken.START_ARRAY);\r\n    _writeContext \u003d _writeContext.createChildArrayContext();\r\n}"
      },
      {
        "name": "TokenBuffer#writeString(...1)",
        "body": "{\r\n    if (text \u003d\u003d null) {\r\n        writeNull();\r\n    } else {\r\n        _appendValue(JsonToken.VALUE_STRING, text);\r\n    }\r\n}"
      },
      {
        "name": "TokenBuffer#writeLazyDecimal(...1)",
        "body": "{\r\n    _appendValue(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\r\n}"
      },
      {
        "name": "TokenBuffer#writeNumber(...1)",
        "body": "{\r\n    _appendValue(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\r\n}"
      },
      {
        "name": "TokenBuffer#writeString(...3)",
        "body": "{\r\n    writeString(new String(text, offset, len));\r\n}"
      },
      {
        "name": "TokenBuffer#writeEndObject(...0)",
        "body": "{\r\n    _appendEndMarker(JsonToken.END_OBJECT);\r\n    // Let\u0027s allow unbalanced tho... i.e. not run out of root level, ever\r\n    JsonWriteContext c \u003d _writeContext.getParent();\r\n    if (c !\u003d null) {\r\n        _writeContext \u003d c;\r\n    }\r\n}"
      },
      {
        "name": "TokenBuffer#writeFieldName(...1)",
        "body": "{\r\n    _writeContext.writeFieldName(name);\r\n    _appendFieldName(name);\r\n}"
      },
      {
        "name": "TokenBuffer#_checkNativeIds(...1)",
        "body": "{\r\n    if ((_typeId \u003d p.getTypeId()) !\u003d null) {\r\n        _hasNativeId \u003d true;\r\n    }\r\n    if ((_objectId \u003d p.getObjectId()) !\u003d null) {\r\n        _hasNativeId \u003d true;\r\n    }\r\n}"
      },
      {
        "name": "TokenBuffer#writeStartObject(...0)",
        "body": "{\r\n    _writeContext.writeValue();\r\n    _appendStartMarker(JsonToken.START_OBJECT);\r\n    _writeContext \u003d _writeContext.createChildObjectContext();\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TokenBuffer",
    "methodName": "copyCurrentStructure",
    "signature": "void copyCurrentStructure(com.fasterxml.jackson.core.JsonParser)",
    "visibility": "public",
    "body": "{\r\n    JsonToken t \u003d p.currentToken();\r\n    // Let\u0027s handle field-name separately first\r\n    if (t \u003d\u003d JsonToken.FIELD_NAME) {\r\n        if (_mayHaveNativeIds) {\r\n            _checkNativeIds(p);\r\n        }\r\n        writeFieldName(p.currentName());\r\n        t \u003d p.nextToken();\r\n        // fall-through to copy the associated value\r\n    } else if (t \u003d\u003d null) {\r\n        // 13-Dec-2023, tatu: For some unexpected EOF cases we may end up here, so:\r\n        throw new JsonEOFException(p, null, \"Unexpected end-of-input\");\r\n    }\r\n    // We\u0027ll do minor handling here to separate structured, scalar values,\r\n    // then delegate appropriately.\r\n    // Plus also deal with oddity of \"dangling\" END_OBJECT/END_ARRAY\r\n    switch(t) {\r\n        case START_ARRAY:\r\n            if (_mayHaveNativeIds) {\r\n                _checkNativeIds(p);\r\n            }\r\n            writeStartArray();\r\n            _copyBufferContents(p);\r\n            break;\r\n        case START_OBJECT:\r\n            if (_mayHaveNativeIds) {\r\n                _checkNativeIds(p);\r\n            }\r\n            writeStartObject();\r\n            _copyBufferContents(p);\r\n            break;\r\n        case END_ARRAY:\r\n            writeEndArray();\r\n            break;\r\n        case END_OBJECT:\r\n            writeEndObject();\r\n            break;\r\n        default:\r\n            // others are simple:\r\n            _copyBufferValue(p, t);\r\n    }\r\n}",
    "nodes": 17,
    "edges": 24,
    "cc": 9,
    "flowSummary": [
      "B0 : If(r6 !\u003d $r1) → B1 | else → B4",
      "B1 : If($z2 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(r6 !\u003d null) → B5 | else → B6",
      "B6 : If(switch-on $i1) → B10 | else → B14",
      "B7 : If($z0 \u003d\u003d false) → B8 | else → B9",
      "B10 : If($z1 \u003d\u003d false) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  TokenBuffer\n  JsonParser\n  r6 \u003d r0.currentToken()\n  $r1 \u003d JsonToken FIELD_NAME\u003e\n  if (r6 !\u003d $r1) goto B1 else B4\n}",
      "B1 {\n  $z2 \u003d TokenBuffer: boolean _mayHaveNativeIds\u003e\n  if ($z2 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  r3._checkNativeIds(r0)\n}",
      "B3 {\n  $r5 \u003d r0.currentName()\n  r3.writeFieldName($r5)\n  r6 \u003d r0.nextToken()\n  goto B6\n}",
      "B4 {\n  if (r6 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r4 \u003d JsonEOFException\n  new JsonEOFException(r0, null, \"Unexpected end-of-input\")\n  throw $r4\n}",
      "B6 {\n  $r2 \u003d TokenBuffer$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonToken\u003e\n  $i0 \u003d r6.ordinal()\n  $i1 \u003d $r2[$i0]\n  JsonToken)\u003e(r0, r6); }\n}",
      "B7 {\n  $z0 \u003d TokenBuffer: boolean _mayHaveNativeIds\u003e\n  if ($z0 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  r3._checkNativeIds(r0)\n}",
      "B9 {\n  r3.writeStartArray()\n  r3._copyBufferContents(r0)\n  goto B16\n}",
      "B10 {\n  $z1 \u003d TokenBuffer: boolean _mayHaveNativeIds\u003e\n  if ($z1 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  r3._checkNativeIds(r0)\n}",
      "B12 {\n  r3.writeStartObject()\n  r3._copyBufferContents(r0)\n  goto B16\n}",
      "B13 {\n  r3.writeEndArray()\n  goto B16\n}",
      "B14 {\n  r3.writeEndObject()\n  goto B16\n}",
      "B15 {\n  r3._copyBufferValue(r0, r6)\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B10",
      "B6 --\u003e B14",
      "B6 --\u003e B7",
      "B6 --\u003e B13",
      "B6 --\u003e B15",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B16",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B16",
      "B13 --\u003e B16",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenBuffer#writeStartArray(...0)",
        "body": "{\r\n    _writeContext.writeValue();\r\n    _appendStartMarker(JsonToken.START_ARRAY);\r\n    _writeContext \u003d _writeContext.createChildArrayContext();\r\n}"
      },
      {
        "name": "TokenBuffer#writeEndArray(...0)",
        "body": "{\r\n    _appendEndMarker(JsonToken.END_ARRAY);\r\n    // Let\u0027s allow unbalanced tho... i.e. not run out of root level, ever\r\n    JsonWriteContext c \u003d _writeContext.getParent();\r\n    if (c !\u003d null) {\r\n        _writeContext \u003d c;\r\n    }\r\n}"
      },
      {
        "name": "TokenBuffer#writeFieldName(...1)",
        "body": "{\r\n    _writeContext.writeFieldName(name);\r\n    _appendFieldName(name);\r\n}"
      },
      {
        "name": "TokenBuffer#writeEndObject(...0)",
        "body": "{\r\n    _appendEndMarker(JsonToken.END_OBJECT);\r\n    // Let\u0027s allow unbalanced tho... i.e. not run out of root level, ever\r\n    JsonWriteContext c \u003d _writeContext.getParent();\r\n    if (c !\u003d null) {\r\n        _writeContext \u003d c;\r\n    }\r\n}"
      },
      {
        "name": "TokenBuffer#_checkNativeIds(...1)",
        "body": "{\r\n    if ((_typeId \u003d p.getTypeId()) !\u003d null) {\r\n        _hasNativeId \u003d true;\r\n    }\r\n    if ((_objectId \u003d p.getObjectId()) !\u003d null) {\r\n        _hasNativeId \u003d true;\r\n    }\r\n}"
      },
      {
        "name": "TokenBuffer#writeStartObject(...0)",
        "body": "{\r\n    _writeContext.writeValue();\r\n    _appendStartMarker(JsonToken.START_OBJECT);\r\n    _writeContext \u003d _writeContext.createChildObjectContext();\r\n}"
      },
      {
        "name": "TokenBuffer#_copyBufferContents(...1)",
        "body": "{\r\n    int depth \u003d 1;\r\n    JsonToken t;\r\n    while ((t \u003d p.nextToken()) !\u003d null) {\r\n        switch(t) {\r\n            case FIELD_NAME:\r\n                if (_mayHaveNativeIds) {\r\n                    _checkNativeIds(p);\r\n                }\r\n                writeFieldName(p.currentName());\r\n                break;\r\n            case START_ARRAY:\r\n                if (_mayHaveNativeIds) {\r\n                    _checkNativeIds(p);\r\n                }\r\n                writeStartArray();\r\n                ++depth;\r\n                break;\r\n            case START_OBJECT:\r\n                if (_mayHaveNativeIds) {\r\n                    _checkNativeIds(p);\r\n                }\r\n                writeStartObject();\r\n                ++depth;\r\n                break;\r\n            case END_ARRAY:\r\n                writeEndArray();\r\n                if (--depth \u003d\u003d 0) {\r\n                    return;\r\n                }\r\n                break;\r\n            case END_OBJECT:\r\n                writeEndObject();\r\n                if (--depth \u003d\u003d 0) {\r\n                    return;\r\n                }\r\n                break;\r\n            default:\r\n                _copyBufferValue(p, t);\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "TokenBuffer#_copyBufferValue(...2)",
        "body": "{\r\n    if (_mayHaveNativeIds) {\r\n        _checkNativeIds(p);\r\n    }\r\n    switch(t) {\r\n        case VALUE_STRING:\r\n            if (p.hasTextCharacters()) {\r\n                writeString(p.getTextCharacters(), p.getTextOffset(), p.getTextLength());\r\n            } else {\r\n                writeString(p.getText());\r\n            }\r\n            break;\r\n        case VALUE_NUMBER_INT:\r\n            switch(p.getNumberType()) {\r\n                case INT:\r\n                    writeNumber(p.getIntValue());\r\n                    break;\r\n                case BIG_INTEGER:\r\n                    writeLazyInteger(p.getNumberValueDeferred());\r\n                    break;\r\n                default:\r\n                    writeNumber(p.getLongValue());\r\n            }\r\n            break;\r\n        case VALUE_NUMBER_FLOAT:\r\n            writeLazyDecimal(p.getNumberValueDeferred());\r\n            break;\r\n        case VALUE_TRUE:\r\n            writeBoolean(true);\r\n            break;\r\n        case VALUE_FALSE:\r\n            writeBoolean(false);\r\n            break;\r\n        case VALUE_NULL:\r\n            writeNull();\r\n            break;\r\n        case VALUE_EMBEDDED_OBJECT:\r\n            writeObject(p.getEmbeddedObject());\r\n            break;\r\n        default:\r\n            throw new RuntimeException(\"Internal error: unexpected token: \" + t);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TokenBufferReadContext",
    "methodName": "createRootContext",
    "signature": "com.fasterxml.jackson.databind.util.TokenBufferReadContext createRootContext(com.fasterxml.jackson.core.JsonStreamContext)",
    "visibility": "public",
    "body": "{\r\n    // First: possible to have no current context; if so, just create bogus ROOT context\r\n    if (origContext \u003d\u003d null) {\r\n        return new TokenBufferReadContext();\r\n    }\r\n    return new TokenBufferReadContext(origContext, ContentReference.unknown());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JsonStreamContext\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d TokenBufferReadContext\n  new TokenBufferReadContext()\n  return\n}",
      "B2 {\n  $r1 \u003d TokenBufferReadContext\n  $r2 \u003d ContentReference.unknown()\n  new TokenBufferReadContext(r0, $r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TokenBufferReadContext",
    "methodName": "parentOrCopy",
    "signature": "com.fasterxml.jackson.databind.util.TokenBufferReadContext parentOrCopy()",
    "visibility": "public",
    "body": "{\r\n    // 30-Apr-2017, tatu: This is bit awkward since part on ancestor stack is of different\r\n    //     type (usually `JsonReadContext`)... and so for unbalanced buffers (with extra\r\n    //     END_OBJECT / END_ARRAY), we may need to create\r\n    if (_parent instanceof TokenBufferReadContext) {\r\n        return (TokenBufferReadContext) _parent;\r\n    }\r\n    if (_parent \u003d\u003d null) {\r\n        // unlikely, but just in case let\u0027s support\r\n        return new TokenBufferReadContext();\r\n    }\r\n    return new TokenBufferReadContext(_parent, _startLocation);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($r2 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  TokenBufferReadContext\n  $r1 \u003d JsonStreamContext _parent\u003e\n  $z0 \u003d TokenBufferReadContext\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d JsonStreamContext _parent\u003e\n  $r8 \u003d TokenBufferReadContext) $r7\n  return\n}",
      "B2 {\n  $r2 \u003d JsonStreamContext _parent\u003e\n  if ($r2 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d TokenBufferReadContext\n  new TokenBufferReadContext()\n  return\n}",
      "B4 {\n  $r3 \u003d TokenBufferReadContext\n  $r5 \u003d JsonStreamContext _parent\u003e\n  $r4 \u003d JsonLocation _startLocation\u003e\n  new TokenBufferReadContext($r5, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TokenBufferReadContext",
    "methodName": "hasCurrentName",
    "signature": "boolean hasCurrentName()",
    "visibility": "public",
    "body": "{\r\n    return _currentName !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TokenBufferReadContext\n  $r1 \u003d String _currentName\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TypeKey",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    if (_class !\u003d null) {\r\n        return \"{class: \" + _class.getName() + \", typed? \" + _isTyped + \"}\";\r\n    }\r\n    return \"{type: \" + _type + \", typed? \" + _isTyped + \"}\";\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TypeKey\n  $r1 \u003d Class _class\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d Class _class\u003e\n  $r6 \u003d $r5.getName()\n  $z1 \u003d TypeKey: boolean _isTyped\u003e\n  $r7 \u003d dynInvoke makeConcatWithConstants($r6, $z1)\n  return\n}",
      "B2 {\n  $r2 \u003d JavaType _type\u003e\n  $r3 \u003d String.valueOf($r2)\n  $z0 \u003d TypeKey: boolean _isTyped\u003e\n  $r4 \u003d dynInvoke makeConcatWithConstants($r3, $z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.TypeKey",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o \u003d\u003d null)\r\n        return false;\r\n    if (o \u003d\u003d this)\r\n        return true;\r\n    if (o.getClass() !\u003d getClass()) {\r\n        return false;\r\n    }\r\n    TypeKey other \u003d (TypeKey) o;\r\n    if (other._isTyped \u003d\u003d _isTyped) {\r\n        if (_class !\u003d null) {\r\n            return other._class \u003d\u003d _class;\r\n        }\r\n        return _type.equals(other._type);\r\n    }\r\n    return false;\r\n}",
    "nodes": 14,
    "edges": 14,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r0 !\u003d r1) → B3 | else → B4",
      "B4 : If($r3 \u003d\u003d $r2) → B5 | else → B6",
      "B6 : If($z1 !\u003d $z0) → B7 | else → B13",
      "B7 : If($r5 \u003d\u003d null) → B8 | else → B12",
      "B8 : If($r9 !\u003d $r8) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  TypeKey\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d r1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d r0.getClass()\n  $r2 \u003d r1.getClass()\n  if ($r3 \u003d\u003d $r2) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  r4 \u003d TypeKey) r0\n  $z1 \u003d TypeKey: boolean _isTyped\u003e\n  $z0 \u003d TypeKey: boolean _isTyped\u003e\n  if ($z1 !\u003d $z0) goto B7 else B13\n}",
      "B7 {\n  $r5 \u003d Class _class\u003e\n  if ($r5 \u003d\u003d null) goto B8 else B12\n}",
      "B8 {\n  $r9 \u003d Class _class\u003e\n  $r8 \u003d Class _class\u003e\n  if ($r9 !\u003d $r8) goto B9 else B10\n}",
      "B9 {\n  $z3 \u003d 1\n  goto B11\n}",
      "B10 {\n  $z3 \u003d 0\n}",
      "B11 {\n  return\n}",
      "B12 {\n  $r7 \u003d JavaType _type\u003e\n  $r6 \u003d JavaType _type\u003e\n  $z2 \u003d $r7.equals($r6)\n  return\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B13",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeKey#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "com.fasterxml.jackson.databind.util.ViewMatcher",
    "methodName": "construct",
    "signature": "com.fasterxml.jackson.databind.util.ViewMatcher construct(java.lang.Class[])",
    "visibility": "public",
    "body": "{\r\n    if (views \u003d\u003d null) {\r\n        return EMPTY;\r\n    }\r\n    switch(views.length) {\r\n        case 0:\r\n            return EMPTY;\r\n        case 1:\r\n            return new Single(views[0]);\r\n    }\r\n    return new Multi(views);\r\n}",
    "nodes": 6,
    "edges": 5,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(switch-on $i0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Class[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d ViewMatcher EMPTY\u003e\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  ViewMatcher$Multi; }\n}",
      "B3 {\n  $r3 \u003d ViewMatcher EMPTY\u003e\n  return\n}",
      "B4 {\n  $r1 \u003d ViewMatcher$Single\n  $r2 \u003d r0[0]\n  new ViewMatcher$Single($r2)\n  return\n}",
      "B5 {\n  $r4 \u003d ViewMatcher$Multi\n  new ViewMatcher$Multi(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B2 --\u003e B5",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "main",
    "signature": "void main(java.lang.String[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 72,
    "edges": 101,
    "cc": 31,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B67",
      "B3 : If($z16 \u003d\u003d false) → B4 | else → B66",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6",
      "B8 : If(i1 \u003d\u003d false) → B9 | else → B3",
      "B9 : If(i2 !\u003d 0) → B10 | else → B11",
      "B11 : If(i4 \u003e 0) → B12 | else → B13",
      "B14 : If($z2 \u003d\u003d false) → B15 | else → B18",
      "B15 : If(i13 \u003c\u003d 0) → B16 | else → B17",
      "B19 : If($z17 \u003d\u003d false) → B20 | else → B28",
      "B20 : If($i10 \u003e\u003d 2) → B21 | else → B22",
      "B22 : If($z13 \u003d\u003d false) → B23 | else → B24",
      "B24 : If($z14 !\u003d 0) → B25 | else → B26",
      "B25 : If($z15 \u003d\u003d false) → B26 | else → B19",
      "B28 : If(r140 \u003d\u003d null) → B29 | else → B32",
      "B29 : If($z11 \u003d\u003d false) → B30 | else → B32",
      "B30 : If($z12 \u003d\u003d false) → B31 | else → B32",
      "B32 : If($z18 \u003d\u003d false) → B33 | else → B36",
      "B33 : If(i11 \u003e\u003d i12) → B34 | else → B36",
      "B36 : If(r140 \u003d\u003d null) → B37 | else → B39",
      "B37 : If($z10 \u003d\u003d false) → B38 | else → B39",
      "B40 : If($z19 \u003d\u003d false) → B41 | else → B56",
      "B41 : If($z6 \u003d\u003d false) → B42 | else → B43",
      "B44 : If($z7 \u003d\u003d false) → B45 | else → B46",
      "B47 : If($z8 !\u003d 0) → B48 | else → B49",
      "B49 : If($z9 \u003d\u003d false) → B50 | else → B51",
      "B52 : If($r74 \u003d\u003d null) → B53 | else → B54",
      "B57 : If($z3 \u003d\u003d false) → B58 | else → B65",
      "B58 : If(r151 \u003d\u003d null) → B59 | else → B60",
      "B60 : If($z4 \u003d\u003d false) → B61 | else → B64",
      "B61 : If(r59 \u003d\u003d null) → B62 | else → B64",
      "B62 : If($z5 \u003d\u003d false) → B63 | else → B64"
    ],
    "blockList": [
      "B0 {\n  String[]\n  G.reset()\n  $r0 \u003d Options.v()\n  $r0.set_prepend_classpath(1)\n  $r1 \u003d Options.v()\n  $r1.set_allow_phantom_refs(1)\n  $r3 \u003d Options.v()\n  $r2 \u003d Collections.singletonList(\"C:\\\\Users\\\\00000\\\\Desktop\\\\my\\\\javaBenchmark\\\\jackson-databind-jackson-databind-2.19.1\\\\target\\\\classes\")\n  $r3.set_process_dir($r2)\n  $r4 \u003d Options.v()\n  $r4.set_output_format(12)\n  $r9 \u003d Options.v()\n  $r6 \u003d String pathSeparator\u003e\n  $r5 \u003d CharSequence)[2]\n  $r5[0] \u003d 1\\\\target\\\\classes\"\n  $r7 \u003d System.getProperty(\"java.class.path\")\n  $r5[1] \u003d $r7\n  $r8 \u003d String.join($r6, $r5)\n  $r9.set_soot_classpath($r8)\n  $r10 \u003d Scene.v()\n  $r10.loadNecessaryClasses()\n  $r11 \u003d HashMap\n  new HashMap()\n  $r13 \u003d Path SOURCE_ROOT\u003e\n  $r12 \u003d FileVisitOption)[0]\n  $r15 \u003d Files.walk($r13, $r12)\n  $r14 \u003d MethodAnalysisToJson$lambda_main_2__2.bootstrap$()\n  $r17 \u003d $r15.filter($r14)\n  $r16 \u003d MethodAnalysisToJson$lambda_main_3__3.bootstrap$($r11)\n  $r17.forEach($r16)\n  $r18 \u003d ArrayList\n  new ArrayList()\n  $r19 \u003d HashMap\n  new HashMap()\n  $r20 \u003d ArrayList\n  $r21 \u003d Scene.v()\n  $r22 \u003d $r21.getApplicationClasses()\n  new ArrayList($r22)\n  r119 \u003d $r20.iterator()\n}",
      "B1 {\n  $z0 \u003d r119.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B67\n}",
      "B2 {\n  $r28 \u003d r119.next()\n  r120 \u003d SootClass) $r28\n  $r29 \u003d ArrayList\n  $r30 \u003d r120.getMethods()\n  new ArrayList($r30)\n  r121 \u003d $r29.iterator()\n}",
      "B3 {\n  $z16 \u003d r121.hasNext()\n  if ($z16 \u003d\u003d false) goto B4 else B66\n}",
      "B4 {\n  $r31 \u003d r121.next()\n  r122 \u003d SootMethod) $r31\n  $z1 \u003d MethodAnalysisToJson.isEligible(r120, r122)\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  goto B3\n}",
      "B6 {\n  r32 \u003d r122.retrieveActiveBody()\n  goto B8\n}",
      "B7 {\n  $r117 :\u003d @caughtexception\n  goto B3\n}",
      "B8 {\n  $r33 \u003d BriefBlockGraph\n  new BriefBlockGraph(r32)\n  i1 \u003d $r33.size()\n  $r34 \u003d $r33.getBlocks()\n  $r36 \u003d $r34.stream()\n  $r35 \u003d MethodAnalysisToJson$lambda_main_4__4.bootstrap$($r33)\n  $r37 \u003d $r36.mapToInt($r35)\n  i2 \u003d $r37.sum()\n  $i3 \u003d i2 - i1\n  i4 \u003d $i3 + 2\n  if (i1 \u003d\u003d false) goto B9 else B3\n}",
      "B9 {\n  if (i2 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  goto B3\n}",
      "B11 {\n  if (i4 \u003e 0) goto B12 else B13\n}",
      "B12 {\n  goto B3\n}",
      "B13 {\n  i11 \u003d 2147483647\n  i12 \u003d -2147483648\n  $r38 \u003d r32.getUnits()\n  r123 \u003d $r38.iterator()\n}",
      "B14 {\n  $z2 \u003d r123.hasNext()\n  if ($z2 \u003d\u003d false) goto B15 else B18\n}",
      "B15 {\n  $r113 \u003d r123.next()\n  r124 \u003d Unit) $r113\n  i13 \u003d r124.getJavaSourceStartLineNumber()\n  if (i13 \u003c\u003d 0) goto B16 else B17\n}",
      "B16 {\n  i11 \u003d Math.min(i11, i13)\n  i12 \u003d Math.max(i12, i13)\n}",
      "B17 {\n  goto B14\n}",
      "B18 {\n  $r39 \u003d ArrayList\n  new ArrayList()\n  r125 \u003d $r33.iterator()\n}",
      "B19 {\n  $z17 \u003d r125.hasNext()\n  if ($z17 \u003d\u003d false) goto B20 else B28\n}",
      "B20 {\n  $r105 \u003d r125.next()\n  r126 \u003d Block) $r105\n  r127 \u003d $r33.getSuccsOf(r126)\n  $i10 \u003d r127.size()\n  if ($i10 \u003e\u003d 2) goto B21 else B22\n}",
      "B21 {\n  goto B19\n}",
      "B22 {\n  r128 \u003d r126.getTail()\n  $z13 \u003d IfStmt\n  if ($z13 \u003d\u003d false) goto B23 else B24\n}",
      "B23 {\n  $r111 \u003d IfStmt) r128\n  $r112 \u003d $r111.getCondition()\n  r129 \u003d $r112.toString()\n  goto B27\n}",
      "B24 {\n  $z14 \u003d LookupSwitchStmt\n  if ($z14 !\u003d 0) goto B25 else B26\n}",
      "B25 {\n  $z15 \u003d TableSwitchStmt\n  if ($z15 \u003d\u003d false) goto B26 else B19\n}",
      "B26 {\n  $r106 \u003d r128.getUseBoxes()\n  $r107 \u003d $r106.get(0)\n  $r108 \u003d ValueBox) $r107\n  $r109 \u003d $r108.getValue()\n  $r110 \u003d String.valueOf($r109)\n  r129 \u003d dynInvoke makeConcatWithConstants($r110)\n}",
      "B27 {\n  $r130 \u003d Object)[4]\n  $i14 \u003d r126.getIndexInMethod()\n  $r131 \u003d Integer.valueOf($i14)\n  $r130[0] \u003d $r131\n  $r130[1] \u003d r129\n  $r132 \u003d r127.get(0)\n  $r133 \u003d Block) $r132\n  $i15 \u003d $r133.getIndexInMethod()\n  $r134 \u003d Integer.valueOf($i15)\n  $r130[2] \u003d $r134\n  $r135 \u003d r127.get(1)\n  $r136 \u003d Block) $r135\n  $i16 \u003d $r136.getIndexInMethod()\n  $r137 \u003d Integer.valueOf($i16)\n  $r130[3] \u003d $r137\n  $r138 \u003d String.format(\"B%d : If(%s) \\u2192 B%d | else \\u2192 B%d\", $r130)\n  $r39.add($r138)\n  goto B19\n}",
      "B28 {\n  r139 \u003d r120.getName()\n  $r40 \u003d MethodAnalysisToJson$lambda_main_5__5.bootstrap$()\n  $r41 \u003d $r19.computeIfAbsent(r139, $r40)\n  r140 \u003d CompilationUnit) $r41\n  r141 \u003d \"(source not found)\"\n  r142 \u003d r122.getSubSignature()\n  MethodAnalysisToJson.toSimpleSig(r142)\n  if (r140 \u003d\u003d null) goto B29 else B32\n}",
      "B29 {\n  $r92 \u003d r120.getShortName()\n  r143 \u003d r140.getClassByName($r92)\n  $z11 \u003d r143.isPresent()\n  if ($z11 \u003d\u003d false) goto B30 else B32\n}",
      "B30 {\n  $r93 \u003d r143.get()\n  $r94 \u003d ClassOrInterfaceDeclaration) $r93\n  $r95 \u003d $r94.getMethods()\n  $r97 \u003d $r95.stream()\n  $r96 \u003d MethodAnalysisToJson$lambda_main_6__8.bootstrap$(r122)\n  $r98 \u003d $r97.filter($r96)\n  r144 \u003d $r98.findFirst()\n  $z12 \u003d r144.isPresent()\n  if ($z12 \u003d\u003d false) goto B31 else B32\n}",
      "B31 {\n  $r99 \u003d r144.get()\n  $r100 \u003d MethodDeclaration) $r99\n  $r102 \u003d $r100.getBody()\n  $r101 \u003d MethodAnalysisToJson$toString__9.bootstrap$()\n  $r103 \u003d $r102.map($r101)\n  $r104 \u003d $r103.orElse(\"(no body)\")\n  r141 \u003d String) $r104\n}",
      "B32 {\n  $r145 \u003d \"(source not found)\"\n  $z18 \u003d $r145.equals(r141)\n  if ($z18 \u003d\u003d false) goto B33 else B36\n}",
      "B33 {\n  if (i11 \u003e\u003d i12) goto B34 else B36\n}",
      "B34 {\n  $r87 \u003d Path SOURCE_ROOT\u003e\n  $r88 \u003d r139.replace(46, 47)\n  $r89 \u003d dynInvoke makeConcatWithConstants($r88)\n  r146 \u003d $r87.resolve($r89)\n  r147 \u003d Files.readAllLines(r146)\n  $r91 \u003d System.lineSeparator()\n  $i9 \u003d i11 - 1\n  $i7 \u003d r147.size()\n  $i8 \u003d Math.min(i12, $i7)\n  $r90 \u003d r147.subList($i9, $i8)\n  r141 \u003d String.join($r91, $r90)\n  goto B36\n}",
      "B35 {\n  $r116 :\u003d @caughtexception\n}",
      "B36 {\n  $r148 \u003d MethodAnalysisToJson.buildPrettyCFG(r32)\n  $r149 \u003d HashSet\n  new HashSet()\n  $r150 \u003d HashSet\n  new HashSet()\n  r151 \u003d null\n  if (r140 \u003d\u003d null) goto B37 else B39\n}",
      "B37 {\n  $r77 \u003d r120.getShortName()\n  r152 \u003d r140.getClassByName($r77)\n  $z10 \u003d r152.isPresent()\n  if ($z10 \u003d\u003d false) goto B38 else B39\n}",
      "B38 {\n  $r78 \u003d r152.get()\n  r151 \u003d ClassOrInterfaceDeclaration) $r78\n  $r79 \u003d r152.get()\n  $r80 \u003d ClassOrInterfaceDeclaration) $r79\n  $r81 \u003d $r80.getMethods()\n  $r83 \u003d $r81.stream()\n  $r82 \u003d MethodAnalysisToJson$lambda_main_7__6.bootstrap$(r122)\n  $r84 \u003d $r83.filter($r82)\n  $r86 \u003d $r84.findFirst()\n  $r85 \u003d MethodAnalysisToJson$lambda_main_8__7.bootstrap$(r120, $r149, $r150)\n  $r86.ifPresent($r85)\n}",
      "B39 {\n  $r153 \u003d new MethodInfo\n  new MethodInfo()\n  $r154 \u003d $r149.iterator()\n}",
      "B40 {\n  $z19 \u003d $r154.hasNext()\n  if ($z19 \u003d\u003d false) goto B41 else B56\n}",
      "B41 {\n  $r66 \u003d $r154.next()\n  r155 \u003d String) $r66\n  $z6 \u003d r155.contains(\".\")\n  if ($z6 \u003d\u003d false) goto B42 else B43\n}",
      "B42 {\n  $i5 \u003d r155.lastIndexOf(46)\n  $i6 \u003d $i5 + 1\n  $r156 \u003d r155.substring($i6)\n  goto B44\n}",
      "B43 {\n  $r156 \u003d r155\n}",
      "B44 {\n  r157 \u003d $r156\n  $z7 \u003d r155.contains(\".\")\n  if ($z7 \u003d\u003d false) goto B45 else B46\n}",
      "B45 {\n  $r158 \u003d r155\n  goto B47\n}",
      "B46 {\n  $r67 \u003d r120.getPackageName()\n  $r158 \u003d dynInvoke makeConcatWithConstants($r67, $r156)\n}",
      "B47 {\n  r159 \u003d $r158\n  $r68 \u003d Path SOURCE_ROOT\u003e\n  $r69 \u003d $r158.replace(46, 47)\n  $r70 \u003d dynInvoke makeConcatWithConstants($r69)\n  $r76 \u003d $r68.resolve($r70)\n  r160 \u003d $r76\n  $r71 \u003d LinkOption)[0]\n  $z8 \u003d Files.exists($r76, $r71)\n  if ($z8 !\u003d 0) goto B48 else B49\n}",
      "B48 {\n  $r75 \u003d $r11.get(r157)\n  r160 \u003d Path) $r75\n}",
      "B49 {\n  $r72 \u003d new DependencyInfo\n  new DependencyInfo()\n  $z9 \u003d r159.contains(\".\")\n  if ($z9 \u003d\u003d false) goto B50 else B51\n}",
      "B50 {\n  $r161 \u003d r159\n  goto B52\n}",
      "B51 {\n  $r161 \u003d r157\n}",
      "B52 {\n  String name\u003e \u003d $r161\n  $r74 \u003d MethodAnalysisToJson.loadCU(r160, $r19)\n  if ($r74 \u003d\u003d null) goto B53 else B54\n}",
      "B53 {\n  $r162 \u003d $r74.toString()\n  goto B55\n}",
      "B54 {\n  $r162 \u003d \"(source not found)\"\n}",
      "B55 {\n  String body\u003e \u003d $r162\n  $r73 \u003d List depClasses\u003e\n  $r73.add($r72)\n  goto B40\n}",
      "B56 {\n  r163 \u003d $r150.iterator()\n}",
      "B57 {\n  $z3 \u003d r163.hasNext()\n  if ($z3 \u003d\u003d false) goto B58 else B65\n}",
      "B58 {\n  $r49 \u003d r163.next()\n  r164 \u003d List) $r49\n  $r50 \u003d r164.get(0)\n  r165 \u003d String) $r50\n  $r51 \u003d r164.get(1)\n  $r52 \u003d String) $r51\n  i17 \u003d Integer.parseInt($r52)\n  $r53 \u003d new DependencyInfo\n  new DependencyInfo()\n  $r54 \u003d r120.getShortName()\n  $r55 \u003d dynInvoke makeConcatWithConstants($r54, r165, i17)\n  String name\u003e \u003d $r55\n  r166 \u003d \"(source not found)\"\n  if (r151 \u003d\u003d null) goto B59 else B60\n}",
      "B59 {\n  $r65 \u003d Collections.nCopies(i17, \"\")\n  r166 \u003d MethodAnalysisToJson.findMethodBodySrc(r151, r165, $r65)\n}",
      "B60 {\n  $r56 \u003d \"(source not found)\"\n  $z4 \u003d $r56.equals(r166)\n  if ($z4 \u003d\u003d false) goto B61 else B64\n}",
      "B61 {\n  $r57 \u003d r120.getShortName()\n  $r58 \u003d $r11.get($r57)\n  r167 \u003d Path) $r58\n  r59 \u003d MethodAnalysisToJson.loadCU(r167, $r19)\n  if (r59 \u003d\u003d null) goto B62 else B64\n}",
      "B62 {\n  $r60 \u003d r120.getShortName()\n  r61 \u003d r59.getClassByName($r60)\n  $z5 \u003d r61.isPresent()\n  if ($z5 \u003d\u003d false) goto B63 else B64\n}",
      "B63 {\n  $r62 \u003d r61.get()\n  $r64 \u003d ClassOrInterfaceDeclaration) $r62\n  $r63 \u003d Collections.nCopies(i17, \"\")\n  r166 \u003d MethodAnalysisToJson.findMethodBodySrc($r64, r165, $r63)\n}",
      "B64 {\n  String body\u003e \u003d r166\n  $r168 \u003d List depMethods\u003e\n  $r168.add($r53)\n  goto B57\n}",
      "B65 {\n  String clazz\u003e \u003d r139\n  $r42 \u003d r122.getName()\n  String methodName\u003e \u003d $r42\n  $r43 \u003d r122.getSubSignature()\n  String signature\u003e \u003d $r43\n  $r44 \u003d MethodAnalysisToJson.vis(r122)\n  String visibility\u003e \u003d $r44\n  String body\u003e \u003d r141\n  \u003cMethodInfo: int nodes\u003e \u003d i1\n  \u003cMethodInfo: int edges\u003e \u003d i2\n  \u003cMethodInfo: int cc\u003e \u003d i4\n  List flowSummary\u003e \u003d $r39\n  $r45 \u003d $r148.get(\"blocks\")\n  $r46 \u003d List) $r45\n  List blockList\u003e \u003d $r46\n  $r47 \u003d $r148.get(\"edges\")\n  $r48 \u003d List) $r47\n  List blockEdges\u003e \u003d $r48\n  $r18.add($r153)\n  goto B3\n}",
      "B66 {\n  goto B1\n}",
      "B67 {\n  $r23 \u003d GsonBuilder\n  new GsonBuilder()\n  $r24 \u003d $r23.setPrettyPrinting()\n  r169 \u003d $r24.create()\n  $r25 \u003d FileWriter\n  new FileWriter(\"C:/Users/00000/Desktop/my/jdatabind_all_methods.json\")\n  r169.toJson($r18, $r25)\n  $r25.close()\n  goto B71\n}",
      "B68 {\n  $r115 :\u003d @caughtexception\n  $r25.close()\n  goto B70\n}",
      "B69 {\n  $r114 :\u003d @caughtexception\n  $r115.addSuppressed($r114)\n}",
      "B70 {\n  throw $r115\n}",
      "B71 {\n  $r26 \u003d PrintStream out\u003e\n  $i0 \u003d $r18.size()\n  $r27 \u003d dynInvoke makeConcatWithConstants($i0)\n  $r26.println($r27)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B67",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B66",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B3",
      "B6 --\u003e B8",
      "B7 --\u003e B3",
      "B8 --\u003e B9",
      "B8 --\u003e B3",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B3",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B3",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B18",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e B14",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B19 --\u003e B28",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B19",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B27",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B26",
      "B25 --\u003e B19",
      "B26 --\u003e B27",
      "B27 --\u003e B19",
      "B28 --\u003e B29",
      "B28 --\u003e B32",
      "B29 --\u003e B30",
      "B29 --\u003e B32",
      "B30 --\u003e B31",
      "B30 --\u003e B32",
      "B31 --\u003e B32",
      "B32 --\u003e B33",
      "B32 --\u003e B36",
      "B33 --\u003e B34",
      "B33 --\u003e B36",
      "B34 --\u003e B36",
      "B35 --\u003e B36",
      "B36 --\u003e B37",
      "B36 --\u003e B39",
      "B37 --\u003e B38",
      "B37 --\u003e B39",
      "B38 --\u003e B39",
      "B39 --\u003e B40",
      "B40 --\u003e B41",
      "B40 --\u003e B56",
      "B41 --\u003e B42",
      "B41 --\u003e B43",
      "B42 --\u003e B44",
      "B43 --\u003e B44",
      "B44 --\u003e B45",
      "B44 --\u003e B46",
      "B45 --\u003e B47",
      "B46 --\u003e B47",
      "B47 --\u003e B48",
      "B47 --\u003e B49",
      "B48 --\u003e B49",
      "B49 --\u003e B50",
      "B49 --\u003e B51",
      "B50 --\u003e B52",
      "B51 --\u003e B52",
      "B52 --\u003e B53",
      "B52 --\u003e B54",
      "B53 --\u003e B55",
      "B54 --\u003e B55",
      "B55 --\u003e B40",
      "B56 --\u003e B57",
      "B57 --\u003e B58",
      "B57 --\u003e B65",
      "B58 --\u003e B59",
      "B58 --\u003e B60",
      "B59 --\u003e B60",
      "B60 --\u003e B61",
      "B60 --\u003e B64",
      "B61 --\u003e B62",
      "B61 --\u003e B64",
      "B62 --\u003e B63",
      "B62 --\u003e B64",
      "B63 --\u003e B64",
      "B64 --\u003e B57",
      "B65 --\u003e B3",
      "B66 --\u003e B1",
      "B67 --\u003e B71",
      "B68 --\u003e B70",
      "B69 --\u003e B70",
      "B70 --\u003e [EXIT]",
      "B71 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "SootCFGAnalysis",
    "methodName": "main",
    "signature": "void main(java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    //        String targetDir \u003d \"C:\\\\Users\\\\user\\\\Desktop\\\\agtTest\\\\benchmark\\\\commons-collections4-4.5.0-M1-src\\\\commons-collections4-4.5.0-M1-src\\\\target\\\\classes\"; // 클래스 파일 경로 (.class로 컴파일된 폴더)\r\n    //        String outputCsv \u003d \"C:\\\\Users\\\\user\\\\Desktop\\\\agtTest\\\\cfg_analysis_result.tsv\"; // 결과 저장할 CSV 파일 경로\r\n    // 클래스 파일 경로 (.class로 컴파일된 폴더)\r\n    String targetDir \u003d \"C:\\\\Users\\\\00000\\\\Desktop\\\\my\\\\javaBenchmark\\\\jackson-databind-jackson-databind-2.19.1\\\\target\\\\classes\";\r\n    // 결과 저장할 CSV 파일 경로\r\n    String outputCsv \u003d \"C:\\\\Users\\\\00000\\\\Desktop\\\\my\\\\cfg_analysis_all_result_jdatabind.csv\";\r\n    if (System.getProperty(\"sun.boot.class.path\") \u003d\u003d null)\r\n        System.setProperty(\"sun.boot.class.path\", \"\");\r\n    if (System.getProperty(\"java.ext.dirs\") \u003d\u003d null)\r\n        System.setProperty(\"java.ext.dirs\", \"\");\r\n    // (1) 기본 Soot 설정\r\n    Options.v().set_prepend_classpath(true);\r\n    Options.v().set_process_dir(Collections.singletonList(targetDir));\r\n    Options.v().set_whole_program(true);\r\n    // 출력 없음\r\n    Options.v().set_output_format(Options.output_format_none);\r\n    Options.v().set_no_bodies_for_excluded(true);\r\n    Options.v().set_allow_phantom_refs(true);\r\n    Options.v().set_keep_line_number(true);\r\n    // phantom 클래스에 바디 생성 안 함\r\n    Options.v().set_no_bodies_for_excluded(true);\r\n    Options.v().set_process_dir(// 내 클래스만\r\n    Collections.singletonList(\"target/classes\"));\r\n    Options.v().set_src_prec(Options.src_prec_class);\r\n    Options.v().setPhaseOption(\"jb\", \"use-original-names:true\");\r\n    Scene.v().loadNecessaryClasses();\r\n    // (★) 이미 본 메서드 서명을 기억할 Set\r\n    Set\u003cString\u003e seen \u003d new HashSet\u003c\u003e();\r\n    // (2) 애플리케이션 클래스들 순회\r\n    try (CSVWriter writer \u003d new CSVWriter(new FileWriter(outputCsv))) {\r\n        // CSV 헤더 작성\r\n        writer.writeNext(new String[] { \"Class\", \"Method\", \"MethodSig\", \"Nodes\", \"Edges\", \"McCabe_CC\", \"StartLine\", \"EndLine\", \"LineCount\" });\r\n        List\u003cSootClass\u003e classes \u003d new ArrayList\u003c\u003e(Scene.v().getApplicationClasses());\r\n        for (SootClass cls : classes) {\r\n            for (SootMethod method : cls.getMethods()) {\r\n                if (!method.isConcrete())\r\n                    continue;\r\n                try {\r\n                    Body body \u003d method.retrieveActiveBody();\r\n                    // 기본 블록 단위\r\n                    BlockGraph cfg \u003d new BriefBlockGraph(body);\r\n                    int nodeCount \u003d cfg.size();\r\n                    int edgeCount \u003d 0;\r\n                    for (Block b : cfg) edgeCount +\u003d cfg.getSuccsOf(b).size();\r\n                    int cc \u003d edgeCount - nodeCount + 2;\r\n                    int startLine \u003d Integer.MAX_VALUE;\r\n                    int endLine \u003d Integer.MIN_VALUE;\r\n                    for (Unit unit : body.getUnits()) {\r\n                        int line \u003d unit.getJavaSourceStartLineNumber();\r\n                        if (line \u003e 0) {\r\n                            startLine \u003d Math.min(startLine, line);\r\n                            endLine \u003d Math.max(endLine, line);\r\n                        }\r\n                    }\r\n                    int lineCount \u003d (startLine \u003c\u003d endLine) ? (endLine - startLine + 1) : 0;\r\n                    if (!isTopLevelPublic(cls) || !isRealMethod(method))\r\n                        continue;\r\n                    if (nodeCount \u003d\u003d 0 || edgeCount \u003d\u003d 0)\r\n                        continue;\r\n                    if (cc \u003c\u003d 0)\r\n                        continue;\r\n                    String methodSig \u003d method.getSubSignature();\r\n                    String uniqueKey \u003d method.getSignature();\r\n                    // (★) 이미 기록된 서명이라면 건너뛰기\r\n                    if (!seen.add(uniqueKey))\r\n                        continue;\r\n                    // 결과를 CSV로 저장\r\n                    String[] row \u003d { cls.getName(), method.getName(), uniqueKey, String.valueOf(nodeCount), String.valueOf(edgeCount), String.valueOf(cc), String.valueOf(startLine), String.valueOf(endLine), String.valueOf(lineCount) };\r\n                    writer.writeNext(row);\r\n                } catch (Exception e) {\r\n                    System.out.printf(\"[⚠️ 오류] %s.%s: %s\\n\", cls.getName(), method.getName(), e.getMessage());\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"✅ 분석 완료: \" + outputCsv + \"에 저장됨\");\r\n    } catch (IOException e) {\r\n        System.err.println(\"❌ CSV 저장 중 오류: \" + e.getMessage());\r\n    }\r\n}",
    "nodes": 42,
    "edges": 55,
    "cc": 15,
    "flowSummary": [
      "B0 : If($r0 !\u003d null) → B1 | else → B2",
      "B2 : If($r1 !\u003d null) → B3 | else → B4",
      "B5 : If($z6 \u003d\u003d false) → B6 | else → B35",
      "B7 : If($z7 \u003d\u003d false) → B8 | else → B34",
      "B8 : If($z0 !\u003d 0) → B9 | else → B10",
      "B11 : If($z1 \u003d\u003d false) → B12 | else → B13",
      "B14 : If($z2 \u003d\u003d false) → B15 | else → B18",
      "B15 : If(i8 \u003c\u003d 0) → B16 | else → B17",
      "B18 : If(i6 \u003e i7) → B19 | else → B20",
      "B21 : If($z3 \u003d\u003d false) → B22 | else → B23",
      "B22 : If($z4 !\u003d 0) → B23 | else → B24",
      "B24 : If(i0 \u003d\u003d false) → B25 | else → B26",
      "B25 : If(i4 !\u003d 0) → B26 | else → B27",
      "B27 : If(i5 \u003e 0) → B28 | else → B29",
      "B29 : If($z5 !\u003d 0) → B30 | else → B31"
    ],
    "blockList": [
      "B0 {\n  String[]\n  $r0 \u003d System.getProperty(\"sun.boot.class.path\")\n  if ($r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  System.setProperty(\"sun.boot.class.path\", \"\")\n}",
      "B2 {\n  $r1 \u003d System.getProperty(\"java.ext.dirs\")\n  if ($r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  System.setProperty(\"java.ext.dirs\", \"\")\n}",
      "B4 {\n  $r2 \u003d Options.v()\n  $r2.set_prepend_classpath(1)\n  $r4 \u003d Options.v()\n  $r3 \u003d Collections.singletonList(\"C:\\\\Users\\\\00000\\\\Desktop\\\\my\\\\javaBenchmark\\\\jackson-databind-jackson-databind-2.19.1\\\\target\\\\classes\")\n  $r4.set_process_dir($r3)\n  $r5 \u003d Options.v()\n  $r5.set_whole_program(1)\n  $r6 \u003d Options.v()\n  $r6.set_output_format(12)\n  $r7 \u003d Options.v()\n  $r7.set_no_bodies_for_excluded(1)\n  $r8 \u003d Options.v()\n  $r8.set_allow_phantom_refs(1)\n  $r9 \u003d Options.v()\n  $r9.set_keep_line_number(1)\n  $r10 \u003d Options.v()\n  $r10.set_no_bodies_for_excluded(1)\n  $r12 \u003d Options.v()\n  $r11 \u003d Collections.singletonList(\"target/classes\")\n  $r12.set_process_dir($r11)\n  $r13 \u003d Options.v()\n  $r13.set_src_prec(1)\n  $r14 \u003d Options.v()\n  $r14.setPhaseOption(\"jb\", \"use-original-names:true\")\n  $r15 \u003d Scene.v()\n  $r15.loadNecessaryClasses()\n  $r16 \u003d HashSet\n  new HashSet()\n  $r17 \u003d CSVWriter\n  $r18 \u003d FileWriter\n  new FileWriter(\"C:\\\\Users\\\\00000\\\\Desktop\\\\my\\\\cfg_analysis_all_result_jdatabind.csv\")\n  new CSVWriter($r18)\n  $r19 \u003d String)[9]\n  $r19[0] \u003d \"Class\"\n  $r19[1] \u003d \"Method\"\n  $r19[2] \u003d \"MethodSig\"\n  $r19[3] \u003d \"Nodes\"\n  $r19[4] \u003d \"Edges\"\n  $r19[5] \u003d \"McCabe_CC\"\n  $r19[6] \u003d \"StartLine\"\n  $r19[7] \u003d \"EndLine\"\n  $r19[8] \u003d \"LineCount\"\n  $r17.writeNext($r19)\n  $r20 \u003d ArrayList\n  $r21 \u003d Scene.v()\n  $r22 \u003d $r21.getApplicationClasses()\n  new ArrayList($r22)\n  $r45 \u003d $r20.iterator()\n}",
      "B5 {\n  $z6 \u003d $r45.hasNext()\n  if ($z6 \u003d\u003d false) goto B6 else B35\n}",
      "B6 {\n  $r25 \u003d $r45.next()\n  r26 \u003d SootClass) $r25\n  $r27 \u003d r26.getMethods()\n  r28 \u003d $r27.iterator()\n}",
      "B7 {\n  $z7 \u003d r28.hasNext()\n  if ($z7 \u003d\u003d false) goto B8 else B34\n}",
      "B8 {\n  $r29 \u003d r28.next()\n  r30 \u003d SootMethod) $r29\n  $z0 \u003d r30.isConcrete()\n  if ($z0 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  goto B7\n}",
      "B10 {\n  r59 \u003d r30.retrieveActiveBody()\n  $r31 \u003d BriefBlockGraph\n  new BriefBlockGraph(r59)\n  i0 \u003d $r31.size()\n  i4 \u003d 0\n  r60 \u003d $r31.iterator()\n}",
      "B11 {\n  $z1 \u003d r60.hasNext()\n  if ($z1 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $r43 \u003d r60.next()\n  r61 \u003d Block) $r43\n  $r44 \u003d $r31.getSuccsOf(r61)\n  $i3 \u003d $r44.size()\n  i4 \u003d i4 + $i3\n  goto B11\n}",
      "B13 {\n  $i1 \u003d i4 - i0\n  i5 \u003d $i1 + 2\n  i6 \u003d 2147483647\n  i7 \u003d -2147483648\n  $r32 \u003d r59.getUnits()\n  r62 \u003d $r32.iterator()\n}",
      "B14 {\n  $z2 \u003d r62.hasNext()\n  if ($z2 \u003d\u003d false) goto B15 else B18\n}",
      "B15 {\n  $r42 \u003d r62.next()\n  r63 \u003d Unit) $r42\n  i8 \u003d r63.getJavaSourceStartLineNumber()\n  if (i8 \u003c\u003d 0) goto B16 else B17\n}",
      "B16 {\n  i6 \u003d Math.min(i6, i8)\n  i7 \u003d Math.max(i7, i8)\n}",
      "B17 {\n  goto B14\n}",
      "B18 {\n  if (i6 \u003e i7) goto B19 else B20\n}",
      "B19 {\n  $i2 \u003d i7 - i6\n  $i9 \u003d $i2 + 1\n  goto B21\n}",
      "B20 {\n  $i9 \u003d 0\n}",
      "B21 {\n  $z3 \u003d SootCFGAnalysis.isTopLevelPublic(r26)\n  if ($z3 \u003d\u003d false) goto B22 else B23\n}",
      "B22 {\n  $z4 \u003d SootCFGAnalysis.isRealMethod(r30)\n  if ($z4 !\u003d 0) goto B23 else B24\n}",
      "B23 {\n  goto B7\n}",
      "B24 {\n  if (i0 \u003d\u003d false) goto B25 else B26\n}",
      "B25 {\n  if (i4 !\u003d 0) goto B26 else B27\n}",
      "B26 {\n  goto B7\n}",
      "B27 {\n  if (i5 \u003e 0) goto B28 else B29\n}",
      "B28 {\n  goto B7\n}",
      "B29 {\n  r30.getSubSignature()\n  r64 \u003d r30.getSignature()\n  $z5 \u003d $r16.add(r64)\n  if ($z5 !\u003d 0) goto B30 else B31\n}",
      "B30 {\n  goto B7\n}",
      "B31 {\n  $r33 \u003d String)[9]\n  $r34 \u003d r26.getName()\n  $r33[0] \u003d $r34\n  $r35 \u003d r30.getName()\n  $r33[1] \u003d $r35\n  $r33[2] \u003d r64\n  $r36 \u003d String.valueOf(i0)\n  $r33[3] \u003d $r36\n  $r37 \u003d String.valueOf(i4)\n  $r33[4] \u003d $r37\n  $r38 \u003d String.valueOf(i5)\n  $r33[5] \u003d $r38\n  $r39 \u003d String.valueOf(i6)\n  $r33[6] \u003d $r39\n  $r40 \u003d String.valueOf(i7)\n  $r33[7] \u003d $r40\n  $r41 \u003d String.valueOf($i9)\n  $r33[8] \u003d $r41\n  $r17.writeNext($r33)\n  goto B33\n}",
      "B32 {\n  $r52 :\u003d @caughtexception\n  $r54 \u003d PrintStream out\u003e\n  $r53 \u003d Object)[3]\n  $r55 \u003d r26.getName()\n  $r53[0] \u003d $r55\n  $r56 \u003d r30.getName()\n  $r53[1] \u003d $r56\n  $r57 \u003d $r52.getMessage()\n  $r53[2] \u003d $r57\n  $r54.printf(\"\\u26a0\\ufe0f \\uc624\\ub958 %s.%s: %s\\n\", $r53)\n}",
      "B33 {\n  goto B7\n}",
      "B34 {\n  goto B5\n}",
      "B35 {\n  $r23 \u003d PrintStream out\u003e\n  $r24 \u003d dynInvoke makeConcatWithConstants(\"C:\\\\Users\\\\00000\\\\Desktop\\\\my\\\\cfg_analysis_all_result_jdatabind.csv\")\n  $r23.println($r24)\n  $r17.close()\n  goto B39\n}",
      "B36 {\n  $r51 :\u003d @caughtexception\n  $r17.close()\n  goto B38\n}",
      "B37 {\n  $r50 :\u003d @caughtexception\n  $r51.addSuppressed($r50)\n}",
      "B38 {\n  throw $r51\n}",
      "B39 {\n  goto B41\n}",
      "B40 {\n  $r46 :\u003d @caughtexception\n  $r47 \u003d PrintStream err\u003e\n  $r48 \u003d $r46.getMessage()\n  $r49 \u003d dynInvoke makeConcatWithConstants($r48)\n  $r47.println($r49)\n}",
      "B41 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B35",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B34",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B7",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B11",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B18",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e B14",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B21",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B7",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B7",
      "B27 --\u003e B28",
      "B27 --\u003e B29",
      "B28 --\u003e B7",
      "B29 --\u003e B30",
      "B29 --\u003e B31",
      "B30 --\u003e B7",
      "B31 --\u003e B33",
      "B32 --\u003e B33",
      "B33 --\u003e B7",
      "B34 --\u003e B5",
      "B35 --\u003e B39",
      "B36 --\u003e B38",
      "B37 --\u003e B38",
      "B38 --\u003e [EXIT]",
      "B39 --\u003e B41",
      "B40 --\u003e B41",
      "B41 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SootCFGAnalysis#isTopLevelPublic(...1)",
        "body": "{\r\n    return c.isPublic() \u0026\u0026 !c.getName().contains(\"$\") \u0026\u0026 !c.isInterface() \u0026\u0026 !c.isAbstract();\r\n}"
      },
      {
        "name": "SootCFGAnalysis#isRealMethod(...1)",
        "body": "{\r\n    // (1) 바디 없는 메서드는 제외\r\n    if (!m.isConcrete())\r\n        return false;\r\n    // (2) 생성자/클래스 초기화자 제외\r\n    if (m.isConstructor() || m.isStaticInitializer())\r\n        return false;\r\n    // (3) 컴파일러 생성 메서드 제외 (synthetic, bridge)\r\n    final int ACC_BRIDGE \u003d 0x0040;\r\n    final int ACC_SYNTHETIC \u003d 0x1000;\r\n    int mod \u003d m.getModifiers();\r\n    // (4) public 이 아닌 메서드 제외\r\n    if (!Modifier.isPublic(mod))\r\n        return false;\r\n    return (mod \u0026 ACC_BRIDGE) \u003d\u003d 0 \u0026\u0026 (mod \u0026 ACC_SYNTHETIC) \u003d\u003d 0;\r\n}"
      }
    ]
  }
]