[
  {
    "clazz": "org.jsoup.examples.HtmlToPlainText",
    "methodName": "main",
    "signature": "void main(java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    Validate.isTrue(args.length \u003d\u003d 1 || args.length \u003d\u003d 2, \"usage: java -jar jsoup-examples.jar url [selector]\");\r\n    final String url \u003d args[0];\r\n    final String selector \u003d args.length \u003d\u003d 2 ? args[1] : null;\r\n    // fetch the specified URL and parse to a HTML DOM:\r\n    Connection session \u003d // .newSession creates a session to maintain settings and cookies across multiple requests\r\n    Jsoup.newSession().userAgent(userAgent).timeout(timeout);\r\n    // .get executes a GET request, and parses the result\r\n    Document doc \u003d session.newRequest(url).get();\r\n    if (selector !\u003d null) {\r\n        // get each element that matches the CSS selector\r\n        Elements elements \u003d doc.select(selector);\r\n        // trim out elements that descend from a previously seen element\r\n        elements \u003d trimParents(elements);\r\n        for (Element element : elements) {\r\n            // format that element to plain text\r\n            String plainText \u003d getPlainText(element);\r\n            System.out.println(plainText);\r\n        }\r\n    } else {\r\n        // format the whole doc\r\n        String plainText \u003d getPlainText(doc);\r\n        System.out.println(plainText);\r\n    }\r\n}",
    "nodes": 14,
    "edges": 18,
    "cc": 6,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d 1) → B1 | else → B2",
      "B1 : If($i2 !\u003d 2) → B2 | else → B3",
      "B4 : If($i1 !\u003d 2) → B5 | else → B6",
      "B7 : If($r13 \u003d\u003d null) → B8 | else → B12",
      "B9 : If($z0 \u003d\u003d false) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  String[]\n  $i0 \u003d lengthof r0\n  if ($i0 \u003d\u003d 1) goto B1 else B2\n}",
      "B1 {\n  $i2 \u003d lengthof r0\n  if ($i2 !\u003d 2) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  Validate.isTrue($z1, \"usage: java -jar jsoup-examples.jar url selector\")\n  $r12 \u003d r0[0]\n  $i1 \u003d lengthof r0\n  if ($i1 !\u003d 2) goto B5 else B6\n}",
      "B5 {\n  $r13 \u003d r0[1]\n  goto B7\n}",
      "B6 {\n  $r13 \u003d null\n}",
      "B7 {\n  $r1 \u003d Jsoup.newSession()\n  $r2 \u003d $r1.userAgent(\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 (jsoup-example)\")\n  $r10 \u003d $r2.timeout(5000)\n  $r3 \u003d $r10.newRequest($r12)\n  $r11 \u003d $r3.get()\n  if ($r13 \u003d\u003d null) goto B8 else B12\n}",
      "B8 {\n  r14 \u003d $r11.select($r13)\n  r15 \u003d HtmlToPlainText.trimParents(r14)\n  r5 \u003d r15.iterator()\n}",
      "B9 {\n  $z0 \u003d r5.hasNext()\n  if ($z0 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  $r6 \u003d r5.next()\n  r7 \u003d Element) $r6\n  r8 \u003d HtmlToPlainText.getPlainText(r7)\n  $r9 \u003d PrintStream out\u003e\n  $r9.println(r8)\n  goto B9\n}",
      "B11 {\n  goto B13\n}",
      "B12 {\n  r16 \u003d HtmlToPlainText.getPlainText($r11)\n  $r4 \u003d PrintStream out\u003e\n  $r4.println(r16)\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B9",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "HtmlToPlainText#trimParents(...1)",
        "body": "{\r\n    // removes elements from the list if their parent / ancestor is already in the list; prevents redundant output for selectors that match nested elements\r\n    HashSet\u003cElement\u003e seen \u003d new HashSet\u003c\u003e(elements.size());\r\n    Elements trimmed \u003d new Elements();\r\n    EACH: for (Element el : elements) {\r\n        Element current \u003d el;\r\n        while (current.parent() !\u003d null) {\r\n            if (seen.contains(current.parent())) {\r\n                continue EACH;\r\n            }\r\n            current \u003d current.parent();\r\n        }\r\n        seen.add(el);\r\n        trimmed.add(el);\r\n    }\r\n    return trimmed;\r\n}"
      },
      {
        "name": "HtmlToPlainText#getPlainText(...1)",
        "body": "{\r\n    FormattingVisitor formatter \u003d new FormattingVisitor();\r\n    // walk the DOM, and call .head() and .tail() for each node\r\n    formatter.traverse(element);\r\n    return formatter.toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.examples.ListLinks",
    "methodName": "main",
    "signature": "void main(java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    Validate.isTrue(args.length \u003d\u003d 1, \"usage: supply url to fetch\");\r\n    String url \u003d args[0];\r\n    print(\"Fetching %s...\", url);\r\n    Document doc \u003d Jsoup.connect(url).get();\r\n    Elements links \u003d doc.select(\"a[href]\");\r\n    Elements media \u003d doc.select(\"[src]\");\r\n    Elements imports \u003d doc.select(\"link[href]\");\r\n    print(\"\\nMedia: (%d)\", media.size());\r\n    for (Element src : media) {\r\n        if (src.nameIs(\"img\"))\r\n            print(\" * %s: \u003c%s\u003e %sx%s (%s)\", src.tagName(), src.attr(\"abs:src\"), src.attr(\"width\"), src.attr(\"height\"), trim(src.attr(\"alt\"), 20));\r\n        else\r\n            print(\" * %s: \u003c%s\u003e\", src.tagName(), src.attr(\"abs:src\"));\r\n    }\r\n    print(\"\\nImports: (%d)\", imports.size());\r\n    for (Element link : imports) {\r\n        print(\" * %s \u003c%s\u003e (%s)\", link.tagName(), link.attr(\"abs:href\"), link.attr(\"rel\"));\r\n    }\r\n    print(\"\\nLinks: (%d)\", links.size());\r\n    for (Element link : links) {\r\n        print(\" * a: \u003c%s\u003e  (%s)\", link.attr(\"abs:href\"), trim(link.text(), 35));\r\n    }\r\n}",
    "nodes": 16,
    "edges": 20,
    "cc": 6,
    "flowSummary": [
      "B0 : If($i0 !\u003d 1) → B1 | else → B2",
      "B4 : If($z4 \u003d\u003d false) → B5 | else → B9",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B7",
      "B10 : If($z0 \u003d\u003d false) → B11 | else → B12",
      "B13 : If($z1 \u003d\u003d false) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  String[]\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 1) goto B1 else B2\n}",
      "B1 {\n  $z3 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z3 \u003d 0\n}",
      "B3 {\n  Validate.isTrue($z3, \"usage: supply url to fetch\")\n  $r30 \u003d r0[0]\n  $r1 \u003d Object)[1]\n  $r1[0] \u003d $r30\n  ListLinks.print(\"Fetching %s...\", $r1)\n  $r2 \u003d Jsoup.connect($r30)\n  $r31 \u003d $r2.get()\n  $r32 \u003d $r31.select(\"ahref\")\n  $r33 \u003d $r31.select(\"src\")\n  $r34 \u003d $r31.select(\"linkhref\")\n  $r3 \u003d Object)[1]\n  $i1 \u003d $r33.size()\n  $r4 \u003d Integer.valueOf($i1)\n  $r3[0] \u003d $r4\n  ListLinks.print(\"\\nMedia: (%d)\", $r3)\n  $r35 \u003d $r33.iterator()\n}",
      "B4 {\n  $z4 \u003d $r35.hasNext()\n  if ($z4 \u003d\u003d false) goto B5 else B9\n}",
      "B5 {\n  $r19 \u003d $r35.next()\n  r36 \u003d Element) $r19\n  $z2 \u003d r36.nameIs(\"img\")\n  if ($z2 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r23 \u003d Object)[5]\n  $r24 \u003d r36.tagName()\n  $r23[0] \u003d $r24\n  $r25 \u003d r36.attr(\"abs:src\")\n  $r23[1] \u003d $r25\n  $r26 \u003d r36.attr(\"width\")\n  $r23[2] \u003d $r26\n  $r27 \u003d r36.attr(\"height\")\n  $r23[3] \u003d $r27\n  $r28 \u003d r36.attr(\"alt\")\n  $r29 \u003d ListLinks.trim($r28, 20)\n  $r23[4] \u003d $r29\n  ListLinks.print(\" * %s: \u003c%s\u003e %sx%s (%s)\", $r23)\n  goto B8\n}",
      "B7 {\n  $r20 \u003d Object)[2]\n  $r21 \u003d r36.tagName()\n  $r20[0] \u003d $r21\n  $r22 \u003d r36.attr(\"abs:src\")\n  $r20[1] \u003d $r22\n  ListLinks.print(\" * %s: \u003c%s\u003e\", $r20)\n}",
      "B8 {\n  goto B4\n}",
      "B9 {\n  $r5 \u003d Object)[1]\n  $i2 \u003d $r34.size()\n  $r6 \u003d Integer.valueOf($i2)\n  $r5[0] \u003d $r6\n  ListLinks.print(\"\\nImports: (%d)\", $r5)\n  r37 \u003d $r34.iterator()\n}",
      "B10 {\n  $z0 \u003d r37.hasNext()\n  if ($z0 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  $r14 \u003d r37.next()\n  r38 \u003d Element) $r14\n  $r15 \u003d Object)[3]\n  $r16 \u003d r38.tagName()\n  $r15[0] \u003d $r16\n  $r17 \u003d r38.attr(\"abs:href\")\n  $r15[1] \u003d $r17\n  $r18 \u003d r38.attr(\"rel\")\n  $r15[2] \u003d $r18\n  ListLinks.print(\" * %s \u003c%s\u003e (%s)\", $r15)\n  goto B10\n}",
      "B12 {\n  $r7 \u003d Object)[1]\n  $i3 \u003d $r32.size()\n  $r8 \u003d Integer.valueOf($i3)\n  $r7[0] \u003d $r8\n  ListLinks.print(\"\\nLinks: (%d)\", $r7)\n  r39 \u003d $r32.iterator()\n}",
      "B13 {\n  $z1 \u003d r39.hasNext()\n  if ($z1 \u003d\u003d false) goto B14 else B15\n}",
      "B14 {\n  $r9 \u003d r39.next()\n  r40 \u003d Element) $r9\n  $r10 \u003d Object)[2]\n  $r11 \u003d r40.attr(\"abs:href\")\n  $r10[0] \u003d $r11\n  $r12 \u003d r40.text()\n  $r13 \u003d ListLinks.trim($r12, 35)\n  $r10[1] \u003d $r13\n  ListLinks.print(\" * a: \u003c%s\u003e  (%s)\", $r10)\n  goto B13\n}",
      "B15 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B4",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B10",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B13",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ListLinks#print(...2)",
        "body": "{\r\n    System.out.println(String.format(msg, args));\r\n}"
      },
      {
        "name": "ListLinks#print(...3)",
        "body": "(source not found)"
      },
      {
        "name": "ListLinks#trim(...2)",
        "body": "{\r\n    if (s.length() \u003e width)\r\n        return s.substring(0, width - 1) + \".\";\r\n    else\r\n        return s;\r\n}"
      },
      {
        "name": "ListLinks#print(...6)",
        "body": "(source not found)"
      },
      {
        "name": "ListLinks#print(...4)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.examples.Wikipedia",
    "methodName": "main",
    "signature": "void main(java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    Document doc \u003d Jsoup.connect(\"https://en.wikipedia.org/\").get();\r\n    log(doc.title());\r\n    Elements newsHeadlines \u003d doc.select(\"#mp-itn b a\");\r\n    for (Element headline : newsHeadlines) {\r\n        log(\"%s\\n\\t%s\", headline.attr(\"title\"), headline.absUrl(\"href\"));\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  String[]\n  $r0 \u003d Jsoup.connect(\"https://en.wikipedia.org/\")\n  r1 \u003d $r0.get()\n  $r3 \u003d r1.title()\n  $r2 \u003d String)[0]\n  Wikipedia.log($r3, $r2)\n  r4 \u003d r1.select(\"#mp-itn b a\")\n  r5 \u003d r4.iterator()\n}",
      "B1 {\n  $z0 \u003d r5.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d r5.next()\n  r7 \u003d Element) $r6\n  $r8 \u003d String)[2]\n  $r9 \u003d r7.attr(\"title\")\n  $r8[0] \u003d $r9\n  $r10 \u003d r7.absUrl(\"href\")\n  $r8[1] \u003d $r10\n  Wikipedia.log(\"%s\\n\\t%s\", $r8)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Wikipedia#log(...3)",
        "body": "(source not found)"
      },
      {
        "name": "Wikipedia#log(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.helper.DataUtil",
    "methodName": "streamParser",
    "signature": "org.jsoup.parser.StreamParser streamParser(java.nio.file.Path,java.nio.charset.Charset,java.lang.String,org.jsoup.parser.Parser)",
    "visibility": "public",
    "body": "{\r\n    StreamParser streamer \u003d new StreamParser(parser);\r\n    String charsetName \u003d charset !\u003d null ? charset.name() : null;\r\n    try {\r\n        DataUtil.CharsetDoc charsetDoc \u003d DataUtil.detectCharset(openStream(path), charsetName, baseUri, parser);\r\n        Reader reader \u003d new SimpleStreamReader(charsetDoc.input, charsetDoc.charset);\r\n        // initializes the parse and the document, but does not step() it\r\n        streamer.parse(reader, baseUri);\r\n    } catch (IOException e) {\r\n        streamer.close();\r\n        throw e;\r\n    }\r\n    return streamer;\r\n}",
    "nodes": 6,
    "edges": 5,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Path\n  Charset\n  String\n  Parser\n  $r0 \u003d StreamParser\n  new StreamParser(r1)\n  if (r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r11 \u003d r2.name()\n  goto B3\n}",
      "B2 {\n  $r11 \u003d null\n}",
      "B3 {\n  $r5 \u003d DataUtil.openStream(r3)\n  $r9 \u003d DataUtil.detectCharset($r5, $r11, r4, r1)\n  $r6 \u003d SimpleStreamReader\n  $r8 \u003d InputStream input\u003e\n  $r7 \u003d Charset charset\u003e\n  new SimpleStreamReader($r8, $r7)\n  $r0.parse($r6, r4)\n  goto B5\n}",
      "B4 {\n  $r10 :\u003d @caughtexception\n  $r0.close()\n  throw $r10\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DataUtil#openStream(...1)",
        "body": "{\r\n    final SeekableByteChannel byteChannel \u003d Files.newByteChannel(path);\r\n    InputStream stream \u003d Channels.newInputStream(byteChannel);\r\n    String name \u003d Normalizer.lowerCase(path.getFileName().toString());\r\n    if (name.endsWith(\".gz\") || name.endsWith(\".z\")) {\r\n        try {\r\n            // gzip magic bytes\r\n            final boolean zipped \u003d (stream.read() \u003d\u003d 0x1f \u0026\u0026 stream.read() \u003d\u003d 0x8b);\r\n            // reset to start of file\r\n            byteChannel.position(0);\r\n            if (zipped)\r\n                stream \u003d new GZIPInputStream(stream);\r\n        } catch (IOException e) {\r\n            // error during our first read; close the stream and cascade close byteChannel\r\n            stream.close();\r\n            throw e;\r\n        }\r\n    }\r\n    return ControllableInputStream.wrap(stream, 0);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.helper.HttpConnection",
    "methodName": "data",
    "signature": "org.jsoup.Connection data(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    Validate.notNullParam(data, \"data\");\r\n    for (Map.Entry\u003cString, String\u003e entry : data.entrySet()) {\r\n        req.data(KeyVal.create(entry.getKey(), entry.getValue()));\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  HttpConnection\n  Map\n  Validate.notNullParam(r0, \"data\")\n  $r1 \u003d r0.entrySet()\n  r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r2.next()\n  r5 \u003d Map$Entry) $r4\n  $r6 \u003d HttpConnection$Request req\u003e\n  $r7 \u003d r5.getKey()\n  $r10 \u003d String) $r7\n  $r8 \u003d r5.getValue()\n  $r9 \u003d String) $r8\n  $r11 \u003d HttpConnection$KeyVal.create($r10, $r9)\n  $r6.data($r11)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.HttpConnection",
    "methodName": "data",
    "signature": "org.jsoup.Connection data(java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    Validate.notNullParam(keyvals, \"keyvals\");\r\n    Validate.isTrue(keyvals.length % 2 \u003d\u003d 0, \"Must supply an even number of key value pairs\");\r\n    for (int i \u003d 0; i \u003c keyvals.length; i +\u003d 2) {\r\n        String key \u003d keyvals[i];\r\n        String value \u003d keyvals[i + 1];\r\n        Validate.notEmpty(key, \"Data key must not be empty\");\r\n        Validate.notNull(value, \"Data value must not be null\");\r\n        req.data(KeyVal.create(key, value));\r\n    }\r\n    return this;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i1 !\u003d 0) → B1 | else → B2",
      "B4 : If(i3 \u003e\u003d $i4) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  HttpConnection\n  String[]\n  Validate.notNullParam(r0, \"keyvals\")\n  $i0 \u003d lengthof r0\n  $i1 \u003d $i0 % 2\n  if ($i1 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  Validate.isTrue($z0, \"Must supply an even number of key value pairs\")\n  i3 \u003d 0\n}",
      "B4 {\n  $i4 \u003d lengthof r0\n  if (i3 \u003e\u003d $i4) goto B5 else B6\n}",
      "B5 {\n  r2 \u003d r0[i3]\n  $i2 \u003d i3 + 1\n  r3 \u003d r0[$i2]\n  Validate.notEmpty(r2, \"Data key must not be empty\")\n  Validate.notNull(r3, \"Data value must not be null\")\n  $r4 \u003d HttpConnection$Request req\u003e\n  $r5 \u003d HttpConnection$KeyVal.create(r2, r3)\n  $r4.data($r5)\n  i3 \u003d i3 + 2\n  goto B4\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.HttpConnection",
    "methodName": "data",
    "signature": "org.jsoup.Connection data(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    Validate.notNullParam(data, \"data\");\r\n    for (Connection.KeyVal entry : data) {\r\n        req.data(entry);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  HttpConnection\n  Collection\n  Validate.notNullParam(r0, \"data\")\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d r1.next()\n  r4 \u003d Connection$KeyVal) $r3\n  $r5 \u003d HttpConnection$Request req\u003e\n  $r5.data(r4)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.HttpConnection",
    "methodName": "data",
    "signature": "org.jsoup.Connection$KeyVal data(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    Validate.notNullParam(keyvals, \"keyvals\");\r\n    Validate.isTrue(keyvals.length % 2 \u003d\u003d 0, \"Must supply an even number of key value pairs\");\r\n    for (int i \u003d 0; i \u003c keyvals.length; i +\u003d 2) {\r\n        String key \u003d keyvals[i];\r\n        String value \u003d keyvals[i + 1];\r\n        Validate.notEmpty(key, \"Data key must not be empty\");\r\n        Validate.notNull(value, \"Data value must not be null\");\r\n        req.data(KeyVal.create(key, value));\r\n    }\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  HttpConnection\n  String\n  Validate.notEmptyParam(r0, \"key\")\n  $r2 \u003d r1.request()\n  $r3 \u003d $r2.data()\n  r4 \u003d $r3.iterator()\n}",
      "B1 {\n  $z0 \u003d r4.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r5 \u003d r4.next()\n  r6 \u003d Connection$KeyVal) $r5\n  $r7 \u003d r6.key()\n  $z1 \u003d $r7.equals(r0)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.HttpConnection",
    "methodName": "headers",
    "signature": "org.jsoup.Connection headers(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    Validate.notNullParam(headers, \"headers\");\r\n    for (Map.Entry\u003cString, String\u003e entry : headers.entrySet()) {\r\n        req.header(entry.getKey(), entry.getValue());\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  HttpConnection\n  Map\n  Validate.notNullParam(r0, \"headers\")\n  $r1 \u003d r0.entrySet()\n  r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r2.next()\n  r5 \u003d Map$Entry) $r4\n  $r6 \u003d HttpConnection$Request req\u003e\n  $r7 \u003d r5.getKey()\n  $r10 \u003d String) $r7\n  $r8 \u003d r5.getValue()\n  $r9 \u003d String) $r8\n  $r6.header($r10, $r9)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.HttpConnection",
    "methodName": "cookies",
    "signature": "org.jsoup.Connection cookies(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    Validate.notNullParam(cookies, \"cookies\");\r\n    for (Map.Entry\u003cString, String\u003e entry : cookies.entrySet()) {\r\n        req.cookie(entry.getKey(), entry.getValue());\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  HttpConnection\n  Map\n  Validate.notNullParam(r0, \"cookies\")\n  $r1 \u003d r0.entrySet()\n  r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r2.next()\n  r5 \u003d Map$Entry) $r4\n  $r6 \u003d HttpConnection$Request req\u003e\n  $r7 \u003d r5.getKey()\n  $r10 \u003d String) $r7\n  $r8 \u003d r5.getValue()\n  $r9 \u003d String) $r8\n  $r6.cookie($r10, $r9)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.HttpConnection",
    "methodName": "response",
    "signature": "org.jsoup.Connection$Response response()",
    "visibility": "public",
    "body": "{\r\n    if (res \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"You must execute the request before getting a response.\");\r\n    }\r\n    return res;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  HttpConnection\n  $r1 \u003d Connection$Response res\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"You must execute the request before getting a response.\")\n  throw $r3\n}",
      "B2 {\n  $r2 \u003d Connection$Response res\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.Validate",
    "methodName": "notNull",
    "signature": "void notNull(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj \u003d\u003d null)\r\n        throw new ValidationException(\"Object must not be null\");\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ValidationException\n  new ValidationException(\"Object must not be null\")\n  throw $r1\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.Validate",
    "methodName": "notNullParam",
    "signature": "void notNullParam(java.lang.Object,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (obj \u003d\u003d null)\r\n        throw new ValidationException(String.format(\"The parameter \u0027%s\u0027 must not be null.\", param));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ValidationException\n  $r2 \u003d Object)[1]\n  $r2[0] \u003d r3\n  $r4 \u003d String.format(\"The parameter \\\u0027%s\\\u0027 must not be null.\", $r2)\n  new ValidationException($r4)\n  throw $r1\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.Validate",
    "methodName": "notNull",
    "signature": "void notNull(java.lang.Object,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (obj \u003d\u003d null)\r\n        throw new ValidationException(msg);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ValidationException\n  new ValidationException(r2)\n  throw $r1\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.Validate",
    "methodName": "ensureNotNull",
    "signature": "java.lang.Object ensureNotNull(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj \u003d\u003d null)\r\n        throw new ValidationException(\"Object must not be null\");\r\n    else\r\n        return obj;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ValidationException\n  new ValidationException(\"Object must not be null\")\n  throw $r1\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.Validate",
    "methodName": "ensureNotNull",
    "signature": "java.lang.Object ensureNotNull(java.lang.Object,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    if (obj \u003d\u003d null)\r\n        throw new ValidationException(String.format(msg, args));\r\n    else\r\n        return obj;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  String\n  Object[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ValidationException\n  $r4 \u003d String.format(r2, r3)\n  new ValidationException($r4)\n  throw $r1\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.Validate",
    "methodName": "expectNotNull",
    "signature": "java.lang.Object expectNotNull(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ValidationException\n  new ValidationException(\"Object must not be null\")\n  throw $r1\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.Validate",
    "methodName": "expectNotNull",
    "signature": "java.lang.Object expectNotNull(java.lang.Object,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  String\n  Object[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ValidationException\n  $r4 \u003d String.format(r2, r3)\n  new ValidationException($r4)\n  throw $r1\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.Validate",
    "methodName": "isTrue",
    "signature": "void isTrue(boolean)",
    "visibility": "public",
    "body": "{\r\n    if (!val)\r\n        throw new ValidationException(\"Must be true\");\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  z0 :\u003d @parameter0: boolean\n  if (z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r0 \u003d ValidationException\n  new ValidationException(\"Must be true\")\n  throw $r0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.Validate",
    "methodName": "isTrue",
    "signature": "void isTrue(boolean,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (!val)\r\n        throw new ValidationException(msg);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  z0 :\u003d @parameter0: boolean\n  String\n  if (z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r0 \u003d ValidationException\n  new ValidationException(r1)\n  throw $r0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.Validate",
    "methodName": "isFalse",
    "signature": "void isFalse(boolean)",
    "visibility": "public",
    "body": "{\r\n    if (val)\r\n        throw new ValidationException(\"Must be false\");\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  z0 :\u003d @parameter0: boolean\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r0 \u003d ValidationException\n  new ValidationException(\"Must be false\")\n  throw $r0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.Validate",
    "methodName": "isFalse",
    "signature": "void isFalse(boolean,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (val)\r\n        throw new ValidationException(msg);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  z0 :\u003d @parameter0: boolean\n  String\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r0 \u003d ValidationException\n  new ValidationException(r1)\n  throw $r0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.Validate",
    "methodName": "noNullElements",
    "signature": "void noNullElements(java.lang.Object[],java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    for (Object obj : objects) if (obj \u003d\u003d null)\r\n        throw new ValidationException(msg);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B5",
      "B2 : If(r1 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  String\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B5\n}",
      "B2 {\n  r1 \u003d r0[i1]\n  if (r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d ValidationException\n  new ValidationException(r3)\n  throw $r2\n}",
      "B4 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.Validate",
    "methodName": "notEmpty",
    "signature": "void notEmpty(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (string \u003d\u003d null || string.length() \u003d\u003d 0)\r\n        throw new ValidationException(\"String must not be empty\");\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($i0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d r0.length()\n  if ($i0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d ValidationException\n  new ValidationException(\"String must not be empty\")\n  throw $r1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.Validate",
    "methodName": "notEmptyParam",
    "signature": "void notEmptyParam(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (string \u003d\u003d null || string.length() \u003d\u003d 0)\r\n        throw new ValidationException(String.format(\"The \u0027%s\u0027 parameter must not be empty.\", param));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($i0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d r0.length()\n  if ($i0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d ValidationException\n  $r2 \u003d Object)[1]\n  $r2[0] \u003d r3\n  $r4 \u003d String.format(\"The \\\u0027%s\\\u0027 parameter must not be empty.\", $r2)\n  new ValidationException($r4)\n  throw $r1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.Validate",
    "methodName": "notEmpty",
    "signature": "void notEmpty(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (string \u003d\u003d null || string.length() \u003d\u003d 0)\r\n        throw new ValidationException(msg);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($i0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d r0.length()\n  if ($i0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d ValidationException\n  new ValidationException(r2)\n  throw $r1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.ValidationException",
    "methodName": "fillInStackTrace",
    "signature": "java.lang.Throwable fillInStackTrace()",
    "visibility": "public",
    "body": "{\r\n    // Filters out the Validate class from the stacktrace, to more clearly point at the root-cause.\r\n    super.fillInStackTrace();\r\n    StackTraceElement[] stackTrace \u003d getStackTrace();\r\n    List\u003cStackTraceElement\u003e filteredTrace \u003d new ArrayList\u003c\u003e();\r\n    for (StackTraceElement trace : stackTrace) {\r\n        if (trace.getClassName().equals(Validator))\r\n            continue;\r\n        filteredTrace.add(trace);\r\n    }\r\n    setStackTrace(filteredTrace.toArray(new StackTraceElement[0]));\r\n    return this;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B6",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ValidationException\n  r0.fillInStackTrace()\n  r1 \u003d r0.getStackTrace()\n  $r2 \u003d ArrayList\n  new ArrayList()\n  i0 \u003d lengthof r1\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B6\n}",
      "B2 {\n  r6 \u003d r1[i1]\n  $r8 \u003d r6.getClassName()\n  $r7 \u003d String Validator\u003e\n  $z0 \u003d $r8.equals($r7)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  goto B5\n}",
      "B4 {\n  $r2.add(r6)\n}",
      "B5 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B6 {\n  $r3 \u003d StackTraceElement)[0]\n  $r4 \u003d $r2.toArray($r3)\n  $r5 \u003d StackTraceElement[]) $r4\n  r0.setStackTrace($r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ValidationException#setStackTrace(...1)",
        "body": "(source not found)"
      },
      {
        "name": "ValidationException#getStackTrace(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.helper.W3CDom",
    "methodName": "asString",
    "signature": "java.lang.String asString(org.w3c.dom.Document,java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    try {\r\n        DOMSource domSource \u003d new DOMSource(doc);\r\n        StringWriter writer \u003d new StringWriter();\r\n        StreamResult result \u003d new StreamResult(writer);\r\n        TransformerFactory tf \u003d TransformerFactory.newInstance();\r\n        Transformer transformer \u003d tf.newTransformer();\r\n        if (properties !\u003d null)\r\n            transformer.setOutputProperties(propertiesFromMap(properties));\r\n        if (doc.getDoctype() !\u003d null) {\r\n            DocumentType doctype \u003d doc.getDoctype();\r\n            if (!StringUtil.isBlank(doctype.getPublicId()))\r\n                transformer.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC, doctype.getPublicId());\r\n            if (!StringUtil.isBlank(doctype.getSystemId()))\r\n                transformer.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM, doctype.getSystemId());\r\n            else // handle \u003c!doctype html\u003e for legacy dom.\r\n            if (doctype.getName().equalsIgnoreCase(\"html\") \u0026\u0026 StringUtil.isBlank(doctype.getPublicId()) \u0026\u0026 StringUtil.isBlank(doctype.getSystemId()))\r\n                transformer.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM, \"about:legacy-compat\");\r\n        }\r\n        transformer.transform(domSource, result);\r\n        return writer.toString();\r\n    } catch (TransformerException e) {\r\n        throw new IllegalStateException(e);\r\n    }\r\n}",
    "nodes": 13,
    "edges": 18,
    "cc": 7,
    "flowSummary": [
      "B0 : If(r6 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r7 \u003d\u003d null) → B3 | else → B11",
      "B3 : If($z0 !\u003d 0) → B4 | else → B5",
      "B5 : If($z1 !\u003d 0) → B6 | else → B7",
      "B7 : If($z2 \u003d\u003d false) → B8 | else → B11",
      "B8 : If($z3 \u003d\u003d false) → B9 | else → B11",
      "B9 : If($z4 \u003d\u003d false) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  Document\n  Map\n  $r0 \u003d DOMSource\n  new DOMSource(r1)\n  $r2 \u003d StringWriter\n  new StringWriter()\n  $r3 \u003d StreamResult\n  new StreamResult($r2)\n  r4 \u003d TransformerFactory.newInstance()\n  r5 \u003d r4.newTransformer()\n  if (r6 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r16 \u003d W3CDom.propertiesFromMap(r6)\n  r5.setOutputProperties($r16)\n}",
      "B2 {\n  $r7 \u003d r1.getDoctype()\n  if ($r7 \u003d\u003d null) goto B3 else B11\n}",
      "B3 {\n  r8 \u003d r1.getDoctype()\n  $r9 \u003d r8.getPublicId()\n  $z0 \u003d StringUtil.isBlank($r9)\n  if ($z0 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r15 \u003d r8.getPublicId()\n  r5.setOutputProperty(\"doctype-public\", $r15)\n}",
      "B5 {\n  $r10 \u003d r8.getSystemId()\n  $z1 \u003d StringUtil.isBlank($r10)\n  if ($z1 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $r14 \u003d r8.getSystemId()\n  r5.setOutputProperty(\"doctype-system\", $r14)\n  goto B11\n}",
      "B7 {\n  $r11 \u003d r8.getName()\n  $z2 \u003d $r11.equalsIgnoreCase(\"html\")\n  if ($z2 \u003d\u003d false) goto B8 else B11\n}",
      "B8 {\n  $r12 \u003d r8.getPublicId()\n  $z3 \u003d StringUtil.isBlank($r12)\n  if ($z3 \u003d\u003d false) goto B9 else B11\n}",
      "B9 {\n  $r13 \u003d r8.getSystemId()\n  $z4 \u003d StringUtil.isBlank($r13)\n  if ($z4 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  r5.setOutputProperty(\"doctype-system\", \"about:legacy-compat\")\n}",
      "B11 {\n  r5.transform($r0, $r3)\n  $r19 \u003d $r2.toString()\n  return\n}",
      "B12 {\n  $r17 :\u003d @caughtexception\n  $r18 \u003d IllegalStateException\n  new IllegalStateException($r17)\n  throw $r18\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B11",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "W3CDom#propertiesFromMap(...1)",
        "body": "{\r\n    Properties props \u003d new Properties();\r\n    props.putAll(map);\r\n    return props;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.helper.W3CDom",
    "methodName": "fromJsoup",
    "signature": "org.w3c.dom.Document fromJsoup(org.jsoup.nodes.Element)",
    "visibility": "public",
    "body": "{\r\n    Validate.notNull(in);\r\n    DocumentBuilder builder;\r\n    try {\r\n        builder \u003d factory.newDocumentBuilder();\r\n        DOMImplementation impl \u003d builder.getDOMImplementation();\r\n        Document out \u003d builder.newDocument();\r\n        org.jsoup.nodes.Document inDoc \u003d in.ownerDocument();\r\n        org.jsoup.nodes.DocumentType doctype \u003d inDoc !\u003d null ? inDoc.documentType() : null;\r\n        if (doctype !\u003d null) {\r\n            try {\r\n                org.w3c.dom.DocumentType documentType \u003d impl.createDocumentType(doctype.name(), doctype.publicId(), doctype.systemId());\r\n                out.appendChild(documentType);\r\n            } catch (DOMException ignored) {\r\n                // invalid / empty doctype dropped\r\n            }\r\n        }\r\n        out.setXmlStandalone(true);\r\n        // if in is Document, use the root element, not the wrapping document, as the context:\r\n        org.jsoup.nodes.Element context \u003d (in instanceof org.jsoup.nodes.Document) ? in.firstElementChild() : in;\r\n        out.setUserData(ContextProperty, context, null);\r\n        convert(inDoc !\u003d null ? inDoc : in, out);\r\n        return out;\r\n    } catch (ParserConfigurationException e) {\r\n        throw new IllegalStateException(e);\r\n    }\r\n}",
    "nodes": 14,
    "edges": 16,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r5 \u003d\u003d null) → B1 | else → B2",
      "B3 : If($r13 \u003d\u003d null) → B4 | else → B6",
      "B6 : If($z0 \u003d\u003d false) → B7 | else → B8",
      "B9 : If(r5 \u003d\u003d null) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  W3CDom\n  Element\n  Validate.notNull(r0)\n  $r2 \u003d DocumentBuilderFactory factory\u003e\n  r3 \u003d $r2.newDocumentBuilder()\n  r12 \u003d r3.getDOMImplementation()\n  r4 \u003d r3.newDocument()\n  r5 \u003d r0.ownerDocument()\n  if (r5 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r13 \u003d r5.documentType()\n  goto B3\n}",
      "B2 {\n  $r13 \u003d null\n}",
      "B3 {\n  if ($r13 \u003d\u003d null) goto B4 else B6\n}",
      "B4 {\n  $r8 \u003d $r13.name()\n  $r7 \u003d $r13.publicId()\n  $r6 \u003d $r13.systemId()\n  r14 \u003d r12.createDocumentType($r8, $r7, $r6)\n  r4.appendChild(r14)\n  goto B6\n}",
      "B5 {\n  $r11 :\u003d @caughtexception\n}",
      "B6 {\n  r4.setXmlStandalone(1)\n  $z0 \u003d Document\n  if ($z0 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $r15 \u003d r0.firstElementChild()\n  goto B9\n}",
      "B8 {\n  $r15 \u003d r0\n}",
      "B9 {\n  r4.setUserData(\"jsoupContextSource\", $r15, null)\n  if (r5 \u003d\u003d null) goto B10 else B11\n}",
      "B10 {\n  $r16 \u003d r5\n  goto B12\n}",
      "B11 {\n  $r16 \u003d r0\n}",
      "B12 {\n  r1.convert($r16, r4)\n  return\n}",
      "B13 {\n  $r9 :\u003d @caughtexception\n  $r10 \u003d IllegalStateException\n  new IllegalStateException($r9)\n  throw $r10\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "W3CDom#convert(...2)",
        "body": "{\r\n    // just provides method API backcompat\r\n    convert((org.jsoup.nodes.Element) in, out);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.helper.W3CDom",
    "methodName": "convert",
    "signature": "void convert(org.jsoup.nodes.Element,org.w3c.dom.Document)",
    "visibility": "public",
    "body": "{\r\n    W3CBuilder builder \u003d new W3CBuilder(out);\r\n    builder.namespaceAware \u003d namespaceAware;\r\n    org.jsoup.nodes.Document inDoc \u003d in.ownerDocument();\r\n    if (inDoc !\u003d null) {\r\n        if (!StringUtil.isBlank(inDoc.location())) {\r\n            out.setDocumentURI(inDoc.location());\r\n        }\r\n        builder.syntax \u003d inDoc.outputSettings().syntax();\r\n    }\r\n    // skip the #root node if a Document\r\n    org.jsoup.nodes.Element rootEl \u003d in instanceof org.jsoup.nodes.Document ? in.firstElementChild() : in;\r\n    assert rootEl !\u003d null;\r\n    builder.traverse(rootEl);\r\n}",
    "nodes": 11,
    "edges": 14,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r4 \u003d\u003d null) → B1 | else → B4",
      "B1 : If($z2 !\u003d 0) → B2 | else → B3",
      "B4 : If($z3 \u003d\u003d false) → B5 | else → B6",
      "B7 : If($z1 !\u003d 0) → B8 | else → B10",
      "B8 : If($r11 !\u003d null) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  W3CDom\n  Element\n  Document\n  $r0 \u003d W3CDom$W3CBuilder\n  new W3CDom$W3CBuilder(r1)\n  $z0 \u003d W3CDom: boolean namespaceAware\u003e\n  W3CDom$W3CBuilder: boolean namespaceAware\u003e \u003d $z0\n  r4 \u003d r3.ownerDocument()\n  if (r4 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r7 \u003d r4.location()\n  $z2 \u003d StringUtil.isBlank($r7)\n  if ($z2 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r10 \u003d r4.location()\n  r1.setDocumentURI($r10)\n}",
      "B3 {\n  $r8 \u003d r4.outputSettings()\n  $r9 \u003d $r8.syntax()\n  Document$OutputSettings$Syntax syntax\u003e \u003d $r9\n}",
      "B4 {\n  $z3 \u003d Document\n  if ($z3 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r11 \u003d r3.firstElementChild()\n  goto B7\n}",
      "B6 {\n  $r11 \u003d r3\n}",
      "B7 {\n  r5 \u003d $r11\n  $z1 \u003d W3CDom: boolean $assertionsDisabled\u003e\n  if ($z1 !\u003d 0) goto B8 else B10\n}",
      "B8 {\n  if ($r11 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  $r6 \u003d AssertionError\n  new AssertionError()\n  throw $r6\n}",
      "B10 {\n  $r0.traverse(r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.W3CDom",
    "methodName": "selectXpath",
    "signature": "org.w3c.dom.NodeList selectXpath(java.lang.String,org.w3c.dom.Node)",
    "visibility": "public",
    "body": "{\r\n    Validate.notEmptyParam(xpath, \"xpath\");\r\n    Validate.notNullParam(contextNode, \"contextNode\");\r\n    NodeList nodeList;\r\n    try {\r\n        // if there is a configured XPath factory, use that instead of the Java base impl:\r\n        String property \u003d System.getProperty(XPathFactoryProperty);\r\n        final XPathFactory xPathFactory \u003d property !\u003d null ? XPathFactory.newInstance(\"jsoup\") : XPathFactory.newInstance();\r\n        XPathExpression expression \u003d xPathFactory.newXPath().compile(xpath);\r\n        // love the strong typing here /s\r\n        nodeList \u003d (NodeList) expression.evaluate(contextNode, XPathConstants.NODESET);\r\n        Validate.notNull(nodeList);\r\n    } catch (XPathExpressionException | XPathFactoryConfigurationException e) {\r\n        throw new Selector.SelectorParseException(e, \"Could not evaluate XPath query [%s]: %s\", xpath, e.getMessage());\r\n    }\r\n    return nodeList;\r\n}",
    "nodes": 6,
    "edges": 5,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r12 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  W3CDom\n  String\n  Node\n  Validate.notEmptyParam(r0, \"xpath\")\n  Validate.notNullParam(r1, \"contextNode\")\n  r12 \u003d System.getProperty(\"javax.xml.xpath.XPathFactory:jsoup\")\n  if (r12 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r13 \u003d XPathFactory.newInstance(\"jsoup\")\n  goto B3\n}",
      "B2 {\n  $r13 \u003d XPathFactory.newInstance()\n}",
      "B3 {\n  $r2 \u003d $r13.newXPath()\n  $r5 \u003d $r2.compile(r0)\n  $r3 \u003d QName NODESET\u003e\n  $r4 \u003d $r5.evaluate(r1, $r3)\n  $r6 \u003d NodeList) $r4\n  Validate.notNull($r6)\n  goto B5\n}",
      "B4 {\n  $r7 :\u003d @caughtexception\n  $r8 \u003d Selector$SelectorParseException\n  $r9 \u003d Object)[2]\n  $r9[0] \u003d r0\n  $r10 \u003d $r7.getMessage()\n  $r9[1] \u003d $r10\n  new Selector$SelectorParseException($r7, \"Could not evaluate XPath query %s: %s\", $r9)\n  throw $r8\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.helper.W3CDom",
    "methodName": "sourceNodes",
    "signature": "java.util.List sourceNodes(org.w3c.dom.NodeList,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    Validate.notNull(nodeList);\r\n    Validate.notNull(nodeType);\r\n    List\u003cT\u003e nodes \u003d new ArrayList\u003c\u003e(nodeList.getLength());\r\n    for (int i \u003d 0; i \u003c nodeList.getLength(); i++) {\r\n        org.w3c.dom.Node node \u003d nodeList.item(i);\r\n        Object source \u003d node.getUserData(W3CDom.SourceProperty);\r\n        if (nodeType.isInstance(source))\r\n            nodes.add(nodeType.cast(source));\r\n    }\r\n    return nodes;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d $i1) → B2 | else → B5",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  W3CDom\n  NodeList\n  Class\n  Validate.notNull(r0)\n  Validate.notNull(r1)\n  $r2 \u003d ArrayList\n  $i0 \u003d r0.getLength()\n  new ArrayList($i0)\n  i2 \u003d 0\n}",
      "B1 {\n  $i1 \u003d r0.getLength()\n  if (i2 \u003e\u003d $i1) goto B2 else B5\n}",
      "B2 {\n  r3 \u003d r0.item(i2)\n  r4 \u003d r3.getUserData(\"jsoupSource\")\n  $z0 \u003d r1.isInstance(r4)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d r1.cast(r4)\n  $r6 \u003d Node) $r5\n  $r2.add($r6)\n}",
      "B4 {\n  i2 \u003d i2 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.internal.ControllableInputStream",
    "methodName": "wrap",
    "signature": "org.jsoup.internal.ControllableInputStream wrap(java.io.InputStream,int)",
    "visibility": "public",
    "body": "{\r\n    // bufferSize currently unused; consider implementing as a min size in the SoftPool recycler\r\n    if (in instanceof ControllableInputStream)\r\n        return (ControllableInputStream) in;\r\n    else\r\n        return new ControllableInputStream(new SimpleBufferedInput(in), maxSize);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  InputStream\n  i0 :\u003d @parameter1: int\n  $z0 \u003d ControllableInputStream\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d ControllableInputStream) r0\n  return\n}",
      "B2 {\n  $r1 \u003d ControllableInputStream\n  $r2 \u003d SimpleBufferedInput\n  new SimpleBufferedInput(r0)\n  new ControllableInputStream($r2, i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.internal.ControllableInputStream",
    "methodName": "read",
    "signature": "int read(byte[],int,int)",
    "visibility": "public",
    "body": "{\r\n    // emits a progress\r\n    if (readPos \u003d\u003d 0)\r\n        emitProgress();\r\n    boolean capped \u003d maxSize !\u003d 0;\r\n    if (interrupted || capped \u0026\u0026 remaining \u003c\u003d 0)\r\n        return -1;\r\n    if (Thread.currentThread().isInterrupted()) {\r\n        // interrupted latches, because parse() may call twice\r\n        interrupted \u003d true;\r\n        return -1;\r\n    }\r\n    if (capped \u0026\u0026 len \u003e remaining)\r\n        // don\u0027t read more than desired, even if available\r\n        len \u003d remaining;\r\n    while (true) {\r\n        // loop trying to read until we get some data or hit the overall timeout, if we have one\r\n        if (expired())\r\n            throw new SocketTimeoutException(\"Read timeout\");\r\n        try {\r\n            final int read \u003d super.read(b, off, len);\r\n            if (read \u003d\u003d -1) {\r\n                // completed\r\n                contentLength \u003d readPos;\r\n            } else {\r\n                remaining -\u003d read;\r\n                readPos +\u003d read;\r\n            }\r\n            emitProgress();\r\n            return read;\r\n        } catch (SocketTimeoutException e) {\r\n            if (expired() || timeout \u003d\u003d 0)\r\n                throw e;\r\n        }\r\n    }\r\n}",
    "nodes": 24,
    "edges": 31,
    "cc": 9,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B2 : If($i1 \u003d\u003d false) → B3 | else → B4",
      "B5 : If($z1 !\u003d 0) → B6 | else → B8",
      "B6 : If($z7 \u003d\u003d false) → B7 | else → B9",
      "B7 : If($i9 \u003e 0) → B8 | else → B9",
      "B9 : If($z2 \u003d\u003d false) → B10 | else → B11",
      "B11 : If(z0 \u003d\u003d false) → B12 | else → B14",
      "B12 : If(i12 \u003c\u003d $i8) → B13 | else → B14",
      "B14 : If($z5 \u003d\u003d false) → B15 | else → B16",
      "B16 : If(i13 !\u003d $i19) → B17 | else → B18",
      "B20 : If($z3 !\u003d 0) → B21 | else → B22",
      "B21 : If($b11 !\u003d 0) → B22 | else → B23"
    ],
    "blockList": [
      "B0 {\n  ControllableInputStream\n  r2 :\u003d @parameter0: byte[]\n  i2 :\u003d @parameter1: int\n  i12 :\u003d @parameter2: int\n  $i0 \u003d ControllableInputStream: int readPos\u003e\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.emitProgress()\n}",
      "B2 {\n  $i1 \u003d ControllableInputStream: int maxSize\u003e\n  if ($i1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $z7 \u003d 1\n  $z6 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z7 \u003d 0\n  $z6 \u003d 0\n}",
      "B5 {\n  z0 \u003d $z6\n  $z1 \u003d ControllableInputStream: boolean interrupted\u003e\n  if ($z1 !\u003d 0) goto B6 else B8\n}",
      "B6 {\n  if ($z7 \u003d\u003d false) goto B7 else B9\n}",
      "B7 {\n  $i9 \u003d ControllableInputStream: int remaining\u003e\n  if ($i9 \u003e 0) goto B8 else B9\n}",
      "B8 {\n  $i15 \u003d (int) -1\n  return\n}",
      "B9 {\n  $r1 \u003d Thread.currentThread()\n  $z2 \u003d $r1.isInterrupted()\n  if ($z2 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  ControllableInputStream: boolean interrupted\u003e \u003d 1\n  $i17 \u003d (int) -1\n  return\n}",
      "B11 {\n  if (z0 \u003d\u003d false) goto B12 else B14\n}",
      "B12 {\n  $i8 \u003d ControllableInputStream: int remaining\u003e\n  if (i12 \u003c\u003d $i8) goto B13 else B14\n}",
      "B13 {\n  i12 \u003d ControllableInputStream: int remaining\u003e\n}",
      "B14 {\n  $z5 \u003d r0.expired()\n  if ($z5 \u003d\u003d false) goto B15 else B16\n}",
      "B15 {\n  $r5 \u003d SocketTimeoutException\n  new SocketTimeoutException(\"Read timeout\")\n  throw $r5\n}",
      "B16 {\n  i13 \u003d r0.read(r2, i2, i12)\n  $i19 \u003d (int) -1\n  if (i13 !\u003d $i19) goto B17 else B18\n}",
      "B17 {\n  $i7 \u003d ControllableInputStream: int readPos\u003e\n  ControllableInputStream: int contentLength\u003e \u003d $i7\n  goto B19\n}",
      "B18 {\n  $i3 \u003d ControllableInputStream: int remaining\u003e\n  $i4 \u003d $i3 - i13\n  ControllableInputStream: int remaining\u003e \u003d $i4\n  $i5 \u003d ControllableInputStream: int readPos\u003e\n  $i6 \u003d $i5 + i13\n  ControllableInputStream: int readPos\u003e \u003d $i6\n}",
      "B19 {\n  r0.emitProgress()\n  return\n}",
      "B20 {\n  $r4 :\u003d @caughtexception\n  $z3 \u003d r0.expired()\n  if ($z3 !\u003d 0) goto B21 else B22\n}",
      "B21 {\n  $l10 \u003d ControllableInputStream: long timeout\u003e\n  $b11 \u003d $l10 cmp 0L\n  if ($b11 !\u003d 0) goto B22 else B23\n}",
      "B22 {\n  throw $r4\n}",
      "B23 {\n  goto B14\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B14",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e [EXIT]",
      "B23 --\u003e B14"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ControllableInputStream#expired(...0)",
        "body": "{\r\n    if (timeout \u003d\u003d 0)\r\n        return false;\r\n    final long now \u003d System.nanoTime();\r\n    final long dur \u003d now - startTime;\r\n    return (dur \u003e timeout);\r\n}"
      },
      {
        "name": "ControllableInputStream#emitProgress(...0)",
        "body": "{\r\n    if (progress \u003d\u003d null)\r\n        return;\r\n    // calculate percent complete if contentLength \u003e 0 (and cap to 100.0 if totalRead \u003e contentLength):\r\n    float percent \u003d contentLength \u003e 0 ? Math.min(100f, readPos * 100f / contentLength) : 0;\r\n    //noinspection unchecked\r\n    // (not actually unchecked - verified when set)\r\n    ((Progress\u003cObject\u003e) progress).onProgress(readPos, contentLength, percent, progressContext);\r\n    // detach once we reach 100%, so that any subsequent buffer hits don\u0027t report 100 again\r\n    if (percent \u003d\u003d 100.0f)\r\n        progress \u003d null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.internal.ControllableInputStream",
    "methodName": "readToByteBuffer",
    "signature": "java.nio.ByteBuffer readToByteBuffer(java.io.InputStream,int)",
    "visibility": "public",
    "body": "{\r\n    Validate.isTrue(max \u003e\u003d 0, \"maxSize must be 0 (unlimited) or larger\");\r\n    Validate.notNull(in);\r\n    final boolean capped \u003d max \u003e 0;\r\n    // Share the same byte[] pool as SBI\r\n    final byte[] readBuf \u003d SimpleBufferedInput.BufferPool.borrow();\r\n    final int outSize \u003d capped ? Math.min(max, DefaultBufferSize) : DefaultBufferSize;\r\n    ByteBuffer outBuf \u003d ByteBuffer.allocate(outSize);\r\n    try {\r\n        int remaining \u003d max;\r\n        int read;\r\n        while ((read \u003d in.read(readBuf, 0, capped ? Math.min(remaining, DefaultBufferSize) : DefaultBufferSize)) !\u003d -1) {\r\n            if (outBuf.remaining() \u003c read) {\r\n                // needs to grow\r\n                int newCapacity \u003d (int) Math.max(outBuf.capacity() * 1.5, outBuf.capacity() + read);\r\n                ByteBuffer newBuffer \u003d ByteBuffer.allocate(newCapacity);\r\n                outBuf.flip();\r\n                newBuffer.put(outBuf);\r\n                outBuf \u003d newBuffer;\r\n            }\r\n            outBuf.put(readBuf, 0, read);\r\n            if (capped) {\r\n                remaining -\u003d read;\r\n                if (remaining \u003c\u003d 0)\r\n                    break;\r\n            }\r\n        }\r\n        // Prepare the buffer for reading\r\n        outBuf.flip();\r\n        return outBuf;\r\n    } finally {\r\n        SimpleBufferedInput.BufferPool.release(readBuf);\r\n    }\r\n}",
    "nodes": 21,
    "edges": 27,
    "cc": 8,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B2",
      "B3 : If(i0 \u003c\u003d 0) → B4 | else → B5",
      "B6 : If($z4 \u003d\u003d false) → B7 | else → B8",
      "B10 : If(z0 \u003d\u003d false) → B11 | else → B12",
      "B13 : If($i1 \u003d\u003d $i11) → B14 | else → B19",
      "B14 : If($i2 \u003e\u003d $i1) → B15 | else → B16",
      "B16 : If(z0 \u003d\u003d false) → B17 | else → B10",
      "B17 : If(i7 \u003e 0) → B18 | else → B10"
    ],
    "blockList": [
      "B0 {\n  InputStream\n  i0 :\u003d @parameter1: int\n  if (i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  Validate.isTrue($z1, \"maxSize must be 0 (unlimited) or larger\")\n  Validate.notNull(r0)\n  if (i0 \u003c\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $z4 \u003d 1\n  $z3 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z4 \u003d 0\n  $z3 \u003d 0\n}",
      "B6 {\n  z0 \u003d $z3\n  $r1 \u003d SoftPool BufferPool\u003e\n  $r2 \u003d $r1.borrow()\n  $r5 \u003d (byte[]) $r2\n  if ($z4 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $i6 \u003d Math.min(i0, 8192)\n  goto B9\n}",
      "B8 {\n  $i6 \u003d 8192\n}",
      "B9 {\n  r8 \u003d ByteBuffer.allocate($i6)\n  i7 \u003d i0\n}",
      "B10 {\n  if (z0 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  $i8 \u003d Math.min(i7, 8192)\n  goto B13\n}",
      "B12 {\n  $i8 \u003d 8192\n}",
      "B13 {\n  $i1 \u003d r0.read($r5, 0, $i8)\n  $i11 \u003d (int) -1\n  if ($i1 \u003d\u003d $i11) goto B14 else B19\n}",
      "B14 {\n  $i2 \u003d r8.remaining()\n  if ($i2 \u003e\u003d $i1) goto B15 else B16\n}",
      "B15 {\n  $i3 \u003d r8.capacity()\n  $d0 \u003d (double) $i3\n  $d2 \u003d 5\n  $i4 \u003d r8.capacity()\n  $i5 \u003d $i4 + $i1\n  $d1 \u003d (double) $i5\n  $d3 \u003d Math.max($d2, $d1)\n  i9 \u003d (int) $d3\n  r4 \u003d ByteBuffer.allocate(i9)\n  r8.flip()\n  r4.put(r8)\n  r8 \u003d r4\n}",
      "B16 {\n  r8.put($r5, 0, $i1)\n  if (z0 \u003d\u003d false) goto B17 else B10\n}",
      "B17 {\n  i7 \u003d i7 - $i1\n  if (i7 \u003e 0) goto B18 else B10\n}",
      "B18 {\n  goto B19\n}",
      "B19 {\n  r8.flip()\n  $r3 \u003d SoftPool BufferPool\u003e\n  $r3.release($r5)\n  return\n}",
      "B20 {\n  $r6 :\u003d @caughtexception\n  $r7 \u003d SoftPool BufferPool\u003e\n  $r7.release($r5)\n  throw $r6\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B19",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B17",
      "B16 --\u003e B10",
      "B17 --\u003e B18",
      "B17 --\u003e B10",
      "B18 --\u003e B19",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.internal.ControllableInputStream",
    "methodName": "close",
    "signature": "void close()",
    "visibility": "public",
    "body": "{\r\n    if (allowClose)\r\n        super.close();\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ControllableInputStream\n  $z0 \u003d ControllableInputStream: boolean allowClose\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r0.close()\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.internal.Normalizer",
    "methodName": "lowerCase",
    "signature": "java.lang.String lowerCase(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return input !\u003d null ? input.toLowerCase(Locale.ROOT) : \"\";\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d Locale ROOT\u003e\n  $r2 \u003d r0.toLowerCase($r1)\n  goto B3\n}",
      "B2 {\n  $r2 \u003d \"\"\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.internal.Normalizer",
    "methodName": "normalize",
    "signature": "java.lang.String normalize(java.lang.String,boolean)",
    "visibility": "public",
    "body": "{\r\n    return isStringLiteral ? lowerCase(input) : normalize(input);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  z0 :\u003d @parameter1: boolean\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d Normalizer.lowerCase(r0)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d Normalizer.normalize(r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Normalizer#normalize(...1)",
        "body": "{\r\n    return lowerCase(input).trim();\r\n}"
      },
      {
        "name": "Normalizer#lowerCase(...1)",
        "body": "{\r\n    return input !\u003d null ? input.toLowerCase(Locale.ROOT) : \"\";\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.internal.SimpleStreamReader",
    "methodName": "read",
    "signature": "int read(char[],int,int)",
    "visibility": "public",
    "body": "{\r\n    // can\u0027t read after close\r\n    Validate.notNull(byteBuf);\r\n    CharBuffer charBuf \u003d CharBuffer.wrap(charArray, off, len);\r\n    if (charBuf.position() !\u003d 0)\r\n        charBuf \u003d charBuf.slice();\r\n    boolean readFully \u003d false;\r\n    while (true) {\r\n        CoderResult result \u003d decoder.decode(byteBuf, charBuf, readFully);\r\n        if (result.isUnderflow()) {\r\n            if (readFully || !charBuf.hasRemaining() || (charBuf.position() \u003e 0) \u0026\u0026 !(in.available() \u003e 0))\r\n                break;\r\n            int read \u003d bufferUp();\r\n            if (read \u003c 0) {\r\n                readFully \u003d true;\r\n                if ((charBuf.position() \u003d\u003d 0) \u0026\u0026 (!byteBuf.hasRemaining()))\r\n                    break;\r\n            }\r\n            continue;\r\n        }\r\n        if (result.isOverflow())\r\n            break;\r\n        result.throwException();\r\n    }\r\n    if (readFully)\r\n        decoder.reset();\r\n    if (charBuf.position() \u003d\u003d 0)\r\n        return -1;\r\n    return charBuf.position();\r\n}",
    "nodes": 21,
    "edges": 31,
    "cc": 12,
    "flowSummary": [
      "B0 : If($i2 \u003d\u003d false) → B1 | else → B2",
      "B3 : If($z4 \u003d\u003d false) → B4 | else → B13",
      "B4 : If(z6 !\u003d 0) → B5 | else → B16",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B16",
      "B6 : If($i5 \u003c\u003d 0) → B7 | else → B9",
      "B7 : If($i7 \u003e 0) → B8 | else → B9",
      "B9 : If($i8 \u003e\u003d 0) → B10 | else → B3",
      "B10 : If($i6 !\u003d 0) → B11 | else → B3",
      "B11 : If($z2 !\u003d 0) → B12 | else → B3",
      "B13 : If($z0 \u003d\u003d false) → B14 | else → B15",
      "B16 : If(z5 \u003d\u003d false) → B17 | else → B18",
      "B18 : If($i3 !\u003d 0) → B19 | else → B20"
    ],
    "blockList": [
      "B0 {\n  SimpleStreamReader\n  r2 :\u003d @parameter0: char[]\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  $r1 \u003d ByteBuffer byteBuf\u003e\n  Validate.notNull($r1)\n  r6 \u003d CharBuffer.wrap(r2, i0, i1)\n  $i2 \u003d r6.position()\n  if ($i2 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r6 \u003d r6.slice()\n}",
      "B2 {\n  z3 \u003d 0\n  z7 \u003d 0\n  z6 \u003d 0\n  z5 \u003d 0\n}",
      "B3 {\n  $r7 \u003d CharsetDecoder decoder\u003e\n  $r8 \u003d ByteBuffer byteBuf\u003e\n  $r9 \u003d $r7.decode($r8, r6, z7)\n  $z4 \u003d $r9.isUnderflow()\n  if ($z4 \u003d\u003d false) goto B4 else B13\n}",
      "B4 {\n  if (z6 !\u003d 0) goto B5 else B16\n}",
      "B5 {\n  $z1 \u003d r6.hasRemaining()\n  if ($z1 \u003d\u003d false) goto B6 else B16\n}",
      "B6 {\n  $i5 \u003d r6.position()\n  if ($i5 \u003c\u003d 0) goto B7 else B9\n}",
      "B7 {\n  $r5 \u003d InputStream in\u003e\n  $i7 \u003d $r5.available()\n  if ($i7 \u003e 0) goto B8 else B9\n}",
      "B8 {\n  goto B16\n}",
      "B9 {\n  $i8 \u003d r0.bufferUp()\n  if ($i8 \u003e\u003d 0) goto B10 else B3\n}",
      "B10 {\n  z3 \u003d 1\n  z7 \u003d 1\n  z6 \u003d 1\n  z5 \u003d 1\n  $i6 \u003d r6.position()\n  if ($i6 !\u003d 0) goto B11 else B3\n}",
      "B11 {\n  $r4 \u003d ByteBuffer byteBuf\u003e\n  $z2 \u003d $r4.hasRemaining()\n  if ($z2 !\u003d 0) goto B12 else B3\n}",
      "B12 {\n  goto B16\n}",
      "B13 {\n  $z0 \u003d $r9.isOverflow()\n  if ($z0 \u003d\u003d false) goto B14 else B15\n}",
      "B14 {\n  goto B16\n}",
      "B15 {\n  $r9.throwException()\n  goto B3\n}",
      "B16 {\n  if (z5 \u003d\u003d false) goto B17 else B18\n}",
      "B17 {\n  $r3 \u003d CharsetDecoder decoder\u003e\n  $r3.reset()\n}",
      "B18 {\n  $i3 \u003d r6.position()\n  if ($i3 !\u003d 0) goto B19 else B20\n}",
      "B19 {\n  $i10 \u003d (int) -1\n  return\n}",
      "B20 {\n  $i4 \u003d r6.position()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B13",
      "B4 --\u003e B5",
      "B4 --\u003e B16",
      "B5 --\u003e B6",
      "B5 --\u003e B16",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B16",
      "B9 --\u003e B10",
      "B9 --\u003e B3",
      "B10 --\u003e B11",
      "B10 --\u003e B3",
      "B11 --\u003e B12",
      "B11 --\u003e B3",
      "B12 --\u003e B16",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B3",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleStreamReader#bufferUp(...0)",
        "body": "{\r\n    // already validated ^\r\n    assert byteBuf !\u003d null;\r\n    byteBuf.compact();\r\n    try {\r\n        int pos \u003d byteBuf.position();\r\n        int remaining \u003d (byteBuf.limit() - pos);\r\n        int read \u003d in.read(byteBuf.array(), byteBuf.arrayOffset() + pos, remaining);\r\n        if (read \u003c 0)\r\n            return read;\r\n        if (read \u003d\u003d 0)\r\n            throw new IOException(\"Underlying input stream returned zero bytes\");\r\n        byteBuf.position(pos + read);\r\n    } finally {\r\n        byteBuf.flip();\r\n    }\r\n    return byteBuf.remaining();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.internal.SimpleStreamReader",
    "methodName": "close",
    "signature": "void close()",
    "visibility": "public",
    "body": "{\r\n    if (byteBuf \u003d\u003d null)\r\n        return;\r\n    BufferPool.release(byteBuf.array());\r\n    byteBuf \u003d null;\r\n    in.close();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleStreamReader\n  $r1 \u003d ByteBuffer byteBuf\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d SoftPool BufferPool\u003e\n  $r2 \u003d ByteBuffer byteBuf\u003e\n  $r4 \u003d $r2.array()\n  $r3.release($r4)\n  ByteBuffer byteBuf\u003e \u003d null\n  $r5 \u003d InputStream in\u003e\n  $r5.close()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.internal.SoftPool",
    "methodName": "borrow",
    "signature": "java.lang.Object borrow()",
    "visibility": "public",
    "body": "{\r\n    ArrayDeque\u003cT\u003e stack \u003d getStack();\r\n    if (!stack.isEmpty()) {\r\n        return stack.pop();\r\n    }\r\n    return initializer.get();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SoftPool\n  r1 \u003d r0.getStack()\n  $z0 \u003d r1.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r1.pop()\n  return\n}",
      "B2 {\n  $r2 \u003d Supplier initializer\u003e\n  $r3 \u003d $r2.get()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SoftPool#getStack(...0)",
        "body": "{\r\n    ArrayDeque\u003cT\u003e stack \u003d threadLocalStack.get().get();\r\n    if (stack \u003d\u003d null) {\r\n        stack \u003d new ArrayDeque\u003c\u003e();\r\n        threadLocalStack.set(new SoftReference\u003c\u003e(stack));\r\n    }\r\n    return stack;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.internal.SoftPool",
    "methodName": "release",
    "signature": "void release(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003e\u003d 12) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SoftPool\n  Object\n  r1 \u003d r0.getStack()\n  $i0 \u003d r1.size()\n  if ($i0 \u003e\u003d 12) goto B1 else B2\n}",
      "B1 {\n  r1.push(r2)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.internal.StringUtil",
    "methodName": "join",
    "signature": "java.lang.String join(java.util.Iterator,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (!strings.hasNext())\r\n        return \"\";\r\n    String start \u003d strings.next().toString();\r\n    if (// only one, avoid builder\r\n    !strings.hasNext())\r\n        return start;\r\n    StringJoiner j \u003d new StringJoiner(sep);\r\n    j.add(start);\r\n    while (strings.hasNext()) {\r\n        j.add(strings.next());\r\n    }\r\n    return j.complete();\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  String\n  $z0 \u003d r0.hasNext()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.next()\n  r2 \u003d $r1.toString()\n  $z1 \u003d r0.hasNext()\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d StringUtil$StringJoiner\n  new StringUtil$StringJoiner(r4)\n  $r3.add(r2)\n}",
      "B5 {\n  $z2 \u003d r0.hasNext()\n  if ($z2 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r6 \u003d r0.next()\n  $r3.add($r6)\n  goto B5\n}",
      "B7 {\n  $r5 \u003d $r3.complete()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.internal.StringUtil",
    "methodName": "padding",
    "signature": "java.lang.String padding(int,int)",
    "visibility": "public",
    "body": "{\r\n    Validate.isTrue(width \u003e\u003d 0, \"width must be \u003e\u003d 0\");\r\n    Validate.isTrue(maxPaddingWidth \u003e\u003d -1);\r\n    if (maxPaddingWidth !\u003d -1)\r\n        width \u003d Math.min(width, maxPaddingWidth);\r\n    if (width \u003c padding.length)\r\n        return padding[width];\r\n    char[] out \u003d new char[width];\r\n    for (int i \u003d 0; i \u003c width; i++) out[i] \u003d \u0027 \u0027;\r\n    return String.valueOf(out);\r\n}",
    "nodes": 14,
    "edges": 17,
    "cc": 5,
    "flowSummary": [
      "B0 : If(i2 \u003c 0) → B1 | else → B2",
      "B3 : If(i0 \u003c $i5) → B4 | else → B5",
      "B6 : If(i0 \u003d\u003d $i7) → B7 | else → B8",
      "B8 : If(i2 \u003e\u003d $i1) → B9 | else → B10",
      "B11 : If(i3 \u003e\u003d i2) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  i2 :\u003d @parameter0: int\n  i0 :\u003d @parameter1: int\n  if (i2 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  Validate.isTrue($z0, \"width must be \u003e\u003d 0\")\n  $i5 \u003d (int) -1\n  if (i0 \u003c $i5) goto B4 else B5\n}",
      "B4 {\n  $z1 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z1 \u003d 0\n}",
      "B6 {\n  Validate.isTrue($z1)\n  $i7 \u003d (int) -1\n  if (i0 \u003d\u003d $i7) goto B7 else B8\n}",
      "B7 {\n  i2 \u003d Math.min(i2, i0)\n}",
      "B8 {\n  $r0 \u003d String[] padding\u003e\n  $i1 \u003d lengthof $r0\n  if (i2 \u003e\u003d $i1) goto B9 else B10\n}",
      "B9 {\n  $r3 \u003d String[] padding\u003e\n  $r4 \u003d $r3[i2]\n  return\n}",
      "B10 {\n  r1 \u003d newarray (char)[i2]\n  i3 \u003d 0\n}",
      "B11 {\n  if (i3 \u003e\u003d i2) goto B12 else B13\n}",
      "B12 {\n  r1[i3] \u003d 32\n  i3 \u003d i3 + 1\n  goto B11\n}",
      "B13 {\n  $r2 \u003d String.valueOf(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B11",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.internal.StringUtil",
    "methodName": "isBlank",
    "signature": "boolean isBlank(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (string \u003d\u003d null || string.length() \u003d\u003d 0)\r\n        return true;\r\n    int l \u003d string.length();\r\n    for (int i \u003d 0; i \u003c l; i++) {\r\n        if (!StringUtil.isWhitespace(string.codePointAt(i)))\r\n            return false;\r\n    }\r\n    return true;\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($i0 !\u003d 0) → B2 | else → B3",
      "B4 : If(i3 \u003e\u003d i1) → B5 | else → B8",
      "B5 : If($z0 !\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d r0.length()\n  if ($i0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  i1 \u003d r0.length()\n  i3 \u003d 0\n}",
      "B4 {\n  if (i3 \u003e\u003d i1) goto B5 else B8\n}",
      "B5 {\n  $i2 \u003d r0.codePointAt(i3)\n  $z0 \u003d StringUtil.isWhitespace($i2)\n  if ($z0 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  i3 \u003d i3 + 1\n  goto B4\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B4",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.internal.StringUtil",
    "methodName": "startsWithNewline",
    "signature": "boolean startsWithNewline(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (string \u003d\u003d null || string.length() \u003d\u003d 0)\r\n        return false;\r\n    return string.charAt(0) \u003d\u003d \u0027\\n\u0027;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($i0 !\u003d 0) → B2 | else → B3",
      "B3 : If($i2 !\u003d 10) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d r0.length()\n  if ($i0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $c1 \u003d r0.charAt(0)\n  $i2 \u003d (int) $c1\n  if ($i2 !\u003d 10) goto B4 else B5\n}",
      "B4 {\n  $z0 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z0 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.internal.StringUtil",
    "methodName": "isNumeric",
    "signature": "boolean isNumeric(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (string \u003d\u003d null || string.length() \u003d\u003d 0)\r\n        return false;\r\n    int l \u003d string.length();\r\n    for (int i \u003d 0; i \u003c l; i++) {\r\n        if (!isDigit(string.charAt(i)))\r\n            return false;\r\n    }\r\n    return true;\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($i0 !\u003d 0) → B2 | else → B3",
      "B4 : If(i3 \u003e\u003d i1) → B5 | else → B8",
      "B5 : If($z0 !\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d r0.length()\n  if ($i0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  i1 \u003d r0.length()\n  i3 \u003d 0\n}",
      "B4 {\n  if (i3 \u003e\u003d i1) goto B5 else B8\n}",
      "B5 {\n  $c2 \u003d r0.charAt(i3)\n  $z0 \u003d StringUtil.isDigit($c2)\n  if ($z0 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  i3 \u003d i3 + 1\n  goto B4\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B4",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtil#isDigit(...1)",
        "body": "{\r\n    return c \u003e\u003d \u00270\u0027 \u0026\u0026 c \u003c\u003d \u00279\u0027;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.internal.StringUtil",
    "methodName": "isWhitespace",
    "signature": "boolean isWhitespace(int)",
    "visibility": "public",
    "body": "{\r\n    return c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\t\u0027 || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\r\u0027;\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [
      "B0 : If(i0 \u003d\u003d 32) → B1 | else → B5",
      "B1 : If(i0 \u003d\u003d 9) → B2 | else → B5",
      "B2 : If(i0 \u003d\u003d 10) → B3 | else → B5",
      "B3 : If(i0 \u003d\u003d 12) → B4 | else → B5",
      "B4 : If(i0 !\u003d 13) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  if (i0 \u003d\u003d 32) goto B1 else B5\n}",
      "B1 {\n  if (i0 \u003d\u003d 9) goto B2 else B5\n}",
      "B2 {\n  if (i0 \u003d\u003d 10) goto B3 else B5\n}",
      "B3 {\n  if (i0 \u003d\u003d 12) goto B4 else B5\n}",
      "B4 {\n  if (i0 !\u003d 13) goto B5 else B6\n}",
      "B5 {\n  $z0 \u003d 1\n  goto B7\n}",
      "B6 {\n  $z0 \u003d 0\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.internal.StringUtil",
    "methodName": "isActuallyWhitespace",
    "signature": "boolean isActuallyWhitespace(int)",
    "visibility": "public",
    "body": "{\r\n    return c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\t\u0027 || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d 160;\r\n    // 160 is \u0026nbsp; (non-breaking space). Not in the spec but expected.\r\n}",
    "nodes": 9,
    "edges": 14,
    "cc": 7,
    "flowSummary": [
      "B0 : If(i0 \u003d\u003d 32) → B1 | else → B6",
      "B1 : If(i0 \u003d\u003d 9) → B2 | else → B6",
      "B2 : If(i0 \u003d\u003d 10) → B3 | else → B6",
      "B3 : If(i0 \u003d\u003d 12) → B4 | else → B6",
      "B4 : If(i0 \u003d\u003d 13) → B5 | else → B6",
      "B5 : If(i0 !\u003d 160) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  if (i0 \u003d\u003d 32) goto B1 else B6\n}",
      "B1 {\n  if (i0 \u003d\u003d 9) goto B2 else B6\n}",
      "B2 {\n  if (i0 \u003d\u003d 10) goto B3 else B6\n}",
      "B3 {\n  if (i0 \u003d\u003d 12) goto B4 else B6\n}",
      "B4 {\n  if (i0 \u003d\u003d 13) goto B5 else B6\n}",
      "B5 {\n  if (i0 !\u003d 160) goto B6 else B7\n}",
      "B6 {\n  $z0 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z0 \u003d 0\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.internal.StringUtil",
    "methodName": "isInvisibleChar",
    "signature": "boolean isInvisibleChar(int)",
    "visibility": "public",
    "body": "{\r\n    // zero width sp, soft hyphen\r\n    return c \u003d\u003d 8203 || c \u003d\u003d 173;\r\n    // previously also included zw non join, zw join - but removing those breaks semantic meaning of text\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003d\u003d 8203) → B1 | else → B2",
      "B1 : If(i0 !\u003d 173) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  if (i0 \u003d\u003d 8203) goto B1 else B2\n}",
      "B1 {\n  if (i0 !\u003d 173) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.internal.StringUtil",
    "methodName": "appendNormalisedWhitespace",
    "signature": "void appendNormalisedWhitespace(java.lang.StringBuilder,java.lang.String,boolean)",
    "visibility": "public",
    "body": "{\r\n    boolean lastWasWhite \u003d false;\r\n    boolean reachedNonWhite \u003d false;\r\n    int len \u003d string.length();\r\n    int c;\r\n    for (int i \u003d 0; i \u003c len; i +\u003d Character.charCount(c)) {\r\n        c \u003d string.codePointAt(i);\r\n        if (isActuallyWhitespace(c)) {\r\n            if ((stripLeading \u0026\u0026 !reachedNonWhite) || lastWasWhite)\r\n                continue;\r\n            accum.append(\u0027 \u0027);\r\n            lastWasWhite \u003d true;\r\n        } else if (!isInvisibleChar(c)) {\r\n            accum.appendCodePoint(c);\r\n            lastWasWhite \u003d false;\r\n            reachedNonWhite \u003d true;\r\n        }\r\n    }\r\n}",
    "nodes": 12,
    "edges": 17,
    "cc": 7,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d i0) → B2 | else → B11",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B8",
      "B3 : If(z2 \u003d\u003d false) → B4 | else → B5",
      "B4 : If(z4 \u003d\u003d false) → B5 | else → B10",
      "B5 : If(z3 \u003d\u003d false) → B6 | else → B7",
      "B8 : If($z1 !\u003d 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  StringBuilder\n  String\n  z2 :\u003d @parameter2: boolean\n  z3 \u003d 0\n  z4 \u003d 0\n  i0 \u003d r0.length()\n  i2 \u003d 0\n}",
      "B1 {\n  if (i2 \u003e\u003d i0) goto B2 else B11\n}",
      "B2 {\n  i1 \u003d r0.codePointAt(i2)\n  $z0 \u003d StringUtil.isActuallyWhitespace(i1)\n  if ($z0 \u003d\u003d false) goto B3 else B8\n}",
      "B3 {\n  if (z2 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  if (z4 \u003d\u003d false) goto B5 else B10\n}",
      "B5 {\n  if (z3 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  goto B10\n}",
      "B7 {\n  r1.append(32)\n  z3 \u003d 1\n  goto B10\n}",
      "B8 {\n  $z1 \u003d StringUtil.isInvisibleChar(i1)\n  if ($z1 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  r1.appendCodePoint(i1)\n  z3 \u003d 0\n  z4 \u003d 1\n}",
      "B10 {\n  $i3 \u003d Character.charCount(i1)\n  i2 \u003d i2 + $i3\n  goto B1\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B11",
      "B2 --\u003e B3",
      "B2 --\u003e B8",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B10",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B1",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtil#isInvisibleChar(...1)",
        "body": "{\r\n    // zero width sp, soft hyphen\r\n    return c \u003d\u003d 8203 || c \u003d\u003d 173;\r\n    // previously also included zw non join, zw join - but removing those breaks semantic meaning of text\r\n}"
      },
      {
        "name": "StringUtil#isActuallyWhitespace(...1)",
        "body": "{\r\n    return c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\t\u0027 || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d 160;\r\n    // 160 is \u0026nbsp; (non-breaking space). Not in the spec but expected.\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.internal.StringUtil",
    "methodName": "in",
    "signature": "boolean in(java.lang.String,java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d haystack.length;\r\n    for (int i \u003d 0; i \u003c len; i++) {\r\n        if (haystack[i].equals(needle))\r\n            return true;\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B5",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  String\n  String[]\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d r0[i1]\n  $z0 \u003d $r2.equals(r1)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.internal.StringUtil",
    "methodName": "inSorted",
    "signature": "boolean inSorted(java.lang.String,java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    return Arrays.binarySearch(haystack, needle) \u003e\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  String[]\n  $i0 \u003d Arrays.binarySearch(r0, r1)\n  if ($i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.internal.StringUtil",
    "methodName": "isAscii",
    "signature": "boolean isAscii(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    Validate.notNull(string);\r\n    for (int i \u003d 0; i \u003c string.length(); i++) {\r\n        int c \u003d string.charAt(i);\r\n        if (c \u003e 127) {\r\n            // ascii range\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d $i0) → B2 | else → B5",
      "B2 : If($i3 \u003c\u003d 127) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  String\n  Validate.notNull(r0)\n  i2 \u003d 0\n}",
      "B1 {\n  $i0 \u003d r0.length()\n  if (i2 \u003e\u003d $i0) goto B2 else B5\n}",
      "B2 {\n  c1 \u003d r0.charAt(i2)\n  $i3 \u003d (int) c1\n  if ($i3 \u003c\u003d 127) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i2 \u003d i2 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.internal.StringUtil",
    "methodName": "resolve",
    "signature": "java.net.URL resolve(java.net.URL,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    relUrl \u003d stripControlChars(relUrl);\r\n    // workaround: java resolves \u0027//path/file + ?foo\u0027 to \u0027//path/?foo\u0027, not \u0027//path/file?foo\u0027 as desired\r\n    if (relUrl.startsWith(\"?\"))\r\n        relUrl \u003d base.getPath() + relUrl;\r\n    // workaround: //example.com + ./foo \u003d //example.com/./foo, not //example.com/foo\r\n    URL url \u003d new URL(base, relUrl);\r\n    String fixedFile \u003d extraDotSegmentsPattern.matcher(url.getFile()).replaceFirst(\"/\");\r\n    if (url.getRef() !\u003d null) {\r\n        fixedFile \u003d fixedFile + \"#\" + url.getRef();\r\n    }\r\n    return new URL(url.getProtocol(), url.getHost(), url.getPort(), fixedFile);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($r5 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  URL\n  String\n  r13 \u003d StringUtil.stripControlChars(r12)\n  $z0 \u003d r13.startsWith(\"?\")\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d r1.getPath()\n  r13 \u003d dynInvoke makeConcatWithConstants($r10, r13)\n}",
      "B2 {\n  $r0 \u003d URL\n  new URL(r1, r13)\n  $r2 \u003d Pattern extraDotSegmentsPattern\u003e\n  $r3 \u003d $r0.getFile()\n  $r4 \u003d $r2.matcher($r3)\n  $r11 \u003d $r4.replaceFirst(\"/\")\n  r14 \u003d $r11\n  $r5 \u003d $r0.getRef()\n  if ($r5 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r9 \u003d $r0.getRef()\n  r14 \u003d dynInvoke makeConcatWithConstants($r11, $r9)\n}",
      "B4 {\n  $r6 \u003d URL\n  $r8 \u003d $r0.getProtocol()\n  $r7 \u003d $r0.getHost()\n  $i0 \u003d $r0.getPort()\n  new URL($r8, $r7, $i0, r14)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtil#stripControlChars(...1)",
        "body": "{\r\n    return controlChars.matcher(input).replaceAll(\"\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.internal.StringUtil",
    "methodName": "releaseBuilderVoid",
    "signature": "void releaseBuilderVoid(java.lang.StringBuilder)",
    "visibility": "public",
    "body": "{\r\n    // if it hasn\u0027t grown too big, reset it and return it to the pool:\r\n    if (sb.length() \u003c\u003d MaxBuilderSize) {\r\n        // make sure it\u0027s emptied on release\r\n        sb.delete(0, sb.length());\r\n        BuilderPool.release(sb);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003e 8192) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StringBuilder\n  $i0 \u003d r0.length()\n  if ($i0 \u003e 8192) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d r0.length()\n  r0.delete(0, $i1)\n  $r1 \u003d SoftPool BuilderPool\u003e\n  $r1.release(r0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.internal.StringUtil",
    "methodName": "isAsciiLetter",
    "signature": "boolean isAsciiLetter(char)",
    "visibility": "public",
    "body": "{\r\n    return c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027z\u0027 || c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027;\r\n}",
    "nodes": 7,
    "edges": 10,
    "cc": 5,
    "flowSummary": [
      "B0 : If($i1 \u003c 97) → B1 | else → B2",
      "B1 : If($i2 \u003c\u003d 122) → B2 | else → B4",
      "B2 : If($i3 \u003c 65) → B3 | else → B5",
      "B3 : If($i4 \u003e 90) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  c0 :\u003d @parameter0: char\n  $i1 \u003d (int) c0\n  if ($i1 \u003c 97) goto B1 else B2\n}",
      "B1 {\n  $i2 \u003d (int) c0\n  if ($i2 \u003c\u003d 122) goto B2 else B4\n}",
      "B2 {\n  $i3 \u003d (int) c0\n  if ($i3 \u003c 65) goto B3 else B5\n}",
      "B3 {\n  $i4 \u003d (int) c0\n  if ($i4 \u003e 90) goto B4 else B5\n}",
      "B4 {\n  $z0 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z0 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.internal.StringUtil",
    "methodName": "isDigit",
    "signature": "boolean isDigit(char)",
    "visibility": "public",
    "body": "{\r\n    return c \u003e\u003d \u00270\u0027 \u0026\u0026 c \u003c\u003d \u00279\u0027;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i1 \u003c 48) → B1 | else → B3",
      "B1 : If($i2 \u003e 57) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  c0 :\u003d @parameter0: char\n  $i1 \u003d (int) c0\n  if ($i1 \u003c 48) goto B1 else B3\n}",
      "B1 {\n  $i2 \u003d (int) c0\n  if ($i2 \u003e 57) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.internal.StringUtil",
    "methodName": "isHexDigit",
    "signature": "boolean isHexDigit(char)",
    "visibility": "public",
    "body": "{\r\n    return isDigit(c) || c \u003e\u003d \u0027a\u0027 \u0026\u0026 c \u003c\u003d \u0027f\u0027 || c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027F\u0027;\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B5",
      "B1 : If($i1 \u003c 97) → B2 | else → B3",
      "B2 : If($i2 \u003c\u003d 102) → B3 | else → B5",
      "B3 : If($i3 \u003c 65) → B4 | else → B6",
      "B4 : If($i4 \u003e 70) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  c0 :\u003d @parameter0: char\n  $z0 \u003d StringUtil.isDigit(c0)\n  if ($z0 !\u003d 0) goto B1 else B5\n}",
      "B1 {\n  $i1 \u003d (int) c0\n  if ($i1 \u003c 97) goto B2 else B3\n}",
      "B2 {\n  $i2 \u003d (int) c0\n  if ($i2 \u003c\u003d 102) goto B3 else B5\n}",
      "B3 {\n  $i3 \u003d (int) c0\n  if ($i3 \u003c 65) goto B4 else B6\n}",
      "B4 {\n  $i4 \u003d (int) c0\n  if ($i4 \u003e 70) goto B5 else B6\n}",
      "B5 {\n  $z1 \u003d 1\n  goto B7\n}",
      "B6 {\n  $z1 \u003d 0\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtil#isDigit(...1)",
        "body": "{\r\n    return c \u003e\u003d \u00270\u0027 \u0026\u0026 c \u003c\u003d \u00279\u0027;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.Jsoup",
    "methodName": "clean",
    "signature": "java.lang.String clean(java.lang.String,java.lang.String,org.jsoup.safety.Safelist)",
    "visibility": "public",
    "body": "{\r\n    if (baseUri.isEmpty() \u0026\u0026 safelist.preserveRelativeLinks()) {\r\n        // set a placeholder URI to allow relative links to pass abs resolution for protocol tests; won\u0027t leak to output\r\n        baseUri \u003d DummyUri;\r\n    }\r\n    Document dirty \u003d parseBodyFragment(bodyHtml, baseUri);\r\n    Cleaner cleaner \u003d new Cleaner(safelist);\r\n    Document clean \u003d cleaner.clean(dirty);\r\n    return clean.body().html();\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  Safelist\n  $z0 \u003d r2.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $z1 \u003d r1.preserveRelativeLinks()\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d example/\"\n}",
      "B3 {\n  $r3 \u003d Jsoup.parseBodyFragment(r0, r2)\n  $r4 \u003d Cleaner\n  new Cleaner(r1)\n  $r5 \u003d $r4.clean($r3)\n  $r6 \u003d $r5.body()\n  $r7 \u003d $r6.html()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Jsoup#parseBodyFragment(...2)",
        "body": "{\r\n    return Parser.parseBodyFragment(bodyHtml, baseUri);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Attribute",
    "methodName": "setKey",
    "signature": "void setKey(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    Validate.notNull(key);\r\n    key \u003d key.trim();\r\n    // trimming could potentially make empty, so validate here\r\n    Validate.notEmpty(key);\r\n    if (parent !\u003d null) {\r\n        int i \u003d parent.indexOfKey(this.key);\r\n        if (i !\u003d Attributes.NotFound) {\r\n            String oldKey \u003d parent.keys[i];\r\n            parent.keys[i] \u003d key;\r\n            // if tracking source positions, update the key in the range map\r\n            Map\u003cString, Range.AttributeRange\u003e ranges \u003d parent.getRanges();\r\n            if (ranges !\u003d null) {\r\n                Range.AttributeRange range \u003d ranges.remove(oldKey);\r\n                ranges.put(key, range);\r\n            }\r\n        }\r\n    }\r\n    this.key \u003d key;\r\n}",
    "nodes": 5,
    "edges": 7,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B4",
      "B1 : If(i0 \u003d\u003d $i2) → B2 | else → B4",
      "B2 : If(r10 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Attribute\n  String\n  Validate.notNull(r13)\n  r14 \u003d r13.trim()\n  Validate.notEmpty(r14)\n  $r1 \u003d Attributes parent\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r3 \u003d Attributes parent\u003e\n  $r2 \u003d String key\u003e\n  i0 \u003d $r3.indexOfKey($r2)\n  $i2 \u003d (int) -1\n  if (i0 \u003d\u003d $i2) goto B2 else B4\n}",
      "B2 {\n  $r4 \u003d Attributes parent\u003e\n  $r5 \u003d String[] keys\u003e\n  r6 \u003d $r5[i0]\n  $r7 \u003d Attributes parent\u003e\n  $r8 \u003d String[] keys\u003e\n  $r8[i0] \u003d r14\n  $r9 \u003d Attributes parent\u003e\n  r10 \u003d $r9.getRanges()\n  if (r10 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r11 \u003d r10.remove(r6)\n  r12 \u003d Range$AttributeRange) $r11\n  r10.put(r14, r12)\n}",
      "B4 {\n  String key\u003e \u003d r14\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Attribute",
    "methodName": "hasDeclaredValue",
    "signature": "boolean hasDeclaredValue()",
    "visibility": "public",
    "body": "{\r\n    return val !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Attribute\n  $r1 \u003d String val\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Attribute",
    "methodName": "setValue",
    "signature": "java.lang.String setValue(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    String oldVal \u003d this.val;\r\n    if (parent !\u003d null) {\r\n        int i \u003d parent.indexOfKey(this.key);\r\n        if (i !\u003d Attributes.NotFound) {\r\n            // trust the container more\r\n            oldVal \u003d parent.get(this.key);\r\n            parent.vals[i] \u003d val;\r\n        }\r\n    }\r\n    this.val \u003d val;\r\n    return Attributes.checkNotNull(oldVal);\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(i0 \u003d\u003d $i2) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Attribute\n  String\n  r9 \u003d String val\u003e\n  $r1 \u003d Attributes parent\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r4 \u003d Attributes parent\u003e\n  $r3 \u003d String key\u003e\n  i0 \u003d $r4.indexOfKey($r3)\n  $i2 \u003d (int) -1\n  if (i0 \u003d\u003d $i2) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d Attributes parent\u003e\n  $r5 \u003d String key\u003e\n  r9 \u003d $r6.get($r5)\n  $r7 \u003d Attributes parent\u003e\n  $r8 \u003d Object[] vals\u003e\n  $r8[i0] \u003d r2\n}",
      "B3 {\n  String val\u003e \u003d r2\n  $r10 \u003d Attributes.checkNotNull(r9)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Attribute",
    "methodName": "prefix",
    "signature": "java.lang.String prefix()",
    "visibility": "public",
    "body": "{\r\n    int pos \u003d key.indexOf(\u0027:\u0027);\r\n    if (pos \u003d\u003d -1)\r\n        return \"\";\r\n    else\r\n        return key.substring(0, pos);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 !\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Attribute\n  $r1 \u003d String key\u003e\n  i0 \u003d $r1.indexOf(58)\n  $i2 \u003d (int) -1\n  if (i0 !\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d String key\u003e\n  $r3 \u003d $r2.substring(0, i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Attribute",
    "methodName": "localName",
    "signature": "java.lang.String localName()",
    "visibility": "public",
    "body": "{\r\n    int pos \u003d key.indexOf(\u0027:\u0027);\r\n    if (pos \u003d\u003d -1)\r\n        return key;\r\n    else\r\n        return key.substring(pos + 1);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 !\u003d $i3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Attribute\n  $r1 \u003d String key\u003e\n  i0 \u003d $r1.indexOf(58)\n  $i3 \u003d (int) -1\n  if (i0 !\u003d $i3) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d String key\u003e\n  return\n}",
      "B2 {\n  $r2 \u003d String key\u003e\n  $i1 \u003d i0 + 1\n  $r3 \u003d $r2.substring($i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Attribute",
    "methodName": "namespace",
    "signature": "java.lang.String namespace()",
    "visibility": "public",
    "body": "{\r\n    // set as el.attributes.userData(SharedConstants.XmlnsAttr + prefix, ns)\r\n    if (parent !\u003d null) {\r\n        String ns \u003d (String) parent.userData(SharedConstants.XmlnsAttr + prefix());\r\n        if (ns !\u003d null)\r\n            return ns;\r\n    }\r\n    return \"\";\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r6 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Attribute\n  $r1 \u003d Attributes parent\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d Attributes parent\u003e\n  $r3 \u003d r0.prefix()\n  $r4 \u003d dynInvoke makeConcatWithConstants($r3)\n  $r5 \u003d $r2.userData($r4)\n  r6 \u003d String) $r5\n  if (r6 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Attribute#prefix(...0)",
        "body": "{\r\n    int pos \u003d key.indexOf(\u0027:\u0027);\r\n    if (pos \u003d\u003d -1)\r\n        return \"\";\r\n    else\r\n        return key.substring(0, pos);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Attribute",
    "methodName": "sourceRange",
    "signature": "org.jsoup.nodes.Range$AttributeRange sourceRange()",
    "visibility": "public",
    "body": "{\r\n    if (parent \u003d\u003d null)\r\n        return Range.AttributeRange.UntrackedAttr;\r\n    return parent.sourceRange(key);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Attribute\n  $r1 \u003d Attributes parent\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d Range$AttributeRange UntrackedAttr\u003e\n  return\n}",
      "B2 {\n  $r3 \u003d Attributes parent\u003e\n  $r2 \u003d String key\u003e\n  $r4 \u003d $r3.sourceRange($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Attribute",
    "methodName": "getValidKey",
    "signature": "java.lang.String getValidKey(java.lang.String,org.jsoup.nodes.Document$OutputSettings$Syntax)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 13,
    "edges": 16,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r0 !\u003d $r1) → B1 | else → B6",
      "B1 : If($z2 !\u003d 0) → B2 | else → B6",
      "B2 : If($z3 \u003d\u003d false) → B3 | else → B4",
      "B6 : If(r0 !\u003d $r2) → B7 | else → B12",
      "B7 : If($z0 !\u003d 0) → B8 | else → B12",
      "B8 : If($z1 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  String\n  Document$OutputSettings$Syntax\n  $r1 \u003d Document$OutputSettings$Syntax xml\u003e\n  if (r0 !\u003d $r1) goto B1 else B6\n}",
      "B1 {\n  $z2 \u003d Attribute.isValidXmlKey(r7)\n  if ($z2 !\u003d 0) goto B2 else B6\n}",
      "B2 {\n  $r5 \u003d Pattern xmlKeyReplace\u003e\n  $r6 \u003d $r5.matcher(r7)\n  r8 \u003d $r6.replaceAll(\"_\")\n  $z3 \u003d Attribute.isValidXmlKey(r8)\n  if ($z3 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r9 \u003d r8\n  goto B5\n}",
      "B4 {\n  $r9 \u003d null\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r2 \u003d Document$OutputSettings$Syntax html\u003e\n  if (r0 !\u003d $r2) goto B7 else B12\n}",
      "B7 {\n  $z0 \u003d Attribute.isValidHtmlKey(r7)\n  if ($z0 !\u003d 0) goto B8 else B12\n}",
      "B8 {\n  $r3 \u003d Pattern htmlKeyReplace\u003e\n  $r4 \u003d $r3.matcher(r7)\n  r10 \u003d $r4.replaceAll(\"_\")\n  $z1 \u003d Attribute.isValidHtmlKey(r10)\n  if ($z1 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r11 \u003d r10\n  goto B11\n}",
      "B10 {\n  $r11 \u003d null\n}",
      "B11 {\n  return\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B12",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Attribute",
    "methodName": "isBooleanAttribute",
    "signature": "boolean isBooleanAttribute(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return Arrays.binarySearch(booleanAttributes, Normalizer.lowerCase(key)) \u003e\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  $r1 \u003d String[] booleanAttributes\u003e\n  $r2 \u003d Normalizer.lowerCase(r0)\n  $i0 \u003d Arrays.binarySearch($r1, $r2)\n  if ($i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Attribute",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    // note parent not considered\r\n    if (this \u003d\u003d o)\r\n        return true;\r\n    if (o \u003d\u003d null || getClass() !\u003d o.getClass())\r\n        return false;\r\n    Attribute attribute \u003d (Attribute) o;\r\n    return Objects.equals(key, attribute.key) \u0026\u0026 Objects.equals(val, attribute.val);\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r1 \u003d\u003d null) → B3 | else → B4",
      "B3 : If($r3 \u003d\u003d $r2) → B4 | else → B5",
      "B5 : If($z0 \u003d\u003d false) → B6 | else → B8",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  Attribute\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d r0.getClass()\n  $r2 \u003d r1.getClass()\n  if ($r3 \u003d\u003d $r2) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  r4 \u003d Attribute) r1\n  $r6 \u003d String key\u003e\n  $r5 \u003d String key\u003e\n  $z0 \u003d Objects.equals($r6, $r5)\n  if ($z0 \u003d\u003d false) goto B6 else B8\n}",
      "B6 {\n  $r8 \u003d String val\u003e\n  $r7 \u003d String val\u003e\n  $z1 \u003d Objects.equals($r8, $r7)\n  if ($z1 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $z2 \u003d 1\n  goto B9\n}",
      "B8 {\n  $z2 \u003d 0\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Attribute#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Attributes",
    "methodName": "get",
    "signature": "java.lang.String get(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    int i \u003d indexOfKey(key);\r\n    return i \u003d\u003d NotFound ? EmptyString : checkNotNull(vals[i]);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 !\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Attributes\n  String\n  i0 \u003d r0.indexOfKey(r1)\n  $i2 \u003d (int) -1\n  if (i0 !\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d \"\"\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Object[] vals\u003e\n  $r3 \u003d $r2[i0]\n  $r4 \u003d Attributes.checkNotNull($r3)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Attributes#indexOfKey(...1)",
        "body": "{\r\n    Validate.notNull(key);\r\n    for (int i \u003d 0; i \u003c size; i++) {\r\n        if (key.equals(keys[i]))\r\n            return i;\r\n    }\r\n    return NotFound;\r\n}"
      },
      {
        "name": "Attributes#checkNotNull(...1)",
        "body": "{\r\n    return val \u003d\u003d null ? EmptyString : (String) val;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Attributes",
    "methodName": "attribute",
    "signature": "org.jsoup.nodes.Attribute attribute(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    int i \u003d indexOfKey(key);\r\n    return i \u003d\u003d NotFound ? null : new Attribute(key, checkNotNull(vals[i]), this);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 !\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Attributes\n  String\n  i0 \u003d r0.indexOfKey(r1)\n  $i2 \u003d (int) -1\n  if (i0 !\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d null\n  goto B3\n}",
      "B2 {\n  $r6 \u003d Attribute\n  $r5 \u003d $r6\n  $r2 \u003d Object[] vals\u003e\n  $r3 \u003d $r2[i0]\n  $r4 \u003d Attributes.checkNotNull($r3)\n  new Attribute(r1, $r4, r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Attributes#indexOfKey(...1)",
        "body": "{\r\n    Validate.notNull(key);\r\n    for (int i \u003d 0; i \u003c size; i++) {\r\n        if (key.equals(keys[i]))\r\n            return i;\r\n    }\r\n    return NotFound;\r\n}"
      },
      {
        "name": "Attributes#checkNotNull(...1)",
        "body": "{\r\n    return val \u003d\u003d null ? EmptyString : (String) val;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Attributes",
    "methodName": "getIgnoreCase",
    "signature": "java.lang.String getIgnoreCase(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    int i \u003d indexOfKeyIgnoreCase(key);\r\n    return i \u003d\u003d NotFound ? EmptyString : checkNotNull(vals[i]);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 !\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Attributes\n  String\n  i0 \u003d r0.indexOfKeyIgnoreCase(r1)\n  $i2 \u003d (int) -1\n  if (i0 !\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d \"\"\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Object[] vals\u003e\n  $r3 \u003d $r2[i0]\n  $r4 \u003d Attributes.checkNotNull($r3)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Attributes#checkNotNull(...1)",
        "body": "{\r\n    return val \u003d\u003d null ? EmptyString : (String) val;\r\n}"
      },
      {
        "name": "Attributes#indexOfKeyIgnoreCase(...1)",
        "body": "{\r\n    Validate.notNull(key);\r\n    for (int i \u003d 0; i \u003c size; i++) {\r\n        if (key.equalsIgnoreCase(keys[i]))\r\n            return i;\r\n    }\r\n    return NotFound;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Attributes",
    "methodName": "put",
    "signature": "org.jsoup.nodes.Attributes put(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    Validate.notNull(key);\r\n    int i \u003d indexOfKey(key);\r\n    if (i !\u003d NotFound)\r\n        vals[i] \u003d value;\r\n    else\r\n        add(key, value);\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003d\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Attributes\n  String\n  String\n  Validate.notNull(r0)\n  i0 \u003d r1.indexOfKey(r0)\n  $i2 \u003d (int) -1\n  if (i0 \u003d\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Object[] vals\u003e\n  $r3[i0] \u003d r2\n  goto B3\n}",
      "B2 {\n  r1.add(r0, r2)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Attributes#indexOfKey(...1)",
        "body": "{\r\n    Validate.notNull(key);\r\n    for (int i \u003d 0; i \u003c size; i++) {\r\n        if (key.equals(keys[i]))\r\n            return i;\r\n    }\r\n    return NotFound;\r\n}"
      },
      {
        "name": "Attributes#add(...2)",
        "body": "{\r\n    addObject(key, value);\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Attributes",
    "methodName": "userData",
    "signature": "java.lang.Object userData(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    Validate.notNull(key);\r\n    // no user data exists\r\n    if (!hasKey(SharedConstants.UserDataKey))\r\n        return null;\r\n    Map\u003cString, Object\u003e userData \u003d userData();\r\n    return userData.get(key);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Attributes\n  String\n  Validate.notNull(r0)\n  $z0 \u003d r1.hasKey(\"/jsoup.userdata\")\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r2 \u003d r1.userData()\n  $r3 \u003d r2.get(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Attributes#hasKey(...1)",
        "body": "{\r\n    return indexOfKey(key) !\u003d NotFound;\r\n}"
      },
      {
        "name": "Attributes#userData(...0)",
        "body": "{\r\n    final Map\u003cString, Object\u003e userData;\r\n    int i \u003d indexOfKey(SharedConstants.UserDataKey);\r\n    if (i \u003d\u003d NotFound) {\r\n        userData \u003d new HashMap\u003c\u003e();\r\n        addObject(SharedConstants.UserDataKey, userData);\r\n    } else {\r\n        //noinspection unchecked\r\n        userData \u003d (Map\u003cString, Object\u003e) vals[i];\r\n    }\r\n    assert userData !\u003d null;\r\n    return userData;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Attributes",
    "methodName": "put",
    "signature": "org.jsoup.nodes.Attributes put(java.lang.String,boolean)",
    "visibility": "public",
    "body": "{\r\n    if (value)\r\n        putIgnoreCase(key, null);\r\n    else\r\n        remove(key);\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Attributes\n  String\n  z0 :\u003d @parameter1: boolean\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r0.putIgnoreCase(r1, null)\n  goto B3\n}",
      "B2 {\n  r0.remove(r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Attributes#putIgnoreCase(...2)",
        "body": "{\r\n    int i \u003d indexOfKeyIgnoreCase(key);\r\n    if (i !\u003d NotFound) {\r\n        vals[i] \u003d value;\r\n        String old \u003d keys[i];\r\n        assert old !\u003d null;\r\n        if (// case changed, update\r\n        !old.equals(key))\r\n            keys[i] \u003d key;\r\n    } else\r\n        add(key, value);\r\n}"
      },
      {
        "name": "Attributes#remove(...1)",
        "body": "{\r\n    Validate.isFalse(index \u003e\u003d size);\r\n    int shifted \u003d size - index - 1;\r\n    if (shifted \u003e 0) {\r\n        System.arraycopy(keys, index + 1, keys, index, shifted);\r\n        System.arraycopy(vals, index + 1, vals, index, shifted);\r\n    }\r\n    size--;\r\n    // release hold\r\n    keys[size] \u003d null;\r\n    vals[size] \u003d null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Attributes",
    "methodName": "remove",
    "signature": "void remove(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    int i \u003d indexOfKey(key);\r\n    if (i !\u003d NotFound)\r\n        remove(i);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003d\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Attributes\n  String\n  i0 \u003d r0.indexOfKey(r1)\n  $i2 \u003d (int) -1\n  if (i0 \u003d\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  r0.remove(i0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Attributes#indexOfKey(...1)",
        "body": "{\r\n    Validate.notNull(key);\r\n    for (int i \u003d 0; i \u003c size; i++) {\r\n        if (key.equals(keys[i]))\r\n            return i;\r\n    }\r\n    return NotFound;\r\n}"
      },
      {
        "name": "Attributes#remove(...1)",
        "body": "{\r\n    Validate.isFalse(index \u003e\u003d size);\r\n    int shifted \u003d size - index - 1;\r\n    if (shifted \u003e 0) {\r\n        System.arraycopy(keys, index + 1, keys, index, shifted);\r\n        System.arraycopy(vals, index + 1, vals, index, shifted);\r\n    }\r\n    size--;\r\n    // release hold\r\n    keys[size] \u003d null;\r\n    vals[size] \u003d null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Attributes",
    "methodName": "removeIgnoreCase",
    "signature": "void removeIgnoreCase(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    int i \u003d indexOfKeyIgnoreCase(key);\r\n    if (i !\u003d NotFound)\r\n        remove(i);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003d\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Attributes\n  String\n  i0 \u003d r0.indexOfKeyIgnoreCase(r1)\n  $i2 \u003d (int) -1\n  if (i0 \u003d\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  r0.remove(i0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Attributes#remove(...1)",
        "body": "{\r\n    Validate.isFalse(index \u003e\u003d size);\r\n    int shifted \u003d size - index - 1;\r\n    if (shifted \u003e 0) {\r\n        System.arraycopy(keys, index + 1, keys, index, shifted);\r\n        System.arraycopy(vals, index + 1, vals, index, shifted);\r\n    }\r\n    size--;\r\n    // release hold\r\n    keys[size] \u003d null;\r\n    vals[size] \u003d null;\r\n}"
      },
      {
        "name": "Attributes#indexOfKeyIgnoreCase(...1)",
        "body": "{\r\n    Validate.notNull(key);\r\n    for (int i \u003d 0; i \u003c size; i++) {\r\n        if (key.equalsIgnoreCase(keys[i]))\r\n            return i;\r\n    }\r\n    return NotFound;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Attributes",
    "methodName": "hasKey",
    "signature": "boolean hasKey(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return indexOfKey(key) !\u003d NotFound;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Attributes\n  String\n  $i0 \u003d r0.indexOfKey(r1)\n  $i2 \u003d (int) -1\n  if ($i0 \u003d\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Attributes#indexOfKey(...1)",
        "body": "{\r\n    Validate.notNull(key);\r\n    for (int i \u003d 0; i \u003c size; i++) {\r\n        if (key.equals(keys[i]))\r\n            return i;\r\n    }\r\n    return NotFound;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Attributes",
    "methodName": "hasKeyIgnoreCase",
    "signature": "boolean hasKeyIgnoreCase(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return indexOfKeyIgnoreCase(key) !\u003d NotFound;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Attributes\n  String\n  $i0 \u003d r0.indexOfKeyIgnoreCase(r1)\n  $i2 \u003d (int) -1\n  if ($i0 \u003d\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Attributes#indexOfKeyIgnoreCase(...1)",
        "body": "{\r\n    Validate.notNull(key);\r\n    for (int i \u003d 0; i \u003c size; i++) {\r\n        if (key.equalsIgnoreCase(keys[i]))\r\n            return i;\r\n    }\r\n    return NotFound;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Attributes",
    "methodName": "hasDeclaredValueForKey",
    "signature": "boolean hasDeclaredValueForKey(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    int i \u003d indexOfKey(key);\r\n    return i !\u003d NotFound \u0026\u0026 vals[i] !\u003d null;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003d\u003d $i2) → B1 | else → B3",
      "B1 : If($r3 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Attributes\n  String\n  i0 \u003d r0.indexOfKey(r1)\n  $i2 \u003d (int) -1\n  if (i0 \u003d\u003d $i2) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d Object[] vals\u003e\n  $r3 \u003d $r2[i0]\n  if ($r3 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Attributes#indexOfKey(...1)",
        "body": "{\r\n    Validate.notNull(key);\r\n    for (int i \u003d 0; i \u003c size; i++) {\r\n        if (key.equals(keys[i]))\r\n            return i;\r\n    }\r\n    return NotFound;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Attributes",
    "methodName": "hasDeclaredValueForKeyIgnoreCase",
    "signature": "boolean hasDeclaredValueForKeyIgnoreCase(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    int i \u003d indexOfKeyIgnoreCase(key);\r\n    return i !\u003d NotFound \u0026\u0026 vals[i] !\u003d null;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003d\u003d $i2) → B1 | else → B3",
      "B1 : If($r3 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Attributes\n  String\n  i0 \u003d r0.indexOfKeyIgnoreCase(r1)\n  $i2 \u003d (int) -1\n  if (i0 \u003d\u003d $i2) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d Object[] vals\u003e\n  $r3 \u003d $r2[i0]\n  if ($r3 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Attributes#indexOfKeyIgnoreCase(...1)",
        "body": "{\r\n    Validate.notNull(key);\r\n    for (int i \u003d 0; i \u003c size; i++) {\r\n        if (key.equalsIgnoreCase(keys[i]))\r\n            return i;\r\n    }\r\n    return NotFound;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Attributes",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty()",
    "visibility": "public",
    "body": "{\r\n    return size \u003d\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Attributes\n  $i0 \u003d Attributes: int size\u003e\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Attributes",
    "methodName": "addAll",
    "signature": "void addAll(org.jsoup.nodes.Attributes)",
    "visibility": "public",
    "body": "{\r\n    if (incoming.size() \u003d\u003d 0)\r\n        return;\r\n    checkCapacity(size + incoming.size);\r\n    // if this set is empty, no need to check existing set, so can add() vs put()\r\n    boolean needsPut \u003d size !\u003d 0;\r\n    // (and save bashing on the indexOfKey()\r\n    for (Attribute attr : incoming) {\r\n        if (needsPut)\r\n            put(attr);\r\n        else\r\n            add(attr.getKey(), attr.getValue());\r\n    }\r\n}",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B2 : If($i4 \u003d\u003d false) → B3 | else → B4",
      "B6 : If($z2 \u003d\u003d false) → B7 | else → B11",
      "B7 : If(z0 \u003d\u003d false) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  Attributes\n  Attributes\n  $i0 \u003d r0.size()\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i2 \u003d Attributes: int size\u003e\n  $i1 \u003d Attributes: int size\u003e\n  $i3 \u003d $i2 + $i1\n  r1.checkCapacity($i3)\n  $i4 \u003d Attributes: int size\u003e\n  if ($i4 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $z1 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z1 \u003d 0\n}",
      "B5 {\n  z0 \u003d $z1\n  $r6 \u003d r0.iterator()\n}",
      "B6 {\n  $z2 \u003d $r6.hasNext()\n  if ($z2 \u003d\u003d false) goto B7 else B11\n}",
      "B7 {\n  $r2 \u003d $r6.next()\n  r3 \u003d Attribute) $r2\n  if (z0 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  r1.put(r3)\n  goto B10\n}",
      "B9 {\n  $r5 \u003d r3.getKey()\n  $r4 \u003d r3.getValue()\n  r1.add($r5, $r4)\n}",
      "B10 {\n  goto B6\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B6",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Attributes#put(...1)",
        "body": "{\r\n    Validate.notNull(attribute);\r\n    put(attribute.getKey(), attribute.getValue());\r\n    attribute.parent \u003d this;\r\n    return this;\r\n}"
      },
      {
        "name": "Attributes#checkCapacity(...1)",
        "body": "{\r\n    Validate.isTrue(minNewSize \u003e\u003d size);\r\n    int curCap \u003d keys.length;\r\n    if (curCap \u003e\u003d minNewSize)\r\n        return;\r\n    int newCap \u003d curCap \u003e\u003d InitialCapacity ? size * GrowthFactor : InitialCapacity;\r\n    if (minNewSize \u003e newCap)\r\n        newCap \u003d minNewSize;\r\n    keys \u003d Arrays.copyOf(keys, newCap);\r\n    vals \u003d Arrays.copyOf(vals, newCap);\r\n}"
      },
      {
        "name": "Attributes#add(...2)",
        "body": "{\r\n    addObject(key, value);\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Attributes",
    "methodName": "sourceRange",
    "signature": "org.jsoup.nodes.Range$AttributeRange sourceRange(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (!hasKey(key))\r\n        return UntrackedAttr;\r\n    Map\u003cString, Range.AttributeRange\u003e ranges \u003d getRanges();\r\n    if (ranges \u003d\u003d null)\r\n        return Range.AttributeRange.UntrackedAttr;\r\n    Range.AttributeRange range \u003d ranges.get(key);\r\n    return range !\u003d null ? range : Range.AttributeRange.UntrackedAttr;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If(r2 !\u003d null) → B3 | else → B4",
      "B4 : If(r4 \u003d\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Attributes\n  String\n  $z0 \u003d r0.hasKey(r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d Range$AttributeRange UntrackedAttr\u003e\n  return\n}",
      "B2 {\n  r2 \u003d r0.getRanges()\n  if (r2 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d Range$AttributeRange UntrackedAttr\u003e\n  return\n}",
      "B4 {\n  $r3 \u003d r2.get(r1)\n  r4 \u003d Range$AttributeRange) $r3\n  if (r4 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r7 \u003d r4\n  goto B7\n}",
      "B6 {\n  $r7 \u003d Range$AttributeRange UntrackedAttr\u003e\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Attributes#hasKey(...1)",
        "body": "{\r\n    return indexOfKey(key) !\u003d NotFound;\r\n}"
      },
      {
        "name": "Attributes#getRanges(...0)",
        "body": "{\r\n    //noinspection unchecked\r\n    return (Map\u003cString, Range.AttributeRange\u003e) userData(AttrRangeKey);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Attributes",
    "methodName": "sourceRange",
    "signature": "org.jsoup.nodes.Attributes sourceRange(java.lang.String,org.jsoup.nodes.Range$AttributeRange)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Attributes\n  String\n  Range$AttributeRange\n  Validate.notNull(r0)\n  Validate.notNull(r1)\n  r4 \u003d r2.getRanges()\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d HashMap\n  new HashMap()\n  r4 \u003d $r3\n  r2.userData(\"jsoup.attrs\", $r3)\n}",
      "B2 {\n  r4.put(r0, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Attributes",
    "methodName": "asList",
    "signature": "java.util.List asList()",
    "visibility": "public",
    "body": "{\r\n    ArrayList\u003cAttribute\u003e list \u003d new ArrayList\u003c\u003e(size);\r\n    for (int i \u003d 0; i \u003c size; i++) {\r\n        String key \u003d keys[i];\r\n        assert key !\u003d null;\r\n        if (isInternalKey(key))\r\n            // skip internal keys\r\n            continue;\r\n        Attribute attr \u003d new Attribute(key, (String) vals[i], Attributes.this);\r\n        list.add(attr);\r\n    }\r\n    return Collections.unmodifiableList(list);\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d $i1) → B2 | else → B9",
      "B2 : If($z0 !\u003d 0) → B3 | else → B5",
      "B3 : If(r4 !\u003d null) → B4 | else → B5",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Attributes\n  $r0 \u003d ArrayList\n  $i0 \u003d Attributes: int size\u003e\n  new ArrayList($i0)\n  i2 \u003d 0\n}",
      "B1 {\n  $i1 \u003d Attributes: int size\u003e\n  if (i2 \u003e\u003d $i1) goto B2 else B9\n}",
      "B2 {\n  $r3 \u003d String[] keys\u003e\n  r4 \u003d $r3[i2]\n  $z0 \u003d Attributes: boolean $assertionsDisabled\u003e\n  if ($z0 !\u003d 0) goto B3 else B5\n}",
      "B3 {\n  if (r4 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r9 \u003d AssertionError\n  new AssertionError()\n  throw $r9\n}",
      "B5 {\n  $z1 \u003d Attributes.isInternalKey(r4)\n  if ($z1 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  goto B8\n}",
      "B7 {\n  $r5 \u003d Attribute\n  $r6 \u003d Object[] vals\u003e\n  $r7 \u003d $r6[i2]\n  $r8 \u003d String) $r7\n  new Attribute(r4, $r8, r1)\n  $r0.add($r5)\n}",
      "B8 {\n  i2 \u003d i2 + 1\n  goto B1\n}",
      "B9 {\n  $r2 \u003d Collections.unmodifiableList($r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B9",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B1",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Attributes#isInternalKey(...1)",
        "body": "{\r\n    return key.length() \u003e 1 \u0026\u0026 key.charAt(0) \u003d\u003d InternalPrefix;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Attributes",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (this \u003d\u003d o)\r\n        return true;\r\n    if (o \u003d\u003d null || getClass() !\u003d o.getClass())\r\n        return false;\r\n    Attributes that \u003d (Attributes) o;\r\n    if (size !\u003d that.size)\r\n        return false;\r\n    for (int i \u003d 0; i \u003c size; i++) {\r\n        String key \u003d keys[i];\r\n        assert key !\u003d null;\r\n        int thatI \u003d that.indexOfKey(key);\r\n        if (thatI \u003d\u003d NotFound || !Objects.equals(vals[i], that.vals[thatI]))\r\n            return false;\r\n    }\r\n    return true;\r\n}",
    "nodes": 17,
    "edges": 20,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r1 \u003d\u003d null) → B3 | else → B4",
      "B3 : If($r3 \u003d\u003d $r2) → B4 | else → B5",
      "B5 : If($i1 \u003d\u003d $i0) → B6 | else → B7",
      "B8 : If(i4 \u003e\u003d $i2) → B9 | else → B16",
      "B9 : If($z0 !\u003d 0) → B10 | else → B12",
      "B10 : If(r6 !\u003d null) → B11 | else → B12",
      "B12 : If($i3 \u003d\u003d $i6) → B13 | else → B14",
      "B13 : If($z1 !\u003d 0) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  Attributes\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d r0.getClass()\n  $r2 \u003d r1.getClass()\n  if ($r3 \u003d\u003d $r2) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  r4 \u003d Attributes) r1\n  $i1 \u003d Attributes: int size\u003e\n  $i0 \u003d Attributes: int size\u003e\n  if ($i1 \u003d\u003d $i0) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  i4 \u003d 0\n}",
      "B8 {\n  $i2 \u003d Attributes: int size\u003e\n  if (i4 \u003e\u003d $i2) goto B9 else B16\n}",
      "B9 {\n  $r5 \u003d String[] keys\u003e\n  r6 \u003d $r5[i4]\n  $z0 \u003d Attributes: boolean $assertionsDisabled\u003e\n  if ($z0 !\u003d 0) goto B10 else B12\n}",
      "B10 {\n  if (r6 !\u003d null) goto B11 else B12\n}",
      "B11 {\n  $r12 \u003d AssertionError\n  new AssertionError()\n  throw $r12\n}",
      "B12 {\n  $i3 \u003d r4.indexOfKey(r6)\n  $i6 \u003d (int) -1\n  if ($i3 \u003d\u003d $i6) goto B13 else B14\n}",
      "B13 {\n  $r7 \u003d Object[] vals\u003e\n  $r10 \u003d $r7[i4]\n  $r8 \u003d Object[] vals\u003e\n  $r9 \u003d $r8[$i3]\n  $z1 \u003d Objects.equals($r10, $r9)\n  if ($z1 !\u003d 0) goto B14 else B15\n}",
      "B14 {\n  return\n}",
      "B15 {\n  i4 \u003d i4 + 1\n  goto B8\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B16",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B8",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Attributes#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Attributes",
    "methodName": "clone",
    "signature": "org.jsoup.nodes.Attributes clone()",
    "visibility": "public",
    "body": "{\r\n    Attributes clone;\r\n    try {\r\n        clone \u003d (Attributes) super.clone();\r\n    } catch (CloneNotSupportedException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n    clone.size \u003d size;\r\n    clone.keys \u003d Arrays.copyOf(keys, size);\r\n    clone.vals \u003d Arrays.copyOf(vals, size);\r\n    // make a copy of the user data map. (Contents are shallow).\r\n    int i \u003d indexOfKey(SharedConstants.UserDataKey);\r\n    if (i !\u003d NotFound) {\r\n        //noinspection unchecked\r\n        vals[i] \u003d new HashMap\u003c\u003e((Map\u003cString, Object\u003e) vals[i]);\r\n    }\r\n    return clone;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B2 : If(i3 \u003d\u003d $i5) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Attributes\n  $r1 \u003d r0.clone()\n  r2 \u003d Attributes) $r1\n  goto B2\n}",
      "B1 {\n  $r13 :\u003d @caughtexception\n  $r15 \u003d RuntimeException\n  new RuntimeException($r13)\n  throw $r15\n}",
      "B2 {\n  $i0 \u003d Attributes: int size\u003e\n  Attributes: int size\u003e \u003d $i0\n  $r3 \u003d String[] keys\u003e\n  $i1 \u003d Attributes: int size\u003e\n  $r4 \u003d Arrays.copyOf($r3, $i1)\n  $r5 \u003d String[]) $r4\n  String[] keys\u003e \u003d $r5\n  $r6 \u003d Object[] vals\u003e\n  $i2 \u003d Attributes: int size\u003e\n  $r7 \u003d Arrays.copyOf($r6, $i2)\n  Object[] vals\u003e \u003d $r7\n  i3 \u003d r0.indexOfKey(\"/jsoup.userdata\")\n  $i5 \u003d (int) -1\n  if (i3 \u003d\u003d $i5) goto B3 else B4\n}",
      "B3 {\n  $r12 \u003d Object[] vals\u003e\n  $r16 \u003d HashMap\n  $r9 \u003d Object[] vals\u003e\n  $r10 \u003d $r9[i3]\n  $r11 \u003d Map) $r10\n  new HashMap($r11)\n  $r12[i3] \u003d $r16\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Attributes#indexOfKey(...1)",
        "body": "{\r\n    Validate.notNull(key);\r\n    for (int i \u003d 0; i \u003c size; i++) {\r\n        if (key.equals(keys[i]))\r\n            return i;\r\n    }\r\n    return NotFound;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Attributes",
    "methodName": "normalize",
    "signature": "void normalize()",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d 0; i \u003c size; i++) {\r\n        assert keys[i] !\u003d null;\r\n        String key \u003d keys[i];\r\n        assert key !\u003d null;\r\n        if (!isInternalKey(key))\r\n            keys[i] \u003d lowerCase(key);\r\n    }\r\n}",
    "nodes": 12,
    "edges": 15,
    "cc": 5,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d $i0) → B2 | else → B11",
      "B2 : If($z0 !\u003d 0) → B3 | else → B5",
      "B3 : If($r6 !\u003d null) → B4 | else → B5",
      "B5 : If($z1 !\u003d 0) → B6 | else → B8",
      "B6 : If($r7 !\u003d null) → B7 | else → B8",
      "B8 : If($z2 !\u003d 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  Attributes\n  i1 \u003d 0\n}",
      "B1 {\n  $i0 \u003d Attributes: int size\u003e\n  if (i1 \u003e\u003d $i0) goto B2 else B11\n}",
      "B2 {\n  $z0 \u003d Attributes: boolean $assertionsDisabled\u003e\n  if ($z0 !\u003d 0) goto B3 else B5\n}",
      "B3 {\n  $r5 \u003d String[] keys\u003e\n  $r6 \u003d $r5[i1]\n  if ($r6 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r8 \u003d AssertionError\n  new AssertionError()\n  throw $r8\n}",
      "B5 {\n  $r1 \u003d String[] keys\u003e\n  $r7 \u003d $r1[i1]\n  $z1 \u003d Attributes: boolean $assertionsDisabled\u003e\n  if ($z1 !\u003d 0) goto B6 else B8\n}",
      "B6 {\n  if ($r7 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r4 \u003d AssertionError\n  new AssertionError()\n  throw $r4\n}",
      "B8 {\n  $z2 \u003d Attributes.isInternalKey($r7)\n  if ($z2 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  $r2 \u003d String[] keys\u003e\n  $r3 \u003d Normalizer.lowerCase($r7)\n  $r2[i1] \u003d $r3\n}",
      "B10 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B11",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B1",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Attributes#isInternalKey(...1)",
        "body": "{\r\n    return key.length() \u003e 1 \u0026\u0026 key.charAt(0) \u003d\u003d InternalPrefix;\r\n}"
      },
      {
        "name": "Attributes#lowerCase(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Attributes",
    "methodName": "deduplicate",
    "signature": "int deduplicate(org.jsoup.parser.ParseSettings)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty())\r\n        return 0;\r\n    boolean preserve \u003d settings.preserveAttributeCase();\r\n    int dupes \u003d 0;\r\n    for (int i \u003d 0; i \u003c size; i++) {\r\n        String keyI \u003d keys[i];\r\n        assert keyI !\u003d null;\r\n        for (int j \u003d i + 1; j \u003c size; j++) {\r\n            if ((preserve \u0026\u0026 keyI.equals(keys[j])) || (!preserve \u0026\u0026 keyI.equalsIgnoreCase(keys[j]))) {\r\n                dupes++;\r\n                remove(j);\r\n                j--;\r\n            }\r\n        }\r\n    }\r\n    return dupes;\r\n}",
    "nodes": 17,
    "edges": 23,
    "cc": 8,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If(i2 \u003e\u003d $i0) → B4 | else → B16",
      "B4 : If($z2 !\u003d 0) → B5 | else → B7",
      "B5 : If(r3 !\u003d null) → B6 | else → B7",
      "B8 : If(i3 \u003e\u003d $i4) → B9 | else → B15",
      "B9 : If(z1 \u003d\u003d false) → B10 | else → B11",
      "B10 : If($z4 !\u003d 0) → B11 | else → B13",
      "B11 : If(z1 !\u003d 0) → B12 | else → B14",
      "B12 : If($z3 \u003d\u003d false) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  Attributes\n  ParseSettings\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  z1 \u003d r1.preserveAttributeCase()\n  i1 \u003d 0\n  i2 \u003d 0\n}",
      "B3 {\n  $i0 \u003d Attributes: int size\u003e\n  if (i2 \u003e\u003d $i0) goto B4 else B16\n}",
      "B4 {\n  $r2 \u003d String[] keys\u003e\n  r3 \u003d $r2[i2]\n  $z2 \u003d Attributes: boolean $assertionsDisabled\u003e\n  if ($z2 !\u003d 0) goto B5 else B7\n}",
      "B5 {\n  if (r3 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r9 \u003d AssertionError\n  new AssertionError()\n  throw $r9\n}",
      "B7 {\n  i3 \u003d i2 + 1\n}",
      "B8 {\n  $i4 \u003d Attributes: int size\u003e\n  if (i3 \u003e\u003d $i4) goto B9 else B15\n}",
      "B9 {\n  if (z1 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  $r6 \u003d String[] keys\u003e\n  $r7 \u003d $r6[i3]\n  $z4 \u003d r3.equals($r7)\n  if ($z4 !\u003d 0) goto B11 else B13\n}",
      "B11 {\n  if (z1 !\u003d 0) goto B12 else B14\n}",
      "B12 {\n  $r4 \u003d String[] keys\u003e\n  $r5 \u003d $r4[i3]\n  $z3 \u003d r3.equalsIgnoreCase($r5)\n  if ($z3 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  i1 \u003d i1 + 1\n  r0.remove(i3)\n  $i6 \u003d (int) -1\n  i3 \u003d i3 + $i6\n}",
      "B14 {\n  i3 \u003d i3 + 1\n  goto B8\n}",
      "B15 {\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B16",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B15",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B14",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B8",
      "B15 --\u003e B3",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Attributes#isEmpty(...0)",
        "body": "{\r\n    return size \u003d\u003d 0;\r\n}"
      },
      {
        "name": "Attributes#remove(...1)",
        "body": "{\r\n    Validate.isFalse(index \u003e\u003d size);\r\n    int shifted \u003d size - index - 1;\r\n    if (shifted \u003e 0) {\r\n        System.arraycopy(keys, index + 1, keys, index, shifted);\r\n        System.arraycopy(vals, index + 1, vals, index, shifted);\r\n    }\r\n    size--;\r\n    // release hold\r\n    keys[size] \u003d null;\r\n    vals[size] \u003d null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Comment",
    "methodName": "asXmlDeclaration",
    "signature": "org.jsoup.nodes.XmlDeclaration asXmlDeclaration()",
    "visibility": "public",
    "body": "{\r\n    String fragment \u003d \"\u003c\" + getData() + \"\u003e\";\r\n    Parser parser \u003d Parser.xmlParser();\r\n    List\u003cNode\u003e nodes \u003d parser.parseFragmentInput(fragment, null, \"\");\r\n    if (!nodes.isEmpty() \u0026\u0026 nodes.get(0) instanceof XmlDeclaration)\r\n        return (XmlDeclaration) nodes.get(0);\r\n    return null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Comment\n  $r1 \u003d r0.getData()\n  r2 \u003d dynInvoke makeConcatWithConstants($r1)\n  r3 \u003d Parser.xmlParser()\n  r4 \u003d r3.parseFragmentInput(r2, null, \"\")\n  $z0 \u003d r4.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $r5 \u003d r4.get(0)\n  $z1 \u003d XmlDeclaration\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d r4.get(0)\n  $r7 \u003d XmlDeclaration) $r6\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Comment#getData(...0)",
        "body": "{\r\n    return coreValue();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Document",
    "methodName": "connection",
    "signature": "org.jsoup.Connection connection()",
    "visibility": "public",
    "body": "{\r\n    if (connection \u003d\u003d null)\r\n        return Jsoup.newSession();\r\n    else\r\n        return connection;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Document\n  $r1 \u003d Connection connection\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Jsoup.newSession()\n  return\n}",
      "B2 {\n  $r2 \u003d Connection connection\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Document",
    "methodName": "documentType",
    "signature": "org.jsoup.nodes.DocumentType documentType()",
    "visibility": "public",
    "body": "{\r\n    for (Node node : childNodes) {\r\n        if (node instanceof DocumentType)\r\n            return (DocumentType) node;\r\n        else if (// scans forward across comments, text, processing instructions etc\r\n        !(node instanceof LeafNode))\r\n            break;\r\n    }\r\n    return null;\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B7",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z2 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Document\n  $r1 \u003d Element$NodeList childNodes\u003e\n  r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B7\n}",
      "B2 {\n  $r3 \u003d r2.next()\n  r4 \u003d Node) $r3\n  $z1 \u003d DocumentType\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d DocumentType) r4\n  return\n}",
      "B4 {\n  $z2 \u003d LeafNode\n  if ($z2 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  goto B7\n}",
      "B6 {\n  goto B1\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B1",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Document",
    "methodName": "head",
    "signature": "org.jsoup.nodes.Element head()",
    "visibility": "public",
    "body": "{\r\n    final Element html \u003d htmlEl();\r\n    Element el \u003d html.firstElementChild();\r\n    while (el !\u003d null) {\r\n        if (el.nameIs(\"head\"))\r\n            return el;\r\n        el \u003d el.nextElementSibling();\r\n    }\r\n    return html.prependElement(\"head\");\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(r3 \u003d\u003d null) → B2 | else → B5",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Document\n  r1 \u003d r0.htmlEl()\n  r3 \u003d r1.firstElementChild()\n}",
      "B1 {\n  if (r3 \u003d\u003d null) goto B2 else B5\n}",
      "B2 {\n  $z0 \u003d r3.nameIs(\"head\")\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r3 \u003d r3.nextElementSibling()\n  goto B1\n}",
      "B5 {\n  $r2 \u003d r1.prependElement(\"head\")\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Document#htmlEl(...0)",
        "body": "{\r\n    Element el \u003d firstElementChild();\r\n    while (el !\u003d null) {\r\n        if (el.nameIs(\"html\"))\r\n            return el;\r\n        el \u003d el.nextElementSibling();\r\n    }\r\n    return appendElement(\"html\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Document",
    "methodName": "body",
    "signature": "org.jsoup.nodes.Element body()",
    "visibility": "public",
    "body": "{\r\n    final Element html \u003d htmlEl();\r\n    Element el \u003d html.firstElementChild();\r\n    while (el !\u003d null) {\r\n        if (el.nameIs(\"body\") || el.nameIs(\"frameset\"))\r\n            return el;\r\n        el \u003d el.nextElementSibling();\r\n    }\r\n    return html.appendElement(\"body\");\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r3 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Document\n  r1 \u003d r0.htmlEl()\n  r3 \u003d r1.firstElementChild()\n}",
      "B1 {\n  if (r3 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $z0 \u003d r3.nameIs(\"body\")\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $z1 \u003d r3.nameIs(\"frameset\")\n  if ($z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  r3 \u003d r3.nextElementSibling()\n  goto B1\n}",
      "B6 {\n  $r2 \u003d r1.appendElement(\"body\")\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Document#htmlEl(...0)",
        "body": "{\r\n    Element el \u003d firstElementChild();\r\n    while (el !\u003d null) {\r\n        if (el.nameIs(\"html\"))\r\n            return el;\r\n        el \u003d el.nextElementSibling();\r\n    }\r\n    return appendElement(\"html\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Document",
    "methodName": "expectForm",
    "signature": "org.jsoup.nodes.FormElement expectForm(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    Elements els \u003d select(cssQuery);\r\n    for (Element el : els) {\r\n        if (el instanceof FormElement)\r\n            return (FormElement) el;\r\n    }\r\n    Validate.fail(\"No form elements matched the query \u0027%s\u0027 in the document.\", cssQuery);\r\n    // (not really)\r\n    return null;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Document\n  String\n  r2 \u003d r0.select(r1)\n  r3 \u003d r2.iterator()\n}",
      "B1 {\n  $z0 \u003d r3.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r5 \u003d r3.next()\n  r6 \u003d Element) $r5\n  $z1 \u003d FormElement\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r7 \u003d FormElement) r6\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  $r4 \u003d Object)[1]\n  $r4[0] \u003d r1\n  Validate.fail(\"No form elements matched the query \\\u0027%s\\\u0027 in the document.\", $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Document#select(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Document",
    "methodName": "title",
    "signature": "java.lang.String title()",
    "visibility": "public",
    "body": "{\r\n    // title is a preserve whitespace tag (for document output), but normalised here\r\n    Element titleEl \u003d head().selectFirst(titleEval);\r\n    return titleEl !\u003d null ? StringUtil.normaliseWhitespace(titleEl.text()).trim() : \"\";\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Document\n  $r2 \u003d r0.head()\n  $r1 \u003d Evaluator titleEval\u003e\n  r3 \u003d $r2.selectFirst($r1)\n  if (r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r3.text()\n  $r5 \u003d StringUtil.normaliseWhitespace($r4)\n  $r6 \u003d $r5.trim()\n  goto B3\n}",
      "B2 {\n  $r6 \u003d \"\"\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Document#head(...0)",
        "body": "{\r\n    final Element html \u003d htmlEl();\r\n    Element el \u003d html.firstElementChild();\r\n    while (el !\u003d null) {\r\n        if (el.nameIs(\"head\"))\r\n            return el;\r\n        el \u003d el.nextElementSibling();\r\n    }\r\n    return html.prependElement(\"head\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Document",
    "methodName": "title",
    "signature": "void title(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    Validate.notNull(title);\r\n    Element titleEl \u003d head().selectFirst(titleEval);\r\n    if (// add to head\r\n    titleEl \u003d\u003d null)\r\n        titleEl \u003d head().appendElement(\"title\");\r\n    titleEl.text(title);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r5 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Document\n  String\n  Validate.notNull(r0)\n  $r3 \u003d r1.head()\n  $r2 \u003d Evaluator titleEval\u003e\n  r5 \u003d $r3.selectFirst($r2)\n  if (r5 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r1.head()\n  r5 \u003d $r4.appendElement(\"title\")\n}",
      "B2 {\n  r5.text(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Document#head(...0)",
        "body": "{\r\n    final Element html \u003d htmlEl();\r\n    Element el \u003d html.firstElementChild();\r\n    while (el !\u003d null) {\r\n        if (el.nameIs(\"head\"))\r\n            return el;\r\n        el \u003d el.nextElementSibling();\r\n    }\r\n    return html.prependElement(\"head\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Document",
    "methodName": "clone",
    "signature": "org.jsoup.nodes.Document clone()",
    "visibility": "public",
    "body": "{\r\n    Document clone \u003d (Document) super.clone();\r\n    if (attributes !\u003d null)\r\n        clone.attributes \u003d attributes.clone();\r\n    clone.outputSettings \u003d this.outputSettings.clone();\r\n    // parser is pointer copy\r\n    return clone;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r3 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Document\n  $r1 \u003d r0.clone()\n  r2 \u003d Document) $r1\n  $r3 \u003d Attributes attributes\u003e\n  if ($r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d Attributes attributes\u003e\n  $r7 \u003d $r6.clone()\n  Attributes attributes\u003e \u003d $r7\n}",
      "B2 {\n  $r4 \u003d Document$OutputSettings outputSettings\u003e\n  $r5 \u003d $r4.clone()\n  Document$OutputSettings outputSettings\u003e \u003d $r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Document",
    "methodName": "shallowClone",
    "signature": "org.jsoup.nodes.Document shallowClone()",
    "visibility": "public",
    "body": "{\r\n    // preserves parser pointer\r\n    Document clone \u003d new Document(this.tag().namespace(), baseUri(), parser);\r\n    if (attributes !\u003d null)\r\n        clone.attributes \u003d attributes.clone();\r\n    clone.outputSettings \u003d this.outputSettings.clone();\r\n    return clone;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r6 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Document\n  $r0 \u003d Document\n  $r2 \u003d r1.tag()\n  $r5 \u003d $r2.namespace()\n  $r4 \u003d r1.baseUri()\n  $r3 \u003d Parser parser\u003e\n  new Document($r5, $r4, $r3)\n  $r6 \u003d Attributes attributes\u003e\n  if ($r6 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d Attributes attributes\u003e\n  $r10 \u003d $r9.clone()\n  Attributes attributes\u003e \u003d $r10\n}",
      "B2 {\n  $r7 \u003d Document$OutputSettings outputSettings\u003e\n  $r8 \u003d $r7.clone()\n  Document$OutputSettings outputSettings\u003e \u003d $r8\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Document#tag(...0)",
        "body": "(source not found)"
      },
      {
        "name": "Document#baseUri(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.DocumentType",
    "methodName": "setPubSysKey",
    "signature": "void setPubSysKey(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (value !\u003d null)\r\n        attr(PubSysKey, value);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DocumentType\n  String\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r1.attr(\"pubSysKey\", r0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DocumentType#attr(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "attributes",
    "signature": "org.jsoup.nodes.Attributes attributes()",
    "visibility": "public",
    "body": "{\r\n    if (// not using hasAttributes, as doesn\u0027t clear warning\r\n    attributes \u003d\u003d null)\r\n        attributes \u003d new Attributes();\r\n    return attributes;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Element\n  $r1 \u003d Attributes attributes\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Attributes\n  new Attributes()\n  Attributes attributes\u003e \u003d $r3\n}",
      "B2 {\n  $r2 \u003d Attributes attributes\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "elementIs",
    "signature": "boolean elementIs(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return tag.normalName().equals(normalName) \u0026\u0026 tag.namespace().equals(namespace);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Element\n  String\n  String\n  $r1 \u003d Tag tag\u003e\n  $r3 \u003d $r1.normalName()\n  $z0 \u003d $r3.equals(r2)\n  if ($z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $r4 \u003d Tag tag\u003e\n  $r6 \u003d $r4.namespace()\n  $z1 \u003d $r6.equals(r5)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "id",
    "signature": "java.lang.String id()",
    "visibility": "public",
    "body": "{\r\n    return attributes !\u003d null ? attributes.getIgnoreCase(\"id\") : \"\";\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Element\n  $r1 \u003d Attributes attributes\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Attributes attributes\u003e\n  $r3 \u003d $r2.getIgnoreCase(\"id\")\n  goto B3\n}",
      "B2 {\n  $r3 \u003d \"\"\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "attribute",
    "signature": "org.jsoup.nodes.Attribute attribute(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return hasAttributes() ? attributes().attribute(key) : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Element\n  String\n  $z0 \u003d r0.hasAttributes()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0.attributes()\n  $r3 \u003d $r2.attribute(r1)\n  goto B3\n}",
      "B2 {\n  $r3 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Element#hasAttributes(...0)",
        "body": "{\r\n    return attributes !\u003d null;\r\n}"
      },
      {
        "name": "Element#attributes(...0)",
        "body": "{\r\n    if (// not using hasAttributes, as doesn\u0027t clear warning\r\n    attributes \u003d\u003d null)\r\n        attributes \u003d new Attributes();\r\n    return attributes;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "parents",
    "signature": "org.jsoup.select.Elements parents()",
    "visibility": "public",
    "body": "{\r\n    Elements parents \u003d new Elements();\r\n    Element parent \u003d this.parent();\r\n    while (parent !\u003d null \u0026\u0026 !parent.nameIs(\"#root\")) {\r\n        parents.add(parent);\r\n        parent \u003d parent.parent();\r\n    }\r\n    return parents;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r2 \u003d\u003d null) → B2 | else → B4",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Element\n  $r0 \u003d Elements\n  new Elements()\n  r2 \u003d r1.parent()\n}",
      "B1 {\n  if (r2 \u003d\u003d null) goto B2 else B4\n}",
      "B2 {\n  $z0 \u003d r2.nameIs(\"#root\")\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r0.add(r2)\n  r2 \u003d r2.parent()\n  goto B1\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B1",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Element#parent(...0)",
        "body": "{\r\n    return (Element) parentNode;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "expectFirst",
    "signature": "org.jsoup.nodes.Element expectFirst(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return Validate.expectNotNull(Selector.selectFirst(cssQuery, this), parent() !\u003d null ? \"No elements matched the query \u0027%s\u0027 on element \u0027%s\u0027.\" : \"No elements matched the query \u0027%s\u0027 in the document.\", cssQuery, this.tagName());\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Element\n  String\n  $r5 \u003d Selector.selectFirst(r0, r1)\n  $r2 \u003d r1.parent()\n  if ($r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d \"\n  goto B3\n}",
      "B2 {\n  $r8 \u003d \"\n}",
      "B3 {\n  $r3 \u003d Object)[2]\n  $r3[0] \u003d r0\n  $r4 \u003d r1.tagName()\n  $r3[1] \u003d $r4\n  $r6 \u003d Validate.expectNotNull($r5, $r8, $r3)\n  $r7 \u003d Element) $r6\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Element#parent(...0)",
        "body": "{\r\n    return (Element) parentNode;\r\n}"
      },
      {
        "name": "Element#tagName(...0)",
        "body": "{\r\n    return tag.getName();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "expectFirstNode",
    "signature": "org.jsoup.nodes.Node expectFirstNode(java.lang.String,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return Validate.expectNotNull(selectFirstNode(cssQuery, type), parent() !\u003d null ? \"No nodes matched the query \u0027%s\u0027 on element \u0027%s\u0027.\" : \"No nodes matched the query \u0027%s\u0027 in the document.\", cssQuery, this.tagName());\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r3 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Element\n  String\n  Class\n  $r6 \u003d r0.selectFirstNode(r1, r2)\n  $r3 \u003d r0.parent()\n  if ($r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d \"\n  goto B3\n}",
      "B2 {\n  $r9 \u003d \"\n}",
      "B3 {\n  $r4 \u003d Object)[2]\n  $r4[0] \u003d r1\n  $r5 \u003d r0.tagName()\n  $r4[1] \u003d $r5\n  $r7 \u003d Validate.expectNotNull($r6, $r9, $r4)\n  $r8 \u003d Node) $r7\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Element#parent(...0)",
        "body": "{\r\n    return (Element) parentNode;\r\n}"
      },
      {
        "name": "Element#selectFirstNode(...2)",
        "body": "{\r\n    return selectFirstNode(evaluatorOf(cssQuery), type);\r\n}"
      },
      {
        "name": "Element#tagName(...0)",
        "body": "{\r\n    return tag.getName();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "closest",
    "signature": "org.jsoup.nodes.Element closest(org.jsoup.select.Evaluator)",
    "visibility": "public",
    "body": "{\r\n    Validate.notNull(evaluator);\r\n    Element el \u003d this;\r\n    final Element root \u003d root();\r\n    do {\r\n        if (evaluator.matches(root, el))\r\n            return el;\r\n        el \u003d el.parent();\r\n    } while (el !\u003d null);\r\n    return null;\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3",
      "B3 : If(r3 !\u003d null) → B4 | else → B1"
    ],
    "blockList": [
      "B0 {\n  Element\n  Evaluator\n  Validate.notNull(r0)\n  r3 \u003d r1\n  r2 \u003d r1.root()\n}",
      "B1 {\n  $z0 \u003d r0.matches(r2, r3)\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  r3 \u003d r3.parent()\n  if (r3 !\u003d null) goto B4 else B1\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B1",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Element#root(...0)",
        "body": "{\r\n    // probably a document, but always at least an element\r\n    return (Element) super.root();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "insertChildren",
    "signature": "org.jsoup.nodes.Element insertChildren(int,java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    Validate.notNull(children, \"Children collection to be inserted must not be null.\");\r\n    int currentSize \u003d childNodeSize();\r\n    // roll around\r\n    if (index \u003c 0)\r\n        index +\u003d currentSize + 1;\r\n    Validate.isTrue(index \u003e\u003d 0 \u0026\u0026 index \u003c\u003d currentSize, \"Insert position out of bounds.\");\r\n    ArrayList\u003cNode\u003e nodes \u003d new ArrayList\u003c\u003e(children);\r\n    Node[] nodeArray \u003d nodes.toArray(new Node[0]);\r\n    addChildren(index, nodeArray);\r\n    return this;\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i2 \u003e\u003d 0) → B1 | else → B2",
      "B2 : If(i2 \u003c 0) → B3 | else → B5",
      "B3 : If(i2 \u003e i0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Element\n  i2 :\u003d @parameter0: int\n  Collection\n  Validate.notNull(r0, \"Children collection to be inserted must not be null.\")\n  i0 \u003d r1.childNodeSize()\n  if (i2 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d i0 + 1\n  i2 \u003d i2 + $i1\n}",
      "B2 {\n  if (i2 \u003c 0) goto B3 else B5\n}",
      "B3 {\n  if (i2 \u003e i0) goto B4 else B5\n}",
      "B4 {\n  $z0 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z0 \u003d 0\n}",
      "B6 {\n  Validate.isTrue($z0, \"Insert position out of bounds.\")\n  $r2 \u003d ArrayList\n  new ArrayList(r0)\n  $r3 \u003d Node)[0]\n  $r4 \u003d $r2.toArray($r3)\n  $r5 \u003d Node[]) $r4\n  r1.addChildren(i2, $r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Element#childNodeSize(...0)",
        "body": "{\r\n    return childNodes.size();\r\n}"
      },
      {
        "name": "Element#addChildren(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "insertChildren",
    "signature": "org.jsoup.nodes.Element insertChildren(int,org.jsoup.nodes.Node[])",
    "visibility": "public",
    "body": "{\r\n    Validate.notNull(children, \"Children collection to be inserted must not be null.\");\r\n    int currentSize \u003d childNodeSize();\r\n    // roll around\r\n    if (index \u003c 0)\r\n        index +\u003d currentSize + 1;\r\n    Validate.isTrue(index \u003e\u003d 0 \u0026\u0026 index \u003c\u003d currentSize, \"Insert position out of bounds.\");\r\n    addChildren(index, children);\r\n    return this;\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i2 \u003e\u003d 0) → B1 | else → B2",
      "B2 : If(i2 \u003c 0) → B3 | else → B5",
      "B3 : If(i2 \u003e i0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Element\n  i2 :\u003d @parameter0: int\n  Node[]\n  Validate.notNull(r0, \"Children collection to be inserted must not be null.\")\n  i0 \u003d r1.childNodeSize()\n  if (i2 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d i0 + 1\n  i2 \u003d i2 + $i1\n}",
      "B2 {\n  if (i2 \u003c 0) goto B3 else B5\n}",
      "B3 {\n  if (i2 \u003e i0) goto B4 else B5\n}",
      "B4 {\n  $z0 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z0 \u003d 0\n}",
      "B6 {\n  Validate.isTrue($z0, \"Insert position out of bounds.\")\n  r1.addChildren(i2, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Element#childNodeSize(...0)",
        "body": "{\r\n    return childNodes.size();\r\n}"
      },
      {
        "name": "Element#addChildren(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "empty",
    "signature": "org.jsoup.nodes.Element empty()",
    "visibility": "public",
    "body": "{\r\n    // Detach each of the children -\u003e parent links:\r\n    for (Node child : childNodes) {\r\n        child.parentNode \u003d null;\r\n    }\r\n    childNodes.clear();\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Element\n  $r1 \u003d Element$NodeList childNodes\u003e\n  r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r2.next()\n  r5 \u003d Node) $r4\n  Element parentNode\u003e \u003d null\n  goto B1\n}",
      "B3 {\n  $r3 \u003d Element$NodeList childNodes\u003e\n  $r3.clear()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "cssSelector",
    "signature": "java.lang.String cssSelector()",
    "visibility": "public",
    "body": "{\r\n    Document ownerDoc \u003d ownerDocument();\r\n    String idSel \u003d uniqueIdSelector(ownerDoc);\r\n    if (!idSel.isEmpty())\r\n        return idSel;\r\n    // No unique ID, work up the parent stack and find either a unique ID to hang from, or just a GP \u003e Parent \u003e Child chain\r\n    StringBuilder selector \u003d StringUtil.borrowBuilder();\r\n    Element el \u003d this;\r\n    while (el !\u003d null \u0026\u0026 !(el instanceof Document)) {\r\n        idSel \u003d el.uniqueIdSelector(ownerDoc);\r\n        if (!idSel.isEmpty()) {\r\n            selector.insert(0, idSel);\r\n            // found a unique ID to use as ancestor; stop\r\n            break;\r\n        }\r\n        selector.insert(0, el.cssSelectorComponent());\r\n        el \u003d el.parent();\r\n    }\r\n    return StringUtil.releaseBuilder(selector);\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B3 : If(r5 \u003d\u003d null) → B4 | else → B8",
      "B4 : If($z1 !\u003d 0) → B5 | else → B8",
      "B5 : If($z2 !\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Element\n  r1 \u003d r0.ownerDocument()\n  r4 \u003d r0.uniqueIdSelector(r1)\n  $z0 \u003d r4.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r2 \u003d StringUtil.borrowBuilder()\n  r5 \u003d r0\n}",
      "B3 {\n  if (r5 \u003d\u003d null) goto B4 else B8\n}",
      "B4 {\n  $z1 \u003d Document\n  if ($z1 !\u003d 0) goto B5 else B8\n}",
      "B5 {\n  r6 \u003d r5.uniqueIdSelector(r1)\n  $z2 \u003d r6.isEmpty()\n  if ($z2 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  r2.insert(0, r6)\n  goto B8\n}",
      "B7 {\n  $r3 \u003d r5.cssSelectorComponent()\n  r2.insert(0, $r3)\n  r5 \u003d r5.parent()\n  goto B3\n}",
      "B8 {\n  $r7 \u003d StringUtil.releaseBuilder(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B3",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Element#ownerDocument(...0)",
        "body": "(source not found)"
      },
      {
        "name": "Element#uniqueIdSelector(...1)",
        "body": "{\r\n    String id \u003d id();\r\n    if (!id.isEmpty()) {\r\n        // check if the ID is unique and matches this\r\n        String idSel \u003d \"#\" + escapeCssIdentifier(id);\r\n        if (ownerDoc !\u003d null) {\r\n            Elements els \u003d ownerDoc.select(idSel);\r\n            if (els.size() \u003d\u003d 1 \u0026\u0026 els.get(0) \u003d\u003d this)\r\n                return idSel;\r\n        } else {\r\n            return idSel;\r\n        }\r\n    }\r\n    return EmptyString;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "siblingElements",
    "signature": "org.jsoup.select.Elements siblingElements()",
    "visibility": "public",
    "body": "{\r\n    if (parentNode \u003d\u003d null)\r\n        return new Elements(0);\r\n    List\u003cElement\u003e elements \u003d parent().childElementsList();\r\n    Elements siblings \u003d new Elements(elements.size() - 1);\r\n    for (Element el : elements) if (el !\u003d this)\r\n        siblings.add(el);\r\n    return siblings;\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B7",
      "B4 : If(r7 \u003d\u003d r0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Element\n  $r1 \u003d Element parentNode\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d Elements\n  new Elements(0)\n  return\n}",
      "B2 {\n  $r2 \u003d r0.parent()\n  r3 \u003d $r2.childElementsList()\n  $r4 \u003d Elements\n  $i0 \u003d r3.size()\n  $i1 \u003d $i0 - 1\n  new Elements($i1)\n  r5 \u003d r3.iterator()\n}",
      "B3 {\n  $z0 \u003d r5.hasNext()\n  if ($z0 \u003d\u003d false) goto B4 else B7\n}",
      "B4 {\n  $r6 \u003d r5.next()\n  r7 \u003d Element) $r6\n  if (r7 \u003d\u003d r0) goto B5 else B6\n}",
      "B5 {\n  $r4.add(r7)\n}",
      "B6 {\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Element#parent(...0)",
        "body": "{\r\n    return (Element) parentNode;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "firstElementSibling",
    "signature": "org.jsoup.nodes.Element firstElementSibling()",
    "visibility": "public",
    "body": "{\r\n    if (parent() !\u003d null) {\r\n        //noinspection DataFlowIssue (not nullable, would be this is no other sibs)\r\n        return parent().firstElementChild();\r\n    } else\r\n        // orphan is its own first sibling\r\n        return this;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Element\n  $r1 \u003d r0.parent()\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0.parent()\n  $r3 \u003d $r2.firstElementChild()\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Element#parent(...0)",
        "body": "{\r\n    return (Element) parentNode;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "elementSiblingIndex",
    "signature": "int elementSiblingIndex()",
    "visibility": "public",
    "body": "{\r\n    if (parent() \u003d\u003d null)\r\n        return 0;\r\n    return indexInList(this, parent().childElementsList());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Element\n  $r1 \u003d r0.parent()\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d r0.parent()\n  $r3 \u003d $r2.childElementsList()\n  $i0 \u003d Element.indexInList(r0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Element#parent(...0)",
        "body": "{\r\n    return (Element) parentNode;\r\n}"
      },
      {
        "name": "Element#indexInList(...2)",
        "body": "{\r\n    final int size \u003d elements.size();\r\n    for (int i \u003d 0; i \u003c size; i++) {\r\n        if (elements.get(i) \u003d\u003d search)\r\n            return i;\r\n    }\r\n    return 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "lastElementSibling",
    "signature": "org.jsoup.nodes.Element lastElementSibling()",
    "visibility": "public",
    "body": "{\r\n    if (parent() !\u003d null) {\r\n        //noinspection DataFlowIssue (not nullable, would be this if no other sibs)\r\n        return parent().lastElementChild();\r\n    } else\r\n        return this;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Element\n  $r1 \u003d r0.parent()\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0.parent()\n  $r3 \u003d $r2.lastElementChild()\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Element#parent(...0)",
        "body": "{\r\n    return (Element) parentNode;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "firstElementChild",
    "signature": "org.jsoup.nodes.Element firstElementChild()",
    "visibility": "public",
    "body": "{\r\n    Node child \u003d firstChild();\r\n    while (child !\u003d null) {\r\n        if (child instanceof Element)\r\n            return (Element) child;\r\n        child \u003d child.nextSibling();\r\n    }\r\n    return null;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(r2 \u003d\u003d null) → B2 | else → B5",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Element\n  r2 \u003d r0.firstChild()\n}",
      "B1 {\n  if (r2 \u003d\u003d null) goto B2 else B5\n}",
      "B2 {\n  $z0 \u003d Element\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d Element) r2\n  return\n}",
      "B4 {\n  r2 \u003d r2.nextSibling()\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Element#firstChild(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "lastElementChild",
    "signature": "org.jsoup.nodes.Element lastElementChild()",
    "visibility": "public",
    "body": "{\r\n    Node child \u003d lastChild();\r\n    while (child !\u003d null) {\r\n        if (child instanceof Element)\r\n            return (Element) child;\r\n        child \u003d child.previousSibling();\r\n    }\r\n    return null;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(r2 \u003d\u003d null) → B2 | else → B5",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Element\n  r2 \u003d r0.lastChild()\n}",
      "B1 {\n  if (r2 \u003d\u003d null) goto B2 else B5\n}",
      "B2 {\n  $z0 \u003d Element\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d Element) r2\n  return\n}",
      "B4 {\n  r2 \u003d r2.previousSibling()\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Element#lastChild(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "text",
    "signature": "org.jsoup.nodes.Element text(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    Validate.notNull(text);\r\n    empty();\r\n    // special case for script/style in HTML (or customs): should be data node\r\n    if (tag().is(Tag.Data))\r\n        appendChild(new DataNode(text));\r\n    else\r\n        appendChild(new TextNode(text));\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Element\n  String\n  Validate.notNull(r0)\n  r1.empty()\n  $r2 \u003d r1.tag()\n  $i0 \u003d Tag: int Data\u003e\n  $z0 \u003d $r2.is($i0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d DataNode\n  new DataNode(r0)\n  r1.appendChild($r4)\n  goto B3\n}",
      "B2 {\n  $r3 \u003d TextNode\n  new TextNode(r0)\n  r1.appendChild($r3)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Element#tag(...0)",
        "body": "{\r\n    return tag;\r\n}"
      },
      {
        "name": "Element#empty(...0)",
        "body": "{\r\n    // Detach each of the children -\u003e parent links:\r\n    for (Node child : childNodes) {\r\n        child.parentNode \u003d null;\r\n    }\r\n    childNodes.clear();\r\n    return this;\r\n}"
      },
      {
        "name": "Element#appendChild(...1)",
        "body": "{\r\n    Validate.notNull(child);\r\n    // was - Node#addChildren(child). short-circuits an array create and a loop.\r\n    reparentChild(child);\r\n    ensureChildNodes();\r\n    childNodes.add(child);\r\n    child.setSiblingIndex(childNodes.size() - 1);\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "classNames",
    "signature": "org.jsoup.nodes.Element classNames(java.util.Set)",
    "visibility": "public",
    "body": "{\r\n    Validate.notNull(classNames);\r\n    if (classNames.isEmpty()) {\r\n        attributes().remove(\"class\");\r\n    } else {\r\n        attributes().put(\"class\", StringUtil.join(classNames, \" \"));\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Element\n  Set\n  Validate.notNull(r0)\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r1.attributes()\n  $r4.remove(\"class\")\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r1.attributes()\n  $r2 \u003d StringUtil.join(r0, \" \")\n  $r3.put(\"class\", $r2)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Element#attributes(...0)",
        "body": "{\r\n    if (// not using hasAttributes, as doesn\u0027t clear warning\r\n    attributes \u003d\u003d null)\r\n        attributes \u003d new Attributes();\r\n    return attributes;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "hasClass",
    "signature": "boolean hasClass(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (attributes \u003d\u003d null)\r\n        return false;\r\n    final String classAttr \u003d attributes.getIgnoreCase(\"class\");\r\n    final int len \u003d classAttr.length();\r\n    final int wantLen \u003d className.length();\r\n    if (len \u003d\u003d 0 || len \u003c wantLen) {\r\n        return false;\r\n    }\r\n    // if both lengths are equal, only need compare the className with the attribute\r\n    if (len \u003d\u003d wantLen) {\r\n        return className.equalsIgnoreCase(classAttr);\r\n    }\r\n    // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\r\n    boolean inClass \u003d false;\r\n    int start \u003d 0;\r\n    for (int i \u003d 0; i \u003c len; i++) {\r\n        if (Character.isWhitespace(classAttr.charAt(i))) {\r\n            if (inClass) {\r\n                // white space ends a class name, compare it with the requested one, ignore case\r\n                if (i - start \u003d\u003d wantLen \u0026\u0026 classAttr.regionMatches(true, start, className, 0, wantLen)) {\r\n                    return true;\r\n                }\r\n                inClass \u003d false;\r\n            }\r\n        } else {\r\n            if (!inClass) {\r\n                // we\u0027re in a class name : keep the start of the substring\r\n                inClass \u003d true;\r\n                start \u003d i;\r\n            }\r\n        }\r\n    }\r\n    // check the last entry\r\n    if (inClass \u0026\u0026 len - start \u003d\u003d wantLen) {\r\n        return classAttr.regionMatches(true, start, className, 0, wantLen);\r\n    }\r\n    return false;\r\n}",
    "nodes": 22,
    "edges": 28,
    "cc": 8,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003d\u003d false) → B3 | else → B4",
      "B3 : If(i0 \u003e\u003d i1) → B4 | else → B5",
      "B5 : If(i0 !\u003d i1) → B6 | else → B7",
      "B8 : If(i6 \u003e\u003d i0) → B9 | else → B18",
      "B9 : If($z1 \u003d\u003d false) → B10 | else → B15",
      "B10 : If(z7 \u003d\u003d false) → B11 | else → B17",
      "B11 : If($i4 !\u003d i1) → B12 | else → B14",
      "B12 : If($z2 \u003d\u003d false) → B13 | else → B14",
      "B15 : If(z5 !\u003d 0) → B16 | else → B17",
      "B18 : If(z6 \u003d\u003d false) → B19 | else → B21",
      "B19 : If($i2 !\u003d i1) → B20 | else → B21"
    ],
    "blockList": [
      "B0 {\n  Element\n  String\n  $r1 \u003d Attributes attributes\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d Attributes attributes\u003e\n  r3 \u003d $r2.getIgnoreCase(\"class\")\n  i0 \u003d r3.length()\n  i1 \u003d r4.length()\n  if (i0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  if (i0 \u003e\u003d i1) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  if (i0 !\u003d i1) goto B6 else B7\n}",
      "B6 {\n  $z3 \u003d r4.equalsIgnoreCase(r3)\n  return\n}",
      "B7 {\n  z4 \u003d 0\n  z7 \u003d 0\n  z6 \u003d 0\n  z5 \u003d 0\n  i5 \u003d 0\n  i6 \u003d 0\n}",
      "B8 {\n  if (i6 \u003e\u003d i0) goto B9 else B18\n}",
      "B9 {\n  $c3 \u003d r3.charAt(i6)\n  $z1 \u003d Character.isWhitespace($c3)\n  if ($z1 \u003d\u003d false) goto B10 else B15\n}",
      "B10 {\n  if (z7 \u003d\u003d false) goto B11 else B17\n}",
      "B11 {\n  $i4 \u003d i6 - i5\n  if ($i4 !\u003d i1) goto B12 else B14\n}",
      "B12 {\n  $z2 \u003d r3.regionMatches(1, i5, r4, 0, i1)\n  if ($z2 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  return\n}",
      "B14 {\n  z4 \u003d 0\n  z7 \u003d 0\n  z6 \u003d 0\n  z5 \u003d 0\n  goto B17\n}",
      "B15 {\n  if (z5 !\u003d 0) goto B16 else B17\n}",
      "B16 {\n  z4 \u003d 1\n  z7 \u003d 1\n  z6 \u003d 1\n  z5 \u003d 1\n  i5 \u003d i6\n}",
      "B17 {\n  i6 \u003d i6 + 1\n  goto B8\n}",
      "B18 {\n  if (z6 \u003d\u003d false) goto B19 else B21\n}",
      "B19 {\n  $i2 \u003d i0 - i5\n  if ($i2 !\u003d i1) goto B20 else B21\n}",
      "B20 {\n  $z0 \u003d r3.regionMatches(1, i5, r4, 0, i1)\n  return\n}",
      "B21 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B18",
      "B9 --\u003e B10",
      "B9 --\u003e B15",
      "B10 --\u003e B11",
      "B10 --\u003e B17",
      "B11 --\u003e B12",
      "B11 --\u003e B14",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B17",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e B8",
      "B18 --\u003e B19",
      "B18 --\u003e B21",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e [EXIT]",
      "B21 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "toggleClass",
    "signature": "org.jsoup.nodes.Element toggleClass(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    Validate.notNull(className);\r\n    Set\u003cString\u003e classes \u003d classNames();\r\n    if (classes.contains(className))\r\n        classes.remove(className);\r\n    else\r\n        classes.add(className);\r\n    classNames(classes);\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Element\n  String\n  Validate.notNull(r0)\n  r2 \u003d r1.classNames()\n  $z0 \u003d r2.contains(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r2.remove(r0)\n  goto B3\n}",
      "B2 {\n  r2.add(r0)\n}",
      "B3 {\n  r1.classNames(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Element#classNames(...1)",
        "body": "{\r\n    Validate.notNull(classNames);\r\n    if (classNames.isEmpty()) {\r\n        attributes().remove(\"class\");\r\n    } else {\r\n        attributes().put(\"class\", StringUtil.join(classNames, \" \"));\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "Element#classNames(...0)",
        "body": "{\r\n    String[] names \u003d ClassSplit.split(className());\r\n    Set\u003cString\u003e classNames \u003d new LinkedHashSet\u003c\u003e(Arrays.asList(names));\r\n    // if classNames() was empty, would include an empty class\r\n    classNames.remove(\"\");\r\n    return classNames;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "val",
    "signature": "java.lang.String val()",
    "visibility": "public",
    "body": "{\r\n    if (elementIs(\"textarea\", NamespaceHtml))\r\n        return text();\r\n    else\r\n        return attr(\"value\");\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Element\n  $z0 \u003d r0.elementIs(\"textarea\", \"http://www.w3.org/1999/xhtml\")\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0.text()\n  return\n}",
      "B2 {\n  $r1 \u003d r0.attr(\"value\")\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Element#text(...0)",
        "body": "{\r\n    final StringBuilder accum \u003d StringUtil.borrowBuilder();\r\n    new TextAccumulator(accum).traverse(this);\r\n    return StringUtil.releaseBuilder(accum).trim();\r\n}"
      },
      {
        "name": "Element#attr(...1)",
        "body": "(source not found)"
      },
      {
        "name": "Element#elementIs(...2)",
        "body": "{\r\n    return tag.normalName().equals(normalName) \u0026\u0026 tag.namespace().equals(namespace);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "val",
    "signature": "org.jsoup.nodes.Element val(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (elementIs(\"textarea\", NamespaceHtml))\r\n        text(value);\r\n    else\r\n        attr(\"value\", value);\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Element\n  String\n  $z0 \u003d r0.elementIs(\"textarea\", \"http://www.w3.org/1999/xhtml\")\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r0.text(r1)\n  goto B3\n}",
      "B2 {\n  r0.attr(\"value\", r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Element#text(...1)",
        "body": "{\r\n    Validate.notNull(text);\r\n    empty();\r\n    // special case for script/style in HTML (or customs): should be data node\r\n    if (tag().is(Tag.Data))\r\n        appendChild(new DataNode(text));\r\n    else\r\n        appendChild(new TextNode(text));\r\n    return this;\r\n}"
      },
      {
        "name": "Element#elementIs(...2)",
        "body": "{\r\n    return tag.normalName().equals(normalName) \u0026\u0026 tag.namespace().equals(namespace);\r\n}"
      },
      {
        "name": "Element#attr(...2)",
        "body": "{\r\n    super.attr(attributeKey, attributeValue);\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "html",
    "signature": "java.lang.String html()",
    "visibility": "public",
    "body": "{\r\n    StringBuilder sb \u003d StringUtil.borrowBuilder();\r\n    html(sb);\r\n    String html \u003d StringUtil.releaseBuilder(sb);\r\n    return NodeUtils.outputSettings(this).prettyPrint() ? html.trim() : html;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Element\n  r0 \u003d StringUtil.borrowBuilder()\n  r1.html(r0)\n  r2 \u003d StringUtil.releaseBuilder(r0)\n  $r3 \u003d NodeUtils.outputSettings(r1)\n  $z0 \u003d $r3.prettyPrint()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r2.trim()\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r2\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Element#html(...1)",
        "body": "{\r\n    Node child \u003d firstChild();\r\n    if (child !\u003d null) {\r\n        Printer printer \u003d Printer.printerFor(child, QuietAppendable.wrap(accum));\r\n        while (child !\u003d null) {\r\n            printer.traverse(child);\r\n            child \u003d child.nextSibling();\r\n        }\r\n    }\r\n    return accum;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "html",
    "signature": "java.lang.Appendable html(java.lang.Appendable)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r4 \u003d\u003d null) → B1 | else → B4",
      "B2 : If(r4 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Element\n  Appendable\n  r4 \u003d r0.firstChild()\n  if (r4 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r2 \u003d QuietAppendable.wrap(r1)\n  r3 \u003d Printer.printerFor(r4, $r2)\n}",
      "B2 {\n  if (r4 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  r3.traverse(r4)\n  r4 \u003d r4.nextSibling()\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "shallowClone",
    "signature": "org.jsoup.nodes.Element shallowClone()",
    "visibility": "public",
    "body": "{\r\n    // simpler than implementing a clone version with no child copy\r\n    String baseUri \u003d baseUri();\r\n    // saves setting a blank internal attribute\r\n    if (baseUri.isEmpty())\r\n        baseUri \u003d null;\r\n    return new Element(tag, baseUri, attributes \u003d\u003d null ? null : attributes.clone());\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($r2 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Element\n  r6 \u003d r0.baseUri()\n  $z0 \u003d r6.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r6 \u003d null\n}",
      "B2 {\n  $r1 \u003d Element\n  $r4 \u003d Tag tag\u003e\n  $r5 \u003d r6\n  $r2 \u003d Attributes attributes\u003e\n  if ($r2 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r7 \u003d null\n  goto B5\n}",
      "B4 {\n  $r3 \u003d Attributes attributes\u003e\n  $r7 \u003d $r3.clone()\n}",
      "B5 {\n  new Element($r4, $r5, $r7)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Element#baseUri(...0)",
        "body": "{\r\n    return searchUpForAttribute(this, BaseUriKey);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Element",
    "methodName": "clearAttributes",
    "signature": "org.jsoup.nodes.Element clearAttributes()",
    "visibility": "public",
    "body": "{\r\n    if (attributes !\u003d null) {\r\n        // keeps internal attributes via iterator\r\n        super.clearAttributes();\r\n        if (attributes.size() \u003d\u003d 0)\r\n            // only remove entirely if no internal attributes\r\n            attributes \u003d null;\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($i0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Element\n  $r1 \u003d Attributes attributes\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  r0.clearAttributes()\n  $r2 \u003d Attributes attributes\u003e\n  $i0 \u003d $r2.size()\n  if ($i0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  Attributes attributes\u003e \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Entities",
    "methodName": "isNamedEntity",
    "signature": "boolean isNamedEntity(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return extended.codepointForName(name) !\u003d empty;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  $r1 \u003d Entities$EscapeMode extended\u003e\n  $i0 \u003d $r1.codepointForName(r0)\n  $i2 \u003d (int) -1\n  if ($i0 \u003d\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Entities",
    "methodName": "isBaseNamedEntity",
    "signature": "boolean isBaseNamedEntity(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return base.codepointForName(name) !\u003d empty;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  $r1 \u003d Entities$EscapeMode base\u003e\n  $i0 \u003d $r1.codepointForName(r0)\n  $i2 \u003d (int) -1\n  if ($i0 \u003d\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Entities",
    "methodName": "getByName",
    "signature": "java.lang.String getByName(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    String val \u003d multipoints.get(name);\r\n    if (val !\u003d null)\r\n        return val;\r\n    int codepoint \u003d extended.codepointForName(name);\r\n    if (codepoint !\u003d empty)\r\n        return new String(new int[] { codepoint }, 0, 1);\r\n    return emptyName;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003d\u003d $i2) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  String\n  $r1 \u003d HashMap multipoints\u003e\n  $r2 \u003d $r1.get(r0)\n  r3 \u003d String) $r2\n  if (r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d Entities$EscapeMode extended\u003e\n  i0 \u003d $r4.codepointForName(r0)\n  $i2 \u003d (int) -1\n  if (i0 \u003d\u003d $i2) goto B3 else B4\n}",
      "B3 {\n  $r7 \u003d String\n  $r6 \u003d newarray (int)[1]\n  $r6[0] \u003d i0\n  new String($r6, 0, 1)\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Entities",
    "methodName": "codepointsForName",
    "signature": "int codepointsForName(java.lang.String,int[])",
    "visibility": "public",
    "body": "{\r\n    String val \u003d multipoints.get(name);\r\n    if (val !\u003d null) {\r\n        codepoints[0] \u003d val.codePointAt(0);\r\n        codepoints[1] \u003d val.codePointAt(1);\r\n        return 2;\r\n    }\r\n    int codepoint \u003d extended.codepointForName(name);\r\n    if (codepoint !\u003d empty) {\r\n        codepoints[0] \u003d codepoint;\r\n        return 1;\r\n    }\r\n    return 0;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003d\u003d $i4) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  String\n  r5 :\u003d @parameter1: int[]\n  $r1 \u003d HashMap multipoints\u003e\n  $r2 \u003d $r1.get(r0)\n  r3 \u003d String) $r2\n  if (r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d r3.codePointAt(0)\n  r5[0] \u003d $i1\n  $i2 \u003d r3.codePointAt(1)\n  r5[1] \u003d $i2\n  return\n}",
      "B2 {\n  $r4 \u003d Entities$EscapeMode extended\u003e\n  i0 \u003d $r4.codepointForName(r0)\n  $i4 \u003d (int) -1\n  if (i0 \u003d\u003d $i4) goto B3 else B4\n}",
      "B3 {\n  r5[0] \u003d i0\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Entities",
    "methodName": "findPrefix",
    "signature": "java.lang.String findPrefix(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    for (String name : baseSorted) {\r\n        if (input.startsWith(name))\r\n            return name;\r\n    }\r\n    return emptyName;\r\n    // if perf critical, could look at using a Trie vs a scan\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  String\n  $r0 \u003d ArrayList baseSorted\u003e\n  r1 \u003d $r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r3 \u003d String) $r2\n  $z1 \u003d r4.startsWith(r3)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.FormElement",
    "methodName": "elements",
    "signature": "org.jsoup.select.Elements elements()",
    "visibility": "public",
    "body": "{\r\n    // As elements may have been added or removed from the DOM after parse, prepare a new list that unions them:\r\n    // current form children\r\n    Elements els \u003d select(submittable);\r\n    for (Element linkedEl : linkedEls) {\r\n        if (linkedEl.ownerDocument() !\u003d null \u0026\u0026 !els.contains(linkedEl)) {\r\n            // adds previously linked elements, that weren\u0027t previously removed from the DOM\r\n            els.add(linkedEl);\r\n        }\r\n    }\r\n    return els;\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B6",
      "B2 : If($r7 \u003d\u003d null) → B3 | else → B5",
      "B3 : If($z1 !\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  FormElement\n  $r1 \u003d Evaluator submittable\u003e\n  r2 \u003d r0.select($r1)\n  $r3 \u003d Elements linkedEls\u003e\n  r4 \u003d $r3.iterator()\n}",
      "B1 {\n  $z0 \u003d r4.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B6\n}",
      "B2 {\n  $r5 \u003d r4.next()\n  r6 \u003d Element) $r5\n  $r7 \u003d r6.ownerDocument()\n  if ($r7 \u003d\u003d null) goto B3 else B5\n}",
      "B3 {\n  $z1 \u003d r2.contains(r6)\n  if ($z1 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  r2.add(r6)\n}",
      "B5 {\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FormElement#select(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.FormElement",
    "methodName": "submit",
    "signature": "org.jsoup.Connection submit()",
    "visibility": "public",
    "body": "{\r\n    String action \u003d hasAttr(\"action\") ? absUrl(\"action\") : baseUri();\r\n    Validate.notEmpty(action, \"Could not determine a form action URL for submit. Ensure you set a base URI when parsing.\");\r\n    Connection.Method method \u003d attr(\"method\").equalsIgnoreCase(\"POST\") ? Connection.Method.POST : Connection.Method.GET;\r\n    Document owner \u003d ownerDocument();\r\n    Connection connection \u003d owner !\u003d null ? owner.connection().newRequest() : Jsoup.newSession();\r\n    return connection.url(action).data(formData()).method(method);\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B5",
      "B6 : If($r9 \u003d\u003d null) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  FormElement\n  $z0 \u003d r0.hasAttr(\"action\")\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d r0.absUrl(\"action\")\n  goto B3\n}",
      "B2 {\n  $r10 \u003d r0.baseUri()\n}",
      "B3 {\n  r1 \u003d $r10\n  Validate.notEmpty($r10, \"Could not determine a form action URL for submit. Ensure you set a base URI when parsing.\")\n  $r2 \u003d r0.attr(\"method\")\n  $z1 \u003d $r2.equalsIgnoreCase(\"POST\")\n  if ($z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r11 \u003d Connection$Method POST\u003e\n  goto B6\n}",
      "B5 {\n  $r11 \u003d Connection$Method GET\u003e\n}",
      "B6 {\n  r3 \u003d $r11\n  $r9 \u003d r0.ownerDocument()\n  if ($r9 \u003d\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r8 \u003d $r9.connection()\n  $r12 \u003d $r8.newRequest()\n  goto B9\n}",
      "B8 {\n  $r12 \u003d Jsoup.newSession()\n}",
      "B9 {\n  $r5 \u003d $r12.url(r1)\n  $r4 \u003d r0.formData()\n  $r6 \u003d $r5.data($r4)\n  $r7 \u003d $r6.method(r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FormElement#absUrl(...1)",
        "body": "(source not found)"
      },
      {
        "name": "FormElement#baseUri(...0)",
        "body": "(source not found)"
      },
      {
        "name": "FormElement#ownerDocument(...0)",
        "body": "(source not found)"
      },
      {
        "name": "FormElement#hasAttr(...1)",
        "body": "(source not found)"
      },
      {
        "name": "FormElement#formData(...0)",
        "body": "{\r\n    ArrayList\u003cConnection.KeyVal\u003e data \u003d new ArrayList\u003c\u003e();\r\n    // iterate the form control elements and accumulate their values\r\n    Elements formEls \u003d elements();\r\n    for (Element el : formEls) {\r\n        // contents are form listable, superset of submitable\r\n        if (!el.tag().isFormSubmittable())\r\n            continue;\r\n        // skip disabled form inputs\r\n        if (el.hasAttr(\"disabled\"))\r\n            continue;\r\n        String name \u003d el.attr(\"name\");\r\n        if (name.length() \u003d\u003d 0)\r\n            continue;\r\n        String type \u003d el.attr(\"type\");\r\n        // browsers don\u0027t submit these\r\n        if (type.equalsIgnoreCase(\"button\") || type.equalsIgnoreCase(\"image\"))\r\n            continue;\r\n        if (el.nameIs(\"select\")) {\r\n            Elements options \u003d el.select(\"option[selected]\");\r\n            boolean set \u003d false;\r\n            for (Element option : options) {\r\n                data.add(HttpConnection.KeyVal.create(name, option.val()));\r\n                set \u003d true;\r\n            }\r\n            if (!set) {\r\n                Element option \u003d el.selectFirst(\"option\");\r\n                if (option !\u003d null)\r\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\r\n            }\r\n        } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\r\n            // only add checkbox or radio if they have the checked attribute\r\n            if (el.hasAttr(\"checked\")) {\r\n                final String val \u003d el.val().length() \u003e 0 ? el.val() : \"on\";\r\n                data.add(HttpConnection.KeyVal.create(name, val));\r\n            }\r\n        } else {\r\n            data.add(HttpConnection.KeyVal.create(name, el.val()));\r\n        }\r\n    }\r\n    return data;\r\n}"
      },
      {
        "name": "FormElement#attr(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.FormElement",
    "methodName": "formData",
    "signature": "java.util.List formData()",
    "visibility": "public",
    "body": "{\r\n    ArrayList\u003cConnection.KeyVal\u003e data \u003d new ArrayList\u003c\u003e();\r\n    // iterate the form control elements and accumulate their values\r\n    Elements formEls \u003d elements();\r\n    for (Element el : formEls) {\r\n        // contents are form listable, superset of submitable\r\n        if (!el.tag().isFormSubmittable())\r\n            continue;\r\n        // skip disabled form inputs\r\n        if (el.hasAttr(\"disabled\"))\r\n            continue;\r\n        String name \u003d el.attr(\"name\");\r\n        if (name.length() \u003d\u003d 0)\r\n            continue;\r\n        String type \u003d el.attr(\"type\");\r\n        // browsers don\u0027t submit these\r\n        if (type.equalsIgnoreCase(\"button\") || type.equalsIgnoreCase(\"image\"))\r\n            continue;\r\n        if (el.nameIs(\"select\")) {\r\n            Elements options \u003d el.select(\"option[selected]\");\r\n            boolean set \u003d false;\r\n            for (Element option : options) {\r\n                data.add(HttpConnection.KeyVal.create(name, option.val()));\r\n                set \u003d true;\r\n            }\r\n            if (!set) {\r\n                Element option \u003d el.selectFirst(\"option\");\r\n                if (option !\u003d null)\r\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\r\n            }\r\n        } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\r\n            // only add checkbox or radio if they have the checked attribute\r\n            if (el.hasAttr(\"checked\")) {\r\n                final String val \u003d el.val().length() \u003e 0 ? el.val() : \"on\";\r\n                data.add(HttpConnection.KeyVal.create(name, val));\r\n            }\r\n        } else {\r\n            data.add(HttpConnection.KeyVal.create(name, el.val()));\r\n        }\r\n    }\r\n    return data;\r\n}",
    "nodes": 29,
    "edges": 42,
    "cc": 15,
    "flowSummary": [
      "B1 : If($z9 \u003d\u003d false) → B2 | else → B28",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6",
      "B6 : If($i0 !\u003d 0) → B7 | else → B8",
      "B8 : If($z2 !\u003d 0) → B9 | else → B1",
      "B9 : If($z3 \u003d\u003d false) → B10 | else → B11",
      "B11 : If($z4 \u003d\u003d false) → B12 | else → B19",
      "B13 : If($z8 \u003d\u003d false) → B14 | else → B15",
      "B15 : If(z10 !\u003d 0) → B16 | else → B18",
      "B16 : If(r23 \u003d\u003d null) → B17 | else → B18",
      "B19 : If($z5 !\u003d 0) → B20 | else → B21",
      "B20 : If($z7 \u003d\u003d false) → B21 | else → B26",
      "B21 : If($z6 \u003d\u003d false) → B22 | else → B27",
      "B22 : If($i1 \u003c\u003d 0) → B23 | else → B24"
    ],
    "blockList": [
      "B0 {\n  FormElement\n  $r0 \u003d ArrayList\n  new ArrayList()\n  r2 \u003d r1.elements()\n  r3 \u003d r2.iterator()\n}",
      "B1 {\n  $z9 \u003d r3.hasNext()\n  if ($z9 \u003d\u003d false) goto B2 else B28\n}",
      "B2 {\n  $r4 \u003d r3.next()\n  r5 \u003d Element) $r4\n  $r6 \u003d r5.tag()\n  $z0 \u003d $r6.isFormSubmittable()\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  goto B1\n}",
      "B4 {\n  $z1 \u003d r5.hasAttr(\"disabled\")\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  goto B1\n}",
      "B6 {\n  r7 \u003d r5.attr(\"name\")\n  $i0 \u003d r7.length()\n  if ($i0 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  goto B1\n}",
      "B8 {\n  r8 \u003d r5.attr(\"type\")\n  $z2 \u003d r8.equalsIgnoreCase(\"button\")\n  if ($z2 !\u003d 0) goto B9 else B1\n}",
      "B9 {\n  $z3 \u003d r8.equalsIgnoreCase(\"image\")\n  if ($z3 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  goto B1\n}",
      "B11 {\n  $z4 \u003d r5.nameIs(\"select\")\n  if ($z4 \u003d\u003d false) goto B12 else B19\n}",
      "B12 {\n  r21 \u003d r5.select(\"optionselected\")\n  z10 \u003d 0\n  r22 \u003d r21.iterator()\n}",
      "B13 {\n  $z8 \u003d r22.hasNext()\n  if ($z8 \u003d\u003d false) goto B14 else B15\n}",
      "B14 {\n  $r17 \u003d r22.next()\n  r18 \u003d Element) $r17\n  $r19 \u003d r18.val()\n  $r20 \u003d HttpConnection$KeyVal.create(r7, $r19)\n  $r0.add($r20)\n  z10 \u003d 1\n  goto B13\n}",
      "B15 {\n  if (z10 !\u003d 0) goto B16 else B18\n}",
      "B16 {\n  r23 \u003d r5.selectFirst(\"option\")\n  if (r23 \u003d\u003d null) goto B17 else B18\n}",
      "B17 {\n  $r15 \u003d r23.val()\n  $r16 \u003d HttpConnection$KeyVal.create(r7, $r15)\n  $r0.add($r16)\n}",
      "B18 {\n  goto B27\n}",
      "B19 {\n  $r9 \u003d \"checkbox\"\n  $z5 \u003d $r9.equalsIgnoreCase(r8)\n  if ($z5 !\u003d 0) goto B20 else B21\n}",
      "B20 {\n  $r12 \u003d \"radio\"\n  $z7 \u003d $r12.equalsIgnoreCase(r8)\n  if ($z7 \u003d\u003d false) goto B21 else B26\n}",
      "B21 {\n  $z6 \u003d r5.hasAttr(\"checked\")\n  if ($z6 \u003d\u003d false) goto B22 else B27\n}",
      "B22 {\n  $r10 \u003d r5.val()\n  $i1 \u003d $r10.length()\n  if ($i1 \u003c\u003d 0) goto B23 else B24\n}",
      "B23 {\n  $r24 \u003d r5.val()\n  goto B25\n}",
      "B24 {\n  $r24 \u003d \"on\"\n}",
      "B25 {\n  $r11 \u003d HttpConnection$KeyVal.create(r7, $r24)\n  $r0.add($r11)\n  goto B27\n}",
      "B26 {\n  $r13 \u003d r5.val()\n  $r14 \u003d HttpConnection$KeyVal.create(r7, $r13)\n  $r0.add($r14)\n}",
      "B27 {\n  goto B1\n}",
      "B28 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B28",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B1",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B1",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B1",
      "B8 --\u003e B9",
      "B8 --\u003e B1",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B1",
      "B11 --\u003e B12",
      "B11 --\u003e B19",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B13",
      "B15 --\u003e B16",
      "B15 --\u003e B18",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e B27",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B21",
      "B20 --\u003e B26",
      "B21 --\u003e B22",
      "B21 --\u003e B27",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B25",
      "B25 --\u003e B27",
      "B26 --\u003e B27",
      "B27 --\u003e B1",
      "B28 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FormElement#elements(...0)",
        "body": "{\r\n    // As elements may have been added or removed from the DOM after parse, prepare a new list that unions them:\r\n    // current form children\r\n    Elements els \u003d select(submittable);\r\n    for (Element linkedEl : linkedEls) {\r\n        if (linkedEl.ownerDocument() !\u003d null \u0026\u0026 !els.contains(linkedEl)) {\r\n            // adds previously linked elements, that weren\u0027t previously removed from the DOM\r\n            els.add(linkedEl);\r\n        }\r\n    }\r\n    return els;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.NodeIterator",
    "methodName": "restart",
    "signature": "void restart(org.jsoup.nodes.Node)",
    "visibility": "public",
    "body": "{\r\n    if (type.isInstance(start))\r\n        //noinspection unchecked\r\n        // first next() will be the start node\r\n        next \u003d (T) start;\r\n    root \u003d previous \u003d current \u003d start;\r\n    currentParent \u003d current.parent();\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NodeIterator\n  Node\n  $r2 \u003d Class type\u003e\n  $z0 \u003d $r2.isInstance(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  Node next\u003e \u003d r1\n}",
      "B2 {\n  Node current\u003e \u003d r1\n  Node previous\u003e \u003d r1\n  Node root\u003e \u003d r1\n  $r3 \u003d Node current\u003e\n  $r4 \u003d $r3.parent()\n  Node currentParent\u003e \u003d $r4\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.NodeIterator",
    "methodName": "hasNext",
    "signature": "boolean hasNext()",
    "visibility": "public",
    "body": "{\r\n    maybeFindNext();\r\n    return next !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NodeIterator\n  r0.maybeFindNext()\n  $r1 \u003d Node next\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NodeIterator#maybeFindNext(...0)",
        "body": "{\r\n    if (next !\u003d null)\r\n        return;\r\n    //  change detected (removed or replaced), redo from previous\r\n    if (currentParent !\u003d null \u0026\u0026 !current.hasParent())\r\n        current \u003d previous;\r\n    next \u003d findNextNode();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.NodeIterator",
    "methodName": "next",
    "signature": "org.jsoup.nodes.Node next()",
    "visibility": "public",
    "body": "{\r\n    maybeFindNext();\r\n    if (next \u003d\u003d null)\r\n        throw new NoSuchElementException();\r\n    T result \u003d next;\r\n    previous \u003d current;\r\n    current \u003d next;\r\n    currentParent \u003d current.parent();\r\n    next \u003d null;\r\n    return result;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NodeIterator\n  r0.maybeFindNext()\n  $r1 \u003d Node next\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r7\n}",
      "B2 {\n  r2 \u003d Node next\u003e\n  $r3 \u003d Node current\u003e\n  Node previous\u003e \u003d $r3\n  $r4 \u003d Node next\u003e\n  Node current\u003e \u003d $r4\n  $r5 \u003d Node current\u003e\n  $r6 \u003d $r5.parent()\n  Node currentParent\u003e \u003d $r6\n  Node next\u003e \u003d null\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NodeIterator#maybeFindNext(...0)",
        "body": "{\r\n    if (next !\u003d null)\r\n        return;\r\n    //  change detected (removed or replaced), redo from previous\r\n    if (currentParent !\u003d null \u0026\u0026 !current.hasParent())\r\n        current \u003d previous;\r\n    next \u003d findNextNode();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Range",
    "methodName": "isTracked",
    "signature": "boolean isTracked()",
    "visibility": "public",
    "body": "{\r\n    return this !\u003d Untracked;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Range\n  $r1 \u003d Range Untracked\u003e\n  if (r0 \u003d\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.nodes.Range",
    "methodName": "isImplicit",
    "signature": "boolean isImplicit()",
    "visibility": "public",
    "body": "{\r\n    if (!isTracked())\r\n        return false;\r\n    return start.equals(end);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Range\n  $z0 \u003d r0.isTracked()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d Range$Position start\u003e\n  $r1 \u003d Range$Position end\u003e\n  $z1 \u003d $r2.equals($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Range#isTracked(...0)",
        "body": "{\r\n    return this !\u003d Untracked;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.Range",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (this \u003d\u003d o)\r\n        return true;\r\n    if (o \u003d\u003d null || getClass() !\u003d o.getClass())\r\n        return false;\r\n    Range range \u003d (Range) o;\r\n    if (!start.equals(range.start))\r\n        return false;\r\n    return end.equals(range.end);\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r1 \u003d\u003d null) → B3 | else → B4",
      "B3 : If($r3 \u003d\u003d $r2) → B4 | else → B5",
      "B5 : If($z0 !\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Range\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d r0.getClass()\n  $r2 \u003d r1.getClass()\n  if ($r3 \u003d\u003d $r2) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  r4 \u003d Range) r1\n  $r6 \u003d Range$Position start\u003e\n  $r5 \u003d Range$Position start\u003e\n  $z0 \u003d $r6.equals($r5)\n  if ($z0 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $r8 \u003d Range$Position end\u003e\n  $r7 \u003d Range$Position end\u003e\n  $z1 \u003d $r8.equals($r7)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Range#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.nodes.TextNode",
    "methodName": "splitText",
    "signature": "org.jsoup.nodes.TextNode splitText(int)",
    "visibility": "public",
    "body": "{\r\n    final String text \u003d coreValue();\r\n    Validate.isTrue(offset \u003e\u003d 0, \"Split offset must be not be negative\");\r\n    Validate.isTrue(offset \u003c text.length(), \"Split offset must not be greater than current text length\");\r\n    String head \u003d text.substring(0, offset);\r\n    String tail \u003d text.substring(offset);\r\n    text(head);\r\n    TextNode tailNode \u003d new TextNode(tail);\r\n    if (parentNode !\u003d null)\r\n        parentNode.addChildren(siblingIndex() + 1, tailNode);\r\n    return tailNode;\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B2",
      "B3 : If(i0 \u003e\u003d $i1) → B4 | else → B5",
      "B6 : If($r3 \u003d\u003d null) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  TextNode\n  i0 :\u003d @parameter0: int\n  r1 \u003d r0.coreValue()\n  if (i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  Validate.isTrue($z0, \"Split offset must be not be negative\")\n  $i1 \u003d r1.length()\n  if (i0 \u003e\u003d $i1) goto B4 else B5\n}",
      "B4 {\n  $z1 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z1 \u003d 0\n}",
      "B6 {\n  Validate.isTrue($z1, \"Split offset must not be greater than current text length\")\n  $r6 \u003d r1.substring(0, i0)\n  $r7 \u003d r1.substring(i0)\n  r0.text($r6)\n  $r2 \u003d TextNode\n  new TextNode($r7)\n  $r3 \u003d Element parentNode\u003e\n  if ($r3 \u003d\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r4 \u003d Element parentNode\u003e\n  $i2 \u003d r0.siblingIndex()\n  $i3 \u003d $i2 + 1\n  $r5 \u003d Node)[1]\n  $r5[0] \u003d $r2\n  $r4.addChildren($i3, $r5)\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TextNode#siblingIndex(...0)",
        "body": "(source not found)"
      },
      {
        "name": "TextNode#coreValue(...0)",
        "body": "(source not found)"
      },
      {
        "name": "TextNode#text(...1)",
        "body": "{\r\n    coreValue(text);\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.parser.CharacterReader",
    "methodName": "trackNewlines",
    "signature": "void trackNewlines(boolean)",
    "visibility": "public",
    "body": "{\r\n    if (track \u0026\u0026 newlinePositions \u003d\u003d null) {\r\n        // rough guess of likely count\r\n        newlinePositions \u003d new ArrayList\u003c\u003e(BufferSize / 80);\r\n        // first pass when enabled; subsequently called during bufferUp\r\n        scanBufferForNewlines();\r\n    } else if (!track)\r\n        newlinePositions \u003d null;\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($r1 !\u003d null) → B2 | else → B3",
      "B3 : If(z0 !\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  CharacterReader\n  z0 :\u003d @parameter0: boolean\n  if (z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $r1 \u003d ArrayList newlinePositions\u003e\n  if ($r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d ArrayList\n  new ArrayList(25)\n  ArrayList newlinePositions\u003e \u003d $r2\n  r0.scanBufferForNewlines()\n  goto B5\n}",
      "B3 {\n  if (z0 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  ArrayList newlinePositions\u003e \u003d null\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CharacterReader#scanBufferForNewlines(...0)",
        "body": "{\r\n    if (!isTrackNewlines())\r\n        return;\r\n    if (newlinePositions.size() \u003e 0) {\r\n        // work out the line number that we have read up to (as we have likely scanned past this point)\r\n        int index \u003d lineNumIndex(consumed);\r\n        // first line\r\n        if (index \u003d\u003d -1)\r\n            index \u003d 0;\r\n        int linePos \u003d newlinePositions.get(index);\r\n        // the num lines we\u0027ve read up to\r\n        lineNumberOffset +\u003d index;\r\n        newlinePositions.clear();\r\n        // roll the last read pos to first, for cursor num after buffer\r\n        newlinePositions.add(linePos);\r\n    }\r\n    for (int i \u003d bufPos; i \u003c bufLength; i++) {\r\n        if (charBuf[i] \u003d\u003d \u0027\\n\u0027)\r\n            newlinePositions.add(1 + consumed + i);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.parser.CharacterReader",
    "methodName": "isTrackNewlines",
    "signature": "boolean isTrackNewlines()",
    "visibility": "public",
    "body": "{\r\n    return newlinePositions !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharacterReader\n  $r1 \u003d ArrayList newlinePositions\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.parser.CharacterReader",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty()",
    "visibility": "public",
    "body": "{\r\n    bufferUp();\r\n    return bufPos \u003e\u003d bufLength;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003c $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharacterReader\n  r0.bufferUp()\n  $i1 \u003d CharacterReader: int bufPos\u003e\n  $i0 \u003d CharacterReader: int bufLength\u003e\n  if ($i1 \u003c $i0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CharacterReader#bufferUp(...0)",
        "body": "{\r\n    if (readFully || bufPos \u003c fillPoint || bufMark !\u003d -1)\r\n        return;\r\n    // structured so bufferUp may become an intrinsic candidate\r\n    doBufferUp();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.parser.CharacterReader",
    "methodName": "current",
    "signature": "char current()",
    "visibility": "public",
    "body": "{\r\n    bufferUp();\r\n    return isEmptyNoBufferUp() ? EOF : charBuf[bufPos];\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharacterReader\n  r0.bufferUp()\n  $z0 \u003d r0.isEmptyNoBufferUp()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $c1 \u003d 65535\n  goto B3\n}",
      "B2 {\n  $r1 \u003d CharacterReader: char[] charBuf\u003e\n  $i0 \u003d CharacterReader: int bufPos\u003e\n  $c1 \u003d $r1[$i0]\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CharacterReader#isEmptyNoBufferUp(...0)",
        "body": "{\r\n    return bufPos \u003e\u003d bufLength;\r\n}"
      },
      {
        "name": "CharacterReader#bufferUp(...0)",
        "body": "{\r\n    if (readFully || bufPos \u003c fillPoint || bufMark !\u003d -1)\r\n        return;\r\n    // structured so bufferUp may become an intrinsic candidate\r\n    doBufferUp();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.parser.CharacterReader",
    "methodName": "consume",
    "signature": "char consume()",
    "visibility": "public",
    "body": "{\r\n    bufferUp();\r\n    char val \u003d isEmptyNoBufferUp() ? EOF : charBuf[bufPos];\r\n    bufPos++;\r\n    return val;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharacterReader\n  r0.bufferUp()\n  $z0 \u003d r0.isEmptyNoBufferUp()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $c3 \u003d 65535\n  goto B3\n}",
      "B2 {\n  $r1 \u003d CharacterReader: char[] charBuf\u003e\n  $i0 \u003d CharacterReader: int bufPos\u003e\n  $c3 \u003d $r1[$i0]\n}",
      "B3 {\n  $i1 \u003d CharacterReader: int bufPos\u003e\n  $i2 \u003d $i1 + 1\n  CharacterReader: int bufPos\u003e \u003d $i2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CharacterReader#isEmptyNoBufferUp(...0)",
        "body": "{\r\n    return bufPos \u003e\u003d bufLength;\r\n}"
      },
      {
        "name": "CharacterReader#bufferUp(...0)",
        "body": "{\r\n    if (readFully || bufPos \u003c fillPoint || bufMark !\u003d -1)\r\n        return;\r\n    // structured so bufferUp may become an intrinsic candidate\r\n    doBufferUp();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.parser.CharacterReader",
    "methodName": "consumeTo",
    "signature": "java.lang.String consumeTo(char)",
    "visibility": "public",
    "body": "{\r\n    int offset \u003d nextIndexOf(c);\r\n    if (offset !\u003d -1) {\r\n        String consumed \u003d cacheString(charBuf, stringCache, bufPos, offset);\r\n        bufPos +\u003d offset;\r\n        return consumed;\r\n    } else {\r\n        return consumeToEnd();\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i1 \u003d\u003d $i6) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharacterReader\n  c0 :\u003d @parameter0: char\n  i1 \u003d r0.nextIndexOf(c0)\n  $i6 \u003d (int) -1\n  if (i1 \u003d\u003d $i6) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d CharacterReader: char[] charBuf\u003e\n  $r2 \u003d String[] stringCache\u003e\n  $i2 \u003d CharacterReader: int bufPos\u003e\n  r4 \u003d CharacterReader.cacheString($r3, $r2, $i2, i1)\n  $i3 \u003d CharacterReader: int bufPos\u003e\n  $i4 \u003d $i3 + i1\n  CharacterReader: int bufPos\u003e \u003d $i4\n  return\n}",
      "B2 {\n  $r1 \u003d r0.consumeToEnd()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CharacterReader#nextIndexOf(...1)",
        "body": "{\r\n    // doesn\u0027t handle scanning for surrogates\r\n    bufferUp();\r\n    for (int i \u003d bufPos; i \u003c bufLength; i++) {\r\n        if (c \u003d\u003d charBuf[i])\r\n            return i - bufPos;\r\n    }\r\n    return -1;\r\n}"
      },
      {
        "name": "CharacterReader#cacheString(...4)",
        "body": "{\r\n    if (// don\u0027t cache strings that are too big\r\n    count \u003e MaxStringCacheLen)\r\n        return new String(charBuf, start, count);\r\n    if (count \u003c 1)\r\n        return \"\";\r\n    // calculate hash:\r\n    int hash \u003d 0;\r\n    int end \u003d count + start;\r\n    for (int i \u003d start; i \u003c end; i++) {\r\n        hash \u003d 31 * hash + charBuf[i];\r\n    }\r\n    // get from cache\r\n    final int index \u003d hash \u0026 StringCacheSize - 1;\r\n    String cached \u003d stringCache[index];\r\n    if (// positive hit\r\n    cached !\u003d null \u0026\u0026 rangeEquals(charBuf, start, count, cached))\r\n        return cached;\r\n    else {\r\n        cached \u003d new String(charBuf, start, count);\r\n        // add or replace, assuming most recently used are most likely to recur next\r\n        stringCache[index] \u003d cached;\r\n    }\r\n    return cached;\r\n}"
      },
      {
        "name": "CharacterReader#consumeToEnd(...0)",
        "body": "{\r\n    bufferUp();\r\n    String data \u003d cacheString(charBuf, stringCache, bufPos, bufLength - bufPos);\r\n    bufPos \u003d bufLength;\r\n    return data;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.parser.CharacterReader",
    "methodName": "consumeTo",
    "signature": "java.lang.String consumeTo(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    int offset \u003d nextIndexOf(seq);\r\n    if (offset !\u003d -1) {\r\n        String consumed \u003d cacheString(charBuf, stringCache, bufPos, offset);\r\n        bufPos +\u003d offset;\r\n        return consumed;\r\n    } else if (bufLength - bufPos \u003c seq.length()) {\r\n        // nextIndexOf() did a bufferUp(), so if the buffer is shorter than the search string, we must be at EOF\r\n        return consumeToEnd();\r\n    } else {\r\n        // the string we\u0027re looking for may be straddling a buffer boundary, so keep (length - 1) characters\r\n        // unread in case they contain the beginning of the search string\r\n        int endPos \u003d bufLength - seq.length() + 1;\r\n        String consumed \u003d cacheString(charBuf, stringCache, bufPos, endPos - bufPos);\r\n        bufPos \u003d endPos;\r\n        return consumed;\r\n    }\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 \u003d\u003d $i16) → B1 | else → B2",
      "B2 : If($i4 \u003e\u003d $i3) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CharacterReader\n  String\n  i0 \u003d r0.nextIndexOf(r1)\n  $i16 \u003d (int) -1\n  if (i0 \u003d\u003d $i16) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d CharacterReader: char[] charBuf\u003e\n  $r6 \u003d String[] stringCache\u003e\n  $i11 \u003d CharacterReader: int bufPos\u003e\n  r8 \u003d CharacterReader.cacheString($r7, $r6, $i11, i0)\n  $i12 \u003d CharacterReader: int bufPos\u003e\n  $i13 \u003d $i12 + i0\n  CharacterReader: int bufPos\u003e \u003d $i13\n  return\n}",
      "B2 {\n  $i2 \u003d CharacterReader: int bufLength\u003e\n  $i1 \u003d CharacterReader: int bufPos\u003e\n  $i4 \u003d $i2 - $i1\n  $i3 \u003d r1.length()\n  if ($i4 \u003e\u003d $i3) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d r0.consumeToEnd()\n  return\n}",
      "B4 {\n  $i5 \u003d CharacterReader: int bufLength\u003e\n  $i6 \u003d r1.length()\n  $i7 \u003d $i5 - $i6\n  i14 \u003d $i7 + 1\n  $r3 \u003d CharacterReader: char[] charBuf\u003e\n  $r2 \u003d String[] stringCache\u003e\n  $i10 \u003d CharacterReader: int bufPos\u003e\n  $i8 \u003d CharacterReader: int bufPos\u003e\n  $i9 \u003d i14 - $i8\n  r4 \u003d CharacterReader.cacheString($r3, $r2, $i10, $i9)\n  CharacterReader: int bufPos\u003e \u003d i14\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CharacterReader#nextIndexOf(...1)",
        "body": "{\r\n    // doesn\u0027t handle scanning for surrogates\r\n    bufferUp();\r\n    for (int i \u003d bufPos; i \u003c bufLength; i++) {\r\n        if (c \u003d\u003d charBuf[i])\r\n            return i - bufPos;\r\n    }\r\n    return -1;\r\n}"
      },
      {
        "name": "CharacterReader#cacheString(...4)",
        "body": "{\r\n    if (// don\u0027t cache strings that are too big\r\n    count \u003e MaxStringCacheLen)\r\n        return new String(charBuf, start, count);\r\n    if (count \u003c 1)\r\n        return \"\";\r\n    // calculate hash:\r\n    int hash \u003d 0;\r\n    int end \u003d count + start;\r\n    for (int i \u003d start; i \u003c end; i++) {\r\n        hash \u003d 31 * hash + charBuf[i];\r\n    }\r\n    // get from cache\r\n    final int index \u003d hash \u0026 StringCacheSize - 1;\r\n    String cached \u003d stringCache[index];\r\n    if (// positive hit\r\n    cached !\u003d null \u0026\u0026 rangeEquals(charBuf, start, count, cached))\r\n        return cached;\r\n    else {\r\n        cached \u003d new String(charBuf, start, count);\r\n        // add or replace, assuming most recently used are most likely to recur next\r\n        stringCache[index] \u003d cached;\r\n    }\r\n    return cached;\r\n}"
      },
      {
        "name": "CharacterReader#consumeToEnd(...0)",
        "body": "{\r\n    bufferUp();\r\n    String data \u003d cacheString(charBuf, stringCache, bufPos, bufLength - bufPos);\r\n    bufPos \u003d bufLength;\r\n    return data;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.parser.CharacterReader",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    if (bufLength - bufPos \u003c 0)\r\n        return \"\";\r\n    return new String(charBuf, bufPos, bufLength - bufPos);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i2 \u003e\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharacterReader\n  $i1 \u003d CharacterReader: int bufLength\u003e\n  $i0 \u003d CharacterReader: int bufPos\u003e\n  $i2 \u003d $i1 - $i0\n  if ($i2 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d String\n  $r2 \u003d CharacterReader: char[] charBuf\u003e\n  $i6 \u003d CharacterReader: int bufPos\u003e\n  $i4 \u003d CharacterReader: int bufLength\u003e\n  $i3 \u003d CharacterReader: int bufPos\u003e\n  $i5 \u003d $i4 - $i3\n  new String($r2, $i6, $i5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.parser.Parser",
    "methodName": "isTrackErrors",
    "signature": "boolean isTrackErrors()",
    "visibility": "public",
    "body": "{\r\n    return errors.getMaxSize() \u003e 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Parser\n  $r1 \u003d ParseErrorList errors\u003e\n  $i0 \u003d $r1.getMaxSize()\n  if ($i0 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.parser.Parser",
    "methodName": "setTrackErrors",
    "signature": "org.jsoup.parser.Parser setTrackErrors(int)",
    "visibility": "public",
    "body": "{\r\n    errors \u003d maxErrors \u003e 0 ? ParseErrorList.tracking(maxErrors) : ParseErrorList.noTracking();\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Parser\n  i0 :\u003d @parameter0: int\n  if (i0 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ParseErrorList.tracking(i0)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d ParseErrorList.noTracking()\n}",
      "B3 {\n  ParseErrorList errors\u003e \u003d $r1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.parser.Parser",
    "methodName": "tagSet",
    "signature": "org.jsoup.parser.TagSet tagSet()",
    "visibility": "public",
    "body": "{\r\n    if (tagSet \u003d\u003d null)\r\n        tagSet \u003d treeBuilder.defaultTagSet();\r\n    return tagSet;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Parser\n  $r1 \u003d TagSet tagSet\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d TreeBuilder treeBuilder\u003e\n  $r4 \u003d $r3.defaultTagSet()\n  TagSet tagSet\u003e \u003d $r4\n}",
      "B2 {\n  $r2 \u003d TagSet tagSet\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.parser.Parser",
    "methodName": "parseBodyFragment",
    "signature": "org.jsoup.nodes.Document parseBodyFragment(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    Document doc \u003d Document.createShell(baseUri);\r\n    Element body \u003d doc.body();\r\n    List\u003cNode\u003e nodeList \u003d parseFragment(bodyHtml, body, baseUri);\r\n    // the node list gets modified when re-parented\r\n    Node[] nodes \u003d nodeList.toArray(new Node[0]);\r\n    for (int i \u003d nodes.length - 1; i \u003e 0; i--) {\r\n        nodes[i].remove();\r\n    }\r\n    for (Node node : nodes) {\r\n        body.appendChild(node);\r\n    }\r\n    return doc;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i2 \u003c\u003d 0) → B2 | else → B3",
      "B4 : If(i3 \u003e\u003d i1) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  r1 \u003d Document.createShell(r0)\n  r2 \u003d r1.body()\n  r4 \u003d Parser.parseFragment(r3, r2, r0)\n  $r5 \u003d Node)[0]\n  $r6 \u003d r4.toArray($r5)\n  r7 \u003d Node[]) $r6\n  $i0 \u003d lengthof r7\n  i2 \u003d $i0 - 1\n}",
      "B1 {\n  if (i2 \u003c\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r9 \u003d r7[i2]\n  $r9.remove()\n  $i5 \u003d (int) -1\n  i2 \u003d i2 + $i5\n  goto B1\n}",
      "B3 {\n  i1 \u003d lengthof r7\n  i3 \u003d 0\n}",
      "B4 {\n  if (i3 \u003e\u003d i1) goto B5 else B6\n}",
      "B5 {\n  r8 \u003d r7[i3]\n  r2.appendChild(r8)\n  i3 \u003d i3 + 1\n  goto B4\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Parser#parseFragment(...3)",
        "body": "{\r\n    HtmlTreeBuilder treeBuilder \u003d new HtmlTreeBuilder();\r\n    return treeBuilder.parseFragment(new StringReader(fragmentHtml), context, baseUri, new Parser(treeBuilder));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.parser.ParseSettings",
    "methodName": "normalizeTag",
    "signature": "java.lang.String normalizeTag(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    name \u003d name.trim();\r\n    if (!preserveTagCase)\r\n        name \u003d lowerCase(name);\r\n    return name;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ParseSettings\n  String\n  r2 \u003d r1.trim()\n  $z0 \u003d ParseSettings: boolean preserveTagCase\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r2 \u003d Normalizer.lowerCase(r2)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ParseSettings#lowerCase(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.parser.ParseSettings",
    "methodName": "normalizeAttribute",
    "signature": "java.lang.String normalizeAttribute(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    name \u003d name.trim();\r\n    if (!preserveAttributeCase)\r\n        name \u003d lowerCase(name);\r\n    return name;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ParseSettings\n  String\n  r2 \u003d r1.trim()\n  $z0 \u003d ParseSettings: boolean preserveAttributeCase\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r2 \u003d Normalizer.lowerCase(r2)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ParseSettings#lowerCase(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.parser.StreamParser",
    "methodName": "selectFirst",
    "signature": "org.jsoup.nodes.Element selectFirst(org.jsoup.select.Evaluator)",
    "visibility": "public",
    "body": "{\r\n    final Document doc \u003d document();\r\n    // run the query on the existing (partial) doc first, as there may be a hit already parsed\r\n    Element first \u003d doc.selectFirst(eval);\r\n    if (first !\u003d null)\r\n        return first;\r\n    return selectNext(eval);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StreamParser\n  Evaluator\n  r1 \u003d r0.document()\n  r3 \u003d r1.selectFirst(r2)\n  if (r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d r0.selectNext(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StreamParser#selectNext(...1)",
        "body": "{\r\n    return selectNext(Selector.evaluatorOf(query));\r\n}"
      },
      {
        "name": "StreamParser#document(...0)",
        "body": "{\r\n    document \u003d treeBuilder.doc;\r\n    Validate.notNull(document, \"Must run parse() before calling.\");\r\n    return document;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.parser.Tag",
    "methodName": "prefix",
    "signature": "java.lang.String prefix()",
    "visibility": "public",
    "body": "{\r\n    int pos \u003d tagName.indexOf(\u0027:\u0027);\r\n    if (pos \u003d\u003d -1)\r\n        return \"\";\r\n    else\r\n        return tagName.substring(0, pos);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 !\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Tag\n  $r1 \u003d String tagName\u003e\n  i0 \u003d $r1.indexOf(58)\n  $i2 \u003d (int) -1\n  if (i0 !\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d String tagName\u003e\n  $r3 \u003d $r2.substring(0, i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.parser.Tag",
    "methodName": "localName",
    "signature": "java.lang.String localName()",
    "visibility": "public",
    "body": "{\r\n    int pos \u003d tagName.indexOf(\u0027:\u0027);\r\n    if (pos \u003d\u003d -1)\r\n        return tagName;\r\n    else\r\n        return tagName.substring(pos + 1);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 !\u003d $i3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Tag\n  $r1 \u003d String tagName\u003e\n  i0 \u003d $r1.indexOf(58)\n  $i3 \u003d (int) -1\n  if (i0 !\u003d $i3) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d String tagName\u003e\n  return\n}",
      "B2 {\n  $r2 \u003d String tagName\u003e\n  $i1 \u003d i0 + 1\n  $r3 \u003d $r2.substring($i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.parser.Tag",
    "methodName": "is",
    "signature": "boolean is(int)",
    "visibility": "public",
    "body": "{\r\n    return (options \u0026 option) !\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Tag\n  i0 :\u003d @parameter0: int\n  $i1 \u003d Tag: int options\u003e\n  $i2 \u003d $i1 \u0026 i0\n  if ($i2 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.parser.Tag",
    "methodName": "clear",
    "signature": "org.jsoup.parser.Tag clear(int)",
    "visibility": "public",
    "body": "{\r\n    options \u0026\u003d ~option;\r\n    // considered known if touched, unless explicitly clearing known\r\n    if (option !\u003d Tag.Known)\r\n        options |\u003d Tag.Known;\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003d\u003d $i4) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Tag\n  i0 :\u003d @parameter0: int\n  $i2 \u003d Tag: int options\u003e\n  $i9 \u003d (int) -1\n  $i1 \u003d i0 ^ $i9\n  $i3 \u003d $i2 \u0026 $i1\n  Tag: int options\u003e \u003d $i3\n  $i4 \u003d Tag: int Known\u003e\n  if (i0 \u003d\u003d $i4) goto B1 else B2\n}",
      "B1 {\n  $i6 \u003d Tag: int options\u003e\n  $i5 \u003d Tag: int Known\u003e\n  $i7 \u003d $i6 | $i5\n  Tag: int options\u003e \u003d $i7\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.parser.Tag",
    "methodName": "isBlock",
    "signature": "boolean isBlock()",
    "visibility": "public",
    "body": "{\r\n    return (options \u0026 Block) !\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Tag\n  $i1 \u003d Tag: int options\u003e\n  $i0 \u003d Tag: int Block\u003e\n  $i2 \u003d $i1 \u0026 $i0\n  if ($i2 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.parser.Tag",
    "methodName": "formatAsBlock",
    "signature": "boolean formatAsBlock()",
    "visibility": "public",
    "body": "{\r\n    return (options \u0026 InlineContainer) !\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Tag\n  $i1 \u003d Tag: int options\u003e\n  $i0 \u003d Tag: int InlineContainer\u003e\n  $i2 \u003d $i1 \u0026 $i0\n  if ($i2 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.parser.Tag",
    "methodName": "isInline",
    "signature": "boolean isInline()",
    "visibility": "public",
    "body": "{\r\n    return (options \u0026 Block) \u003d\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Tag\n  $i1 \u003d Tag: int options\u003e\n  $i0 \u003d Tag: int Block\u003e\n  $i2 \u003d $i1 \u0026 $i0\n  if ($i2 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.parser.Tag",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty()",
    "visibility": "public",
    "body": "{\r\n    return (options \u0026 Void) !\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Tag\n  $i1 \u003d Tag: int options\u003e\n  $i0 \u003d Tag: int Void\u003e\n  $i2 \u003d $i1 \u0026 $i0\n  if ($i2 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.parser.Tag",
    "methodName": "isSelfClosing",
    "signature": "boolean isSelfClosing()",
    "visibility": "public",
    "body": "{\r\n    return (options \u0026 SelfClose) !\u003d 0 || (options \u0026 Void) !\u003d 0;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i2 !\u003d 0) → B1 | else → B2",
      "B1 : If($i5 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Tag\n  $i1 \u003d Tag: int options\u003e\n  $i0 \u003d Tag: int SelfClose\u003e\n  $i2 \u003d $i1 \u0026 $i0\n  if ($i2 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $i4 \u003d Tag: int options\u003e\n  $i3 \u003d Tag: int Void\u003e\n  $i5 \u003d $i4 \u0026 $i3\n  if ($i5 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.parser.Tag",
    "methodName": "isKnownTag",
    "signature": "boolean isKnownTag()",
    "visibility": "public",
    "body": "{\r\n    return (options \u0026 Known) !\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Tag\n  $i1 \u003d Tag: int options\u003e\n  $i0 \u003d Tag: int Known\u003e\n  $i2 \u003d $i1 \u0026 $i0\n  if ($i2 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.parser.Tag",
    "methodName": "isKnownTag",
    "signature": "boolean isKnownTag(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return TagSet.HtmlTagSet.get(tagName, NamespaceHtml) !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  $r1 \u003d TagSet HtmlTagSet\u003e\n  $r2 \u003d $r1.get(r0, \"http://www.w3.org/1999/xhtml\")\n  if ($r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.parser.Tag",
    "methodName": "preserveWhitespace",
    "signature": "boolean preserveWhitespace()",
    "visibility": "public",
    "body": "{\r\n    return (options \u0026 PreserveWhitespace) !\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Tag\n  $i1 \u003d Tag: int options\u003e\n  $i0 \u003d Tag: int PreserveWhitespace\u003e\n  $i2 \u003d $i1 \u0026 $i0\n  if ($i2 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.parser.Tag",
    "methodName": "isFormSubmittable",
    "signature": "boolean isFormSubmittable()",
    "visibility": "public",
    "body": "{\r\n    return (options \u0026 FormSubmittable) !\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Tag\n  $i1 \u003d Tag: int options\u003e\n  $i0 \u003d Tag: int FormSubmittable\u003e\n  $i2 \u003d $i1 \u0026 $i0\n  if ($i2 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.parser.Tag",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (this \u003d\u003d o)\r\n        return true;\r\n    if (!(o instanceof Tag))\r\n        return false;\r\n    Tag tag \u003d (Tag) o;\r\n    return Objects.equals(tagName, tag.tagName) \u0026\u0026 Objects.equals(namespace, tag.namespace) \u0026\u0026 Objects.equals(normalName, tag.normalName) \u0026\u0026 options \u003d\u003d tag.options;\r\n}",
    "nodes": 11,
    "edges": 14,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B9",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B9",
      "B6 : If($z3 \u003d\u003d false) → B7 | else → B9",
      "B7 : If($i1 !\u003d $i0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  Tag\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d Tag\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d Tag) r1\n  $r4 \u003d String tagName\u003e\n  $r3 \u003d String tagName\u003e\n  $z1 \u003d Objects.equals($r4, $r3)\n  if ($z1 \u003d\u003d false) goto B5 else B9\n}",
      "B5 {\n  $r6 \u003d String namespace\u003e\n  $r5 \u003d String namespace\u003e\n  $z2 \u003d Objects.equals($r6, $r5)\n  if ($z2 \u003d\u003d false) goto B6 else B9\n}",
      "B6 {\n  $r8 \u003d String normalName\u003e\n  $r7 \u003d String normalName\u003e\n  $z3 \u003d Objects.equals($r8, $r7)\n  if ($z3 \u003d\u003d false) goto B7 else B9\n}",
      "B7 {\n  $i1 \u003d Tag: int options\u003e\n  $i0 \u003d Tag: int options\u003e\n  if ($i1 !\u003d $i0) goto B8 else B9\n}",
      "B8 {\n  $z4 \u003d 1\n  goto B10\n}",
      "B9 {\n  $z4 \u003d 0\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.parser.TagSet",
    "methodName": "get",
    "signature": "org.jsoup.parser.Tag get(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    Validate.notNull(tagName);\r\n    Validate.notNull(namespace);\r\n    // get from our tags\r\n    Map\u003cString, Tag\u003e nsTags \u003d tags.get(namespace);\r\n    if (nsTags !\u003d null) {\r\n        Tag tag \u003d nsTags.get(tagName);\r\n        if (tag !\u003d null) {\r\n            return tag;\r\n        }\r\n    }\r\n    // not found; clone on demand from source if exists\r\n    if (source !\u003d null) {\r\n        Tag tag \u003d source.get(tagName, namespace);\r\n        if (tag !\u003d null) {\r\n            Tag copy \u003d tag.clone();\r\n            doAdd(copy);\r\n            return copy;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r5 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r10 \u003d\u003d null) → B2 | else → B3",
      "B3 : If($r6 \u003d\u003d null) → B4 | else → B6",
      "B4 : If(r11 \u003d\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  TagSet\n  String\n  String\n  Validate.notNull(r0)\n  Validate.notNull(r1)\n  $r3 \u003d Map tags\u003e\n  $r4 \u003d $r3.get(r1)\n  r5 \u003d Map) $r4\n  if (r5 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r9 \u003d r5.get(r0)\n  r10 \u003d Tag) $r9\n  if (r10 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r6 \u003d TagSet source\u003e\n  if ($r6 \u003d\u003d null) goto B4 else B6\n}",
      "B4 {\n  $r7 \u003d TagSet source\u003e\n  r11 \u003d $r7.get(r0, r1)\n  if (r11 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  r8 \u003d r11.clone()\n  r2.doAdd(r8)\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TagSet#doAdd(...1)",
        "body": "{\r\n    if (customizers !\u003d null) {\r\n        for (Consumer\u003cTag\u003e customizer : customizers) {\r\n            customizer.accept(tag);\r\n        }\r\n    }\r\n    tags.computeIfAbsent(tag.namespace, ns -\u003e new HashMap\u003c\u003e()).put(tag.tagName, tag);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.parser.TagSet",
    "methodName": "onNewTag",
    "signature": "org.jsoup.parser.TagSet onNewTag(java.util.function.Consumer)",
    "visibility": "public",
    "body": "{\r\n    Validate.notNull(customizer);\r\n    if (customizers \u003d\u003d null)\r\n        customizers \u003d new ArrayList\u003c\u003e();\r\n    customizers.add(customizer);\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TagSet\n  Consumer\n  Validate.notNull(r0)\n  $r2 \u003d ArrayList customizers\u003e\n  if ($r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d ArrayList\n  new ArrayList()\n  ArrayList customizers\u003e \u003d $r4\n}",
      "B2 {\n  $r3 \u003d ArrayList customizers\u003e\n  $r3.add(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.parser.TagSet",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (!(o instanceof TagSet))\r\n        return false;\r\n    TagSet tagSet \u003d (TagSet) o;\r\n    return Objects.equals(tags, tagSet.tags);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TagSet\n  Object\n  $z0 \u003d TagSet\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r1 \u003d TagSet) r0\n  $r4 \u003d Map tags\u003e\n  $r3 \u003d Map tags\u003e\n  $z1 \u003d Objects.equals($r4, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.parser.TokenQueue",
    "methodName": "advance",
    "signature": "void advance()",
    "visibility": "public",
    "body": "{\r\n    if (!isEmpty())\r\n        reader.advance();\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TokenQueue\n  $z0 \u003d r0.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d CharacterReader reader\u003e\n  $r1.advance()\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenQueue#isEmpty(...0)",
        "body": "{\r\n    return reader.isEmpty();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.parser.TokenQueue",
    "methodName": "matchChomp",
    "signature": "boolean matchChomp(char)",
    "visibility": "public",
    "body": "{\r\n    if (reader.matches(c)) {\r\n        consume();\r\n        return true;\r\n    }\r\n    return false;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TokenQueue\n  c0 :\u003d @parameter0: char\n  $r1 \u003d CharacterReader reader\u003e\n  $z0 \u003d $r1.matches(c0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r0.consume()\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenQueue#consume(...0)",
        "body": "{\r\n    return reader.consume();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.parser.TokenQueue",
    "methodName": "consume",
    "signature": "void consume(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    boolean found \u003d reader.matchConsumeIgnoreCase(seq);\r\n    if (!found)\r\n        throw new IllegalStateException(\"Queue did not match expected sequence\");\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TokenQueue\n  String\n  $r2 \u003d CharacterReader reader\u003e\n  z0 \u003d $r2.matchConsumeIgnoreCase(r1)\n  if (z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IllegalStateException\n  new IllegalStateException(\"Queue did not match expected sequence\")\n  throw $r3\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.parser.TokenQueue",
    "methodName": "consumeToAny",
    "signature": "java.lang.String consumeToAny(java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    StringBuilder sb \u003d StringUtil.borrowBuilder();\r\n    OUT: while (!isEmpty()) {\r\n        for (String s : seq) {\r\n            if (reader.matchesIgnoreCase(s))\r\n                break OUT;\r\n        }\r\n        sb.append(consume());\r\n    }\r\n    return StringUtil.releaseBuilder(sb);\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B1 : If($z0 !\u003d 0) → B2 | else → B8",
      "B3 : If(i2 \u003e\u003d i0) → B4 | else → B7",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  TokenQueue\n  String[]\n  r0 \u003d StringUtil.borrowBuilder()\n}",
      "B1 {\n  $z0 \u003d r1.isEmpty()\n  if ($z0 !\u003d 0) goto B2 else B8\n}",
      "B2 {\n  i0 \u003d lengthof r3\n  i2 \u003d 0\n}",
      "B3 {\n  if (i2 \u003e\u003d i0) goto B4 else B7\n}",
      "B4 {\n  r4 \u003d r3[i2]\n  $r5 \u003d CharacterReader reader\u003e\n  $z1 \u003d $r5.matchesIgnoreCase(r4)\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  goto B8\n}",
      "B6 {\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B7 {\n  $c1 \u003d r1.consume()\n  r0.append($c1)\n  goto B1\n}",
      "B8 {\n  $r2 \u003d StringUtil.releaseBuilder(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B3",
      "B7 --\u003e B1",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenQueue#isEmpty(...0)",
        "body": "{\r\n    return reader.isEmpty();\r\n}"
      },
      {
        "name": "TokenQueue#consume(...0)",
        "body": "{\r\n    return reader.consume();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.parser.TokenQueue",
    "methodName": "chompBalanced",
    "signature": "java.lang.String chompBalanced(char,char)",
    "visibility": "public",
    "body": "{\r\n    StringBuilder accum \u003d StringUtil.borrowBuilder();\r\n    int depth \u003d 0;\r\n    char prev \u003d 0;\r\n    boolean inSingle \u003d false;\r\n    boolean inDouble \u003d false;\r\n    // regex \\Q .. \\E escapes from Pattern.quote()\r\n    boolean inRegexQE \u003d false;\r\n    // mark the initial position to restore if needed\r\n    reader.mark();\r\n    do {\r\n        if (isEmpty())\r\n            break;\r\n        char c \u003d consume();\r\n        if (prev \u003d\u003d Esc) {\r\n            if (c \u003d\u003d \u0027Q\u0027)\r\n                inRegexQE \u003d true;\r\n            else if (c \u003d\u003d \u0027E\u0027)\r\n                inRegexQE \u003d false;\r\n            accum.append(c);\r\n        } else {\r\n            if (c \u003d\u003d \u0027\\\u0027\u0027 \u0026\u0026 c !\u003d open \u0026\u0026 !inDouble)\r\n                inSingle \u003d !inSingle;\r\n            else if (c \u003d\u003d \u0027\"\u0027 \u0026\u0026 c !\u003d open \u0026\u0026 !inSingle)\r\n                inDouble \u003d !inDouble;\r\n            if (inSingle || inDouble || inRegexQE) {\r\n                accum.append(c);\r\n            } else if (c \u003d\u003d open) {\r\n                depth++;\r\n                // don\u0027t include the outer match pair in the return\r\n                if (depth \u003e 1)\r\n                    accum.append(c);\r\n            } else if (c \u003d\u003d close) {\r\n                depth--;\r\n                if (depth \u003e 0)\r\n                    accum.append(c);\r\n            } else {\r\n                accum.append(c);\r\n            }\r\n        }\r\n        prev \u003d c;\r\n    } while (depth \u003e 0);\r\n    String out \u003d StringUtil.releaseBuilder(accum);\r\n    if (depth \u003e 0) {\r\n        // ran out of queue before seeing enough )\r\n        // restore position if we don\u0027t have a balanced string\r\n        reader.rewindToMark();\r\n        Validate.fail(\"Did not find balanced marker at \u0027\" + out + \"\u0027\");\r\n    }\r\n    return out;\r\n}",
    "nodes": 38,
    "edges": 58,
    "cc": 22,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3",
      "B3 : If(i3 !\u003d 92) → B4 | else → B9",
      "B4 : If($i5 !\u003d 81) → B5 | else → B6",
      "B6 : If($i6 !\u003d 69) → B7 | else → B8",
      "B9 : If($i7 !\u003d 39) → B10 | else → B16",
      "B10 : If($i8 \u003d\u003d $i9) → B11 | else → B16",
      "B11 : If(z2 !\u003d 0) → B12 | else → B16",
      "B12 : If(z1 !\u003d 0) → B13 | else → B14",
      "B16 : If($i10 !\u003d 34) → B17 | else → B23",
      "B17 : If($i11 \u003d\u003d $i12) → B18 | else → B23",
      "B18 : If(z1 !\u003d 0) → B19 | else → B23",
      "B19 : If(z2 !\u003d 0) → B20 | else → B21",
      "B23 : If(z1 !\u003d 0) → B24 | else → B26",
      "B24 : If(z2 !\u003d 0) → B25 | else → B26",
      "B25 : If(z3 \u003d\u003d false) → B26 | else → B27",
      "B27 : If($i13 !\u003d $i14) → B28 | else → B30",
      "B28 : If(i2 \u003c\u003d 1) → B29 | else → B34",
      "B30 : If($i15 !\u003d $i16) → B31 | else → B33",
      "B31 : If(i2 \u003c\u003d 0) → B32 | else → B34",
      "B34 : If(i2 \u003e 0) → B35 | else → B1",
      "B35 : If(i2 \u003c\u003d 0) → B36 | else → B37"
    ],
    "blockList": [
      "B0 {\n  TokenQueue\n  c0 :\u003d @parameter0: char\n  c1 :\u003d @parameter1: char\n  r0 \u003d StringUtil.borrowBuilder()\n  i2 \u003d 0\n  i3 \u003d 0\n  z1 \u003d 0\n  z2 \u003d 0\n  z3 \u003d 0\n  $r2 \u003d CharacterReader reader\u003e\n  $r2.mark()\n}",
      "B1 {\n  $z0 \u003d r1.isEmpty()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  goto B35\n}",
      "B3 {\n  c4 \u003d r1.consume()\n  if (i3 !\u003d 92) goto B4 else B9\n}",
      "B4 {\n  $i5 \u003d (int) c4\n  if ($i5 !\u003d 81) goto B5 else B6\n}",
      "B5 {\n  z3 \u003d 1\n  goto B8\n}",
      "B6 {\n  $i6 \u003d (int) c4\n  if ($i6 !\u003d 69) goto B7 else B8\n}",
      "B7 {\n  z3 \u003d 0\n}",
      "B8 {\n  r0.append(c4)\n  goto B34\n}",
      "B9 {\n  $i7 \u003d (int) c4\n  if ($i7 !\u003d 39) goto B10 else B16\n}",
      "B10 {\n  $i8 \u003d (int) c4\n  $i9 \u003d (int) c0\n  if ($i8 \u003d\u003d $i9) goto B11 else B16\n}",
      "B11 {\n  if (z2 !\u003d 0) goto B12 else B16\n}",
      "B12 {\n  if (z1 !\u003d 0) goto B13 else B14\n}",
      "B13 {\n  $z4 \u003d 1\n  goto B15\n}",
      "B14 {\n  $z4 \u003d 0\n}",
      "B15 {\n  z1 \u003d $z4\n  goto B23\n}",
      "B16 {\n  $i10 \u003d (int) c4\n  if ($i10 !\u003d 34) goto B17 else B23\n}",
      "B17 {\n  $i11 \u003d (int) c4\n  $i12 \u003d (int) c0\n  if ($i11 \u003d\u003d $i12) goto B18 else B23\n}",
      "B18 {\n  if (z1 !\u003d 0) goto B19 else B23\n}",
      "B19 {\n  if (z2 !\u003d 0) goto B20 else B21\n}",
      "B20 {\n  $z5 \u003d 1\n  goto B22\n}",
      "B21 {\n  $z5 \u003d 0\n}",
      "B22 {\n  z2 \u003d $z5\n}",
      "B23 {\n  if (z1 !\u003d 0) goto B24 else B26\n}",
      "B24 {\n  if (z2 !\u003d 0) goto B25 else B26\n}",
      "B25 {\n  if (z3 \u003d\u003d false) goto B26 else B27\n}",
      "B26 {\n  r0.append(c4)\n  goto B34\n}",
      "B27 {\n  $i13 \u003d (int) c4\n  $i14 \u003d (int) c0\n  if ($i13 !\u003d $i14) goto B28 else B30\n}",
      "B28 {\n  i2 \u003d i2 + 1\n  if (i2 \u003c\u003d 1) goto B29 else B34\n}",
      "B29 {\n  r0.append(c4)\n  goto B34\n}",
      "B30 {\n  $i15 \u003d (int) c4\n  $i16 \u003d (int) c1\n  if ($i15 !\u003d $i16) goto B31 else B33\n}",
      "B31 {\n  $i18 \u003d (int) -1\n  i2 \u003d i2 + $i18\n  if (i2 \u003c\u003d 0) goto B32 else B34\n}",
      "B32 {\n  r0.append(c4)\n  goto B34\n}",
      "B33 {\n  r0.append(c4)\n}",
      "B34 {\n  i3 \u003d c4\n  if (i2 \u003e 0) goto B35 else B1\n}",
      "B35 {\n  $r5 \u003d StringUtil.releaseBuilder(r0)\n  if (i2 \u003c\u003d 0) goto B36 else B37\n}",
      "B36 {\n  $r3 \u003d CharacterReader reader\u003e\n  $r3.rewindToMark()\n  $r4 \u003d dynInvoke makeConcatWithConstants($r5)\n  Validate.fail($r4)\n}",
      "B37 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B35",
      "B3 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B34",
      "B9 --\u003e B10",
      "B9 --\u003e B16",
      "B10 --\u003e B11",
      "B10 --\u003e B16",
      "B11 --\u003e B12",
      "B11 --\u003e B16",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B23",
      "B16 --\u003e B17",
      "B16 --\u003e B23",
      "B17 --\u003e B18",
      "B17 --\u003e B23",
      "B18 --\u003e B19",
      "B18 --\u003e B23",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B22 --\u003e B23",
      "B23 --\u003e B24",
      "B23 --\u003e B26",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B34",
      "B27 --\u003e B28",
      "B27 --\u003e B30",
      "B28 --\u003e B29",
      "B28 --\u003e B34",
      "B29 --\u003e B34",
      "B30 --\u003e B31",
      "B30 --\u003e B33",
      "B31 --\u003e B32",
      "B31 --\u003e B34",
      "B32 --\u003e B34",
      "B33 --\u003e B34",
      "B34 --\u003e B35",
      "B34 --\u003e B1",
      "B35 --\u003e B36",
      "B35 --\u003e B37",
      "B36 --\u003e B37",
      "B37 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenQueue#isEmpty(...0)",
        "body": "{\r\n    return reader.isEmpty();\r\n}"
      },
      {
        "name": "TokenQueue#consume(...0)",
        "body": "{\r\n    return reader.consume();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.parser.TokenQueue",
    "methodName": "unescape",
    "signature": "java.lang.String unescape(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (in.indexOf(Esc) \u003d\u003d -1)\r\n        return in;\r\n    StringBuilder out \u003d StringUtil.borrowBuilder();\r\n    char last \u003d 0;\r\n    for (char c : in.toCharArray()) {\r\n        if (c \u003d\u003d Esc) {\r\n            if (last \u003d\u003d Esc) {\r\n                out.append(c);\r\n                c \u003d 0;\r\n            }\r\n        } else\r\n            out.append(c);\r\n        last \u003d c;\r\n    }\r\n    return StringUtil.releaseBuilder(out);\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 !\u003d $i6) → B1 | else → B2",
      "B3 : If(i3 \u003e\u003d i1) → B4 | else → B9",
      "B4 : If(c4 !\u003d 92) → B5 | else → B7",
      "B5 : If(i2 !\u003d 92) → B6 | else → B8"
    ],
    "blockList": [
      "B0 {\n  String\n  $i0 \u003d r0.indexOf(92)\n  $i6 \u003d (int) -1\n  if ($i0 !\u003d $i6) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r1 \u003d StringUtil.borrowBuilder()\n  i2 \u003d 0\n  r2 \u003d r0.toCharArray()\n  i1 \u003d lengthof r2\n  i3 \u003d 0\n}",
      "B3 {\n  if (i3 \u003e\u003d i1) goto B4 else B9\n}",
      "B4 {\n  c4 \u003d r2[i3]\n  if (c4 !\u003d 92) goto B5 else B7\n}",
      "B5 {\n  if (i2 !\u003d 92) goto B6 else B8\n}",
      "B6 {\n  r1.append(c4)\n  c4 \u003d 0\n  goto B8\n}",
      "B7 {\n  r1.append(c4)\n}",
      "B8 {\n  i2 \u003d c4\n  i3 \u003d i3 + 1\n  goto B3\n}",
      "B9 {\n  $r3 \u003d StringUtil.releaseBuilder(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B3",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.parser.TokenQueue",
    "methodName": "escapeCssIdentifier",
    "signature": "java.lang.String escapeCssIdentifier(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (in.isEmpty())\r\n        return in;\r\n    StringBuilder out \u003d StringUtil.borrowBuilder();\r\n    TokenQueue q \u003d new TokenQueue(in);\r\n    char firstChar \u003d q.current();\r\n    if (firstChar \u003d\u003d Hyphen_Minus) {\r\n        q.advance();\r\n        if (q.isEmpty()) {\r\n            // If the character is the first character and is a \"-\" (U+002D), and there is no second character, then\r\n            // the escaped character.\r\n            appendEscaped(out, Hyphen_Minus);\r\n        } else {\r\n            out.append(Hyphen_Minus);\r\n            char secondChar \u003d q.current();\r\n            if (StringUtil.isDigit(secondChar)) {\r\n                // If the character is the second character and is in the range [0-9] (U+0030 to U+0039) and the\r\n                // first character is a \"-\" (U+002D), then the character escaped as code point.\r\n                appendEscapedCodepoint(out, q.consume());\r\n            }\r\n        }\r\n    } else if (StringUtil.isDigit(firstChar)) {\r\n        // If the character is the first character and is in the range [0-9] (U+0030 to U+0039), then the character\r\n        // escaped as code point.\r\n        appendEscapedCodepoint(out, q.consume());\r\n    }\r\n    while (!q.isEmpty()) {\r\n        // Note: It\u0027s fine to iterate on chars because non-ASCII characters are never escaped. So surrogate pairs\r\n        // are kept intact.\r\n        char c \u003d q.consume();\r\n        if (c \u003d\u003d Unicode_Null) {\r\n            // If the character is NULL (U+0000), then the REPLACEMENT CHARACTER (U+FFFD).\r\n            out.append(Replacement);\r\n        } else if (c \u003c\u003d \u0027\\u001F\u0027 || c \u003d\u003d \u0027\\u007F\u0027) {\r\n            // If the character is in the range [\\1-\\1f] (U+0001 to U+001F) or is U+007F, then the character\r\n            // escaped as code point.\r\n            appendEscapedCodepoint(out, c);\r\n        } else if (isIdent(c)) {\r\n            // If the character is not handled by one of the above rules and is greater than or equal to U+0080,\r\n            // is \"-\" (U+002D) or \"_\" (U+005F), or is in one of the ranges [0-9] (U+0030 to U+0039),\r\n            // [A-Z] (U+0041 to U+005A), or [a-z] (U+0061 to U+007A), then the character itself.\r\n            out.append(c);\r\n        } else {\r\n            // Otherwise, the escaped character.\r\n            appendEscaped(out, c);\r\n        }\r\n    }\r\n    q.close();\r\n    return StringUtil.releaseBuilder(out);\r\n}",
    "nodes": 21,
    "edges": 29,
    "cc": 10,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($i5 !\u003d 45) → B3 | else → B8",
      "B3 : If($z3 \u003d\u003d false) → B4 | else → B5",
      "B5 : If($z4 \u003d\u003d false) → B6 | else → B7",
      "B8 : If($z1 \u003d\u003d false) → B9 | else → B10",
      "B10 : If($z5 !\u003d 0) → B11 | else → B20",
      "B11 : If(c4 !\u003d 0) → B12 | else → B13",
      "B13 : If($i6 \u003c\u003d 31) → B14 | else → B15",
      "B14 : If($i7 !\u003d 127) → B15 | else → B16",
      "B16 : If($z2 \u003d\u003d false) → B17 | else → B18"
    ],
    "blockList": [
      "B0 {\n  String\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r1 \u003d StringUtil.borrowBuilder()\n  $r4 \u003d TokenQueue\n  new TokenQueue(r0)\n  c0 \u003d $r4.current()\n  $i5 \u003d (int) c0\n  if ($i5 !\u003d 45) goto B3 else B8\n}",
      "B3 {\n  $r4.advance()\n  $z3 \u003d $r4.isEmpty()\n  if ($z3 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  TokenQueue.appendEscaped(r1, 45)\n  goto B10\n}",
      "B5 {\n  r1.append(45)\n  c3 \u003d $r4.current()\n  $z4 \u003d StringUtil.isDigit(c3)\n  if ($z4 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $c2 \u003d $r4.consume()\n  TokenQueue.appendEscapedCodepoint(r1, $c2)\n}",
      "B7 {\n  goto B10\n}",
      "B8 {\n  $z1 \u003d StringUtil.isDigit(c0)\n  if ($z1 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $c1 \u003d $r4.consume()\n  TokenQueue.appendEscapedCodepoint(r1, $c1)\n}",
      "B10 {\n  $z5 \u003d $r4.isEmpty()\n  if ($z5 !\u003d 0) goto B11 else B20\n}",
      "B11 {\n  c4 \u003d $r4.consume()\n  if (c4 !\u003d 0) goto B12 else B13\n}",
      "B12 {\n  r1.append(65533)\n  goto B19\n}",
      "B13 {\n  $i6 \u003d (int) c4\n  if ($i6 \u003c\u003d 31) goto B14 else B15\n}",
      "B14 {\n  $i7 \u003d (int) c4\n  if ($i7 !\u003d 127) goto B15 else B16\n}",
      "B15 {\n  TokenQueue.appendEscapedCodepoint(r1, c4)\n  goto B19\n}",
      "B16 {\n  $z2 \u003d TokenQueue.isIdent(c4)\n  if ($z2 \u003d\u003d false) goto B17 else B18\n}",
      "B17 {\n  r1.append(c4)\n  goto B19\n}",
      "B18 {\n  TokenQueue.appendEscaped(r1, c4)\n}",
      "B19 {\n  goto B10\n}",
      "B20 {\n  $r4.close()\n  $r3 \u003d StringUtil.releaseBuilder(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B8",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B10",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B20",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B19",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B19",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e B10",
      "B20 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenQueue#isIdent(...1)",
        "body": "{\r\n    return c \u003d\u003d Hyphen_Minus || StringUtil.isDigit(c) || isIdentStart(c);\r\n}"
      },
      {
        "name": "TokenQueue#appendEscapedCodepoint(...2)",
        "body": "{\r\n    out.append(Esc).append(Integer.toHexString(c)).append(\u0027 \u0027);\r\n}"
      },
      {
        "name": "TokenQueue#appendEscaped(...2)",
        "body": "{\r\n    out.append(Esc).append(c);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.parser.TokenQueue",
    "methodName": "consumeWhitespace",
    "signature": "boolean consumeWhitespace()",
    "visibility": "public",
    "body": "{\r\n    boolean seen \u003d false;\r\n    while (matchesWhitespace()) {\r\n        advance();\r\n        seen \u003d true;\r\n    }\r\n    return seen;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TokenQueue\n  z1 \u003d 0\n}",
      "B1 {\n  $z0 \u003d r0.matchesWhitespace()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  r0.advance()\n  z1 \u003d 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenQueue#advance(...0)",
        "body": "{\r\n    if (!isEmpty())\r\n        reader.advance();\r\n}"
      },
      {
        "name": "TokenQueue#matchesWhitespace(...0)",
        "body": "{\r\n    return StringUtil.isWhitespace(reader.current());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.parser.TokenQueue",
    "methodName": "consumeCssIdentifier",
    "signature": "java.lang.String consumeCssIdentifier()",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty())\r\n        throw new IllegalArgumentException(\"CSS identifier expected, but end of input found\");\r\n    // Fast path for CSS identifiers that don\u0027t contain escape sequences.\r\n    String identifier \u003d reader.consumeMatching(TokenQueue::isIdent);\r\n    char c \u003d current();\r\n    if (c !\u003d Esc \u0026\u0026 c !\u003d Unicode_Null) {\r\n        // If we didn\u0027t end on an Esc or a Null, we consumed the whole identifier\r\n        return identifier;\r\n    }\r\n    // An escape sequence was found. Use a StringBuilder to store the decoded CSS identifier.\r\n    StringBuilder out \u003d StringUtil.borrowBuilder();\r\n    if (!identifier.isEmpty()) {\r\n        // Copy the CSS identifier up to the first escape sequence.\r\n        out.append(identifier);\r\n    }\r\n    while (!isEmpty()) {\r\n        c \u003d current();\r\n        if (isIdent(c)) {\r\n            out.append(consume());\r\n        } else if (c \u003d\u003d Unicode_Null) {\r\n            // https://www.w3.org/TR/css-syntax-3/#input-preprocessing\r\n            advance();\r\n            out.append(Replacement);\r\n        } else if (c \u003d\u003d Esc) {\r\n            advance();\r\n            if (!isEmpty() \u0026\u0026 isNewline(current())) {\r\n                // Not a valid escape sequence. This is treated as the end of the CSS identifier.\r\n                reader.unconsume();\r\n                break;\r\n            } else {\r\n                consumeCssEscapeSequenceInto(out);\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n    return StringUtil.releaseBuilder(out);\r\n}",
    "nodes": 18,
    "edges": 25,
    "cc": 9,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($i4 \u003d\u003d 92) → B3 | else → B5",
      "B3 : If(c2 \u003d\u003d false) → B4 | else → B5",
      "B5 : If($z1 !\u003d 0) → B6 | else → B7",
      "B7 : If($z5 !\u003d 0) → B8 | else → B17",
      "B8 : If($z2 \u003d\u003d false) → B9 | else → B10",
      "B10 : If(c3 !\u003d 0) → B11 | else → B12",
      "B12 : If($i5 !\u003d 92) → B13 | else → B17",
      "B13 : If($z3 !\u003d 0) → B14 | else → B16",
      "B14 : If($z4 \u003d\u003d false) → B15 | else → B16"
    ],
    "blockList": [
      "B0 {\n  TokenQueue\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"CSS identifier expected, but end of input found\")\n  throw $r8\n}",
      "B2 {\n  $r1 \u003d CharacterReader reader\u003e\n  $r2 \u003d TokenQueue$isIdent__8.bootstrap$()\n  r3 \u003d $r1.consumeMatching($r2)\n  c2 \u003d r0.current()\n  $i4 \u003d (int) c2\n  if ($i4 \u003d\u003d 92) goto B3 else B5\n}",
      "B3 {\n  if (c2 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r5 \u003d StringUtil.borrowBuilder()\n  $z1 \u003d r3.isEmpty()\n  if ($z1 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $r5.append(r3)\n}",
      "B7 {\n  $z5 \u003d r0.isEmpty()\n  if ($z5 !\u003d 0) goto B8 else B17\n}",
      "B8 {\n  c3 \u003d r0.current()\n  $z2 \u003d TokenQueue.isIdent(c3)\n  if ($z2 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $c1 \u003d r0.consume()\n  $r5.append($c1)\n  goto B7\n}",
      "B10 {\n  if (c3 !\u003d 0) goto B11 else B12\n}",
      "B11 {\n  r0.advance()\n  $r5.append(65533)\n  goto B7\n}",
      "B12 {\n  $i5 \u003d (int) c3\n  if ($i5 !\u003d 92) goto B13 else B17\n}",
      "B13 {\n  r0.advance()\n  $z3 \u003d r0.isEmpty()\n  if ($z3 !\u003d 0) goto B14 else B16\n}",
      "B14 {\n  $c0 \u003d r0.current()\n  $z4 \u003d TokenQueue.isNewline($c0)\n  if ($z4 \u003d\u003d false) goto B15 else B16\n}",
      "B15 {\n  $r4 \u003d CharacterReader reader\u003e\n  $r4.unconsume()\n  goto B17\n}",
      "B16 {\n  r0.consumeCssEscapeSequenceInto($r5)\n  goto B7\n}",
      "B17 {\n  $r7 \u003d StringUtil.releaseBuilder($r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B17",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B7",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B7",
      "B12 --\u003e B13",
      "B12 --\u003e B17",
      "B13 --\u003e B14",
      "B13 --\u003e B16",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B7",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenQueue#current(...0)",
        "body": "{\r\n    return reader.current();\r\n}"
      },
      {
        "name": "TokenQueue#isEmpty(...0)",
        "body": "{\r\n    return reader.isEmpty();\r\n}"
      },
      {
        "name": "TokenQueue#isIdent(...1)",
        "body": "{\r\n    return c \u003d\u003d Hyphen_Minus || StringUtil.isDigit(c) || isIdentStart(c);\r\n}"
      },
      {
        "name": "TokenQueue#consumeCssEscapeSequenceInto(...1)",
        "body": "{\r\n    if (isEmpty()) {\r\n        out.append(Replacement);\r\n        return;\r\n    }\r\n    char firstEscaped \u003d consume();\r\n    if (!StringUtil.isHexDigit(firstEscaped)) {\r\n        out.append(firstEscaped);\r\n    } else {\r\n        // put back the first hex digit\r\n        reader.unconsume();\r\n        // consume up to 6 hex digits\r\n        String hexString \u003d reader.consumeMatching(StringUtil::isHexDigit, 6);\r\n        int codePoint;\r\n        try {\r\n            codePoint \u003d Integer.parseInt(hexString, 16);\r\n        } catch (NumberFormatException e) {\r\n            throw new IllegalArgumentException(\"Invalid escape sequence: \" + hexString, e);\r\n        }\r\n        if (isValidCodePoint(codePoint)) {\r\n            out.appendCodePoint(codePoint);\r\n        } else {\r\n            out.append(Replacement);\r\n        }\r\n        if (!isEmpty()) {\r\n            char c \u003d current();\r\n            if (c \u003d\u003d \u0027\\r\u0027) {\r\n                // Since there\u0027s currently no input preprocessing, check for CRLF here.\r\n                // https://www.w3.org/TR/css-syntax-3/#input-preprocessing\r\n                advance();\r\n                if (!isEmpty() \u0026\u0026 current() \u003d\u003d \u0027\\n\u0027)\r\n                    advance();\r\n            } else if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\t\u0027 || isNewline(c)) {\r\n                advance();\r\n            }\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "TokenQueue#advance(...0)",
        "body": "{\r\n    if (!isEmpty())\r\n        reader.advance();\r\n}"
      },
      {
        "name": "TokenQueue#isNewline(...1)",
        "body": "{\r\n    return c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d \u0027\\f\u0027;\r\n}"
      },
      {
        "name": "TokenQueue#consume(...0)",
        "body": "{\r\n    return reader.consume();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.parser.TokenQueue",
    "methodName": "isIdent",
    "signature": "boolean isIdent(char)",
    "visibility": "public",
    "body": "{\r\n    return c \u003d\u003d Hyphen_Minus || StringUtil.isDigit(c) || isIdentStart(c);\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i1 \u003d\u003d 45) → B1 | else → B3",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  c0 :\u003d @parameter0: char\n  $i1 \u003d (int) c0\n  if ($i1 \u003d\u003d 45) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d StringUtil.isDigit(c0)\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d TokenQueue.isIdentStart(c0)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $z2 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z2 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TokenQueue#isIdentStart(...1)",
        "body": "{\r\n    return c \u003d\u003d \u0027_\u0027 || StringUtil.isAsciiLetter(c) || isNonAscii(c);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.safety.Cleaner",
    "methodName": "isValid",
    "signature": "boolean isValid(org.jsoup.nodes.Document)",
    "visibility": "public",
    "body": "{\r\n    Validate.notNull(dirtyDocument);\r\n    Document clean \u003d Document.createShell(dirtyDocument.baseUri());\r\n    int numDiscarded \u003d copySafeNodes(dirtyDocument.body(), clean.body());\r\n    return numDiscarded \u003d\u003d 0 \u0026\u0026 // because we only look at the body, but we start from a shell, make sure there\u0027s nothing in the head\r\n    dirtyDocument.head().childNodes().isEmpty();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 !\u003d 0) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Cleaner\n  Document\n  Validate.notNull(r0)\n  $r1 \u003d r0.baseUri()\n  r2 \u003d Document.createShell($r1)\n  $r5 \u003d r0.body()\n  $r4 \u003d r2.body()\n  i0 \u003d r3.copySafeNodes($r5, $r4)\n  if (i0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $r6 \u003d r0.head()\n  $r7 \u003d $r6.childNodes()\n  $z0 \u003d $r7.isEmpty()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Cleaner#copySafeNodes(...2)",
        "body": "{\r\n    CleaningVisitor cleaningVisitor \u003d new CleaningVisitor(source, dest);\r\n    cleaningVisitor.traverse(source);\r\n    return cleaningVisitor.numDiscarded;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.safety.Cleaner",
    "methodName": "isValidBodyHtml",
    "signature": "boolean isValidBodyHtml(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    // fake base URI to allow relative URLs to remain valid\r\n    String baseUri \u003d (safelist.preserveRelativeLinks()) ? DummyUri : \"\";\r\n    Document clean \u003d Document.createShell(baseUri);\r\n    Document dirty \u003d Document.createShell(baseUri);\r\n    ParseErrorList errorList \u003d ParseErrorList.tracking(1);\r\n    List\u003cNode\u003e nodes \u003d Parser.parseFragment(bodyHtml, dirty.body(), baseUri, errorList);\r\n    dirty.body().insertChildren(0, nodes);\r\n    int numDiscarded \u003d copySafeNodes(dirty.body(), clean.body());\r\n    return numDiscarded \u003d\u003d 0 \u0026\u0026 errorList.isEmpty();\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If($i0 !\u003d 0) → B4 | else → B6",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Cleaner\n  String\n  $r1 \u003d Safelist safelist\u003e\n  $z0 \u003d $r1.preserveRelativeLinks()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r14 \u003d example/\"\n  $r13 \u003d example/\"\n  $r12 \u003d example/\"\n  goto B3\n}",
      "B2 {\n  $r14 \u003d \"\"\n  $r13 \u003d \"\"\n  $r12 \u003d \"\"\n}",
      "B3 {\n  $r7 \u003d Document.createShell($r13)\n  $r8 \u003d Document.createShell($r14)\n  $r9 \u003d ParseErrorList.tracking(1)\n  $r3 \u003d $r8.body()\n  $r10 \u003d Parser.parseFragment(r2, $r3, $r12, $r9)\n  $r4 \u003d $r8.body()\n  $r4.insertChildren(0, $r10)\n  $r6 \u003d $r8.body()\n  $r5 \u003d $r7.body()\n  $i0 \u003d r0.copySafeNodes($r6, $r5)\n  if ($i0 !\u003d 0) goto B4 else B6\n}",
      "B4 {\n  $z1 \u003d $r9.isEmpty()\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $z2 \u003d 1\n  goto B7\n}",
      "B6 {\n  $z2 \u003d 0\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Cleaner#copySafeNodes(...2)",
        "body": "{\r\n    CleaningVisitor cleaningVisitor \u003d new CleaningVisitor(source, dest);\r\n    cleaningVisitor.traverse(source);\r\n    return cleaningVisitor.numDiscarded;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.safety.Safelist",
    "methodName": "addTags",
    "signature": "org.jsoup.safety.Safelist addTags(java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    Validate.notNull(tags);\r\n    for (String tagName : tags) {\r\n        Validate.notEmpty(tagName);\r\n        Validate.isFalse(tagName.equalsIgnoreCase(\"noscript\"), \"noscript is unsupported in Safelists, due to incompatibilities between parsers with and without script-mode enabled\");\r\n        tagNames.add(TagName.valueOf(tagName));\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Safelist\n  String[]\n  Validate.notNull(r0)\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r0[i1]\n  Validate.notEmpty(r2)\n  $z0 \u003d r2.equalsIgnoreCase(\"noscript\")\n  Validate.isFalse($z0, \"noscript is unsupported in Safelists, due to incompatibilities between parsers with and without script-mode enabled\")\n  $r3 \u003d Set tagNames\u003e\n  $r4 \u003d Safelist$TagName.valueOf(r2)\n  $r3.add($r4)\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.safety.Safelist",
    "methodName": "removeTags",
    "signature": "org.jsoup.safety.Safelist removeTags(java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    Validate.notNull(tags);\r\n    for (String tag : tags) {\r\n        Validate.notEmpty(tag);\r\n        TagName tagName \u003d TagName.valueOf(tag);\r\n        if (tagNames.remove(tagName)) {\r\n            // Only look in sub-maps if tag was allowed\r\n            attributes.remove(tagName);\r\n            enforcedAttributes.remove(tagName);\r\n            protocols.remove(tagName);\r\n        }\r\n    }\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B5",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Safelist\n  String[]\n  Validate.notNull(r0)\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B5\n}",
      "B2 {\n  r2 \u003d r0[i1]\n  Validate.notEmpty(r2)\n  r3 \u003d Safelist$TagName.valueOf(r2)\n  $r4 \u003d Set tagNames\u003e\n  $z0 \u003d $r4.remove(r3)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d Map attributes\u003e\n  $r5.remove(r3)\n  $r6 \u003d Map enforcedAttributes\u003e\n  $r6.remove(r3)\n  $r7 \u003d Map protocols\u003e\n  $r7.remove(r3)\n}",
      "B4 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.safety.Safelist",
    "methodName": "addAttributes",
    "signature": "org.jsoup.safety.Safelist addAttributes(java.lang.String,java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    Validate.notEmpty(tag);\r\n    Validate.notNull(attributes);\r\n    Validate.isTrue(attributes.length \u003e 0, \"No attribute names supplied.\");\r\n    addTags(tag);\r\n    TagName tagName \u003d TagName.valueOf(tag);\r\n    Set\u003cAttributeKey\u003e attributeSet \u003d new HashSet\u003c\u003e();\r\n    for (String key : attributes) {\r\n        Validate.notEmpty(key);\r\n        attributeSet.add(AttributeKey.valueOf(key));\r\n    }\r\n    Set\u003cAttributeKey\u003e currentSet \u003d this.attributes.computeIfAbsent(tagName, Functions.setFunction());\r\n    currentSet.addAll(attributeSet);\r\n    return this;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B2",
      "B4 : If(i2 \u003e\u003d $i1) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Safelist\n  String\n  String[]\n  Validate.notEmpty(r0)\n  Validate.notNull(r1)\n  $i0 \u003d lengthof r1\n  if ($i0 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  Validate.isTrue($z0, \"No attribute names supplied.\")\n  $r3 \u003d String)[1]\n  $r3[0] \u003d r0\n  r2.addTags($r3)\n  $r10 \u003d Safelist$TagName.valueOf(r0)\n  $r4 \u003d HashSet\n  new HashSet()\n  $i1 \u003d lengthof r1\n  i2 \u003d 0\n}",
      "B4 {\n  if (i2 \u003e\u003d $i1) goto B5 else B6\n}",
      "B5 {\n  r8 \u003d r1[i2]\n  Validate.notEmpty(r8)\n  $r9 \u003d Safelist$AttributeKey.valueOf(r8)\n  $r4.add($r9)\n  i2 \u003d i2 + 1\n  goto B4\n}",
      "B6 {\n  $r5 \u003d Map attributes\u003e\n  $r6 \u003d Functions.setFunction()\n  $r7 \u003d $r5.computeIfAbsent($r10, $r6)\n  r11 \u003d Set) $r7\n  r11.addAll($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Safelist#addTags(...1)",
        "body": "{\r\n    Validate.notNull(tags);\r\n    for (String tagName : tags) {\r\n        Validate.notEmpty(tagName);\r\n        Validate.isFalse(tagName.equalsIgnoreCase(\"noscript\"), \"noscript is unsupported in Safelists, due to incompatibilities between parsers with and without script-mode enabled\");\r\n        tagNames.add(TagName.valueOf(tagName));\r\n    }\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.safety.Safelist",
    "methodName": "removeAttributes",
    "signature": "org.jsoup.safety.Safelist removeAttributes(java.lang.String,java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    Validate.notEmpty(tag);\r\n    Validate.notNull(attributes);\r\n    Validate.isTrue(attributes.length \u003e 0, \"No attribute names supplied.\");\r\n    TagName tagName \u003d TagName.valueOf(tag);\r\n    Set\u003cAttributeKey\u003e attributeSet \u003d new HashSet\u003c\u003e();\r\n    for (String key : attributes) {\r\n        Validate.notEmpty(key);\r\n        attributeSet.add(AttributeKey.valueOf(key));\r\n    }\r\n    if (tagNames.contains(tagName) \u0026\u0026 this.attributes.containsKey(tagName)) {\r\n        // Only look in sub-maps if tag was allowed\r\n        Set\u003cAttributeKey\u003e currentSet \u003d this.attributes.get(tagName);\r\n        currentSet.removeAll(attributeSet);\r\n        if (// Remove tag from attribute map if no attributes are allowed for tag\r\n        currentSet.isEmpty())\r\n            this.attributes.remove(tagName);\r\n    }\r\n    if (tag.equals(All)) {\r\n        // Attribute needs to be removed from all individually set tags\r\n        Iterator\u003cMap.Entry\u003cTagName, Set\u003cAttributeKey\u003e\u003e\u003e it \u003d this.attributes.entrySet().iterator();\r\n        while (it.hasNext()) {\r\n            Map.Entry\u003cTagName, Set\u003cAttributeKey\u003e\u003e entry \u003d it.next();\r\n            Set\u003cAttributeKey\u003e currentSet \u003d entry.getValue();\r\n            currentSet.removeAll(attributeSet);\r\n            if (// Remove tag from attribute map if no attributes are allowed for tag\r\n            currentSet.isEmpty())\r\n                it.remove();\r\n        }\r\n    }\r\n    return this;\r\n}",
    "nodes": 17,
    "edges": 24,
    "cc": 9,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B2",
      "B4 : If(i2 \u003e\u003d $i1) → B5 | else → B6",
      "B6 : If($z0 \u003d\u003d false) → B7 | else → B10",
      "B7 : If($z3 \u003d\u003d false) → B8 | else → B10",
      "B8 : If($z4 \u003d\u003d false) → B9 | else → B10",
      "B10 : If($z6 \u003d\u003d false) → B11 | else → B16",
      "B12 : If($z1 \u003d\u003d false) → B13 | else → B16",
      "B13 : If($z2 \u003d\u003d false) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  Safelist\n  String\n  String[]\n  Validate.notEmpty(r0)\n  Validate.notNull(r1)\n  $i0 \u003d lengthof r1\n  if ($i0 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z5 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z5 \u003d 0\n}",
      "B3 {\n  Validate.isTrue($z5, \"No attribute names supplied.\")\n  $r15 \u003d Safelist$TagName.valueOf(r0)\n  $r2 \u003d HashSet\n  new HashSet()\n  $i1 \u003d lengthof r1\n  i2 \u003d 0\n}",
      "B4 {\n  if (i2 \u003e\u003d $i1) goto B5 else B6\n}",
      "B5 {\n  r13 \u003d r1[i2]\n  Validate.notEmpty(r13)\n  $r14 \u003d Safelist$AttributeKey.valueOf(r13)\n  $r2.add($r14)\n  i2 \u003d i2 + 1\n  goto B4\n}",
      "B6 {\n  $r4 \u003d Set tagNames\u003e\n  $z0 \u003d $r4.contains($r15)\n  if ($z0 \u003d\u003d false) goto B7 else B10\n}",
      "B7 {\n  $r9 \u003d Map attributes\u003e\n  $z3 \u003d $r9.containsKey($r15)\n  if ($z3 \u003d\u003d false) goto B8 else B10\n}",
      "B8 {\n  $r10 \u003d Map attributes\u003e\n  $r11 \u003d $r10.get($r15)\n  r16 \u003d Set) $r11\n  r16.removeAll($r2)\n  $z4 \u003d r16.isEmpty()\n  if ($z4 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r12 \u003d Map attributes\u003e\n  $r12.remove($r15)\n}",
      "B10 {\n  $z6 \u003d r0.equals(\":all\")\n  if ($z6 \u003d\u003d false) goto B11 else B16\n}",
      "B11 {\n  $r5 \u003d Map attributes\u003e\n  $r6 \u003d $r5.entrySet()\n  r17 \u003d $r6.iterator()\n}",
      "B12 {\n  $z1 \u003d r17.hasNext()\n  if ($z1 \u003d\u003d false) goto B13 else B16\n}",
      "B13 {\n  $r7 \u003d r17.next()\n  r18 \u003d Map$Entry) $r7\n  $r8 \u003d r18.getValue()\n  r19 \u003d Set) $r8\n  r19.removeAll($r2)\n  $z2 \u003d r19.isEmpty()\n  if ($z2 \u003d\u003d false) goto B14 else B15\n}",
      "B14 {\n  r17.remove()\n}",
      "B15 {\n  goto B12\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B16",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B16",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B12",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.safety.Safelist",
    "methodName": "removeEnforcedAttribute",
    "signature": "org.jsoup.safety.Safelist removeEnforcedAttribute(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    Validate.notEmpty(tag);\r\n    Validate.notEmpty(attribute);\r\n    TagName tagName \u003d TagName.valueOf(tag);\r\n    if (tagNames.contains(tagName) \u0026\u0026 enforcedAttributes.containsKey(tagName)) {\r\n        AttributeKey attrKey \u003d AttributeKey.valueOf(attribute);\r\n        Map\u003cAttributeKey, AttributeValue\u003e attrMap \u003d enforcedAttributes.get(tagName);\r\n        attrMap.remove(attrKey);\r\n        if (// Remove tag from enforced attribute map if no enforced attributes are present\r\n        attrMap.isEmpty())\r\n            enforcedAttributes.remove(tagName);\r\n    }\r\n    return this;\r\n}",
    "nodes": 5,
    "edges": 7,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B4",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B4",
      "B2 : If($z2 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Safelist\n  String\n  String\n  Validate.notEmpty(r0)\n  Validate.notEmpty(r1)\n  r2 \u003d Safelist$TagName.valueOf(r0)\n  $r4 \u003d Set tagNames\u003e\n  $z0 \u003d $r4.contains(r2)\n  if ($z0 \u003d\u003d false) goto B1 else B4\n}",
      "B1 {\n  $r5 \u003d Map enforcedAttributes\u003e\n  $z1 \u003d $r5.containsKey(r2)\n  if ($z1 \u003d\u003d false) goto B2 else B4\n}",
      "B2 {\n  r6 \u003d Safelist$AttributeKey.valueOf(r1)\n  $r7 \u003d Map enforcedAttributes\u003e\n  $r8 \u003d $r7.get(r2)\n  r9 \u003d Map) $r8\n  r9.remove(r6)\n  $z2 \u003d r9.isEmpty()\n  if ($z2 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r10 \u003d Map enforcedAttributes\u003e\n  $r10.remove(r2)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.safety.Safelist",
    "methodName": "addProtocols",
    "signature": "org.jsoup.safety.Safelist addProtocols(java.lang.String,java.lang.String,java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    Validate.notEmpty(tag);\r\n    Validate.notEmpty(attribute);\r\n    Validate.notNull(protocols);\r\n    TagName tagName \u003d TagName.valueOf(tag);\r\n    AttributeKey attrKey \u003d AttributeKey.valueOf(attribute);\r\n    Map\u003cAttributeKey, Set\u003cProtocol\u003e\u003e attrMap \u003d this.protocols.computeIfAbsent(tagName, Functions.mapFunction());\r\n    Set\u003cProtocol\u003e protSet \u003d attrMap.computeIfAbsent(attrKey, Functions.setFunction());\r\n    for (String protocol : protocols) {\r\n        Validate.notEmpty(protocol);\r\n        Protocol prot \u003d Protocol.valueOf(protocol);\r\n        protSet.add(prot);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Safelist\n  String\n  String\n  String[]\n  Validate.notEmpty(r0)\n  Validate.notEmpty(r1)\n  Validate.notNull(r2)\n  r3 \u003d Safelist$TagName.valueOf(r0)\n  r4 \u003d Safelist$AttributeKey.valueOf(r1)\n  $r6 \u003d Map protocols\u003e\n  $r7 \u003d Functions.mapFunction()\n  $r8 \u003d $r6.computeIfAbsent(r3, $r7)\n  r9 \u003d Map) $r8\n  $r10 \u003d Functions.setFunction()\n  $r11 \u003d r9.computeIfAbsent(r4, $r10)\n  r12 \u003d Set) $r11\n  i0 \u003d lengthof r2\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r13 \u003d r2[i1]\n  Validate.notEmpty(r13)\n  r14 \u003d Safelist$Protocol.valueOf(r13)\n  r12.add(r14)\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.safety.Safelist",
    "methodName": "removeProtocols",
    "signature": "org.jsoup.safety.Safelist removeProtocols(java.lang.String,java.lang.String,java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    Validate.notEmpty(tag);\r\n    Validate.notEmpty(attribute);\r\n    Validate.notNull(removeProtocols);\r\n    TagName tagName \u003d TagName.valueOf(tag);\r\n    AttributeKey attr \u003d AttributeKey.valueOf(attribute);\r\n    // make sure that what we\u0027re removing actually exists; otherwise can open the tag to any data and that can\r\n    // be surprising\r\n    Validate.isTrue(protocols.containsKey(tagName), \"Cannot remove a protocol that is not set.\");\r\n    Map\u003cAttributeKey, Set\u003cProtocol\u003e\u003e tagProtocols \u003d protocols.get(tagName);\r\n    Validate.isTrue(tagProtocols.containsKey(attr), \"Cannot remove a protocol that is not set.\");\r\n    Set\u003cProtocol\u003e attrProtocols \u003d tagProtocols.get(attr);\r\n    for (String protocol : removeProtocols) {\r\n        Validate.notEmpty(protocol);\r\n        attrProtocols.remove(Protocol.valueOf(protocol));\r\n    }\r\n    if (attrProtocols.isEmpty()) {\r\n        // Remove protocol set if empty\r\n        tagProtocols.remove(attr);\r\n        if (// Remove entry for tag if empty\r\n        tagProtocols.isEmpty())\r\n            protocols.remove(tagName);\r\n    }\r\n    return this;\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B3",
      "B3 : If($z2 \u003d\u003d false) → B4 | else → B6",
      "B4 : If($z3 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Safelist\n  String\n  String\n  String[]\n  Validate.notEmpty(r0)\n  Validate.notEmpty(r1)\n  Validate.notNull(r2)\n  r3 \u003d Safelist$TagName.valueOf(r0)\n  r4 \u003d Safelist$AttributeKey.valueOf(r1)\n  $r6 \u003d Map protocols\u003e\n  $z0 \u003d $r6.containsKey(r3)\n  Validate.isTrue($z0, \"Cannot remove a protocol that is not set.\")\n  $r7 \u003d Map protocols\u003e\n  $r8 \u003d $r7.get(r3)\n  r9 \u003d Map) $r8\n  $z1 \u003d r9.containsKey(r4)\n  Validate.isTrue($z1, \"Cannot remove a protocol that is not set.\")\n  $r10 \u003d r9.get(r4)\n  r11 \u003d Set) $r10\n  i0 \u003d lengthof r2\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r13 \u003d r2[i1]\n  Validate.notEmpty(r13)\n  $r14 \u003d Safelist$Protocol.valueOf(r13)\n  r11.remove($r14)\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  $z2 \u003d r11.isEmpty()\n  if ($z2 \u003d\u003d false) goto B4 else B6\n}",
      "B4 {\n  r9.remove(r4)\n  $z3 \u003d r9.isEmpty()\n  if ($z3 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r12 \u003d Map protocols\u003e\n  $r12.remove(r3)\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.safety.Safelist",
    "methodName": "isSafeAttribute",
    "signature": "boolean isSafeAttribute(java.lang.String,org.jsoup.nodes.Element,org.jsoup.nodes.Attribute)",
    "visibility": "public",
    "body": "{\r\n    TagName tag \u003d TagName.valueOf(tagName);\r\n    AttributeKey key \u003d AttributeKey.valueOf(attr.getKey());\r\n    Set\u003cAttributeKey\u003e okSet \u003d attributes.get(tag);\r\n    if (okSet !\u003d null \u0026\u0026 okSet.contains(key)) {\r\n        if (protocols.containsKey(tag)) {\r\n            Map\u003cAttributeKey, Set\u003cProtocol\u003e\u003e attrProts \u003d protocols.get(tag);\r\n            // ok if not defined protocol; otherwise test\r\n            return !attrProts.containsKey(key) || testValidProtocol(el, attr, attrProts.get(key));\r\n        } else {\r\n            // attribute found, no protocols defined, so OK\r\n            return true;\r\n        }\r\n    }\r\n    // might be an enforced attribute?\r\n    Map\u003cAttributeKey, AttributeValue\u003e enforcedSet \u003d enforcedAttributes.get(tag);\r\n    if (enforcedSet !\u003d null) {\r\n        Attributes expect \u003d getEnforcedAttributes(tagName);\r\n        String attrKey \u003d attr.getKey();\r\n        if (expect.hasKeyIgnoreCase(attrKey)) {\r\n            return expect.getIgnoreCase(attrKey).equals(attr.getValue());\r\n        }\r\n    }\r\n    // no attributes defined for tag, try :all tag\r\n    return !tagName.equals(All) \u0026\u0026 isSafeAttribute(All, el, attr);\r\n}",
    "nodes": 17,
    "edges": 22,
    "cc": 7,
    "flowSummary": [
      "B0 : If(r8 \u003d\u003d null) → B1 | else → B9",
      "B1 : If($z4 \u003d\u003d false) → B2 | else → B9",
      "B2 : If($z5 \u003d\u003d false) → B3 | else → B8",
      "B3 : If($z6 \u003d\u003d false) → B4 | else → B5",
      "B4 : If($z7 \u003d\u003d false) → B5 | else → B6",
      "B9 : If($r16 \u003d\u003d null) → B10 | else → B12",
      "B10 : If($z2 \u003d\u003d false) → B11 | else → B12",
      "B12 : If($z0 !\u003d 0) → B13 | else → B15",
      "B13 : If($z1 \u003d\u003d false) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  Safelist\n  String\n  Element\n  Attribute\n  r1 \u003d Safelist$TagName.valueOf(r0)\n  $r3 \u003d r2.getKey()\n  r4 \u003d Safelist$AttributeKey.valueOf($r3)\n  $r6 \u003d Map attributes\u003e\n  $r7 \u003d $r6.get(r1)\n  r8 \u003d Set) $r7\n  if (r8 \u003d\u003d null) goto B1 else B9\n}",
      "B1 {\n  $z4 \u003d r8.contains(r4)\n  if ($z4 \u003d\u003d false) goto B2 else B9\n}",
      "B2 {\n  $r17 \u003d Map protocols\u003e\n  $z5 \u003d $r17.containsKey(r1)\n  if ($z5 \u003d\u003d false) goto B3 else B8\n}",
      "B3 {\n  $r18 \u003d Map protocols\u003e\n  $r19 \u003d $r18.get(r1)\n  r22 \u003d Map) $r19\n  $z6 \u003d r22.containsKey(r4)\n  if ($z6 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r20 \u003d r22.get(r4)\n  $r21 \u003d Set) $r20\n  $z7 \u003d r5.testValidProtocol(r11, r2, $r21)\n  if ($z7 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $z8 \u003d 1\n  goto B7\n}",
      "B6 {\n  $z8 \u003d 0\n}",
      "B7 {\n  return\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $r9 \u003d Map enforcedAttributes\u003e\n  $r10 \u003d $r9.get(r1)\n  $r16 \u003d Map) $r10\n  if ($r16 \u003d\u003d null) goto B10 else B12\n}",
      "B10 {\n  r12 \u003d r5.getEnforcedAttributes(r0)\n  r13 \u003d r2.getKey()\n  $z2 \u003d r12.hasKeyIgnoreCase(r13)\n  if ($z2 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  $r15 \u003d r12.getIgnoreCase(r13)\n  $r14 \u003d r2.getValue()\n  $z3 \u003d $r15.equals($r14)\n  return\n}",
      "B12 {\n  $z0 \u003d r0.equals(\":all\")\n  if ($z0 !\u003d 0) goto B13 else B15\n}",
      "B13 {\n  $z1 \u003d r5.isSafeAttribute(\":all\", r11, r2)\n  if ($z1 \u003d\u003d false) goto B14 else B15\n}",
      "B14 {\n  $z9 \u003d 1\n  goto B16\n}",
      "B15 {\n  $z9 \u003d 0\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B9",
      "B1 --\u003e B2",
      "B1 --\u003e B9",
      "B2 --\u003e B3",
      "B2 --\u003e B8",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B15",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Safelist#testValidProtocol(...3)",
        "body": "{\r\n    // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\r\n    // rels without a baseuri get removed\r\n    String value \u003d el.absUrl(attr.getKey());\r\n    if (value.length() \u003d\u003d 0)\r\n        // if it could not be made abs, run as-is to allow custom unknown protocols\r\n        value \u003d attr.getValue();\r\n    if (!preserveRelativeLinks)\r\n        attr.setValue(value);\r\n    for (Protocol protocol : protocols) {\r\n        String prot \u003d protocol.toString();\r\n        if (prot.equals(\"#\")) {\r\n            // allows anchor links\r\n            if (isValidAnchor(value)) {\r\n                return true;\r\n            } else {\r\n                continue;\r\n            }\r\n        }\r\n        prot +\u003d \":\";\r\n        if (lowerCase(value).startsWith(prot)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      },
      {
        "name": "Safelist#getEnforcedAttributes(...1)",
        "body": "{\r\n    Attributes attrs \u003d new Attributes();\r\n    TagName tag \u003d TagName.valueOf(tagName);\r\n    if (enforcedAttributes.containsKey(tag)) {\r\n        Map\u003cAttributeKey, AttributeValue\u003e keyVals \u003d enforcedAttributes.get(tag);\r\n        for (Map.Entry\u003cAttributeKey, AttributeValue\u003e entry : keyVals.entrySet()) {\r\n            attrs.put(entry.getKey().toString(), entry.getValue().toString());\r\n        }\r\n    }\r\n    return attrs;\r\n}"
      },
      {
        "name": "Safelist#isSafeAttribute(...3)",
        "body": "{\r\n    TagName tag \u003d TagName.valueOf(tagName);\r\n    AttributeKey key \u003d AttributeKey.valueOf(attr.getKey());\r\n    Set\u003cAttributeKey\u003e okSet \u003d attributes.get(tag);\r\n    if (okSet !\u003d null \u0026\u0026 okSet.contains(key)) {\r\n        if (protocols.containsKey(tag)) {\r\n            Map\u003cAttributeKey, Set\u003cProtocol\u003e\u003e attrProts \u003d protocols.get(tag);\r\n            // ok if not defined protocol; otherwise test\r\n            return !attrProts.containsKey(key) || testValidProtocol(el, attr, attrProts.get(key));\r\n        } else {\r\n            // attribute found, no protocols defined, so OK\r\n            return true;\r\n        }\r\n    }\r\n    // might be an enforced attribute?\r\n    Map\u003cAttributeKey, AttributeValue\u003e enforcedSet \u003d enforcedAttributes.get(tag);\r\n    if (enforcedSet !\u003d null) {\r\n        Attributes expect \u003d getEnforcedAttributes(tagName);\r\n        String attrKey \u003d attr.getKey();\r\n        if (expect.hasKeyIgnoreCase(attrKey)) {\r\n            return expect.getIgnoreCase(attrKey).equals(attr.getValue());\r\n        }\r\n    }\r\n    // no attributes defined for tag, try :all tag\r\n    return !tagName.equals(All) \u0026\u0026 isSafeAttribute(All, el, attr);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.safety.Safelist",
    "methodName": "getEnforcedAttributes",
    "signature": "org.jsoup.nodes.Attributes getEnforcedAttributes(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    Attributes attrs \u003d new Attributes();\r\n    TagName tag \u003d TagName.valueOf(tagName);\r\n    if (enforcedAttributes.containsKey(tag)) {\r\n        Map\u003cAttributeKey, AttributeValue\u003e keyVals \u003d enforcedAttributes.get(tag);\r\n        for (Map.Entry\u003cAttributeKey, AttributeValue\u003e entry : keyVals.entrySet()) {\r\n            attrs.put(entry.getKey().toString(), entry.getValue().toString());\r\n        }\r\n    }\r\n    return attrs;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B4",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Safelist\n  String\n  $r0 \u003d Attributes\n  new Attributes()\n  r2 \u003d Safelist$TagName.valueOf(r1)\n  $r4 \u003d Map enforcedAttributes\u003e\n  $z0 \u003d $r4.containsKey(r2)\n  if ($z0 \u003d\u003d false) goto B1 else B4\n}",
      "B1 {\n  $r5 \u003d Map enforcedAttributes\u003e\n  $r6 \u003d $r5.get(r2)\n  r7 \u003d Map) $r6\n  $r8 \u003d r7.entrySet()\n  r9 \u003d $r8.iterator()\n}",
      "B2 {\n  $z1 \u003d r9.hasNext()\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r10 \u003d r9.next()\n  r11 \u003d Map$Entry) $r10\n  $r12 \u003d r11.getKey()\n  $r13 \u003d Safelist$AttributeKey) $r12\n  $r17 \u003d $r13.toString()\n  $r14 \u003d r11.getValue()\n  $r15 \u003d Safelist$AttributeValue) $r14\n  $r16 \u003d $r15.toString()\n  $r0.put($r17, $r16)\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Collector",
    "methodName": "collect",
    "signature": "org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)",
    "visibility": "public",
    "body": "{\r\n    Stream\u003cElement\u003e stream \u003d eval.wantsNodes() ? streamNodes(eval, root, Element.class) : stream(eval, root);\r\n    return stream.collect(toCollection(Elements::new));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Evaluator\n  Element\n  $z0 \u003d r0.wantsNodes()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d Collector.streamNodes(r0, r1, class \"Lorg/jsoup/nodes/Element;\")\n  goto B3\n}",
      "B2 {\n  $r6 \u003d Collector.stream(r0, r1)\n}",
      "B3 {\n  $r2 \u003d Collector$init__9.bootstrap$()\n  $r3 \u003d Collectors.toCollection($r2)\n  $r4 \u003d $r6.collect($r3)\n  $r5 \u003d Elements) $r4\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Collector#streamNodes(...3)",
        "body": "{\r\n    evaluator.reset();\r\n    return root.nodeStream(type).filter(evaluator.asNodePredicate(root));\r\n}"
      },
      {
        "name": "Collector#toCollection(...1)",
        "body": "(source not found)"
      },
      {
        "name": "Collector#stream(...2)",
        "body": "{\r\n    evaluator.reset();\r\n    return root.stream().filter(evaluator.asPredicate(root));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "clone",
    "signature": "org.jsoup.select.Elements clone()",
    "visibility": "public",
    "body": "{\r\n    Elements clone \u003d new Elements(size());\r\n    for (Element e : this) clone.add(e.clone());\r\n    return clone;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Elements\n  $r0 \u003d Elements\n  $i0 \u003d r1.size()\n  new Elements($i0)\n  r2 \u003d r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d r2.next()\n  r4 \u003d Element) $r3\n  $r5 \u003d r4.clone()\n  $r0.add($r5)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Elements#size(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "attr",
    "signature": "java.lang.String attr(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    for (Element element : this) {\r\n        if (element.hasAttr(attributeKey))\r\n            return element.attr(attributeKey);\r\n    }\r\n    return \"\";\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Elements\n  String\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r3 \u003d Element) $r2\n  $z1 \u003d r3.hasAttr(r4)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d r3.attr(r4)\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "hasAttr",
    "signature": "boolean hasAttr(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    for (Element element : this) {\r\n        if (element.hasAttr(attributeKey))\r\n            return true;\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Elements\n  String\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r3 \u003d Element) $r2\n  $z1 \u003d r3.hasAttr(r4)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "eachAttr",
    "signature": "java.util.List eachAttr(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    List\u003cString\u003e attrs \u003d new ArrayList\u003c\u003e(size());\r\n    for (Element element : this) {\r\n        if (element.hasAttr(attributeKey))\r\n            attrs.add(element.attr(attributeKey));\r\n    }\r\n    return attrs;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Elements\n  String\n  $r0 \u003d ArrayList\n  $i0 \u003d r1.size()\n  new ArrayList($i0)\n  r2 \u003d r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r3 \u003d r2.next()\n  r4 \u003d Element) $r3\n  $z1 \u003d r4.hasAttr(r5)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d r4.attr(r5)\n  $r0.add($r6)\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Elements#size(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "attr",
    "signature": "org.jsoup.select.Elements attr(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    for (Element element : this) {\r\n        element.attr(attributeKey, attributeValue);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Elements\n  String\n  String\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r3 \u003d Element) $r2\n  r3.attr(r4, r5)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "removeAttr",
    "signature": "org.jsoup.select.Elements removeAttr(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    for (Element element : this) {\r\n        element.removeAttr(attributeKey);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Elements\n  String\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r3 \u003d Element) $r2\n  r3.removeAttr(r4)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "addClass",
    "signature": "org.jsoup.select.Elements addClass(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    for (Element element : this) {\r\n        element.addClass(className);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Elements\n  String\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r3 \u003d Element) $r2\n  r3.addClass(r4)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "removeClass",
    "signature": "org.jsoup.select.Elements removeClass(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    for (Element element : this) {\r\n        element.removeClass(className);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Elements\n  String\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r3 \u003d Element) $r2\n  r3.removeClass(r4)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "toggleClass",
    "signature": "org.jsoup.select.Elements toggleClass(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    for (Element element : this) {\r\n        element.toggleClass(className);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Elements\n  String\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r3 \u003d Element) $r2\n  r3.toggleClass(r4)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "hasClass",
    "signature": "boolean hasClass(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    for (Element element : this) {\r\n        if (element.hasClass(className))\r\n            return true;\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Elements\n  String\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r3 \u003d Element) $r2\n  $z1 \u003d r3.hasClass(r4)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "val",
    "signature": "java.lang.String val()",
    "visibility": "public",
    "body": "{\r\n    if (size() \u003e 0)\r\n        //noinspection ConstantConditions\r\n        // first() !\u003d null as size() \u003e 0\r\n        return first().val();\r\n    else\r\n        return \"\";\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Elements\n  $i0 \u003d r0.size()\n  if ($i0 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d r0.first()\n  $r2 \u003d $r1.val()\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Elements#size(...0)",
        "body": "(source not found)"
      },
      {
        "name": "Elements#first(...0)",
        "body": "{\r\n    return super.first();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "val",
    "signature": "org.jsoup.select.Elements val(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    for (Element element : this) element.val(value);\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Elements\n  String\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r3 \u003d Element) $r2\n  r3.val(r4)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "hasText",
    "signature": "boolean hasText()",
    "visibility": "public",
    "body": "{\r\n    for (Element element : this) {\r\n        if (element.hasText())\r\n            return true;\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Elements\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r3 \u003d Element) $r2\n  $z1 \u003d r3.hasText()\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "eachText",
    "signature": "java.util.List eachText()",
    "visibility": "public",
    "body": "{\r\n    ArrayList\u003cString\u003e texts \u003d new ArrayList\u003c\u003e(size());\r\n    for (Element el : this) {\r\n        if (el.hasText())\r\n            texts.add(el.text());\r\n    }\r\n    return texts;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Elements\n  $r0 \u003d ArrayList\n  $i0 \u003d r1.size()\n  new ArrayList($i0)\n  r2 \u003d r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r3 \u003d r2.next()\n  r4 \u003d Element) $r3\n  $z1 \u003d r4.hasText()\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d r4.text()\n  $r0.add($r5)\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Elements#size(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "tagName",
    "signature": "org.jsoup.select.Elements tagName(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    for (Element element : this) {\r\n        element.tagName(tagName);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Elements\n  String\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r3 \u003d Element) $r2\n  r3.tagName(r4)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "html",
    "signature": "org.jsoup.select.Elements html(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    for (Element element : this) {\r\n        element.html(html);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Elements\n  String\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r3 \u003d Element) $r2\n  r3.html(r4)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "prepend",
    "signature": "org.jsoup.select.Elements prepend(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    for (Element element : this) {\r\n        element.prepend(html);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Elements\n  String\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r3 \u003d Element) $r2\n  r3.prepend(r4)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "append",
    "signature": "org.jsoup.select.Elements append(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    for (Element element : this) {\r\n        element.append(html);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Elements\n  String\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r3 \u003d Element) $r2\n  r3.append(r4)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "unwrap",
    "signature": "org.jsoup.select.Elements unwrap()",
    "visibility": "public",
    "body": "{\r\n    for (Element element : this) {\r\n        element.unwrap();\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Elements\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r3 \u003d Element) $r2\n  r3.unwrap()\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "empty",
    "signature": "org.jsoup.select.Elements empty()",
    "visibility": "public",
    "body": "{\r\n    for (Element element : this) {\r\n        element.empty();\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Elements\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r3 \u003d Element) $r2\n  r3.empty()\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "eq",
    "signature": "org.jsoup.select.Elements eq(int)",
    "visibility": "public",
    "body": "{\r\n    return size() \u003e index ? new Elements(get(index)) : new Elements();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003c\u003d i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Elements\n  i0 :\u003d @parameter0: int\n  $i1 \u003d r0.size()\n  if ($i1 \u003c\u003d i0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d Elements\n  $r1 \u003d Element)[1]\n  $r2 \u003d r0.get(i0)\n  $r3 \u003d Element) $r2\n  $r1[0] \u003d $r3\n  new Elements($r1)\n  goto B3\n}",
      "B2 {\n  $r4 \u003d Elements\n  new Elements()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Elements#size(...0)",
        "body": "(source not found)"
      },
      {
        "name": "Elements#get(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "is",
    "signature": "boolean is(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    Evaluator eval \u003d Selector.evaluatorOf(query);\r\n    for (Element e : this) {\r\n        if (e.is(eval))\r\n            return true;\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Elements\n  String\n  r1 \u003d Selector.evaluatorOf(r0)\n  r3 \u003d r2.iterator()\n}",
      "B1 {\n  $z0 \u003d r3.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r4 \u003d r3.next()\n  r5 \u003d Element) $r4\n  $z1 \u003d r5.is(r1)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "parents",
    "signature": "org.jsoup.select.Elements parents()",
    "visibility": "public",
    "body": "{\r\n    HashSet\u003cElement\u003e combo \u003d new LinkedHashSet\u003c\u003e();\r\n    for (Element e : this) {\r\n        combo.addAll(e.parents());\r\n    }\r\n    return new Elements(combo);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Elements\n  $r0 \u003d LinkedHashSet\n  new LinkedHashSet()\n  r2 \u003d r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r2.next()\n  r5 \u003d Element) $r4\n  $r6 \u003d r5.parents()\n  $r0.addAll($r6)\n  goto B1\n}",
      "B3 {\n  $r3 \u003d Elements\n  new Elements($r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Elements",
    "methodName": "forms",
    "signature": "java.util.List forms()",
    "visibility": "public",
    "body": "{\r\n    ArrayList\u003cFormElement\u003e forms \u003d new ArrayList\u003c\u003e();\r\n    for (Element el : this) if (el instanceof FormElement)\r\n        forms.add((FormElement) el);\r\n    return forms;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Elements\n  $r0 \u003d ArrayList\n  new ArrayList()\n  r2 \u003d r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r3 \u003d r2.next()\n  r4 \u003d Element) $r3\n  $z1 \u003d FormElement\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d FormElement) r4\n  $r0.add($r5)\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Nodes",
    "methodName": "clone",
    "signature": "org.jsoup.select.Nodes clone()",
    "visibility": "public",
    "body": "{\r\n    Nodes\u003cT\u003e clone \u003d new Nodes\u003c\u003e(size());\r\n    for (T node : this) clone.add((T) node.clone());\r\n    return clone;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Nodes\n  $r0 \u003d Nodes\n  $i0 \u003d r1.size()\n  new Nodes($i0)\n  r2 \u003d r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d r2.next()\n  r4 \u003d Node) $r3\n  $r5 \u003d r4.clone()\n  $r0.add($r5)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Nodes#size(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.select.Nodes",
    "methodName": "remove",
    "signature": "org.jsoup.select.Nodes remove()",
    "visibility": "public",
    "body": "{\r\n    for (T node : this) {\r\n        node.remove();\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Nodes\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r3 \u003d Node) $r2\n  r3.remove()\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Nodes",
    "methodName": "before",
    "signature": "org.jsoup.select.Nodes before(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    for (T node : this) {\r\n        node.before(html);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Nodes\n  String\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r3 \u003d Node) $r2\n  r3.before(r4)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Nodes",
    "methodName": "after",
    "signature": "org.jsoup.select.Nodes after(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    for (T node : this) {\r\n        node.after(html);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Nodes\n  String\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r3 \u003d Node) $r2\n  r3.after(r4)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Nodes",
    "methodName": "wrap",
    "signature": "org.jsoup.select.Nodes wrap(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    Validate.notEmpty(html);\r\n    for (T node : this) {\r\n        node.wrap(html);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Nodes\n  String\n  Validate.notEmpty(r0)\n  r2 \u003d r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d r2.next()\n  r4 \u003d Node) $r3\n  r4.wrap(r0)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.Nodes",
    "methodName": "first",
    "signature": "org.jsoup.nodes.Node first()",
    "visibility": "public",
    "body": "{\r\n    return isEmpty() ? null : get(0);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Nodes\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d null\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0.get(0)\n  $r2 \u003d Node) $r1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Nodes#isEmpty(...0)",
        "body": "(source not found)"
      },
      {
        "name": "Nodes#get(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.select.Nodes",
    "methodName": "last",
    "signature": "org.jsoup.nodes.Node last()",
    "visibility": "public",
    "body": "{\r\n    return isEmpty() ? null : get(size() - 1);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Nodes\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d null\n  goto B3\n}",
      "B2 {\n  $i0 \u003d r0.size()\n  $i1 \u003d $i0 - 1\n  $r1 \u003d r0.get($i1)\n  $r2 \u003d Node) $r1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Nodes#isEmpty(...0)",
        "body": "(source not found)"
      },
      {
        "name": "Nodes#size(...0)",
        "body": "(source not found)"
      },
      {
        "name": "Nodes#get(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.select.Nodes",
    "methodName": "remove",
    "signature": "boolean remove(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    int index \u003d super.indexOf(o);\r\n    if (index \u003d\u003d -1) {\r\n        return false;\r\n    } else {\r\n        remove(index);\r\n        return true;\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 !\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Nodes\n  Object\n  i0 \u003d r0.indexOf(r1)\n  $i2 \u003d (int) -1\n  if (i0 !\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r0.remove(i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Nodes#remove(...1)",
        "body": "{\r\n    T old \u003d super.remove(index);\r\n    old.remove();\r\n    return old;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.select.Nodes",
    "methodName": "removeAll",
    "signature": "boolean removeAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    boolean anyRemoved \u003d false;\r\n    for (Object o : c) {\r\n        anyRemoved |\u003d this.remove(o);\r\n    }\r\n    return anyRemoved;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Nodes\n  Collection\n  z2 \u003d 0\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r1.next()\n  $z1 \u003d r3.remove(r2)\n  z2 \u003d z2 | $z1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Nodes#remove(...1)",
        "body": "{\r\n    T old \u003d super.remove(index);\r\n    old.remove();\r\n    return old;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.select.Nodes",
    "methodName": "retainAll",
    "signature": "boolean retainAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    boolean anyRemoved \u003d false;\r\n    for (Iterator\u003cT\u003e it \u003d this.iterator(); it.hasNext(); ) {\r\n        T el \u003d it.next();\r\n        if (!toRemove.contains(el)) {\r\n            it.remove();\r\n            anyRemoved \u003d true;\r\n        }\r\n    }\r\n    return anyRemoved;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Nodes\n  Collection\n  z2 \u003d 0\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r3 \u003d Node) $r2\n  $z1 \u003d r4.contains(r3)\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  r1.remove()\n  z2 \u003d 1\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Nodes#iterator(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.select.Nodes",
    "methodName": "removeIf",
    "signature": "boolean removeIf(java.util.function.Predicate)",
    "visibility": "public",
    "body": "{\r\n    boolean anyRemoved \u003d false;\r\n    for (Iterator\u003cT\u003e it \u003d this.iterator(); it.hasNext(); ) {\r\n        T node \u003d it.next();\r\n        if (filter.test(node)) {\r\n            it.remove();\r\n            anyRemoved \u003d true;\r\n        }\r\n    }\r\n    return anyRemoved;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Nodes\n  Predicate\n  z2 \u003d 0\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r3 \u003d Node) $r2\n  $z1 \u003d r4.test(r3)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  r1.remove()\n  z2 \u003d 1\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Nodes#iterator(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.select.Nodes",
    "methodName": "replaceAll",
    "signature": "void replaceAll(java.util.function.UnaryOperator)",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d 0; i \u003c this.size(); i++) {\r\n        this.set(i, operator.apply(this.get(i)));\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d $i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Nodes\n  UnaryOperator\n  i1 \u003d 0\n}",
      "B1 {\n  $i0 \u003d r0.size()\n  if (i1 \u003e\u003d $i0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r0.get(i1)\n  $r3 \u003d Node) $r2\n  $r4 \u003d r1.apply($r3)\n  $r5 \u003d Node) $r4\n  r0.set(i1, $r5)\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Nodes#set(...2)",
        "body": "{\r\n    Validate.notNull(node);\r\n    T old \u003d super.set(index, node);\r\n    old.replaceWith(node);\r\n    return old;\r\n}"
      },
      {
        "name": "Nodes#size(...0)",
        "body": "(source not found)"
      },
      {
        "name": "Nodes#get(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.jsoup.select.NodeTraversor",
    "methodName": "traverse",
    "signature": "void traverse(org.jsoup.select.NodeVisitor,org.jsoup.nodes.Node)",
    "visibility": "public",
    "body": "{\r\n    Validate.notNull(visitor);\r\n    Validate.notNull(root);\r\n    Node node \u003d root;\r\n    int depth \u003d 0;\r\n    while (node !\u003d null) {\r\n        // remember parent to find nodes that get replaced in .head\r\n        Node parent \u003d node.parentNode();\r\n        int origSize \u003d parent !\u003d null ? parent.childNodeSize() : 0;\r\n        Node next \u003d node.nextSibling();\r\n        // visit current node\r\n        visitor.head(node, depth);\r\n        if (parent !\u003d null \u0026\u0026 !node.hasParent()) {\r\n            // removed or replaced\r\n            if (origSize \u003d\u003d parent.childNodeSize()) {\r\n                // replaced\r\n                // replace ditches parent but keeps sibling index\r\n                node \u003d parent.childNode(node.siblingIndex());\r\n            } else {\r\n                // removed\r\n                node \u003d next;\r\n                if (node \u003d\u003d null) {\r\n                    // last one, go up\r\n                    node \u003d parent;\r\n                    depth--;\r\n                }\r\n                // don\u0027t tail removed\r\n                continue;\r\n            }\r\n        }\r\n        if (node.childNodeSize() \u003e 0) {\r\n            // descend\r\n            node \u003d node.childNode(0);\r\n            depth++;\r\n        } else {\r\n            while (true) {\r\n                // as depth \u003e 0, will have parent\r\n                assert node !\u003d null;\r\n                if (!(node.nextSibling() \u003d\u003d null \u0026\u0026 depth \u003e 0))\r\n                    break;\r\n                // when no more siblings, ascend\r\n                visitor.tail(node, depth);\r\n                node \u003d node.parentNode();\r\n                depth--;\r\n            }\r\n            visitor.tail(node, depth);\r\n            if (node \u003d\u003d root)\r\n                break;\r\n            node \u003d node.nextSibling();\r\n        }\r\n    }\r\n}",
    "nodes": 25,
    "edges": 35,
    "cc": 12,
    "flowSummary": [
      "B1 : If(r6 \u003d\u003d null) → B2 | else → B24",
      "B2 : If(r2 \u003d\u003d null) → B3 | else → B4",
      "B5 : If(r2 \u003d\u003d null) → B6 | else → B11",
      "B6 : If($z1 !\u003d 0) → B7 | else → B11",
      "B7 : If($i3 !\u003d $i0) → B8 | else → B9",
      "B9 : If($r5 !\u003d null) → B10 | else → B1",
      "B11 : If($i4 \u003c\u003d 0) → B12 | else → B13",
      "B13 : If($z0 !\u003d 0) → B14 | else → B16",
      "B14 : If(r6 !\u003d null) → B15 | else → B16",
      "B16 : If($r3 !\u003d null) → B17 | else → B20",
      "B17 : If(i2 \u003e 0) → B18 | else → B19",
      "B20 : If(r6 !\u003d r1) → B21 | else → B22"
    ],
    "blockList": [
      "B0 {\n  NodeVisitor\n  Node\n  Validate.notNull(r0)\n  Validate.notNull(r1)\n  r6 \u003d r1\n  i2 \u003d 0\n}",
      "B1 {\n  if (r6 \u003d\u003d null) goto B2 else B24\n}",
      "B2 {\n  r2 \u003d r6.parentNode()\n  if (r2 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $i3 \u003d r2.childNodeSize()\n  goto B5\n}",
      "B4 {\n  $i3 \u003d 0\n}",
      "B5 {\n  $r5 \u003d r6.nextSibling()\n  r0.head(r6, i2)\n  if (r2 \u003d\u003d null) goto B6 else B11\n}",
      "B6 {\n  $z1 \u003d r6.hasParent()\n  if ($z1 !\u003d 0) goto B7 else B11\n}",
      "B7 {\n  $i0 \u003d r2.childNodeSize()\n  if ($i3 !\u003d $i0) goto B8 else B9\n}",
      "B8 {\n  $i1 \u003d r6.siblingIndex()\n  r6 \u003d r2.childNode($i1)\n  goto B11\n}",
      "B9 {\n  r6 \u003d $r5\n  if ($r5 !\u003d null) goto B10 else B1\n}",
      "B10 {\n  r6 \u003d r2\n  $i6 \u003d (int) -1\n  i2 \u003d i2 + $i6\n  goto B1\n}",
      "B11 {\n  $i4 \u003d r6.childNodeSize()\n  if ($i4 \u003c\u003d 0) goto B12 else B13\n}",
      "B12 {\n  r6 \u003d r6.childNode(0)\n  i2 \u003d i2 + 1\n  goto B23\n}",
      "B13 {\n  $z0 \u003d NodeTraversor: boolean $assertionsDisabled\u003e\n  if ($z0 !\u003d 0) goto B14 else B16\n}",
      "B14 {\n  if (r6 !\u003d null) goto B15 else B16\n}",
      "B15 {\n  $r7 \u003d AssertionError\n  new AssertionError()\n  throw $r7\n}",
      "B16 {\n  $r3 \u003d r6.nextSibling()\n  if ($r3 !\u003d null) goto B17 else B20\n}",
      "B17 {\n  if (i2 \u003e 0) goto B18 else B19\n}",
      "B18 {\n  goto B20\n}",
      "B19 {\n  r0.tail(r6, i2)\n  r6 \u003d r6.parentNode()\n  $i8 \u003d (int) -1\n  i2 \u003d i2 + $i8\n  goto B13\n}",
      "B20 {\n  r0.tail(r6, i2)\n  if (r6 !\u003d r1) goto B21 else B22\n}",
      "B21 {\n  goto B24\n}",
      "B22 {\n  r6 \u003d r6.nextSibling()\n}",
      "B23 {\n  goto B1\n}",
      "B24 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B24",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B11",
      "B6 --\u003e B7",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B1",
      "B10 --\u003e B1",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B23",
      "B13 --\u003e B14",
      "B13 --\u003e B16",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B20",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B13",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B24",
      "B22 --\u003e B23",
      "B23 --\u003e B1",
      "B24 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.NodeTraversor",
    "methodName": "traverse",
    "signature": "void traverse(org.jsoup.select.NodeVisitor,org.jsoup.select.Elements)",
    "visibility": "public",
    "body": "{\r\n    Validate.notNull(visitor);\r\n    Validate.notNull(elements);\r\n    for (Element el : elements) traverse(visitor, el);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  NodeVisitor\n  Elements\n  Validate.notNull(r0)\n  Validate.notNull(r1)\n  r2 \u003d r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d r2.next()\n  r4 \u003d Element) $r3\n  NodeTraversor.traverse(r0, r4)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NodeTraversor#traverse(...2)",
        "body": "{\r\n    Validate.notNull(visitor);\r\n    Validate.notNull(root);\r\n    Node node \u003d root;\r\n    int depth \u003d 0;\r\n    while (node !\u003d null) {\r\n        // remember parent to find nodes that get replaced in .head\r\n        Node parent \u003d node.parentNode();\r\n        int origSize \u003d parent !\u003d null ? parent.childNodeSize() : 0;\r\n        Node next \u003d node.nextSibling();\r\n        // visit current node\r\n        visitor.head(node, depth);\r\n        if (parent !\u003d null \u0026\u0026 !node.hasParent()) {\r\n            // removed or replaced\r\n            if (origSize \u003d\u003d parent.childNodeSize()) {\r\n                // replaced\r\n                // replace ditches parent but keeps sibling index\r\n                node \u003d parent.childNode(node.siblingIndex());\r\n            } else {\r\n                // removed\r\n                node \u003d next;\r\n                if (node \u003d\u003d null) {\r\n                    // last one, go up\r\n                    node \u003d parent;\r\n                    depth--;\r\n                }\r\n                // don\u0027t tail removed\r\n                continue;\r\n            }\r\n        }\r\n        if (node.childNodeSize() \u003e 0) {\r\n            // descend\r\n            node \u003d node.childNode(0);\r\n            depth++;\r\n        } else {\r\n            while (true) {\r\n                // as depth \u003e 0, will have parent\r\n                assert node !\u003d null;\r\n                if (!(node.nextSibling() \u003d\u003d null \u0026\u0026 depth \u003e 0))\r\n                    break;\r\n                // when no more siblings, ascend\r\n                visitor.tail(node, depth);\r\n                node \u003d node.parentNode();\r\n                depth--;\r\n            }\r\n            visitor.tail(node, depth);\r\n            if (node \u003d\u003d root)\r\n                break;\r\n            node \u003d node.nextSibling();\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.select.NodeTraversor",
    "methodName": "filter",
    "signature": "org.jsoup.select.NodeFilter$FilterResult filter(org.jsoup.select.NodeFilter,org.jsoup.nodes.Node)",
    "visibility": "public",
    "body": "{\r\n    Node node \u003d root;\r\n    int depth \u003d 0;\r\n    while (node !\u003d null) {\r\n        FilterResult result \u003d filter.head(node, depth);\r\n        if (result \u003d\u003d FilterResult.STOP)\r\n            return result;\r\n        // Descend into child nodes:\r\n        if (result \u003d\u003d FilterResult.CONTINUE \u0026\u0026 node.childNodeSize() \u003e 0) {\r\n            node \u003d node.childNode(0);\r\n            ++depth;\r\n            continue;\r\n        }\r\n        // No siblings, move upwards:\r\n        while (true) {\r\n            // depth \u003e 0, so has parent\r\n            assert node !\u003d null;\r\n            if (!(node.nextSibling() \u003d\u003d null \u0026\u0026 depth \u003e 0))\r\n                break;\r\n            // \u0027tail\u0027 current node:\r\n            if (result \u003d\u003d FilterResult.CONTINUE || result \u003d\u003d FilterResult.SKIP_CHILDREN) {\r\n                result \u003d filter.tail(node, depth);\r\n                if (result \u003d\u003d FilterResult.STOP)\r\n                    return result;\r\n            }\r\n            // In case we need to remove it below.\r\n            Node prev \u003d node;\r\n            node \u003d node.parentNode();\r\n            depth--;\r\n            if (result \u003d\u003d FilterResult.REMOVE)\r\n                // Remove AFTER finding parent.\r\n                prev.remove();\r\n            // Parent was not pruned.\r\n            result \u003d FilterResult.CONTINUE;\r\n        }\r\n        // \u0027tail\u0027 current node, then proceed with siblings:\r\n        if (result \u003d\u003d FilterResult.CONTINUE || result \u003d\u003d FilterResult.SKIP_CHILDREN) {\r\n            result \u003d filter.tail(node, depth);\r\n            if (result \u003d\u003d FilterResult.STOP)\r\n                return result;\r\n        }\r\n        if (node \u003d\u003d root)\r\n            return result;\r\n        // In case we need to remove it below.\r\n        Node prev \u003d node;\r\n        node \u003d node.nextSibling();\r\n        if (result \u003d\u003d FilterResult.REMOVE)\r\n            // Remove AFTER finding sibling.\r\n            prev.remove();\r\n    }\r\n    // root \u003d\u003d null?\r\n    return FilterResult.CONTINUE;\r\n}",
    "nodes": 30,
    "edges": 41,
    "cc": 13,
    "flowSummary": [
      "B1 : If(r17 \u003d\u003d null) → B2 | else → B29",
      "B2 : If(r18 !\u003d $r3) → B3 | else → B4",
      "B4 : If(r18 !\u003d $r4) → B5 | else → B7",
      "B5 : If($i0 \u003c\u003d 0) → B6 | else → B7",
      "B7 : If($z0 !\u003d 0) → B8 | else → B10",
      "B8 : If(r17 !\u003d null) → B9 | else → B10",
      "B10 : If($r5 !\u003d null) → B11 | else → B20",
      "B11 : If(i1 \u003e 0) → B12 | else → B13",
      "B13 : If(r18 \u003d\u003d $r11) → B14 | else → B15",
      "B14 : If(r18 !\u003d $r14) → B15 | else → B17",
      "B15 : If($r15 !\u003d $r12) → B16 | else → B17",
      "B17 : If(r18 !\u003d $r13) → B18 | else → B19",
      "B20 : If(r18 \u003d\u003d $r6) → B21 | else → B22",
      "B21 : If(r18 !\u003d $r9) → B22 | else → B24",
      "B22 : If($r10 !\u003d $r7) → B23 | else → B24",
      "B24 : If(r17 !\u003d r0) → B25 | else → B26",
      "B26 : If(r18 !\u003d $r8) → B27 | else → B28"
    ],
    "blockList": [
      "B0 {\n  NodeFilter\n  Node\n  r17 \u003d r0\n  i1 \u003d 0\n}",
      "B1 {\n  if (r17 \u003d\u003d null) goto B2 else B29\n}",
      "B2 {\n  r18 \u003d r2.head(r17, i1)\n  $r3 \u003d NodeFilter$FilterResult STOP\u003e\n  if (r18 !\u003d $r3) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r4 \u003d NodeFilter$FilterResult CONTINUE\u003e\n  if (r18 !\u003d $r4) goto B5 else B7\n}",
      "B5 {\n  $i0 \u003d r17.childNodeSize()\n  if ($i0 \u003c\u003d 0) goto B6 else B7\n}",
      "B6 {\n  r17 \u003d r17.childNode(0)\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B7 {\n  $z0 \u003d NodeTraversor: boolean $assertionsDisabled\u003e\n  if ($z0 !\u003d 0) goto B8 else B10\n}",
      "B8 {\n  if (r17 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  $r21 \u003d AssertionError\n  new AssertionError()\n  throw $r21\n}",
      "B10 {\n  $r5 \u003d r17.nextSibling()\n  if ($r5 !\u003d null) goto B11 else B20\n}",
      "B11 {\n  if (i1 \u003e 0) goto B12 else B13\n}",
      "B12 {\n  goto B20\n}",
      "B13 {\n  $r11 \u003d NodeFilter$FilterResult CONTINUE\u003e\n  if (r18 \u003d\u003d $r11) goto B14 else B15\n}",
      "B14 {\n  $r14 \u003d NodeFilter$FilterResult SKIP_CHILDREN\u003e\n  if (r18 !\u003d $r14) goto B15 else B17\n}",
      "B15 {\n  $r15 \u003d r2.tail(r17, i1)\n  r18 \u003d $r15\n  $r12 \u003d NodeFilter$FilterResult STOP\u003e\n  if ($r15 !\u003d $r12) goto B16 else B17\n}",
      "B16 {\n  return\n}",
      "B17 {\n  r19 \u003d r17\n  r17 \u003d r17.parentNode()\n  $i3 \u003d (int) -1\n  i1 \u003d i1 + $i3\n  $r13 \u003d NodeFilter$FilterResult REMOVE\u003e\n  if (r18 !\u003d $r13) goto B18 else B19\n}",
      "B18 {\n  r19.remove()\n}",
      "B19 {\n  r18 \u003d NodeFilter$FilterResult CONTINUE\u003e\n  goto B7\n}",
      "B20 {\n  $r6 \u003d NodeFilter$FilterResult CONTINUE\u003e\n  if (r18 \u003d\u003d $r6) goto B21 else B22\n}",
      "B21 {\n  $r9 \u003d NodeFilter$FilterResult SKIP_CHILDREN\u003e\n  if (r18 !\u003d $r9) goto B22 else B24\n}",
      "B22 {\n  $r10 \u003d r2.tail(r17, i1)\n  r18 \u003d $r10\n  $r7 \u003d NodeFilter$FilterResult STOP\u003e\n  if ($r10 !\u003d $r7) goto B23 else B24\n}",
      "B23 {\n  return\n}",
      "B24 {\n  if (r17 !\u003d r0) goto B25 else B26\n}",
      "B25 {\n  return\n}",
      "B26 {\n  r20 \u003d r17\n  r17 \u003d r17.nextSibling()\n  $r8 \u003d NodeFilter$FilterResult REMOVE\u003e\n  if (r18 !\u003d $r8) goto B27 else B28\n}",
      "B27 {\n  r20.remove()\n}",
      "B28 {\n  goto B1\n}",
      "B29 {\n  $r1 \u003d NodeFilter$FilterResult CONTINUE\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B29",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B1",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B20",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B20",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B14 --\u003e B17",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e B7",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B21 --\u003e B24",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e [EXIT]",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e [EXIT]",
      "B26 --\u003e B27",
      "B26 --\u003e B28",
      "B27 --\u003e B28",
      "B28 --\u003e B1",
      "B29 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.jsoup.select.NodeTraversor",
    "methodName": "filter",
    "signature": "void filter(org.jsoup.select.NodeFilter,org.jsoup.select.Elements)",
    "visibility": "public",
    "body": "{\r\n    Validate.notNull(filter);\r\n    Validate.notNull(elements);\r\n    for (Element el : elements) if (filter(filter, el) \u003d\u003d FilterResult.STOP)\r\n        break;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($r6 !\u003d $r5) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  NodeFilter\n  Elements\n  Validate.notNull(r0)\n  Validate.notNull(r1)\n  r2 \u003d r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r3 \u003d r2.next()\n  r4 \u003d Element) $r3\n  $r6 \u003d NodeTraversor.filter(r0, r4)\n  $r5 \u003d NodeFilter$FilterResult STOP\u003e\n  if ($r6 !\u003d $r5) goto B3 else B4\n}",
      "B3 {\n  goto B5\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NodeTraversor#filter(...2)",
        "body": "{\r\n    Node node \u003d root;\r\n    int depth \u003d 0;\r\n    while (node !\u003d null) {\r\n        FilterResult result \u003d filter.head(node, depth);\r\n        if (result \u003d\u003d FilterResult.STOP)\r\n            return result;\r\n        // Descend into child nodes:\r\n        if (result \u003d\u003d FilterResult.CONTINUE \u0026\u0026 node.childNodeSize() \u003e 0) {\r\n            node \u003d node.childNode(0);\r\n            ++depth;\r\n            continue;\r\n        }\r\n        // No siblings, move upwards:\r\n        while (true) {\r\n            // depth \u003e 0, so has parent\r\n            assert node !\u003d null;\r\n            if (!(node.nextSibling() \u003d\u003d null \u0026\u0026 depth \u003e 0))\r\n                break;\r\n            // \u0027tail\u0027 current node:\r\n            if (result \u003d\u003d FilterResult.CONTINUE || result \u003d\u003d FilterResult.SKIP_CHILDREN) {\r\n                result \u003d filter.tail(node, depth);\r\n                if (result \u003d\u003d FilterResult.STOP)\r\n                    return result;\r\n            }\r\n            // In case we need to remove it below.\r\n            Node prev \u003d node;\r\n            node \u003d node.parentNode();\r\n            depth--;\r\n            if (result \u003d\u003d FilterResult.REMOVE)\r\n                // Remove AFTER finding parent.\r\n                prev.remove();\r\n            // Parent was not pruned.\r\n            result \u003d FilterResult.CONTINUE;\r\n        }\r\n        // \u0027tail\u0027 current node, then proceed with siblings:\r\n        if (result \u003d\u003d FilterResult.CONTINUE || result \u003d\u003d FilterResult.SKIP_CHILDREN) {\r\n            result \u003d filter.tail(node, depth);\r\n            if (result \u003d\u003d FilterResult.STOP)\r\n                return result;\r\n        }\r\n        if (node \u003d\u003d root)\r\n            return result;\r\n        // In case we need to remove it below.\r\n        Node prev \u003d node;\r\n        node \u003d node.nextSibling();\r\n        if (result \u003d\u003d FilterResult.REMOVE)\r\n            // Remove AFTER finding sibling.\r\n            prev.remove();\r\n    }\r\n    // root \u003d\u003d null?\r\n    return FilterResult.CONTINUE;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.select.Selector",
    "methodName": "select",
    "signature": "org.jsoup.select.Elements select(java.lang.String,java.lang.Iterable)",
    "visibility": "public",
    "body": "{\r\n    Validate.notEmpty(query);\r\n    Validate.notNull(roots);\r\n    Evaluator evaluator \u003d evaluatorOf(query);\r\n    Elements elements \u003d new Elements();\r\n    // dedupe elements by identity, as .equals is \u003d\u003d\r\n    HashSet\u003cElement\u003e seenElements \u003d new HashSet\u003c\u003e();\r\n    for (Element root : roots) {\r\n        selectStream(evaluator, root).filter(seenElements::add).forEach(elements::add);\r\n    }\r\n    return elements;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  String\n  Iterable\n  Validate.notEmpty(r0)\n  Validate.notNull(r1)\n  r2 \u003d Selector.evaluatorOf(r0)\n  $r3 \u003d Elements\n  new Elements()\n  $r4 \u003d HashSet\n  new HashSet()\n  r5 \u003d r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r5.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d r5.next()\n  r7 \u003d Element) $r6\n  $r9 \u003d Selector.selectStream(r2, r7)\n  Objects.requireNonNull($r4)\n  $r8 \u003d Selector$add__14.bootstrap$($r4)\n  $r11 \u003d $r9.filter($r8)\n  Objects.requireNonNull($r3)\n  $r10 \u003d Selector$add__15.bootstrap$($r3)\n  $r11.forEach($r10)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Selector#evaluatorOf(...1)",
        "body": "{\r\n    return QueryParser.parse(css);\r\n}"
      },
      {
        "name": "Selector#selectStream(...2)",
        "body": "{\r\n    Validate.notEmpty(query);\r\n    return selectStream(evaluatorOf(query), root);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.jsoup.select.Selector",
    "methodName": "selectFirst",
    "signature": "org.jsoup.nodes.Element selectFirst(java.lang.String,java.lang.Iterable)",
    "visibility": "public",
    "body": "{\r\n    Validate.notEmpty(cssQuery);\r\n    Validate.notNull(roots);\r\n    Evaluator evaluator \u003d evaluatorOf(cssQuery);\r\n    for (Element root : roots) {\r\n        Element first \u003d Collector.findFirst(evaluator, root);\r\n        if (first !\u003d null)\r\n            return first;\r\n    }\r\n    return null;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If(r6 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  String\n  Iterable\n  Validate.notEmpty(r0)\n  Validate.notNull(r1)\n  r2 \u003d Selector.evaluatorOf(r0)\n  r3 \u003d r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r3.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r4 \u003d r3.next()\n  r5 \u003d Element) $r4\n  r6 \u003d Collector.findFirst(r2, r5)\n  if (r6 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Selector#evaluatorOf(...1)",
        "body": "{\r\n    return QueryParser.parse(css);\r\n}"
      }
    ]
  },
  {
    "clazz": "SootCFGAnalysis",
    "methodName": "main",
    "signature": "void main(java.lang.String[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 42,
    "edges": 55,
    "cc": 15,
    "flowSummary": [
      "B0 : If($r0 !\u003d null) → B1 | else → B2",
      "B2 : If($r1 !\u003d null) → B3 | else → B4",
      "B5 : If($z6 \u003d\u003d false) → B6 | else → B35",
      "B7 : If($z7 \u003d\u003d false) → B8 | else → B34",
      "B8 : If($z0 !\u003d 0) → B9 | else → B10",
      "B11 : If($z1 \u003d\u003d false) → B12 | else → B13",
      "B14 : If($z2 \u003d\u003d false) → B15 | else → B18",
      "B15 : If(i8 \u003c\u003d 0) → B16 | else → B17",
      "B18 : If(i6 \u003e i7) → B19 | else → B20",
      "B21 : If($z3 \u003d\u003d false) → B22 | else → B23",
      "B22 : If($z4 !\u003d 0) → B23 | else → B24",
      "B24 : If(i0 \u003d\u003d false) → B25 | else → B26",
      "B25 : If(i4 !\u003d 0) → B26 | else → B27",
      "B27 : If(i5 \u003e 0) → B28 | else → B29",
      "B29 : If($z5 !\u003d 0) → B30 | else → B31"
    ],
    "blockList": [
      "B0 {\n  String[]\n  $r0 \u003d System.getProperty(\"sun.boot.class.path\")\n  if ($r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  System.setProperty(\"sun.boot.class.path\", \"\")\n}",
      "B2 {\n  $r1 \u003d System.getProperty(\"java.ext.dirs\")\n  if ($r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  System.setProperty(\"java.ext.dirs\", \"\")\n}",
      "B4 {\n  $r2 \u003d Options.v()\n  $r2.set_prepend_classpath(1)\n  $r4 \u003d Options.v()\n  $r3 \u003d Collections.singletonList(\"C:\\\\Users\\\\00000\\\\Desktop\\\\my\\\\javaBenchmark\\\\jsoup-jsoup-1.21.1\\\\target\\\\classes\")\n  $r4.set_process_dir($r3)\n  $r5 \u003d Options.v()\n  $r5.set_whole_program(1)\n  $r6 \u003d Options.v()\n  $r6.set_output_format(12)\n  $r7 \u003d Options.v()\n  $r7.set_no_bodies_for_excluded(1)\n  $r8 \u003d Options.v()\n  $r8.set_allow_phantom_refs(1)\n  $r9 \u003d Options.v()\n  $r9.set_keep_line_number(1)\n  $r10 \u003d Options.v()\n  $r10.set_no_bodies_for_excluded(1)\n  $r12 \u003d Options.v()\n  $r11 \u003d Collections.singletonList(\"target/classes\")\n  $r12.set_process_dir($r11)\n  $r13 \u003d Options.v()\n  $r13.set_src_prec(1)\n  $r14 \u003d Options.v()\n  $r14.setPhaseOption(\"jb\", \"use-original-names:true\")\n  $r15 \u003d Scene.v()\n  $r15.loadNecessaryClasses()\n  $r16 \u003d HashSet\n  new HashSet()\n  $r17 \u003d CSVWriter\n  $r18 \u003d FileWriter\n  new FileWriter(\"C:\\\\Users\\\\00000\\\\Desktop\\\\my\\\\cfg_analysis_all_result_jsoup.csv\")\n  new CSVWriter($r18)\n  $r19 \u003d String)[9]\n  $r19[0] \u003d \"Class\"\n  $r19[1] \u003d \"Method\"\n  $r19[2] \u003d \"MethodSig\"\n  $r19[3] \u003d \"Nodes\"\n  $r19[4] \u003d \"Edges\"\n  $r19[5] \u003d \"McCabe_CC\"\n  $r19[6] \u003d \"StartLine\"\n  $r19[7] \u003d \"EndLine\"\n  $r19[8] \u003d \"LineCount\"\n  $r17.writeNext($r19)\n  $r20 \u003d ArrayList\n  $r21 \u003d Scene.v()\n  $r22 \u003d $r21.getApplicationClasses()\n  new ArrayList($r22)\n  $r45 \u003d $r20.iterator()\n}",
      "B5 {\n  $z6 \u003d $r45.hasNext()\n  if ($z6 \u003d\u003d false) goto B6 else B35\n}",
      "B6 {\n  $r25 \u003d $r45.next()\n  r26 \u003d SootClass) $r25\n  $r27 \u003d r26.getMethods()\n  r28 \u003d $r27.iterator()\n}",
      "B7 {\n  $z7 \u003d r28.hasNext()\n  if ($z7 \u003d\u003d false) goto B8 else B34\n}",
      "B8 {\n  $r29 \u003d r28.next()\n  r30 \u003d SootMethod) $r29\n  $z0 \u003d r30.isConcrete()\n  if ($z0 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  goto B7\n}",
      "B10 {\n  r59 \u003d r30.retrieveActiveBody()\n  $r31 \u003d BriefBlockGraph\n  new BriefBlockGraph(r59)\n  i0 \u003d $r31.size()\n  i4 \u003d 0\n  r60 \u003d $r31.iterator()\n}",
      "B11 {\n  $z1 \u003d r60.hasNext()\n  if ($z1 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $r43 \u003d r60.next()\n  r61 \u003d Block) $r43\n  $r44 \u003d $r31.getSuccsOf(r61)\n  $i3 \u003d $r44.size()\n  i4 \u003d i4 + $i3\n  goto B11\n}",
      "B13 {\n  $i1 \u003d i4 - i0\n  i5 \u003d $i1 + 2\n  i6 \u003d 2147483647\n  i7 \u003d -2147483648\n  $r32 \u003d r59.getUnits()\n  r62 \u003d $r32.iterator()\n}",
      "B14 {\n  $z2 \u003d r62.hasNext()\n  if ($z2 \u003d\u003d false) goto B15 else B18\n}",
      "B15 {\n  $r42 \u003d r62.next()\n  r63 \u003d Unit) $r42\n  i8 \u003d r63.getJavaSourceStartLineNumber()\n  if (i8 \u003c\u003d 0) goto B16 else B17\n}",
      "B16 {\n  i6 \u003d Math.min(i6, i8)\n  i7 \u003d Math.max(i7, i8)\n}",
      "B17 {\n  goto B14\n}",
      "B18 {\n  if (i6 \u003e i7) goto B19 else B20\n}",
      "B19 {\n  $i2 \u003d i7 - i6\n  $i9 \u003d $i2 + 1\n  goto B21\n}",
      "B20 {\n  $i9 \u003d 0\n}",
      "B21 {\n  $z3 \u003d SootCFGAnalysis.isTopLevelPublic(r26)\n  if ($z3 \u003d\u003d false) goto B22 else B23\n}",
      "B22 {\n  $z4 \u003d SootCFGAnalysis.isRealMethod(r30)\n  if ($z4 !\u003d 0) goto B23 else B24\n}",
      "B23 {\n  goto B7\n}",
      "B24 {\n  if (i0 \u003d\u003d false) goto B25 else B26\n}",
      "B25 {\n  if (i4 !\u003d 0) goto B26 else B27\n}",
      "B26 {\n  goto B7\n}",
      "B27 {\n  if (i5 \u003e 0) goto B28 else B29\n}",
      "B28 {\n  goto B7\n}",
      "B29 {\n  r30.getSubSignature()\n  r64 \u003d r30.getSignature()\n  $z5 \u003d $r16.add(r64)\n  if ($z5 !\u003d 0) goto B30 else B31\n}",
      "B30 {\n  goto B7\n}",
      "B31 {\n  $r33 \u003d String)[9]\n  $r34 \u003d r26.getName()\n  $r33[0] \u003d $r34\n  $r35 \u003d r30.getName()\n  $r33[1] \u003d $r35\n  $r33[2] \u003d r64\n  $r36 \u003d String.valueOf(i0)\n  $r33[3] \u003d $r36\n  $r37 \u003d String.valueOf(i4)\n  $r33[4] \u003d $r37\n  $r38 \u003d String.valueOf(i5)\n  $r33[5] \u003d $r38\n  $r39 \u003d String.valueOf(i6)\n  $r33[6] \u003d $r39\n  $r40 \u003d String.valueOf(i7)\n  $r33[7] \u003d $r40\n  $r41 \u003d String.valueOf($i9)\n  $r33[8] \u003d $r41\n  $r17.writeNext($r33)\n  goto B33\n}",
      "B32 {\n  $r52 :\u003d @caughtexception\n  $r54 \u003d PrintStream out\u003e\n  $r53 \u003d Object)[3]\n  $r55 \u003d r26.getName()\n  $r53[0] \u003d $r55\n  $r56 \u003d r30.getName()\n  $r53[1] \u003d $r56\n  $r57 \u003d $r52.getMessage()\n  $r53[2] \u003d $r57\n  $r54.printf(\"\\u26a0\\ufe0f \\uc624\\ub958 %s.%s: %s\\n\", $r53)\n}",
      "B33 {\n  goto B7\n}",
      "B34 {\n  goto B5\n}",
      "B35 {\n  $r23 \u003d PrintStream out\u003e\n  $r24 \u003d dynInvoke makeConcatWithConstants(\"C:\\\\Users\\\\00000\\\\Desktop\\\\my\\\\cfg_analysis_all_result_jsoup.csv\")\n  $r23.println($r24)\n  $r17.close()\n  goto B39\n}",
      "B36 {\n  $r51 :\u003d @caughtexception\n  $r17.close()\n  goto B38\n}",
      "B37 {\n  $r50 :\u003d @caughtexception\n  $r51.addSuppressed($r50)\n}",
      "B38 {\n  throw $r51\n}",
      "B39 {\n  goto B41\n}",
      "B40 {\n  $r46 :\u003d @caughtexception\n  $r47 \u003d PrintStream err\u003e\n  $r48 \u003d $r46.getMessage()\n  $r49 \u003d dynInvoke makeConcatWithConstants($r48)\n  $r47.println($r49)\n}",
      "B41 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B35",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B34",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B7",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B11",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B18",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e B14",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B21",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B7",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B7",
      "B27 --\u003e B28",
      "B27 --\u003e B29",
      "B28 --\u003e B7",
      "B29 --\u003e B30",
      "B29 --\u003e B31",
      "B30 --\u003e B7",
      "B31 --\u003e B33",
      "B32 --\u003e B33",
      "B33 --\u003e B7",
      "B34 --\u003e B5",
      "B35 --\u003e B39",
      "B36 --\u003e B38",
      "B37 --\u003e B38",
      "B38 --\u003e [EXIT]",
      "B39 --\u003e B41",
      "B40 --\u003e B41",
      "B41 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  }
]