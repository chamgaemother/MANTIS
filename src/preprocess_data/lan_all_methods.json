[
  {
    "clazz": "org.apache.commons.lang3.AnnotationUtils",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.\u0027annotation\u0027.Annotation,java.lang.\u0027annotation\u0027.Annotation)",
    "visibility": "public",
    "body": "{\r\n    if (a1 \u003d\u003d a2) {\r\n        return true;\r\n    }\r\n    if (a1 \u003d\u003d null || a2 \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    final Class\u003c? extends Annotation\u003e type1 \u003d a1.annotationType();\r\n    final Class\u003c? extends Annotation\u003e type2 \u003d a2.annotationType();\r\n    Validate.notNull(type1, \"Annotation %s with null annotationType()\", a1);\r\n    Validate.notNull(type2, \"Annotation %s with null annotationType()\", a2);\r\n    if (!type1.equals(type2)) {\r\n        return false;\r\n    }\r\n    try {\r\n        for (final Method m : type1.getDeclaredMethods()) {\r\n            if (m.getParameterTypes().length \u003d\u003d 0 \u0026\u0026 isValidAnnotationMemberType(m.getReturnType())) {\r\n                final Object v1 \u003d m.invoke(a1);\r\n                final Object v2 \u003d m.invoke(a2);\r\n                if (!memberEquals(m.getReturnType(), v1, v2)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    } catch (final ReflectiveOperationException ex) {\r\n        return false;\r\n    }\r\n    return true;\r\n}",
    "nodes": 17,
    "edges": 19,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 \u003d\u003d null) → B3 | else → B4",
      "B3 : If(r1 !\u003d null) → B4 | else → B5",
      "B5 : If($z0 !\u003d 0) → B6 | else → B7",
      "B8 : If(i2 \u003e\u003d i0) → B9 | else → B14",
      "B9 : If($i1 !\u003d 0) → B10 | else → B13",
      "B10 : If($z1 \u003d\u003d false) → B11 | else → B13",
      "B11 : If($z2 !\u003d 0) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  Annotation\n  Annotation\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  if (r1 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  r2 \u003d r0.annotationType()\n  r3 \u003d r1.annotationType()\n  $r4 \u003d Object)[1]\n  $r4[0] \u003d r0\n  Validate.notNull(r2, \"Annotation %s with null annotationType()\", $r4)\n  $r5 \u003d Object)[1]\n  $r5[0] \u003d r1\n  Validate.notNull(r3, \"Annotation %s with null annotationType()\", $r5)\n  $z0 \u003d r2.equals(r3)\n  if ($z0 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  r15 \u003d r2.getDeclaredMethods()\n  i0 \u003d lengthof r15\n  i2 \u003d 0\n}",
      "B8 {\n  if (i2 \u003e\u003d i0) goto B9 else B14\n}",
      "B9 {\n  r6 \u003d r15[i2]\n  $r7 \u003d r6.getParameterTypes()\n  $i1 \u003d lengthof $r7\n  if ($i1 !\u003d 0) goto B10 else B13\n}",
      "B10 {\n  $r8 \u003d r6.getReturnType()\n  $z1 \u003d AnnotationUtils.isValidAnnotationMemberType($r8)\n  if ($z1 \u003d\u003d false) goto B11 else B13\n}",
      "B11 {\n  $r9 \u003d Object)[0]\n  r10 \u003d r6.invoke(r0, $r9)\n  $r11 \u003d Object)[0]\n  r12 \u003d r6.invoke(r1, $r11)\n  $r13 \u003d r6.getReturnType()\n  $z2 \u003d AnnotationUtils.memberEquals($r13, r10, r12)\n  if ($z2 !\u003d 0) goto B12 else B13\n}",
      "B12 {\n  return\n}",
      "B13 {\n  i2 \u003d i2 + 1\n  goto B8\n}",
      "B14 {\n  goto B16\n}",
      "B15 {\n  $r14 :\u003d @caughtexception\n  return\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B14",
      "B9 --\u003e B10",
      "B9 --\u003e B13",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B8",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AnnotationUtils#memberEquals(...3)",
        "body": "{\r\n    if (o1 \u003d\u003d o2) {\r\n        return true;\r\n    }\r\n    if (o1 \u003d\u003d null || o2 \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (type.isArray()) {\r\n        return arrayMemberEquals(type.getComponentType(), o1, o2);\r\n    }\r\n    if (type.isAnnotation()) {\r\n        return equals((Annotation) o1, (Annotation) o2);\r\n    }\r\n    return o1.equals(o2);\r\n}"
      },
      {
        "name": "AnnotationUtils#isValidAnnotationMemberType(...1)",
        "body": "{\r\n    if (type \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (type.isArray()) {\r\n        type \u003d type.getComponentType();\r\n    }\r\n    return type.isPrimitive() || type.isEnum() || type.isAnnotation() || String.class.equals(type) || Class.class.equals(type);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.AnnotationUtils",
    "methodName": "hashCode",
    "signature": "int hashCode(java.lang.\u0027annotation\u0027.Annotation)",
    "visibility": "public",
    "body": "{\r\n    int result \u003d 0;\r\n    final Class\u003c? extends Annotation\u003e type \u003d a.annotationType();\r\n    for (final Method m : type.getDeclaredMethods()) {\r\n        try {\r\n            final Object value \u003d m.invoke(a);\r\n            if (value \u003d\u003d null) {\r\n                throw new IllegalStateException(String.format(\"Annotation method %s returned null\", m));\r\n            }\r\n            result +\u003d hashMember(m.getName(), value);\r\n        } catch (final ReflectiveOperationException ex) {\r\n            throw new UncheckedException(ex);\r\n        }\r\n    }\r\n    return result;\r\n}",
    "nodes": 8,
    "edges": 7,
    "cc": 1,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d i0) → B2 | else → B7",
      "B2 : If(r11 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Annotation\n  i2 \u003d 0\n  r1 \u003d r0.annotationType()\n  r2 \u003d r1.getDeclaredMethods()\n  i0 \u003d lengthof r2\n  i3 \u003d 0\n}",
      "B1 {\n  if (i3 \u003e\u003d i0) goto B2 else B7\n}",
      "B2 {\n  r3 \u003d r2[i3]\n  $r4 \u003d Object)[0]\n  r11 \u003d r3.invoke(r0, $r4)\n  if (r11 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d IllegalStateException\n  $r7 \u003d Object)[1]\n  $r7[0] \u003d r3\n  $r8 \u003d String.format(\"Annotation method %s returned null\", $r7)\n  new IllegalStateException($r8)\n  throw $r6\n}",
      "B4 {\n  $r5 \u003d r3.getName()\n  $i1 \u003d AnnotationUtils.hashMember($r5, r11)\n  i2 \u003d i2 + $i1\n  goto B6\n}",
      "B5 {\n  $r9 :\u003d @caughtexception\n  $r10 \u003d UncheckedException\n  new UncheckedException($r9)\n  throw $r10\n}",
      "B6 {\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B1",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AnnotationUtils#hashMember(...2)",
        "body": "{\r\n    final int part1 \u003d name.hashCode() * 127;\r\n    if (ObjectUtils.isArray(value)) {\r\n        return part1 ^ arrayMemberHash(value.getClass().getComponentType(), value);\r\n    }\r\n    if (value instanceof Annotation) {\r\n        return part1 ^ hashCode((Annotation) value);\r\n    }\r\n    return part1 ^ value.hashCode();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.AnnotationUtils",
    "methodName": "isValidAnnotationMemberType",
    "signature": "boolean isValidAnnotationMemberType(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (type \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (type.isArray()) {\r\n        type \u003d type.getComponentType();\r\n    }\r\n    return type.isPrimitive() || type.isEnum() || type.isAnnotation() || String.class.equals(type) || Class.class.equals(type);\r\n}",
    "nodes": 12,
    "edges": 17,
    "cc": 7,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z1 !\u003d 0) → B5 | else → B9",
      "B5 : If($z2 !\u003d 0) → B6 | else → B9",
      "B6 : If($z3 !\u003d 0) → B7 | else → B9",
      "B7 : If($z4 !\u003d 0) → B8 | else → B9",
      "B8 : If($z5 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  Class\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r2.isArray()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  r2 \u003d r2.getComponentType()\n}",
      "B4 {\n  $z1 \u003d r2.isPrimitive()\n  if ($z1 !\u003d 0) goto B5 else B9\n}",
      "B5 {\n  $z2 \u003d r2.isEnum()\n  if ($z2 !\u003d 0) goto B6 else B9\n}",
      "B6 {\n  $z3 \u003d r2.isAnnotation()\n  if ($z3 !\u003d 0) goto B7 else B9\n}",
      "B7 {\n  $r0 \u003d class \"Ljava/lang/String;\"\n  $z4 \u003d $r0.equals(r2)\n  if ($z4 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  $r1 \u003d class \"Ljava/lang/Class;\"\n  $z5 \u003d $r1.equals(r2)\n  if ($z5 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $z6 \u003d 1\n  goto B11\n}",
      "B10 {\n  $z6 \u003d 0\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.AnnotationUtils",
    "methodName": "toString",
    "signature": "java.lang.String toString(java.lang.\u0027annotation\u0027.Annotation)",
    "visibility": "public",
    "body": "{\r\n    final ToStringBuilder builder \u003d new ToStringBuilder(a, TO_STRING_STYLE);\r\n    for (final Method m : a.annotationType().getDeclaredMethods()) {\r\n        if (m.getParameterTypes().length \u003e 0) {\r\n            // wtf?\r\n            continue;\r\n        }\r\n        try {\r\n            builder.append(m.getName(), m.invoke(a));\r\n        } catch (final ReflectiveOperationException ex) {\r\n            throw new UncheckedException(ex);\r\n        }\r\n    }\r\n    return builder.build();\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d i0) → B2 | else → B7",
      "B2 : If($i1 \u003c\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Annotation\n  $r0 \u003d ToStringBuilder\n  $r2 \u003d ToStringStyle TO_STRING_STYLE\u003e\n  new ToStringBuilder(r1, $r2)\n  $r3 \u003d r1.annotationType()\n  r4 \u003d $r3.getDeclaredMethods()\n  i0 \u003d lengthof r4\n  i2 \u003d 0\n}",
      "B1 {\n  if (i2 \u003e\u003d i0) goto B2 else B7\n}",
      "B2 {\n  r6 \u003d r4[i2]\n  $r7 \u003d r6.getParameterTypes()\n  $i1 \u003d lengthof $r7\n  if ($i1 \u003c\u003d 0) goto B3 else B4\n}",
      "B3 {\n  goto B6\n}",
      "B4 {\n  $r10 \u003d r6.getName()\n  $r8 \u003d Object)[0]\n  $r9 \u003d r6.invoke(r1, $r8)\n  $r0.append($r10, $r9)\n  goto B6\n}",
      "B5 {\n  $r11 :\u003d @caughtexception\n  $r12 \u003d UncheckedException\n  new UncheckedException($r11)\n  throw $r12\n}",
      "B6 {\n  i2 \u003d i2 + 1\n  goto B1\n}",
      "B7 {\n  $r5 \u003d $r0.build()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B1",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.arch.Processor",
    "methodName": "is32Bit",
    "signature": "boolean is32Bit()",
    "visibility": "public",
    "body": "{\r\n    return Arch.BIT_32 \u003d\u003d arch;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Processor\n  $r2 \u003d Processor$Arch BIT_32\u003e\n  $r1 \u003d Processor$Arch arch\u003e\n  if ($r2 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.arch.Processor",
    "methodName": "is64Bit",
    "signature": "boolean is64Bit()",
    "visibility": "public",
    "body": "{\r\n    return Arch.BIT_64 \u003d\u003d arch;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Processor\n  $r2 \u003d Processor$Arch BIT_64\u003e\n  $r1 \u003d Processor$Arch arch\u003e\n  if ($r2 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.arch.Processor",
    "methodName": "isAarch64",
    "signature": "boolean isAarch64()",
    "visibility": "public",
    "body": "{\r\n    return Type.AARCH_64 \u003d\u003d type;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Processor\n  $r2 \u003d Processor$Type AARCH_64\u003e\n  $r1 \u003d Processor$Type type\u003e\n  if ($r2 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.arch.Processor",
    "methodName": "isIA64",
    "signature": "boolean isIA64()",
    "visibility": "public",
    "body": "{\r\n    return Type.IA_64 \u003d\u003d type;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Processor\n  $r2 \u003d Processor$Type IA_64\u003e\n  $r1 \u003d Processor$Type type\u003e\n  if ($r2 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.arch.Processor",
    "methodName": "isPPC",
    "signature": "boolean isPPC()",
    "visibility": "public",
    "body": "{\r\n    return Type.PPC \u003d\u003d type;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Processor\n  $r2 \u003d Processor$Type PPC\u003e\n  $r1 \u003d Processor$Type type\u003e\n  if ($r2 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.arch.Processor",
    "methodName": "isRISCV",
    "signature": "boolean isRISCV()",
    "visibility": "public",
    "body": "{\r\n    return Type.RISC_V \u003d\u003d type;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Processor\n  $r2 \u003d Processor$Type RISC_V\u003e\n  $r1 \u003d Processor$Type type\u003e\n  if ($r2 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.arch.Processor",
    "methodName": "isX86",
    "signature": "boolean isX86()",
    "visibility": "public",
    "body": "{\r\n    return Type.X86 \u003d\u003d type;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Processor\n  $r2 \u003d Processor$Type X86\u003e\n  $r1 \u003d Processor$Type type\u003e\n  if ($r2 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayFill",
    "methodName": "fill",
    "signature": "byte[] fill(byte[],byte)",
    "visibility": "public",
    "body": "{\r\n    if (a !\u003d null) {\r\n        Arrays.fill(a, val);\r\n    }\r\n    return a;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  b0 :\u003d @parameter1: byte\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  Arrays.fill(r0, b0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayFill",
    "methodName": "fill",
    "signature": "char[] fill(char[],char)",
    "visibility": "public",
    "body": "{\r\n    if (a !\u003d null) {\r\n        Arrays.fill(a, val);\r\n    }\r\n    return a;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  c0 :\u003d @parameter1: char\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  Arrays.fill(r0, c0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayFill",
    "methodName": "fill",
    "signature": "double[] fill(double[],double)",
    "visibility": "public",
    "body": "{\r\n    if (a !\u003d null) {\r\n        Arrays.fill(a, val);\r\n    }\r\n    return a;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  d0 :\u003d @parameter1: double\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  Arrays.fill(r0, d0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayFill",
    "methodName": "fill",
    "signature": "float[] fill(float[],float)",
    "visibility": "public",
    "body": "{\r\n    if (a !\u003d null) {\r\n        Arrays.fill(a, val);\r\n    }\r\n    return a;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  f0 :\u003d @parameter1: float\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  Arrays.fill(r0, f0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayFill",
    "methodName": "fill",
    "signature": "int[] fill(int[],int)",
    "visibility": "public",
    "body": "{\r\n    if (a !\u003d null) {\r\n        Arrays.fill(a, val);\r\n    }\r\n    return a;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  i0 :\u003d @parameter1: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  Arrays.fill(r0, i0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayFill",
    "methodName": "fill",
    "signature": "long[] fill(long[],long)",
    "visibility": "public",
    "body": "{\r\n    if (a !\u003d null) {\r\n        Arrays.fill(a, val);\r\n    }\r\n    return a;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  l0 :\u003d @parameter1: long\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  Arrays.fill(r0, l0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayFill",
    "methodName": "fill",
    "signature": "short[] fill(short[],short)",
    "visibility": "public",
    "body": "{\r\n    if (a !\u003d null) {\r\n        Arrays.fill(a, val);\r\n    }\r\n    return a;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  s0 :\u003d @parameter1: short\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  Arrays.fill(r0, s0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayFill",
    "methodName": "fill",
    "signature": "java.lang.Object[] fill(java.lang.Object[],java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  Arrays.fill(r0, r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArraySorter",
    "methodName": "sort",
    "signature": "byte[] sort(byte[])",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        Arrays.sort(array);\r\n    }\r\n    return array;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  Arrays.sort(r0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArraySorter",
    "methodName": "sort",
    "signature": "char[] sort(char[])",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        Arrays.sort(array);\r\n    }\r\n    return array;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  Arrays.sort(r0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArraySorter",
    "methodName": "sort",
    "signature": "double[] sort(double[])",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        Arrays.sort(array);\r\n    }\r\n    return array;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  Arrays.sort(r0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArraySorter",
    "methodName": "sort",
    "signature": "float[] sort(float[])",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        Arrays.sort(array);\r\n    }\r\n    return array;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  Arrays.sort(r0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArraySorter",
    "methodName": "sort",
    "signature": "int[] sort(int[])",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        Arrays.sort(array);\r\n    }\r\n    return array;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  Arrays.sort(r0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArraySorter",
    "methodName": "sort",
    "signature": "long[] sort(long[])",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        Arrays.sort(array);\r\n    }\r\n    return array;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  Arrays.sort(r0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArraySorter",
    "methodName": "sort",
    "signature": "short[] sort(short[])",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        Arrays.sort(array);\r\n    }\r\n    return array;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  Arrays.sort(r0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArraySorter",
    "methodName": "sort",
    "signature": "java.lang.Object[] sort(java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  Arrays.sort(r0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArraySorter",
    "methodName": "sort",
    "signature": "java.lang.Object[] sort(java.lang.Object[],java.util.Comparator)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  Comparator\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  Arrays.sort(r0, r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "add",
    "signature": "java.lang.Object[] add(java.lang.Object[],int,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(r1 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  i0 :\u003d @parameter1: int\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r5 \u003d ArrayUtils.getComponentType(r0)\n  goto B5\n}",
      "B2 {\n  if (r1 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  r5 \u003d ObjectUtils.getClass(r1)\n  goto B5\n}",
      "B4 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Array and element cannot both be null\")\n  throw $r2\n}",
      "B5 {\n  $r3 \u003d ArrayUtils.add(r0, i0, r1, r5)\n  $r4 \u003d Object[]) $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "add",
    "signature": "java.lang.Object[] add(java.lang.Object[],java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(r1 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r0.getClass()\n  r6 \u003d $r4.getComponentType()\n  goto B5\n}",
      "B2 {\n  if (r1 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  r6 \u003d r1.getClass()\n  goto B5\n}",
      "B4 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Arguments cannot both be null\")\n  throw $r2\n}",
      "B5 {\n  $r3 \u003d ArrayUtils.copyArrayGrow1(r0, r6)\n  $r5 \u003d Object[]) $r3\n  $i0 \u003d lengthof $r5\n  $i1 \u003d $i0 - 1\n  $r5[$i1] \u003d r1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "addAll",
    "signature": "boolean[] addAll(boolean[],boolean[])",
    "visibility": "public",
    "body": "{\r\n    if (array1 \u003d\u003d null) {\r\n        return clone(array2);\r\n    }\r\n    if (array2 \u003d\u003d null) {\r\n        return clone(array1);\r\n    }\r\n    final boolean[] joinedArray \u003d new boolean[array1.length + array2.length];\r\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\r\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\r\n    return joinedArray;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r1 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  r1 :\u003d @parameter1: boolean[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d ArrayUtils.clone(r1)\n  return\n}",
      "B2 {\n  if (r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  $i0 \u003d lengthof r1\n  $i2 \u003d $i1 + $i0\n  r2 \u003d newarray (boolean)[$i2]\n  $i3 \u003d lengthof r0\n  System.arraycopy(r0, 0, r2, 0, $i3)\n  $i5 \u003d lengthof r0\n  $i4 \u003d lengthof r1\n  System.arraycopy(r1, 0, r2, $i5, $i4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "addAll",
    "signature": "byte[] addAll(byte[],byte[])",
    "visibility": "public",
    "body": "{\r\n    if (array1 \u003d\u003d null) {\r\n        return clone(array2);\r\n    }\r\n    if (array2 \u003d\u003d null) {\r\n        return clone(array1);\r\n    }\r\n    final byte[] joinedArray \u003d new byte[array1.length + array2.length];\r\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\r\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\r\n    return joinedArray;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r1 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  r1 :\u003d @parameter1: byte[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d ArrayUtils.clone(r1)\n  return\n}",
      "B2 {\n  if (r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  $i0 \u003d lengthof r1\n  $i2 \u003d $i1 + $i0\n  r2 \u003d newarray (byte)[$i2]\n  $i3 \u003d lengthof r0\n  System.arraycopy(r0, 0, r2, 0, $i3)\n  $i5 \u003d lengthof r0\n  $i4 \u003d lengthof r1\n  System.arraycopy(r1, 0, r2, $i5, $i4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "addAll",
    "signature": "char[] addAll(char[],char[])",
    "visibility": "public",
    "body": "{\r\n    if (array1 \u003d\u003d null) {\r\n        return clone(array2);\r\n    }\r\n    if (array2 \u003d\u003d null) {\r\n        return clone(array1);\r\n    }\r\n    final char[] joinedArray \u003d new char[array1.length + array2.length];\r\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\r\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\r\n    return joinedArray;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r1 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  r1 :\u003d @parameter1: char[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d ArrayUtils.clone(r1)\n  return\n}",
      "B2 {\n  if (r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  $i0 \u003d lengthof r1\n  $i2 \u003d $i1 + $i0\n  r2 \u003d newarray (char)[$i2]\n  $i3 \u003d lengthof r0\n  System.arraycopy(r0, 0, r2, 0, $i3)\n  $i5 \u003d lengthof r0\n  $i4 \u003d lengthof r1\n  System.arraycopy(r1, 0, r2, $i5, $i4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "addAll",
    "signature": "double[] addAll(double[],double[])",
    "visibility": "public",
    "body": "{\r\n    if (array1 \u003d\u003d null) {\r\n        return clone(array2);\r\n    }\r\n    if (array2 \u003d\u003d null) {\r\n        return clone(array1);\r\n    }\r\n    final double[] joinedArray \u003d new double[array1.length + array2.length];\r\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\r\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\r\n    return joinedArray;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r1 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  r1 :\u003d @parameter1: double[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d ArrayUtils.clone(r1)\n  return\n}",
      "B2 {\n  if (r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  $i0 \u003d lengthof r1\n  $i2 \u003d $i1 + $i0\n  r2 \u003d newarray (double)[$i2]\n  $i3 \u003d lengthof r0\n  System.arraycopy(r0, 0, r2, 0, $i3)\n  $i5 \u003d lengthof r0\n  $i4 \u003d lengthof r1\n  System.arraycopy(r1, 0, r2, $i5, $i4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "addAll",
    "signature": "float[] addAll(float[],float[])",
    "visibility": "public",
    "body": "{\r\n    if (array1 \u003d\u003d null) {\r\n        return clone(array2);\r\n    }\r\n    if (array2 \u003d\u003d null) {\r\n        return clone(array1);\r\n    }\r\n    final float[] joinedArray \u003d new float[array1.length + array2.length];\r\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\r\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\r\n    return joinedArray;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r1 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  r1 :\u003d @parameter1: float[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d ArrayUtils.clone(r1)\n  return\n}",
      "B2 {\n  if (r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  $i0 \u003d lengthof r1\n  $i2 \u003d $i1 + $i0\n  r2 \u003d newarray (float)[$i2]\n  $i3 \u003d lengthof r0\n  System.arraycopy(r0, 0, r2, 0, $i3)\n  $i5 \u003d lengthof r0\n  $i4 \u003d lengthof r1\n  System.arraycopy(r1, 0, r2, $i5, $i4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "addAll",
    "signature": "int[] addAll(int[],int[])",
    "visibility": "public",
    "body": "{\r\n    if (array1 \u003d\u003d null) {\r\n        return clone(array2);\r\n    }\r\n    if (array2 \u003d\u003d null) {\r\n        return clone(array1);\r\n    }\r\n    final int[] joinedArray \u003d new int[array1.length + array2.length];\r\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\r\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\r\n    return joinedArray;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r1 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  r1 :\u003d @parameter1: int[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d ArrayUtils.clone(r1)\n  return\n}",
      "B2 {\n  if (r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  $i0 \u003d lengthof r1\n  $i2 \u003d $i1 + $i0\n  r2 \u003d newarray (int)[$i2]\n  $i3 \u003d lengthof r0\n  System.arraycopy(r0, 0, r2, 0, $i3)\n  $i5 \u003d lengthof r0\n  $i4 \u003d lengthof r1\n  System.arraycopy(r1, 0, r2, $i5, $i4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "addAll",
    "signature": "long[] addAll(long[],long[])",
    "visibility": "public",
    "body": "{\r\n    if (array1 \u003d\u003d null) {\r\n        return clone(array2);\r\n    }\r\n    if (array2 \u003d\u003d null) {\r\n        return clone(array1);\r\n    }\r\n    final long[] joinedArray \u003d new long[array1.length + array2.length];\r\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\r\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\r\n    return joinedArray;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r1 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  r1 :\u003d @parameter1: long[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d ArrayUtils.clone(r1)\n  return\n}",
      "B2 {\n  if (r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  $i0 \u003d lengthof r1\n  $i2 \u003d $i1 + $i0\n  r2 \u003d newarray (long)[$i2]\n  $i3 \u003d lengthof r0\n  System.arraycopy(r0, 0, r2, 0, $i3)\n  $i5 \u003d lengthof r0\n  $i4 \u003d lengthof r1\n  System.arraycopy(r1, 0, r2, $i5, $i4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "addAll",
    "signature": "short[] addAll(short[],short[])",
    "visibility": "public",
    "body": "{\r\n    if (array1 \u003d\u003d null) {\r\n        return clone(array2);\r\n    }\r\n    if (array2 \u003d\u003d null) {\r\n        return clone(array1);\r\n    }\r\n    final short[] joinedArray \u003d new short[array1.length + array2.length];\r\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\r\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\r\n    return joinedArray;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r1 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  r1 :\u003d @parameter1: short[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d ArrayUtils.clone(r1)\n  return\n}",
      "B2 {\n  if (r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  $i0 \u003d lengthof r1\n  $i2 \u003d $i1 + $i0\n  r2 \u003d newarray (short)[$i2]\n  $i3 \u003d lengthof r0\n  System.arraycopy(r0, 0, r2, 0, $i3)\n  $i5 \u003d lengthof r0\n  $i4 \u003d lengthof r1\n  System.arraycopy(r1, 0, r2, $i5, $i4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "addFirst",
    "signature": "boolean[] addFirst(boolean[],boolean)",
    "visibility": "public",
    "body": "{\r\n    return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  z0 :\u003d @parameter1: boolean\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d ArrayUtils.add(r0, z0)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d newarray (boolean)[1]\n  $r1[0] \u003d z0\n  $r2 \u003d ArrayUtils.insert(0, r0, $r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#insert(...3)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    if (index \u003c 0 || index \u003e array.length) {\r\n        throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\r\n    }\r\n    final boolean[] result \u003d new boolean[array.length + values.length];\r\n    System.arraycopy(values, 0, result, index, values.length);\r\n    if (index \u003e 0) {\r\n        System.arraycopy(array, 0, result, 0, index);\r\n    }\r\n    if (index \u003c array.length) {\r\n        System.arraycopy(array, index, result, index + values.length, array.length - index);\r\n    }\r\n    return result;\r\n}"
      },
      {
        "name": "ArrayUtils#add(...2)",
        "body": "{\r\n    final boolean[] newArray \u003d (boolean[]) copyArrayGrow1(array, Boolean.TYPE);\r\n    newArray[newArray.length - 1] \u003d element;\r\n    return newArray;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "addFirst",
    "signature": "byte[] addFirst(byte[],byte)",
    "visibility": "public",
    "body": "{\r\n    return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  b0 :\u003d @parameter1: byte\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d ArrayUtils.add(r0, b0)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d newarray (byte)[1]\n  $r1[0] \u003d b0\n  $r2 \u003d ArrayUtils.insert(0, r0, $r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#insert(...3)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    if (index \u003c 0 || index \u003e array.length) {\r\n        throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\r\n    }\r\n    final boolean[] result \u003d new boolean[array.length + values.length];\r\n    System.arraycopy(values, 0, result, index, values.length);\r\n    if (index \u003e 0) {\r\n        System.arraycopy(array, 0, result, 0, index);\r\n    }\r\n    if (index \u003c array.length) {\r\n        System.arraycopy(array, index, result, index + values.length, array.length - index);\r\n    }\r\n    return result;\r\n}"
      },
      {
        "name": "ArrayUtils#add(...2)",
        "body": "{\r\n    final boolean[] newArray \u003d (boolean[]) copyArrayGrow1(array, Boolean.TYPE);\r\n    newArray[newArray.length - 1] \u003d element;\r\n    return newArray;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "addFirst",
    "signature": "char[] addFirst(char[],char)",
    "visibility": "public",
    "body": "{\r\n    return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  c0 :\u003d @parameter1: char\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d ArrayUtils.add(r0, c0)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d newarray (char)[1]\n  $r1[0] \u003d c0\n  $r2 \u003d ArrayUtils.insert(0, r0, $r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#insert(...3)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    if (index \u003c 0 || index \u003e array.length) {\r\n        throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\r\n    }\r\n    final boolean[] result \u003d new boolean[array.length + values.length];\r\n    System.arraycopy(values, 0, result, index, values.length);\r\n    if (index \u003e 0) {\r\n        System.arraycopy(array, 0, result, 0, index);\r\n    }\r\n    if (index \u003c array.length) {\r\n        System.arraycopy(array, index, result, index + values.length, array.length - index);\r\n    }\r\n    return result;\r\n}"
      },
      {
        "name": "ArrayUtils#add(...2)",
        "body": "{\r\n    final boolean[] newArray \u003d (boolean[]) copyArrayGrow1(array, Boolean.TYPE);\r\n    newArray[newArray.length - 1] \u003d element;\r\n    return newArray;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "addFirst",
    "signature": "double[] addFirst(double[],double)",
    "visibility": "public",
    "body": "{\r\n    return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  d0 :\u003d @parameter1: double\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d ArrayUtils.add(r0, d0)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d newarray (double)[1]\n  $r1[0] \u003d d0\n  $r2 \u003d ArrayUtils.insert(0, r0, $r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#insert(...3)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    if (index \u003c 0 || index \u003e array.length) {\r\n        throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\r\n    }\r\n    final boolean[] result \u003d new boolean[array.length + values.length];\r\n    System.arraycopy(values, 0, result, index, values.length);\r\n    if (index \u003e 0) {\r\n        System.arraycopy(array, 0, result, 0, index);\r\n    }\r\n    if (index \u003c array.length) {\r\n        System.arraycopy(array, index, result, index + values.length, array.length - index);\r\n    }\r\n    return result;\r\n}"
      },
      {
        "name": "ArrayUtils#add(...2)",
        "body": "{\r\n    final boolean[] newArray \u003d (boolean[]) copyArrayGrow1(array, Boolean.TYPE);\r\n    newArray[newArray.length - 1] \u003d element;\r\n    return newArray;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "addFirst",
    "signature": "float[] addFirst(float[],float)",
    "visibility": "public",
    "body": "{\r\n    return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  f0 :\u003d @parameter1: float\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d ArrayUtils.add(r0, f0)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d newarray (float)[1]\n  $r1[0] \u003d f0\n  $r2 \u003d ArrayUtils.insert(0, r0, $r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#insert(...3)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    if (index \u003c 0 || index \u003e array.length) {\r\n        throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\r\n    }\r\n    final boolean[] result \u003d new boolean[array.length + values.length];\r\n    System.arraycopy(values, 0, result, index, values.length);\r\n    if (index \u003e 0) {\r\n        System.arraycopy(array, 0, result, 0, index);\r\n    }\r\n    if (index \u003c array.length) {\r\n        System.arraycopy(array, index, result, index + values.length, array.length - index);\r\n    }\r\n    return result;\r\n}"
      },
      {
        "name": "ArrayUtils#add(...2)",
        "body": "{\r\n    final boolean[] newArray \u003d (boolean[]) copyArrayGrow1(array, Boolean.TYPE);\r\n    newArray[newArray.length - 1] \u003d element;\r\n    return newArray;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "addFirst",
    "signature": "int[] addFirst(int[],int)",
    "visibility": "public",
    "body": "{\r\n    return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  i0 :\u003d @parameter1: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d ArrayUtils.add(r0, i0)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d newarray (int)[1]\n  $r1[0] \u003d i0\n  $r2 \u003d ArrayUtils.insert(0, r0, $r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#insert(...3)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    if (index \u003c 0 || index \u003e array.length) {\r\n        throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\r\n    }\r\n    final boolean[] result \u003d new boolean[array.length + values.length];\r\n    System.arraycopy(values, 0, result, index, values.length);\r\n    if (index \u003e 0) {\r\n        System.arraycopy(array, 0, result, 0, index);\r\n    }\r\n    if (index \u003c array.length) {\r\n        System.arraycopy(array, index, result, index + values.length, array.length - index);\r\n    }\r\n    return result;\r\n}"
      },
      {
        "name": "ArrayUtils#add(...2)",
        "body": "{\r\n    final boolean[] newArray \u003d (boolean[]) copyArrayGrow1(array, Boolean.TYPE);\r\n    newArray[newArray.length - 1] \u003d element;\r\n    return newArray;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "addFirst",
    "signature": "long[] addFirst(long[],long)",
    "visibility": "public",
    "body": "{\r\n    return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  l0 :\u003d @parameter1: long\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d ArrayUtils.add(r0, l0)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d newarray (long)[1]\n  $r1[0] \u003d l0\n  $r2 \u003d ArrayUtils.insert(0, r0, $r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#insert(...3)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    if (index \u003c 0 || index \u003e array.length) {\r\n        throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\r\n    }\r\n    final boolean[] result \u003d new boolean[array.length + values.length];\r\n    System.arraycopy(values, 0, result, index, values.length);\r\n    if (index \u003e 0) {\r\n        System.arraycopy(array, 0, result, 0, index);\r\n    }\r\n    if (index \u003c array.length) {\r\n        System.arraycopy(array, index, result, index + values.length, array.length - index);\r\n    }\r\n    return result;\r\n}"
      },
      {
        "name": "ArrayUtils#add(...2)",
        "body": "{\r\n    final boolean[] newArray \u003d (boolean[]) copyArrayGrow1(array, Boolean.TYPE);\r\n    newArray[newArray.length - 1] \u003d element;\r\n    return newArray;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "addFirst",
    "signature": "short[] addFirst(short[],short)",
    "visibility": "public",
    "body": "{\r\n    return array \u003d\u003d null ? add(array, element) : insert(0, array, element);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  s0 :\u003d @parameter1: short\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d ArrayUtils.add(r0, s0)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d newarray (short)[1]\n  $r1[0] \u003d s0\n  $r2 \u003d ArrayUtils.insert(0, r0, $r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#insert(...3)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    if (index \u003c 0 || index \u003e array.length) {\r\n        throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\r\n    }\r\n    final boolean[] result \u003d new boolean[array.length + values.length];\r\n    System.arraycopy(values, 0, result, index, values.length);\r\n    if (index \u003e 0) {\r\n        System.arraycopy(array, 0, result, 0, index);\r\n    }\r\n    if (index \u003c array.length) {\r\n        System.arraycopy(array, index, result, index + values.length, array.length - index);\r\n    }\r\n    return result;\r\n}"
      },
      {
        "name": "ArrayUtils#add(...2)",
        "body": "{\r\n    final boolean[] newArray \u003d (boolean[]) copyArrayGrow1(array, Boolean.TYPE);\r\n    newArray[newArray.length - 1] \u003d element;\r\n    return newArray;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "addFirst",
    "signature": "java.lang.Object[] addFirst(java.lang.Object[],java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d ArrayUtils.add(r0, r2)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d Object)[1]\n  $r1[0] \u003d r2\n  $r3 \u003d ArrayUtils.insert(0, r0, $r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "clone",
    "signature": "boolean[] clone(boolean[])",
    "visibility": "public",
    "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d r0.clone()\n  $r2 \u003d (boolean[]) $r1\n  goto B3\n}",
      "B2 {\n  $r2 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "clone",
    "signature": "byte[] clone(byte[])",
    "visibility": "public",
    "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d r0.clone()\n  $r2 \u003d (byte[]) $r1\n  goto B3\n}",
      "B2 {\n  $r2 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "clone",
    "signature": "char[] clone(char[])",
    "visibility": "public",
    "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d r0.clone()\n  $r2 \u003d (char[]) $r1\n  goto B3\n}",
      "B2 {\n  $r2 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "clone",
    "signature": "double[] clone(double[])",
    "visibility": "public",
    "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d r0.clone()\n  $r2 \u003d (double[]) $r1\n  goto B3\n}",
      "B2 {\n  $r2 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "clone",
    "signature": "float[] clone(float[])",
    "visibility": "public",
    "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d r0.clone()\n  $r2 \u003d (float[]) $r1\n  goto B3\n}",
      "B2 {\n  $r2 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "clone",
    "signature": "int[] clone(int[])",
    "visibility": "public",
    "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d r0.clone()\n  $r2 \u003d (int[]) $r1\n  goto B3\n}",
      "B2 {\n  $r2 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "clone",
    "signature": "long[] clone(long[])",
    "visibility": "public",
    "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d r0.clone()\n  $r2 \u003d (long[]) $r1\n  goto B3\n}",
      "B2 {\n  $r2 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "clone",
    "signature": "short[] clone(short[])",
    "visibility": "public",
    "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d r0.clone()\n  $r2 \u003d (short[]) $r1\n  goto B3\n}",
      "B2 {\n  $r2 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "clone",
    "signature": "java.lang.Object[] clone(java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d r0.clone()\n  $r2 \u003d Object[]) $r1\n  goto B3\n}",
      "B2 {\n  $r2 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "contains",
    "signature": "boolean contains(boolean[],boolean)",
    "visibility": "public",
    "body": "{\r\n    return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  z0 :\u003d @parameter1: boolean\n  $i0 \u003d ArrayUtils.indexOf(r0, z0)\n  $i2 \u003d (int) -1\n  if ($i0 \u003d\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#indexOf(...2)",
        "body": "{\r\n    return indexOf(array, valueToFind, 0);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "contains",
    "signature": "boolean contains(byte[],byte)",
    "visibility": "public",
    "body": "{\r\n    return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003d\u003d $i3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  b0 :\u003d @parameter1: byte\n  $i1 \u003d ArrayUtils.indexOf(r0, b0)\n  $i3 \u003d (int) -1\n  if ($i1 \u003d\u003d $i3) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#indexOf(...2)",
        "body": "{\r\n    return indexOf(array, valueToFind, 0);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "contains",
    "signature": "boolean contains(char[],char)",
    "visibility": "public",
    "body": "{\r\n    return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003d\u003d $i3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  c0 :\u003d @parameter1: char\n  $i1 \u003d ArrayUtils.indexOf(r0, c0)\n  $i3 \u003d (int) -1\n  if ($i1 \u003d\u003d $i3) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#indexOf(...2)",
        "body": "{\r\n    return indexOf(array, valueToFind, 0);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "contains",
    "signature": "boolean contains(double[],double)",
    "visibility": "public",
    "body": "{\r\n    return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  d0 :\u003d @parameter1: double\n  $i0 \u003d ArrayUtils.indexOf(r0, d0)\n  $i2 \u003d (int) -1\n  if ($i0 \u003d\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#indexOf(...2)",
        "body": "{\r\n    return indexOf(array, valueToFind, 0);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "contains",
    "signature": "boolean contains(double[],double,double)",
    "visibility": "public",
    "body": "{\r\n    return indexOf(array, valueToFind, 0, tolerance) !\u003d INDEX_NOT_FOUND;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  d0 :\u003d @parameter1: double\n  d1 :\u003d @parameter2: double\n  $i0 \u003d ArrayUtils.indexOf(r0, d0, 0, d1)\n  $i2 \u003d (int) -1\n  if ($i0 \u003d\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#indexOf(...4)",
        "body": "{\r\n    if (isEmpty(array)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    final double min \u003d valueToFind - tolerance;\r\n    final double max \u003d valueToFind + tolerance;\r\n    for (int i \u003d max0(startIndex); i \u003c array.length; i++) {\r\n        if (array[i] \u003e\u003d min \u0026\u0026 array[i] \u003c\u003d max) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "contains",
    "signature": "boolean contains(float[],float)",
    "visibility": "public",
    "body": "{\r\n    return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  f0 :\u003d @parameter1: float\n  $i0 \u003d ArrayUtils.indexOf(r0, f0)\n  $i2 \u003d (int) -1\n  if ($i0 \u003d\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#indexOf(...2)",
        "body": "{\r\n    return indexOf(array, valueToFind, 0);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "contains",
    "signature": "boolean contains(int[],int)",
    "visibility": "public",
    "body": "{\r\n    return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003d\u003d $i3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  i0 :\u003d @parameter1: int\n  $i1 \u003d ArrayUtils.indexOf(r0, i0)\n  $i3 \u003d (int) -1\n  if ($i1 \u003d\u003d $i3) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#indexOf(...2)",
        "body": "{\r\n    return indexOf(array, valueToFind, 0);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "contains",
    "signature": "boolean contains(long[],long)",
    "visibility": "public",
    "body": "{\r\n    return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003d\u003d $i3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  l0 :\u003d @parameter1: long\n  $i1 \u003d ArrayUtils.indexOf(r0, l0)\n  $i3 \u003d (int) -1\n  if ($i1 \u003d\u003d $i3) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#indexOf(...2)",
        "body": "{\r\n    return indexOf(array, valueToFind, 0);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "contains",
    "signature": "boolean contains(java.lang.Object[],java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return indexOf(array, objectToFind) !\u003d INDEX_NOT_FOUND;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  Object\n  $i0 \u003d ArrayUtils.indexOf(r0, r1)\n  $i2 \u003d (int) -1\n  if ($i0 \u003d\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#indexOf(...2)",
        "body": "{\r\n    return indexOf(array, valueToFind, 0);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "contains",
    "signature": "boolean contains(short[],short)",
    "visibility": "public",
    "body": "{\r\n    return indexOf(array, valueToFind) !\u003d INDEX_NOT_FOUND;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003d\u003d $i3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  s0 :\u003d @parameter1: short\n  $i1 \u003d ArrayUtils.indexOf(r0, s0)\n  $i3 \u003d (int) -1\n  if ($i1 \u003d\u003d $i3) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#indexOf(...2)",
        "body": "{\r\n    return indexOf(array, valueToFind, 0);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "get",
    "signature": "java.lang.Object get(java.lang.Object[],int,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  i0 :\u003d @parameter1: int\n  Object\n  $z0 \u003d ArrayUtils.isArrayIndexValid(r0, i0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0[i0]\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "getLength",
    "signature": "int getLength(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return array !\u003d null ? Array.getLength(array) : 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d Array.getLength(r0)\n  goto B3\n}",
      "B2 {\n  $i0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "indexesOf",
    "signature": "java.util.BitSet indexesOf(boolean[],boolean,int)",
    "visibility": "public",
    "body": "{\r\n    final BitSet bitSet \u003d new BitSet();\r\n    if (array \u003d\u003d null) {\r\n        return bitSet;\r\n    }\r\n    while (startIndex \u003c array.length) {\r\n        startIndex \u003d indexOf(array, valueToFind, startIndex);\r\n        if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\r\n            break;\r\n        }\r\n        bitSet.set(startIndex);\r\n        ++startIndex;\r\n    }\r\n    return bitSet;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B2 : If(i1 \u003e\u003d $i0) → B3 | else → B6",
      "B3 : If(i2 !\u003d $i4) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  r1 :\u003d @parameter0: boolean[]\n  z0 :\u003d @parameter1: boolean\n  i1 :\u003d @parameter2: int\n  $r2 \u003d BitSet\n  new BitSet()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r1\n  if (i1 \u003e\u003d $i0) goto B3 else B6\n}",
      "B3 {\n  i2 \u003d ArrayUtils.indexOf(r1, z0, i1)\n  $i4 \u003d (int) -1\n  if (i2 !\u003d $i4) goto B4 else B5\n}",
      "B4 {\n  goto B6\n}",
      "B5 {\n  $r2.set(i2)\n  i1 \u003d i2 + 1\n  goto B2\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#indexOf(...3)",
        "body": "{\r\n    if (isEmpty(array)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    for (int i \u003d max0(startIndex); i \u003c array.length; i++) {\r\n        if (valueToFind \u003d\u003d array[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "indexesOf",
    "signature": "java.util.BitSet indexesOf(byte[],byte,int)",
    "visibility": "public",
    "body": "{\r\n    final BitSet bitSet \u003d new BitSet();\r\n    if (array \u003d\u003d null) {\r\n        return bitSet;\r\n    }\r\n    while (startIndex \u003c array.length) {\r\n        startIndex \u003d indexOf(array, valueToFind, startIndex);\r\n        if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\r\n            break;\r\n        }\r\n        bitSet.set(startIndex);\r\n        ++startIndex;\r\n    }\r\n    return bitSet;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B2 : If(i2 \u003e\u003d $i0) → B3 | else → B6",
      "B3 : If(i3 !\u003d $i5) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  r1 :\u003d @parameter0: byte[]\n  b1 :\u003d @parameter1: byte\n  i2 :\u003d @parameter2: int\n  $r2 \u003d BitSet\n  new BitSet()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r1\n  if (i2 \u003e\u003d $i0) goto B3 else B6\n}",
      "B3 {\n  i3 \u003d ArrayUtils.indexOf(r1, b1, i2)\n  $i5 \u003d (int) -1\n  if (i3 !\u003d $i5) goto B4 else B5\n}",
      "B4 {\n  goto B6\n}",
      "B5 {\n  $r2.set(i3)\n  i2 \u003d i3 + 1\n  goto B2\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#indexOf(...3)",
        "body": "{\r\n    if (isEmpty(array)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    for (int i \u003d max0(startIndex); i \u003c array.length; i++) {\r\n        if (valueToFind \u003d\u003d array[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "indexesOf",
    "signature": "java.util.BitSet indexesOf(char[],char,int)",
    "visibility": "public",
    "body": "{\r\n    final BitSet bitSet \u003d new BitSet();\r\n    if (array \u003d\u003d null) {\r\n        return bitSet;\r\n    }\r\n    while (startIndex \u003c array.length) {\r\n        startIndex \u003d indexOf(array, valueToFind, startIndex);\r\n        if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\r\n            break;\r\n        }\r\n        bitSet.set(startIndex);\r\n        ++startIndex;\r\n    }\r\n    return bitSet;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B2 : If(i2 \u003e\u003d $i0) → B3 | else → B6",
      "B3 : If(i3 !\u003d $i5) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  r1 :\u003d @parameter0: char[]\n  c1 :\u003d @parameter1: char\n  i2 :\u003d @parameter2: int\n  $r2 \u003d BitSet\n  new BitSet()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r1\n  if (i2 \u003e\u003d $i0) goto B3 else B6\n}",
      "B3 {\n  i3 \u003d ArrayUtils.indexOf(r1, c1, i2)\n  $i5 \u003d (int) -1\n  if (i3 !\u003d $i5) goto B4 else B5\n}",
      "B4 {\n  goto B6\n}",
      "B5 {\n  $r2.set(i3)\n  i2 \u003d i3 + 1\n  goto B2\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#indexOf(...3)",
        "body": "{\r\n    if (isEmpty(array)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    for (int i \u003d max0(startIndex); i \u003c array.length; i++) {\r\n        if (valueToFind \u003d\u003d array[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "indexesOf",
    "signature": "java.util.BitSet indexesOf(double[],double,int)",
    "visibility": "public",
    "body": "{\r\n    final BitSet bitSet \u003d new BitSet();\r\n    if (array \u003d\u003d null) {\r\n        return bitSet;\r\n    }\r\n    while (startIndex \u003c array.length) {\r\n        startIndex \u003d indexOf(array, valueToFind, startIndex);\r\n        if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\r\n            break;\r\n        }\r\n        bitSet.set(startIndex);\r\n        ++startIndex;\r\n    }\r\n    return bitSet;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B2 : If(i1 \u003e\u003d $i0) → B3 | else → B6",
      "B3 : If(i2 !\u003d $i4) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  r1 :\u003d @parameter0: double[]\n  d0 :\u003d @parameter1: double\n  i1 :\u003d @parameter2: int\n  $r2 \u003d BitSet\n  new BitSet()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r1\n  if (i1 \u003e\u003d $i0) goto B3 else B6\n}",
      "B3 {\n  i2 \u003d ArrayUtils.indexOf(r1, d0, i1)\n  $i4 \u003d (int) -1\n  if (i2 !\u003d $i4) goto B4 else B5\n}",
      "B4 {\n  goto B6\n}",
      "B5 {\n  $r2.set(i2)\n  i1 \u003d i2 + 1\n  goto B2\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#indexOf(...3)",
        "body": "{\r\n    if (isEmpty(array)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    for (int i \u003d max0(startIndex); i \u003c array.length; i++) {\r\n        if (valueToFind \u003d\u003d array[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "indexesOf",
    "signature": "java.util.BitSet indexesOf(double[],double,int,double)",
    "visibility": "public",
    "body": "{\r\n    final BitSet bitSet \u003d new BitSet();\r\n    if (array \u003d\u003d null) {\r\n        return bitSet;\r\n    }\r\n    while (startIndex \u003c array.length) {\r\n        startIndex \u003d indexOf(array, valueToFind, startIndex, tolerance);\r\n        if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\r\n            break;\r\n        }\r\n        bitSet.set(startIndex);\r\n        ++startIndex;\r\n    }\r\n    return bitSet;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B2 : If(i1 \u003e\u003d $i0) → B3 | else → B6",
      "B3 : If(i2 !\u003d $i4) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  r1 :\u003d @parameter0: double[]\n  d0 :\u003d @parameter1: double\n  i1 :\u003d @parameter2: int\n  d1 :\u003d @parameter3: double\n  $r2 \u003d BitSet\n  new BitSet()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r1\n  if (i1 \u003e\u003d $i0) goto B3 else B6\n}",
      "B3 {\n  i2 \u003d ArrayUtils.indexOf(r1, d0, i1, d1)\n  $i4 \u003d (int) -1\n  if (i2 !\u003d $i4) goto B4 else B5\n}",
      "B4 {\n  goto B6\n}",
      "B5 {\n  $r2.set(i2)\n  i1 \u003d i2 + 1\n  goto B2\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#indexOf(...4)",
        "body": "{\r\n    if (isEmpty(array)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    final double min \u003d valueToFind - tolerance;\r\n    final double max \u003d valueToFind + tolerance;\r\n    for (int i \u003d max0(startIndex); i \u003c array.length; i++) {\r\n        if (array[i] \u003e\u003d min \u0026\u0026 array[i] \u003c\u003d max) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "indexesOf",
    "signature": "java.util.BitSet indexesOf(float[],float,int)",
    "visibility": "public",
    "body": "{\r\n    final BitSet bitSet \u003d new BitSet();\r\n    if (array \u003d\u003d null) {\r\n        return bitSet;\r\n    }\r\n    while (startIndex \u003c array.length) {\r\n        startIndex \u003d indexOf(array, valueToFind, startIndex);\r\n        if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\r\n            break;\r\n        }\r\n        bitSet.set(startIndex);\r\n        ++startIndex;\r\n    }\r\n    return bitSet;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B2 : If(i1 \u003e\u003d $i0) → B3 | else → B6",
      "B3 : If(i2 !\u003d $i4) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  r1 :\u003d @parameter0: float[]\n  f0 :\u003d @parameter1: float\n  i1 :\u003d @parameter2: int\n  $r2 \u003d BitSet\n  new BitSet()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r1\n  if (i1 \u003e\u003d $i0) goto B3 else B6\n}",
      "B3 {\n  i2 \u003d ArrayUtils.indexOf(r1, f0, i1)\n  $i4 \u003d (int) -1\n  if (i2 !\u003d $i4) goto B4 else B5\n}",
      "B4 {\n  goto B6\n}",
      "B5 {\n  $r2.set(i2)\n  i1 \u003d i2 + 1\n  goto B2\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#indexOf(...3)",
        "body": "{\r\n    if (isEmpty(array)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    for (int i \u003d max0(startIndex); i \u003c array.length; i++) {\r\n        if (valueToFind \u003d\u003d array[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "indexesOf",
    "signature": "java.util.BitSet indexesOf(int[],int,int)",
    "visibility": "public",
    "body": "{\r\n    final BitSet bitSet \u003d new BitSet();\r\n    if (array \u003d\u003d null) {\r\n        return bitSet;\r\n    }\r\n    while (startIndex \u003c array.length) {\r\n        startIndex \u003d indexOf(array, valueToFind, startIndex);\r\n        if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\r\n            break;\r\n        }\r\n        bitSet.set(startIndex);\r\n        ++startIndex;\r\n    }\r\n    return bitSet;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B2 : If(i2 \u003e\u003d $i0) → B3 | else → B6",
      "B3 : If(i3 !\u003d $i5) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  r1 :\u003d @parameter0: int[]\n  i1 :\u003d @parameter1: int\n  i2 :\u003d @parameter2: int\n  $r2 \u003d BitSet\n  new BitSet()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r1\n  if (i2 \u003e\u003d $i0) goto B3 else B6\n}",
      "B3 {\n  i3 \u003d ArrayUtils.indexOf(r1, i1, i2)\n  $i5 \u003d (int) -1\n  if (i3 !\u003d $i5) goto B4 else B5\n}",
      "B4 {\n  goto B6\n}",
      "B5 {\n  $r2.set(i3)\n  i2 \u003d i3 + 1\n  goto B2\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#indexOf(...3)",
        "body": "{\r\n    if (isEmpty(array)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    for (int i \u003d max0(startIndex); i \u003c array.length; i++) {\r\n        if (valueToFind \u003d\u003d array[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "indexesOf",
    "signature": "java.util.BitSet indexesOf(long[],long,int)",
    "visibility": "public",
    "body": "{\r\n    final BitSet bitSet \u003d new BitSet();\r\n    if (array \u003d\u003d null) {\r\n        return bitSet;\r\n    }\r\n    while (startIndex \u003c array.length) {\r\n        startIndex \u003d indexOf(array, valueToFind, startIndex);\r\n        if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\r\n            break;\r\n        }\r\n        bitSet.set(startIndex);\r\n        ++startIndex;\r\n    }\r\n    return bitSet;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B2 : If(i2 \u003e\u003d $i0) → B3 | else → B6",
      "B3 : If(i3 !\u003d $i5) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  r1 :\u003d @parameter0: long[]\n  l1 :\u003d @parameter1: long\n  i2 :\u003d @parameter2: int\n  $r2 \u003d BitSet\n  new BitSet()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r1\n  if (i2 \u003e\u003d $i0) goto B3 else B6\n}",
      "B3 {\n  i3 \u003d ArrayUtils.indexOf(r1, l1, i2)\n  $i5 \u003d (int) -1\n  if (i3 !\u003d $i5) goto B4 else B5\n}",
      "B4 {\n  goto B6\n}",
      "B5 {\n  $r2.set(i3)\n  i2 \u003d i3 + 1\n  goto B2\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#indexOf(...3)",
        "body": "{\r\n    if (isEmpty(array)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    for (int i \u003d max0(startIndex); i \u003c array.length; i++) {\r\n        if (valueToFind \u003d\u003d array[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "indexesOf",
    "signature": "java.util.BitSet indexesOf(java.lang.Object[],java.lang.Object,int)",
    "visibility": "public",
    "body": "{\r\n    final BitSet bitSet \u003d new BitSet();\r\n    if (array \u003d\u003d null) {\r\n        return bitSet;\r\n    }\r\n    while (startIndex \u003c array.length) {\r\n        startIndex \u003d indexOf(array, objectToFind, startIndex);\r\n        if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\r\n            break;\r\n        }\r\n        bitSet.set(startIndex);\r\n        ++startIndex;\r\n    }\r\n    return bitSet;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B2 : If(i1 \u003e\u003d $i0) → B3 | else → B6",
      "B3 : If(i2 !\u003d $i4) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  Object\n  i1 :\u003d @parameter2: int\n  $r3 \u003d BitSet\n  new BitSet()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r1\n  if (i1 \u003e\u003d $i0) goto B3 else B6\n}",
      "B3 {\n  i2 \u003d ArrayUtils.indexOf(r1, r2, i1)\n  $i4 \u003d (int) -1\n  if (i2 !\u003d $i4) goto B4 else B5\n}",
      "B4 {\n  goto B6\n}",
      "B5 {\n  $r3.set(i2)\n  i1 \u003d i2 + 1\n  goto B2\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#indexOf(...3)",
        "body": "{\r\n    if (isEmpty(array)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    for (int i \u003d max0(startIndex); i \u003c array.length; i++) {\r\n        if (valueToFind \u003d\u003d array[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "indexesOf",
    "signature": "java.util.BitSet indexesOf(short[],short,int)",
    "visibility": "public",
    "body": "{\r\n    final BitSet bitSet \u003d new BitSet();\r\n    if (array \u003d\u003d null) {\r\n        return bitSet;\r\n    }\r\n    while (startIndex \u003c array.length) {\r\n        startIndex \u003d indexOf(array, valueToFind, startIndex);\r\n        if (startIndex \u003d\u003d INDEX_NOT_FOUND) {\r\n            break;\r\n        }\r\n        bitSet.set(startIndex);\r\n        ++startIndex;\r\n    }\r\n    return bitSet;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B2 : If(i2 \u003e\u003d $i0) → B3 | else → B6",
      "B3 : If(i3 !\u003d $i5) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  r1 :\u003d @parameter0: short[]\n  s1 :\u003d @parameter1: short\n  i2 :\u003d @parameter2: int\n  $r2 \u003d BitSet\n  new BitSet()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r1\n  if (i2 \u003e\u003d $i0) goto B3 else B6\n}",
      "B3 {\n  i3 \u003d ArrayUtils.indexOf(r1, s1, i2)\n  $i5 \u003d (int) -1\n  if (i3 !\u003d $i5) goto B4 else B5\n}",
      "B4 {\n  goto B6\n}",
      "B5 {\n  $r2.set(i3)\n  i2 \u003d i3 + 1\n  goto B2\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#indexOf(...3)",
        "body": "{\r\n    if (isEmpty(array)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    for (int i \u003d max0(startIndex); i \u003c array.length; i++) {\r\n        if (valueToFind \u003d\u003d array[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "indexOf",
    "signature": "int indexOf(boolean[],boolean,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    for (int i \u003d max0(startIndex); i \u003c array.length; i++) {\r\n        if (valueToFind \u003d\u003d array[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If(i2 \u003e\u003d $i1) → B4 | else → B7",
      "B4 : If(z1 !\u003d $z2) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  z1 :\u003d @parameter1: boolean\n  i0 :\u003d @parameter2: int\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $i4 \u003d (int) -1\n  return\n}",
      "B2 {\n  i2 \u003d ArrayUtils.max0(i0)\n}",
      "B3 {\n  $i1 \u003d lengthof r0\n  if (i2 \u003e\u003d $i1) goto B4 else B7\n}",
      "B4 {\n  $z2 \u003d r0[i2]\n  if (z1 !\u003d $z2) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B7 {\n  $i6 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      },
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "indexOf",
    "signature": "int indexOf(byte[],byte,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    for (int i \u003d max0(startIndex); i \u003c array.length; i++) {\r\n        if (valueToFind \u003d\u003d array[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i4 \u003e\u003d $i1) → B4 | else → B7",
      "B4 : If($i7 !\u003d $i8) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  b2 :\u003d @parameter1: byte\n  i0 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i6 \u003d (int) -1\n  return\n}",
      "B2 {\n  i4 \u003d ArrayUtils.max0(i0)\n}",
      "B3 {\n  $i1 \u003d lengthof r0\n  if (i4 \u003e\u003d $i1) goto B4 else B7\n}",
      "B4 {\n  $b3 \u003d r0[i4]\n  $i7 \u003d (int) b2\n  $i8 \u003d (int) $b3\n  if ($i7 !\u003d $i8) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i4 \u003d i4 + 1\n  goto B3\n}",
      "B7 {\n  $i10 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "indexOf",
    "signature": "int indexOf(char[],char,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    for (int i \u003d max0(startIndex); i \u003c array.length; i++) {\r\n        if (valueToFind \u003d\u003d array[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i4 \u003e\u003d $i1) → B4 | else → B7",
      "B4 : If($i7 !\u003d $i8) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  c2 :\u003d @parameter1: char\n  i0 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i6 \u003d (int) -1\n  return\n}",
      "B2 {\n  i4 \u003d ArrayUtils.max0(i0)\n}",
      "B3 {\n  $i1 \u003d lengthof r0\n  if (i4 \u003e\u003d $i1) goto B4 else B7\n}",
      "B4 {\n  $c3 \u003d r0[i4]\n  $i7 \u003d (int) c2\n  $i8 \u003d (int) $c3\n  if ($i7 !\u003d $i8) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i4 \u003d i4 + 1\n  goto B3\n}",
      "B7 {\n  $i10 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "indexOf",
    "signature": "int indexOf(double[],double,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    final boolean searchNaN \u003d Double.isNaN(valueToFind);\r\n    for (int i \u003d max0(startIndex); i \u003c array.length; i++) {\r\n        final double element \u003d array[i];\r\n        if (valueToFind \u003d\u003d element || searchNaN \u0026\u0026 Double.isNaN(element)) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If(i3 \u003e\u003d $i1) → B4 | else → B9",
      "B4 : If($b2 \u003d\u003d false) → B5 | else → B7",
      "B5 : If(z1 \u003d\u003d false) → B6 | else → B8",
      "B6 : If($z2 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  d0 :\u003d @parameter1: double\n  i0 :\u003d @parameter2: int\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $i5 \u003d (int) -1\n  return\n}",
      "B2 {\n  z1 \u003d Double.isNaN(d0)\n  i3 \u003d ArrayUtils.max0(i0)\n}",
      "B3 {\n  $i1 \u003d lengthof r0\n  if (i3 \u003e\u003d $i1) goto B4 else B9\n}",
      "B4 {\n  d1 \u003d r0[i3]\n  $b2 \u003d d0 cmpl d1\n  if ($b2 \u003d\u003d false) goto B5 else B7\n}",
      "B5 {\n  if (z1 \u003d\u003d false) goto B6 else B8\n}",
      "B6 {\n  $z2 \u003d Double.isNaN(d1)\n  if ($z2 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  i3 \u003d i3 + 1\n  goto B3\n}",
      "B9 {\n  $i7 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B3",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      },
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "indexOf",
    "signature": "int indexOf(double[],double,int,double)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    final double min \u003d valueToFind - tolerance;\r\n    final double max \u003d valueToFind + tolerance;\r\n    for (int i \u003d max0(startIndex); i \u003c array.length; i++) {\r\n        if (array[i] \u003e\u003d min \u0026\u0026 array[i] \u003c\u003d max) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If(i4 \u003e\u003d $i1) → B4 | else → B8",
      "B4 : If($i7 \u003c 0) → B5 | else → B7",
      "B5 : If($i8 \u003e 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  d0 :\u003d @parameter1: double\n  i0 :\u003d @parameter2: int\n  d1 :\u003d @parameter3: double\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $i6 \u003d (int) -1\n  return\n}",
      "B2 {\n  d2 \u003d d0 - d1\n  d3 \u003d d0 + d1\n  i4 \u003d ArrayUtils.max0(i0)\n}",
      "B3 {\n  $i1 \u003d lengthof r0\n  if (i4 \u003e\u003d $i1) goto B4 else B8\n}",
      "B4 {\n  $d4 \u003d r0[i4]\n  $b2 \u003d $d4 cmpl d2\n  $i7 \u003d (int) $b2\n  if ($i7 \u003c 0) goto B5 else B7\n}",
      "B5 {\n  $d5 \u003d r0[i4]\n  $b3 \u003d $d5 cmpg d3\n  $i8 \u003d (int) $b3\n  if ($i8 \u003e 0) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  i4 \u003d i4 + 1\n  goto B3\n}",
      "B8 {\n  $i10 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B3",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      },
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "indexOf",
    "signature": "int indexOf(float[],float,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    final boolean searchNaN \u003d Float.isNaN(valueToFind);\r\n    for (int i \u003d max0(startIndex); i \u003c array.length; i++) {\r\n        final float element \u003d array[i];\r\n        if (valueToFind \u003d\u003d element || searchNaN \u0026\u0026 Float.isNaN(element)) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If(i3 \u003e\u003d $i1) → B4 | else → B9",
      "B4 : If($b2 \u003d\u003d false) → B5 | else → B7",
      "B5 : If(z1 \u003d\u003d false) → B6 | else → B8",
      "B6 : If($z2 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  f0 :\u003d @parameter1: float\n  i0 :\u003d @parameter2: int\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $i5 \u003d (int) -1\n  return\n}",
      "B2 {\n  z1 \u003d Float.isNaN(f0)\n  i3 \u003d ArrayUtils.max0(i0)\n}",
      "B3 {\n  $i1 \u003d lengthof r0\n  if (i3 \u003e\u003d $i1) goto B4 else B9\n}",
      "B4 {\n  f1 \u003d r0[i3]\n  $b2 \u003d f0 cmpl f1\n  if ($b2 \u003d\u003d false) goto B5 else B7\n}",
      "B5 {\n  if (z1 \u003d\u003d false) goto B6 else B8\n}",
      "B6 {\n  $z2 \u003d Float.isNaN(f1)\n  if ($z2 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  i3 \u003d i3 + 1\n  goto B3\n}",
      "B9 {\n  $i7 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B3",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      },
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "indexOf",
    "signature": "int indexOf(int[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    for (int i \u003d max0(startIndex); i \u003c array.length; i++) {\r\n        if (valueToFind \u003d\u003d array[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i4 \u003e\u003d $i1) → B4 | else → B7",
      "B4 : If(i2 !\u003d $i3) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  i2 :\u003d @parameter1: int\n  i0 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i6 \u003d (int) -1\n  return\n}",
      "B2 {\n  i4 \u003d ArrayUtils.max0(i0)\n}",
      "B3 {\n  $i1 \u003d lengthof r0\n  if (i4 \u003e\u003d $i1) goto B4 else B7\n}",
      "B4 {\n  $i3 \u003d r0[i4]\n  if (i2 !\u003d $i3) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i4 \u003d i4 + 1\n  goto B3\n}",
      "B7 {\n  $i8 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "indexOf",
    "signature": "int indexOf(long[],long,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    for (int i \u003d max0(startIndex); i \u003c array.length; i++) {\r\n        if (valueToFind \u003d\u003d array[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i5 \u003e\u003d $i1) → B4 | else → B7",
      "B4 : If($b4 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  l2 :\u003d @parameter1: long\n  i0 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i7 \u003d (int) -1\n  return\n}",
      "B2 {\n  i5 \u003d ArrayUtils.max0(i0)\n}",
      "B3 {\n  $i1 \u003d lengthof r0\n  if (i5 \u003e\u003d $i1) goto B4 else B7\n}",
      "B4 {\n  $l3 \u003d r0[i5]\n  $b4 \u003d l2 cmp $l3\n  if ($b4 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i5 \u003d i5 + 1\n  goto B3\n}",
      "B7 {\n  $i9 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "indexOf",
    "signature": "int indexOf(java.lang.Object[],java.lang.Object,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    startIndex \u003d max0(startIndex);\r\n    if (objectToFind \u003d\u003d null) {\r\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\r\n            if (array[i] \u003d\u003d null) {\r\n                return i;\r\n            }\r\n        }\r\n    } else {\r\n        for (int i \u003d startIndex; i \u003c array.length; i++) {\r\n            if (objectToFind.equals(array[i])) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 15,
    "edges": 17,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r1 !\u003d null) → B3 | else → B9",
      "B4 : If(i4 \u003e\u003d $i1) → B5 | else → B8",
      "B5 : If($r3 !\u003d null) → B6 | else → B7",
      "B10 : If(i5 \u003e\u003d $i0) → B11 | else → B14",
      "B11 : If($z0 \u003d\u003d false) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  Object\n  i2 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i7 \u003d (int) -1\n  return\n}",
      "B2 {\n  i3 \u003d ArrayUtils.max0(i2)\n  if (r1 !\u003d null) goto B3 else B9\n}",
      "B3 {\n  i4 \u003d i3\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  if (i4 \u003e\u003d $i1) goto B5 else B8\n}",
      "B5 {\n  $r3 \u003d r0[i4]\n  if ($r3 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  i4 \u003d i4 + 1\n  goto B4\n}",
      "B8 {\n  goto B14\n}",
      "B9 {\n  i5 \u003d i3\n}",
      "B10 {\n  $i0 \u003d lengthof r0\n  if (i5 \u003e\u003d $i0) goto B11 else B14\n}",
      "B11 {\n  $r2 \u003d r0[i5]\n  $z0 \u003d r1.equals($r2)\n  if ($z0 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  return\n}",
      "B13 {\n  i5 \u003d i5 + 1\n  goto B10\n}",
      "B14 {\n  $i9 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B9",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B4",
      "B8 --\u003e B14",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B10",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "indexOf",
    "signature": "int indexOf(short[],short,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    for (int i \u003d max0(startIndex); i \u003c array.length; i++) {\r\n        if (valueToFind \u003d\u003d array[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i4 \u003e\u003d $i1) → B4 | else → B7",
      "B4 : If($i7 !\u003d $i8) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  s2 :\u003d @parameter1: short\n  i0 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i6 \u003d (int) -1\n  return\n}",
      "B2 {\n  i4 \u003d ArrayUtils.max0(i0)\n}",
      "B3 {\n  $i1 \u003d lengthof r0\n  if (i4 \u003e\u003d $i1) goto B4 else B7\n}",
      "B4 {\n  $s3 \u003d r0[i4]\n  $i7 \u003d (int) s2\n  $i8 \u003d (int) $s3\n  if ($i7 !\u003d $i8) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i4 \u003d i4 + 1\n  goto B3\n}",
      "B7 {\n  $i10 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "insert",
    "signature": "boolean[] insert(int,boolean[],boolean[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    if (index \u003c 0 || index \u003e array.length) {\r\n        throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\r\n    }\r\n    final boolean[] result \u003d new boolean[array.length + values.length];\r\n    System.arraycopy(values, 0, result, index, values.length);\r\n    if (index \u003e 0) {\r\n        System.arraycopy(array, 0, result, 0, index);\r\n    }\r\n    if (index \u003c array.length) {\r\n        System.arraycopy(array, index, result, index + values.length, array.length - index);\r\n    }\r\n    return result;\r\n}",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If(i0 \u003c 0) → B5 | else → B6",
      "B5 : If(i0 \u003c\u003d $i2) → B6 | else → B7",
      "B7 : If(i0 \u003c\u003d 0) → B8 | else → B9",
      "B9 : If(i0 \u003e\u003d $i7) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  r0 :\u003d @parameter1: boolean[]\n  r1 :\u003d @parameter2: boolean[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d ArrayUtils.isEmpty(r1)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r10 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B4 {\n  if (i0 \u003c 0) goto B5 else B6\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i0 \u003c\u003d $i2) goto B6 else B7\n}",
      "B6 {\n  $r2 \u003d IndexOutOfBoundsException\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  $r4 \u003d $r3.append(\"Index: \")\n  $r5 \u003d $r4.append(i0)\n  $r6 \u003d $r5.append(\", Length: \")\n  $i1 \u003d lengthof r0\n  $r7 \u003d $r6.append($i1)\n  $r8 \u003d $r7.toString()\n  new IndexOutOfBoundsException($r8)\n  throw $r2\n}",
      "B7 {\n  $i4 \u003d lengthof r0\n  $i3 \u003d lengthof r1\n  $i5 \u003d $i4 + $i3\n  r9 \u003d newarray (boolean)[$i5]\n  $i6 \u003d lengthof r1\n  System.arraycopy(r1, 0, r9, i0, $i6)\n  if (i0 \u003c\u003d 0) goto B8 else B9\n}",
      "B8 {\n  System.arraycopy(r0, 0, r9, 0, i0)\n}",
      "B9 {\n  $i7 \u003d lengthof r0\n  if (i0 \u003e\u003d $i7) goto B10 else B11\n}",
      "B10 {\n  $i8 \u003d lengthof r1\n  $i11 \u003d i0 + $i8\n  $i9 \u003d lengthof r0\n  $i10 \u003d $i9 - i0\n  System.arraycopy(r0, i0, r9, $i11, $i10)\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "insert",
    "signature": "byte[] insert(int,byte[],byte[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    if (index \u003c 0 || index \u003e array.length) {\r\n        throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\r\n    }\r\n    final byte[] result \u003d new byte[array.length + values.length];\r\n    System.arraycopy(values, 0, result, index, values.length);\r\n    if (index \u003e 0) {\r\n        System.arraycopy(array, 0, result, 0, index);\r\n    }\r\n    if (index \u003c array.length) {\r\n        System.arraycopy(array, index, result, index + values.length, array.length - index);\r\n    }\r\n    return result;\r\n}",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If(i0 \u003c 0) → B5 | else → B6",
      "B5 : If(i0 \u003c\u003d $i2) → B6 | else → B7",
      "B7 : If(i0 \u003c\u003d 0) → B8 | else → B9",
      "B9 : If(i0 \u003e\u003d $i7) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  r0 :\u003d @parameter1: byte[]\n  r1 :\u003d @parameter2: byte[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d ArrayUtils.isEmpty(r1)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r10 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B4 {\n  if (i0 \u003c 0) goto B5 else B6\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i0 \u003c\u003d $i2) goto B6 else B7\n}",
      "B6 {\n  $r2 \u003d IndexOutOfBoundsException\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  $r4 \u003d $r3.append(\"Index: \")\n  $r5 \u003d $r4.append(i0)\n  $r6 \u003d $r5.append(\", Length: \")\n  $i1 \u003d lengthof r0\n  $r7 \u003d $r6.append($i1)\n  $r8 \u003d $r7.toString()\n  new IndexOutOfBoundsException($r8)\n  throw $r2\n}",
      "B7 {\n  $i4 \u003d lengthof r0\n  $i3 \u003d lengthof r1\n  $i5 \u003d $i4 + $i3\n  r9 \u003d newarray (byte)[$i5]\n  $i6 \u003d lengthof r1\n  System.arraycopy(r1, 0, r9, i0, $i6)\n  if (i0 \u003c\u003d 0) goto B8 else B9\n}",
      "B8 {\n  System.arraycopy(r0, 0, r9, 0, i0)\n}",
      "B9 {\n  $i7 \u003d lengthof r0\n  if (i0 \u003e\u003d $i7) goto B10 else B11\n}",
      "B10 {\n  $i8 \u003d lengthof r1\n  $i11 \u003d i0 + $i8\n  $i9 \u003d lengthof r0\n  $i10 \u003d $i9 - i0\n  System.arraycopy(r0, i0, r9, $i11, $i10)\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "insert",
    "signature": "char[] insert(int,char[],char[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    if (index \u003c 0 || index \u003e array.length) {\r\n        throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\r\n    }\r\n    final char[] result \u003d new char[array.length + values.length];\r\n    System.arraycopy(values, 0, result, index, values.length);\r\n    if (index \u003e 0) {\r\n        System.arraycopy(array, 0, result, 0, index);\r\n    }\r\n    if (index \u003c array.length) {\r\n        System.arraycopy(array, index, result, index + values.length, array.length - index);\r\n    }\r\n    return result;\r\n}",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If(i0 \u003c 0) → B5 | else → B6",
      "B5 : If(i0 \u003c\u003d $i2) → B6 | else → B7",
      "B7 : If(i0 \u003c\u003d 0) → B8 | else → B9",
      "B9 : If(i0 \u003e\u003d $i7) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  r0 :\u003d @parameter1: char[]\n  r1 :\u003d @parameter2: char[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d ArrayUtils.isEmpty(r1)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r10 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B4 {\n  if (i0 \u003c 0) goto B5 else B6\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i0 \u003c\u003d $i2) goto B6 else B7\n}",
      "B6 {\n  $r2 \u003d IndexOutOfBoundsException\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  $r4 \u003d $r3.append(\"Index: \")\n  $r5 \u003d $r4.append(i0)\n  $r6 \u003d $r5.append(\", Length: \")\n  $i1 \u003d lengthof r0\n  $r7 \u003d $r6.append($i1)\n  $r8 \u003d $r7.toString()\n  new IndexOutOfBoundsException($r8)\n  throw $r2\n}",
      "B7 {\n  $i4 \u003d lengthof r0\n  $i3 \u003d lengthof r1\n  $i5 \u003d $i4 + $i3\n  r9 \u003d newarray (char)[$i5]\n  $i6 \u003d lengthof r1\n  System.arraycopy(r1, 0, r9, i0, $i6)\n  if (i0 \u003c\u003d 0) goto B8 else B9\n}",
      "B8 {\n  System.arraycopy(r0, 0, r9, 0, i0)\n}",
      "B9 {\n  $i7 \u003d lengthof r0\n  if (i0 \u003e\u003d $i7) goto B10 else B11\n}",
      "B10 {\n  $i8 \u003d lengthof r1\n  $i11 \u003d i0 + $i8\n  $i9 \u003d lengthof r0\n  $i10 \u003d $i9 - i0\n  System.arraycopy(r0, i0, r9, $i11, $i10)\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "insert",
    "signature": "double[] insert(int,double[],double[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    if (index \u003c 0 || index \u003e array.length) {\r\n        throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\r\n    }\r\n    final double[] result \u003d new double[array.length + values.length];\r\n    System.arraycopy(values, 0, result, index, values.length);\r\n    if (index \u003e 0) {\r\n        System.arraycopy(array, 0, result, 0, index);\r\n    }\r\n    if (index \u003c array.length) {\r\n        System.arraycopy(array, index, result, index + values.length, array.length - index);\r\n    }\r\n    return result;\r\n}",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If(i0 \u003c 0) → B5 | else → B6",
      "B5 : If(i0 \u003c\u003d $i2) → B6 | else → B7",
      "B7 : If(i0 \u003c\u003d 0) → B8 | else → B9",
      "B9 : If(i0 \u003e\u003d $i7) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  r0 :\u003d @parameter1: double[]\n  r1 :\u003d @parameter2: double[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d ArrayUtils.isEmpty(r1)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r10 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B4 {\n  if (i0 \u003c 0) goto B5 else B6\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i0 \u003c\u003d $i2) goto B6 else B7\n}",
      "B6 {\n  $r2 \u003d IndexOutOfBoundsException\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  $r4 \u003d $r3.append(\"Index: \")\n  $r5 \u003d $r4.append(i0)\n  $r6 \u003d $r5.append(\", Length: \")\n  $i1 \u003d lengthof r0\n  $r7 \u003d $r6.append($i1)\n  $r8 \u003d $r7.toString()\n  new IndexOutOfBoundsException($r8)\n  throw $r2\n}",
      "B7 {\n  $i4 \u003d lengthof r0\n  $i3 \u003d lengthof r1\n  $i5 \u003d $i4 + $i3\n  r9 \u003d newarray (double)[$i5]\n  $i6 \u003d lengthof r1\n  System.arraycopy(r1, 0, r9, i0, $i6)\n  if (i0 \u003c\u003d 0) goto B8 else B9\n}",
      "B8 {\n  System.arraycopy(r0, 0, r9, 0, i0)\n}",
      "B9 {\n  $i7 \u003d lengthof r0\n  if (i0 \u003e\u003d $i7) goto B10 else B11\n}",
      "B10 {\n  $i8 \u003d lengthof r1\n  $i11 \u003d i0 + $i8\n  $i9 \u003d lengthof r0\n  $i10 \u003d $i9 - i0\n  System.arraycopy(r0, i0, r9, $i11, $i10)\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "insert",
    "signature": "float[] insert(int,float[],float[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    if (index \u003c 0 || index \u003e array.length) {\r\n        throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\r\n    }\r\n    final float[] result \u003d new float[array.length + values.length];\r\n    System.arraycopy(values, 0, result, index, values.length);\r\n    if (index \u003e 0) {\r\n        System.arraycopy(array, 0, result, 0, index);\r\n    }\r\n    if (index \u003c array.length) {\r\n        System.arraycopy(array, index, result, index + values.length, array.length - index);\r\n    }\r\n    return result;\r\n}",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If(i0 \u003c 0) → B5 | else → B6",
      "B5 : If(i0 \u003c\u003d $i2) → B6 | else → B7",
      "B7 : If(i0 \u003c\u003d 0) → B8 | else → B9",
      "B9 : If(i0 \u003e\u003d $i7) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  r0 :\u003d @parameter1: float[]\n  r1 :\u003d @parameter2: float[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d ArrayUtils.isEmpty(r1)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r10 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B4 {\n  if (i0 \u003c 0) goto B5 else B6\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i0 \u003c\u003d $i2) goto B6 else B7\n}",
      "B6 {\n  $r2 \u003d IndexOutOfBoundsException\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  $r4 \u003d $r3.append(\"Index: \")\n  $r5 \u003d $r4.append(i0)\n  $r6 \u003d $r5.append(\", Length: \")\n  $i1 \u003d lengthof r0\n  $r7 \u003d $r6.append($i1)\n  $r8 \u003d $r7.toString()\n  new IndexOutOfBoundsException($r8)\n  throw $r2\n}",
      "B7 {\n  $i4 \u003d lengthof r0\n  $i3 \u003d lengthof r1\n  $i5 \u003d $i4 + $i3\n  r9 \u003d newarray (float)[$i5]\n  $i6 \u003d lengthof r1\n  System.arraycopy(r1, 0, r9, i0, $i6)\n  if (i0 \u003c\u003d 0) goto B8 else B9\n}",
      "B8 {\n  System.arraycopy(r0, 0, r9, 0, i0)\n}",
      "B9 {\n  $i7 \u003d lengthof r0\n  if (i0 \u003e\u003d $i7) goto B10 else B11\n}",
      "B10 {\n  $i8 \u003d lengthof r1\n  $i11 \u003d i0 + $i8\n  $i9 \u003d lengthof r0\n  $i10 \u003d $i9 - i0\n  System.arraycopy(r0, i0, r9, $i11, $i10)\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "insert",
    "signature": "int[] insert(int,int[],int[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    if (index \u003c 0 || index \u003e array.length) {\r\n        throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\r\n    }\r\n    final int[] result \u003d new int[array.length + values.length];\r\n    System.arraycopy(values, 0, result, index, values.length);\r\n    if (index \u003e 0) {\r\n        System.arraycopy(array, 0, result, 0, index);\r\n    }\r\n    if (index \u003c array.length) {\r\n        System.arraycopy(array, index, result, index + values.length, array.length - index);\r\n    }\r\n    return result;\r\n}",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If(i0 \u003c 0) → B5 | else → B6",
      "B5 : If(i0 \u003c\u003d $i2) → B6 | else → B7",
      "B7 : If(i0 \u003c\u003d 0) → B8 | else → B9",
      "B9 : If(i0 \u003e\u003d $i7) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  r0 :\u003d @parameter1: int[]\n  r1 :\u003d @parameter2: int[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d ArrayUtils.isEmpty(r1)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r10 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B4 {\n  if (i0 \u003c 0) goto B5 else B6\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i0 \u003c\u003d $i2) goto B6 else B7\n}",
      "B6 {\n  $r2 \u003d IndexOutOfBoundsException\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  $r4 \u003d $r3.append(\"Index: \")\n  $r5 \u003d $r4.append(i0)\n  $r6 \u003d $r5.append(\", Length: \")\n  $i1 \u003d lengthof r0\n  $r7 \u003d $r6.append($i1)\n  $r8 \u003d $r7.toString()\n  new IndexOutOfBoundsException($r8)\n  throw $r2\n}",
      "B7 {\n  $i4 \u003d lengthof r0\n  $i3 \u003d lengthof r1\n  $i5 \u003d $i4 + $i3\n  r9 \u003d newarray (int)[$i5]\n  $i6 \u003d lengthof r1\n  System.arraycopy(r1, 0, r9, i0, $i6)\n  if (i0 \u003c\u003d 0) goto B8 else B9\n}",
      "B8 {\n  System.arraycopy(r0, 0, r9, 0, i0)\n}",
      "B9 {\n  $i7 \u003d lengthof r0\n  if (i0 \u003e\u003d $i7) goto B10 else B11\n}",
      "B10 {\n  $i8 \u003d lengthof r1\n  $i11 \u003d i0 + $i8\n  $i9 \u003d lengthof r0\n  $i10 \u003d $i9 - i0\n  System.arraycopy(r0, i0, r9, $i11, $i10)\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "insert",
    "signature": "long[] insert(int,long[],long[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    if (index \u003c 0 || index \u003e array.length) {\r\n        throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\r\n    }\r\n    final long[] result \u003d new long[array.length + values.length];\r\n    System.arraycopy(values, 0, result, index, values.length);\r\n    if (index \u003e 0) {\r\n        System.arraycopy(array, 0, result, 0, index);\r\n    }\r\n    if (index \u003c array.length) {\r\n        System.arraycopy(array, index, result, index + values.length, array.length - index);\r\n    }\r\n    return result;\r\n}",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If(i0 \u003c 0) → B5 | else → B6",
      "B5 : If(i0 \u003c\u003d $i2) → B6 | else → B7",
      "B7 : If(i0 \u003c\u003d 0) → B8 | else → B9",
      "B9 : If(i0 \u003e\u003d $i7) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  r0 :\u003d @parameter1: long[]\n  r1 :\u003d @parameter2: long[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d ArrayUtils.isEmpty(r1)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r10 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B4 {\n  if (i0 \u003c 0) goto B5 else B6\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i0 \u003c\u003d $i2) goto B6 else B7\n}",
      "B6 {\n  $r2 \u003d IndexOutOfBoundsException\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  $r4 \u003d $r3.append(\"Index: \")\n  $r5 \u003d $r4.append(i0)\n  $r6 \u003d $r5.append(\", Length: \")\n  $i1 \u003d lengthof r0\n  $r7 \u003d $r6.append($i1)\n  $r8 \u003d $r7.toString()\n  new IndexOutOfBoundsException($r8)\n  throw $r2\n}",
      "B7 {\n  $i4 \u003d lengthof r0\n  $i3 \u003d lengthof r1\n  $i5 \u003d $i4 + $i3\n  r9 \u003d newarray (long)[$i5]\n  $i6 \u003d lengthof r1\n  System.arraycopy(r1, 0, r9, i0, $i6)\n  if (i0 \u003c\u003d 0) goto B8 else B9\n}",
      "B8 {\n  System.arraycopy(r0, 0, r9, 0, i0)\n}",
      "B9 {\n  $i7 \u003d lengthof r0\n  if (i0 \u003e\u003d $i7) goto B10 else B11\n}",
      "B10 {\n  $i8 \u003d lengthof r1\n  $i11 \u003d i0 + $i8\n  $i9 \u003d lengthof r0\n  $i10 \u003d $i9 - i0\n  System.arraycopy(r0, i0, r9, $i11, $i10)\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "insert",
    "signature": "short[] insert(int,short[],short[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    if (index \u003c 0 || index \u003e array.length) {\r\n        throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\r\n    }\r\n    final short[] result \u003d new short[array.length + values.length];\r\n    System.arraycopy(values, 0, result, index, values.length);\r\n    if (index \u003e 0) {\r\n        System.arraycopy(array, 0, result, 0, index);\r\n    }\r\n    if (index \u003c array.length) {\r\n        System.arraycopy(array, index, result, index + values.length, array.length - index);\r\n    }\r\n    return result;\r\n}",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If(i0 \u003c 0) → B5 | else → B6",
      "B5 : If(i0 \u003c\u003d $i2) → B6 | else → B7",
      "B7 : If(i0 \u003c\u003d 0) → B8 | else → B9",
      "B9 : If(i0 \u003e\u003d $i7) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  r0 :\u003d @parameter1: short[]\n  r1 :\u003d @parameter2: short[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d ArrayUtils.isEmpty(r1)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r10 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B4 {\n  if (i0 \u003c 0) goto B5 else B6\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i0 \u003c\u003d $i2) goto B6 else B7\n}",
      "B6 {\n  $r2 \u003d IndexOutOfBoundsException\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  $r4 \u003d $r3.append(\"Index: \")\n  $r5 \u003d $r4.append(i0)\n  $r6 \u003d $r5.append(\", Length: \")\n  $i1 \u003d lengthof r0\n  $r7 \u003d $r6.append($i1)\n  $r8 \u003d $r7.toString()\n  new IndexOutOfBoundsException($r8)\n  throw $r2\n}",
      "B7 {\n  $i4 \u003d lengthof r0\n  $i3 \u003d lengthof r1\n  $i5 \u003d $i4 + $i3\n  r9 \u003d newarray (short)[$i5]\n  $i6 \u003d lengthof r1\n  System.arraycopy(r1, 0, r9, i0, $i6)\n  if (i0 \u003c\u003d 0) goto B8 else B9\n}",
      "B8 {\n  System.arraycopy(r0, 0, r9, 0, i0)\n}",
      "B9 {\n  $i7 \u003d lengthof r0\n  if (i0 \u003e\u003d $i7) goto B10 else B11\n}",
      "B10 {\n  $i8 \u003d lengthof r1\n  $i11 \u003d i0 + $i8\n  $i9 \u003d lengthof r0\n  $i10 \u003d $i9 - i0\n  System.arraycopy(r0, i0, r9, $i11, $i10)\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "insert",
    "signature": "java.lang.Object[] insert(int,java.lang.Object[],java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If(i0 \u003c 0) → B5 | else → B6",
      "B5 : If(i0 \u003c\u003d $i2) → B6 | else → B7",
      "B7 : If(i0 \u003c\u003d 0) → B8 | else → B9",
      "B9 : If(i0 \u003e\u003d $i7) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  Object[]\n  Object[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d ArrayUtils.isEmpty(r1)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r11 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B4 {\n  if (i0 \u003c 0) goto B5 else B6\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i0 \u003c\u003d $i2) goto B6 else B7\n}",
      "B6 {\n  $r2 \u003d IndexOutOfBoundsException\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  $r4 \u003d $r3.append(\"Index: \")\n  $r5 \u003d $r4.append(i0)\n  $r6 \u003d $r5.append(\", Length: \")\n  $i1 \u003d lengthof r0\n  $r7 \u003d $r6.append($i1)\n  $r8 \u003d $r7.toString()\n  new IndexOutOfBoundsException($r8)\n  throw $r2\n}",
      "B7 {\n  r9 \u003d ArrayUtils.getComponentType(r0)\n  $i4 \u003d lengthof r0\n  $i3 \u003d lengthof r1\n  i5 \u003d $i4 + $i3\n  r10 \u003d ArrayUtils.newInstance(r9, i5)\n  $i6 \u003d lengthof r1\n  System.arraycopy(r1, 0, r10, i0, $i6)\n  if (i0 \u003c\u003d 0) goto B8 else B9\n}",
      "B8 {\n  System.arraycopy(r0, 0, r10, 0, i0)\n}",
      "B9 {\n  $i7 \u003d lengthof r0\n  if (i0 \u003e\u003d $i7) goto B10 else B11\n}",
      "B10 {\n  $i8 \u003d lengthof r1\n  $i11 \u003d i0 + $i8\n  $i9 \u003d lengthof r0\n  $i10 \u003d $i9 - i0\n  System.arraycopy(r0, i0, r10, $i11, $i10)\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isArrayIndexValid",
    "signature": "boolean isArrayIndexValid(java.lang.Object[],int)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B3",
      "B1 : If($i1 \u003c\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  i0 :\u003d @parameter1: int\n  if (i0 \u003c 0) goto B1 else B3\n}",
      "B1 {\n  $i1 \u003d ArrayUtils.getLength(r0)\n  if ($i1 \u003c\u003d i0) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isNotEmpty",
    "signature": "boolean isNotEmpty(boolean[])",
    "visibility": "public",
    "body": "{\r\n    return !isEmpty(array);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isNotEmpty",
    "signature": "boolean isNotEmpty(byte[])",
    "visibility": "public",
    "body": "{\r\n    return !isEmpty(array);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isNotEmpty",
    "signature": "boolean isNotEmpty(char[])",
    "visibility": "public",
    "body": "{\r\n    return !isEmpty(array);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isNotEmpty",
    "signature": "boolean isNotEmpty(double[])",
    "visibility": "public",
    "body": "{\r\n    return !isEmpty(array);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isNotEmpty",
    "signature": "boolean isNotEmpty(float[])",
    "visibility": "public",
    "body": "{\r\n    return !isEmpty(array);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isNotEmpty",
    "signature": "boolean isNotEmpty(int[])",
    "visibility": "public",
    "body": "{\r\n    return !isEmpty(array);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isNotEmpty",
    "signature": "boolean isNotEmpty(long[])",
    "visibility": "public",
    "body": "{\r\n    return !isEmpty(array);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isNotEmpty",
    "signature": "boolean isNotEmpty(short[])",
    "visibility": "public",
    "body": "{\r\n    return !isEmpty(array);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isNotEmpty",
    "signature": "boolean isNotEmpty(java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isSameLength",
    "signature": "boolean isSameLength(boolean[],boolean[])",
    "visibility": "public",
    "body": "{\r\n    return getLength(array1) \u003d\u003d getLength(array2);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 !\u003d $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  r1 :\u003d @parameter1: boolean[]\n  $i1 \u003d ArrayUtils.getLength(r0)\n  $i0 \u003d ArrayUtils.getLength(r1)\n  if ($i1 !\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#getLength(...1)",
        "body": "{\r\n    return array !\u003d null ? Array.getLength(array) : 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isSameLength",
    "signature": "boolean isSameLength(byte[],byte[])",
    "visibility": "public",
    "body": "{\r\n    return getLength(array1) \u003d\u003d getLength(array2);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 !\u003d $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  r1 :\u003d @parameter1: byte[]\n  $i1 \u003d ArrayUtils.getLength(r0)\n  $i0 \u003d ArrayUtils.getLength(r1)\n  if ($i1 !\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#getLength(...1)",
        "body": "{\r\n    return array !\u003d null ? Array.getLength(array) : 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isSameLength",
    "signature": "boolean isSameLength(char[],char[])",
    "visibility": "public",
    "body": "{\r\n    return getLength(array1) \u003d\u003d getLength(array2);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 !\u003d $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  r1 :\u003d @parameter1: char[]\n  $i1 \u003d ArrayUtils.getLength(r0)\n  $i0 \u003d ArrayUtils.getLength(r1)\n  if ($i1 !\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#getLength(...1)",
        "body": "{\r\n    return array !\u003d null ? Array.getLength(array) : 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isSameLength",
    "signature": "boolean isSameLength(double[],double[])",
    "visibility": "public",
    "body": "{\r\n    return getLength(array1) \u003d\u003d getLength(array2);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 !\u003d $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  r1 :\u003d @parameter1: double[]\n  $i1 \u003d ArrayUtils.getLength(r0)\n  $i0 \u003d ArrayUtils.getLength(r1)\n  if ($i1 !\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#getLength(...1)",
        "body": "{\r\n    return array !\u003d null ? Array.getLength(array) : 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isSameLength",
    "signature": "boolean isSameLength(float[],float[])",
    "visibility": "public",
    "body": "{\r\n    return getLength(array1) \u003d\u003d getLength(array2);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 !\u003d $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  r1 :\u003d @parameter1: float[]\n  $i1 \u003d ArrayUtils.getLength(r0)\n  $i0 \u003d ArrayUtils.getLength(r1)\n  if ($i1 !\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#getLength(...1)",
        "body": "{\r\n    return array !\u003d null ? Array.getLength(array) : 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isSameLength",
    "signature": "boolean isSameLength(int[],int[])",
    "visibility": "public",
    "body": "{\r\n    return getLength(array1) \u003d\u003d getLength(array2);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 !\u003d $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  r1 :\u003d @parameter1: int[]\n  $i1 \u003d ArrayUtils.getLength(r0)\n  $i0 \u003d ArrayUtils.getLength(r1)\n  if ($i1 !\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#getLength(...1)",
        "body": "{\r\n    return array !\u003d null ? Array.getLength(array) : 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isSameLength",
    "signature": "boolean isSameLength(long[],long[])",
    "visibility": "public",
    "body": "{\r\n    return getLength(array1) \u003d\u003d getLength(array2);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 !\u003d $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  r1 :\u003d @parameter1: long[]\n  $i1 \u003d ArrayUtils.getLength(r0)\n  $i0 \u003d ArrayUtils.getLength(r1)\n  if ($i1 !\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#getLength(...1)",
        "body": "{\r\n    return array !\u003d null ? Array.getLength(array) : 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isSameLength",
    "signature": "boolean isSameLength(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return getLength(array1) \u003d\u003d getLength(array2);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 !\u003d $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  Object\n  $i1 \u003d ArrayUtils.getLength(r0)\n  $i0 \u003d ArrayUtils.getLength(r1)\n  if ($i1 !\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#getLength(...1)",
        "body": "{\r\n    return array !\u003d null ? Array.getLength(array) : 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isSameLength",
    "signature": "boolean isSameLength(java.lang.Object[],java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    return getLength(array1) \u003d\u003d getLength(array2);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 !\u003d $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  Object[]\n  $i1 \u003d ArrayUtils.getLength(r0)\n  $i0 \u003d ArrayUtils.getLength(r1)\n  if ($i1 !\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#getLength(...1)",
        "body": "{\r\n    return array !\u003d null ? Array.getLength(array) : 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isSameLength",
    "signature": "boolean isSameLength(short[],short[])",
    "visibility": "public",
    "body": "{\r\n    return getLength(array1) \u003d\u003d getLength(array2);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 !\u003d $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  r1 :\u003d @parameter1: short[]\n  $i1 \u003d ArrayUtils.getLength(r0)\n  $i0 \u003d ArrayUtils.getLength(r1)\n  if ($i1 !\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#getLength(...1)",
        "body": "{\r\n    return array !\u003d null ? Array.getLength(array) : 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isSameType",
    "signature": "boolean isSameType(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (array1 \u003d\u003d null || array2 \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"The Array must not be null\");\r\n    }\r\n    return array1.getClass().getName().equals(array2.getClass().getName());\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r2 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Object\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r2 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"The Array must not be null\")\n  throw $r1\n}",
      "B3 {\n  $r3 \u003d r0.getClass()\n  $r6 \u003d $r3.getName()\n  $r4 \u003d r2.getClass()\n  $r5 \u003d $r4.getName()\n  $z0 \u003d $r6.equals($r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isSorted",
    "signature": "boolean isSorted(boolean[])",
    "visibility": "public",
    "body": "{\r\n    if (getLength(array) \u003c 2) {\r\n        return true;\r\n    }\r\n    boolean previous \u003d array[0];\r\n    final int n \u003d array.length;\r\n    for (int i \u003d 1; i \u003c n; i++) {\r\n        final boolean current \u003d array[i];\r\n        if (BooleanUtils.compare(previous, current) \u003e 0) {\r\n            return false;\r\n        }\r\n        previous \u003d current;\r\n    }\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003e\u003d 2) → B1 | else → B2",
      "B3 : If(i3 \u003e\u003d i1) → B4 | else → B7",
      "B4 : If($i2 \u003c\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  $i0 \u003d ArrayUtils.getLength(r0)\n  if ($i0 \u003e\u003d 2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  z1 \u003d r0[0]\n  i1 \u003d lengthof r0\n  i3 \u003d 1\n}",
      "B3 {\n  if (i3 \u003e\u003d i1) goto B4 else B7\n}",
      "B4 {\n  z0 \u003d r0[i3]\n  $i2 \u003d BooleanUtils.compare(z1, z0)\n  if ($i2 \u003c\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  z1 \u003d z0\n  i3 \u003d i3 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#getLength(...1)",
        "body": "{\r\n    return array !\u003d null ? Array.getLength(array) : 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isSorted",
    "signature": "boolean isSorted(byte[])",
    "visibility": "public",
    "body": "{\r\n    if (getLength(array) \u003c 2) {\r\n        return true;\r\n    }\r\n    byte previous \u003d array[0];\r\n    final int n \u003d array.length;\r\n    for (int i \u003d 1; i \u003c n; i++) {\r\n        final byte current \u003d array[i];\r\n        if (NumberUtils.compare(previous, current) \u003e 0) {\r\n            return false;\r\n        }\r\n        previous \u003d current;\r\n    }\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003e\u003d 2) → B1 | else → B2",
      "B3 : If(i5 \u003e\u003d i1) → B4 | else → B7",
      "B4 : If($i3 \u003c\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  $i0 \u003d ArrayUtils.getLength(r0)\n  if ($i0 \u003e\u003d 2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  b4 \u003d r0[0]\n  i1 \u003d lengthof r0\n  i5 \u003d 1\n}",
      "B3 {\n  if (i5 \u003e\u003d i1) goto B4 else B7\n}",
      "B4 {\n  b2 \u003d r0[i5]\n  $i3 \u003d NumberUtils.compare(b4, b2)\n  if ($i3 \u003c\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  b4 \u003d b2\n  i5 \u003d i5 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#getLength(...1)",
        "body": "{\r\n    return array !\u003d null ? Array.getLength(array) : 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isSorted",
    "signature": "boolean isSorted(char[])",
    "visibility": "public",
    "body": "{\r\n    if (getLength(array) \u003c 2) {\r\n        return true;\r\n    }\r\n    char previous \u003d array[0];\r\n    final int n \u003d array.length;\r\n    for (int i \u003d 1; i \u003c n; i++) {\r\n        final char current \u003d array[i];\r\n        if (CharUtils.compare(previous, current) \u003e 0) {\r\n            return false;\r\n        }\r\n        previous \u003d current;\r\n    }\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003e\u003d 2) → B1 | else → B2",
      "B3 : If(i5 \u003e\u003d i1) → B4 | else → B7",
      "B4 : If($i3 \u003c\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  $i0 \u003d ArrayUtils.getLength(r0)\n  if ($i0 \u003e\u003d 2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  c4 \u003d r0[0]\n  i1 \u003d lengthof r0\n  i5 \u003d 1\n}",
      "B3 {\n  if (i5 \u003e\u003d i1) goto B4 else B7\n}",
      "B4 {\n  c2 \u003d r0[i5]\n  $i3 \u003d CharUtils.compare(c4, c2)\n  if ($i3 \u003c\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  c4 \u003d c2\n  i5 \u003d i5 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#getLength(...1)",
        "body": "{\r\n    return array !\u003d null ? Array.getLength(array) : 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isSorted",
    "signature": "boolean isSorted(double[])",
    "visibility": "public",
    "body": "{\r\n    if (getLength(array) \u003c 2) {\r\n        return true;\r\n    }\r\n    double previous \u003d array[0];\r\n    final int n \u003d array.length;\r\n    for (int i \u003d 1; i \u003c n; i++) {\r\n        final double current \u003d array[i];\r\n        if (Double.compare(previous, current) \u003e 0) {\r\n            return false;\r\n        }\r\n        previous \u003d current;\r\n    }\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003e\u003d 2) → B1 | else → B2",
      "B3 : If(i3 \u003e\u003d i1) → B4 | else → B7",
      "B4 : If($i2 \u003c\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  $i0 \u003d ArrayUtils.getLength(r0)\n  if ($i0 \u003e\u003d 2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  d1 \u003d r0[0]\n  i1 \u003d lengthof r0\n  i3 \u003d 1\n}",
      "B3 {\n  if (i3 \u003e\u003d i1) goto B4 else B7\n}",
      "B4 {\n  d0 \u003d r0[i3]\n  $i2 \u003d Double.compare(d1, d0)\n  if ($i2 \u003c\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  d1 \u003d d0\n  i3 \u003d i3 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#getLength(...1)",
        "body": "{\r\n    return array !\u003d null ? Array.getLength(array) : 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isSorted",
    "signature": "boolean isSorted(float[])",
    "visibility": "public",
    "body": "{\r\n    if (getLength(array) \u003c 2) {\r\n        return true;\r\n    }\r\n    float previous \u003d array[0];\r\n    final int n \u003d array.length;\r\n    for (int i \u003d 1; i \u003c n; i++) {\r\n        final float current \u003d array[i];\r\n        if (Float.compare(previous, current) \u003e 0) {\r\n            return false;\r\n        }\r\n        previous \u003d current;\r\n    }\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003e\u003d 2) → B1 | else → B2",
      "B3 : If(i3 \u003e\u003d i1) → B4 | else → B7",
      "B4 : If($i2 \u003c\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  $i0 \u003d ArrayUtils.getLength(r0)\n  if ($i0 \u003e\u003d 2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  f1 \u003d r0[0]\n  i1 \u003d lengthof r0\n  i3 \u003d 1\n}",
      "B3 {\n  if (i3 \u003e\u003d i1) goto B4 else B7\n}",
      "B4 {\n  f0 \u003d r0[i3]\n  $i2 \u003d Float.compare(f1, f0)\n  if ($i2 \u003c\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  f1 \u003d f0\n  i3 \u003d i3 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#getLength(...1)",
        "body": "{\r\n    return array !\u003d null ? Array.getLength(array) : 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isSorted",
    "signature": "boolean isSorted(int[])",
    "visibility": "public",
    "body": "{\r\n    if (getLength(array) \u003c 2) {\r\n        return true;\r\n    }\r\n    int previous \u003d array[0];\r\n    final int n \u003d array.length;\r\n    for (int i \u003d 1; i \u003c n; i++) {\r\n        final int current \u003d array[i];\r\n        if (NumberUtils.compare(previous, current) \u003e 0) {\r\n            return false;\r\n        }\r\n        previous \u003d current;\r\n    }\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003e\u003d 2) → B1 | else → B2",
      "B3 : If(i5 \u003e\u003d i1) → B4 | else → B7",
      "B4 : If($i3 \u003c\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  $i0 \u003d ArrayUtils.getLength(r0)\n  if ($i0 \u003e\u003d 2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i4 \u003d r0[0]\n  i1 \u003d lengthof r0\n  i5 \u003d 1\n}",
      "B3 {\n  if (i5 \u003e\u003d i1) goto B4 else B7\n}",
      "B4 {\n  i2 \u003d r0[i5]\n  $i3 \u003d NumberUtils.compare(i4, i2)\n  if ($i3 \u003c\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i4 \u003d i2\n  i5 \u003d i5 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#getLength(...1)",
        "body": "{\r\n    return array !\u003d null ? Array.getLength(array) : 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isSorted",
    "signature": "boolean isSorted(long[])",
    "visibility": "public",
    "body": "{\r\n    if (getLength(array) \u003c 2) {\r\n        return true;\r\n    }\r\n    long previous \u003d array[0];\r\n    final int n \u003d array.length;\r\n    for (int i \u003d 1; i \u003c n; i++) {\r\n        final long current \u003d array[i];\r\n        if (NumberUtils.compare(previous, current) \u003e 0) {\r\n            return false;\r\n        }\r\n        previous \u003d current;\r\n    }\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003e\u003d 2) → B1 | else → B2",
      "B3 : If(i5 \u003e\u003d i1) → B4 | else → B7",
      "B4 : If($i3 \u003c\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  $i0 \u003d ArrayUtils.getLength(r0)\n  if ($i0 \u003e\u003d 2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  l4 \u003d r0[0]\n  i1 \u003d lengthof r0\n  i5 \u003d 1\n}",
      "B3 {\n  if (i5 \u003e\u003d i1) goto B4 else B7\n}",
      "B4 {\n  l2 \u003d r0[i5]\n  $i3 \u003d NumberUtils.compare(l4, l2)\n  if ($i3 \u003c\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  l4 \u003d l2\n  i5 \u003d i5 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#getLength(...1)",
        "body": "{\r\n    return array !\u003d null ? Array.getLength(array) : 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isSorted",
    "signature": "boolean isSorted(short[])",
    "visibility": "public",
    "body": "{\r\n    if (getLength(array) \u003c 2) {\r\n        return true;\r\n    }\r\n    short previous \u003d array[0];\r\n    final int n \u003d array.length;\r\n    for (int i \u003d 1; i \u003c n; i++) {\r\n        final short current \u003d array[i];\r\n        if (NumberUtils.compare(previous, current) \u003e 0) {\r\n            return false;\r\n        }\r\n        previous \u003d current;\r\n    }\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003e\u003d 2) → B1 | else → B2",
      "B3 : If(i5 \u003e\u003d i1) → B4 | else → B7",
      "B4 : If($i3 \u003c\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  $i0 \u003d ArrayUtils.getLength(r0)\n  if ($i0 \u003e\u003d 2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  s4 \u003d r0[0]\n  i1 \u003d lengthof r0\n  i5 \u003d 1\n}",
      "B3 {\n  if (i5 \u003e\u003d i1) goto B4 else B7\n}",
      "B4 {\n  s2 \u003d r0[i5]\n  $i3 \u003d NumberUtils.compare(s4, s2)\n  if ($i3 \u003c\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  s4 \u003d s2\n  i5 \u003d i5 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#getLength(...1)",
        "body": "{\r\n    return array !\u003d null ? Array.getLength(array) : 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "isSorted",
    "signature": "boolean isSorted(java.lang.Object[],java.util.Comparator)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003e\u003d 2) → B1 | else → B2",
      "B3 : If(i3 \u003e\u003d i1) → B4 | else → B7",
      "B4 : If($i2 \u003c\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  Comparator\n  Objects.requireNonNull(r0, \"comparator\")\n  $i0 \u003d ArrayUtils.getLength(r1)\n  if ($i0 \u003e\u003d 2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r3 \u003d r1[0]\n  i1 \u003d lengthof r1\n  i3 \u003d 1\n}",
      "B3 {\n  if (i3 \u003e\u003d i1) goto B4 else B7\n}",
      "B4 {\n  r2 \u003d r1[i3]\n  $i2 \u003d r0.compare(r3, r2)\n  if ($i2 \u003c\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  r3 \u003d r2\n  i3 \u003d i3 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "lastIndexOf",
    "signature": "int lastIndexOf(boolean[],boolean,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array) || startIndex \u003c 0) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    if (startIndex \u003e\u003d array.length) {\r\n        startIndex \u003d array.length - 1;\r\n    }\r\n    for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\r\n        if (valueToFind \u003d\u003d array[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If(i2 \u003e\u003d 0) → B2 | else → B3",
      "B3 : If(i2 \u003c $i0) → B4 | else → B5",
      "B6 : If(i3 \u003c 0) → B7 | else → B10",
      "B7 : If(z1 !\u003d $z2) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  z1 :\u003d @parameter1: boolean\n  i2 :\u003d @parameter2: int\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  if (i2 \u003e\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $i5 \u003d (int) -1\n  return\n}",
      "B3 {\n  $i0 \u003d lengthof r0\n  if (i2 \u003c $i0) goto B4 else B5\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  i2 \u003d $i1 - 1\n}",
      "B5 {\n  i3 \u003d i2\n}",
      "B6 {\n  if (i3 \u003c 0) goto B7 else B10\n}",
      "B7 {\n  $z2 \u003d r0[i3]\n  if (z1 !\u003d $z2) goto B8 else B9\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $i7 \u003d (int) -1\n  i3 \u003d i3 + $i7\n  goto B6\n}",
      "B10 {\n  $i9 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B6",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "lastIndexOf",
    "signature": "int lastIndexOf(byte[],byte,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null || startIndex \u003c 0) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    if (startIndex \u003e\u003d array.length) {\r\n        startIndex \u003d array.length - 1;\r\n    }\r\n    for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\r\n        if (valueToFind \u003d\u003d array[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(i4 \u003e\u003d 0) → B2 | else → B3",
      "B3 : If(i4 \u003c $i0) → B4 | else → B5",
      "B6 : If(i5 \u003c 0) → B7 | else → B10",
      "B7 : If($i8 !\u003d $i9) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  b1 :\u003d @parameter1: byte\n  i4 :\u003d @parameter2: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (i4 \u003e\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $i7 \u003d (int) -1\n  return\n}",
      "B3 {\n  $i0 \u003d lengthof r0\n  if (i4 \u003c $i0) goto B4 else B5\n}",
      "B4 {\n  $i3 \u003d lengthof r0\n  i4 \u003d $i3 - 1\n}",
      "B5 {\n  i5 \u003d i4\n}",
      "B6 {\n  if (i5 \u003c 0) goto B7 else B10\n}",
      "B7 {\n  $b2 \u003d r0[i5]\n  $i8 \u003d (int) b1\n  $i9 \u003d (int) $b2\n  if ($i8 !\u003d $i9) goto B8 else B9\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $i11 \u003d (int) -1\n  i5 \u003d i5 + $i11\n  goto B6\n}",
      "B10 {\n  $i13 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B6",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "lastIndexOf",
    "signature": "int lastIndexOf(char[],char,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null || startIndex \u003c 0) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    if (startIndex \u003e\u003d array.length) {\r\n        startIndex \u003d array.length - 1;\r\n    }\r\n    for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\r\n        if (valueToFind \u003d\u003d array[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(i4 \u003e\u003d 0) → B2 | else → B3",
      "B3 : If(i4 \u003c $i0) → B4 | else → B5",
      "B6 : If(i5 \u003c 0) → B7 | else → B10",
      "B7 : If($i8 !\u003d $i9) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  c1 :\u003d @parameter1: char\n  i4 :\u003d @parameter2: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (i4 \u003e\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $i7 \u003d (int) -1\n  return\n}",
      "B3 {\n  $i0 \u003d lengthof r0\n  if (i4 \u003c $i0) goto B4 else B5\n}",
      "B4 {\n  $i3 \u003d lengthof r0\n  i4 \u003d $i3 - 1\n}",
      "B5 {\n  i5 \u003d i4\n}",
      "B6 {\n  if (i5 \u003c 0) goto B7 else B10\n}",
      "B7 {\n  $c2 \u003d r0[i5]\n  $i8 \u003d (int) c1\n  $i9 \u003d (int) $c2\n  if ($i8 !\u003d $i9) goto B8 else B9\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $i11 \u003d (int) -1\n  i5 \u003d i5 + $i11\n  goto B6\n}",
      "B10 {\n  $i13 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B6",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "lastIndexOf",
    "signature": "int lastIndexOf(double[],double,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array) || startIndex \u003c 0) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    if (startIndex \u003e\u003d array.length) {\r\n        startIndex \u003d array.length - 1;\r\n    }\r\n    for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\r\n        if (valueToFind \u003d\u003d array[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If(i3 \u003e\u003d 0) → B2 | else → B3",
      "B3 : If(i3 \u003c $i0) → B4 | else → B5",
      "B6 : If(i4 \u003c 0) → B7 | else → B10",
      "B7 : If($b1 !\u003d 0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  d0 :\u003d @parameter1: double\n  i3 :\u003d @parameter2: int\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  if (i3 \u003e\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $i6 \u003d (int) -1\n  return\n}",
      "B3 {\n  $i0 \u003d lengthof r0\n  if (i3 \u003c $i0) goto B4 else B5\n}",
      "B4 {\n  $i2 \u003d lengthof r0\n  i3 \u003d $i2 - 1\n}",
      "B5 {\n  i4 \u003d i3\n}",
      "B6 {\n  if (i4 \u003c 0) goto B7 else B10\n}",
      "B7 {\n  $d1 \u003d r0[i4]\n  $b1 \u003d d0 cmpl $d1\n  if ($b1 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $i8 \u003d (int) -1\n  i4 \u003d i4 + $i8\n  goto B6\n}",
      "B10 {\n  $i10 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B6",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "lastIndexOf",
    "signature": "int lastIndexOf(double[],double,int,double)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array) || startIndex \u003c 0) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    if (startIndex \u003e\u003d array.length) {\r\n        startIndex \u003d array.length - 1;\r\n    }\r\n    final double min \u003d valueToFind - tolerance;\r\n    final double max \u003d valueToFind + tolerance;\r\n    for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\r\n        if (array[i] \u003e\u003d min \u0026\u0026 array[i] \u003c\u003d max) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 12,
    "edges": 15,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If(i4 \u003e\u003d 0) → B2 | else → B3",
      "B3 : If(i4 \u003c $i0) → B4 | else → B5",
      "B6 : If(i5 \u003c 0) → B7 | else → B11",
      "B7 : If($i8 \u003c 0) → B8 | else → B10",
      "B8 : If($i9 \u003e 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  d0 :\u003d @parameter1: double\n  i4 :\u003d @parameter2: int\n  d1 :\u003d @parameter3: double\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  if (i4 \u003e\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $i7 \u003d (int) -1\n  return\n}",
      "B3 {\n  $i0 \u003d lengthof r0\n  if (i4 \u003c $i0) goto B4 else B5\n}",
      "B4 {\n  $i3 \u003d lengthof r0\n  i4 \u003d $i3 - 1\n}",
      "B5 {\n  $d4 \u003d d0 - d1\n  $d5 \u003d d0 + d1\n  i5 \u003d i4\n}",
      "B6 {\n  if (i5 \u003c 0) goto B7 else B11\n}",
      "B7 {\n  $d2 \u003d r0[i5]\n  $b1 \u003d $d2 cmpl $d4\n  $i8 \u003d (int) $b1\n  if ($i8 \u003c 0) goto B8 else B10\n}",
      "B8 {\n  $d3 \u003d r0[i5]\n  $b2 \u003d $d3 cmpg $d5\n  $i9 \u003d (int) $b2\n  if ($i9 \u003e 0) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $i11 \u003d (int) -1\n  i5 \u003d i5 + $i11\n  goto B6\n}",
      "B11 {\n  $i13 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B6",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "lastIndexOf",
    "signature": "int lastIndexOf(float[],float,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array) || startIndex \u003c 0) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    if (startIndex \u003e\u003d array.length) {\r\n        startIndex \u003d array.length - 1;\r\n    }\r\n    for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\r\n        if (valueToFind \u003d\u003d array[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If(i3 \u003e\u003d 0) → B2 | else → B3",
      "B3 : If(i3 \u003c $i0) → B4 | else → B5",
      "B6 : If(i4 \u003c 0) → B7 | else → B10",
      "B7 : If($b1 !\u003d 0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  f0 :\u003d @parameter1: float\n  i3 :\u003d @parameter2: int\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  if (i3 \u003e\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $i6 \u003d (int) -1\n  return\n}",
      "B3 {\n  $i0 \u003d lengthof r0\n  if (i3 \u003c $i0) goto B4 else B5\n}",
      "B4 {\n  $i2 \u003d lengthof r0\n  i3 \u003d $i2 - 1\n}",
      "B5 {\n  i4 \u003d i3\n}",
      "B6 {\n  if (i4 \u003c 0) goto B7 else B10\n}",
      "B7 {\n  $f1 \u003d r0[i4]\n  $b1 \u003d f0 cmpl $f1\n  if ($b1 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $i8 \u003d (int) -1\n  i4 \u003d i4 + $i8\n  goto B6\n}",
      "B10 {\n  $i10 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B6",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "lastIndexOf",
    "signature": "int lastIndexOf(int[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null || startIndex \u003c 0) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    if (startIndex \u003e\u003d array.length) {\r\n        startIndex \u003d array.length - 1;\r\n    }\r\n    for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\r\n        if (valueToFind \u003d\u003d array[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(i4 \u003e\u003d 0) → B2 | else → B3",
      "B3 : If(i4 \u003c $i0) → B4 | else → B5",
      "B6 : If(i5 \u003c 0) → B7 | else → B10",
      "B7 : If(i1 !\u003d $i2) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  i1 :\u003d @parameter1: int\n  i4 :\u003d @parameter2: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (i4 \u003e\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $i7 \u003d (int) -1\n  return\n}",
      "B3 {\n  $i0 \u003d lengthof r0\n  if (i4 \u003c $i0) goto B4 else B5\n}",
      "B4 {\n  $i3 \u003d lengthof r0\n  i4 \u003d $i3 - 1\n}",
      "B5 {\n  i5 \u003d i4\n}",
      "B6 {\n  if (i5 \u003c 0) goto B7 else B10\n}",
      "B7 {\n  $i2 \u003d r0[i5]\n  if (i1 !\u003d $i2) goto B8 else B9\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $i9 \u003d (int) -1\n  i5 \u003d i5 + $i9\n  goto B6\n}",
      "B10 {\n  $i11 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B6",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "lastIndexOf",
    "signature": "int lastIndexOf(long[],long,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null || startIndex \u003c 0) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    if (startIndex \u003e\u003d array.length) {\r\n        startIndex \u003d array.length - 1;\r\n    }\r\n    for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\r\n        if (valueToFind \u003d\u003d array[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(i5 \u003e\u003d 0) → B2 | else → B3",
      "B3 : If(i5 \u003c $i0) → B4 | else → B5",
      "B6 : If(i6 \u003c 0) → B7 | else → B10",
      "B7 : If($b3 !\u003d 0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  l1 :\u003d @parameter1: long\n  i5 :\u003d @parameter2: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (i5 \u003e\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $i8 \u003d (int) -1\n  return\n}",
      "B3 {\n  $i0 \u003d lengthof r0\n  if (i5 \u003c $i0) goto B4 else B5\n}",
      "B4 {\n  $i4 \u003d lengthof r0\n  i5 \u003d $i4 - 1\n}",
      "B5 {\n  i6 \u003d i5\n}",
      "B6 {\n  if (i6 \u003c 0) goto B7 else B10\n}",
      "B7 {\n  $l2 \u003d r0[i6]\n  $b3 \u003d l1 cmp $l2\n  if ($b3 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $i10 \u003d (int) -1\n  i6 \u003d i6 + $i10\n  goto B6\n}",
      "B10 {\n  $i12 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B6",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "lastIndexOf",
    "signature": "int lastIndexOf(java.lang.Object[],java.lang.Object,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null || startIndex \u003c 0) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    if (startIndex \u003e\u003d array.length) {\r\n        startIndex \u003d array.length - 1;\r\n    }\r\n    if (objectToFind \u003d\u003d null) {\r\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\r\n            if (array[i] \u003d\u003d null) {\r\n                return i;\r\n            }\r\n        }\r\n    } else if (array.getClass().getComponentType().isInstance(objectToFind)) {\r\n        for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\r\n            if (objectToFind.equals(array[i])) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 19,
    "edges": 24,
    "cc": 7,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(i2 \u003e\u003d 0) → B2 | else → B3",
      "B3 : If(i2 \u003c $i0) → B4 | else → B5",
      "B5 : If(r1 !\u003d null) → B6 | else → B12",
      "B7 : If(i3 \u003c 0) → B8 | else → B11",
      "B8 : If($r5 !\u003d null) → B9 | else → B10",
      "B12 : If($z0 \u003d\u003d false) → B13 | else → B18",
      "B14 : If(i4 \u003c 0) → B15 | else → B18",
      "B15 : If($z1 \u003d\u003d false) → B16 | else → B17"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  Object\n  i2 :\u003d @parameter2: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (i2 \u003e\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $i6 \u003d (int) -1\n  return\n}",
      "B3 {\n  $i0 \u003d lengthof r0\n  if (i2 \u003c $i0) goto B4 else B5\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  i2 \u003d $i1 - 1\n}",
      "B5 {\n  if (r1 !\u003d null) goto B6 else B12\n}",
      "B6 {\n  i3 \u003d i2\n}",
      "B7 {\n  if (i3 \u003c 0) goto B8 else B11\n}",
      "B8 {\n  $r5 \u003d r0[i3]\n  if ($r5 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $i8 \u003d (int) -1\n  i3 \u003d i3 + $i8\n  goto B7\n}",
      "B11 {\n  goto B18\n}",
      "B12 {\n  $r2 \u003d r0.getClass()\n  $r3 \u003d $r2.getComponentType()\n  $z0 \u003d $r3.isInstance(r1)\n  if ($z0 \u003d\u003d false) goto B13 else B18\n}",
      "B13 {\n  i4 \u003d i2\n}",
      "B14 {\n  if (i4 \u003c 0) goto B15 else B18\n}",
      "B15 {\n  $r4 \u003d r0[i4]\n  $z1 \u003d r1.equals($r4)\n  if ($z1 \u003d\u003d false) goto B16 else B17\n}",
      "B16 {\n  return\n}",
      "B17 {\n  $i10 \u003d (int) -1\n  i4 \u003d i4 + $i10\n  goto B14\n}",
      "B18 {\n  $i12 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B12",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B7",
      "B11 --\u003e B18",
      "B12 --\u003e B13",
      "B12 --\u003e B18",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B18",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e B14",
      "B18 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "lastIndexOf",
    "signature": "int lastIndexOf(short[],short,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null || startIndex \u003c 0) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    if (startIndex \u003e\u003d array.length) {\r\n        startIndex \u003d array.length - 1;\r\n    }\r\n    for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\r\n        if (valueToFind \u003d\u003d array[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(i4 \u003e\u003d 0) → B2 | else → B3",
      "B3 : If(i4 \u003c $i0) → B4 | else → B5",
      "B6 : If(i5 \u003c 0) → B7 | else → B10",
      "B7 : If($i8 !\u003d $i9) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  s1 :\u003d @parameter1: short\n  i4 :\u003d @parameter2: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (i4 \u003e\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $i7 \u003d (int) -1\n  return\n}",
      "B3 {\n  $i0 \u003d lengthof r0\n  if (i4 \u003c $i0) goto B4 else B5\n}",
      "B4 {\n  $i3 \u003d lengthof r0\n  i4 \u003d $i3 - 1\n}",
      "B5 {\n  i5 \u003d i4\n}",
      "B6 {\n  if (i5 \u003c 0) goto B7 else B10\n}",
      "B7 {\n  $s2 \u003d r0[i5]\n  $i8 \u003d (int) s1\n  $i9 \u003d (int) $s2\n  if ($i8 !\u003d $i9) goto B8 else B9\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $i11 \u003d (int) -1\n  i5 \u003d i5 + $i11\n  goto B6\n}",
      "B10 {\n  $i13 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B6",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "nullTo",
    "signature": "java.lang.Object[] nullTo(java.lang.Object[],java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  Object[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "nullToEmpty",
    "signature": "boolean[] nullToEmpty(boolean[])",
    "visibility": "public",
    "body": "{\r\n    return isEmpty(array) ? EMPTY_BOOLEAN_ARRAY : array;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY\u003e\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "nullToEmpty",
    "signature": "byte[] nullToEmpty(byte[])",
    "visibility": "public",
    "body": "{\r\n    return isEmpty(array) ? EMPTY_BYTE_ARRAY : array;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ArrayUtils: byte[] EMPTY_BYTE_ARRAY\u003e\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "nullToEmpty",
    "signature": "char[] nullToEmpty(char[])",
    "visibility": "public",
    "body": "{\r\n    return isEmpty(array) ? EMPTY_CHAR_ARRAY : array;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ArrayUtils: char[] EMPTY_CHAR_ARRAY\u003e\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "nullToEmpty",
    "signature": "double[] nullToEmpty(double[])",
    "visibility": "public",
    "body": "{\r\n    return isEmpty(array) ? EMPTY_DOUBLE_ARRAY : array;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ArrayUtils: double[] EMPTY_DOUBLE_ARRAY\u003e\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "nullToEmpty",
    "signature": "float[] nullToEmpty(float[])",
    "visibility": "public",
    "body": "{\r\n    return isEmpty(array) ? EMPTY_FLOAT_ARRAY : array;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ArrayUtils: float[] EMPTY_FLOAT_ARRAY\u003e\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "nullToEmpty",
    "signature": "int[] nullToEmpty(int[])",
    "visibility": "public",
    "body": "{\r\n    return isEmpty(array) ? EMPTY_INT_ARRAY : array;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ArrayUtils: int[] EMPTY_INT_ARRAY\u003e\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "nullToEmpty",
    "signature": "long[] nullToEmpty(long[])",
    "visibility": "public",
    "body": "{\r\n    return isEmpty(array) ? EMPTY_LONG_ARRAY : array;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ArrayUtils: long[] EMPTY_LONG_ARRAY\u003e\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "nullToEmpty",
    "signature": "short[] nullToEmpty(short[])",
    "visibility": "public",
    "body": "{\r\n    return isEmpty(array) ? EMPTY_SHORT_ARRAY : array;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ArrayUtils: short[] EMPTY_SHORT_ARRAY\u003e\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "nullToEmpty",
    "signature": "java.lang.Object[] nullToEmpty(java.lang.Object[],java.lang.Class)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r1 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  Class\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"The type must not be null\")\n  throw $r6\n}",
      "B2 {\n  if (r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d r0.getComponentType()\n  $r3 \u003d Array.newInstance($r2, 0)\n  $r4 \u003d r0.cast($r3)\n  $r5 \u003d Object[]) $r4\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "removeElement",
    "signature": "boolean[] removeElement(boolean[],boolean)",
    "visibility": "public",
    "body": "{\r\n    final int index \u003d indexOf(array, element);\r\n    return index \u003d\u003d INDEX_NOT_FOUND ? clone(array) : remove(array, index);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 !\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  z0 :\u003d @parameter1: boolean\n  i0 \u003d ArrayUtils.indexOf(r0, z0)\n  $i2 \u003d (int) -1\n  if (i0 !\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ArrayUtils.clone(r0)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d ArrayUtils.remove(r0, i0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#remove(...2)",
        "body": "{\r\n    return (boolean[]) remove((Object) array, index);\r\n}"
      },
      {
        "name": "ArrayUtils#indexOf(...2)",
        "body": "{\r\n    return indexOf(array, valueToFind, 0);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "removeElement",
    "signature": "byte[] removeElement(byte[],byte)",
    "visibility": "public",
    "body": "{\r\n    final int index \u003d indexOf(array, element);\r\n    return index \u003d\u003d INDEX_NOT_FOUND ? clone(array) : remove(array, index);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i1 !\u003d $i3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  b0 :\u003d @parameter1: byte\n  i1 \u003d ArrayUtils.indexOf(r0, b0)\n  $i3 \u003d (int) -1\n  if (i1 !\u003d $i3) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ArrayUtils.clone(r0)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d ArrayUtils.remove(r0, i1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#remove(...2)",
        "body": "{\r\n    return (boolean[]) remove((Object) array, index);\r\n}"
      },
      {
        "name": "ArrayUtils#indexOf(...2)",
        "body": "{\r\n    return indexOf(array, valueToFind, 0);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "removeElement",
    "signature": "char[] removeElement(char[],char)",
    "visibility": "public",
    "body": "{\r\n    final int index \u003d indexOf(array, element);\r\n    return index \u003d\u003d INDEX_NOT_FOUND ? clone(array) : remove(array, index);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i1 !\u003d $i3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  c0 :\u003d @parameter1: char\n  i1 \u003d ArrayUtils.indexOf(r0, c0)\n  $i3 \u003d (int) -1\n  if (i1 !\u003d $i3) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ArrayUtils.clone(r0)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d ArrayUtils.remove(r0, i1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#remove(...2)",
        "body": "{\r\n    return (boolean[]) remove((Object) array, index);\r\n}"
      },
      {
        "name": "ArrayUtils#indexOf(...2)",
        "body": "{\r\n    return indexOf(array, valueToFind, 0);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "removeElement",
    "signature": "double[] removeElement(double[],double)",
    "visibility": "public",
    "body": "{\r\n    final int index \u003d indexOf(array, element);\r\n    return index \u003d\u003d INDEX_NOT_FOUND ? clone(array) : remove(array, index);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 !\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  d0 :\u003d @parameter1: double\n  i0 \u003d ArrayUtils.indexOf(r0, d0)\n  $i2 \u003d (int) -1\n  if (i0 !\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ArrayUtils.clone(r0)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d ArrayUtils.remove(r0, i0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#remove(...2)",
        "body": "{\r\n    return (boolean[]) remove((Object) array, index);\r\n}"
      },
      {
        "name": "ArrayUtils#indexOf(...2)",
        "body": "{\r\n    return indexOf(array, valueToFind, 0);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "removeElement",
    "signature": "float[] removeElement(float[],float)",
    "visibility": "public",
    "body": "{\r\n    final int index \u003d indexOf(array, element);\r\n    return index \u003d\u003d INDEX_NOT_FOUND ? clone(array) : remove(array, index);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 !\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  f0 :\u003d @parameter1: float\n  i0 \u003d ArrayUtils.indexOf(r0, f0)\n  $i2 \u003d (int) -1\n  if (i0 !\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ArrayUtils.clone(r0)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d ArrayUtils.remove(r0, i0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#remove(...2)",
        "body": "{\r\n    return (boolean[]) remove((Object) array, index);\r\n}"
      },
      {
        "name": "ArrayUtils#indexOf(...2)",
        "body": "{\r\n    return indexOf(array, valueToFind, 0);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "removeElement",
    "signature": "int[] removeElement(int[],int)",
    "visibility": "public",
    "body": "{\r\n    final int index \u003d indexOf(array, element);\r\n    return index \u003d\u003d INDEX_NOT_FOUND ? clone(array) : remove(array, index);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i1 !\u003d $i3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  i0 :\u003d @parameter1: int\n  i1 \u003d ArrayUtils.indexOf(r0, i0)\n  $i3 \u003d (int) -1\n  if (i1 !\u003d $i3) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ArrayUtils.clone(r0)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d ArrayUtils.remove(r0, i1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#remove(...2)",
        "body": "{\r\n    return (boolean[]) remove((Object) array, index);\r\n}"
      },
      {
        "name": "ArrayUtils#indexOf(...2)",
        "body": "{\r\n    return indexOf(array, valueToFind, 0);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "removeElement",
    "signature": "long[] removeElement(long[],long)",
    "visibility": "public",
    "body": "{\r\n    final int index \u003d indexOf(array, element);\r\n    return index \u003d\u003d INDEX_NOT_FOUND ? clone(array) : remove(array, index);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i1 !\u003d $i3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  l0 :\u003d @parameter1: long\n  i1 \u003d ArrayUtils.indexOf(r0, l0)\n  $i3 \u003d (int) -1\n  if (i1 !\u003d $i3) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ArrayUtils.clone(r0)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d ArrayUtils.remove(r0, i1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#remove(...2)",
        "body": "{\r\n    return (boolean[]) remove((Object) array, index);\r\n}"
      },
      {
        "name": "ArrayUtils#indexOf(...2)",
        "body": "{\r\n    return indexOf(array, valueToFind, 0);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "removeElement",
    "signature": "short[] removeElement(short[],short)",
    "visibility": "public",
    "body": "{\r\n    final int index \u003d indexOf(array, element);\r\n    return index \u003d\u003d INDEX_NOT_FOUND ? clone(array) : remove(array, index);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i1 !\u003d $i3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  s0 :\u003d @parameter1: short\n  i1 \u003d ArrayUtils.indexOf(r0, s0)\n  $i3 \u003d (int) -1\n  if (i1 !\u003d $i3) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ArrayUtils.clone(r0)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d ArrayUtils.remove(r0, i1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#remove(...2)",
        "body": "{\r\n    return (boolean[]) remove((Object) array, index);\r\n}"
      },
      {
        "name": "ArrayUtils#indexOf(...2)",
        "body": "{\r\n    return indexOf(array, valueToFind, 0);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "removeElement",
    "signature": "java.lang.Object[] removeElement(java.lang.Object[],java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 !\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  Object\n  i0 \u003d ArrayUtils.indexOf(r0, r1)\n  $i2 \u003d (int) -1\n  if (i0 !\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d ArrayUtils.clone(r0)\n  goto B3\n}",
      "B2 {\n  $r2 \u003d ArrayUtils.remove(r0, i0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "removeElements",
    "signature": "boolean[] removeElements(boolean[],boolean[])",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array) || isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    // only two possible values here\r\n    final HashMap\u003cBoolean, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(2);\r\n    for (final boolean v : values) {\r\n        final Boolean boxed \u003d Boolean.valueOf(v);\r\n        final MutableInt count \u003d occurrences.get(boxed);\r\n        if (count \u003d\u003d null) {\r\n            occurrences.put(boxed, new MutableInt(1));\r\n        } else {\r\n            count.increment();\r\n        }\r\n    }\r\n    final BitSet toRemove \u003d new BitSet();\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        final boolean key \u003d array[i];\r\n        final MutableInt count \u003d occurrences.get(key);\r\n        if (count !\u003d null) {\r\n            if (count.decrementAndGet() \u003d\u003d 0) {\r\n                occurrences.remove(key);\r\n            }\r\n            toRemove.set(i);\r\n        }\r\n    }\r\n    return (boolean[]) removeAll(array, toRemove);\r\n}",
    "nodes": 17,
    "edges": 22,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i3 \u003e\u003d i2) → B5 | else → B9",
      "B5 : If(r12 !\u003d null) → B6 | else → B7",
      "B10 : If(i4 \u003e\u003d $i0) → B11 | else → B16",
      "B11 : If(r14 \u003d\u003d null) → B12 | else → B15",
      "B12 : If($i1 !\u003d 0) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  r2 :\u003d @parameter1: boolean[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d ArrayUtils.isEmpty(r2)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B3 {\n  $r3 \u003d HashMap\n  new HashMap(2)\n  i2 \u003d lengthof r2\n  i3 \u003d 0\n}",
      "B4 {\n  if (i3 \u003e\u003d i2) goto B5 else B9\n}",
      "B5 {\n  z2 \u003d r2[i3]\n  r10 \u003d Boolean.valueOf(z2)\n  $r11 \u003d $r3.get(r10)\n  r12 \u003d MutableInt) $r11\n  if (r12 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r13 \u003d MutableInt\n  new MutableInt(1)\n  $r3.put(r10, $r13)\n  goto B8\n}",
      "B7 {\n  r12.increment()\n}",
      "B8 {\n  i3 \u003d i3 + 1\n  goto B4\n}",
      "B9 {\n  $r4 \u003d BitSet\n  new BitSet()\n  i4 \u003d 0\n}",
      "B10 {\n  $i0 \u003d lengthof r0\n  if (i4 \u003e\u003d $i0) goto B11 else B16\n}",
      "B11 {\n  z3 \u003d r0[i4]\n  $r7 \u003d Boolean.valueOf(z3)\n  $r8 \u003d $r3.get($r7)\n  r14 \u003d MutableInt) $r8\n  if (r14 \u003d\u003d null) goto B12 else B15\n}",
      "B12 {\n  $i1 \u003d r14.decrementAndGet()\n  if ($i1 !\u003d 0) goto B13 else B14\n}",
      "B13 {\n  $r9 \u003d Boolean.valueOf(z3)\n  $r3.remove($r9)\n}",
      "B14 {\n  $r4.set(i4)\n}",
      "B15 {\n  i4 \u003d i4 + 1\n  goto B10\n}",
      "B16 {\n  $r5 \u003d ArrayUtils.removeAll(r0, $r4)\n  $r6 \u003d (boolean[]) $r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B4",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B16",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B15 --\u003e B10",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      },
      {
        "name": "ArrayUtils#removeAll(...2)",
        "body": "{\r\n    return (boolean[]) removeAll((Object) array, indices);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "removeElements",
    "signature": "byte[] removeElements(byte[],byte[])",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array) || isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    final Map\u003cByte, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\r\n    for (final byte v : values) {\r\n        final Byte boxed \u003d Byte.valueOf(v);\r\n        final MutableInt count \u003d occurrences.get(boxed);\r\n        if (count \u003d\u003d null) {\r\n            occurrences.put(boxed, new MutableInt(1));\r\n        } else {\r\n            count.increment();\r\n        }\r\n    }\r\n    final BitSet toRemove \u003d new BitSet();\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        final byte key \u003d array[i];\r\n        final MutableInt count \u003d occurrences.get(key);\r\n        if (count !\u003d null) {\r\n            if (count.decrementAndGet() \u003d\u003d 0) {\r\n                occurrences.remove(key);\r\n            }\r\n            toRemove.set(i);\r\n        }\r\n    }\r\n    return (byte[]) removeAll(array, toRemove);\r\n}",
    "nodes": 17,
    "edges": 22,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i4 \u003e\u003d i3) → B5 | else → B9",
      "B5 : If(r12 !\u003d null) → B6 | else → B7",
      "B10 : If(i6 \u003e\u003d $i1) → B11 | else → B16",
      "B11 : If(r14 \u003d\u003d null) → B12 | else → B15",
      "B12 : If($i2 !\u003d 0) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  r2 :\u003d @parameter1: byte[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d ArrayUtils.isEmpty(r2)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B3 {\n  $r3 \u003d HashMap\n  $i0 \u003d lengthof r2\n  new HashMap($i0)\n  i3 \u003d lengthof r2\n  i4 \u003d 0\n}",
      "B4 {\n  if (i4 \u003e\u003d i3) goto B5 else B9\n}",
      "B5 {\n  b5 \u003d r2[i4]\n  r10 \u003d Byte.valueOf(b5)\n  $r11 \u003d $r3.get(r10)\n  r12 \u003d MutableInt) $r11\n  if (r12 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r13 \u003d MutableInt\n  new MutableInt(1)\n  $r3.put(r10, $r13)\n  goto B8\n}",
      "B7 {\n  r12.increment()\n}",
      "B8 {\n  i4 \u003d i4 + 1\n  goto B4\n}",
      "B9 {\n  $r4 \u003d BitSet\n  new BitSet()\n  i6 \u003d 0\n}",
      "B10 {\n  $i1 \u003d lengthof r0\n  if (i6 \u003e\u003d $i1) goto B11 else B16\n}",
      "B11 {\n  b7 \u003d r0[i6]\n  $r7 \u003d Byte.valueOf(b7)\n  $r8 \u003d $r3.get($r7)\n  r14 \u003d MutableInt) $r8\n  if (r14 \u003d\u003d null) goto B12 else B15\n}",
      "B12 {\n  $i2 \u003d r14.decrementAndGet()\n  if ($i2 !\u003d 0) goto B13 else B14\n}",
      "B13 {\n  $r9 \u003d Byte.valueOf(b7)\n  $r3.remove($r9)\n}",
      "B14 {\n  $r4.set(i6)\n}",
      "B15 {\n  i6 \u003d i6 + 1\n  goto B10\n}",
      "B16 {\n  $r5 \u003d ArrayUtils.removeAll(r0, $r4)\n  $r6 \u003d (byte[]) $r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B4",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B16",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B15 --\u003e B10",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      },
      {
        "name": "ArrayUtils#removeAll(...2)",
        "body": "{\r\n    return (boolean[]) removeAll((Object) array, indices);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "removeElements",
    "signature": "char[] removeElements(char[],char[])",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array) || isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    final HashMap\u003cCharacter, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\r\n    for (final char v : values) {\r\n        final Character boxed \u003d Character.valueOf(v);\r\n        final MutableInt count \u003d occurrences.get(boxed);\r\n        if (count \u003d\u003d null) {\r\n            occurrences.put(boxed, new MutableInt(1));\r\n        } else {\r\n            count.increment();\r\n        }\r\n    }\r\n    final BitSet toRemove \u003d new BitSet();\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        final char key \u003d array[i];\r\n        final MutableInt count \u003d occurrences.get(key);\r\n        if (count !\u003d null) {\r\n            if (count.decrementAndGet() \u003d\u003d 0) {\r\n                occurrences.remove(key);\r\n            }\r\n            toRemove.set(i);\r\n        }\r\n    }\r\n    return (char[]) removeAll(array, toRemove);\r\n}",
    "nodes": 17,
    "edges": 22,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i4 \u003e\u003d i3) → B5 | else → B9",
      "B5 : If(r12 !\u003d null) → B6 | else → B7",
      "B10 : If(i6 \u003e\u003d $i1) → B11 | else → B16",
      "B11 : If(r14 \u003d\u003d null) → B12 | else → B15",
      "B12 : If($i2 !\u003d 0) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  r2 :\u003d @parameter1: char[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d ArrayUtils.isEmpty(r2)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B3 {\n  $r3 \u003d HashMap\n  $i0 \u003d lengthof r2\n  new HashMap($i0)\n  i3 \u003d lengthof r2\n  i4 \u003d 0\n}",
      "B4 {\n  if (i4 \u003e\u003d i3) goto B5 else B9\n}",
      "B5 {\n  c5 \u003d r2[i4]\n  r10 \u003d Character.valueOf(c5)\n  $r11 \u003d $r3.get(r10)\n  r12 \u003d MutableInt) $r11\n  if (r12 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r13 \u003d MutableInt\n  new MutableInt(1)\n  $r3.put(r10, $r13)\n  goto B8\n}",
      "B7 {\n  r12.increment()\n}",
      "B8 {\n  i4 \u003d i4 + 1\n  goto B4\n}",
      "B9 {\n  $r4 \u003d BitSet\n  new BitSet()\n  i6 \u003d 0\n}",
      "B10 {\n  $i1 \u003d lengthof r0\n  if (i6 \u003e\u003d $i1) goto B11 else B16\n}",
      "B11 {\n  c7 \u003d r0[i6]\n  $r7 \u003d Character.valueOf(c7)\n  $r8 \u003d $r3.get($r7)\n  r14 \u003d MutableInt) $r8\n  if (r14 \u003d\u003d null) goto B12 else B15\n}",
      "B12 {\n  $i2 \u003d r14.decrementAndGet()\n  if ($i2 !\u003d 0) goto B13 else B14\n}",
      "B13 {\n  $r9 \u003d Character.valueOf(c7)\n  $r3.remove($r9)\n}",
      "B14 {\n  $r4.set(i6)\n}",
      "B15 {\n  i6 \u003d i6 + 1\n  goto B10\n}",
      "B16 {\n  $r5 \u003d ArrayUtils.removeAll(r0, $r4)\n  $r6 \u003d (char[]) $r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B4",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B16",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B15 --\u003e B10",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      },
      {
        "name": "ArrayUtils#removeAll(...2)",
        "body": "{\r\n    return (boolean[]) removeAll((Object) array, indices);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "removeElements",
    "signature": "double[] removeElements(double[],double[])",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array) || isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    final HashMap\u003cDouble, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\r\n    for (final double v : values) {\r\n        final Double boxed \u003d Double.valueOf(v);\r\n        final MutableInt count \u003d occurrences.get(boxed);\r\n        if (count \u003d\u003d null) {\r\n            occurrences.put(boxed, new MutableInt(1));\r\n        } else {\r\n            count.increment();\r\n        }\r\n    }\r\n    final BitSet toRemove \u003d new BitSet();\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        final double key \u003d array[i];\r\n        final MutableInt count \u003d occurrences.get(key);\r\n        if (count !\u003d null) {\r\n            if (count.decrementAndGet() \u003d\u003d 0) {\r\n                occurrences.remove(key);\r\n            }\r\n            toRemove.set(i);\r\n        }\r\n    }\r\n    return (double[]) removeAll(array, toRemove);\r\n}",
    "nodes": 17,
    "edges": 22,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i4 \u003e\u003d i3) → B5 | else → B9",
      "B5 : If(r13 !\u003d null) → B6 | else → B7",
      "B10 : If(i5 \u003e\u003d $i1) → B11 | else → B16",
      "B11 : If(r9 \u003d\u003d null) → B12 | else → B15",
      "B12 : If($i2 !\u003d 0) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  r2 :\u003d @parameter1: double[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d ArrayUtils.isEmpty(r2)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B3 {\n  $r3 \u003d HashMap\n  $i0 \u003d lengthof r2\n  new HashMap($i0)\n  i3 \u003d lengthof r2\n  i4 \u003d 0\n}",
      "B4 {\n  if (i4 \u003e\u003d i3) goto B5 else B9\n}",
      "B5 {\n  d0 \u003d r2[i4]\n  r11 \u003d Double.valueOf(d0)\n  $r12 \u003d $r3.get(r11)\n  r13 \u003d MutableInt) $r12\n  if (r13 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r14 \u003d MutableInt\n  new MutableInt(1)\n  $r3.put(r11, $r14)\n  goto B8\n}",
      "B7 {\n  r13.increment()\n}",
      "B8 {\n  i4 \u003d i4 + 1\n  goto B4\n}",
      "B9 {\n  $r4 \u003d BitSet\n  new BitSet()\n  i5 \u003d 0\n}",
      "B10 {\n  $i1 \u003d lengthof r0\n  if (i5 \u003e\u003d $i1) goto B11 else B16\n}",
      "B11 {\n  d1 \u003d r0[i5]\n  $r7 \u003d Double.valueOf(d1)\n  $r8 \u003d $r3.get($r7)\n  r9 \u003d MutableInt) $r8\n  if (r9 \u003d\u003d null) goto B12 else B15\n}",
      "B12 {\n  $i2 \u003d r9.decrementAndGet()\n  if ($i2 !\u003d 0) goto B13 else B14\n}",
      "B13 {\n  $r10 \u003d Double.valueOf(d1)\n  $r3.remove($r10)\n}",
      "B14 {\n  $r4.set(i5)\n}",
      "B15 {\n  i5 \u003d i5 + 1\n  goto B10\n}",
      "B16 {\n  $r5 \u003d ArrayUtils.removeAll(r0, $r4)\n  $r6 \u003d (double[]) $r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B4",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B16",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B15 --\u003e B10",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      },
      {
        "name": "ArrayUtils#removeAll(...2)",
        "body": "{\r\n    return (boolean[]) removeAll((Object) array, indices);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "removeElements",
    "signature": "float[] removeElements(float[],float[])",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array) || isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    final HashMap\u003cFloat, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\r\n    for (final float v : values) {\r\n        final Float boxed \u003d Float.valueOf(v);\r\n        final MutableInt count \u003d occurrences.get(boxed);\r\n        if (count \u003d\u003d null) {\r\n            occurrences.put(boxed, new MutableInt(1));\r\n        } else {\r\n            count.increment();\r\n        }\r\n    }\r\n    final BitSet toRemove \u003d new BitSet();\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        final float key \u003d array[i];\r\n        final MutableInt count \u003d occurrences.get(key);\r\n        if (count !\u003d null) {\r\n            if (count.decrementAndGet() \u003d\u003d 0) {\r\n                occurrences.remove(key);\r\n            }\r\n            toRemove.set(i);\r\n        }\r\n    }\r\n    return (float[]) removeAll(array, toRemove);\r\n}",
    "nodes": 17,
    "edges": 22,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i4 \u003e\u003d i3) → B5 | else → B9",
      "B5 : If(r12 !\u003d null) → B6 | else → B7",
      "B10 : If(i5 \u003e\u003d $i1) → B11 | else → B16",
      "B11 : If(r14 \u003d\u003d null) → B12 | else → B15",
      "B12 : If($i2 !\u003d 0) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  r2 :\u003d @parameter1: float[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d ArrayUtils.isEmpty(r2)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B3 {\n  $r3 \u003d HashMap\n  $i0 \u003d lengthof r2\n  new HashMap($i0)\n  i3 \u003d lengthof r2\n  i4 \u003d 0\n}",
      "B4 {\n  if (i4 \u003e\u003d i3) goto B5 else B9\n}",
      "B5 {\n  f0 \u003d r2[i4]\n  r10 \u003d Float.valueOf(f0)\n  $r11 \u003d $r3.get(r10)\n  r12 \u003d MutableInt) $r11\n  if (r12 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r13 \u003d MutableInt\n  new MutableInt(1)\n  $r3.put(r10, $r13)\n  goto B8\n}",
      "B7 {\n  r12.increment()\n}",
      "B8 {\n  i4 \u003d i4 + 1\n  goto B4\n}",
      "B9 {\n  $r4 \u003d BitSet\n  new BitSet()\n  i5 \u003d 0\n}",
      "B10 {\n  $i1 \u003d lengthof r0\n  if (i5 \u003e\u003d $i1) goto B11 else B16\n}",
      "B11 {\n  f1 \u003d r0[i5]\n  $r7 \u003d Float.valueOf(f1)\n  $r8 \u003d $r3.get($r7)\n  r14 \u003d MutableInt) $r8\n  if (r14 \u003d\u003d null) goto B12 else B15\n}",
      "B12 {\n  $i2 \u003d r14.decrementAndGet()\n  if ($i2 !\u003d 0) goto B13 else B14\n}",
      "B13 {\n  $r9 \u003d Float.valueOf(f1)\n  $r3.remove($r9)\n}",
      "B14 {\n  $r4.set(i5)\n}",
      "B15 {\n  i5 \u003d i5 + 1\n  goto B10\n}",
      "B16 {\n  $r5 \u003d ArrayUtils.removeAll(r0, $r4)\n  $r6 \u003d (float[]) $r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B4",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B16",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B15 --\u003e B10",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      },
      {
        "name": "ArrayUtils#removeAll(...2)",
        "body": "{\r\n    return (boolean[]) removeAll((Object) array, indices);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "removeElements",
    "signature": "int[] removeElements(int[],int[])",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array) || isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    final HashMap\u003cInteger, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\r\n    for (final int v : values) {\r\n        final Integer boxed \u003d Integer.valueOf(v);\r\n        final MutableInt count \u003d occurrences.get(boxed);\r\n        if (count \u003d\u003d null) {\r\n            occurrences.put(boxed, new MutableInt(1));\r\n        } else {\r\n            count.increment();\r\n        }\r\n    }\r\n    final BitSet toRemove \u003d new BitSet();\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        final int key \u003d array[i];\r\n        final MutableInt count \u003d occurrences.get(key);\r\n        if (count !\u003d null) {\r\n            if (count.decrementAndGet() \u003d\u003d 0) {\r\n                occurrences.remove(key);\r\n            }\r\n            toRemove.set(i);\r\n        }\r\n    }\r\n    return (int[]) removeAll(array, toRemove);\r\n}",
    "nodes": 17,
    "edges": 22,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i4 \u003e\u003d i3) → B5 | else → B9",
      "B5 : If(r12 !\u003d null) → B6 | else → B7",
      "B10 : If(i6 \u003e\u003d $i1) → B11 | else → B16",
      "B11 : If(r14 \u003d\u003d null) → B12 | else → B15",
      "B12 : If($i2 !\u003d 0) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  r2 :\u003d @parameter1: int[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d ArrayUtils.isEmpty(r2)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B3 {\n  $r3 \u003d HashMap\n  $i0 \u003d lengthof r2\n  new HashMap($i0)\n  i3 \u003d lengthof r2\n  i4 \u003d 0\n}",
      "B4 {\n  if (i4 \u003e\u003d i3) goto B5 else B9\n}",
      "B5 {\n  i5 \u003d r2[i4]\n  r10 \u003d Integer.valueOf(i5)\n  $r11 \u003d $r3.get(r10)\n  r12 \u003d MutableInt) $r11\n  if (r12 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r13 \u003d MutableInt\n  new MutableInt(1)\n  $r3.put(r10, $r13)\n  goto B8\n}",
      "B7 {\n  r12.increment()\n}",
      "B8 {\n  i4 \u003d i4 + 1\n  goto B4\n}",
      "B9 {\n  $r4 \u003d BitSet\n  new BitSet()\n  i6 \u003d 0\n}",
      "B10 {\n  $i1 \u003d lengthof r0\n  if (i6 \u003e\u003d $i1) goto B11 else B16\n}",
      "B11 {\n  i7 \u003d r0[i6]\n  $r7 \u003d Integer.valueOf(i7)\n  $r8 \u003d $r3.get($r7)\n  r14 \u003d MutableInt) $r8\n  if (r14 \u003d\u003d null) goto B12 else B15\n}",
      "B12 {\n  $i2 \u003d r14.decrementAndGet()\n  if ($i2 !\u003d 0) goto B13 else B14\n}",
      "B13 {\n  $r9 \u003d Integer.valueOf(i7)\n  $r3.remove($r9)\n}",
      "B14 {\n  $r4.set(i6)\n}",
      "B15 {\n  i6 \u003d i6 + 1\n  goto B10\n}",
      "B16 {\n  $r5 \u003d ArrayUtils.removeAll(r0, $r4)\n  $r6 \u003d (int[]) $r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B4",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B16",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B15 --\u003e B10",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      },
      {
        "name": "ArrayUtils#removeAll(...2)",
        "body": "{\r\n    return (boolean[]) removeAll((Object) array, indices);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "removeElements",
    "signature": "long[] removeElements(long[],long[])",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array) || isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    final HashMap\u003cLong, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\r\n    for (final long v : values) {\r\n        final Long boxed \u003d Long.valueOf(v);\r\n        final MutableInt count \u003d occurrences.get(boxed);\r\n        if (count \u003d\u003d null) {\r\n            occurrences.put(boxed, new MutableInt(1));\r\n        } else {\r\n            count.increment();\r\n        }\r\n    }\r\n    final BitSet toRemove \u003d new BitSet();\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        final long key \u003d array[i];\r\n        final MutableInt count \u003d occurrences.get(key);\r\n        if (count !\u003d null) {\r\n            if (count.decrementAndGet() \u003d\u003d 0) {\r\n                occurrences.remove(key);\r\n            }\r\n            toRemove.set(i);\r\n        }\r\n    }\r\n    return (long[]) removeAll(array, toRemove);\r\n}",
    "nodes": 17,
    "edges": 22,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i5 \u003e\u003d i4) → B5 | else → B9",
      "B5 : If(r13 !\u003d null) → B6 | else → B7",
      "B10 : If(i6 \u003e\u003d $i1) → B11 | else → B16",
      "B11 : If(r9 \u003d\u003d null) → B12 | else → B15",
      "B12 : If($i2 !\u003d 0) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  r2 :\u003d @parameter1: long[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d ArrayUtils.isEmpty(r2)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B3 {\n  $r3 \u003d HashMap\n  $i0 \u003d lengthof r2\n  new HashMap($i0)\n  i4 \u003d lengthof r2\n  i5 \u003d 0\n}",
      "B4 {\n  if (i5 \u003e\u003d i4) goto B5 else B9\n}",
      "B5 {\n  l3 \u003d r2[i5]\n  r11 \u003d Long.valueOf(l3)\n  $r12 \u003d $r3.get(r11)\n  r13 \u003d MutableInt) $r12\n  if (r13 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r14 \u003d MutableInt\n  new MutableInt(1)\n  $r3.put(r11, $r14)\n  goto B8\n}",
      "B7 {\n  r13.increment()\n}",
      "B8 {\n  i5 \u003d i5 + 1\n  goto B4\n}",
      "B9 {\n  $r4 \u003d BitSet\n  new BitSet()\n  i6 \u003d 0\n}",
      "B10 {\n  $i1 \u003d lengthof r0\n  if (i6 \u003e\u003d $i1) goto B11 else B16\n}",
      "B11 {\n  l7 \u003d r0[i6]\n  $r7 \u003d Long.valueOf(l7)\n  $r8 \u003d $r3.get($r7)\n  r9 \u003d MutableInt) $r8\n  if (r9 \u003d\u003d null) goto B12 else B15\n}",
      "B12 {\n  $i2 \u003d r9.decrementAndGet()\n  if ($i2 !\u003d 0) goto B13 else B14\n}",
      "B13 {\n  $r10 \u003d Long.valueOf(l7)\n  $r3.remove($r10)\n}",
      "B14 {\n  $r4.set(i6)\n}",
      "B15 {\n  i6 \u003d i6 + 1\n  goto B10\n}",
      "B16 {\n  $r5 \u003d ArrayUtils.removeAll(r0, $r4)\n  $r6 \u003d (long[]) $r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B4",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B16",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B15 --\u003e B10",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      },
      {
        "name": "ArrayUtils#removeAll(...2)",
        "body": "{\r\n    return (boolean[]) removeAll((Object) array, indices);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "removeElements",
    "signature": "short[] removeElements(short[],short[])",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array) || isEmpty(values)) {\r\n        return clone(array);\r\n    }\r\n    final HashMap\u003cShort, MutableInt\u003e occurrences \u003d new HashMap\u003c\u003e(values.length);\r\n    for (final short v : values) {\r\n        final Short boxed \u003d Short.valueOf(v);\r\n        final MutableInt count \u003d occurrences.get(boxed);\r\n        if (count \u003d\u003d null) {\r\n            occurrences.put(boxed, new MutableInt(1));\r\n        } else {\r\n            count.increment();\r\n        }\r\n    }\r\n    final BitSet toRemove \u003d new BitSet();\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        final short key \u003d array[i];\r\n        final MutableInt count \u003d occurrences.get(key);\r\n        if (count !\u003d null) {\r\n            if (count.decrementAndGet() \u003d\u003d 0) {\r\n                occurrences.remove(key);\r\n            }\r\n            toRemove.set(i);\r\n        }\r\n    }\r\n    return (short[]) removeAll(array, toRemove);\r\n}",
    "nodes": 17,
    "edges": 22,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i4 \u003e\u003d i3) → B5 | else → B9",
      "B5 : If(r12 !\u003d null) → B6 | else → B7",
      "B10 : If(i6 \u003e\u003d $i1) → B11 | else → B16",
      "B11 : If(r14 \u003d\u003d null) → B12 | else → B15",
      "B12 : If($i2 !\u003d 0) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  r2 :\u003d @parameter1: short[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d ArrayUtils.isEmpty(r2)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B3 {\n  $r3 \u003d HashMap\n  $i0 \u003d lengthof r2\n  new HashMap($i0)\n  i3 \u003d lengthof r2\n  i4 \u003d 0\n}",
      "B4 {\n  if (i4 \u003e\u003d i3) goto B5 else B9\n}",
      "B5 {\n  s5 \u003d r2[i4]\n  r10 \u003d Short.valueOf(s5)\n  $r11 \u003d $r3.get(r10)\n  r12 \u003d MutableInt) $r11\n  if (r12 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r13 \u003d MutableInt\n  new MutableInt(1)\n  $r3.put(r10, $r13)\n  goto B8\n}",
      "B7 {\n  r12.increment()\n}",
      "B8 {\n  i4 \u003d i4 + 1\n  goto B4\n}",
      "B9 {\n  $r4 \u003d BitSet\n  new BitSet()\n  i6 \u003d 0\n}",
      "B10 {\n  $i1 \u003d lengthof r0\n  if (i6 \u003e\u003d $i1) goto B11 else B16\n}",
      "B11 {\n  s7 \u003d r0[i6]\n  $r7 \u003d Short.valueOf(s7)\n  $r8 \u003d $r3.get($r7)\n  r14 \u003d MutableInt) $r8\n  if (r14 \u003d\u003d null) goto B12 else B15\n}",
      "B12 {\n  $i2 \u003d r14.decrementAndGet()\n  if ($i2 !\u003d 0) goto B13 else B14\n}",
      "B13 {\n  $r9 \u003d Short.valueOf(s7)\n  $r3.remove($r9)\n}",
      "B14 {\n  $r4.set(i6)\n}",
      "B15 {\n  i6 \u003d i6 + 1\n  goto B10\n}",
      "B16 {\n  $r5 \u003d ArrayUtils.removeAll(r0, $r4)\n  $r6 \u003d (short[]) $r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B4",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B16",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B15 --\u003e B10",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#clone(...1)",
        "body": "{\r\n    return array !\u003d null ? array.clone() : null;\r\n}"
      },
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      },
      {
        "name": "ArrayUtils#removeAll(...2)",
        "body": "{\r\n    return (boolean[]) removeAll((Object) array, indices);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "removeElements",
    "signature": "java.lang.Object[] removeElements(java.lang.Object[],java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 17,
    "edges": 22,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i4 \u003e\u003d i3) → B5 | else → B9",
      "B5 : If(r8 !\u003d null) → B6 | else → B7",
      "B10 : If(i5 \u003e\u003d $i1) → B11 | else → B16",
      "B11 : If(r12 \u003d\u003d null) → B12 | else → B15",
      "B12 : If($i2 !\u003d 0) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  Object[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d ArrayUtils.isEmpty(r2)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d ArrayUtils.clone(r0)\n  return\n}",
      "B3 {\n  $r3 \u003d HashMap\n  $i0 \u003d lengthof r2\n  new HashMap($i0)\n  i3 \u003d lengthof r2\n  i4 \u003d 0\n}",
      "B4 {\n  if (i4 \u003e\u003d i3) goto B5 else B9\n}",
      "B5 {\n  r10 \u003d r2[i4]\n  $r7 \u003d $r3.get(r10)\n  r8 \u003d MutableInt) $r7\n  if (r8 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r9 \u003d MutableInt\n  new MutableInt(1)\n  $r3.put(r10, $r9)\n  goto B8\n}",
      "B7 {\n  r8.increment()\n}",
      "B8 {\n  i4 \u003d i4 + 1\n  goto B4\n}",
      "B9 {\n  $r4 \u003d BitSet\n  new BitSet()\n  i5 \u003d 0\n}",
      "B10 {\n  $i1 \u003d lengthof r0\n  if (i5 \u003e\u003d $i1) goto B11 else B16\n}",
      "B11 {\n  r11 \u003d r0[i5]\n  $r6 \u003d $r3.get(r11)\n  r12 \u003d MutableInt) $r6\n  if (r12 \u003d\u003d null) goto B12 else B15\n}",
      "B12 {\n  $i2 \u003d r12.decrementAndGet()\n  if ($i2 !\u003d 0) goto B13 else B14\n}",
      "B13 {\n  $r3.remove(r11)\n}",
      "B14 {\n  $r4.set(i5)\n}",
      "B15 {\n  i5 \u003d i5 + 1\n  goto B10\n}",
      "B16 {\n  $r5 \u003d ArrayUtils.removeAll(r0, $r4)\n  r13 \u003d Object[]) $r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B4",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B16",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B15 --\u003e B10",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "reverse",
    "signature": "void reverse(boolean[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return;\r\n    }\r\n    reverse(array, 0, array.length);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  ArrayUtils.reverse(r0, 0, $i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#reverse(...3)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return;\r\n    }\r\n    int i \u003d Math.max(startIndexInclusive, 0);\r\n    int j \u003d Math.min(array.length, endIndexExclusive) - 1;\r\n    boolean tmp;\r\n    while (j \u003e i) {\r\n        tmp \u003d array[j];\r\n        array[j] \u003d array[i];\r\n        array[i] \u003d tmp;\r\n        j--;\r\n        i++;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "reverse",
    "signature": "void reverse(boolean[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return;\r\n    }\r\n    int i \u003d Math.max(startIndexInclusive, 0);\r\n    int j \u003d Math.min(array.length, endIndexExclusive) - 1;\r\n    boolean tmp;\r\n    while (j \u003e i) {\r\n        tmp \u003d array[j];\r\n        array[j] \u003d array[i];\r\n        array[i] \u003d tmp;\r\n        j--;\r\n        i++;\r\n    }\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i5 \u003c\u003d i4) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i4 \u003d Math.max(i0, 0)\n  $i2 \u003d lengthof r0\n  $i3 \u003d Math.min($i2, i1)\n  i5 \u003d $i3 - 1\n}",
      "B3 {\n  if (i5 \u003c\u003d i4) goto B4 else B5\n}",
      "B4 {\n  z0 \u003d r0[i5]\n  $z1 \u003d r0[i4]\n  r0[i5] \u003d $z1\n  r0[i4] \u003d z0\n  $i7 \u003d (int) -1\n  i5 \u003d i5 + $i7\n  i4 \u003d i4 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "reverse",
    "signature": "void reverse(byte[])",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        reverse(array, 0, array.length);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  ArrayUtils.reverse(r0, 0, $i0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#reverse(...3)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return;\r\n    }\r\n    int i \u003d Math.max(startIndexInclusive, 0);\r\n    int j \u003d Math.min(array.length, endIndexExclusive) - 1;\r\n    boolean tmp;\r\n    while (j \u003e i) {\r\n        tmp \u003d array[j];\r\n        array[j] \u003d array[i];\r\n        array[i] \u003d tmp;\r\n        j--;\r\n        i++;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "reverse",
    "signature": "void reverse(byte[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return;\r\n    }\r\n    int i \u003d Math.max(startIndexInclusive, 0);\r\n    int j \u003d Math.min(array.length, endIndexExclusive) - 1;\r\n    byte tmp;\r\n    while (j \u003e i) {\r\n        tmp \u003d array[j];\r\n        array[j] \u003d array[i];\r\n        array[i] \u003d tmp;\r\n        j--;\r\n        i++;\r\n    }\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i7 \u003c\u003d i6) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i6 \u003d Math.max(i0, 0)\n  $i2 \u003d lengthof r0\n  $i3 \u003d Math.min($i2, i1)\n  i7 \u003d $i3 - 1\n}",
      "B3 {\n  if (i7 \u003c\u003d i6) goto B4 else B5\n}",
      "B4 {\n  b4 \u003d r0[i7]\n  $b5 \u003d r0[i6]\n  r0[i7] \u003d $b5\n  r0[i6] \u003d b4\n  $i9 \u003d (int) -1\n  i7 \u003d i7 + $i9\n  i6 \u003d i6 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "reverse",
    "signature": "void reverse(char[])",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        reverse(array, 0, array.length);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  ArrayUtils.reverse(r0, 0, $i0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#reverse(...3)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return;\r\n    }\r\n    int i \u003d Math.max(startIndexInclusive, 0);\r\n    int j \u003d Math.min(array.length, endIndexExclusive) - 1;\r\n    boolean tmp;\r\n    while (j \u003e i) {\r\n        tmp \u003d array[j];\r\n        array[j] \u003d array[i];\r\n        array[i] \u003d tmp;\r\n        j--;\r\n        i++;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "reverse",
    "signature": "void reverse(char[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return;\r\n    }\r\n    int i \u003d Math.max(startIndexInclusive, 0);\r\n    int j \u003d Math.min(array.length, endIndexExclusive) - 1;\r\n    char tmp;\r\n    while (j \u003e i) {\r\n        tmp \u003d array[j];\r\n        array[j] \u003d array[i];\r\n        array[i] \u003d tmp;\r\n        j--;\r\n        i++;\r\n    }\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i7 \u003c\u003d i6) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i6 \u003d Math.max(i0, 0)\n  $i2 \u003d lengthof r0\n  $i3 \u003d Math.min($i2, i1)\n  i7 \u003d $i3 - 1\n}",
      "B3 {\n  if (i7 \u003c\u003d i6) goto B4 else B5\n}",
      "B4 {\n  c4 \u003d r0[i7]\n  $c5 \u003d r0[i6]\n  r0[i7] \u003d $c5\n  r0[i6] \u003d c4\n  $i9 \u003d (int) -1\n  i7 \u003d i7 + $i9\n  i6 \u003d i6 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "reverse",
    "signature": "void reverse(double[])",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        reverse(array, 0, array.length);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  ArrayUtils.reverse(r0, 0, $i0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#reverse(...3)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return;\r\n    }\r\n    int i \u003d Math.max(startIndexInclusive, 0);\r\n    int j \u003d Math.min(array.length, endIndexExclusive) - 1;\r\n    boolean tmp;\r\n    while (j \u003e i) {\r\n        tmp \u003d array[j];\r\n        array[j] \u003d array[i];\r\n        array[i] \u003d tmp;\r\n        j--;\r\n        i++;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "reverse",
    "signature": "void reverse(double[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return;\r\n    }\r\n    int i \u003d Math.max(startIndexInclusive, 0);\r\n    int j \u003d Math.min(array.length, endIndexExclusive) - 1;\r\n    double tmp;\r\n    while (j \u003e i) {\r\n        tmp \u003d array[j];\r\n        array[j] \u003d array[i];\r\n        array[i] \u003d tmp;\r\n        j--;\r\n        i++;\r\n    }\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i5 \u003c\u003d i4) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i4 \u003d Math.max(i0, 0)\n  $i2 \u003d lengthof r0\n  $i3 \u003d Math.min($i2, i1)\n  i5 \u003d $i3 - 1\n}",
      "B3 {\n  if (i5 \u003c\u003d i4) goto B4 else B5\n}",
      "B4 {\n  d0 \u003d r0[i5]\n  $d1 \u003d r0[i4]\n  r0[i5] \u003d $d1\n  r0[i4] \u003d d0\n  $i7 \u003d (int) -1\n  i5 \u003d i5 + $i7\n  i4 \u003d i4 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "reverse",
    "signature": "void reverse(float[])",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        reverse(array, 0, array.length);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  ArrayUtils.reverse(r0, 0, $i0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#reverse(...3)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return;\r\n    }\r\n    int i \u003d Math.max(startIndexInclusive, 0);\r\n    int j \u003d Math.min(array.length, endIndexExclusive) - 1;\r\n    boolean tmp;\r\n    while (j \u003e i) {\r\n        tmp \u003d array[j];\r\n        array[j] \u003d array[i];\r\n        array[i] \u003d tmp;\r\n        j--;\r\n        i++;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "reverse",
    "signature": "void reverse(float[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return;\r\n    }\r\n    int i \u003d Math.max(startIndexInclusive, 0);\r\n    int j \u003d Math.min(array.length, endIndexExclusive) - 1;\r\n    float tmp;\r\n    while (j \u003e i) {\r\n        tmp \u003d array[j];\r\n        array[j] \u003d array[i];\r\n        array[i] \u003d tmp;\r\n        j--;\r\n        i++;\r\n    }\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i5 \u003c\u003d i4) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i4 \u003d Math.max(i0, 0)\n  $i2 \u003d lengthof r0\n  $i3 \u003d Math.min($i2, i1)\n  i5 \u003d $i3 - 1\n}",
      "B3 {\n  if (i5 \u003c\u003d i4) goto B4 else B5\n}",
      "B4 {\n  f0 \u003d r0[i5]\n  $f1 \u003d r0[i4]\n  r0[i5] \u003d $f1\n  r0[i4] \u003d f0\n  $i7 \u003d (int) -1\n  i5 \u003d i5 + $i7\n  i4 \u003d i4 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "reverse",
    "signature": "void reverse(int[])",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        reverse(array, 0, array.length);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  ArrayUtils.reverse(r0, 0, $i0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#reverse(...3)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return;\r\n    }\r\n    int i \u003d Math.max(startIndexInclusive, 0);\r\n    int j \u003d Math.min(array.length, endIndexExclusive) - 1;\r\n    boolean tmp;\r\n    while (j \u003e i) {\r\n        tmp \u003d array[j];\r\n        array[j] \u003d array[i];\r\n        array[i] \u003d tmp;\r\n        j--;\r\n        i++;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "reverse",
    "signature": "void reverse(int[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return;\r\n    }\r\n    int i \u003d Math.max(startIndexInclusive, 0);\r\n    int j \u003d Math.min(array.length, endIndexExclusive) - 1;\r\n    int tmp;\r\n    while (j \u003e i) {\r\n        tmp \u003d array[j];\r\n        array[j] \u003d array[i];\r\n        array[i] \u003d tmp;\r\n        j--;\r\n        i++;\r\n    }\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i7 \u003c\u003d i6) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i6 \u003d Math.max(i0, 0)\n  $i2 \u003d lengthof r0\n  $i3 \u003d Math.min($i2, i1)\n  i7 \u003d $i3 - 1\n}",
      "B3 {\n  if (i7 \u003c\u003d i6) goto B4 else B5\n}",
      "B4 {\n  i4 \u003d r0[i7]\n  $i5 \u003d r0[i6]\n  r0[i7] \u003d $i5\n  r0[i6] \u003d i4\n  $i9 \u003d (int) -1\n  i7 \u003d i7 + $i9\n  i6 \u003d i6 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "reverse",
    "signature": "void reverse(long[])",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        reverse(array, 0, array.length);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  ArrayUtils.reverse(r0, 0, $i0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#reverse(...3)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return;\r\n    }\r\n    int i \u003d Math.max(startIndexInclusive, 0);\r\n    int j \u003d Math.min(array.length, endIndexExclusive) - 1;\r\n    boolean tmp;\r\n    while (j \u003e i) {\r\n        tmp \u003d array[j];\r\n        array[j] \u003d array[i];\r\n        array[i] \u003d tmp;\r\n        j--;\r\n        i++;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "reverse",
    "signature": "void reverse(long[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return;\r\n    }\r\n    int i \u003d Math.max(startIndexInclusive, 0);\r\n    int j \u003d Math.min(array.length, endIndexExclusive) - 1;\r\n    long tmp;\r\n    while (j \u003e i) {\r\n        tmp \u003d array[j];\r\n        array[j] \u003d array[i];\r\n        array[i] \u003d tmp;\r\n        j--;\r\n        i++;\r\n    }\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i7 \u003c\u003d i6) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i6 \u003d Math.max(i0, 0)\n  $i2 \u003d lengthof r0\n  $i3 \u003d Math.min($i2, i1)\n  i7 \u003d $i3 - 1\n}",
      "B3 {\n  if (i7 \u003c\u003d i6) goto B4 else B5\n}",
      "B4 {\n  l4 \u003d r0[i7]\n  $l5 \u003d r0[i6]\n  r0[i7] \u003d $l5\n  r0[i6] \u003d l4\n  $i9 \u003d (int) -1\n  i7 \u003d i7 + $i9\n  i6 \u003d i6 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "reverse",
    "signature": "void reverse(java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        reverse(array, 0, array.length);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  ArrayUtils.reverse(r0, 0, $i0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#reverse(...3)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return;\r\n    }\r\n    int i \u003d Math.max(startIndexInclusive, 0);\r\n    int j \u003d Math.min(array.length, endIndexExclusive) - 1;\r\n    boolean tmp;\r\n    while (j \u003e i) {\r\n        tmp \u003d array[j];\r\n        array[j] \u003d array[i];\r\n        array[i] \u003d tmp;\r\n        j--;\r\n        i++;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "reverse",
    "signature": "void reverse(java.lang.Object[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return;\r\n    }\r\n    int i \u003d Math.max(startIndexInclusive, 0);\r\n    int j \u003d Math.min(array.length, endIndexExclusive) - 1;\r\n    Object tmp;\r\n    while (j \u003e i) {\r\n        tmp \u003d array[j];\r\n        array[j] \u003d array[i];\r\n        array[i] \u003d tmp;\r\n        j--;\r\n        i++;\r\n    }\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i5 \u003c\u003d i4) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i4 \u003d Math.max(i0, 0)\n  $i2 \u003d lengthof r0\n  $i3 \u003d Math.min($i2, i1)\n  i5 \u003d $i3 - 1\n}",
      "B3 {\n  if (i5 \u003c\u003d i4) goto B4 else B5\n}",
      "B4 {\n  r1 \u003d r0[i5]\n  $r2 \u003d r0[i4]\n  r0[i5] \u003d $r2\n  r0[i4] \u003d r1\n  $i7 \u003d (int) -1\n  i5 \u003d i5 + $i7\n  i4 \u003d i4 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "reverse",
    "signature": "void reverse(short[])",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        reverse(array, 0, array.length);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  ArrayUtils.reverse(r0, 0, $i0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#reverse(...3)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return;\r\n    }\r\n    int i \u003d Math.max(startIndexInclusive, 0);\r\n    int j \u003d Math.min(array.length, endIndexExclusive) - 1;\r\n    boolean tmp;\r\n    while (j \u003e i) {\r\n        tmp \u003d array[j];\r\n        array[j] \u003d array[i];\r\n        array[i] \u003d tmp;\r\n        j--;\r\n        i++;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "reverse",
    "signature": "void reverse(short[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return;\r\n    }\r\n    int i \u003d Math.max(startIndexInclusive, 0);\r\n    int j \u003d Math.min(array.length, endIndexExclusive) - 1;\r\n    short tmp;\r\n    while (j \u003e i) {\r\n        tmp \u003d array[j];\r\n        array[j] \u003d array[i];\r\n        array[i] \u003d tmp;\r\n        j--;\r\n        i++;\r\n    }\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i7 \u003c\u003d i6) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i6 \u003d Math.max(i0, 0)\n  $i2 \u003d lengthof r0\n  $i3 \u003d Math.min($i2, i1)\n  i7 \u003d $i3 - 1\n}",
      "B3 {\n  if (i7 \u003c\u003d i6) goto B4 else B5\n}",
      "B4 {\n  s4 \u003d r0[i7]\n  $s5 \u003d r0[i6]\n  r0[i7] \u003d $s5\n  r0[i6] \u003d s4\n  $i9 \u003d (int) -1\n  i7 \u003d i7 + $i9\n  i6 \u003d i6 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "setAll",
    "signature": "java.lang.Object[] setAll(java.lang.Object[],java.util.function.IntFunction)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r1 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  IntFunction\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  if (r1 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  Arrays.setAll(r0, r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "setAll",
    "signature": "java.lang.Object[] setAll(java.lang.Object[],java.util.function.Supplier)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B5",
      "B1 : If(r1 \u003d\u003d null) → B2 | else → B5",
      "B3 : If(i1 \u003e\u003d $i0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  Supplier\n  if (r0 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  if (r1 \u003d\u003d null) goto B2 else B5\n}",
      "B2 {\n  i1 \u003d 0\n}",
      "B3 {\n  $i0 \u003d lengthof r0\n  if (i1 \u003e\u003d $i0) goto B4 else B5\n}",
      "B4 {\n  $r2 \u003d r1.get()\n  r0[i1] \u003d $r2\n  i1 \u003d i1 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shift",
    "signature": "void shift(boolean[],int)",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        shift(array, 0, array.length, offset);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  i0 :\u003d @parameter1: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d lengthof r0\n  ArrayUtils.shift(r0, 0, $i1, i0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#shift(...4)",
        "body": "{\r\n    if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\r\n        return;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    int n \u003d endIndexExclusive - startIndexInclusive;\r\n    if (n \u003c\u003d 1) {\r\n        return;\r\n    }\r\n    offset %\u003d n;\r\n    if (offset \u003c 0) {\r\n        offset +\u003d n;\r\n    }\r\n    // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\r\n    // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\r\n    while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\r\n        final int nOffset \u003d n - offset;\r\n        if (offset \u003e nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + n - nOffset, nOffset);\r\n            n \u003d offset;\r\n            offset -\u003d nOffset;\r\n        } else if (offset \u003c nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            startIndexInclusive +\u003d offset;\r\n            n \u003d nOffset;\r\n        } else {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            break;\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shift",
    "signature": "void shift(boolean[],int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\r\n        return;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    int n \u003d endIndexExclusive - startIndexInclusive;\r\n    if (n \u003c\u003d 1) {\r\n        return;\r\n    }\r\n    offset %\u003d n;\r\n    if (offset \u003c 0) {\r\n        offset +\u003d n;\r\n    }\r\n    // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\r\n    // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\r\n    while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\r\n        final int nOffset \u003d n - offset;\r\n        if (offset \u003e nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + n - nOffset, nOffset);\r\n            n \u003d offset;\r\n            offset -\u003d nOffset;\r\n        } else if (offset \u003c nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            startIndexInclusive +\u003d offset;\r\n            n \u003d nOffset;\r\n        } else {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            break;\r\n        }\r\n    }\r\n}",
    "nodes": 17,
    "edges": 23,
    "cc": 8,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(i8 \u003e\u003d $i1) → B2 | else → B3",
      "B2 : If(i9 \u003e 0) → B3 | else → B4",
      "B4 : If(i13 \u003e 1) → B5 | else → B6",
      "B6 : If(i14 \u003e\u003d 0) → B7 | else → B8",
      "B8 : If(i13 \u003c\u003d 1) → B9 | else → B16",
      "B9 : If(i14 \u003c\u003d 0) → B10 | else → B16",
      "B10 : If(i14 \u003c\u003d i3) → B11 | else → B12",
      "B12 : If(i14 \u003e\u003d i3) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  i8 :\u003d @parameter1: int\n  i9 :\u003d @parameter2: int\n  i10 :\u003d @parameter3: int\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  $i1 \u003d $i0 - 1\n  if (i8 \u003e\u003d $i1) goto B2 else B3\n}",
      "B2 {\n  if (i9 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i11 \u003d ArrayUtils.max0(i8)\n  $i2 \u003d lengthof r0\n  i12 \u003d Math.min(i9, $i2)\n  i13 \u003d i12 - i11\n  if (i13 \u003e 1) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i14 \u003d i10 % i13\n  if (i14 \u003e\u003d 0) goto B7 else B8\n}",
      "B7 {\n  i14 \u003d i14 + i13\n}",
      "B8 {\n  if (i13 \u003c\u003d 1) goto B9 else B16\n}",
      "B9 {\n  if (i14 \u003c\u003d 0) goto B10 else B16\n}",
      "B10 {\n  i3 \u003d i13 - i14\n  if (i14 \u003c\u003d i3) goto B11 else B12\n}",
      "B11 {\n  $i6 \u003d i11 + i13\n  $i7 \u003d $i6 - i3\n  ArrayUtils.swap(r0, i11, $i7, i3)\n  i13 \u003d i14\n  i14 \u003d i14 - i3\n  goto B15\n}",
      "B12 {\n  if (i14 \u003e\u003d i3) goto B13 else B14\n}",
      "B13 {\n  $i5 \u003d i11 + i3\n  ArrayUtils.swap(r0, i11, $i5, i14)\n  i11 \u003d i11 + i14\n  i13 \u003d i3\n  goto B15\n}",
      "B14 {\n  $i4 \u003d i11 + i3\n  ArrayUtils.swap(r0, i11, $i4, i14)\n  goto B16\n}",
      "B15 {\n  goto B8\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B16",
      "B9 --\u003e B10",
      "B9 --\u003e B16",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B8",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      },
      {
        "name": "ArrayUtils#swap(...4)",
        "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final boolean aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shift",
    "signature": "void shift(byte[],int)",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        shift(array, 0, array.length, offset);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  i0 :\u003d @parameter1: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d lengthof r0\n  ArrayUtils.shift(r0, 0, $i1, i0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#shift(...4)",
        "body": "{\r\n    if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\r\n        return;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    int n \u003d endIndexExclusive - startIndexInclusive;\r\n    if (n \u003c\u003d 1) {\r\n        return;\r\n    }\r\n    offset %\u003d n;\r\n    if (offset \u003c 0) {\r\n        offset +\u003d n;\r\n    }\r\n    // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\r\n    // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\r\n    while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\r\n        final int nOffset \u003d n - offset;\r\n        if (offset \u003e nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + n - nOffset, nOffset);\r\n            n \u003d offset;\r\n            offset -\u003d nOffset;\r\n        } else if (offset \u003c nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            startIndexInclusive +\u003d offset;\r\n            n \u003d nOffset;\r\n        } else {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            break;\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shift",
    "signature": "void shift(byte[],int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\r\n        return;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    int n \u003d endIndexExclusive - startIndexInclusive;\r\n    if (n \u003c\u003d 1) {\r\n        return;\r\n    }\r\n    offset %\u003d n;\r\n    if (offset \u003c 0) {\r\n        offset +\u003d n;\r\n    }\r\n    // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\r\n    // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\r\n    while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\r\n        final int nOffset \u003d n - offset;\r\n        if (offset \u003e nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + n - nOffset, nOffset);\r\n            n \u003d offset;\r\n            offset -\u003d nOffset;\r\n        } else if (offset \u003c nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            startIndexInclusive +\u003d offset;\r\n            n \u003d nOffset;\r\n        } else {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            break;\r\n        }\r\n    }\r\n}",
    "nodes": 17,
    "edges": 23,
    "cc": 8,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(i8 \u003e\u003d $i1) → B2 | else → B3",
      "B2 : If(i9 \u003e 0) → B3 | else → B4",
      "B4 : If(i13 \u003e 1) → B5 | else → B6",
      "B6 : If(i14 \u003e\u003d 0) → B7 | else → B8",
      "B8 : If(i13 \u003c\u003d 1) → B9 | else → B16",
      "B9 : If(i14 \u003c\u003d 0) → B10 | else → B16",
      "B10 : If(i14 \u003c\u003d i3) → B11 | else → B12",
      "B12 : If(i14 \u003e\u003d i3) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  i8 :\u003d @parameter1: int\n  i9 :\u003d @parameter2: int\n  i10 :\u003d @parameter3: int\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  $i1 \u003d $i0 - 1\n  if (i8 \u003e\u003d $i1) goto B2 else B3\n}",
      "B2 {\n  if (i9 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i11 \u003d ArrayUtils.max0(i8)\n  $i2 \u003d lengthof r0\n  i12 \u003d Math.min(i9, $i2)\n  i13 \u003d i12 - i11\n  if (i13 \u003e 1) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i14 \u003d i10 % i13\n  if (i14 \u003e\u003d 0) goto B7 else B8\n}",
      "B7 {\n  i14 \u003d i14 + i13\n}",
      "B8 {\n  if (i13 \u003c\u003d 1) goto B9 else B16\n}",
      "B9 {\n  if (i14 \u003c\u003d 0) goto B10 else B16\n}",
      "B10 {\n  i3 \u003d i13 - i14\n  if (i14 \u003c\u003d i3) goto B11 else B12\n}",
      "B11 {\n  $i6 \u003d i11 + i13\n  $i7 \u003d $i6 - i3\n  ArrayUtils.swap(r0, i11, $i7, i3)\n  i13 \u003d i14\n  i14 \u003d i14 - i3\n  goto B15\n}",
      "B12 {\n  if (i14 \u003e\u003d i3) goto B13 else B14\n}",
      "B13 {\n  $i5 \u003d i11 + i3\n  ArrayUtils.swap(r0, i11, $i5, i14)\n  i11 \u003d i11 + i14\n  i13 \u003d i3\n  goto B15\n}",
      "B14 {\n  $i4 \u003d i11 + i3\n  ArrayUtils.swap(r0, i11, $i4, i14)\n  goto B16\n}",
      "B15 {\n  goto B8\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B16",
      "B9 --\u003e B10",
      "B9 --\u003e B16",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B8",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      },
      {
        "name": "ArrayUtils#swap(...4)",
        "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final boolean aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shift",
    "signature": "void shift(char[],int)",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        shift(array, 0, array.length, offset);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  i0 :\u003d @parameter1: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d lengthof r0\n  ArrayUtils.shift(r0, 0, $i1, i0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#shift(...4)",
        "body": "{\r\n    if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\r\n        return;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    int n \u003d endIndexExclusive - startIndexInclusive;\r\n    if (n \u003c\u003d 1) {\r\n        return;\r\n    }\r\n    offset %\u003d n;\r\n    if (offset \u003c 0) {\r\n        offset +\u003d n;\r\n    }\r\n    // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\r\n    // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\r\n    while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\r\n        final int nOffset \u003d n - offset;\r\n        if (offset \u003e nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + n - nOffset, nOffset);\r\n            n \u003d offset;\r\n            offset -\u003d nOffset;\r\n        } else if (offset \u003c nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            startIndexInclusive +\u003d offset;\r\n            n \u003d nOffset;\r\n        } else {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            break;\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shift",
    "signature": "void shift(char[],int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\r\n        return;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    int n \u003d endIndexExclusive - startIndexInclusive;\r\n    if (n \u003c\u003d 1) {\r\n        return;\r\n    }\r\n    offset %\u003d n;\r\n    if (offset \u003c 0) {\r\n        offset +\u003d n;\r\n    }\r\n    // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\r\n    // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\r\n    while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\r\n        final int nOffset \u003d n - offset;\r\n        if (offset \u003e nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + n - nOffset, nOffset);\r\n            n \u003d offset;\r\n            offset -\u003d nOffset;\r\n        } else if (offset \u003c nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            startIndexInclusive +\u003d offset;\r\n            n \u003d nOffset;\r\n        } else {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            break;\r\n        }\r\n    }\r\n}",
    "nodes": 17,
    "edges": 23,
    "cc": 8,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(i8 \u003e\u003d $i1) → B2 | else → B3",
      "B2 : If(i9 \u003e 0) → B3 | else → B4",
      "B4 : If(i13 \u003e 1) → B5 | else → B6",
      "B6 : If(i14 \u003e\u003d 0) → B7 | else → B8",
      "B8 : If(i13 \u003c\u003d 1) → B9 | else → B16",
      "B9 : If(i14 \u003c\u003d 0) → B10 | else → B16",
      "B10 : If(i14 \u003c\u003d i3) → B11 | else → B12",
      "B12 : If(i14 \u003e\u003d i3) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  i8 :\u003d @parameter1: int\n  i9 :\u003d @parameter2: int\n  i10 :\u003d @parameter3: int\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  $i1 \u003d $i0 - 1\n  if (i8 \u003e\u003d $i1) goto B2 else B3\n}",
      "B2 {\n  if (i9 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i11 \u003d ArrayUtils.max0(i8)\n  $i2 \u003d lengthof r0\n  i12 \u003d Math.min(i9, $i2)\n  i13 \u003d i12 - i11\n  if (i13 \u003e 1) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i14 \u003d i10 % i13\n  if (i14 \u003e\u003d 0) goto B7 else B8\n}",
      "B7 {\n  i14 \u003d i14 + i13\n}",
      "B8 {\n  if (i13 \u003c\u003d 1) goto B9 else B16\n}",
      "B9 {\n  if (i14 \u003c\u003d 0) goto B10 else B16\n}",
      "B10 {\n  i3 \u003d i13 - i14\n  if (i14 \u003c\u003d i3) goto B11 else B12\n}",
      "B11 {\n  $i6 \u003d i11 + i13\n  $i7 \u003d $i6 - i3\n  ArrayUtils.swap(r0, i11, $i7, i3)\n  i13 \u003d i14\n  i14 \u003d i14 - i3\n  goto B15\n}",
      "B12 {\n  if (i14 \u003e\u003d i3) goto B13 else B14\n}",
      "B13 {\n  $i5 \u003d i11 + i3\n  ArrayUtils.swap(r0, i11, $i5, i14)\n  i11 \u003d i11 + i14\n  i13 \u003d i3\n  goto B15\n}",
      "B14 {\n  $i4 \u003d i11 + i3\n  ArrayUtils.swap(r0, i11, $i4, i14)\n  goto B16\n}",
      "B15 {\n  goto B8\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B16",
      "B9 --\u003e B10",
      "B9 --\u003e B16",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B8",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      },
      {
        "name": "ArrayUtils#swap(...4)",
        "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final boolean aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shift",
    "signature": "void shift(double[],int)",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        shift(array, 0, array.length, offset);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  i0 :\u003d @parameter1: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d lengthof r0\n  ArrayUtils.shift(r0, 0, $i1, i0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#shift(...4)",
        "body": "{\r\n    if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\r\n        return;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    int n \u003d endIndexExclusive - startIndexInclusive;\r\n    if (n \u003c\u003d 1) {\r\n        return;\r\n    }\r\n    offset %\u003d n;\r\n    if (offset \u003c 0) {\r\n        offset +\u003d n;\r\n    }\r\n    // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\r\n    // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\r\n    while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\r\n        final int nOffset \u003d n - offset;\r\n        if (offset \u003e nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + n - nOffset, nOffset);\r\n            n \u003d offset;\r\n            offset -\u003d nOffset;\r\n        } else if (offset \u003c nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            startIndexInclusive +\u003d offset;\r\n            n \u003d nOffset;\r\n        } else {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            break;\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shift",
    "signature": "void shift(double[],int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\r\n        return;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    int n \u003d endIndexExclusive - startIndexInclusive;\r\n    if (n \u003c\u003d 1) {\r\n        return;\r\n    }\r\n    offset %\u003d n;\r\n    if (offset \u003c 0) {\r\n        offset +\u003d n;\r\n    }\r\n    // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\r\n    // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\r\n    while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\r\n        final int nOffset \u003d n - offset;\r\n        if (offset \u003e nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + n - nOffset, nOffset);\r\n            n \u003d offset;\r\n            offset -\u003d nOffset;\r\n        } else if (offset \u003c nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            startIndexInclusive +\u003d offset;\r\n            n \u003d nOffset;\r\n        } else {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            break;\r\n        }\r\n    }\r\n}",
    "nodes": 17,
    "edges": 23,
    "cc": 8,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(i8 \u003e\u003d $i1) → B2 | else → B3",
      "B2 : If(i9 \u003e 0) → B3 | else → B4",
      "B4 : If(i13 \u003e 1) → B5 | else → B6",
      "B6 : If(i14 \u003e\u003d 0) → B7 | else → B8",
      "B8 : If(i13 \u003c\u003d 1) → B9 | else → B16",
      "B9 : If(i14 \u003c\u003d 0) → B10 | else → B16",
      "B10 : If(i14 \u003c\u003d i3) → B11 | else → B12",
      "B12 : If(i14 \u003e\u003d i3) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  i8 :\u003d @parameter1: int\n  i9 :\u003d @parameter2: int\n  i10 :\u003d @parameter3: int\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  $i1 \u003d $i0 - 1\n  if (i8 \u003e\u003d $i1) goto B2 else B3\n}",
      "B2 {\n  if (i9 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i11 \u003d ArrayUtils.max0(i8)\n  $i2 \u003d lengthof r0\n  i12 \u003d Math.min(i9, $i2)\n  i13 \u003d i12 - i11\n  if (i13 \u003e 1) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i14 \u003d i10 % i13\n  if (i14 \u003e\u003d 0) goto B7 else B8\n}",
      "B7 {\n  i14 \u003d i14 + i13\n}",
      "B8 {\n  if (i13 \u003c\u003d 1) goto B9 else B16\n}",
      "B9 {\n  if (i14 \u003c\u003d 0) goto B10 else B16\n}",
      "B10 {\n  i3 \u003d i13 - i14\n  if (i14 \u003c\u003d i3) goto B11 else B12\n}",
      "B11 {\n  $i6 \u003d i11 + i13\n  $i7 \u003d $i6 - i3\n  ArrayUtils.swap(r0, i11, $i7, i3)\n  i13 \u003d i14\n  i14 \u003d i14 - i3\n  goto B15\n}",
      "B12 {\n  if (i14 \u003e\u003d i3) goto B13 else B14\n}",
      "B13 {\n  $i5 \u003d i11 + i3\n  ArrayUtils.swap(r0, i11, $i5, i14)\n  i11 \u003d i11 + i14\n  i13 \u003d i3\n  goto B15\n}",
      "B14 {\n  $i4 \u003d i11 + i3\n  ArrayUtils.swap(r0, i11, $i4, i14)\n  goto B16\n}",
      "B15 {\n  goto B8\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B16",
      "B9 --\u003e B10",
      "B9 --\u003e B16",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B8",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      },
      {
        "name": "ArrayUtils#swap(...4)",
        "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final boolean aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shift",
    "signature": "void shift(float[],int)",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        shift(array, 0, array.length, offset);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  i0 :\u003d @parameter1: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d lengthof r0\n  ArrayUtils.shift(r0, 0, $i1, i0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#shift(...4)",
        "body": "{\r\n    if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\r\n        return;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    int n \u003d endIndexExclusive - startIndexInclusive;\r\n    if (n \u003c\u003d 1) {\r\n        return;\r\n    }\r\n    offset %\u003d n;\r\n    if (offset \u003c 0) {\r\n        offset +\u003d n;\r\n    }\r\n    // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\r\n    // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\r\n    while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\r\n        final int nOffset \u003d n - offset;\r\n        if (offset \u003e nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + n - nOffset, nOffset);\r\n            n \u003d offset;\r\n            offset -\u003d nOffset;\r\n        } else if (offset \u003c nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            startIndexInclusive +\u003d offset;\r\n            n \u003d nOffset;\r\n        } else {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            break;\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shift",
    "signature": "void shift(float[],int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\r\n        return;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    int n \u003d endIndexExclusive - startIndexInclusive;\r\n    if (n \u003c\u003d 1) {\r\n        return;\r\n    }\r\n    offset %\u003d n;\r\n    if (offset \u003c 0) {\r\n        offset +\u003d n;\r\n    }\r\n    // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\r\n    // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\r\n    while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\r\n        final int nOffset \u003d n - offset;\r\n        if (offset \u003e nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + n - nOffset, nOffset);\r\n            n \u003d offset;\r\n            offset -\u003d nOffset;\r\n        } else if (offset \u003c nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            startIndexInclusive +\u003d offset;\r\n            n \u003d nOffset;\r\n        } else {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            break;\r\n        }\r\n    }\r\n}",
    "nodes": 17,
    "edges": 23,
    "cc": 8,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(i8 \u003e\u003d $i1) → B2 | else → B3",
      "B2 : If(i9 \u003e 0) → B3 | else → B4",
      "B4 : If(i13 \u003e 1) → B5 | else → B6",
      "B6 : If(i14 \u003e\u003d 0) → B7 | else → B8",
      "B8 : If(i13 \u003c\u003d 1) → B9 | else → B16",
      "B9 : If(i14 \u003c\u003d 0) → B10 | else → B16",
      "B10 : If(i14 \u003c\u003d i3) → B11 | else → B12",
      "B12 : If(i14 \u003e\u003d i3) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  i8 :\u003d @parameter1: int\n  i9 :\u003d @parameter2: int\n  i10 :\u003d @parameter3: int\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  $i1 \u003d $i0 - 1\n  if (i8 \u003e\u003d $i1) goto B2 else B3\n}",
      "B2 {\n  if (i9 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i11 \u003d ArrayUtils.max0(i8)\n  $i2 \u003d lengthof r0\n  i12 \u003d Math.min(i9, $i2)\n  i13 \u003d i12 - i11\n  if (i13 \u003e 1) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i14 \u003d i10 % i13\n  if (i14 \u003e\u003d 0) goto B7 else B8\n}",
      "B7 {\n  i14 \u003d i14 + i13\n}",
      "B8 {\n  if (i13 \u003c\u003d 1) goto B9 else B16\n}",
      "B9 {\n  if (i14 \u003c\u003d 0) goto B10 else B16\n}",
      "B10 {\n  i3 \u003d i13 - i14\n  if (i14 \u003c\u003d i3) goto B11 else B12\n}",
      "B11 {\n  $i6 \u003d i11 + i13\n  $i7 \u003d $i6 - i3\n  ArrayUtils.swap(r0, i11, $i7, i3)\n  i13 \u003d i14\n  i14 \u003d i14 - i3\n  goto B15\n}",
      "B12 {\n  if (i14 \u003e\u003d i3) goto B13 else B14\n}",
      "B13 {\n  $i5 \u003d i11 + i3\n  ArrayUtils.swap(r0, i11, $i5, i14)\n  i11 \u003d i11 + i14\n  i13 \u003d i3\n  goto B15\n}",
      "B14 {\n  $i4 \u003d i11 + i3\n  ArrayUtils.swap(r0, i11, $i4, i14)\n  goto B16\n}",
      "B15 {\n  goto B8\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B16",
      "B9 --\u003e B10",
      "B9 --\u003e B16",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B8",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      },
      {
        "name": "ArrayUtils#swap(...4)",
        "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final boolean aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shift",
    "signature": "void shift(int[],int)",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        shift(array, 0, array.length, offset);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  i0 :\u003d @parameter1: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d lengthof r0\n  ArrayUtils.shift(r0, 0, $i1, i0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#shift(...4)",
        "body": "{\r\n    if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\r\n        return;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    int n \u003d endIndexExclusive - startIndexInclusive;\r\n    if (n \u003c\u003d 1) {\r\n        return;\r\n    }\r\n    offset %\u003d n;\r\n    if (offset \u003c 0) {\r\n        offset +\u003d n;\r\n    }\r\n    // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\r\n    // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\r\n    while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\r\n        final int nOffset \u003d n - offset;\r\n        if (offset \u003e nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + n - nOffset, nOffset);\r\n            n \u003d offset;\r\n            offset -\u003d nOffset;\r\n        } else if (offset \u003c nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            startIndexInclusive +\u003d offset;\r\n            n \u003d nOffset;\r\n        } else {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            break;\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shift",
    "signature": "void shift(int[],int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\r\n        return;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    int n \u003d endIndexExclusive - startIndexInclusive;\r\n    if (n \u003c\u003d 1) {\r\n        return;\r\n    }\r\n    offset %\u003d n;\r\n    if (offset \u003c 0) {\r\n        offset +\u003d n;\r\n    }\r\n    // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\r\n    // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\r\n    while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\r\n        final int nOffset \u003d n - offset;\r\n        if (offset \u003e nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + n - nOffset, nOffset);\r\n            n \u003d offset;\r\n            offset -\u003d nOffset;\r\n        } else if (offset \u003c nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            startIndexInclusive +\u003d offset;\r\n            n \u003d nOffset;\r\n        } else {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            break;\r\n        }\r\n    }\r\n}",
    "nodes": 17,
    "edges": 23,
    "cc": 8,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(i8 \u003e\u003d $i1) → B2 | else → B3",
      "B2 : If(i9 \u003e 0) → B3 | else → B4",
      "B4 : If(i13 \u003e 1) → B5 | else → B6",
      "B6 : If(i14 \u003e\u003d 0) → B7 | else → B8",
      "B8 : If(i13 \u003c\u003d 1) → B9 | else → B16",
      "B9 : If(i14 \u003c\u003d 0) → B10 | else → B16",
      "B10 : If(i14 \u003c\u003d i3) → B11 | else → B12",
      "B12 : If(i14 \u003e\u003d i3) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  i8 :\u003d @parameter1: int\n  i9 :\u003d @parameter2: int\n  i10 :\u003d @parameter3: int\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  $i1 \u003d $i0 - 1\n  if (i8 \u003e\u003d $i1) goto B2 else B3\n}",
      "B2 {\n  if (i9 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i11 \u003d ArrayUtils.max0(i8)\n  $i2 \u003d lengthof r0\n  i12 \u003d Math.min(i9, $i2)\n  i13 \u003d i12 - i11\n  if (i13 \u003e 1) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i14 \u003d i10 % i13\n  if (i14 \u003e\u003d 0) goto B7 else B8\n}",
      "B7 {\n  i14 \u003d i14 + i13\n}",
      "B8 {\n  if (i13 \u003c\u003d 1) goto B9 else B16\n}",
      "B9 {\n  if (i14 \u003c\u003d 0) goto B10 else B16\n}",
      "B10 {\n  i3 \u003d i13 - i14\n  if (i14 \u003c\u003d i3) goto B11 else B12\n}",
      "B11 {\n  $i6 \u003d i11 + i13\n  $i7 \u003d $i6 - i3\n  ArrayUtils.swap(r0, i11, $i7, i3)\n  i13 \u003d i14\n  i14 \u003d i14 - i3\n  goto B15\n}",
      "B12 {\n  if (i14 \u003e\u003d i3) goto B13 else B14\n}",
      "B13 {\n  $i5 \u003d i11 + i3\n  ArrayUtils.swap(r0, i11, $i5, i14)\n  i11 \u003d i11 + i14\n  i13 \u003d i3\n  goto B15\n}",
      "B14 {\n  $i4 \u003d i11 + i3\n  ArrayUtils.swap(r0, i11, $i4, i14)\n  goto B16\n}",
      "B15 {\n  goto B8\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B16",
      "B9 --\u003e B10",
      "B9 --\u003e B16",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B8",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      },
      {
        "name": "ArrayUtils#swap(...4)",
        "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final boolean aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shift",
    "signature": "void shift(long[],int)",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        shift(array, 0, array.length, offset);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  i0 :\u003d @parameter1: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d lengthof r0\n  ArrayUtils.shift(r0, 0, $i1, i0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#shift(...4)",
        "body": "{\r\n    if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\r\n        return;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    int n \u003d endIndexExclusive - startIndexInclusive;\r\n    if (n \u003c\u003d 1) {\r\n        return;\r\n    }\r\n    offset %\u003d n;\r\n    if (offset \u003c 0) {\r\n        offset +\u003d n;\r\n    }\r\n    // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\r\n    // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\r\n    while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\r\n        final int nOffset \u003d n - offset;\r\n        if (offset \u003e nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + n - nOffset, nOffset);\r\n            n \u003d offset;\r\n            offset -\u003d nOffset;\r\n        } else if (offset \u003c nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            startIndexInclusive +\u003d offset;\r\n            n \u003d nOffset;\r\n        } else {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            break;\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shift",
    "signature": "void shift(long[],int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\r\n        return;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    int n \u003d endIndexExclusive - startIndexInclusive;\r\n    if (n \u003c\u003d 1) {\r\n        return;\r\n    }\r\n    offset %\u003d n;\r\n    if (offset \u003c 0) {\r\n        offset +\u003d n;\r\n    }\r\n    // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\r\n    // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\r\n    while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\r\n        final int nOffset \u003d n - offset;\r\n        if (offset \u003e nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + n - nOffset, nOffset);\r\n            n \u003d offset;\r\n            offset -\u003d nOffset;\r\n        } else if (offset \u003c nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            startIndexInclusive +\u003d offset;\r\n            n \u003d nOffset;\r\n        } else {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            break;\r\n        }\r\n    }\r\n}",
    "nodes": 17,
    "edges": 23,
    "cc": 8,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(i8 \u003e\u003d $i1) → B2 | else → B3",
      "B2 : If(i9 \u003e 0) → B3 | else → B4",
      "B4 : If(i13 \u003e 1) → B5 | else → B6",
      "B6 : If(i14 \u003e\u003d 0) → B7 | else → B8",
      "B8 : If(i13 \u003c\u003d 1) → B9 | else → B16",
      "B9 : If(i14 \u003c\u003d 0) → B10 | else → B16",
      "B10 : If(i14 \u003c\u003d i3) → B11 | else → B12",
      "B12 : If(i14 \u003e\u003d i3) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  i8 :\u003d @parameter1: int\n  i9 :\u003d @parameter2: int\n  i10 :\u003d @parameter3: int\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  $i1 \u003d $i0 - 1\n  if (i8 \u003e\u003d $i1) goto B2 else B3\n}",
      "B2 {\n  if (i9 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i11 \u003d ArrayUtils.max0(i8)\n  $i2 \u003d lengthof r0\n  i12 \u003d Math.min(i9, $i2)\n  i13 \u003d i12 - i11\n  if (i13 \u003e 1) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i14 \u003d i10 % i13\n  if (i14 \u003e\u003d 0) goto B7 else B8\n}",
      "B7 {\n  i14 \u003d i14 + i13\n}",
      "B8 {\n  if (i13 \u003c\u003d 1) goto B9 else B16\n}",
      "B9 {\n  if (i14 \u003c\u003d 0) goto B10 else B16\n}",
      "B10 {\n  i3 \u003d i13 - i14\n  if (i14 \u003c\u003d i3) goto B11 else B12\n}",
      "B11 {\n  $i6 \u003d i11 + i13\n  $i7 \u003d $i6 - i3\n  ArrayUtils.swap(r0, i11, $i7, i3)\n  i13 \u003d i14\n  i14 \u003d i14 - i3\n  goto B15\n}",
      "B12 {\n  if (i14 \u003e\u003d i3) goto B13 else B14\n}",
      "B13 {\n  $i5 \u003d i11 + i3\n  ArrayUtils.swap(r0, i11, $i5, i14)\n  i11 \u003d i11 + i14\n  i13 \u003d i3\n  goto B15\n}",
      "B14 {\n  $i4 \u003d i11 + i3\n  ArrayUtils.swap(r0, i11, $i4, i14)\n  goto B16\n}",
      "B15 {\n  goto B8\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B16",
      "B9 --\u003e B10",
      "B9 --\u003e B16",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B8",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      },
      {
        "name": "ArrayUtils#swap(...4)",
        "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final boolean aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shift",
    "signature": "void shift(java.lang.Object[],int)",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        shift(array, 0, array.length, offset);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  i0 :\u003d @parameter1: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d lengthof r0\n  ArrayUtils.shift(r0, 0, $i1, i0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#shift(...4)",
        "body": "{\r\n    if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\r\n        return;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    int n \u003d endIndexExclusive - startIndexInclusive;\r\n    if (n \u003c\u003d 1) {\r\n        return;\r\n    }\r\n    offset %\u003d n;\r\n    if (offset \u003c 0) {\r\n        offset +\u003d n;\r\n    }\r\n    // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\r\n    // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\r\n    while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\r\n        final int nOffset \u003d n - offset;\r\n        if (offset \u003e nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + n - nOffset, nOffset);\r\n            n \u003d offset;\r\n            offset -\u003d nOffset;\r\n        } else if (offset \u003c nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            startIndexInclusive +\u003d offset;\r\n            n \u003d nOffset;\r\n        } else {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            break;\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shift",
    "signature": "void shift(java.lang.Object[],int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\r\n        return;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    int n \u003d endIndexExclusive - startIndexInclusive;\r\n    if (n \u003c\u003d 1) {\r\n        return;\r\n    }\r\n    offset %\u003d n;\r\n    if (offset \u003c 0) {\r\n        offset +\u003d n;\r\n    }\r\n    // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\r\n    // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\r\n    while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\r\n        final int nOffset \u003d n - offset;\r\n        if (offset \u003e nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + n - nOffset, nOffset);\r\n            n \u003d offset;\r\n            offset -\u003d nOffset;\r\n        } else if (offset \u003c nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            startIndexInclusive +\u003d offset;\r\n            n \u003d nOffset;\r\n        } else {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            break;\r\n        }\r\n    }\r\n}",
    "nodes": 17,
    "edges": 23,
    "cc": 8,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(i8 \u003e\u003d $i1) → B2 | else → B3",
      "B2 : If(i9 \u003e 0) → B3 | else → B4",
      "B4 : If(i13 \u003e 1) → B5 | else → B6",
      "B6 : If(i14 \u003e\u003d 0) → B7 | else → B8",
      "B8 : If(i13 \u003c\u003d 1) → B9 | else → B16",
      "B9 : If(i14 \u003c\u003d 0) → B10 | else → B16",
      "B10 : If(i14 \u003c\u003d i3) → B11 | else → B12",
      "B12 : If(i14 \u003e\u003d i3) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  i8 :\u003d @parameter1: int\n  i9 :\u003d @parameter2: int\n  i10 :\u003d @parameter3: int\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  $i1 \u003d $i0 - 1\n  if (i8 \u003e\u003d $i1) goto B2 else B3\n}",
      "B2 {\n  if (i9 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i11 \u003d ArrayUtils.max0(i8)\n  $i2 \u003d lengthof r0\n  i12 \u003d Math.min(i9, $i2)\n  i13 \u003d i12 - i11\n  if (i13 \u003e 1) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i14 \u003d i10 % i13\n  if (i14 \u003e\u003d 0) goto B7 else B8\n}",
      "B7 {\n  i14 \u003d i14 + i13\n}",
      "B8 {\n  if (i13 \u003c\u003d 1) goto B9 else B16\n}",
      "B9 {\n  if (i14 \u003c\u003d 0) goto B10 else B16\n}",
      "B10 {\n  i3 \u003d i13 - i14\n  if (i14 \u003c\u003d i3) goto B11 else B12\n}",
      "B11 {\n  $i6 \u003d i11 + i13\n  $i7 \u003d $i6 - i3\n  ArrayUtils.swap(r0, i11, $i7, i3)\n  i13 \u003d i14\n  i14 \u003d i14 - i3\n  goto B15\n}",
      "B12 {\n  if (i14 \u003e\u003d i3) goto B13 else B14\n}",
      "B13 {\n  $i5 \u003d i11 + i3\n  ArrayUtils.swap(r0, i11, $i5, i14)\n  i11 \u003d i11 + i14\n  i13 \u003d i3\n  goto B15\n}",
      "B14 {\n  $i4 \u003d i11 + i3\n  ArrayUtils.swap(r0, i11, $i4, i14)\n  goto B16\n}",
      "B15 {\n  goto B8\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B16",
      "B9 --\u003e B10",
      "B9 --\u003e B16",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B8",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      },
      {
        "name": "ArrayUtils#swap(...4)",
        "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final boolean aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shift",
    "signature": "void shift(short[],int)",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null) {\r\n        shift(array, 0, array.length, offset);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  i0 :\u003d @parameter1: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d lengthof r0\n  ArrayUtils.shift(r0, 0, $i1, i0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#shift(...4)",
        "body": "{\r\n    if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\r\n        return;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    int n \u003d endIndexExclusive - startIndexInclusive;\r\n    if (n \u003c\u003d 1) {\r\n        return;\r\n    }\r\n    offset %\u003d n;\r\n    if (offset \u003c 0) {\r\n        offset +\u003d n;\r\n    }\r\n    // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\r\n    // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\r\n    while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\r\n        final int nOffset \u003d n - offset;\r\n        if (offset \u003e nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + n - nOffset, nOffset);\r\n            n \u003d offset;\r\n            offset -\u003d nOffset;\r\n        } else if (offset \u003c nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            startIndexInclusive +\u003d offset;\r\n            n \u003d nOffset;\r\n        } else {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            break;\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shift",
    "signature": "void shift(short[],int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null || startIndexInclusive \u003e\u003d array.length - 1 || endIndexExclusive \u003c\u003d 0) {\r\n        return;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    int n \u003d endIndexExclusive - startIndexInclusive;\r\n    if (n \u003c\u003d 1) {\r\n        return;\r\n    }\r\n    offset %\u003d n;\r\n    if (offset \u003c 0) {\r\n        offset +\u003d n;\r\n    }\r\n    // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity\r\n    // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/\r\n    while (n \u003e 1 \u0026\u0026 offset \u003e 0) {\r\n        final int nOffset \u003d n - offset;\r\n        if (offset \u003e nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + n - nOffset, nOffset);\r\n            n \u003d offset;\r\n            offset -\u003d nOffset;\r\n        } else if (offset \u003c nOffset) {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            startIndexInclusive +\u003d offset;\r\n            n \u003d nOffset;\r\n        } else {\r\n            swap(array, startIndexInclusive, startIndexInclusive + nOffset, offset);\r\n            break;\r\n        }\r\n    }\r\n}",
    "nodes": 17,
    "edges": 23,
    "cc": 8,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(i8 \u003e\u003d $i1) → B2 | else → B3",
      "B2 : If(i9 \u003e 0) → B3 | else → B4",
      "B4 : If(i13 \u003e 1) → B5 | else → B6",
      "B6 : If(i14 \u003e\u003d 0) → B7 | else → B8",
      "B8 : If(i13 \u003c\u003d 1) → B9 | else → B16",
      "B9 : If(i14 \u003c\u003d 0) → B10 | else → B16",
      "B10 : If(i14 \u003c\u003d i3) → B11 | else → B12",
      "B12 : If(i14 \u003e\u003d i3) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  i8 :\u003d @parameter1: int\n  i9 :\u003d @parameter2: int\n  i10 :\u003d @parameter3: int\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  $i1 \u003d $i0 - 1\n  if (i8 \u003e\u003d $i1) goto B2 else B3\n}",
      "B2 {\n  if (i9 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i11 \u003d ArrayUtils.max0(i8)\n  $i2 \u003d lengthof r0\n  i12 \u003d Math.min(i9, $i2)\n  i13 \u003d i12 - i11\n  if (i13 \u003e 1) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i14 \u003d i10 % i13\n  if (i14 \u003e\u003d 0) goto B7 else B8\n}",
      "B7 {\n  i14 \u003d i14 + i13\n}",
      "B8 {\n  if (i13 \u003c\u003d 1) goto B9 else B16\n}",
      "B9 {\n  if (i14 \u003c\u003d 0) goto B10 else B16\n}",
      "B10 {\n  i3 \u003d i13 - i14\n  if (i14 \u003c\u003d i3) goto B11 else B12\n}",
      "B11 {\n  $i6 \u003d i11 + i13\n  $i7 \u003d $i6 - i3\n  ArrayUtils.swap(r0, i11, $i7, i3)\n  i13 \u003d i14\n  i14 \u003d i14 - i3\n  goto B15\n}",
      "B12 {\n  if (i14 \u003e\u003d i3) goto B13 else B14\n}",
      "B13 {\n  $i5 \u003d i11 + i3\n  ArrayUtils.swap(r0, i11, $i5, i14)\n  i11 \u003d i11 + i14\n  i13 \u003d i3\n  goto B15\n}",
      "B14 {\n  $i4 \u003d i11 + i3\n  ArrayUtils.swap(r0, i11, $i4, i14)\n  goto B16\n}",
      "B15 {\n  goto B8\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B16",
      "B9 --\u003e B10",
      "B9 --\u003e B16",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B8",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      },
      {
        "name": "ArrayUtils#swap(...4)",
        "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final boolean aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shuffle",
    "signature": "void shuffle(boolean[],java.util.Random)",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d array.length; i \u003e 1; i--) {\r\n        swap(array, i - 1, random.nextInt(i), 1);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i2 \u003c\u003d 1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  Random\n  i2 \u003d lengthof r0\n}",
      "B1 {\n  if (i2 \u003c\u003d 1) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d i2 - 1\n  $i0 \u003d r1.nextInt(i2)\n  ArrayUtils.swap(r0, $i1, $i0, 1)\n  $i4 \u003d (int) -1\n  i2 \u003d i2 + $i4\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#swap(...4)",
        "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final boolean aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shuffle",
    "signature": "void shuffle(byte[],java.util.Random)",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d array.length; i \u003e 1; i--) {\r\n        swap(array, i - 1, random.nextInt(i), 1);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i2 \u003c\u003d 1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  Random\n  i2 \u003d lengthof r0\n}",
      "B1 {\n  if (i2 \u003c\u003d 1) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d i2 - 1\n  $i0 \u003d r1.nextInt(i2)\n  ArrayUtils.swap(r0, $i1, $i0, 1)\n  $i4 \u003d (int) -1\n  i2 \u003d i2 + $i4\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#swap(...4)",
        "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final boolean aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shuffle",
    "signature": "void shuffle(char[],java.util.Random)",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d array.length; i \u003e 1; i--) {\r\n        swap(array, i - 1, random.nextInt(i), 1);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i2 \u003c\u003d 1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  Random\n  i2 \u003d lengthof r0\n}",
      "B1 {\n  if (i2 \u003c\u003d 1) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d i2 - 1\n  $i0 \u003d r1.nextInt(i2)\n  ArrayUtils.swap(r0, $i1, $i0, 1)\n  $i4 \u003d (int) -1\n  i2 \u003d i2 + $i4\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#swap(...4)",
        "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final boolean aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shuffle",
    "signature": "void shuffle(double[],java.util.Random)",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d array.length; i \u003e 1; i--) {\r\n        swap(array, i - 1, random.nextInt(i), 1);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i2 \u003c\u003d 1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  Random\n  i2 \u003d lengthof r0\n}",
      "B1 {\n  if (i2 \u003c\u003d 1) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d i2 - 1\n  $i0 \u003d r1.nextInt(i2)\n  ArrayUtils.swap(r0, $i1, $i0, 1)\n  $i4 \u003d (int) -1\n  i2 \u003d i2 + $i4\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#swap(...4)",
        "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final boolean aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shuffle",
    "signature": "void shuffle(float[],java.util.Random)",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d array.length; i \u003e 1; i--) {\r\n        swap(array, i - 1, random.nextInt(i), 1);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i2 \u003c\u003d 1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  Random\n  i2 \u003d lengthof r0\n}",
      "B1 {\n  if (i2 \u003c\u003d 1) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d i2 - 1\n  $i0 \u003d r1.nextInt(i2)\n  ArrayUtils.swap(r0, $i1, $i0, 1)\n  $i4 \u003d (int) -1\n  i2 \u003d i2 + $i4\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#swap(...4)",
        "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final boolean aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shuffle",
    "signature": "void shuffle(int[],java.util.Random)",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d array.length; i \u003e 1; i--) {\r\n        swap(array, i - 1, random.nextInt(i), 1);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i2 \u003c\u003d 1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  Random\n  i2 \u003d lengthof r0\n}",
      "B1 {\n  if (i2 \u003c\u003d 1) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d i2 - 1\n  $i0 \u003d r1.nextInt(i2)\n  ArrayUtils.swap(r0, $i1, $i0, 1)\n  $i4 \u003d (int) -1\n  i2 \u003d i2 + $i4\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#swap(...4)",
        "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final boolean aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shuffle",
    "signature": "void shuffle(long[],java.util.Random)",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d array.length; i \u003e 1; i--) {\r\n        swap(array, i - 1, random.nextInt(i), 1);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i2 \u003c\u003d 1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  Random\n  i2 \u003d lengthof r0\n}",
      "B1 {\n  if (i2 \u003c\u003d 1) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d i2 - 1\n  $i0 \u003d r1.nextInt(i2)\n  ArrayUtils.swap(r0, $i1, $i0, 1)\n  $i4 \u003d (int) -1\n  i2 \u003d i2 + $i4\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#swap(...4)",
        "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final boolean aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shuffle",
    "signature": "void shuffle(java.lang.Object[],java.util.Random)",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d array.length; i \u003e 1; i--) {\r\n        swap(array, i - 1, random.nextInt(i), 1);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i2 \u003c\u003d 1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  Random\n  i2 \u003d lengthof r0\n}",
      "B1 {\n  if (i2 \u003c\u003d 1) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d i2 - 1\n  $i0 \u003d r1.nextInt(i2)\n  ArrayUtils.swap(r0, $i1, $i0, 1)\n  $i4 \u003d (int) -1\n  i2 \u003d i2 + $i4\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#swap(...4)",
        "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final boolean aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "shuffle",
    "signature": "void shuffle(short[],java.util.Random)",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d array.length; i \u003e 1; i--) {\r\n        swap(array, i - 1, random.nextInt(i), 1);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i2 \u003c\u003d 1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  Random\n  i2 \u003d lengthof r0\n}",
      "B1 {\n  if (i2 \u003c\u003d 1) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d i2 - 1\n  $i0 \u003d r1.nextInt(i2)\n  ArrayUtils.swap(r0, $i1, $i0, 1)\n  $i4 \u003d (int) -1\n  i2 \u003d i2 + $i4\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#swap(...4)",
        "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final boolean aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "subarray",
    "signature": "boolean[] subarray(boolean[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    final int newSize \u003d endIndexExclusive - startIndexInclusive;\r\n    if (newSize \u003c\u003d 0) {\r\n        return EMPTY_BOOLEAN_ARRAY;\r\n    }\r\n    return arraycopy(array, startIndexInclusive, 0, newSize, boolean[]::new);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i1 \u003e 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  i2 :\u003d @parameter1: int\n  i3 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i4 \u003d ArrayUtils.max0(i2)\n  $i0 \u003d lengthof r0\n  i5 \u003d Math.min(i3, $i0)\n  i1 \u003d i5 - i4\n  if (i1 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY\u003e\n  return\n}",
      "B4 {\n  $r1 \u003d ArrayUtils$lambda_subarray_3__4.bootstrap$()\n  $r2 \u003d ArrayUtils.arraycopy(r0, i4, 0, i1, $r1)\n  $r3 \u003d (boolean[]) $r2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#arraycopy(...5)",
        "body": "{\r\n    return arraycopy(source, sourcePos, allocator.apply(length), destPos, length);\r\n}"
      },
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "subarray",
    "signature": "byte[] subarray(byte[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    final int newSize \u003d endIndexExclusive - startIndexInclusive;\r\n    if (newSize \u003c\u003d 0) {\r\n        return EMPTY_BYTE_ARRAY;\r\n    }\r\n    return arraycopy(array, startIndexInclusive, 0, newSize, byte[]::new);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i1 \u003e 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  i2 :\u003d @parameter1: int\n  i3 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i4 \u003d ArrayUtils.max0(i2)\n  $i0 \u003d lengthof r0\n  i5 \u003d Math.min(i3, $i0)\n  i1 \u003d i5 - i4\n  if (i1 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d ArrayUtils: byte[] EMPTY_BYTE_ARRAY\u003e\n  return\n}",
      "B4 {\n  $r1 \u003d ArrayUtils$lambda_subarray_4__5.bootstrap$()\n  $r2 \u003d ArrayUtils.arraycopy(r0, i4, 0, i1, $r1)\n  $r3 \u003d (byte[]) $r2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#arraycopy(...5)",
        "body": "{\r\n    return arraycopy(source, sourcePos, allocator.apply(length), destPos, length);\r\n}"
      },
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "subarray",
    "signature": "char[] subarray(char[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    final int newSize \u003d endIndexExclusive - startIndexInclusive;\r\n    if (newSize \u003c\u003d 0) {\r\n        return EMPTY_CHAR_ARRAY;\r\n    }\r\n    return arraycopy(array, startIndexInclusive, 0, newSize, char[]::new);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i1 \u003e 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  i2 :\u003d @parameter1: int\n  i3 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i4 \u003d ArrayUtils.max0(i2)\n  $i0 \u003d lengthof r0\n  i5 \u003d Math.min(i3, $i0)\n  i1 \u003d i5 - i4\n  if (i1 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d ArrayUtils: char[] EMPTY_CHAR_ARRAY\u003e\n  return\n}",
      "B4 {\n  $r1 \u003d ArrayUtils$lambda_subarray_5__6.bootstrap$()\n  $r2 \u003d ArrayUtils.arraycopy(r0, i4, 0, i1, $r1)\n  $r3 \u003d (char[]) $r2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#arraycopy(...5)",
        "body": "{\r\n    return arraycopy(source, sourcePos, allocator.apply(length), destPos, length);\r\n}"
      },
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "subarray",
    "signature": "double[] subarray(double[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    final int newSize \u003d endIndexExclusive - startIndexInclusive;\r\n    if (newSize \u003c\u003d 0) {\r\n        return EMPTY_DOUBLE_ARRAY;\r\n    }\r\n    return arraycopy(array, startIndexInclusive, 0, newSize, double[]::new);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i1 \u003e 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  i2 :\u003d @parameter1: int\n  i3 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i4 \u003d ArrayUtils.max0(i2)\n  $i0 \u003d lengthof r0\n  i5 \u003d Math.min(i3, $i0)\n  i1 \u003d i5 - i4\n  if (i1 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d ArrayUtils: double[] EMPTY_DOUBLE_ARRAY\u003e\n  return\n}",
      "B4 {\n  $r1 \u003d ArrayUtils$lambda_subarray_6__7.bootstrap$()\n  $r2 \u003d ArrayUtils.arraycopy(r0, i4, 0, i1, $r1)\n  $r3 \u003d (double[]) $r2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#arraycopy(...5)",
        "body": "{\r\n    return arraycopy(source, sourcePos, allocator.apply(length), destPos, length);\r\n}"
      },
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "subarray",
    "signature": "float[] subarray(float[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    final int newSize \u003d endIndexExclusive - startIndexInclusive;\r\n    if (newSize \u003c\u003d 0) {\r\n        return EMPTY_FLOAT_ARRAY;\r\n    }\r\n    return arraycopy(array, startIndexInclusive, 0, newSize, float[]::new);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i1 \u003e 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  i2 :\u003d @parameter1: int\n  i3 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i4 \u003d ArrayUtils.max0(i2)\n  $i0 \u003d lengthof r0\n  i5 \u003d Math.min(i3, $i0)\n  i1 \u003d i5 - i4\n  if (i1 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d ArrayUtils: float[] EMPTY_FLOAT_ARRAY\u003e\n  return\n}",
      "B4 {\n  $r1 \u003d ArrayUtils$lambda_subarray_7__8.bootstrap$()\n  $r2 \u003d ArrayUtils.arraycopy(r0, i4, 0, i1, $r1)\n  $r3 \u003d (float[]) $r2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#arraycopy(...5)",
        "body": "{\r\n    return arraycopy(source, sourcePos, allocator.apply(length), destPos, length);\r\n}"
      },
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "subarray",
    "signature": "int[] subarray(int[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    final int newSize \u003d endIndexExclusive - startIndexInclusive;\r\n    if (newSize \u003c\u003d 0) {\r\n        return EMPTY_INT_ARRAY;\r\n    }\r\n    return arraycopy(array, startIndexInclusive, 0, newSize, int[]::new);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i1 \u003e 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  i2 :\u003d @parameter1: int\n  i3 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i4 \u003d ArrayUtils.max0(i2)\n  $i0 \u003d lengthof r0\n  i5 \u003d Math.min(i3, $i0)\n  i1 \u003d i5 - i4\n  if (i1 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d ArrayUtils: int[] EMPTY_INT_ARRAY\u003e\n  return\n}",
      "B4 {\n  $r1 \u003d ArrayUtils$lambda_subarray_8__9.bootstrap$()\n  $r2 \u003d ArrayUtils.arraycopy(r0, i4, 0, i1, $r1)\n  $r3 \u003d (int[]) $r2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#arraycopy(...5)",
        "body": "{\r\n    return arraycopy(source, sourcePos, allocator.apply(length), destPos, length);\r\n}"
      },
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "subarray",
    "signature": "long[] subarray(long[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    final int newSize \u003d endIndexExclusive - startIndexInclusive;\r\n    if (newSize \u003c\u003d 0) {\r\n        return EMPTY_LONG_ARRAY;\r\n    }\r\n    return arraycopy(array, startIndexInclusive, 0, newSize, long[]::new);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i1 \u003e 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  i2 :\u003d @parameter1: int\n  i3 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i4 \u003d ArrayUtils.max0(i2)\n  $i0 \u003d lengthof r0\n  i5 \u003d Math.min(i3, $i0)\n  i1 \u003d i5 - i4\n  if (i1 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d ArrayUtils: long[] EMPTY_LONG_ARRAY\u003e\n  return\n}",
      "B4 {\n  $r1 \u003d ArrayUtils$lambda_subarray_9__10.bootstrap$()\n  $r2 \u003d ArrayUtils.arraycopy(r0, i4, 0, i1, $r1)\n  $r3 \u003d (long[]) $r2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#arraycopy(...5)",
        "body": "{\r\n    return arraycopy(source, sourcePos, allocator.apply(length), destPos, length);\r\n}"
      },
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "subarray",
    "signature": "short[] subarray(short[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    startIndexInclusive \u003d max0(startIndexInclusive);\r\n    endIndexExclusive \u003d Math.min(endIndexExclusive, array.length);\r\n    final int newSize \u003d endIndexExclusive - startIndexInclusive;\r\n    if (newSize \u003c\u003d 0) {\r\n        return EMPTY_SHORT_ARRAY;\r\n    }\r\n    return arraycopy(array, startIndexInclusive, 0, newSize, short[]::new);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i1 \u003e 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  i2 :\u003d @parameter1: int\n  i3 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i4 \u003d ArrayUtils.max0(i2)\n  $i0 \u003d lengthof r0\n  i5 \u003d Math.min(i3, $i0)\n  i1 \u003d i5 - i4\n  if (i1 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d ArrayUtils: short[] EMPTY_SHORT_ARRAY\u003e\n  return\n}",
      "B4 {\n  $r1 \u003d ArrayUtils$lambda_subarray_10__11.bootstrap$()\n  $r2 \u003d ArrayUtils.arraycopy(r0, i4, 0, i1, $r1)\n  $r3 \u003d (short[]) $r2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#arraycopy(...5)",
        "body": "{\r\n    return arraycopy(source, sourcePos, allocator.apply(length), destPos, length);\r\n}"
      },
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "subarray",
    "signature": "java.lang.Object[] subarray(java.lang.Object[],int,int)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i1 \u003e 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  i2 :\u003d @parameter1: int\n  i3 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i4 \u003d ArrayUtils.max0(i2)\n  $i0 \u003d lengthof r0\n  i5 \u003d Math.min(i3, $i0)\n  i1 \u003d i5 - i4\n  r1 \u003d ArrayUtils.getComponentType(r0)\n  if (i1 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d ArrayUtils.newInstance(r1, 0)\n  return\n}",
      "B4 {\n  $r2 \u003d ArrayUtils$lambda_subarray_11__12.bootstrap$(r1, i1)\n  $r3 \u003d ArrayUtils.arraycopy(r0, i4, 0, i1, $r2)\n  $r4 \u003d Object[]) $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "swap",
    "signature": "void swap(boolean[],int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final boolean aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If(i7 \u003e\u003d $i0) → B2 | else → B3",
      "B2 : If(i8 \u003c $i1) → B3 | else → B4",
      "B5 : If(i13 \u003e\u003d i12) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  i7 :\u003d @parameter1: int\n  i8 :\u003d @parameter2: int\n  i9 :\u003d @parameter3: int\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if (i7 \u003e\u003d $i0) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d lengthof r0\n  if (i8 \u003c $i1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i10 \u003d ArrayUtils.max0(i7)\n  i11 \u003d ArrayUtils.max0(i8)\n  $i2 \u003d lengthof r0\n  $i3 \u003d $i2 - i10\n  $i6 \u003d Math.min(i9, $i3)\n  $i4 \u003d lengthof r0\n  $i5 \u003d $i4 - i11\n  i12 \u003d Math.min($i6, $i5)\n  i13 \u003d 0\n}",
      "B5 {\n  if (i13 \u003e\u003d i12) goto B6 else B7\n}",
      "B6 {\n  z1 \u003d r0[i10]\n  $z2 \u003d r0[i11]\n  r0[i10] \u003d $z2\n  r0[i11] \u003d z1\n  i13 \u003d i13 + 1\n  i10 \u003d i10 + 1\n  i11 \u003d i11 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      },
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "swap",
    "signature": "void swap(byte[],int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final byte aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If(i9 \u003e\u003d $i0) → B2 | else → B3",
      "B2 : If(i10 \u003c $i1) → B3 | else → B4",
      "B5 : If(i15 \u003e\u003d i14) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  i9 :\u003d @parameter1: int\n  i10 :\u003d @parameter2: int\n  i11 :\u003d @parameter3: int\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if (i9 \u003e\u003d $i0) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d lengthof r0\n  if (i10 \u003c $i1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i12 \u003d ArrayUtils.max0(i9)\n  i13 \u003d ArrayUtils.max0(i10)\n  $i2 \u003d lengthof r0\n  $i3 \u003d $i2 - i12\n  $i6 \u003d Math.min(i11, $i3)\n  $i4 \u003d lengthof r0\n  $i5 \u003d $i4 - i13\n  i14 \u003d Math.min($i6, $i5)\n  i15 \u003d 0\n}",
      "B5 {\n  if (i15 \u003e\u003d i14) goto B6 else B7\n}",
      "B6 {\n  b7 \u003d r0[i12]\n  $b8 \u003d r0[i13]\n  r0[i12] \u003d $b8\n  r0[i13] \u003d b7\n  i15 \u003d i15 + 1\n  i12 \u003d i12 + 1\n  i13 \u003d i13 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      },
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "swap",
    "signature": "void swap(char[],int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final char aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If(i9 \u003e\u003d $i0) → B2 | else → B3",
      "B2 : If(i10 \u003c $i1) → B3 | else → B4",
      "B5 : If(i15 \u003e\u003d i14) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  i9 :\u003d @parameter1: int\n  i10 :\u003d @parameter2: int\n  i11 :\u003d @parameter3: int\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if (i9 \u003e\u003d $i0) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d lengthof r0\n  if (i10 \u003c $i1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i12 \u003d ArrayUtils.max0(i9)\n  i13 \u003d ArrayUtils.max0(i10)\n  $i2 \u003d lengthof r0\n  $i3 \u003d $i2 - i12\n  $i6 \u003d Math.min(i11, $i3)\n  $i4 \u003d lengthof r0\n  $i5 \u003d $i4 - i13\n  i14 \u003d Math.min($i6, $i5)\n  i15 \u003d 0\n}",
      "B5 {\n  if (i15 \u003e\u003d i14) goto B6 else B7\n}",
      "B6 {\n  c7 \u003d r0[i12]\n  $c8 \u003d r0[i13]\n  r0[i12] \u003d $c8\n  r0[i13] \u003d c7\n  i15 \u003d i15 + 1\n  i12 \u003d i12 + 1\n  i13 \u003d i13 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      },
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "swap",
    "signature": "void swap(double[],int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final double aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If(i7 \u003e\u003d $i0) → B2 | else → B3",
      "B2 : If(i8 \u003c $i1) → B3 | else → B4",
      "B5 : If(i13 \u003e\u003d i12) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  i7 :\u003d @parameter1: int\n  i8 :\u003d @parameter2: int\n  i9 :\u003d @parameter3: int\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if (i7 \u003e\u003d $i0) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d lengthof r0\n  if (i8 \u003c $i1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i10 \u003d ArrayUtils.max0(i7)\n  i11 \u003d ArrayUtils.max0(i8)\n  $i2 \u003d lengthof r0\n  $i3 \u003d $i2 - i10\n  $i6 \u003d Math.min(i9, $i3)\n  $i4 \u003d lengthof r0\n  $i5 \u003d $i4 - i11\n  i12 \u003d Math.min($i6, $i5)\n  i13 \u003d 0\n}",
      "B5 {\n  if (i13 \u003e\u003d i12) goto B6 else B7\n}",
      "B6 {\n  d0 \u003d r0[i10]\n  $d1 \u003d r0[i11]\n  r0[i10] \u003d $d1\n  r0[i11] \u003d d0\n  i13 \u003d i13 + 1\n  i10 \u003d i10 + 1\n  i11 \u003d i11 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      },
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "swap",
    "signature": "void swap(float[],int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final float aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If(i7 \u003e\u003d $i0) → B2 | else → B3",
      "B2 : If(i8 \u003c $i1) → B3 | else → B4",
      "B5 : If(i13 \u003e\u003d i12) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  i7 :\u003d @parameter1: int\n  i8 :\u003d @parameter2: int\n  i9 :\u003d @parameter3: int\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if (i7 \u003e\u003d $i0) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d lengthof r0\n  if (i8 \u003c $i1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i10 \u003d ArrayUtils.max0(i7)\n  i11 \u003d ArrayUtils.max0(i8)\n  $i2 \u003d lengthof r0\n  $i3 \u003d $i2 - i10\n  $i6 \u003d Math.min(i9, $i3)\n  $i4 \u003d lengthof r0\n  $i5 \u003d $i4 - i11\n  i12 \u003d Math.min($i6, $i5)\n  i13 \u003d 0\n}",
      "B5 {\n  if (i13 \u003e\u003d i12) goto B6 else B7\n}",
      "B6 {\n  f0 \u003d r0[i10]\n  $f1 \u003d r0[i11]\n  r0[i10] \u003d $f1\n  r0[i11] \u003d f0\n  i13 \u003d i13 + 1\n  i10 \u003d i10 + 1\n  i11 \u003d i11 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      },
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "swap",
    "signature": "void swap(int[],int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final int aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If(i9 \u003e\u003d $i0) → B2 | else → B3",
      "B2 : If(i10 \u003c $i1) → B3 | else → B4",
      "B5 : If(i15 \u003e\u003d i14) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  i9 :\u003d @parameter1: int\n  i10 :\u003d @parameter2: int\n  i11 :\u003d @parameter3: int\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if (i9 \u003e\u003d $i0) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d lengthof r0\n  if (i10 \u003c $i1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i12 \u003d ArrayUtils.max0(i9)\n  i13 \u003d ArrayUtils.max0(i10)\n  $i2 \u003d lengthof r0\n  $i3 \u003d $i2 - i12\n  $i6 \u003d Math.min(i11, $i3)\n  $i4 \u003d lengthof r0\n  $i5 \u003d $i4 - i13\n  i14 \u003d Math.min($i6, $i5)\n  i15 \u003d 0\n}",
      "B5 {\n  if (i15 \u003e\u003d i14) goto B6 else B7\n}",
      "B6 {\n  i7 \u003d r0[i12]\n  $i8 \u003d r0[i13]\n  r0[i12] \u003d $i8\n  r0[i13] \u003d i7\n  i15 \u003d i15 + 1\n  i12 \u003d i12 + 1\n  i13 \u003d i13 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      },
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "swap",
    "signature": "void swap(long[],int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final long aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If(i9 \u003e\u003d $i0) → B2 | else → B3",
      "B2 : If(i10 \u003c $i1) → B3 | else → B4",
      "B5 : If(i15 \u003e\u003d i14) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  i9 :\u003d @parameter1: int\n  i10 :\u003d @parameter2: int\n  i11 :\u003d @parameter3: int\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if (i9 \u003e\u003d $i0) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d lengthof r0\n  if (i10 \u003c $i1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i12 \u003d ArrayUtils.max0(i9)\n  i13 \u003d ArrayUtils.max0(i10)\n  $i2 \u003d lengthof r0\n  $i3 \u003d $i2 - i12\n  $i6 \u003d Math.min(i11, $i3)\n  $i4 \u003d lengthof r0\n  $i5 \u003d $i4 - i13\n  i14 \u003d Math.min($i6, $i5)\n  i15 \u003d 0\n}",
      "B5 {\n  if (i15 \u003e\u003d i14) goto B6 else B7\n}",
      "B6 {\n  l7 \u003d r0[i12]\n  $l8 \u003d r0[i13]\n  r0[i12] \u003d $l8\n  r0[i13] \u003d l7\n  i15 \u003d i15 + 1\n  i12 \u003d i12 + 1\n  i13 \u003d i13 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      },
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "swap",
    "signature": "void swap(java.lang.Object[],int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final Object aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If(i7 \u003e\u003d $i0) → B2 | else → B3",
      "B2 : If(i8 \u003c $i1) → B3 | else → B4",
      "B5 : If(i13 \u003e\u003d i12) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  i7 :\u003d @parameter1: int\n  i8 :\u003d @parameter2: int\n  i9 :\u003d @parameter3: int\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if (i7 \u003e\u003d $i0) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d lengthof r0\n  if (i8 \u003c $i1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i10 \u003d ArrayUtils.max0(i7)\n  i11 \u003d ArrayUtils.max0(i8)\n  $i2 \u003d lengthof r0\n  $i3 \u003d $i2 - i10\n  $i6 \u003d Math.min(i9, $i3)\n  $i4 \u003d lengthof r0\n  $i5 \u003d $i4 - i11\n  i12 \u003d Math.min($i6, $i5)\n  i13 \u003d 0\n}",
      "B5 {\n  if (i13 \u003e\u003d i12) goto B6 else B7\n}",
      "B6 {\n  r1 \u003d r0[i10]\n  $r2 \u003d r0[i11]\n  r0[i10] \u003d $r2\n  r0[i11] \u003d r1\n  i13 \u003d i13 + 1\n  i10 \u003d i10 + 1\n  i11 \u003d i11 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      },
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "swap",
    "signature": "void swap(short[],int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(array) || offset1 \u003e\u003d array.length || offset2 \u003e\u003d array.length) {\r\n        return;\r\n    }\r\n    offset1 \u003d max0(offset1);\r\n    offset2 \u003d max0(offset2);\r\n    if (offset1 \u003d\u003d offset2) {\r\n        return;\r\n    }\r\n    len \u003d Math.min(Math.min(len, array.length - offset1), array.length - offset2);\r\n    for (int i \u003d 0; i \u003c len; i++, offset1++, offset2++) {\r\n        final short aux \u003d array[offset1];\r\n        array[offset1] \u003d array[offset2];\r\n        array[offset2] \u003d aux;\r\n    }\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If(i9 \u003e\u003d $i0) → B2 | else → B3",
      "B2 : If(i10 \u003c $i1) → B3 | else → B4",
      "B4 : If(i12 !\u003d i13) → B5 | else → B6",
      "B7 : If(i15 \u003e\u003d i14) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  i9 :\u003d @parameter1: int\n  i10 :\u003d @parameter2: int\n  i11 :\u003d @parameter3: int\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if (i9 \u003e\u003d $i0) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d lengthof r0\n  if (i10 \u003c $i1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i12 \u003d ArrayUtils.max0(i9)\n  i13 \u003d ArrayUtils.max0(i10)\n  if (i12 !\u003d i13) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $i2 \u003d lengthof r0\n  $i3 \u003d $i2 - i12\n  $i6 \u003d Math.min(i11, $i3)\n  $i4 \u003d lengthof r0\n  $i5 \u003d $i4 - i13\n  i14 \u003d Math.min($i6, $i5)\n  i15 \u003d 0\n}",
      "B7 {\n  if (i15 \u003e\u003d i14) goto B8 else B9\n}",
      "B8 {\n  s7 \u003d r0[i12]\n  $s8 \u003d r0[i13]\n  r0[i12] \u003d $s8\n  r0[i13] \u003d s7\n  i15 \u003d i15 + 1\n  i12 \u003d i12 + 1\n  i13 \u003d i13 + 1\n  goto B7\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B7",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#isEmpty(...1)",
        "body": "{\r\n    return isArrayEmpty(array);\r\n}"
      },
      {
        "name": "ArrayUtils#max0(...1)",
        "body": "{\r\n    return Math.max(0, other);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toMap",
    "signature": "java.util.Map toMap(java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final Map\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e((int) (array.length * 1.5));\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        final Object object \u003d array[i];\r\n        if (object instanceof Map.Entry\u003c?, ?\u003e) {\r\n            final Map.Entry\u003c?, ?\u003e entry \u003d (Map.Entry\u003c?, ?\u003e) object;\r\n            map.put(entry.getKey(), entry.getValue());\r\n        } else if (object instanceof Object[]) {\r\n            final Object[] entry \u003d (Object[]) object;\r\n            if (entry.length \u003c 2) {\r\n                throw new IllegalArgumentException(\"Array element \" + i + \", \u0027\" + object + \"\u0027, has a length less than 2\");\r\n            }\r\n            map.put(entry[0], entry[1]);\r\n        } else {\r\n            throw new IllegalArgumentException(\"Array element \" + i + \", \u0027\" + object + \"\u0027, is neither of type Map.Entry nor an Array\");\r\n        }\r\n    }\r\n    return map;\r\n}",
    "nodes": 13,
    "edges": 14,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i4 \u003e\u003d $i2) → B4 | else → B12",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B6",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B10",
      "B7 : If($i3 \u003e\u003d 2) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d HashMap\n  $i0 \u003d lengthof r0\n  $d0 \u003d (double) $i0\n  $d1 \u003d 5\n  $i1 \u003d (int) $d1\n  new HashMap($i1)\n  i4 \u003d 0\n}",
      "B3 {\n  $i2 \u003d lengthof r0\n  if (i4 \u003e\u003d $i2) goto B4 else B12\n}",
      "B4 {\n  r2 \u003d r0[i4]\n  $z0 \u003d Map$Entry\n  if ($z0 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  r23 \u003d Map$Entry) r2\n  $r22 \u003d r23.getKey()\n  $r21 \u003d r23.getValue()\n  $r1.put($r22, $r21)\n  goto B11\n}",
      "B6 {\n  $z1 \u003d Object[]\n  if ($z1 \u003d\u003d false) goto B7 else B10\n}",
      "B7 {\n  r24 \u003d Object[]) r2\n  $i3 \u003d lengthof r24\n  if ($i3 \u003e\u003d 2) goto B8 else B9\n}",
      "B8 {\n  $r13 \u003d IllegalArgumentException\n  $r14 \u003d StringBuilder\n  new StringBuilder()\n  $r15 \u003d $r14.append(\"Array element \")\n  $r16 \u003d $r15.append(i4)\n  $r17 \u003d $r16.append(\", \\\u0027\")\n  $r18 \u003d $r17.append(r2)\n  $r19 \u003d $r18.append(\"\\\u0027, has a length less than 2\")\n  $r20 \u003d $r19.toString()\n  new IllegalArgumentException($r20)\n  throw $r13\n}",
      "B9 {\n  $r12 \u003d r24[0]\n  $r11 \u003d r24[1]\n  $r1.put($r12, $r11)\n  goto B11\n}",
      "B10 {\n  $r3 \u003d IllegalArgumentException\n  $r4 \u003d StringBuilder\n  new StringBuilder()\n  $r5 \u003d $r4.append(\"Array element \")\n  $r6 \u003d $r5.append(i4)\n  $r7 \u003d $r6.append(\", \\\u0027\")\n  $r8 \u003d $r7.append(r2)\n  $r9 \u003d $r8.append(\"\\\u0027, is neither of type Map.Entry nor an Array\")\n  $r10 \u003d $r9.toString()\n  new IllegalArgumentException($r10)\n  throw $r3\n}",
      "B11 {\n  i4 \u003d i4 + 1\n  goto B3\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B12",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B11",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B3",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toObject",
    "signature": "java.lang.Boolean[] toObject(boolean[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_BOOLEAN_OBJECT_ARRAY;\r\n    }\r\n    final Boolean[] result \u003d new Boolean[array.length];\r\n    return setAll(result, i -\u003e array[i] ? Boolean.TRUE : Boolean.FALSE);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  r1 \u003d Boolean)[$i1]\n  $r2 \u003d ArrayUtils$lambda_toObject_12__13.bootstrap$(r0)\n  $r3 \u003d ArrayUtils.setAll(r1, $r2)\n  $r4 \u003d Boolean[]) $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#setAll(...2)",
        "body": "{\r\n    if (array !\u003d null \u0026\u0026 generator !\u003d null) {\r\n        Arrays.setAll(array, generator);\r\n    }\r\n    return array;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toObject",
    "signature": "java.lang.Byte[] toObject(byte[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_BYTE_OBJECT_ARRAY;\r\n    }\r\n    return setAll(new Byte[array.length], i -\u003e Byte.valueOf(array[i]));\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d Byte[] EMPTY_BYTE_OBJECT_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  $r2 \u003d Byte)[$i1]\n  $r1 \u003d ArrayUtils$lambda_toObject_13__14.bootstrap$(r0)\n  $r3 \u003d ArrayUtils.setAll($r2, $r1)\n  $r4 \u003d Byte[]) $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#setAll(...2)",
        "body": "{\r\n    if (array !\u003d null \u0026\u0026 generator !\u003d null) {\r\n        Arrays.setAll(array, generator);\r\n    }\r\n    return array;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toObject",
    "signature": "java.lang.Character[] toObject(char[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_CHARACTER_OBJECT_ARRAY;\r\n    }\r\n    return setAll(new Character[array.length], i -\u003e Character.valueOf(array[i]));\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d Character[] EMPTY_CHARACTER_OBJECT_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  $r2 \u003d Character)[$i1]\n  $r1 \u003d ArrayUtils$lambda_toObject_14__15.bootstrap$(r0)\n  $r3 \u003d ArrayUtils.setAll($r2, $r1)\n  $r4 \u003d Character[]) $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#setAll(...2)",
        "body": "{\r\n    if (array !\u003d null \u0026\u0026 generator !\u003d null) {\r\n        Arrays.setAll(array, generator);\r\n    }\r\n    return array;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toObject",
    "signature": "java.lang.Double[] toObject(double[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_DOUBLE_OBJECT_ARRAY;\r\n    }\r\n    return setAll(new Double[array.length], i -\u003e Double.valueOf(array[i]));\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d Double[] EMPTY_DOUBLE_OBJECT_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  $r2 \u003d Double)[$i1]\n  $r1 \u003d ArrayUtils$lambda_toObject_15__16.bootstrap$(r0)\n  $r3 \u003d ArrayUtils.setAll($r2, $r1)\n  $r4 \u003d Double[]) $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#setAll(...2)",
        "body": "{\r\n    if (array !\u003d null \u0026\u0026 generator !\u003d null) {\r\n        Arrays.setAll(array, generator);\r\n    }\r\n    return array;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toObject",
    "signature": "java.lang.Float[] toObject(float[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_FLOAT_OBJECT_ARRAY;\r\n    }\r\n    return setAll(new Float[array.length], i -\u003e Float.valueOf(array[i]));\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d Float[] EMPTY_FLOAT_OBJECT_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  $r2 \u003d Float)[$i1]\n  $r1 \u003d ArrayUtils$lambda_toObject_16__17.bootstrap$(r0)\n  $r3 \u003d ArrayUtils.setAll($r2, $r1)\n  $r4 \u003d Float[]) $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#setAll(...2)",
        "body": "{\r\n    if (array !\u003d null \u0026\u0026 generator !\u003d null) {\r\n        Arrays.setAll(array, generator);\r\n    }\r\n    return array;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toObject",
    "signature": "java.lang.Integer[] toObject(int[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_INTEGER_OBJECT_ARRAY;\r\n    }\r\n    return setAll(new Integer[array.length], i -\u003e Integer.valueOf(array[i]));\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d Integer[] EMPTY_INTEGER_OBJECT_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  $r2 \u003d Integer)[$i1]\n  $r1 \u003d ArrayUtils$lambda_toObject_17__18.bootstrap$(r0)\n  $r3 \u003d ArrayUtils.setAll($r2, $r1)\n  $r4 \u003d Integer[]) $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#setAll(...2)",
        "body": "{\r\n    if (array !\u003d null \u0026\u0026 generator !\u003d null) {\r\n        Arrays.setAll(array, generator);\r\n    }\r\n    return array;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toObject",
    "signature": "java.lang.Long[] toObject(long[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_LONG_OBJECT_ARRAY;\r\n    }\r\n    return setAll(new Long[array.length], i -\u003e Long.valueOf(array[i]));\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d Long[] EMPTY_LONG_OBJECT_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  $r2 \u003d Long)[$i1]\n  $r1 \u003d ArrayUtils$lambda_toObject_18__19.bootstrap$(r0)\n  $r3 \u003d ArrayUtils.setAll($r2, $r1)\n  $r4 \u003d Long[]) $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#setAll(...2)",
        "body": "{\r\n    if (array !\u003d null \u0026\u0026 generator !\u003d null) {\r\n        Arrays.setAll(array, generator);\r\n    }\r\n    return array;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toObject",
    "signature": "java.lang.Short[] toObject(short[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_SHORT_OBJECT_ARRAY;\r\n    }\r\n    return setAll(new Short[array.length], i -\u003e Short.valueOf(array[i]));\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d Short[] EMPTY_SHORT_OBJECT_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  $r2 \u003d Short)[$i1]\n  $r1 \u003d ArrayUtils$lambda_toObject_19__20.bootstrap$(r0)\n  $r3 \u003d ArrayUtils.setAll($r2, $r1)\n  $r4 \u003d Short[]) $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#setAll(...2)",
        "body": "{\r\n    if (array !\u003d null \u0026\u0026 generator !\u003d null) {\r\n        Arrays.setAll(array, generator);\r\n    }\r\n    return array;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toPrimitive",
    "signature": "boolean[] toPrimitive(java.lang.Boolean[],boolean)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_BOOLEAN_ARRAY;\r\n    }\r\n    final boolean[] result \u003d new boolean[array.length];\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        final Boolean b \u003d array[i];\r\n        result[i] \u003d b \u003d\u003d null ? valueForNull : b.booleanValue();\r\n    }\r\n    return result;\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i4 \u003e\u003d $i2) → B6 | else → B10",
      "B6 : If(r2 !\u003d null) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  Boolean[]\n  z0 :\u003d @parameter1: boolean\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  r1 \u003d newarray (boolean)[$i1]\n  i4 \u003d 0\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i4 \u003e\u003d $i2) goto B6 else B10\n}",
      "B6 {\n  r2 \u003d r0[i4]\n  $i3 \u003d i4\n  if (r2 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  $z1 \u003d z0\n  goto B9\n}",
      "B8 {\n  $z1 \u003d r2.booleanValue()\n}",
      "B9 {\n  r1[$i3] \u003d $z1\n  i4 \u003d i4 + 1\n  goto B5\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B5",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toPrimitive",
    "signature": "byte[] toPrimitive(java.lang.Byte[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_BYTE_ARRAY;\r\n    }\r\n    final byte[] result \u003d new byte[array.length];\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        result[i] \u003d array[i].byteValue();\r\n    }\r\n    return result;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i4 \u003e\u003d $i2) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Byte[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils: byte[] EMPTY_BYTE_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  r1 \u003d newarray (byte)[$i1]\n  i4 \u003d 0\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i4 \u003e\u003d $i2) goto B6 else B7\n}",
      "B6 {\n  $r2 \u003d r0[i4]\n  $b3 \u003d $r2.byteValue()\n  r1[i4] \u003d $b3\n  i4 \u003d i4 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toPrimitive",
    "signature": "byte[] toPrimitive(java.lang.Byte[],byte)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_BYTE_ARRAY;\r\n    }\r\n    final byte[] result \u003d new byte[array.length];\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        final Byte b \u003d array[i];\r\n        result[i] \u003d b \u003d\u003d null ? valueForNull : b.byteValue();\r\n    }\r\n    return result;\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i5 \u003e\u003d $i2) → B6 | else → B10",
      "B6 : If(r2 !\u003d null) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  Byte[]\n  b3 :\u003d @parameter1: byte\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils: byte[] EMPTY_BYTE_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  r1 \u003d newarray (byte)[$i1]\n  i5 \u003d 0\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i5 \u003e\u003d $i2) goto B6 else B10\n}",
      "B6 {\n  r2 \u003d r0[i5]\n  $i4 \u003d i5\n  if (r2 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  $b6 \u003d b3\n  goto B9\n}",
      "B8 {\n  $b6 \u003d r2.byteValue()\n}",
      "B9 {\n  r1[$i4] \u003d $b6\n  i5 \u003d i5 + 1\n  goto B5\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B5",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toPrimitive",
    "signature": "char[] toPrimitive(java.lang.Character[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_CHAR_ARRAY;\r\n    }\r\n    final char[] result \u003d new char[array.length];\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        result[i] \u003d array[i].charValue();\r\n    }\r\n    return result;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i4 \u003e\u003d $i2) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Character[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils: char[] EMPTY_CHAR_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  r1 \u003d newarray (char)[$i1]\n  i4 \u003d 0\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i4 \u003e\u003d $i2) goto B6 else B7\n}",
      "B6 {\n  $r2 \u003d r0[i4]\n  $c3 \u003d $r2.charValue()\n  r1[i4] \u003d $c3\n  i4 \u003d i4 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toPrimitive",
    "signature": "char[] toPrimitive(java.lang.Character[],char)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_CHAR_ARRAY;\r\n    }\r\n    final char[] result \u003d new char[array.length];\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        final Character b \u003d array[i];\r\n        result[i] \u003d b \u003d\u003d null ? valueForNull : b.charValue();\r\n    }\r\n    return result;\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i5 \u003e\u003d $i2) → B6 | else → B10",
      "B6 : If(r2 !\u003d null) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  Character[]\n  c3 :\u003d @parameter1: char\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils: char[] EMPTY_CHAR_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  r1 \u003d newarray (char)[$i1]\n  i5 \u003d 0\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i5 \u003e\u003d $i2) goto B6 else B10\n}",
      "B6 {\n  r2 \u003d r0[i5]\n  $i4 \u003d i5\n  if (r2 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  $c6 \u003d c3\n  goto B9\n}",
      "B8 {\n  $c6 \u003d r2.charValue()\n}",
      "B9 {\n  r1[$i4] \u003d $c6\n  i5 \u003d i5 + 1\n  goto B5\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B5",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toPrimitive",
    "signature": "double[] toPrimitive(java.lang.Double[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_DOUBLE_ARRAY;\r\n    }\r\n    final double[] result \u003d new double[array.length];\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        result[i] \u003d array[i].doubleValue();\r\n    }\r\n    return result;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i3 \u003e\u003d $i2) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Double[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils: double[] EMPTY_DOUBLE_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  r1 \u003d newarray (double)[$i1]\n  i3 \u003d 0\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i3 \u003e\u003d $i2) goto B6 else B7\n}",
      "B6 {\n  $r2 \u003d r0[i3]\n  $d0 \u003d $r2.doubleValue()\n  r1[i3] \u003d $d0\n  i3 \u003d i3 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toPrimitive",
    "signature": "double[] toPrimitive(java.lang.Double[],double)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_DOUBLE_ARRAY;\r\n    }\r\n    final double[] result \u003d new double[array.length];\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        final Double b \u003d array[i];\r\n        result[i] \u003d b \u003d\u003d null ? valueForNull : b.doubleValue();\r\n    }\r\n    return result;\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i4 \u003e\u003d $i2) → B6 | else → B10",
      "B6 : If(r2 !\u003d null) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  Double[]\n  d0 :\u003d @parameter1: double\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils: double[] EMPTY_DOUBLE_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  r1 \u003d newarray (double)[$i1]\n  i4 \u003d 0\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i4 \u003e\u003d $i2) goto B6 else B10\n}",
      "B6 {\n  r2 \u003d r0[i4]\n  $i3 \u003d i4\n  if (r2 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  $d1 \u003d d0\n  goto B9\n}",
      "B8 {\n  $d1 \u003d r2.doubleValue()\n}",
      "B9 {\n  r1[$i3] \u003d $d1\n  i4 \u003d i4 + 1\n  goto B5\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B5",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toPrimitive",
    "signature": "float[] toPrimitive(java.lang.Float[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_FLOAT_ARRAY;\r\n    }\r\n    final float[] result \u003d new float[array.length];\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        result[i] \u003d array[i].floatValue();\r\n    }\r\n    return result;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i3 \u003e\u003d $i2) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Float[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils: float[] EMPTY_FLOAT_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  r1 \u003d newarray (float)[$i1]\n  i3 \u003d 0\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i3 \u003e\u003d $i2) goto B6 else B7\n}",
      "B6 {\n  $r2 \u003d r0[i3]\n  $f0 \u003d $r2.floatValue()\n  r1[i3] \u003d $f0\n  i3 \u003d i3 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toPrimitive",
    "signature": "float[] toPrimitive(java.lang.Float[],float)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_FLOAT_ARRAY;\r\n    }\r\n    final float[] result \u003d new float[array.length];\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        final Float b \u003d array[i];\r\n        result[i] \u003d b \u003d\u003d null ? valueForNull : b.floatValue();\r\n    }\r\n    return result;\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i4 \u003e\u003d $i2) → B6 | else → B10",
      "B6 : If(r2 !\u003d null) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  Float[]\n  f0 :\u003d @parameter1: float\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils: float[] EMPTY_FLOAT_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  r1 \u003d newarray (float)[$i1]\n  i4 \u003d 0\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i4 \u003e\u003d $i2) goto B6 else B10\n}",
      "B6 {\n  r2 \u003d r0[i4]\n  $i3 \u003d i4\n  if (r2 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  $f1 \u003d f0\n  goto B9\n}",
      "B8 {\n  $f1 \u003d r2.floatValue()\n}",
      "B9 {\n  r1[$i3] \u003d $f1\n  i4 \u003d i4 + 1\n  goto B5\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B5",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toPrimitive",
    "signature": "int[] toPrimitive(java.lang.Integer[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_INT_ARRAY;\r\n    }\r\n    final int[] result \u003d new int[array.length];\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        result[i] \u003d array[i].intValue();\r\n    }\r\n    return result;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i4 \u003e\u003d $i2) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Integer[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils: int[] EMPTY_INT_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  r1 \u003d newarray (int)[$i1]\n  i4 \u003d 0\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i4 \u003e\u003d $i2) goto B6 else B7\n}",
      "B6 {\n  $r2 \u003d r0[i4]\n  $i3 \u003d $r2.intValue()\n  r1[i4] \u003d $i3\n  i4 \u003d i4 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toPrimitive",
    "signature": "int[] toPrimitive(java.lang.Integer[],int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_INT_ARRAY;\r\n    }\r\n    final int[] result \u003d new int[array.length];\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        final Integer b \u003d array[i];\r\n        result[i] \u003d b \u003d\u003d null ? valueForNull : b.intValue();\r\n    }\r\n    return result;\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i5 \u003e\u003d $i2) → B6 | else → B10",
      "B6 : If(r2 !\u003d null) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  Integer[]\n  i3 :\u003d @parameter1: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils: int[] EMPTY_INT_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  r1 \u003d newarray (int)[$i1]\n  i5 \u003d 0\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i5 \u003e\u003d $i2) goto B6 else B10\n}",
      "B6 {\n  r2 \u003d r0[i5]\n  $i4 \u003d i5\n  if (r2 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  $i6 \u003d i3\n  goto B9\n}",
      "B8 {\n  $i6 \u003d r2.intValue()\n}",
      "B9 {\n  r1[$i4] \u003d $i6\n  i5 \u003d i5 + 1\n  goto B5\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B5",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toPrimitive",
    "signature": "long[] toPrimitive(java.lang.Long[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_LONG_ARRAY;\r\n    }\r\n    final long[] result \u003d new long[array.length];\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        result[i] \u003d array[i].longValue();\r\n    }\r\n    return result;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i4 \u003e\u003d $i2) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Long[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils: long[] EMPTY_LONG_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  r1 \u003d newarray (long)[$i1]\n  i4 \u003d 0\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i4 \u003e\u003d $i2) goto B6 else B7\n}",
      "B6 {\n  $r2 \u003d r0[i4]\n  $l3 \u003d $r2.longValue()\n  r1[i4] \u003d $l3\n  i4 \u003d i4 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toPrimitive",
    "signature": "long[] toPrimitive(java.lang.Long[],long)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_LONG_ARRAY;\r\n    }\r\n    final long[] result \u003d new long[array.length];\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        final Long b \u003d array[i];\r\n        result[i] \u003d b \u003d\u003d null ? valueForNull : b.longValue();\r\n    }\r\n    return result;\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i5 \u003e\u003d $i2) → B6 | else → B10",
      "B6 : If(r2 !\u003d null) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  Long[]\n  l3 :\u003d @parameter1: long\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils: long[] EMPTY_LONG_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  r1 \u003d newarray (long)[$i1]\n  i5 \u003d 0\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i5 \u003e\u003d $i2) goto B6 else B10\n}",
      "B6 {\n  r2 \u003d r0[i5]\n  $i4 \u003d i5\n  if (r2 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  $l6 \u003d l3\n  goto B9\n}",
      "B8 {\n  $l6 \u003d r2.longValue()\n}",
      "B9 {\n  r1[$i4] \u003d $l6\n  i5 \u003d i5 + 1\n  goto B5\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B5",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toPrimitive",
    "signature": "java.lang.Object toPrimitive(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final Class\u003c?\u003e ct \u003d array.getClass().getComponentType();\r\n    final Class\u003c?\u003e pt \u003d ClassUtils.wrapperToPrimitive(ct);\r\n    if (Boolean.TYPE.equals(pt)) {\r\n        return toPrimitive((Boolean[]) array);\r\n    }\r\n    if (Character.TYPE.equals(pt)) {\r\n        return toPrimitive((Character[]) array);\r\n    }\r\n    if (Byte.TYPE.equals(pt)) {\r\n        return toPrimitive((Byte[]) array);\r\n    }\r\n    if (Integer.TYPE.equals(pt)) {\r\n        return toPrimitive((Integer[]) array);\r\n    }\r\n    if (Long.TYPE.equals(pt)) {\r\n        return toPrimitive((Long[]) array);\r\n    }\r\n    if (Short.TYPE.equals(pt)) {\r\n        return toPrimitive((Short[]) array);\r\n    }\r\n    if (Double.TYPE.equals(pt)) {\r\n        return toPrimitive((Double[]) array);\r\n    }\r\n    if (Float.TYPE.equals(pt)) {\r\n        return toPrimitive((Float[]) array);\r\n    }\r\n    return array;\r\n}",
    "nodes": 19,
    "edges": 18,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6",
      "B6 : If($z2 \u003d\u003d false) → B7 | else → B8",
      "B8 : If($z3 \u003d\u003d false) → B9 | else → B10",
      "B10 : If($z4 \u003d\u003d false) → B11 | else → B12",
      "B12 : If($z5 \u003d\u003d false) → B13 | else → B14",
      "B14 : If($z6 \u003d\u003d false) → B15 | else → B16",
      "B16 : If($z7 \u003d\u003d false) → B17 | else → B18"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getClass()\n  r2 \u003d $r1.getComponentType()\n  r3 \u003d ClassUtils.wrapperToPrimitive(r2)\n  $r4 \u003d Class TYPE\u003e\n  $z0 \u003d $r4.equals(r3)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r26 \u003d Boolean[]) r0\n  $r27 \u003d ArrayUtils.toPrimitive($r26)\n  return\n}",
      "B4 {\n  $r5 \u003d Class TYPE\u003e\n  $z1 \u003d $r5.equals(r3)\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r24 \u003d Character[]) r0\n  $r25 \u003d ArrayUtils.toPrimitive($r24)\n  return\n}",
      "B6 {\n  $r6 \u003d Class TYPE\u003e\n  $z2 \u003d $r6.equals(r3)\n  if ($z2 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $r22 \u003d Byte[]) r0\n  $r23 \u003d ArrayUtils.toPrimitive($r22)\n  return\n}",
      "B8 {\n  $r7 \u003d Class TYPE\u003e\n  $z3 \u003d $r7.equals(r3)\n  if ($z3 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r20 \u003d Integer[]) r0\n  $r21 \u003d ArrayUtils.toPrimitive($r20)\n  return\n}",
      "B10 {\n  $r8 \u003d Class TYPE\u003e\n  $z4 \u003d $r8.equals(r3)\n  if ($z4 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  $r18 \u003d Long[]) r0\n  $r19 \u003d ArrayUtils.toPrimitive($r18)\n  return\n}",
      "B12 {\n  $r9 \u003d Class TYPE\u003e\n  $z5 \u003d $r9.equals(r3)\n  if ($z5 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  $r16 \u003d Short[]) r0\n  $r17 \u003d ArrayUtils.toPrimitive($r16)\n  return\n}",
      "B14 {\n  $r10 \u003d Class TYPE\u003e\n  $z6 \u003d $r10.equals(r3)\n  if ($z6 \u003d\u003d false) goto B15 else B16\n}",
      "B15 {\n  $r14 \u003d Double[]) r0\n  $r15 \u003d ArrayUtils.toPrimitive($r14)\n  return\n}",
      "B16 {\n  $r11 \u003d Class TYPE\u003e\n  $z7 \u003d $r11.equals(r3)\n  if ($z7 \u003d\u003d false) goto B17 else B18\n}",
      "B17 {\n  $r12 \u003d Float[]) r0\n  $r13 \u003d ArrayUtils.toPrimitive($r12)\n  return\n}",
      "B18 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayUtils#toPrimitive(...1)",
        "body": "{\r\n    return toPrimitive(array, false);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toPrimitive",
    "signature": "short[] toPrimitive(java.lang.Short[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_SHORT_ARRAY;\r\n    }\r\n    final short[] result \u003d new short[array.length];\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        result[i] \u003d array[i].shortValue();\r\n    }\r\n    return result;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i4 \u003e\u003d $i2) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Short[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils: short[] EMPTY_SHORT_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  r1 \u003d newarray (short)[$i1]\n  i4 \u003d 0\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i4 \u003e\u003d $i2) goto B6 else B7\n}",
      "B6 {\n  $r2 \u003d r0[i4]\n  $s3 \u003d $r2.shortValue()\n  r1[i4] \u003d $s3\n  i4 \u003d i4 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toPrimitive",
    "signature": "short[] toPrimitive(java.lang.Short[],short)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_SHORT_ARRAY;\r\n    }\r\n    final short[] result \u003d new short[array.length];\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        final Short b \u003d array[i];\r\n        result[i] \u003d b \u003d\u003d null ? valueForNull : b.shortValue();\r\n    }\r\n    return result;\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i5 \u003e\u003d $i2) → B6 | else → B10",
      "B6 : If(r2 !\u003d null) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  Short[]\n  s3 :\u003d @parameter1: short\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils: short[] EMPTY_SHORT_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  r1 \u003d newarray (short)[$i1]\n  i5 \u003d 0\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i5 \u003e\u003d $i2) goto B6 else B10\n}",
      "B6 {\n  r2 \u003d r0[i5]\n  $i4 \u003d i5\n  if (r2 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  $s6 \u003d s3\n  goto B9\n}",
      "B8 {\n  $s6 \u003d r2.shortValue()\n}",
      "B9 {\n  r1[$i4] \u003d $s6\n  i5 \u003d i5 + 1\n  goto B5\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B5",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toString",
    "signature": "java.lang.String toString(java.lang.Object,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return stringIfNull;\r\n    }\r\n    return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d ToStringBuilder\n  $r2 \u003d ToStringStyle SIMPLE_STYLE\u003e\n  new ToStringBuilder(r0, $r2)\n  $r3 \u003d $r1.append(r0)\n  $r4 \u003d $r3.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toStringArray",
    "signature": "java.lang.String[] toStringArray(java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_STRING_ARRAY;\r\n    }\r\n    final String[] result \u003d new String[array.length];\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        result[i] \u003d array[i].toString();\r\n    }\r\n    return result;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i3 \u003e\u003d $i2) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d String[] EMPTY_STRING_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  r1 \u003d String)[$i1]\n  i3 \u003d 0\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i3 \u003e\u003d $i2) goto B6 else B7\n}",
      "B6 {\n  $r2 \u003d r0[i3]\n  $r3 \u003d $r2.toString()\n  r1[i3] \u003d $r3\n  i3 \u003d i3 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ArrayUtils",
    "methodName": "toStringArray",
    "signature": "java.lang.String[] toStringArray(java.lang.Object[],java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (null \u003d\u003d array) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return EMPTY_STRING_ARRAY;\r\n    }\r\n    final String[] result \u003d new String[array.length];\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        result[i] \u003d Objects.toString(array[i], valueForNullElements);\r\n    }\r\n    return result;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(null !\u003d r0) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i3 \u003e\u003d $i2) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  String\n  if (null !\u003d r0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d String[] EMPTY_STRING_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  r1 \u003d String)[$i1]\n  i3 \u003d 0\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i3 \u003e\u003d $i2) goto B6 else B7\n}",
      "B6 {\n  $r3 \u003d r0[i3]\n  $r4 \u003d Objects.toString($r3, r2)\n  r1[i3] \u003d $r4\n  i3 \u003d i3 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BitField",
    "methodName": "isAllSet",
    "signature": "boolean isAllSet(int)",
    "visibility": "public",
    "body": "{\r\n    return (holder \u0026 mask) \u003d\u003d mask;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i3 !\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BitField\n  i0 :\u003d @parameter0: int\n  $i1 \u003d BitField: int mask\u003e\n  $i3 \u003d i0 \u0026 $i1\n  $i2 \u003d BitField: int mask\u003e\n  if ($i3 !\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BitField",
    "methodName": "isSet",
    "signature": "boolean isSet(int)",
    "visibility": "public",
    "body": "{\r\n    return (holder \u0026 mask) !\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BitField\n  i0 :\u003d @parameter0: int\n  $i1 \u003d BitField: int mask\u003e\n  $i2 \u003d i0 \u0026 $i1\n  if ($i2 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BitField",
    "methodName": "setBoolean",
    "signature": "int setBoolean(int,boolean)",
    "visibility": "public",
    "body": "{\r\n    return flag ? set(holder) : clear(holder);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BitField\n  i0 :\u003d @parameter0: int\n  z0 :\u003d @parameter1: boolean\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d r0.set(i0)\n  goto B3\n}",
      "B2 {\n  $i1 \u003d r0.clear(i0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BitField#clear(...1)",
        "body": "{\r\n    return holder \u0026 ~mask;\r\n}"
      },
      {
        "name": "BitField#set(...1)",
        "body": "{\r\n    return holder | mask;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.BitField",
    "methodName": "setByteBoolean",
    "signature": "byte setByteBoolean(byte,boolean)",
    "visibility": "public",
    "body": "{\r\n    return flag ? setByte(holder) : clearByte(holder);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BitField\n  b0 :\u003d @parameter0: byte\n  z0 :\u003d @parameter1: boolean\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $b1 \u003d r0.setByte(b0)\n  goto B3\n}",
      "B2 {\n  $b1 \u003d r0.clearByte(b0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BitField#setByte(...1)",
        "body": "{\r\n    return (byte) set(holder);\r\n}"
      },
      {
        "name": "BitField#clearByte(...1)",
        "body": "{\r\n    return (byte) clear(holder);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.BitField",
    "methodName": "setShortBoolean",
    "signature": "short setShortBoolean(short,boolean)",
    "visibility": "public",
    "body": "{\r\n    return flag ? setShort(holder) : clearShort(holder);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BitField\n  s0 :\u003d @parameter0: short\n  z0 :\u003d @parameter1: boolean\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $s1 \u003d r0.setShort(s0)\n  goto B3\n}",
      "B2 {\n  $s1 \u003d r0.clearShort(s0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BitField#clearShort(...1)",
        "body": "{\r\n    return (short) clear(holder);\r\n}"
      },
      {
        "name": "BitField#setShort(...1)",
        "body": "{\r\n    return (short) set(holder);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "and",
    "signature": "boolean and(boolean[])",
    "visibility": "public",
    "body": "{\r\n    ObjectUtils.requireNonEmpty(array, \"array\");\r\n    for (final boolean element : array) {\r\n        if (!element) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B5",
      "B2 : If(z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  ObjectUtils.requireNonEmpty(r0, \"array\")\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B5\n}",
      "B2 {\n  z0 \u003d r0[i1]\n  if (z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "and",
    "signature": "java.lang.Boolean and(java.lang.Boolean[])",
    "visibility": "public",
    "body": "{\r\n    ObjectUtils.requireNonEmpty(array, \"array\");\r\n    for (final boolean element : array) {\r\n        if (!element) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Boolean[]\n  ObjectUtils.requireNonEmpty(r0, \"array\")\n  $r1 \u003d ArrayUtils.toPrimitive(r0)\n  $z0 \u003d BooleanUtils.and($r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Boolean TRUE\u003e\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Boolean FALSE\u003e\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "compare",
    "signature": "int compare(boolean,boolean)",
    "visibility": "public",
    "body": "{\r\n    if (x \u003d\u003d y) {\r\n        return 0;\r\n    }\r\n    return x ? 1 : -1;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 !\u003d z1) → B1 | else → B2",
      "B2 : If(z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  z0 :\u003d @parameter0: boolean\n  z1 :\u003d @parameter1: boolean\n  if (z0 !\u003d z1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $b0 \u003d 1\n  goto B5\n}",
      "B4 {\n  $b0 \u003d -1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "isNotFalse",
    "signature": "boolean isNotFalse(java.lang.Boolean)",
    "visibility": "public",
    "body": "{\r\n    return !isFalse(bool);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Boolean\n  $z0 \u003d BooleanUtils.isFalse(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BooleanUtils#isFalse(...1)",
        "body": "{\r\n    return Boolean.FALSE.equals(bool);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "isNotTrue",
    "signature": "boolean isNotTrue(java.lang.Boolean)",
    "visibility": "public",
    "body": "{\r\n    return !isTrue(bool);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Boolean\n  $z0 \u003d BooleanUtils.isTrue(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BooleanUtils#isTrue(...1)",
        "body": "{\r\n    return Boolean.TRUE.equals(bool);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "negate",
    "signature": "java.lang.Boolean negate(java.lang.Boolean)",
    "visibility": "public",
    "body": "{\r\n    if (bool \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return bool.booleanValue() ? Boolean.FALSE : Boolean.TRUE;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Boolean\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r0.booleanValue()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d Boolean FALSE\u003e\n  goto B5\n}",
      "B4 {\n  $r1 \u003d Boolean TRUE\u003e\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "oneHot",
    "signature": "boolean oneHot(boolean[])",
    "visibility": "public",
    "body": "{\r\n    ObjectUtils.requireNonEmpty(array, \"array\");\r\n    boolean result \u003d false;\r\n    for (final boolean element : array) {\r\n        if (element) {\r\n            if (result) {\r\n                return false;\r\n            }\r\n            result \u003d true;\r\n        }\r\n    }\r\n    return result;\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B7",
      "B2 : If(z0 \u003d\u003d false) → B3 | else → B6",
      "B3 : If(z2 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  ObjectUtils.requireNonEmpty(r0, \"array\")\n  z1 \u003d 0\n  z3 \u003d 0\n  z2 \u003d 0\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B7\n}",
      "B2 {\n  z0 \u003d r0[i1]\n  if (z0 \u003d\u003d false) goto B3 else B6\n}",
      "B3 {\n  if (z2 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  z1 \u003d 1\n  z3 \u003d 1\n  z2 \u003d 1\n}",
      "B6 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B6 --\u003e B1",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "or",
    "signature": "boolean or(boolean[])",
    "visibility": "public",
    "body": "{\r\n    ObjectUtils.requireNonEmpty(array, \"array\");\r\n    for (final boolean element : array) {\r\n        if (element) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B5",
      "B2 : If(z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  ObjectUtils.requireNonEmpty(r0, \"array\")\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B5\n}",
      "B2 {\n  z0 \u003d r0[i1]\n  if (z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "or",
    "signature": "java.lang.Boolean or(java.lang.Boolean[])",
    "visibility": "public",
    "body": "{\r\n    ObjectUtils.requireNonEmpty(array, \"array\");\r\n    for (final boolean element : array) {\r\n        if (element) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Boolean[]\n  ObjectUtils.requireNonEmpty(r0, \"array\")\n  $r1 \u003d ArrayUtils.toPrimitive(r0)\n  $z0 \u003d BooleanUtils.or($r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Boolean TRUE\u003e\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Boolean FALSE\u003e\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "toBoolean",
    "signature": "boolean toBoolean(java.lang.Boolean)",
    "visibility": "public",
    "body": "{\r\n    return bool !\u003d null \u0026\u0026 bool.booleanValue();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Boolean\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d r0.booleanValue()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "toBoolean",
    "signature": "boolean toBoolean(int)",
    "visibility": "public",
    "body": "{\r\n    return value !\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  if (i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "toBoolean",
    "signature": "boolean toBoolean(int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d trueValue) {\r\n        return true;\r\n    }\r\n    if (value \u003d\u003d falseValue) {\r\n        return false;\r\n    }\r\n    throw new IllegalArgumentException(\"The Integer did not match either specified value\");\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 !\u003d i1) → B1 | else → B2",
      "B2 : If(i0 !\u003d i2) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  i1 :\u003d @parameter1: int\n  i2 :\u003d @parameter2: int\n  if (i0 !\u003d i1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (i0 !\u003d i2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r0 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"The Integer did not match either specified value\")\n  throw $r0\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "toBoolean",
    "signature": "boolean toBoolean(java.lang.Integer,java.lang.Integer,java.lang.Integer)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d null) {\r\n        if (trueValue \u003d\u003d null) {\r\n            return true;\r\n        }\r\n        if (falseValue \u003d\u003d null) {\r\n            return false;\r\n        }\r\n    } else if (value.equals(trueValue)) {\r\n        return true;\r\n    } else if (value.equals(falseValue)) {\r\n        return false;\r\n    }\r\n    throw new IllegalArgumentException(\"The Integer did not match either specified value\");\r\n}",
    "nodes": 10,
    "edges": 10,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B5",
      "B1 : If(r1 !\u003d null) → B2 | else → B3",
      "B3 : If(r2 !\u003d null) → B4 | else → B9",
      "B5 : If($z0 \u003d\u003d false) → B6 | else → B7",
      "B7 : If($z1 \u003d\u003d false) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  Integer\n  Integer\n  Integer\n  if (r0 !\u003d null) goto B1 else B5\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  if (r2 !\u003d null) goto B4 else B9\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $z0 \u003d r0.equals(r1)\n  if ($z0 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $z1 \u003d r0.equals(r2)\n  if ($z1 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $r3 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"The Integer did not match either specified value\")\n  throw $r3\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "toBoolean",
    "signature": "boolean toBoolean(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return toBooleanObject(str) \u003d\u003d Boolean.TRUE;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  $r2 \u003d BooleanUtils.toBooleanObject(r0)\n  $r1 \u003d Boolean TRUE\u003e\n  if ($r2 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BooleanUtils#toBooleanObject(...1)",
        "body": "{\r\n    return value \u003d\u003d 0 ? Boolean.FALSE : Boolean.TRUE;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "toBoolean",
    "signature": "boolean toBoolean(java.lang.String,java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d trueString) {\r\n        return true;\r\n    }\r\n    if (str \u003d\u003d falseString) {\r\n        return false;\r\n    }\r\n    if (str !\u003d null) {\r\n        if (str.equals(trueString)) {\r\n            return true;\r\n        }\r\n        if (str.equals(falseString)) {\r\n            return false;\r\n        }\r\n    }\r\n    throw new IllegalArgumentException(\"The String did not match either specified value\");\r\n}",
    "nodes": 10,
    "edges": 10,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d r2) → B3 | else → B4",
      "B4 : If(r0 \u003d\u003d null) → B5 | else → B9",
      "B5 : If($z0 \u003d\u003d false) → B6 | else → B7",
      "B7 : If($z1 \u003d\u003d false) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  String\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d r2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r0 \u003d\u003d null) goto B5 else B9\n}",
      "B5 {\n  $z0 \u003d r0.equals(r1)\n  if ($z0 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $z1 \u003d r0.equals(r2)\n  if ($z1 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $r3 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"The String did not match either specified value\")\n  throw $r3\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "toBooleanDefaultIfNull",
    "signature": "boolean toBooleanDefaultIfNull(java.lang.Boolean,boolean)",
    "visibility": "public",
    "body": "{\r\n    if (bool \u003d\u003d null) {\r\n        return valueIfNull;\r\n    }\r\n    return bool.booleanValue();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Boolean\n  z1 :\u003d @parameter1: boolean\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r0.booleanValue()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "toBooleanObject",
    "signature": "java.lang.Boolean toBooleanObject(int)",
    "visibility": "public",
    "body": "{\r\n    return value \u003d\u003d 0 ? Boolean.FALSE : Boolean.TRUE;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  if (i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r0 \u003d Boolean FALSE\u003e\n  goto B3\n}",
      "B2 {\n  $r0 \u003d Boolean TRUE\u003e\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "toBooleanObject",
    "signature": "java.lang.Boolean toBooleanObject(int,int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d trueValue) {\r\n        return Boolean.TRUE;\r\n    }\r\n    if (value \u003d\u003d falseValue) {\r\n        return Boolean.FALSE;\r\n    }\r\n    if (value \u003d\u003d nullValue) {\r\n        return null;\r\n    }\r\n    throw new IllegalArgumentException(\"The Integer did not match any specified value\");\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 !\u003d i1) → B1 | else → B2",
      "B2 : If(i0 !\u003d i2) → B3 | else → B4",
      "B4 : If(i0 !\u003d i3) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  i1 :\u003d @parameter1: int\n  i2 :\u003d @parameter2: int\n  i3 :\u003d @parameter3: int\n  if (i0 !\u003d i1) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Boolean TRUE\u003e\n  return\n}",
      "B2 {\n  if (i0 !\u003d i2) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d Boolean FALSE\u003e\n  return\n}",
      "B4 {\n  if (i0 !\u003d i3) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r0 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"The Integer did not match any specified value\")\n  throw $r0\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "toBooleanObject",
    "signature": "java.lang.Boolean toBooleanObject(java.lang.Integer)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return value.intValue() \u003d\u003d 0 ? Boolean.FALSE : Boolean.TRUE;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Integer\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d r0.intValue()\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d Boolean FALSE\u003e\n  goto B5\n}",
      "B4 {\n  $r1 \u003d Boolean TRUE\u003e\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "toBooleanObject",
    "signature": "java.lang.Boolean toBooleanObject(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d null) {\r\n        if (trueValue \u003d\u003d null) {\r\n            return Boolean.TRUE;\r\n        }\r\n        if (falseValue \u003d\u003d null) {\r\n            return Boolean.FALSE;\r\n        }\r\n        if (nullValue \u003d\u003d null) {\r\n            return null;\r\n        }\r\n    } else if (value.equals(trueValue)) {\r\n        return Boolean.TRUE;\r\n    } else if (value.equals(falseValue)) {\r\n        return Boolean.FALSE;\r\n    } else if (value.equals(nullValue)) {\r\n        return null;\r\n    }\r\n    throw new IllegalArgumentException(\"The Integer did not match any specified value\");\r\n}",
    "nodes": 14,
    "edges": 14,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B7",
      "B1 : If(r1 !\u003d null) → B2 | else → B3",
      "B3 : If(r2 !\u003d null) → B4 | else → B5",
      "B5 : If(r3 !\u003d null) → B6 | else → B13",
      "B7 : If($z0 \u003d\u003d false) → B8 | else → B9",
      "B9 : If($z1 \u003d\u003d false) → B10 | else → B11",
      "B11 : If($z2 \u003d\u003d false) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  Integer\n  Integer\n  Integer\n  Integer\n  if (r0 !\u003d null) goto B1 else B7\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r8 \u003d Boolean TRUE\u003e\n  return\n}",
      "B3 {\n  if (r2 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r7 \u003d Boolean FALSE\u003e\n  return\n}",
      "B5 {\n  if (r3 !\u003d null) goto B6 else B13\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $z0 \u003d r0.equals(r1)\n  if ($z0 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $r6 \u003d Boolean TRUE\u003e\n  return\n}",
      "B9 {\n  $z1 \u003d r0.equals(r2)\n  if ($z1 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  $r5 \u003d Boolean FALSE\u003e\n  return\n}",
      "B11 {\n  $z2 \u003d r0.equals(r3)\n  if ($z2 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  return\n}",
      "B13 {\n  $r4 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"The Integer did not match any specified value\")\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B7",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B13",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "toBooleanObject",
    "signature": "java.lang.Boolean toBooleanObject(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    // Previously used equalsIgnoreCase, which was fast for interned \u0027true\u0027.\r\n    // Non interned \u0027true\u0027 matched 15 times slower.\r\n    //\r\n    // Optimisation provides same performance as before for interned \u0027true\u0027.\r\n    // Similar performance for null, \u0027false\u0027, and other strings not length 2/3/4.\r\n    // \u0027true\u0027/\u0027TRUE\u0027 match 4 times slower, \u0027tRUE\u0027/\u0027True\u0027 7 times slower.\r\n    if (str \u003d\u003d TRUE) {\r\n        return Boolean.TRUE;\r\n    }\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    switch(str.length()) {\r\n        case 1:\r\n            {\r\n                final char ch0 \u003d str.charAt(0);\r\n                if (ch0 \u003d\u003d \u0027y\u0027 || ch0 \u003d\u003d \u0027Y\u0027 || ch0 \u003d\u003d \u0027t\u0027 || ch0 \u003d\u003d \u0027T\u0027 || ch0 \u003d\u003d \u00271\u0027) {\r\n                    return Boolean.TRUE;\r\n                }\r\n                if (ch0 \u003d\u003d \u0027n\u0027 || ch0 \u003d\u003d \u0027N\u0027 || ch0 \u003d\u003d \u0027f\u0027 || ch0 \u003d\u003d \u0027F\u0027 || ch0 \u003d\u003d \u00270\u0027) {\r\n                    return Boolean.FALSE;\r\n                }\r\n                break;\r\n            }\r\n        case 2:\r\n            {\r\n                final char ch0 \u003d str.charAt(0);\r\n                final char ch1 \u003d str.charAt(1);\r\n                if ((ch0 \u003d\u003d \u0027o\u0027 || ch0 \u003d\u003d \u0027O\u0027) \u0026\u0026 (ch1 \u003d\u003d \u0027n\u0027 || ch1 \u003d\u003d \u0027N\u0027)) {\r\n                    return Boolean.TRUE;\r\n                }\r\n                if ((ch0 \u003d\u003d \u0027n\u0027 || ch0 \u003d\u003d \u0027N\u0027) \u0026\u0026 (ch1 \u003d\u003d \u0027o\u0027 || ch1 \u003d\u003d \u0027O\u0027)) {\r\n                    return Boolean.FALSE;\r\n                }\r\n                break;\r\n            }\r\n        case 3:\r\n            {\r\n                final char ch0 \u003d str.charAt(0);\r\n                final char ch1 \u003d str.charAt(1);\r\n                final char ch2 \u003d str.charAt(2);\r\n                if ((ch0 \u003d\u003d \u0027y\u0027 || ch0 \u003d\u003d \u0027Y\u0027) \u0026\u0026 (ch1 \u003d\u003d \u0027e\u0027 || ch1 \u003d\u003d \u0027E\u0027) \u0026\u0026 (ch2 \u003d\u003d \u0027s\u0027 || ch2 \u003d\u003d \u0027S\u0027)) {\r\n                    return Boolean.TRUE;\r\n                }\r\n                if ((ch0 \u003d\u003d \u0027o\u0027 || ch0 \u003d\u003d \u0027O\u0027) \u0026\u0026 (ch1 \u003d\u003d \u0027f\u0027 || ch1 \u003d\u003d \u0027F\u0027) \u0026\u0026 (ch2 \u003d\u003d \u0027f\u0027 || ch2 \u003d\u003d \u0027F\u0027)) {\r\n                    return Boolean.FALSE;\r\n                }\r\n                break;\r\n            }\r\n        case 4:\r\n            {\r\n                final char ch0 \u003d str.charAt(0);\r\n                final char ch1 \u003d str.charAt(1);\r\n                final char ch2 \u003d str.charAt(2);\r\n                final char ch3 \u003d str.charAt(3);\r\n                if ((ch0 \u003d\u003d \u0027t\u0027 || ch0 \u003d\u003d \u0027T\u0027) \u0026\u0026 (ch1 \u003d\u003d \u0027r\u0027 || ch1 \u003d\u003d \u0027R\u0027) \u0026\u0026 (ch2 \u003d\u003d \u0027u\u0027 || ch2 \u003d\u003d \u0027U\u0027) \u0026\u0026 (ch3 \u003d\u003d \u0027e\u0027 || ch3 \u003d\u003d \u0027E\u0027)) {\r\n                    return Boolean.TRUE;\r\n                }\r\n                break;\r\n            }\r\n        case 5:\r\n            {\r\n                final char ch0 \u003d str.charAt(0);\r\n                final char ch1 \u003d str.charAt(1);\r\n                final char ch2 \u003d str.charAt(2);\r\n                final char ch3 \u003d str.charAt(3);\r\n                final char ch4 \u003d str.charAt(4);\r\n                if ((ch0 \u003d\u003d \u0027f\u0027 || ch0 \u003d\u003d \u0027F\u0027) \u0026\u0026 (ch1 \u003d\u003d \u0027a\u0027 || ch1 \u003d\u003d \u0027A\u0027) \u0026\u0026 (ch2 \u003d\u003d \u0027l\u0027 || ch2 \u003d\u003d \u0027L\u0027) \u0026\u0026 (ch3 \u003d\u003d \u0027s\u0027 || ch3 \u003d\u003d \u0027S\u0027) \u0026\u0026 (ch4 \u003d\u003d \u0027e\u0027 || ch4 \u003d\u003d \u0027E\u0027)) {\r\n                    return Boolean.FALSE;\r\n                }\r\n                break;\r\n            }\r\n        default:\r\n            break;\r\n    }\r\n    return null;\r\n}",
    "nodes": 62,
    "edges": 106,
    "cc": 46,
    "flowSummary": [
      "B0 : If(r0 !\u003d \"true\") → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If(switch-on $i0) → B5 | else → B17",
      "B5 : If($i16 \u003d\u003d 121) → B6 | else → B10",
      "B6 : If($i17 \u003d\u003d 89) → B7 | else → B10",
      "B7 : If($i18 \u003d\u003d 116) → B8 | else → B10",
      "B8 : If($i19 \u003d\u003d 84) → B9 | else → B10",
      "B9 : If($i20 !\u003d 49) → B10 | else → B11",
      "B11 : If($i21 \u003d\u003d 110) → B12 | else → B16",
      "B12 : If($i22 \u003d\u003d 78) → B13 | else → B16",
      "B13 : If($i23 \u003d\u003d 102) → B14 | else → B16",
      "B14 : If($i24 \u003d\u003d 70) → B15 | else → B16",
      "B15 : If($i25 !\u003d 48) → B16 | else → B61",
      "B17 : If($i26 \u003d\u003d 111) → B18 | else → B19",
      "B18 : If($i27 !\u003d 79) → B19 | else → B22",
      "B19 : If($i28 \u003d\u003d 110) → B20 | else → B21",
      "B20 : If($i29 !\u003d 78) → B21 | else → B22",
      "B22 : If($i30 \u003d\u003d 110) → B23 | else → B24",
      "B23 : If($i31 !\u003d 78) → B24 | else → B61",
      "B24 : If($i32 \u003d\u003d 111) → B25 | else → B26",
      "B25 : If($i33 !\u003d 79) → B26 | else → B61",
      "B27 : If($i34 \u003d\u003d 121) → B28 | else → B29",
      "B28 : If($i35 !\u003d 89) → B29 | else → B34",
      "B29 : If($i36 \u003d\u003d 101) → B30 | else → B31",
      "B30 : If($i37 !\u003d 69) → B31 | else → B34",
      "B31 : If($i38 \u003d\u003d 115) → B32 | else → B33",
      "B32 : If($i39 !\u003d 83) → B33 | else → B34",
      "B34 : If($i40 \u003d\u003d 111) → B35 | else → B36",
      "B35 : If($i41 !\u003d 79) → B36 | else → B61",
      "B36 : If($i42 \u003d\u003d 102) → B37 | else → B38",
      "B37 : If($i43 !\u003d 70) → B38 | else → B61",
      "B38 : If($i44 \u003d\u003d 102) → B39 | else → B40",
      "B39 : If($i45 !\u003d 70) → B40 | else → B61",
      "B41 : If($i46 \u003d\u003d 116) → B42 | else → B43",
      "B42 : If($i47 !\u003d 84) → B43 | else → B61",
      "B43 : If($i48 \u003d\u003d 114) → B44 | else → B45",
      "B44 : If($i49 !\u003d 82) → B45 | else → B61",
      "B45 : If($i50 \u003d\u003d 117) → B46 | else → B47",
      "B46 : If($i51 !\u003d 85) → B47 | else → B61",
      "B47 : If($i52 \u003d\u003d 101) → B48 | else → B49",
      "B48 : If($i53 !\u003d 69) → B49 | else → B61",
      "B50 : If($i54 \u003d\u003d 102) → B51 | else → B52",
      "B51 : If($i55 !\u003d 70) → B52 | else → B61",
      "B52 : If($i56 \u003d\u003d 97) → B53 | else → B54",
      "B53 : If($i57 !\u003d 65) → B54 | else → B61",
      "B54 : If($i58 \u003d\u003d 108) → B55 | else → B56",
      "B55 : If($i59 !\u003d 76) → B56 | else → B61",
      "B56 : If($i60 \u003d\u003d 115) → B57 | else → B58",
      "B57 : If($i61 !\u003d 83) → B58 | else → B61",
      "B58 : If($i62 \u003d\u003d 101) → B59 | else → B60",
      "B59 : If($i63 !\u003d 69) → B60 | else → B61"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d \"true\") goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d Boolean TRUE\u003e\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i0 \u003d r0.length()\n  String: char charAt(int)\u003e(0);     default: goto return null; }\n}",
      "B5 {\n  c2 \u003d r0.charAt(0)\n  $i16 \u003d (int) c2\n  if ($i16 \u003d\u003d 121) goto B6 else B10\n}",
      "B6 {\n  $i17 \u003d (int) c2\n  if ($i17 \u003d\u003d 89) goto B7 else B10\n}",
      "B7 {\n  $i18 \u003d (int) c2\n  if ($i18 \u003d\u003d 116) goto B8 else B10\n}",
      "B8 {\n  $i19 \u003d (int) c2\n  if ($i19 \u003d\u003d 84) goto B9 else B10\n}",
      "B9 {\n  $i20 \u003d (int) c2\n  if ($i20 !\u003d 49) goto B10 else B11\n}",
      "B10 {\n  $r8 \u003d Boolean TRUE\u003e\n  return\n}",
      "B11 {\n  $i21 \u003d (int) c2\n  if ($i21 \u003d\u003d 110) goto B12 else B16\n}",
      "B12 {\n  $i22 \u003d (int) c2\n  if ($i22 \u003d\u003d 78) goto B13 else B16\n}",
      "B13 {\n  $i23 \u003d (int) c2\n  if ($i23 \u003d\u003d 102) goto B14 else B16\n}",
      "B14 {\n  $i24 \u003d (int) c2\n  if ($i24 \u003d\u003d 70) goto B15 else B16\n}",
      "B15 {\n  $i25 \u003d (int) c2\n  if ($i25 !\u003d 48) goto B16 else B61\n}",
      "B16 {\n  $r9 \u003d Boolean FALSE\u003e\n  return\n}",
      "B17 {\n  c3 \u003d r0.charAt(0)\n  c4 \u003d r0.charAt(1)\n  $i26 \u003d (int) c3\n  if ($i26 \u003d\u003d 111) goto B18 else B19\n}",
      "B18 {\n  $i27 \u003d (int) c3\n  if ($i27 !\u003d 79) goto B19 else B22\n}",
      "B19 {\n  $i28 \u003d (int) c4\n  if ($i28 \u003d\u003d 110) goto B20 else B21\n}",
      "B20 {\n  $i29 \u003d (int) c4\n  if ($i29 !\u003d 78) goto B21 else B22\n}",
      "B21 {\n  $r5 \u003d Boolean TRUE\u003e\n  return\n}",
      "B22 {\n  $i30 \u003d (int) c3\n  if ($i30 \u003d\u003d 110) goto B23 else B24\n}",
      "B23 {\n  $i31 \u003d (int) c3\n  if ($i31 !\u003d 78) goto B24 else B61\n}",
      "B24 {\n  $i32 \u003d (int) c4\n  if ($i32 \u003d\u003d 111) goto B25 else B26\n}",
      "B25 {\n  $i33 \u003d (int) c4\n  if ($i33 !\u003d 79) goto B26 else B61\n}",
      "B26 {\n  $r6 \u003d Boolean FALSE\u003e\n  return\n}",
      "B27 {\n  c5 \u003d r0.charAt(0)\n  c6 \u003d r0.charAt(1)\n  c7 \u003d r0.charAt(2)\n  $i34 \u003d (int) c5\n  if ($i34 \u003d\u003d 121) goto B28 else B29\n}",
      "B28 {\n  $i35 \u003d (int) c5\n  if ($i35 !\u003d 89) goto B29 else B34\n}",
      "B29 {\n  $i36 \u003d (int) c6\n  if ($i36 \u003d\u003d 101) goto B30 else B31\n}",
      "B30 {\n  $i37 \u003d (int) c6\n  if ($i37 !\u003d 69) goto B31 else B34\n}",
      "B31 {\n  $i38 \u003d (int) c7\n  if ($i38 \u003d\u003d 115) goto B32 else B33\n}",
      "B32 {\n  $i39 \u003d (int) c7\n  if ($i39 !\u003d 83) goto B33 else B34\n}",
      "B33 {\n  $r3 \u003d Boolean TRUE\u003e\n  return\n}",
      "B34 {\n  $i40 \u003d (int) c5\n  if ($i40 \u003d\u003d 111) goto B35 else B36\n}",
      "B35 {\n  $i41 \u003d (int) c5\n  if ($i41 !\u003d 79) goto B36 else B61\n}",
      "B36 {\n  $i42 \u003d (int) c6\n  if ($i42 \u003d\u003d 102) goto B37 else B38\n}",
      "B37 {\n  $i43 \u003d (int) c6\n  if ($i43 !\u003d 70) goto B38 else B61\n}",
      "B38 {\n  $i44 \u003d (int) c7\n  if ($i44 \u003d\u003d 102) goto B39 else B40\n}",
      "B39 {\n  $i45 \u003d (int) c7\n  if ($i45 !\u003d 70) goto B40 else B61\n}",
      "B40 {\n  $r4 \u003d Boolean FALSE\u003e\n  return\n}",
      "B41 {\n  c8 \u003d r0.charAt(0)\n  c9 \u003d r0.charAt(1)\n  c10 \u003d r0.charAt(2)\n  c11 \u003d r0.charAt(3)\n  $i46 \u003d (int) c8\n  if ($i46 \u003d\u003d 116) goto B42 else B43\n}",
      "B42 {\n  $i47 \u003d (int) c8\n  if ($i47 !\u003d 84) goto B43 else B61\n}",
      "B43 {\n  $i48 \u003d (int) c9\n  if ($i48 \u003d\u003d 114) goto B44 else B45\n}",
      "B44 {\n  $i49 \u003d (int) c9\n  if ($i49 !\u003d 82) goto B45 else B61\n}",
      "B45 {\n  $i50 \u003d (int) c10\n  if ($i50 \u003d\u003d 117) goto B46 else B47\n}",
      "B46 {\n  $i51 \u003d (int) c10\n  if ($i51 !\u003d 85) goto B47 else B61\n}",
      "B47 {\n  $i52 \u003d (int) c11\n  if ($i52 \u003d\u003d 101) goto B48 else B49\n}",
      "B48 {\n  $i53 \u003d (int) c11\n  if ($i53 !\u003d 69) goto B49 else B61\n}",
      "B49 {\n  $r2 \u003d Boolean TRUE\u003e\n  return\n}",
      "B50 {\n  c12 \u003d r0.charAt(0)\n  c13 \u003d r0.charAt(1)\n  c14 \u003d r0.charAt(2)\n  c15 \u003d r0.charAt(3)\n  c1 \u003d r0.charAt(4)\n  $i54 \u003d (int) c12\n  if ($i54 \u003d\u003d 102) goto B51 else B52\n}",
      "B51 {\n  $i55 \u003d (int) c12\n  if ($i55 !\u003d 70) goto B52 else B61\n}",
      "B52 {\n  $i56 \u003d (int) c13\n  if ($i56 \u003d\u003d 97) goto B53 else B54\n}",
      "B53 {\n  $i57 \u003d (int) c13\n  if ($i57 !\u003d 65) goto B54 else B61\n}",
      "B54 {\n  $i58 \u003d (int) c14\n  if ($i58 \u003d\u003d 108) goto B55 else B56\n}",
      "B55 {\n  $i59 \u003d (int) c14\n  if ($i59 !\u003d 76) goto B56 else B61\n}",
      "B56 {\n  $i60 \u003d (int) c15\n  if ($i60 \u003d\u003d 115) goto B57 else B58\n}",
      "B57 {\n  $i61 \u003d (int) c15\n  if ($i61 !\u003d 83) goto B58 else B61\n}",
      "B58 {\n  $i62 \u003d (int) c1\n  if ($i62 \u003d\u003d 101) goto B59 else B60\n}",
      "B59 {\n  $i63 \u003d (int) c1\n  if ($i63 !\u003d 69) goto B60 else B61\n}",
      "B60 {\n  $r1 \u003d Boolean FALSE\u003e\n  return\n}",
      "B61 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B17",
      "B4 --\u003e B27",
      "B4 --\u003e B41",
      "B4 --\u003e B50",
      "B4 --\u003e B61",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B16",
      "B12 --\u003e B13",
      "B12 --\u003e B16",
      "B13 --\u003e B14",
      "B13 --\u003e B16",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B15 --\u003e B61",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B18 --\u003e B22",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e [EXIT]",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B24",
      "B23 --\u003e B61",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B26",
      "B25 --\u003e B61",
      "B26 --\u003e [EXIT]",
      "B27 --\u003e B28",
      "B27 --\u003e B29",
      "B28 --\u003e B29",
      "B28 --\u003e B34",
      "B29 --\u003e B30",
      "B29 --\u003e B31",
      "B30 --\u003e B31",
      "B30 --\u003e B34",
      "B31 --\u003e B32",
      "B31 --\u003e B33",
      "B32 --\u003e B33",
      "B32 --\u003e B34",
      "B33 --\u003e [EXIT]",
      "B34 --\u003e B35",
      "B34 --\u003e B36",
      "B35 --\u003e B36",
      "B35 --\u003e B61",
      "B36 --\u003e B37",
      "B36 --\u003e B38",
      "B37 --\u003e B38",
      "B37 --\u003e B61",
      "B38 --\u003e B39",
      "B38 --\u003e B40",
      "B39 --\u003e B40",
      "B39 --\u003e B61",
      "B40 --\u003e [EXIT]",
      "B41 --\u003e B42",
      "B41 --\u003e B43",
      "B42 --\u003e B43",
      "B42 --\u003e B61",
      "B43 --\u003e B44",
      "B43 --\u003e B45",
      "B44 --\u003e B45",
      "B44 --\u003e B61",
      "B45 --\u003e B46",
      "B45 --\u003e B47",
      "B46 --\u003e B47",
      "B46 --\u003e B61",
      "B47 --\u003e B48",
      "B47 --\u003e B49",
      "B48 --\u003e B49",
      "B48 --\u003e B61",
      "B49 --\u003e [EXIT]",
      "B50 --\u003e B51",
      "B50 --\u003e B52",
      "B51 --\u003e B52",
      "B51 --\u003e B61",
      "B52 --\u003e B53",
      "B52 --\u003e B54",
      "B53 --\u003e B54",
      "B53 --\u003e B61",
      "B54 --\u003e B55",
      "B54 --\u003e B56",
      "B55 --\u003e B56",
      "B55 --\u003e B61",
      "B56 --\u003e B57",
      "B56 --\u003e B58",
      "B57 --\u003e B58",
      "B57 --\u003e B61",
      "B58 --\u003e B59",
      "B58 --\u003e B60",
      "B59 --\u003e B60",
      "B59 --\u003e B61",
      "B60 --\u003e [EXIT]",
      "B61 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "toBooleanObject",
    "signature": "java.lang.Boolean toBooleanObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        if (trueString \u003d\u003d null) {\r\n            return Boolean.TRUE;\r\n        }\r\n        if (falseString \u003d\u003d null) {\r\n            return Boolean.FALSE;\r\n        }\r\n        if (nullString \u003d\u003d null) {\r\n            return null;\r\n        }\r\n    } else if (str.equals(trueString)) {\r\n        return Boolean.TRUE;\r\n    } else if (str.equals(falseString)) {\r\n        return Boolean.FALSE;\r\n    } else if (str.equals(nullString)) {\r\n        return null;\r\n    }\r\n    // no match\r\n    throw new IllegalArgumentException(\"The String did not match any specified value\");\r\n}",
    "nodes": 14,
    "edges": 14,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B7",
      "B1 : If(r1 !\u003d null) → B2 | else → B3",
      "B3 : If(r2 !\u003d null) → B4 | else → B5",
      "B5 : If(r3 !\u003d null) → B6 | else → B13",
      "B7 : If($z0 \u003d\u003d false) → B8 | else → B9",
      "B9 : If($z1 \u003d\u003d false) → B10 | else → B11",
      "B11 : If($z2 \u003d\u003d false) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  String\n  String\n  if (r0 !\u003d null) goto B1 else B7\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r8 \u003d Boolean TRUE\u003e\n  return\n}",
      "B3 {\n  if (r2 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r7 \u003d Boolean FALSE\u003e\n  return\n}",
      "B5 {\n  if (r3 !\u003d null) goto B6 else B13\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $z0 \u003d r0.equals(r1)\n  if ($z0 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $r6 \u003d Boolean TRUE\u003e\n  return\n}",
      "B9 {\n  $z1 \u003d r0.equals(r2)\n  if ($z1 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  $r5 \u003d Boolean FALSE\u003e\n  return\n}",
      "B11 {\n  $z2 \u003d r0.equals(r3)\n  if ($z2 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  return\n}",
      "B13 {\n  $r4 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"The String did not match any specified value\")\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B7",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B13",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "toInteger",
    "signature": "int toInteger(boolean)",
    "visibility": "public",
    "body": "{\r\n    return bool ? 1 : 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  z0 :\u003d @parameter0: boolean\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $b0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $b0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "toInteger",
    "signature": "int toInteger(boolean,int,int)",
    "visibility": "public",
    "body": "{\r\n    return bool ? trueValue : falseValue;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  z0 :\u003d @parameter0: boolean\n  i1 :\u003d @parameter1: int\n  i0 :\u003d @parameter2: int\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $i2 \u003d i1\n  goto B3\n}",
      "B2 {\n  $i2 \u003d i0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "toInteger",
    "signature": "int toInteger(java.lang.Boolean,int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (bool \u003d\u003d null) {\r\n        return nullValue;\r\n    }\r\n    return bool.booleanValue() ? trueValue : falseValue;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Boolean\n  i1 :\u003d @parameter1: int\n  i0 :\u003d @parameter2: int\n  i2 :\u003d @parameter3: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r0.booleanValue()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $i3 \u003d i1\n  goto B5\n}",
      "B4 {\n  $i3 \u003d i0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "toIntegerObject",
    "signature": "java.lang.Integer toIntegerObject(boolean)",
    "visibility": "public",
    "body": "{\r\n    return bool ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  z0 :\u003d @parameter0: boolean\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r0 \u003d Integer INTEGER_ONE\u003e\n  goto B3\n}",
      "B2 {\n  $r0 \u003d Integer INTEGER_ZERO\u003e\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "toIntegerObject",
    "signature": "java.lang.Integer toIntegerObject(boolean,java.lang.Integer,java.lang.Integer)",
    "visibility": "public",
    "body": "{\r\n    return bool ? trueValue : falseValue;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  z0 :\u003d @parameter0: boolean\n  Integer\n  Integer\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "toIntegerObject",
    "signature": "java.lang.Integer toIntegerObject(java.lang.Boolean)",
    "visibility": "public",
    "body": "{\r\n    return bool ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Boolean\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r0.booleanValue()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d Integer INTEGER_ONE\u003e\n  goto B5\n}",
      "B4 {\n  $r1 \u003d Integer INTEGER_ZERO\u003e\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "toIntegerObject",
    "signature": "java.lang.Integer toIntegerObject(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer)",
    "visibility": "public",
    "body": "{\r\n    if (bool \u003d\u003d null) {\r\n        return nullValue;\r\n    }\r\n    return bool.booleanValue() ? trueValue : falseValue;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Boolean\n  Integer\n  Integer\n  Integer\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r0.booleanValue()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d r2\n  goto B5\n}",
      "B4 {\n  $r4 \u003d r1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "toString",
    "signature": "java.lang.String toString(boolean,java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return bool ? trueString : falseString;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  z0 :\u003d @parameter0: boolean\n  String\n  String\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "toString",
    "signature": "java.lang.String toString(java.lang.Boolean,java.lang.String,java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (bool \u003d\u003d null) {\r\n        return nullString;\r\n    }\r\n    return bool.booleanValue() ? trueString : falseString;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Boolean\n  String\n  String\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r0.booleanValue()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d r2\n  goto B5\n}",
      "B4 {\n  $r4 \u003d r1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "xor",
    "signature": "boolean xor(boolean[])",
    "visibility": "public",
    "body": "{\r\n    ObjectUtils.requireNonEmpty(array, \"array\");\r\n    // false if the neutral element of the xor operator\r\n    boolean result \u003d false;\r\n    for (final boolean element : array) {\r\n        result ^\u003d element;\r\n    }\r\n    return result;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  ObjectUtils.requireNonEmpty(r0, \"array\")\n  z1 \u003d 0\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  z0 \u003d r0[i1]\n  z1 \u003d z1 ^ z0\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.BooleanUtils",
    "methodName": "xor",
    "signature": "java.lang.Boolean xor(java.lang.Boolean[])",
    "visibility": "public",
    "body": "{\r\n    ObjectUtils.requireNonEmpty(array, \"array\");\r\n    // false if the neutral element of the xor operator\r\n    boolean result \u003d false;\r\n    for (final boolean element : array) {\r\n        result ^\u003d element;\r\n    }\r\n    return result;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Boolean[]\n  ObjectUtils.requireNonEmpty(r0, \"array\")\n  $r1 \u003d ArrayUtils.toPrimitive(r0)\n  $z0 \u003d BooleanUtils.xor($r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Boolean TRUE\u003e\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Boolean FALSE\u003e\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.CompareToBuilder",
    "methodName": "reflectionCompare",
    "signature": "int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    if (lhs \u003d\u003d rhs) {\r\n        return 0;\r\n    }\r\n    Objects.requireNonNull(lhs, \"lhs\");\r\n    Objects.requireNonNull(rhs, \"rhs\");\r\n    Class\u003c?\u003e lhsClazz \u003d lhs.getClass();\r\n    if (!lhsClazz.isInstance(rhs)) {\r\n        throw new ClassCastException();\r\n    }\r\n    final CompareToBuilder compareToBuilder \u003d new CompareToBuilder();\r\n    reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);\r\n    while (lhsClazz.getSuperclass() !\u003d null \u0026\u0026 lhsClazz !\u003d reflectUpToClass) {\r\n        lhsClazz \u003d lhsClazz.getSuperclass();\r\n        reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);\r\n    }\r\n    return compareToBuilder.toComparison();\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B5 : If($r4 \u003d\u003d null) → B6 | else → B8",
      "B6 : If(r7 \u003d\u003d r5) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  Object\n  Object\n  z1 :\u003d @parameter2: boolean\n  Class\n  String[]\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  Objects.requireNonNull(r0, \"lhs\")\n  Objects.requireNonNull(r1, \"rhs\")\n  r7 \u003d r0.getClass()\n  $z0 \u003d r7.isInstance(r1)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d ClassCastException\n  new ClassCastException()\n  throw $r6\n}",
      "B4 {\n  $r2 \u003d CompareToBuilder\n  new CompareToBuilder()\n  CompareToBuilder.reflectionAppend(r0, r1, r7, $r2, z1, r3)\n}",
      "B5 {\n  $r4 \u003d r7.getSuperclass()\n  if ($r4 \u003d\u003d null) goto B6 else B8\n}",
      "B6 {\n  if (r7 \u003d\u003d r5) goto B7 else B8\n}",
      "B7 {\n  r7 \u003d r7.getSuperclass()\n  CompareToBuilder.reflectionAppend(r0, r1, r7, $r2, z1, r3)\n  goto B5\n}",
      "B8 {\n  $i0 \u003d $r2.toComparison()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B5",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CompareToBuilder#reflectionAppend(...6)",
        "body": "{\r\n    final Field[] fields \u003d clazz.getDeclaredFields();\r\n    AccessibleObject.setAccessible(fields, true);\r\n    for (int i \u003d 0; i \u003c fields.length \u0026\u0026 builder.comparison \u003d\u003d 0; i++) {\r\n        final Field field \u003d fields[i];\r\n        if (!ArrayUtils.contains(excludeFields, field.getName()) \u0026\u0026 !field.getName().contains(\"$\") \u0026\u0026 (useTransients || !Modifier.isTransient(field.getModifiers())) \u0026\u0026 !Modifier.isStatic(field.getModifiers())) {\r\n            // IllegalAccessException can\u0027t happen. Would get a Security exception instead.\r\n            // Throw a runtime exception in case the impossible happens.\r\n            builder.append(Reflection.getUnchecked(field, lhs), Reflection.getUnchecked(field, rhs));\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.CompareToBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.CompareToBuilder append(boolean,boolean)",
    "visibility": "public",
    "body": "{\r\n    if (comparison !\u003d 0) {\r\n        return this;\r\n    }\r\n    if (lhs \u003d\u003d rhs) {\r\n        return this;\r\n    }\r\n    if (lhs) {\r\n        comparison \u003d 1;\r\n    } else {\r\n        comparison \u003d -1;\r\n    }\r\n    return this;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(z0 !\u003d z1) → B3 | else → B4",
      "B4 : If(z0 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CompareToBuilder\n  z0 :\u003d @parameter0: boolean\n  z1 :\u003d @parameter1: boolean\n  $i0 \u003d CompareToBuilder: int comparison\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (z0 !\u003d z1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (z0 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  CompareToBuilder: int comparison\u003e \u003d 1\n  goto B7\n}",
      "B6 {\n  $i2 \u003d (int) -1\n  CompareToBuilder: int comparison\u003e \u003d $i2\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.CompareToBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.CompareToBuilder append(boolean[],boolean[])",
    "visibility": "public",
    "body": "{\r\n    if (comparison !\u003d 0) {\r\n        return this;\r\n    }\r\n    if (lhs \u003d\u003d rhs) {\r\n        return this;\r\n    }\r\n    if (lhs) {\r\n        comparison \u003d 1;\r\n    } else {\r\n        comparison \u003d -1;\r\n    }\r\n    return this;\r\n}",
    "nodes": 18,
    "edges": 20,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r1 !\u003d r2) → B3 | else → B4",
      "B4 : If(r1 !\u003d null) → B5 | else → B6",
      "B6 : If(r2 !\u003d null) → B7 | else → B8",
      "B8 : If($i2 \u003d\u003d $i1) → B9 | else → B13",
      "B9 : If($i6 \u003e\u003d $i5) → B10 | else → B11",
      "B14 : If(i8 \u003e\u003d $i3) → B15 | else → B17",
      "B15 : If($i4 !\u003d 0) → B16 | else → B17"
    ],
    "blockList": [
      "B0 {\n  CompareToBuilder\n  r1 :\u003d @parameter0: boolean[]\n  r2 :\u003d @parameter1: boolean[]\n  $i0 \u003d CompareToBuilder: int comparison\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d r2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r1 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $i10 \u003d (int) -1\n  CompareToBuilder: int comparison\u003e \u003d $i10\n  return\n}",
      "B6 {\n  if (r2 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  CompareToBuilder: int comparison\u003e \u003d 1\n  return\n}",
      "B8 {\n  $i2 \u003d lengthof r1\n  $i1 \u003d lengthof r2\n  if ($i2 \u003d\u003d $i1) goto B9 else B13\n}",
      "B9 {\n  $i6 \u003d lengthof r1\n  $i5 \u003d lengthof r2\n  if ($i6 \u003e\u003d $i5) goto B10 else B11\n}",
      "B10 {\n  $b7 \u003d -1\n  goto B12\n}",
      "B11 {\n  $b7 \u003d 1\n}",
      "B12 {\n  CompareToBuilder: int comparison\u003e \u003d $b7\n  return\n}",
      "B13 {\n  i8 \u003d 0\n}",
      "B14 {\n  $i3 \u003d lengthof r1\n  if (i8 \u003e\u003d $i3) goto B15 else B17\n}",
      "B15 {\n  $i4 \u003d CompareToBuilder: int comparison\u003e\n  if ($i4 !\u003d 0) goto B16 else B17\n}",
      "B16 {\n  $z1 \u003d r1[i8]\n  $z0 \u003d r2[i8]\n  r0.append($z1, $z0)\n  i8 \u003d i8 + 1\n  goto B14\n}",
      "B17 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B17",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B14",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.CompareToBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.CompareToBuilder append(byte,byte)",
    "visibility": "public",
    "body": "{\r\n    if (comparison !\u003d 0) {\r\n        return this;\r\n    }\r\n    comparison \u003d Byte.compare(lhs, rhs);\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CompareToBuilder\n  b1 :\u003d @parameter0: byte\n  b2 :\u003d @parameter1: byte\n  $i0 \u003d CompareToBuilder: int comparison\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i3 \u003d Byte.compare(b1, b2)\n  CompareToBuilder: int comparison\u003e \u003d $i3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.CompareToBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.CompareToBuilder append(byte[],byte[])",
    "visibility": "public",
    "body": "{\r\n    if (comparison !\u003d 0) {\r\n        return this;\r\n    }\r\n    comparison \u003d Byte.compare(lhs, rhs);\r\n    return this;\r\n}",
    "nodes": 18,
    "edges": 20,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r1 !\u003d r2) → B3 | else → B4",
      "B4 : If(r1 !\u003d null) → B5 | else → B6",
      "B6 : If(r2 !\u003d null) → B7 | else → B8",
      "B8 : If($i2 \u003d\u003d $i1) → B9 | else → B13",
      "B9 : If($i8 \u003e\u003d $i7) → B10 | else → B11",
      "B14 : If(i10 \u003e\u003d $i3) → B15 | else → B17",
      "B15 : If($i4 !\u003d 0) → B16 | else → B17"
    ],
    "blockList": [
      "B0 {\n  CompareToBuilder\n  r1 :\u003d @parameter0: byte[]\n  r2 :\u003d @parameter1: byte[]\n  $i0 \u003d CompareToBuilder: int comparison\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d r2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r1 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $i12 \u003d (int) -1\n  CompareToBuilder: int comparison\u003e \u003d $i12\n  return\n}",
      "B6 {\n  if (r2 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  CompareToBuilder: int comparison\u003e \u003d 1\n  return\n}",
      "B8 {\n  $i2 \u003d lengthof r1\n  $i1 \u003d lengthof r2\n  if ($i2 \u003d\u003d $i1) goto B9 else B13\n}",
      "B9 {\n  $i8 \u003d lengthof r1\n  $i7 \u003d lengthof r2\n  if ($i8 \u003e\u003d $i7) goto B10 else B11\n}",
      "B10 {\n  $b9 \u003d -1\n  goto B12\n}",
      "B11 {\n  $b9 \u003d 1\n}",
      "B12 {\n  CompareToBuilder: int comparison\u003e \u003d $b9\n  return\n}",
      "B13 {\n  i10 \u003d 0\n}",
      "B14 {\n  $i3 \u003d lengthof r1\n  if (i10 \u003e\u003d $i3) goto B15 else B17\n}",
      "B15 {\n  $i4 \u003d CompareToBuilder: int comparison\u003e\n  if ($i4 !\u003d 0) goto B16 else B17\n}",
      "B16 {\n  $b6 \u003d r1[i10]\n  $b5 \u003d r2[i10]\n  r0.append($b6, $b5)\n  i10 \u003d i10 + 1\n  goto B14\n}",
      "B17 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B17",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B14",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.CompareToBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.CompareToBuilder append(char,char)",
    "visibility": "public",
    "body": "{\r\n    if (comparison !\u003d 0) {\r\n        return this;\r\n    }\r\n    comparison \u003d Character.compare(lhs, rhs);\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CompareToBuilder\n  c1 :\u003d @parameter0: char\n  c2 :\u003d @parameter1: char\n  $i0 \u003d CompareToBuilder: int comparison\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i3 \u003d Character.compare(c1, c2)\n  CompareToBuilder: int comparison\u003e \u003d $i3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.CompareToBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.CompareToBuilder append(char[],char[])",
    "visibility": "public",
    "body": "{\r\n    if (comparison !\u003d 0) {\r\n        return this;\r\n    }\r\n    comparison \u003d Character.compare(lhs, rhs);\r\n    return this;\r\n}",
    "nodes": 18,
    "edges": 20,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r1 !\u003d r2) → B3 | else → B4",
      "B4 : If(r1 !\u003d null) → B5 | else → B6",
      "B6 : If(r2 !\u003d null) → B7 | else → B8",
      "B8 : If($i2 \u003d\u003d $i1) → B9 | else → B13",
      "B9 : If($i8 \u003e\u003d $i7) → B10 | else → B11",
      "B14 : If(i10 \u003e\u003d $i3) → B15 | else → B17",
      "B15 : If($i4 !\u003d 0) → B16 | else → B17"
    ],
    "blockList": [
      "B0 {\n  CompareToBuilder\n  r1 :\u003d @parameter0: char[]\n  r2 :\u003d @parameter1: char[]\n  $i0 \u003d CompareToBuilder: int comparison\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d r2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r1 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $i12 \u003d (int) -1\n  CompareToBuilder: int comparison\u003e \u003d $i12\n  return\n}",
      "B6 {\n  if (r2 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  CompareToBuilder: int comparison\u003e \u003d 1\n  return\n}",
      "B8 {\n  $i2 \u003d lengthof r1\n  $i1 \u003d lengthof r2\n  if ($i2 \u003d\u003d $i1) goto B9 else B13\n}",
      "B9 {\n  $i8 \u003d lengthof r1\n  $i7 \u003d lengthof r2\n  if ($i8 \u003e\u003d $i7) goto B10 else B11\n}",
      "B10 {\n  $b9 \u003d -1\n  goto B12\n}",
      "B11 {\n  $b9 \u003d 1\n}",
      "B12 {\n  CompareToBuilder: int comparison\u003e \u003d $b9\n  return\n}",
      "B13 {\n  i10 \u003d 0\n}",
      "B14 {\n  $i3 \u003d lengthof r1\n  if (i10 \u003e\u003d $i3) goto B15 else B17\n}",
      "B15 {\n  $i4 \u003d CompareToBuilder: int comparison\u003e\n  if ($i4 !\u003d 0) goto B16 else B17\n}",
      "B16 {\n  $c6 \u003d r1[i10]\n  $c5 \u003d r2[i10]\n  r0.append($c6, $c5)\n  i10 \u003d i10 + 1\n  goto B14\n}",
      "B17 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B17",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B14",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.CompareToBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.CompareToBuilder append(double,double)",
    "visibility": "public",
    "body": "{\r\n    if (comparison !\u003d 0) {\r\n        return this;\r\n    }\r\n    comparison \u003d Double.compare(lhs, rhs);\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CompareToBuilder\n  d0 :\u003d @parameter0: double\n  d1 :\u003d @parameter1: double\n  $i0 \u003d CompareToBuilder: int comparison\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d Double.compare(d0, d1)\n  CompareToBuilder: int comparison\u003e \u003d $i1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.CompareToBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.CompareToBuilder append(double[],double[])",
    "visibility": "public",
    "body": "{\r\n    if (comparison !\u003d 0) {\r\n        return this;\r\n    }\r\n    comparison \u003d Double.compare(lhs, rhs);\r\n    return this;\r\n}",
    "nodes": 18,
    "edges": 20,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r1 !\u003d r2) → B3 | else → B4",
      "B4 : If(r1 !\u003d null) → B5 | else → B6",
      "B6 : If(r2 !\u003d null) → B7 | else → B8",
      "B8 : If($i2 \u003d\u003d $i1) → B9 | else → B13",
      "B9 : If($i6 \u003e\u003d $i5) → B10 | else → B11",
      "B14 : If(i8 \u003e\u003d $i3) → B15 | else → B17",
      "B15 : If($i4 !\u003d 0) → B16 | else → B17"
    ],
    "blockList": [
      "B0 {\n  CompareToBuilder\n  r1 :\u003d @parameter0: double[]\n  r2 :\u003d @parameter1: double[]\n  $i0 \u003d CompareToBuilder: int comparison\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d r2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r1 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $i10 \u003d (int) -1\n  CompareToBuilder: int comparison\u003e \u003d $i10\n  return\n}",
      "B6 {\n  if (r2 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  CompareToBuilder: int comparison\u003e \u003d 1\n  return\n}",
      "B8 {\n  $i2 \u003d lengthof r1\n  $i1 \u003d lengthof r2\n  if ($i2 \u003d\u003d $i1) goto B9 else B13\n}",
      "B9 {\n  $i6 \u003d lengthof r1\n  $i5 \u003d lengthof r2\n  if ($i6 \u003e\u003d $i5) goto B10 else B11\n}",
      "B10 {\n  $b7 \u003d -1\n  goto B12\n}",
      "B11 {\n  $b7 \u003d 1\n}",
      "B12 {\n  CompareToBuilder: int comparison\u003e \u003d $b7\n  return\n}",
      "B13 {\n  i8 \u003d 0\n}",
      "B14 {\n  $i3 \u003d lengthof r1\n  if (i8 \u003e\u003d $i3) goto B15 else B17\n}",
      "B15 {\n  $i4 \u003d CompareToBuilder: int comparison\u003e\n  if ($i4 !\u003d 0) goto B16 else B17\n}",
      "B16 {\n  $d1 \u003d r1[i8]\n  $d0 \u003d r2[i8]\n  r0.append($d1, $d0)\n  i8 \u003d i8 + 1\n  goto B14\n}",
      "B17 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B17",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B14",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.CompareToBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.CompareToBuilder append(float,float)",
    "visibility": "public",
    "body": "{\r\n    if (comparison !\u003d 0) {\r\n        return this;\r\n    }\r\n    comparison \u003d Float.compare(lhs, rhs);\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CompareToBuilder\n  f0 :\u003d @parameter0: float\n  f1 :\u003d @parameter1: float\n  $i0 \u003d CompareToBuilder: int comparison\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d Float.compare(f0, f1)\n  CompareToBuilder: int comparison\u003e \u003d $i1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.CompareToBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.CompareToBuilder append(float[],float[])",
    "visibility": "public",
    "body": "{\r\n    if (comparison !\u003d 0) {\r\n        return this;\r\n    }\r\n    comparison \u003d Float.compare(lhs, rhs);\r\n    return this;\r\n}",
    "nodes": 18,
    "edges": 20,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r1 !\u003d r2) → B3 | else → B4",
      "B4 : If(r1 !\u003d null) → B5 | else → B6",
      "B6 : If(r2 !\u003d null) → B7 | else → B8",
      "B8 : If($i2 \u003d\u003d $i1) → B9 | else → B13",
      "B9 : If($i6 \u003e\u003d $i5) → B10 | else → B11",
      "B14 : If(i8 \u003e\u003d $i3) → B15 | else → B17",
      "B15 : If($i4 !\u003d 0) → B16 | else → B17"
    ],
    "blockList": [
      "B0 {\n  CompareToBuilder\n  r1 :\u003d @parameter0: float[]\n  r2 :\u003d @parameter1: float[]\n  $i0 \u003d CompareToBuilder: int comparison\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d r2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r1 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $i10 \u003d (int) -1\n  CompareToBuilder: int comparison\u003e \u003d $i10\n  return\n}",
      "B6 {\n  if (r2 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  CompareToBuilder: int comparison\u003e \u003d 1\n  return\n}",
      "B8 {\n  $i2 \u003d lengthof r1\n  $i1 \u003d lengthof r2\n  if ($i2 \u003d\u003d $i1) goto B9 else B13\n}",
      "B9 {\n  $i6 \u003d lengthof r1\n  $i5 \u003d lengthof r2\n  if ($i6 \u003e\u003d $i5) goto B10 else B11\n}",
      "B10 {\n  $b7 \u003d -1\n  goto B12\n}",
      "B11 {\n  $b7 \u003d 1\n}",
      "B12 {\n  CompareToBuilder: int comparison\u003e \u003d $b7\n  return\n}",
      "B13 {\n  i8 \u003d 0\n}",
      "B14 {\n  $i3 \u003d lengthof r1\n  if (i8 \u003e\u003d $i3) goto B15 else B17\n}",
      "B15 {\n  $i4 \u003d CompareToBuilder: int comparison\u003e\n  if ($i4 !\u003d 0) goto B16 else B17\n}",
      "B16 {\n  $f1 \u003d r1[i8]\n  $f0 \u003d r2[i8]\n  r0.append($f1, $f0)\n  i8 \u003d i8 + 1\n  goto B14\n}",
      "B17 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B17",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B14",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.CompareToBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.CompareToBuilder append(int,int)",
    "visibility": "public",
    "body": "{\r\n    if (comparison !\u003d 0) {\r\n        return this;\r\n    }\r\n    comparison \u003d Integer.compare(lhs, rhs);\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CompareToBuilder\n  i1 :\u003d @parameter0: int\n  i2 :\u003d @parameter1: int\n  $i0 \u003d CompareToBuilder: int comparison\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i3 \u003d Integer.compare(i1, i2)\n  CompareToBuilder: int comparison\u003e \u003d $i3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.CompareToBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.CompareToBuilder append(int[],int[])",
    "visibility": "public",
    "body": "{\r\n    if (comparison !\u003d 0) {\r\n        return this;\r\n    }\r\n    comparison \u003d Integer.compare(lhs, rhs);\r\n    return this;\r\n}",
    "nodes": 18,
    "edges": 20,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r1 !\u003d r2) → B3 | else → B4",
      "B4 : If(r1 !\u003d null) → B5 | else → B6",
      "B6 : If(r2 !\u003d null) → B7 | else → B8",
      "B8 : If($i2 \u003d\u003d $i1) → B9 | else → B13",
      "B9 : If($i8 \u003e\u003d $i7) → B10 | else → B11",
      "B14 : If(i10 \u003e\u003d $i3) → B15 | else → B17",
      "B15 : If($i4 !\u003d 0) → B16 | else → B17"
    ],
    "blockList": [
      "B0 {\n  CompareToBuilder\n  r1 :\u003d @parameter0: int[]\n  r2 :\u003d @parameter1: int[]\n  $i0 \u003d CompareToBuilder: int comparison\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d r2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r1 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $i12 \u003d (int) -1\n  CompareToBuilder: int comparison\u003e \u003d $i12\n  return\n}",
      "B6 {\n  if (r2 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  CompareToBuilder: int comparison\u003e \u003d 1\n  return\n}",
      "B8 {\n  $i2 \u003d lengthof r1\n  $i1 \u003d lengthof r2\n  if ($i2 \u003d\u003d $i1) goto B9 else B13\n}",
      "B9 {\n  $i8 \u003d lengthof r1\n  $i7 \u003d lengthof r2\n  if ($i8 \u003e\u003d $i7) goto B10 else B11\n}",
      "B10 {\n  $b9 \u003d -1\n  goto B12\n}",
      "B11 {\n  $b9 \u003d 1\n}",
      "B12 {\n  CompareToBuilder: int comparison\u003e \u003d $b9\n  return\n}",
      "B13 {\n  i10 \u003d 0\n}",
      "B14 {\n  $i3 \u003d lengthof r1\n  if (i10 \u003e\u003d $i3) goto B15 else B17\n}",
      "B15 {\n  $i4 \u003d CompareToBuilder: int comparison\u003e\n  if ($i4 !\u003d 0) goto B16 else B17\n}",
      "B16 {\n  $i6 \u003d r1[i10]\n  $i5 \u003d r2[i10]\n  r0.append($i6, $i5)\n  i10 \u003d i10 + 1\n  goto B14\n}",
      "B17 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B17",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B14",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.CompareToBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.CompareToBuilder append(long,long)",
    "visibility": "public",
    "body": "{\r\n    if (comparison !\u003d 0) {\r\n        return this;\r\n    }\r\n    comparison \u003d Long.compare(lhs, rhs);\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CompareToBuilder\n  l1 :\u003d @parameter0: long\n  l2 :\u003d @parameter1: long\n  $i0 \u003d CompareToBuilder: int comparison\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i3 \u003d Long.compare(l1, l2)\n  CompareToBuilder: int comparison\u003e \u003d $i3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.CompareToBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.CompareToBuilder append(long[],long[])",
    "visibility": "public",
    "body": "{\r\n    if (comparison !\u003d 0) {\r\n        return this;\r\n    }\r\n    comparison \u003d Long.compare(lhs, rhs);\r\n    return this;\r\n}",
    "nodes": 18,
    "edges": 20,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r1 !\u003d r2) → B3 | else → B4",
      "B4 : If(r1 !\u003d null) → B5 | else → B6",
      "B6 : If(r2 !\u003d null) → B7 | else → B8",
      "B8 : If($i2 \u003d\u003d $i1) → B9 | else → B13",
      "B9 : If($i8 \u003e\u003d $i7) → B10 | else → B11",
      "B14 : If(i10 \u003e\u003d $i3) → B15 | else → B17",
      "B15 : If($i4 !\u003d 0) → B16 | else → B17"
    ],
    "blockList": [
      "B0 {\n  CompareToBuilder\n  r1 :\u003d @parameter0: long[]\n  r2 :\u003d @parameter1: long[]\n  $i0 \u003d CompareToBuilder: int comparison\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d r2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r1 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $i12 \u003d (int) -1\n  CompareToBuilder: int comparison\u003e \u003d $i12\n  return\n}",
      "B6 {\n  if (r2 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  CompareToBuilder: int comparison\u003e \u003d 1\n  return\n}",
      "B8 {\n  $i2 \u003d lengthof r1\n  $i1 \u003d lengthof r2\n  if ($i2 \u003d\u003d $i1) goto B9 else B13\n}",
      "B9 {\n  $i8 \u003d lengthof r1\n  $i7 \u003d lengthof r2\n  if ($i8 \u003e\u003d $i7) goto B10 else B11\n}",
      "B10 {\n  $b9 \u003d -1\n  goto B12\n}",
      "B11 {\n  $b9 \u003d 1\n}",
      "B12 {\n  CompareToBuilder: int comparison\u003e \u003d $b9\n  return\n}",
      "B13 {\n  i10 \u003d 0\n}",
      "B14 {\n  $i3 \u003d lengthof r1\n  if (i10 \u003e\u003d $i3) goto B15 else B17\n}",
      "B15 {\n  $i4 \u003d CompareToBuilder: int comparison\u003e\n  if ($i4 !\u003d 0) goto B16 else B17\n}",
      "B16 {\n  $l6 \u003d r1[i10]\n  $l5 \u003d r2[i10]\n  r0.append($l6, $l5)\n  i10 \u003d i10 + 1\n  goto B14\n}",
      "B17 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B17",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B14",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.CompareToBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)",
    "visibility": "public",
    "body": "{\r\n    if (comparison !\u003d 0) {\r\n        return this;\r\n    }\r\n    if (lhs \u003d\u003d rhs) {\r\n        return this;\r\n    }\r\n    if (lhs \u003d\u003d null) {\r\n        comparison \u003d -1;\r\n        return this;\r\n    }\r\n    if (rhs \u003d\u003d null) {\r\n        comparison \u003d 1;\r\n        return this;\r\n    }\r\n    if (ObjectUtils.isArray(lhs)) {\r\n        // factor out array case in order to keep method small enough to be inlined\r\n        appendArray(lhs, rhs, comparator);\r\n    } else // the simple case, not an array, just test the element\r\n    if (comparator \u003d\u003d null) {\r\n        // assume this can be done; if not throw CCE as per Javadoc\r\n        @SuppressWarnings(\"unchecked\")\r\n        final Comparable\u003cObject\u003e comparable \u003d (Comparable\u003cObject\u003e) lhs;\r\n        comparison \u003d comparable.compareTo(rhs);\r\n    } else {\r\n        // assume this can be done; if not throw CCE as per Javadoc\r\n        @SuppressWarnings(\"unchecked\")\r\n        final Comparator\u003cObject\u003e comparator2 \u003d (Comparator\u003cObject\u003e) comparator;\r\n        comparison \u003d comparator2.compare(lhs, rhs);\r\n    }\r\n    return this;\r\n}",
    "nodes": 14,
    "edges": 15,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r1 !\u003d r2) → B3 | else → B4",
      "B4 : If(r1 !\u003d null) → B5 | else → B6",
      "B6 : If(r2 !\u003d null) → B7 | else → B8",
      "B8 : If($z0 \u003d\u003d false) → B9 | else → B10",
      "B10 : If(r3 !\u003d null) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  CompareToBuilder\n  Object\n  Object\n  Comparator\n  $i0 \u003d CompareToBuilder: int comparison\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d r2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r1 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $i4 \u003d (int) -1\n  CompareToBuilder: int comparison\u003e \u003d $i4\n  return\n}",
      "B6 {\n  if (r2 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  CompareToBuilder: int comparison\u003e \u003d 1\n  return\n}",
      "B8 {\n  $z0 \u003d ObjectUtils.isArray(r1)\n  if ($z0 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  r0.appendArray(r1, r2, r3)\n  goto B13\n}",
      "B10 {\n  if (r3 !\u003d null) goto B11 else B12\n}",
      "B11 {\n  r4 \u003d Comparable) r1\n  $i2 \u003d r4.compareTo(r2)\n  CompareToBuilder: int comparison\u003e \u003d $i2\n  goto B13\n}",
      "B12 {\n  $i1 \u003d r3.compare(r1, r2)\n  CompareToBuilder: int comparison\u003e \u003d $i1\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B13",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CompareToBuilder#appendArray(...3)",
        "body": "{\r\n    // switch on type of array, to dispatch to the correct handler\r\n    // handles multidimensional arrays\r\n    // throws a ClassCastException if rhs is not the correct array type\r\n    if (lhs instanceof long[]) {\r\n        append((long[]) lhs, (long[]) rhs);\r\n    } else if (lhs instanceof int[]) {\r\n        append((int[]) lhs, (int[]) rhs);\r\n    } else if (lhs instanceof short[]) {\r\n        append((short[]) lhs, (short[]) rhs);\r\n    } else if (lhs instanceof char[]) {\r\n        append((char[]) lhs, (char[]) rhs);\r\n    } else if (lhs instanceof byte[]) {\r\n        append((byte[]) lhs, (byte[]) rhs);\r\n    } else if (lhs instanceof double[]) {\r\n        append((double[]) lhs, (double[]) rhs);\r\n    } else if (lhs instanceof float[]) {\r\n        append((float[]) lhs, (float[]) rhs);\r\n    } else if (lhs instanceof boolean[]) {\r\n        append((boolean[]) lhs, (boolean[]) rhs);\r\n    } else {\r\n        // not an array of primitives\r\n        // throws a ClassCastException if rhs is not an array\r\n        append((Object[]) lhs, (Object[]) rhs, comparator);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.CompareToBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[],java.util.Comparator)",
    "visibility": "public",
    "body": "{\r\n    if (comparison !\u003d 0) {\r\n        return this;\r\n    }\r\n    if (lhs \u003d\u003d rhs) {\r\n        return this;\r\n    }\r\n    if (lhs \u003d\u003d null) {\r\n        comparison \u003d -1;\r\n        return this;\r\n    }\r\n    if (rhs \u003d\u003d null) {\r\n        comparison \u003d 1;\r\n        return this;\r\n    }\r\n    if (ObjectUtils.isArray(lhs)) {\r\n        // factor out array case in order to keep method small enough to be inlined\r\n        appendArray(lhs, rhs, comparator);\r\n    } else // the simple case, not an array, just test the element\r\n    if (comparator \u003d\u003d null) {\r\n        // assume this can be done; if not throw CCE as per Javadoc\r\n        @SuppressWarnings(\"unchecked\")\r\n        final Comparable\u003cObject\u003e comparable \u003d (Comparable\u003cObject\u003e) lhs;\r\n        comparison \u003d comparable.compareTo(rhs);\r\n    } else {\r\n        // assume this can be done; if not throw CCE as per Javadoc\r\n        @SuppressWarnings(\"unchecked\")\r\n        final Comparator\u003cObject\u003e comparator2 \u003d (Comparator\u003cObject\u003e) comparator;\r\n        comparison \u003d comparator2.compare(lhs, rhs);\r\n    }\r\n    return this;\r\n}",
    "nodes": 18,
    "edges": 20,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r1 !\u003d r2) → B3 | else → B4",
      "B4 : If(r1 !\u003d null) → B5 | else → B6",
      "B6 : If(r2 !\u003d null) → B7 | else → B8",
      "B8 : If($i2 \u003d\u003d $i1) → B9 | else → B13",
      "B9 : If($i6 \u003e\u003d $i5) → B10 | else → B11",
      "B14 : If(i8 \u003e\u003d $i3) → B15 | else → B17",
      "B15 : If($i4 !\u003d 0) → B16 | else → B17"
    ],
    "blockList": [
      "B0 {\n  CompareToBuilder\n  Object[]\n  Object[]\n  Comparator\n  $i0 \u003d CompareToBuilder: int comparison\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d r2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r1 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $i10 \u003d (int) -1\n  CompareToBuilder: int comparison\u003e \u003d $i10\n  return\n}",
      "B6 {\n  if (r2 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  CompareToBuilder: int comparison\u003e \u003d 1\n  return\n}",
      "B8 {\n  $i2 \u003d lengthof r1\n  $i1 \u003d lengthof r2\n  if ($i2 \u003d\u003d $i1) goto B9 else B13\n}",
      "B9 {\n  $i6 \u003d lengthof r1\n  $i5 \u003d lengthof r2\n  if ($i6 \u003e\u003d $i5) goto B10 else B11\n}",
      "B10 {\n  $b7 \u003d -1\n  goto B12\n}",
      "B11 {\n  $b7 \u003d 1\n}",
      "B12 {\n  CompareToBuilder: int comparison\u003e \u003d $b7\n  return\n}",
      "B13 {\n  i8 \u003d 0\n}",
      "B14 {\n  $i3 \u003d lengthof r1\n  if (i8 \u003e\u003d $i3) goto B15 else B17\n}",
      "B15 {\n  $i4 \u003d CompareToBuilder: int comparison\u003e\n  if ($i4 !\u003d 0) goto B16 else B17\n}",
      "B16 {\n  $r5 \u003d r1[i8]\n  $r4 \u003d r2[i8]\n  r0.append($r5, $r4, r3)\n  i8 \u003d i8 + 1\n  goto B14\n}",
      "B17 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B17",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B14",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CompareToBuilder#appendArray(...3)",
        "body": "{\r\n    // switch on type of array, to dispatch to the correct handler\r\n    // handles multidimensional arrays\r\n    // throws a ClassCastException if rhs is not the correct array type\r\n    if (lhs instanceof long[]) {\r\n        append((long[]) lhs, (long[]) rhs);\r\n    } else if (lhs instanceof int[]) {\r\n        append((int[]) lhs, (int[]) rhs);\r\n    } else if (lhs instanceof short[]) {\r\n        append((short[]) lhs, (short[]) rhs);\r\n    } else if (lhs instanceof char[]) {\r\n        append((char[]) lhs, (char[]) rhs);\r\n    } else if (lhs instanceof byte[]) {\r\n        append((byte[]) lhs, (byte[]) rhs);\r\n    } else if (lhs instanceof double[]) {\r\n        append((double[]) lhs, (double[]) rhs);\r\n    } else if (lhs instanceof float[]) {\r\n        append((float[]) lhs, (float[]) rhs);\r\n    } else if (lhs instanceof boolean[]) {\r\n        append((boolean[]) lhs, (boolean[]) rhs);\r\n    } else {\r\n        // not an array of primitives\r\n        // throws a ClassCastException if rhs is not an array\r\n        append((Object[]) lhs, (Object[]) rhs, comparator);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.CompareToBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.CompareToBuilder append(short,short)",
    "visibility": "public",
    "body": "{\r\n    if (comparison !\u003d 0) {\r\n        return this;\r\n    }\r\n    comparison \u003d Short.compare(lhs, rhs);\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CompareToBuilder\n  s1 :\u003d @parameter0: short\n  s2 :\u003d @parameter1: short\n  $i0 \u003d CompareToBuilder: int comparison\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i3 \u003d Short.compare(s1, s2)\n  CompareToBuilder: int comparison\u003e \u003d $i3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.CompareToBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.CompareToBuilder append(short[],short[])",
    "visibility": "public",
    "body": "{\r\n    if (comparison !\u003d 0) {\r\n        return this;\r\n    }\r\n    comparison \u003d Short.compare(lhs, rhs);\r\n    return this;\r\n}",
    "nodes": 18,
    "edges": 20,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r1 !\u003d r2) → B3 | else → B4",
      "B4 : If(r1 !\u003d null) → B5 | else → B6",
      "B6 : If(r2 !\u003d null) → B7 | else → B8",
      "B8 : If($i2 \u003d\u003d $i1) → B9 | else → B13",
      "B9 : If($i8 \u003e\u003d $i7) → B10 | else → B11",
      "B14 : If(i10 \u003e\u003d $i3) → B15 | else → B17",
      "B15 : If($i4 !\u003d 0) → B16 | else → B17"
    ],
    "blockList": [
      "B0 {\n  CompareToBuilder\n  r1 :\u003d @parameter0: short[]\n  r2 :\u003d @parameter1: short[]\n  $i0 \u003d CompareToBuilder: int comparison\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d r2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r1 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $i12 \u003d (int) -1\n  CompareToBuilder: int comparison\u003e \u003d $i12\n  return\n}",
      "B6 {\n  if (r2 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  CompareToBuilder: int comparison\u003e \u003d 1\n  return\n}",
      "B8 {\n  $i2 \u003d lengthof r1\n  $i1 \u003d lengthof r2\n  if ($i2 \u003d\u003d $i1) goto B9 else B13\n}",
      "B9 {\n  $i8 \u003d lengthof r1\n  $i7 \u003d lengthof r2\n  if ($i8 \u003e\u003d $i7) goto B10 else B11\n}",
      "B10 {\n  $b9 \u003d -1\n  goto B12\n}",
      "B11 {\n  $b9 \u003d 1\n}",
      "B12 {\n  CompareToBuilder: int comparison\u003e \u003d $b9\n  return\n}",
      "B13 {\n  i10 \u003d 0\n}",
      "B14 {\n  $i3 \u003d lengthof r1\n  if (i10 \u003e\u003d $i3) goto B15 else B17\n}",
      "B15 {\n  $i4 \u003d CompareToBuilder: int comparison\u003e\n  if ($i4 !\u003d 0) goto B16 else B17\n}",
      "B16 {\n  $s6 \u003d r1[i10]\n  $s5 \u003d r2[i10]\n  r0.append($s6, $s5)\n  i10 \u003d i10 + 1\n  goto B14\n}",
      "B17 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B17",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B14",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.CompareToBuilder",
    "methodName": "appendSuper",
    "signature": "org.apache.commons.lang3.builder.CompareToBuilder appendSuper(int)",
    "visibility": "public",
    "body": "{\r\n    if (comparison !\u003d 0) {\r\n        return this;\r\n    }\r\n    comparison \u003d superCompareTo;\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CompareToBuilder\n  i1 :\u003d @parameter0: int\n  $i0 \u003d CompareToBuilder: int comparison\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  CompareToBuilder: int comparison\u003e \u003d i1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.DiffBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,boolean,boolean)",
    "visibility": "public",
    "body": "{\r\n    return equals || lhs \u003d\u003d rhs ? this : add(fieldName, () -\u003e Boolean.valueOf(lhs), () -\u003e Boolean.valueOf(rhs), Boolean.class);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If(z1 !\u003d z2) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DiffBuilder\n  String\n  z1 :\u003d @parameter1: boolean\n  z2 :\u003d @parameter2: boolean\n  $z0 \u003d DiffBuilder: boolean equals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  if (z1 !\u003d z2) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r3 \u003d DiffBuilder$lambda_append_0__21.bootstrap$(z1)\n  $r2 \u003d DiffBuilder$lambda_append_1__22.bootstrap$(z2)\n  $r4 \u003d r0.add(r1, $r3, $r2, class \"Ljava/lang/Boolean;\")\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DiffBuilder#add(...4)",
        "body": "{\r\n    diffs.add(new SDiff\u003c\u003e(fieldName, left, right, type));\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.DiffBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,boolean[],boolean[])",
    "visibility": "public",
    "body": "{\r\n    return equals || lhs \u003d\u003d rhs ? this : add(fieldName, () -\u003e Boolean.valueOf(lhs), () -\u003e Boolean.valueOf(rhs), Boolean.class);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DiffBuilder\n  String\n  r1 :\u003d @parameter1: boolean[]\n  r2 :\u003d @parameter2: boolean[]\n  $z0 \u003d DiffBuilder: boolean equals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d Arrays.equals(r1, r2)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r5 \u003d DiffBuilder$lambda_append_2__23.bootstrap$(r1)\n  $r4 \u003d DiffBuilder$lambda_append_3__24.bootstrap$(r2)\n  $r6 \u003d r0.add(r3, $r5, $r4, class \"Ljava/lang/Boolean;\")\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DiffBuilder#add(...4)",
        "body": "{\r\n    diffs.add(new SDiff\u003c\u003e(fieldName, left, right, type));\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.DiffBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,byte,byte)",
    "visibility": "public",
    "body": "{\r\n    return equals || lhs \u003d\u003d rhs ? this : add(fieldName, () -\u003e Byte.valueOf(lhs), () -\u003e Byte.valueOf(rhs), Byte.class);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($i2 !\u003d $i3) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DiffBuilder\n  String\n  b0 :\u003d @parameter1: byte\n  b1 :\u003d @parameter2: byte\n  $z0 \u003d DiffBuilder: boolean equals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $i2 \u003d (int) b0\n  $i3 \u003d (int) b1\n  if ($i2 !\u003d $i3) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r3 \u003d DiffBuilder$lambda_append_4__25.bootstrap$(b0)\n  $r2 \u003d DiffBuilder$lambda_append_5__26.bootstrap$(b1)\n  $r4 \u003d r0.add(r1, $r3, $r2, class \"Ljava/lang/Byte;\")\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DiffBuilder#add(...4)",
        "body": "{\r\n    diffs.add(new SDiff\u003c\u003e(fieldName, left, right, type));\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.DiffBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,byte[],byte[])",
    "visibility": "public",
    "body": "{\r\n    return equals || lhs \u003d\u003d rhs ? this : add(fieldName, () -\u003e Byte.valueOf(lhs), () -\u003e Byte.valueOf(rhs), Byte.class);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DiffBuilder\n  String\n  r1 :\u003d @parameter1: byte[]\n  r2 :\u003d @parameter2: byte[]\n  $z0 \u003d DiffBuilder: boolean equals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d Arrays.equals(r1, r2)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r5 \u003d DiffBuilder$lambda_append_6__27.bootstrap$(r1)\n  $r4 \u003d DiffBuilder$lambda_append_7__28.bootstrap$(r2)\n  $r6 \u003d r0.add(r3, $r5, $r4, class \"Ljava/lang/Byte;\")\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DiffBuilder#add(...4)",
        "body": "{\r\n    diffs.add(new SDiff\u003c\u003e(fieldName, left, right, type));\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.DiffBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,char,char)",
    "visibility": "public",
    "body": "{\r\n    return equals || lhs \u003d\u003d rhs ? this : add(fieldName, () -\u003e Character.valueOf(lhs), () -\u003e Character.valueOf(rhs), Character.class);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($i2 !\u003d $i3) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DiffBuilder\n  String\n  c0 :\u003d @parameter1: char\n  c1 :\u003d @parameter2: char\n  $z0 \u003d DiffBuilder: boolean equals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $i2 \u003d (int) c0\n  $i3 \u003d (int) c1\n  if ($i2 !\u003d $i3) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r3 \u003d DiffBuilder$lambda_append_8__29.bootstrap$(c0)\n  $r2 \u003d DiffBuilder$lambda_append_9__30.bootstrap$(c1)\n  $r4 \u003d r0.add(r1, $r3, $r2, class \"Ljava/lang/Character;\")\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DiffBuilder#add(...4)",
        "body": "{\r\n    diffs.add(new SDiff\u003c\u003e(fieldName, left, right, type));\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.DiffBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,char[],char[])",
    "visibility": "public",
    "body": "{\r\n    return equals || lhs \u003d\u003d rhs ? this : add(fieldName, () -\u003e Character.valueOf(lhs), () -\u003e Character.valueOf(rhs), Character.class);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DiffBuilder\n  String\n  r1 :\u003d @parameter1: char[]\n  r2 :\u003d @parameter2: char[]\n  $z0 \u003d DiffBuilder: boolean equals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d Arrays.equals(r1, r2)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r5 \u003d DiffBuilder$lambda_append_10__31.bootstrap$(r1)\n  $r4 \u003d DiffBuilder$lambda_append_11__32.bootstrap$(r2)\n  $r6 \u003d r0.add(r3, $r5, $r4, class \"Ljava/lang/Character;\")\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DiffBuilder#add(...4)",
        "body": "{\r\n    diffs.add(new SDiff\u003c\u003e(fieldName, left, right, type));\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.DiffBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,org.apache.commons.lang3.builder.DiffResult)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(diffResult, \"diffResult\");\r\n    if (equals) {\r\n        return this;\r\n    }\r\n    diffResult.getDiffs().forEach(diff -\u003e append(fieldName + \".\" + diff.getFieldName(), diff.getLeft(), diff.getRight()));\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DiffBuilder\n  String\n  DiffResult\n  Objects.requireNonNull(r0, \"diffResult\")\n  $z0 \u003d DiffBuilder: boolean equals\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d r0.getDiffs()\n  $r3 \u003d DiffBuilder$lambda_append_12__33.bootstrap$(r1, r2)\n  $r4.forEach($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DiffBuilder#append(...3)",
        "body": "{\r\n    return equals || lhs \u003d\u003d rhs ? this : add(fieldName, () -\u003e Boolean.valueOf(lhs), () -\u003e Boolean.valueOf(rhs), Boolean.class);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.DiffBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,double,double)",
    "visibility": "public",
    "body": "{\r\n    return equals || Double.doubleToLongBits(lhs) \u003d\u003d Double.doubleToLongBits(rhs) ? this : add(fieldName, () -\u003e Double.valueOf(lhs), () -\u003e Double.valueOf(rhs), Double.class);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($b2 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DiffBuilder\n  String\n  d0 :\u003d @parameter1: double\n  d1 :\u003d @parameter2: double\n  $z0 \u003d DiffBuilder: boolean equals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $l1 \u003d Double.doubleToLongBits(d0)\n  $l0 \u003d Double.doubleToLongBits(d1)\n  $b2 \u003d $l1 cmp $l0\n  if ($b2 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r3 \u003d DiffBuilder$lambda_append_13__34.bootstrap$(d0)\n  $r2 \u003d DiffBuilder$lambda_append_14__35.bootstrap$(d1)\n  $r4 \u003d r0.add(r1, $r3, $r2, class \"Ljava/lang/Double;\")\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DiffBuilder#add(...4)",
        "body": "{\r\n    diffs.add(new SDiff\u003c\u003e(fieldName, left, right, type));\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.DiffBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,double[],double[])",
    "visibility": "public",
    "body": "{\r\n    return equals || Double.doubleToLongBits(lhs) \u003d\u003d Double.doubleToLongBits(rhs) ? this : add(fieldName, () -\u003e Double.valueOf(lhs), () -\u003e Double.valueOf(rhs), Double.class);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DiffBuilder\n  String\n  r1 :\u003d @parameter1: double[]\n  r2 :\u003d @parameter2: double[]\n  $z0 \u003d DiffBuilder: boolean equals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d Arrays.equals(r1, r2)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r5 \u003d DiffBuilder$lambda_append_15__36.bootstrap$(r1)\n  $r4 \u003d DiffBuilder$lambda_append_16__37.bootstrap$(r2)\n  $r6 \u003d r0.add(r3, $r5, $r4, class \"Ljava/lang/Double;\")\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DiffBuilder#add(...4)",
        "body": "{\r\n    diffs.add(new SDiff\u003c\u003e(fieldName, left, right, type));\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.DiffBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,float,float)",
    "visibility": "public",
    "body": "{\r\n    return equals || Float.floatToIntBits(lhs) \u003d\u003d Float.floatToIntBits(rhs) ? this : add(fieldName, () -\u003e Float.valueOf(lhs), () -\u003e Float.valueOf(rhs), Float.class);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($i1 !\u003d $i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DiffBuilder\n  String\n  f0 :\u003d @parameter1: float\n  f1 :\u003d @parameter2: float\n  $z0 \u003d DiffBuilder: boolean equals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d Float.floatToIntBits(f0)\n  $i0 \u003d Float.floatToIntBits(f1)\n  if ($i1 !\u003d $i0) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r3 \u003d DiffBuilder$lambda_append_17__38.bootstrap$(f0)\n  $r2 \u003d DiffBuilder$lambda_append_18__39.bootstrap$(f1)\n  $r4 \u003d r0.add(r1, $r3, $r2, class \"Ljava/lang/Float;\")\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DiffBuilder#add(...4)",
        "body": "{\r\n    diffs.add(new SDiff\u003c\u003e(fieldName, left, right, type));\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.DiffBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,float[],float[])",
    "visibility": "public",
    "body": "{\r\n    return equals || Float.floatToIntBits(lhs) \u003d\u003d Float.floatToIntBits(rhs) ? this : add(fieldName, () -\u003e Float.valueOf(lhs), () -\u003e Float.valueOf(rhs), Float.class);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DiffBuilder\n  String\n  r1 :\u003d @parameter1: float[]\n  r2 :\u003d @parameter2: float[]\n  $z0 \u003d DiffBuilder: boolean equals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d Arrays.equals(r1, r2)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r5 \u003d DiffBuilder$lambda_append_19__40.bootstrap$(r1)\n  $r4 \u003d DiffBuilder$lambda_append_20__41.bootstrap$(r2)\n  $r6 \u003d r0.add(r3, $r5, $r4, class \"Ljava/lang/Float;\")\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DiffBuilder#add(...4)",
        "body": "{\r\n    diffs.add(new SDiff\u003c\u003e(fieldName, left, right, type));\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.DiffBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,int,int)",
    "visibility": "public",
    "body": "{\r\n    return equals || lhs \u003d\u003d rhs ? this : add(fieldName, () -\u003e Integer.valueOf(lhs), () -\u003e Integer.valueOf(rhs), Integer.class);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If(i0 !\u003d i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DiffBuilder\n  String\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  $z0 \u003d DiffBuilder: boolean equals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  if (i0 !\u003d i1) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r3 \u003d DiffBuilder$lambda_append_21__42.bootstrap$(i0)\n  $r2 \u003d DiffBuilder$lambda_append_22__43.bootstrap$(i1)\n  $r4 \u003d r0.add(r1, $r3, $r2, class \"Ljava/lang/Integer;\")\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DiffBuilder#add(...4)",
        "body": "{\r\n    diffs.add(new SDiff\u003c\u003e(fieldName, left, right, type));\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.DiffBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,int[],int[])",
    "visibility": "public",
    "body": "{\r\n    return equals || lhs \u003d\u003d rhs ? this : add(fieldName, () -\u003e Integer.valueOf(lhs), () -\u003e Integer.valueOf(rhs), Integer.class);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DiffBuilder\n  String\n  r1 :\u003d @parameter1: int[]\n  r2 :\u003d @parameter2: int[]\n  $z0 \u003d DiffBuilder: boolean equals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d Arrays.equals(r1, r2)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r5 \u003d DiffBuilder$lambda_append_23__44.bootstrap$(r1)\n  $r4 \u003d DiffBuilder$lambda_append_24__45.bootstrap$(r2)\n  $r6 \u003d r0.add(r3, $r5, $r4, class \"Ljava/lang/Integer;\")\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DiffBuilder#add(...4)",
        "body": "{\r\n    diffs.add(new SDiff\u003c\u003e(fieldName, left, right, type));\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.DiffBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,long,long)",
    "visibility": "public",
    "body": "{\r\n    return equals || lhs \u003d\u003d rhs ? this : add(fieldName, () -\u003e Long.valueOf(lhs), () -\u003e Long.valueOf(rhs), Long.class);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($b2 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DiffBuilder\n  String\n  l0 :\u003d @parameter1: long\n  l1 :\u003d @parameter2: long\n  $z0 \u003d DiffBuilder: boolean equals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $b2 \u003d l0 cmp l1\n  if ($b2 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r3 \u003d DiffBuilder$lambda_append_25__46.bootstrap$(l0)\n  $r2 \u003d DiffBuilder$lambda_append_26__47.bootstrap$(l1)\n  $r4 \u003d r0.add(r1, $r3, $r2, class \"Ljava/lang/Long;\")\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DiffBuilder#add(...4)",
        "body": "{\r\n    diffs.add(new SDiff\u003c\u003e(fieldName, left, right, type));\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.DiffBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,long[],long[])",
    "visibility": "public",
    "body": "{\r\n    return equals || lhs \u003d\u003d rhs ? this : add(fieldName, () -\u003e Long.valueOf(lhs), () -\u003e Long.valueOf(rhs), Long.class);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DiffBuilder\n  String\n  r1 :\u003d @parameter1: long[]\n  r2 :\u003d @parameter2: long[]\n  $z0 \u003d DiffBuilder: boolean equals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d Arrays.equals(r1, r2)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r5 \u003d DiffBuilder$lambda_append_27__48.bootstrap$(r1)\n  $r4 \u003d DiffBuilder$lambda_append_28__49.bootstrap$(r2)\n  $r6 \u003d r0.add(r3, $r5, $r4, class \"Ljava/lang/Long;\")\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DiffBuilder#add(...4)",
        "body": "{\r\n    diffs.add(new SDiff\u003c\u003e(fieldName, left, right, type));\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.DiffBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (equals || lhs \u003d\u003d rhs) {\r\n        return this;\r\n    }\r\n    // rhs cannot be null, as lhs !\u003d rhs\r\n    final Object test \u003d lhs !\u003d null ? lhs : rhs;\r\n    if (ObjectUtils.isArray(test)) {\r\n        if (test instanceof boolean[]) {\r\n            return append(fieldName, (boolean[]) lhs, (boolean[]) rhs);\r\n        }\r\n        if (test instanceof byte[]) {\r\n            return append(fieldName, (byte[]) lhs, (byte[]) rhs);\r\n        }\r\n        if (test instanceof char[]) {\r\n            return append(fieldName, (char[]) lhs, (char[]) rhs);\r\n        }\r\n        if (test instanceof double[]) {\r\n            return append(fieldName, (double[]) lhs, (double[]) rhs);\r\n        }\r\n        if (test instanceof float[]) {\r\n            return append(fieldName, (float[]) lhs, (float[]) rhs);\r\n        }\r\n        if (test instanceof int[]) {\r\n            return append(fieldName, (int[]) lhs, (int[]) rhs);\r\n        }\r\n        if (test instanceof long[]) {\r\n            return append(fieldName, (long[]) lhs, (long[]) rhs);\r\n        }\r\n        if (test instanceof short[]) {\r\n            return append(fieldName, (short[]) lhs, (short[]) rhs);\r\n        }\r\n        return append(fieldName, (Object[]) lhs, (Object[]) rhs);\r\n    }\r\n    // Not array type\r\n    return Objects.equals(lhs, rhs) ? this : add(fieldName, () -\u003e lhs, () -\u003e rhs, Object.class);\r\n}",
    "nodes": 28,
    "edges": 30,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If(r1 !\u003d r2) → B2 | else → B3",
      "B3 : If(r1 \u003d\u003d null) → B4 | else → B5",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B24",
      "B7 : If($z3 \u003d\u003d false) → B8 | else → B9",
      "B9 : If($z4 \u003d\u003d false) → B10 | else → B11",
      "B11 : If($z5 \u003d\u003d false) → B12 | else → B13",
      "B13 : If($z6 \u003d\u003d false) → B14 | else → B15",
      "B15 : If($z7 \u003d\u003d false) → B16 | else → B17",
      "B17 : If($z8 \u003d\u003d false) → B18 | else → B19",
      "B19 : If($z9 \u003d\u003d false) → B20 | else → B21",
      "B21 : If($z10 \u003d\u003d false) → B22 | else → B23",
      "B24 : If($z2 \u003d\u003d false) → B25 | else → B26"
    ],
    "blockList": [
      "B0 {\n  DiffBuilder\n  String\n  Object\n  Object\n  $z0 \u003d DiffBuilder: boolean equals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  if (r1 !\u003d r2) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  if (r1 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r33 \u003d r1\n  goto B6\n}",
      "B5 {\n  $r33 \u003d r2\n}",
      "B6 {\n  $z1 \u003d ObjectUtils.isArray($r33)\n  if ($z1 \u003d\u003d false) goto B7 else B24\n}",
      "B7 {\n  $z3 \u003d $r33 instanceof boolean[]\n  if ($z3 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $r31 \u003d (boolean[]) r1\n  $r30 \u003d (boolean[]) r2\n  $r32 \u003d r0.append(r3, $r31, $r30)\n  return\n}",
      "B9 {\n  $z4 \u003d $r33 instanceof byte[]\n  if ($z4 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  $r28 \u003d (byte[]) r1\n  $r27 \u003d (byte[]) r2\n  $r29 \u003d r0.append(r3, $r28, $r27)\n  return\n}",
      "B11 {\n  $z5 \u003d $r33 instanceof char[]\n  if ($z5 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $r25 \u003d (char[]) r1\n  $r24 \u003d (char[]) r2\n  $r26 \u003d r0.append(r3, $r25, $r24)\n  return\n}",
      "B13 {\n  $z6 \u003d $r33 instanceof double[]\n  if ($z6 \u003d\u003d false) goto B14 else B15\n}",
      "B14 {\n  $r22 \u003d (double[]) r1\n  $r21 \u003d (double[]) r2\n  $r23 \u003d r0.append(r3, $r22, $r21)\n  return\n}",
      "B15 {\n  $z7 \u003d $r33 instanceof float[]\n  if ($z7 \u003d\u003d false) goto B16 else B17\n}",
      "B16 {\n  $r19 \u003d (float[]) r1\n  $r18 \u003d (float[]) r2\n  $r20 \u003d r0.append(r3, $r19, $r18)\n  return\n}",
      "B17 {\n  $z8 \u003d $r33 instanceof int[]\n  if ($z8 \u003d\u003d false) goto B18 else B19\n}",
      "B18 {\n  $r16 \u003d (int[]) r1\n  $r15 \u003d (int[]) r2\n  $r17 \u003d r0.append(r3, $r16, $r15)\n  return\n}",
      "B19 {\n  $z9 \u003d $r33 instanceof long[]\n  if ($z9 \u003d\u003d false) goto B20 else B21\n}",
      "B20 {\n  $r13 \u003d (long[]) r1\n  $r12 \u003d (long[]) r2\n  $r14 \u003d r0.append(r3, $r13, $r12)\n  return\n}",
      "B21 {\n  $z10 \u003d $r33 instanceof short[]\n  if ($z10 \u003d\u003d false) goto B22 else B23\n}",
      "B22 {\n  $r10 \u003d (short[]) r1\n  $r9 \u003d (short[]) r2\n  $r11 \u003d r0.append(r3, $r10, $r9)\n  return\n}",
      "B23 {\n  $r7 \u003d Object[]) r1\n  $r6 \u003d Object[]) r2\n  $r8 \u003d r0.append(r3, $r7, $r6)\n  return\n}",
      "B24 {\n  $z2 \u003d Objects.equals(r1, r2)\n  if ($z2 \u003d\u003d false) goto B25 else B26\n}",
      "B25 {\n  $r34 \u003d r0\n  goto B27\n}",
      "B26 {\n  $r5 \u003d DiffBuilder$lambda_append_29__50.bootstrap$(r1)\n  $r4 \u003d DiffBuilder$lambda_append_30__51.bootstrap$(r2)\n  $r34 \u003d r0.add(r3, $r5, $r4, class \"Ljava/lang/Object;\")\n}",
      "B27 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B24",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e [EXIT]",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e [EXIT]",
      "B23 --\u003e [EXIT]",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B27",
      "B27 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DiffBuilder#add(...4)",
        "body": "{\r\n    diffs.add(new SDiff\u003c\u003e(fieldName, left, right, type));\r\n    return this;\r\n}"
      },
      {
        "name": "DiffBuilder#append(...3)",
        "body": "{\r\n    return equals || lhs \u003d\u003d rhs ? this : add(fieldName, () -\u003e Boolean.valueOf(lhs), () -\u003e Boolean.valueOf(rhs), Boolean.class);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.DiffBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,java.lang.Object[],java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    if (equals || lhs \u003d\u003d rhs) {\r\n        return this;\r\n    }\r\n    // rhs cannot be null, as lhs !\u003d rhs\r\n    final Object test \u003d lhs !\u003d null ? lhs : rhs;\r\n    if (ObjectUtils.isArray(test)) {\r\n        if (test instanceof boolean[]) {\r\n            return append(fieldName, (boolean[]) lhs, (boolean[]) rhs);\r\n        }\r\n        if (test instanceof byte[]) {\r\n            return append(fieldName, (byte[]) lhs, (byte[]) rhs);\r\n        }\r\n        if (test instanceof char[]) {\r\n            return append(fieldName, (char[]) lhs, (char[]) rhs);\r\n        }\r\n        if (test instanceof double[]) {\r\n            return append(fieldName, (double[]) lhs, (double[]) rhs);\r\n        }\r\n        if (test instanceof float[]) {\r\n            return append(fieldName, (float[]) lhs, (float[]) rhs);\r\n        }\r\n        if (test instanceof int[]) {\r\n            return append(fieldName, (int[]) lhs, (int[]) rhs);\r\n        }\r\n        if (test instanceof long[]) {\r\n            return append(fieldName, (long[]) lhs, (long[]) rhs);\r\n        }\r\n        if (test instanceof short[]) {\r\n            return append(fieldName, (short[]) lhs, (short[]) rhs);\r\n        }\r\n        return append(fieldName, (Object[]) lhs, (Object[]) rhs);\r\n    }\r\n    // Not array type\r\n    return Objects.equals(lhs, rhs) ? this : add(fieldName, () -\u003e lhs, () -\u003e rhs, Object.class);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DiffBuilder\n  String\n  Object[]\n  Object[]\n  $z0 \u003d DiffBuilder: boolean equals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d Arrays.equals(r1, r2)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r5 \u003d DiffBuilder$lambda_append_31__52.bootstrap$(r1)\n  $r4 \u003d DiffBuilder$lambda_append_32__53.bootstrap$(r2)\n  $r6 \u003d r0.add(r3, $r5, $r4, class \"Ljava/lang/Object;\")\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DiffBuilder#add(...4)",
        "body": "{\r\n    diffs.add(new SDiff\u003c\u003e(fieldName, left, right, type));\r\n    return this;\r\n}"
      },
      {
        "name": "DiffBuilder#append(...3)",
        "body": "{\r\n    return equals || lhs \u003d\u003d rhs ? this : add(fieldName, () -\u003e Boolean.valueOf(lhs), () -\u003e Boolean.valueOf(rhs), Boolean.class);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.DiffBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,short,short)",
    "visibility": "public",
    "body": "{\r\n    return equals || lhs \u003d\u003d rhs ? this : add(fieldName, () -\u003e Short.valueOf(lhs), () -\u003e Short.valueOf(rhs), Short.class);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($i2 !\u003d $i3) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DiffBuilder\n  String\n  s0 :\u003d @parameter1: short\n  s1 :\u003d @parameter2: short\n  $z0 \u003d DiffBuilder: boolean equals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $i2 \u003d (int) s0\n  $i3 \u003d (int) s1\n  if ($i2 !\u003d $i3) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r3 \u003d DiffBuilder$lambda_append_33__54.bootstrap$(s0)\n  $r2 \u003d DiffBuilder$lambda_append_34__55.bootstrap$(s1)\n  $r4 \u003d r0.add(r1, $r3, $r2, class \"Ljava/lang/Short;\")\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DiffBuilder#add(...4)",
        "body": "{\r\n    diffs.add(new SDiff\u003c\u003e(fieldName, left, right, type));\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.DiffBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,short[],short[])",
    "visibility": "public",
    "body": "{\r\n    return equals || lhs \u003d\u003d rhs ? this : add(fieldName, () -\u003e Short.valueOf(lhs), () -\u003e Short.valueOf(rhs), Short.class);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DiffBuilder\n  String\n  r1 :\u003d @parameter1: short[]\n  r2 :\u003d @parameter2: short[]\n  $z0 \u003d DiffBuilder: boolean equals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d Arrays.equals(r1, r2)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r5 \u003d DiffBuilder$lambda_append_35__56.bootstrap$(r1)\n  $r4 \u003d DiffBuilder$lambda_append_36__57.bootstrap$(r2)\n  $r6 \u003d r0.add(r3, $r5, $r4, class \"Ljava/lang/Short;\")\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DiffBuilder#add(...4)",
        "body": "{\r\n    diffs.add(new SDiff\u003c\u003e(fieldName, left, right, type));\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.DiffResult",
    "methodName": "toString",
    "signature": "java.lang.String toString(org.apache.commons.lang3.builder.ToStringStyle)",
    "visibility": "public",
    "body": "{\r\n    if (diffList.isEmpty()) {\r\n        return OBJECTS_SAME_STRING;\r\n    }\r\n    final ToStringBuilder lhsBuilder \u003d new ToStringBuilder(lhs, style);\r\n    final ToStringBuilder rhsBuilder \u003d new ToStringBuilder(rhs, style);\r\n    diffList.forEach(diff -\u003e {\r\n        lhsBuilder.append(diff.getFieldName(), diff.getLeft());\r\n        rhsBuilder.append(diff.getFieldName(), diff.getRight());\r\n    });\r\n    return String.format(toStringFormat, lhsBuilder.build(), rhsBuilder.build());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DiffResult\n  ToStringStyle\n  $r1 \u003d List diffList\u003e\n  $z0 \u003d $r1.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d ToStringBuilder\n  $r4 \u003d Object lhs\u003e\n  new ToStringBuilder($r4, r3)\n  $r5 \u003d ToStringBuilder\n  $r6 \u003d Object rhs\u003e\n  new ToStringBuilder($r6, r3)\n  $r7 \u003d List diffList\u003e\n  $r8 \u003d DiffResult$lambda_toString_0__58.bootstrap$($r2, $r5)\n  $r7.forEach($r8)\n  $r10 \u003d String toStringFormat\u003e\n  $r9 \u003d Object)[2]\n  $r11 \u003d $r2.build()\n  $r9[0] \u003d $r11\n  $r12 \u003d $r5.build()\n  $r9[1] \u003d $r12\n  $r13 \u003d String.format($r10, $r9)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.EqualsBuilder",
    "methodName": "reflectionEquals",
    "signature": "boolean reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class,boolean,java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    if (lhs \u003d\u003d rhs) {\r\n        return true;\r\n    }\r\n    if (lhs \u003d\u003d null || rhs \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    // @formatter:off\r\n    return new EqualsBuilder().setExcludeFields(excludeFields).setReflectUpToClass(reflectUpToClass).setTestTransients(testTransients).setTestRecursive(testRecursive).reflectionAppend(lhs, rhs).isEquals();\r\n    // @formatter:on\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 \u003d\u003d null) → B3 | else → B4",
      "B3 : If(r1 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Object\n  Object\n  z0 :\u003d @parameter2: boolean\n  Class\n  z1 :\u003d @parameter4: boolean\n  String[]\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  if (r1 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r2 \u003d EqualsBuilder\n  new EqualsBuilder()\n  $r5 \u003d $r2.setExcludeFields(r3)\n  $r6 \u003d $r5.setReflectUpToClass(r4)\n  $r7 \u003d $r6.setTestTransients(z0)\n  $r8 \u003d $r7.setTestRecursive(z1)\n  $r9 \u003d $r8.reflectionAppend(r0, r1)\n  $z2 \u003d $r9.isEquals()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.EqualsBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.EqualsBuilder append(boolean,boolean)",
    "visibility": "public",
    "body": "{\r\n    if (!isEquals) {\r\n        return this;\r\n    }\r\n    isEquals \u003d lhs \u003d\u003d rhs;\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If(z1 !\u003d z2) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  EqualsBuilder\n  z1 :\u003d @parameter0: boolean\n  z2 :\u003d @parameter1: boolean\n  $z0 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (z1 !\u003d z2) goto B3 else B4\n}",
      "B3 {\n  $z3 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z3 \u003d 0\n}",
      "B5 {\n  EqualsBuilder: boolean isEquals\u003e \u003d $z3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.EqualsBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.EqualsBuilder append(boolean[],boolean[])",
    "visibility": "public",
    "body": "{\r\n    if (!isEquals) {\r\n        return this;\r\n    }\r\n    isEquals \u003d lhs \u003d\u003d rhs;\r\n    return this;\r\n}",
    "nodes": 14,
    "edges": 16,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If(r1 !\u003d r2) → B3 | else → B4",
      "B4 : If(r1 \u003d\u003d null) → B5 | else → B6",
      "B5 : If(r2 !\u003d null) → B6 | else → B7",
      "B7 : If($i1 \u003d\u003d $i0) → B8 | else → B9",
      "B10 : If(i3 \u003e\u003d $i2) → B11 | else → B13",
      "B11 : If($z1 \u003d\u003d false) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  EqualsBuilder\n  r1 :\u003d @parameter0: boolean[]\n  r2 :\u003d @parameter1: boolean[]\n  $z0 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d r2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r1 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  if (r2 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  r0.setEquals(0)\n  return\n}",
      "B7 {\n  $i1 \u003d lengthof r1\n  $i0 \u003d lengthof r2\n  if ($i1 \u003d\u003d $i0) goto B8 else B9\n}",
      "B8 {\n  r0.setEquals(0)\n  return\n}",
      "B9 {\n  i3 \u003d 0\n}",
      "B10 {\n  $i2 \u003d lengthof r1\n  if (i3 \u003e\u003d $i2) goto B11 else B13\n}",
      "B11 {\n  $z1 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z1 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $z3 \u003d r1[i3]\n  $z2 \u003d r2[i3]\n  r0.append($z3, $z2)\n  i3 \u003d i3 + 1\n  goto B10\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B10",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.EqualsBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.EqualsBuilder append(byte,byte)",
    "visibility": "public",
    "body": "{\r\n    if (isEquals) {\r\n        isEquals \u003d lhs \u003d\u003d rhs;\r\n    }\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B5",
      "B1 : If($i2 !\u003d $i3) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  EqualsBuilder\n  b0 :\u003d @parameter0: byte\n  b1 :\u003d @parameter1: byte\n  $z0 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  $i2 \u003d (int) b0\n  $i3 \u003d (int) b1\n  if ($i2 !\u003d $i3) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  EqualsBuilder: boolean isEquals\u003e \u003d $z1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.EqualsBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.EqualsBuilder append(byte[],byte[])",
    "visibility": "public",
    "body": "{\r\n    if (isEquals) {\r\n        isEquals \u003d lhs \u003d\u003d rhs;\r\n    }\r\n    return this;\r\n}",
    "nodes": 14,
    "edges": 16,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If(r1 !\u003d r2) → B3 | else → B4",
      "B4 : If(r1 \u003d\u003d null) → B5 | else → B6",
      "B5 : If(r2 !\u003d null) → B6 | else → B7",
      "B7 : If($i1 \u003d\u003d $i0) → B8 | else → B9",
      "B10 : If(i5 \u003e\u003d $i2) → B11 | else → B13",
      "B11 : If($z1 \u003d\u003d false) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  EqualsBuilder\n  r1 :\u003d @parameter0: byte[]\n  r2 :\u003d @parameter1: byte[]\n  $z0 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d r2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r1 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  if (r2 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  r0.setEquals(0)\n  return\n}",
      "B7 {\n  $i1 \u003d lengthof r1\n  $i0 \u003d lengthof r2\n  if ($i1 \u003d\u003d $i0) goto B8 else B9\n}",
      "B8 {\n  r0.setEquals(0)\n  return\n}",
      "B9 {\n  i5 \u003d 0\n}",
      "B10 {\n  $i2 \u003d lengthof r1\n  if (i5 \u003e\u003d $i2) goto B11 else B13\n}",
      "B11 {\n  $z1 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z1 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $b4 \u003d r1[i5]\n  $b3 \u003d r2[i5]\n  r0.append($b4, $b3)\n  i5 \u003d i5 + 1\n  goto B10\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B10",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.EqualsBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.EqualsBuilder append(char,char)",
    "visibility": "public",
    "body": "{\r\n    if (isEquals) {\r\n        isEquals \u003d lhs \u003d\u003d rhs;\r\n    }\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B5",
      "B1 : If($i2 !\u003d $i3) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  EqualsBuilder\n  c0 :\u003d @parameter0: char\n  c1 :\u003d @parameter1: char\n  $z0 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  $i2 \u003d (int) c0\n  $i3 \u003d (int) c1\n  if ($i2 !\u003d $i3) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  EqualsBuilder: boolean isEquals\u003e \u003d $z1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.EqualsBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.EqualsBuilder append(char[],char[])",
    "visibility": "public",
    "body": "{\r\n    if (isEquals) {\r\n        isEquals \u003d lhs \u003d\u003d rhs;\r\n    }\r\n    return this;\r\n}",
    "nodes": 14,
    "edges": 16,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If(r1 !\u003d r2) → B3 | else → B4",
      "B4 : If(r1 \u003d\u003d null) → B5 | else → B6",
      "B5 : If(r2 !\u003d null) → B6 | else → B7",
      "B7 : If($i1 \u003d\u003d $i0) → B8 | else → B9",
      "B10 : If(i5 \u003e\u003d $i2) → B11 | else → B13",
      "B11 : If($z1 \u003d\u003d false) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  EqualsBuilder\n  r1 :\u003d @parameter0: char[]\n  r2 :\u003d @parameter1: char[]\n  $z0 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d r2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r1 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  if (r2 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  r0.setEquals(0)\n  return\n}",
      "B7 {\n  $i1 \u003d lengthof r1\n  $i0 \u003d lengthof r2\n  if ($i1 \u003d\u003d $i0) goto B8 else B9\n}",
      "B8 {\n  r0.setEquals(0)\n  return\n}",
      "B9 {\n  i5 \u003d 0\n}",
      "B10 {\n  $i2 \u003d lengthof r1\n  if (i5 \u003e\u003d $i2) goto B11 else B13\n}",
      "B11 {\n  $z1 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z1 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $c4 \u003d r1[i5]\n  $c3 \u003d r2[i5]\n  r0.append($c4, $c3)\n  i5 \u003d i5 + 1\n  goto B10\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B10",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.EqualsBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.EqualsBuilder append(double,double)",
    "visibility": "public",
    "body": "{\r\n    if (isEquals) {\r\n        return append(Double.doubleToLongBits(lhs), Double.doubleToLongBits(rhs));\r\n    }\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  EqualsBuilder\n  d0 :\u003d @parameter0: double\n  d1 :\u003d @parameter1: double\n  $z0 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $l1 \u003d Double.doubleToLongBits(d0)\n  $l0 \u003d Double.doubleToLongBits(d1)\n  $r1 \u003d r0.append($l1, $l0)\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EqualsBuilder#append(...2)",
        "body": "{\r\n    if (!isEquals) {\r\n        return this;\r\n    }\r\n    isEquals \u003d lhs \u003d\u003d rhs;\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.EqualsBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.EqualsBuilder append(double[],double[])",
    "visibility": "public",
    "body": "{\r\n    if (isEquals) {\r\n        return append(Double.doubleToLongBits(lhs), Double.doubleToLongBits(rhs));\r\n    }\r\n    return this;\r\n}",
    "nodes": 14,
    "edges": 16,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If(r1 !\u003d r2) → B3 | else → B4",
      "B4 : If(r1 \u003d\u003d null) → B5 | else → B6",
      "B5 : If(r2 !\u003d null) → B6 | else → B7",
      "B7 : If($i1 \u003d\u003d $i0) → B8 | else → B9",
      "B10 : If(i3 \u003e\u003d $i2) → B11 | else → B13",
      "B11 : If($z1 \u003d\u003d false) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  EqualsBuilder\n  r1 :\u003d @parameter0: double[]\n  r2 :\u003d @parameter1: double[]\n  $z0 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d r2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r1 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  if (r2 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  r0.setEquals(0)\n  return\n}",
      "B7 {\n  $i1 \u003d lengthof r1\n  $i0 \u003d lengthof r2\n  if ($i1 \u003d\u003d $i0) goto B8 else B9\n}",
      "B8 {\n  r0.setEquals(0)\n  return\n}",
      "B9 {\n  i3 \u003d 0\n}",
      "B10 {\n  $i2 \u003d lengthof r1\n  if (i3 \u003e\u003d $i2) goto B11 else B13\n}",
      "B11 {\n  $z1 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z1 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $d1 \u003d r1[i3]\n  $d0 \u003d r2[i3]\n  r0.append($d1, $d0)\n  i3 \u003d i3 + 1\n  goto B10\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B10",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EqualsBuilder#append(...2)",
        "body": "{\r\n    if (!isEquals) {\r\n        return this;\r\n    }\r\n    isEquals \u003d lhs \u003d\u003d rhs;\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.EqualsBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.EqualsBuilder append(float,float)",
    "visibility": "public",
    "body": "{\r\n    if (isEquals) {\r\n        return append(Float.floatToIntBits(lhs), Float.floatToIntBits(rhs));\r\n    }\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  EqualsBuilder\n  f0 :\u003d @parameter0: float\n  f1 :\u003d @parameter1: float\n  $z0 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d Float.floatToIntBits(f0)\n  $i0 \u003d Float.floatToIntBits(f1)\n  $r1 \u003d r0.append($i1, $i0)\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EqualsBuilder#append(...2)",
        "body": "{\r\n    if (!isEquals) {\r\n        return this;\r\n    }\r\n    isEquals \u003d lhs \u003d\u003d rhs;\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.EqualsBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.EqualsBuilder append(float[],float[])",
    "visibility": "public",
    "body": "{\r\n    if (isEquals) {\r\n        return append(Float.floatToIntBits(lhs), Float.floatToIntBits(rhs));\r\n    }\r\n    return this;\r\n}",
    "nodes": 14,
    "edges": 16,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If(r1 !\u003d r2) → B3 | else → B4",
      "B4 : If(r1 \u003d\u003d null) → B5 | else → B6",
      "B5 : If(r2 !\u003d null) → B6 | else → B7",
      "B7 : If($i1 \u003d\u003d $i0) → B8 | else → B9",
      "B10 : If(i3 \u003e\u003d $i2) → B11 | else → B13",
      "B11 : If($z1 \u003d\u003d false) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  EqualsBuilder\n  r1 :\u003d @parameter0: float[]\n  r2 :\u003d @parameter1: float[]\n  $z0 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d r2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r1 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  if (r2 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  r0.setEquals(0)\n  return\n}",
      "B7 {\n  $i1 \u003d lengthof r1\n  $i0 \u003d lengthof r2\n  if ($i1 \u003d\u003d $i0) goto B8 else B9\n}",
      "B8 {\n  r0.setEquals(0)\n  return\n}",
      "B9 {\n  i3 \u003d 0\n}",
      "B10 {\n  $i2 \u003d lengthof r1\n  if (i3 \u003e\u003d $i2) goto B11 else B13\n}",
      "B11 {\n  $z1 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z1 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $f1 \u003d r1[i3]\n  $f0 \u003d r2[i3]\n  r0.append($f1, $f0)\n  i3 \u003d i3 + 1\n  goto B10\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B10",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EqualsBuilder#append(...2)",
        "body": "{\r\n    if (!isEquals) {\r\n        return this;\r\n    }\r\n    isEquals \u003d lhs \u003d\u003d rhs;\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.EqualsBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.EqualsBuilder append(int,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEquals) {\r\n        isEquals \u003d lhs \u003d\u003d rhs;\r\n    }\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B5",
      "B1 : If(i0 !\u003d i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  EqualsBuilder\n  i0 :\u003d @parameter0: int\n  i1 :\u003d @parameter1: int\n  $z0 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  if (i0 !\u003d i1) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  EqualsBuilder: boolean isEquals\u003e \u003d $z1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.EqualsBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.EqualsBuilder append(int[],int[])",
    "visibility": "public",
    "body": "{\r\n    if (isEquals) {\r\n        isEquals \u003d lhs \u003d\u003d rhs;\r\n    }\r\n    return this;\r\n}",
    "nodes": 14,
    "edges": 16,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If(r1 !\u003d r2) → B3 | else → B4",
      "B4 : If(r1 \u003d\u003d null) → B5 | else → B6",
      "B5 : If(r2 !\u003d null) → B6 | else → B7",
      "B7 : If($i1 \u003d\u003d $i0) → B8 | else → B9",
      "B10 : If(i5 \u003e\u003d $i2) → B11 | else → B13",
      "B11 : If($z1 \u003d\u003d false) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  EqualsBuilder\n  r1 :\u003d @parameter0: int[]\n  r2 :\u003d @parameter1: int[]\n  $z0 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d r2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r1 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  if (r2 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  r0.setEquals(0)\n  return\n}",
      "B7 {\n  $i1 \u003d lengthof r1\n  $i0 \u003d lengthof r2\n  if ($i1 \u003d\u003d $i0) goto B8 else B9\n}",
      "B8 {\n  r0.setEquals(0)\n  return\n}",
      "B9 {\n  i5 \u003d 0\n}",
      "B10 {\n  $i2 \u003d lengthof r1\n  if (i5 \u003e\u003d $i2) goto B11 else B13\n}",
      "B11 {\n  $z1 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z1 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $i4 \u003d r1[i5]\n  $i3 \u003d r2[i5]\n  r0.append($i4, $i3)\n  i5 \u003d i5 + 1\n  goto B10\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B10",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.EqualsBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.EqualsBuilder append(long,long)",
    "visibility": "public",
    "body": "{\r\n    if (isEquals) {\r\n        isEquals \u003d lhs \u003d\u003d rhs;\r\n    }\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B5",
      "B1 : If($b2 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  EqualsBuilder\n  l0 :\u003d @parameter0: long\n  l1 :\u003d @parameter1: long\n  $z0 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  $b2 \u003d l0 cmp l1\n  if ($b2 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  EqualsBuilder: boolean isEquals\u003e \u003d $z1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.EqualsBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.EqualsBuilder append(long[],long[])",
    "visibility": "public",
    "body": "{\r\n    if (isEquals) {\r\n        isEquals \u003d lhs \u003d\u003d rhs;\r\n    }\r\n    return this;\r\n}",
    "nodes": 14,
    "edges": 16,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If(r1 !\u003d r2) → B3 | else → B4",
      "B4 : If(r1 \u003d\u003d null) → B5 | else → B6",
      "B5 : If(r2 !\u003d null) → B6 | else → B7",
      "B7 : If($i1 \u003d\u003d $i0) → B8 | else → B9",
      "B10 : If(i5 \u003e\u003d $i2) → B11 | else → B13",
      "B11 : If($z1 \u003d\u003d false) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  EqualsBuilder\n  r1 :\u003d @parameter0: long[]\n  r2 :\u003d @parameter1: long[]\n  $z0 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d r2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r1 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  if (r2 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  r0.setEquals(0)\n  return\n}",
      "B7 {\n  $i1 \u003d lengthof r1\n  $i0 \u003d lengthof r2\n  if ($i1 \u003d\u003d $i0) goto B8 else B9\n}",
      "B8 {\n  r0.setEquals(0)\n  return\n}",
      "B9 {\n  i5 \u003d 0\n}",
      "B10 {\n  $i2 \u003d lengthof r1\n  if (i5 \u003e\u003d $i2) goto B11 else B13\n}",
      "B11 {\n  $z1 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z1 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $l4 \u003d r1[i5]\n  $l3 \u003d r2[i5]\n  r0.append($l4, $l3)\n  i5 \u003d i5 + 1\n  goto B10\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B10",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.EqualsBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (!isEquals) {\r\n        return this;\r\n    }\r\n    if (lhs \u003d\u003d rhs) {\r\n        return this;\r\n    }\r\n    if (lhs \u003d\u003d null || rhs \u003d\u003d null) {\r\n        setEquals(false);\r\n        return this;\r\n    }\r\n    final Class\u003c?\u003e lhsClass \u003d lhs.getClass();\r\n    if (lhsClass.isArray()) {\r\n        // factor out array case in order to keep method small enough\r\n        // to be inlined\r\n        appendArray(lhs, rhs);\r\n    } else // The simple case, not an array, just test the element\r\n    if (testRecursive \u0026\u0026 !ClassUtils.isPrimitiveOrWrapper(lhsClass)) {\r\n        reflectionAppend(lhs, rhs);\r\n    } else {\r\n        isEquals \u003d lhs.equals(rhs);\r\n    }\r\n    return this;\r\n}",
    "nodes": 14,
    "edges": 17,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If(r1 !\u003d r2) → B3 | else → B4",
      "B4 : If(r1 \u003d\u003d null) → B5 | else → B6",
      "B5 : If(r2 !\u003d null) → B6 | else → B7",
      "B7 : If($z1 \u003d\u003d false) → B8 | else → B9",
      "B9 : If($z2 \u003d\u003d false) → B10 | else → B12",
      "B10 : If($z4 !\u003d 0) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  EqualsBuilder\n  Object\n  Object\n  $z0 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d r2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r1 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  if (r2 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  r0.setEquals(0)\n  return\n}",
      "B7 {\n  r3 \u003d r1.getClass()\n  $z1 \u003d r3.isArray()\n  if ($z1 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  r0.appendArray(r1, r2)\n  goto B13\n}",
      "B9 {\n  $z2 \u003d EqualsBuilder: boolean testRecursive\u003e\n  if ($z2 \u003d\u003d false) goto B10 else B12\n}",
      "B10 {\n  $z4 \u003d ClassUtils.isPrimitiveOrWrapper(r3)\n  if ($z4 !\u003d 0) goto B11 else B12\n}",
      "B11 {\n  r0.reflectionAppend(r1, r2)\n  goto B13\n}",
      "B12 {\n  $z3 \u003d r1.equals(r2)\n  EqualsBuilder: boolean isEquals\u003e \u003d $z3\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EqualsBuilder#reflectionAppend(...2)",
        "body": "{\r\n    if (!isEquals) {\r\n        return this;\r\n    }\r\n    if (lhs \u003d\u003d rhs) {\r\n        return this;\r\n    }\r\n    if (lhs \u003d\u003d null || rhs \u003d\u003d null) {\r\n        isEquals \u003d false;\r\n        return this;\r\n    }\r\n    // Find the leaf class since there may be transients in the leaf\r\n    // class or in classes between the leaf and root.\r\n    // If we are not testing transients or a subclass has no ivars,\r\n    // then a subclass can test equals to a superclass.\r\n    final Class\u003c?\u003e lhsClass \u003d lhs.getClass();\r\n    final Class\u003c?\u003e rhsClass \u003d rhs.getClass();\r\n    Class\u003c?\u003e testClass;\r\n    if (lhsClass.isInstance(rhs)) {\r\n        testClass \u003d lhsClass;\r\n        if (!rhsClass.isInstance(lhs)) {\r\n            // rhsClass is a subclass of lhsClass\r\n            testClass \u003d rhsClass;\r\n        }\r\n    } else if (rhsClass.isInstance(lhs)) {\r\n        testClass \u003d rhsClass;\r\n        if (!lhsClass.isInstance(rhs)) {\r\n            // lhsClass is a subclass of rhsClass\r\n            testClass \u003d lhsClass;\r\n        }\r\n    } else {\r\n        // The two classes are not related.\r\n        isEquals \u003d false;\r\n        return this;\r\n    }\r\n    try {\r\n        if (testClass.isArray()) {\r\n            append(lhs, rhs);\r\n        } else //If either class is being excluded, call normal object equals method on lhsClass.\r\n        if (bypassReflectionClasses !\u003d null \u0026\u0026 (bypassReflectionClasses.contains(lhsClass) || bypassReflectionClasses.contains(rhsClass))) {\r\n            isEquals \u003d lhs.equals(rhs);\r\n        } else {\r\n            reflectionAppend(lhs, rhs, testClass);\r\n            while (testClass.getSuperclass() !\u003d null \u0026\u0026 testClass !\u003d reflectUpToClass) {\r\n                testClass \u003d testClass.getSuperclass();\r\n                reflectionAppend(lhs, rhs, testClass);\r\n            }\r\n        }\r\n    } catch (final IllegalArgumentException e) {\r\n        // In this case, we tried to test a subclass vs. a superclass and\r\n        // the subclass has ivars or the ivars are transient and\r\n        // we are testing transients.\r\n        // If a subclass has ivars that we are trying to test them, we get an\r\n        // exception and we know that the objects are not equal.\r\n        isEquals \u003d false;\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "EqualsBuilder#appendArray(...2)",
        "body": "{\r\n    // First we compare different dimensions, for example: a boolean[][] to a boolean[]\r\n    // then we \u0027Switch\u0027 on type of array, to dispatch to the correct handler\r\n    // This handles multidimensional arrays of the same depth\r\n    if (lhs.getClass() !\u003d rhs.getClass()) {\r\n        setEquals(false);\r\n    } else if (lhs instanceof long[]) {\r\n        append((long[]) lhs, (long[]) rhs);\r\n    } else if (lhs instanceof int[]) {\r\n        append((int[]) lhs, (int[]) rhs);\r\n    } else if (lhs instanceof short[]) {\r\n        append((short[]) lhs, (short[]) rhs);\r\n    } else if (lhs instanceof char[]) {\r\n        append((char[]) lhs, (char[]) rhs);\r\n    } else if (lhs instanceof byte[]) {\r\n        append((byte[]) lhs, (byte[]) rhs);\r\n    } else if (lhs instanceof double[]) {\r\n        append((double[]) lhs, (double[]) rhs);\r\n    } else if (lhs instanceof float[]) {\r\n        append((float[]) lhs, (float[]) rhs);\r\n    } else if (lhs instanceof boolean[]) {\r\n        append((boolean[]) lhs, (boolean[]) rhs);\r\n    } else {\r\n        // Not an array of primitives\r\n        append((Object[]) lhs, (Object[]) rhs);\r\n    }\r\n}"
      },
      {
        "name": "EqualsBuilder#setEquals(...1)",
        "body": "{\r\n    this.isEquals \u003d isEquals;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.EqualsBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object[],java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    if (!isEquals) {\r\n        return this;\r\n    }\r\n    if (lhs \u003d\u003d rhs) {\r\n        return this;\r\n    }\r\n    if (lhs \u003d\u003d null || rhs \u003d\u003d null) {\r\n        setEquals(false);\r\n        return this;\r\n    }\r\n    final Class\u003c?\u003e lhsClass \u003d lhs.getClass();\r\n    if (lhsClass.isArray()) {\r\n        // factor out array case in order to keep method small enough\r\n        // to be inlined\r\n        appendArray(lhs, rhs);\r\n    } else // The simple case, not an array, just test the element\r\n    if (testRecursive \u0026\u0026 !ClassUtils.isPrimitiveOrWrapper(lhsClass)) {\r\n        reflectionAppend(lhs, rhs);\r\n    } else {\r\n        isEquals \u003d lhs.equals(rhs);\r\n    }\r\n    return this;\r\n}",
    "nodes": 14,
    "edges": 16,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If(r1 !\u003d r2) → B3 | else → B4",
      "B4 : If(r1 \u003d\u003d null) → B5 | else → B6",
      "B5 : If(r2 !\u003d null) → B6 | else → B7",
      "B7 : If($i1 \u003d\u003d $i0) → B8 | else → B9",
      "B10 : If(i3 \u003e\u003d $i2) → B11 | else → B13",
      "B11 : If($z1 \u003d\u003d false) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  EqualsBuilder\n  Object[]\n  Object[]\n  $z0 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d r2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r1 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  if (r2 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  r0.setEquals(0)\n  return\n}",
      "B7 {\n  $i1 \u003d lengthof r1\n  $i0 \u003d lengthof r2\n  if ($i1 \u003d\u003d $i0) goto B8 else B9\n}",
      "B8 {\n  r0.setEquals(0)\n  return\n}",
      "B9 {\n  i3 \u003d 0\n}",
      "B10 {\n  $i2 \u003d lengthof r1\n  if (i3 \u003e\u003d $i2) goto B11 else B13\n}",
      "B11 {\n  $z1 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z1 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $r4 \u003d r1[i3]\n  $r3 \u003d r2[i3]\n  r0.append($r4, $r3)\n  i3 \u003d i3 + 1\n  goto B10\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B10",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EqualsBuilder#reflectionAppend(...2)",
        "body": "{\r\n    if (!isEquals) {\r\n        return this;\r\n    }\r\n    if (lhs \u003d\u003d rhs) {\r\n        return this;\r\n    }\r\n    if (lhs \u003d\u003d null || rhs \u003d\u003d null) {\r\n        isEquals \u003d false;\r\n        return this;\r\n    }\r\n    // Find the leaf class since there may be transients in the leaf\r\n    // class or in classes between the leaf and root.\r\n    // If we are not testing transients or a subclass has no ivars,\r\n    // then a subclass can test equals to a superclass.\r\n    final Class\u003c?\u003e lhsClass \u003d lhs.getClass();\r\n    final Class\u003c?\u003e rhsClass \u003d rhs.getClass();\r\n    Class\u003c?\u003e testClass;\r\n    if (lhsClass.isInstance(rhs)) {\r\n        testClass \u003d lhsClass;\r\n        if (!rhsClass.isInstance(lhs)) {\r\n            // rhsClass is a subclass of lhsClass\r\n            testClass \u003d rhsClass;\r\n        }\r\n    } else if (rhsClass.isInstance(lhs)) {\r\n        testClass \u003d rhsClass;\r\n        if (!lhsClass.isInstance(rhs)) {\r\n            // lhsClass is a subclass of rhsClass\r\n            testClass \u003d lhsClass;\r\n        }\r\n    } else {\r\n        // The two classes are not related.\r\n        isEquals \u003d false;\r\n        return this;\r\n    }\r\n    try {\r\n        if (testClass.isArray()) {\r\n            append(lhs, rhs);\r\n        } else //If either class is being excluded, call normal object equals method on lhsClass.\r\n        if (bypassReflectionClasses !\u003d null \u0026\u0026 (bypassReflectionClasses.contains(lhsClass) || bypassReflectionClasses.contains(rhsClass))) {\r\n            isEquals \u003d lhs.equals(rhs);\r\n        } else {\r\n            reflectionAppend(lhs, rhs, testClass);\r\n            while (testClass.getSuperclass() !\u003d null \u0026\u0026 testClass !\u003d reflectUpToClass) {\r\n                testClass \u003d testClass.getSuperclass();\r\n                reflectionAppend(lhs, rhs, testClass);\r\n            }\r\n        }\r\n    } catch (final IllegalArgumentException e) {\r\n        // In this case, we tried to test a subclass vs. a superclass and\r\n        // the subclass has ivars or the ivars are transient and\r\n        // we are testing transients.\r\n        // If a subclass has ivars that we are trying to test them, we get an\r\n        // exception and we know that the objects are not equal.\r\n        isEquals \u003d false;\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "EqualsBuilder#appendArray(...2)",
        "body": "{\r\n    // First we compare different dimensions, for example: a boolean[][] to a boolean[]\r\n    // then we \u0027Switch\u0027 on type of array, to dispatch to the correct handler\r\n    // This handles multidimensional arrays of the same depth\r\n    if (lhs.getClass() !\u003d rhs.getClass()) {\r\n        setEquals(false);\r\n    } else if (lhs instanceof long[]) {\r\n        append((long[]) lhs, (long[]) rhs);\r\n    } else if (lhs instanceof int[]) {\r\n        append((int[]) lhs, (int[]) rhs);\r\n    } else if (lhs instanceof short[]) {\r\n        append((short[]) lhs, (short[]) rhs);\r\n    } else if (lhs instanceof char[]) {\r\n        append((char[]) lhs, (char[]) rhs);\r\n    } else if (lhs instanceof byte[]) {\r\n        append((byte[]) lhs, (byte[]) rhs);\r\n    } else if (lhs instanceof double[]) {\r\n        append((double[]) lhs, (double[]) rhs);\r\n    } else if (lhs instanceof float[]) {\r\n        append((float[]) lhs, (float[]) rhs);\r\n    } else if (lhs instanceof boolean[]) {\r\n        append((boolean[]) lhs, (boolean[]) rhs);\r\n    } else {\r\n        // Not an array of primitives\r\n        append((Object[]) lhs, (Object[]) rhs);\r\n    }\r\n}"
      },
      {
        "name": "EqualsBuilder#setEquals(...1)",
        "body": "{\r\n    this.isEquals \u003d isEquals;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.EqualsBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.EqualsBuilder append(short,short)",
    "visibility": "public",
    "body": "{\r\n    if (isEquals) {\r\n        isEquals \u003d lhs \u003d\u003d rhs;\r\n    }\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B5",
      "B1 : If($i2 !\u003d $i3) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  EqualsBuilder\n  s0 :\u003d @parameter0: short\n  s1 :\u003d @parameter1: short\n  $z0 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  $i2 \u003d (int) s0\n  $i3 \u003d (int) s1\n  if ($i2 !\u003d $i3) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  EqualsBuilder: boolean isEquals\u003e \u003d $z1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.EqualsBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.EqualsBuilder append(short[],short[])",
    "visibility": "public",
    "body": "{\r\n    if (isEquals) {\r\n        isEquals \u003d lhs \u003d\u003d rhs;\r\n    }\r\n    return this;\r\n}",
    "nodes": 14,
    "edges": 16,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If(r1 !\u003d r2) → B3 | else → B4",
      "B4 : If(r1 \u003d\u003d null) → B5 | else → B6",
      "B5 : If(r2 !\u003d null) → B6 | else → B7",
      "B7 : If($i1 \u003d\u003d $i0) → B8 | else → B9",
      "B10 : If(i5 \u003e\u003d $i2) → B11 | else → B13",
      "B11 : If($z1 \u003d\u003d false) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  EqualsBuilder\n  r1 :\u003d @parameter0: short[]\n  r2 :\u003d @parameter1: short[]\n  $z0 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d r2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r1 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  if (r2 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  r0.setEquals(0)\n  return\n}",
      "B7 {\n  $i1 \u003d lengthof r1\n  $i0 \u003d lengthof r2\n  if ($i1 \u003d\u003d $i0) goto B8 else B9\n}",
      "B8 {\n  r0.setEquals(0)\n  return\n}",
      "B9 {\n  i5 \u003d 0\n}",
      "B10 {\n  $i2 \u003d lengthof r1\n  if (i5 \u003e\u003d $i2) goto B11 else B13\n}",
      "B11 {\n  $z1 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z1 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $s4 \u003d r1[i5]\n  $s3 \u003d r2[i5]\n  r0.append($s4, $s3)\n  i5 \u003d i5 + 1\n  goto B10\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B10",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.EqualsBuilder",
    "methodName": "appendSuper",
    "signature": "org.apache.commons.lang3.builder.EqualsBuilder appendSuper(boolean)",
    "visibility": "public",
    "body": "{\r\n    if (!isEquals) {\r\n        return this;\r\n    }\r\n    isEquals \u003d superEquals;\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  EqualsBuilder\n  z1 :\u003d @parameter0: boolean\n  $z0 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  EqualsBuilder: boolean isEquals\u003e \u003d z1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.EqualsBuilder",
    "methodName": "reflectionAppend",
    "signature": "org.apache.commons.lang3.builder.EqualsBuilder reflectionAppend(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (!isEquals) {\r\n        return this;\r\n    }\r\n    if (lhs \u003d\u003d rhs) {\r\n        return this;\r\n    }\r\n    if (lhs \u003d\u003d null || rhs \u003d\u003d null) {\r\n        isEquals \u003d false;\r\n        return this;\r\n    }\r\n    // Find the leaf class since there may be transients in the leaf\r\n    // class or in classes between the leaf and root.\r\n    // If we are not testing transients or a subclass has no ivars,\r\n    // then a subclass can test equals to a superclass.\r\n    final Class\u003c?\u003e lhsClass \u003d lhs.getClass();\r\n    final Class\u003c?\u003e rhsClass \u003d rhs.getClass();\r\n    Class\u003c?\u003e testClass;\r\n    if (lhsClass.isInstance(rhs)) {\r\n        testClass \u003d lhsClass;\r\n        if (!rhsClass.isInstance(lhs)) {\r\n            // rhsClass is a subclass of lhsClass\r\n            testClass \u003d rhsClass;\r\n        }\r\n    } else if (rhsClass.isInstance(lhs)) {\r\n        testClass \u003d rhsClass;\r\n        if (!lhsClass.isInstance(rhs)) {\r\n            // lhsClass is a subclass of rhsClass\r\n            testClass \u003d lhsClass;\r\n        }\r\n    } else {\r\n        // The two classes are not related.\r\n        isEquals \u003d false;\r\n        return this;\r\n    }\r\n    try {\r\n        if (testClass.isArray()) {\r\n            append(lhs, rhs);\r\n        } else //If either class is being excluded, call normal object equals method on lhsClass.\r\n        if (bypassReflectionClasses !\u003d null \u0026\u0026 (bypassReflectionClasses.contains(lhsClass) || bypassReflectionClasses.contains(rhsClass))) {\r\n            isEquals \u003d lhs.equals(rhs);\r\n        } else {\r\n            reflectionAppend(lhs, rhs, testClass);\r\n            while (testClass.getSuperclass() !\u003d null \u0026\u0026 testClass !\u003d reflectUpToClass) {\r\n                testClass \u003d testClass.getSuperclass();\r\n                reflectionAppend(lhs, rhs, testClass);\r\n            }\r\n        }\r\n    } catch (final IllegalArgumentException e) {\r\n        // In this case, we tried to test a subclass vs. a superclass and\r\n        // the subclass has ivars or the ivars are transient and\r\n        // we are testing transients.\r\n        // If a subclass has ivars that we are trying to test them, we get an\r\n        // exception and we know that the objects are not equal.\r\n        isEquals \u003d false;\r\n    }\r\n    return this;\r\n}",
    "nodes": 27,
    "edges": 36,
    "cc": 11,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If(r1 !\u003d r2) → B3 | else → B4",
      "B4 : If(r1 \u003d\u003d null) → B5 | else → B6",
      "B5 : If(r2 !\u003d null) → B6 | else → B7",
      "B7 : If($z1 \u003d\u003d false) → B8 | else → B10",
      "B8 : If($z7 !\u003d 0) → B9 | else → B14",
      "B10 : If($z2 \u003d\u003d false) → B11 | else → B13",
      "B11 : If($z3 !\u003d 0) → B12 | else → B14",
      "B14 : If($z8 \u003d\u003d false) → B15 | else → B16",
      "B16 : If($r5 \u003d\u003d null) → B17 | else → B20",
      "B17 : If($z4 !\u003d 0) → B18 | else → B19",
      "B18 : If($z6 \u003d\u003d false) → B19 | else → B20",
      "B21 : If($r11 \u003d\u003d null) → B22 | else → B24",
      "B22 : If(r10 \u003d\u003d $r6) → B23 | else → B24"
    ],
    "blockList": [
      "B0 {\n  EqualsBuilder\n  Object\n  Object\n  $z0 \u003d EqualsBuilder: boolean isEquals\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d r2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r1 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  if (r2 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  EqualsBuilder: boolean isEquals\u003e \u003d 0\n  return\n}",
      "B7 {\n  r3 \u003d r1.getClass()\n  r4 \u003d r2.getClass()\n  $z1 \u003d r3.isInstance(r2)\n  if ($z1 \u003d\u003d false) goto B8 else B10\n}",
      "B8 {\n  r10 \u003d r3\n  $z7 \u003d r4.isInstance(r1)\n  if ($z7 !\u003d 0) goto B9 else B14\n}",
      "B9 {\n  r10 \u003d r4\n  goto B14\n}",
      "B10 {\n  $z2 \u003d r4.isInstance(r1)\n  if ($z2 \u003d\u003d false) goto B11 else B13\n}",
      "B11 {\n  r10 \u003d r4\n  $z3 \u003d r3.isInstance(r2)\n  if ($z3 !\u003d 0) goto B12 else B14\n}",
      "B12 {\n  r10 \u003d r3\n  goto B14\n}",
      "B13 {\n  EqualsBuilder: boolean isEquals\u003e \u003d 0\n  return\n}",
      "B14 {\n  $z8 \u003d r10.isArray()\n  if ($z8 \u003d\u003d false) goto B15 else B16\n}",
      "B15 {\n  r0.append(r1, r2)\n  goto B24\n}",
      "B16 {\n  $r5 \u003d List bypassReflectionClasses\u003e\n  if ($r5 \u003d\u003d null) goto B17 else B20\n}",
      "B17 {\n  $r7 \u003d List bypassReflectionClasses\u003e\n  $z4 \u003d $r7.contains(r3)\n  if ($z4 !\u003d 0) goto B18 else B19\n}",
      "B18 {\n  $r8 \u003d List bypassReflectionClasses\u003e\n  $z6 \u003d $r8.contains(r4)\n  if ($z6 \u003d\u003d false) goto B19 else B20\n}",
      "B19 {\n  $z5 \u003d r1.equals(r2)\n  EqualsBuilder: boolean isEquals\u003e \u003d $z5\n  goto B24\n}",
      "B20 {\n  r0.reflectionAppend(r1, r2, r10)\n}",
      "B21 {\n  $r11 \u003d r10.getSuperclass()\n  if ($r11 \u003d\u003d null) goto B22 else B24\n}",
      "B22 {\n  $r6 \u003d Class reflectUpToClass\u003e\n  if (r10 \u003d\u003d $r6) goto B23 else B24\n}",
      "B23 {\n  r10 \u003d r10.getSuperclass()\n  r0.reflectionAppend(r1, r2, r10)\n  goto B21\n}",
      "B24 {\n  goto B26\n}",
      "B25 {\n  $r9 :\u003d @caughtexception\n  EqualsBuilder: boolean isEquals\u003e \u003d 0\n}",
      "B26 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B14",
      "B9 --\u003e B14",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B14",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B24",
      "B16 --\u003e B17",
      "B16 --\u003e B20",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B24",
      "B20 --\u003e B21",
      "B21 --\u003e B22",
      "B21 --\u003e B24",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B21",
      "B24 --\u003e B26",
      "B25 --\u003e B26",
      "B26 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EqualsBuilder#reflectionAppend(...3)",
        "body": "{\r\n    if (isRegistered(lhs, rhs)) {\r\n        return;\r\n    }\r\n    try {\r\n        register(lhs, rhs);\r\n        final Field[] fields \u003d clazz.getDeclaredFields();\r\n        AccessibleObject.setAccessible(fields, true);\r\n        for (int i \u003d 0; i \u003c fields.length \u0026\u0026 isEquals; i++) {\r\n            final Field field \u003d fields[i];\r\n            if (!ArrayUtils.contains(excludeFields, field.getName()) \u0026\u0026 !field.getName().contains(\"$\") \u0026\u0026 (testTransients || !Modifier.isTransient(field.getModifiers())) \u0026\u0026 !Modifier.isStatic(field.getModifiers()) \u0026\u0026 !field.isAnnotationPresent(EqualsExclude.class)) {\r\n                append(Reflection.getUnchecked(field, lhs), Reflection.getUnchecked(field, rhs));\r\n            }\r\n        }\r\n    } finally {\r\n        unregister(lhs, rhs);\r\n    }\r\n}"
      },
      {
        "name": "EqualsBuilder#append(...2)",
        "body": "{\r\n    if (!isEquals) {\r\n        return this;\r\n    }\r\n    isEquals \u003d lhs \u003d\u003d rhs;\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.HashCodeBuilder",
    "methodName": "reflectionHashCode",
    "signature": "int reflectionHashCode(int,int,java.lang.Object,boolean,java.lang.Class,java.lang.String[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B1 : If($r3 \u003d\u003d null) → B2 | else → B4",
      "B2 : If(r5 \u003d\u003d r4) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  i1 :\u003d @parameter1: int\n  Object\n  z0 :\u003d @parameter3: boolean\n  Class\n  String[]\n  Objects.requireNonNull(r0, \"object\")\n  $r1 \u003d HashCodeBuilder\n  new HashCodeBuilder(i0, i1)\n  r5 \u003d r0.getClass()\n  HashCodeBuilder.reflectionAppend(r0, r5, $r1, z0, r2)\n}",
      "B1 {\n  $r3 \u003d r5.getSuperclass()\n  if ($r3 \u003d\u003d null) goto B2 else B4\n}",
      "B2 {\n  if (r5 \u003d\u003d r4) goto B3 else B4\n}",
      "B3 {\n  r5 \u003d r5.getSuperclass()\n  HashCodeBuilder.reflectionAppend(r0, r5, $r1, z0, r2)\n  goto B1\n}",
      "B4 {\n  $i2 \u003d $r1.toHashCode()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B1",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.HashCodeBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.HashCodeBuilder append(boolean)",
    "visibility": "public",
    "body": "{\r\n    iTotal \u003d iTotal * iConstant + (value ? 0 : 1);\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  HashCodeBuilder\n  z0 :\u003d @parameter0: boolean\n  $i1 \u003d HashCodeBuilder: int iTotal\u003e\n  $i0 \u003d HashCodeBuilder: int iConstant\u003e\n  $i2 \u003d $i1 * $i0\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 0\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 1\n}",
      "B3 {\n  $i3 \u003d $i2 + $z1\n  HashCodeBuilder: int iTotal\u003e \u003d $i3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.HashCodeBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.HashCodeBuilder append(boolean[])",
    "visibility": "public",
    "body": "{\r\n    iTotal \u003d iTotal * iConstant + (value ? 0 : 1);\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i4 \u003e\u003d i0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  HashCodeBuilder\n  r0 :\u003d @parameter0: boolean[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i2 \u003d HashCodeBuilder: int iTotal\u003e\n  $i1 \u003d HashCodeBuilder: int iConstant\u003e\n  $i3 \u003d $i2 * $i1\n  HashCodeBuilder: int iTotal\u003e \u003d $i3\n  goto B5\n}",
      "B2 {\n  i0 \u003d lengthof r0\n  i4 \u003d 0\n}",
      "B3 {\n  if (i4 \u003e\u003d i0) goto B4 else B5\n}",
      "B4 {\n  z0 \u003d r0[i4]\n  r1.append(z0)\n  i4 \u003d i4 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.HashCodeBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.HashCodeBuilder append(byte[])",
    "visibility": "public",
    "body": "{\r\n    iTotal \u003d iTotal * iConstant + value;\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i5 \u003e\u003d i0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  HashCodeBuilder\n  r0 :\u003d @parameter0: byte[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i3 \u003d HashCodeBuilder: int iTotal\u003e\n  $i2 \u003d HashCodeBuilder: int iConstant\u003e\n  $i4 \u003d $i3 * $i2\n  HashCodeBuilder: int iTotal\u003e \u003d $i4\n  goto B5\n}",
      "B2 {\n  i0 \u003d lengthof r0\n  i5 \u003d 0\n}",
      "B3 {\n  if (i5 \u003e\u003d i0) goto B4 else B5\n}",
      "B4 {\n  b1 \u003d r0[i5]\n  r1.append(b1)\n  i5 \u003d i5 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.HashCodeBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.HashCodeBuilder append(char[])",
    "visibility": "public",
    "body": "{\r\n    iTotal \u003d iTotal * iConstant + value;\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i5 \u003e\u003d i0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  HashCodeBuilder\n  r0 :\u003d @parameter0: char[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i3 \u003d HashCodeBuilder: int iTotal\u003e\n  $i2 \u003d HashCodeBuilder: int iConstant\u003e\n  $i4 \u003d $i3 * $i2\n  HashCodeBuilder: int iTotal\u003e \u003d $i4\n  goto B5\n}",
      "B2 {\n  i0 \u003d lengthof r0\n  i5 \u003d 0\n}",
      "B3 {\n  if (i5 \u003e\u003d i0) goto B4 else B5\n}",
      "B4 {\n  c1 \u003d r0[i5]\n  r1.append(c1)\n  i5 \u003d i5 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.HashCodeBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.HashCodeBuilder append(double[])",
    "visibility": "public",
    "body": "{\r\n    return append(Double.doubleToLongBits(value));\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i4 \u003e\u003d i0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  HashCodeBuilder\n  r0 :\u003d @parameter0: double[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i2 \u003d HashCodeBuilder: int iTotal\u003e\n  $i1 \u003d HashCodeBuilder: int iConstant\u003e\n  $i3 \u003d $i2 * $i1\n  HashCodeBuilder: int iTotal\u003e \u003d $i3\n  goto B5\n}",
      "B2 {\n  i0 \u003d lengthof r0\n  i4 \u003d 0\n}",
      "B3 {\n  if (i4 \u003e\u003d i0) goto B4 else B5\n}",
      "B4 {\n  d0 \u003d r0[i4]\n  r1.append(d0)\n  i4 \u003d i4 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "HashCodeBuilder#append(...1)",
        "body": "{\r\n    iTotal \u003d iTotal * iConstant + (value ? 0 : 1);\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.HashCodeBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.HashCodeBuilder append(float[])",
    "visibility": "public",
    "body": "{\r\n    iTotal \u003d iTotal * iConstant + Float.floatToIntBits(value);\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i4 \u003e\u003d i0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  HashCodeBuilder\n  r0 :\u003d @parameter0: float[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i2 \u003d HashCodeBuilder: int iTotal\u003e\n  $i1 \u003d HashCodeBuilder: int iConstant\u003e\n  $i3 \u003d $i2 * $i1\n  HashCodeBuilder: int iTotal\u003e \u003d $i3\n  goto B5\n}",
      "B2 {\n  i0 \u003d lengthof r0\n  i4 \u003d 0\n}",
      "B3 {\n  if (i4 \u003e\u003d i0) goto B4 else B5\n}",
      "B4 {\n  f0 \u003d r0[i4]\n  r1.append(f0)\n  i4 \u003d i4 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.HashCodeBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.HashCodeBuilder append(int[])",
    "visibility": "public",
    "body": "{\r\n    iTotal \u003d iTotal * iConstant + value;\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i5 \u003e\u003d i0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  HashCodeBuilder\n  r0 :\u003d @parameter0: int[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i3 \u003d HashCodeBuilder: int iTotal\u003e\n  $i2 \u003d HashCodeBuilder: int iConstant\u003e\n  $i4 \u003d $i3 * $i2\n  HashCodeBuilder: int iTotal\u003e \u003d $i4\n  goto B5\n}",
      "B2 {\n  i0 \u003d lengthof r0\n  i5 \u003d 0\n}",
      "B3 {\n  if (i5 \u003e\u003d i0) goto B4 else B5\n}",
      "B4 {\n  i1 \u003d r0[i5]\n  r1.append(i1)\n  i5 \u003d i5 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.HashCodeBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.HashCodeBuilder append(long[])",
    "visibility": "public",
    "body": "{\r\n    iTotal \u003d iTotal * iConstant + (int) (value ^ value \u003e\u003e 32);\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i5 \u003e\u003d i0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  HashCodeBuilder\n  r0 :\u003d @parameter0: long[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i3 \u003d HashCodeBuilder: int iTotal\u003e\n  $i2 \u003d HashCodeBuilder: int iConstant\u003e\n  $i4 \u003d $i3 * $i2\n  HashCodeBuilder: int iTotal\u003e \u003d $i4\n  goto B5\n}",
      "B2 {\n  i0 \u003d lengthof r0\n  i5 \u003d 0\n}",
      "B3 {\n  if (i5 \u003e\u003d i0) goto B4 else B5\n}",
      "B4 {\n  l1 \u003d r0[i5]\n  r1.append(l1)\n  i5 \u003d i5 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.HashCodeBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d null) {\r\n        iTotal \u003d iTotal * iConstant;\r\n    } else if (ObjectUtils.isArray(object)) {\r\n        // factor out array case in order to keep method small enough\r\n        // to be inlined\r\n        appendArray(object);\r\n    } else {\r\n        iTotal \u003d iTotal * iConstant + object.hashCode();\r\n    }\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  HashCodeBuilder\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i6 \u003d HashCodeBuilder: int iTotal\u003e\n  $i5 \u003d HashCodeBuilder: int iConstant\u003e\n  $i7 \u003d $i6 * $i5\n  HashCodeBuilder: int iTotal\u003e \u003d $i7\n  goto B5\n}",
      "B2 {\n  $z0 \u003d ObjectUtils.isArray(r0)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  r1.appendArray(r0)\n  goto B5\n}",
      "B4 {\n  $i1 \u003d HashCodeBuilder: int iTotal\u003e\n  $i0 \u003d HashCodeBuilder: int iConstant\u003e\n  $i3 \u003d $i1 * $i0\n  $i2 \u003d r0.hashCode()\n  $i4 \u003d $i3 + $i2\n  HashCodeBuilder: int iTotal\u003e \u003d $i4\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "HashCodeBuilder#appendArray(...1)",
        "body": "{\r\n    // \u0027Switch\u0027 on type of array, to dispatch to the correct handler\r\n    // This handles multidimensional arrays\r\n    if (object instanceof long[]) {\r\n        append((long[]) object);\r\n    } else if (object instanceof int[]) {\r\n        append((int[]) object);\r\n    } else if (object instanceof short[]) {\r\n        append((short[]) object);\r\n    } else if (object instanceof char[]) {\r\n        append((char[]) object);\r\n    } else if (object instanceof byte[]) {\r\n        append((byte[]) object);\r\n    } else if (object instanceof double[]) {\r\n        append((double[]) object);\r\n    } else if (object instanceof float[]) {\r\n        append((float[]) object);\r\n    } else if (object instanceof boolean[]) {\r\n        append((boolean[]) object);\r\n    } else {\r\n        // Not an array of primitives\r\n        append((Object[]) object);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.HashCodeBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d null) {\r\n        iTotal \u003d iTotal * iConstant;\r\n    } else if (ObjectUtils.isArray(object)) {\r\n        // factor out array case in order to keep method small enough\r\n        // to be inlined\r\n        appendArray(object);\r\n    } else {\r\n        iTotal \u003d iTotal * iConstant + object.hashCode();\r\n    }\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i4 \u003e\u003d i0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  HashCodeBuilder\n  Object[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i2 \u003d HashCodeBuilder: int iTotal\u003e\n  $i1 \u003d HashCodeBuilder: int iConstant\u003e\n  $i3 \u003d $i2 * $i1\n  HashCodeBuilder: int iTotal\u003e \u003d $i3\n  goto B5\n}",
      "B2 {\n  i0 \u003d lengthof r0\n  i4 \u003d 0\n}",
      "B3 {\n  if (i4 \u003e\u003d i0) goto B4 else B5\n}",
      "B4 {\n  r2 \u003d r0[i4]\n  r1.append(r2)\n  i4 \u003d i4 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "HashCodeBuilder#appendArray(...1)",
        "body": "{\r\n    // \u0027Switch\u0027 on type of array, to dispatch to the correct handler\r\n    // This handles multidimensional arrays\r\n    if (object instanceof long[]) {\r\n        append((long[]) object);\r\n    } else if (object instanceof int[]) {\r\n        append((int[]) object);\r\n    } else if (object instanceof short[]) {\r\n        append((short[]) object);\r\n    } else if (object instanceof char[]) {\r\n        append((char[]) object);\r\n    } else if (object instanceof byte[]) {\r\n        append((byte[]) object);\r\n    } else if (object instanceof double[]) {\r\n        append((double[]) object);\r\n    } else if (object instanceof float[]) {\r\n        append((float[]) object);\r\n    } else if (object instanceof boolean[]) {\r\n        append((boolean[]) object);\r\n    } else {\r\n        // Not an array of primitives\r\n        append((Object[]) object);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.HashCodeBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.builder.HashCodeBuilder append(short[])",
    "visibility": "public",
    "body": "{\r\n    iTotal \u003d iTotal * iConstant + value;\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i5 \u003e\u003d i0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  HashCodeBuilder\n  r0 :\u003d @parameter0: short[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i3 \u003d HashCodeBuilder: int iTotal\u003e\n  $i2 \u003d HashCodeBuilder: int iConstant\u003e\n  $i4 \u003d $i3 * $i2\n  HashCodeBuilder: int iTotal\u003e \u003d $i4\n  goto B5\n}",
      "B2 {\n  i0 \u003d lengthof r0\n  i5 \u003d 0\n}",
      "B3 {\n  if (i5 \u003e\u003d i0) goto B4 else B5\n}",
      "B4 {\n  s1 \u003d r0[i5]\n  r1.append(s1)\n  i5 \u003d i5 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.HashCodeBuilder",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (this \u003d\u003d obj) {\r\n        return true;\r\n    }\r\n    if (!(obj instanceof HashCodeBuilder)) {\r\n        return false;\r\n    }\r\n    final HashCodeBuilder other \u003d (HashCodeBuilder) obj;\r\n    return iTotal \u003d\u003d other.iTotal;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($i1 !\u003d $i0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  HashCodeBuilder\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d HashCodeBuilder\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d HashCodeBuilder) r1\n  $i1 \u003d HashCodeBuilder: int iTotal\u003e\n  $i0 \u003d HashCodeBuilder: int iTotal\u003e\n  if ($i1 !\u003d $i0) goto B5 else B6\n}",
      "B5 {\n  $z1 \u003d 1\n  goto B7\n}",
      "B6 {\n  $z1 \u003d 0\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle",
    "methodName": "appendDetail",
    "signature": "void appendDetail(java.lang.StringBuffer,java.lang.String,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (!ClassUtils.isPrimitiveWrapper(value.getClass()) \u0026\u0026 !String.class.equals(value.getClass()) \u0026\u0026 accept(value.getClass())) {\r\n        spaces +\u003d INDENT;\r\n        resetIndent();\r\n        buffer.append(ReflectionToStringBuilder.toString(value, this));\r\n        spaces -\u003d INDENT;\r\n        resetIndent();\r\n    } else {\r\n        super.appendDetail(buffer, fieldName, value);\r\n    }\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B4",
      "B1 : If($z1 !\u003d 0) → B2 | else → B4",
      "B2 : If($z2 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  MultilineRecursiveToStringStyle\n  StringBuffer\n  String\n  Object\n  $r1 \u003d r0.getClass()\n  $z0 \u003d ClassUtils.isPrimitiveWrapper($r1)\n  if ($z0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $r6 \u003d class \"Ljava/lang/String;\"\n  $r5 \u003d r0.getClass()\n  $z1 \u003d $r6.equals($r5)\n  if ($z1 !\u003d 0) goto B2 else B4\n}",
      "B2 {\n  $r7 \u003d r0.getClass()\n  $z2 \u003d r2.accept($r7)\n  if ($z2 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $i0 \u003d MultilineRecursiveToStringStyle: int spaces\u003e\n  $i1 \u003d $i0 + 2\n  MultilineRecursiveToStringStyle: int spaces\u003e \u003d $i1\n  r2.resetIndent()\n  $r8 \u003d ReflectionToStringBuilder.toString(r0, r2)\n  r3.append($r8)\n  $i2 \u003d MultilineRecursiveToStringStyle: int spaces\u003e\n  $i3 \u003d $i2 - 2\n  MultilineRecursiveToStringStyle: int spaces\u003e \u003d $i3\n  r2.resetIndent()\n  goto B5\n}",
      "B4 {\n  r2.appendDetail(r3, r4, r0)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultilineRecursiveToStringStyle#accept(...1)",
        "body": "(source not found)"
      },
      {
        "name": "MultilineRecursiveToStringStyle#resetIndent(...0)",
        "body": "{\r\n    setArrayStart(\"{\" + System.lineSeparator() + spacer(spaces));\r\n    setArraySeparator(\",\" + System.lineSeparator() + spacer(spaces));\r\n    setArrayEnd(System.lineSeparator() + spacer(spaces - INDENT) + \"}\");\r\n    setContentStart(\"[\" + System.lineSeparator() + spacer(spaces));\r\n    setFieldSeparator(\",\" + System.lineSeparator() + spacer(spaces));\r\n    setContentEnd(System.lineSeparator() + spacer(spaces - INDENT) + \"]\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.RecursiveToStringStyle",
    "methodName": "appendDetail",
    "signature": "void appendDetail(java.lang.StringBuffer,java.lang.String,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (!ClassUtils.isPrimitiveWrapper(value.getClass()) \u0026\u0026 !String.class.equals(value.getClass()) \u0026\u0026 accept(value.getClass())) {\r\n        buffer.append(ReflectionToStringBuilder.toString(value, this));\r\n    } else {\r\n        super.appendDetail(buffer, fieldName, value);\r\n    }\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B4",
      "B1 : If($z1 !\u003d 0) → B2 | else → B4",
      "B2 : If($z2 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  RecursiveToStringStyle\n  StringBuffer\n  String\n  Object\n  $r1 \u003d r0.getClass()\n  $z0 \u003d ClassUtils.isPrimitiveWrapper($r1)\n  if ($z0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $r6 \u003d class \"Ljava/lang/String;\"\n  $r5 \u003d r0.getClass()\n  $z1 \u003d $r6.equals($r5)\n  if ($z1 !\u003d 0) goto B2 else B4\n}",
      "B2 {\n  $r7 \u003d r0.getClass()\n  $z2 \u003d r2.accept($r7)\n  if ($z2 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r8 \u003d ReflectionToStringBuilder.toString(r0, r2)\n  r3.append($r8)\n  goto B5\n}",
      "B4 {\n  r2.appendDetail(r3, r4, r0)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "RecursiveToStringStyle#accept(...1)",
        "body": "{\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.ReflectionDiffBuilder",
    "methodName": "build",
    "signature": "org.apache.commons.lang3.builder.DiffResult build()",
    "visibility": "public",
    "body": "{\r\n    if (getLeft().equals(getRight())) {\r\n        return diffBuilder.build();\r\n    }\r\n    appendFields(getLeft().getClass());\r\n    return diffBuilder.build();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ReflectionDiffBuilder\n  $r2 \u003d r0.getLeft()\n  $r1 \u003d r0.getRight()\n  $z0 \u003d $r2.equals($r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d DiffBuilder diffBuilder\u003e\n  $r8 \u003d $r7.build()\n  return\n}",
      "B2 {\n  $r3 \u003d r0.getLeft()\n  $r4 \u003d $r3.getClass()\n  r0.appendFields($r4)\n  $r5 \u003d DiffBuilder diffBuilder\u003e\n  $r6 \u003d $r5.build()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ReflectionDiffBuilder#appendFields(...1)",
        "body": "{\r\n    for (final Field field : FieldUtils.getAllFields(clazz)) {\r\n        if (accept(field)) {\r\n            try {\r\n                diffBuilder.append(field.getName(), readField(field, getLeft()), readField(field, getRight()));\r\n            } catch (final IllegalAccessException e) {\r\n                // this can\u0027t happen. Would get a Security exception instead\r\n                // throw a runtime exception in case the impossible happens.\r\n                throw new IllegalArgumentException(\"Unexpected IllegalAccessException: \" + e.getMessage(), e);\r\n            }\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "ReflectionDiffBuilder#getLeft(...0)",
        "body": "{\r\n    return diffBuilder.getLeft();\r\n}"
      },
      {
        "name": "ReflectionDiffBuilder#getRight(...0)",
        "body": "{\r\n    return diffBuilder.getRight();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.ReflectionToStringBuilder",
    "methodName": "setExcludeFieldNames",
    "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilder setExcludeFieldNames(java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    if (excludeFieldNamesParam \u003d\u003d null) {\r\n        this.excludeFieldNames \u003d null;\r\n    } else {\r\n        // clone and remove nulls\r\n        this.excludeFieldNames \u003d ArraySorter.sort(toNoNullStringArray(excludeFieldNamesParam));\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ReflectionToStringBuilder\n  String[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  String[] excludeFieldNames\u003e \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d ReflectionToStringBuilder.toNoNullStringArray(r0)\n  $r3 \u003d ArraySorter.sort($r2)\n  $r4 \u003d String[]) $r3\n  String[] excludeFieldNames\u003e \u003d $r4\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ReflectionToStringBuilder#toNoNullStringArray(...1)",
        "body": "{\r\n    if (collection \u003d\u003d null) {\r\n        return ArrayUtils.EMPTY_STRING_ARRAY;\r\n    }\r\n    return toNoNullStringArray(collection.toArray());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.ReflectionToStringBuilder",
    "methodName": "setIncludeFieldNames",
    "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilder setIncludeFieldNames(java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    if (includeFieldNamesParam \u003d\u003d null) {\r\n        this.includeFieldNames \u003d null;\r\n    } else {\r\n        // clone and remove nulls\r\n        this.includeFieldNames \u003d ArraySorter.sort(toNoNullStringArray(includeFieldNamesParam));\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ReflectionToStringBuilder\n  String[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  String[] includeFieldNames\u003e \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d ReflectionToStringBuilder.toNoNullStringArray(r0)\n  $r3 \u003d ArraySorter.sort($r2)\n  $r4 \u003d String[]) $r3\n  String[] includeFieldNames\u003e \u003d $r4\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ReflectionToStringBuilder#toNoNullStringArray(...1)",
        "body": "{\r\n    if (collection \u003d\u003d null) {\r\n        return ArrayUtils.EMPTY_STRING_ARRAY;\r\n    }\r\n    return toNoNullStringArray(collection.toArray());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.ReflectionToStringBuilder",
    "methodName": "setUpToClass",
    "signature": "void setUpToClass(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (clazz !\u003d null) {\r\n        final Object object \u003d getObject();\r\n        if (object !\u003d null \u0026\u0026 !clazz.isInstance(object)) {\r\n            throw new IllegalArgumentException(\"Specified class is not a superclass of the object\");\r\n        }\r\n    }\r\n    this.upToClass \u003d clazz;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B4",
      "B1 : If(r2 \u003d\u003d null) → B2 | else → B4",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ReflectionToStringBuilder\n  Class\n  if (r0 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  r2 \u003d r1.getObject()\n  if (r2 \u003d\u003d null) goto B2 else B4\n}",
      "B2 {\n  $z0 \u003d r0.isInstance(r2)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Specified class is not a superclass of the object\")\n  throw $r3\n}",
      "B4 {\n  Class upToClass\u003e \u003d r0\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ReflectionToStringBuilder#getObject(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.ReflectionToStringBuilder",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    if (this.getObject() \u003d\u003d null) {\r\n        return this.getStyle().getNullText();\r\n    }\r\n    validate();\r\n    Class\u003c?\u003e clazz \u003d this.getObject().getClass();\r\n    this.appendFieldsIn(clazz);\r\n    while (clazz.getSuperclass() !\u003d null \u0026\u0026 clazz !\u003d this.getUpToClass()) {\r\n        clazz \u003d clazz.getSuperclass();\r\n        this.appendFieldsIn(clazz);\r\n    }\r\n    return super.toString();\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B3 : If($r3 \u003d\u003d null) → B4 | else → B6",
      "B4 : If(r8 \u003d\u003d $r5) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  ReflectionToStringBuilder\n  $r1 \u003d r0.getObject()\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d r0.getStyle()\n  $r7 \u003d $r6.getNullText()\n  return\n}",
      "B2 {\n  r0.validate()\n  $r2 \u003d r0.getObject()\n  r8 \u003d $r2.getClass()\n  r0.appendFieldsIn(r8)\n}",
      "B3 {\n  $r3 \u003d r8.getSuperclass()\n  if ($r3 \u003d\u003d null) goto B4 else B6\n}",
      "B4 {\n  $r5 \u003d r0.getUpToClass()\n  if (r8 \u003d\u003d $r5) goto B5 else B6\n}",
      "B5 {\n  r8 \u003d r8.getSuperclass()\n  r0.appendFieldsIn(r8)\n  goto B3\n}",
      "B6 {\n  $r4 \u003d r0.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B3",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ReflectionToStringBuilder#validate(...0)",
        "body": "{\r\n    if (ArrayUtils.containsAny(this.excludeFieldNames, (Object[]) this.includeFieldNames)) {\r\n        ToStringStyle.unregister(this.getObject());\r\n        throw new IllegalStateException(\"includeFieldNames and excludeFieldNames must not intersect\");\r\n    }\r\n}"
      },
      {
        "name": "ReflectionToStringBuilder#appendFieldsIn(...1)",
        "body": "{\r\n    if (clazz.isArray()) {\r\n        this.reflectionAppendArray(this.getObject());\r\n        return;\r\n    }\r\n    // The elements in the returned array are not sorted and are not in any particular order.\r\n    final Field[] fields \u003d ArraySorter.sort(clazz.getDeclaredFields(), Comparator.comparing(Field::getName));\r\n    AccessibleObject.setAccessible(fields, true);\r\n    for (final Field field : fields) {\r\n        final String fieldName \u003d field.getName();\r\n        if (this.accept(field)) {\r\n            try {\r\n                // Warning: Field.get(Object) creates wrappers objects\r\n                // for primitive types.\r\n                final Object fieldValue \u003d this.getValue(field);\r\n                if (!excludeNullValues || fieldValue !\u003d null) {\r\n                    this.append(fieldName, fieldValue, !field.isAnnotationPresent(ToStringSummary.class));\r\n                }\r\n            } catch (final IllegalAccessException e) {\r\n                // this can\u0027t happen. Would get a Security exception instead throw a runtime exception in case the\r\n                // impossible happens.\r\n                throw new IllegalStateException(e);\r\n            }\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "ReflectionToStringBuilder#getStyle(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ReflectionToStringBuilder#getUpToClass(...0)",
        "body": "{\r\n    return this.upToClass;\r\n}"
      },
      {
        "name": "ReflectionToStringBuilder#getObject(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.builder.ToStringBuilder",
    "methodName": "appendSuper",
    "signature": "org.apache.commons.lang3.builder.ToStringBuilder appendSuper(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (superToString !\u003d null) {\r\n        style.appendSuper(buffer, superToString);\r\n    }\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ToStringBuilder\n  String\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d ToStringStyle style\u003e\n  $r2 \u003d StringBuffer buffer\u003e\n  $r3.appendSuper($r2, r0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.ToStringBuilder",
    "methodName": "appendToString",
    "signature": "org.apache.commons.lang3.builder.ToStringBuilder appendToString(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (toString !\u003d null) {\r\n        style.appendToString(buffer, toString);\r\n    }\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ToStringBuilder\n  String\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d ToStringStyle style\u003e\n  $r2 \u003d StringBuffer buffer\u003e\n  $r3.appendToString($r2, r0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.builder.ToStringBuilder",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    if (this.getObject() \u003d\u003d null) {\r\n        this.getStringBuffer().append(this.getStyle().getNullText());\r\n    } else {\r\n        style.appendEnd(this.getStringBuffer(), this.getObject());\r\n    }\r\n    return this.getStringBuffer().toString();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ToStringBuilder\n  $r1 \u003d r0.getObject()\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d r0.getStringBuffer()\n  $r7 \u003d r0.getStyle()\n  $r8 \u003d $r7.getNullText()\n  $r9.append($r8)\n  goto B3\n}",
      "B2 {\n  $r2 \u003d ToStringStyle style\u003e\n  $r4 \u003d r0.getStringBuffer()\n  $r3 \u003d r0.getObject()\n  $r2.appendEnd($r4, $r3)\n}",
      "B3 {\n  $r5 \u003d r0.getStringBuffer()\n  $r6 \u003d $r5.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ToStringBuilder#getStyle(...0)",
        "body": "{\r\n    return style;\r\n}"
      },
      {
        "name": "ToStringBuilder#getStringBuffer(...0)",
        "body": "{\r\n    return buffer;\r\n}"
      },
      {
        "name": "ToStringBuilder#getObject(...0)",
        "body": "{\r\n    return object;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.CharSequenceUtils",
    "methodName": "subSequence",
    "signature": "java.lang.CharSequence subSequence(java.lang.CharSequence,int)",
    "visibility": "public",
    "body": "{\r\n    return cs \u003d\u003d null ? null : cs.subSequence(start, cs.length());\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  i0 :\u003d @parameter1: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d null\n  goto B3\n}",
      "B2 {\n  $i1 \u003d r0.length()\n  $r1 \u003d r0.subSequence(i0, $i1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.CharSequenceUtils",
    "methodName": "toCharArray",
    "signature": "char[] toCharArray(java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d StringUtils.length(source);\r\n    if (len \u003d\u003d 0) {\r\n        return ArrayUtils.EMPTY_CHAR_ARRAY;\r\n    }\r\n    if (source instanceof String) {\r\n        return ((String) source).toCharArray();\r\n    }\r\n    final char[] array \u003d new char[len];\r\n    for (int i \u003d 0; i \u003c len; i++) {\r\n        array[i] \u003d source.charAt(i);\r\n    }\r\n    return array;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 !\u003d 0) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B5 : If(i2 \u003e\u003d i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  i0 \u003d StringUtils.length(r0)\n  if (i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d ArrayUtils: char[] EMPTY_CHAR_ARRAY\u003e\n  return\n}",
      "B2 {\n  $z0 \u003d String\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d String) r0\n  $r3 \u003d $r2.toCharArray()\n  return\n}",
      "B4 {\n  r1 \u003d newarray (char)[i0]\n  i2 \u003d 0\n}",
      "B5 {\n  if (i2 \u003e\u003d i0) goto B6 else B7\n}",
      "B6 {\n  $c1 \u003d r0.charAt(i2)\n  r1[i2] \u003d $c1\n  i2 \u003d i2 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.CharSet",
    "methodName": "getInstance",
    "signature": "org.apache.commons.lang3.CharSet getInstance(java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    if (setStrs \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (setStrs.length \u003d\u003d 1) {\r\n        final CharSet common \u003d COMMON.get(setStrs[0]);\r\n        if (common !\u003d null) {\r\n            return common;\r\n        }\r\n    }\r\n    return new CharSet(setStrs);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 1) → B3 | else → B5",
      "B3 : If(r5 \u003d\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  String[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 1) goto B3 else B5\n}",
      "B3 {\n  $r3 \u003d Map COMMON\u003e\n  $r2 \u003d r0[0]\n  $r4 \u003d $r3.get($r2)\n  r5 \u003d CharSet) $r4\n  if (r5 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r1 \u003d CharSet\n  new CharSet(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.CharSet",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (!(obj instanceof CharSet)) {\r\n        return false;\r\n    }\r\n    final CharSet other \u003d (CharSet) obj;\r\n    return set.equals(other.set);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CharSet\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d CharSet\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d CharSet) r0\n  $r4 \u003d Set set\u003e\n  $r3 \u003d Set set\u003e\n  $z1 \u003d $r4.equals($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.CharSetUtils",
    "methodName": "containsAny",
    "signature": "boolean containsAny(java.lang.String,java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    if (StringUtils.isEmpty(str) || deepEmpty(set)) {\r\n        return false;\r\n    }\r\n    final CharSet chars \u003d CharSet.getInstance(set);\r\n    for (final char c : str.toCharArray()) {\r\n        if (chars.contains(c)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i2 \u003e\u003d i0) → B5 | else → B8",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  String\n  String[]\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d CharSetUtils.deepEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  r2 \u003d CharSet.getInstance(r1)\n  r3 \u003d r0.toCharArray()\n  i0 \u003d lengthof r3\n  i2 \u003d 0\n}",
      "B4 {\n  if (i2 \u003e\u003d i0) goto B5 else B8\n}",
      "B5 {\n  c1 \u003d r3[i2]\n  $z2 \u003d r2.contains(c1)\n  if ($z2 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  i2 \u003d i2 + 1\n  goto B4\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B4",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CharSetUtils#deepEmpty(...1)",
        "body": "{\r\n    return Streams.of(strings).allMatch(StringUtils::isEmpty);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.CharSetUtils",
    "methodName": "count",
    "signature": "int count(java.lang.String,java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    if (StringUtils.isEmpty(str) || deepEmpty(set)) {\r\n        return 0;\r\n    }\r\n    final CharSet chars \u003d CharSet.getInstance(set);\r\n    int count \u003d 0;\r\n    for (final char c : str.toCharArray()) {\r\n        if (chars.contains(c)) {\r\n            count++;\r\n        }\r\n    }\r\n    return count;\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i3 \u003e\u003d i0) → B5 | else → B8",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  String\n  String[]\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d CharSetUtils.deepEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  r2 \u003d CharSet.getInstance(r1)\n  i2 \u003d 0\n  r3 \u003d r0.toCharArray()\n  i0 \u003d lengthof r3\n  i3 \u003d 0\n}",
      "B4 {\n  if (i3 \u003e\u003d i0) goto B5 else B8\n}",
      "B5 {\n  c1 \u003d r3[i3]\n  $z2 \u003d r2.contains(c1)\n  if ($z2 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  i2 \u003d i2 + 1\n}",
      "B7 {\n  i3 \u003d i3 + 1\n  goto B4\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B4",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CharSetUtils#deepEmpty(...1)",
        "body": "{\r\n    return Streams.of(strings).allMatch(StringUtils::isEmpty);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.CharSetUtils",
    "methodName": "delete",
    "signature": "java.lang.String delete(java.lang.String,java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    if (StringUtils.isEmpty(str) || deepEmpty(set)) {\r\n        return str;\r\n    }\r\n    return modify(str, set, false);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  String\n  String[]\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d CharSetUtils.deepEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r2 \u003d CharSetUtils.modify(r0, r1, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CharSetUtils#deepEmpty(...1)",
        "body": "{\r\n    return Streams.of(strings).allMatch(StringUtils::isEmpty);\r\n}"
      },
      {
        "name": "CharSetUtils#modify(...3)",
        "body": "{\r\n    final CharSet chars \u003d CharSet.getInstance(set);\r\n    final StringBuilder buffer \u003d new StringBuilder(str.length());\r\n    final char[] chrs \u003d str.toCharArray();\r\n    for (final char chr : chrs) {\r\n        if (chars.contains(chr) \u003d\u003d expect) {\r\n            buffer.append(chr);\r\n        }\r\n    }\r\n    return buffer.toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.CharSetUtils",
    "methodName": "keep",
    "signature": "java.lang.String keep(java.lang.String,java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (str.isEmpty() || deepEmpty(set)) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    return modify(str, set, true);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  String\n  String[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r0.isEmpty()\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $z1 \u003d CharSetUtils.deepEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r2 \u003d CharSetUtils.modify(r0, r1, 1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CharSetUtils#deepEmpty(...1)",
        "body": "{\r\n    return Streams.of(strings).allMatch(StringUtils::isEmpty);\r\n}"
      },
      {
        "name": "CharSetUtils#modify(...3)",
        "body": "{\r\n    final CharSet chars \u003d CharSet.getInstance(set);\r\n    final StringBuilder buffer \u003d new StringBuilder(str.length());\r\n    final char[] chrs \u003d str.toCharArray();\r\n    for (final char chr : chrs) {\r\n        if (chars.contains(chr) \u003d\u003d expect) {\r\n            buffer.append(chr);\r\n        }\r\n    }\r\n    return buffer.toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.CharSetUtils",
    "methodName": "squeeze",
    "signature": "java.lang.String squeeze(java.lang.String,java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    if (StringUtils.isEmpty(str) || deepEmpty(set)) {\r\n        return str;\r\n    }\r\n    final CharSet chars \u003d CharSet.getInstance(set);\r\n    final StringBuilder buffer \u003d new StringBuilder(str.length());\r\n    final char[] chrs \u003d str.toCharArray();\r\n    final int sz \u003d chrs.length;\r\n    char lastChar \u003d chrs[0];\r\n    char ch;\r\n    Character inChars \u003d null;\r\n    Character notInChars \u003d null;\r\n    buffer.append(lastChar);\r\n    for (int i \u003d 1; i \u003c sz; i++) {\r\n        ch \u003d chrs[i];\r\n        if (ch \u003d\u003d lastChar) {\r\n            if (inChars !\u003d null \u0026\u0026 ch \u003d\u003d inChars) {\r\n                continue;\r\n            }\r\n            if (notInChars \u003d\u003d null || ch !\u003d notInChars) {\r\n                if (chars.contains(ch)) {\r\n                    inChars \u003d ch;\r\n                    continue;\r\n                }\r\n                notInChars \u003d ch;\r\n            }\r\n        }\r\n        buffer.append(ch);\r\n        lastChar \u003d ch;\r\n    }\r\n    return buffer.toString();\r\n}",
    "nodes": 17,
    "edges": 24,
    "cc": 9,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i6 \u003e\u003d i1) → B5 | else → B16",
      "B5 : If($i7 !\u003d $i8) → B6 | else → B14",
      "B6 : If(r6 \u003d\u003d null) → B7 | else → B9",
      "B7 : If($i9 !\u003d $i10) → B8 | else → B9",
      "B9 : If(r7 \u003d\u003d null) → B10 | else → B11",
      "B10 : If($i11 \u003d\u003d $i12) → B11 | else → B14",
      "B11 : If($z2 \u003d\u003d false) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  String\n  String[]\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d CharSetUtils.deepEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  r2 \u003d CharSet.getInstance(r1)\n  $r8 \u003d StringBuilder\n  $i0 \u003d r0.length()\n  new StringBuilder($i0)\n  r4 \u003d r0.toCharArray()\n  i1 \u003d lengthof r4\n  c5 \u003d r4[0]\n  r6 \u003d null\n  r7 \u003d null\n  $r8.append(c5)\n  i6 \u003d 1\n}",
      "B4 {\n  if (i6 \u003e\u003d i1) goto B5 else B16\n}",
      "B5 {\n  c2 \u003d r4[i6]\n  $i7 \u003d (int) c2\n  $i8 \u003d (int) c5\n  if ($i7 !\u003d $i8) goto B6 else B14\n}",
      "B6 {\n  if (r6 \u003d\u003d null) goto B7 else B9\n}",
      "B7 {\n  $c4 \u003d r6.charValue()\n  $i9 \u003d (int) c2\n  $i10 \u003d (int) $c4\n  if ($i9 !\u003d $i10) goto B8 else B9\n}",
      "B8 {\n  goto B15\n}",
      "B9 {\n  if (r7 \u003d\u003d null) goto B10 else B11\n}",
      "B10 {\n  $c3 \u003d r7.charValue()\n  $i11 \u003d (int) c2\n  $i12 \u003d (int) $c3\n  if ($i11 \u003d\u003d $i12) goto B11 else B14\n}",
      "B11 {\n  $z2 \u003d r2.contains(c2)\n  if ($z2 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  r6 \u003d Character.valueOf(c2)\n  goto B15\n}",
      "B13 {\n  r7 \u003d Character.valueOf(c2)\n}",
      "B14 {\n  $r8.append(c2)\n  c5 \u003d c2\n}",
      "B15 {\n  i6 \u003d i6 + 1\n  goto B4\n}",
      "B16 {\n  $r5 \u003d $r8.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B16",
      "B5 --\u003e B6",
      "B5 --\u003e B14",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B15",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B15",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B15 --\u003e B4",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CharSetUtils#deepEmpty(...1)",
        "body": "{\r\n    return Streams.of(strings).allMatch(StringUtils::isEmpty);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.CharUtils",
    "methodName": "isAscii",
    "signature": "boolean isAscii(char)",
    "visibility": "public",
    "body": "{\r\n    return ch \u003c 128;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003e\u003d 128) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  c0 :\u003d @parameter0: char\n  $i1 \u003d (int) c0\n  if ($i1 \u003e\u003d 128) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.CharUtils",
    "methodName": "isAsciiAlpha",
    "signature": "boolean isAsciiAlpha(char)",
    "visibility": "public",
    "body": "{\r\n    return isAsciiAlphaUpper(ch) || isAsciiAlphaLower(ch);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  c0 :\u003d @parameter0: char\n  $z0 \u003d CharUtils.isAsciiAlphaUpper(c0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d CharUtils.isAsciiAlphaLower(c0)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CharUtils#isAsciiAlphaUpper(...1)",
        "body": "{\r\n    return ch \u003e\u003d \u0027A\u0027 \u0026\u0026 ch \u003c\u003d \u0027Z\u0027;\r\n}"
      },
      {
        "name": "CharUtils#isAsciiAlphaLower(...1)",
        "body": "{\r\n    return ch \u003e\u003d \u0027a\u0027 \u0026\u0026 ch \u003c\u003d \u0027z\u0027;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.CharUtils",
    "methodName": "isAsciiAlphaLower",
    "signature": "boolean isAsciiAlphaLower(char)",
    "visibility": "public",
    "body": "{\r\n    return ch \u003e\u003d \u0027a\u0027 \u0026\u0026 ch \u003c\u003d \u0027z\u0027;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i1 \u003c 97) → B1 | else → B3",
      "B1 : If($i2 \u003e 122) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  c0 :\u003d @parameter0: char\n  $i1 \u003d (int) c0\n  if ($i1 \u003c 97) goto B1 else B3\n}",
      "B1 {\n  $i2 \u003d (int) c0\n  if ($i2 \u003e 122) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.CharUtils",
    "methodName": "isAsciiAlphanumeric",
    "signature": "boolean isAsciiAlphanumeric(char)",
    "visibility": "public",
    "body": "{\r\n    return isAsciiAlpha(ch) || isAsciiNumeric(ch);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  c0 :\u003d @parameter0: char\n  $z0 \u003d CharUtils.isAsciiAlpha(c0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d CharUtils.isAsciiNumeric(c0)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CharUtils#isAsciiNumeric(...1)",
        "body": "{\r\n    return ch \u003e\u003d \u00270\u0027 \u0026\u0026 ch \u003c\u003d \u00279\u0027;\r\n}"
      },
      {
        "name": "CharUtils#isAsciiAlpha(...1)",
        "body": "{\r\n    return isAsciiAlphaUpper(ch) || isAsciiAlphaLower(ch);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.CharUtils",
    "methodName": "isAsciiAlphaUpper",
    "signature": "boolean isAsciiAlphaUpper(char)",
    "visibility": "public",
    "body": "{\r\n    return ch \u003e\u003d \u0027A\u0027 \u0026\u0026 ch \u003c\u003d \u0027Z\u0027;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i1 \u003c 65) → B1 | else → B3",
      "B1 : If($i2 \u003e 90) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  c0 :\u003d @parameter0: char\n  $i1 \u003d (int) c0\n  if ($i1 \u003c 65) goto B1 else B3\n}",
      "B1 {\n  $i2 \u003d (int) c0\n  if ($i2 \u003e 90) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.CharUtils",
    "methodName": "isAsciiControl",
    "signature": "boolean isAsciiControl(char)",
    "visibility": "public",
    "body": "{\r\n    return ch \u003c 32 || ch \u003d\u003d 127;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i1 \u003c 32) → B1 | else → B2",
      "B1 : If($i2 !\u003d 127) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  c0 :\u003d @parameter0: char\n  $i1 \u003d (int) c0\n  if ($i1 \u003c 32) goto B1 else B2\n}",
      "B1 {\n  $i2 \u003d (int) c0\n  if ($i2 !\u003d 127) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.CharUtils",
    "methodName": "isAsciiNumeric",
    "signature": "boolean isAsciiNumeric(char)",
    "visibility": "public",
    "body": "{\r\n    return ch \u003e\u003d \u00270\u0027 \u0026\u0026 ch \u003c\u003d \u00279\u0027;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i1 \u003c 48) → B1 | else → B3",
      "B1 : If($i2 \u003e 57) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  c0 :\u003d @parameter0: char\n  $i1 \u003d (int) c0\n  if ($i1 \u003c 48) goto B1 else B3\n}",
      "B1 {\n  $i2 \u003d (int) c0\n  if ($i2 \u003e 57) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.CharUtils",
    "methodName": "isAsciiPrintable",
    "signature": "boolean isAsciiPrintable(char)",
    "visibility": "public",
    "body": "{\r\n    return ch \u003e\u003d 32 \u0026\u0026 ch \u003c 127;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i1 \u003c 32) → B1 | else → B3",
      "B1 : If($i2 \u003e\u003d 127) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  c0 :\u003d @parameter0: char\n  $i1 \u003d (int) c0\n  if ($i1 \u003c 32) goto B1 else B3\n}",
      "B1 {\n  $i2 \u003d (int) c0\n  if ($i2 \u003e\u003d 127) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.CharUtils",
    "methodName": "toChar",
    "signature": "char toChar(java.lang.Character,char)",
    "visibility": "public",
    "body": "{\r\n    return ch !\u003d null ? ch.charValue() : defaultValue;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Character\n  c0 :\u003d @parameter1: char\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $c1 \u003d r0.charValue()\n  goto B3\n}",
      "B2 {\n  $c1 \u003d c0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.CharUtils",
    "methodName": "toChar",
    "signature": "char toChar(java.lang.String,char)",
    "visibility": "public",
    "body": "{\r\n    return StringUtils.isEmpty(str) ? defaultValue : str.charAt(0);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  c0 :\u003d @parameter1: char\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $c1 \u003d c0\n  goto B3\n}",
      "B2 {\n  $c1 \u003d r0.charAt(0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.CharUtils",
    "methodName": "toCharacterObject",
    "signature": "java.lang.Character toCharacterObject(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return StringUtils.isEmpty(str) ? null : Character.valueOf(str.charAt(0));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d null\n  goto B3\n}",
      "B2 {\n  $c0 \u003d r0.charAt(0)\n  $r1 \u003d Character.valueOf($c0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.CharUtils",
    "methodName": "toIntValue",
    "signature": "int toIntValue(char)",
    "visibility": "public",
    "body": "{\r\n    if (!isAsciiNumeric(ch)) {\r\n        throw new IllegalArgumentException(\"The character \" + ch + \" is not in the range \u00270\u0027 - \u00279\u0027\");\r\n    }\r\n    return ch - 48;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  c0 :\u003d @parameter0: char\n  $z0 \u003d CharUtils.isAsciiNumeric(c0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d IllegalArgumentException\n  $r6 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d $r6.append(\"The character \")\n  $r3 \u003d $r2.append(c0)\n  $r4 \u003d $r3.append(\" is not in the range \\\u00270\\\u0027 - \\\u00279\\\u0027\")\n  $r5 \u003d $r4.toString()\n  new IllegalArgumentException($r5)\n  throw $r7\n}",
      "B2 {\n  $i2 \u003d (int) c0\n  $i1 \u003d $i2 - 48\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CharUtils#isAsciiNumeric(...1)",
        "body": "{\r\n    return ch \u003e\u003d \u00270\u0027 \u0026\u0026 ch \u003c\u003d \u00279\u0027;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.CharUtils",
    "methodName": "toIntValue",
    "signature": "int toIntValue(char,int)",
    "visibility": "public",
    "body": "{\r\n    return isAsciiNumeric(ch) ? ch - 48 : defaultValue;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  c0 :\u003d @parameter0: char\n  i1 :\u003d @parameter1: int\n  $z0 \u003d CharUtils.isAsciiNumeric(c0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $i3 \u003d (int) c0\n  $i2 \u003d $i3 - 48\n  goto B3\n}",
      "B2 {\n  $i2 \u003d i1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CharUtils#isAsciiNumeric(...1)",
        "body": "{\r\n    return ch \u003e\u003d \u00270\u0027 \u0026\u0026 ch \u003c\u003d \u00279\u0027;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.CharUtils",
    "methodName": "toIntValue",
    "signature": "int toIntValue(java.lang.Character,int)",
    "visibility": "public",
    "body": "{\r\n    return ch !\u003d null ? toIntValue(ch.charValue(), defaultValue) : defaultValue;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Character\n  i0 :\u003d @parameter1: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $c1 \u003d r0.charValue()\n  $i2 \u003d CharUtils.toIntValue($c1, i0)\n  goto B3\n}",
      "B2 {\n  $i2 \u003d i0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CharUtils#toIntValue(...2)",
        "body": "{\r\n    return isAsciiNumeric(ch) ? ch - 48 : defaultValue;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.CharUtils",
    "methodName": "toString",
    "signature": "java.lang.String toString(char)",
    "visibility": "public",
    "body": "{\r\n    if (ch \u003c CHAR_STRING_ARRAY.length) {\r\n        return CHAR_STRING_ARRAY[ch];\r\n    }\r\n    return String.valueOf(ch);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i2 \u003e\u003d $i1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  c0 :\u003d @parameter0: char\n  $r0 \u003d String[] CHAR_STRING_ARRAY\u003e\n  $i1 \u003d lengthof $r0\n  $i2 \u003d (int) c0\n  if ($i2 \u003e\u003d $i1) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d String[] CHAR_STRING_ARRAY\u003e\n  $i3 \u003d (int) c0\n  $r3 \u003d $r2[$i3]\n  return\n}",
      "B2 {\n  $r1 \u003d String.valueOf(c0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.CharUtils",
    "methodName": "toString",
    "signature": "java.lang.String toString(java.lang.Character)",
    "visibility": "public",
    "body": "{\r\n    return ch !\u003d null ? toString(ch.charValue()) : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Character\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $c0 \u003d r0.charValue()\n  $r1 \u003d CharUtils.toString($c0)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CharUtils#toString(...1)",
        "body": "{\r\n    if (ch \u003c CHAR_STRING_ARRAY.length) {\r\n        return CHAR_STRING_ARRAY[ch];\r\n    }\r\n    return String.valueOf(ch);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.CharUtils",
    "methodName": "unicodeEscaped",
    "signature": "java.lang.String unicodeEscaped(java.lang.Character)",
    "visibility": "public",
    "body": "{\r\n    return ch !\u003d null ? unicodeEscaped(ch.charValue()) : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Character\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $c0 \u003d r0.charValue()\n  $r1 \u003d CharUtils.unicodeEscaped($c0)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CharUtils#unicodeEscaped(...1)",
        "body": "{\r\n    return \"\\\\u\" + HEX_DIGITS[ch \u003e\u003e 12 \u0026 15] + HEX_DIGITS[ch \u003e\u003e 8 \u0026 15] + HEX_DIGITS[ch \u003e\u003e 4 \u0026 15] + HEX_DIGITS[ch \u0026 15];\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ClassLoaderUtils",
    "methodName": "toString",
    "signature": "java.lang.String toString(java.lang.ClassLoader)",
    "visibility": "public",
    "body": "{\r\n    if (classLoader instanceof URLClassLoader) {\r\n        return toString((URLClassLoader) classLoader);\r\n    }\r\n    return Objects.toString(classLoader);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ClassLoader\n  $z0 \u003d URLClassLoader\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d URLClassLoader) r0\n  $r3 \u003d ClassLoaderUtils.toString($r2)\n  return\n}",
      "B2 {\n  $r1 \u003d Objects.toString(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassLoaderUtils#toString(...1)",
        "body": "{\r\n    if (classLoader instanceof URLClassLoader) {\r\n        return toString((URLClassLoader) classLoader);\r\n    }\r\n    return Objects.toString(classLoader);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ClassLoaderUtils",
    "methodName": "toString",
    "signature": "java.lang.String toString(java.net.URLClassLoader)",
    "visibility": "public",
    "body": "{\r\n    return classLoader !\u003d null ? classLoader + Arrays.toString(classLoader.getURLs()) : \"null\";\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  URLClassLoader\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d StringBuilder\n  new StringBuilder()\n  $r4 \u003d $r1.append(r0)\n  $r2 \u003d r0.getURLs()\n  $r3 \u003d Arrays.toString($r2)\n  $r5 \u003d $r4.append($r3)\n  $r6 \u003d $r5.toString()\n  goto B3\n}",
      "B2 {\n  $r6 \u003d \"null\"\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "convertClassesToClassNames",
    "signature": "java.util.List convertClassesToClassNames(java.util.List)",
    "visibility": "public",
    "body": "{\r\n    return classes \u003d\u003d null ? null : classes.stream().map(e -\u003e getName(e, null)).collect(Collectors.toList());\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  List\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r0.stream()\n  $r1 \u003d ClassUtils$lambda_convertClassesToClassNames_2__60.bootstrap$()\n  $r4 \u003d $r2.map($r1)\n  $r3 \u003d Collectors.toList()\n  $r5 \u003d $r4.collect($r3)\n  $r6 \u003d List) $r5\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtils#getName(...2)",
        "body": "{\r\n    return cls \u003d\u003d null ? valueIfNull : cls.getName();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "convertClassNamesToClasses",
    "signature": "java.util.List convertClassNamesToClasses(java.util.List)",
    "visibility": "public",
    "body": "{\r\n    if (classNames \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final List\u003cClass\u003c?\u003e\u003e classes \u003d new ArrayList\u003c\u003e(classNames.size());\r\n    classNames.forEach(className -\u003e {\r\n        try {\r\n            classes.add(Class.forName(className));\r\n        } catch (final Exception ex) {\r\n            classes.add(null);\r\n        }\r\n    });\r\n    return classes;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  List\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d ArrayList\n  $i0 \u003d r0.size()\n  new ArrayList($i0)\n  $r2 \u003d ClassUtils$lambda_convertClassNamesToClasses_3__61.bootstrap$($r1)\n  r0.forEach($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getAbbreviatedName",
    "signature": "java.lang.String getAbbreviatedName(java.lang.Class,int)",
    "visibility": "public",
    "body": "{\r\n    if (cls \u003d\u003d null) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    return getAbbreviatedName(cls.getName(), lengthHint);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  i0 :\u003d @parameter1: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getName()\n  $r2 \u003d ClassUtils.getAbbreviatedName($r1, i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtils#getAbbreviatedName(...2)",
        "body": "{\r\n    if (cls \u003d\u003d null) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    return getAbbreviatedName(cls.getName(), lengthHint);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getAbbreviatedName",
    "signature": "java.lang.String getAbbreviatedName(java.lang.String,int)",
    "visibility": "public",
    "body": "{\r\n    if (lengthHint \u003c\u003d 0) {\r\n        throw new IllegalArgumentException(\"len must be \u003e 0\");\r\n    }\r\n    if (className \u003d\u003d null) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    if (className.length() \u003c\u003d lengthHint) {\r\n        return className;\r\n    }\r\n    final char[] abbreviated \u003d className.toCharArray();\r\n    int target \u003d 0;\r\n    int source \u003d 0;\r\n    while (source \u003c abbreviated.length) {\r\n        // copy the next part\r\n        int runAheadTarget \u003d target;\r\n        while (source \u003c abbreviated.length \u0026\u0026 abbreviated[source] !\u003d \u0027.\u0027) {\r\n            abbreviated[runAheadTarget++] \u003d abbreviated[source++];\r\n        }\r\n        ++target;\r\n        if (useFull(runAheadTarget, source, abbreviated.length, lengthHint) || target \u003e runAheadTarget) {\r\n            target \u003d runAheadTarget;\r\n        }\r\n        // copy the \u0027.\u0027 unless it was the last part\r\n        if (source \u003c abbreviated.length) {\r\n            abbreviated[target++] \u003d abbreviated[source++];\r\n        }\r\n    }\r\n    return new String(abbreviated, 0, target);\r\n}",
    "nodes": 19,
    "edges": 24,
    "cc": 7,
    "flowSummary": [
      "B0 : If(i0 \u003e 0) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($i1 \u003e i0) → B5 | else → B6",
      "B7 : If(i13 \u003e\u003d $i2) → B8 | else → B18",
      "B9 : If(i13 \u003e\u003d $i3) → B10 | else → B12",
      "B10 : If($i16 \u003d\u003d 46) → B11 | else → B12",
      "B12 : If($z0 !\u003d 0) → B13 | else → B14",
      "B13 : If(i12 \u003c\u003d i14) → B14 | else → B15",
      "B15 : If(i13 \u003e\u003d $i15) → B16 | else → B17"
    ],
    "blockList": [
      "B0 {\n  String\n  i0 :\u003d @parameter1: int\n  if (i0 \u003e 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"len must be \u003e 0\")\n  throw $r4\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i1 \u003d r0.length()\n  if ($i1 \u003e i0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  r1 \u003d r0.toCharArray()\n  i12 \u003d 0\n  i13 \u003d 0\n}",
      "B7 {\n  $i2 \u003d lengthof r1\n  if (i13 \u003e\u003d $i2) goto B8 else B18\n}",
      "B8 {\n  i14 \u003d i12\n}",
      "B9 {\n  $i3 \u003d lengthof r1\n  if (i13 \u003e\u003d $i3) goto B10 else B12\n}",
      "B10 {\n  $c8 \u003d r1[i13]\n  $i16 \u003d (int) $c8\n  if ($i16 \u003d\u003d 46) goto B11 else B12\n}",
      "B11 {\n  $i9 \u003d i14\n  i14 \u003d i14 + 1\n  $i10 \u003d i13\n  i13 \u003d i13 + 1\n  $c11 \u003d r1[$i10]\n  r1[$i9] \u003d $c11\n  goto B9\n}",
      "B12 {\n  i12 \u003d i12 + 1\n  $i4 \u003d lengthof r1\n  $z0 \u003d ClassUtils.useFull(i14, i13, $i4, i0)\n  if ($z0 !\u003d 0) goto B13 else B14\n}",
      "B13 {\n  if (i12 \u003c\u003d i14) goto B14 else B15\n}",
      "B14 {\n  i12 \u003d i14\n}",
      "B15 {\n  $i15 \u003d lengthof r1\n  if (i13 \u003e\u003d $i15) goto B16 else B17\n}",
      "B16 {\n  $i5 \u003d i12\n  i12 \u003d i12 + 1\n  $i6 \u003d i13\n  i13 \u003d i13 + 1\n  $c7 \u003d r1[$i6]\n  r1[$i5] \u003d $c7\n}",
      "B17 {\n  goto B7\n}",
      "B18 {\n  $r5 \u003d String\n  new String(r1, 0, i12)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B18",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B9",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e B7",
      "B18 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtils#useFull(...4)",
        "body": "{\r\n    return source \u003e\u003d originalLength || runAheadTarget + originalLength - source \u003c\u003d desiredLength;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getAllInterfaces",
    "signature": "java.util.List getAllInterfaces(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (cls \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final LinkedHashSet\u003cClass\u003c?\u003e\u003e interfacesFound \u003d new LinkedHashSet\u003c\u003e();\r\n    getAllInterfaces(cls, interfacesFound);\r\n    return new ArrayList\u003c\u003e(interfacesFound);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d LinkedHashSet\n  new LinkedHashSet()\n  ClassUtils.getAllInterfaces(r0, $r1)\n  $r2 \u003d ArrayList\n  new ArrayList($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtils#getAllInterfaces(...2)",
        "body": "{\r\n    while (cls !\u003d null) {\r\n        final Class\u003c?\u003e[] interfaces \u003d cls.getInterfaces();\r\n        for (final Class\u003c?\u003e i : interfaces) {\r\n            if (interfacesFound.add(i)) {\r\n                getAllInterfaces(i, interfacesFound);\r\n            }\r\n        }\r\n        cls \u003d cls.getSuperclass();\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getAllSuperclasses",
    "signature": "java.util.List getAllSuperclasses(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (cls \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final List\u003cClass\u003c?\u003e\u003e classes \u003d new ArrayList\u003c\u003e();\r\n    Class\u003c?\u003e superclass \u003d cls.getSuperclass();\r\n    while (superclass !\u003d null) {\r\n        classes.add(superclass);\r\n        superclass \u003d superclass.getSuperclass();\r\n    }\r\n    return classes;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(r2 \u003d\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Class\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d ArrayList\n  new ArrayList()\n  r2 \u003d r0.getSuperclass()\n}",
      "B3 {\n  if (r2 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r1.add(r2)\n  r2 \u003d r2.getSuperclass()\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getCanonicalName",
    "signature": "java.lang.String getCanonicalName(java.lang.Class,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (cls \u003d\u003d null) {\r\n        return valueIfNull;\r\n    }\r\n    final String canonicalName \u003d cls.getCanonicalName();\r\n    return canonicalName \u003d\u003d null ? valueIfNull : canonicalName;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r1 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Class\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r1 \u003d r0.getCanonicalName()\n  if (r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d r2\n  goto B5\n}",
      "B4 {\n  $r3 \u003d r1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getCanonicalName",
    "signature": "java.lang.String getCanonicalName(java.lang.Object,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d null) {\r\n        return valueIfNull;\r\n    }\r\n    final String canonicalName \u003d object.getClass().getCanonicalName();\r\n    return canonicalName \u003d\u003d null ? valueIfNull : canonicalName;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r2 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Object\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getClass()\n  r2 \u003d $r1.getCanonicalName()\n  if (r2 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d r3\n  goto B5\n}",
      "B4 {\n  $r4 \u003d r2\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getClass",
    "signature": "java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)",
    "visibility": "public",
    "body": "{\r\n    try {\r\n        final Class\u003c?\u003e clazz \u003d getPrimitiveClass(className);\r\n        return clazz !\u003d null ? clazz : Class.forName(toCanonicalName(className), initialize, classLoader);\r\n    } catch (final ClassNotFoundException ex) {\r\n        // allow path separators (.) as inner class name separators\r\n        final int lastDotIndex \u003d className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\r\n        if (lastDotIndex !\u003d -1) {\r\n            try {\r\n                return getClass(classLoader, className.substring(0, lastDotIndex) + INNER_CLASS_SEPARATOR_CHAR + className.substring(lastDotIndex + 1), initialize);\r\n            } catch (final ClassNotFoundException ignored) {\r\n                // ignore exception\r\n            }\r\n        }\r\n        throw ex;\r\n    }\r\n}",
    "nodes": 8,
    "edges": 7,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r13 \u003d\u003d null) → B1 | else → B2",
      "B4 : If(i0 \u003d\u003d $i3) → B5 | else → B7"
    ],
    "blockList": [
      "B0 {\n  ClassLoader\n  String\n  z0 :\u003d @parameter2: boolean\n  r13 \u003d ClassUtils.getPrimitiveClass(r0)\n  if (r13 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r14 \u003d r13\n  goto B3\n}",
      "B2 {\n  $r2 \u003d ClassUtils.toCanonicalName(r0)\n  $r14 \u003d Class.forName($r2, z0, r1)\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r4 :\u003d @caughtexception\n  i0 \u003d r0.lastIndexOf(46)\n  $i3 \u003d (int) -1\n  if (i0 \u003d\u003d $i3) goto B5 else B7\n}",
      "B5 {\n  $r15 \u003d StringBuilder\n  new StringBuilder()\n  $r6 \u003d r0.substring(0, i0)\n  $r7 \u003d $r15.append($r6)\n  $r9 \u003d $r7.append(36)\n  $i1 \u003d i0 + 1\n  $r8 \u003d r0.substring($i1)\n  $r10 \u003d $r9.append($r8)\n  $r11 \u003d $r10.toString()\n  $r12 \u003d ClassUtils.getClass(r1, $r11, z0)\n  return\n}",
      "B6 {\n  $r3 :\u003d @caughtexception\n}",
      "B7 {\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtils#getPrimitiveClass(...1)",
        "body": "{\r\n    return namePrimitiveMap.get(className);\r\n}"
      },
      {
        "name": "ClassUtils#getClass(...3)",
        "body": "{\r\n    try {\r\n        final Class\u003c?\u003e clazz \u003d getPrimitiveClass(className);\r\n        return clazz !\u003d null ? clazz : Class.forName(toCanonicalName(className), initialize, classLoader);\r\n    } catch (final ClassNotFoundException ex) {\r\n        // allow path separators (.) as inner class name separators\r\n        final int lastDotIndex \u003d className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\r\n        if (lastDotIndex !\u003d -1) {\r\n            try {\r\n                return getClass(classLoader, className.substring(0, lastDotIndex) + INNER_CLASS_SEPARATOR_CHAR + className.substring(lastDotIndex + 1), initialize);\r\n            } catch (final ClassNotFoundException ignored) {\r\n                // ignore exception\r\n            }\r\n        }\r\n        throw ex;\r\n    }\r\n}"
      },
      {
        "name": "ClassUtils#toCanonicalName(...1)",
        "body": "{\r\n    String canonicalName \u003d StringUtils.deleteWhitespace(className);\r\n    Objects.requireNonNull(canonicalName, \"className\");\r\n    if (canonicalName.endsWith(\"[]\")) {\r\n        final StringBuilder classNameBuffer \u003d new StringBuilder();\r\n        while (canonicalName.endsWith(\"[]\")) {\r\n            canonicalName \u003d canonicalName.substring(0, canonicalName.length() - 2);\r\n            classNameBuffer.append(\"[\");\r\n        }\r\n        final String abbreviation \u003d abbreviationMap.get(canonicalName);\r\n        if (abbreviation !\u003d null) {\r\n            classNameBuffer.append(abbreviation);\r\n        } else {\r\n            classNameBuffer.append(\"L\").append(canonicalName).append(\";\");\r\n        }\r\n        canonicalName \u003d classNameBuffer.toString();\r\n    }\r\n    return canonicalName;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getClass",
    "signature": "java.lang.Class getClass(java.lang.String,boolean)",
    "visibility": "public",
    "body": "{\r\n    final ClassLoader contextCL \u003d Thread.currentThread().getContextClassLoader();\r\n    final ClassLoader loader \u003d contextCL \u003d\u003d null ? ClassUtils.class.getClassLoader() : contextCL;\r\n    return getClass(loader, className, initialize);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  z0 :\u003d @parameter1: boolean\n  $r0 \u003d Thread.currentThread()\n  r1 \u003d $r0.getContextClassLoader()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d class \"Lorg/apache/commons/lang3/ClassUtils;\"\n  $r5 \u003d $r4.getClassLoader()\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r1\n}",
      "B3 {\n  $r3 \u003d ClassUtils.getClass($r5, r2, z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtils#getClass(...3)",
        "body": "{\r\n    try {\r\n        final Class\u003c?\u003e clazz \u003d getPrimitiveClass(className);\r\n        return clazz !\u003d null ? clazz : Class.forName(toCanonicalName(className), initialize, classLoader);\r\n    } catch (final ClassNotFoundException ex) {\r\n        // allow path separators (.) as inner class name separators\r\n        final int lastDotIndex \u003d className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\r\n        if (lastDotIndex !\u003d -1) {\r\n            try {\r\n                return getClass(classLoader, className.substring(0, lastDotIndex) + INNER_CLASS_SEPARATOR_CHAR + className.substring(lastDotIndex + 1), initialize);\r\n            } catch (final ClassNotFoundException ignored) {\r\n                // ignore exception\r\n            }\r\n        }\r\n        throw ex;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getComponentType",
    "signature": "java.lang.Class getComponentType(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return cls \u003d\u003d null ? null : (Class\u003cT\u003e) cls.getComponentType();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d null\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0.getComponentType()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getName",
    "signature": "java.lang.String getName(java.lang.Class,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return cls \u003d\u003d null ? valueIfNull : cls.getName();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r0.getName()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getName",
    "signature": "java.lang.String getName(java.lang.Object,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return object \u003d\u003d null ? valueIfNull : object.getClass().getName();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r2\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0.getClass()\n  $r3 \u003d $r1.getName()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getPackageCanonicalName",
    "signature": "java.lang.String getPackageCanonicalName(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (cls \u003d\u003d null) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    return getPackageCanonicalName(cls.getName());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getName()\n  $r2 \u003d ClassUtils.getPackageCanonicalName($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtils#getPackageCanonicalName(...1)",
        "body": "{\r\n    if (cls \u003d\u003d null) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    return getPackageCanonicalName(cls.getName());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getPackageCanonicalName",
    "signature": "java.lang.String getPackageCanonicalName(java.lang.Object,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d null) {\r\n        return valueIfNull;\r\n    }\r\n    return getPackageCanonicalName(object.getClass().getName());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getClass()\n  $r2 \u003d $r1.getName()\n  $r3 \u003d ClassUtils.getPackageCanonicalName($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtils#getPackageCanonicalName(...1)",
        "body": "{\r\n    if (cls \u003d\u003d null) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    return getPackageCanonicalName(cls.getName());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getPackageName",
    "signature": "java.lang.String getPackageName(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (cls \u003d\u003d null) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    return getPackageName(cls.getName());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getName()\n  $r2 \u003d ClassUtils.getPackageName($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtils#getPackageName(...1)",
        "body": "{\r\n    if (cls \u003d\u003d null) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    return getPackageName(cls.getName());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getPackageName",
    "signature": "java.lang.String getPackageName(java.lang.Object,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d null) {\r\n        return valueIfNull;\r\n    }\r\n    return getPackageName(object.getClass());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getClass()\n  $r2 \u003d ClassUtils.getPackageName($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtils#getPackageName(...1)",
        "body": "{\r\n    if (cls \u003d\u003d null) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    return getPackageName(cls.getName());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getPackageName",
    "signature": "java.lang.String getPackageName(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (StringUtils.isEmpty(className)) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    // Strip array encoding\r\n    while (className.charAt(0) \u003d\u003d \u0027[\u0027) {\r\n        className \u003d className.substring(1);\r\n    }\r\n    // Strip Object type encoding\r\n    if (className.charAt(0) \u003d\u003d \u0027L\u0027 \u0026\u0026 className.charAt(className.length() - 1) \u003d\u003d \u0027;\u0027) {\r\n        className \u003d className.substring(1);\r\n    }\r\n    final int i \u003d className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\r\n    if (i \u003d\u003d -1) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    return className.substring(0, i);\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($i6 !\u003d 91) → B3 | else → B4",
      "B4 : If($i7 !\u003d 76) → B5 | else → B7",
      "B5 : If($i8 !\u003d 59) → B6 | else → B7",
      "B7 : If($i5 !\u003d $i10) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  String\n  $z0 \u003d StringUtils.isEmpty(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $c0 \u003d r1.charAt(0)\n  $i6 \u003d (int) $c0\n  if ($i6 !\u003d 91) goto B3 else B4\n}",
      "B3 {\n  r1 \u003d r1.substring(1)\n  goto B2\n}",
      "B4 {\n  $c1 \u003d r1.charAt(0)\n  $i7 \u003d (int) $c1\n  if ($i7 !\u003d 76) goto B5 else B7\n}",
      "B5 {\n  $i2 \u003d r1.length()\n  $i3 \u003d $i2 - 1\n  $c4 \u003d r1.charAt($i3)\n  $i8 \u003d (int) $c4\n  if ($i8 !\u003d 59) goto B6 else B7\n}",
      "B6 {\n  r1 \u003d r1.substring(1)\n}",
      "B7 {\n  $i5 \u003d r1.lastIndexOf(46)\n  $i10 \u003d (int) -1\n  if ($i5 !\u003d $i10) goto B8 else B9\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $r0 \u003d r1.substring(0, $i5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getPublicMethod",
    "signature": "java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])",
    "visibility": "public",
    "body": "{\r\n    final Method declaredMethod \u003d cls.getMethod(methodName, parameterTypes);\r\n    if (isPublic(declaredMethod.getDeclaringClass())) {\r\n        return declaredMethod;\r\n    }\r\n    final List\u003cClass\u003c?\u003e\u003e candidateClasses \u003d new ArrayList\u003c\u003e(getAllInterfaces(cls));\r\n    candidateClasses.addAll(getAllSuperclasses(cls));\r\n    for (final Class\u003c?\u003e candidateClass : candidateClasses) {\r\n        if (!isPublic(candidateClass)) {\r\n            continue;\r\n        }\r\n        final Method candidateMethod;\r\n        try {\r\n            candidateMethod \u003d candidateClass.getMethod(methodName, parameterTypes);\r\n        } catch (final NoSuchMethodException ex) {\r\n            continue;\r\n        }\r\n        if (Modifier.isPublic(candidateMethod.getDeclaringClass().getModifiers())) {\r\n            return candidateMethod;\r\n        }\r\n    }\r\n    throw new NoSuchMethodException(\"Can\u0027t find a public method for \" + methodName + \" \" + ArrayUtils.toString(parameterTypes));\r\n}",
    "nodes": 12,
    "edges": 13,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If($z3 \u003d\u003d false) → B4 | else → B11",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6",
      "B8 : If($z2 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  Class\n  String\n  Class[]\n  r3 \u003d r0.getMethod(r1, r2)\n  $r4 \u003d r3.getDeclaringClass()\n  $z0 \u003d ClassUtils.isPublic($r4)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r5 \u003d ArrayList\n  $r6 \u003d ClassUtils.getAllInterfaces(r0)\n  new ArrayList($r6)\n  $r7 \u003d ClassUtils.getAllSuperclasses(r0)\n  $r5.addAll($r7)\n  r8 \u003d $r5.iterator()\n}",
      "B3 {\n  $z3 \u003d r8.hasNext()\n  if ($z3 \u003d\u003d false) goto B4 else B11\n}",
      "B4 {\n  $r17 \u003d r8.next()\n  r18 \u003d Class) $r17\n  $z1 \u003d ClassUtils.isPublic(r18)\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  goto B3\n}",
      "B6 {\n  r19 \u003d r18.getMethod(r1, r2)\n  goto B8\n}",
      "B7 {\n  $r21 :\u003d @caughtexception\n  goto B3\n}",
      "B8 {\n  $r20 \u003d r19.getDeclaringClass()\n  $i0 \u003d $r20.getModifiers()\n  $z2 \u003d Modifier.isPublic($i0)\n  if ($z2 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  goto B3\n}",
      "B11 {\n  $r9 \u003d NoSuchMethodException\n  $r10 \u003d StringBuilder\n  new StringBuilder()\n  $r11 \u003d $r10.append(\"Can\\\u0027t find a public method for \")\n  $r12 \u003d $r11.append(r1)\n  $r14 \u003d $r12.append(\" \")\n  $r13 \u003d ArrayUtils.toString(r2)\n  $r15 \u003d $r14.append($r13)\n  $r16 \u003d $r15.toString()\n  new NoSuchMethodException($r16)\n  throw $r9\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B11",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B3",
      "B6 --\u003e B8",
      "B7 --\u003e B3",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B3",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtils#isPublic(...1)",
        "body": "{\r\n    return Modifier.isPublic(cls.getModifiers());\r\n}"
      },
      {
        "name": "ClassUtils#getAllSuperclasses(...1)",
        "body": "{\r\n    if (cls \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final List\u003cClass\u003c?\u003e\u003e classes \u003d new ArrayList\u003c\u003e();\r\n    Class\u003c?\u003e superclass \u003d cls.getSuperclass();\r\n    while (superclass !\u003d null) {\r\n        classes.add(superclass);\r\n        superclass \u003d superclass.getSuperclass();\r\n    }\r\n    return classes;\r\n}"
      },
      {
        "name": "ClassUtils#getAllInterfaces(...1)",
        "body": "{\r\n    if (cls \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final LinkedHashSet\u003cClass\u003c?\u003e\u003e interfacesFound \u003d new LinkedHashSet\u003c\u003e();\r\n    getAllInterfaces(cls, interfacesFound);\r\n    return new ArrayList\u003c\u003e(interfacesFound);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getShortCanonicalName",
    "signature": "java.lang.String getShortCanonicalName(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return cls \u003d\u003d null ? StringUtils.EMPTY : getShortCanonicalName(cls.getCanonicalName());\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d \"\"\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0.getCanonicalName()\n  $r2 \u003d ClassUtils.getShortCanonicalName($r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtils#getShortCanonicalName(...1)",
        "body": "{\r\n    return cls \u003d\u003d null ? StringUtils.EMPTY : getShortCanonicalName(cls.getCanonicalName());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getShortCanonicalName",
    "signature": "java.lang.String getShortCanonicalName(java.lang.Object,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return object \u003d\u003d null ? valueIfNull : getShortCanonicalName(object.getClass().getCanonicalName());\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r3\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0.getClass()\n  $r2 \u003d $r1.getCanonicalName()\n  $r4 \u003d ClassUtils.getShortCanonicalName($r2)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtils#getShortCanonicalName(...1)",
        "body": "{\r\n    return cls \u003d\u003d null ? StringUtils.EMPTY : getShortCanonicalName(cls.getCanonicalName());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getShortClassName",
    "signature": "java.lang.String getShortClassName(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (cls \u003d\u003d null) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    return getShortClassName(cls.getName());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getName()\n  $r2 \u003d ClassUtils.getShortClassName($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtils#getShortClassName(...1)",
        "body": "{\r\n    if (cls \u003d\u003d null) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    return getShortClassName(cls.getName());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getShortClassName",
    "signature": "java.lang.String getShortClassName(java.lang.Object,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d null) {\r\n        return valueIfNull;\r\n    }\r\n    return getShortClassName(object.getClass());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getClass()\n  $r2 \u003d ClassUtils.getShortClassName($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtils#getShortClassName(...1)",
        "body": "{\r\n    if (cls \u003d\u003d null) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    return getShortClassName(cls.getName());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getShortClassName",
    "signature": "java.lang.String getShortClassName(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (StringUtils.isEmpty(className)) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    final StringBuilder arrayPrefix \u003d new StringBuilder();\r\n    // Handle array encoding\r\n    if (className.startsWith(\"[\")) {\r\n        while (className.charAt(0) \u003d\u003d \u0027[\u0027) {\r\n            className \u003d className.substring(1);\r\n            arrayPrefix.append(\"[]\");\r\n        }\r\n        // Strip Object type encoding\r\n        if (className.charAt(0) \u003d\u003d \u0027L\u0027 \u0026\u0026 className.charAt(className.length() - 1) \u003d\u003d \u0027;\u0027) {\r\n            className \u003d className.substring(1, className.length() - 1);\r\n        }\r\n        if (reverseAbbreviationMap.containsKey(className)) {\r\n            className \u003d reverseAbbreviationMap.get(className);\r\n        }\r\n    }\r\n    final int lastDotIdx \u003d className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\r\n    final int innerIdx \u003d className.indexOf(INNER_CLASS_SEPARATOR_CHAR, lastDotIdx \u003d\u003d -1 ? 0 : lastDotIdx + 1);\r\n    String out \u003d className.substring(lastDotIdx + 1);\r\n    if (innerIdx !\u003d -1) {\r\n        out \u003d out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);\r\n    }\r\n    return out + arrayPrefix;\r\n}",
    "nodes": 16,
    "edges": 22,
    "cc": 8,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B10",
      "B3 : If($i11 !\u003d 91) → B4 | else → B5",
      "B5 : If($i12 !\u003d 76) → B6 | else → B8",
      "B6 : If($i13 !\u003d 59) → B7 | else → B8",
      "B8 : If($z2 \u003d\u003d false) → B9 | else → B10",
      "B10 : If($i9 !\u003d $i15) → B11 | else → B12",
      "B13 : If($i1 \u003d\u003d $i17) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  String\n  $z0 \u003d StringUtils.isEmpty(r9)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r12 \u003d StringBuilder\n  new StringBuilder()\n  $z1 \u003d r9.startsWith(\"\")\n  if ($z1 \u003d\u003d false) goto B3 else B10\n}",
      "B3 {\n  $c2 \u003d r9.charAt(0)\n  $i11 \u003d (int) $c2\n  if ($i11 !\u003d 91) goto B4 else B5\n}",
      "B4 {\n  r9 \u003d r9.substring(1)\n  $r12.append(\"\")\n  goto B3\n}",
      "B5 {\n  $c3 \u003d r9.charAt(0)\n  $i12 \u003d (int) $c3\n  if ($i12 !\u003d 76) goto B6 else B8\n}",
      "B6 {\n  $i4 \u003d r9.length()\n  $i5 \u003d $i4 - 1\n  $c6 \u003d r9.charAt($i5)\n  $i13 \u003d (int) $c6\n  if ($i13 !\u003d 59) goto B7 else B8\n}",
      "B7 {\n  $i7 \u003d r9.length()\n  $i8 \u003d $i7 - 1\n  r9 \u003d r9.substring(1, $i8)\n}",
      "B8 {\n  $r10 \u003d Map reverseAbbreviationMap\u003e\n  $z2 \u003d $r10.containsKey(r9)\n  if ($z2 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r7 \u003d Map reverseAbbreviationMap\u003e\n  $r8 \u003d $r7.get(r9)\n  r9 \u003d String) $r8\n}",
      "B10 {\n  $i9 \u003d r9.lastIndexOf(46)\n  $r5 \u003d r9\n  $i15 \u003d (int) -1\n  if ($i9 !\u003d $i15) goto B11 else B12\n}",
      "B11 {\n  $i10 \u003d 0\n  goto B13\n}",
      "B12 {\n  $i10 \u003d $i9 + 1\n}",
      "B13 {\n  $i1 \u003d $r5.indexOf(36, $i10)\n  $i0 \u003d $i9 + 1\n  $r6 \u003d r9.substring($i0)\n  r11 \u003d $r6\n  $i17 \u003d (int) -1\n  if ($i1 \u003d\u003d $i17) goto B14 else B15\n}",
      "B14 {\n  r11 \u003d $r6.replace(36, 46)\n}",
      "B15 {\n  $r13 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d $r13.append(r11)\n  $r3 \u003d $r2.append($r12)\n  $r4 \u003d $r3.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B10",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getSimpleName",
    "signature": "java.lang.String getSimpleName(java.lang.Class,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return cls \u003d\u003d null ? valueIfNull : cls.getSimpleName();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r0.getSimpleName()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "getSimpleName",
    "signature": "java.lang.String getSimpleName(java.lang.Object,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return object \u003d\u003d null ? valueIfNull : object.getClass().getSimpleName();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r2\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0.getClass()\n  $r3 \u003d $r1.getSimpleName()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "hierarchy",
    "signature": "java.lang.Iterable hierarchy(java.lang.Class,org.apache.commons.lang3.ClassUtils$Interfaces)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d $r3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  ClassUtils$Interfaces\n  r1 \u003d ClassUtils$lambda_hierarchy_4__62.bootstrap$(r0)\n  $r3 \u003d ClassUtils$Interfaces INCLUDE\u003e\n  if (r2 \u003d\u003d $r3) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d ClassUtils$lambda_hierarchy_5__63.bootstrap$(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "isAssignable",
    "signature": "boolean isAssignable(java.lang.Class,java.lang.Class,boolean)",
    "visibility": "public",
    "body": "{\r\n    if (toClass \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    // have to check for null, as isAssignableFrom doesn\u0027t\r\n    if (cls \u003d\u003d null) {\r\n        return !toClass.isPrimitive();\r\n    }\r\n    // autoboxing:\r\n    if (autoboxing) {\r\n        if (cls.isPrimitive() \u0026\u0026 !toClass.isPrimitive()) {\r\n            cls \u003d primitiveToWrapper(cls);\r\n            if (cls \u003d\u003d null) {\r\n                return false;\r\n            }\r\n        }\r\n        if (toClass.isPrimitive() \u0026\u0026 !cls.isPrimitive()) {\r\n            cls \u003d wrapperToPrimitive(cls);\r\n            if (cls \u003d\u003d null) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    if (cls.equals(toClass)) {\r\n        return true;\r\n    }\r\n    if (cls.isPrimitive()) {\r\n        if (!toClass.isPrimitive()) {\r\n            return false;\r\n        }\r\n        if (Integer.TYPE.equals(cls)) {\r\n            return Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);\r\n        }\r\n        if (Long.TYPE.equals(cls)) {\r\n            return Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);\r\n        }\r\n        if (Boolean.TYPE.equals(cls)) {\r\n            return false;\r\n        }\r\n        if (Double.TYPE.equals(cls)) {\r\n            return false;\r\n        }\r\n        if (Float.TYPE.equals(cls)) {\r\n            return Double.TYPE.equals(toClass);\r\n        }\r\n        if (Character.TYPE.equals(cls) || Short.TYPE.equals(cls)) {\r\n            return Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);\r\n        }\r\n        if (Byte.TYPE.equals(cls)) {\r\n            return Short.TYPE.equals(toClass) || Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);\r\n        }\r\n        // should never get here\r\n        return false;\r\n    }\r\n    return toClass.isAssignableFrom(cls);\r\n}",
    "nodes": 60,
    "edges": 80,
    "cc": 22,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r24 !\u003d null) → B3 | else → B7",
      "B3 : If($z30 !\u003d 0) → B4 | else → B5",
      "B7 : If(z0 \u003d\u003d false) → B8 | else → B16",
      "B8 : If($z27 \u003d\u003d false) → B9 | else → B12",
      "B9 : If($z29 !\u003d 0) → B10 | else → B12",
      "B10 : If(r24 !\u003d null) → B11 | else → B12",
      "B12 : If($z32 \u003d\u003d false) → B13 | else → B16",
      "B13 : If($z28 !\u003d 0) → B14 | else → B16",
      "B14 : If(r24 !\u003d null) → B15 | else → B16",
      "B16 : If($z33 \u003d\u003d false) → B17 | else → B18",
      "B18 : If($z1 \u003d\u003d false) → B19 | else → B59",
      "B19 : If($z3 !\u003d 0) → B20 | else → B21",
      "B21 : If($z4 \u003d\u003d false) → B22 | else → B28",
      "B22 : If($z24 !\u003d 0) → B23 | else → B25",
      "B23 : If($z25 !\u003d 0) → B24 | else → B25",
      "B24 : If($z26 \u003d\u003d false) → B25 | else → B26",
      "B28 : If($z5 \u003d\u003d false) → B29 | else → B34",
      "B29 : If($z22 !\u003d 0) → B30 | else → B31",
      "B30 : If($z23 \u003d\u003d false) → B31 | else → B32",
      "B34 : If($z6 \u003d\u003d false) → B35 | else → B36",
      "B36 : If($z7 \u003d\u003d false) → B37 | else → B38",
      "B38 : If($z8 \u003d\u003d false) → B39 | else → B40",
      "B40 : If($z9 !\u003d 0) → B41 | else → B42",
      "B41 : If($z14 \u003d\u003d false) → B42 | else → B49",
      "B42 : If($z10 !\u003d 0) → B43 | else → B46",
      "B43 : If($z11 !\u003d 0) → B44 | else → B46",
      "B44 : If($z12 !\u003d 0) → B45 | else → B46",
      "B45 : If($z13 \u003d\u003d false) → B46 | else → B47",
      "B49 : If($z15 \u003d\u003d false) → B50 | else → B58",
      "B50 : If($z16 !\u003d 0) → B51 | else → B55",
      "B51 : If($z17 !\u003d 0) → B52 | else → B55",
      "B52 : If($z18 !\u003d 0) → B53 | else → B55",
      "B53 : If($z19 !\u003d 0) → B54 | else → B55",
      "B54 : If($z20 \u003d\u003d false) → B55 | else → B56"
    ],
    "blockList": [
      "B0 {\n  Class\n  Class\n  z0 :\u003d @parameter2: boolean\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r24 !\u003d null) goto B3 else B7\n}",
      "B3 {\n  $z30 \u003d r0.isPrimitive()\n  if ($z30 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $z31 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z31 \u003d 0\n}",
      "B6 {\n  return\n}",
      "B7 {\n  if (z0 \u003d\u003d false) goto B8 else B16\n}",
      "B8 {\n  $z27 \u003d r24.isPrimitive()\n  if ($z27 \u003d\u003d false) goto B9 else B12\n}",
      "B9 {\n  $z29 \u003d r0.isPrimitive()\n  if ($z29 !\u003d 0) goto B10 else B12\n}",
      "B10 {\n  r24 \u003d ClassUtils.primitiveToWrapper(r24)\n  if (r24 !\u003d null) goto B11 else B12\n}",
      "B11 {\n  return\n}",
      "B12 {\n  $z32 \u003d r0.isPrimitive()\n  if ($z32 \u003d\u003d false) goto B13 else B16\n}",
      "B13 {\n  $z28 \u003d r24.isPrimitive()\n  if ($z28 !\u003d 0) goto B14 else B16\n}",
      "B14 {\n  r24 \u003d ClassUtils.wrapperToPrimitive(r24)\n  if (r24 !\u003d null) goto B15 else B16\n}",
      "B15 {\n  return\n}",
      "B16 {\n  $z33 \u003d r24.equals(r0)\n  if ($z33 \u003d\u003d false) goto B17 else B18\n}",
      "B17 {\n  return\n}",
      "B18 {\n  $z1 \u003d r24.isPrimitive()\n  if ($z1 \u003d\u003d false) goto B19 else B59\n}",
      "B19 {\n  $z3 \u003d r0.isPrimitive()\n  if ($z3 !\u003d 0) goto B20 else B21\n}",
      "B20 {\n  return\n}",
      "B21 {\n  $r1 \u003d Class TYPE\u003e\n  $z4 \u003d $r1.equals(r24)\n  if ($z4 \u003d\u003d false) goto B22 else B28\n}",
      "B22 {\n  $r21 \u003d Class TYPE\u003e\n  $z24 \u003d $r21.equals(r0)\n  if ($z24 !\u003d 0) goto B23 else B25\n}",
      "B23 {\n  $r22 \u003d Class TYPE\u003e\n  $z25 \u003d $r22.equals(r0)\n  if ($z25 !\u003d 0) goto B24 else B25\n}",
      "B24 {\n  $r23 \u003d Class TYPE\u003e\n  $z26 \u003d $r23.equals(r0)\n  if ($z26 \u003d\u003d false) goto B25 else B26\n}",
      "B25 {\n  $z34 \u003d 1\n  goto B27\n}",
      "B26 {\n  $z34 \u003d 0\n}",
      "B27 {\n  return\n}",
      "B28 {\n  $r2 \u003d Class TYPE\u003e\n  $z5 \u003d $r2.equals(r24)\n  if ($z5 \u003d\u003d false) goto B29 else B34\n}",
      "B29 {\n  $r19 \u003d Class TYPE\u003e\n  $z22 \u003d $r19.equals(r0)\n  if ($z22 !\u003d 0) goto B30 else B31\n}",
      "B30 {\n  $r20 \u003d Class TYPE\u003e\n  $z23 \u003d $r20.equals(r0)\n  if ($z23 \u003d\u003d false) goto B31 else B32\n}",
      "B31 {\n  $z35 \u003d 1\n  goto B33\n}",
      "B32 {\n  $z35 \u003d 0\n}",
      "B33 {\n  return\n}",
      "B34 {\n  $r3 \u003d Class TYPE\u003e\n  $z6 \u003d $r3.equals(r24)\n  if ($z6 \u003d\u003d false) goto B35 else B36\n}",
      "B35 {\n  return\n}",
      "B36 {\n  $r4 \u003d Class TYPE\u003e\n  $z7 \u003d $r4.equals(r24)\n  if ($z7 \u003d\u003d false) goto B37 else B38\n}",
      "B37 {\n  return\n}",
      "B38 {\n  $r5 \u003d Class TYPE\u003e\n  $z8 \u003d $r5.equals(r24)\n  if ($z8 \u003d\u003d false) goto B39 else B40\n}",
      "B39 {\n  $r18 \u003d Class TYPE\u003e\n  $z21 \u003d $r18.equals(r0)\n  return\n}",
      "B40 {\n  $r6 \u003d Class TYPE\u003e\n  $z9 \u003d $r6.equals(r24)\n  if ($z9 !\u003d 0) goto B41 else B42\n}",
      "B41 {\n  $r11 \u003d Class TYPE\u003e\n  $z14 \u003d $r11.equals(r24)\n  if ($z14 \u003d\u003d false) goto B42 else B49\n}",
      "B42 {\n  $r7 \u003d Class TYPE\u003e\n  $z10 \u003d $r7.equals(r0)\n  if ($z10 !\u003d 0) goto B43 else B46\n}",
      "B43 {\n  $r8 \u003d Class TYPE\u003e\n  $z11 \u003d $r8.equals(r0)\n  if ($z11 !\u003d 0) goto B44 else B46\n}",
      "B44 {\n  $r9 \u003d Class TYPE\u003e\n  $z12 \u003d $r9.equals(r0)\n  if ($z12 !\u003d 0) goto B45 else B46\n}",
      "B45 {\n  $r10 \u003d Class TYPE\u003e\n  $z13 \u003d $r10.equals(r0)\n  if ($z13 \u003d\u003d false) goto B46 else B47\n}",
      "B46 {\n  $z36 \u003d 1\n  goto B48\n}",
      "B47 {\n  $z36 \u003d 0\n}",
      "B48 {\n  return\n}",
      "B49 {\n  $r12 \u003d Class TYPE\u003e\n  $z15 \u003d $r12.equals(r24)\n  if ($z15 \u003d\u003d false) goto B50 else B58\n}",
      "B50 {\n  $r13 \u003d Class TYPE\u003e\n  $z16 \u003d $r13.equals(r0)\n  if ($z16 !\u003d 0) goto B51 else B55\n}",
      "B51 {\n  $r14 \u003d Class TYPE\u003e\n  $z17 \u003d $r14.equals(r0)\n  if ($z17 !\u003d 0) goto B52 else B55\n}",
      "B52 {\n  $r15 \u003d Class TYPE\u003e\n  $z18 \u003d $r15.equals(r0)\n  if ($z18 !\u003d 0) goto B53 else B55\n}",
      "B53 {\n  $r16 \u003d Class TYPE\u003e\n  $z19 \u003d $r16.equals(r0)\n  if ($z19 !\u003d 0) goto B54 else B55\n}",
      "B54 {\n  $r17 \u003d Class TYPE\u003e\n  $z20 \u003d $r17.equals(r0)\n  if ($z20 \u003d\u003d false) goto B55 else B56\n}",
      "B55 {\n  $z37 \u003d 1\n  goto B57\n}",
      "B56 {\n  $z37 \u003d 0\n}",
      "B57 {\n  return\n}",
      "B58 {\n  return\n}",
      "B59 {\n  $z2 \u003d r0.isAssignableFrom(r24)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B16",
      "B8 --\u003e B9",
      "B8 --\u003e B12",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B16",
      "B13 --\u003e B14",
      "B13 --\u003e B16",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e B19",
      "B18 --\u003e B59",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e [EXIT]",
      "B21 --\u003e B22",
      "B21 --\u003e B28",
      "B22 --\u003e B23",
      "B22 --\u003e B25",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B27",
      "B27 --\u003e [EXIT]",
      "B28 --\u003e B29",
      "B28 --\u003e B34",
      "B29 --\u003e B30",
      "B29 --\u003e B31",
      "B30 --\u003e B31",
      "B30 --\u003e B32",
      "B31 --\u003e B33",
      "B32 --\u003e B33",
      "B33 --\u003e [EXIT]",
      "B34 --\u003e B35",
      "B34 --\u003e B36",
      "B35 --\u003e [EXIT]",
      "B36 --\u003e B37",
      "B36 --\u003e B38",
      "B37 --\u003e [EXIT]",
      "B38 --\u003e B39",
      "B38 --\u003e B40",
      "B39 --\u003e [EXIT]",
      "B40 --\u003e B41",
      "B40 --\u003e B42",
      "B41 --\u003e B42",
      "B41 --\u003e B49",
      "B42 --\u003e B43",
      "B42 --\u003e B46",
      "B43 --\u003e B44",
      "B43 --\u003e B46",
      "B44 --\u003e B45",
      "B44 --\u003e B46",
      "B45 --\u003e B46",
      "B45 --\u003e B47",
      "B46 --\u003e B48",
      "B47 --\u003e B48",
      "B48 --\u003e [EXIT]",
      "B49 --\u003e B50",
      "B49 --\u003e B58",
      "B50 --\u003e B51",
      "B50 --\u003e B55",
      "B51 --\u003e B52",
      "B51 --\u003e B55",
      "B52 --\u003e B53",
      "B52 --\u003e B55",
      "B53 --\u003e B54",
      "B53 --\u003e B55",
      "B54 --\u003e B55",
      "B54 --\u003e B56",
      "B55 --\u003e B57",
      "B56 --\u003e B57",
      "B57 --\u003e [EXIT]",
      "B58 --\u003e [EXIT]",
      "B59 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtils#primitiveToWrapper(...1)",
        "body": "{\r\n    Class\u003c?\u003e convertedClass \u003d cls;\r\n    if (cls !\u003d null \u0026\u0026 cls.isPrimitive()) {\r\n        convertedClass \u003d primitiveWrapperMap.get(cls);\r\n    }\r\n    return convertedClass;\r\n}"
      },
      {
        "name": "ClassUtils#wrapperToPrimitive(...1)",
        "body": "{\r\n    return wrapperPrimitiveMap.get(cls);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "isAssignable",
    "signature": "boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)",
    "visibility": "public",
    "body": "{\r\n    if (toClass \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    // have to check for null, as isAssignableFrom doesn\u0027t\r\n    if (cls \u003d\u003d null) {\r\n        return !toClass.isPrimitive();\r\n    }\r\n    // autoboxing:\r\n    if (autoboxing) {\r\n        if (cls.isPrimitive() \u0026\u0026 !toClass.isPrimitive()) {\r\n            cls \u003d primitiveToWrapper(cls);\r\n            if (cls \u003d\u003d null) {\r\n                return false;\r\n            }\r\n        }\r\n        if (toClass.isPrimitive() \u0026\u0026 !cls.isPrimitive()) {\r\n            cls \u003d wrapperToPrimitive(cls);\r\n            if (cls \u003d\u003d null) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    if (cls.equals(toClass)) {\r\n        return true;\r\n    }\r\n    if (cls.isPrimitive()) {\r\n        if (!toClass.isPrimitive()) {\r\n            return false;\r\n        }\r\n        if (Integer.TYPE.equals(cls)) {\r\n            return Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);\r\n        }\r\n        if (Long.TYPE.equals(cls)) {\r\n            return Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);\r\n        }\r\n        if (Boolean.TYPE.equals(cls)) {\r\n            return false;\r\n        }\r\n        if (Double.TYPE.equals(cls)) {\r\n            return false;\r\n        }\r\n        if (Float.TYPE.equals(cls)) {\r\n            return Double.TYPE.equals(toClass);\r\n        }\r\n        if (Character.TYPE.equals(cls) || Short.TYPE.equals(cls)) {\r\n            return Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);\r\n        }\r\n        if (Byte.TYPE.equals(cls)) {\r\n            return Short.TYPE.equals(toClass) || Integer.TYPE.equals(toClass) || Long.TYPE.equals(toClass) || Float.TYPE.equals(toClass) || Double.TYPE.equals(toClass);\r\n        }\r\n        // should never get here\r\n        return false;\r\n    }\r\n    return toClass.isAssignableFrom(cls);\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B3 : If(i1 \u003e\u003d $i0) → B4 | else → B7",
      "B4 : If($z2 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Class[]\n  Class[]\n  z1 :\u003d @parameter2: boolean\n  $z0 \u003d ArrayUtils.isSameLength(r2, r3)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r4 \u003d ArrayUtils.nullToEmpty(r2)\n  r5 \u003d ArrayUtils.nullToEmpty(r3)\n  i1 \u003d 0\n}",
      "B3 {\n  $i0 \u003d lengthof r4\n  if (i1 \u003e\u003d $i0) goto B4 else B7\n}",
      "B4 {\n  $r1 \u003d r4[i1]\n  $r0 \u003d r5[i1]\n  $z2 \u003d ClassUtils.isAssignable($r1, $r0, z1)\n  if ($z2 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i1 \u003d i1 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtils#primitiveToWrapper(...1)",
        "body": "{\r\n    Class\u003c?\u003e convertedClass \u003d cls;\r\n    if (cls !\u003d null \u0026\u0026 cls.isPrimitive()) {\r\n        convertedClass \u003d primitiveWrapperMap.get(cls);\r\n    }\r\n    return convertedClass;\r\n}"
      },
      {
        "name": "ClassUtils#wrapperToPrimitive(...1)",
        "body": "{\r\n    return wrapperPrimitiveMap.get(cls);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "isInnerClass",
    "signature": "boolean isInnerClass(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return cls !\u003d null \u0026\u0026 cls.getEnclosingClass() !\u003d null;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($r1 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Class\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r1 \u003d r0.getEnclosingClass()\n  if ($r1 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "isPrimitiveOrWrapper",
    "signature": "boolean isPrimitiveOrWrapper(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (type \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return type.isPrimitive() || isPrimitiveWrapper(type);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Class\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r0.isPrimitive()\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $z1 \u003d ClassUtils.isPrimitiveWrapper(r0)\n  if ($z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $z2 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z2 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtils#isPrimitiveWrapper(...1)",
        "body": "{\r\n    return wrapperPrimitiveMap.containsKey(type);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "primitivesToWrappers",
    "signature": "java.lang.Class[] primitivesToWrappers(java.lang.Class[])",
    "visibility": "public",
    "body": "{\r\n    if (classes \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (classes.length \u003d\u003d 0) {\r\n        return classes;\r\n    }\r\n    final Class\u003c?\u003e[] convertedClasses \u003d new Class[classes.length];\r\n    Arrays.setAll(convertedClasses, i -\u003e primitiveToWrapper(classes[i]));\r\n    return convertedClasses;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Class[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  r1 \u003d Class)[$i1]\n  $r2 \u003d ClassUtils$lambda_primitivesToWrappers_6__64.bootstrap$(r0)\n  Arrays.setAll(r1, $r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtils#primitiveToWrapper(...1)",
        "body": "{\r\n    Class\u003c?\u003e convertedClass \u003d cls;\r\n    if (cls !\u003d null \u0026\u0026 cls.isPrimitive()) {\r\n        convertedClass \u003d primitiveWrapperMap.get(cls);\r\n    }\r\n    return convertedClass;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "primitiveToWrapper",
    "signature": "java.lang.Class primitiveToWrapper(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    Class\u003c?\u003e convertedClass \u003d cls;\r\n    if (cls !\u003d null \u0026\u0026 cls.isPrimitive()) {\r\n        convertedClass \u003d primitiveWrapperMap.get(cls);\r\n    }\r\n    return convertedClass;\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Class\n  r3 \u003d r0\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d r0.isPrimitive()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d Map primitiveWrapperMap\u003e\n  $r2 \u003d $r1.get(r0)\n  r3 \u003d Class) $r2\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "toClass",
    "signature": "java.lang.Class[] toClass(java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (array.length \u003d\u003d 0) {\r\n        return ArrayUtils.EMPTY_CLASS_ARRAY;\r\n    }\r\n    final Class\u003c?\u003e[] classes \u003d new Class[array.length];\r\n    Arrays.setAll(classes, i -\u003e array[i] \u003d\u003d null ? null : array[i].getClass());\r\n    return classes;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d Class[] EMPTY_CLASS_ARRAY\u003e\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  r1 \u003d Class)[$i1]\n  $r2 \u003d ClassUtils$lambda_toClass_7__65.bootstrap$(r0)\n  Arrays.setAll(r1, $r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ClassUtils",
    "methodName": "wrappersToPrimitives",
    "signature": "java.lang.Class[] wrappersToPrimitives(java.lang.Class[])",
    "visibility": "public",
    "body": "{\r\n    if (classes \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (classes.length \u003d\u003d 0) {\r\n        return classes;\r\n    }\r\n    final Class\u003c?\u003e[] convertedClasses \u003d new Class[classes.length];\r\n    Arrays.setAll(convertedClasses, i -\u003e wrapperToPrimitive(classes[i]));\r\n    return convertedClasses;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Class[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i1 \u003d lengthof r0\n  r1 \u003d Class)[$i1]\n  $r2 \u003d ClassUtils$lambda_wrappersToPrimitives_8__66.bootstrap$(r0)\n  Arrays.setAll(r1, $r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassUtils#wrapperToPrimitive(...1)",
        "body": "{\r\n    return wrapperPrimitiveMap.get(cls);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.compare.ComparableUtils",
    "methodName": "max",
    "signature": "java.lang.Comparable max(java.lang.Comparable,java.lang.Comparable)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Comparable\n  Comparable\n  $i0 \u003d ObjectUtils.compare(r0, r1, 0)\n  if ($i0 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.compare.ComparableUtils",
    "methodName": "min",
    "signature": "java.lang.Comparable min(java.lang.Comparable,java.lang.Comparable)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003e\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Comparable\n  Comparable\n  $i0 \u003d ObjectUtils.compare(r0, r1, 1)\n  if ($i0 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.compare.ObjectToStringComparator",
    "methodName": "compare",
    "signature": "int compare(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (o1 \u003d\u003d null \u0026\u0026 o2 \u003d\u003d null) {\r\n        return 0;\r\n    }\r\n    if (o1 \u003d\u003d null) {\r\n        return 1;\r\n    }\r\n    if (o2 \u003d\u003d null) {\r\n        return -1;\r\n    }\r\n    final String string1 \u003d o1.toString();\r\n    final String string2 \u003d o2.toString();\r\n    // No guarantee that toString() returns a non-null value, despite what Spotbugs thinks.\r\n    if (string1 \u003d\u003d null \u0026\u0026 string2 \u003d\u003d null) {\r\n        return 0;\r\n    }\r\n    if (string1 \u003d\u003d null) {\r\n        return 1;\r\n    }\r\n    if (string2 \u003d\u003d null) {\r\n        return -1;\r\n    }\r\n    return string1.compareTo(string2);\r\n}",
    "nodes": 15,
    "edges": 16,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B3",
      "B1 : If(r1 !\u003d null) → B2 | else → B3",
      "B3 : If(r0 !\u003d null) → B4 | else → B5",
      "B5 : If(r1 !\u003d null) → B6 | else → B7",
      "B7 : If(r2 !\u003d null) → B8 | else → B10",
      "B8 : If(r3 !\u003d null) → B9 | else → B10",
      "B10 : If(r2 !\u003d null) → B11 | else → B12",
      "B12 : If(r3 !\u003d null) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  ObjectToStringComparator\n  Object\n  Object\n  if (r0 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  if (r0 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  if (r1 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $i2 \u003d (int) -1\n  return\n}",
      "B7 {\n  r2 \u003d r0.toString()\n  r3 \u003d r1.toString()\n  if (r2 !\u003d null) goto B8 else B10\n}",
      "B8 {\n  if (r3 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  if (r2 !\u003d null) goto B11 else B12\n}",
      "B11 {\n  return\n}",
      "B12 {\n  if (r3 !\u003d null) goto B13 else B14\n}",
      "B13 {\n  $i4 \u003d (int) -1\n  return\n}",
      "B14 {\n  $i0 \u003d r2.compareTo(r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.AtomicInitializer",
    "methodName": "get",
    "signature": "java.lang.Object get()",
    "visibility": "public",
    "body": "{\r\n    T result \u003d reference.get();\r\n    if (result \u003d\u003d getNoInit()) {\r\n        result \u003d initialize();\r\n        if (!reference.compareAndSet(getNoInit(), result)) {\r\n            // another thread has initialized the reference\r\n            result \u003d reference.get();\r\n        }\r\n    }\r\n    return result;\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r6 !\u003d $r2) → B1 | else → B3",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  AtomicInitializer\n  $r1 \u003d AtomicReference reference\u003e\n  r6 \u003d $r1.get()\n  $r2 \u003d r0.getNoInit()\n  if (r6 !\u003d $r2) goto B1 else B3\n}",
      "B1 {\n  r6 \u003d r0.initialize()\n  $r3 \u003d AtomicReference reference\u003e\n  $r4 \u003d r0.getNoInit()\n  $z0 \u003d $r3.compareAndSet($r4, r6)\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d AtomicReference reference\u003e\n  r6 \u003d $r5.get()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AtomicInitializer#getNoInit(...0)",
        "body": "{\r\n    return (T) NO_INIT;\r\n}"
      },
      {
        "name": "AtomicInitializer#initialize(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.AtomicInitializer",
    "methodName": "isInitialized",
    "signature": "boolean isInitialized()",
    "visibility": "public",
    "body": "{\r\n    return reference.get() !\u003d NO_INIT;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r3 \u003d\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AtomicInitializer\n  $r1 \u003d AtomicReference reference\u003e\n  $r3 \u003d $r1.get()\n  $r2 \u003d Object NO_INIT\u003e\n  if ($r3 \u003d\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.AtomicSafeInitializer",
    "methodName": "get",
    "signature": "java.lang.Object get()",
    "visibility": "public",
    "body": "{\r\n    T result;\r\n    while ((result \u003d reference.get()) \u003d\u003d getNoInit()) {\r\n        if (factory.compareAndSet(null, this)) {\r\n            reference.set(initialize());\r\n        }\r\n    }\r\n    return result;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B1 : If($r5 !\u003d $r6) → B2 | else → B4",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B1"
    ],
    "blockList": [
      "B0 {\n  AtomicSafeInitializer\n}",
      "B1 {\n  $r4 \u003d AtomicReference reference\u003e\n  $r5 \u003d $r4.get()\n  $r6 \u003d r0.getNoInit()\n  if ($r5 !\u003d $r6) goto B2 else B4\n}",
      "B2 {\n  $r1 \u003d AtomicReference factory\u003e\n  $z0 \u003d $r1.compareAndSet(null, r0)\n  if ($z0 \u003d\u003d false) goto B3 else B1\n}",
      "B3 {\n  $r2 \u003d AtomicReference reference\u003e\n  $r3 \u003d r0.initialize()\n  $r2.set($r3)\n  goto B1\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B1",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AtomicSafeInitializer#getNoInit(...0)",
        "body": "{\r\n    return (T) NO_INIT;\r\n}"
      },
      {
        "name": "AtomicSafeInitializer#initialize(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.AtomicSafeInitializer",
    "methodName": "isInitialized",
    "signature": "boolean isInitialized()",
    "visibility": "public",
    "body": "{\r\n    return reference.get() !\u003d NO_INIT;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r3 \u003d\u003d $r2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AtomicSafeInitializer\n  $r1 \u003d AtomicReference reference\u003e\n  $r3 \u003d $r1.get()\n  $r2 \u003d Object NO_INIT\u003e\n  if ($r3 \u003d\u003d $r2) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.BackgroundInitializer",
    "methodName": "getFuture",
    "signature": "java.util.concurrent.Future getFuture()",
    "visibility": "public",
    "body": "{\r\n    if (future \u003d\u003d null) {\r\n        throw new IllegalStateException(\"start() must be called first!\");\r\n    }\r\n    return future;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BackgroundInitializer\n  $r1 \u003d Future future\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IllegalStateException\n  new IllegalStateException(\"start() must be called first!\")\n  throw $r3\n}",
      "B2 {\n  $r2 \u003d Future future\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.BackgroundInitializer",
    "methodName": "isInitialized",
    "signature": "boolean isInitialized()",
    "visibility": "public",
    "body": "{\r\n    if (future \u003d\u003d null || !future.isDone()) {\r\n        return false;\r\n    }\r\n    try {\r\n        future.get();\r\n        return true;\r\n    } catch (CancellationException | ExecutionException | InterruptedException e) {\r\n        return false;\r\n    }\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  BackgroundInitializer\n  $r1 \u003d Future future\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Future future\u003e\n  $z0 \u003d $r2.isDone()\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r3 \u003d Future future\u003e\n  $r3.get()\n  return\n}",
      "B4 {\n  $r4 :\u003d @caughtexception\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.BackgroundInitializer",
    "methodName": "isStarted",
    "signature": "boolean isStarted()",
    "visibility": "public",
    "body": "{\r\n    return future !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BackgroundInitializer\n  $r1 \u003d Future future\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.BackgroundInitializer",
    "methodName": "setExternalExecutor",
    "signature": "void setExternalExecutor(java.util.concurrent.ExecutorService)",
    "visibility": "public",
    "body": "{\r\n    if (isStarted()) {\r\n        throw new IllegalStateException(\"Cannot set ExecutorService after start()!\");\r\n    }\r\n    this.externalExecutor \u003d externalExecutor;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BackgroundInitializer\n  ExecutorService\n  $z0 \u003d r0.isStarted()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d IllegalStateException\n  new IllegalStateException(\"Cannot set ExecutorService after start()!\")\n  throw $r2\n}",
      "B2 {\n  ExecutorService externalExecutor\u003e \u003d r1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BackgroundInitializer#isStarted(...0)",
        "body": "{\r\n    return future !\u003d null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.BackgroundInitializer",
    "methodName": "start",
    "signature": "boolean start()",
    "visibility": "public",
    "body": "{\r\n    // Not yet started?\r\n    if (!isStarted()) {\r\n        // Determine the executor to use and whether a temporary one has to\r\n        // be created\r\n        final ExecutorService tempExec;\r\n        executor \u003d getExternalExecutor();\r\n        if (executor \u003d\u003d null) {\r\n            executor \u003d tempExec \u003d createExecutor();\r\n        } else {\r\n            tempExec \u003d null;\r\n        }\r\n        future \u003d executor.submit(createTask(tempExec));\r\n        return true;\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B5",
      "B1 : If($r2 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  BackgroundInitializer\n  $z0 \u003d r0.isStarted()\n  if ($z0 !\u003d 0) goto B1 else B5\n}",
      "B1 {\n  $r1 \u003d r0.getExternalExecutor()\n  ExecutorService executor\u003e \u003d $r1\n  $r2 \u003d ExecutorService executor\u003e\n  if ($r2 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d r0.createExecutor()\n  r7 \u003d $r6\n  ExecutorService executor\u003e \u003d $r6\n  goto B4\n}",
      "B3 {\n  r7 \u003d null\n}",
      "B4 {\n  $r3 \u003d ExecutorService executor\u003e\n  $r4 \u003d r0.createTask(r7)\n  $r5 \u003d $r3.submit($r4)\n  Future future\u003e \u003d $r5\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BackgroundInitializer#createTask(...1)",
        "body": "{\r\n    return new InitializationTask(execDestroy);\r\n}"
      },
      {
        "name": "BackgroundInitializer#createExecutor(...0)",
        "body": "{\r\n    return Executors.newFixedThreadPool(getTaskCount());\r\n}"
      },
      {
        "name": "BackgroundInitializer#isStarted(...0)",
        "body": "{\r\n    return future !\u003d null;\r\n}"
      },
      {
        "name": "BackgroundInitializer#getExternalExecutor(...0)",
        "body": "{\r\n    return externalExecutor;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.ConcurrentUtils",
    "methodName": "createIfAbsent",
    "signature": "java.lang.Object createIfAbsent(java.util.concurrent.ConcurrentMap,java.lang.Object,org.apache.commons.lang3.concurrent.ConcurrentInitializer)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r1 !\u003d null) → B2 | else → B3",
      "B3 : If(r3 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ConcurrentMap\n  Object\n  ConcurrentInitializer\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  r3 \u003d r0.get(r2)\n  if (r3 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d r1.get()\n  $r5 \u003d ConcurrentUtils.putIfAbsent(r0, r2, $r4)\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.ConcurrentUtils",
    "methodName": "extractCause",
    "signature": "org.apache.commons.lang3.concurrent.ConcurrentException extractCause(java.util.concurrent.ExecutionException)",
    "visibility": "public",
    "body": "{\r\n    if (ex \u003d\u003d null || ex.getCause() \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    ExceptionUtils.throwUnchecked(ex.getCause());\r\n    return new ConcurrentException(ex.getMessage(), ex.getCause());\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($r1 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ExecutionException\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d r0.getCause()\n  if ($r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r2 \u003d r0.getCause()\n  ExceptionUtils.throwUnchecked($r2)\n  $r3 \u003d ConcurrentException\n  $r5 \u003d r0.getMessage()\n  $r4 \u003d r0.getCause()\n  new ConcurrentException($r5, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.ConcurrentUtils",
    "methodName": "extractCauseUnchecked",
    "signature": "org.apache.commons.lang3.concurrent.ConcurrentRuntimeException extractCauseUnchecked(java.util.concurrent.ExecutionException)",
    "visibility": "public",
    "body": "{\r\n    if (ex \u003d\u003d null || ex.getCause() \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    ExceptionUtils.throwUnchecked(ex.getCause());\r\n    return new ConcurrentRuntimeException(ex.getMessage(), ex.getCause());\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($r1 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ExecutionException\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d r0.getCause()\n  if ($r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r2 \u003d r0.getCause()\n  ExceptionUtils.throwUnchecked($r2)\n  $r3 \u003d ConcurrentRuntimeException\n  $r5 \u003d r0.getMessage()\n  $r4 \u003d r0.getCause()\n  new ConcurrentRuntimeException($r5, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.ConcurrentUtils",
    "methodName": "handleCause",
    "signature": "void handleCause(java.util.concurrent.ExecutionException)",
    "visibility": "public",
    "body": "{\r\n    final ConcurrentException cause \u003d extractCause(ex);\r\n    if (cause !\u003d null) {\r\n        throw cause;\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ExecutionException\n  r1 \u003d ConcurrentUtils.extractCause(r0)\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  throw r1\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ConcurrentUtils#extractCause(...1)",
        "body": "{\r\n    if (ex \u003d\u003d null || ex.getCause() \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    ExceptionUtils.throwUnchecked(ex.getCause());\r\n    return new ConcurrentException(ex.getMessage(), ex.getCause());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.ConcurrentUtils",
    "methodName": "handleCauseUnchecked",
    "signature": "void handleCauseUnchecked(java.util.concurrent.ExecutionException)",
    "visibility": "public",
    "body": "{\r\n    final ConcurrentRuntimeException cause \u003d extractCauseUnchecked(ex);\r\n    if (cause !\u003d null) {\r\n        throw cause;\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ExecutionException\n  r1 \u003d ConcurrentUtils.extractCauseUnchecked(r0)\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  throw r1\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ConcurrentUtils#extractCauseUnchecked(...1)",
        "body": "{\r\n    if (ex \u003d\u003d null || ex.getCause() \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    ExceptionUtils.throwUnchecked(ex.getCause());\r\n    return new ConcurrentRuntimeException(ex.getMessage(), ex.getCause());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.ConcurrentUtils",
    "methodName": "initialize",
    "signature": "java.lang.Object initialize(org.apache.commons.lang3.concurrent.ConcurrentInitializer)",
    "visibility": "public",
    "body": "{\r\n    return initializer !\u003d null ? initializer.get() : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ConcurrentInitializer\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d r0.get()\n  goto B3\n}",
      "B2 {\n  $r1 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.ConcurrentUtils",
    "methodName": "putIfAbsent",
    "signature": "java.lang.Object putIfAbsent(java.util.concurrent.ConcurrentMap,java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r3 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ConcurrentMap\n  Object\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r3 \u003d r0.putIfAbsent(r1, r2)\n  if (r3 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d r3\n  goto B5\n}",
      "B4 {\n  $r4 \u003d r2\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.ConstantInitializer",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (this \u003d\u003d obj) {\r\n        return true;\r\n    }\r\n    if (!(obj instanceof ConstantInitializer\u003c?\u003e)) {\r\n        return false;\r\n    }\r\n    final ConstantInitializer\u003c?\u003e c \u003d (ConstantInitializer\u003c?\u003e) obj;\r\n    return Objects.equals(getObject(), c.getObject());\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ConstantInitializer\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d ConstantInitializer\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d ConstantInitializer) r1\n  $r4 \u003d r0.getObject()\n  $r3 \u003d r2.getObject()\n  $z1 \u003d Objects.equals($r4, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ConstantInitializer#getObject(...0)",
        "body": "{\r\n    return object;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.LazyInitializer",
    "methodName": "get",
    "signature": "java.lang.Object get()",
    "visibility": "public",
    "body": "{\r\n    // use a temporary variable to reduce the number of reads of the\r\n    // volatile field\r\n    T result \u003d object;\r\n    if (result \u003d\u003d NO_INIT) {\r\n        synchronized (this) {\r\n            result \u003d object;\r\n            if (result \u003d\u003d NO_INIT) {\r\n                object \u003d result \u003d initialize();\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r5 !\u003d $r1) → B1 | else → B5",
      "B1 : If(r5 !\u003d $r2) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  LazyInitializer\n  r5 \u003d Object object\u003e\n  $r1 \u003d Object NO_INIT\u003e\n  if (r5 !\u003d $r1) goto B1 else B5\n}",
      "B1 {\n  entermonitor r0\n  r5 \u003d Object object\u003e\n  $r2 \u003d Object NO_INIT\u003e\n  if (r5 !\u003d $r2) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d r0.initialize()\n  r5 \u003d $r3\n  Object object\u003e \u003d $r3\n}",
      "B3 {\n  exitmonitor r0\n  goto B5\n}",
      "B4 {\n  $r4 :\u003d @caughtexception\n  exitmonitor r0\n  throw $r4\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "LazyInitializer#initialize(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.LazyInitializer",
    "methodName": "isInitialized",
    "signature": "boolean isInitialized()",
    "visibility": "public",
    "body": "{\r\n    return object !\u003d NO_INIT;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  LazyInitializer\n  $r2 \u003d Object object\u003e\n  $r1 \u003d Object NO_INIT\u003e\n  if ($r2 \u003d\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.Memoizer",
    "methodName": "compute",
    "signature": "java.lang.Object compute(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Memoizer\n  Object\n}",
      "B1 {\n  $r3 \u003d ConcurrentMap cache\u003e\n  $r2 \u003d Function mappingFunction\u003e\n  $r4 \u003d $r3.computeIfAbsent(r1, $r2)\n  $r12 \u003d Future) $r4\n  $r5 \u003d $r12.get()\n  return\n}",
      "B2 {\n  $r10 :\u003d @caughtexception\n  $r11 \u003d ConcurrentMap cache\u003e\n  $r11.remove(r1, $r12)\n  goto B6\n}",
      "B3 {\n  $r6 :\u003d @caughtexception\n  $z0 \u003d Memoizer: boolean recalculate\u003e\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r9 \u003d ConcurrentMap cache\u003e\n  $r9.remove(r1, $r12)\n}",
      "B5 {\n  $r7 \u003d $r6.getCause()\n  $r8 \u003d r0.launderException($r7)\n  throw $r8\n}",
      "B6 {\n  goto B1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B1"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer",
    "methodName": "close",
    "signature": "void close()",
    "visibility": "public",
    "body": "{\r\n    ConcurrentException exception \u003d null;\r\n    for (final BackgroundInitializer\u003c?\u003e child : childInitializers.values()) {\r\n        try {\r\n            child.close();\r\n        } catch (final Exception e) {\r\n            if (exception \u003d\u003d null) {\r\n                exception \u003d new ConcurrentException();\r\n            }\r\n            if (e instanceof ConcurrentException) {\r\n                // Because ConcurrentException is only created by classes in this package\r\n                // we can safely unwrap it.\r\n                exception.addSuppressed(e.getCause());\r\n            } else {\r\n                exception.addSuppressed(e);\r\n            }\r\n        }\r\n    }\r\n    if (exception !\u003d null) {\r\n        throw exception;\r\n    }\r\n}",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B9",
      "B3 : If(r9 !\u003d null) → B4 | else → B5",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B7",
      "B9 : If(r9 \u003d\u003d null) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  MultiBackgroundInitializer\n  r9 \u003d null\n  $r1 \u003d Map childInitializers\u003e\n  $r2 \u003d $r1.values()\n  r3 \u003d $r2.iterator()\n}",
      "B1 {\n  $z0 \u003d r3.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B9\n}",
      "B2 {\n  $r4 \u003d r3.next()\n  r5 \u003d BackgroundInitializer) $r4\n  r5.close()\n  goto B8\n}",
      "B3 {\n  $r6 :\u003d @caughtexception\n  if (r9 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r8 \u003d ConcurrentException\n  new ConcurrentException()\n  r9 \u003d $r8\n}",
      "B5 {\n  $z1 \u003d ConcurrentException\n  if ($z1 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r7 \u003d $r6.getCause()\n  r9.addSuppressed($r7)\n  goto B8\n}",
      "B7 {\n  r9.addSuppressed($r6)\n}",
      "B8 {\n  goto B1\n}",
      "B9 {\n  if (r9 \u003d\u003d null) goto B10 else B11\n}",
      "B10 {\n  throw r9\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B9",
      "B2 --\u003e B8",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B1",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer",
    "methodName": "isInitialized",
    "signature": "boolean isInitialized()",
    "visibility": "public",
    "body": "{\r\n    if (childInitializers.isEmpty()) {\r\n        return false;\r\n    }\r\n    return childInitializers.values().stream().allMatch(BackgroundInitializer::isInitialized);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MultiBackgroundInitializer\n  $r1 \u003d Map childInitializers\u003e\n  $z0 \u003d $r1.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d Map childInitializers\u003e\n  $r3 \u003d $r2.values()\n  $r5 \u003d $r3.stream()\n  $r4 \u003d MultiBackgroundInitializer$isInitialized__73.bootstrap$()\n  $z1 \u003d $r5.allMatch($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker",
    "methodName": "checkState",
    "signature": "boolean checkState()",
    "visibility": "public",
    "body": "{\r\n    return !isOpen();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ThresholdCircuitBreaker\n  $z0 \u003d r0.isOpen()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ThresholdCircuitBreaker#isOpen(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker",
    "methodName": "incrementAndCheckState",
    "signature": "boolean incrementAndCheckState(java.lang.Long)",
    "visibility": "public",
    "body": "{\r\n    if (threshold \u003d\u003d 0) {\r\n        open();\r\n    }\r\n    final long used \u003d this.used.addAndGet(increment);\r\n    if (used \u003e threshold) {\r\n        open();\r\n    }\r\n    return checkState();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($b1 !\u003d 0) → B1 | else → B2",
      "B2 : If($i6 \u003c\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ThresholdCircuitBreaker\n  Long\n  $l0 \u003d ThresholdCircuitBreaker: long threshold\u003e\n  $b1 \u003d $l0 cmp 0L\n  if ($b1 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.open()\n}",
      "B2 {\n  $r2 \u003d AtomicLong used\u003e\n  $l2 \u003d r1.longValue()\n  $l5 \u003d $r2.addAndGet($l2)\n  $l3 \u003d ThresholdCircuitBreaker: long threshold\u003e\n  $b4 \u003d $l5 cmp $l3\n  $i6 \u003d (int) $b4\n  if ($i6 \u003c\u003d 0) goto B3 else B4\n}",
      "B3 {\n  r0.open()\n}",
      "B4 {\n  $z0 \u003d r0.checkState()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ThresholdCircuitBreaker#checkState(...0)",
        "body": "{\r\n    return !isOpen();\r\n}"
      },
      {
        "name": "ThresholdCircuitBreaker#open(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.TimedSemaphore",
    "methodName": "acquire",
    "signature": "void acquire()",
    "visibility": "public",
    "body": "{\r\n    prepareAcquire();\r\n    boolean canPass;\r\n    do {\r\n        canPass \u003d acquirePermit();\r\n        if (!canPass) {\r\n            wait();\r\n        }\r\n    } while (!canPass);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 !\u003d 0) → B2 | else → B3",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B1"
    ],
    "blockList": [
      "B0 {\n  TimedSemaphore\n  r0.prepareAcquire()\n}",
      "B1 {\n  $z0 \u003d r0.acquirePermit()\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  r0.wait()\n}",
      "B3 {\n  if ($z0 \u003d\u003d false) goto B4 else B1\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B1",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TimedSemaphore#prepareAcquire(...0)",
        "body": "{\r\n    if (isShutdown()) {\r\n        throw new IllegalStateException(\"TimedSemaphore is shut down!\");\r\n    }\r\n    if (task \u003d\u003d null) {\r\n        task \u003d startTimer();\r\n    }\r\n}"
      },
      {
        "name": "TimedSemaphore#wait(...0)",
        "body": "(source not found)"
      },
      {
        "name": "TimedSemaphore#acquirePermit(...0)",
        "body": "{\r\n    if (getLimit() \u003c\u003d NO_LIMIT || acquireCount \u003c getLimit()) {\r\n        acquireCount++;\r\n        return true;\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.TimedSemaphore",
    "methodName": "getAverageCallsPerPeriod",
    "signature": "double getAverageCallsPerPeriod()",
    "visibility": "public",
    "body": "{\r\n    return periodCount \u003d\u003d 0 ? 0 : (double) totalAcquireCount / (double) periodCount;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($b1 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TimedSemaphore\n  $l0 \u003d TimedSemaphore: long periodCount\u003e\n  $b1 \u003d $l0 cmp 0L\n  if ($b1 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $d2 \u003d 0\n  goto B3\n}",
      "B2 {\n  $l2 \u003d TimedSemaphore: long totalAcquireCount\u003e\n  $d1 \u003d (double) $l2\n  $l3 \u003d TimedSemaphore: long periodCount\u003e\n  $d0 \u003d (double) $l3\n  $d2 \u003d $d1 / $d0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.concurrent.TimedSemaphore",
    "methodName": "shutdown",
    "signature": "void shutdown()",
    "visibility": "public",
    "body": "{\r\n    if (!shutdown) {\r\n        if (ownExecutor) {\r\n            // if the executor was created by this instance, it has\r\n            // to be shutdown\r\n            getExecutorService().shutdownNow();\r\n        }\r\n        if (task !\u003d null) {\r\n            task.cancel(false);\r\n        }\r\n        shutdown \u003d true;\r\n    }\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B6",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B3 : If($r1 \u003d\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  TimedSemaphore\n  $z0 \u003d TimedSemaphore: boolean shutdown\u003e\n  if ($z0 !\u003d 0) goto B1 else B6\n}",
      "B1 {\n  $z1 \u003d TimedSemaphore: boolean ownExecutor\u003e\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d r0.getExecutorService()\n  $r3.shutdownNow()\n}",
      "B3 {\n  $r1 \u003d ScheduledFuture task\u003e\n  if ($r1 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r2 \u003d ScheduledFuture task\u003e\n  $r2.cancel(0)\n}",
      "B5 {\n  TimedSemaphore: boolean shutdown\u003e \u003d 1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TimedSemaphore#getExecutorService(...0)",
        "body": "{\r\n    return executorService;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "binaryBeMsb0ToHexDigit",
    "signature": "char binaryBeMsb0ToHexDigit(boolean[],int)",
    "visibility": "public",
    "body": "{\r\n    // JDK 9: Objects.checkIndex(int index, int length)\r\n    if (Integer.compareUnsigned(srcPos, src.length) \u003e\u003d 0) {\r\n        // Throw the correct exception\r\n        if (src.length \u003d\u003d 0) {\r\n            throw new IllegalArgumentException(\"Cannot convert an empty array.\");\r\n        }\r\n        throw new IndexOutOfBoundsException(srcPos + \" is not within array length \" + src.length);\r\n    }\r\n    // Little-endian bit 0 position\r\n    final int pos \u003d src.length - 1 - srcPos;\r\n    if (3 \u003c\u003d pos \u0026\u0026 src[pos - 3]) {\r\n        if (src[pos - 2]) {\r\n            if (src[pos - 1]) {\r\n                return src[pos] ? \u0027f\u0027 : \u0027e\u0027;\r\n            }\r\n            return src[pos] ? \u0027d\u0027 : \u0027c\u0027;\r\n        }\r\n        if (src[pos - 1]) {\r\n            return src[pos] ? \u0027b\u0027 : \u0027a\u0027;\r\n        }\r\n        return src[pos] ? \u00279\u0027 : \u00278\u0027;\r\n    }\r\n    if (2 \u003c\u003d pos \u0026\u0026 src[pos - 2]) {\r\n        if (src[pos - 1]) {\r\n            return src[pos] ? \u00277\u0027 : \u00276\u0027;\r\n        }\r\n        return src[pos] ? \u00275\u0027 : \u00274\u0027;\r\n    }\r\n    if (1 \u003c\u003d pos \u0026\u0026 src[pos - 1]) {\r\n        return src[pos] ? \u00273\u0027 : \u00272\u0027;\r\n    }\r\n    return src[pos] ? \u00271\u0027 : \u00270\u0027;\r\n}",
    "nodes": 46,
    "edges": 56,
    "cc": 12,
    "flowSummary": [
      "B0 : If($i2 \u003c 0) → B1 | else → B4",
      "B1 : If($i13 !\u003d 0) → B2 | else → B3",
      "B4 : If(3 \u003e i5) → B5 | else → B25",
      "B5 : If($z7 \u003d\u003d false) → B6 | else → B25",
      "B6 : If($z8 \u003d\u003d false) → B7 | else → B16",
      "B7 : If($z12 \u003d\u003d false) → B8 | else → B12",
      "B8 : If($z14 \u003d\u003d false) → B9 | else → B10",
      "B12 : If($z13 \u003d\u003d false) → B13 | else → B14",
      "B16 : If($z9 \u003d\u003d false) → B17 | else → B21",
      "B17 : If($z11 \u003d\u003d false) → B18 | else → B19",
      "B21 : If($z10 \u003d\u003d false) → B22 | else → B23",
      "B25 : If(2 \u003e i5) → B26 | else → B36",
      "B26 : If($z3 \u003d\u003d false) → B27 | else → B36",
      "B27 : If($z4 \u003d\u003d false) → B28 | else → B32",
      "B28 : If($z6 \u003d\u003d false) → B29 | else → B30",
      "B32 : If($z5 \u003d\u003d false) → B33 | else → B34",
      "B36 : If(1 \u003e i5) → B37 | else → B42",
      "B37 : If($z1 \u003d\u003d false) → B38 | else → B42",
      "B38 : If($z2 \u003d\u003d false) → B39 | else → B40",
      "B42 : If($z0 \u003d\u003d false) → B43 | else → B44"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  i0 :\u003d @parameter1: int\n  $i1 \u003d lengthof r0\n  $i2 \u003d Integer.compareUnsigned(i0, $i1)\n  if ($i2 \u003c 0) goto B1 else B4\n}",
      "B1 {\n  $i13 \u003d lengthof r0\n  if ($i13 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Cannot convert an empty array.\")\n  throw $r7\n}",
      "B3 {\n  $r1 \u003d IndexOutOfBoundsException\n  $r2 \u003d StringBuilder\n  new StringBuilder()\n  $r3 \u003d $r2.append(i0)\n  $r4 \u003d $r3.append(\" is not within array length \")\n  $i14 \u003d lengthof r0\n  $r5 \u003d $r4.append($i14)\n  $r6 \u003d $r5.toString()\n  new IndexOutOfBoundsException($r6)\n  throw $r1\n}",
      "B4 {\n  $i3 \u003d lengthof r0\n  $i4 \u003d $i3 - 1\n  i5 \u003d $i4 - i0\n  if (3 \u003e i5) goto B5 else B25\n}",
      "B5 {\n  $i9 \u003d i5 - 3\n  $z7 \u003d r0[$i9]\n  if ($z7 \u003d\u003d false) goto B6 else B25\n}",
      "B6 {\n  $i10 \u003d i5 - 2\n  $z8 \u003d r0[$i10]\n  if ($z8 \u003d\u003d false) goto B7 else B16\n}",
      "B7 {\n  $i12 \u003d i5 - 1\n  $z12 \u003d r0[$i12]\n  if ($z12 \u003d\u003d false) goto B8 else B12\n}",
      "B8 {\n  $z14 \u003d r0[i5]\n  if ($z14 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $c15 \u003d 102\n  goto B11\n}",
      "B10 {\n  $c15 \u003d 101\n}",
      "B11 {\n  return\n}",
      "B12 {\n  $z13 \u003d r0[i5]\n  if ($z13 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  $c16 \u003d 100\n  goto B15\n}",
      "B14 {\n  $c16 \u003d 99\n}",
      "B15 {\n  return\n}",
      "B16 {\n  $i11 \u003d i5 - 1\n  $z9 \u003d r0[$i11]\n  if ($z9 \u003d\u003d false) goto B17 else B21\n}",
      "B17 {\n  $z11 \u003d r0[i5]\n  if ($z11 \u003d\u003d false) goto B18 else B19\n}",
      "B18 {\n  $c17 \u003d 98\n  goto B20\n}",
      "B19 {\n  $c17 \u003d 97\n}",
      "B20 {\n  return\n}",
      "B21 {\n  $z10 \u003d r0[i5]\n  if ($z10 \u003d\u003d false) goto B22 else B23\n}",
      "B22 {\n  $c18 \u003d 57\n  goto B24\n}",
      "B23 {\n  $c18 \u003d 56\n}",
      "B24 {\n  return\n}",
      "B25 {\n  if (2 \u003e i5) goto B26 else B36\n}",
      "B26 {\n  $i7 \u003d i5 - 2\n  $z3 \u003d r0[$i7]\n  if ($z3 \u003d\u003d false) goto B27 else B36\n}",
      "B27 {\n  $i8 \u003d i5 - 1\n  $z4 \u003d r0[$i8]\n  if ($z4 \u003d\u003d false) goto B28 else B32\n}",
      "B28 {\n  $z6 \u003d r0[i5]\n  if ($z6 \u003d\u003d false) goto B29 else B30\n}",
      "B29 {\n  $c19 \u003d 55\n  goto B31\n}",
      "B30 {\n  $c19 \u003d 54\n}",
      "B31 {\n  return\n}",
      "B32 {\n  $z5 \u003d r0[i5]\n  if ($z5 \u003d\u003d false) goto B33 else B34\n}",
      "B33 {\n  $c20 \u003d 53\n  goto B35\n}",
      "B34 {\n  $c20 \u003d 52\n}",
      "B35 {\n  return\n}",
      "B36 {\n  if (1 \u003e i5) goto B37 else B42\n}",
      "B37 {\n  $i6 \u003d i5 - 1\n  $z1 \u003d r0[$i6]\n  if ($z1 \u003d\u003d false) goto B38 else B42\n}",
      "B38 {\n  $z2 \u003d r0[i5]\n  if ($z2 \u003d\u003d false) goto B39 else B40\n}",
      "B39 {\n  $c21 \u003d 51\n  goto B41\n}",
      "B40 {\n  $c21 \u003d 50\n}",
      "B41 {\n  return\n}",
      "B42 {\n  $z0 \u003d r0[i5]\n  if ($z0 \u003d\u003d false) goto B43 else B44\n}",
      "B43 {\n  $c22 \u003d 49\n  goto B45\n}",
      "B44 {\n  $c22 \u003d 48\n}",
      "B45 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B25",
      "B5 --\u003e B6",
      "B5 --\u003e B25",
      "B6 --\u003e B7",
      "B6 --\u003e B16",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B21",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B20",
      "B20 --\u003e [EXIT]",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B24",
      "B24 --\u003e [EXIT]",
      "B25 --\u003e B26",
      "B25 --\u003e B36",
      "B26 --\u003e B27",
      "B26 --\u003e B36",
      "B27 --\u003e B28",
      "B27 --\u003e B32",
      "B28 --\u003e B29",
      "B28 --\u003e B30",
      "B29 --\u003e B31",
      "B30 --\u003e B31",
      "B31 --\u003e [EXIT]",
      "B32 --\u003e B33",
      "B32 --\u003e B34",
      "B33 --\u003e B35",
      "B34 --\u003e B35",
      "B35 --\u003e [EXIT]",
      "B36 --\u003e B37",
      "B36 --\u003e B42",
      "B37 --\u003e B38",
      "B37 --\u003e B42",
      "B38 --\u003e B39",
      "B38 --\u003e B40",
      "B39 --\u003e B41",
      "B40 --\u003e B41",
      "B41 --\u003e [EXIT]",
      "B42 --\u003e B43",
      "B42 --\u003e B44",
      "B43 --\u003e B45",
      "B44 --\u003e B45",
      "B45 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "binaryToByte",
    "signature": "byte binaryToByte(boolean[],int,byte,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (src.length \u003d\u003d 0 \u0026\u0026 srcPos \u003d\u003d 0 || 0 \u003d\u003d nBools) {\r\n        return dstInit;\r\n    }\r\n    if (nBools - 1 + dstPos \u003e\u003d 8) {\r\n        throw new IllegalArgumentException(\"nBools-1+dstPos is greater or equal to than 8\");\r\n    }\r\n    byte out \u003d dstInit;\r\n    for (int i \u003d 0; i \u003c nBools; i++) {\r\n        final int shift \u003d i + dstPos;\r\n        final int bits \u003d (src[i + srcPos] ? 1 : 0) \u003c\u003c shift;\r\n        final int mask \u003d 0x1 \u003c\u003c shift;\r\n        out \u003d (byte) (out \u0026 ~mask | bits);\r\n    }\r\n    return out;\r\n}",
    "nodes": 13,
    "edges": 16,
    "cc": 5,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B1 : If(i7 \u003d\u003d false) → B2 | else → B3",
      "B2 : If(0 !\u003d i1) → B3 | else → B4",
      "B4 : If($i4 \u003c 8) → B5 | else → B6",
      "B7 : If(i15 \u003e\u003d i1) → B8 | else → B12",
      "B8 : If($z0 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  i7 :\u003d @parameter1: int\n  b5 :\u003d @parameter2: byte\n  i2 :\u003d @parameter3: int\n  i1 :\u003d @parameter4: int\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  if (i7 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  if (0 !\u003d i1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i3 \u003d i1 - 1\n  $i4 \u003d $i3 + i2\n  if ($i4 \u003c 8) goto B5 else B6\n}",
      "B5 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"nBools-1+dstPos is greater or equal to than 8\")\n  throw $r2\n}",
      "B6 {\n  b14 \u003d b5\n  i15 \u003d 0\n}",
      "B7 {\n  if (i15 \u003e\u003d i1) goto B8 else B12\n}",
      "B8 {\n  i6 \u003d i15 + i2\n  $i8 \u003d i15 + i7\n  $z0 \u003d r0[$i8]\n  if ($z0 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $z1 \u003d 1\n  goto B11\n}",
      "B10 {\n  $z1 \u003d 0\n}",
      "B11 {\n  $i12 \u003d $z1 \u003c\u003c i6\n  $i13 \u003d 1 \u003c\u003c i6\n  $i17 \u003d (int) -1\n  $i9 \u003d $i13 ^ $i17\n  $i18 \u003d (int) b14\n  $i10 \u003d $i18 \u0026 $i9\n  $i11 \u003d $i10 | $i12\n  b14 \u003d (byte) $i11\n  i15 \u003d i15 + 1\n  goto B7\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B7",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "binaryToHexDigit",
    "signature": "char binaryToHexDigit(boolean[],int)",
    "visibility": "public",
    "body": "{\r\n    if (src.length \u003d\u003d 0) {\r\n        throw new IllegalArgumentException(\"Cannot convert an empty array.\");\r\n    }\r\n    if (src.length \u003e srcPos + 3 \u0026\u0026 src[srcPos + 3]) {\r\n        if (src[srcPos + 2]) {\r\n            if (src[srcPos + 1]) {\r\n                return src[srcPos] ? \u0027f\u0027 : \u0027e\u0027;\r\n            }\r\n            return src[srcPos] ? \u0027d\u0027 : \u0027c\u0027;\r\n        }\r\n        if (src[srcPos + 1]) {\r\n            return src[srcPos] ? \u0027b\u0027 : \u0027a\u0027;\r\n        }\r\n        return src[srcPos] ? \u00279\u0027 : \u00278\u0027;\r\n    }\r\n    if (src.length \u003e srcPos + 2 \u0026\u0026 src[srcPos + 2]) {\r\n        if (src[srcPos + 1]) {\r\n            return src[srcPos] ? \u00277\u0027 : \u00276\u0027;\r\n        }\r\n        return src[srcPos] ? \u00275\u0027 : \u00274\u0027;\r\n    }\r\n    if (src.length \u003e srcPos + 1 \u0026\u0026 src[srcPos + 1]) {\r\n        return src[srcPos] ? \u00273\u0027 : \u00272\u0027;\r\n    }\r\n    return src[srcPos] ? \u00271\u0027 : \u00270\u0027;\r\n}",
    "nodes": 44,
    "edges": 54,
    "cc": 12,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B2 : If($i3 \u003c\u003d $i2) → B3 | else → B23",
      "B3 : If($z7 \u003d\u003d false) → B4 | else → B23",
      "B4 : If($z8 \u003d\u003d false) → B5 | else → B14",
      "B5 : If($z12 \u003d\u003d false) → B6 | else → B10",
      "B6 : If($z14 \u003d\u003d false) → B7 | else → B8",
      "B10 : If($z13 \u003d\u003d false) → B11 | else → B12",
      "B14 : If($z9 \u003d\u003d false) → B15 | else → B19",
      "B15 : If($z11 \u003d\u003d false) → B16 | else → B17",
      "B19 : If($z10 \u003d\u003d false) → B20 | else → B21",
      "B23 : If($i5 \u003c\u003d $i4) → B24 | else → B34",
      "B24 : If($z3 \u003d\u003d false) → B25 | else → B34",
      "B25 : If($z4 \u003d\u003d false) → B26 | else → B30",
      "B26 : If($z6 \u003d\u003d false) → B27 | else → B28",
      "B30 : If($z5 \u003d\u003d false) → B31 | else → B32",
      "B34 : If($i7 \u003c\u003d $i6) → B35 | else → B40",
      "B35 : If($z1 \u003d\u003d false) → B36 | else → B40",
      "B36 : If($z2 \u003d\u003d false) → B37 | else → B38",
      "B40 : If($z0 \u003d\u003d false) → B41 | else → B42"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  i1 :\u003d @parameter1: int\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Cannot convert an empty array.\")\n  throw $r1\n}",
      "B2 {\n  $i3 \u003d lengthof r0\n  $i2 \u003d i1 + 3\n  if ($i3 \u003c\u003d $i2) goto B3 else B23\n}",
      "B3 {\n  $i11 \u003d i1 + 3\n  $z7 \u003d r0[$i11]\n  if ($z7 \u003d\u003d false) goto B4 else B23\n}",
      "B4 {\n  $i12 \u003d i1 + 2\n  $z8 \u003d r0[$i12]\n  if ($z8 \u003d\u003d false) goto B5 else B14\n}",
      "B5 {\n  $i14 \u003d i1 + 1\n  $z12 \u003d r0[$i14]\n  if ($z12 \u003d\u003d false) goto B6 else B10\n}",
      "B6 {\n  $z14 \u003d r0[i1]\n  if ($z14 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $c15 \u003d 102\n  goto B9\n}",
      "B8 {\n  $c15 \u003d 101\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $z13 \u003d r0[i1]\n  if ($z13 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  $c16 \u003d 100\n  goto B13\n}",
      "B12 {\n  $c16 \u003d 99\n}",
      "B13 {\n  return\n}",
      "B14 {\n  $i13 \u003d i1 + 1\n  $z9 \u003d r0[$i13]\n  if ($z9 \u003d\u003d false) goto B15 else B19\n}",
      "B15 {\n  $z11 \u003d r0[i1]\n  if ($z11 \u003d\u003d false) goto B16 else B17\n}",
      "B16 {\n  $c17 \u003d 98\n  goto B18\n}",
      "B17 {\n  $c17 \u003d 97\n}",
      "B18 {\n  return\n}",
      "B19 {\n  $z10 \u003d r0[i1]\n  if ($z10 \u003d\u003d false) goto B20 else B21\n}",
      "B20 {\n  $c18 \u003d 57\n  goto B22\n}",
      "B21 {\n  $c18 \u003d 56\n}",
      "B22 {\n  return\n}",
      "B23 {\n  $i5 \u003d lengthof r0\n  $i4 \u003d i1 + 2\n  if ($i5 \u003c\u003d $i4) goto B24 else B34\n}",
      "B24 {\n  $i9 \u003d i1 + 2\n  $z3 \u003d r0[$i9]\n  if ($z3 \u003d\u003d false) goto B25 else B34\n}",
      "B25 {\n  $i10 \u003d i1 + 1\n  $z4 \u003d r0[$i10]\n  if ($z4 \u003d\u003d false) goto B26 else B30\n}",
      "B26 {\n  $z6 \u003d r0[i1]\n  if ($z6 \u003d\u003d false) goto B27 else B28\n}",
      "B27 {\n  $c19 \u003d 55\n  goto B29\n}",
      "B28 {\n  $c19 \u003d 54\n}",
      "B29 {\n  return\n}",
      "B30 {\n  $z5 \u003d r0[i1]\n  if ($z5 \u003d\u003d false) goto B31 else B32\n}",
      "B31 {\n  $c20 \u003d 53\n  goto B33\n}",
      "B32 {\n  $c20 \u003d 52\n}",
      "B33 {\n  return\n}",
      "B34 {\n  $i7 \u003d lengthof r0\n  $i6 \u003d i1 + 1\n  if ($i7 \u003c\u003d $i6) goto B35 else B40\n}",
      "B35 {\n  $i8 \u003d i1 + 1\n  $z1 \u003d r0[$i8]\n  if ($z1 \u003d\u003d false) goto B36 else B40\n}",
      "B36 {\n  $z2 \u003d r0[i1]\n  if ($z2 \u003d\u003d false) goto B37 else B38\n}",
      "B37 {\n  $c21 \u003d 51\n  goto B39\n}",
      "B38 {\n  $c21 \u003d 50\n}",
      "B39 {\n  return\n}",
      "B40 {\n  $z0 \u003d r0[i1]\n  if ($z0 \u003d\u003d false) goto B41 else B42\n}",
      "B41 {\n  $c22 \u003d 49\n  goto B43\n}",
      "B42 {\n  $c22 \u003d 48\n}",
      "B43 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B23",
      "B3 --\u003e B4",
      "B3 --\u003e B23",
      "B4 --\u003e B5",
      "B4 --\u003e B14",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B19",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B22 --\u003e [EXIT]",
      "B23 --\u003e B24",
      "B23 --\u003e B34",
      "B24 --\u003e B25",
      "B24 --\u003e B34",
      "B25 --\u003e B26",
      "B25 --\u003e B30",
      "B26 --\u003e B27",
      "B26 --\u003e B28",
      "B27 --\u003e B29",
      "B28 --\u003e B29",
      "B29 --\u003e [EXIT]",
      "B30 --\u003e B31",
      "B30 --\u003e B32",
      "B31 --\u003e B33",
      "B32 --\u003e B33",
      "B33 --\u003e [EXIT]",
      "B34 --\u003e B35",
      "B34 --\u003e B40",
      "B35 --\u003e B36",
      "B35 --\u003e B40",
      "B36 --\u003e B37",
      "B36 --\u003e B38",
      "B37 --\u003e B39",
      "B38 --\u003e B39",
      "B39 --\u003e [EXIT]",
      "B40 --\u003e B41",
      "B40 --\u003e B42",
      "B41 --\u003e B43",
      "B42 --\u003e B43",
      "B43 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "binaryToHexDigitMsb0_4bits",
    "signature": "char binaryToHexDigitMsb0_4bits(boolean[],int)",
    "visibility": "public",
    "body": "{\r\n    if (src.length \u003e 8) {\r\n        throw new IllegalArgumentException(\"src.length\u003e8: src.length\u003d\" + src.length);\r\n    }\r\n    if (src.length - srcPos \u003c 4) {\r\n        throw new IllegalArgumentException(\"src.length-srcPos\u003c4: src.length\u003d\" + src.length + \", srcPos\u003d\" + srcPos);\r\n    }\r\n    if (src[srcPos + 3]) {\r\n        if (src[srcPos + 2]) {\r\n            if (src[srcPos + 1]) {\r\n                return src[srcPos] ? \u0027f\u0027 : \u00277\u0027;\r\n            }\r\n            return src[srcPos] ? \u0027b\u0027 : \u00273\u0027;\r\n        }\r\n        if (src[srcPos + 1]) {\r\n            return src[srcPos] ? \u0027d\u0027 : \u00275\u0027;\r\n        }\r\n        return src[srcPos] ? \u00279\u0027 : \u00271\u0027;\r\n    }\r\n    if (src[srcPos + 2]) {\r\n        if (src[srcPos + 1]) {\r\n            return src[srcPos] ? \u0027e\u0027 : \u00276\u0027;\r\n        }\r\n        return src[srcPos] ? \u0027a\u0027 : \u00272\u0027;\r\n    }\r\n    if (src[srcPos + 1]) {\r\n        return src[srcPos] ? \u0027c\u0027 : \u00274\u0027;\r\n    }\r\n    return src[srcPos] ? \u00278\u0027 : \u00270\u0027;\r\n}",
    "nodes": 43,
    "edges": 50,
    "cc": 9,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 8) → B1 | else → B2",
      "B2 : If($i3 \u003e\u003d 4) → B3 | else → B4",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B24",
      "B5 : If($z8 \u003d\u003d false) → B6 | else → B15",
      "B6 : If($z12 \u003d\u003d false) → B7 | else → B11",
      "B7 : If($z14 \u003d\u003d false) → B8 | else → B9",
      "B11 : If($z13 \u003d\u003d false) → B12 | else → B13",
      "B15 : If($z9 \u003d\u003d false) → B16 | else → B20",
      "B16 : If($z11 \u003d\u003d false) → B17 | else → B18",
      "B20 : If($z10 \u003d\u003d false) → B21 | else → B22",
      "B24 : If($z1 \u003d\u003d false) → B25 | else → B34",
      "B25 : If($z5 \u003d\u003d false) → B26 | else → B30",
      "B26 : If($z7 \u003d\u003d false) → B27 | else → B28",
      "B30 : If($z6 \u003d\u003d false) → B31 | else → B32",
      "B34 : If($z2 \u003d\u003d false) → B35 | else → B39",
      "B35 : If($z4 \u003d\u003d false) → B36 | else → B37",
      "B39 : If($z3 \u003d\u003d false) → B40 | else → B41"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  i1 :\u003d @parameter1: int\n  $i0 \u003d lengthof r0\n  if ($i0 \u003c\u003d 8) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d IllegalArgumentException\n  $r9 \u003d StringBuilder\n  new StringBuilder()\n  $r10 \u003d $r9.append(\"src.length\u003e8: src.length\u003d\")\n  $i12 \u003d lengthof r0\n  $r11 \u003d $r10.append($i12)\n  $r12 \u003d $r11.toString()\n  new IllegalArgumentException($r12)\n  throw $r8\n}",
      "B2 {\n  $i2 \u003d lengthof r0\n  $i3 \u003d $i2 - i1\n  if ($i3 \u003e\u003d 4) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d IllegalArgumentException\n  $r2 \u003d StringBuilder\n  new StringBuilder()\n  $r3 \u003d $r2.append(\"src.length-srcPos\u003c4: src.length\u003d\")\n  $i11 \u003d lengthof r0\n  $r4 \u003d $r3.append($i11)\n  $r5 \u003d $r4.append(\", srcPos\u003d\")\n  $r6 \u003d $r5.append(i1)\n  $r7 \u003d $r6.toString()\n  new IllegalArgumentException($r7)\n  throw $r1\n}",
      "B4 {\n  $i4 \u003d i1 + 3\n  $z0 \u003d r0[$i4]\n  if ($z0 \u003d\u003d false) goto B5 else B24\n}",
      "B5 {\n  $i8 \u003d i1 + 2\n  $z8 \u003d r0[$i8]\n  if ($z8 \u003d\u003d false) goto B6 else B15\n}",
      "B6 {\n  $i10 \u003d i1 + 1\n  $z12 \u003d r0[$i10]\n  if ($z12 \u003d\u003d false) goto B7 else B11\n}",
      "B7 {\n  $z14 \u003d r0[i1]\n  if ($z14 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $c13 \u003d 102\n  goto B10\n}",
      "B9 {\n  $c13 \u003d 55\n}",
      "B10 {\n  return\n}",
      "B11 {\n  $z13 \u003d r0[i1]\n  if ($z13 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $c14 \u003d 98\n  goto B14\n}",
      "B13 {\n  $c14 \u003d 51\n}",
      "B14 {\n  return\n}",
      "B15 {\n  $i9 \u003d i1 + 1\n  $z9 \u003d r0[$i9]\n  if ($z9 \u003d\u003d false) goto B16 else B20\n}",
      "B16 {\n  $z11 \u003d r0[i1]\n  if ($z11 \u003d\u003d false) goto B17 else B18\n}",
      "B17 {\n  $c15 \u003d 100\n  goto B19\n}",
      "B18 {\n  $c15 \u003d 53\n}",
      "B19 {\n  return\n}",
      "B20 {\n  $z10 \u003d r0[i1]\n  if ($z10 \u003d\u003d false) goto B21 else B22\n}",
      "B21 {\n  $c16 \u003d 57\n  goto B23\n}",
      "B22 {\n  $c16 \u003d 49\n}",
      "B23 {\n  return\n}",
      "B24 {\n  $i5 \u003d i1 + 2\n  $z1 \u003d r0[$i5]\n  if ($z1 \u003d\u003d false) goto B25 else B34\n}",
      "B25 {\n  $i7 \u003d i1 + 1\n  $z5 \u003d r0[$i7]\n  if ($z5 \u003d\u003d false) goto B26 else B30\n}",
      "B26 {\n  $z7 \u003d r0[i1]\n  if ($z7 \u003d\u003d false) goto B27 else B28\n}",
      "B27 {\n  $c17 \u003d 101\n  goto B29\n}",
      "B28 {\n  $c17 \u003d 54\n}",
      "B29 {\n  return\n}",
      "B30 {\n  $z6 \u003d r0[i1]\n  if ($z6 \u003d\u003d false) goto B31 else B32\n}",
      "B31 {\n  $c18 \u003d 97\n  goto B33\n}",
      "B32 {\n  $c18 \u003d 50\n}",
      "B33 {\n  return\n}",
      "B34 {\n  $i6 \u003d i1 + 1\n  $z2 \u003d r0[$i6]\n  if ($z2 \u003d\u003d false) goto B35 else B39\n}",
      "B35 {\n  $z4 \u003d r0[i1]\n  if ($z4 \u003d\u003d false) goto B36 else B37\n}",
      "B36 {\n  $c19 \u003d 99\n  goto B38\n}",
      "B37 {\n  $c19 \u003d 52\n}",
      "B38 {\n  return\n}",
      "B39 {\n  $z3 \u003d r0[i1]\n  if ($z3 \u003d\u003d false) goto B40 else B41\n}",
      "B40 {\n  $c20 \u003d 56\n  goto B42\n}",
      "B41 {\n  $c20 \u003d 48\n}",
      "B42 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B24",
      "B5 --\u003e B6",
      "B5 --\u003e B15",
      "B6 --\u003e B7",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B16",
      "B15 --\u003e B20",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B23",
      "B23 --\u003e [EXIT]",
      "B24 --\u003e B25",
      "B24 --\u003e B34",
      "B25 --\u003e B26",
      "B25 --\u003e B30",
      "B26 --\u003e B27",
      "B26 --\u003e B28",
      "B27 --\u003e B29",
      "B28 --\u003e B29",
      "B29 --\u003e [EXIT]",
      "B30 --\u003e B31",
      "B30 --\u003e B32",
      "B31 --\u003e B33",
      "B32 --\u003e B33",
      "B33 --\u003e [EXIT]",
      "B34 --\u003e B35",
      "B34 --\u003e B39",
      "B35 --\u003e B36",
      "B35 --\u003e B37",
      "B36 --\u003e B38",
      "B37 --\u003e B38",
      "B38 --\u003e [EXIT]",
      "B39 --\u003e B40",
      "B39 --\u003e B41",
      "B40 --\u003e B42",
      "B41 --\u003e B42",
      "B42 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "binaryToInt",
    "signature": "int binaryToInt(boolean[],int,int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (src.length \u003d\u003d 0 \u0026\u0026 srcPos \u003d\u003d 0 || 0 \u003d\u003d nBools) {\r\n        return dstInit;\r\n    }\r\n    if (nBools - 1 + dstPos \u003e\u003d 32) {\r\n        throw new IllegalArgumentException(\"nBools-1+dstPos is greater or equal to than 32\");\r\n    }\r\n    int out \u003d dstInit;\r\n    for (int i \u003d 0; i \u003c nBools; i++) {\r\n        final int shift \u003d i + dstPos;\r\n        final int bits \u003d (src[i + srcPos] ? 1 : 0) \u003c\u003c shift;\r\n        final int mask \u003d 0x1 \u003c\u003c shift;\r\n        out \u003d out \u0026 ~mask | bits;\r\n    }\r\n    return out;\r\n}",
    "nodes": 13,
    "edges": 16,
    "cc": 5,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B1 : If(i7 \u003d\u003d false) → B2 | else → B3",
      "B2 : If(0 !\u003d i1) → B3 | else → B4",
      "B4 : If($i4 \u003c 32) → B5 | else → B6",
      "B7 : If(i14 \u003e\u003d i1) → B8 | else → B12",
      "B8 : If($z0 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  i7 :\u003d @parameter1: int\n  i5 :\u003d @parameter2: int\n  i2 :\u003d @parameter3: int\n  i1 :\u003d @parameter4: int\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  if (i7 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  if (0 !\u003d i1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i3 \u003d i1 - 1\n  $i4 \u003d $i3 + i2\n  if ($i4 \u003c 32) goto B5 else B6\n}",
      "B5 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"nBools-1+dstPos is greater or equal to than 32\")\n  throw $r2\n}",
      "B6 {\n  i13 \u003d i5\n  i14 \u003d 0\n}",
      "B7 {\n  if (i14 \u003e\u003d i1) goto B8 else B12\n}",
      "B8 {\n  i6 \u003d i14 + i2\n  $i8 \u003d i14 + i7\n  $z0 \u003d r0[$i8]\n  if ($z0 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $z1 \u003d 1\n  goto B11\n}",
      "B10 {\n  $z1 \u003d 0\n}",
      "B11 {\n  $i11 \u003d $z1 \u003c\u003c i6\n  $i12 \u003d 1 \u003c\u003c i6\n  $i16 \u003d (int) -1\n  $i9 \u003d $i12 ^ $i16\n  $i10 \u003d i13 \u0026 $i9\n  i13 \u003d $i10 | $i11\n  i14 \u003d i14 + 1\n  goto B7\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B7",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "binaryToLong",
    "signature": "long binaryToLong(boolean[],int,long,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (src.length \u003d\u003d 0 \u0026\u0026 srcPos \u003d\u003d 0 || 0 \u003d\u003d nBools) {\r\n        return dstInit;\r\n    }\r\n    if (nBools - 1 + dstPos \u003e\u003d 64) {\r\n        throw new IllegalArgumentException(\"nBools-1+dstPos is greater or equal to than 64\");\r\n    }\r\n    long out \u003d dstInit;\r\n    for (int i \u003d 0; i \u003c nBools; i++) {\r\n        final int shift \u003d i + dstPos;\r\n        final long bits \u003d (src[i + srcPos] ? 1L : 0) \u003c\u003c shift;\r\n        final long mask \u003d 0x1L \u003c\u003c shift;\r\n        out \u003d out \u0026 ~mask | bits;\r\n    }\r\n    return out;\r\n}",
    "nodes": 13,
    "edges": 16,
    "cc": 5,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B1 : If(i7 \u003d\u003d false) → B2 | else → B3",
      "B2 : If(0 !\u003d i1) → B3 | else → B4",
      "B4 : If($i4 \u003c 64) → B5 | else → B6",
      "B7 : If(i14 \u003e\u003d i1) → B8 | else → B12",
      "B8 : If($z0 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  i7 :\u003d @parameter1: int\n  l5 :\u003d @parameter2: long\n  i2 :\u003d @parameter3: int\n  i1 :\u003d @parameter4: int\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  if (i7 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  if (0 !\u003d i1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i3 \u003d i1 - 1\n  $i4 \u003d $i3 + i2\n  if ($i4 \u003c 64) goto B5 else B6\n}",
      "B5 {\n  $r1 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"nBools-1+dstPos is greater or equal to than 64\")\n  throw $r1\n}",
      "B6 {\n  l13 \u003d l5\n  i14 \u003d 0\n}",
      "B7 {\n  if (i14 \u003e\u003d i1) goto B8 else B12\n}",
      "B8 {\n  i6 \u003d i14 + i2\n  $i8 \u003d i14 + i7\n  $z0 \u003d r0[$i8]\n  if ($z0 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $l15 \u003d 1L\n  goto B11\n}",
      "B10 {\n  $l15 \u003d 0L\n}",
      "B11 {\n  $l11 \u003d $l15 \u003c\u003c i6\n  $l12 \u003d 1L \u003c\u003c i6\n  $l9 \u003d $l12 ^ -1L\n  $l10 \u003d l13 \u0026 $l9\n  l13 \u003d $l10 | $l11\n  i14 \u003d i14 + 1\n  goto B7\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B7",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "binaryToShort",
    "signature": "short binaryToShort(boolean[],int,short,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (src.length \u003d\u003d 0 \u0026\u0026 srcPos \u003d\u003d 0 || 0 \u003d\u003d nBools) {\r\n        return dstInit;\r\n    }\r\n    if (nBools - 1 + dstPos \u003e\u003d 16) {\r\n        throw new IllegalArgumentException(\"nBools-1+dstPos is greater or equal to than 16\");\r\n    }\r\n    short out \u003d dstInit;\r\n    for (int i \u003d 0; i \u003c nBools; i++) {\r\n        final int shift \u003d i + dstPos;\r\n        final int bits \u003d (src[i + srcPos] ? 1 : 0) \u003c\u003c shift;\r\n        final int mask \u003d 0x1 \u003c\u003c shift;\r\n        out \u003d (short) (out \u0026 ~mask | bits);\r\n    }\r\n    return out;\r\n}",
    "nodes": 13,
    "edges": 16,
    "cc": 5,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B1 : If(i7 \u003d\u003d false) → B2 | else → B3",
      "B2 : If(0 !\u003d i1) → B3 | else → B4",
      "B4 : If($i4 \u003c 16) → B5 | else → B6",
      "B7 : If(i15 \u003e\u003d i1) → B8 | else → B12",
      "B8 : If($z0 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  i7 :\u003d @parameter1: int\n  s5 :\u003d @parameter2: short\n  i2 :\u003d @parameter3: int\n  i1 :\u003d @parameter4: int\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  if (i7 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  if (0 !\u003d i1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i3 \u003d i1 - 1\n  $i4 \u003d $i3 + i2\n  if ($i4 \u003c 16) goto B5 else B6\n}",
      "B5 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"nBools-1+dstPos is greater or equal to than 16\")\n  throw $r2\n}",
      "B6 {\n  s14 \u003d s5\n  i15 \u003d 0\n}",
      "B7 {\n  if (i15 \u003e\u003d i1) goto B8 else B12\n}",
      "B8 {\n  i6 \u003d i15 + i2\n  $i8 \u003d i15 + i7\n  $z0 \u003d r0[$i8]\n  if ($z0 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $z1 \u003d 1\n  goto B11\n}",
      "B10 {\n  $z1 \u003d 0\n}",
      "B11 {\n  $i12 \u003d $z1 \u003c\u003c i6\n  $i13 \u003d 1 \u003c\u003c i6\n  $i17 \u003d (int) -1\n  $i9 \u003d $i13 ^ $i17\n  $i18 \u003d (int) s14\n  $i10 \u003d $i18 \u0026 $i9\n  $i11 \u003d $i10 | $i12\n  s14 \u003d (short) $i11\n  i15 \u003d i15 + 1\n  goto B7\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B7",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "byteArrayToInt",
    "signature": "int byteArrayToInt(byte[],int,int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (src.length \u003d\u003d 0 \u0026\u0026 srcPos \u003d\u003d 0 || 0 \u003d\u003d nBytes) {\r\n        return dstInit;\r\n    }\r\n    if ((nBytes - 1) * 8 + dstPos \u003e\u003d 32) {\r\n        throw new IllegalArgumentException(\"(nBytes-1)*8+dstPos is greater or equal to than 32\");\r\n    }\r\n    int out \u003d dstInit;\r\n    for (int i \u003d 0; i \u003c nBytes; i++) {\r\n        final int shift \u003d i * 8 + dstPos;\r\n        final int bits \u003d (0xff \u0026 src[i + srcPos]) \u003c\u003c shift;\r\n        final int mask \u003d 0xff \u003c\u003c shift;\r\n        out \u003d out \u0026 ~mask | bits;\r\n    }\r\n    return out;\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B1 : If(i9 \u003d\u003d false) → B2 | else → B3",
      "B2 : If(0 !\u003d i1) → B3 | else → B4",
      "B4 : If($i5 \u003c 32) → B5 | else → B6",
      "B7 : If(i18 \u003e\u003d i1) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  i9 :\u003d @parameter1: int\n  i6 :\u003d @parameter2: int\n  i3 :\u003d @parameter3: int\n  i1 :\u003d @parameter4: int\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  if (i9 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  if (0 !\u003d i1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i2 \u003d i1 - 1\n  $i4 \u003d $i2 * 8\n  $i5 \u003d $i4 + i3\n  if ($i5 \u003c 32) goto B5 else B6\n}",
      "B5 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"(nBytes-1)*8+dstPos is greater or equal to than 32\")\n  throw $r2\n}",
      "B6 {\n  i17 \u003d i6\n  i18 \u003d 0\n}",
      "B7 {\n  if (i18 \u003e\u003d i1) goto B8 else B9\n}",
      "B8 {\n  $i7 \u003d i18 * 8\n  i8 \u003d $i7 + i3\n  $i10 \u003d i18 + i9\n  $b11 \u003d r0[$i10]\n  $s19 \u003d (short) $b11\n  $s12 \u003d 255 \u0026 $s19\n  $i20 \u003d (int) $s12\n  i13 \u003d $i20 \u003c\u003c i8\n  i14 \u003d 255 \u003c\u003c i8\n  $i22 \u003d (int) -1\n  $i15 \u003d i14 ^ $i22\n  $i16 \u003d i17 \u0026 $i15\n  i17 \u003d $i16 | i13\n  i18 \u003d i18 + 1\n  goto B7\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B7",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "byteArrayToLong",
    "signature": "long byteArrayToLong(byte[],int,long,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (src.length \u003d\u003d 0 \u0026\u0026 srcPos \u003d\u003d 0 || 0 \u003d\u003d nBytes) {\r\n        return dstInit;\r\n    }\r\n    if ((nBytes - 1) * 8 + dstPos \u003e\u003d 64) {\r\n        throw new IllegalArgumentException(\"(nBytes-1)*8+dstPos is greater or equal to than 64\");\r\n    }\r\n    long out \u003d dstInit;\r\n    for (int i \u003d 0; i \u003c nBytes; i++) {\r\n        final int shift \u003d i * 8 + dstPos;\r\n        final long bits \u003d (0xffL \u0026 src[i + srcPos]) \u003c\u003c shift;\r\n        final long mask \u003d 0xffL \u003c\u003c shift;\r\n        out \u003d out \u0026 ~mask | bits;\r\n    }\r\n    return out;\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B1 : If(i9 \u003d\u003d false) → B2 | else → B3",
      "B2 : If(0 !\u003d i1) → B3 | else → B4",
      "B4 : If($i5 \u003c 64) → B5 | else → B6",
      "B7 : If(i19 \u003e\u003d i1) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  i9 :\u003d @parameter1: int\n  l6 :\u003d @parameter2: long\n  i3 :\u003d @parameter3: int\n  i1 :\u003d @parameter4: int\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  if (i9 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  if (0 !\u003d i1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i2 \u003d i1 - 1\n  $i4 \u003d $i2 * 8\n  $i5 \u003d $i4 + i3\n  if ($i5 \u003c 64) goto B5 else B6\n}",
      "B5 {\n  $r1 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"(nBytes-1)*8+dstPos is greater or equal to than 64\")\n  throw $r1\n}",
      "B6 {\n  l18 \u003d l6\n  i19 \u003d 0\n}",
      "B7 {\n  if (i19 \u003e\u003d i1) goto B8 else B9\n}",
      "B8 {\n  $i7 \u003d i19 * 8\n  i8 \u003d $i7 + i3\n  $i10 \u003d i19 + i9\n  $b11 \u003d r0[$i10]\n  $l12 \u003d (long) $b11\n  $l13 \u003d 255L \u0026 $l12\n  l14 \u003d $l13 \u003c\u003c i8\n  l15 \u003d 255L \u003c\u003c i8\n  $l16 \u003d l15 ^ -1L\n  $l17 \u003d l18 \u0026 $l16\n  l18 \u003d $l17 | l14\n  i19 \u003d i19 + 1\n  goto B7\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B7",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "byteArrayToShort",
    "signature": "short byteArrayToShort(byte[],int,short,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (src.length \u003d\u003d 0 \u0026\u0026 srcPos \u003d\u003d 0 || 0 \u003d\u003d nBytes) {\r\n        return dstInit;\r\n    }\r\n    if ((nBytes - 1) * 8 + dstPos \u003e\u003d 16) {\r\n        throw new IllegalArgumentException(\"(nBytes-1)*8+dstPos is greater or equal to than 16\");\r\n    }\r\n    short out \u003d dstInit;\r\n    for (int i \u003d 0; i \u003c nBytes; i++) {\r\n        final int shift \u003d i * 8 + dstPos;\r\n        final int bits \u003d (0xff \u0026 src[i + srcPos]) \u003c\u003c shift;\r\n        final int mask \u003d 0xff \u003c\u003c shift;\r\n        out \u003d (short) (out \u0026 ~mask | bits);\r\n    }\r\n    return out;\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B1 : If(i9 \u003d\u003d false) → B2 | else → B3",
      "B2 : If(0 !\u003d i1) → B3 | else → B4",
      "B4 : If($i5 \u003c 16) → B5 | else → B6",
      "B7 : If(i19 \u003e\u003d i1) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  i9 :\u003d @parameter1: int\n  s6 :\u003d @parameter2: short\n  i3 :\u003d @parameter3: int\n  i1 :\u003d @parameter4: int\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  if (i9 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  if (0 !\u003d i1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i2 \u003d i1 - 1\n  $i4 \u003d $i2 * 8\n  $i5 \u003d $i4 + i3\n  if ($i5 \u003c 16) goto B5 else B6\n}",
      "B5 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"(nBytes-1)*8+dstPos is greater or equal to than 16\")\n  throw $r2\n}",
      "B6 {\n  s18 \u003d s6\n  i19 \u003d 0\n}",
      "B7 {\n  if (i19 \u003e\u003d i1) goto B8 else B9\n}",
      "B8 {\n  $i7 \u003d i19 * 8\n  i8 \u003d $i7 + i3\n  $i10 \u003d i19 + i9\n  $b11 \u003d r0[$i10]\n  $s20 \u003d (short) $b11\n  $s12 \u003d 255 \u0026 $s20\n  $i21 \u003d (int) $s12\n  i13 \u003d $i21 \u003c\u003c i8\n  i14 \u003d 255 \u003c\u003c i8\n  $i23 \u003d (int) -1\n  $i15 \u003d i14 ^ $i23\n  $i24 \u003d (int) s18\n  $i16 \u003d $i24 \u0026 $i15\n  $i17 \u003d $i16 | i13\n  s18 \u003d (short) $i17\n  i19 \u003d i19 + 1\n  goto B7\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B7",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "byteArrayToUuid",
    "signature": "java.util.UUID byteArrayToUuid(byte[],int)",
    "visibility": "public",
    "body": "{\r\n    if (src.length - srcPos \u003c 16) {\r\n        throw new IllegalArgumentException(\"Need at least 16 bytes for UUID\");\r\n    }\r\n    return new UUID(byteArrayToLong(src, srcPos, 0, 0, 8), byteArrayToLong(src, srcPos + 8, 0, 0, 8));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i2 \u003e\u003d 16) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  i0 :\u003d @parameter1: int\n  $i1 \u003d lengthof r0\n  $i2 \u003d $i1 - i0\n  if ($i2 \u003e\u003d 16) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Need at least 16 bytes for UUID\")\n  throw $r2\n}",
      "B2 {\n  $r1 \u003d UUID\n  $l5 \u003d Conversion.byteArrayToLong(r0, i0, 0L, 0, 8)\n  $i3 \u003d i0 + 8\n  $l4 \u003d Conversion.byteArrayToLong(r0, $i3, 0L, 0, 8)\n  new UUID($l5, $l4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Conversion#byteArrayToLong(...5)",
        "body": "{\r\n    if (src.length \u003d\u003d 0 \u0026\u0026 srcPos \u003d\u003d 0 || 0 \u003d\u003d nBytes) {\r\n        return dstInit;\r\n    }\r\n    if ((nBytes - 1) * 8 + dstPos \u003e\u003d 64) {\r\n        throw new IllegalArgumentException(\"(nBytes-1)*8+dstPos is greater or equal to than 64\");\r\n    }\r\n    long out \u003d dstInit;\r\n    for (int i \u003d 0; i \u003c nBytes; i++) {\r\n        final int shift \u003d i * 8 + dstPos;\r\n        final long bits \u003d (0xffL \u0026 src[i + srcPos]) \u003c\u003c shift;\r\n        final long mask \u003d 0xffL \u003c\u003c shift;\r\n        out \u003d out \u0026 ~mask | bits;\r\n    }\r\n    return out;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "byteToBinary",
    "signature": "boolean[] byteToBinary(byte,int,boolean[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (0 \u003d\u003d nBools) {\r\n        return dst;\r\n    }\r\n    if (nBools - 1 + srcPos \u003e\u003d 8) {\r\n        throw new IllegalArgumentException(\"nBools-1+srcPos is greater or equal to than 8\");\r\n    }\r\n    for (int i \u003d 0; i \u003c nBools; i++) {\r\n        final int shift \u003d i + srcPos;\r\n        dst[dstPos + i] \u003d (0x1 \u0026 src \u003e\u003e shift) !\u003d 0;\r\n    }\r\n    return dst;\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(0 !\u003d i0) → B1 | else → B2",
      "B2 : If($i3 \u003c 8) → B3 | else → B4",
      "B5 : If(i10 \u003e\u003d i0) → B6 | else → B10",
      "B6 : If($i8 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  b6 :\u003d @parameter0: byte\n  i1 :\u003d @parameter1: int\n  r0 :\u003d @parameter2: boolean[]\n  i5 :\u003d @parameter3: int\n  i0 :\u003d @parameter4: int\n  if (0 !\u003d i0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i2 \u003d i0 - 1\n  $i3 \u003d $i2 + i1\n  if ($i3 \u003c 8) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"nBools-1+srcPos is greater or equal to than 8\")\n  throw $r2\n}",
      "B4 {\n  i10 \u003d 0\n}",
      "B5 {\n  if (i10 \u003e\u003d i0) goto B6 else B10\n}",
      "B6 {\n  i4 \u003d i10 + i1\n  $i9 \u003d i5 + i10\n  $i11 \u003d (int) b6\n  $i7 \u003d $i11 \u003e\u003e i4\n  $i8 \u003d 1 \u0026 $i7\n  if ($i8 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $z0 \u003d 1\n  goto B9\n}",
      "B8 {\n  $z0 \u003d 0\n}",
      "B9 {\n  r0[$i9] \u003d $z0\n  i10 \u003d i10 + 1\n  goto B5\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B5",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "byteToHex",
    "signature": "java.lang.String byteToHex(byte,int,java.lang.String,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (0 \u003d\u003d nHexs) {\r\n        return dstInit;\r\n    }\r\n    if ((nHexs - 1) * 4 + srcPos \u003e\u003d 8) {\r\n        throw new IllegalArgumentException(\"(nHexs-1)*4+srcPos is greater or equal to than 8\");\r\n    }\r\n    final StringBuilder sb \u003d new StringBuilder(dstInit);\r\n    int append \u003d sb.length();\r\n    for (int i \u003d 0; i \u003c nHexs; i++) {\r\n        final int shift \u003d i * 4 + srcPos;\r\n        final int bits \u003d 0xF \u0026 src \u003e\u003e shift;\r\n        if (dstPos + i \u003d\u003d append) {\r\n            ++append;\r\n            sb.append(intToHexDigit(bits));\r\n        } else {\r\n            sb.setCharAt(dstPos + i, intToHexDigit(bits));\r\n        }\r\n    }\r\n    return sb.toString();\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(0 !\u003d i0) → B1 | else → B2",
      "B2 : If($i4 \u003c 8) → B3 | else → B4",
      "B5 : If(i16 \u003e\u003d i0) → B6 | else → B10",
      "B6 : If($i11 !\u003d i15) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  b7 :\u003d @parameter0: byte\n  i2 :\u003d @parameter1: int\n  String\n  i10 :\u003d @parameter3: int\n  i0 :\u003d @parameter4: int\n  if (0 !\u003d i0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d i0 - 1\n  $i3 \u003d $i1 * 4\n  $i4 \u003d $i3 + i2\n  if ($i4 \u003c 8) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"(nHexs-1)*4+srcPos is greater or equal to than 8\")\n  throw $r4\n}",
      "B4 {\n  $r5 \u003d StringBuilder\n  new StringBuilder(r1)\n  i15 \u003d $r5.length()\n  i16 \u003d 0\n}",
      "B5 {\n  if (i16 \u003e\u003d i0) goto B6 else B10\n}",
      "B6 {\n  $i5 \u003d i16 * 4\n  i6 \u003d $i5 + i2\n  $i17 \u003d (int) b7\n  $i8 \u003d $i17 \u003e\u003e i6\n  i9 \u003d 15 \u0026 $i8\n  $i11 \u003d i10 + i16\n  if ($i11 !\u003d i15) goto B7 else B8\n}",
      "B7 {\n  i15 \u003d i15 + 1\n  $c14 \u003d Conversion.intToHexDigit(i9)\n  $r5.append($c14)\n  goto B9\n}",
      "B8 {\n  $i13 \u003d i10 + i16\n  $c12 \u003d Conversion.intToHexDigit(i9)\n  $r5.setCharAt($i13, $c12)\n}",
      "B9 {\n  i16 \u003d i16 + 1\n  goto B5\n}",
      "B10 {\n  $r2 \u003d $r5.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B5",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Conversion#intToHexDigit(...1)",
        "body": "{\r\n    final char c \u003d Character.forDigit(nibble, 16);\r\n    if (c \u003d\u003d Character.MIN_VALUE) {\r\n        throw new IllegalArgumentException(\"nibble value not between 0 and 15: \" + nibble);\r\n    }\r\n    return c;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "hexDigitMsb0ToBinary",
    "signature": "boolean[] hexDigitMsb0ToBinary(char)",
    "visibility": "public",
    "body": "{\r\n    switch(hexDigit) {\r\n        case \u00270\u0027:\r\n            return FFFF.clone();\r\n        case \u00271\u0027:\r\n            return FFFT.clone();\r\n        case \u00272\u0027:\r\n            return FFTF.clone();\r\n        case \u00273\u0027:\r\n            return FFTT.clone();\r\n        case \u00274\u0027:\r\n            return FTFF.clone();\r\n        case \u00275\u0027:\r\n            return FTFT.clone();\r\n        case \u00276\u0027:\r\n            return FTTF.clone();\r\n        case \u00277\u0027:\r\n            return FTTT.clone();\r\n        case \u00278\u0027:\r\n            return TFFF.clone();\r\n        case \u00279\u0027:\r\n            return TFFT.clone();\r\n        // fall through\r\n        case \u0027a\u0027:\r\n        case \u0027A\u0027:\r\n            return TFTF.clone();\r\n        // fall through\r\n        case \u0027b\u0027:\r\n        case \u0027B\u0027:\r\n            return TFTT.clone();\r\n        // fall through\r\n        case \u0027c\u0027:\r\n        case \u0027C\u0027:\r\n            return TTFF.clone();\r\n        // fall through\r\n        case \u0027d\u0027:\r\n        case \u0027D\u0027:\r\n            return TTFT.clone();\r\n        // fall through\r\n        case \u0027e\u0027:\r\n        case \u0027E\u0027:\r\n            return TTTF.clone();\r\n        // fall through\r\n        case \u0027f\u0027:\r\n        case \u0027F\u0027:\r\n            return TTTT.clone();\r\n        default:\r\n            throw new IllegalArgumentException(\"Cannot interpret \u0027\" + hexDigit + \"\u0027 as a hexadecimal digit\");\r\n    }\r\n}",
    "nodes": 18,
    "edges": 17,
    "cc": 1,
    "flowSummary": [
      "B0 : If(switch-on $i1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  c0 :\u003d @parameter0: char\n  $i1 \u003d (int) c0\n  IllegalArgumentException; }\n}",
      "B1 {\n  $r45 \u003d Conversion: boolean[] FFFF\u003e\n  $r46 \u003d $r45.clone()\n  $r47 \u003d (boolean[]) $r46\n  return\n}",
      "B2 {\n  $r42 \u003d Conversion: boolean[] FFFT\u003e\n  $r43 \u003d $r42.clone()\n  $r44 \u003d (boolean[]) $r43\n  return\n}",
      "B3 {\n  $r39 \u003d Conversion: boolean[] FFTF\u003e\n  $r40 \u003d $r39.clone()\n  $r41 \u003d (boolean[]) $r40\n  return\n}",
      "B4 {\n  $r36 \u003d Conversion: boolean[] FFTT\u003e\n  $r37 \u003d $r36.clone()\n  $r38 \u003d (boolean[]) $r37\n  return\n}",
      "B5 {\n  $r33 \u003d Conversion: boolean[] FTFF\u003e\n  $r34 \u003d $r33.clone()\n  $r35 \u003d (boolean[]) $r34\n  return\n}",
      "B6 {\n  $r30 \u003d Conversion: boolean[] FTFT\u003e\n  $r31 \u003d $r30.clone()\n  $r32 \u003d (boolean[]) $r31\n  return\n}",
      "B7 {\n  $r27 \u003d Conversion: boolean[] FTTF\u003e\n  $r28 \u003d $r27.clone()\n  $r29 \u003d (boolean[]) $r28\n  return\n}",
      "B8 {\n  $r24 \u003d Conversion: boolean[] FTTT\u003e\n  $r25 \u003d $r24.clone()\n  $r26 \u003d (boolean[]) $r25\n  return\n}",
      "B9 {\n  $r21 \u003d Conversion: boolean[] TFFF\u003e\n  $r22 \u003d $r21.clone()\n  $r23 \u003d (boolean[]) $r22\n  return\n}",
      "B10 {\n  $r18 \u003d Conversion: boolean[] TFFT\u003e\n  $r19 \u003d $r18.clone()\n  $r20 \u003d (boolean[]) $r19\n  return\n}",
      "B11 {\n  $r15 \u003d Conversion: boolean[] TFTF\u003e\n  $r16 \u003d $r15.clone()\n  $r17 \u003d (boolean[]) $r16\n  return\n}",
      "B12 {\n  $r12 \u003d Conversion: boolean[] TFTT\u003e\n  $r13 \u003d $r12.clone()\n  $r14 \u003d (boolean[]) $r13\n  return\n}",
      "B13 {\n  $r9 \u003d Conversion: boolean[] TTFF\u003e\n  $r10 \u003d $r9.clone()\n  $r11 \u003d (boolean[]) $r10\n  return\n}",
      "B14 {\n  $r6 \u003d Conversion: boolean[] TTFT\u003e\n  $r7 \u003d $r6.clone()\n  $r8 \u003d (boolean[]) $r7\n  return\n}",
      "B15 {\n  $r3 \u003d Conversion: boolean[] TTTF\u003e\n  $r4 \u003d $r3.clone()\n  $r5 \u003d (boolean[]) $r4\n  return\n}",
      "B16 {\n  $r0 \u003d Conversion: boolean[] TTTT\u003e\n  $r1 \u003d $r0.clone()\n  $r2 \u003d (boolean[]) $r1\n  return\n}",
      "B17 {\n  $r55 \u003d IllegalArgumentException\n  $r54 \u003d StringBuilder\n  new StringBuilder()\n  $r50 \u003d $r54.append(\"Cannot interpret \\\u0027\")\n  $r51 \u003d $r50.append(c0)\n  $r52 \u003d $r51.append(\"\\\u0027 as a hexadecimal digit\")\n  $r53 \u003d $r52.toString()\n  new IllegalArgumentException($r53)\n  throw $r55\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B0 --\u003e B4",
      "B0 --\u003e B5",
      "B0 --\u003e B6",
      "B0 --\u003e B7",
      "B0 --\u003e B8",
      "B0 --\u003e B9",
      "B0 --\u003e B10",
      "B0 --\u003e B17",
      "B0 --\u003e B11",
      "B0 --\u003e B12",
      "B0 --\u003e B13",
      "B0 --\u003e B14",
      "B0 --\u003e B15",
      "B0 --\u003e B16",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "hexDigitMsb0ToInt",
    "signature": "int hexDigitMsb0ToInt(char)",
    "visibility": "public",
    "body": "{\r\n    switch(hexDigit) {\r\n        case \u00270\u0027:\r\n            return 0x0;\r\n        case \u00271\u0027:\r\n            return 0x8;\r\n        case \u00272\u0027:\r\n            return 0x4;\r\n        case \u00273\u0027:\r\n            return 0xC;\r\n        case \u00274\u0027:\r\n            return 0x2;\r\n        case \u00275\u0027:\r\n            return 0xA;\r\n        case \u00276\u0027:\r\n            return 0x6;\r\n        case \u00277\u0027:\r\n            return 0xE;\r\n        case \u00278\u0027:\r\n            return 0x1;\r\n        case \u00279\u0027:\r\n            return 0x9;\r\n        // fall through\r\n        case \u0027a\u0027:\r\n        case \u0027A\u0027:\r\n            return 0x5;\r\n        // fall through\r\n        case \u0027b\u0027:\r\n        case \u0027B\u0027:\r\n            return 0xD;\r\n        // fall through\r\n        case \u0027c\u0027:\r\n        case \u0027C\u0027:\r\n            return 0x3;\r\n        // fall through\r\n        case \u0027d\u0027:\r\n        case \u0027D\u0027:\r\n            return 0xB;\r\n        // fall through\r\n        case \u0027e\u0027:\r\n        case \u0027E\u0027:\r\n            return 0x7;\r\n        // fall through\r\n        case \u0027f\u0027:\r\n        case \u0027F\u0027:\r\n            return 0xF;\r\n        default:\r\n            throw new IllegalArgumentException(\"Cannot interpret \u0027\" + hexDigit + \"\u0027 as a hexadecimal digit\");\r\n    }\r\n}",
    "nodes": 18,
    "edges": 17,
    "cc": 1,
    "flowSummary": [
      "B0 : If(switch-on $i1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  c0 :\u003d @parameter0: char\n  $i1 \u003d (int) c0\n  IllegalArgumentException; }\n}",
      "B1 {\n  return\n}",
      "B2 {\n  return\n}",
      "B3 {\n  return\n}",
      "B4 {\n  return\n}",
      "B5 {\n  return\n}",
      "B6 {\n  return\n}",
      "B7 {\n  return\n}",
      "B8 {\n  return\n}",
      "B9 {\n  return\n}",
      "B10 {\n  return\n}",
      "B11 {\n  return\n}",
      "B12 {\n  return\n}",
      "B13 {\n  return\n}",
      "B14 {\n  return\n}",
      "B15 {\n  return\n}",
      "B16 {\n  return\n}",
      "B17 {\n  $r7 \u003d IllegalArgumentException\n  $r6 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d $r6.append(\"Cannot interpret \\\u0027\")\n  $r3 \u003d $r2.append(c0)\n  $r4 \u003d $r3.append(\"\\\u0027 as a hexadecimal digit\")\n  $r5 \u003d $r4.toString()\n  new IllegalArgumentException($r5)\n  throw $r7\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B0 --\u003e B4",
      "B0 --\u003e B5",
      "B0 --\u003e B6",
      "B0 --\u003e B7",
      "B0 --\u003e B8",
      "B0 --\u003e B9",
      "B0 --\u003e B10",
      "B0 --\u003e B17",
      "B0 --\u003e B11",
      "B0 --\u003e B12",
      "B0 --\u003e B13",
      "B0 --\u003e B14",
      "B0 --\u003e B15",
      "B0 --\u003e B16",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "hexDigitToBinary",
    "signature": "boolean[] hexDigitToBinary(char)",
    "visibility": "public",
    "body": "{\r\n    switch(hexDigit) {\r\n        case \u00270\u0027:\r\n            return FFFF.clone();\r\n        case \u00271\u0027:\r\n            return TFFF.clone();\r\n        case \u00272\u0027:\r\n            return FTFF.clone();\r\n        case \u00273\u0027:\r\n            return TTFF.clone();\r\n        case \u00274\u0027:\r\n            return FFTF.clone();\r\n        case \u00275\u0027:\r\n            return TFTF.clone();\r\n        case \u00276\u0027:\r\n            return FTTF.clone();\r\n        case \u00277\u0027:\r\n            return TTTF.clone();\r\n        case \u00278\u0027:\r\n            return FFFT.clone();\r\n        case \u00279\u0027:\r\n            return TFFT.clone();\r\n        // fall through\r\n        case \u0027a\u0027:\r\n        case \u0027A\u0027:\r\n            return FTFT.clone();\r\n        // fall through\r\n        case \u0027b\u0027:\r\n        case \u0027B\u0027:\r\n            return TTFT.clone();\r\n        // fall through\r\n        case \u0027c\u0027:\r\n        case \u0027C\u0027:\r\n            return FFTT.clone();\r\n        // fall through\r\n        case \u0027d\u0027:\r\n        case \u0027D\u0027:\r\n            return TFTT.clone();\r\n        // fall through\r\n        case \u0027e\u0027:\r\n        case \u0027E\u0027:\r\n            return FTTT.clone();\r\n        // fall through\r\n        case \u0027f\u0027:\r\n        case \u0027F\u0027:\r\n            return TTTT.clone();\r\n        default:\r\n            throw new IllegalArgumentException(\"Cannot interpret \u0027\" + hexDigit + \"\u0027 as a hexadecimal digit\");\r\n    }\r\n}",
    "nodes": 18,
    "edges": 17,
    "cc": 1,
    "flowSummary": [
      "B0 : If(switch-on $i1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  c0 :\u003d @parameter0: char\n  $i1 \u003d (int) c0\n  IllegalArgumentException; }\n}",
      "B1 {\n  $r45 \u003d Conversion: boolean[] FFFF\u003e\n  $r46 \u003d $r45.clone()\n  $r47 \u003d (boolean[]) $r46\n  return\n}",
      "B2 {\n  $r42 \u003d Conversion: boolean[] TFFF\u003e\n  $r43 \u003d $r42.clone()\n  $r44 \u003d (boolean[]) $r43\n  return\n}",
      "B3 {\n  $r39 \u003d Conversion: boolean[] FTFF\u003e\n  $r40 \u003d $r39.clone()\n  $r41 \u003d (boolean[]) $r40\n  return\n}",
      "B4 {\n  $r36 \u003d Conversion: boolean[] TTFF\u003e\n  $r37 \u003d $r36.clone()\n  $r38 \u003d (boolean[]) $r37\n  return\n}",
      "B5 {\n  $r33 \u003d Conversion: boolean[] FFTF\u003e\n  $r34 \u003d $r33.clone()\n  $r35 \u003d (boolean[]) $r34\n  return\n}",
      "B6 {\n  $r30 \u003d Conversion: boolean[] TFTF\u003e\n  $r31 \u003d $r30.clone()\n  $r32 \u003d (boolean[]) $r31\n  return\n}",
      "B7 {\n  $r27 \u003d Conversion: boolean[] FTTF\u003e\n  $r28 \u003d $r27.clone()\n  $r29 \u003d (boolean[]) $r28\n  return\n}",
      "B8 {\n  $r24 \u003d Conversion: boolean[] TTTF\u003e\n  $r25 \u003d $r24.clone()\n  $r26 \u003d (boolean[]) $r25\n  return\n}",
      "B9 {\n  $r21 \u003d Conversion: boolean[] FFFT\u003e\n  $r22 \u003d $r21.clone()\n  $r23 \u003d (boolean[]) $r22\n  return\n}",
      "B10 {\n  $r18 \u003d Conversion: boolean[] TFFT\u003e\n  $r19 \u003d $r18.clone()\n  $r20 \u003d (boolean[]) $r19\n  return\n}",
      "B11 {\n  $r15 \u003d Conversion: boolean[] FTFT\u003e\n  $r16 \u003d $r15.clone()\n  $r17 \u003d (boolean[]) $r16\n  return\n}",
      "B12 {\n  $r12 \u003d Conversion: boolean[] TTFT\u003e\n  $r13 \u003d $r12.clone()\n  $r14 \u003d (boolean[]) $r13\n  return\n}",
      "B13 {\n  $r9 \u003d Conversion: boolean[] FFTT\u003e\n  $r10 \u003d $r9.clone()\n  $r11 \u003d (boolean[]) $r10\n  return\n}",
      "B14 {\n  $r6 \u003d Conversion: boolean[] TFTT\u003e\n  $r7 \u003d $r6.clone()\n  $r8 \u003d (boolean[]) $r7\n  return\n}",
      "B15 {\n  $r3 \u003d Conversion: boolean[] FTTT\u003e\n  $r4 \u003d $r3.clone()\n  $r5 \u003d (boolean[]) $r4\n  return\n}",
      "B16 {\n  $r0 \u003d Conversion: boolean[] TTTT\u003e\n  $r1 \u003d $r0.clone()\n  $r2 \u003d (boolean[]) $r1\n  return\n}",
      "B17 {\n  $r55 \u003d IllegalArgumentException\n  $r54 \u003d StringBuilder\n  new StringBuilder()\n  $r50 \u003d $r54.append(\"Cannot interpret \\\u0027\")\n  $r51 \u003d $r50.append(c0)\n  $r52 \u003d $r51.append(\"\\\u0027 as a hexadecimal digit\")\n  $r53 \u003d $r52.toString()\n  new IllegalArgumentException($r53)\n  throw $r55\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B0 --\u003e B4",
      "B0 --\u003e B5",
      "B0 --\u003e B6",
      "B0 --\u003e B7",
      "B0 --\u003e B8",
      "B0 --\u003e B9",
      "B0 --\u003e B10",
      "B0 --\u003e B17",
      "B0 --\u003e B11",
      "B0 --\u003e B12",
      "B0 --\u003e B13",
      "B0 --\u003e B14",
      "B0 --\u003e B15",
      "B0 --\u003e B16",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "hexDigitToInt",
    "signature": "int hexDigitToInt(char)",
    "visibility": "public",
    "body": "{\r\n    final int digit \u003d Character.digit(hexDigit, 16);\r\n    if (digit \u003c 0) {\r\n        throw new IllegalArgumentException(\"Cannot interpret \u0027\" + hexDigit + \"\u0027 as a hexadecimal digit\");\r\n    }\r\n    return digit;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i1 \u003e\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  c0 :\u003d @parameter0: char\n  i1 \u003d Character.digit(c0, 16)\n  if (i1 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r0 \u003d IllegalArgumentException\n  $r1 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d $r1.append(\"Cannot interpret \\\u0027\")\n  $r3 \u003d $r2.append(c0)\n  $r4 \u003d $r3.append(\"\\\u0027 as a hexadecimal digit\")\n  $r5 \u003d $r4.toString()\n  new IllegalArgumentException($r5)\n  throw $r0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "hexToByte",
    "signature": "byte hexToByte(java.lang.String,int,byte,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (0 \u003d\u003d nHex) {\r\n        return dstInit;\r\n    }\r\n    if ((nHex - 1) * 4 + dstPos \u003e\u003d 8) {\r\n        throw new IllegalArgumentException(\"(nHex-1)*4+dstPos is greater than or equal to 8\");\r\n    }\r\n    byte out \u003d dstInit;\r\n    for (int i \u003d 0; i \u003c nHex; i++) {\r\n        final int shift \u003d i * 4 + dstPos;\r\n        final int bits \u003d (0xf \u0026 hexDigitToInt(src.charAt(i + srcPos))) \u003c\u003c shift;\r\n        final int mask \u003d 0xf \u003c\u003c shift;\r\n        out \u003d (byte) (out \u0026 ~mask | bits);\r\n    }\r\n    return out;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(0 !\u003d i0) → B1 | else → B2",
      "B2 : If($i4 \u003c 8) → B3 | else → B4",
      "B5 : If(i19 \u003e\u003d i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  String\n  i8 :\u003d @parameter1: int\n  b5 :\u003d @parameter2: byte\n  i2 :\u003d @parameter3: int\n  i0 :\u003d @parameter4: int\n  if (0 !\u003d i0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d i0 - 1\n  $i3 \u003d $i1 * 4\n  $i4 \u003d $i3 + i2\n  if ($i4 \u003c 8) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"(nHex-1)*4+dstPos is greater than or equal to 8\")\n  throw $r2\n}",
      "B4 {\n  b18 \u003d b5\n  i19 \u003d 0\n}",
      "B5 {\n  if (i19 \u003e\u003d i0) goto B6 else B7\n}",
      "B6 {\n  $i6 \u003d i19 * 4\n  i7 \u003d $i6 + i2\n  $i9 \u003d i19 + i8\n  $c10 \u003d r0.charAt($i9)\n  $i11 \u003d Conversion.hexDigitToInt($c10)\n  $i12 \u003d 15 \u0026 $i11\n  i13 \u003d $i12 \u003c\u003c i7\n  i14 \u003d 15 \u003c\u003c i7\n  $i21 \u003d (int) -1\n  $i15 \u003d i14 ^ $i21\n  $i22 \u003d (int) b18\n  $i16 \u003d $i22 \u0026 $i15\n  $i17 \u003d $i16 | i13\n  b18 \u003d (byte) $i17\n  i19 \u003d i19 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Conversion#hexDigitToInt(...1)",
        "body": "{\r\n    final int digit \u003d Character.digit(hexDigit, 16);\r\n    if (digit \u003c 0) {\r\n        throw new IllegalArgumentException(\"Cannot interpret \u0027\" + hexDigit + \"\u0027 as a hexadecimal digit\");\r\n    }\r\n    return digit;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "hexToInt",
    "signature": "int hexToInt(java.lang.String,int,int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (0 \u003d\u003d nHex) {\r\n        return dstInit;\r\n    }\r\n    if ((nHex - 1) * 4 + dstPos \u003e\u003d 32) {\r\n        throw new IllegalArgumentException(\"(nHexs-1)*4+dstPos is greater or equal to than 32\");\r\n    }\r\n    int out \u003d dstInit;\r\n    for (int i \u003d 0; i \u003c nHex; i++) {\r\n        final int shift \u003d i * 4 + dstPos;\r\n        final int bits \u003d (0xf \u0026 hexDigitToInt(src.charAt(i + srcPos))) \u003c\u003c shift;\r\n        final int mask \u003d 0xf \u003c\u003c shift;\r\n        out \u003d out \u0026 ~mask | bits;\r\n    }\r\n    return out;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(0 !\u003d i0) → B1 | else → B2",
      "B2 : If($i4 \u003c 32) → B3 | else → B4",
      "B5 : If(i18 \u003e\u003d i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  String\n  i8 :\u003d @parameter1: int\n  i5 :\u003d @parameter2: int\n  i2 :\u003d @parameter3: int\n  i0 :\u003d @parameter4: int\n  if (0 !\u003d i0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d i0 - 1\n  $i3 \u003d $i1 * 4\n  $i4 \u003d $i3 + i2\n  if ($i4 \u003c 32) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"(nHexs-1)*4+dstPos is greater or equal to than 32\")\n  throw $r2\n}",
      "B4 {\n  i17 \u003d i5\n  i18 \u003d 0\n}",
      "B5 {\n  if (i18 \u003e\u003d i0) goto B6 else B7\n}",
      "B6 {\n  $i6 \u003d i18 * 4\n  i7 \u003d $i6 + i2\n  $i9 \u003d i18 + i8\n  $c10 \u003d r0.charAt($i9)\n  $i11 \u003d Conversion.hexDigitToInt($c10)\n  $i12 \u003d 15 \u0026 $i11\n  i13 \u003d $i12 \u003c\u003c i7\n  i14 \u003d 15 \u003c\u003c i7\n  $i20 \u003d (int) -1\n  $i15 \u003d i14 ^ $i20\n  $i16 \u003d i17 \u0026 $i15\n  i17 \u003d $i16 | i13\n  i18 \u003d i18 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Conversion#hexDigitToInt(...1)",
        "body": "{\r\n    final int digit \u003d Character.digit(hexDigit, 16);\r\n    if (digit \u003c 0) {\r\n        throw new IllegalArgumentException(\"Cannot interpret \u0027\" + hexDigit + \"\u0027 as a hexadecimal digit\");\r\n    }\r\n    return digit;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "hexToLong",
    "signature": "long hexToLong(java.lang.String,int,long,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (0 \u003d\u003d nHex) {\r\n        return dstInit;\r\n    }\r\n    if ((nHex - 1) * 4 + dstPos \u003e\u003d 64) {\r\n        throw new IllegalArgumentException(\"(nHexs-1)*4+dstPos is greater or equal to than 64\");\r\n    }\r\n    long out \u003d dstInit;\r\n    for (int i \u003d 0; i \u003c nHex; i++) {\r\n        final int shift \u003d i * 4 + dstPos;\r\n        final long bits \u003d (0xfL \u0026 hexDigitToInt(src.charAt(i + srcPos))) \u003c\u003c shift;\r\n        final long mask \u003d 0xfL \u003c\u003c shift;\r\n        out \u003d out \u0026 ~mask | bits;\r\n    }\r\n    return out;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(0 !\u003d i0) → B1 | else → B2",
      "B2 : If($i4 \u003c 64) → B3 | else → B4",
      "B5 : If(i19 \u003e\u003d i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  String\n  i8 :\u003d @parameter1: int\n  l5 :\u003d @parameter2: long\n  i2 :\u003d @parameter3: int\n  i0 :\u003d @parameter4: int\n  if (0 !\u003d i0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d i0 - 1\n  $i3 \u003d $i1 * 4\n  $i4 \u003d $i3 + i2\n  if ($i4 \u003c 64) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"(nHexs-1)*4+dstPos is greater or equal to than 64\")\n  throw $r1\n}",
      "B4 {\n  l18 \u003d l5\n  i19 \u003d 0\n}",
      "B5 {\n  if (i19 \u003e\u003d i0) goto B6 else B7\n}",
      "B6 {\n  $i6 \u003d i19 * 4\n  i7 \u003d $i6 + i2\n  $i9 \u003d i19 + i8\n  $c10 \u003d r0.charAt($i9)\n  $i11 \u003d Conversion.hexDigitToInt($c10)\n  $l12 \u003d (long) $i11\n  $l13 \u003d 15L \u0026 $l12\n  l14 \u003d $l13 \u003c\u003c i7\n  l15 \u003d 15L \u003c\u003c i7\n  $l16 \u003d l15 ^ -1L\n  $l17 \u003d l18 \u0026 $l16\n  l18 \u003d $l17 | l14\n  i19 \u003d i19 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Conversion#hexDigitToInt(...1)",
        "body": "{\r\n    final int digit \u003d Character.digit(hexDigit, 16);\r\n    if (digit \u003c 0) {\r\n        throw new IllegalArgumentException(\"Cannot interpret \u0027\" + hexDigit + \"\u0027 as a hexadecimal digit\");\r\n    }\r\n    return digit;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "hexToShort",
    "signature": "short hexToShort(java.lang.String,int,short,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (0 \u003d\u003d nHex) {\r\n        return dstInit;\r\n    }\r\n    if ((nHex - 1) * 4 + dstPos \u003e\u003d 16) {\r\n        throw new IllegalArgumentException(\"(nHexs-1)*4+dstPos is greater or equal to than 16\");\r\n    }\r\n    short out \u003d dstInit;\r\n    for (int i \u003d 0; i \u003c nHex; i++) {\r\n        final int shift \u003d i * 4 + dstPos;\r\n        final int bits \u003d (0xf \u0026 hexDigitToInt(src.charAt(i + srcPos))) \u003c\u003c shift;\r\n        final int mask \u003d 0xf \u003c\u003c shift;\r\n        out \u003d (short) (out \u0026 ~mask | bits);\r\n    }\r\n    return out;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(0 !\u003d i0) → B1 | else → B2",
      "B2 : If($i4 \u003c 16) → B3 | else → B4",
      "B5 : If(i19 \u003e\u003d i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  String\n  i8 :\u003d @parameter1: int\n  s5 :\u003d @parameter2: short\n  i2 :\u003d @parameter3: int\n  i0 :\u003d @parameter4: int\n  if (0 !\u003d i0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d i0 - 1\n  $i3 \u003d $i1 * 4\n  $i4 \u003d $i3 + i2\n  if ($i4 \u003c 16) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"(nHexs-1)*4+dstPos is greater or equal to than 16\")\n  throw $r2\n}",
      "B4 {\n  s18 \u003d s5\n  i19 \u003d 0\n}",
      "B5 {\n  if (i19 \u003e\u003d i0) goto B6 else B7\n}",
      "B6 {\n  $i6 \u003d i19 * 4\n  i7 \u003d $i6 + i2\n  $i9 \u003d i19 + i8\n  $c10 \u003d r0.charAt($i9)\n  $i11 \u003d Conversion.hexDigitToInt($c10)\n  $i12 \u003d 15 \u0026 $i11\n  i13 \u003d $i12 \u003c\u003c i7\n  i14 \u003d 15 \u003c\u003c i7\n  $i21 \u003d (int) -1\n  $i15 \u003d i14 ^ $i21\n  $i22 \u003d (int) s18\n  $i16 \u003d $i22 \u0026 $i15\n  $i17 \u003d $i16 | i13\n  s18 \u003d (short) $i17\n  i19 \u003d i19 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Conversion#hexDigitToInt(...1)",
        "body": "{\r\n    final int digit \u003d Character.digit(hexDigit, 16);\r\n    if (digit \u003c 0) {\r\n        throw new IllegalArgumentException(\"Cannot interpret \u0027\" + hexDigit + \"\u0027 as a hexadecimal digit\");\r\n    }\r\n    return digit;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "intArrayToLong",
    "signature": "long intArrayToLong(int[],int,long,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (src.length \u003d\u003d 0 \u0026\u0026 srcPos \u003d\u003d 0 || 0 \u003d\u003d nInts) {\r\n        return dstInit;\r\n    }\r\n    if ((nInts - 1) * 32 + dstPos \u003e\u003d 64) {\r\n        throw new IllegalArgumentException(\"(nInts-1)*32+dstPos is greater or equal to than 64\");\r\n    }\r\n    long out \u003d dstInit;\r\n    for (int i \u003d 0; i \u003c nInts; i++) {\r\n        final int shift \u003d i * 32 + dstPos;\r\n        final long bits \u003d (0xffffffffL \u0026 src[i + srcPos]) \u003c\u003c shift;\r\n        final long mask \u003d 0xffffffffL \u003c\u003c shift;\r\n        out \u003d out \u0026 ~mask | bits;\r\n    }\r\n    return out;\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B1 : If(i9 \u003d\u003d false) → B2 | else → B3",
      "B2 : If(0 !\u003d i1) → B3 | else → B4",
      "B4 : If($i5 \u003c 64) → B5 | else → B6",
      "B7 : If(i19 \u003e\u003d i1) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  i9 :\u003d @parameter1: int\n  l6 :\u003d @parameter2: long\n  i3 :\u003d @parameter3: int\n  i1 :\u003d @parameter4: int\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  if (i9 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  if (0 !\u003d i1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i2 \u003d i1 - 1\n  $i4 \u003d $i2 * 32\n  $i5 \u003d $i4 + i3\n  if ($i5 \u003c 64) goto B5 else B6\n}",
      "B5 {\n  $r1 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"(nInts-1)*32+dstPos is greater or equal to than 64\")\n  throw $r1\n}",
      "B6 {\n  l18 \u003d l6\n  i19 \u003d 0\n}",
      "B7 {\n  if (i19 \u003e\u003d i1) goto B8 else B9\n}",
      "B8 {\n  $i7 \u003d i19 * 32\n  i8 \u003d $i7 + i3\n  $i10 \u003d i19 + i9\n  $i11 \u003d r0[$i10]\n  $l12 \u003d (long) $i11\n  $l13 \u003d 4294967295L \u0026 $l12\n  l14 \u003d $l13 \u003c\u003c i8\n  l15 \u003d 4294967295L \u003c\u003c i8\n  $l16 \u003d l15 ^ -1L\n  $l17 \u003d l18 \u0026 $l16\n  l18 \u003d $l17 | l14\n  i19 \u003d i19 + 1\n  goto B7\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B7",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "intToBinary",
    "signature": "boolean[] intToBinary(int,int,boolean[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (0 \u003d\u003d nBools) {\r\n        return dst;\r\n    }\r\n    if (nBools - 1 + srcPos \u003e\u003d 32) {\r\n        throw new IllegalArgumentException(\"nBools-1+srcPos is greater or equal to than 32\");\r\n    }\r\n    for (int i \u003d 0; i \u003c nBools; i++) {\r\n        final int shift \u003d i + srcPos;\r\n        dst[dstPos + i] \u003d (0x1 \u0026 src \u003e\u003e shift) !\u003d 0;\r\n    }\r\n    return dst;\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(0 !\u003d i0) → B1 | else → B2",
      "B2 : If($i3 \u003c 32) → B3 | else → B4",
      "B5 : If(i10 \u003e\u003d i0) → B6 | else → B10",
      "B6 : If($i8 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  i6 :\u003d @parameter0: int\n  i1 :\u003d @parameter1: int\n  r0 :\u003d @parameter2: boolean[]\n  i5 :\u003d @parameter3: int\n  i0 :\u003d @parameter4: int\n  if (0 !\u003d i0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i2 \u003d i0 - 1\n  $i3 \u003d $i2 + i1\n  if ($i3 \u003c 32) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"nBools-1+srcPos is greater or equal to than 32\")\n  throw $r1\n}",
      "B4 {\n  i10 \u003d 0\n}",
      "B5 {\n  if (i10 \u003e\u003d i0) goto B6 else B10\n}",
      "B6 {\n  i4 \u003d i10 + i1\n  $i9 \u003d i5 + i10\n  $i7 \u003d i6 \u003e\u003e i4\n  $i8 \u003d 1 \u0026 $i7\n  if ($i8 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $z0 \u003d 1\n  goto B9\n}",
      "B8 {\n  $z0 \u003d 0\n}",
      "B9 {\n  r0[$i9] \u003d $z0\n  i10 \u003d i10 + 1\n  goto B5\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B5",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "intToByteArray",
    "signature": "byte[] intToByteArray(int,int,byte[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (0 \u003d\u003d nBytes) {\r\n        return dst;\r\n    }\r\n    if ((nBytes - 1) * 8 + srcPos \u003e\u003d 32) {\r\n        throw new IllegalArgumentException(\"(nBytes-1)*8+srcPos is greater or equal to than 32\");\r\n    }\r\n    for (int i \u003d 0; i \u003c nBytes; i++) {\r\n        final int shift \u003d i * 8 + srcPos;\r\n        dst[dstPos + i] \u003d (byte) (0xff \u0026 src \u003e\u003e shift);\r\n    }\r\n    return dst;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(0 !\u003d i0) → B1 | else → B2",
      "B2 : If($i4 \u003c 32) → B3 | else → B4",
      "B5 : If(i13 \u003e\u003d i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  i8 :\u003d @parameter0: int\n  i2 :\u003d @parameter1: int\n  r0 :\u003d @parameter2: byte[]\n  i7 :\u003d @parameter3: int\n  i0 :\u003d @parameter4: int\n  if (0 !\u003d i0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d i0 - 1\n  $i3 \u003d $i1 * 8\n  $i4 \u003d $i3 + i2\n  if ($i4 \u003c 32) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"(nBytes-1)*8+srcPos is greater or equal to than 32\")\n  throw $r1\n}",
      "B4 {\n  i13 \u003d 0\n}",
      "B5 {\n  if (i13 \u003e\u003d i0) goto B6 else B7\n}",
      "B6 {\n  $i5 \u003d i13 * 8\n  i6 \u003d $i5 + i2\n  $i12 \u003d i7 + i13\n  $i9 \u003d i8 \u003e\u003e i6\n  $i10 \u003d 255 \u0026 $i9\n  $b11 \u003d (byte) $i10\n  r0[$i12] \u003d $b11\n  i13 \u003d i13 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "intToHex",
    "signature": "java.lang.String intToHex(int,int,java.lang.String,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (0 \u003d\u003d nHexs) {\r\n        return dstInit;\r\n    }\r\n    if ((nHexs - 1) * 4 + srcPos \u003e\u003d 32) {\r\n        throw new IllegalArgumentException(\"(nHexs-1)*4+srcPos is greater or equal to than 32\");\r\n    }\r\n    final StringBuilder sb \u003d new StringBuilder(dstInit);\r\n    int append \u003d sb.length();\r\n    for (int i \u003d 0; i \u003c nHexs; i++) {\r\n        final int shift \u003d i * 4 + srcPos;\r\n        final int bits \u003d 0xF \u0026 src \u003e\u003e shift;\r\n        if (dstPos + i \u003d\u003d append) {\r\n            ++append;\r\n            sb.append(intToHexDigit(bits));\r\n        } else {\r\n            sb.setCharAt(dstPos + i, intToHexDigit(bits));\r\n        }\r\n    }\r\n    return sb.toString();\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(0 !\u003d i0) → B1 | else → B2",
      "B2 : If($i4 \u003c 32) → B3 | else → B4",
      "B5 : If(i16 \u003e\u003d i0) → B6 | else → B10",
      "B6 : If($i11 !\u003d i15) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  i7 :\u003d @parameter0: int\n  i2 :\u003d @parameter1: int\n  String\n  i10 :\u003d @parameter3: int\n  i0 :\u003d @parameter4: int\n  if (0 !\u003d i0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d i0 - 1\n  $i3 \u003d $i1 * 4\n  $i4 \u003d $i3 + i2\n  if ($i4 \u003c 32) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"(nHexs-1)*4+srcPos is greater or equal to than 32\")\n  throw $r3\n}",
      "B4 {\n  $r0 \u003d StringBuilder\n  new StringBuilder(r1)\n  i15 \u003d $r0.length()\n  i16 \u003d 0\n}",
      "B5 {\n  if (i16 \u003e\u003d i0) goto B6 else B10\n}",
      "B6 {\n  $i5 \u003d i16 * 4\n  i6 \u003d $i5 + i2\n  $i8 \u003d i7 \u003e\u003e i6\n  i9 \u003d 15 \u0026 $i8\n  $i11 \u003d i10 + i16\n  if ($i11 !\u003d i15) goto B7 else B8\n}",
      "B7 {\n  i15 \u003d i15 + 1\n  $c14 \u003d Conversion.intToHexDigit(i9)\n  $r0.append($c14)\n  goto B9\n}",
      "B8 {\n  $i13 \u003d i10 + i16\n  $c12 \u003d Conversion.intToHexDigit(i9)\n  $r0.setCharAt($i13, $c12)\n}",
      "B9 {\n  i16 \u003d i16 + 1\n  goto B5\n}",
      "B10 {\n  $r2 \u003d $r0.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B5",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Conversion#intToHexDigit(...1)",
        "body": "{\r\n    final char c \u003d Character.forDigit(nibble, 16);\r\n    if (c \u003d\u003d Character.MIN_VALUE) {\r\n        throw new IllegalArgumentException(\"nibble value not between 0 and 15: \" + nibble);\r\n    }\r\n    return c;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "intToHexDigit",
    "signature": "char intToHexDigit(int)",
    "visibility": "public",
    "body": "{\r\n    final char c \u003d Character.forDigit(nibble, 16);\r\n    if (c \u003d\u003d Character.MIN_VALUE) {\r\n        throw new IllegalArgumentException(\"nibble value not between 0 and 15: \" + nibble);\r\n    }\r\n    return c;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(c1 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  c1 \u003d Character.forDigit(i0, 16)\n  if (c1 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r0 \u003d IllegalArgumentException\n  $r1 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d $r1.append(\"nibble value not between 0 and 15: \")\n  $r3 \u003d $r2.append(i0)\n  $r4 \u003d $r3.toString()\n  new IllegalArgumentException($r4)\n  throw $r0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "intToHexDigitMsb0",
    "signature": "char intToHexDigitMsb0(int)",
    "visibility": "public",
    "body": "{\r\n    switch(nibble) {\r\n        case 0x0:\r\n            return \u00270\u0027;\r\n        case 0x1:\r\n            return \u00278\u0027;\r\n        case 0x2:\r\n            return \u00274\u0027;\r\n        case 0x3:\r\n            return \u0027c\u0027;\r\n        case 0x4:\r\n            return \u00272\u0027;\r\n        case 0x5:\r\n            return \u0027a\u0027;\r\n        case 0x6:\r\n            return \u00276\u0027;\r\n        case 0x7:\r\n            return \u0027e\u0027;\r\n        case 0x8:\r\n            return \u00271\u0027;\r\n        case 0x9:\r\n            return \u00279\u0027;\r\n        case 0xA:\r\n            return \u00275\u0027;\r\n        case 0xB:\r\n            return \u0027d\u0027;\r\n        case 0xC:\r\n            return \u00273\u0027;\r\n        case 0xD:\r\n            return \u0027b\u0027;\r\n        case 0xE:\r\n            return \u00277\u0027;\r\n        case 0xF:\r\n            return \u0027f\u0027;\r\n        default:\r\n            throw new IllegalArgumentException(\"nibble value not between 0 and 15: \" + nibble);\r\n    }\r\n}",
    "nodes": 18,
    "edges": 17,
    "cc": 1,
    "flowSummary": [
      "B0 : If(switch-on i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  IllegalArgumentException; }\n}",
      "B1 {\n  return\n}",
      "B2 {\n  return\n}",
      "B3 {\n  return\n}",
      "B4 {\n  return\n}",
      "B5 {\n  return\n}",
      "B6 {\n  return\n}",
      "B7 {\n  return\n}",
      "B8 {\n  return\n}",
      "B9 {\n  return\n}",
      "B10 {\n  return\n}",
      "B11 {\n  return\n}",
      "B12 {\n  return\n}",
      "B13 {\n  return\n}",
      "B14 {\n  return\n}",
      "B15 {\n  return\n}",
      "B16 {\n  return\n}",
      "B17 {\n  $r0 \u003d IllegalArgumentException\n  $r1 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d $r1.append(\"nibble value not between 0 and 15: \")\n  $r3 \u003d $r2.append(i0)\n  $r4 \u003d $r3.toString()\n  new IllegalArgumentException($r4)\n  throw $r0\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B0 --\u003e B4",
      "B0 --\u003e B5",
      "B0 --\u003e B6",
      "B0 --\u003e B7",
      "B0 --\u003e B8",
      "B0 --\u003e B9",
      "B0 --\u003e B10",
      "B0 --\u003e B11",
      "B0 --\u003e B12",
      "B0 --\u003e B13",
      "B0 --\u003e B14",
      "B0 --\u003e B15",
      "B0 --\u003e B16",
      "B0 --\u003e B17",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "intToShortArray",
    "signature": "short[] intToShortArray(int,int,short[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (0 \u003d\u003d nShorts) {\r\n        return dst;\r\n    }\r\n    if ((nShorts - 1) * 16 + srcPos \u003e\u003d 32) {\r\n        throw new IllegalArgumentException(\"(nShorts-1)*16+srcPos is greater or equal to than 32\");\r\n    }\r\n    for (int i \u003d 0; i \u003c nShorts; i++) {\r\n        final int shift \u003d i * 16 + srcPos;\r\n        dst[dstPos + i] \u003d (short) (0xffff \u0026 src \u003e\u003e shift);\r\n    }\r\n    return dst;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(0 !\u003d i0) → B1 | else → B2",
      "B2 : If($i4 \u003c 32) → B3 | else → B4",
      "B5 : If(i13 \u003e\u003d i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  i8 :\u003d @parameter0: int\n  i2 :\u003d @parameter1: int\n  r0 :\u003d @parameter2: short[]\n  i7 :\u003d @parameter3: int\n  i0 :\u003d @parameter4: int\n  if (0 !\u003d i0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d i0 - 1\n  $i3 \u003d $i1 * 16\n  $i4 \u003d $i3 + i2\n  if ($i4 \u003c 32) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"(nShorts-1)*16+srcPos is greater or equal to than 32\")\n  throw $r2\n}",
      "B4 {\n  i13 \u003d 0\n}",
      "B5 {\n  if (i13 \u003e\u003d i0) goto B6 else B7\n}",
      "B6 {\n  $i5 \u003d i13 * 16\n  i6 \u003d $i5 + i2\n  $i12 \u003d i7 + i13\n  $i9 \u003d i8 \u003e\u003e i6\n  $i15 \u003d (int) 65535\n  $i10 \u003d $i15 \u0026 $i9\n  $s11 \u003d (short) $i10\n  r0[$i12] \u003d $s11\n  i13 \u003d i13 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "longToBinary",
    "signature": "boolean[] longToBinary(long,int,boolean[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (0 \u003d\u003d nBools) {\r\n        return dst;\r\n    }\r\n    if (nBools - 1 + srcPos \u003e\u003d 64) {\r\n        throw new IllegalArgumentException(\"nBools-1+srcPos is greater or equal to than 64\");\r\n    }\r\n    for (int i \u003d 0; i \u003c nBools; i++) {\r\n        final int shift \u003d i + srcPos;\r\n        dst[dstPos + i] \u003d (0x1 \u0026 src \u003e\u003e shift) !\u003d 0;\r\n    }\r\n    return dst;\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(0 !\u003d i0) → B1 | else → B2",
      "B2 : If($i3 \u003c 64) → B3 | else → B4",
      "B5 : If(i11 \u003e\u003d i0) → B6 | else → B10",
      "B6 : If($b9 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  l6 :\u003d @parameter0: long\n  i1 :\u003d @parameter1: int\n  r0 :\u003d @parameter2: boolean[]\n  i5 :\u003d @parameter3: int\n  i0 :\u003d @parameter4: int\n  if (0 !\u003d i0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i2 \u003d i0 - 1\n  $i3 \u003d $i2 + i1\n  if ($i3 \u003c 64) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"nBools-1+srcPos is greater or equal to than 64\")\n  throw $r1\n}",
      "B4 {\n  i11 \u003d 0\n}",
      "B5 {\n  if (i11 \u003e\u003d i0) goto B6 else B10\n}",
      "B6 {\n  i4 \u003d i11 + i1\n  $i10 \u003d i5 + i11\n  $l7 \u003d l6 \u003e\u003e i4\n  $l8 \u003d 1L \u0026 $l7\n  $b9 \u003d $l8 cmp 0L\n  if ($b9 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $z0 \u003d 1\n  goto B9\n}",
      "B8 {\n  $z0 \u003d 0\n}",
      "B9 {\n  r0[$i10] \u003d $z0\n  i11 \u003d i11 + 1\n  goto B5\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B5",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "longToByteArray",
    "signature": "byte[] longToByteArray(long,int,byte[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (0 \u003d\u003d nBytes) {\r\n        return dst;\r\n    }\r\n    if ((nBytes - 1) * 8 + srcPos \u003e\u003d 64) {\r\n        throw new IllegalArgumentException(\"(nBytes-1)*8+srcPos is greater or equal to than 64\");\r\n    }\r\n    for (int i \u003d 0; i \u003c nBytes; i++) {\r\n        final int shift \u003d i * 8 + srcPos;\r\n        dst[dstPos + i] \u003d (byte) (0xff \u0026 src \u003e\u003e shift);\r\n    }\r\n    return dst;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(0 !\u003d i0) → B1 | else → B2",
      "B2 : If($i4 \u003c 64) → B3 | else → B4",
      "B5 : If(i14 \u003e\u003d i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  l8 :\u003d @parameter0: long\n  i2 :\u003d @parameter1: int\n  r0 :\u003d @parameter2: byte[]\n  i7 :\u003d @parameter3: int\n  i0 :\u003d @parameter4: int\n  if (0 !\u003d i0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d i0 - 1\n  $i3 \u003d $i1 * 8\n  $i4 \u003d $i3 + i2\n  if ($i4 \u003c 64) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"(nBytes-1)*8+srcPos is greater or equal to than 64\")\n  throw $r1\n}",
      "B4 {\n  i14 \u003d 0\n}",
      "B5 {\n  if (i14 \u003e\u003d i0) goto B6 else B7\n}",
      "B6 {\n  $i5 \u003d i14 * 8\n  i6 \u003d $i5 + i2\n  $i13 \u003d i7 + i14\n  $l9 \u003d l8 \u003e\u003e i6\n  $l10 \u003d 255L \u0026 $l9\n  $i11 \u003d (int) $l10\n  $b12 \u003d (byte) $i11\n  r0[$i13] \u003d $b12\n  i14 \u003d i14 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "longToHex",
    "signature": "java.lang.String longToHex(long,int,java.lang.String,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (0 \u003d\u003d nHexs) {\r\n        return dstInit;\r\n    }\r\n    if ((nHexs - 1) * 4 + srcPos \u003e\u003d 64) {\r\n        throw new IllegalArgumentException(\"(nHexs-1)*4+srcPos is greater or equal to than 64\");\r\n    }\r\n    final StringBuilder sb \u003d new StringBuilder(dstInit);\r\n    int append \u003d sb.length();\r\n    for (int i \u003d 0; i \u003c nHexs; i++) {\r\n        final int shift \u003d i * 4 + srcPos;\r\n        final int bits \u003d (int) (0xF \u0026 src \u003e\u003e shift);\r\n        if (dstPos + i \u003d\u003d append) {\r\n            ++append;\r\n            sb.append(intToHexDigit(bits));\r\n        } else {\r\n            sb.setCharAt(dstPos + i, intToHexDigit(bits));\r\n        }\r\n    }\r\n    return sb.toString();\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(0 !\u003d i0) → B1 | else → B2",
      "B2 : If($i4 \u003c 64) → B3 | else → B4",
      "B5 : If(i17 \u003e\u003d i0) → B6 | else → B10",
      "B6 : If($i12 !\u003d i16) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  l7 :\u003d @parameter0: long\n  i2 :\u003d @parameter1: int\n  String\n  i11 :\u003d @parameter3: int\n  i0 :\u003d @parameter4: int\n  if (0 !\u003d i0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d i0 - 1\n  $i3 \u003d $i1 * 4\n  $i4 \u003d $i3 + i2\n  if ($i4 \u003c 64) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"(nHexs-1)*4+srcPos is greater or equal to than 64\")\n  throw $r3\n}",
      "B4 {\n  $r0 \u003d StringBuilder\n  new StringBuilder(r1)\n  i16 \u003d $r0.length()\n  i17 \u003d 0\n}",
      "B5 {\n  if (i17 \u003e\u003d i0) goto B6 else B10\n}",
      "B6 {\n  $i5 \u003d i17 * 4\n  i6 \u003d $i5 + i2\n  $l8 \u003d l7 \u003e\u003e i6\n  $l9 \u003d 15L \u0026 $l8\n  i10 \u003d (int) $l9\n  $i12 \u003d i11 + i17\n  if ($i12 !\u003d i16) goto B7 else B8\n}",
      "B7 {\n  i16 \u003d i16 + 1\n  $c15 \u003d Conversion.intToHexDigit(i10)\n  $r0.append($c15)\n  goto B9\n}",
      "B8 {\n  $i14 \u003d i11 + i17\n  $c13 \u003d Conversion.intToHexDigit(i10)\n  $r0.setCharAt($i14, $c13)\n}",
      "B9 {\n  i17 \u003d i17 + 1\n  goto B5\n}",
      "B10 {\n  $r2 \u003d $r0.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B5",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Conversion#intToHexDigit(...1)",
        "body": "{\r\n    final char c \u003d Character.forDigit(nibble, 16);\r\n    if (c \u003d\u003d Character.MIN_VALUE) {\r\n        throw new IllegalArgumentException(\"nibble value not between 0 and 15: \" + nibble);\r\n    }\r\n    return c;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "longToIntArray",
    "signature": "int[] longToIntArray(long,int,int[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (0 \u003d\u003d nInts) {\r\n        return dst;\r\n    }\r\n    if ((nInts - 1) * 32 + srcPos \u003e\u003d 64) {\r\n        throw new IllegalArgumentException(\"(nInts-1)*32+srcPos is greater or equal to than 64\");\r\n    }\r\n    for (int i \u003d 0; i \u003c nInts; i++) {\r\n        final int shift \u003d i * 32 + srcPos;\r\n        dst[dstPos + i] \u003d (int) (0xffffffff \u0026 src \u003e\u003e shift);\r\n    }\r\n    return dst;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(0 !\u003d i0) → B1 | else → B2",
      "B2 : If($i4 \u003c 64) → B3 | else → B4",
      "B5 : If(i13 \u003e\u003d i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  l8 :\u003d @parameter0: long\n  i2 :\u003d @parameter1: int\n  r0 :\u003d @parameter2: int[]\n  i7 :\u003d @parameter3: int\n  i0 :\u003d @parameter4: int\n  if (0 !\u003d i0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d i0 - 1\n  $i3 \u003d $i1 * 32\n  $i4 \u003d $i3 + i2\n  if ($i4 \u003c 64) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"(nInts-1)*32+srcPos is greater or equal to than 64\")\n  throw $r1\n}",
      "B4 {\n  i13 \u003d 0\n}",
      "B5 {\n  if (i13 \u003e\u003d i0) goto B6 else B7\n}",
      "B6 {\n  $i5 \u003d i13 * 32\n  i6 \u003d $i5 + i2\n  $i12 \u003d i7 + i13\n  $l9 \u003d l8 \u003e\u003e i6\n  $l10 \u003d -1L \u0026 $l9\n  $i11 \u003d (int) $l10\n  r0[$i12] \u003d $i11\n  i13 \u003d i13 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "longToShortArray",
    "signature": "short[] longToShortArray(long,int,short[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (0 \u003d\u003d nShorts) {\r\n        return dst;\r\n    }\r\n    if ((nShorts - 1) * 16 + srcPos \u003e\u003d 64) {\r\n        throw new IllegalArgumentException(\"(nShorts-1)*16+srcPos is greater or equal to than 64\");\r\n    }\r\n    for (int i \u003d 0; i \u003c nShorts; i++) {\r\n        final int shift \u003d i * 16 + srcPos;\r\n        dst[dstPos + i] \u003d (short) (0xffff \u0026 src \u003e\u003e shift);\r\n    }\r\n    return dst;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(0 !\u003d i0) → B1 | else → B2",
      "B2 : If($i4 \u003c 64) → B3 | else → B4",
      "B5 : If(i14 \u003e\u003d i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  l8 :\u003d @parameter0: long\n  i2 :\u003d @parameter1: int\n  r0 :\u003d @parameter2: short[]\n  i7 :\u003d @parameter3: int\n  i0 :\u003d @parameter4: int\n  if (0 !\u003d i0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d i0 - 1\n  $i3 \u003d $i1 * 16\n  $i4 \u003d $i3 + i2\n  if ($i4 \u003c 64) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"(nShorts-1)*16+srcPos is greater or equal to than 64\")\n  throw $r1\n}",
      "B4 {\n  i14 \u003d 0\n}",
      "B5 {\n  if (i14 \u003e\u003d i0) goto B6 else B7\n}",
      "B6 {\n  $i5 \u003d i14 * 16\n  i6 \u003d $i5 + i2\n  $i13 \u003d i7 + i14\n  $l9 \u003d l8 \u003e\u003e i6\n  $l10 \u003d 65535L \u0026 $l9\n  $i11 \u003d (int) $l10\n  $s12 \u003d (short) $i11\n  r0[$i13] \u003d $s12\n  i14 \u003d i14 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "shortArrayToInt",
    "signature": "int shortArrayToInt(short[],int,int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (src.length \u003d\u003d 0 \u0026\u0026 srcPos \u003d\u003d 0 || 0 \u003d\u003d nShorts) {\r\n        return dstInit;\r\n    }\r\n    if ((nShorts - 1) * 16 + dstPos \u003e\u003d 32) {\r\n        throw new IllegalArgumentException(\"(nShorts-1)*16+dstPos is greater or equal to than 32\");\r\n    }\r\n    int out \u003d dstInit;\r\n    for (int i \u003d 0; i \u003c nShorts; i++) {\r\n        final int shift \u003d i * 16 + dstPos;\r\n        final int bits \u003d (0xffff \u0026 src[i + srcPos]) \u003c\u003c shift;\r\n        final int mask \u003d 0xffff \u003c\u003c shift;\r\n        out \u003d out \u0026 ~mask | bits;\r\n    }\r\n    return out;\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B1 : If(i9 \u003d\u003d false) → B2 | else → B3",
      "B2 : If(0 !\u003d i1) → B3 | else → B4",
      "B4 : If($i5 \u003c 32) → B5 | else → B6",
      "B7 : If(i18 \u003e\u003d i1) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  i9 :\u003d @parameter1: int\n  i6 :\u003d @parameter2: int\n  i3 :\u003d @parameter3: int\n  i1 :\u003d @parameter4: int\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  if (i9 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  if (0 !\u003d i1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i2 \u003d i1 - 1\n  $i4 \u003d $i2 * 16\n  $i5 \u003d $i4 + i3\n  if ($i5 \u003c 32) goto B5 else B6\n}",
      "B5 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"(nShorts-1)*16+dstPos is greater or equal to than 32\")\n  throw $r2\n}",
      "B6 {\n  i17 \u003d i6\n  i18 \u003d 0\n}",
      "B7 {\n  if (i18 \u003e\u003d i1) goto B8 else B9\n}",
      "B8 {\n  $i7 \u003d i18 * 16\n  i8 \u003d $i7 + i3\n  $i10 \u003d i18 + i9\n  $s11 \u003d r0[$i10]\n  $i20 \u003d (int) 65535\n  $i21 \u003d (int) $s11\n  $i12 \u003d $i20 \u0026 $i21\n  i13 \u003d $i12 \u003c\u003c i8\n  $i23 \u003d (int) 65535\n  i14 \u003d $i23 \u003c\u003c i8\n  $i25 \u003d (int) -1\n  $i15 \u003d i14 ^ $i25\n  $i16 \u003d i17 \u0026 $i15\n  i17 \u003d $i16 | i13\n  i18 \u003d i18 + 1\n  goto B7\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B7",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "shortArrayToLong",
    "signature": "long shortArrayToLong(short[],int,long,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (src.length \u003d\u003d 0 \u0026\u0026 srcPos \u003d\u003d 0 || 0 \u003d\u003d nShorts) {\r\n        return dstInit;\r\n    }\r\n    if ((nShorts - 1) * 16 + dstPos \u003e\u003d 64) {\r\n        throw new IllegalArgumentException(\"(nShorts-1)*16+dstPos is greater or equal to than 64\");\r\n    }\r\n    long out \u003d dstInit;\r\n    for (int i \u003d 0; i \u003c nShorts; i++) {\r\n        final int shift \u003d i * 16 + dstPos;\r\n        final long bits \u003d (0xffffL \u0026 src[i + srcPos]) \u003c\u003c shift;\r\n        final long mask \u003d 0xffffL \u003c\u003c shift;\r\n        out \u003d out \u0026 ~mask | bits;\r\n    }\r\n    return out;\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B1 : If(i9 \u003d\u003d false) → B2 | else → B3",
      "B2 : If(0 !\u003d i1) → B3 | else → B4",
      "B4 : If($i5 \u003c 64) → B5 | else → B6",
      "B7 : If(i19 \u003e\u003d i1) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  i9 :\u003d @parameter1: int\n  l6 :\u003d @parameter2: long\n  i3 :\u003d @parameter3: int\n  i1 :\u003d @parameter4: int\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  if (i9 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  if (0 !\u003d i1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i2 \u003d i1 - 1\n  $i4 \u003d $i2 * 16\n  $i5 \u003d $i4 + i3\n  if ($i5 \u003c 64) goto B5 else B6\n}",
      "B5 {\n  $r1 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"(nShorts-1)*16+dstPos is greater or equal to than 64\")\n  throw $r1\n}",
      "B6 {\n  l18 \u003d l6\n  i19 \u003d 0\n}",
      "B7 {\n  if (i19 \u003e\u003d i1) goto B8 else B9\n}",
      "B8 {\n  $i7 \u003d i19 * 16\n  i8 \u003d $i7 + i3\n  $i10 \u003d i19 + i9\n  $s11 \u003d r0[$i10]\n  $l12 \u003d (long) $s11\n  $l13 \u003d 65535L \u0026 $l12\n  l14 \u003d $l13 \u003c\u003c i8\n  l15 \u003d 65535L \u003c\u003c i8\n  $l16 \u003d l15 ^ -1L\n  $l17 \u003d l18 \u0026 $l16\n  l18 \u003d $l17 | l14\n  i19 \u003d i19 + 1\n  goto B7\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B7",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "shortToBinary",
    "signature": "boolean[] shortToBinary(short,int,boolean[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (0 \u003d\u003d nBools) {\r\n        return dst;\r\n    }\r\n    if (nBools - 1 + srcPos \u003e\u003d 16) {\r\n        throw new IllegalArgumentException(\"nBools-1+srcPos is greater or equal to than 16\");\r\n    }\r\n    assert nBools - 1 \u003c 16 - srcPos;\r\n    for (int i \u003d 0; i \u003c nBools; i++) {\r\n        final int shift \u003d i + srcPos;\r\n        dst[dstPos + i] \u003d (0x1 \u0026 src \u003e\u003e shift) !\u003d 0;\r\n    }\r\n    return dst;\r\n}",
    "nodes": 14,
    "edges": 16,
    "cc": 4,
    "flowSummary": [
      "B0 : If(0 !\u003d i0) → B1 | else → B2",
      "B2 : If($i3 \u003c 16) → B3 | else → B4",
      "B4 : If($z0 !\u003d 0) → B5 | else → B7",
      "B5 : If($i11 \u003c $i10) → B6 | else → B7",
      "B8 : If(i12 \u003e\u003d i0) → B9 | else → B13",
      "B9 : If($i8 \u003d\u003d false) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  s6 :\u003d @parameter0: short\n  i1 :\u003d @parameter1: int\n  r0 :\u003d @parameter2: boolean[]\n  i5 :\u003d @parameter3: int\n  i0 :\u003d @parameter4: int\n  if (0 !\u003d i0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i2 \u003d i0 - 1\n  $i3 \u003d $i2 + i1\n  if ($i3 \u003c 16) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"nBools-1+srcPos is greater or equal to than 16\")\n  throw $r3\n}",
      "B4 {\n  $z0 \u003d Conversion: boolean $assertionsDisabled\u003e\n  if ($z0 !\u003d 0) goto B5 else B7\n}",
      "B5 {\n  $i11 \u003d i0 - 1\n  $i10 \u003d 16 - i1\n  if ($i11 \u003c $i10) goto B6 else B7\n}",
      "B6 {\n  $r4 \u003d AssertionError\n  new AssertionError()\n  throw $r4\n}",
      "B7 {\n  i12 \u003d 0\n}",
      "B8 {\n  if (i12 \u003e\u003d i0) goto B9 else B13\n}",
      "B9 {\n  i4 \u003d i12 + i1\n  $i9 \u003d i5 + i12\n  $i13 \u003d (int) s6\n  $i7 \u003d $i13 \u003e\u003e i4\n  $i8 \u003d 1 \u0026 $i7\n  if ($i8 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  $z1 \u003d 1\n  goto B12\n}",
      "B11 {\n  $z1 \u003d 0\n}",
      "B12 {\n  r0[$i9] \u003d $z1\n  i12 \u003d i12 + 1\n  goto B8\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B8",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "shortToByteArray",
    "signature": "byte[] shortToByteArray(short,int,byte[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (0 \u003d\u003d nBytes) {\r\n        return dst;\r\n    }\r\n    if ((nBytes - 1) * 8 + srcPos \u003e\u003d 16) {\r\n        throw new IllegalArgumentException(\"(nBytes-1)*8+srcPos is greater or equal to than 16\");\r\n    }\r\n    for (int i \u003d 0; i \u003c nBytes; i++) {\r\n        final int shift \u003d i * 8 + srcPos;\r\n        dst[dstPos + i] \u003d (byte) (0xff \u0026 src \u003e\u003e shift);\r\n    }\r\n    return dst;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(0 !\u003d i0) → B1 | else → B2",
      "B2 : If($i4 \u003c 16) → B3 | else → B4",
      "B5 : If(i13 \u003e\u003d i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  s8 :\u003d @parameter0: short\n  i2 :\u003d @parameter1: int\n  r0 :\u003d @parameter2: byte[]\n  i7 :\u003d @parameter3: int\n  i0 :\u003d @parameter4: int\n  if (0 !\u003d i0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d i0 - 1\n  $i3 \u003d $i1 * 8\n  $i4 \u003d $i3 + i2\n  if ($i4 \u003c 16) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"(nBytes-1)*8+srcPos is greater or equal to than 16\")\n  throw $r2\n}",
      "B4 {\n  i13 \u003d 0\n}",
      "B5 {\n  if (i13 \u003e\u003d i0) goto B6 else B7\n}",
      "B6 {\n  $i5 \u003d i13 * 8\n  i6 \u003d $i5 + i2\n  $i12 \u003d i7 + i13\n  $i14 \u003d (int) s8\n  $i9 \u003d $i14 \u003e\u003e i6\n  $i10 \u003d 255 \u0026 $i9\n  $b11 \u003d (byte) $i10\n  r0[$i12] \u003d $b11\n  i13 \u003d i13 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "shortToHex",
    "signature": "java.lang.String shortToHex(short,int,java.lang.String,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (0 \u003d\u003d nHexs) {\r\n        return dstInit;\r\n    }\r\n    if ((nHexs - 1) * 4 + srcPos \u003e\u003d 16) {\r\n        throw new IllegalArgumentException(\"(nHexs-1)*4+srcPos is greater or equal to than 16\");\r\n    }\r\n    final StringBuilder sb \u003d new StringBuilder(dstInit);\r\n    int append \u003d sb.length();\r\n    for (int i \u003d 0; i \u003c nHexs; i++) {\r\n        final int shift \u003d i * 4 + srcPos;\r\n        final int bits \u003d 0xF \u0026 src \u003e\u003e shift;\r\n        if (dstPos + i \u003d\u003d append) {\r\n            ++append;\r\n            sb.append(intToHexDigit(bits));\r\n        } else {\r\n            sb.setCharAt(dstPos + i, intToHexDigit(bits));\r\n        }\r\n    }\r\n    return sb.toString();\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(0 !\u003d i0) → B1 | else → B2",
      "B2 : If($i4 \u003c 16) → B3 | else → B4",
      "B5 : If(i16 \u003e\u003d i0) → B6 | else → B10",
      "B6 : If($i11 !\u003d i15) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  s7 :\u003d @parameter0: short\n  i2 :\u003d @parameter1: int\n  String\n  i10 :\u003d @parameter3: int\n  i0 :\u003d @parameter4: int\n  if (0 !\u003d i0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d i0 - 1\n  $i3 \u003d $i1 * 4\n  $i4 \u003d $i3 + i2\n  if ($i4 \u003c 16) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"(nHexs-1)*4+srcPos is greater or equal to than 16\")\n  throw $r4\n}",
      "B4 {\n  $r5 \u003d StringBuilder\n  new StringBuilder(r1)\n  i15 \u003d $r5.length()\n  i16 \u003d 0\n}",
      "B5 {\n  if (i16 \u003e\u003d i0) goto B6 else B10\n}",
      "B6 {\n  $i5 \u003d i16 * 4\n  i6 \u003d $i5 + i2\n  $i17 \u003d (int) s7\n  $i8 \u003d $i17 \u003e\u003e i6\n  i9 \u003d 15 \u0026 $i8\n  $i11 \u003d i10 + i16\n  if ($i11 !\u003d i15) goto B7 else B8\n}",
      "B7 {\n  i15 \u003d i15 + 1\n  $c14 \u003d Conversion.intToHexDigit(i9)\n  $r5.append($c14)\n  goto B9\n}",
      "B8 {\n  $i13 \u003d i10 + i16\n  $c12 \u003d Conversion.intToHexDigit(i9)\n  $r5.setCharAt($i13, $c12)\n}",
      "B9 {\n  i16 \u003d i16 + 1\n  goto B5\n}",
      "B10 {\n  $r2 \u003d $r5.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B5",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Conversion#intToHexDigit(...1)",
        "body": "{\r\n    final char c \u003d Character.forDigit(nibble, 16);\r\n    if (c \u003d\u003d Character.MIN_VALUE) {\r\n        throw new IllegalArgumentException(\"nibble value not between 0 and 15: \" + nibble);\r\n    }\r\n    return c;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Conversion",
    "methodName": "uuidToByteArray",
    "signature": "byte[] uuidToByteArray(java.util.UUID,byte[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (0 \u003d\u003d nBytes) {\r\n        return dst;\r\n    }\r\n    if (nBytes \u003e 16) {\r\n        throw new IllegalArgumentException(\"nBytes is greater than 16\");\r\n    }\r\n    longToByteArray(src.getMostSignificantBits(), 0, dst, dstPos, Math.min(nBytes, 8));\r\n    if (nBytes \u003e\u003d 8) {\r\n        longToByteArray(src.getLeastSignificantBits(), 0, dst, dstPos + 8, nBytes - 8);\r\n    }\r\n    return dst;\r\n}",
    "nodes": 7,
    "edges": 7,
    "cc": 2,
    "flowSummary": [
      "B0 : If(0 !\u003d i0) → B1 | else → B2",
      "B2 : If(i0 \u003c\u003d 16) → B3 | else → B4",
      "B4 : If(i0 \u003c 8) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  UUID\n  r1 :\u003d @parameter1: byte[]\n  i1 :\u003d @parameter2: int\n  i0 :\u003d @parameter3: int\n  if (0 !\u003d i0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (i0 \u003c\u003d 16) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"nBytes is greater than 16\")\n  throw $r2\n}",
      "B4 {\n  $l3 \u003d r0.getMostSignificantBits()\n  $i2 \u003d Math.min(i0, 8)\n  Conversion.longToByteArray($l3, 0, r1, i1, $i2)\n  if (i0 \u003c 8) goto B5 else B6\n}",
      "B5 {\n  $l6 \u003d r0.getLeastSignificantBits()\n  $i5 \u003d i1 + 8\n  $i4 \u003d i0 - 8\n  Conversion.longToByteArray($l6, 0, r1, $i5, $i4)\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Conversion#longToByteArray(...5)",
        "body": "{\r\n    if (0 \u003d\u003d nBytes) {\r\n        return dst;\r\n    }\r\n    if ((nBytes - 1) * 8 + srcPos \u003e\u003d 64) {\r\n        throw new IllegalArgumentException(\"(nBytes-1)*8+srcPos is greater or equal to than 64\");\r\n    }\r\n    for (int i \u003d 0; i \u003c nBytes; i++) {\r\n        final int shift \u003d i * 8 + srcPos;\r\n        dst[dstPos + i] \u003d (byte) (0xff \u0026 src \u003e\u003e shift);\r\n    }\r\n    return dst;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.EnumUtils",
    "methodName": "generateBitVector",
    "signature": "long generateBitVector(java.lang.Class,java.lang.Iterable)",
    "visibility": "public",
    "body": "{\r\n    checkBitVectorable(enumClass);\r\n    Objects.requireNonNull(values, \"values\");\r\n    long total \u003d 0;\r\n    for (final E constant : values) {\r\n        Objects.requireNonNull(constant, NULL_ELEMENTS_NOT_PERMITTED);\r\n        total |\u003d 1L \u003c\u003c constant.ordinal();\r\n    }\r\n    return total;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Class\n  Iterable\n  EnumUtils.checkBitVectorable(r0)\n  Objects.requireNonNull(r1, \"values\")\n  l2 \u003d 0L\n  r2 \u003d r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d r2.next()\n  r4 \u003d Enum) $r3\n  Objects.requireNonNull(r4, \"null elements not permitted\")\n  $i0 \u003d r4.ordinal()\n  $l1 \u003d 1L \u003c\u003c $i0\n  l2 \u003d l2 | $l1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumUtils#checkBitVectorable(...1)",
        "body": "{\r\n    final E[] constants \u003d asEnum(enumClass).getEnumConstants();\r\n    Validate.isTrue(constants.length \u003c\u003d Long.SIZE, CANNOT_STORE_S_S_VALUES_IN_S_BITS, Integer.valueOf(constants.length), enumClass.getSimpleName(), Integer.valueOf(Long.SIZE));\r\n    return enumClass;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.EnumUtils",
    "methodName": "generateBitVectors",
    "signature": "long[] generateBitVectors(java.lang.Class,java.lang.Enum[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Class\n  Enum[]\n  EnumUtils.asEnum(r0)\n  Validate.noNullElements(r1)\n  r2 \u003d EnumSet.noneOf(r0)\n  Collections.addAll(r2, r1)\n  $r3 \u003d r0.getEnumConstants()\n  $r4 \u003d Enum[]) $r3\n  $i0 \u003d lengthof $r4\n  $i1 \u003d $i0 - 1\n  $i2 \u003d $i1 / 64\n  $i3 \u003d $i2 + 1\n  r5 \u003d newarray (long)[$i3]\n  r6 \u003d r2.iterator()\n}",
      "B1 {\n  $z0 \u003d r6.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d r6.next()\n  r8 \u003d Enum) $r7\n  $i4 \u003d r8.ordinal()\n  $i5 \u003d $i4 / 64\n  $l6 \u003d r5[$i5]\n  $i7 \u003d r8.ordinal()\n  $i8 \u003d $i7 % 64\n  $l9 \u003d 1L \u003c\u003c $i8\n  $l10 \u003d $l6 | $l9\n  r5[$i5] \u003d $l10\n  goto B1\n}",
      "B3 {\n  ArrayUtils.reverse(r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.EnumUtils",
    "methodName": "generateBitVectors",
    "signature": "long[] generateBitVectors(java.lang.Class,java.lang.Iterable)",
    "visibility": "public",
    "body": "{\r\n    asEnum(enumClass);\r\n    Objects.requireNonNull(values, \"values\");\r\n    final EnumSet\u003cE\u003e condensed \u003d EnumSet.noneOf(enumClass);\r\n    values.forEach(constant -\u003e condensed.add(Objects.requireNonNull(constant, NULL_ELEMENTS_NOT_PERMITTED)));\r\n    final long[] result \u003d new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\r\n    for (final E value : condensed) {\r\n        result[value.ordinal() / Long.SIZE] |\u003d 1L \u003c\u003c value.ordinal() % Long.SIZE;\r\n    }\r\n    ArrayUtils.reverse(result);\r\n    return result;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Class\n  Iterable\n  EnumUtils.asEnum(r0)\n  Objects.requireNonNull(r1, \"values\")\n  r2 \u003d EnumSet.noneOf(r0)\n  $r3 \u003d EnumUtils$lambda_generateBitVectors_0__74.bootstrap$(r2)\n  r1.forEach($r3)\n  $r4 \u003d r0.getEnumConstants()\n  $r5 \u003d Enum[]) $r4\n  $i0 \u003d lengthof $r5\n  $i1 \u003d $i0 - 1\n  $i2 \u003d $i1 / 64\n  $i3 \u003d $i2 + 1\n  r6 \u003d newarray (long)[$i3]\n  r7 \u003d r2.iterator()\n}",
      "B1 {\n  $z0 \u003d r7.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r8 \u003d r7.next()\n  r9 \u003d Enum) $r8\n  $i4 \u003d r9.ordinal()\n  $i5 \u003d $i4 / 64\n  $l6 \u003d r6[$i5]\n  $i7 \u003d r9.ordinal()\n  $i8 \u003d $i7 % 64\n  $l9 \u003d 1L \u003c\u003c $i8\n  $l10 \u003d $l6 | $l9\n  r6[$i5] \u003d $l10\n  goto B1\n}",
      "B3 {\n  ArrayUtils.reverse(r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumUtils#asEnum(...1)",
        "body": "{\r\n    Objects.requireNonNull(enumClass, ENUM_CLASS_MUST_BE_DEFINED);\r\n    Validate.isTrue(enumClass.isEnum(), S_DOES_NOT_SEEM_TO_BE_AN_ENUM_TYPE, enumClass);\r\n    return enumClass;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.EnumUtils",
    "methodName": "getEnumSystemProperty",
    "signature": "java.lang.Enum getEnumSystemProperty(java.lang.Class,java.lang.String,java.lang.Enum)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r2 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Class\n  String\n  Enum\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r2 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r1\n  goto B4\n}",
      "B3 {\n  $r3 \u003d System.getProperty(r2)\n  $r4 \u003d EnumUtils.getEnum(r0, $r3, r1)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.EnumUtils",
    "methodName": "getFirstEnumIgnoreCase",
    "signature": "java.lang.Enum getFirstEnumIgnoreCase(java.lang.Class,java.lang.String,java.util.function.Function,java.lang.Enum)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Class\n  String\n  Function\n  Enum\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r2.isEnum()\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r3 \u003d r2.getEnumConstants()\n  $r4 \u003d Enum[]) $r3\n  $r7 \u003d Stream.of($r4)\n  $r6 \u003d EnumUtils$lambda_getFirstEnumIgnoreCase_1__78.bootstrap$(r0, r5)\n  $r8 \u003d $r7.filter($r6)\n  $r9 \u003d $r8.findFirst()\n  $r10 \u003d $r9.orElse(r1)\n  $r11 \u003d Enum) $r10\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.EnumUtils",
    "methodName": "isValidEnum",
    "signature": "boolean isValidEnum(java.lang.Class,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return getEnum(enumClass, enumName) !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  String\n  $r2 \u003d EnumUtils.getEnum(r0, r1)\n  if ($r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumUtils#getEnum(...2)",
        "body": "{\r\n    return getEnum(enumClass, enumName, null);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.EnumUtils",
    "methodName": "isValidEnumIgnoreCase",
    "signature": "boolean isValidEnumIgnoreCase(java.lang.Class,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return getEnumIgnoreCase(enumClass, enumName) !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  String\n  $r2 \u003d EnumUtils.getEnumIgnoreCase(r0, r1)\n  if ($r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumUtils#getEnumIgnoreCase(...2)",
        "body": "{\r\n    return getEnumIgnoreCase(enumClass, enumName, null);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.EnumUtils",
    "methodName": "processBitVectors",
    "signature": "java.util.EnumSet processBitVectors(java.lang.Class,long[])",
    "visibility": "public",
    "body": "{\r\n    final EnumSet\u003cE\u003e results \u003d EnumSet.noneOf(asEnum(enumClass));\r\n    final long[] lvalues \u003d ArrayUtils.clone(Objects.requireNonNull(values, \"values\"));\r\n    ArrayUtils.reverse(lvalues);\r\n    for (final E constant : enumClass.getEnumConstants()) {\r\n        final int block \u003d constant.ordinal() / Long.SIZE;\r\n        if (block \u003c lvalues.length \u0026\u0026 (lvalues[block] \u0026 1L \u003c\u003c constant.ordinal() % Long.SIZE) !\u003d 0) {\r\n            results.add(constant);\r\n        }\r\n    }\r\n    return results;\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B1 : If(i10 \u003e\u003d i0) → B2 | else → B6",
      "B2 : If(i2 \u003e\u003d $i3) → B3 | else → B5",
      "B3 : If($b9 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Class\n  r3 :\u003d @parameter1: long[]\n  $r1 \u003d EnumUtils.asEnum(r0)\n  r2 \u003d EnumSet.noneOf($r1)\n  $r4 \u003d Objects.requireNonNull(r3, \"values\")\n  $r5 \u003d (long[]) $r4\n  r6 \u003d ArrayUtils.clone($r5)\n  ArrayUtils.reverse(r6)\n  $r7 \u003d r0.getEnumConstants()\n  r8 \u003d Enum[]) $r7\n  i0 \u003d lengthof r8\n  i10 \u003d 0\n}",
      "B1 {\n  if (i10 \u003e\u003d i0) goto B2 else B6\n}",
      "B2 {\n  r9 \u003d r8[i10]\n  $i1 \u003d r9.ordinal()\n  i2 \u003d $i1 / 64\n  $i3 \u003d lengthof r6\n  if (i2 \u003e\u003d $i3) goto B3 else B5\n}",
      "B3 {\n  $l4 \u003d r6[i2]\n  $i5 \u003d r9.ordinal()\n  $i6 \u003d $i5 % 64\n  $l7 \u003d 1L \u003c\u003c $i6\n  $l8 \u003d $l4 \u0026 $l7\n  $b9 \u003d $l8 cmp 0L\n  if ($b9 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  r2.add(r9)\n}",
      "B5 {\n  i10 \u003d i10 + 1\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EnumUtils#asEnum(...1)",
        "body": "{\r\n    Objects.requireNonNull(enumClass, ENUM_CLASS_MUST_BE_DEFINED);\r\n    Validate.isTrue(enumClass.isEnum(), S_DOES_NOT_SEEM_TO_BE_AN_ENUM_TYPE, enumClass);\r\n    return enumClass;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.event.EventListenerSupport",
    "methodName": "addListener",
    "signature": "void addListener(java.lang.Object,boolean)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  EventListenerSupport\n  Object\n  z0 :\u003d @parameter1: boolean\n  Objects.requireNonNull(r0, \"listener\")\n  if (z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d List listeners\u003e\n  $z1 \u003d $r3.contains(r0)\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d List listeners\u003e\n  $r2.add(r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.exception.DefaultExceptionContext",
    "methodName": "getFormattedExceptionMessage",
    "signature": "java.lang.String getFormattedExceptionMessage(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    final StringBuilder buffer \u003d new StringBuilder(256);\r\n    if (baseMessage !\u003d null) {\r\n        buffer.append(baseMessage);\r\n    }\r\n    if (!contextValues.isEmpty()) {\r\n        if (buffer.length() \u003e 0) {\r\n            buffer.append(\u0027\\n\u0027);\r\n        }\r\n        buffer.append(\"Exception Context:\\n\");\r\n        int i \u003d 0;\r\n        for (final Pair\u003cString, Object\u003e pair : contextValues) {\r\n            buffer.append(\"\\t[\");\r\n            buffer.append(++i);\r\n            buffer.append(\u0027:\u0027);\r\n            buffer.append(pair.getKey());\r\n            buffer.append(\"\u003d\");\r\n            final Object value \u003d pair.getValue();\r\n            try {\r\n                buffer.append(Objects.toString(value));\r\n            } catch (final Exception e) {\r\n                buffer.append(\"Exception thrown on toString(): \");\r\n                buffer.append(ExceptionUtils.getStackTrace(e));\r\n            }\r\n            buffer.append(\"]\\n\");\r\n        }\r\n        buffer.append(\"---------------------------------\");\r\n    }\r\n    return buffer.toString();\r\n}",
    "nodes": 12,
    "edges": 15,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B11",
      "B3 : If($i0 \u003c\u003d 0) → B4 | else → B5",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B10"
    ],
    "blockList": [
      "B0 {\n  DefaultExceptionContext\n  String\n  $r0 \u003d StringBuilder\n  new StringBuilder(256)\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r0.append(r1)\n}",
      "B2 {\n  $r3 \u003d List contextValues\u003e\n  $z0 \u003d $r3.isEmpty()\n  if ($z0 !\u003d 0) goto B3 else B11\n}",
      "B3 {\n  $i0 \u003d $r0.length()\n  if ($i0 \u003c\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r0.append(10)\n}",
      "B5 {\n  $r0.append(\"Exception Context:\\n\")\n  i1 \u003d 0\n  $r5 \u003d List contextValues\u003e\n  $r12 \u003d $r5.iterator()\n}",
      "B6 {\n  $z1 \u003d $r12.hasNext()\n  if ($z1 \u003d\u003d false) goto B7 else B10\n}",
      "B7 {\n  $r6 \u003d $r12.next()\n  r7 \u003d Pair) $r6\n  $r0.append(\"\\t\")\n  i1 \u003d i1 + 1\n  $r0.append(i1)\n  $r0.append(58)\n  $r8 \u003d r7.getKey()\n  $r9 \u003d String) $r8\n  $r0.append($r9)\n  $r0.append(\"\u003d\")\n  r10 \u003d r7.getValue()\n  $r11 \u003d Objects.toString(r10)\n  $r0.append($r11)\n  goto B9\n}",
      "B8 {\n  $r13 :\u003d @caughtexception\n  $r0.append(\"Exception thrown on toString(): \")\n  $r14 \u003d ExceptionUtils.getStackTrace($r13)\n  $r0.append($r14)\n}",
      "B9 {\n  $r0.append(\"\\n\")\n  goto B6\n}",
      "B10 {\n  $r0.append(\"---------------------------------\")\n}",
      "B11 {\n  $r4 \u003d $r0.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B11",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B6",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.exception.ExceptionUtils",
    "methodName": "getCause",
    "signature": "java.lang.Throwable getCause(java.lang.Throwable,java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    if (throwable \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (methodNames \u003d\u003d null) {\r\n        final Throwable cause \u003d throwable.getCause();\r\n        if (cause !\u003d null) {\r\n            return cause;\r\n        }\r\n        methodNames \u003d CAUSE_METHOD_NAMES;\r\n    }\r\n    return Stream.of(methodNames).map(m -\u003e getCauseUsingMethodName(throwable, m)).filter(Objects::nonNull).findFirst().orElse(null);\r\n}",
    "nodes": 7,
    "edges": 7,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r10 !\u003d null) → B3 | else → B6",
      "B3 : If(r9 \u003d\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Throwable\n  String[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r10 !\u003d null) goto B3 else B6\n}",
      "B3 {\n  r9 \u003d r0.getCause()\n  if (r9 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  r10 \u003d String[] CAUSE_METHOD_NAMES\u003e\n}",
      "B6 {\n  $r2 \u003d Stream.of(r10)\n  $r1 \u003d ExceptionUtils$lambda_getCause_0__85.bootstrap$(r0)\n  $r4 \u003d $r2.map($r1)\n  $r3 \u003d ExceptionUtils$nonNull__86.bootstrap$()\n  $r5 \u003d $r4.filter($r3)\n  $r6 \u003d $r5.findFirst()\n  $r7 \u003d $r6.orElse(null)\n  $r8 \u003d Throwable) $r7\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ExceptionUtils#getCauseUsingMethodName(...2)",
        "body": "{\r\n    if (methodName !\u003d null) {\r\n        Method method \u003d MethodUtils.getMethodObject(throwable.getClass(), methodName);\r\n        if (method !\u003d null \u0026\u0026 Throwable.class.isAssignableFrom(method.getReturnType())) {\r\n            try {\r\n                return (Throwable) method.invoke(throwable);\r\n            } catch (final ReflectiveOperationException ignored) {\r\n                // exception ignored\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.exception.ExceptionUtils",
    "methodName": "getMessage",
    "signature": "java.lang.String getMessage(java.lang.Throwable)",
    "visibility": "public",
    "body": "{\r\n    if (th \u003d\u003d null) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    final String clsName \u003d ClassUtils.getShortClassName(th, null);\r\n    return clsName + \": \" + StringUtils.defaultString(th.getMessage());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Throwable\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r1 \u003d ClassUtils.getShortClassName(r0, null)\n  $r2 \u003d StringBuilder\n  new StringBuilder()\n  $r3 \u003d $r2.append(r1)\n  $r6 \u003d $r3.append(\": \")\n  $r4 \u003d r0.getMessage()\n  $r5 \u003d StringUtils.defaultString($r4)\n  $r7 \u003d $r6.append($r5)\n  $r8 \u003d $r7.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.exception.ExceptionUtils",
    "methodName": "getRootCause",
    "signature": "java.lang.Throwable getRootCause(java.lang.Throwable)",
    "visibility": "public",
    "body": "{\r\n    final List\u003cThrowable\u003e list \u003d getThrowableList(throwable);\r\n    return list.isEmpty() ? null : list.get(list.size() - 1);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Throwable\n  r1 \u003d ExceptionUtils.getThrowableList(r0)\n  $z0 \u003d r1.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d null\n  goto B3\n}",
      "B2 {\n  $i0 \u003d r1.size()\n  $i1 \u003d $i0 - 1\n  $r2 \u003d r1.get($i1)\n  $r3 \u003d Throwable) $r2\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ExceptionUtils#getThrowableList(...1)",
        "body": "{\r\n    final List\u003cThrowable\u003e list \u003d new ArrayList\u003c\u003e();\r\n    while (throwable !\u003d null \u0026\u0026 !list.contains(throwable)) {\r\n        list.add(throwable);\r\n        throwable \u003d throwable.getCause();\r\n    }\r\n    return list;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.exception.ExceptionUtils",
    "methodName": "getRootCauseMessage",
    "signature": "java.lang.String getRootCauseMessage(java.lang.Throwable)",
    "visibility": "public",
    "body": "{\r\n    final Throwable root \u003d getRootCause(throwable);\r\n    return getMessage(root \u003d\u003d null ? throwable : root);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Throwable\n  r1 \u003d ExceptionUtils.getRootCause(r0)\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r1\n}",
      "B3 {\n  $r2 \u003d ExceptionUtils.getMessage($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ExceptionUtils#getRootCause(...1)",
        "body": "{\r\n    final List\u003cThrowable\u003e list \u003d getThrowableList(throwable);\r\n    return list.isEmpty() ? null : list.get(list.size() - 1);\r\n}"
      },
      {
        "name": "ExceptionUtils#getMessage(...1)",
        "body": "{\r\n    if (th \u003d\u003d null) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    final String clsName \u003d ClassUtils.getShortClassName(th, null);\r\n    return clsName + \": \" + StringUtils.defaultString(th.getMessage());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.exception.ExceptionUtils",
    "methodName": "getRootCauseStackTraceList",
    "signature": "java.util.List getRootCauseStackTraceList(java.lang.Throwable)",
    "visibility": "public",
    "body": "{\r\n    if (throwable \u003d\u003d null) {\r\n        return Collections.emptyList();\r\n    }\r\n    final Throwable[] throwables \u003d getThrowables(throwable);\r\n    final int count \u003d throwables.length;\r\n    final List\u003cString\u003e frames \u003d new ArrayList\u003c\u003e();\r\n    List\u003cString\u003e nextTrace \u003d getStackFrameList(throwables[count - 1]);\r\n    for (int i \u003d count; --i \u003e\u003d 0; ) {\r\n        final List\u003cString\u003e trace \u003d nextTrace;\r\n        if (i !\u003d 0) {\r\n            nextTrace \u003d getStackFrameList(throwables[i - 1]);\r\n            removeCommonFrames(trace, nextTrace);\r\n        }\r\n        if (i \u003d\u003d count - 1) {\r\n            frames.add(throwables[i].toString());\r\n        } else {\r\n            frames.add(WRAPPED_MARKER + throwables[i].toString());\r\n        }\r\n        frames.addAll(trace);\r\n    }\r\n    return frames;\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i4 \u003c 0) → B4 | else → B10",
      "B4 : If(i4 \u003d\u003d false) → B5 | else → B6",
      "B6 : If(i4 !\u003d $i2) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  Throwable\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r14 \u003d Collections.emptyList()\n  return\n}",
      "B2 {\n  r1 \u003d ExceptionUtils.getThrowables(r0)\n  i0 \u003d lengthof r1\n  $r16 \u003d ArrayList\n  new ArrayList()\n  $i1 \u003d i0 - 1\n  $r3 \u003d r1[$i1]\n  r15 \u003d ExceptionUtils.getStackFrameList($r3)\n  i4 \u003d i0\n}",
      "B3 {\n  $i6 \u003d (int) -1\n  i4 \u003d i4 + $i6\n  if (i4 \u003c 0) goto B4 else B10\n}",
      "B4 {\n  r4 \u003d r15\n  if (i4 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $i3 \u003d i4 - 1\n  $r13 \u003d r1[$i3]\n  r15 \u003d ExceptionUtils.getStackFrameList($r13)\n  ExceptionUtils.removeCommonFrames(r4, r15)\n}",
      "B6 {\n  $i2 \u003d i0 - 1\n  if (i4 !\u003d $i2) goto B7 else B8\n}",
      "B7 {\n  $r11 \u003d r1[i4]\n  $r12 \u003d $r11.toString()\n  $r16.add($r12)\n  goto B9\n}",
      "B8 {\n  $r17 \u003d StringBuilder\n  new StringBuilder()\n  $r8 \u003d $r17.append(\" wrapped \")\n  $r6 \u003d r1[i4]\n  $r7 \u003d $r6.toString()\n  $r9 \u003d $r8.append($r7)\n  $r10 \u003d $r9.toString()\n  $r16.add($r10)\n}",
      "B9 {\n  $r16.addAll(r4)\n  goto B3\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B10",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B3",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ExceptionUtils#removeCommonFrames(...2)",
        "body": "{\r\n    Objects.requireNonNull(causeFrames, \"causeFrames\");\r\n    Objects.requireNonNull(wrapperFrames, \"wrapperFrames\");\r\n    int causeFrameIndex \u003d causeFrames.size() - 1;\r\n    int wrapperFrameIndex \u003d wrapperFrames.size() - 1;\r\n    while (causeFrameIndex \u003e\u003d 0 \u0026\u0026 wrapperFrameIndex \u003e\u003d 0) {\r\n        // Remove the frame from the cause trace if it is the same\r\n        // as in the wrapper trace\r\n        final String causeFrame \u003d causeFrames.get(causeFrameIndex);\r\n        final String wrapperFrame \u003d wrapperFrames.get(wrapperFrameIndex);\r\n        if (causeFrame.equals(wrapperFrame)) {\r\n            causeFrames.remove(causeFrameIndex);\r\n        }\r\n        causeFrameIndex--;\r\n        wrapperFrameIndex--;\r\n    }\r\n}"
      },
      {
        "name": "ExceptionUtils#getThrowables(...1)",
        "body": "{\r\n    return getThrowableList(throwable).toArray(ArrayUtils.EMPTY_THROWABLE_ARRAY);\r\n}"
      },
      {
        "name": "ExceptionUtils#getStackFrameList(...1)",
        "body": "{\r\n    final String stackTrace \u003d getStackTrace(throwable);\r\n    final String linebreak \u003d System.lineSeparator();\r\n    final StringTokenizer frames \u003d new StringTokenizer(stackTrace, linebreak);\r\n    final List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();\r\n    boolean traceStarted \u003d false;\r\n    while (frames.hasMoreTokens()) {\r\n        final String token \u003d frames.nextToken();\r\n        // Determine if the line starts with \u003cwhitespace\u003eat\r\n        final int at \u003d token.indexOf(\"at\");\r\n        if (at !\u003d NOT_FOUND \u0026\u0026 token.substring(0, at).trim().isEmpty()) {\r\n            traceStarted \u003d true;\r\n            list.add(token);\r\n        } else if (traceStarted) {\r\n            break;\r\n        }\r\n    }\r\n    return list;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.exception.ExceptionUtils",
    "methodName": "getStackFrames",
    "signature": "java.lang.String[] getStackFrames(java.lang.Throwable)",
    "visibility": "public",
    "body": "{\r\n    if (throwable \u003d\u003d null) {\r\n        return ArrayUtils.EMPTY_STRING_ARRAY;\r\n    }\r\n    return getStackFrames(getStackTrace(throwable));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Throwable\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d String[] EMPTY_STRING_ARRAY\u003e\n  return\n}",
      "B2 {\n  $r1 \u003d ExceptionUtils.getStackTrace(r0)\n  $r2 \u003d ExceptionUtils.getStackFrames($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ExceptionUtils#getStackFrames(...1)",
        "body": "{\r\n    final String linebreak \u003d System.lineSeparator();\r\n    final StringTokenizer frames \u003d new StringTokenizer(stackTrace, linebreak);\r\n    final List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();\r\n    while (frames.hasMoreTokens()) {\r\n        list.add(frames.nextToken());\r\n    }\r\n    return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);\r\n}"
      },
      {
        "name": "ExceptionUtils#getStackTrace(...1)",
        "body": "{\r\n    if (throwable \u003d\u003d null) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    final StringWriter sw \u003d new StringWriter();\r\n    throwable.printStackTrace(new PrintWriter(sw, true));\r\n    return sw.toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.exception.ExceptionUtils",
    "methodName": "getStackTrace",
    "signature": "java.lang.String getStackTrace(java.lang.Throwable)",
    "visibility": "public",
    "body": "{\r\n    if (throwable \u003d\u003d null) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    final StringWriter sw \u003d new StringWriter();\r\n    throwable.printStackTrace(new PrintWriter(sw, true));\r\n    return sw.toString();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Throwable\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d StringWriter\n  new StringWriter()\n  $r2 \u003d PrintWriter\n  new PrintWriter($r1, 1)\n  r0.printStackTrace($r2)\n  $r3 \u003d $r1.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.exception.ExceptionUtils",
    "methodName": "getThrowableList",
    "signature": "java.util.List getThrowableList(java.lang.Throwable)",
    "visibility": "public",
    "body": "{\r\n    final List\u003cThrowable\u003e list \u003d new ArrayList\u003c\u003e();\r\n    while (throwable !\u003d null \u0026\u0026 !list.contains(throwable)) {\r\n        list.add(throwable);\r\n        throwable \u003d throwable.getCause();\r\n    }\r\n    return list;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r1 \u003d\u003d null) → B2 | else → B4",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Throwable\n  $r0 \u003d ArrayList\n  new ArrayList()\n}",
      "B1 {\n  if (r1 \u003d\u003d null) goto B2 else B4\n}",
      "B2 {\n  $z0 \u003d $r0.contains(r1)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r0.add(r1)\n  r1 \u003d r1.getCause()\n  goto B1\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B1",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.exception.ExceptionUtils",
    "methodName": "hasCause",
    "signature": "boolean hasCause(java.lang.Throwable,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (chain instanceof UndeclaredThrowableException) {\r\n        chain \u003d chain.getCause();\r\n    }\r\n    return type.isInstance(chain);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Throwable\n  Class\n  $z0 \u003d UndeclaredThrowableException\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r1 \u003d r1.getCause()\n}",
      "B2 {\n  $z1 \u003d r0.isInstance(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.exception.ExceptionUtils",
    "methodName": "isChecked",
    "signature": "boolean isChecked(java.lang.Throwable)",
    "visibility": "public",
    "body": "{\r\n    return throwable !\u003d null \u0026\u0026 !(throwable instanceof Error) \u0026\u0026 !(throwable instanceof RuntimeException);\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B4",
      "B1 : If($z0 !\u003d 0) → B2 | else → B4",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Throwable\n  if (r0 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $z0 \u003d Error\n  if ($z0 !\u003d 0) goto B2 else B4\n}",
      "B2 {\n  $z1 \u003d RuntimeException\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $z2 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z2 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.exception.ExceptionUtils",
    "methodName": "isUnchecked",
    "signature": "boolean isUnchecked(java.lang.Throwable)",
    "visibility": "public",
    "body": "{\r\n    return throwable !\u003d null \u0026\u0026 (throwable instanceof Error || throwable instanceof RuntimeException);\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B4",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Throwable\n  if (r0 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $z0 \u003d Error\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d RuntimeException\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $z2 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z2 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.exception.ExceptionUtils",
    "methodName": "printRootCauseStackTrace",
    "signature": "void printRootCauseStackTrace(java.lang.Throwable,java.io.PrintStream)",
    "visibility": "public",
    "body": "{\r\n    if (throwable \u003d\u003d null) {\r\n        return;\r\n    }\r\n    Objects.requireNonNull(printStream, \"printStream\");\r\n    getRootCauseStackTraceList(throwable).forEach(printStream::println);\r\n    printStream.flush();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Throwable\n  PrintStream\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  Objects.requireNonNull(r1, \"printStream\")\n  $r3 \u003d ExceptionUtils.getRootCauseStackTraceList(r0)\n  Objects.requireNonNull(r1)\n  $r2 \u003d ExceptionUtils$println__87.bootstrap$(r1)\n  $r3.forEach($r2)\n  r1.flush()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ExceptionUtils#getRootCauseStackTraceList(...1)",
        "body": "{\r\n    if (throwable \u003d\u003d null) {\r\n        return Collections.emptyList();\r\n    }\r\n    final Throwable[] throwables \u003d getThrowables(throwable);\r\n    final int count \u003d throwables.length;\r\n    final List\u003cString\u003e frames \u003d new ArrayList\u003c\u003e();\r\n    List\u003cString\u003e nextTrace \u003d getStackFrameList(throwables[count - 1]);\r\n    for (int i \u003d count; --i \u003e\u003d 0; ) {\r\n        final List\u003cString\u003e trace \u003d nextTrace;\r\n        if (i !\u003d 0) {\r\n            nextTrace \u003d getStackFrameList(throwables[i - 1]);\r\n            removeCommonFrames(trace, nextTrace);\r\n        }\r\n        if (i \u003d\u003d count - 1) {\r\n            frames.add(throwables[i].toString());\r\n        } else {\r\n            frames.add(WRAPPED_MARKER + throwables[i].toString());\r\n        }\r\n        frames.addAll(trace);\r\n    }\r\n    return frames;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.exception.ExceptionUtils",
    "methodName": "printRootCauseStackTrace",
    "signature": "void printRootCauseStackTrace(java.lang.Throwable,java.io.PrintWriter)",
    "visibility": "public",
    "body": "{\r\n    if (throwable \u003d\u003d null) {\r\n        return;\r\n    }\r\n    Objects.requireNonNull(printWriter, \"printWriter\");\r\n    getRootCauseStackTraceList(throwable).forEach(printWriter::println);\r\n    printWriter.flush();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Throwable\n  PrintWriter\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  Objects.requireNonNull(r1, \"printWriter\")\n  $r3 \u003d ExceptionUtils.getRootCauseStackTraceList(r0)\n  Objects.requireNonNull(r1)\n  $r2 \u003d ExceptionUtils$println__88.bootstrap$(r1)\n  $r3.forEach($r2)\n  r1.flush()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ExceptionUtils#getRootCauseStackTraceList(...1)",
        "body": "{\r\n    if (throwable \u003d\u003d null) {\r\n        return Collections.emptyList();\r\n    }\r\n    final Throwable[] throwables \u003d getThrowables(throwable);\r\n    final int count \u003d throwables.length;\r\n    final List\u003cString\u003e frames \u003d new ArrayList\u003c\u003e();\r\n    List\u003cString\u003e nextTrace \u003d getStackFrameList(throwables[count - 1]);\r\n    for (int i \u003d count; --i \u003e\u003d 0; ) {\r\n        final List\u003cString\u003e trace \u003d nextTrace;\r\n        if (i !\u003d 0) {\r\n            nextTrace \u003d getStackFrameList(throwables[i - 1]);\r\n            removeCommonFrames(trace, nextTrace);\r\n        }\r\n        if (i \u003d\u003d count - 1) {\r\n            frames.add(throwables[i].toString());\r\n        } else {\r\n            frames.add(WRAPPED_MARKER + throwables[i].toString());\r\n        }\r\n        frames.addAll(trace);\r\n    }\r\n    return frames;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.exception.ExceptionUtils",
    "methodName": "removeCommonFrames",
    "signature": "void removeCommonFrames(java.util.List,java.util.List)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(causeFrames, \"causeFrames\");\r\n    Objects.requireNonNull(wrapperFrames, \"wrapperFrames\");\r\n    int causeFrameIndex \u003d causeFrames.size() - 1;\r\n    int wrapperFrameIndex \u003d wrapperFrames.size() - 1;\r\n    while (causeFrameIndex \u003e\u003d 0 \u0026\u0026 wrapperFrameIndex \u003e\u003d 0) {\r\n        // Remove the frame from the cause trace if it is the same\r\n        // as in the wrapper trace\r\n        final String causeFrame \u003d causeFrames.get(causeFrameIndex);\r\n        final String wrapperFrame \u003d wrapperFrames.get(wrapperFrameIndex);\r\n        if (causeFrame.equals(wrapperFrame)) {\r\n            causeFrames.remove(causeFrameIndex);\r\n        }\r\n        causeFrameIndex--;\r\n        wrapperFrameIndex--;\r\n    }\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B1 : If(i2 \u003c 0) → B2 | else → B6",
      "B2 : If(i3 \u003c 0) → B3 | else → B6",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  List\n  List\n  Objects.requireNonNull(r0, \"causeFrames\")\n  Objects.requireNonNull(r1, \"wrapperFrames\")\n  $i0 \u003d r0.size()\n  i2 \u003d $i0 - 1\n  $i1 \u003d r1.size()\n  i3 \u003d $i1 - 1\n}",
      "B1 {\n  if (i2 \u003c 0) goto B2 else B6\n}",
      "B2 {\n  if (i3 \u003c 0) goto B3 else B6\n}",
      "B3 {\n  $r2 \u003d r0.get(i2)\n  r3 \u003d String) $r2\n  $r4 \u003d r1.get(i3)\n  r5 \u003d String) $r4\n  $z0 \u003d r3.equals(r5)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  r0.remove(i2)\n}",
      "B5 {\n  $i5 \u003d (int) -1\n  i2 \u003d i2 + $i5\n  $i7 \u003d (int) -1\n  i3 \u003d i3 + $i7\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.exception.ExceptionUtils",
    "methodName": "throwUnchecked",
    "signature": "java.lang.Object throwUnchecked(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Object\n  $z0 \u003d RuntimeException\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d RuntimeException) r0\n  throw $r2\n}",
      "B2 {\n  $z1 \u003d Error\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d Error) r0\n  throw $r1\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.exception.ExceptionUtils",
    "methodName": "throwUnchecked",
    "signature": "java.lang.Throwable throwUnchecked(java.lang.Throwable)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Throwable\n  $z0 \u003d ExceptionUtils.isUnchecked(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ExceptionUtils.asRuntimeException(r0)\n  throw $r1\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.function.Consumers",
    "methodName": "accept",
    "signature": "void accept(java.util.function.Consumer,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Consumer\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r0.accept(r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.function.Failable",
    "methodName": "rethrow",
    "signature": "java.lang.RuntimeException rethrow(java.lang.Throwable)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(throwable, \"throwable\");\r\n    ExceptionUtils.throwUnchecked(throwable);\r\n    if (throwable instanceof IOException) {\r\n        throw new UncheckedIOException((IOException) throwable);\r\n    }\r\n    throw new UndeclaredThrowableException(throwable);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Throwable\n  Objects.requireNonNull(r0, \"throwable\")\n  ExceptionUtils.throwUnchecked(r0)\n  $z0 \u003d IOException\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d UncheckedIOException\n  $r3 \u003d IOException) r0\n  new UncheckedIOException($r3)\n  throw $r2\n}",
      "B2 {\n  $r1 \u003d UndeclaredThrowableException\n  new UndeclaredThrowableException(r0)\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.function.Failable",
    "methodName": "tryWithResources",
    "signature": "void tryWithResources(org.apache.commons.lang3.function.FailableRunnable,org.apache.commons.lang3.function.FailableConsumer,org.apache.commons.lang3.function.FailableRunnable[])",
    "visibility": "public",
    "body": "{\r\n    final FailableConsumer\u003cThrowable, ? extends Throwable\u003e actualErrorHandler;\r\n    if (errorHandler \u003d\u003d null) {\r\n        actualErrorHandler \u003d Failable::rethrow;\r\n    } else {\r\n        actualErrorHandler \u003d errorHandler;\r\n    }\r\n    Streams.of(resources).forEach(r -\u003e Objects.requireNonNull(r, \"runnable\"));\r\n    Throwable th \u003d null;\r\n    try {\r\n        action.run();\r\n    } catch (final Throwable t) {\r\n        th \u003d t;\r\n    }\r\n    if (resources !\u003d null) {\r\n        for (final FailableRunnable\u003c?\u003e runnable : resources) {\r\n            try {\r\n                runnable.run();\r\n            } catch (final Throwable t) {\r\n                if (th \u003d\u003d null) {\r\n                    th \u003d t;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (th !\u003d null) {\r\n        try {\r\n            actualErrorHandler.accept(th);\r\n        } catch (final Throwable t) {\r\n            throw rethrow(t);\r\n        }\r\n    }\r\n}",
    "nodes": 16,
    "edges": 19,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B5 : If(r1 \u003d\u003d null) → B6 | else → B12",
      "B7 : If(i1 \u003e\u003d i0) → B8 | else → B12",
      "B9 : If(r11 !\u003d null) → B10 | else → B11",
      "B12 : If(r11 \u003d\u003d null) → B13 | else → B15"
    ],
    "blockList": [
      "B0 {\n  FailableRunnable\n  FailableConsumer\n  FailableRunnable[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r10 \u003d Failable$rethrow__110.bootstrap$()\n  goto B3\n}",
      "B2 {\n  r10 \u003d r0\n}",
      "B3 {\n  $r3 \u003d Streams.of(r1)\n  $r2 \u003d Failable$lambda_tryWithResources_19__109.bootstrap$()\n  $r3.forEach($r2)\n  r11 \u003d null\n  r4.run()\n  goto B5\n}",
      "B4 {\n  $r9 :\u003d @caughtexception\n  r11 \u003d $r9\n}",
      "B5 {\n  if (r1 \u003d\u003d null) goto B6 else B12\n}",
      "B6 {\n  i0 \u003d lengthof r1\n  i1 \u003d 0\n}",
      "B7 {\n  if (i1 \u003e\u003d i0) goto B8 else B12\n}",
      "B8 {\n  r5 \u003d r1[i1]\n  r5.run()\n  goto B11\n}",
      "B9 {\n  $r8 :\u003d @caughtexception\n  if (r11 !\u003d null) goto B10 else B11\n}",
      "B10 {\n  r11 \u003d $r8\n}",
      "B11 {\n  i1 \u003d i1 + 1\n  goto B7\n}",
      "B12 {\n  if (r11 \u003d\u003d null) goto B13 else B15\n}",
      "B13 {\n  r10.accept(r11)\n  goto B15\n}",
      "B14 {\n  $r6 :\u003d @caughtexception\n  $r7 \u003d Failable.rethrow($r6)\n  throw $r7\n}",
      "B15 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B12",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B7",
      "B12 --\u003e B13",
      "B12 --\u003e B15",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Failable#rethrow(...1)",
        "body": "{\r\n    Objects.requireNonNull(throwable, \"throwable\");\r\n    ExceptionUtils.throwUnchecked(throwable);\r\n    if (throwable instanceof IOException) {\r\n        throw new UncheckedIOException((IOException) throwable);\r\n    }\r\n    throw new UndeclaredThrowableException(throwable);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.function.Functions",
    "methodName": "apply",
    "signature": "java.lang.Object apply(java.util.function.Function,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Function\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0.apply(r1)\n  goto B3\n}",
      "B2 {\n  $r2 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.function.Suppliers",
    "methodName": "get",
    "signature": "java.lang.Object get(java.util.function.Supplier)",
    "visibility": "public",
    "body": "{\r\n    return supplier \u003d\u003d null ? null : supplier.get();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Supplier\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d null\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0.get()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Functions",
    "methodName": "rethrow",
    "signature": "java.lang.RuntimeException rethrow(java.lang.Throwable)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(throwable, \"throwable\");\r\n    ExceptionUtils.throwUnchecked(throwable);\r\n    if (throwable instanceof IOException) {\r\n        throw new UncheckedIOException((IOException) throwable);\r\n    }\r\n    throw new UndeclaredThrowableException(throwable);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Throwable\n  Objects.requireNonNull(r0, \"throwable\")\n  ExceptionUtils.throwUnchecked(r0)\n  $z0 \u003d IOException\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d UncheckedIOException\n  $r3 \u003d IOException) r0\n  new UncheckedIOException($r3)\n  throw $r2\n}",
      "B2 {\n  $r1 \u003d UndeclaredThrowableException\n  new UndeclaredThrowableException(r0)\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Functions",
    "methodName": "tryWithResources",
    "signature": "void tryWithResources(org.apache.commons.lang3.Functions$FailableRunnable,org.apache.commons.lang3.Functions$FailableConsumer,org.apache.commons.lang3.Functions$FailableRunnable[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Functions$FailableRunnable\n  Functions$FailableConsumer\n  Functions$FailableRunnable[]\n  $i0 \u003d lengthof r0\n  r1 \u003d FailableRunnable)[$i0]\n  $r2 \u003d Functions$lambda_tryWithResources_16__127.bootstrap$(r0)\n  Arrays.setAll(r1, $r2)\n  Objects.requireNonNull(r3)\n  $r5 \u003d Functions$run__128.bootstrap$(r3)\n  if (r4 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  Objects.requireNonNull(r4)\n  $r6 \u003d Functions$accept__129.bootstrap$(r4)\n  goto B3\n}",
      "B2 {\n  $r6 \u003d null\n}",
      "B3 {\n  Failable.tryWithResources($r5, $r6, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.JavaVersion",
    "methodName": "atLeast",
    "signature": "boolean atLeast(org.apache.commons.lang3.JavaVersion)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003c 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JavaVersion\n  JavaVersion\n  $f1 \u003d JavaVersion: float value\u003e\n  $f0 \u003d JavaVersion: float value\u003e\n  $b0 \u003d $f1 cmpl $f0\n  $i1 \u003d (int) $b0\n  if ($i1 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.JavaVersion",
    "methodName": "atMost",
    "signature": "boolean atMost(org.apache.commons.lang3.JavaVersion)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003e 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JavaVersion\n  JavaVersion\n  $f1 \u003d JavaVersion: float value\u003e\n  $f0 \u003d JavaVersion: float value\u003e\n  $b0 \u003d $f1 cmpg $f0\n  $i1 \u003d (int) $b0\n  if ($i1 \u003e 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.LocaleUtils",
    "methodName": "countriesByLanguage",
    "signature": "java.util.List countriesByLanguage(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (languageCode \u003d\u003d null) {\r\n        return Collections.emptyList();\r\n    }\r\n    return cCountriesByLanguage.computeIfAbsent(languageCode, lc -\u003e Collections.unmodifiableList(availableLocaleList(locale -\u003e languageCode.equals(locale.getLanguage()) \u0026\u0026 !locale.getCountry().isEmpty() \u0026\u0026 locale.getVariant().isEmpty())));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d Collections.emptyList()\n  return\n}",
      "B2 {\n  $r1 \u003d ConcurrentMap cCountriesByLanguage\u003e\n  $r2 \u003d LocaleUtils$lambda_countriesByLanguage_1__130.bootstrap$(r0)\n  $r3 \u003d $r1.computeIfAbsent(r0, $r2)\n  $r4 \u003d List) $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "LocaleUtils#availableLocaleList(...1)",
        "body": "{\r\n    return availableLocaleList().stream().filter(predicate).collect(Collectors.toList());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.LocaleUtils",
    "methodName": "isLanguageUndetermined",
    "signature": "boolean isLanguageUndetermined(java.util.Locale)",
    "visibility": "public",
    "body": "{\r\n    return locale \u003d\u003d null || UNDETERMINED.equals(locale.toLanguageTag());\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Locale\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d \"und\"\n  $r1 \u003d r0.toLanguageTag()\n  $z0 \u003d $r2.equals($r1)\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.LocaleUtils",
    "methodName": "languagesByCountry",
    "signature": "java.util.List languagesByCountry(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (countryCode \u003d\u003d null) {\r\n        return Collections.emptyList();\r\n    }\r\n    return cLanguagesByCountry.computeIfAbsent(countryCode, k -\u003e Collections.unmodifiableList(availableLocaleList(locale -\u003e countryCode.equals(locale.getCountry()) \u0026\u0026 locale.getVariant().isEmpty())));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d Collections.emptyList()\n  return\n}",
      "B2 {\n  $r1 \u003d ConcurrentMap cLanguagesByCountry\u003e\n  $r2 \u003d LocaleUtils$lambda_languagesByCountry_3__131.bootstrap$(r0)\n  $r3 \u003d $r1.computeIfAbsent(r0, $r2)\n  $r4 \u003d List) $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "LocaleUtils#availableLocaleList(...1)",
        "body": "{\r\n    return availableLocaleList().stream().filter(predicate).collect(Collectors.toList());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.LocaleUtils",
    "methodName": "localeLookupList",
    "signature": "java.util.List localeLookupList(java.util.Locale,java.util.Locale)",
    "visibility": "public",
    "body": "{\r\n    final List\u003cLocale\u003e list \u003d new ArrayList\u003c\u003e(4);\r\n    if (locale !\u003d null) {\r\n        list.add(locale);\r\n        if (!locale.getVariant().isEmpty()) {\r\n            list.add(new Locale(locale.getLanguage(), locale.getCountry()));\r\n        }\r\n        if (!locale.getCountry().isEmpty()) {\r\n            list.add(new Locale(locale.getLanguage(), StringUtils.EMPTY));\r\n        }\r\n        if (!list.contains(defaultLocale)) {\r\n            list.add(defaultLocale);\r\n        }\r\n    }\r\n    return Collections.unmodifiableList(list);\r\n}",
    "nodes": 8,
    "edges": 11,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B7",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3",
      "B3 : If($z1 !\u003d 0) → B4 | else → B5",
      "B5 : If($z2 !\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Locale\n  Locale\n  $r0 \u003d ArrayList\n  new ArrayList(4)\n  if (r1 \u003d\u003d null) goto B1 else B7\n}",
      "B1 {\n  $r0.add(r1)\n  $r2 \u003d r1.getVariant()\n  $z0 \u003d $r2.isEmpty()\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d Locale\n  $r9 \u003d r1.getLanguage()\n  $r8 \u003d r1.getCountry()\n  new Locale($r9, $r8)\n  $r0.add($r7)\n}",
      "B3 {\n  $r3 \u003d r1.getCountry()\n  $z1 \u003d $r3.isEmpty()\n  if ($z1 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r5 \u003d Locale\n  $r6 \u003d r1.getLanguage()\n  new Locale($r6, \"\")\n  $r0.add($r5)\n}",
      "B5 {\n  $z2 \u003d $r0.contains(r4)\n  if ($z2 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $r0.add(r4)\n}",
      "B7 {\n  $r10 \u003d Collections.unmodifiableList($r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B7",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.LocaleUtils",
    "methodName": "toLocale",
    "signature": "java.util.Locale toLocale(java.util.Locale)",
    "visibility": "public",
    "body": "{\r\n    return locale !\u003d null ? locale : Locale.getDefault();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Locale\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r1 \u003d Locale.getDefault()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.LocaleUtils",
    "methodName": "toLocale",
    "signature": "java.util.Locale toLocale(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        // TODO Should this return the default locale?\r\n        return null;\r\n    }\r\n    if (str.isEmpty()) {\r\n        // LANG-941 - JDK 8 introduced an empty locale where all fields are blank\r\n        return new Locale(StringUtils.EMPTY, StringUtils.EMPTY);\r\n    }\r\n    if (str.contains(\"#\")) {\r\n        // LANG-879 - Cannot handle Java 7 script \u0026 extensions\r\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\r\n    }\r\n    final int len \u003d str.length();\r\n    if (len \u003c 2) {\r\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\r\n    }\r\n    final char ch0 \u003d str.charAt(0);\r\n    if (ch0 \u003d\u003d UNDERSCORE || ch0 \u003d\u003d DASH) {\r\n        if (len \u003c 3) {\r\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\r\n        }\r\n        final char ch1 \u003d str.charAt(1);\r\n        final char ch2 \u003d str.charAt(2);\r\n        if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\r\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\r\n        }\r\n        if (len \u003d\u003d 3) {\r\n            return new Locale(StringUtils.EMPTY, str.substring(1, 3));\r\n        }\r\n        if (len \u003c 5) {\r\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\r\n        }\r\n        if (str.charAt(3) !\u003d ch0) {\r\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\r\n        }\r\n        return new Locale(StringUtils.EMPTY, str.substring(1, 3), str.substring(4));\r\n    }\r\n    return parseLocale(str);\r\n}",
    "nodes": 23,
    "edges": 24,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6",
      "B6 : If(i0 \u003e\u003d 2) → B7 | else → B8",
      "B8 : If($i5 \u003d\u003d 95) → B9 | else → B10",
      "B9 : If($i6 !\u003d 45) → B10 | else → B22",
      "B10 : If(i0 \u003e\u003d 3) → B11 | else → B12",
      "B12 : If($z2 \u003d\u003d false) → B13 | else → B14",
      "B13 : If($z3 !\u003d 0) → B14 | else → B15",
      "B15 : If(i0 !\u003d 3) → B16 | else → B17",
      "B17 : If(i0 \u003e\u003d 5) → B18 | else → B19",
      "B19 : If($i7 \u003d\u003d $i8) → B20 | else → B21"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r38 \u003d Locale\n  new Locale(\"\", \"\")\n  return\n}",
      "B4 {\n  $z1 \u003d r0.contains(\"#\")\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r40 \u003d IllegalArgumentException\n  $r39 \u003d StringBuilder\n  new StringBuilder()\n  $r34 \u003d $r39.append(\"Invalid locale format: \")\n  $r35 \u003d $r34.append(r0)\n  $r36 \u003d $r35.toString()\n  new IllegalArgumentException($r36)\n  throw $r40\n}",
      "B6 {\n  i0 \u003d r0.length()\n  if (i0 \u003e\u003d 2) goto B7 else B8\n}",
      "B7 {\n  $r42 \u003d IllegalArgumentException\n  $r41 \u003d StringBuilder\n  new StringBuilder()\n  $r29 \u003d $r41.append(\"Invalid locale format: \")\n  $r30 \u003d $r29.append(r0)\n  $r31 \u003d $r30.toString()\n  new IllegalArgumentException($r31)\n  throw $r42\n}",
      "B8 {\n  c1 \u003d r0.charAt(0)\n  $i5 \u003d (int) c1\n  if ($i5 \u003d\u003d 95) goto B9 else B10\n}",
      "B9 {\n  $i6 \u003d (int) c1\n  if ($i6 !\u003d 45) goto B10 else B22\n}",
      "B10 {\n  if (i0 \u003e\u003d 3) goto B11 else B12\n}",
      "B11 {\n  $r44 \u003d IllegalArgumentException\n  $r43 \u003d StringBuilder\n  new StringBuilder()\n  $r23 \u003d $r43.append(\"Invalid locale format: \")\n  $r24 \u003d $r23.append(r0)\n  $r25 \u003d $r24.toString()\n  new IllegalArgumentException($r25)\n  throw $r44\n}",
      "B12 {\n  c2 \u003d r0.charAt(1)\n  c3 \u003d r0.charAt(2)\n  $z2 \u003d Character.isUpperCase(c2)\n  if ($z2 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  $z3 \u003d Character.isUpperCase(c3)\n  if ($z3 !\u003d 0) goto B14 else B15\n}",
      "B14 {\n  $r46 \u003d IllegalArgumentException\n  $r45 \u003d StringBuilder\n  new StringBuilder()\n  $r3 \u003d $r45.append(\"Invalid locale format: \")\n  $r4 \u003d $r3.append(r0)\n  $r5 \u003d $r4.toString()\n  new IllegalArgumentException($r5)\n  throw $r46\n}",
      "B15 {\n  if (i0 !\u003d 3) goto B16 else B17\n}",
      "B16 {\n  $r47 \u003d Locale\n  $r20 \u003d r0.substring(1, 3)\n  new Locale(\"\", $r20)\n  return\n}",
      "B17 {\n  if (i0 \u003e\u003d 5) goto B18 else B19\n}",
      "B18 {\n  $r49 \u003d IllegalArgumentException\n  $r48 \u003d StringBuilder\n  new StringBuilder()\n  $r16 \u003d $r48.append(\"Invalid locale format: \")\n  $r17 \u003d $r16.append(r0)\n  $r18 \u003d $r17.toString()\n  new IllegalArgumentException($r18)\n  throw $r49\n}",
      "B19 {\n  $c4 \u003d r0.charAt(3)\n  $i7 \u003d (int) $c4\n  $i8 \u003d (int) c1\n  if ($i7 \u003d\u003d $i8) goto B20 else B21\n}",
      "B20 {\n  $r51 \u003d IllegalArgumentException\n  $r50 \u003d StringBuilder\n  new StringBuilder()\n  $r11 \u003d $r50.append(\"Invalid locale format: \")\n  $r12 \u003d $r11.append(r0)\n  $r13 \u003d $r12.toString()\n  new IllegalArgumentException($r13)\n  throw $r51\n}",
      "B21 {\n  $r52 \u003d Locale\n  $r8 \u003d r0.substring(1, 3)\n  $r7 \u003d r0.substring(4)\n  new Locale(\"\", $r8, $r7)\n  return\n}",
      "B22 {\n  $r26 \u003d LocaleUtils.parseLocale(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B9 --\u003e B22",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e [EXIT]",
      "B21 --\u003e [EXIT]",
      "B22 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "LocaleUtils#parseLocale(...1)",
        "body": "{\r\n    if (isISO639LanguageCode(str)) {\r\n        return new Locale(str);\r\n    }\r\n    final int limit \u003d 3;\r\n    final char separator \u003d str.indexOf(UNDERSCORE) !\u003d -1 ? UNDERSCORE : DASH;\r\n    final String[] segments \u003d str.split(String.valueOf(separator), 3);\r\n    final String language \u003d segments[0];\r\n    if (segments.length \u003d\u003d 2) {\r\n        final String country \u003d segments[1];\r\n        if (isISO639LanguageCode(language) \u0026\u0026 isISO3166CountryCode(country) || isNumericAreaCode(country)) {\r\n            return new Locale(language, country);\r\n        }\r\n    } else if (segments.length \u003d\u003d limit) {\r\n        final String country \u003d segments[1];\r\n        final String variant \u003d segments[2];\r\n        if (isISO639LanguageCode(language) \u0026\u0026 (country.isEmpty() || isISO3166CountryCode(country) || isNumericAreaCode(country)) \u0026\u0026 !variant.isEmpty()) {\r\n            return new Locale(language, country, variant);\r\n        }\r\n    }\r\n    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.Fraction",
    "methodName": "getFraction",
    "signature": "org.apache.commons.lang3.math.Fraction getFraction(double)",
    "visibility": "public",
    "body": "{\r\n    final int sign \u003d value \u003c 0 ? -1 : 1;\r\n    value \u003d Math.abs(value);\r\n    if (value \u003e Integer.MAX_VALUE || Double.isNaN(value)) {\r\n        throw new ArithmeticException(\"The value must not be greater than Integer.MAX_VALUE or NaN\");\r\n    }\r\n    final int wholeNumber \u003d (int) value;\r\n    value -\u003d wholeNumber;\r\n    // the pre-previous\r\n    int numer0 \u003d 0;\r\n    // the pre-previous\r\n    int denom0 \u003d 1;\r\n    // the previous\r\n    int numer1 \u003d 1;\r\n    // the previous\r\n    int denom1 \u003d 0;\r\n    // the current, setup in calculation\r\n    int numer2;\r\n    // the current, setup in calculation\r\n    int denom2;\r\n    int a1 \u003d (int) value;\r\n    int a2;\r\n    double x1 \u003d 1;\r\n    double x2;\r\n    double y1 \u003d value - a1;\r\n    double y2;\r\n    double delta1, delta2 \u003d Double.MAX_VALUE;\r\n    double fraction;\r\n    int i \u003d 1;\r\n    do {\r\n        delta1 \u003d delta2;\r\n        a2 \u003d (int) (x1 / y1);\r\n        x2 \u003d y1;\r\n        y2 \u003d x1 - a2 * y1;\r\n        numer2 \u003d a1 * numer1 + numer0;\r\n        denom2 \u003d a1 * denom1 + denom0;\r\n        fraction \u003d (double) numer2 / (double) denom2;\r\n        delta2 \u003d Math.abs(value - fraction);\r\n        a1 \u003d a2;\r\n        x1 \u003d x2;\r\n        y1 \u003d y2;\r\n        numer0 \u003d numer1;\r\n        denom0 \u003d denom1;\r\n        numer1 \u003d numer2;\r\n        denom1 \u003d denom2;\r\n        i++;\r\n    } while (delta1 \u003e delta2 \u0026\u0026 denom2 \u003c\u003d 10000 \u0026\u0026 denom2 \u003e 0 \u0026\u0026 i \u003c 25);\r\n    if (i \u003d\u003d 25) {\r\n        throw new ArithmeticException(\"Unable to convert double to fraction\");\r\n    }\r\n    return getReducedFraction((numer0 + wholeNumber * denom0) * sign, denom0);\r\n}",
    "nodes": 14,
    "edges": 19,
    "cc": 7,
    "flowSummary": [
      "B0 : If($i20 \u003e\u003d 0) → B1 | else → B2",
      "B3 : If($i21 \u003e 0) → B4 | else → B5",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B6",
      "B7 : If($i22 \u003c\u003d 0) → B8 | else → B11",
      "B8 : If($i12 \u003e 10000) → B9 | else → B11",
      "B9 : If($i12 \u003c\u003d 0) → B10 | else → B11",
      "B10 : If(i19 \u003c 25) → B11 | else → B7",
      "B11 : If(i19 !\u003d 25) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  d13 :\u003d @parameter0: double\n  $b0 \u003d 0\n  $i20 \u003d (int) $b0\n  if ($i20 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $b13 \u003d -1\n  goto B3\n}",
      "B2 {\n  $b13 \u003d 1\n}",
      "B3 {\n  b1 \u003d $b13\n  $d12 \u003d Math.abs(d13)\n  $b2 \u003d 147483647E9\n  $i21 \u003d (int) $b2\n  if ($i21 \u003e 0) goto B4 else B5\n}",
      "B4 {\n  $z0 \u003d Double.isNaN($d12)\n  if ($z0 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r3 \u003d ArithmeticException\n  new ArithmeticException(\"The value must not be greater than Integer.MAX_VALUE or NaN\")\n  throw $r3\n}",
      "B6 {\n  i3 \u003d (int) $d12\n  $d0 \u003d (double) i3\n  d14 \u003d $d12 - $d0\n  i14 \u003d 0\n  i15 \u003d 1\n  i16 \u003d 1\n  i17 \u003d 0\n  i18 \u003d (int) d14\n  d15 \u003d 0\n  $d1 \u003d (double) i18\n  d16 \u003d d14 - $d1\n  d17 \u003d 7976931348623157E308\n  i19 \u003d 1\n}",
      "B7 {\n  d2 \u003d d17\n  $d3 \u003d d15 / d16\n  $i10 \u003d (int) $d3\n  $d4 \u003d (double) $i10\n  $d5 \u003d $d4 * d16\n  $d9 \u003d d15 - $d5\n  $i4 \u003d i18 * i16\n  $i11 \u003d $i4 + i14\n  $i5 \u003d i18 * i17\n  $i12 \u003d $i5 + i15\n  $d7 \u003d (double) $i11\n  $d6 \u003d (double) $i12\n  $d10 \u003d $d7 / $d6\n  $d8 \u003d d14 - $d10\n  $d11 \u003d Math.abs($d8)\n  d17 \u003d $d11\n  i18 \u003d $i10\n  d15 \u003d d16\n  d16 \u003d $d9\n  i14 \u003d i16\n  i15 \u003d i17\n  i16 \u003d $i11\n  i17 \u003d $i12\n  i19 \u003d i19 + 1\n  $b6 \u003d d2 cmpl $d11\n  $i22 \u003d (int) $b6\n  if ($i22 \u003c\u003d 0) goto B8 else B11\n}",
      "B8 {\n  if ($i12 \u003e 10000) goto B9 else B11\n}",
      "B9 {\n  if ($i12 \u003c\u003d 0) goto B10 else B11\n}",
      "B10 {\n  if (i19 \u003c 25) goto B11 else B7\n}",
      "B11 {\n  if (i19 !\u003d 25) goto B12 else B13\n}",
      "B12 {\n  $r4 \u003d ArithmeticException\n  new ArithmeticException(\"Unable to convert double to fraction\")\n  throw $r4\n}",
      "B13 {\n  $i7 \u003d i3 * i15\n  $i8 \u003d i14 + $i7\n  $i9 \u003d $i8 * b1\n  $r1 \u003d Fraction.getReducedFraction($i9, i15)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B10 --\u003e B7",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Fraction#getReducedFraction(...2)",
        "body": "{\r\n    if (denominator \u003d\u003d 0) {\r\n        throw new ArithmeticException(\"The denominator must not be zero\");\r\n    }\r\n    if (numerator \u003d\u003d 0) {\r\n        // normalize zero.\r\n        return ZERO;\r\n    }\r\n    // allow 2^k/-2^31 as a valid fraction (where k\u003e0)\r\n    if (denominator \u003d\u003d Integer.MIN_VALUE \u0026\u0026 (numerator \u0026 1) \u003d\u003d 0) {\r\n        numerator /\u003d 2;\r\n        denominator /\u003d 2;\r\n    }\r\n    if (denominator \u003c 0) {\r\n        if (numerator \u003d\u003d Integer.MIN_VALUE || denominator \u003d\u003d Integer.MIN_VALUE) {\r\n            throw new ArithmeticException(\"overflow: can\u0027t negate\");\r\n        }\r\n        numerator \u003d -numerator;\r\n        denominator \u003d -denominator;\r\n    }\r\n    // simplify fraction.\r\n    final int gcd \u003d greatestCommonDivisor(numerator, denominator);\r\n    numerator /\u003d gcd;\r\n    denominator /\u003d gcd;\r\n    return new Fraction(numerator, denominator);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.Fraction",
    "methodName": "getFraction",
    "signature": "org.apache.commons.lang3.math.Fraction getFraction(int,int)",
    "visibility": "public",
    "body": "{\r\n    if (denominator \u003d\u003d 0) {\r\n        throw new ArithmeticException(\"The denominator must not be zero\");\r\n    }\r\n    if (denominator \u003c 0) {\r\n        if (numerator \u003d\u003d Integer.MIN_VALUE || denominator \u003d\u003d Integer.MIN_VALUE) {\r\n            throw new ArithmeticException(\"overflow: can\u0027t negate\");\r\n        }\r\n        numerator \u003d -numerator;\r\n        denominator \u003d -denominator;\r\n    }\r\n    return new Fraction(numerator, denominator);\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i1 !\u003d 0) → B1 | else → B2",
      "B2 : If(i1 \u003e\u003d 0) → B3 | else → B7",
      "B3 : If(i0 \u003d\u003d -2147483648) → B4 | else → B5",
      "B4 : If(i1 !\u003d -2147483648) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  i1 :\u003d @parameter1: int\n  if (i1 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d ArithmeticException\n  new ArithmeticException(\"The denominator must not be zero\")\n  throw $r2\n}",
      "B2 {\n  if (i1 \u003e\u003d 0) goto B3 else B7\n}",
      "B3 {\n  if (i0 \u003d\u003d -2147483648) goto B4 else B5\n}",
      "B4 {\n  if (i1 !\u003d -2147483648) goto B5 else B6\n}",
      "B5 {\n  $r1 \u003d ArithmeticException\n  new ArithmeticException(\"overflow: can\\\u0027t negate\")\n  throw $r1\n}",
      "B6 {\n  i0 \u003d neg i0\n  i1 \u003d neg i1\n}",
      "B7 {\n  $r0 \u003d Fraction\n  new Fraction(i0, i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.Fraction",
    "methodName": "getFraction",
    "signature": "org.apache.commons.lang3.math.Fraction getFraction(int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (denominator \u003d\u003d 0) {\r\n        throw new ArithmeticException(\"The denominator must not be zero\");\r\n    }\r\n    if (denominator \u003c 0) {\r\n        throw new ArithmeticException(\"The denominator must not be negative\");\r\n    }\r\n    if (numerator \u003c 0) {\r\n        throw new ArithmeticException(\"The numerator must not be negative\");\r\n    }\r\n    final long numeratorValue;\r\n    if (whole \u003c 0) {\r\n        numeratorValue \u003d whole * (long) denominator - numerator;\r\n    } else {\r\n        numeratorValue \u003d whole * (long) denominator + numerator;\r\n    }\r\n    if (numeratorValue \u003c Integer.MIN_VALUE || numeratorValue \u003e Integer.MAX_VALUE) {\r\n        throw new ArithmeticException(\"Numerator too large to represent as an Integer.\");\r\n    }\r\n    return new Fraction((int) numeratorValue, denominator);\r\n}",
    "nodes": 13,
    "edges": 14,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 !\u003d 0) → B1 | else → B2",
      "B2 : If(i0 \u003e\u003d 0) → B3 | else → B4",
      "B4 : If(i1 \u003e\u003d 0) → B5 | else → B6",
      "B6 : If(i2 \u003e\u003d 0) → B7 | else → B8",
      "B9 : If($i15 \u003c 0) → B10 | else → B11",
      "B10 : If($i16 \u003c\u003d 0) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  i2 :\u003d @parameter0: int\n  i1 :\u003d @parameter1: int\n  i0 :\u003d @parameter2: int\n  if (i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d ArithmeticException\n  new ArithmeticException(\"The denominator must not be zero\")\n  throw $r5\n}",
      "B2 {\n  if (i0 \u003e\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d ArithmeticException\n  new ArithmeticException(\"The denominator must not be negative\")\n  throw $r6\n}",
      "B4 {\n  if (i1 \u003e\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r7 \u003d ArithmeticException\n  new ArithmeticException(\"The numerator must not be negative\")\n  throw $r7\n}",
      "B6 {\n  if (i2 \u003e\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $l11 \u003d (long) i2\n  $l10 \u003d (long) i0\n  $l13 \u003d $l11 * $l10\n  $l12 \u003d (long) i1\n  l14 \u003d $l13 - $l12\n  goto B9\n}",
      "B8 {\n  $l4 \u003d (long) i2\n  $l3 \u003d (long) i0\n  $l6 \u003d $l4 * $l3\n  $l5 \u003d (long) i1\n  l14 \u003d $l6 + $l5\n}",
      "B9 {\n  $b7 \u003d l14 cmp -2147483648L\n  $i15 \u003d (int) $b7\n  if ($i15 \u003c 0) goto B10 else B11\n}",
      "B10 {\n  $b8 \u003d l14 cmp 2147483647L\n  $i16 \u003d (int) $b8\n  if ($i16 \u003c\u003d 0) goto B11 else B12\n}",
      "B11 {\n  $r8 \u003d ArithmeticException\n  new ArithmeticException(\"Numerator too large to represent as an Integer.\")\n  throw $r8\n}",
      "B12 {\n  $r9 \u003d Fraction\n  $i9 \u003d (int) l14\n  new Fraction($i9, i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.Fraction",
    "methodName": "getFraction",
    "signature": "org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(str, \"str\");\r\n    // parse double format\r\n    int pos \u003d str.indexOf(\u0027.\u0027);\r\n    if (pos \u003e\u003d 0) {\r\n        return getFraction(Double.parseDouble(str));\r\n    }\r\n    // parse X Y/Z format\r\n    pos \u003d str.indexOf(\u0027 \u0027);\r\n    if (pos \u003e 0) {\r\n        final int whole \u003d Integer.parseInt(str.substring(0, pos));\r\n        str \u003d str.substring(pos + 1);\r\n        pos \u003d str.indexOf(\u0027/\u0027);\r\n        if (pos \u003c 0) {\r\n            throw new NumberFormatException(\"The fraction could not be parsed as the format X Y/Z\");\r\n        }\r\n        final int numer \u003d Integer.parseInt(str.substring(0, pos));\r\n        final int denom \u003d Integer.parseInt(str.substring(pos + 1));\r\n        return getFraction(whole, numer, denom);\r\n    }\r\n    // parse Y/Z format\r\n    pos \u003d str.indexOf(\u0027/\u0027);\r\n    if (pos \u003c 0) {\r\n        // simple whole number\r\n        return getFraction(Integer.parseInt(str), 1);\r\n    }\r\n    final int numer \u003d Integer.parseInt(str.substring(0, pos));\r\n    final int denom \u003d Integer.parseInt(str.substring(pos + 1));\r\n    return getFraction(numer, denom);\r\n}",
    "nodes": 9,
    "edges": 8,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i5 \u003c 0) → B1 | else → B2",
      "B2 : If(i6 \u003c\u003d 0) → B3 | else → B6",
      "B3 : If(i8 \u003e\u003d 0) → B4 | else → B5",
      "B6 : If(i10 \u003e\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  String\n  Objects.requireNonNull(r10, \"str\")\n  i5 \u003d r10.indexOf(46)\n  if (i5 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $d0 \u003d Double.parseDouble(r10)\n  $r9 \u003d Fraction.getFraction($d0)\n  return\n}",
      "B2 {\n  i6 \u003d r10.indexOf(32)\n  if (i6 \u003c\u003d 0) goto B3 else B6\n}",
      "B3 {\n  $r4 \u003d r10.substring(0, i6)\n  i7 \u003d Integer.parseInt($r4)\n  $i2 \u003d i6 + 1\n  r11 \u003d r10.substring($i2)\n  i8 \u003d r11.indexOf(47)\n  if (i8 \u003e\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r8 \u003d NumberFormatException\n  new NumberFormatException(\"The fraction could not be parsed as the format X Y/Z\")\n  throw $r8\n}",
      "B5 {\n  $r5 \u003d r11.substring(0, i8)\n  i9 \u003d Integer.parseInt($r5)\n  $i3 \u003d i8 + 1\n  $r6 \u003d r11.substring($i3)\n  i4 \u003d Integer.parseInt($r6)\n  $r7 \u003d Fraction.getFraction(i7, i9, i4)\n  return\n}",
      "B6 {\n  i10 \u003d r10.indexOf(47)\n  if (i10 \u003e\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $i1 \u003d Integer.parseInt(r10)\n  $r3 \u003d Fraction.getFraction($i1, 1)\n  return\n}",
      "B8 {\n  $r0 \u003d r10.substring(0, i10)\n  i11 \u003d Integer.parseInt($r0)\n  $i0 \u003d i10 + 1\n  $r1 \u003d r10.substring($i0)\n  i12 \u003d Integer.parseInt($r1)\n  $r2 \u003d Fraction.getFraction(i11, i12)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Fraction#getFraction(...3)",
        "body": "{\r\n    if (denominator \u003d\u003d 0) {\r\n        throw new ArithmeticException(\"The denominator must not be zero\");\r\n    }\r\n    if (denominator \u003c 0) {\r\n        throw new ArithmeticException(\"The denominator must not be negative\");\r\n    }\r\n    if (numerator \u003c 0) {\r\n        throw new ArithmeticException(\"The numerator must not be negative\");\r\n    }\r\n    final long numeratorValue;\r\n    if (whole \u003c 0) {\r\n        numeratorValue \u003d whole * (long) denominator - numerator;\r\n    } else {\r\n        numeratorValue \u003d whole * (long) denominator + numerator;\r\n    }\r\n    if (numeratorValue \u003c Integer.MIN_VALUE || numeratorValue \u003e Integer.MAX_VALUE) {\r\n        throw new ArithmeticException(\"Numerator too large to represent as an Integer.\");\r\n    }\r\n    return new Fraction((int) numeratorValue, denominator);\r\n}"
      },
      {
        "name": "Fraction#getFraction(...2)",
        "body": "{\r\n    if (denominator \u003d\u003d 0) {\r\n        throw new ArithmeticException(\"The denominator must not be zero\");\r\n    }\r\n    if (denominator \u003c 0) {\r\n        if (numerator \u003d\u003d Integer.MIN_VALUE || denominator \u003d\u003d Integer.MIN_VALUE) {\r\n            throw new ArithmeticException(\"overflow: can\u0027t negate\");\r\n        }\r\n        numerator \u003d -numerator;\r\n        denominator \u003d -denominator;\r\n    }\r\n    return new Fraction(numerator, denominator);\r\n}"
      },
      {
        "name": "Fraction#getFraction(...1)",
        "body": "{\r\n    final int sign \u003d value \u003c 0 ? -1 : 1;\r\n    value \u003d Math.abs(value);\r\n    if (value \u003e Integer.MAX_VALUE || Double.isNaN(value)) {\r\n        throw new ArithmeticException(\"The value must not be greater than Integer.MAX_VALUE or NaN\");\r\n    }\r\n    final int wholeNumber \u003d (int) value;\r\n    value -\u003d wholeNumber;\r\n    // the pre-previous\r\n    int numer0 \u003d 0;\r\n    // the pre-previous\r\n    int denom0 \u003d 1;\r\n    // the previous\r\n    int numer1 \u003d 1;\r\n    // the previous\r\n    int denom1 \u003d 0;\r\n    // the current, setup in calculation\r\n    int numer2;\r\n    // the current, setup in calculation\r\n    int denom2;\r\n    int a1 \u003d (int) value;\r\n    int a2;\r\n    double x1 \u003d 1;\r\n    double x2;\r\n    double y1 \u003d value - a1;\r\n    double y2;\r\n    double delta1, delta2 \u003d Double.MAX_VALUE;\r\n    double fraction;\r\n    int i \u003d 1;\r\n    do {\r\n        delta1 \u003d delta2;\r\n        a2 \u003d (int) (x1 / y1);\r\n        x2 \u003d y1;\r\n        y2 \u003d x1 - a2 * y1;\r\n        numer2 \u003d a1 * numer1 + numer0;\r\n        denom2 \u003d a1 * denom1 + denom0;\r\n        fraction \u003d (double) numer2 / (double) denom2;\r\n        delta2 \u003d Math.abs(value - fraction);\r\n        a1 \u003d a2;\r\n        x1 \u003d x2;\r\n        y1 \u003d y2;\r\n        numer0 \u003d numer1;\r\n        denom0 \u003d denom1;\r\n        numer1 \u003d numer2;\r\n        denom1 \u003d denom2;\r\n        i++;\r\n    } while (delta1 \u003e delta2 \u0026\u0026 denom2 \u003c\u003d 10000 \u0026\u0026 denom2 \u003e 0 \u0026\u0026 i \u003c 25);\r\n    if (i \u003d\u003d 25) {\r\n        throw new ArithmeticException(\"Unable to convert double to fraction\");\r\n    }\r\n    return getReducedFraction((numer0 + wholeNumber * denom0) * sign, denom0);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.Fraction",
    "methodName": "getReducedFraction",
    "signature": "org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)",
    "visibility": "public",
    "body": "{\r\n    if (denominator \u003d\u003d 0) {\r\n        throw new ArithmeticException(\"The denominator must not be zero\");\r\n    }\r\n    if (numerator \u003d\u003d 0) {\r\n        // normalize zero.\r\n        return ZERO;\r\n    }\r\n    // allow 2^k/-2^31 as a valid fraction (where k\u003e0)\r\n    if (denominator \u003d\u003d Integer.MIN_VALUE \u0026\u0026 (numerator \u0026 1) \u003d\u003d 0) {\r\n        numerator /\u003d 2;\r\n        denominator /\u003d 2;\r\n    }\r\n    if (denominator \u003c 0) {\r\n        if (numerator \u003d\u003d Integer.MIN_VALUE || denominator \u003d\u003d Integer.MIN_VALUE) {\r\n            throw new ArithmeticException(\"overflow: can\u0027t negate\");\r\n        }\r\n        numerator \u003d -numerator;\r\n        denominator \u003d -denominator;\r\n    }\r\n    // simplify fraction.\r\n    final int gcd \u003d greatestCommonDivisor(numerator, denominator);\r\n    numerator /\u003d gcd;\r\n    denominator /\u003d gcd;\r\n    return new Fraction(numerator, denominator);\r\n}",
    "nodes": 13,
    "edges": 16,
    "cc": 5,
    "flowSummary": [
      "B0 : If(i5 !\u003d 0) → B1 | else → B2",
      "B2 : If(i4 !\u003d 0) → B3 | else → B4",
      "B4 : If(i5 !\u003d -2147483648) → B5 | else → B7",
      "B5 : If($i3 !\u003d 0) → B6 | else → B7",
      "B7 : If(i5 \u003e\u003d 0) → B8 | else → B12",
      "B8 : If(i4 \u003d\u003d -2147483648) → B9 | else → B10",
      "B9 : If(i5 !\u003d -2147483648) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  i4 :\u003d @parameter0: int\n  i5 :\u003d @parameter1: int\n  if (i5 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d ArithmeticException\n  new ArithmeticException(\"The denominator must not be zero\")\n  throw $r3\n}",
      "B2 {\n  if (i4 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d Fraction ZERO\u003e\n  return\n}",
      "B4 {\n  if (i5 !\u003d -2147483648) goto B5 else B7\n}",
      "B5 {\n  $i3 \u003d i4 \u0026 1\n  if ($i3 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  i4 \u003d i4 / 2\n  i5 \u003d i5 / 2\n}",
      "B7 {\n  if (i5 \u003e\u003d 0) goto B8 else B12\n}",
      "B8 {\n  if (i4 \u003d\u003d -2147483648) goto B9 else B10\n}",
      "B9 {\n  if (i5 !\u003d -2147483648) goto B10 else B11\n}",
      "B10 {\n  $r1 \u003d ArithmeticException\n  new ArithmeticException(\"overflow: can\\\u0027t negate\")\n  throw $r1\n}",
      "B11 {\n  i4 \u003d neg i4\n  i5 \u003d neg i5\n}",
      "B12 {\n  $i0 \u003d Fraction.greatestCommonDivisor(i4, i5)\n  $i1 \u003d i4 / $i0\n  $i2 \u003d i5 / $i0\n  $r0 \u003d Fraction\n  new Fraction($i1, $i2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Fraction#greatestCommonDivisor(...2)",
        "body": "{\r\n    // From Commons Math:\r\n    if (u \u003d\u003d 0 || v \u003d\u003d 0) {\r\n        if (u \u003d\u003d Integer.MIN_VALUE || v \u003d\u003d Integer.MIN_VALUE) {\r\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\r\n        }\r\n        return Math.abs(u) + Math.abs(v);\r\n    }\r\n    // if either operand is abs 1, return 1:\r\n    if (Math.abs(u) \u003d\u003d 1 || Math.abs(v) \u003d\u003d 1) {\r\n        return 1;\r\n    }\r\n    // keep u and v negative, as negative integers range down to\r\n    // -2^31, while positive numbers can only be as large as 2^31-1\r\n    // (i.e. we can\u0027t necessarily negate a negative number without\r\n    // overflow)\r\n    if (u \u003e 0) {\r\n        u \u003d -u;\r\n    }\r\n    // make u negative\r\n    if (v \u003e 0) {\r\n        v \u003d -v;\r\n    }\r\n    // make v negative\r\n    // B1. [Find power of 2]\r\n    int k \u003d 0;\r\n    while ((u \u0026 1) \u003d\u003d 0 \u0026\u0026 (v \u0026 1) \u003d\u003d 0 \u0026\u0026 k \u003c 31) {\r\n        // while u and v are both even...\r\n        u /\u003d 2;\r\n        v /\u003d 2;\r\n        // cast out twos.\r\n        k++;\r\n    }\r\n    if (k \u003d\u003d 31) {\r\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\r\n    }\r\n    // B2. Initialize: u and v have been divided by 2^k and at least\r\n    // one is odd.\r\n    int t \u003d (u \u0026 1) \u003d\u003d 1 ? v : -(u / 2);\r\n    // t negative: u was odd, v may be even (t replaces v)\r\n    // t positive: u was even, v is odd (t replaces u)\r\n    do {\r\n        /* assert u\u003c0 \u0026\u0026 v\u003c0; */\r\n        // B4/B3: cast out twos from t.\r\n        while ((t \u0026 1) \u003d\u003d 0) {\r\n            // while t is even.\r\n            // cast out twos\r\n            t /\u003d 2;\r\n        }\r\n        // B5 [reset max(u,v)]\r\n        if (t \u003e 0) {\r\n            u \u003d -t;\r\n        } else {\r\n            v \u003d t;\r\n        }\r\n        // B6/B3. at this point both u and v should be odd.\r\n        t \u003d (v - u) / 2;\r\n        // |u| larger: t positive (replace u)\r\n        // |v| larger: t negative (replace v)\r\n    } while (t !\u003d 0);\r\n    // gcd is u*2^k\r\n    return -u * (1 \u003c\u003c k);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.Fraction",
    "methodName": "abs",
    "signature": "org.apache.commons.lang3.math.Fraction abs()",
    "visibility": "public",
    "body": "{\r\n    if (numerator \u003e\u003d 0) {\r\n        return this;\r\n    }\r\n    return negate();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 \u003c 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Fraction\n  $i0 \u003d Fraction: int numerator\u003e\n  if ($i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.negate()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Fraction#negate(...0)",
        "body": "{\r\n    // the positive range is one smaller than the negative range of an int.\r\n    if (numerator \u003d\u003d Integer.MIN_VALUE) {\r\n        throw new ArithmeticException(\"overflow: too large to negate\");\r\n    }\r\n    return new Fraction(-numerator, denominator);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.Fraction",
    "methodName": "compareTo",
    "signature": "int compareTo(org.apache.commons.lang3.math.Fraction)",
    "visibility": "public",
    "body": "{\r\n    if (this \u003d\u003d other) {\r\n        return 0;\r\n    }\r\n    if (numerator \u003d\u003d other.numerator \u0026\u0026 denominator \u003d\u003d other.denominator) {\r\n        return 0;\r\n    }\r\n    // otherwise see which is less\r\n    final long first \u003d (long) numerator * (long) other.denominator;\r\n    final long second \u003d (long) other.numerator * (long) denominator;\r\n    return Long.compare(first, second);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($i1 !\u003d $i0) → B3 | else → B5",
      "B3 : If($i12 !\u003d $i11) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Fraction\n  Fraction\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d Fraction: int numerator\u003e\n  $i0 \u003d Fraction: int numerator\u003e\n  if ($i1 !\u003d $i0) goto B3 else B5\n}",
      "B3 {\n  $i12 \u003d Fraction: int denominator\u003e\n  $i11 \u003d Fraction: int denominator\u003e\n  if ($i12 !\u003d $i11) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $i2 \u003d Fraction: int numerator\u003e\n  $l5 \u003d (long) $i2\n  $i3 \u003d Fraction: int denominator\u003e\n  $l4 \u003d (long) $i3\n  $l13 \u003d $l5 * $l4\n  $i6 \u003d Fraction: int numerator\u003e\n  $l9 \u003d (long) $i6\n  $i7 \u003d Fraction: int denominator\u003e\n  $l8 \u003d (long) $i7\n  $l14 \u003d $l9 * $l8\n  $i10 \u003d Long.compare($l13, $l14)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.Fraction",
    "methodName": "divideBy",
    "signature": "org.apache.commons.lang3.math.Fraction divideBy(org.apache.commons.lang3.math.Fraction)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(fraction, \"fraction\");\r\n    if (fraction.numerator \u003d\u003d 0) {\r\n        throw new ArithmeticException(\"The fraction to divide by must not be zero\");\r\n    }\r\n    return multiplyBy(fraction.invert());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Fraction\n  Fraction\n  Objects.requireNonNull(r0, \"fraction\")\n  $i0 \u003d Fraction: int numerator\u003e\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d ArithmeticException\n  new ArithmeticException(\"The fraction to divide by must not be zero\")\n  throw $r4\n}",
      "B2 {\n  $r2 \u003d r0.invert()\n  $r3 \u003d r1.multiplyBy($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Fraction#multiplyBy(...1)",
        "body": "{\r\n    Objects.requireNonNull(fraction, \"fraction\");\r\n    if (numerator \u003d\u003d 0 || fraction.numerator \u003d\u003d 0) {\r\n        return ZERO;\r\n    }\r\n    // knuth 4.5.1\r\n    // make sure we don\u0027t overflow unless the result *must* overflow.\r\n    final int d1 \u003d greatestCommonDivisor(numerator, fraction.denominator);\r\n    final int d2 \u003d greatestCommonDivisor(fraction.numerator, denominator);\r\n    return getReducedFraction(mulAndCheck(numerator / d1, fraction.numerator / d2), mulPosAndCheck(denominator / d2, fraction.denominator / d1));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.Fraction",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (!(obj instanceof Fraction)) {\r\n        return false;\r\n    }\r\n    final Fraction other \u003d (Fraction) obj;\r\n    return getNumerator() \u003d\u003d other.getNumerator() \u0026\u0026 getDenominator() \u003d\u003d other.getDenominator();\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($i1 !\u003d $i0) → B5 | else → B7",
      "B5 : If($i3 !\u003d $i2) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Fraction\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d Fraction\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d Fraction) r0\n  $i1 \u003d r1.getNumerator()\n  $i0 \u003d r2.getNumerator()\n  if ($i1 !\u003d $i0) goto B5 else B7\n}",
      "B5 {\n  $i3 \u003d r1.getDenominator()\n  $i2 \u003d r2.getDenominator()\n  if ($i3 !\u003d $i2) goto B6 else B7\n}",
      "B6 {\n  $z1 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z1 \u003d 0\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Fraction#getDenominator(...0)",
        "body": "{\r\n    return denominator;\r\n}"
      },
      {
        "name": "Fraction#getNumerator(...0)",
        "body": "{\r\n    return numerator;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.Fraction",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    if (hashCode \u003d\u003d 0) {\r\n        // hash code update should be atomic.\r\n        hashCode \u003d 37 * (37 * 17 + getNumerator()) + getDenominator();\r\n    }\r\n    return hashCode;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Fraction\n  $i0 \u003d Fraction: int hashCode\u003e\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $i2 \u003d r0.getNumerator()\n  $i3 \u003d 629 + $i2\n  $i5 \u003d 37 * $i3\n  $i4 \u003d r0.getDenominator()\n  $i6 \u003d $i5 + $i4\n  Fraction: int hashCode\u003e \u003d $i6\n}",
      "B2 {\n  $i1 \u003d Fraction: int hashCode\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Fraction#getDenominator(...0)",
        "body": "{\r\n    return denominator;\r\n}"
      },
      {
        "name": "Fraction#getNumerator(...0)",
        "body": "{\r\n    return numerator;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.Fraction",
    "methodName": "invert",
    "signature": "org.apache.commons.lang3.math.Fraction invert()",
    "visibility": "public",
    "body": "{\r\n    if (numerator \u003d\u003d 0) {\r\n        throw new ArithmeticException(\"Unable to invert zero.\");\r\n    }\r\n    if (numerator \u003d\u003d Integer.MIN_VALUE) {\r\n        throw new ArithmeticException(\"overflow: can\u0027t negate numerator\");\r\n    }\r\n    if (numerator \u003c 0) {\r\n        return new Fraction(-denominator, -numerator);\r\n    }\r\n    return new Fraction(denominator, numerator);\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B2 : If($i1 !\u003d -2147483648) → B3 | else → B4",
      "B4 : If($i2 \u003e\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Fraction\n  $i0 \u003d Fraction: int numerator\u003e\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d ArithmeticException\n  new ArithmeticException(\"Unable to invert zero.\")\n  throw $r4\n}",
      "B2 {\n  $i1 \u003d Fraction: int numerator\u003e\n  if ($i1 !\u003d -2147483648) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArithmeticException\n  new ArithmeticException(\"overflow: can\\\u0027t negate numerator\")\n  throw $r3\n}",
      "B4 {\n  $i2 \u003d Fraction: int numerator\u003e\n  if ($i2 \u003e\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r2 \u003d Fraction\n  $i5 \u003d Fraction: int denominator\u003e\n  $i8 \u003d neg $i5\n  $i6 \u003d Fraction: int numerator\u003e\n  $i7 \u003d neg $i6\n  new Fraction($i8, $i7)\n  return\n}",
      "B6 {\n  $r1 \u003d Fraction\n  $i4 \u003d Fraction: int denominator\u003e\n  $i3 \u003d Fraction: int numerator\u003e\n  new Fraction($i4, $i3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.Fraction",
    "methodName": "multiplyBy",
    "signature": "org.apache.commons.lang3.math.Fraction multiplyBy(org.apache.commons.lang3.math.Fraction)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(fraction, \"fraction\");\r\n    if (numerator \u003d\u003d 0 || fraction.numerator \u003d\u003d 0) {\r\n        return ZERO;\r\n    }\r\n    // knuth 4.5.1\r\n    // make sure we don\u0027t overflow unless the result *must* overflow.\r\n    final int d1 \u003d greatestCommonDivisor(numerator, fraction.denominator);\r\n    final int d2 \u003d greatestCommonDivisor(fraction.numerator, denominator);\r\n    return getReducedFraction(mulAndCheck(numerator / d1, fraction.numerator / d2), mulPosAndCheck(denominator / d2, fraction.denominator / d1));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2",
      "B1 : If($i1 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Fraction\n  Fraction\n  Objects.requireNonNull(r0, \"fraction\")\n  $i0 \u003d Fraction: int numerator\u003e\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d Fraction: int numerator\u003e\n  if ($i1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d Fraction ZERO\u003e\n  return\n}",
      "B3 {\n  $i3 \u003d Fraction: int numerator\u003e\n  $i2 \u003d Fraction: int denominator\u003e\n  i4 \u003d Fraction.greatestCommonDivisor($i3, $i2)\n  $i6 \u003d Fraction: int numerator\u003e\n  $i5 \u003d Fraction: int denominator\u003e\n  i7 \u003d Fraction.greatestCommonDivisor($i6, $i5)\n  $i8 \u003d Fraction: int numerator\u003e\n  $i11 \u003d $i8 / i4\n  $i9 \u003d Fraction: int numerator\u003e\n  $i10 \u003d $i9 / i7\n  $i17 \u003d Fraction.mulAndCheck($i11, $i10)\n  $i12 \u003d Fraction: int denominator\u003e\n  $i15 \u003d $i12 / i7\n  $i13 \u003d Fraction: int denominator\u003e\n  $i14 \u003d $i13 / i4\n  $i16 \u003d Fraction.mulPosAndCheck($i15, $i14)\n  $r3 \u003d Fraction.getReducedFraction($i17, $i16)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Fraction#getReducedFraction(...2)",
        "body": "{\r\n    if (denominator \u003d\u003d 0) {\r\n        throw new ArithmeticException(\"The denominator must not be zero\");\r\n    }\r\n    if (numerator \u003d\u003d 0) {\r\n        // normalize zero.\r\n        return ZERO;\r\n    }\r\n    // allow 2^k/-2^31 as a valid fraction (where k\u003e0)\r\n    if (denominator \u003d\u003d Integer.MIN_VALUE \u0026\u0026 (numerator \u0026 1) \u003d\u003d 0) {\r\n        numerator /\u003d 2;\r\n        denominator /\u003d 2;\r\n    }\r\n    if (denominator \u003c 0) {\r\n        if (numerator \u003d\u003d Integer.MIN_VALUE || denominator \u003d\u003d Integer.MIN_VALUE) {\r\n            throw new ArithmeticException(\"overflow: can\u0027t negate\");\r\n        }\r\n        numerator \u003d -numerator;\r\n        denominator \u003d -denominator;\r\n    }\r\n    // simplify fraction.\r\n    final int gcd \u003d greatestCommonDivisor(numerator, denominator);\r\n    numerator /\u003d gcd;\r\n    denominator /\u003d gcd;\r\n    return new Fraction(numerator, denominator);\r\n}"
      },
      {
        "name": "Fraction#greatestCommonDivisor(...2)",
        "body": "{\r\n    // From Commons Math:\r\n    if (u \u003d\u003d 0 || v \u003d\u003d 0) {\r\n        if (u \u003d\u003d Integer.MIN_VALUE || v \u003d\u003d Integer.MIN_VALUE) {\r\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\r\n        }\r\n        return Math.abs(u) + Math.abs(v);\r\n    }\r\n    // if either operand is abs 1, return 1:\r\n    if (Math.abs(u) \u003d\u003d 1 || Math.abs(v) \u003d\u003d 1) {\r\n        return 1;\r\n    }\r\n    // keep u and v negative, as negative integers range down to\r\n    // -2^31, while positive numbers can only be as large as 2^31-1\r\n    // (i.e. we can\u0027t necessarily negate a negative number without\r\n    // overflow)\r\n    if (u \u003e 0) {\r\n        u \u003d -u;\r\n    }\r\n    // make u negative\r\n    if (v \u003e 0) {\r\n        v \u003d -v;\r\n    }\r\n    // make v negative\r\n    // B1. [Find power of 2]\r\n    int k \u003d 0;\r\n    while ((u \u0026 1) \u003d\u003d 0 \u0026\u0026 (v \u0026 1) \u003d\u003d 0 \u0026\u0026 k \u003c 31) {\r\n        // while u and v are both even...\r\n        u /\u003d 2;\r\n        v /\u003d 2;\r\n        // cast out twos.\r\n        k++;\r\n    }\r\n    if (k \u003d\u003d 31) {\r\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\r\n    }\r\n    // B2. Initialize: u and v have been divided by 2^k and at least\r\n    // one is odd.\r\n    int t \u003d (u \u0026 1) \u003d\u003d 1 ? v : -(u / 2);\r\n    // t negative: u was odd, v may be even (t replaces v)\r\n    // t positive: u was even, v is odd (t replaces u)\r\n    do {\r\n        /* assert u\u003c0 \u0026\u0026 v\u003c0; */\r\n        // B4/B3: cast out twos from t.\r\n        while ((t \u0026 1) \u003d\u003d 0) {\r\n            // while t is even.\r\n            // cast out twos\r\n            t /\u003d 2;\r\n        }\r\n        // B5 [reset max(u,v)]\r\n        if (t \u003e 0) {\r\n            u \u003d -t;\r\n        } else {\r\n            v \u003d t;\r\n        }\r\n        // B6/B3. at this point both u and v should be odd.\r\n        t \u003d (v - u) / 2;\r\n        // |u| larger: t positive (replace u)\r\n        // |v| larger: t negative (replace v)\r\n    } while (t !\u003d 0);\r\n    // gcd is u*2^k\r\n    return -u * (1 \u003c\u003c k);\r\n}"
      },
      {
        "name": "Fraction#mulPosAndCheck(...2)",
        "body": "{\r\n    /* assert x\u003e\u003d0 \u0026\u0026 y\u003e\u003d0; */\r\n    final long m \u003d (long) x * (long) y;\r\n    if (m \u003e Integer.MAX_VALUE) {\r\n        throw new ArithmeticException(\"overflow: mulPos\");\r\n    }\r\n    return (int) m;\r\n}"
      },
      {
        "name": "Fraction#mulAndCheck(...2)",
        "body": "{\r\n    final long m \u003d (long) x * (long) y;\r\n    if (m \u003c Integer.MIN_VALUE || m \u003e Integer.MAX_VALUE) {\r\n        throw new ArithmeticException(\"overflow: mul\");\r\n    }\r\n    return (int) m;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.Fraction",
    "methodName": "negate",
    "signature": "org.apache.commons.lang3.math.Fraction negate()",
    "visibility": "public",
    "body": "{\r\n    // the positive range is one smaller than the negative range of an int.\r\n    if (numerator \u003d\u003d Integer.MIN_VALUE) {\r\n        throw new ArithmeticException(\"overflow: too large to negate\");\r\n    }\r\n    return new Fraction(-numerator, denominator);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d -2147483648) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Fraction\n  $i0 \u003d Fraction: int numerator\u003e\n  if ($i0 !\u003d -2147483648) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d ArithmeticException\n  new ArithmeticException(\"overflow: too large to negate\")\n  throw $r2\n}",
      "B2 {\n  $r1 \u003d Fraction\n  $i1 \u003d Fraction: int numerator\u003e\n  $i3 \u003d neg $i1\n  $i2 \u003d Fraction: int denominator\u003e\n  new Fraction($i3, $i2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.Fraction",
    "methodName": "pow",
    "signature": "org.apache.commons.lang3.math.Fraction pow(int)",
    "visibility": "public",
    "body": "{\r\n    if (power \u003d\u003d 1) {\r\n        return this;\r\n    }\r\n    if (power \u003d\u003d 0) {\r\n        return ONE;\r\n    }\r\n    if (power \u003c 0) {\r\n        if (power \u003d\u003d Integer.MIN_VALUE) {\r\n            // MIN_VALUE can\u0027t be negated.\r\n            return this.invert().pow(2).pow(-(power / 2));\r\n        }\r\n        return this.invert().pow(-power);\r\n    }\r\n    final Fraction f \u003d this.multiplyBy(this);\r\n    if (power % 2 \u003d\u003d 0) {\r\n        // if even...\r\n        return f.pow(power / 2);\r\n    }\r\n    return f.pow(power / 2).multiplyBy(this);\r\n}",
    "nodes": 11,
    "edges": 10,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 !\u003d 1) → B1 | else → B2",
      "B2 : If(i0 !\u003d 0) → B3 | else → B4",
      "B4 : If(i0 \u003e\u003d 0) → B5 | else → B8",
      "B5 : If(i0 !\u003d -2147483648) → B6 | else → B7",
      "B8 : If($i1 !\u003d 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  Fraction\n  i0 :\u003d @parameter0: int\n  if (i0 !\u003d 1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r10 \u003d Fraction ONE\u003e\n  return\n}",
      "B4 {\n  if (i0 \u003e\u003d 0) goto B5 else B8\n}",
      "B5 {\n  if (i0 !\u003d -2147483648) goto B6 else B7\n}",
      "B6 {\n  $r7 \u003d r0.invert()\n  $r8 \u003d $r7.pow(2)\n  $i5 \u003d i0 / 2\n  $i6 \u003d neg $i5\n  $r9 \u003d $r8.pow($i6)\n  return\n}",
      "B7 {\n  $r5 \u003d r0.invert()\n  $i4 \u003d neg i0\n  $r6 \u003d $r5.pow($i4)\n  return\n}",
      "B8 {\n  r1 \u003d r0.multiplyBy(r0)\n  $i1 \u003d i0 % 2\n  if ($i1 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  $i3 \u003d i0 / 2\n  $r4 \u003d r1.pow($i3)\n  return\n}",
      "B10 {\n  $i2 \u003d i0 / 2\n  $r2 \u003d r1.pow($i2)\n  $r3 \u003d $r2.multiplyBy(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Fraction#multiplyBy(...1)",
        "body": "{\r\n    Objects.requireNonNull(fraction, \"fraction\");\r\n    if (numerator \u003d\u003d 0 || fraction.numerator \u003d\u003d 0) {\r\n        return ZERO;\r\n    }\r\n    // knuth 4.5.1\r\n    // make sure we don\u0027t overflow unless the result *must* overflow.\r\n    final int d1 \u003d greatestCommonDivisor(numerator, fraction.denominator);\r\n    final int d2 \u003d greatestCommonDivisor(fraction.numerator, denominator);\r\n    return getReducedFraction(mulAndCheck(numerator / d1, fraction.numerator / d2), mulPosAndCheck(denominator / d2, fraction.denominator / d1));\r\n}"
      },
      {
        "name": "Fraction#invert(...0)",
        "body": "{\r\n    if (numerator \u003d\u003d 0) {\r\n        throw new ArithmeticException(\"Unable to invert zero.\");\r\n    }\r\n    if (numerator \u003d\u003d Integer.MIN_VALUE) {\r\n        throw new ArithmeticException(\"overflow: can\u0027t negate numerator\");\r\n    }\r\n    if (numerator \u003c 0) {\r\n        return new Fraction(-denominator, -numerator);\r\n    }\r\n    return new Fraction(denominator, numerator);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.Fraction",
    "methodName": "reduce",
    "signature": "org.apache.commons.lang3.math.Fraction reduce()",
    "visibility": "public",
    "body": "{\r\n    if (numerator \u003d\u003d 0) {\r\n        return equals(ZERO) ? this : ZERO;\r\n    }\r\n    final int gcd \u003d greatestCommonDivisor(Math.abs(numerator), denominator);\r\n    if (gcd \u003d\u003d 1) {\r\n        return this;\r\n    }\r\n    return getFraction(numerator / gcd, denominator / gcd);\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B5",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3",
      "B5 : If(i4 !\u003d 1) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Fraction\n  $i0 \u003d Fraction: int numerator\u003e\n  if ($i0 !\u003d 0) goto B1 else B5\n}",
      "B1 {\n  $r2 \u003d Fraction ZERO\u003e\n  $z0 \u003d r0.equals($r2)\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r3 \u003d Fraction ZERO\u003e\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $i1 \u003d Fraction: int numerator\u003e\n  $i3 \u003d Math.abs($i1)\n  $i2 \u003d Fraction: int denominator\u003e\n  i4 \u003d Fraction.greatestCommonDivisor($i3, $i2)\n  if (i4 !\u003d 1) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $i5 \u003d Fraction: int numerator\u003e\n  $i8 \u003d $i5 / i4\n  $i6 \u003d Fraction: int denominator\u003e\n  $i7 \u003d $i6 / i4\n  $r1 \u003d Fraction.getFraction($i8, $i7)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Fraction#equals(...1)",
        "body": "{\r\n    if (obj \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (!(obj instanceof Fraction)) {\r\n        return false;\r\n    }\r\n    final Fraction other \u003d (Fraction) obj;\r\n    return getNumerator() \u003d\u003d other.getNumerator() \u0026\u0026 getDenominator() \u003d\u003d other.getDenominator();\r\n}"
      },
      {
        "name": "Fraction#greatestCommonDivisor(...2)",
        "body": "{\r\n    // From Commons Math:\r\n    if (u \u003d\u003d 0 || v \u003d\u003d 0) {\r\n        if (u \u003d\u003d Integer.MIN_VALUE || v \u003d\u003d Integer.MIN_VALUE) {\r\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\r\n        }\r\n        return Math.abs(u) + Math.abs(v);\r\n    }\r\n    // if either operand is abs 1, return 1:\r\n    if (Math.abs(u) \u003d\u003d 1 || Math.abs(v) \u003d\u003d 1) {\r\n        return 1;\r\n    }\r\n    // keep u and v negative, as negative integers range down to\r\n    // -2^31, while positive numbers can only be as large as 2^31-1\r\n    // (i.e. we can\u0027t necessarily negate a negative number without\r\n    // overflow)\r\n    if (u \u003e 0) {\r\n        u \u003d -u;\r\n    }\r\n    // make u negative\r\n    if (v \u003e 0) {\r\n        v \u003d -v;\r\n    }\r\n    // make v negative\r\n    // B1. [Find power of 2]\r\n    int k \u003d 0;\r\n    while ((u \u0026 1) \u003d\u003d 0 \u0026\u0026 (v \u0026 1) \u003d\u003d 0 \u0026\u0026 k \u003c 31) {\r\n        // while u and v are both even...\r\n        u /\u003d 2;\r\n        v /\u003d 2;\r\n        // cast out twos.\r\n        k++;\r\n    }\r\n    if (k \u003d\u003d 31) {\r\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\r\n    }\r\n    // B2. Initialize: u and v have been divided by 2^k and at least\r\n    // one is odd.\r\n    int t \u003d (u \u0026 1) \u003d\u003d 1 ? v : -(u / 2);\r\n    // t negative: u was odd, v may be even (t replaces v)\r\n    // t positive: u was even, v is odd (t replaces u)\r\n    do {\r\n        /* assert u\u003c0 \u0026\u0026 v\u003c0; */\r\n        // B4/B3: cast out twos from t.\r\n        while ((t \u0026 1) \u003d\u003d 0) {\r\n            // while t is even.\r\n            // cast out twos\r\n            t /\u003d 2;\r\n        }\r\n        // B5 [reset max(u,v)]\r\n        if (t \u003e 0) {\r\n            u \u003d -t;\r\n        } else {\r\n            v \u003d t;\r\n        }\r\n        // B6/B3. at this point both u and v should be odd.\r\n        t \u003d (v - u) / 2;\r\n        // |u| larger: t positive (replace u)\r\n        // |v| larger: t negative (replace v)\r\n    } while (t !\u003d 0);\r\n    // gcd is u*2^k\r\n    return -u * (1 \u003c\u003c k);\r\n}"
      },
      {
        "name": "Fraction#getFraction(...2)",
        "body": "{\r\n    if (denominator \u003d\u003d 0) {\r\n        throw new ArithmeticException(\"The denominator must not be zero\");\r\n    }\r\n    if (denominator \u003c 0) {\r\n        if (numerator \u003d\u003d Integer.MIN_VALUE || denominator \u003d\u003d Integer.MIN_VALUE) {\r\n            throw new ArithmeticException(\"overflow: can\u0027t negate\");\r\n        }\r\n        numerator \u003d -numerator;\r\n        denominator \u003d -denominator;\r\n    }\r\n    return new Fraction(numerator, denominator);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.Fraction",
    "methodName": "toProperString",
    "signature": "java.lang.String toProperString()",
    "visibility": "public",
    "body": "{\r\n    if (toProperString \u003d\u003d null) {\r\n        if (numerator \u003d\u003d 0) {\r\n            toProperString \u003d \"0\";\r\n        } else if (numerator \u003d\u003d denominator) {\r\n            toProperString \u003d \"1\";\r\n        } else if (numerator \u003d\u003d -1 * denominator) {\r\n            toProperString \u003d \"-1\";\r\n        } else if ((numerator \u003e 0 ? -numerator : numerator) \u003c -denominator) {\r\n            // note that we do the magnitude comparison test above with\r\n            // NEGATIVE (not positive) numbers, since negative numbers\r\n            // have a larger range. otherwise numerator \u003d\u003d Integer.MIN_VALUE\r\n            // is handled incorrectly.\r\n            final int properNumerator \u003d getProperNumerator();\r\n            if (properNumerator \u003d\u003d 0) {\r\n                toProperString \u003d Integer.toString(getProperWhole());\r\n            } else {\r\n                toProperString \u003d getProperWhole() + \" \" + properNumerator + \"/\" + getDenominator();\r\n            }\r\n        } else {\r\n            toProperString \u003d getNumerator() + \"/\" + getDenominator();\r\n        }\r\n    }\r\n    return toProperString;\r\n}",
    "nodes": 17,
    "edges": 23,
    "cc": 8,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B16",
      "B1 : If($i0 !\u003d 0) → B2 | else → B3",
      "B3 : If($i2 !\u003d $i1) → B4 | else → B5",
      "B5 : If($i5 !\u003d $i4) → B6 | else → B7",
      "B7 : If($i6 \u003c\u003d 0) → B8 | else → B9",
      "B10 : If($i16 \u003e\u003d $i8) → B11 | else → B15",
      "B11 : If(i11 !\u003d 0) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  Fraction\n  $r1 \u003d String toProperString\u003e\n  if ($r1 !\u003d null) goto B1 else B16\n}",
      "B1 {\n  $i0 \u003d Fraction: int numerator\u003e\n  if ($i0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  String toProperString\u003e \u003d \"0\"\n  goto B16\n}",
      "B3 {\n  $i2 \u003d Fraction: int numerator\u003e\n  $i1 \u003d Fraction: int denominator\u003e\n  if ($i2 !\u003d $i1) goto B4 else B5\n}",
      "B4 {\n  String toProperString\u003e \u003d \"1\"\n  goto B16\n}",
      "B5 {\n  $i5 \u003d Fraction: int numerator\u003e\n  $i3 \u003d Fraction: int denominator\u003e\n  $i18 \u003d (int) -1\n  $i4 \u003d $i18 * $i3\n  if ($i5 !\u003d $i4) goto B6 else B7\n}",
      "B6 {\n  String toProperString\u003e \u003d \"-1\"\n  goto B16\n}",
      "B7 {\n  $i6 \u003d Fraction: int numerator\u003e\n  if ($i6 \u003c\u003d 0) goto B8 else B9\n}",
      "B8 {\n  $i15 \u003d Fraction: int numerator\u003e\n  $i16 \u003d neg $i15\n  goto B10\n}",
      "B9 {\n  $i16 \u003d Fraction: int numerator\u003e\n}",
      "B10 {\n  $i7 \u003d Fraction: int denominator\u003e\n  $i8 \u003d neg $i7\n  if ($i16 \u003e\u003d $i8) goto B11 else B15\n}",
      "B11 {\n  i11 \u003d r0.getProperNumerator()\n  if (i11 !\u003d 0) goto B12 else B13\n}",
      "B12 {\n  $i14 \u003d r0.getProperWhole()\n  $r14 \u003d Integer.toString($i14)\n  String toProperString\u003e \u003d $r14\n  goto B14\n}",
      "B13 {\n  $r16 \u003d StringBuilder\n  new StringBuilder()\n  $i12 \u003d r0.getProperWhole()\n  $r8 \u003d $r16.append($i12)\n  $r9 \u003d $r8.append(\" \")\n  $r10 \u003d $r9.append(i11)\n  $r11 \u003d $r10.append(\"/\")\n  $i13 \u003d r0.getDenominator()\n  $r12 \u003d $r11.append($i13)\n  $r13 \u003d $r12.toString()\n  String toProperString\u003e \u003d $r13\n}",
      "B14 {\n  goto B16\n}",
      "B15 {\n  $r17 \u003d StringBuilder\n  new StringBuilder()\n  $i9 \u003d r0.getNumerator()\n  $r3 \u003d $r17.append($i9)\n  $r4 \u003d $r3.append(\"/\")\n  $i10 \u003d r0.getDenominator()\n  $r5 \u003d $r4.append($i10)\n  $r6 \u003d $r5.toString()\n  String toProperString\u003e \u003d $r6\n}",
      "B16 {\n  $r15 \u003d String toProperString\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B16",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B16",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B16",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B16",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B15",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Fraction#getProperNumerator(...0)",
        "body": "{\r\n    return Math.abs(numerator % denominator);\r\n}"
      },
      {
        "name": "Fraction#getProperWhole(...0)",
        "body": "{\r\n    return numerator / denominator;\r\n}"
      },
      {
        "name": "Fraction#getDenominator(...0)",
        "body": "{\r\n    return denominator;\r\n}"
      },
      {
        "name": "Fraction#getNumerator(...0)",
        "body": "{\r\n    return numerator;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.Fraction",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    if (toString \u003d\u003d null) {\r\n        toString \u003d getNumerator() + \"/\" + getDenominator();\r\n    }\r\n    return toString;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Fraction\n  $r1 \u003d String toString\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  $i0 \u003d r0.getNumerator()\n  $r4 \u003d $r3.append($i0)\n  $r5 \u003d $r4.append(\"/\")\n  $i1 \u003d r0.getDenominator()\n  $r6 \u003d $r5.append($i1)\n  $r7 \u003d $r6.toString()\n  String toString\u003e \u003d $r7\n}",
      "B2 {\n  $r2 \u003d String toString\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Fraction#getDenominator(...0)",
        "body": "{\r\n    return denominator;\r\n}"
      },
      {
        "name": "Fraction#getNumerator(...0)",
        "body": "{\r\n    return numerator;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.IEEE754rUtils",
    "methodName": "max",
    "signature": "double max(double[])",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(array, \"array\");\r\n    Validate.isTrue(array.length !\u003d 0, \"Array cannot be empty.\");\r\n    // Finds and returns max\r\n    double max \u003d array[0];\r\n    for (int j \u003d 1; j \u003c array.length; j++) {\r\n        max \u003d max(array[j], max);\r\n    }\r\n    return max;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2",
      "B4 : If(i1 \u003e\u003d $i2) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  Objects.requireNonNull(r0, \"array\")\n  $i0 \u003d lengthof r0\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  $r1 \u003d Object)[0]\n  Validate.isTrue($z0, \"Array cannot be empty.\", $r1)\n  d1 \u003d r0[0]\n  i1 \u003d 1\n}",
      "B4 {\n  $i2 \u003d lengthof r0\n  if (i1 \u003e\u003d $i2) goto B5 else B6\n}",
      "B5 {\n  $d0 \u003d r0[i1]\n  d1 \u003d IEEE754rUtils.max($d0, d1)\n  i1 \u003d i1 + 1\n  goto B4\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IEEE754rUtils#max(...2)",
        "body": "{\r\n    if (Double.isNaN(a)) {\r\n        return b;\r\n    }\r\n    if (Double.isNaN(b)) {\r\n        return a;\r\n    }\r\n    return Math.max(a, b);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.IEEE754rUtils",
    "methodName": "max",
    "signature": "double max(double,double)",
    "visibility": "public",
    "body": "{\r\n    if (Double.isNaN(a)) {\r\n        return b;\r\n    }\r\n    if (Double.isNaN(b)) {\r\n        return a;\r\n    }\r\n    return Math.max(a, b);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  d0 :\u003d @parameter0: double\n  d1 :\u003d @parameter1: double\n  $z0 \u003d Double.isNaN(d0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z1 \u003d Double.isNaN(d1)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $d2 \u003d Math.max(d0, d1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.IEEE754rUtils",
    "methodName": "max",
    "signature": "float max(float[])",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(array, \"array\");\r\n    Validate.isTrue(array.length !\u003d 0, \"Array cannot be empty.\");\r\n    // Finds and returns max\r\n    float max \u003d array[0];\r\n    for (int j \u003d 1; j \u003c array.length; j++) {\r\n        max \u003d max(array[j], max);\r\n    }\r\n    return max;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2",
      "B4 : If(i1 \u003e\u003d $i2) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  Objects.requireNonNull(r0, \"array\")\n  $i0 \u003d lengthof r0\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  $r1 \u003d Object)[0]\n  Validate.isTrue($z0, \"Array cannot be empty.\", $r1)\n  f1 \u003d r0[0]\n  i1 \u003d 1\n}",
      "B4 {\n  $i2 \u003d lengthof r0\n  if (i1 \u003e\u003d $i2) goto B5 else B6\n}",
      "B5 {\n  $f0 \u003d r0[i1]\n  f1 \u003d IEEE754rUtils.max($f0, f1)\n  i1 \u003d i1 + 1\n  goto B4\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IEEE754rUtils#max(...2)",
        "body": "{\r\n    if (Double.isNaN(a)) {\r\n        return b;\r\n    }\r\n    if (Double.isNaN(b)) {\r\n        return a;\r\n    }\r\n    return Math.max(a, b);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.IEEE754rUtils",
    "methodName": "max",
    "signature": "float max(float,float)",
    "visibility": "public",
    "body": "{\r\n    if (Float.isNaN(a)) {\r\n        return b;\r\n    }\r\n    if (Float.isNaN(b)) {\r\n        return a;\r\n    }\r\n    return Math.max(a, b);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  f0 :\u003d @parameter0: float\n  f1 :\u003d @parameter1: float\n  $z0 \u003d Float.isNaN(f0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z1 \u003d Float.isNaN(f1)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $f2 \u003d Math.max(f0, f1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.IEEE754rUtils",
    "methodName": "min",
    "signature": "double min(double[])",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(array, \"array\");\r\n    Validate.isTrue(array.length !\u003d 0, \"Array cannot be empty.\");\r\n    // Finds and returns min\r\n    double min \u003d array[0];\r\n    for (int i \u003d 1; i \u003c array.length; i++) {\r\n        min \u003d min(array[i], min);\r\n    }\r\n    return min;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2",
      "B4 : If(i1 \u003e\u003d $i2) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  Objects.requireNonNull(r0, \"array\")\n  $i0 \u003d lengthof r0\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  $r1 \u003d Object)[0]\n  Validate.isTrue($z0, \"Array cannot be empty.\", $r1)\n  d1 \u003d r0[0]\n  i1 \u003d 1\n}",
      "B4 {\n  $i2 \u003d lengthof r0\n  if (i1 \u003e\u003d $i2) goto B5 else B6\n}",
      "B5 {\n  $d0 \u003d r0[i1]\n  d1 \u003d IEEE754rUtils.min($d0, d1)\n  i1 \u003d i1 + 1\n  goto B4\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IEEE754rUtils#min(...2)",
        "body": "{\r\n    if (Double.isNaN(a)) {\r\n        return b;\r\n    }\r\n    if (Double.isNaN(b)) {\r\n        return a;\r\n    }\r\n    return Math.min(a, b);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.IEEE754rUtils",
    "methodName": "min",
    "signature": "double min(double,double)",
    "visibility": "public",
    "body": "{\r\n    if (Double.isNaN(a)) {\r\n        return b;\r\n    }\r\n    if (Double.isNaN(b)) {\r\n        return a;\r\n    }\r\n    return Math.min(a, b);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  d0 :\u003d @parameter0: double\n  d1 :\u003d @parameter1: double\n  $z0 \u003d Double.isNaN(d0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z1 \u003d Double.isNaN(d1)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $d2 \u003d Math.min(d0, d1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.IEEE754rUtils",
    "methodName": "min",
    "signature": "float min(float[])",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(array, \"array\");\r\n    Validate.isTrue(array.length !\u003d 0, \"Array cannot be empty.\");\r\n    // Finds and returns min\r\n    float min \u003d array[0];\r\n    for (int i \u003d 1; i \u003c array.length; i++) {\r\n        min \u003d min(array[i], min);\r\n    }\r\n    return min;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d false) → B1 | else → B2",
      "B4 : If(i1 \u003e\u003d $i2) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  Objects.requireNonNull(r0, \"array\")\n  $i0 \u003d lengthof r0\n  if ($i0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  $r1 \u003d Object)[0]\n  Validate.isTrue($z0, \"Array cannot be empty.\", $r1)\n  f1 \u003d r0[0]\n  i1 \u003d 1\n}",
      "B4 {\n  $i2 \u003d lengthof r0\n  if (i1 \u003e\u003d $i2) goto B5 else B6\n}",
      "B5 {\n  $f0 \u003d r0[i1]\n  f1 \u003d IEEE754rUtils.min($f0, f1)\n  i1 \u003d i1 + 1\n  goto B4\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IEEE754rUtils#min(...2)",
        "body": "{\r\n    if (Double.isNaN(a)) {\r\n        return b;\r\n    }\r\n    if (Double.isNaN(b)) {\r\n        return a;\r\n    }\r\n    return Math.min(a, b);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.IEEE754rUtils",
    "methodName": "min",
    "signature": "float min(float,float)",
    "visibility": "public",
    "body": "{\r\n    if (Float.isNaN(a)) {\r\n        return b;\r\n    }\r\n    if (Float.isNaN(b)) {\r\n        return a;\r\n    }\r\n    return Math.min(a, b);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  f0 :\u003d @parameter0: float\n  f1 :\u003d @parameter1: float\n  $z0 \u003d Float.isNaN(f0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z1 \u003d Float.isNaN(f1)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $f2 \u003d Math.min(f0, f1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "compare",
    "signature": "int compare(int,int)",
    "visibility": "public",
    "body": "{\r\n    if (x \u003d\u003d y) {\r\n        return 0;\r\n    }\r\n    return x \u003c y ? -1 : 1;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 !\u003d i1) → B1 | else → B2",
      "B2 : If(i0 \u003e\u003d i1) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  i1 :\u003d @parameter1: int\n  if (i0 !\u003d i1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (i0 \u003e\u003d i1) goto B3 else B4\n}",
      "B3 {\n  $b2 \u003d -1\n  goto B5\n}",
      "B4 {\n  $b2 \u003d 1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "compare",
    "signature": "int compare(long,long)",
    "visibility": "public",
    "body": "{\r\n    if (x \u003d\u003d y) {\r\n        return 0;\r\n    }\r\n    return x \u003c y ? -1 : 1;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($b2 !\u003d 0) → B1 | else → B2",
      "B2 : If($i5 \u003e\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  l0 :\u003d @parameter0: long\n  l1 :\u003d @parameter1: long\n  $b2 \u003d l0 cmp l1\n  if ($b2 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $b3 \u003d l0 cmp l1\n  $i5 \u003d (int) $b3\n  if ($i5 \u003e\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $b4 \u003d -1\n  goto B5\n}",
      "B4 {\n  $b4 \u003d 1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "compare",
    "signature": "int compare(short,short)",
    "visibility": "public",
    "body": "{\r\n    if (x \u003d\u003d y) {\r\n        return 0;\r\n    }\r\n    return x \u003c y ? -1 : 1;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i3 !\u003d $i4) → B1 | else → B2",
      "B2 : If($i5 \u003e\u003d $i6) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  s0 :\u003d @parameter0: short\n  s1 :\u003d @parameter1: short\n  $i3 \u003d (int) s0\n  $i4 \u003d (int) s1\n  if ($i3 !\u003d $i4) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i5 \u003d (int) s0\n  $i6 \u003d (int) s1\n  if ($i5 \u003e\u003d $i6) goto B3 else B4\n}",
      "B3 {\n  $b2 \u003d -1\n  goto B5\n}",
      "B4 {\n  $b2 \u003d 1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "createBigDecimal",
    "signature": "java.math.BigDecimal createBigDecimal(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\r\n    if (StringUtils.isBlank(str)) {\r\n        throw new NumberFormatException(\"A blank string is not a valid number\");\r\n    }\r\n    return new BigDecimal(str);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d StringUtils.isBlank(r0)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d NumberFormatException\n  new NumberFormatException(\"A blank string is not a valid number\")\n  throw $r2\n}",
      "B4 {\n  $r1 \u003d BigDecimal\n  new BigDecimal(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "createBigInteger",
    "signature": "java.math.BigInteger createBigInteger(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (str.isEmpty()) {\r\n        throw new NumberFormatException(\"An empty string is not a valid number\");\r\n    }\r\n    // offset within string\r\n    int pos \u003d 0;\r\n    int radix \u003d 10;\r\n    // need to negate later?\r\n    boolean negate \u003d false;\r\n    final char char0 \u003d str.charAt(0);\r\n    if (char0 \u003d\u003d \u0027-\u0027) {\r\n        negate \u003d true;\r\n        pos \u003d 1;\r\n    } else if (char0 \u003d\u003d \u0027+\u0027) {\r\n        pos \u003d 1;\r\n    }\r\n    if (str.startsWith(\"0x\", pos) || str.startsWith(\"0X\", pos)) {\r\n        // hex\r\n        radix \u003d 16;\r\n        pos +\u003d 2;\r\n    } else if (str.startsWith(\"#\", pos)) {\r\n        // alternative hex (allowed by Long/Integer)\r\n        radix \u003d 16;\r\n        pos++;\r\n    } else if (str.startsWith(\"0\", pos) \u0026\u0026 str.length() \u003e pos + 1) {\r\n        // octal; so long as there are additional digits\r\n        radix \u003d 8;\r\n        pos++;\r\n    }\r\n    // default is to treat as decimal\r\n    final BigInteger value \u003d new BigInteger(str.substring(pos), radix);\r\n    return negate ? value.negate() : value;\r\n}",
    "nodes": 20,
    "edges": 27,
    "cc": 9,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($i9 !\u003d 45) → B5 | else → B6",
      "B6 : If($i10 !\u003d 43) → B7 | else → B8",
      "B8 : If($z5 !\u003d 0) → B9 | else → B10",
      "B9 : If($z1 \u003d\u003d false) → B10 | else → B11",
      "B11 : If($z2 \u003d\u003d false) → B12 | else → B13",
      "B13 : If($z3 \u003d\u003d false) → B14 | else → B16",
      "B14 : If($i2 \u003c\u003d $i1) → B15 | else → B16",
      "B16 : If(z4 \u003d\u003d false) → B17 | else → B18"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d NumberFormatException\n  new NumberFormatException(\"An empty string is not a valid number\")\n  throw $r5\n}",
      "B4 {\n  i3 \u003d 0\n  z9 \u003d 0\n  z8 \u003d 0\n  b8 \u003d 0\n  b7 \u003d 0\n  b6 \u003d 0\n  b5 \u003d 0\n  z7 \u003d 0\n  z6 \u003d 0\n  b4 \u003d 10\n  z4 \u003d 0\n  c0 \u003d r0.charAt(0)\n  $i9 \u003d (int) c0\n  if ($i9 !\u003d 45) goto B5 else B6\n}",
      "B5 {\n  z4 \u003d 1\n  i3 \u003d 1\n  z9 \u003d 1\n  z8 \u003d 1\n  b8 \u003d 1\n  b7 \u003d 1\n  b6 \u003d 1\n  b5 \u003d 1\n  z7 \u003d 1\n  z6 \u003d 1\n  goto B8\n}",
      "B6 {\n  $i10 \u003d (int) c0\n  if ($i10 !\u003d 43) goto B7 else B8\n}",
      "B7 {\n  i3 \u003d 1\n  z9 \u003d 1\n  z8 \u003d 1\n  b8 \u003d 1\n  b7 \u003d 1\n  b6 \u003d 1\n  b5 \u003d 1\n  z7 \u003d 1\n  z6 \u003d 1\n}",
      "B8 {\n  $z5 \u003d r0.startsWith(\"0x\", b5)\n  if ($z5 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  $z1 \u003d r0.startsWith(\"0X\", b6)\n  if ($z1 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  b4 \u003d 16\n  i3 \u003d z6 + 2\n  goto B16\n}",
      "B11 {\n  $z2 \u003d r0.startsWith(\"#\", b7)\n  if ($z2 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  b4 \u003d 16\n  i3 \u003d z7 + 1\n  goto B16\n}",
      "B13 {\n  $z3 \u003d r0.startsWith(\"0\", b8)\n  if ($z3 \u003d\u003d false) goto B14 else B16\n}",
      "B14 {\n  $i2 \u003d r0.length()\n  $i1 \u003d z8 + 1\n  if ($i2 \u003c\u003d $i1) goto B15 else B16\n}",
      "B15 {\n  b4 \u003d 8\n  i3 \u003d z9 + 1\n}",
      "B16 {\n  $r6 \u003d BigInteger\n  $r3 \u003d r0.substring(i3)\n  new BigInteger($r3, b4)\n  if (z4 \u003d\u003d false) goto B17 else B18\n}",
      "B17 {\n  $r4 \u003d $r6.negate()\n  goto B19\n}",
      "B18 {\n  $r4 \u003d $r6\n}",
      "B19 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B16",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B16",
      "B13 --\u003e B14",
      "B13 --\u003e B16",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "createDouble",
    "signature": "java.lang.Double createDouble(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return Double.valueOf(str);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d Double.valueOf(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "createFloat",
    "signature": "java.lang.Float createFloat(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return Float.valueOf(str);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d Float.valueOf(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "createInteger",
    "signature": "java.lang.Integer createInteger(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // decode() handles 0xAABD and 0777 (hex and octal) as well.\r\n    return Integer.decode(str);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d Integer.decode(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "createLong",
    "signature": "java.lang.Long createLong(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return Long.decode(str);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d Long.decode(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "createNumber",
    "signature": "java.lang.Number createNumber(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (StringUtils.isBlank(str)) {\r\n        throw new NumberFormatException(\"A blank string is not a valid number\");\r\n    }\r\n    // Need to deal with all possible hex prefixes here\r\n    final String[] hexPrefixes \u003d { \"0x\", \"0X\", \"#\" };\r\n    final int length \u003d str.length();\r\n    final int offset \u003d str.charAt(0) \u003d\u003d \u0027+\u0027 || str.charAt(0) \u003d\u003d \u0027-\u0027 ? 1 : 0;\r\n    int pfxLen \u003d 0;\r\n    for (final String pfx : hexPrefixes) {\r\n        if (str.startsWith(pfx, offset)) {\r\n            pfxLen +\u003d pfx.length() + offset;\r\n            break;\r\n        }\r\n    }\r\n    if (pfxLen \u003e 0) {\r\n        // we have a hex number\r\n        // strip leading zeroes\r\n        char firstSigDigit \u003d 0;\r\n        for (int i \u003d pfxLen; i \u003c length; i++) {\r\n            firstSigDigit \u003d str.charAt(i);\r\n            if (firstSigDigit !\u003d \u00270\u0027) {\r\n                break;\r\n            }\r\n            pfxLen++;\r\n        }\r\n        final int hexDigits \u003d length - pfxLen;\r\n        if (hexDigits \u003e 16 || hexDigits \u003d\u003d 16 \u0026\u0026 firstSigDigit \u003e \u00277\u0027) {\r\n            // too many for Long\r\n            return createBigInteger(str);\r\n        }\r\n        if (hexDigits \u003e 8 || hexDigits \u003d\u003d 8 \u0026\u0026 firstSigDigit \u003e \u00277\u0027) {\r\n            // too many for an int\r\n            return createLong(str);\r\n        }\r\n        return createInteger(str);\r\n    }\r\n    final char lastChar \u003d str.charAt(length - 1);\r\n    final String mant;\r\n    final String dec;\r\n    final String exp;\r\n    final int decPos \u003d str.indexOf(\u0027.\u0027);\r\n    // assumes both not present\r\n    final int expPos \u003d str.indexOf(\u0027e\u0027) + str.indexOf(\u0027E\u0027) + 1;\r\n    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\r\n    // and the parsing which will detect if e or E appear in a number due to using the wrong offset\r\n    // Detect if the return type has been requested\r\n    final boolean requestType \u003d !Character.isDigit(lastChar) \u0026\u0026 lastChar !\u003d \u0027.\u0027;\r\n    if (decPos \u003e -1) {\r\n        // there is a decimal point\r\n        if (expPos \u003e -1) {\r\n            // there is an exponent\r\n            if (expPos \u003c\u003d decPos || expPos \u003e length) {\r\n                // prevents double exponent causing IOOBE\r\n                throw new NumberFormatException(str + \" is not a valid number.\");\r\n            }\r\n            dec \u003d str.substring(decPos + 1, expPos);\r\n        } else {\r\n            // No exponent, but there may be a type character to remove\r\n            dec \u003d str.substring(decPos + 1, requestType ? length - 1 : length);\r\n        }\r\n        mant \u003d getMantissa(str, decPos);\r\n    } else {\r\n        if (expPos \u003e -1) {\r\n            if (expPos \u003e length) {\r\n                // prevents double exponent causing IOOBE\r\n                throw new NumberFormatException(str + \" is not a valid number.\");\r\n            }\r\n            mant \u003d getMantissa(str, expPos);\r\n        } else {\r\n            // No decimal, no exponent, but there may be a type character to remove\r\n            mant \u003d getMantissa(str, requestType ? length - 1 : length);\r\n        }\r\n        dec \u003d null;\r\n    }\r\n    if (requestType) {\r\n        if (expPos \u003e -1 \u0026\u0026 expPos \u003c length - 1) {\r\n            exp \u003d str.substring(expPos + 1, length - 1);\r\n        } else {\r\n            exp \u003d null;\r\n        }\r\n        //Requesting a specific type.\r\n        final String numeric \u003d str.substring(0, length - 1);\r\n        switch(lastChar) {\r\n            case \u0027l\u0027:\r\n            case \u0027L\u0027:\r\n                if (dec \u003d\u003d null \u0026\u0026 exp \u003d\u003d null \u0026\u0026 (!numeric.isEmpty() \u0026\u0026 numeric.charAt(0) \u003d\u003d \u0027-\u0027 \u0026\u0026 isDigits(numeric.substring(1)) || isDigits(numeric))) {\r\n                    try {\r\n                        return createLong(numeric);\r\n                    } catch (final NumberFormatException ignored) {\r\n                        // Too big for a long\r\n                    }\r\n                    return createBigInteger(numeric);\r\n                }\r\n                throw new NumberFormatException(str + \" is not a valid number.\");\r\n            case \u0027f\u0027:\r\n            case \u0027F\u0027:\r\n                try {\r\n                    final Float f \u003d createFloat(str);\r\n                    if (!(f.isInfinite() || f.floatValue() \u003d\u003d 0.0F \u0026\u0026 !isZero(mant, dec))) {\r\n                        //If it\u0027s too big for a float or the float value \u003d 0 and the string\r\n                        //has non-zeros in it, then float does not have the precision we want\r\n                        return f;\r\n                    }\r\n                } catch (final NumberFormatException ignored) {\r\n                    // ignore the bad number\r\n                }\r\n            //$FALL-THROUGH$\r\n            case \u0027d\u0027:\r\n            case \u0027D\u0027:\r\n                try {\r\n                    final Double d \u003d createDouble(str);\r\n                    if (!(d.isInfinite() || d.doubleValue() \u003d\u003d 0.0D \u0026\u0026 !isZero(mant, dec))) {\r\n                        return d;\r\n                    }\r\n                } catch (final NumberFormatException ignored) {\r\n                    // ignore the bad number\r\n                }\r\n                try {\r\n                    return createBigDecimal(numeric);\r\n                } catch (final NumberFormatException ignored) {\r\n                    // ignore the bad number\r\n                }\r\n            //$FALL-THROUGH$\r\n            default:\r\n                throw new NumberFormatException(str + \" is not a valid number.\");\r\n        }\r\n    }\r\n    //User doesn\u0027t have a preference on the return type, so let\u0027s start\r\n    //small and go from there...\r\n    if (expPos \u003e -1 \u0026\u0026 expPos \u003c length - 1) {\r\n        exp \u003d str.substring(expPos + 1);\r\n    } else {\r\n        exp \u003d null;\r\n    }\r\n    if (dec \u003d\u003d null \u0026\u0026 exp \u003d\u003d null) {\r\n        // no decimal point and no exponent\r\n        //Must be an Integer, Long, Biginteger\r\n        try {\r\n            return createInteger(str);\r\n        } catch (final NumberFormatException ignored) {\r\n            // ignore the bad number\r\n        }\r\n        try {\r\n            return createLong(str);\r\n        } catch (final NumberFormatException ignored) {\r\n            // ignore the bad number\r\n        }\r\n        return createBigInteger(str);\r\n    }\r\n    //Must be a Float, Double, BigDecimal\r\n    try {\r\n        final Float f \u003d createFloat(str);\r\n        final Double d \u003d createDouble(str);\r\n        if (!f.isInfinite() \u0026\u0026 !(f.floatValue() \u003d\u003d 0.0F \u0026\u0026 !isZero(mant, dec)) \u0026\u0026 f.toString().equals(d.toString())) {\r\n            return f;\r\n        }\r\n        if (!d.isInfinite() \u0026\u0026 !(d.doubleValue() \u003d\u003d 0.0D \u0026\u0026 !isZero(mant, dec))) {\r\n            final BigDecimal b \u003d createBigDecimal(str);\r\n            if (b.compareTo(BigDecimal.valueOf(d.doubleValue())) \u003d\u003d 0) {\r\n                return d;\r\n            }\r\n            return b;\r\n        }\r\n    } catch (final NumberFormatException ignored) {\r\n        // ignore the bad number\r\n    }\r\n    return createBigDecimal(str);\r\n}",
    "nodes": 105,
    "edges": 139,
    "cc": 36,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($i36 \u003d\u003d 43) → B5 | else → B6",
      "B5 : If($i37 !\u003d 45) → B6 | else → B7",
      "B9 : If(i29 \u003e\u003d $i26) → B10 | else → B13",
      "B10 : If($z12 \u003d\u003d false) → B11 | else → B12",
      "B13 : If(i28 \u003c\u003d 0) → B14 | else → B28",
      "B15 : If(i31 \u003e\u003d i0) → B16 | else → B19",
      "B16 : If(i30 \u003d\u003d 48) → B17 | else → B18",
      "B19 : If($i22 \u003e 16) → B20 | else → B22",
      "B20 : If($i22 !\u003d 16) → B21 | else → B23",
      "B21 : If(i30 \u003c\u003d 55) → B22 | else → B23",
      "B23 : If($i22 \u003e 8) → B24 | else → B26",
      "B24 : If($i22 !\u003d 8) → B25 | else → B27",
      "B25 : If(i30 \u003c\u003d 55) → B26 | else → B27",
      "B28 : If($z1 !\u003d 0) → B29 | else → B31",
      "B29 : If($i38 \u003d\u003d 46) → B30 | else → B31",
      "B32 : If(i4 \u003c\u003d $i40) → B33 | else → B43",
      "B33 : If(i8 \u003c\u003d $i42) → B34 | else → B38",
      "B34 : If(i8 \u003c\u003d i4) → B35 | else → B36",
      "B35 : If(i8 \u003c\u003d i0) → B36 | else → B37",
      "B38 : If($z18 \u003d\u003d false) → B39 | else → B40",
      "B43 : If(i8 \u003c\u003d $i44) → B44 | else → B47",
      "B44 : If(i8 \u003c\u003d i0) → B45 | else → B46",
      "B47 : If($z19 \u003d\u003d false) → B48 | else → B49",
      "B52 : If(z2 \u003d\u003d false) → B53 | else → B82",
      "B53 : If(i8 \u003c\u003d $i46) → B54 | else → B56",
      "B54 : If(i8 \u003e\u003d $i17) → B55 | else → B56",
      "B57 : If(switch-on $i47) → B73 | else → B67",
      "B58 : If(r43 !\u003d null) → B59 | else → B66",
      "B59 : If(r45 !\u003d null) → B60 | else → B66",
      "B60 : If($z7 !\u003d 0) → B61 | else → B63",
      "B61 : If($i48 !\u003d 45) → B62 | else → B63",
      "B62 : If($z8 !\u003d 0) → B63 | else → B64",
      "B63 : If($z14 \u003d\u003d false) → B64 | else → B66",
      "B67 : If($z9 !\u003d 0) → B68 | else → B71",
      "B68 : If($b16 !\u003d 0) → B69 | else → B70",
      "B69 : If($z11 \u003d\u003d false) → B70 | else → B71",
      "B73 : If($z15 !\u003d 0) → B74 | else → B77",
      "B74 : If($b15 !\u003d 0) → B75 | else → B76",
      "B75 : If($z10 \u003d\u003d false) → B76 | else → B77",
      "B82 : If(i8 \u003c\u003d $i50) → B83 | else → B85",
      "B83 : If(i8 \u003e\u003d $i12) → B84 | else → B85",
      "B86 : If(r43 !\u003d null) → B87 | else → B91",
      "B87 : If(r54 !\u003d null) → B88 | else → B91",
      "B91 : If($z3 !\u003d 0) → B92 | else → B96",
      "B92 : If($b11 !\u003d 0) → B93 | else → B94",
      "B93 : If($z6 \u003d\u003d false) → B94 | else → B96",
      "B94 : If($z5 \u003d\u003d false) → B95 | else → B96",
      "B96 : If($z16 !\u003d 0) → B97 | else → B102",
      "B97 : If($b9 !\u003d 0) → B98 | else → B99",
      "B98 : If($z4 \u003d\u003d false) → B99 | else → B102",
      "B99 : If($i10 !\u003d 0) → B100 | else → B101"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d StringUtils.isBlank(r0)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r55 \u003d NumberFormatException\n  new NumberFormatException(\"A blank string is not a valid number\")\n  throw $r55\n}",
      "B4 {\n  $r1 \u003d String)[3]\n  $r1[0] \u003d \"0x\"\n  $r1[1] \u003d \"0X\"\n  $r1[2] \u003d \"#\"\n  i0 \u003d r0.length()\n  $c1 \u003d r0.charAt(0)\n  $i36 \u003d (int) $c1\n  if ($i36 \u003d\u003d 43) goto B5 else B6\n}",
      "B5 {\n  $c25 \u003d r0.charAt(0)\n  $i37 \u003d (int) $c25\n  if ($i37 !\u003d 45) goto B6 else B7\n}",
      "B6 {\n  $b27 \u003d 1\n  goto B8\n}",
      "B7 {\n  $b27 \u003d 0\n}",
      "B8 {\n  b2 \u003d $b27\n  i28 \u003d 0\n  $i26 \u003d lengthof $r1\n  i29 \u003d 0\n}",
      "B9 {\n  if (i29 \u003e\u003d $i26) goto B10 else B13\n}",
      "B10 {\n  r42 \u003d $r1[i29]\n  $z12 \u003d r0.startsWith(r42, b2)\n  if ($z12 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  $i23 \u003d r42.length()\n  $i24 \u003d $i23 + b2\n  i28 \u003d 0 + $i24\n  goto B13\n}",
      "B12 {\n  i29 \u003d i29 + 1\n  goto B9\n}",
      "B13 {\n  if (i28 \u003c\u003d 0) goto B14 else B28\n}",
      "B14 {\n  i30 \u003d 0\n  i31 \u003d i28\n}",
      "B15 {\n  if (i31 \u003e\u003d i0) goto B16 else B19\n}",
      "B16 {\n  i30 \u003d r0.charAt(i31)\n  if (i30 \u003d\u003d 48) goto B17 else B18\n}",
      "B17 {\n  goto B19\n}",
      "B18 {\n  i28 \u003d i28 + 1\n  i31 \u003d i31 + 1\n  goto B15\n}",
      "B19 {\n  $i22 \u003d i0 - i28\n  if ($i22 \u003e 16) goto B20 else B22\n}",
      "B20 {\n  if ($i22 !\u003d 16) goto B21 else B23\n}",
      "B21 {\n  if (i30 \u003c\u003d 55) goto B22 else B23\n}",
      "B22 {\n  $r28 \u003d NumberUtils.createBigInteger(r0)\n  return\n}",
      "B23 {\n  if ($i22 \u003e 8) goto B24 else B26\n}",
      "B24 {\n  if ($i22 !\u003d 8) goto B25 else B27\n}",
      "B25 {\n  if (i30 \u003c\u003d 55) goto B26 else B27\n}",
      "B26 {\n  $r29 \u003d NumberUtils.createLong(r0)\n  return\n}",
      "B27 {\n  $r30 \u003d NumberUtils.createInteger(r0)\n  return\n}",
      "B28 {\n  $i3 \u003d i0 - 1\n  c32 \u003d r0.charAt($i3)\n  i4 \u003d r0.indexOf(46)\n  $i6 \u003d r0.indexOf(101)\n  $i5 \u003d r0.indexOf(69)\n  $i7 \u003d $i6 + $i5\n  i8 \u003d $i7 + 1\n  $z1 \u003d Character.isDigit(c32)\n  if ($z1 !\u003d 0) goto B29 else B31\n}",
      "B29 {\n  $i38 \u003d (int) c32\n  if ($i38 \u003d\u003d 46) goto B30 else B31\n}",
      "B30 {\n  $z19 \u003d 1\n  $z18 \u003d 1\n  $z17 \u003d 1\n  goto B32\n}",
      "B31 {\n  $z19 \u003d 0\n  $z18 \u003d 0\n  $z17 \u003d 0\n}",
      "B32 {\n  z2 \u003d $z17\n  $i40 \u003d (int) -1\n  if (i4 \u003c\u003d $i40) goto B33 else B43\n}",
      "B33 {\n  $i42 \u003d (int) -1\n  if (i8 \u003c\u003d $i42) goto B34 else B38\n}",
      "B34 {\n  if (i8 \u003c\u003d i4) goto B35 else B36\n}",
      "B35 {\n  if (i8 \u003c\u003d i0) goto B36 else B37\n}",
      "B36 {\n  $r57 \u003d NumberFormatException\n  $r56 \u003d StringBuilder\n  new StringBuilder()\n  $r25 \u003d $r56.append(r0)\n  $r26 \u003d $r25.append(\" is not a valid number.\")\n  $r27 \u003d $r26.toString()\n  new NumberFormatException($r27)\n  throw $r57\n}",
      "B37 {\n  $i21 \u003d i4 + 1\n  r43 \u003d r0.substring($i21, i8)\n  goto B42\n}",
      "B38 {\n  $i20 \u003d i4 + 1\n  if ($z18 \u003d\u003d false) goto B39 else B40\n}",
      "B39 {\n  $i33 \u003d i0 - 1\n  goto B41\n}",
      "B40 {\n  $i33 \u003d i0\n}",
      "B41 {\n  r43 \u003d r0.substring($i20, $i33)\n}",
      "B42 {\n  r44 \u003d NumberUtils.getMantissa(r0, i4)\n  goto B52\n}",
      "B43 {\n  $i44 \u003d (int) -1\n  if (i8 \u003c\u003d $i44) goto B44 else B47\n}",
      "B44 {\n  if (i8 \u003c\u003d i0) goto B45 else B46\n}",
      "B45 {\n  $r59 \u003d NumberFormatException\n  $r58 \u003d StringBuilder\n  new StringBuilder()\n  $r20 \u003d $r58.append(r0)\n  $r21 \u003d $r20.append(\" is not a valid number.\")\n  $r22 \u003d $r21.toString()\n  new NumberFormatException($r22)\n  throw $r59\n}",
      "B46 {\n  r44 \u003d NumberUtils.getMantissa(r0, i8)\n  goto B51\n}",
      "B47 {\n  if ($z19 \u003d\u003d false) goto B48 else B49\n}",
      "B48 {\n  $i34 \u003d i0 - 1\n  goto B50\n}",
      "B49 {\n  $i34 \u003d i0\n}",
      "B50 {\n  r44 \u003d NumberUtils.getMantissa(r0, $i34)\n}",
      "B51 {\n  r43 \u003d null\n}",
      "B52 {\n  if (z2 \u003d\u003d false) goto B53 else B82\n}",
      "B53 {\n  $i46 \u003d (int) -1\n  if (i8 \u003c\u003d $i46) goto B54 else B56\n}",
      "B54 {\n  $i17 \u003d i0 - 1\n  if (i8 \u003e\u003d $i17) goto B55 else B56\n}",
      "B55 {\n  $i19 \u003d i8 + 1\n  $i18 \u003d i0 - 1\n  r45 \u003d r0.substring($i19, $i18)\n  goto B57\n}",
      "B56 {\n  r45 \u003d null\n}",
      "B57 {\n  $i35 \u003d i0 - 1\n  $r46 \u003d r0.substring(0, $i35)\n  $i47 \u003d (int) c32\n  NumberFormatException; }\n}",
      "B58 {\n  if (r43 !\u003d null) goto B59 else B66\n}",
      "B59 {\n  if (r45 !\u003d null) goto B60 else B66\n}",
      "B60 {\n  $z7 \u003d $r46.isEmpty()\n  if ($z7 !\u003d 0) goto B61 else B63\n}",
      "B61 {\n  $c14 \u003d $r46.charAt(0)\n  $i48 \u003d (int) $c14\n  if ($i48 !\u003d 45) goto B62 else B63\n}",
      "B62 {\n  $r11 \u003d $r46.substring(1)\n  $z8 \u003d NumberUtils.isDigits($r11)\n  if ($z8 !\u003d 0) goto B63 else B64\n}",
      "B63 {\n  $z14 \u003d NumberUtils.isDigits($r46)\n  if ($z14 \u003d\u003d false) goto B64 else B66\n}",
      "B64 {\n  $r10 \u003d NumberUtils.createLong($r46)\n  return\n}",
      "B65 {\n  $r40 :\u003d @caughtexception\n  $r41 \u003d NumberUtils.createBigInteger($r46)\n  return\n}",
      "B66 {\n  $r61 \u003d NumberFormatException\n  $r60 \u003d StringBuilder\n  new StringBuilder()\n  $r49 \u003d $r60.append(r0)\n  $r50 \u003d $r49.append(\" is not a valid number.\")\n  $r51 \u003d $r50.toString()\n  new NumberFormatException($r51)\n  throw $r61\n}",
      "B67 {\n  r52 \u003d NumberUtils.createFloat(r0)\n  $z9 \u003d r52.isInfinite()\n  if ($z9 !\u003d 0) goto B68 else B71\n}",
      "B68 {\n  $f1 \u003d r52.floatValue()\n  $b16 \u003d 0F\n  if ($b16 !\u003d 0) goto B69 else B70\n}",
      "B69 {\n  $z11 \u003d NumberUtils.isZero(r44, r43)\n  if ($z11 \u003d\u003d false) goto B70 else B71\n}",
      "B70 {\n  return\n}",
      "B71 {\n  goto B73\n}",
      "B72 {\n  $r39 :\u003d @caughtexception\n}",
      "B73 {\n  $r53 \u003d NumberUtils.createDouble(r0)\n  $z15 \u003d $r53.isInfinite()\n  if ($z15 !\u003d 0) goto B74 else B77\n}",
      "B74 {\n  $d2 \u003d $r53.doubleValue()\n  $b15 \u003d 0\n  if ($b15 !\u003d 0) goto B75 else B76\n}",
      "B75 {\n  $z10 \u003d NumberUtils.isZero(r44, r43)\n  if ($z10 \u003d\u003d false) goto B76 else B77\n}",
      "B76 {\n  return\n}",
      "B77 {\n  goto B79\n}",
      "B78 {\n  $r38 :\u003d @caughtexception\n}",
      "B79 {\n  $r12 \u003d NumberUtils.createBigDecimal($r46)\n  return\n}",
      "B80 {\n  $r37 :\u003d @caughtexception\n}",
      "B81 {\n  $r63 \u003d NumberFormatException\n  $r62 \u003d StringBuilder\n  new StringBuilder()\n  $r15 \u003d $r62.append(r0)\n  $r16 \u003d $r15.append(\" is not a valid number.\")\n  $r17 \u003d $r16.toString()\n  new NumberFormatException($r17)\n  throw $r63\n}",
      "B82 {\n  $i50 \u003d (int) -1\n  if (i8 \u003c\u003d $i50) goto B83 else B85\n}",
      "B83 {\n  $i12 \u003d i0 - 1\n  if (i8 \u003e\u003d $i12) goto B84 else B85\n}",
      "B84 {\n  $i13 \u003d i8 + 1\n  r54 \u003d r0.substring($i13)\n  goto B86\n}",
      "B85 {\n  r54 \u003d null\n}",
      "B86 {\n  if (r43 !\u003d null) goto B87 else B91\n}",
      "B87 {\n  if (r54 !\u003d null) goto B88 else B91\n}",
      "B88 {\n  $r9 \u003d NumberUtils.createInteger(r0)\n  return\n}",
      "B89 {\n  $r35 :\u003d @caughtexception\n  $r36 \u003d NumberUtils.createLong(r0)\n  return\n}",
      "B90 {\n  $r33 :\u003d @caughtexception\n  $r34 \u003d NumberUtils.createBigInteger(r0)\n  return\n}",
      "B91 {\n  $r7 \u003d NumberUtils.createFloat(r0)\n  $r8 \u003d NumberUtils.createDouble(r0)\n  $z3 \u003d $r7.isInfinite()\n  if ($z3 !\u003d 0) goto B92 else B96\n}",
      "B92 {\n  $f0 \u003d $r7.floatValue()\n  $b11 \u003d 0F\n  if ($b11 !\u003d 0) goto B93 else B94\n}",
      "B93 {\n  $z6 \u003d NumberUtils.isZero(r44, r43)\n  if ($z6 \u003d\u003d false) goto B94 else B96\n}",
      "B94 {\n  $r6 \u003d $r7.toString()\n  $r5 \u003d $r8.toString()\n  $z5 \u003d $r6.equals($r5)\n  if ($z5 \u003d\u003d false) goto B95 else B96\n}",
      "B95 {\n  return\n}",
      "B96 {\n  $z16 \u003d $r8.isInfinite()\n  if ($z16 !\u003d 0) goto B97 else B102\n}",
      "B97 {\n  $d0 \u003d $r8.doubleValue()\n  $b9 \u003d 0\n  if ($b9 !\u003d 0) goto B98 else B99\n}",
      "B98 {\n  $z4 \u003d NumberUtils.isZero(r44, r43)\n  if ($z4 \u003d\u003d false) goto B99 else B102\n}",
      "B99 {\n  $r4 \u003d NumberUtils.createBigDecimal(r0)\n  $d1 \u003d $r8.doubleValue()\n  $r3 \u003d BigDecimal.valueOf($d1)\n  $i10 \u003d $r4.compareTo($r3)\n  if ($i10 !\u003d 0) goto B100 else B101\n}",
      "B100 {\n  return\n}",
      "B101 {\n  return\n}",
      "B102 {\n  goto B104\n}",
      "B103 {\n  $r32 :\u003d @caughtexception\n}",
      "B104 {\n  $r2 \u003d NumberUtils.createBigDecimal(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B13",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B9",
      "B13 --\u003e B14",
      "B13 --\u003e B28",
      "B14 --\u003e B15",
      "B15 --\u003e B16",
      "B15 --\u003e B19",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B15",
      "B19 --\u003e B20",
      "B19 --\u003e B22",
      "B20 --\u003e B21",
      "B20 --\u003e B23",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e [EXIT]",
      "B23 --\u003e B24",
      "B23 --\u003e B26",
      "B24 --\u003e B25",
      "B24 --\u003e B27",
      "B25 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e [EXIT]",
      "B27 --\u003e [EXIT]",
      "B28 --\u003e B29",
      "B28 --\u003e B31",
      "B29 --\u003e B30",
      "B29 --\u003e B31",
      "B30 --\u003e B32",
      "B31 --\u003e B32",
      "B32 --\u003e B33",
      "B32 --\u003e B43",
      "B33 --\u003e B34",
      "B33 --\u003e B38",
      "B34 --\u003e B35",
      "B34 --\u003e B36",
      "B35 --\u003e B36",
      "B35 --\u003e B37",
      "B36 --\u003e [EXIT]",
      "B37 --\u003e B42",
      "B38 --\u003e B39",
      "B38 --\u003e B40",
      "B39 --\u003e B41",
      "B40 --\u003e B41",
      "B41 --\u003e B42",
      "B42 --\u003e B52",
      "B43 --\u003e B44",
      "B43 --\u003e B47",
      "B44 --\u003e B45",
      "B44 --\u003e B46",
      "B45 --\u003e [EXIT]",
      "B46 --\u003e B51",
      "B47 --\u003e B48",
      "B47 --\u003e B49",
      "B48 --\u003e B50",
      "B49 --\u003e B50",
      "B50 --\u003e B51",
      "B51 --\u003e B52",
      "B52 --\u003e B53",
      "B52 --\u003e B82",
      "B53 --\u003e B54",
      "B53 --\u003e B56",
      "B54 --\u003e B55",
      "B54 --\u003e B56",
      "B55 --\u003e B57",
      "B56 --\u003e B57",
      "B57 --\u003e B73",
      "B57 --\u003e B67",
      "B57 --\u003e B58",
      "B57 --\u003e B81",
      "B58 --\u003e B59",
      "B58 --\u003e B66",
      "B59 --\u003e B60",
      "B59 --\u003e B66",
      "B60 --\u003e B61",
      "B60 --\u003e B63",
      "B61 --\u003e B62",
      "B61 --\u003e B63",
      "B62 --\u003e B63",
      "B62 --\u003e B64",
      "B63 --\u003e B64",
      "B63 --\u003e B66",
      "B64 --\u003e [EXIT]",
      "B65 --\u003e [EXIT]",
      "B66 --\u003e [EXIT]",
      "B67 --\u003e B68",
      "B67 --\u003e B71",
      "B68 --\u003e B69",
      "B68 --\u003e B70",
      "B69 --\u003e B70",
      "B69 --\u003e B71",
      "B70 --\u003e [EXIT]",
      "B71 --\u003e B73",
      "B72 --\u003e B73",
      "B73 --\u003e B74",
      "B73 --\u003e B77",
      "B74 --\u003e B75",
      "B74 --\u003e B76",
      "B75 --\u003e B76",
      "B75 --\u003e B77",
      "B76 --\u003e [EXIT]",
      "B77 --\u003e B79",
      "B78 --\u003e B79",
      "B79 --\u003e [EXIT]",
      "B80 --\u003e B81",
      "B81 --\u003e [EXIT]",
      "B82 --\u003e B83",
      "B82 --\u003e B85",
      "B83 --\u003e B84",
      "B83 --\u003e B85",
      "B84 --\u003e B86",
      "B85 --\u003e B86",
      "B86 --\u003e B87",
      "B86 --\u003e B91",
      "B87 --\u003e B88",
      "B87 --\u003e B91",
      "B88 --\u003e [EXIT]",
      "B89 --\u003e [EXIT]",
      "B90 --\u003e [EXIT]",
      "B91 --\u003e B92",
      "B91 --\u003e B96",
      "B92 --\u003e B93",
      "B92 --\u003e B94",
      "B93 --\u003e B94",
      "B93 --\u003e B96",
      "B94 --\u003e B95",
      "B94 --\u003e B96",
      "B95 --\u003e [EXIT]",
      "B96 --\u003e B97",
      "B96 --\u003e B102",
      "B97 --\u003e B98",
      "B97 --\u003e B99",
      "B98 --\u003e B99",
      "B98 --\u003e B102",
      "B99 --\u003e B100",
      "B99 --\u003e B101",
      "B100 --\u003e [EXIT]",
      "B101 --\u003e [EXIT]",
      "B102 --\u003e B104",
      "B103 --\u003e B104",
      "B104 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NumberUtils#createBigInteger(...1)",
        "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (str.isEmpty()) {\r\n        throw new NumberFormatException(\"An empty string is not a valid number\");\r\n    }\r\n    // offset within string\r\n    int pos \u003d 0;\r\n    int radix \u003d 10;\r\n    // need to negate later?\r\n    boolean negate \u003d false;\r\n    final char char0 \u003d str.charAt(0);\r\n    if (char0 \u003d\u003d \u0027-\u0027) {\r\n        negate \u003d true;\r\n        pos \u003d 1;\r\n    } else if (char0 \u003d\u003d \u0027+\u0027) {\r\n        pos \u003d 1;\r\n    }\r\n    if (str.startsWith(\"0x\", pos) || str.startsWith(\"0X\", pos)) {\r\n        // hex\r\n        radix \u003d 16;\r\n        pos +\u003d 2;\r\n    } else if (str.startsWith(\"#\", pos)) {\r\n        // alternative hex (allowed by Long/Integer)\r\n        radix \u003d 16;\r\n        pos++;\r\n    } else if (str.startsWith(\"0\", pos) \u0026\u0026 str.length() \u003e pos + 1) {\r\n        // octal; so long as there are additional digits\r\n        radix \u003d 8;\r\n        pos++;\r\n    }\r\n    // default is to treat as decimal\r\n    final BigInteger value \u003d new BigInteger(str.substring(pos), radix);\r\n    return negate ? value.negate() : value;\r\n}"
      },
      {
        "name": "NumberUtils#getMantissa(...2)",
        "body": "{\r\n    final char firstChar \u003d str.charAt(0);\r\n    final boolean hasSign \u003d firstChar \u003d\u003d \u0027-\u0027 || firstChar \u003d\u003d \u0027+\u0027;\r\n    final int length \u003d str.length();\r\n    if (length \u003c\u003d (hasSign ? 1 : 0) || length \u003c stopPos) {\r\n        throw new NumberFormatException(str + \" is not a valid number.\");\r\n    }\r\n    return hasSign ? str.substring(1, stopPos) : str.substring(0, stopPos);\r\n}"
      },
      {
        "name": "NumberUtils#createBigDecimal(...1)",
        "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\r\n    if (StringUtils.isBlank(str)) {\r\n        throw new NumberFormatException(\"A blank string is not a valid number\");\r\n    }\r\n    return new BigDecimal(str);\r\n}"
      },
      {
        "name": "NumberUtils#createInteger(...1)",
        "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // decode() handles 0xAABD and 0777 (hex and octal) as well.\r\n    return Integer.decode(str);\r\n}"
      },
      {
        "name": "NumberUtils#isDigits(...1)",
        "body": "{\r\n    return StringUtils.isNumeric(str);\r\n}"
      },
      {
        "name": "NumberUtils#createDouble(...1)",
        "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return Double.valueOf(str);\r\n}"
      },
      {
        "name": "NumberUtils#createFloat(...1)",
        "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return Float.valueOf(str);\r\n}"
      },
      {
        "name": "NumberUtils#createLong(...1)",
        "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return Long.decode(str);\r\n}"
      },
      {
        "name": "NumberUtils#isZero(...2)",
        "body": "{\r\n    return isAllZeros(mant) \u0026\u0026 isAllZeros(dec);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "isCreatable",
    "signature": "boolean isCreatable(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (StringUtils.isEmpty(str)) {\r\n        return false;\r\n    }\r\n    final char[] chars \u003d str.toCharArray();\r\n    int sz \u003d chars.length;\r\n    boolean hasExp \u003d false;\r\n    boolean hasDecPoint \u003d false;\r\n    boolean allowSigns \u003d false;\r\n    boolean foundDigit \u003d false;\r\n    // deal with any possible sign up front\r\n    final int start \u003d chars[0] \u003d\u003d \u0027-\u0027 || chars[0] \u003d\u003d \u0027+\u0027 ? 1 : 0;\r\n    if (sz \u003e start + 1 \u0026\u0026 chars[start] \u003d\u003d \u00270\u0027 \u0026\u0026 !StringUtils.contains(str, \u0027.\u0027)) {\r\n        // leading 0, skip if is a decimal number\r\n        if (chars[start + 1] \u003d\u003d \u0027x\u0027 || chars[start + 1] \u003d\u003d \u0027X\u0027) {\r\n            // leading 0x/0X\r\n            int i \u003d start + 2;\r\n            if (i \u003d\u003d sz) {\r\n                // str \u003d\u003d \"0x\"\r\n                return false;\r\n            }\r\n            // checking hex (it can\u0027t be anything else)\r\n            for (; i \u003c chars.length; i++) {\r\n                if ((chars[i] \u003c \u00270\u0027 || chars[i] \u003e \u00279\u0027) \u0026\u0026 (chars[i] \u003c \u0027a\u0027 || chars[i] \u003e \u0027f\u0027) \u0026\u0026 (chars[i] \u003c \u0027A\u0027 || chars[i] \u003e \u0027F\u0027)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        if (Character.isDigit(chars[start + 1])) {\r\n            // leading 0, but not hex, must be octal\r\n            int i \u003d start + 1;\r\n            for (; i \u003c chars.length; i++) {\r\n                if (chars[i] \u003c \u00270\u0027 || chars[i] \u003e \u00277\u0027) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    // don\u0027t want to loop to the last char, check it afterwards\r\n    sz--;\r\n    // for type qualifiers\r\n    int i \u003d start;\r\n    // loop to the next to last char or to the last char if we need another digit to\r\n    // make a valid number (e.g. chars[0..5] \u003d \"1234E\")\r\n    while (i \u003c sz || i \u003c sz + 1 \u0026\u0026 allowSigns \u0026\u0026 !foundDigit) {\r\n        if (chars[i] \u003e\u003d \u00270\u0027 \u0026\u0026 chars[i] \u003c\u003d \u00279\u0027) {\r\n            foundDigit \u003d true;\r\n            allowSigns \u003d false;\r\n        } else if (chars[i] \u003d\u003d \u0027.\u0027) {\r\n            if (hasDecPoint || hasExp) {\r\n                // two decimal points or dec in exponent\r\n                return false;\r\n            }\r\n            hasDecPoint \u003d true;\r\n        } else if (chars[i] \u003d\u003d \u0027e\u0027 || chars[i] \u003d\u003d \u0027E\u0027) {\r\n            // we\u0027ve already taken care of hex.\r\n            if (hasExp) {\r\n                // two E\u0027s\r\n                return false;\r\n            }\r\n            if (!foundDigit) {\r\n                return false;\r\n            }\r\n            hasExp \u003d true;\r\n            allowSigns \u003d true;\r\n        } else if (chars[i] \u003d\u003d \u0027+\u0027 || chars[i] \u003d\u003d \u0027-\u0027) {\r\n            if (!allowSigns) {\r\n                return false;\r\n            }\r\n            allowSigns \u003d false;\r\n            // we need a digit after the E\r\n            foundDigit \u003d false;\r\n        } else {\r\n            return false;\r\n        }\r\n        i++;\r\n    }\r\n    if (i \u003c chars.length) {\r\n        if (chars[i] \u003e\u003d \u00270\u0027 \u0026\u0026 chars[i] \u003c\u003d \u00279\u0027) {\r\n            // no type qualifier, OK\r\n            return true;\r\n        }\r\n        if (chars[i] \u003d\u003d \u0027e\u0027 || chars[i] \u003d\u003d \u0027E\u0027) {\r\n            // can\u0027t have an E at the last byte\r\n            return false;\r\n        }\r\n        if (chars[i] \u003d\u003d \u0027.\u0027) {\r\n            if (hasDecPoint || hasExp) {\r\n                // two decimal points or dec in exponent\r\n                return false;\r\n            }\r\n            // single trailing decimal point after non-exponent is ok\r\n            return foundDigit;\r\n        }\r\n        if (!allowSigns \u0026\u0026 (chars[i] \u003d\u003d \u0027d\u0027 || chars[i] \u003d\u003d \u0027D\u0027 || chars[i] \u003d\u003d \u0027f\u0027 || chars[i] \u003d\u003d \u0027F\u0027)) {\r\n            return foundDigit;\r\n        }\r\n        if (chars[i] \u003d\u003d \u0027l\u0027 || chars[i] \u003d\u003d \u0027L\u0027) {\r\n            // not allowing L with an exponent or decimal point\r\n            return foundDigit \u0026\u0026 !hasExp \u0026\u0026 !hasDecPoint;\r\n        }\r\n        // last character is illegal\r\n        return false;\r\n    }\r\n    // allowSigns is true iff the val ends in \u0027E\u0027\r\n    // found digit it to make sure weird stuff like \u0027.\u0027 and \u00271E-\u0027 doesn\u0027t pass\r\n    return !allowSigns \u0026\u0026 foundDigit;\r\n}",
    "nodes": 90,
    "edges": 127,
    "cc": 39,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($i49 \u003d\u003d 45) → B3 | else → B4",
      "B3 : If($i50 !\u003d 43) → B4 | else → B5",
      "B6 : If(i41 \u003c\u003d $i2) → B7 | else → B31",
      "B7 : If($i51 !\u003d 48) → B8 | else → B31",
      "B8 : If($z1 !\u003d 0) → B9 | else → B31",
      "B9 : If($i52 \u003d\u003d 120) → B10 | else → B11",
      "B10 : If($i53 !\u003d 88) → B11 | else → B23",
      "B11 : If($i39 !\u003d i41) → B12 | else → B13",
      "B13 : If(i42 \u003e\u003d $i25) → B14 | else → B22",
      "B14 : If($i54 \u003c 48) → B15 | else → B16",
      "B15 : If($i55 \u003c\u003d 57) → B16 | else → B21",
      "B16 : If($i56 \u003c 97) → B17 | else → B18",
      "B17 : If($i57 \u003c\u003d 102) → B18 | else → B21",
      "B18 : If($i58 \u003c 65) → B19 | else → B20",
      "B19 : If($i59 \u003c\u003d 70) → B20 | else → B21",
      "B23 : If($z2 \u003d\u003d false) → B24 | else → B31",
      "B25 : If(i43 \u003e\u003d $i36) → B26 | else → B30",
      "B26 : If($i60 \u003c 48) → B27 | else → B28",
      "B27 : If($i61 \u003c\u003d 55) → B28 | else → B29",
      "B32 : If(i45 \u003c i44) → B33 | else → B36",
      "B33 : If(i45 \u003e\u003d $i10) → B34 | else → B58",
      "B34 : If(z11 \u003d\u003d false) → B35 | else → B58",
      "B35 : If(z18 !\u003d 0) → B36 | else → B58",
      "B36 : If($i64 \u003c 48) → B37 | else → B39",
      "B37 : If($i65 \u003e 57) → B38 | else → B39",
      "B39 : If($i66 !\u003d 46) → B40 | else → B44",
      "B40 : If(z29 !\u003d 0) → B41 | else → B42",
      "B41 : If(z22 \u003d\u003d false) → B42 | else → B43",
      "B44 : If($i67 \u003d\u003d 101) → B45 | else → B46",
      "B45 : If($i68 !\u003d 69) → B46 | else → B51",
      "B46 : If(z23 \u003d\u003d false) → B47 | else → B48",
      "B48 : If(z16 !\u003d 0) → B49 | else → B50",
      "B51 : If($i69 \u003d\u003d 43) → B52 | else → B53",
      "B52 : If($i70 !\u003d 45) → B53 | else → B56",
      "B53 : If(z13 !\u003d 0) → B54 | else → B55",
      "B58 : If(i45 \u003e\u003d $i46) → B59 | else → B85",
      "B59 : If($i71 \u003c 48) → B60 | else → B62",
      "B60 : If($i72 \u003e 57) → B61 | else → B62",
      "B62 : If($i73 \u003d\u003d 101) → B63 | else → B64",
      "B63 : If($i74 !\u003d 69) → B64 | else → B65",
      "B65 : If($i75 !\u003d 46) → B66 | else → B70",
      "B66 : If(z31 !\u003d 0) → B67 | else → B68",
      "B67 : If(z21 \u003d\u003d false) → B68 | else → B69",
      "B70 : If(z12 !\u003d 0) → B71 | else → B76",
      "B71 : If($i76 \u003d\u003d 100) → B72 | else → B75",
      "B72 : If($i77 \u003d\u003d 68) → B73 | else → B75",
      "B73 : If($i78 \u003d\u003d 102) → B74 | else → B75",
      "B74 : If($i79 !\u003d 70) → B75 | else → B76",
      "B76 : If($i80 \u003d\u003d 108) → B77 | else → B78",
      "B77 : If($i81 !\u003d 76) → B78 | else → B84",
      "B78 : If(z14 \u003d\u003d false) → B79 | else → B82",
      "B79 : If(z20 !\u003d 0) → B80 | else → B82",
      "B80 : If(z30 !\u003d 0) → B81 | else → B82",
      "B85 : If(z10 !\u003d 0) → B86 | else → B88",
      "B86 : If(z15 \u003d\u003d false) → B87 | else → B88"
    ],
    "blockList": [
      "B0 {\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r1 \u003d r0.toCharArray()\n  i41 \u003d lengthof r1\n  z3 \u003d 0\n  z23 \u003d 0\n  z22 \u003d 0\n  z21 \u003d 0\n  z20 \u003d 0\n  z4 \u003d 0\n  z31 \u003d 0\n  z30 \u003d 0\n  z29 \u003d 0\n  z5 \u003d 0\n  z13 \u003d 0\n  z12 \u003d 0\n  z11 \u003d 0\n  z10 \u003d 0\n  z6 \u003d 0\n  z19 \u003d 0\n  z18 \u003d 0\n  z17 \u003d 0\n  z16 \u003d 0\n  z15 \u003d 0\n  z14 \u003d 0\n  $c0 \u003d r1[0]\n  $i49 \u003d (int) $c0\n  if ($i49 \u003d\u003d 45) goto B3 else B4\n}",
      "B3 {\n  $c40 \u003d r1[0]\n  $i50 \u003d (int) $c40\n  if ($i50 !\u003d 43) goto B4 else B5\n}",
      "B4 {\n  $z28 \u003d 1\n  $b48 \u003d 1\n  $z27 \u003d 1\n  $b47 \u003d 1\n  $z26 \u003d 1\n  $z25 \u003d 1\n  $z24 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z28 \u003d 0\n  $b48 \u003d 0\n  $z27 \u003d 0\n  $b47 \u003d 0\n  $z26 \u003d 0\n  $z25 \u003d 0\n  $z24 \u003d 0\n}",
      "B6 {\n  b1 \u003d $b47\n  $i2 \u003d $z27 + 1\n  if (i41 \u003c\u003d $i2) goto B7 else B31\n}",
      "B7 {\n  $c22 \u003d r1[$b48]\n  $i51 \u003d (int) $c22\n  if ($i51 !\u003d 48) goto B8 else B31\n}",
      "B8 {\n  $z1 \u003d StringUtils.contains(r0, 46)\n  if ($z1 !\u003d 0) goto B9 else B31\n}",
      "B9 {\n  $i23 \u003d $z24 + 1\n  $c24 \u003d r1[$i23]\n  $i52 \u003d (int) $c24\n  if ($i52 \u003d\u003d 120) goto B10 else B11\n}",
      "B10 {\n  $i32 \u003d $z25 + 1\n  $c33 \u003d r1[$i32]\n  $i53 \u003d (int) $c33\n  if ($i53 !\u003d 88) goto B11 else B23\n}",
      "B11 {\n  $i39 \u003d b1 + 2\n  i42 \u003d $i39\n  if ($i39 !\u003d i41) goto B12 else B13\n}",
      "B12 {\n  return\n}",
      "B13 {\n  $i25 \u003d lengthof r1\n  if (i42 \u003e\u003d $i25) goto B14 else B22\n}",
      "B14 {\n  $c26 \u003d r1[i42]\n  $i54 \u003d (int) $c26\n  if ($i54 \u003c 48) goto B15 else B16\n}",
      "B15 {\n  $c31 \u003d r1[i42]\n  $i55 \u003d (int) $c31\n  if ($i55 \u003c\u003d 57) goto B16 else B21\n}",
      "B16 {\n  $c27 \u003d r1[i42]\n  $i56 \u003d (int) $c27\n  if ($i56 \u003c 97) goto B17 else B18\n}",
      "B17 {\n  $c30 \u003d r1[i42]\n  $i57 \u003d (int) $c30\n  if ($i57 \u003c\u003d 102) goto B18 else B21\n}",
      "B18 {\n  $c28 \u003d r1[i42]\n  $i58 \u003d (int) $c28\n  if ($i58 \u003c 65) goto B19 else B20\n}",
      "B19 {\n  $c29 \u003d r1[i42]\n  $i59 \u003d (int) $c29\n  if ($i59 \u003c\u003d 70) goto B20 else B21\n}",
      "B20 {\n  return\n}",
      "B21 {\n  i42 \u003d i42 + 1\n  goto B13\n}",
      "B22 {\n  return\n}",
      "B23 {\n  $i34 \u003d $z26 + 1\n  $c35 \u003d r1[$i34]\n  $z2 \u003d Character.isDigit($c35)\n  if ($z2 \u003d\u003d false) goto B24 else B31\n}",
      "B24 {\n  i43 \u003d $z28 + 1\n}",
      "B25 {\n  $i36 \u003d lengthof r1\n  if (i43 \u003e\u003d $i36) goto B26 else B30\n}",
      "B26 {\n  $c37 \u003d r1[i43]\n  $i60 \u003d (int) $c37\n  if ($i60 \u003c 48) goto B27 else B28\n}",
      "B27 {\n  $c38 \u003d r1[i43]\n  $i61 \u003d (int) $c38\n  if ($i61 \u003c\u003d 55) goto B28 else B29\n}",
      "B28 {\n  return\n}",
      "B29 {\n  i43 \u003d i43 + 1\n  goto B25\n}",
      "B30 {\n  return\n}",
      "B31 {\n  $i63 \u003d (int) -1\n  i44 \u003d i41 + $i63\n  i45 \u003d b1\n}",
      "B32 {\n  if (i45 \u003c i44) goto B33 else B36\n}",
      "B33 {\n  $i10 \u003d i44 + 1\n  if (i45 \u003e\u003d $i10) goto B34 else B58\n}",
      "B34 {\n  if (z11 \u003d\u003d false) goto B35 else B58\n}",
      "B35 {\n  if (z18 !\u003d 0) goto B36 else B58\n}",
      "B36 {\n  $c3 \u003d r1[i45]\n  $i64 \u003d (int) $c3\n  if ($i64 \u003c 48) goto B37 else B39\n}",
      "B37 {\n  $c9 \u003d r1[i45]\n  $i65 \u003d (int) $c9\n  if ($i65 \u003e 57) goto B38 else B39\n}",
      "B38 {\n  z6 \u003d 1\n  z19 \u003d 1\n  z18 \u003d 1\n  z17 \u003d 1\n  z16 \u003d 1\n  z15 \u003d 1\n  z14 \u003d 1\n  z5 \u003d 0\n  z13 \u003d 0\n  z12 \u003d 0\n  z11 \u003d 0\n  z10 \u003d 0\n  goto B57\n}",
      "B39 {\n  $c4 \u003d r1[i45]\n  $i66 \u003d (int) $c4\n  if ($i66 !\u003d 46) goto B40 else B44\n}",
      "B40 {\n  if (z29 !\u003d 0) goto B41 else B42\n}",
      "B41 {\n  if (z22 \u003d\u003d false) goto B42 else B43\n}",
      "B42 {\n  return\n}",
      "B43 {\n  z4 \u003d 1\n  z31 \u003d 1\n  z30 \u003d 1\n  z29 \u003d 1\n  goto B57\n}",
      "B44 {\n  $c5 \u003d r1[i45]\n  $i67 \u003d (int) $c5\n  if ($i67 \u003d\u003d 101) goto B45 else B46\n}",
      "B45 {\n  $c6 \u003d r1[i45]\n  $i68 \u003d (int) $c6\n  if ($i68 !\u003d 69) goto B46 else B51\n}",
      "B46 {\n  if (z23 \u003d\u003d false) goto B47 else B48\n}",
      "B47 {\n  return\n}",
      "B48 {\n  if (z16 !\u003d 0) goto B49 else B50\n}",
      "B49 {\n  return\n}",
      "B50 {\n  z3 \u003d 1\n  z23 \u003d 1\n  z22 \u003d 1\n  z21 \u003d 1\n  z20 \u003d 1\n  z5 \u003d 1\n  z13 \u003d 1\n  z12 \u003d 1\n  z11 \u003d 1\n  z10 \u003d 1\n  goto B57\n}",
      "B51 {\n  $c7 \u003d r1[i45]\n  $i69 \u003d (int) $c7\n  if ($i69 \u003d\u003d 43) goto B52 else B53\n}",
      "B52 {\n  $c8 \u003d r1[i45]\n  $i70 \u003d (int) $c8\n  if ($i70 !\u003d 45) goto B53 else B56\n}",
      "B53 {\n  if (z13 !\u003d 0) goto B54 else B55\n}",
      "B54 {\n  return\n}",
      "B55 {\n  z5 \u003d 0\n  z13 \u003d 0\n  z12 \u003d 0\n  z11 \u003d 0\n  z10 \u003d 0\n  z6 \u003d 0\n  z19 \u003d 0\n  z18 \u003d 0\n  z17 \u003d 0\n  z16 \u003d 0\n  z15 \u003d 0\n  z14 \u003d 0\n  goto B57\n}",
      "B56 {\n  return\n}",
      "B57 {\n  i45 \u003d i45 + 1\n  goto B32\n}",
      "B58 {\n  $i46 \u003d lengthof r1\n  if (i45 \u003e\u003d $i46) goto B59 else B85\n}",
      "B59 {\n  $c11 \u003d r1[i45]\n  $i71 \u003d (int) $c11\n  if ($i71 \u003c 48) goto B60 else B62\n}",
      "B60 {\n  $c21 \u003d r1[i45]\n  $i72 \u003d (int) $c21\n  if ($i72 \u003e 57) goto B61 else B62\n}",
      "B61 {\n  return\n}",
      "B62 {\n  $c12 \u003d r1[i45]\n  $i73 \u003d (int) $c12\n  if ($i73 \u003d\u003d 101) goto B63 else B64\n}",
      "B63 {\n  $c13 \u003d r1[i45]\n  $i74 \u003d (int) $c13\n  if ($i74 !\u003d 69) goto B64 else B65\n}",
      "B64 {\n  return\n}",
      "B65 {\n  $c14 \u003d r1[i45]\n  $i75 \u003d (int) $c14\n  if ($i75 !\u003d 46) goto B66 else B70\n}",
      "B66 {\n  if (z31 !\u003d 0) goto B67 else B68\n}",
      "B67 {\n  if (z21 \u003d\u003d false) goto B68 else B69\n}",
      "B68 {\n  return\n}",
      "B69 {\n  return\n}",
      "B70 {\n  if (z12 !\u003d 0) goto B71 else B76\n}",
      "B71 {\n  $c17 \u003d r1[i45]\n  $i76 \u003d (int) $c17\n  if ($i76 \u003d\u003d 100) goto B72 else B75\n}",
      "B72 {\n  $c18 \u003d r1[i45]\n  $i77 \u003d (int) $c18\n  if ($i77 \u003d\u003d 68) goto B73 else B75\n}",
      "B73 {\n  $c19 \u003d r1[i45]\n  $i78 \u003d (int) $c19\n  if ($i78 \u003d\u003d 102) goto B74 else B75\n}",
      "B74 {\n  $c20 \u003d r1[i45]\n  $i79 \u003d (int) $c20\n  if ($i79 !\u003d 70) goto B75 else B76\n}",
      "B75 {\n  return\n}",
      "B76 {\n  $c15 \u003d r1[i45]\n  $i80 \u003d (int) $c15\n  if ($i80 \u003d\u003d 108) goto B77 else B78\n}",
      "B77 {\n  $c16 \u003d r1[i45]\n  $i81 \u003d (int) $c16\n  if ($i81 !\u003d 76) goto B78 else B84\n}",
      "B78 {\n  if (z14 \u003d\u003d false) goto B79 else B82\n}",
      "B79 {\n  if (z20 !\u003d 0) goto B80 else B82\n}",
      "B80 {\n  if (z30 !\u003d 0) goto B81 else B82\n}",
      "B81 {\n  $z8 \u003d 1\n  goto B83\n}",
      "B82 {\n  $z8 \u003d 0\n}",
      "B83 {\n  return\n}",
      "B84 {\n  return\n}",
      "B85 {\n  if (z10 !\u003d 0) goto B86 else B88\n}",
      "B86 {\n  if (z15 \u003d\u003d false) goto B87 else B88\n}",
      "B87 {\n  $z9 \u003d 1\n  goto B89\n}",
      "B88 {\n  $z9 \u003d 0\n}",
      "B89 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B31",
      "B7 --\u003e B8",
      "B7 --\u003e B31",
      "B8 --\u003e B9",
      "B8 --\u003e B31",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B10 --\u003e B23",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B13 --\u003e B22",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B15 --\u003e B21",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B17 --\u003e B21",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e [EXIT]",
      "B21 --\u003e B13",
      "B22 --\u003e [EXIT]",
      "B23 --\u003e B24",
      "B23 --\u003e B31",
      "B24 --\u003e B25",
      "B25 --\u003e B26",
      "B25 --\u003e B30",
      "B26 --\u003e B27",
      "B26 --\u003e B28",
      "B27 --\u003e B28",
      "B27 --\u003e B29",
      "B28 --\u003e [EXIT]",
      "B29 --\u003e B25",
      "B30 --\u003e [EXIT]",
      "B31 --\u003e B32",
      "B32 --\u003e B33",
      "B32 --\u003e B36",
      "B33 --\u003e B34",
      "B33 --\u003e B58",
      "B34 --\u003e B35",
      "B34 --\u003e B58",
      "B35 --\u003e B36",
      "B35 --\u003e B58",
      "B36 --\u003e B37",
      "B36 --\u003e B39",
      "B37 --\u003e B38",
      "B37 --\u003e B39",
      "B38 --\u003e B57",
      "B39 --\u003e B40",
      "B39 --\u003e B44",
      "B40 --\u003e B41",
      "B40 --\u003e B42",
      "B41 --\u003e B42",
      "B41 --\u003e B43",
      "B42 --\u003e [EXIT]",
      "B43 --\u003e B57",
      "B44 --\u003e B45",
      "B44 --\u003e B46",
      "B45 --\u003e B46",
      "B45 --\u003e B51",
      "B46 --\u003e B47",
      "B46 --\u003e B48",
      "B47 --\u003e [EXIT]",
      "B48 --\u003e B49",
      "B48 --\u003e B50",
      "B49 --\u003e [EXIT]",
      "B50 --\u003e B57",
      "B51 --\u003e B52",
      "B51 --\u003e B53",
      "B52 --\u003e B53",
      "B52 --\u003e B56",
      "B53 --\u003e B54",
      "B53 --\u003e B55",
      "B54 --\u003e [EXIT]",
      "B55 --\u003e B57",
      "B56 --\u003e [EXIT]",
      "B57 --\u003e B32",
      "B58 --\u003e B59",
      "B58 --\u003e B85",
      "B59 --\u003e B60",
      "B59 --\u003e B62",
      "B60 --\u003e B61",
      "B60 --\u003e B62",
      "B61 --\u003e [EXIT]",
      "B62 --\u003e B63",
      "B62 --\u003e B64",
      "B63 --\u003e B64",
      "B63 --\u003e B65",
      "B64 --\u003e [EXIT]",
      "B65 --\u003e B66",
      "B65 --\u003e B70",
      "B66 --\u003e B67",
      "B66 --\u003e B68",
      "B67 --\u003e B68",
      "B67 --\u003e B69",
      "B68 --\u003e [EXIT]",
      "B69 --\u003e [EXIT]",
      "B70 --\u003e B71",
      "B70 --\u003e B76",
      "B71 --\u003e B72",
      "B71 --\u003e B75",
      "B72 --\u003e B73",
      "B72 --\u003e B75",
      "B73 --\u003e B74",
      "B73 --\u003e B75",
      "B74 --\u003e B75",
      "B74 --\u003e B76",
      "B75 --\u003e [EXIT]",
      "B76 --\u003e B77",
      "B76 --\u003e B78",
      "B77 --\u003e B78",
      "B77 --\u003e B84",
      "B78 --\u003e B79",
      "B78 --\u003e B82",
      "B79 --\u003e B80",
      "B79 --\u003e B82",
      "B80 --\u003e B81",
      "B80 --\u003e B82",
      "B81 --\u003e B83",
      "B82 --\u003e B83",
      "B83 --\u003e [EXIT]",
      "B84 --\u003e [EXIT]",
      "B85 --\u003e B86",
      "B85 --\u003e B88",
      "B86 --\u003e B87",
      "B86 --\u003e B88",
      "B87 --\u003e B89",
      "B88 --\u003e B89",
      "B89 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "isParsable",
    "signature": "boolean isParsable(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (StringUtils.isEmpty(str)) {\r\n        return false;\r\n    }\r\n    if (str.charAt(str.length() - 1) \u003d\u003d \u0027.\u0027) {\r\n        return false;\r\n    }\r\n    if (str.charAt(0) \u003d\u003d \u0027-\u0027) {\r\n        if (str.length() \u003d\u003d 1) {\r\n            return false;\r\n        }\r\n        return withDecimalsParsing(str, 1);\r\n    }\r\n    return withDecimalsParsing(str, 0);\r\n}",
    "nodes": 9,
    "edges": 8,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($i5 !\u003d 46) → B3 | else → B4",
      "B4 : If($i6 !\u003d 45) → B5 | else → B8",
      "B5 : If($i4 !\u003d 1) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d r0.length()\n  $i1 \u003d $i0 - 1\n  $c2 \u003d r0.charAt($i1)\n  $i5 \u003d (int) $c2\n  if ($i5 !\u003d 46) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $c3 \u003d r0.charAt(0)\n  $i6 \u003d (int) $c3\n  if ($i6 !\u003d 45) goto B5 else B8\n}",
      "B5 {\n  $i4 \u003d r0.length()\n  if ($i4 !\u003d 1) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $z2 \u003d NumberUtils.withDecimalsParsing(r0, 1)\n  return\n}",
      "B8 {\n  $z1 \u003d NumberUtils.withDecimalsParsing(r0, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NumberUtils#withDecimalsParsing(...2)",
        "body": "{\r\n    int decimalPoints \u003d 0;\r\n    for (int i \u003d beginIdx; i \u003c str.length(); i++) {\r\n        final char ch \u003d str.charAt(i);\r\n        final boolean isDecimalPoint \u003d ch \u003d\u003d \u0027.\u0027;\r\n        if (isDecimalPoint) {\r\n            decimalPoints++;\r\n        }\r\n        if (decimalPoints \u003e 1) {\r\n            return false;\r\n        }\r\n        if (!isDecimalPoint \u0026\u0026 !Character.isDigit(ch)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "max",
    "signature": "byte max(byte[])",
    "visibility": "public",
    "body": "{\r\n    // Validates input\r\n    validateArray(array);\r\n    // Finds and returns max\r\n    byte max \u003d array[0];\r\n    for (int i \u003d 1; i \u003c array.length; i++) {\r\n        if (array[i] \u003e max) {\r\n            max \u003d array[i];\r\n        }\r\n    }\r\n    return max;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d $i0) → B2 | else → B5",
      "B2 : If($i4 \u003c\u003d $i5) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  NumberUtils.validateArray(r0)\n  b2 \u003d r0[0]\n  i3 \u003d 1\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if (i3 \u003e\u003d $i0) goto B2 else B5\n}",
      "B2 {\n  $b1 \u003d r0[i3]\n  $i4 \u003d (int) $b1\n  $i5 \u003d (int) b2\n  if ($i4 \u003c\u003d $i5) goto B3 else B4\n}",
      "B3 {\n  b2 \u003d r0[i3]\n}",
      "B4 {\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NumberUtils#validateArray(...1)",
        "body": "{\r\n    Objects.requireNonNull(array, \"array\");\r\n    Validate.isTrue(Array.getLength(array) !\u003d 0, \"Array cannot be empty.\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "max",
    "signature": "byte max(byte,byte,byte)",
    "visibility": "public",
    "body": "{\r\n    if (b \u003e a) {\r\n        a \u003d b;\r\n    }\r\n    if (c \u003e a) {\r\n        a \u003d c;\r\n    }\r\n    return a;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i3 \u003c\u003d $i4) → B1 | else → B2",
      "B2 : If($i5 \u003c\u003d $i6) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  b2 :\u003d @parameter0: byte\n  b0 :\u003d @parameter1: byte\n  b1 :\u003d @parameter2: byte\n  $i3 \u003d (int) b0\n  $i4 \u003d (int) b2\n  if ($i3 \u003c\u003d $i4) goto B1 else B2\n}",
      "B1 {\n  b2 \u003d b0\n}",
      "B2 {\n  $i5 \u003d (int) b1\n  $i6 \u003d (int) b2\n  if ($i5 \u003c\u003d $i6) goto B3 else B4\n}",
      "B3 {\n  b2 \u003d b1\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "max",
    "signature": "double max(double[])",
    "visibility": "public",
    "body": "{\r\n    // Validates input\r\n    validateArray(array);\r\n    // Finds and returns max\r\n    double max \u003d array[0];\r\n    for (int j \u003d 1; j \u003c array.length; j++) {\r\n        if (Double.isNaN(array[j])) {\r\n            return Double.NaN;\r\n        }\r\n        if (array[j] \u003e max) {\r\n            max \u003d array[j];\r\n        }\r\n    }\r\n    return max;\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d $i0) → B2 | else → B7",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($i3 \u003c\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  NumberUtils.validateArray(r0)\n  d2 \u003d r0[0]\n  i2 \u003d 1\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if (i2 \u003e\u003d $i0) goto B2 else B7\n}",
      "B2 {\n  $d0 \u003d r0[i2]\n  $z0 \u003d Double.isNaN($d0)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $d1 \u003d r0[i2]\n  $b1 \u003d $d1 cmpl d2\n  $i3 \u003d (int) $b1\n  if ($i3 \u003c\u003d 0) goto B5 else B6\n}",
      "B5 {\n  d2 \u003d r0[i2]\n}",
      "B6 {\n  i2 \u003d i2 + 1\n  goto B1\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B1",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NumberUtils#validateArray(...1)",
        "body": "{\r\n    Objects.requireNonNull(array, \"array\");\r\n    Validate.isTrue(Array.getLength(array) !\u003d 0, \"Array cannot be empty.\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "max",
    "signature": "float max(float[])",
    "visibility": "public",
    "body": "{\r\n    // Validates input\r\n    validateArray(array);\r\n    // Finds and returns max\r\n    float max \u003d array[0];\r\n    for (int j \u003d 1; j \u003c array.length; j++) {\r\n        if (Float.isNaN(array[j])) {\r\n            return Float.NaN;\r\n        }\r\n        if (array[j] \u003e max) {\r\n            max \u003d array[j];\r\n        }\r\n    }\r\n    return max;\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d $i0) → B2 | else → B7",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($i3 \u003c\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  NumberUtils.validateArray(r0)\n  f2 \u003d r0[0]\n  i2 \u003d 1\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if (i2 \u003e\u003d $i0) goto B2 else B7\n}",
      "B2 {\n  $f0 \u003d r0[i2]\n  $z0 \u003d Float.isNaN($f0)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $f1 \u003d r0[i2]\n  $b1 \u003d $f1 cmpl f2\n  $i3 \u003d (int) $b1\n  if ($i3 \u003c\u003d 0) goto B5 else B6\n}",
      "B5 {\n  f2 \u003d r0[i2]\n}",
      "B6 {\n  i2 \u003d i2 + 1\n  goto B1\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B1",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NumberUtils#validateArray(...1)",
        "body": "{\r\n    Objects.requireNonNull(array, \"array\");\r\n    Validate.isTrue(Array.getLength(array) !\u003d 0, \"Array cannot be empty.\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "max",
    "signature": "int max(int[])",
    "visibility": "public",
    "body": "{\r\n    // Validates input\r\n    validateArray(array);\r\n    // Finds and returns max\r\n    int max \u003d array[0];\r\n    for (int j \u003d 1; j \u003c array.length; j++) {\r\n        if (array[j] \u003e max) {\r\n            max \u003d array[j];\r\n        }\r\n    }\r\n    return max;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d $i0) → B2 | else → B5",
      "B2 : If($i1 \u003c\u003d i2) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  NumberUtils.validateArray(r0)\n  i2 \u003d r0[0]\n  i3 \u003d 1\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if (i3 \u003e\u003d $i0) goto B2 else B5\n}",
      "B2 {\n  $i1 \u003d r0[i3]\n  if ($i1 \u003c\u003d i2) goto B3 else B4\n}",
      "B3 {\n  i2 \u003d r0[i3]\n}",
      "B4 {\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NumberUtils#validateArray(...1)",
        "body": "{\r\n    Objects.requireNonNull(array, \"array\");\r\n    Validate.isTrue(Array.getLength(array) !\u003d 0, \"Array cannot be empty.\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "max",
    "signature": "int max(int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (b \u003e a) {\r\n        a \u003d b;\r\n    }\r\n    if (c \u003e a) {\r\n        a \u003d c;\r\n    }\r\n    return a;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003c\u003d i2) → B1 | else → B2",
      "B2 : If(i1 \u003c\u003d i2) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  i2 :\u003d @parameter0: int\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  if (i0 \u003c\u003d i2) goto B1 else B2\n}",
      "B1 {\n  i2 \u003d i0\n}",
      "B2 {\n  if (i1 \u003c\u003d i2) goto B3 else B4\n}",
      "B3 {\n  i2 \u003d i1\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "max",
    "signature": "long max(long[])",
    "visibility": "public",
    "body": "{\r\n    // Validates input\r\n    validateArray(array);\r\n    // Finds and returns max\r\n    long max \u003d array[0];\r\n    for (int j \u003d 1; j \u003c array.length; j++) {\r\n        if (array[j] \u003e max) {\r\n            max \u003d array[j];\r\n        }\r\n    }\r\n    return max;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i4 \u003e\u003d $i0) → B2 | else → B5",
      "B2 : If($i5 \u003c\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  NumberUtils.validateArray(r0)\n  l3 \u003d r0[0]\n  i4 \u003d 1\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if (i4 \u003e\u003d $i0) goto B2 else B5\n}",
      "B2 {\n  $l1 \u003d r0[i4]\n  $b2 \u003d $l1 cmp l3\n  $i5 \u003d (int) $b2\n  if ($i5 \u003c\u003d 0) goto B3 else B4\n}",
      "B3 {\n  l3 \u003d r0[i4]\n}",
      "B4 {\n  i4 \u003d i4 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NumberUtils#validateArray(...1)",
        "body": "{\r\n    Objects.requireNonNull(array, \"array\");\r\n    Validate.isTrue(Array.getLength(array) !\u003d 0, \"Array cannot be empty.\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "max",
    "signature": "long max(long,long,long)",
    "visibility": "public",
    "body": "{\r\n    if (b \u003e a) {\r\n        a \u003d b;\r\n    }\r\n    if (c \u003e a) {\r\n        a \u003d c;\r\n    }\r\n    return a;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i5 \u003c\u003d 0) → B1 | else → B2",
      "B2 : If($i6 \u003c\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  l4 :\u003d @parameter0: long\n  l0 :\u003d @parameter1: long\n  l2 :\u003d @parameter2: long\n  $b1 \u003d l0 cmp l4\n  $i5 \u003d (int) $b1\n  if ($i5 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  l4 \u003d l0\n}",
      "B2 {\n  $b3 \u003d l2 cmp l4\n  $i6 \u003d (int) $b3\n  if ($i6 \u003c\u003d 0) goto B3 else B4\n}",
      "B3 {\n  l4 \u003d l2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "max",
    "signature": "short max(short[])",
    "visibility": "public",
    "body": "{\r\n    // Validates input\r\n    validateArray(array);\r\n    // Finds and returns max\r\n    short max \u003d array[0];\r\n    for (int i \u003d 1; i \u003c array.length; i++) {\r\n        if (array[i] \u003e max) {\r\n            max \u003d array[i];\r\n        }\r\n    }\r\n    return max;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d $i0) → B2 | else → B5",
      "B2 : If($i4 \u003c\u003d $i5) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  NumberUtils.validateArray(r0)\n  s2 \u003d r0[0]\n  i3 \u003d 1\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if (i3 \u003e\u003d $i0) goto B2 else B5\n}",
      "B2 {\n  $s1 \u003d r0[i3]\n  $i4 \u003d (int) $s1\n  $i5 \u003d (int) s2\n  if ($i4 \u003c\u003d $i5) goto B3 else B4\n}",
      "B3 {\n  s2 \u003d r0[i3]\n}",
      "B4 {\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NumberUtils#validateArray(...1)",
        "body": "{\r\n    Objects.requireNonNull(array, \"array\");\r\n    Validate.isTrue(Array.getLength(array) !\u003d 0, \"Array cannot be empty.\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "max",
    "signature": "short max(short,short,short)",
    "visibility": "public",
    "body": "{\r\n    if (b \u003e a) {\r\n        a \u003d b;\r\n    }\r\n    if (c \u003e a) {\r\n        a \u003d c;\r\n    }\r\n    return a;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i3 \u003c\u003d $i4) → B1 | else → B2",
      "B2 : If($i5 \u003c\u003d $i6) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  s2 :\u003d @parameter0: short\n  s0 :\u003d @parameter1: short\n  s1 :\u003d @parameter2: short\n  $i3 \u003d (int) s0\n  $i4 \u003d (int) s2\n  if ($i3 \u003c\u003d $i4) goto B1 else B2\n}",
      "B1 {\n  s2 \u003d s0\n}",
      "B2 {\n  $i5 \u003d (int) s1\n  $i6 \u003d (int) s2\n  if ($i5 \u003c\u003d $i6) goto B3 else B4\n}",
      "B3 {\n  s2 \u003d s1\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "min",
    "signature": "byte min(byte[])",
    "visibility": "public",
    "body": "{\r\n    // Validates input\r\n    validateArray(array);\r\n    // Finds and returns min\r\n    byte min \u003d array[0];\r\n    for (int i \u003d 1; i \u003c array.length; i++) {\r\n        if (array[i] \u003c min) {\r\n            min \u003d array[i];\r\n        }\r\n    }\r\n    return min;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d $i0) → B2 | else → B5",
      "B2 : If($i4 \u003e\u003d $i5) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  NumberUtils.validateArray(r0)\n  b2 \u003d r0[0]\n  i3 \u003d 1\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if (i3 \u003e\u003d $i0) goto B2 else B5\n}",
      "B2 {\n  $b1 \u003d r0[i3]\n  $i4 \u003d (int) $b1\n  $i5 \u003d (int) b2\n  if ($i4 \u003e\u003d $i5) goto B3 else B4\n}",
      "B3 {\n  b2 \u003d r0[i3]\n}",
      "B4 {\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NumberUtils#validateArray(...1)",
        "body": "{\r\n    Objects.requireNonNull(array, \"array\");\r\n    Validate.isTrue(Array.getLength(array) !\u003d 0, \"Array cannot be empty.\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "min",
    "signature": "byte min(byte,byte,byte)",
    "visibility": "public",
    "body": "{\r\n    if (b \u003c a) {\r\n        a \u003d b;\r\n    }\r\n    if (c \u003c a) {\r\n        a \u003d c;\r\n    }\r\n    return a;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i3 \u003e\u003d $i4) → B1 | else → B2",
      "B2 : If($i5 \u003e\u003d $i6) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  b2 :\u003d @parameter0: byte\n  b0 :\u003d @parameter1: byte\n  b1 :\u003d @parameter2: byte\n  $i3 \u003d (int) b0\n  $i4 \u003d (int) b2\n  if ($i3 \u003e\u003d $i4) goto B1 else B2\n}",
      "B1 {\n  b2 \u003d b0\n}",
      "B2 {\n  $i5 \u003d (int) b1\n  $i6 \u003d (int) b2\n  if ($i5 \u003e\u003d $i6) goto B3 else B4\n}",
      "B3 {\n  b2 \u003d b1\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "min",
    "signature": "double min(double[])",
    "visibility": "public",
    "body": "{\r\n    // Validates input\r\n    validateArray(array);\r\n    // Finds and returns min\r\n    double min \u003d array[0];\r\n    for (int i \u003d 1; i \u003c array.length; i++) {\r\n        if (Double.isNaN(array[i])) {\r\n            return Double.NaN;\r\n        }\r\n        if (array[i] \u003c min) {\r\n            min \u003d array[i];\r\n        }\r\n    }\r\n    return min;\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d $i0) → B2 | else → B7",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($i3 \u003e\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  NumberUtils.validateArray(r0)\n  d2 \u003d r0[0]\n  i2 \u003d 1\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if (i2 \u003e\u003d $i0) goto B2 else B7\n}",
      "B2 {\n  $d0 \u003d r0[i2]\n  $z0 \u003d Double.isNaN($d0)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $d1 \u003d r0[i2]\n  $b1 \u003d $d1 cmpg d2\n  $i3 \u003d (int) $b1\n  if ($i3 \u003e\u003d 0) goto B5 else B6\n}",
      "B5 {\n  d2 \u003d r0[i2]\n}",
      "B6 {\n  i2 \u003d i2 + 1\n  goto B1\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B1",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NumberUtils#validateArray(...1)",
        "body": "{\r\n    Objects.requireNonNull(array, \"array\");\r\n    Validate.isTrue(Array.getLength(array) !\u003d 0, \"Array cannot be empty.\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "min",
    "signature": "float min(float[])",
    "visibility": "public",
    "body": "{\r\n    // Validates input\r\n    validateArray(array);\r\n    // Finds and returns min\r\n    float min \u003d array[0];\r\n    for (int i \u003d 1; i \u003c array.length; i++) {\r\n        if (Float.isNaN(array[i])) {\r\n            return Float.NaN;\r\n        }\r\n        if (array[i] \u003c min) {\r\n            min \u003d array[i];\r\n        }\r\n    }\r\n    return min;\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d $i0) → B2 | else → B7",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($i3 \u003e\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  NumberUtils.validateArray(r0)\n  f2 \u003d r0[0]\n  i2 \u003d 1\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if (i2 \u003e\u003d $i0) goto B2 else B7\n}",
      "B2 {\n  $f0 \u003d r0[i2]\n  $z0 \u003d Float.isNaN($f0)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $f1 \u003d r0[i2]\n  $b1 \u003d $f1 cmpg f2\n  $i3 \u003d (int) $b1\n  if ($i3 \u003e\u003d 0) goto B5 else B6\n}",
      "B5 {\n  f2 \u003d r0[i2]\n}",
      "B6 {\n  i2 \u003d i2 + 1\n  goto B1\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B1",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NumberUtils#validateArray(...1)",
        "body": "{\r\n    Objects.requireNonNull(array, \"array\");\r\n    Validate.isTrue(Array.getLength(array) !\u003d 0, \"Array cannot be empty.\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "min",
    "signature": "int min(int[])",
    "visibility": "public",
    "body": "{\r\n    // Validates input\r\n    validateArray(array);\r\n    // Finds and returns min\r\n    int min \u003d array[0];\r\n    for (int j \u003d 1; j \u003c array.length; j++) {\r\n        if (array[j] \u003c min) {\r\n            min \u003d array[j];\r\n        }\r\n    }\r\n    return min;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d $i0) → B2 | else → B5",
      "B2 : If($i1 \u003e\u003d i2) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  NumberUtils.validateArray(r0)\n  i2 \u003d r0[0]\n  i3 \u003d 1\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if (i3 \u003e\u003d $i0) goto B2 else B5\n}",
      "B2 {\n  $i1 \u003d r0[i3]\n  if ($i1 \u003e\u003d i2) goto B3 else B4\n}",
      "B3 {\n  i2 \u003d r0[i3]\n}",
      "B4 {\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NumberUtils#validateArray(...1)",
        "body": "{\r\n    Objects.requireNonNull(array, \"array\");\r\n    Validate.isTrue(Array.getLength(array) !\u003d 0, \"Array cannot be empty.\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "min",
    "signature": "int min(int,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (b \u003c a) {\r\n        a \u003d b;\r\n    }\r\n    if (c \u003c a) {\r\n        a \u003d c;\r\n    }\r\n    return a;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003e\u003d i2) → B1 | else → B2",
      "B2 : If(i1 \u003e\u003d i2) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  i2 :\u003d @parameter0: int\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  if (i0 \u003e\u003d i2) goto B1 else B2\n}",
      "B1 {\n  i2 \u003d i0\n}",
      "B2 {\n  if (i1 \u003e\u003d i2) goto B3 else B4\n}",
      "B3 {\n  i2 \u003d i1\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "min",
    "signature": "long min(long[])",
    "visibility": "public",
    "body": "{\r\n    // Validates input\r\n    validateArray(array);\r\n    // Finds and returns min\r\n    long min \u003d array[0];\r\n    for (int i \u003d 1; i \u003c array.length; i++) {\r\n        if (array[i] \u003c min) {\r\n            min \u003d array[i];\r\n        }\r\n    }\r\n    return min;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i4 \u003e\u003d $i0) → B2 | else → B5",
      "B2 : If($i5 \u003e\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  NumberUtils.validateArray(r0)\n  l3 \u003d r0[0]\n  i4 \u003d 1\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if (i4 \u003e\u003d $i0) goto B2 else B5\n}",
      "B2 {\n  $l1 \u003d r0[i4]\n  $b2 \u003d $l1 cmp l3\n  $i5 \u003d (int) $b2\n  if ($i5 \u003e\u003d 0) goto B3 else B4\n}",
      "B3 {\n  l3 \u003d r0[i4]\n}",
      "B4 {\n  i4 \u003d i4 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NumberUtils#validateArray(...1)",
        "body": "{\r\n    Objects.requireNonNull(array, \"array\");\r\n    Validate.isTrue(Array.getLength(array) !\u003d 0, \"Array cannot be empty.\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "min",
    "signature": "long min(long,long,long)",
    "visibility": "public",
    "body": "{\r\n    if (b \u003c a) {\r\n        a \u003d b;\r\n    }\r\n    if (c \u003c a) {\r\n        a \u003d c;\r\n    }\r\n    return a;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i5 \u003e\u003d 0) → B1 | else → B2",
      "B2 : If($i6 \u003e\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  l4 :\u003d @parameter0: long\n  l0 :\u003d @parameter1: long\n  l2 :\u003d @parameter2: long\n  $b1 \u003d l0 cmp l4\n  $i5 \u003d (int) $b1\n  if ($i5 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  l4 \u003d l0\n}",
      "B2 {\n  $b3 \u003d l2 cmp l4\n  $i6 \u003d (int) $b3\n  if ($i6 \u003e\u003d 0) goto B3 else B4\n}",
      "B3 {\n  l4 \u003d l2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "min",
    "signature": "short min(short[])",
    "visibility": "public",
    "body": "{\r\n    // Validates input\r\n    validateArray(array);\r\n    // Finds and returns min\r\n    short min \u003d array[0];\r\n    for (int i \u003d 1; i \u003c array.length; i++) {\r\n        if (array[i] \u003c min) {\r\n            min \u003d array[i];\r\n        }\r\n    }\r\n    return min;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d $i0) → B2 | else → B5",
      "B2 : If($i4 \u003e\u003d $i5) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  NumberUtils.validateArray(r0)\n  s2 \u003d r0[0]\n  i3 \u003d 1\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if (i3 \u003e\u003d $i0) goto B2 else B5\n}",
      "B2 {\n  $s1 \u003d r0[i3]\n  $i4 \u003d (int) $s1\n  $i5 \u003d (int) s2\n  if ($i4 \u003e\u003d $i5) goto B3 else B4\n}",
      "B3 {\n  s2 \u003d r0[i3]\n}",
      "B4 {\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NumberUtils#validateArray(...1)",
        "body": "{\r\n    Objects.requireNonNull(array, \"array\");\r\n    Validate.isTrue(Array.getLength(array) !\u003d 0, \"Array cannot be empty.\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "min",
    "signature": "short min(short,short,short)",
    "visibility": "public",
    "body": "{\r\n    if (b \u003c a) {\r\n        a \u003d b;\r\n    }\r\n    if (c \u003c a) {\r\n        a \u003d c;\r\n    }\r\n    return a;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i3 \u003e\u003d $i4) → B1 | else → B2",
      "B2 : If($i5 \u003e\u003d $i6) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  s2 :\u003d @parameter0: short\n  s0 :\u003d @parameter1: short\n  s1 :\u003d @parameter2: short\n  $i3 \u003d (int) s0\n  $i4 \u003d (int) s2\n  if ($i3 \u003e\u003d $i4) goto B1 else B2\n}",
      "B1 {\n  s2 \u003d s0\n}",
      "B2 {\n  $i5 \u003d (int) s1\n  $i6 \u003d (int) s2\n  if ($i5 \u003e\u003d $i6) goto B3 else B4\n}",
      "B3 {\n  s2 \u003d s1\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "toDouble",
    "signature": "double toDouble(java.math.BigDecimal,double)",
    "visibility": "public",
    "body": "{\r\n    return value \u003d\u003d null ? defaultValue : value.doubleValue();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BigDecimal\n  d0 :\u003d @parameter1: double\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $d1 \u003d d0\n  goto B3\n}",
      "B2 {\n  $d1 \u003d r0.doubleValue()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "toScaledBigDecimal",
    "signature": "java.math.BigDecimal toScaledBigDecimal(java.math.BigDecimal,int,java.math.RoundingMode)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d null) {\r\n        return BigDecimal.ZERO;\r\n    }\r\n    return value.setScale(scale, roundingMode \u003d\u003d null ? RoundingMode.HALF_EVEN : roundingMode);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r1 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  BigDecimal\n  i0 :\u003d @parameter1: int\n  RoundingMode\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d BigDecimal ZERO\u003e\n  return\n}",
      "B2 {\n  if (r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d RoundingMode HALF_EVEN\u003e\n  goto B5\n}",
      "B4 {\n  $r4 \u003d r1\n}",
      "B5 {\n  $r2 \u003d r0.setScale(i0, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "toScaledBigDecimal",
    "signature": "java.math.BigDecimal toScaledBigDecimal(java.lang.Double,int,java.math.RoundingMode)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d null) {\r\n        return BigDecimal.ZERO;\r\n    }\r\n    return toScaledBigDecimal(BigDecimal.valueOf(value), scale, roundingMode);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Double\n  i0 :\u003d @parameter1: int\n  RoundingMode\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d BigDecimal ZERO\u003e\n  return\n}",
      "B2 {\n  $d0 \u003d r0.doubleValue()\n  $r2 \u003d BigDecimal.valueOf($d0)\n  $r3 \u003d NumberUtils.toScaledBigDecimal($r2, i0, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NumberUtils#toScaledBigDecimal(...3)",
        "body": "{\r\n    if (value \u003d\u003d null) {\r\n        return BigDecimal.ZERO;\r\n    }\r\n    return value.setScale(scale, roundingMode \u003d\u003d null ? RoundingMode.HALF_EVEN : roundingMode);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "toScaledBigDecimal",
    "signature": "java.math.BigDecimal toScaledBigDecimal(java.lang.Float,int,java.math.RoundingMode)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d null) {\r\n        return BigDecimal.ZERO;\r\n    }\r\n    return toScaledBigDecimal(BigDecimal.valueOf(value), scale, roundingMode);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Float\n  i0 :\u003d @parameter1: int\n  RoundingMode\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d BigDecimal ZERO\u003e\n  return\n}",
      "B2 {\n  $f0 \u003d r0.floatValue()\n  $d0 \u003d (double) $f0\n  $r2 \u003d BigDecimal.valueOf($d0)\n  $r3 \u003d NumberUtils.toScaledBigDecimal($r2, i0, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NumberUtils#toScaledBigDecimal(...3)",
        "body": "{\r\n    if (value \u003d\u003d null) {\r\n        return BigDecimal.ZERO;\r\n    }\r\n    return value.setScale(scale, roundingMode \u003d\u003d null ? RoundingMode.HALF_EVEN : roundingMode);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.math.NumberUtils",
    "methodName": "toScaledBigDecimal",
    "signature": "java.math.BigDecimal toScaledBigDecimal(java.lang.String,int,java.math.RoundingMode)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d null) {\r\n        return BigDecimal.ZERO;\r\n    }\r\n    return toScaledBigDecimal(createBigDecimal(value), scale, roundingMode);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  i0 :\u003d @parameter1: int\n  RoundingMode\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d BigDecimal ZERO\u003e\n  return\n}",
      "B2 {\n  $r2 \u003d NumberUtils.createBigDecimal(r0)\n  $r3 \u003d NumberUtils.toScaledBigDecimal($r2, i0, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NumberUtils#createBigDecimal(...1)",
        "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\r\n    if (StringUtils.isBlank(str)) {\r\n        throw new NumberFormatException(\"A blank string is not a valid number\");\r\n    }\r\n    return new BigDecimal(str);\r\n}"
      },
      {
        "name": "NumberUtils#toScaledBigDecimal(...3)",
        "body": "{\r\n    if (value \u003d\u003d null) {\r\n        return BigDecimal.ZERO;\r\n    }\r\n    return value.setScale(scale, roundingMode \u003d\u003d null ? RoundingMode.HALF_EVEN : roundingMode);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.mutable.MutableBoolean",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj instanceof MutableBoolean) {\r\n        return value \u003d\u003d ((MutableBoolean) obj).booleanValue();\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B5",
      "B1 : If($z1 !\u003d $z2) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MutableBoolean\n  Object\n  $z0 \u003d MutableBoolean\n  if ($z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  $z1 \u003d MutableBoolean: boolean value\u003e\n  $r2 \u003d MutableBoolean) r0\n  $z2 \u003d $r2.booleanValue()\n  if ($z1 !\u003d $z2) goto B2 else B3\n}",
      "B2 {\n  $z3 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z3 \u003d 0\n}",
      "B4 {\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.mutable.MutableBoolean",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    return value ? Boolean.TRUE.hashCode() : Boolean.FALSE.hashCode();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MutableBoolean\n  $z0 \u003d MutableBoolean: boolean value\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Boolean TRUE\u003e\n  $i0 \u003d $r2.hashCode()\n  goto B3\n}",
      "B2 {\n  $r1 \u003d Boolean FALSE\u003e\n  $i0 \u003d $r1.hashCode()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.mutable.MutableBoolean",
    "methodName": "isFalse",
    "signature": "boolean isFalse()",
    "visibility": "public",
    "body": "{\r\n    return !value;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MutableBoolean\n  $z0 \u003d MutableBoolean: boolean value\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.mutable.MutableByte",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj instanceof MutableByte) {\r\n        return value \u003d\u003d ((MutableByte) obj).byteValue();\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B5",
      "B1 : If($i2 !\u003d $i3) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MutableByte\n  Object\n  $z0 \u003d MutableByte\n  if ($z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  $b0 \u003d MutableByte: byte value\u003e\n  $r2 \u003d MutableByte) r0\n  $b1 \u003d $r2.byteValue()\n  $i2 \u003d (int) $b0\n  $i3 \u003d (int) $b1\n  if ($i2 !\u003d $i3) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.mutable.MutableDouble",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return obj instanceof MutableDouble \u0026\u0026 Double.doubleToLongBits(((MutableDouble) obj).value) \u003d\u003d Double.doubleToLongBits(value);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($b2 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MutableDouble\n  Object\n  $z0 \u003d MutableDouble\n  if ($z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $r1 \u003d MutableDouble) r0\n  $d0 \u003d MutableDouble: double value\u003e\n  $l1 \u003d Double.doubleToLongBits($d0)\n  $d1 \u003d MutableDouble: double value\u003e\n  $l0 \u003d Double.doubleToLongBits($d1)\n  $b2 \u003d $l1 cmp $l0\n  if ($b2 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.mutable.MutableFloat",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return obj instanceof MutableFloat \u0026\u0026 Float.floatToIntBits(((MutableFloat) obj).value) \u003d\u003d Float.floatToIntBits(value);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($i1 !\u003d $i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MutableFloat\n  Object\n  $z0 \u003d MutableFloat\n  if ($z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $r1 \u003d MutableFloat) r0\n  $f0 \u003d MutableFloat: float value\u003e\n  $i1 \u003d Float.floatToIntBits($f0)\n  $f1 \u003d MutableFloat: float value\u003e\n  $i0 \u003d Float.floatToIntBits($f1)\n  if ($i1 !\u003d $i0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.mutable.MutableInt",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj instanceof MutableInt) {\r\n        return value \u003d\u003d ((MutableInt) obj).intValue();\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B5",
      "B1 : If($i0 !\u003d $i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MutableInt\n  Object\n  $z0 \u003d MutableInt\n  if ($z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  $i0 \u003d MutableInt: int value\u003e\n  $r2 \u003d MutableInt) r0\n  $i1 \u003d $r2.intValue()\n  if ($i0 !\u003d $i1) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.mutable.MutableLong",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj instanceof MutableLong) {\r\n        return value \u003d\u003d ((MutableLong) obj).longValue();\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B5",
      "B1 : If($b2 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MutableLong\n  Object\n  $z0 \u003d MutableLong\n  if ($z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  $l0 \u003d MutableLong: long value\u003e\n  $r2 \u003d MutableLong) r0\n  $l1 \u003d $r2.longValue()\n  $b2 \u003d $l0 cmp $l1\n  if ($b2 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.mutable.MutableObject",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (this \u003d\u003d obj) {\r\n        return true;\r\n    }\r\n    if (this.getClass() \u003d\u003d obj.getClass()) {\r\n        final MutableObject\u003c?\u003e that \u003d (MutableObject\u003c?\u003e) obj;\r\n        return Objects.equals(this.value, that.value);\r\n    }\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r1 !\u003d r0) → B3 | else → B4",
      "B4 : If($r3 !\u003d $r2) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  MutableObject\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d r0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d r1.getClass()\n  $r2 \u003d r0.getClass()\n  if ($r3 !\u003d $r2) goto B5 else B6\n}",
      "B5 {\n  r4 \u003d MutableObject) r0\n  $r6 \u003d Object value\u003e\n  $r5 \u003d Object value\u003e\n  $z0 \u003d Objects.equals($r6, $r5)\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MutableObject#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.mutable.MutableShort",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj instanceof MutableShort) {\r\n        return value \u003d\u003d ((MutableShort) obj).shortValue();\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B5",
      "B1 : If($i2 !\u003d $i3) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MutableShort\n  Object\n  $z0 \u003d MutableShort\n  if ($z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  $s0 \u003d MutableShort: short value\u003e\n  $r2 \u003d MutableShort) r0\n  $s1 \u003d $r2.shortValue()\n  $i2 \u003d (int) $s0\n  $i3 \u003d (int) $s1\n  if ($i2 !\u003d $i3) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "allNotNull",
    "signature": "boolean allNotNull(java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    return values !\u003d null \u0026\u0026 Stream.of(values).noneMatch(Objects::isNull);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d Stream.of(r0)\n  $r1 \u003d ObjectUtils$isNull__132.bootstrap$()\n  $z0 \u003d $r2.noneMatch($r1)\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "allNull",
    "signature": "boolean allNull(java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    return !anyNotNull(values);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  $z0 \u003d ObjectUtils.anyNotNull(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectUtils#anyNotNull(...1)",
        "body": "{\r\n    return firstNonNull(values) !\u003d null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "anyNotNull",
    "signature": "boolean anyNotNull(java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    return firstNonNull(values) !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  $r1 \u003d ObjectUtils.firstNonNull(r0)\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectUtils#firstNonNull(...1)",
        "body": "{\r\n    return Streams.of(values).filter(Objects::nonNull).findFirst().orElse(null);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "anyNull",
    "signature": "boolean anyNull(java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    return !allNotNull(values);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  $z0 \u003d ObjectUtils.allNotNull(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectUtils#allNotNull(...1)",
        "body": "{\r\n    return values !\u003d null \u0026\u0026 Stream.of(values).noneMatch(Objects::isNull);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "clone",
    "signature": "java.lang.Object clone(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 13,
    "edges": 14,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B12",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B9",
      "B2 : If($z2 \u003d\u003d false) → B3 | else → B7",
      "B4 : If($i0 \u003c\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Object\n  $z0 \u003d Cloneable\n  if ($z0 \u003d\u003d false) goto B1 else B12\n}",
      "B1 {\n  r1 \u003d r0.getClass()\n  $z1 \u003d ObjectUtils.isArray(r0)\n  if ($z1 \u003d\u003d false) goto B2 else B9\n}",
      "B2 {\n  r14 \u003d r1.getComponentType()\n  $z2 \u003d r14.isPrimitive()\n  if ($z2 \u003d\u003d false) goto B3 else B7\n}",
      "B3 {\n  i1 \u003d Array.getLength(r0)\n  r15 \u003d Array.newInstance(r14, i1)\n}",
      "B4 {\n  $i0 \u003d i1\n  $i3 \u003d (int) -1\n  i1 \u003d i1 + $i3\n  if ($i0 \u003c\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r6 \u003d Array.get(r0, i1)\n  Array.set(r15, i1, $r6)\n  goto B4\n}",
      "B6 {\n  goto B8\n}",
      "B7 {\n  $r5 \u003d Object[]) r0\n  r15 \u003d $r5.clone()\n}",
      "B8 {\n  goto B11\n}",
      "B9 {\n  $r2 \u003d Class)[0]\n  $r4 \u003d r1.getMethod(\"clone\", $r2)\n  $r3 \u003d Object)[0]\n  r15 \u003d $r4.invoke(r0, $r3)\n  goto B11\n}",
      "B10 {\n  $r7 :\u003d @caughtexception\n  $r17 \u003d CloneFailedException\n  $r16 \u003d StringBuilder\n  new StringBuilder()\n  $r11 \u003d $r16.append(\"Exception cloning Cloneable type \")\n  $r10 \u003d r1.getName()\n  $r12 \u003d $r11.append($r10)\n  $r13 \u003d $r12.toString()\n  new CloneFailedException($r13, $r7)\n  throw $r17\n}",
      "B11 {\n  return\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B12",
      "B1 --\u003e B2",
      "B1 --\u003e B9",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B11",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "cloneIfPossible",
    "signature": "java.lang.Object cloneIfPossible(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  r1 \u003d ObjectUtils.clone(r0)\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "compare",
    "signature": "int compare(java.lang.Comparable,java.lang.Comparable,boolean)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 13,
    "edges": 14,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B7",
      "B3 : If(z0 \u003d\u003d false) → B4 | else → B5",
      "B7 : If(r1 !\u003d null) → B8 | else → B12",
      "B8 : If(z0 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  Comparable\n  Comparable\n  z0 :\u003d @parameter2: boolean\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B7\n}",
      "B3 {\n  if (z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $b1 \u003d 1\n  goto B6\n}",
      "B5 {\n  $b1 \u003d -1\n}",
      "B6 {\n  return\n}",
      "B7 {\n  if (r1 !\u003d null) goto B8 else B12\n}",
      "B8 {\n  if (z0 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $b2 \u003d -1\n  goto B11\n}",
      "B10 {\n  $b2 \u003d 1\n}",
      "B11 {\n  return\n}",
      "B12 {\n  $i0 \u003d r0.compareTo(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "CONST_BYTE",
    "signature": "byte CONST_BYTE(int)",
    "visibility": "public",
    "body": "{\r\n    if (v \u003c Byte.MIN_VALUE || v \u003e Byte.MAX_VALUE) {\r\n        throw new IllegalArgumentException(\"Supplied value must be a valid byte literal between -128 and 127: [\" + v + \"]\");\r\n    }\r\n    return (byte) v;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c $i3) → B1 | else → B2",
      "B1 : If(i0 \u003c\u003d 127) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  $i3 \u003d (int) -128\n  if (i0 \u003c $i3) goto B1 else B2\n}",
      "B1 {\n  if (i0 \u003c\u003d 127) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d IllegalArgumentException\n  $r6 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d $r6.append(\"Supplied value must be a valid byte literal between -128 and 127: \")\n  $r3 \u003d $r2.append(i0)\n  $r4 \u003d $r3.append(\"\")\n  $r5 \u003d $r4.toString()\n  new IllegalArgumentException($r5)\n  throw $r7\n}",
      "B3 {\n  $b1 \u003d (byte) i0\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "CONST_SHORT",
    "signature": "short CONST_SHORT(int)",
    "visibility": "public",
    "body": "{\r\n    if (v \u003c Short.MIN_VALUE || v \u003e Short.MAX_VALUE) {\r\n        throw new IllegalArgumentException(\"Supplied value must be a valid byte literal between -32768 and 32767: [\" + v + \"]\");\r\n    }\r\n    return (short) v;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c $i3) → B1 | else → B2",
      "B1 : If(i0 \u003c\u003d 32767) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  $i3 \u003d (int) -32768\n  if (i0 \u003c $i3) goto B1 else B2\n}",
      "B1 {\n  if (i0 \u003c\u003d 32767) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d IllegalArgumentException\n  $r6 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d $r6.append(\"Supplied value must be a valid byte literal between -32768 and 32767: \")\n  $r3 \u003d $r2.append(i0)\n  $r4 \u003d $r3.append(\"\")\n  $r5 \u003d $r4.toString()\n  new IllegalArgumentException($r5)\n  throw $r7\n}",
      "B3 {\n  $s1 \u003d (short) i0\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "defaultIfNull",
    "signature": "java.lang.Object defaultIfNull(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "getClass",
    "signature": "java.lang.Class getClass(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d null\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0.getClass()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "getIfNull",
    "signature": "java.lang.Object getIfNull(java.lang.Object,java.util.function.Supplier)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  Supplier\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Suppliers.get(r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "hashCodeMulti",
    "signature": "int hashCodeMulti(java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    int hash \u003d 1;\r\n    if (objects !\u003d null) {\r\n        for (final Object object : objects) {\r\n            final int tmpHash \u003d Objects.hashCode(object);\r\n            hash \u003d hash * 31 + tmpHash;\r\n        }\r\n    }\r\n    return hash;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B4",
      "B2 : If(i4 \u003e\u003d i0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  i3 \u003d 1\n  if (r0 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  i0 \u003d lengthof r0\n  i4 \u003d 0\n}",
      "B2 {\n  if (i4 \u003e\u003d i0) goto B3 else B4\n}",
      "B3 {\n  r1 \u003d r0[i4]\n  i1 \u003d Objects.hashCode(r1)\n  $i2 \u003d i3 * 31\n  i3 \u003d $i2 + i1\n  i4 \u003d i4 + 1\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "identityToString",
    "signature": "java.lang.String identityToString(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final String name \u003d object.getClass().getName();\r\n    final String hexString \u003d identityHashCodeHex(object);\r\n    final StringBuilder builder \u003d new StringBuilder(name.length() + 1 + hexString.length());\r\n    // @formatter:off\r\n    builder.append(name).append(AT_SIGN).append(hexString);\r\n    // @formatter:on\r\n    return builder.toString();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getClass()\n  r2 \u003d $r1.getName()\n  r3 \u003d ObjectUtils.identityHashCodeHex(r0)\n  $r4 \u003d StringBuilder\n  $i0 \u003d r2.length()\n  $i2 \u003d $i0 + 1\n  $i1 \u003d r3.length()\n  $i3 \u003d $i2 + $i1\n  new StringBuilder($i3)\n  $r5 \u003d $r4.append(r2)\n  $r6 \u003d $r5.append(64)\n  $r6.append(r3)\n  $r7 \u003d $r4.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectUtils#identityHashCodeHex(...1)",
        "body": "{\r\n    return Integer.toHexString(System.identityHashCode(object));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "isArray",
    "signature": "boolean isArray(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return object !\u003d null \u0026\u0026 object.getClass().isArray();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r1 \u003d r0.getClass()\n  $z0 \u003d $r1.isArray()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d null) {\r\n        return true;\r\n    }\r\n    if (object instanceof CharSequence) {\r\n        return ((CharSequence) object).length() \u003d\u003d 0;\r\n    }\r\n    if (isArray(object)) {\r\n        return Array.getLength(object) \u003d\u003d 0;\r\n    }\r\n    if (object instanceof Collection\u003c?\u003e) {\r\n        return ((Collection\u003c?\u003e) object).isEmpty();\r\n    }\r\n    if (object instanceof Map\u003c?, ?\u003e) {\r\n        return ((Map\u003c?, ?\u003e) object).isEmpty();\r\n    }\r\n    if (object instanceof Optional\u003c?\u003e) {\r\n        // TODO Java 11 Use Optional#isEmpty()\r\n        return !((Optional\u003c?\u003e) object).isPresent();\r\n    }\r\n    return false;\r\n}",
    "nodes": 22,
    "edges": 24,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B7",
      "B3 : If($i1 !\u003d 0) → B4 | else → B5",
      "B7 : If($z1 \u003d\u003d false) → B8 | else → B12",
      "B8 : If($i0 !\u003d 0) → B9 | else → B10",
      "B12 : If($z2 \u003d\u003d false) → B13 | else → B14",
      "B14 : If($z3 \u003d\u003d false) → B15 | else → B16",
      "B16 : If($z4 \u003d\u003d false) → B17 | else → B21",
      "B17 : If($z5 !\u003d 0) → B18 | else → B19"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d CharSequence\n  if ($z0 \u003d\u003d false) goto B3 else B7\n}",
      "B3 {\n  $r4 \u003d CharSequence) r0\n  $i1 \u003d $r4.length()\n  if ($i1 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $z8 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z8 \u003d 0\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $z1 \u003d ObjectUtils.isArray(r0)\n  if ($z1 \u003d\u003d false) goto B8 else B12\n}",
      "B8 {\n  $i0 \u003d Array.getLength(r0)\n  if ($i0 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  $z9 \u003d 1\n  goto B11\n}",
      "B10 {\n  $z9 \u003d 0\n}",
      "B11 {\n  return\n}",
      "B12 {\n  $z2 \u003d Collection\n  if ($z2 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  $r3 \u003d Collection) r0\n  $z7 \u003d $r3.isEmpty()\n  return\n}",
      "B14 {\n  $z3 \u003d Map\n  if ($z3 \u003d\u003d false) goto B15 else B16\n}",
      "B15 {\n  $r2 \u003d Map) r0\n  $z6 \u003d $r2.isEmpty()\n  return\n}",
      "B16 {\n  $z4 \u003d Optional\n  if ($z4 \u003d\u003d false) goto B17 else B21\n}",
      "B17 {\n  $r1 \u003d Optional) r0\n  $z5 \u003d $r1.isPresent()\n  if ($z5 !\u003d 0) goto B18 else B19\n}",
      "B18 {\n  $z10 \u003d 1\n  goto B20\n}",
      "B19 {\n  $z10 \u003d 0\n}",
      "B20 {\n  return\n}",
      "B21 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B21",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B20",
      "B20 --\u003e [EXIT]",
      "B21 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectUtils#isArray(...1)",
        "body": "{\r\n    return object !\u003d null \u0026\u0026 object.getClass().isArray();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "isNotEmpty",
    "signature": "boolean isNotEmpty(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return !isEmpty(object);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  $z0 \u003d ObjectUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectUtils#isEmpty(...1)",
        "body": "{\r\n    if (object \u003d\u003d null) {\r\n        return true;\r\n    }\r\n    if (object instanceof CharSequence) {\r\n        return ((CharSequence) object).length() \u003d\u003d 0;\r\n    }\r\n    if (isArray(object)) {\r\n        return Array.getLength(object) \u003d\u003d 0;\r\n    }\r\n    if (object instanceof Collection\u003c?\u003e) {\r\n        return ((Collection\u003c?\u003e) object).isEmpty();\r\n    }\r\n    if (object instanceof Map\u003c?, ?\u003e) {\r\n        return ((Map\u003c?, ?\u003e) object).isEmpty();\r\n    }\r\n    if (object instanceof Optional\u003c?\u003e) {\r\n        // TODO Java 11 Use Optional#isEmpty()\r\n        return !((Optional\u003c?\u003e) object).isPresent();\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "max",
    "signature": "java.lang.Comparable max(java.lang.Comparable[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B6",
      "B2 : If(i2 \u003e\u003d i0) → B3 | else → B6",
      "B3 : If($i1 \u003c\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Comparable[]\n  r2 \u003d null\n  if (r0 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  i0 \u003d lengthof r0\n  i2 \u003d 0\n}",
      "B2 {\n  if (i2 \u003e\u003d i0) goto B3 else B6\n}",
      "B3 {\n  r1 \u003d r0[i2]\n  $i1 \u003d ObjectUtils.compare(r1, r2, 0)\n  if ($i1 \u003c\u003d 0) goto B4 else B5\n}",
      "B4 {\n  r2 \u003d r1\n}",
      "B5 {\n  i2 \u003d i2 + 1\n  goto B2\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "min",
    "signature": "java.lang.Comparable min(java.lang.Comparable[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B6",
      "B2 : If(i2 \u003e\u003d i0) → B3 | else → B6",
      "B3 : If($i1 \u003e\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Comparable[]\n  r2 \u003d null\n  if (r0 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  i0 \u003d lengthof r0\n  i2 \u003d 0\n}",
      "B2 {\n  if (i2 \u003e\u003d i0) goto B3 else B6\n}",
      "B3 {\n  r1 \u003d r0[i2]\n  $i1 \u003d ObjectUtils.compare(r1, r2, 1)\n  if ($i1 \u003e\u003d 0) goto B4 else B5\n}",
      "B4 {\n  r2 \u003d r1\n}",
      "B5 {\n  i2 \u003d i2 + 1\n  goto B2\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "mode",
    "signature": "java.lang.Object mode(java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 16,
    "edges": 20,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B15",
      "B2 : If(i2 \u003e\u003d i1) → B3 | else → B7",
      "B3 : If(r9 !\u003d null) → B4 | else → B5",
      "B8 : If($z1 \u003d\u003d false) → B9 | else → B14",
      "B9 : If(i4 !\u003d i3) → B10 | else → B11",
      "B11 : If(i4 \u003c\u003d i3) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  $z0 \u003d ArrayUtils.isNotEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B15\n}",
      "B1 {\n  $r1 \u003d HashMap\n  $i0 \u003d lengthof r0\n  new HashMap($i0)\n  i1 \u003d lengthof r0\n  i2 \u003d 0\n}",
      "B2 {\n  if (i2 \u003e\u003d i1) goto B3 else B7\n}",
      "B3 {\n  r8 \u003d r0[i2]\n  $r6 \u003d $r1.get(r8)\n  r9 \u003d MutableInt) $r6\n  if (r9 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r7 \u003d MutableInt\n  new MutableInt(1)\n  $r1.put(r8, $r7)\n  goto B6\n}",
      "B5 {\n  r9.increment()\n}",
      "B6 {\n  i2 \u003d i2 + 1\n  goto B2\n}",
      "B7 {\n  r10 \u003d null\n  i3 \u003d 0\n  $r2 \u003d $r1.entrySet()\n  r11 \u003d $r2.iterator()\n}",
      "B8 {\n  $z1 \u003d r11.hasNext()\n  if ($z1 \u003d\u003d false) goto B9 else B14\n}",
      "B9 {\n  $r3 \u003d r11.next()\n  r12 \u003d Map$Entry) $r3\n  $r4 \u003d r12.getValue()\n  $r5 \u003d MutableInt) $r4\n  i4 \u003d $r5.intValue()\n  if (i4 !\u003d i3) goto B10 else B11\n}",
      "B10 {\n  r10 \u003d null\n  goto B13\n}",
      "B11 {\n  if (i4 \u003c\u003d i3) goto B12 else B13\n}",
      "B12 {\n  i3 \u003d i4\n  r10 \u003d r12.getKey()\n}",
      "B13 {\n  goto B8\n}",
      "B14 {\n  return\n}",
      "B15 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B15",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B2",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B14",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B8",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "notEqual",
    "signature": "boolean notEqual(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return !Objects.equals(object1, object2);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  Object\n  $z0 \u003d Objects.equals(r0, r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "requireNonEmpty",
    "signature": "java.lang.Object requireNonEmpty(java.lang.Object,java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  String\n  Objects.requireNonNull(r0, r1)\n  $z0 \u003d ObjectUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(r1)\n  throw $r2\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "toString",
    "signature": "java.lang.String toString(java.util.function.Supplier,java.util.function.Supplier)",
    "visibility": "public",
    "body": "{\r\n    return obj \u003d\u003d null ? Suppliers.get(supplier) : toString(obj.get(), supplier);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Supplier\n  Supplier\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Suppliers.get(r1)\n  $r4 \u003d String) $r3\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r0.get()\n  $r4 \u003d ObjectUtils.toString($r2, r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectUtils#toString(...2)",
        "body": "{\r\n    return Objects.toString(obj, nullStr);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ObjectUtils",
    "methodName": "toString",
    "signature": "java.lang.String toString(java.lang.Object,java.util.function.Supplier)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  Supplier\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Suppliers.get(r1)\n  $r3 \u003d String) $r2\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0.toString()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.RandomStringUtils",
    "methodName": "random",
    "signature": "java.lang.String random(int,int,int,boolean,boolean,char[],java.util.Random)",
    "visibility": "public",
    "body": "{\r\n    if (count \u003d\u003d 0) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    if (count \u003c 0) {\r\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\r\n    }\r\n    if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\r\n        throw new IllegalArgumentException(\"The chars array must not be empty\");\r\n    }\r\n    if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\r\n        if (chars !\u003d null) {\r\n            end \u003d chars.length;\r\n        } else if (!letters \u0026\u0026 !numbers) {\r\n            end \u003d Character.MAX_CODE_POINT;\r\n        } else {\r\n            end \u003d \u0027z\u0027 + 1;\r\n            start \u003d \u0027 \u0027;\r\n        }\r\n    } else if (end \u003c\u003d start) {\r\n        throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\r\n    } else if (start \u003c 0 || end \u003c 0) {\r\n        throw new IllegalArgumentException(\"Character positions MUST be \u003e\u003d 0\");\r\n    }\r\n    if (end \u003e Character.MAX_CODE_POINT) {\r\n        // Technically, it should be `Character.MAX_CODE_POINT+1` as `end` is excluded\r\n        // But the character `Character.MAX_CODE_POINT` is private use, so it would anyway be excluded\r\n        end \u003d Character.MAX_CODE_POINT;\r\n    }\r\n    // Optimize generation of full alphanumerical characters\r\n    // Normally, we would need to pick a 7-bit integer, since gap \u003d \u0027z\u0027 - \u00270\u0027 + 1 \u003d 75 \u003e 64\r\n    // In turn, this would make us reject the sampling with probability 1 - 62 / 2^7 \u003e 1 / 2\r\n    // Instead we can pick directly from the right set of 62 characters, which requires\r\n    // picking a 6-bit integer and only rejecting with probability 2 / 64 \u003d 1 / 32\r\n    if (chars \u003d\u003d null \u0026\u0026 letters \u0026\u0026 numbers \u0026\u0026 start \u003c\u003d \u00270\u0027 \u0026\u0026 end \u003e\u003d \u0027z\u0027 + 1) {\r\n        return random(count, 0, 0, false, false, ALPHANUMERICAL_CHARS, random);\r\n    }\r\n    // Optimize start and end when filtering by letters and/or numbers:\r\n    // The range provided may be too large since we filter anyway afterward.\r\n    // Note the use of Math.min/max (as opposed to setting start to \u00270\u0027 for example),\r\n    // since it is possible the range start/end excludes some of the letters/numbers,\r\n    // e.g., it is possible that start already is \u00271\u0027 when numbers \u003d true, and start\r\n    // needs to stay equal to \u00271\u0027 in that case.\r\n    if (chars \u003d\u003d null) {\r\n        if (letters \u0026\u0026 numbers) {\r\n            start \u003d Math.max(\u00270\u0027, start);\r\n            end \u003d Math.min(\u0027z\u0027 + 1, end);\r\n        } else if (numbers) {\r\n            // just numbers, no letters\r\n            start \u003d Math.max(\u00270\u0027, start);\r\n            end \u003d Math.min(\u00279\u0027 + 1, end);\r\n        } else if (letters) {\r\n            // just letters, no numbers\r\n            start \u003d Math.max(\u0027A\u0027, start);\r\n            end \u003d Math.min(\u0027z\u0027 + 1, end);\r\n        }\r\n    }\r\n    final int zeroDigitAscii \u003d 48;\r\n    final int firstLetterAscii \u003d 65;\r\n    if (chars \u003d\u003d null \u0026\u0026 (numbers \u0026\u0026 end \u003c\u003d zeroDigitAscii || letters \u0026\u0026 end \u003c\u003d firstLetterAscii)) {\r\n        throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater then (\" + zeroDigitAscii + \") for generating digits \" + \"or greater then (\" + firstLetterAscii + \") for generating letters.\");\r\n    }\r\n    final StringBuilder builder \u003d new StringBuilder(count);\r\n    final int gap \u003d end - start;\r\n    final int gapBits \u003d Integer.SIZE - Integer.numberOfLeadingZeros(gap);\r\n    // The size of the cache we use is an heuristic:\r\n    // about twice the number of bytes required if no rejection\r\n    // Ideally the cache size depends on multiple factor, including the cost of generating x bytes\r\n    // of randomness as well as the probability of rejection. It is however not easy to know\r\n    // those values programmatically for the general case.\r\n    final CachedRandomBits arb \u003d new CachedRandomBits((count * gapBits + 3) / 5 + 10, random);\r\n    while (count-- !\u003d 0) {\r\n        // Generate a random value between start (included) and end (excluded)\r\n        final int randomValue \u003d arb.nextBits(gapBits) + start;\r\n        // Rejection sampling if value too large\r\n        if (randomValue \u003e\u003d end) {\r\n            count++;\r\n            continue;\r\n        }\r\n        final int codePoint;\r\n        if (chars \u003d\u003d null) {\r\n            codePoint \u003d randomValue;\r\n            switch(Character.getType(codePoint)) {\r\n                case Character.UNASSIGNED:\r\n                case Character.PRIVATE_USE:\r\n                case Character.SURROGATE:\r\n                    count++;\r\n                    continue;\r\n            }\r\n        } else {\r\n            codePoint \u003d chars[randomValue];\r\n        }\r\n        final int numberOfChars \u003d Character.charCount(codePoint);\r\n        if (count \u003d\u003d 0 \u0026\u0026 numberOfChars \u003e 1) {\r\n            count++;\r\n            continue;\r\n        }\r\n        if (letters \u0026\u0026 Character.isLetter(codePoint) || numbers \u0026\u0026 Character.isDigit(codePoint) || !letters \u0026\u0026 !numbers) {\r\n            builder.appendCodePoint(codePoint);\r\n            if (numberOfChars \u003d\u003d 2) {\r\n                count--;\r\n            }\r\n        } else {\r\n            count++;\r\n        }\r\n    }\r\n    return builder.toString();\r\n}",
    "nodes": 65,
    "edges": 98,
    "cc": 35,
    "flowSummary": [
      "B0 : If(i5 !\u003d 0) → B1 | else → B2",
      "B2 : If(i5 \u003e\u003d 0) → B3 | else → B4",
      "B4 : If(r0 \u003d\u003d null) → B5 | else → B7",
      "B5 : If($i4 !\u003d 0) → B6 | else → B7",
      "B7 : If(i6 !\u003d 0) → B8 | else → B15",
      "B8 : If(i7 !\u003d 0) → B9 | else → B15",
      "B9 : If(r0 \u003d\u003d null) → B10 | else → B11",
      "B11 : If(z0 !\u003d 0) → B12 | else → B14",
      "B12 : If(z1 !\u003d 0) → B13 | else → B14",
      "B15 : If(i7 \u003e i6) → B16 | else → B17",
      "B17 : If(i6 \u003c 0) → B18 | else → B19",
      "B18 : If(i7 \u003e\u003d 0) → B19 | else → B20",
      "B20 : If(i7 \u003c\u003d 1114111) → B21 | else → B22",
      "B22 : If(r0 !\u003d null) → B23 | else → B28",
      "B23 : If(z0 \u003d\u003d false) → B24 | else → B28",
      "B24 : If(z1 \u003d\u003d false) → B25 | else → B28",
      "B25 : If(i6 \u003e 48) → B26 | else → B28",
      "B26 : If(i7 \u003c 123) → B27 | else → B28",
      "B28 : If(r0 !\u003d null) → B29 | else → B36",
      "B29 : If(z0 \u003d\u003d false) → B30 | else → B32",
      "B30 : If(z1 \u003d\u003d false) → B31 | else → B32",
      "B32 : If(z1 \u003d\u003d false) → B33 | else → B34",
      "B34 : If(z0 \u003d\u003d false) → B35 | else → B36",
      "B36 : If(r0 !\u003d null) → B37 | else → B42",
      "B37 : If(z1 \u003d\u003d false) → B38 | else → B39",
      "B38 : If(i7 \u003c\u003d 48) → B39 | else → B41",
      "B39 : If(z0 \u003d\u003d false) → B40 | else → B42",
      "B40 : If(i7 \u003e 65) → B41 | else → B42",
      "B43 : If($i15 \u003d\u003d false) → B44 | else → B64",
      "B44 : If(i1 \u003c i7) → B45 | else → B46",
      "B46 : If(r0 !\u003d null) → B47 | else → B50",
      "B47 : If(switch-on $i2) → B48 | else → B49",
      "B51 : If(i5 !\u003d 0) → B52 | else → B54",
      "B52 : If($i3 \u003c\u003d 1) → B53 | else → B54",
      "B54 : If(z0 \u003d\u003d false) → B55 | else → B56",
      "B55 : If($z3 !\u003d 0) → B56 | else → B60",
      "B56 : If(z1 \u003d\u003d false) → B57 | else → B58",
      "B57 : If($z2 !\u003d 0) → B58 | else → B60",
      "B58 : If(z0 !\u003d 0) → B59 | else → B62",
      "B59 : If(z1 !\u003d 0) → B60 | else → B62",
      "B60 : If($i3 !\u003d 2) → B61 | else → B63"
    ],
    "blockList": [
      "B0 {\n  i5 :\u003d @parameter0: int\n  i6 :\u003d @parameter1: int\n  i7 :\u003d @parameter2: int\n  z0 :\u003d @parameter3: boolean\n  z1 :\u003d @parameter4: boolean\n  r0 :\u003d @parameter5: char[]\n  Random\n  if (i5 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (i5 \u003e\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r34 \u003d IllegalArgumentException\n  $r33 \u003d StringBuilder\n  new StringBuilder()\n  $r27 \u003d $r33.append(\"Requested random string length \")\n  $r28 \u003d $r27.append(i5)\n  $r29 \u003d $r28.append(\" is less than 0.\")\n  $r30 \u003d $r29.toString()\n  new IllegalArgumentException($r30)\n  throw $r34\n}",
      "B4 {\n  if (r0 \u003d\u003d null) goto B5 else B7\n}",
      "B5 {\n  $i4 \u003d lengthof r0\n  if ($i4 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $r35 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"The chars array must not be empty\")\n  throw $r35\n}",
      "B7 {\n  if (i6 !\u003d 0) goto B8 else B15\n}",
      "B8 {\n  if (i7 !\u003d 0) goto B9 else B15\n}",
      "B9 {\n  if (r0 \u003d\u003d null) goto B10 else B11\n}",
      "B10 {\n  i7 \u003d lengthof r0\n  goto B20\n}",
      "B11 {\n  if (z0 !\u003d 0) goto B12 else B14\n}",
      "B12 {\n  if (z1 !\u003d 0) goto B13 else B14\n}",
      "B13 {\n  i7 \u003d 1114111\n  goto B20\n}",
      "B14 {\n  i7 \u003d 123\n  i6 \u003d 32\n  goto B20\n}",
      "B15 {\n  if (i7 \u003e i6) goto B16 else B17\n}",
      "B16 {\n  $r37 \u003d IllegalArgumentException\n  $r36 \u003d StringBuilder\n  new StringBuilder()\n  $r18 \u003d $r36.append(\"Parameter end (\")\n  $r19 \u003d $r18.append(i7)\n  $r20 \u003d $r19.append(\") must be greater than start (\")\n  $r21 \u003d $r20.append(i6)\n  $r22 \u003d $r21.append(\")\")\n  $r23 \u003d $r22.toString()\n  new IllegalArgumentException($r23)\n  throw $r37\n}",
      "B17 {\n  if (i6 \u003c 0) goto B18 else B19\n}",
      "B18 {\n  if (i7 \u003e\u003d 0) goto B19 else B20\n}",
      "B19 {\n  $r38 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Character positions MUST be \u003e\u003d 0\")\n  throw $r38\n}",
      "B20 {\n  if (i7 \u003c\u003d 1114111) goto B21 else B22\n}",
      "B21 {\n  i7 \u003d 1114111\n}",
      "B22 {\n  if (r0 !\u003d null) goto B23 else B28\n}",
      "B23 {\n  if (z0 \u003d\u003d false) goto B24 else B28\n}",
      "B24 {\n  if (z1 \u003d\u003d false) goto B25 else B28\n}",
      "B25 {\n  if (i6 \u003e 48) goto B26 else B28\n}",
      "B26 {\n  if (i7 \u003c 123) goto B27 else B28\n}",
      "B27 {\n  $r14 \u003d RandomStringUtils: char[] ALPHANUMERICAL_CHARS\u003e\n  $r15 \u003d RandomStringUtils.random(i5, 0, 0, 0, 0, $r14, r2)\n  return\n}",
      "B28 {\n  if (r0 !\u003d null) goto B29 else B36\n}",
      "B29 {\n  if (z0 \u003d\u003d false) goto B30 else B32\n}",
      "B30 {\n  if (z1 \u003d\u003d false) goto B31 else B32\n}",
      "B31 {\n  i6 \u003d Math.max(48, i6)\n  i7 \u003d Math.min(123, i7)\n  goto B36\n}",
      "B32 {\n  if (z1 \u003d\u003d false) goto B33 else B34\n}",
      "B33 {\n  i6 \u003d Math.max(48, i6)\n  i7 \u003d Math.min(58, i7)\n  goto B36\n}",
      "B34 {\n  if (z0 \u003d\u003d false) goto B35 else B36\n}",
      "B35 {\n  i6 \u003d Math.max(65, i6)\n  i7 \u003d Math.min(123, i7)\n}",
      "B36 {\n  if (r0 !\u003d null) goto B37 else B42\n}",
      "B37 {\n  if (z1 \u003d\u003d false) goto B38 else B39\n}",
      "B38 {\n  if (i7 \u003c\u003d 48) goto B39 else B41\n}",
      "B39 {\n  if (z0 \u003d\u003d false) goto B40 else B42\n}",
      "B40 {\n  if (i7 \u003e 65) goto B41 else B42\n}",
      "B41 {\n  $r40 \u003d IllegalArgumentException\n  $r39 \u003d StringBuilder\n  new StringBuilder()\n  $r6 \u003d $r39.append(\"Parameter end (\")\n  $r7 \u003d $r6.append(i7)\n  $r8 \u003d $r7.append(\") must be greater then (\")\n  $r9 \u003d $r8.append(48)\n  $r10 \u003d $r9.append(\") for generating digits or greater then (\")\n  $r11 \u003d $r10.append(65)\n  $r12 \u003d $r11.append(\") for generating letters.\")\n  $r13 \u003d $r12.toString()\n  new IllegalArgumentException($r13)\n  throw $r40\n}",
      "B42 {\n  $r41 \u003d StringBuilder\n  new StringBuilder(i5)\n  $i8 \u003d i7 - i6\n  $i9 \u003d Integer.numberOfLeadingZeros($i8)\n  $i10 \u003d 32 - $i9\n  $r42 \u003d CachedRandomBits\n  $i11 \u003d i5 * $i10\n  $i12 \u003d $i11 + 3\n  $i13 \u003d $i12 / 5\n  $i14 \u003d $i13 + 10\n  new CachedRandomBits($i14, r2)\n}",
      "B43 {\n  $i15 \u003d i5\n  $i18 \u003d (int) -1\n  i5 \u003d i5 + $i18\n  if ($i15 \u003d\u003d false) goto B44 else B64\n}",
      "B44 {\n  $i0 \u003d $r42.nextBits($i10)\n  i1 \u003d $i0 + i6\n  if (i1 \u003c i7) goto B45 else B46\n}",
      "B45 {\n  i5 \u003d i5 + 1\n  goto B43\n}",
      "B46 {\n  if (r0 !\u003d null) goto B47 else B50\n}",
      "B47 {\n  i16 \u003d i1\n  $i2 \u003d Character.getType(i1)\n  Character: int charCount(int)\u003e(i16)]; }\n}",
      "B48 {\n  i5 \u003d i5 + 1\n  goto B43\n}",
      "B49 {\n  goto B51\n}",
      "B50 {\n  i16 \u003d r0[i1]\n}",
      "B51 {\n  $i3 \u003d Character.charCount(i16)\n  if (i5 !\u003d 0) goto B52 else B54\n}",
      "B52 {\n  if ($i3 \u003c\u003d 1) goto B53 else B54\n}",
      "B53 {\n  i5 \u003d i5 + 1\n  goto B43\n}",
      "B54 {\n  if (z0 \u003d\u003d false) goto B55 else B56\n}",
      "B55 {\n  $z3 \u003d Character.isLetter(i16)\n  if ($z3 !\u003d 0) goto B56 else B60\n}",
      "B56 {\n  if (z1 \u003d\u003d false) goto B57 else B58\n}",
      "B57 {\n  $z2 \u003d Character.isDigit(i16)\n  if ($z2 !\u003d 0) goto B58 else B60\n}",
      "B58 {\n  if (z0 !\u003d 0) goto B59 else B62\n}",
      "B59 {\n  if (z1 !\u003d 0) goto B60 else B62\n}",
      "B60 {\n  $r41.appendCodePoint(i16)\n  if ($i3 !\u003d 2) goto B61 else B63\n}",
      "B61 {\n  $i20 \u003d (int) -1\n  i5 \u003d i5 + $i20\n  goto B63\n}",
      "B62 {\n  i5 \u003d i5 + 1\n}",
      "B63 {\n  goto B43\n}",
      "B64 {\n  $r3 \u003d $r41.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B15",
      "B8 --\u003e B9",
      "B8 --\u003e B15",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B20",
      "B11 --\u003e B12",
      "B11 --\u003e B14",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B20",
      "B14 --\u003e B20",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B22 --\u003e B23",
      "B22 --\u003e B28",
      "B23 --\u003e B24",
      "B23 --\u003e B28",
      "B24 --\u003e B25",
      "B24 --\u003e B28",
      "B25 --\u003e B26",
      "B25 --\u003e B28",
      "B26 --\u003e B27",
      "B26 --\u003e B28",
      "B27 --\u003e [EXIT]",
      "B28 --\u003e B29",
      "B28 --\u003e B36",
      "B29 --\u003e B30",
      "B29 --\u003e B32",
      "B30 --\u003e B31",
      "B30 --\u003e B32",
      "B31 --\u003e B36",
      "B32 --\u003e B33",
      "B32 --\u003e B34",
      "B33 --\u003e B36",
      "B34 --\u003e B35",
      "B34 --\u003e B36",
      "B35 --\u003e B36",
      "B36 --\u003e B37",
      "B36 --\u003e B42",
      "B37 --\u003e B38",
      "B37 --\u003e B39",
      "B38 --\u003e B39",
      "B38 --\u003e B41",
      "B39 --\u003e B40",
      "B39 --\u003e B42",
      "B40 --\u003e B41",
      "B40 --\u003e B42",
      "B41 --\u003e [EXIT]",
      "B42 --\u003e B43",
      "B43 --\u003e B44",
      "B43 --\u003e B64",
      "B44 --\u003e B45",
      "B44 --\u003e B46",
      "B45 --\u003e B43",
      "B46 --\u003e B47",
      "B46 --\u003e B50",
      "B47 --\u003e B48",
      "B47 --\u003e B49",
      "B48 --\u003e B43",
      "B49 --\u003e B51",
      "B50 --\u003e B51",
      "B51 --\u003e B52",
      "B51 --\u003e B54",
      "B52 --\u003e B53",
      "B52 --\u003e B54",
      "B53 --\u003e B43",
      "B54 --\u003e B55",
      "B54 --\u003e B56",
      "B55 --\u003e B56",
      "B55 --\u003e B60",
      "B56 --\u003e B57",
      "B56 --\u003e B58",
      "B57 --\u003e B58",
      "B57 --\u003e B60",
      "B58 --\u003e B59",
      "B58 --\u003e B62",
      "B59 --\u003e B60",
      "B59 --\u003e B62",
      "B60 --\u003e B61",
      "B60 --\u003e B63",
      "B61 --\u003e B63",
      "B62 --\u003e B63",
      "B63 --\u003e B43",
      "B64 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "RandomStringUtils#random(...7)",
        "body": "{\r\n    if (count \u003d\u003d 0) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    if (count \u003c 0) {\r\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\r\n    }\r\n    if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\r\n        throw new IllegalArgumentException(\"The chars array must not be empty\");\r\n    }\r\n    if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\r\n        if (chars !\u003d null) {\r\n            end \u003d chars.length;\r\n        } else if (!letters \u0026\u0026 !numbers) {\r\n            end \u003d Character.MAX_CODE_POINT;\r\n        } else {\r\n            end \u003d \u0027z\u0027 + 1;\r\n            start \u003d \u0027 \u0027;\r\n        }\r\n    } else if (end \u003c\u003d start) {\r\n        throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\r\n    } else if (start \u003c 0 || end \u003c 0) {\r\n        throw new IllegalArgumentException(\"Character positions MUST be \u003e\u003d 0\");\r\n    }\r\n    if (end \u003e Character.MAX_CODE_POINT) {\r\n        // Technically, it should be `Character.MAX_CODE_POINT+1` as `end` is excluded\r\n        // But the character `Character.MAX_CODE_POINT` is private use, so it would anyway be excluded\r\n        end \u003d Character.MAX_CODE_POINT;\r\n    }\r\n    // Optimize generation of full alphanumerical characters\r\n    // Normally, we would need to pick a 7-bit integer, since gap \u003d \u0027z\u0027 - \u00270\u0027 + 1 \u003d 75 \u003e 64\r\n    // In turn, this would make us reject the sampling with probability 1 - 62 / 2^7 \u003e 1 / 2\r\n    // Instead we can pick directly from the right set of 62 characters, which requires\r\n    // picking a 6-bit integer and only rejecting with probability 2 / 64 \u003d 1 / 32\r\n    if (chars \u003d\u003d null \u0026\u0026 letters \u0026\u0026 numbers \u0026\u0026 start \u003c\u003d \u00270\u0027 \u0026\u0026 end \u003e\u003d \u0027z\u0027 + 1) {\r\n        return random(count, 0, 0, false, false, ALPHANUMERICAL_CHARS, random);\r\n    }\r\n    // Optimize start and end when filtering by letters and/or numbers:\r\n    // The range provided may be too large since we filter anyway afterward.\r\n    // Note the use of Math.min/max (as opposed to setting start to \u00270\u0027 for example),\r\n    // since it is possible the range start/end excludes some of the letters/numbers,\r\n    // e.g., it is possible that start already is \u00271\u0027 when numbers \u003d true, and start\r\n    // needs to stay equal to \u00271\u0027 in that case.\r\n    if (chars \u003d\u003d null) {\r\n        if (letters \u0026\u0026 numbers) {\r\n            start \u003d Math.max(\u00270\u0027, start);\r\n            end \u003d Math.min(\u0027z\u0027 + 1, end);\r\n        } else if (numbers) {\r\n            // just numbers, no letters\r\n            start \u003d Math.max(\u00270\u0027, start);\r\n            end \u003d Math.min(\u00279\u0027 + 1, end);\r\n        } else if (letters) {\r\n            // just letters, no numbers\r\n            start \u003d Math.max(\u0027A\u0027, start);\r\n            end \u003d Math.min(\u0027z\u0027 + 1, end);\r\n        }\r\n    }\r\n    final int zeroDigitAscii \u003d 48;\r\n    final int firstLetterAscii \u003d 65;\r\n    if (chars \u003d\u003d null \u0026\u0026 (numbers \u0026\u0026 end \u003c\u003d zeroDigitAscii || letters \u0026\u0026 end \u003c\u003d firstLetterAscii)) {\r\n        throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater then (\" + zeroDigitAscii + \") for generating digits \" + \"or greater then (\" + firstLetterAscii + \") for generating letters.\");\r\n    }\r\n    final StringBuilder builder \u003d new StringBuilder(count);\r\n    final int gap \u003d end - start;\r\n    final int gapBits \u003d Integer.SIZE - Integer.numberOfLeadingZeros(gap);\r\n    // The size of the cache we use is an heuristic:\r\n    // about twice the number of bytes required if no rejection\r\n    // Ideally the cache size depends on multiple factor, including the cost of generating x bytes\r\n    // of randomness as well as the probability of rejection. It is however not easy to know\r\n    // those values programmatically for the general case.\r\n    final CachedRandomBits arb \u003d new CachedRandomBits((count * gapBits + 3) / 5 + 10, random);\r\n    while (count-- !\u003d 0) {\r\n        // Generate a random value between start (included) and end (excluded)\r\n        final int randomValue \u003d arb.nextBits(gapBits) + start;\r\n        // Rejection sampling if value too large\r\n        if (randomValue \u003e\u003d end) {\r\n            count++;\r\n            continue;\r\n        }\r\n        final int codePoint;\r\n        if (chars \u003d\u003d null) {\r\n            codePoint \u003d randomValue;\r\n            switch(Character.getType(codePoint)) {\r\n                case Character.UNASSIGNED:\r\n                case Character.PRIVATE_USE:\r\n                case Character.SURROGATE:\r\n                    count++;\r\n                    continue;\r\n            }\r\n        } else {\r\n            codePoint \u003d chars[randomValue];\r\n        }\r\n        final int numberOfChars \u003d Character.charCount(codePoint);\r\n        if (count \u003d\u003d 0 \u0026\u0026 numberOfChars \u003e 1) {\r\n            count++;\r\n            continue;\r\n        }\r\n        if (letters \u0026\u0026 Character.isLetter(codePoint) || numbers \u0026\u0026 Character.isDigit(codePoint) || !letters \u0026\u0026 !numbers) {\r\n            builder.appendCodePoint(codePoint);\r\n            if (numberOfChars \u003d\u003d 2) {\r\n                count--;\r\n            }\r\n        } else {\r\n            count++;\r\n        }\r\n    }\r\n    return builder.toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.RandomStringUtils",
    "methodName": "next",
    "signature": "java.lang.String next(int,char[])",
    "visibility": "public",
    "body": "{\r\n    if (chars \u003d\u003d null) {\r\n        return random(count, 0, 0, false, false, null, random());\r\n    }\r\n    return random(count, 0, chars.length, false, false, chars, random());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  RandomStringUtils\n  i0 :\u003d @parameter0: int\n  r0 :\u003d @parameter1: char[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r1.random()\n  $r5 \u003d RandomStringUtils.random(i0, 0, 0, 0, 0, null, $r4)\n  return\n}",
      "B2 {\n  $i1 \u003d lengthof r0\n  $r2 \u003d r1.random()\n  $r3 \u003d RandomStringUtils.random(i0, 0, $i1, 0, 0, r0, $r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "RandomStringUtils#random(...0)",
        "body": "{\r\n    return randomUtils().random();\r\n}"
      },
      {
        "name": "RandomStringUtils#random(...7)",
        "body": "{\r\n    if (count \u003d\u003d 0) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    if (count \u003c 0) {\r\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\r\n    }\r\n    if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\r\n        throw new IllegalArgumentException(\"The chars array must not be empty\");\r\n    }\r\n    if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\r\n        if (chars !\u003d null) {\r\n            end \u003d chars.length;\r\n        } else if (!letters \u0026\u0026 !numbers) {\r\n            end \u003d Character.MAX_CODE_POINT;\r\n        } else {\r\n            end \u003d \u0027z\u0027 + 1;\r\n            start \u003d \u0027 \u0027;\r\n        }\r\n    } else if (end \u003c\u003d start) {\r\n        throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\r\n    } else if (start \u003c 0 || end \u003c 0) {\r\n        throw new IllegalArgumentException(\"Character positions MUST be \u003e\u003d 0\");\r\n    }\r\n    if (end \u003e Character.MAX_CODE_POINT) {\r\n        // Technically, it should be `Character.MAX_CODE_POINT+1` as `end` is excluded\r\n        // But the character `Character.MAX_CODE_POINT` is private use, so it would anyway be excluded\r\n        end \u003d Character.MAX_CODE_POINT;\r\n    }\r\n    // Optimize generation of full alphanumerical characters\r\n    // Normally, we would need to pick a 7-bit integer, since gap \u003d \u0027z\u0027 - \u00270\u0027 + 1 \u003d 75 \u003e 64\r\n    // In turn, this would make us reject the sampling with probability 1 - 62 / 2^7 \u003e 1 / 2\r\n    // Instead we can pick directly from the right set of 62 characters, which requires\r\n    // picking a 6-bit integer and only rejecting with probability 2 / 64 \u003d 1 / 32\r\n    if (chars \u003d\u003d null \u0026\u0026 letters \u0026\u0026 numbers \u0026\u0026 start \u003c\u003d \u00270\u0027 \u0026\u0026 end \u003e\u003d \u0027z\u0027 + 1) {\r\n        return random(count, 0, 0, false, false, ALPHANUMERICAL_CHARS, random);\r\n    }\r\n    // Optimize start and end when filtering by letters and/or numbers:\r\n    // The range provided may be too large since we filter anyway afterward.\r\n    // Note the use of Math.min/max (as opposed to setting start to \u00270\u0027 for example),\r\n    // since it is possible the range start/end excludes some of the letters/numbers,\r\n    // e.g., it is possible that start already is \u00271\u0027 when numbers \u003d true, and start\r\n    // needs to stay equal to \u00271\u0027 in that case.\r\n    if (chars \u003d\u003d null) {\r\n        if (letters \u0026\u0026 numbers) {\r\n            start \u003d Math.max(\u00270\u0027, start);\r\n            end \u003d Math.min(\u0027z\u0027 + 1, end);\r\n        } else if (numbers) {\r\n            // just numbers, no letters\r\n            start \u003d Math.max(\u00270\u0027, start);\r\n            end \u003d Math.min(\u00279\u0027 + 1, end);\r\n        } else if (letters) {\r\n            // just letters, no numbers\r\n            start \u003d Math.max(\u0027A\u0027, start);\r\n            end \u003d Math.min(\u0027z\u0027 + 1, end);\r\n        }\r\n    }\r\n    final int zeroDigitAscii \u003d 48;\r\n    final int firstLetterAscii \u003d 65;\r\n    if (chars \u003d\u003d null \u0026\u0026 (numbers \u0026\u0026 end \u003c\u003d zeroDigitAscii || letters \u0026\u0026 end \u003c\u003d firstLetterAscii)) {\r\n        throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater then (\" + zeroDigitAscii + \") for generating digits \" + \"or greater then (\" + firstLetterAscii + \") for generating letters.\");\r\n    }\r\n    final StringBuilder builder \u003d new StringBuilder(count);\r\n    final int gap \u003d end - start;\r\n    final int gapBits \u003d Integer.SIZE - Integer.numberOfLeadingZeros(gap);\r\n    // The size of the cache we use is an heuristic:\r\n    // about twice the number of bytes required if no rejection\r\n    // Ideally the cache size depends on multiple factor, including the cost of generating x bytes\r\n    // of randomness as well as the probability of rejection. It is however not easy to know\r\n    // those values programmatically for the general case.\r\n    final CachedRandomBits arb \u003d new CachedRandomBits((count * gapBits + 3) / 5 + 10, random);\r\n    while (count-- !\u003d 0) {\r\n        // Generate a random value between start (included) and end (excluded)\r\n        final int randomValue \u003d arb.nextBits(gapBits) + start;\r\n        // Rejection sampling if value too large\r\n        if (randomValue \u003e\u003d end) {\r\n            count++;\r\n            continue;\r\n        }\r\n        final int codePoint;\r\n        if (chars \u003d\u003d null) {\r\n            codePoint \u003d randomValue;\r\n            switch(Character.getType(codePoint)) {\r\n                case Character.UNASSIGNED:\r\n                case Character.PRIVATE_USE:\r\n                case Character.SURROGATE:\r\n                    count++;\r\n                    continue;\r\n            }\r\n        } else {\r\n            codePoint \u003d chars[randomValue];\r\n        }\r\n        final int numberOfChars \u003d Character.charCount(codePoint);\r\n        if (count \u003d\u003d 0 \u0026\u0026 numberOfChars \u003e 1) {\r\n            count++;\r\n            continue;\r\n        }\r\n        if (letters \u0026\u0026 Character.isLetter(codePoint) || numbers \u0026\u0026 Character.isDigit(codePoint) || !letters \u0026\u0026 !numbers) {\r\n            builder.appendCodePoint(codePoint);\r\n            if (numberOfChars \u003d\u003d 2) {\r\n                count--;\r\n            }\r\n        } else {\r\n            count++;\r\n        }\r\n    }\r\n    return builder.toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.RandomStringUtils",
    "methodName": "next",
    "signature": "java.lang.String next(int,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (chars \u003d\u003d null) {\r\n        return random(count, 0, 0, false, false, null, random());\r\n    }\r\n    return next(count, chars.toCharArray());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  RandomStringUtils\n  i0 :\u003d @parameter0: int\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r1.random()\n  $r5 \u003d RandomStringUtils.random(i0, 0, 0, 0, 0, null, $r4)\n  return\n}",
      "B2 {\n  $r2 \u003d r0.toCharArray()\n  $r3 \u003d r1.next(i0, $r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "RandomStringUtils#random(...0)",
        "body": "{\r\n    return randomUtils().random();\r\n}"
      },
      {
        "name": "RandomStringUtils#random(...7)",
        "body": "{\r\n    if (count \u003d\u003d 0) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    if (count \u003c 0) {\r\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\r\n    }\r\n    if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\r\n        throw new IllegalArgumentException(\"The chars array must not be empty\");\r\n    }\r\n    if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\r\n        if (chars !\u003d null) {\r\n            end \u003d chars.length;\r\n        } else if (!letters \u0026\u0026 !numbers) {\r\n            end \u003d Character.MAX_CODE_POINT;\r\n        } else {\r\n            end \u003d \u0027z\u0027 + 1;\r\n            start \u003d \u0027 \u0027;\r\n        }\r\n    } else if (end \u003c\u003d start) {\r\n        throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\r\n    } else if (start \u003c 0 || end \u003c 0) {\r\n        throw new IllegalArgumentException(\"Character positions MUST be \u003e\u003d 0\");\r\n    }\r\n    if (end \u003e Character.MAX_CODE_POINT) {\r\n        // Technically, it should be `Character.MAX_CODE_POINT+1` as `end` is excluded\r\n        // But the character `Character.MAX_CODE_POINT` is private use, so it would anyway be excluded\r\n        end \u003d Character.MAX_CODE_POINT;\r\n    }\r\n    // Optimize generation of full alphanumerical characters\r\n    // Normally, we would need to pick a 7-bit integer, since gap \u003d \u0027z\u0027 - \u00270\u0027 + 1 \u003d 75 \u003e 64\r\n    // In turn, this would make us reject the sampling with probability 1 - 62 / 2^7 \u003e 1 / 2\r\n    // Instead we can pick directly from the right set of 62 characters, which requires\r\n    // picking a 6-bit integer and only rejecting with probability 2 / 64 \u003d 1 / 32\r\n    if (chars \u003d\u003d null \u0026\u0026 letters \u0026\u0026 numbers \u0026\u0026 start \u003c\u003d \u00270\u0027 \u0026\u0026 end \u003e\u003d \u0027z\u0027 + 1) {\r\n        return random(count, 0, 0, false, false, ALPHANUMERICAL_CHARS, random);\r\n    }\r\n    // Optimize start and end when filtering by letters and/or numbers:\r\n    // The range provided may be too large since we filter anyway afterward.\r\n    // Note the use of Math.min/max (as opposed to setting start to \u00270\u0027 for example),\r\n    // since it is possible the range start/end excludes some of the letters/numbers,\r\n    // e.g., it is possible that start already is \u00271\u0027 when numbers \u003d true, and start\r\n    // needs to stay equal to \u00271\u0027 in that case.\r\n    if (chars \u003d\u003d null) {\r\n        if (letters \u0026\u0026 numbers) {\r\n            start \u003d Math.max(\u00270\u0027, start);\r\n            end \u003d Math.min(\u0027z\u0027 + 1, end);\r\n        } else if (numbers) {\r\n            // just numbers, no letters\r\n            start \u003d Math.max(\u00270\u0027, start);\r\n            end \u003d Math.min(\u00279\u0027 + 1, end);\r\n        } else if (letters) {\r\n            // just letters, no numbers\r\n            start \u003d Math.max(\u0027A\u0027, start);\r\n            end \u003d Math.min(\u0027z\u0027 + 1, end);\r\n        }\r\n    }\r\n    final int zeroDigitAscii \u003d 48;\r\n    final int firstLetterAscii \u003d 65;\r\n    if (chars \u003d\u003d null \u0026\u0026 (numbers \u0026\u0026 end \u003c\u003d zeroDigitAscii || letters \u0026\u0026 end \u003c\u003d firstLetterAscii)) {\r\n        throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater then (\" + zeroDigitAscii + \") for generating digits \" + \"or greater then (\" + firstLetterAscii + \") for generating letters.\");\r\n    }\r\n    final StringBuilder builder \u003d new StringBuilder(count);\r\n    final int gap \u003d end - start;\r\n    final int gapBits \u003d Integer.SIZE - Integer.numberOfLeadingZeros(gap);\r\n    // The size of the cache we use is an heuristic:\r\n    // about twice the number of bytes required if no rejection\r\n    // Ideally the cache size depends on multiple factor, including the cost of generating x bytes\r\n    // of randomness as well as the probability of rejection. It is however not easy to know\r\n    // those values programmatically for the general case.\r\n    final CachedRandomBits arb \u003d new CachedRandomBits((count * gapBits + 3) / 5 + 10, random);\r\n    while (count-- !\u003d 0) {\r\n        // Generate a random value between start (included) and end (excluded)\r\n        final int randomValue \u003d arb.nextBits(gapBits) + start;\r\n        // Rejection sampling if value too large\r\n        if (randomValue \u003e\u003d end) {\r\n            count++;\r\n            continue;\r\n        }\r\n        final int codePoint;\r\n        if (chars \u003d\u003d null) {\r\n            codePoint \u003d randomValue;\r\n            switch(Character.getType(codePoint)) {\r\n                case Character.UNASSIGNED:\r\n                case Character.PRIVATE_USE:\r\n                case Character.SURROGATE:\r\n                    count++;\r\n                    continue;\r\n            }\r\n        } else {\r\n            codePoint \u003d chars[randomValue];\r\n        }\r\n        final int numberOfChars \u003d Character.charCount(codePoint);\r\n        if (count \u003d\u003d 0 \u0026\u0026 numberOfChars \u003e 1) {\r\n            count++;\r\n            continue;\r\n        }\r\n        if (letters \u0026\u0026 Character.isLetter(codePoint) || numbers \u0026\u0026 Character.isDigit(codePoint) || !letters \u0026\u0026 !numbers) {\r\n            builder.appendCodePoint(codePoint);\r\n            if (numberOfChars \u003d\u003d 2) {\r\n                count--;\r\n            }\r\n        } else {\r\n            count++;\r\n        }\r\n    }\r\n    return builder.toString();\r\n}"
      },
      {
        "name": "RandomStringUtils#next(...2)",
        "body": "{\r\n    if (chars \u003d\u003d null) {\r\n        return random(count, 0, 0, false, false, null, random());\r\n    }\r\n    return random(count, 0, chars.length, false, false, chars, random());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.RandomUtils",
    "methodName": "randomBytes",
    "signature": "byte[] randomBytes(int)",
    "visibility": "public",
    "body": "{\r\n    Validate.isTrue(count \u003e\u003d 0, \"Count cannot be negative.\");\r\n    final byte[] result \u003d new byte[count];\r\n    random().nextBytes(result);\r\n    return result;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  RandomUtils\n  i0 :\u003d @parameter0: int\n  if (i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  $r0 \u003d Object)[0]\n  Validate.isTrue($z0, \"Count cannot be negative.\", $r0)\n  $r3 \u003d newarray (byte)[i0]\n  $r2 \u003d r1.random()\n  $r2.nextBytes($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "RandomUtils#random(...0)",
        "body": "{\r\n    return random.get();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.RandomUtils",
    "methodName": "randomDouble",
    "signature": "double randomDouble(double,double)",
    "visibility": "public",
    "body": "{\r\n    Validate.isTrue(endExclusive \u003e\u003d startInclusive, \"Start value must be smaller or equal to end value.\");\r\n    Validate.isTrue(startInclusive \u003e\u003d 0, \"Both range values must be non-negative.\");\r\n    if (startInclusive \u003d\u003d endExclusive) {\r\n        return startInclusive;\r\n    }\r\n    return startInclusive + (endExclusive - startInclusive) * random().nextDouble();\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i3 \u003c 0) → B1 | else → B2",
      "B3 : If($i4 \u003c 0) → B4 | else → B5",
      "B6 : If($b2 !\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  RandomUtils\n  d1 :\u003d @parameter0: double\n  d0 :\u003d @parameter1: double\n  $b0 \u003d d0 cmpl d1\n  $i3 \u003d (int) $b0\n  if ($i3 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  $r0 \u003d Object)[0]\n  Validate.isTrue($z0, \"Start value must be smaller or equal to end value.\", $r0)\n  $b1 \u003d 0\n  $i4 \u003d (int) $b1\n  if ($i4 \u003c 0) goto B4 else B5\n}",
      "B4 {\n  $z1 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z1 \u003d 0\n}",
      "B6 {\n  $r1 \u003d Object)[0]\n  Validate.isTrue($z1, \"Both range values must be non-negative.\", $r1)\n  $b2 \u003d d1 cmpl d0\n  if ($b2 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $d3 \u003d d0 - d1\n  $r3 \u003d r2.random()\n  $d2 \u003d $r3.nextDouble()\n  $d4 \u003d $d3 * $d2\n  $d5 \u003d d1 + $d4\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "RandomUtils#random(...0)",
        "body": "{\r\n    return random.get();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.RandomUtils",
    "methodName": "randomFloat",
    "signature": "float randomFloat(float,float)",
    "visibility": "public",
    "body": "{\r\n    Validate.isTrue(endExclusive \u003e\u003d startInclusive, \"Start value must be smaller or equal to end value.\");\r\n    Validate.isTrue(startInclusive \u003e\u003d 0, \"Both range values must be non-negative.\");\r\n    if (startInclusive \u003d\u003d endExclusive) {\r\n        return startInclusive;\r\n    }\r\n    return startInclusive + (endExclusive - startInclusive) * random().nextFloat();\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i3 \u003c 0) → B1 | else → B2",
      "B3 : If($i4 \u003c 0) → B4 | else → B5",
      "B6 : If($b2 !\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  RandomUtils\n  f1 :\u003d @parameter0: float\n  f0 :\u003d @parameter1: float\n  $b0 \u003d f0 cmpl f1\n  $i3 \u003d (int) $b0\n  if ($i3 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  $r0 \u003d Object)[0]\n  Validate.isTrue($z0, \"Start value must be smaller or equal to end value.\", $r0)\n  $b1 \u003d 0F\n  $i4 \u003d (int) $b1\n  if ($i4 \u003c 0) goto B4 else B5\n}",
      "B4 {\n  $z1 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z1 \u003d 0\n}",
      "B6 {\n  $r1 \u003d Object)[0]\n  Validate.isTrue($z1, \"Both range values must be non-negative.\", $r1)\n  $b2 \u003d f1 cmpl f0\n  if ($b2 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $f3 \u003d f0 - f1\n  $r3 \u003d r2.random()\n  $f2 \u003d $r3.nextFloat()\n  $f4 \u003d $f3 * $f2\n  $f5 \u003d f1 + $f4\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "RandomUtils#random(...0)",
        "body": "{\r\n    return random.get();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.RandomUtils",
    "methodName": "randomInt",
    "signature": "int randomInt(int,int)",
    "visibility": "public",
    "body": "{\r\n    Validate.isTrue(endExclusive \u003e\u003d startInclusive, \"Start value must be smaller or equal to end value.\");\r\n    Validate.isTrue(startInclusive \u003e\u003d 0, \"Both range values must be non-negative.\");\r\n    if (startInclusive \u003d\u003d endExclusive) {\r\n        return startInclusive;\r\n    }\r\n    return startInclusive + random().nextInt(endExclusive - startInclusive);\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003c i1) → B1 | else → B2",
      "B3 : If(i1 \u003c 0) → B4 | else → B5",
      "B6 : If(i1 !\u003d i0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  RandomUtils\n  i1 :\u003d @parameter0: int\n  i0 :\u003d @parameter1: int\n  if (i0 \u003c i1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  $r0 \u003d Object)[0]\n  Validate.isTrue($z0, \"Start value must be smaller or equal to end value.\", $r0)\n  if (i1 \u003c 0) goto B4 else B5\n}",
      "B4 {\n  $z1 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z1 \u003d 0\n}",
      "B6 {\n  $r1 \u003d Object)[0]\n  Validate.isTrue($z1, \"Both range values must be non-negative.\", $r1)\n  if (i1 !\u003d i0) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $r3 \u003d r2.random()\n  $i2 \u003d i0 - i1\n  $i3 \u003d $r3.nextInt($i2)\n  $i4 \u003d i1 + $i3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "RandomUtils#random(...0)",
        "body": "{\r\n    return random.get();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.RandomUtils",
    "methodName": "randomLong",
    "signature": "long randomLong(long,long)",
    "visibility": "public",
    "body": "{\r\n    Validate.isTrue(endExclusive \u003e\u003d startInclusive, \"Start value must be smaller or equal to end value.\");\r\n    Validate.isTrue(startInclusive \u003e\u003d 0, \"Both range values must be non-negative.\");\r\n    if (startInclusive \u003d\u003d endExclusive) {\r\n        return startInclusive;\r\n    }\r\n    return startInclusive + randomLong(endExclusive - startInclusive);\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i8 \u003c 0) → B1 | else → B2",
      "B3 : If($i9 \u003c 0) → B4 | else → B5",
      "B6 : If($b4 !\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  RandomUtils\n  l1 :\u003d @parameter0: long\n  l0 :\u003d @parameter1: long\n  $b2 \u003d l0 cmp l1\n  $i8 \u003d (int) $b2\n  if ($i8 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  $r0 \u003d Object)[0]\n  Validate.isTrue($z0, \"Start value must be smaller or equal to end value.\", $r0)\n  $b3 \u003d l1 cmp 0L\n  $i9 \u003d (int) $b3\n  if ($i9 \u003c 0) goto B4 else B5\n}",
      "B4 {\n  $z1 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z1 \u003d 0\n}",
      "B6 {\n  $r1 \u003d Object)[0]\n  Validate.isTrue($z1, \"Both range values must be non-negative.\", $r1)\n  $b4 \u003d l1 cmp l0\n  if ($b4 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $l5 \u003d l0 - l1\n  $l6 \u003d r2.randomLong($l5)\n  $l7 \u003d l1 + $l6\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "RandomUtils#randomLong(...1)",
        "body": "{\r\n    // Extracted from o.a.c.rng.core.BaseProvider.nextLong(long)\r\n    long bits;\r\n    long val;\r\n    do {\r\n        bits \u003d random().nextLong() \u003e\u003e\u003e 1;\r\n        val \u003d bits % n;\r\n    } while (bits - val + n - 1 \u003c 0);\r\n    return val;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Range",
    "methodName": "contains",
    "signature": "boolean contains(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 \u003c\u003d $i3) → B3 | else → B5",
      "B3 : If($i1 \u003e\u003d 1) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Range\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d Comparator comparator\u003e\n  $r2 \u003d Object minimum\u003e\n  $i0 \u003d $r3.compare(r0, $r2)\n  $i3 \u003d (int) -1\n  if ($i0 \u003c\u003d $i3) goto B3 else B5\n}",
      "B3 {\n  $r5 \u003d Comparator comparator\u003e\n  $r4 \u003d Object maximum\u003e\n  $i1 \u003d $r5.compare(r0, $r4)\n  if ($i1 \u003e\u003d 1) goto B4 else B5\n}",
      "B4 {\n  $z0 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z0 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Range",
    "methodName": "containsRange",
    "signature": "boolean containsRange(org.apache.commons.lang3.Range)",
    "visibility": "public",
    "body": "{\r\n    if (otherRange \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return contains(otherRange.minimum) \u0026\u0026 contains(otherRange.maximum);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B5",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Range\n  Range\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d Object minimum\u003e\n  $z0 \u003d r1.contains($r2)\n  if ($z0 \u003d\u003d false) goto B3 else B5\n}",
      "B3 {\n  $r3 \u003d Object maximum\u003e\n  $z1 \u003d r1.contains($r3)\n  if ($z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $z2 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z2 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Range#contains(...1)",
        "body": "{\r\n    if (element \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return comparator.compare(element, minimum) \u003e -1 \u0026\u0026 comparator.compare(element, maximum) \u003c 1;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Range",
    "methodName": "elementCompareTo",
    "signature": "int elementCompareTo(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Range\n  Object\n  Objects.requireNonNull(r0, \"element\")\n  $z0 \u003d r1.isAfter(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d (int) -1\n  return\n}",
      "B2 {\n  $z1 \u003d r1.isBefore(r0)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Range",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (obj \u003d\u003d null || obj.getClass() !\u003d getClass()) {\r\n        return false;\r\n    }\r\n    // OK because we checked the class above\r\n    @SuppressWarnings(\"unchecked\")\r\n    final Range\u003cT\u003e range \u003d (Range\u003cT\u003e) obj;\r\n    return minimum.equals(range.minimum) \u0026\u0026 maximum.equals(range.maximum);\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 \u003d\u003d null) → B3 | else → B4",
      "B3 : If($r3 \u003d\u003d $r2) → B4 | else → B5",
      "B5 : If($z0 \u003d\u003d false) → B6 | else → B8",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  Range\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d r0.getClass()\n  $r2 \u003d r1.getClass()\n  if ($r3 \u003d\u003d $r2) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  r4 \u003d Range) r0\n  $r6 \u003d Object minimum\u003e\n  $r5 \u003d Object minimum\u003e\n  $z0 \u003d $r6.equals($r5)\n  if ($z0 \u003d\u003d false) goto B6 else B8\n}",
      "B6 {\n  $r8 \u003d Object maximum\u003e\n  $r7 \u003d Object maximum\u003e\n  $z1 \u003d $r8.equals($r7)\n  if ($z1 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $z2 \u003d 1\n  goto B9\n}",
      "B8 {\n  $z2 \u003d 0\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Range#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Range",
    "methodName": "fit",
    "signature": "java.lang.Object fit(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Range\n  Object\n  Objects.requireNonNull(r0, \"element\")\n  $z0 \u003d r1.isAfter(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Object minimum\u003e\n  return\n}",
      "B2 {\n  $z1 \u003d r1.isBefore(r0)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d Object maximum\u003e\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Range",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    int result \u003d hashCode;\r\n    if (hashCode \u003d\u003d 0) {\r\n        result \u003d 17;\r\n        result \u003d 37 * result + getClass().hashCode();\r\n        result \u003d 37 * result + minimum.hashCode();\r\n        result \u003d 37 * result + maximum.hashCode();\r\n        hashCode \u003d result;\r\n    }\r\n    return result;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Range\n  i6 \u003d Range: int hashCode\u003e\n  $i0 \u003d Range: int hashCode\u003e\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d r0.getClass()\n  $i1 \u003d $r1.hashCode()\n  i7 \u003d 629 + $i1\n  $i3 \u003d 37 * i7\n  $r2 \u003d Object minimum\u003e\n  $i2 \u003d $r2.hashCode()\n  i8 \u003d $i3 + $i2\n  $i5 \u003d 37 * i8\n  $r3 \u003d Object maximum\u003e\n  $i4 \u003d $r3.hashCode()\n  i6 \u003d $i5 + $i4\n  Range: int hashCode\u003e \u003d i6\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Range#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Range",
    "methodName": "intersectionWith",
    "signature": "org.apache.commons.lang3.Range intersectionWith(org.apache.commons.lang3.Range)",
    "visibility": "public",
    "body": "{\r\n    if (!this.isOverlappedBy(other)) {\r\n        throw new IllegalArgumentException(String.format(\"Cannot calculate intersection with non-overlapping range %s\", other));\r\n    }\r\n    if (this.equals(other)) {\r\n        return this;\r\n    }\r\n    final T min \u003d getComparator().compare(minimum, other.minimum) \u003c 0 ? other.minimum : minimum;\r\n    final T max \u003d getComparator().compare(maximum, other.maximum) \u003c 0 ? maximum : other.maximum;\r\n    return of(min, max, getComparator());\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($i0 \u003e\u003d 0) → B5 | else → B6",
      "B7 : If($i1 \u003e\u003d 0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  Range\n  Range\n  $z0 \u003d r0.isOverlappedBy(r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r11 \u003d IllegalArgumentException\n  $r12 \u003d Object)[1]\n  $r12[0] \u003d r1\n  $r13 \u003d String.format(\"Cannot calculate intersection with non-overlapping range %s\", $r12)\n  new IllegalArgumentException($r13)\n  throw $r11\n}",
      "B2 {\n  $z1 \u003d r0.equals(r1)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r4 \u003d r0.getComparator()\n  $r3 \u003d Object minimum\u003e\n  $r2 \u003d Object minimum\u003e\n  $i0 \u003d $r4.compare($r3, $r2)\n  if ($i0 \u003e\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r14 \u003d Object minimum\u003e\n  goto B7\n}",
      "B6 {\n  $r14 \u003d Object minimum\u003e\n}",
      "B7 {\n  r5 \u003d $r14\n  $r8 \u003d r0.getComparator()\n  $r7 \u003d Object maximum\u003e\n  $r6 \u003d Object maximum\u003e\n  $i1 \u003d $r8.compare($r7, $r6)\n  if ($i1 \u003e\u003d 0) goto B8 else B9\n}",
      "B8 {\n  $r15 \u003d Object maximum\u003e\n  goto B10\n}",
      "B9 {\n  $r15 \u003d Object maximum\u003e\n}",
      "B10 {\n  $r9 \u003d r0.getComparator()\n  $r10 \u003d Range.of(r5, $r15, $r9)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Range#equals(...1)",
        "body": "{\r\n    if (obj \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (obj \u003d\u003d null || obj.getClass() !\u003d getClass()) {\r\n        return false;\r\n    }\r\n    // OK because we checked the class above\r\n    @SuppressWarnings(\"unchecked\")\r\n    final Range\u003cT\u003e range \u003d (Range\u003cT\u003e) obj;\r\n    return minimum.equals(range.minimum) \u0026\u0026 maximum.equals(range.maximum);\r\n}"
      },
      {
        "name": "Range#of(...3)",
        "body": "{\r\n    return new Range\u003c\u003e(fromInclusive, toInclusive, comparator);\r\n}"
      },
      {
        "name": "Range#getComparator(...0)",
        "body": "{\r\n    return comparator;\r\n}"
      },
      {
        "name": "Range#isOverlappedBy(...1)",
        "body": "{\r\n    if (otherRange \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return otherRange.contains(minimum) || otherRange.contains(maximum) || contains(otherRange.minimum);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Range",
    "methodName": "isAfter",
    "signature": "boolean isAfter(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 \u003e\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Range\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d Comparator comparator\u003e\n  $r2 \u003d Object minimum\u003e\n  $i0 \u003d $r3.compare(r0, $r2)\n  if ($i0 \u003e\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $z0 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z0 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Range",
    "methodName": "isAfterRange",
    "signature": "boolean isAfterRange(org.apache.commons.lang3.Range)",
    "visibility": "public",
    "body": "{\r\n    if (otherRange \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return isAfter(otherRange.maximum);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Range\n  Range\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d Object maximum\u003e\n  $z0 \u003d r1.isAfter($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Range#isAfter(...1)",
        "body": "{\r\n    if (element \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return comparator.compare(element, minimum) \u003c 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Range",
    "methodName": "isBefore",
    "signature": "boolean isBefore(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 \u003c\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Range\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d Comparator comparator\u003e\n  $r2 \u003d Object maximum\u003e\n  $i0 \u003d $r3.compare(r0, $r2)\n  if ($i0 \u003c\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $z0 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z0 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Range",
    "methodName": "isBeforeRange",
    "signature": "boolean isBeforeRange(org.apache.commons.lang3.Range)",
    "visibility": "public",
    "body": "{\r\n    if (otherRange \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return isBefore(otherRange.minimum);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Range\n  Range\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d Object minimum\u003e\n  $z0 \u003d r1.isBefore($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Range#isBefore(...1)",
        "body": "{\r\n    if (element \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return comparator.compare(element, maximum) \u003e 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Range",
    "methodName": "isEndedBy",
    "signature": "boolean isEndedBy(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Range\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d Comparator comparator\u003e\n  $r2 \u003d Object maximum\u003e\n  $i0 \u003d $r3.compare(r0, $r2)\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $z0 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z0 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Range",
    "methodName": "isNaturalOrdering",
    "signature": "boolean isNaturalOrdering()",
    "visibility": "public",
    "body": "{\r\n    return comparator \u003d\u003d ComparableComparator.INSTANCE;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Range\n  $r2 \u003d Comparator comparator\u003e\n  $r1 \u003d Range$ComparableComparator INSTANCE\u003e\n  if ($r2 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Range",
    "methodName": "isOverlappedBy",
    "signature": "boolean isOverlappedBy(org.apache.commons.lang3.Range)",
    "visibility": "public",
    "body": "{\r\n    if (otherRange \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return otherRange.contains(minimum) || otherRange.contains(maximum) || contains(otherRange.minimum);\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B5",
      "B3 : If($z1 !\u003d 0) → B4 | else → B5",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Range\n  Range\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d Object minimum\u003e\n  $z0 \u003d r0.contains($r2)\n  if ($z0 !\u003d 0) goto B3 else B5\n}",
      "B3 {\n  $r3 \u003d Object maximum\u003e\n  $z1 \u003d r0.contains($r3)\n  if ($z1 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d Object minimum\u003e\n  $z2 \u003d r1.contains($r4)\n  if ($z2 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $z3 \u003d 1\n  goto B7\n}",
      "B6 {\n  $z3 \u003d 0\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Range#contains(...1)",
        "body": "{\r\n    if (element \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return comparator.compare(element, minimum) \u003e -1 \u0026\u0026 comparator.compare(element, maximum) \u003c 1;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Range",
    "methodName": "isStartedBy",
    "signature": "boolean isStartedBy(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Range\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d Comparator comparator\u003e\n  $r2 \u003d Object minimum\u003e\n  $i0 \u003d $r3.compare(r0, $r2)\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $z0 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z0 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Range",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    if (toString \u003d\u003d null) {\r\n        toString \u003d \"[\" + minimum + \"..\" + maximum + \"]\";\r\n    }\r\n    return toString;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Range\n  $r1 \u003d String toString\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  $r5 \u003d $r3.append(\"\")\n  $r4 \u003d Object minimum\u003e\n  $r6 \u003d $r5.append($r4)\n  $r8 \u003d $r6.append(\"..\")\n  $r7 \u003d Object maximum\u003e\n  $r9 \u003d $r8.append($r7)\n  $r10 \u003d $r9.append(\"\")\n  $r11 \u003d $r10.toString()\n  String toString\u003e \u003d $r11\n}",
      "B2 {\n  $r2 \u003d String toString\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.ConstructorUtils",
    "methodName": "getAccessibleConstructor",
    "signature": "java.lang.reflect.Constructor getAccessibleConstructor(java.lang.reflect.Constructor)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(ctor, \"ctor\");\r\n    return MemberUtils.isAccessible(ctor) \u0026\u0026 isAccessible(ctor.getDeclaringClass()) ? ctor : null;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Constructor\n  Objects.requireNonNull(r0, \"ctor\")\n  $z0 \u003d MemberUtils.isAccessible(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $r1 \u003d r0.getDeclaringClass()\n  $z1 \u003d ConstructorUtils.isAccessible($r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r2 \u003d null\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ConstructorUtils#isAccessible(...1)",
        "body": "{\r\n    Class\u003c?\u003e cls \u003d type;\r\n    while (cls !\u003d null) {\r\n        if (!ClassUtils.isPublic(cls)) {\r\n            return false;\r\n        }\r\n        cls \u003d cls.getEnclosingClass();\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.ConstructorUtils",
    "methodName": "getMatchingAccessibleConstructor",
    "signature": "java.lang.reflect.Constructor getMatchingAccessibleConstructor(java.lang.Class,java.lang.Class[])",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(cls, \"cls\");\r\n    // see if we can find the constructor directly\r\n    // most of the time this works and it\u0027s much faster\r\n    try {\r\n        return MemberUtils.setAccessibleWorkaround(cls.getConstructor(parameterTypes));\r\n    } catch (final NoSuchMethodException ignored) {\r\n        // ignore\r\n    }\r\n    Constructor\u003cT\u003e result \u003d null;\r\n    /*\r\n         * (1) Class.getConstructors() is documented to return Constructor\u003cT\u003e so as\r\n         * long as the array is not subsequently modified, everything\u0027s fine.\r\n         */\r\n    final Constructor\u003c?\u003e[] ctors \u003d cls.getConstructors();\r\n    // return best match:\r\n    for (Constructor\u003c?\u003e ctor : ctors) {\r\n        // compare parameters\r\n        if (MemberUtils.isMatchingConstructor(ctor, parameterTypes)) {\r\n            // get accessible version of constructor\r\n            ctor \u003d getAccessibleConstructor(ctor);\r\n            if (ctor !\u003d null) {\r\n                MemberUtils.setAccessibleWorkaround(ctor);\r\n                if (result \u003d\u003d null || MemberUtils.compareConstructorFit(ctor, result, parameterTypes) \u003c 0) {\r\n                    // temporary variable for annotation, see comment above (1)\r\n                    @SuppressWarnings(\"unchecked\")\r\n                    final Constructor\u003cT\u003e constructor \u003d (Constructor\u003cT\u003e) ctor;\r\n                    result \u003d constructor;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}",
    "nodes": 10,
    "edges": 13,
    "cc": 5,
    "flowSummary": [
      "B2 : If(i2 \u003e\u003d i0) → B3 | else → B9",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B8",
      "B4 : If(r9 \u003d\u003d null) → B5 | else → B8",
      "B5 : If(r7 \u003d\u003d null) → B6 | else → B7",
      "B6 : If($i1 \u003e\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  Class\n  Class[]\n  Objects.requireNonNull(r0, \"cls\")\n  $r2 \u003d r0.getConstructor(r1)\n  $r3 \u003d MemberUtils.setAccessibleWorkaround($r2)\n  $r4 \u003d Constructor) $r3\n  return\n}",
      "B1 {\n  $r5 :\u003d @caughtexception\n  r7 \u003d null\n  r6 \u003d r0.getConstructors()\n  i0 \u003d lengthof r6\n  i2 \u003d 0\n}",
      "B2 {\n  if (i2 \u003e\u003d i0) goto B3 else B9\n}",
      "B3 {\n  r8 \u003d r6[i2]\n  $z0 \u003d MemberUtils.isMatchingConstructor(r8, r1)\n  if ($z0 \u003d\u003d false) goto B4 else B8\n}",
      "B4 {\n  r9 \u003d ConstructorUtils.getAccessibleConstructor(r8)\n  if (r9 \u003d\u003d null) goto B5 else B8\n}",
      "B5 {\n  MemberUtils.setAccessibleWorkaround(r9)\n  if (r7 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  $i1 \u003d MemberUtils.compareConstructorFit(r9, r7, r1)\n  if ($i1 \u003e\u003d 0) goto B7 else B8\n}",
      "B7 {\n  r7 \u003d r9\n}",
      "B8 {\n  i2 \u003d i2 + 1\n  goto B2\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B9",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B2",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ConstructorUtils#getAccessibleConstructor(...1)",
        "body": "{\r\n    Objects.requireNonNull(ctor, \"ctor\");\r\n    return MemberUtils.isAccessible(ctor) \u0026\u0026 isAccessible(ctor.getDeclaringClass()) ? ctor : null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.ConstructorUtils",
    "methodName": "invokeConstructor",
    "signature": "java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[],java.lang.Class[])",
    "visibility": "public",
    "body": "{\r\n    args \u003d ArrayUtils.nullToEmpty(args);\r\n    parameterTypes \u003d ArrayUtils.nullToEmpty(parameterTypes);\r\n    final Constructor\u003cT\u003e ctor \u003d getMatchingAccessibleConstructor(cls, parameterTypes);\r\n    if (ctor \u003d\u003d null) {\r\n        throw new NoSuchMethodException(\"No such accessible constructor on object: \" + cls.getName());\r\n    }\r\n    if (ctor.isVarArgs()) {\r\n        final Class\u003c?\u003e[] methodParameterTypes \u003d ctor.getParameterTypes();\r\n        args \u003d MethodUtils.getVarArgs(args, methodParameterTypes);\r\n    }\r\n    return ctor.newInstance(args);\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Class\n  Object[]\n  Class[]\n  r12 \u003d ArrayUtils.nullToEmpty(r10)\n  r13 \u003d ArrayUtils.nullToEmpty(r11)\n  r1 \u003d ConstructorUtils.getMatchingAccessibleConstructor(r0, r13)\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d NoSuchMethodException\n  $r5 \u003d StringBuilder\n  new StringBuilder()\n  $r7 \u003d $r5.append(\"No such accessible constructor on object: \")\n  $r6 \u003d r0.getName()\n  $r8 \u003d $r7.append($r6)\n  $r9 \u003d $r8.toString()\n  new NoSuchMethodException($r9)\n  throw $r4\n}",
      "B2 {\n  $z0 \u003d r1.isVarArgs()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  r3 \u003d r1.getParameterTypes()\n  r12 \u003d MethodUtils.getVarArgs(r12, r3)\n}",
      "B4 {\n  $r2 \u003d r1.newInstance(r12)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ConstructorUtils#getMatchingAccessibleConstructor(...2)",
        "body": "{\r\n    Objects.requireNonNull(cls, \"cls\");\r\n    // see if we can find the constructor directly\r\n    // most of the time this works and it\u0027s much faster\r\n    try {\r\n        return MemberUtils.setAccessibleWorkaround(cls.getConstructor(parameterTypes));\r\n    } catch (final NoSuchMethodException ignored) {\r\n        // ignore\r\n    }\r\n    Constructor\u003cT\u003e result \u003d null;\r\n    /*\r\n         * (1) Class.getConstructors() is documented to return Constructor\u003cT\u003e so as\r\n         * long as the array is not subsequently modified, everything\u0027s fine.\r\n         */\r\n    final Constructor\u003c?\u003e[] ctors \u003d cls.getConstructors();\r\n    // return best match:\r\n    for (Constructor\u003c?\u003e ctor : ctors) {\r\n        // compare parameters\r\n        if (MemberUtils.isMatchingConstructor(ctor, parameterTypes)) {\r\n            // get accessible version of constructor\r\n            ctor \u003d getAccessibleConstructor(ctor);\r\n            if (ctor !\u003d null) {\r\n                MemberUtils.setAccessibleWorkaround(ctor);\r\n                if (result \u003d\u003d null || MemberUtils.compareConstructorFit(ctor, result, parameterTypes) \u003c 0) {\r\n                    // temporary variable for annotation, see comment above (1)\r\n                    @SuppressWarnings(\"unchecked\")\r\n                    final Constructor\u003cT\u003e constructor \u003d (Constructor\u003cT\u003e) ctor;\r\n                    result \u003d constructor;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.ConstructorUtils",
    "methodName": "invokeExactConstructor",
    "signature": "java.lang.Object invokeExactConstructor(java.lang.Class,java.lang.Object[],java.lang.Class[])",
    "visibility": "public",
    "body": "{\r\n    args \u003d ArrayUtils.nullToEmpty(args);\r\n    parameterTypes \u003d ArrayUtils.nullToEmpty(parameterTypes);\r\n    final Constructor\u003cT\u003e ctor \u003d getAccessibleConstructor(cls, parameterTypes);\r\n    if (ctor \u003d\u003d null) {\r\n        throw new NoSuchMethodException(\"No such accessible constructor on object: \" + cls.getName());\r\n    }\r\n    return ctor.newInstance(args);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  Object[]\n  Class[]\n  r11 \u003d ArrayUtils.nullToEmpty(r9)\n  r12 \u003d ArrayUtils.nullToEmpty(r10)\n  r1 \u003d ConstructorUtils.getAccessibleConstructor(r0, r12)\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d NoSuchMethodException\n  $r4 \u003d StringBuilder\n  new StringBuilder()\n  $r6 \u003d $r4.append(\"No such accessible constructor on object: \")\n  $r5 \u003d r0.getName()\n  $r7 \u003d $r6.append($r5)\n  $r8 \u003d $r7.toString()\n  new NoSuchMethodException($r8)\n  throw $r3\n}",
      "B2 {\n  $r2 \u003d r1.newInstance(r11)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ConstructorUtils#getAccessibleConstructor(...2)",
        "body": "{\r\n    Objects.requireNonNull(cls, \"cls\");\r\n    try {\r\n        return getAccessibleConstructor(cls.getConstructor(parameterTypes));\r\n    } catch (final NoSuchMethodException e) {\r\n        return null;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.FieldUtils",
    "methodName": "getAllFieldsList",
    "signature": "java.util.List getAllFieldsList(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(cls, \"cls\");\r\n    final List\u003cField\u003e allFields \u003d new ArrayList\u003c\u003e();\r\n    Class\u003c?\u003e currentClass \u003d cls;\r\n    while (currentClass !\u003d null) {\r\n        final Field[] declaredFields \u003d currentClass.getDeclaredFields();\r\n        Collections.addAll(allFields, declaredFields);\r\n        currentClass \u003d currentClass.getSuperclass();\r\n    }\r\n    return allFields;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(r3 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Class\n  Objects.requireNonNull(r0, \"cls\")\n  $r1 \u003d ArrayList\n  new ArrayList()\n  r3 \u003d r0\n}",
      "B1 {\n  if (r3 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r3.getDeclaredFields()\n  Collections.addAll($r1, r2)\n  r3 \u003d r3.getSuperclass()\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.FieldUtils",
    "methodName": "getDeclaredField",
    "signature": "java.lang.reflect.Field getDeclaredField(java.lang.Class,java.lang.String,boolean)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(cls, \"cls\");\r\n    Validate.isTrue(StringUtils.isNotBlank(fieldName), \"The field name must not be blank/empty\");\r\n    try {\r\n        // only consider the specified class by using getDeclaredField()\r\n        final Field field \u003d cls.getDeclaredField(fieldName);\r\n        if (!MemberUtils.isAccessible(field)) {\r\n            if (!forceAccess) {\r\n                return null;\r\n            }\r\n            field.setAccessible(true);\r\n        }\r\n        return field;\r\n    } catch (final NoSuchFieldException ignored) {\r\n        // ignore\r\n    }\r\n    return null;\r\n}",
    "nodes": 6,
    "edges": 5,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z1 !\u003d 0) → B1 | else → B4",
      "B1 : If(z2 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Class\n  String\n  z2 :\u003d @parameter2: boolean\n  Objects.requireNonNull(r0, \"cls\")\n  $z0 \u003d StringUtils.isNotBlank(r1)\n  $r2 \u003d Object)[0]\n  Validate.isTrue($z0, \"The field name must not be blank/empty\", $r2)\n  r4 \u003d r0.getDeclaredField(r1)\n  $z1 \u003d MemberUtils.isAccessible(r4)\n  if ($z1 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  if (z2 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  r4.setAccessible(1)\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r3 :\u003d @caughtexception\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.FieldUtils",
    "methodName": "getField",
    "signature": "java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(cls, \"cls\");\r\n    Validate.isTrue(StringUtils.isNotBlank(fieldName), \"The field name must not be blank/empty\");\r\n    // FIXME is this workaround still needed? lang requires Java 6\r\n    // Sun Java 1.3 has a bugged implementation of getField hence we write the\r\n    // code ourselves\r\n    // getField() will return the Field object with the declaring class\r\n    // set correctly to the class that declares the field. Thus requesting the\r\n    // field on a subclass will return the field from the superclass.\r\n    //\r\n    // priority order for lookup:\r\n    // searchclass private/protected/package/public\r\n    // superclass protected/package/public\r\n    // private/different package blocks access to further superclasses\r\n    // implementedinterface public\r\n    // check up the superclass hierarchy\r\n    for (Class\u003c?\u003e acls \u003d cls; acls !\u003d null; acls \u003d acls.getSuperclass()) {\r\n        try {\r\n            final Field field \u003d acls.getDeclaredField(fieldName);\r\n            // getDeclaredField checks for non-public scopes as well\r\n            // and it returns accurate results\r\n            if (!MemberUtils.isPublic(field)) {\r\n                if (!forceAccess) {\r\n                    continue;\r\n                }\r\n                field.setAccessible(true);\r\n            }\r\n            return field;\r\n        } catch (final NoSuchFieldException ignored) {\r\n            // ignore\r\n        }\r\n    }\r\n    // check the public interface case. This must be manually searched for\r\n    // incase there is a public supersuperclass field hidden by a private/package\r\n    // superclass field.\r\n    Field match \u003d null;\r\n    for (final Class\u003c?\u003e class1 : ClassUtils.getAllInterfaces(cls)) {\r\n        try {\r\n            final Field test \u003d class1.getField(fieldName);\r\n            Validate.isTrue(match \u003d\u003d null, \"Reference to field %s is ambiguous relative to %s\" + \"; a matching field exists on two or more implemented interfaces.\", fieldName, cls);\r\n            match \u003d test;\r\n        } catch (final NoSuchFieldException ignored) {\r\n            // ignore\r\n        }\r\n    }\r\n    return match;\r\n}",
    "nodes": 18,
    "edges": 21,
    "cc": 5,
    "flowSummary": [
      "B1 : If(r9 \u003d\u003d null) → B2 | else → B9",
      "B2 : If($z2 !\u003d 0) → B3 | else → B6",
      "B3 : If(z3 !\u003d 0) → B4 | else → B5",
      "B10 : If($z1 \u003d\u003d false) → B11 | else → B17",
      "B11 : If(r11 !\u003d null) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  Class\n  String\n  z3 :\u003d @parameter2: boolean\n  Objects.requireNonNull(r0, \"cls\")\n  $z0 \u003d StringUtils.isNotBlank(r1)\n  $r2 \u003d Object)[0]\n  Validate.isTrue($z0, \"The field name must not be blank/empty\", $r2)\n  r9 \u003d r0\n}",
      "B1 {\n  if (r9 \u003d\u003d null) goto B2 else B9\n}",
      "B2 {\n  r10 \u003d r9.getDeclaredField(r1)\n  $z2 \u003d MemberUtils.isPublic(r10)\n  if ($z2 !\u003d 0) goto B3 else B6\n}",
      "B3 {\n  if (z3 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  goto B8\n}",
      "B5 {\n  r10.setAccessible(1)\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $r8 :\u003d @caughtexception\n}",
      "B8 {\n  r9 \u003d r9.getSuperclass()\n  goto B1\n}",
      "B9 {\n  r11 \u003d null\n  $r3 \u003d ClassUtils.getAllInterfaces(r0)\n  r12 \u003d $r3.iterator()\n}",
      "B10 {\n  $z1 \u003d r12.hasNext()\n  if ($z1 \u003d\u003d false) goto B11 else B17\n}",
      "B11 {\n  $r4 \u003d r12.next()\n  r5 \u003d Class) $r4\n  r13 \u003d r5.getField(r1)\n  if (r11 !\u003d null) goto B12 else B13\n}",
      "B12 {\n  $z4 \u003d 1\n  goto B14\n}",
      "B13 {\n  $z4 \u003d 0\n}",
      "B14 {\n  $r6 \u003d Object)[2]\n  $r6[0] \u003d r1\n  $r6[1] \u003d r0\n  Validate.isTrue($z4, \"Reference to field %s is ambiguous relative to %s; a matching field exists on two or more implemented interfaces.\", $r6)\n  r11 \u003d r13\n  goto B16\n}",
      "B15 {\n  $r7 :\u003d @caughtexception\n}",
      "B16 {\n  goto B10\n}",
      "B17 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B9",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B8 --\u003e B1",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B17",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B10",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.FieldUtils",
    "methodName": "readDeclaredField",
    "signature": "java.lang.Object readDeclaredField(java.lang.Object,java.lang.String,boolean)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(target, \"target\");\r\n    final Class\u003c?\u003e cls \u003d target.getClass();\r\n    final Field field \u003d getDeclaredField(cls, fieldName, forceAccess);\r\n    Validate.isTrue(field !\u003d null, \"Cannot locate declared field %s.%s\", cls, fieldName);\r\n    // already forced access above, don\u0027t repeat it here:\r\n    return readField(field, target, false);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  String\n  z0 :\u003d @parameter2: boolean\n  Objects.requireNonNull(r0, \"target\")\n  r1 \u003d r0.getClass()\n  r3 \u003d FieldUtils.getDeclaredField(r1, r2, z0)\n  if (r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  $r4 \u003d Object)[2]\n  $r4[0] \u003d r1\n  $r4[1] \u003d r2\n  Validate.isTrue($z1, \"Cannot locate declared field %s.%s\", $r4)\n  $r5 \u003d FieldUtils.readField(r3, r0, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FieldUtils#getDeclaredField(...3)",
        "body": "{\r\n    Objects.requireNonNull(cls, \"cls\");\r\n    Validate.isTrue(StringUtils.isNotBlank(fieldName), \"The field name must not be blank/empty\");\r\n    try {\r\n        // only consider the specified class by using getDeclaredField()\r\n        final Field field \u003d cls.getDeclaredField(fieldName);\r\n        if (!MemberUtils.isAccessible(field)) {\r\n            if (!forceAccess) {\r\n                return null;\r\n            }\r\n            field.setAccessible(true);\r\n        }\r\n        return field;\r\n    } catch (final NoSuchFieldException ignored) {\r\n        // ignore\r\n    }\r\n    return null;\r\n}"
      },
      {
        "name": "FieldUtils#readField(...3)",
        "body": "{\r\n    Objects.requireNonNull(field, \"field\");\r\n    if (forceAccess \u0026\u0026 !field.isAccessible()) {\r\n        field.setAccessible(true);\r\n    } else {\r\n        MemberUtils.setAccessibleWorkaround(field);\r\n    }\r\n    return field.get(target);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.FieldUtils",
    "methodName": "readField",
    "signature": "java.lang.Object readField(java.lang.reflect.Field,java.lang.Object,boolean)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(field, \"field\");\r\n    if (forceAccess \u0026\u0026 !field.isAccessible()) {\r\n        field.setAccessible(true);\r\n    } else {\r\n        MemberUtils.setAccessibleWorkaround(field);\r\n    }\r\n    return field.get(target);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Field\n  Object\n  z0 :\u003d @parameter2: boolean\n  Objects.requireNonNull(r0, \"field\")\n  if (z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $z1 \u003d r0.isAccessible()\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  r0.setAccessible(1)\n  goto B4\n}",
      "B3 {\n  MemberUtils.setAccessibleWorkaround(r0)\n}",
      "B4 {\n  $r2 \u003d r0.get(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.FieldUtils",
    "methodName": "readField",
    "signature": "java.lang.Object readField(java.lang.Object,java.lang.String,boolean)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(target, \"target\");\r\n    final Class\u003c?\u003e cls \u003d target.getClass();\r\n    final Field field \u003d getField(cls, fieldName, forceAccess);\r\n    Validate.isTrue(field !\u003d null, \"Cannot locate field %s on %s\", fieldName, cls);\r\n    // already forced access above, don\u0027t repeat it here:\r\n    return readField(field, target, false);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  String\n  z0 :\u003d @parameter2: boolean\n  Objects.requireNonNull(r0, \"target\")\n  r1 \u003d r0.getClass()\n  r3 \u003d FieldUtils.getField(r1, r2, z0)\n  if (r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  $r4 \u003d Object)[2]\n  $r4[0] \u003d r2\n  $r4[1] \u003d r1\n  Validate.isTrue($z1, \"Cannot locate field %s on %s\", $r4)\n  $r5 \u003d FieldUtils.readField(r3, r0, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FieldUtils#getField(...3)",
        "body": "{\r\n    Objects.requireNonNull(cls, \"cls\");\r\n    Validate.isTrue(StringUtils.isNotBlank(fieldName), \"The field name must not be blank/empty\");\r\n    // FIXME is this workaround still needed? lang requires Java 6\r\n    // Sun Java 1.3 has a bugged implementation of getField hence we write the\r\n    // code ourselves\r\n    // getField() will return the Field object with the declaring class\r\n    // set correctly to the class that declares the field. Thus requesting the\r\n    // field on a subclass will return the field from the superclass.\r\n    //\r\n    // priority order for lookup:\r\n    // searchclass private/protected/package/public\r\n    // superclass protected/package/public\r\n    // private/different package blocks access to further superclasses\r\n    // implementedinterface public\r\n    // check up the superclass hierarchy\r\n    for (Class\u003c?\u003e acls \u003d cls; acls !\u003d null; acls \u003d acls.getSuperclass()) {\r\n        try {\r\n            final Field field \u003d acls.getDeclaredField(fieldName);\r\n            // getDeclaredField checks for non-public scopes as well\r\n            // and it returns accurate results\r\n            if (!MemberUtils.isPublic(field)) {\r\n                if (!forceAccess) {\r\n                    continue;\r\n                }\r\n                field.setAccessible(true);\r\n            }\r\n            return field;\r\n        } catch (final NoSuchFieldException ignored) {\r\n            // ignore\r\n        }\r\n    }\r\n    // check the public interface case. This must be manually searched for\r\n    // incase there is a public supersuperclass field hidden by a private/package\r\n    // superclass field.\r\n    Field match \u003d null;\r\n    for (final Class\u003c?\u003e class1 : ClassUtils.getAllInterfaces(cls)) {\r\n        try {\r\n            final Field test \u003d class1.getField(fieldName);\r\n            Validate.isTrue(match \u003d\u003d null, \"Reference to field %s is ambiguous relative to %s\" + \"; a matching field exists on two or more implemented interfaces.\", fieldName, cls);\r\n            match \u003d test;\r\n        } catch (final NoSuchFieldException ignored) {\r\n            // ignore\r\n        }\r\n    }\r\n    return match;\r\n}"
      },
      {
        "name": "FieldUtils#readField(...3)",
        "body": "{\r\n    Objects.requireNonNull(field, \"field\");\r\n    if (forceAccess \u0026\u0026 !field.isAccessible()) {\r\n        field.setAccessible(true);\r\n    } else {\r\n        MemberUtils.setAccessibleWorkaround(field);\r\n    }\r\n    return field.get(target);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.FieldUtils",
    "methodName": "removeFinalModifier",
    "signature": "void removeFinalModifier(java.lang.reflect.Field,boolean)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(field, \"field\");\r\n    try {\r\n        if (Modifier.isFinal(field.getModifiers())) {\r\n            // Do all JREs implement Field with a private ivar called \"modifiers\"?\r\n            final Field modifiersField \u003d Field.class.getDeclaredField(\"modifiers\");\r\n            final boolean doForceAccess \u003d forceAccess \u0026\u0026 !modifiersField.isAccessible();\r\n            if (doForceAccess) {\r\n                modifiersField.setAccessible(true);\r\n            }\r\n            try {\r\n                modifiersField.setInt(field, field.getModifiers() \u0026 ~Modifier.FINAL);\r\n            } finally {\r\n                if (doForceAccess) {\r\n                    modifiersField.setAccessible(false);\r\n                }\r\n            }\r\n        }\r\n    } catch (final NoSuchFieldException | IllegalAccessException e) {\r\n        if (SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_12)) {\r\n            throw new UnsupportedOperationException(\"In java 12+ final cannot be removed.\", e);\r\n        }\r\n        // else no exception is thrown because we can modify final.\r\n    }\r\n}",
    "nodes": 16,
    "edges": 20,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B12",
      "B1 : If(z1 \u003d\u003d false) → B2 | else → B4",
      "B2 : If($z3 !\u003d 0) → B3 | else → B4",
      "B5 : If($z6 \u003d\u003d false) → B6 | else → B7",
      "B7 : If(z2 \u003d\u003d false) → B8 | else → B12",
      "B9 : If(z2 \u003d\u003d false) → B10 | else → B11",
      "B13 : If($z4 \u003d\u003d false) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  Field\n  z1 :\u003d @parameter1: boolean\n  Objects.requireNonNull(r0, \"field\")\n  $i0 \u003d r0.getModifiers()\n  $z0 \u003d Modifier.isFinal($i0)\n  if ($z0 \u003d\u003d false) goto B1 else B12\n}",
      "B1 {\n  $r1 \u003d class \"Ljava/lang/reflect/Field;\"\n  r6 \u003d $r1.getDeclaredField(\"modifiers\")\n  if (z1 \u003d\u003d false) goto B2 else B4\n}",
      "B2 {\n  $z3 \u003d r6.isAccessible()\n  if ($z3 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $z7 \u003d 1\n  $z6 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z7 \u003d 0\n  $z6 \u003d 0\n}",
      "B5 {\n  z2 \u003d $z7\n  if ($z6 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  r6.setAccessible(1)\n}",
      "B7 {\n  $i1 \u003d r0.getModifiers()\n  $i4 \u003d (int) -17\n  $i2 \u003d $i1 \u0026 $i4\n  r6.setInt(r0, $i2)\n  if (z2 \u003d\u003d false) goto B8 else B12\n}",
      "B8 {\n  r6.setAccessible(0)\n  goto B12\n}",
      "B9 {\n  $r5 :\u003d @caughtexception\n  if (z2 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  r6.setAccessible(0)\n}",
      "B11 {\n  throw $r5\n}",
      "B12 {\n  goto B15\n}",
      "B13 {\n  $r2 :\u003d @caughtexception\n  $r3 \u003d JavaVersion JAVA_12\u003e\n  $z4 \u003d SystemUtils.isJavaVersionAtLeast($r3)\n  if ($z4 \u003d\u003d false) goto B14 else B15\n}",
      "B14 {\n  $r7 \u003d UnsupportedOperationException\n  new UnsupportedOperationException(\"In java 12+ final cannot be removed.\", $r2)\n  throw $r7\n}",
      "B15 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B12",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B12",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B15",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.FieldUtils",
    "methodName": "writeDeclaredField",
    "signature": "void writeDeclaredField(java.lang.Object,java.lang.String,java.lang.Object,boolean)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(target, \"target\");\r\n    final Class\u003c?\u003e cls \u003d target.getClass();\r\n    final Field field \u003d getDeclaredField(cls, fieldName, forceAccess);\r\n    Validate.isTrue(field !\u003d null, \"Cannot locate declared field %s.%s\", cls.getName(), fieldName);\r\n    // already forced access above, don\u0027t repeat it here:\r\n    writeField(field, target, value, false);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  String\n  Object\n  z0 :\u003d @parameter3: boolean\n  Objects.requireNonNull(r0, \"target\")\n  r1 \u003d r0.getClass()\n  r3 \u003d FieldUtils.getDeclaredField(r1, r2, z0)\n  if (r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  $r4 \u003d Object)[2]\n  $r5 \u003d r1.getName()\n  $r4[0] \u003d $r5\n  $r4[1] \u003d r2\n  Validate.isTrue($z1, \"Cannot locate declared field %s.%s\", $r4)\n  FieldUtils.writeField(r3, r0, r6, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FieldUtils#getDeclaredField(...3)",
        "body": "{\r\n    Objects.requireNonNull(cls, \"cls\");\r\n    Validate.isTrue(StringUtils.isNotBlank(fieldName), \"The field name must not be blank/empty\");\r\n    try {\r\n        // only consider the specified class by using getDeclaredField()\r\n        final Field field \u003d cls.getDeclaredField(fieldName);\r\n        if (!MemberUtils.isAccessible(field)) {\r\n            if (!forceAccess) {\r\n                return null;\r\n            }\r\n            field.setAccessible(true);\r\n        }\r\n        return field;\r\n    } catch (final NoSuchFieldException ignored) {\r\n        // ignore\r\n    }\r\n    return null;\r\n}"
      },
      {
        "name": "FieldUtils#writeField(...4)",
        "body": "{\r\n    Objects.requireNonNull(field, \"field\");\r\n    if (forceAccess \u0026\u0026 !field.isAccessible()) {\r\n        field.setAccessible(true);\r\n    } else {\r\n        MemberUtils.setAccessibleWorkaround(field);\r\n    }\r\n    field.set(target, value);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.FieldUtils",
    "methodName": "writeField",
    "signature": "void writeField(java.lang.reflect.Field,java.lang.Object,java.lang.Object,boolean)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(field, \"field\");\r\n    if (forceAccess \u0026\u0026 !field.isAccessible()) {\r\n        field.setAccessible(true);\r\n    } else {\r\n        MemberUtils.setAccessibleWorkaround(field);\r\n    }\r\n    field.set(target, value);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Field\n  Object\n  Object\n  z0 :\u003d @parameter3: boolean\n  Objects.requireNonNull(r0, \"field\")\n  if (z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $z1 \u003d r0.isAccessible()\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  r0.setAccessible(1)\n  goto B4\n}",
      "B3 {\n  MemberUtils.setAccessibleWorkaround(r0)\n}",
      "B4 {\n  r0.set(r1, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.FieldUtils",
    "methodName": "writeField",
    "signature": "void writeField(java.lang.Object,java.lang.String,java.lang.Object,boolean)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(target, \"target\");\r\n    final Class\u003c?\u003e cls \u003d target.getClass();\r\n    final Field field \u003d getField(cls, fieldName, forceAccess);\r\n    Validate.isTrue(field !\u003d null, \"Cannot locate declared field %s.%s\", cls.getName(), fieldName);\r\n    // already forced access above, don\u0027t repeat it here:\r\n    writeField(field, target, value, false);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  String\n  Object\n  z0 :\u003d @parameter3: boolean\n  Objects.requireNonNull(r0, \"target\")\n  r1 \u003d r0.getClass()\n  r3 \u003d FieldUtils.getField(r1, r2, z0)\n  if (r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  $r4 \u003d Object)[2]\n  $r5 \u003d r1.getName()\n  $r4[0] \u003d $r5\n  $r4[1] \u003d r2\n  Validate.isTrue($z1, \"Cannot locate declared field %s.%s\", $r4)\n  FieldUtils.writeField(r3, r0, r6, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FieldUtils#writeField(...4)",
        "body": "{\r\n    Objects.requireNonNull(field, \"field\");\r\n    if (forceAccess \u0026\u0026 !field.isAccessible()) {\r\n        field.setAccessible(true);\r\n    } else {\r\n        MemberUtils.setAccessibleWorkaround(field);\r\n    }\r\n    field.set(target, value);\r\n}"
      },
      {
        "name": "FieldUtils#getField(...3)",
        "body": "{\r\n    Objects.requireNonNull(cls, \"cls\");\r\n    Validate.isTrue(StringUtils.isNotBlank(fieldName), \"The field name must not be blank/empty\");\r\n    // FIXME is this workaround still needed? lang requires Java 6\r\n    // Sun Java 1.3 has a bugged implementation of getField hence we write the\r\n    // code ourselves\r\n    // getField() will return the Field object with the declaring class\r\n    // set correctly to the class that declares the field. Thus requesting the\r\n    // field on a subclass will return the field from the superclass.\r\n    //\r\n    // priority order for lookup:\r\n    // searchclass private/protected/package/public\r\n    // superclass protected/package/public\r\n    // private/different package blocks access to further superclasses\r\n    // implementedinterface public\r\n    // check up the superclass hierarchy\r\n    for (Class\u003c?\u003e acls \u003d cls; acls !\u003d null; acls \u003d acls.getSuperclass()) {\r\n        try {\r\n            final Field field \u003d acls.getDeclaredField(fieldName);\r\n            // getDeclaredField checks for non-public scopes as well\r\n            // and it returns accurate results\r\n            if (!MemberUtils.isPublic(field)) {\r\n                if (!forceAccess) {\r\n                    continue;\r\n                }\r\n                field.setAccessible(true);\r\n            }\r\n            return field;\r\n        } catch (final NoSuchFieldException ignored) {\r\n            // ignore\r\n        }\r\n    }\r\n    // check the public interface case. This must be manually searched for\r\n    // incase there is a public supersuperclass field hidden by a private/package\r\n    // superclass field.\r\n    Field match \u003d null;\r\n    for (final Class\u003c?\u003e class1 : ClassUtils.getAllInterfaces(cls)) {\r\n        try {\r\n            final Field test \u003d class1.getField(fieldName);\r\n            Validate.isTrue(match \u003d\u003d null, \"Reference to field %s is ambiguous relative to %s\" + \"; a matching field exists on two or more implemented interfaces.\", fieldName, cls);\r\n            match \u003d test;\r\n        } catch (final NoSuchFieldException ignored) {\r\n            // ignore\r\n        }\r\n    }\r\n    return match;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.InheritanceUtils",
    "methodName": "distance",
    "signature": "int distance(java.lang.Class,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (child \u003d\u003d null || parent \u003d\u003d null) {\r\n        return -1;\r\n    }\r\n    if (child.equals(parent)) {\r\n        return 0;\r\n    }\r\n    final Class\u003c?\u003e cParent \u003d child.getSuperclass();\r\n    int d \u003d BooleanUtils.toInteger(parent.equals(cParent));\r\n    if (d \u003d\u003d 1) {\r\n        return d;\r\n    }\r\n    d +\u003d distance(cParent, parent);\r\n    return d \u003e 0 ? d + 1 : -1;\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r1 !\u003d null) → B2 | else → B3",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5",
      "B5 : If(i1 !\u003d 1) → B6 | else → B7",
      "B7 : If(i2 \u003c\u003d 0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  Class\n  Class\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $i5 \u003d (int) -1\n  return\n}",
      "B3 {\n  $z0 \u003d r0.equals(r1)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  r2 \u003d r0.getSuperclass()\n  $z1 \u003d r1.equals(r2)\n  i1 \u003d BooleanUtils.toInteger($z1)\n  if (i1 !\u003d 1) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $i0 \u003d InheritanceUtils.distance(r2, r1)\n  i2 \u003d i1 + $i0\n  if (i2 \u003c\u003d 0) goto B8 else B9\n}",
      "B8 {\n  $i3 \u003d i2 + 1\n  goto B10\n}",
      "B9 {\n  $i7 \u003d (int) -1\n  $i3 \u003d $i7\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "InheritanceUtils#distance(...2)",
        "body": "{\r\n    if (child \u003d\u003d null || parent \u003d\u003d null) {\r\n        return -1;\r\n    }\r\n    if (child.equals(parent)) {\r\n        return 0;\r\n    }\r\n    final Class\u003c?\u003e cParent \u003d child.getSuperclass();\r\n    int d \u003d BooleanUtils.toInteger(parent.equals(cParent));\r\n    if (d \u003d\u003d 1) {\r\n        return d;\r\n    }\r\n    d +\u003d distance(cParent, parent);\r\n    return d \u003e 0 ? d + 1 : -1;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.MethodUtils",
    "methodName": "getAccessibleMethod",
    "signature": "java.lang.reflect.Method getAccessibleMethod(java.lang.reflect.Method)",
    "visibility": "public",
    "body": "{\r\n    if (!MemberUtils.isAccessible(method)) {\r\n        return null;\r\n    }\r\n    // If the declaring class is public, we are done\r\n    final Class\u003c?\u003e cls \u003d method.getDeclaringClass();\r\n    if (ClassUtils.isPublic(cls)) {\r\n        return method;\r\n    }\r\n    final String methodName \u003d method.getName();\r\n    final Class\u003c?\u003e[] parameterTypes \u003d method.getParameterTypes();\r\n    // Check the implemented interfaces and subinterfaces\r\n    method \u003d getAccessibleMethodFromInterfaceNest(cls, methodName, parameterTypes);\r\n    // Check the superclass chain\r\n    if (method \u003d\u003d null) {\r\n        method \u003d getAccessibleMethodFromSuperclass(cls, methodName, parameterTypes);\r\n    }\r\n    return method;\r\n}",
    "nodes": 7,
    "edges": 7,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If(r4 !\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Method\n  $z0 \u003d MemberUtils.isAccessible(r3)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r0 \u003d r3.getDeclaringClass()\n  $z1 \u003d ClassUtils.isPublic(r0)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r1 \u003d r3.getName()\n  r2 \u003d r3.getParameterTypes()\n  r4 \u003d MethodUtils.getAccessibleMethodFromInterfaceNest(r0, r1, r2)\n  if (r4 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  r4 \u003d MethodUtils.getAccessibleMethodFromSuperclass(r0, r1, r2)\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MethodUtils#getAccessibleMethodFromSuperclass(...3)",
        "body": "{\r\n    Class\u003c?\u003e parentClass \u003d cls.getSuperclass();\r\n    while (parentClass !\u003d null) {\r\n        if (ClassUtils.isPublic(parentClass)) {\r\n            return getMethodObject(parentClass, methodName, parameterTypes);\r\n        }\r\n        parentClass \u003d parentClass.getSuperclass();\r\n    }\r\n    return null;\r\n}"
      },
      {
        "name": "MethodUtils#getAccessibleMethodFromInterfaceNest(...3)",
        "body": "{\r\n    // Search up the superclass chain\r\n    for (; cls !\u003d null; cls \u003d cls.getSuperclass()) {\r\n        // Check the implemented interfaces of the parent class\r\n        final Class\u003c?\u003e[] interfaces \u003d cls.getInterfaces();\r\n        for (final Class\u003c?\u003e anInterface : interfaces) {\r\n            // Is this interface public?\r\n            if (!ClassUtils.isPublic(anInterface)) {\r\n                continue;\r\n            }\r\n            // Does the method exist on this interface?\r\n            try {\r\n                return anInterface.getDeclaredMethod(methodName, parameterTypes);\r\n            } catch (final NoSuchMethodException ignored) {\r\n                /*\r\n                     * Swallow, if no method is found after the loop then this\r\n                     * method returns null.\r\n                     */\r\n            }\r\n            // Recursively check our parent interfaces\r\n            final Method method \u003d getAccessibleMethodFromInterfaceNest(anInterface, methodName, parameterTypes);\r\n            if (method !\u003d null) {\r\n                return method;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.MethodUtils",
    "methodName": "getAnnotation",
    "signature": "java.lang.\u0027annotation\u0027.Annotation getAnnotation(java.lang.reflect.Method,java.lang.Class,boolean,boolean)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(method, \"method\");\r\n    Objects.requireNonNull(annotationCls, \"annotationCls\");\r\n    if (!ignoreAccess \u0026\u0026 !MemberUtils.isAccessible(method)) {\r\n        return null;\r\n    }\r\n    A annotation \u003d method.getAnnotation(annotationCls);\r\n    if (annotation \u003d\u003d null \u0026\u0026 searchSupers) {\r\n        final Class\u003c?\u003e mcls \u003d method.getDeclaringClass();\r\n        final List\u003cClass\u003c?\u003e\u003e classes \u003d getAllSuperclassesAndInterfaces(mcls);\r\n        for (final Class\u003c?\u003e acls : classes) {\r\n            final Method equivalentMethod \u003d ignoreAccess ? getMatchingMethod(acls, method.getName(), method.getParameterTypes()) : getMatchingAccessibleMethod(acls, method.getName(), method.getParameterTypes());\r\n            if (equivalentMethod !\u003d null) {\r\n                annotation \u003d equivalentMethod.getAnnotation(annotationCls);\r\n                if (annotation !\u003d null) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return annotation;\r\n}",
    "nodes": 15,
    "edges": 21,
    "cc": 8,
    "flowSummary": [
      "B0 : If(z0 !\u003d 0) → B1 | else → B3",
      "B1 : If($z3 !\u003d 0) → B2 | else → B3",
      "B3 : If($r11 !\u003d null) → B4 | else → B14",
      "B4 : If(z1 \u003d\u003d false) → B5 | else → B14",
      "B6 : If($z2 \u003d\u003d false) → B7 | else → B14",
      "B7 : If(z0 \u003d\u003d false) → B8 | else → B9",
      "B10 : If($r13 \u003d\u003d null) → B11 | else → B13",
      "B11 : If(r12 \u003d\u003d null) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  Method\n  Class\n  z1 :\u003d @parameter2: boolean\n  z0 :\u003d @parameter3: boolean\n  Objects.requireNonNull(r0, \"method\")\n  Objects.requireNonNull(r1, \"annotationCls\")\n  if (z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $z3 \u003d MemberUtils.isAccessible(r0)\n  if ($z3 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r11 \u003d r0.getAnnotation(r1)\n  r12 \u003d $r11\n  if ($r11 !\u003d null) goto B4 else B14\n}",
      "B4 {\n  if (z1 \u003d\u003d false) goto B5 else B14\n}",
      "B5 {\n  r2 \u003d r0.getDeclaringClass()\n  r3 \u003d MethodUtils.getAllSuperclassesAndInterfaces(r2)\n  r4 \u003d r3.iterator()\n}",
      "B6 {\n  $z2 \u003d r4.hasNext()\n  if ($z2 \u003d\u003d false) goto B7 else B14\n}",
      "B7 {\n  $r5 \u003d r4.next()\n  r6 \u003d Class) $r5\n  if (z0 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $r10 \u003d r0.getName()\n  $r9 \u003d r0.getParameterTypes()\n  $r13 \u003d MethodUtils.getMatchingMethod(r6, $r10, $r9)\n  goto B10\n}",
      "B9 {\n  $r8 \u003d r0.getName()\n  $r7 \u003d r0.getParameterTypes()\n  $r13 \u003d MethodUtils.getMatchingAccessibleMethod(r6, $r8, $r7)\n}",
      "B10 {\n  if ($r13 \u003d\u003d null) goto B11 else B13\n}",
      "B11 {\n  r12 \u003d $r13.getAnnotation(r1)\n  if (r12 \u003d\u003d null) goto B12 else B13\n}",
      "B12 {\n  goto B14\n}",
      "B13 {\n  goto B6\n}",
      "B14 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B14",
      "B4 --\u003e B5",
      "B4 --\u003e B14",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B14",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B6",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MethodUtils#getAllSuperclassesAndInterfaces(...1)",
        "body": "{\r\n    if (cls \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final List\u003cClass\u003c?\u003e\u003e allSuperClassesAndInterfaces \u003d new ArrayList\u003c\u003e();\r\n    final List\u003cClass\u003c?\u003e\u003e allSuperclasses \u003d ClassUtils.getAllSuperclasses(cls);\r\n    int superClassIndex \u003d 0;\r\n    final List\u003cClass\u003c?\u003e\u003e allInterfaces \u003d ClassUtils.getAllInterfaces(cls);\r\n    int interfaceIndex \u003d 0;\r\n    while (interfaceIndex \u003c allInterfaces.size() || superClassIndex \u003c allSuperclasses.size()) {\r\n        final Class\u003c?\u003e acls;\r\n        if (interfaceIndex \u003e\u003d allInterfaces.size()) {\r\n            acls \u003d allSuperclasses.get(superClassIndex++);\r\n        } else if (superClassIndex \u003e\u003d allSuperclasses.size() || !(superClassIndex \u003c interfaceIndex)) {\r\n            acls \u003d allInterfaces.get(interfaceIndex++);\r\n        } else {\r\n            acls \u003d allSuperclasses.get(superClassIndex++);\r\n        }\r\n        allSuperClassesAndInterfaces.add(acls);\r\n    }\r\n    return allSuperClassesAndInterfaces;\r\n}"
      },
      {
        "name": "MethodUtils#getMatchingMethod(...3)",
        "body": "{\r\n    Objects.requireNonNull(cls, \"cls\");\r\n    Validate.notEmpty(methodName, \"methodName\");\r\n    final List\u003cMethod\u003e methods \u003d Stream.of(cls.getDeclaredMethods()).filter(method -\u003e method.getName().equals(methodName)).collect(Collectors.toList());\r\n    ClassUtils.getAllSuperclasses(cls).stream().map(Class::getDeclaredMethods).flatMap(Stream::of).filter(method -\u003e method.getName().equals(methodName)).forEach(methods::add);\r\n    for (final Method method : methods) {\r\n        if (Arrays.deepEquals(method.getParameterTypes(), parameterTypes)) {\r\n            return method;\r\n        }\r\n    }\r\n    final TreeMap\u003cInteger, List\u003cMethod\u003e\u003e candidates \u003d new TreeMap\u003c\u003e();\r\n    methods.stream().filter(method -\u003e ClassUtils.isAssignable(parameterTypes, method.getParameterTypes(), true)).forEach(method -\u003e {\r\n        final int distance \u003d distance(parameterTypes, method.getParameterTypes());\r\n        final List\u003cMethod\u003e candidatesAtDistance \u003d candidates.computeIfAbsent(distance, k -\u003e new ArrayList\u003c\u003e());\r\n        candidatesAtDistance.add(method);\r\n    });\r\n    if (candidates.isEmpty()) {\r\n        return null;\r\n    }\r\n    final List\u003cMethod\u003e bestCandidates \u003d candidates.values().iterator().next();\r\n    if (bestCandidates.size() \u003d\u003d 1 || !Objects.equals(bestCandidates.get(0).getDeclaringClass(), bestCandidates.get(1).getDeclaringClass())) {\r\n        return bestCandidates.get(0);\r\n    }\r\n    throw new IllegalStateException(String.format(\"Found multiple candidates for method %s on class %s : %s\", methodName + Stream.of(parameterTypes).map(String::valueOf).collect(Collectors.joining(\",\", \"(\", \")\")), cls.getName(), bestCandidates.stream().map(Method::toString).collect(Collectors.joining(\",\", \"[\", \"]\"))));\r\n}"
      },
      {
        "name": "MethodUtils#getMatchingAccessibleMethod(...3)",
        "body": "{\r\n    final Method candidate \u003d getMethodObject(cls, methodName, parameterTypes);\r\n    if (candidate !\u003d null) {\r\n        return MemberUtils.setAccessibleWorkaround(candidate);\r\n    }\r\n    // search through all methods\r\n    final Method[] methods \u003d cls.getMethods();\r\n    final List\u003cMethod\u003e matchingMethods \u003d Stream.of(methods).filter(method -\u003e method.getName().equals(methodName) \u0026\u0026 MemberUtils.isMatchingMethod(method, parameterTypes)).collect(Collectors.toList());\r\n    // Sort methods by signature to force deterministic result\r\n    matchingMethods.sort(METHOD_BY_SIGNATURE);\r\n    Method bestMatch \u003d null;\r\n    for (final Method method : matchingMethods) {\r\n        // get accessible version of method\r\n        final Method accessibleMethod \u003d getAccessibleMethod(method);\r\n        if (accessibleMethod !\u003d null \u0026\u0026 (bestMatch \u003d\u003d null || MemberUtils.compareMethodFit(accessibleMethod, bestMatch, parameterTypes) \u003c 0)) {\r\n            bestMatch \u003d accessibleMethod;\r\n        }\r\n    }\r\n    if (bestMatch !\u003d null) {\r\n        MemberUtils.setAccessibleWorkaround(bestMatch);\r\n    }\r\n    if (bestMatch !\u003d null \u0026\u0026 bestMatch.isVarArgs() \u0026\u0026 bestMatch.getParameterTypes().length \u003e 0 \u0026\u0026 parameterTypes.length \u003e 0) {\r\n        final Class\u003c?\u003e[] methodParameterTypes \u003d bestMatch.getParameterTypes();\r\n        final Class\u003c?\u003e methodParameterComponentType \u003d methodParameterTypes[methodParameterTypes.length - 1].getComponentType();\r\n        final String methodParameterComponentTypeName \u003d ClassUtils.primitiveToWrapper(methodParameterComponentType).getName();\r\n        final Class\u003c?\u003e lastParameterType \u003d parameterTypes[parameterTypes.length - 1];\r\n        final String parameterTypeName \u003d lastParameterType \u003d\u003d null ? null : lastParameterType.getName();\r\n        final String parameterTypeSuperClassName \u003d lastParameterType \u003d\u003d null ? null : lastParameterType.getSuperclass().getName();\r\n        if (parameterTypeName !\u003d null \u0026\u0026 parameterTypeSuperClassName !\u003d null \u0026\u0026 !methodParameterComponentTypeName.equals(parameterTypeName) \u0026\u0026 !methodParameterComponentTypeName.equals(parameterTypeSuperClassName)) {\r\n            return null;\r\n        }\r\n    }\r\n    return bestMatch;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.MethodUtils",
    "methodName": "getMatchingAccessibleMethod",
    "signature": "java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.Class,java.lang.String,java.lang.Class[])",
    "visibility": "public",
    "body": "{\r\n    final Method candidate \u003d getMethodObject(cls, methodName, parameterTypes);\r\n    if (candidate !\u003d null) {\r\n        return MemberUtils.setAccessibleWorkaround(candidate);\r\n    }\r\n    // search through all methods\r\n    final Method[] methods \u003d cls.getMethods();\r\n    final List\u003cMethod\u003e matchingMethods \u003d Stream.of(methods).filter(method -\u003e method.getName().equals(methodName) \u0026\u0026 MemberUtils.isMatchingMethod(method, parameterTypes)).collect(Collectors.toList());\r\n    // Sort methods by signature to force deterministic result\r\n    matchingMethods.sort(METHOD_BY_SIGNATURE);\r\n    Method bestMatch \u003d null;\r\n    for (final Method method : matchingMethods) {\r\n        // get accessible version of method\r\n        final Method accessibleMethod \u003d getAccessibleMethod(method);\r\n        if (accessibleMethod !\u003d null \u0026\u0026 (bestMatch \u003d\u003d null || MemberUtils.compareMethodFit(accessibleMethod, bestMatch, parameterTypes) \u003c 0)) {\r\n            bestMatch \u003d accessibleMethod;\r\n        }\r\n    }\r\n    if (bestMatch !\u003d null) {\r\n        MemberUtils.setAccessibleWorkaround(bestMatch);\r\n    }\r\n    if (bestMatch !\u003d null \u0026\u0026 bestMatch.isVarArgs() \u0026\u0026 bestMatch.getParameterTypes().length \u003e 0 \u0026\u0026 parameterTypes.length \u003e 0) {\r\n        final Class\u003c?\u003e[] methodParameterTypes \u003d bestMatch.getParameterTypes();\r\n        final Class\u003c?\u003e methodParameterComponentType \u003d methodParameterTypes[methodParameterTypes.length - 1].getComponentType();\r\n        final String methodParameterComponentTypeName \u003d ClassUtils.primitiveToWrapper(methodParameterComponentType).getName();\r\n        final Class\u003c?\u003e lastParameterType \u003d parameterTypes[parameterTypes.length - 1];\r\n        final String parameterTypeName \u003d lastParameterType \u003d\u003d null ? null : lastParameterType.getName();\r\n        final String parameterTypeSuperClassName \u003d lastParameterType \u003d\u003d null ? null : lastParameterType.getSuperclass().getName();\r\n        if (parameterTypeName !\u003d null \u0026\u0026 parameterTypeSuperClassName !\u003d null \u0026\u0026 !methodParameterComponentTypeName.equals(parameterTypeName) \u0026\u0026 !methodParameterComponentTypeName.equals(parameterTypeSuperClassName)) {\r\n            return null;\r\n        }\r\n    }\r\n    return bestMatch;\r\n}",
    "nodes": 27,
    "edges": 40,
    "cc": 15,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B2",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B9",
      "B4 : If(r24 \u003d\u003d null) → B5 | else → B8",
      "B5 : If(r21 \u003d\u003d null) → B6 | else → B7",
      "B6 : If($i6 \u003e\u003d 0) → B7 | else → B8",
      "B9 : If(r21 \u003d\u003d null) → B10 | else → B11",
      "B11 : If(r21 \u003d\u003d null) → B12 | else → B26",
      "B12 : If($z1 \u003d\u003d false) → B13 | else → B26",
      "B13 : If($i0 \u003c\u003d 0) → B14 | else → B26",
      "B14 : If($i1 \u003c\u003d 0) → B15 | else → B26",
      "B15 : If(r15 !\u003d null) → B16 | else → B17",
      "B18 : If(r15 !\u003d null) → B19 | else → B20",
      "B21 : If(r16 \u003d\u003d null) → B22 | else → B26",
      "B22 : If($r29 \u003d\u003d null) → B23 | else → B26",
      "B23 : If($z2 !\u003d 0) → B24 | else → B26",
      "B24 : If($z3 !\u003d 0) → B25 | else → B26"
    ],
    "blockList": [
      "B0 {\n  Class\n  String\n  Class[]\n  r3 \u003d MethodUtils.getMethodObject(r0, r1, r2)\n  if (r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r19 \u003d MemberUtils.setAccessibleWorkaround(r3)\n  $r20 \u003d Method) $r19\n  return\n}",
      "B2 {\n  r4 \u003d r0.getMethods()\n  $r6 \u003d Stream.of(r4)\n  $r5 \u003d MethodUtils$lambda_getMatchingAccessibleMethod_0__139.bootstrap$(r1, r2)\n  $r8 \u003d $r6.filter($r5)\n  $r7 \u003d Collectors.toList()\n  $r9 \u003d $r8.collect($r7)\n  r10 \u003d List) $r9\n  $r11 \u003d Comparator METHOD_BY_SIGNATURE\u003e\n  r10.sort($r11)\n  r21 \u003d null\n  r22 \u003d r10.iterator()\n}",
      "B3 {\n  $z0 \u003d r22.hasNext()\n  if ($z0 \u003d\u003d false) goto B4 else B9\n}",
      "B4 {\n  $r18 \u003d r22.next()\n  r23 \u003d Method) $r18\n  r24 \u003d MethodUtils.getAccessibleMethod(r23)\n  if (r24 \u003d\u003d null) goto B5 else B8\n}",
      "B5 {\n  if (r21 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  $i6 \u003d MemberUtils.compareMethodFit(r24, r21, r2)\n  if ($i6 \u003e\u003d 0) goto B7 else B8\n}",
      "B7 {\n  r21 \u003d r24\n}",
      "B8 {\n  goto B3\n}",
      "B9 {\n  if (r21 \u003d\u003d null) goto B10 else B11\n}",
      "B10 {\n  MemberUtils.setAccessibleWorkaround(r21)\n}",
      "B11 {\n  if (r21 \u003d\u003d null) goto B12 else B26\n}",
      "B12 {\n  $z1 \u003d r21.isVarArgs()\n  if ($z1 \u003d\u003d false) goto B13 else B26\n}",
      "B13 {\n  $r12 \u003d r21.getParameterTypes()\n  $i0 \u003d lengthof $r12\n  if ($i0 \u003c\u003d 0) goto B14 else B26\n}",
      "B14 {\n  $i1 \u003d lengthof r2\n  if ($i1 \u003c\u003d 0) goto B15 else B26\n}",
      "B15 {\n  r25 \u003d r21.getParameterTypes()\n  $i2 \u003d lengthof r25\n  $i3 \u003d $i2 - 1\n  $r13 \u003d r25[$i3]\n  r26 \u003d $r13.getComponentType()\n  $r14 \u003d ClassUtils.primitiveToWrapper(r26)\n  r27 \u003d $r14.getName()\n  $i4 \u003d lengthof r2\n  $i5 \u003d $i4 - 1\n  r15 \u003d r2[$i5]\n  if (r15 !\u003d null) goto B16 else B17\n}",
      "B16 {\n  $r28 \u003d null\n  goto B18\n}",
      "B17 {\n  $r28 \u003d r15.getName()\n}",
      "B18 {\n  r16 \u003d $r28\n  if (r15 !\u003d null) goto B19 else B20\n}",
      "B19 {\n  $r29 \u003d null\n  goto B21\n}",
      "B20 {\n  $r17 \u003d r15.getSuperclass()\n  $r29 \u003d $r17.getName()\n}",
      "B21 {\n  if (r16 \u003d\u003d null) goto B22 else B26\n}",
      "B22 {\n  if ($r29 \u003d\u003d null) goto B23 else B26\n}",
      "B23 {\n  $z2 \u003d r27.equals(r16)\n  if ($z2 !\u003d 0) goto B24 else B26\n}",
      "B24 {\n  $z3 \u003d r27.equals($r29)\n  if ($z3 !\u003d 0) goto B25 else B26\n}",
      "B25 {\n  return\n}",
      "B26 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B3",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B26",
      "B12 --\u003e B13",
      "B12 --\u003e B26",
      "B13 --\u003e B14",
      "B13 --\u003e B26",
      "B14 --\u003e B15",
      "B14 --\u003e B26",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B21",
      "B21 --\u003e B22",
      "B21 --\u003e B26",
      "B22 --\u003e B23",
      "B22 --\u003e B26",
      "B23 --\u003e B24",
      "B23 --\u003e B26",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e [EXIT]",
      "B26 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MethodUtils#getMethodObject(...3)",
        "body": "{\r\n    try {\r\n        return cls.getMethod(name, parameterTypes);\r\n    } catch (final NoSuchMethodException | SecurityException e) {\r\n        return null;\r\n    }\r\n}"
      },
      {
        "name": "MethodUtils#getAccessibleMethod(...1)",
        "body": "{\r\n    if (!MemberUtils.isAccessible(method)) {\r\n        return null;\r\n    }\r\n    // If the declaring class is public, we are done\r\n    final Class\u003c?\u003e cls \u003d method.getDeclaringClass();\r\n    if (ClassUtils.isPublic(cls)) {\r\n        return method;\r\n    }\r\n    final String methodName \u003d method.getName();\r\n    final Class\u003c?\u003e[] parameterTypes \u003d method.getParameterTypes();\r\n    // Check the implemented interfaces and subinterfaces\r\n    method \u003d getAccessibleMethodFromInterfaceNest(cls, methodName, parameterTypes);\r\n    // Check the superclass chain\r\n    if (method \u003d\u003d null) {\r\n        method \u003d getAccessibleMethodFromSuperclass(cls, methodName, parameterTypes);\r\n    }\r\n    return method;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.MethodUtils",
    "methodName": "getMatchingMethod",
    "signature": "java.lang.reflect.Method getMatchingMethod(java.lang.Class,java.lang.String,java.lang.Class[])",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(cls, \"cls\");\r\n    Validate.notEmpty(methodName, \"methodName\");\r\n    final List\u003cMethod\u003e methods \u003d Stream.of(cls.getDeclaredMethods()).filter(method -\u003e method.getName().equals(methodName)).collect(Collectors.toList());\r\n    ClassUtils.getAllSuperclasses(cls).stream().map(Class::getDeclaredMethods).flatMap(Stream::of).filter(method -\u003e method.getName().equals(methodName)).forEach(methods::add);\r\n    for (final Method method : methods) {\r\n        if (Arrays.deepEquals(method.getParameterTypes(), parameterTypes)) {\r\n            return method;\r\n        }\r\n    }\r\n    final TreeMap\u003cInteger, List\u003cMethod\u003e\u003e candidates \u003d new TreeMap\u003c\u003e();\r\n    methods.stream().filter(method -\u003e ClassUtils.isAssignable(parameterTypes, method.getParameterTypes(), true)).forEach(method -\u003e {\r\n        final int distance \u003d distance(parameterTypes, method.getParameterTypes());\r\n        final List\u003cMethod\u003e candidatesAtDistance \u003d candidates.computeIfAbsent(distance, k -\u003e new ArrayList\u003c\u003e());\r\n        candidatesAtDistance.add(method);\r\n    });\r\n    if (candidates.isEmpty()) {\r\n        return null;\r\n    }\r\n    final List\u003cMethod\u003e bestCandidates \u003d candidates.values().iterator().next();\r\n    if (bestCandidates.size() \u003d\u003d 1 || !Objects.equals(bestCandidates.get(0).getDeclaringClass(), bestCandidates.get(1).getDeclaringClass())) {\r\n        return bestCandidates.get(0);\r\n    }\r\n    throw new IllegalStateException(String.format(\"Found multiple candidates for method %s on class %s : %s\", methodName + Stream.of(parameterTypes).map(String::valueOf).collect(Collectors.joining(\",\", \"(\", \")\")), cls.getName(), bestCandidates.stream().map(Method::toString).collect(Collectors.joining(\",\", \"[\", \"]\"))));\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($z3 \u003d\u003d false) → B3 | else → B4",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B7",
      "B7 : If($i0 \u003d\u003d 1) → B8 | else → B9",
      "B8 : If($z2 !\u003d 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  Class\n  String\n  Class[]\n  Objects.requireNonNull(r0, \"cls\")\n  $r2 \u003d Object)[0]\n  Validate.notEmpty(r1, \"methodName\", $r2)\n  $r3 \u003d r0.getDeclaredMethods()\n  $r5 \u003d Stream.of($r3)\n  $r4 \u003d MethodUtils$lambda_getMatchingMethod_1__140.bootstrap$(r1)\n  $r7 \u003d $r5.filter($r4)\n  $r6 \u003d Collectors.toList()\n  $r8 \u003d $r7.collect($r6)\n  r9 \u003d List) $r8\n  $r10 \u003d ClassUtils.getAllSuperclasses(r0)\n  $r12 \u003d $r10.stream()\n  $r11 \u003d MethodUtils$getDeclaredMethods__141.bootstrap$()\n  $r14 \u003d $r12.map($r11)\n  $r13 \u003d MethodUtils$of__142.bootstrap$()\n  $r16 \u003d $r14.flatMap($r13)\n  $r15 \u003d MethodUtils$lambda_getMatchingMethod_2__143.bootstrap$(r1)\n  $r18 \u003d $r16.filter($r15)\n  Objects.requireNonNull(r9)\n  $r17 \u003d MethodUtils$add__144.bootstrap$(r9)\n  $r18.forEach($r17)\n  r57 \u003d r9.iterator()\n}",
      "B1 {\n  $z0 \u003d r57.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r55 \u003d r57.next()\n  r58 \u003d Method) $r55\n  $r56 \u003d r58.getParameterTypes()\n  $z3 \u003d Arrays.deepEquals($r56, r20)\n  if ($z3 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  $r19 \u003d TreeMap\n  new TreeMap()\n  $r22 \u003d r9.stream()\n  $r21 \u003d MethodUtils$lambda_getMatchingMethod_3__145.bootstrap$(r20)\n  $r24 \u003d $r22.filter($r21)\n  $r23 \u003d MethodUtils$lambda_getMatchingMethod_5__146.bootstrap$(r20, $r19)\n  $r24.forEach($r23)\n  $z1 \u003d $r19.isEmpty()\n  if ($z1 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $r25 \u003d $r19.values()\n  $r26 \u003d $r25.iterator()\n  $r27 \u003d $r26.next()\n  r59 \u003d List) $r27\n  $i0 \u003d r59.size()\n  if ($i0 \u003d\u003d 1) goto B8 else B9\n}",
      "B8 {\n  $r30 \u003d r59.get(0)\n  $r31 \u003d Method) $r30\n  $r35 \u003d $r31.getDeclaringClass()\n  $r32 \u003d r59.get(1)\n  $r33 \u003d Method) $r32\n  $r34 \u003d $r33.getDeclaringClass()\n  $z2 \u003d Objects.equals($r35, $r34)\n  if ($z2 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  $r28 \u003d r59.get(0)\n  $r29 \u003d Method) $r28\n  return\n}",
      "B10 {\n  $r36 \u003d IllegalStateException\n  $r37 \u003d Object)[3]\n  $r38 \u003d StringBuilder\n  new StringBuilder()\n  $r45 \u003d $r38.append(r1)\n  $r40 \u003d Stream.of(r20)\n  $r39 \u003d MethodUtils$valueOf__147.bootstrap$()\n  $r42 \u003d $r40.map($r39)\n  $r41 \u003d Collectors.joining(\",\", \"(\", \")\")\n  $r43 \u003d $r42.collect($r41)\n  $r44 \u003d String) $r43\n  $r46 \u003d $r45.append($r44)\n  $r47 \u003d $r46.toString()\n  $r37[0] \u003d $r47\n  $r48 \u003d r0.getName()\n  $r37[1] \u003d $r48\n  $r50 \u003d r59.stream()\n  $r49 \u003d MethodUtils$toString__148.bootstrap$()\n  $r52 \u003d $r50.map($r49)\n  $r51 \u003d Collectors.joining(\",\", \"\", \"\")\n  $r53 \u003d $r52.collect($r51)\n  $r37[2] \u003d $r53\n  $r54 \u003d String.format(\"Found multiple candidates for method %s on class %s : %s\", $r37)\n  new IllegalStateException($r54)\n  throw $r36\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MethodUtils#distance(...2)",
        "body": "{\r\n    int answer \u003d 0;\r\n    if (!ClassUtils.isAssignable(fromClassArray, toClassArray, true)) {\r\n        return -1;\r\n    }\r\n    for (int offset \u003d 0; offset \u003c fromClassArray.length; offset++) {\r\n        // Note InheritanceUtils.distance() uses different scoring system.\r\n        final Class\u003c?\u003e aClass \u003d fromClassArray[offset];\r\n        final Class\u003c?\u003e toClass \u003d toClassArray[offset];\r\n        if (aClass \u003d\u003d null || aClass.equals(toClass)) {\r\n            continue;\r\n        }\r\n        if (ClassUtils.isAssignable(aClass, toClass, true) \u0026\u0026 !ClassUtils.isAssignable(aClass, toClass, false)) {\r\n            answer++;\r\n        } else {\r\n            answer +\u003d 2;\r\n        }\r\n    }\r\n    return answer;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.MethodUtils",
    "methodName": "getMethodsListWithAnnotation",
    "signature": "java.util.List getMethodsListWithAnnotation(java.lang.Class,java.lang.Class,boolean,boolean)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(cls, \"cls\");\r\n    Objects.requireNonNull(annotationCls, \"annotationCls\");\r\n    final List\u003cClass\u003c?\u003e\u003e classes \u003d searchSupers ? getAllSuperclassesAndInterfaces(cls) : new ArrayList\u003c\u003e();\r\n    classes.add(0, cls);\r\n    final List\u003cMethod\u003e annotatedMethods \u003d new ArrayList\u003c\u003e();\r\n    classes.forEach(acls -\u003e {\r\n        final Method[] methods \u003d ignoreAccess ? acls.getDeclaredMethods() : acls.getMethods();\r\n        Stream.of(methods).filter(method -\u003e method.isAnnotationPresent(annotationCls)).forEachOrdered(annotatedMethods::add);\r\n    });\r\n    return annotatedMethods;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  Class\n  z0 :\u003d @parameter2: boolean\n  z1 :\u003d @parameter3: boolean\n  Objects.requireNonNull(r0, \"cls\")\n  Objects.requireNonNull(r1, \"annotationCls\")\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d MethodUtils.getAllSuperclassesAndInterfaces(r0)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d ArrayList\n  $r4 \u003d $r5\n  new ArrayList()\n}",
      "B3 {\n  $r4.add(0, r0)\n  $r6 \u003d ArrayList\n  new ArrayList()\n  $r3 \u003d MethodUtils$lambda_getMethodsListWithAnnotation_7__149.bootstrap$(z1, r1, $r6)\n  $r4.forEach($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MethodUtils#getAllSuperclassesAndInterfaces(...1)",
        "body": "{\r\n    if (cls \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final List\u003cClass\u003c?\u003e\u003e allSuperClassesAndInterfaces \u003d new ArrayList\u003c\u003e();\r\n    final List\u003cClass\u003c?\u003e\u003e allSuperclasses \u003d ClassUtils.getAllSuperclasses(cls);\r\n    int superClassIndex \u003d 0;\r\n    final List\u003cClass\u003c?\u003e\u003e allInterfaces \u003d ClassUtils.getAllInterfaces(cls);\r\n    int interfaceIndex \u003d 0;\r\n    while (interfaceIndex \u003c allInterfaces.size() || superClassIndex \u003c allSuperclasses.size()) {\r\n        final Class\u003c?\u003e acls;\r\n        if (interfaceIndex \u003e\u003d allInterfaces.size()) {\r\n            acls \u003d allSuperclasses.get(superClassIndex++);\r\n        } else if (superClassIndex \u003e\u003d allSuperclasses.size() || !(superClassIndex \u003c interfaceIndex)) {\r\n            acls \u003d allInterfaces.get(interfaceIndex++);\r\n        } else {\r\n            acls \u003d allSuperclasses.get(superClassIndex++);\r\n        }\r\n        allSuperClassesAndInterfaces.add(acls);\r\n    }\r\n    return allSuperClassesAndInterfaces;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.MethodUtils",
    "methodName": "getOverrideHierarchy",
    "signature": "java.util.Set getOverrideHierarchy(java.lang.reflect.Method,org.apache.commons.lang3.ClassUtils$Interfaces)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 13,
    "edges": 17,
    "cc": 6,
    "flowSummary": [
      "B1 : If($z2 \u003d\u003d false) → B2 | else → B12",
      "B2 : If(r10 !\u003d null) → B3 | else → B4",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B6",
      "B7 : If(i1 \u003e\u003d $i0) → B8 | else → B11",
      "B8 : If($z1 !\u003d 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  Method\n  ClassUtils$Interfaces\n  Objects.requireNonNull(r0, \"method\")\n  $r1 \u003d LinkedHashSet\n  new LinkedHashSet()\n  $r1.add(r0)\n  r2 \u003d r0.getParameterTypes()\n  r3 \u003d r0.getDeclaringClass()\n  $r5 \u003d ClassUtils.hierarchy(r3, r4)\n  r6 \u003d $r5.iterator()\n  r6.next()\n}",
      "B1 {\n  $z2 \u003d r6.hasNext()\n  if ($z2 \u003d\u003d false) goto B2 else B12\n}",
      "B2 {\n  $r7 \u003d r6.next()\n  r8 \u003d Class) $r7\n  $r9 \u003d r0.getName()\n  r10 \u003d MethodUtils.getMatchingAccessibleMethod(r8, $r9, r2)\n  if (r10 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  goto B1\n}",
      "B4 {\n  $r11 \u003d r10.getParameterTypes()\n  $z0 \u003d Arrays.equals($r11, r2)\n  if ($z0 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r1.add(r10)\n  goto B1\n}",
      "B6 {\n  $r12 \u003d r10.getDeclaringClass()\n  r13 \u003d TypeUtils.getTypeArguments(r3, $r12)\n  i1 \u003d 0\n}",
      "B7 {\n  $i0 \u003d lengthof r2\n  if (i1 \u003e\u003d $i0) goto B8 else B11\n}",
      "B8 {\n  $r14 \u003d r0.getGenericParameterTypes()\n  $r15 \u003d $r14[i1]\n  r16 \u003d TypeUtils.unrollVariables(r13, $r15)\n  $r17 \u003d r10.getGenericParameterTypes()\n  $r18 \u003d $r17[i1]\n  r19 \u003d TypeUtils.unrollVariables(r13, $r18)\n  $z1 \u003d TypeUtils.equals(r16, r19)\n  if ($z1 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  goto B1\n}",
      "B10 {\n  i1 \u003d i1 + 1\n  goto B7\n}",
      "B11 {\n  $r1.add(r10)\n  goto B1\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B12",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B1",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B1",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B1",
      "B10 --\u003e B7",
      "B11 --\u003e B1",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.MethodUtils",
    "methodName": "invokeExactMethod",
    "signature": "java.lang.Object invokeExactMethod(java.lang.Object,java.lang.String,java.lang.Object[],java.lang.Class[])",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(object, \"object\");\r\n    args \u003d ArrayUtils.nullToEmpty(args);\r\n    parameterTypes \u003d ArrayUtils.nullToEmpty(parameterTypes);\r\n    final Class\u003c?\u003e cls \u003d object.getClass();\r\n    final Method method \u003d getAccessibleMethod(cls, methodName, parameterTypes);\r\n    if (method \u003d\u003d null) {\r\n        throw new NoSuchMethodException(\"No such accessible method: \" + methodName + \"() on object: \" + cls.getName());\r\n    }\r\n    return method.invoke(object, args);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  String\n  Object[]\n  Class[]\n  Objects.requireNonNull(r0, \"object\")\n  r15 \u003d ArrayUtils.nullToEmpty(r13)\n  r16 \u003d ArrayUtils.nullToEmpty(r14)\n  r1 \u003d r0.getClass()\n  r3 \u003d MethodUtils.getAccessibleMethod(r1, r2, r16)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d NoSuchMethodException\n  $r6 \u003d StringBuilder\n  new StringBuilder()\n  $r7 \u003d $r6.append(\"No such accessible method: \")\n  $r8 \u003d $r7.append(r2)\n  $r10 \u003d $r8.append(\"() on object: \")\n  $r9 \u003d r1.getName()\n  $r11 \u003d $r10.append($r9)\n  $r12 \u003d $r11.toString()\n  new NoSuchMethodException($r12)\n  throw $r5\n}",
      "B2 {\n  $r4 \u003d r3.invoke(r0, r15)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MethodUtils#getAccessibleMethod(...3)",
        "body": "{\r\n    return getAccessibleMethod(getMethodObject(cls, methodName, parameterTypes));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.MethodUtils",
    "methodName": "invokeExactStaticMethod",
    "signature": "java.lang.Object invokeExactStaticMethod(java.lang.Class,java.lang.String,java.lang.Object[],java.lang.Class[])",
    "visibility": "public",
    "body": "{\r\n    args \u003d ArrayUtils.nullToEmpty(args);\r\n    parameterTypes \u003d ArrayUtils.nullToEmpty(parameterTypes);\r\n    final Method method \u003d getAccessibleMethod(cls, methodName, parameterTypes);\r\n    if (method \u003d\u003d null) {\r\n        throw new NoSuchMethodException(\"No such accessible method: \" + methodName + \"() on class: \" + cls.getName());\r\n    }\r\n    return method.invoke(null, args);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  String\n  Object[]\n  Class[]\n  r14 \u003d ArrayUtils.nullToEmpty(r12)\n  r15 \u003d ArrayUtils.nullToEmpty(r13)\n  r2 \u003d MethodUtils.getAccessibleMethod(r0, r1, r15)\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d NoSuchMethodException\n  $r5 \u003d StringBuilder\n  new StringBuilder()\n  $r6 \u003d $r5.append(\"No such accessible method: \")\n  $r7 \u003d $r6.append(r1)\n  $r9 \u003d $r7.append(\"() on class: \")\n  $r8 \u003d r0.getName()\n  $r10 \u003d $r9.append($r8)\n  $r11 \u003d $r10.toString()\n  new NoSuchMethodException($r11)\n  throw $r4\n}",
      "B2 {\n  $r3 \u003d r2.invoke(null, r14)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MethodUtils#getAccessibleMethod(...3)",
        "body": "{\r\n    return getAccessibleMethod(getMethodObject(cls, methodName, parameterTypes));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.MethodUtils",
    "methodName": "invokeMethod",
    "signature": "java.lang.Object invokeMethod(java.lang.Object,boolean,java.lang.String,java.lang.Object[],java.lang.Class[])",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(object, \"object\");\r\n    parameterTypes \u003d ArrayUtils.nullToEmpty(parameterTypes);\r\n    args \u003d ArrayUtils.nullToEmpty(args);\r\n    final String messagePrefix;\r\n    final Method method;\r\n    final Class\u003c? extends Object\u003e cls \u003d object.getClass();\r\n    if (forceAccess) {\r\n        messagePrefix \u003d \"No such method: \";\r\n        method \u003d getMatchingMethod(cls, methodName, parameterTypes);\r\n        if (method !\u003d null \u0026\u0026 !method.isAccessible()) {\r\n            method.setAccessible(true);\r\n        }\r\n    } else {\r\n        messagePrefix \u003d \"No such accessible method: \";\r\n        method \u003d getMatchingAccessibleMethod(cls, methodName, parameterTypes);\r\n    }\r\n    if (method \u003d\u003d null) {\r\n        throw new NoSuchMethodException(messagePrefix + methodName + \"() on object: \" + cls.getName());\r\n    }\r\n    args \u003d toVarArgs(method, args);\r\n    return method.invoke(object, args);\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B4",
      "B1 : If(r17 \u003d\u003d null) → B2 | else → B5",
      "B2 : If($z1 !\u003d 0) → B3 | else → B5",
      "B5 : If(r17 !\u003d null) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Object\n  z0 :\u003d @parameter1: boolean\n  String\n  Object[]\n  Class[]\n  Objects.requireNonNull(r0, \"object\")\n  r14 \u003d ArrayUtils.nullToEmpty(r13)\n  r15 \u003d ArrayUtils.nullToEmpty(r12)\n  r1 \u003d r0.getClass()\n  if (z0 \u003d\u003d false) goto B1 else B4\n}",
      "B1 {\n  r16 \u003d \"No such method: \"\n  r17 \u003d MethodUtils.getMatchingMethod(r1, r2, r14)\n  if (r17 \u003d\u003d null) goto B2 else B5\n}",
      "B2 {\n  $z1 \u003d r17.isAccessible()\n  if ($z1 !\u003d 0) goto B3 else B5\n}",
      "B3 {\n  r17.setAccessible(1)\n  goto B5\n}",
      "B4 {\n  r16 \u003d \"No such accessible method: \"\n  r17 \u003d MethodUtils.getMatchingAccessibleMethod(r1, r2, r14)\n}",
      "B5 {\n  if (r17 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r4 \u003d NoSuchMethodException\n  $r5 \u003d StringBuilder\n  new StringBuilder()\n  $r6 \u003d $r5.append(r16)\n  $r7 \u003d $r6.append(r2)\n  $r9 \u003d $r7.append(\"() on object: \")\n  $r8 \u003d r1.getName()\n  $r10 \u003d $r9.append($r8)\n  $r11 \u003d $r10.toString()\n  new NoSuchMethodException($r11)\n  throw $r4\n}",
      "B7 {\n  r18 \u003d MethodUtils.toVarArgs(r17, r15)\n  $r3 \u003d r17.invoke(r0, r18)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MethodUtils#toVarArgs(...2)",
        "body": "{\r\n    if (method.isVarArgs()) {\r\n        final Class\u003c?\u003e[] methodParameterTypes \u003d method.getParameterTypes();\r\n        args \u003d getVarArgs(args, methodParameterTypes);\r\n    }\r\n    return args;\r\n}"
      },
      {
        "name": "MethodUtils#getMatchingMethod(...3)",
        "body": "{\r\n    Objects.requireNonNull(cls, \"cls\");\r\n    Validate.notEmpty(methodName, \"methodName\");\r\n    final List\u003cMethod\u003e methods \u003d Stream.of(cls.getDeclaredMethods()).filter(method -\u003e method.getName().equals(methodName)).collect(Collectors.toList());\r\n    ClassUtils.getAllSuperclasses(cls).stream().map(Class::getDeclaredMethods).flatMap(Stream::of).filter(method -\u003e method.getName().equals(methodName)).forEach(methods::add);\r\n    for (final Method method : methods) {\r\n        if (Arrays.deepEquals(method.getParameterTypes(), parameterTypes)) {\r\n            return method;\r\n        }\r\n    }\r\n    final TreeMap\u003cInteger, List\u003cMethod\u003e\u003e candidates \u003d new TreeMap\u003c\u003e();\r\n    methods.stream().filter(method -\u003e ClassUtils.isAssignable(parameterTypes, method.getParameterTypes(), true)).forEach(method -\u003e {\r\n        final int distance \u003d distance(parameterTypes, method.getParameterTypes());\r\n        final List\u003cMethod\u003e candidatesAtDistance \u003d candidates.computeIfAbsent(distance, k -\u003e new ArrayList\u003c\u003e());\r\n        candidatesAtDistance.add(method);\r\n    });\r\n    if (candidates.isEmpty()) {\r\n        return null;\r\n    }\r\n    final List\u003cMethod\u003e bestCandidates \u003d candidates.values().iterator().next();\r\n    if (bestCandidates.size() \u003d\u003d 1 || !Objects.equals(bestCandidates.get(0).getDeclaringClass(), bestCandidates.get(1).getDeclaringClass())) {\r\n        return bestCandidates.get(0);\r\n    }\r\n    throw new IllegalStateException(String.format(\"Found multiple candidates for method %s on class %s : %s\", methodName + Stream.of(parameterTypes).map(String::valueOf).collect(Collectors.joining(\",\", \"(\", \")\")), cls.getName(), bestCandidates.stream().map(Method::toString).collect(Collectors.joining(\",\", \"[\", \"]\"))));\r\n}"
      },
      {
        "name": "MethodUtils#getMatchingAccessibleMethod(...3)",
        "body": "{\r\n    final Method candidate \u003d getMethodObject(cls, methodName, parameterTypes);\r\n    if (candidate !\u003d null) {\r\n        return MemberUtils.setAccessibleWorkaround(candidate);\r\n    }\r\n    // search through all methods\r\n    final Method[] methods \u003d cls.getMethods();\r\n    final List\u003cMethod\u003e matchingMethods \u003d Stream.of(methods).filter(method -\u003e method.getName().equals(methodName) \u0026\u0026 MemberUtils.isMatchingMethod(method, parameterTypes)).collect(Collectors.toList());\r\n    // Sort methods by signature to force deterministic result\r\n    matchingMethods.sort(METHOD_BY_SIGNATURE);\r\n    Method bestMatch \u003d null;\r\n    for (final Method method : matchingMethods) {\r\n        // get accessible version of method\r\n        final Method accessibleMethod \u003d getAccessibleMethod(method);\r\n        if (accessibleMethod !\u003d null \u0026\u0026 (bestMatch \u003d\u003d null || MemberUtils.compareMethodFit(accessibleMethod, bestMatch, parameterTypes) \u003c 0)) {\r\n            bestMatch \u003d accessibleMethod;\r\n        }\r\n    }\r\n    if (bestMatch !\u003d null) {\r\n        MemberUtils.setAccessibleWorkaround(bestMatch);\r\n    }\r\n    if (bestMatch !\u003d null \u0026\u0026 bestMatch.isVarArgs() \u0026\u0026 bestMatch.getParameterTypes().length \u003e 0 \u0026\u0026 parameterTypes.length \u003e 0) {\r\n        final Class\u003c?\u003e[] methodParameterTypes \u003d bestMatch.getParameterTypes();\r\n        final Class\u003c?\u003e methodParameterComponentType \u003d methodParameterTypes[methodParameterTypes.length - 1].getComponentType();\r\n        final String methodParameterComponentTypeName \u003d ClassUtils.primitiveToWrapper(methodParameterComponentType).getName();\r\n        final Class\u003c?\u003e lastParameterType \u003d parameterTypes[parameterTypes.length - 1];\r\n        final String parameterTypeName \u003d lastParameterType \u003d\u003d null ? null : lastParameterType.getName();\r\n        final String parameterTypeSuperClassName \u003d lastParameterType \u003d\u003d null ? null : lastParameterType.getSuperclass().getName();\r\n        if (parameterTypeName !\u003d null \u0026\u0026 parameterTypeSuperClassName !\u003d null \u0026\u0026 !methodParameterComponentTypeName.equals(parameterTypeName) \u0026\u0026 !methodParameterComponentTypeName.equals(parameterTypeSuperClassName)) {\r\n            return null;\r\n        }\r\n    }\r\n    return bestMatch;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.MethodUtils",
    "methodName": "invokeStaticMethod",
    "signature": "java.lang.Object invokeStaticMethod(java.lang.Class,java.lang.String,java.lang.Object[],java.lang.Class[])",
    "visibility": "public",
    "body": "{\r\n    args \u003d ArrayUtils.nullToEmpty(args);\r\n    parameterTypes \u003d ArrayUtils.nullToEmpty(parameterTypes);\r\n    final Method method \u003d getMatchingAccessibleMethod(cls, methodName, parameterTypes);\r\n    if (method \u003d\u003d null) {\r\n        throw new NoSuchMethodException(\"No such accessible method: \" + methodName + \"() on class: \" + cls.getName());\r\n    }\r\n    args \u003d toVarArgs(method, args);\r\n    return method.invoke(null, args);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  String\n  Object[]\n  Class[]\n  r14 \u003d ArrayUtils.nullToEmpty(r12)\n  r15 \u003d ArrayUtils.nullToEmpty(r13)\n  r2 \u003d MethodUtils.getMatchingAccessibleMethod(r0, r1, r15)\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d NoSuchMethodException\n  $r5 \u003d StringBuilder\n  new StringBuilder()\n  $r6 \u003d $r5.append(\"No such accessible method: \")\n  $r7 \u003d $r6.append(r1)\n  $r9 \u003d $r7.append(\"() on class: \")\n  $r8 \u003d r0.getName()\n  $r10 \u003d $r9.append($r8)\n  $r11 \u003d $r10.toString()\n  new NoSuchMethodException($r11)\n  throw $r4\n}",
      "B2 {\n  r16 \u003d MethodUtils.toVarArgs(r2, r14)\n  $r3 \u003d r2.invoke(null, r16)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MethodUtils#toVarArgs(...2)",
        "body": "{\r\n    if (method.isVarArgs()) {\r\n        final Class\u003c?\u003e[] methodParameterTypes \u003d method.getParameterTypes();\r\n        args \u003d getVarArgs(args, methodParameterTypes);\r\n    }\r\n    return args;\r\n}"
      },
      {
        "name": "MethodUtils#getMatchingAccessibleMethod(...3)",
        "body": "{\r\n    final Method candidate \u003d getMethodObject(cls, methodName, parameterTypes);\r\n    if (candidate !\u003d null) {\r\n        return MemberUtils.setAccessibleWorkaround(candidate);\r\n    }\r\n    // search through all methods\r\n    final Method[] methods \u003d cls.getMethods();\r\n    final List\u003cMethod\u003e matchingMethods \u003d Stream.of(methods).filter(method -\u003e method.getName().equals(methodName) \u0026\u0026 MemberUtils.isMatchingMethod(method, parameterTypes)).collect(Collectors.toList());\r\n    // Sort methods by signature to force deterministic result\r\n    matchingMethods.sort(METHOD_BY_SIGNATURE);\r\n    Method bestMatch \u003d null;\r\n    for (final Method method : matchingMethods) {\r\n        // get accessible version of method\r\n        final Method accessibleMethod \u003d getAccessibleMethod(method);\r\n        if (accessibleMethod !\u003d null \u0026\u0026 (bestMatch \u003d\u003d null || MemberUtils.compareMethodFit(accessibleMethod, bestMatch, parameterTypes) \u003c 0)) {\r\n            bestMatch \u003d accessibleMethod;\r\n        }\r\n    }\r\n    if (bestMatch !\u003d null) {\r\n        MemberUtils.setAccessibleWorkaround(bestMatch);\r\n    }\r\n    if (bestMatch !\u003d null \u0026\u0026 bestMatch.isVarArgs() \u0026\u0026 bestMatch.getParameterTypes().length \u003e 0 \u0026\u0026 parameterTypes.length \u003e 0) {\r\n        final Class\u003c?\u003e[] methodParameterTypes \u003d bestMatch.getParameterTypes();\r\n        final Class\u003c?\u003e methodParameterComponentType \u003d methodParameterTypes[methodParameterTypes.length - 1].getComponentType();\r\n        final String methodParameterComponentTypeName \u003d ClassUtils.primitiveToWrapper(methodParameterComponentType).getName();\r\n        final Class\u003c?\u003e lastParameterType \u003d parameterTypes[parameterTypes.length - 1];\r\n        final String parameterTypeName \u003d lastParameterType \u003d\u003d null ? null : lastParameterType.getName();\r\n        final String parameterTypeSuperClassName \u003d lastParameterType \u003d\u003d null ? null : lastParameterType.getSuperclass().getName();\r\n        if (parameterTypeName !\u003d null \u0026\u0026 parameterTypeSuperClassName !\u003d null \u0026\u0026 !methodParameterComponentTypeName.equals(parameterTypeName) \u0026\u0026 !methodParameterComponentTypeName.equals(parameterTypeSuperClassName)) {\r\n            return null;\r\n        }\r\n    }\r\n    return bestMatch;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.TypeUtils",
    "methodName": "containsTypeVariables",
    "signature": "boolean containsTypeVariables(java.lang.reflect.Type)",
    "visibility": "public",
    "body": "{\r\n    if (type instanceof TypeVariable\u003c?\u003e) {\r\n        return true;\r\n    }\r\n    if (type instanceof Class\u003c?\u003e) {\r\n        return ((Class\u003c?\u003e) type).getTypeParameters().length \u003e 0;\r\n    }\r\n    if (type instanceof ParameterizedType) {\r\n        for (final Type arg : ((ParameterizedType) type).getActualTypeArguments()) {\r\n            if (containsTypeVariables(arg)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    if (type instanceof WildcardType) {\r\n        final WildcardType wild \u003d (WildcardType) type;\r\n        return containsTypeVariables(getImplicitLowerBounds(wild)[0]) || containsTypeVariables(getImplicitUpperBounds(wild)[0]);\r\n    }\r\n    if (type instanceof GenericArrayType) {\r\n        return containsTypeVariables(((GenericArrayType) type).getGenericComponentType());\r\n    }\r\n    return false;\r\n}",
    "nodes": 23,
    "edges": 26,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B7",
      "B3 : If($i1 \u003c\u003d 0) → B4 | else → B5",
      "B7 : If($z2 \u003d\u003d false) → B8 | else → B14",
      "B9 : If(i2 \u003e\u003d i0) → B10 | else → B13",
      "B10 : If($z8 \u003d\u003d false) → B11 | else → B12",
      "B14 : If($z3 \u003d\u003d false) → B15 | else → B20",
      "B15 : If($z6 !\u003d 0) → B16 | else → B17",
      "B16 : If($z7 \u003d\u003d false) → B17 | else → B18",
      "B20 : If($z4 \u003d\u003d false) → B21 | else → B22"
    ],
    "blockList": [
      "B0 {\n  Type\n  $z0 \u003d TypeVariable\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z1 \u003d Class\n  if ($z1 \u003d\u003d false) goto B3 else B7\n}",
      "B3 {\n  $r9 \u003d Class) r0\n  $r10 \u003d $r9.getTypeParameters()\n  $i1 \u003d lengthof $r10\n  if ($i1 \u003c\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $z9 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z9 \u003d 0\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $z2 \u003d ParameterizedType\n  if ($z2 \u003d\u003d false) goto B8 else B14\n}",
      "B8 {\n  $r7 \u003d ParameterizedType) r0\n  r11 \u003d $r7.getActualTypeArguments()\n  i0 \u003d lengthof r11\n  i2 \u003d 0\n}",
      "B9 {\n  if (i2 \u003e\u003d i0) goto B10 else B13\n}",
      "B10 {\n  r8 \u003d r11[i2]\n  $z8 \u003d TypeUtils.containsTypeVariables(r8)\n  if ($z8 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  return\n}",
      "B12 {\n  i2 \u003d i2 + 1\n  goto B9\n}",
      "B13 {\n  return\n}",
      "B14 {\n  $z3 \u003d WildcardType\n  if ($z3 \u003d\u003d false) goto B15 else B20\n}",
      "B15 {\n  r12 \u003d WildcardType) r0\n  $r3 \u003d TypeUtils.getImplicitLowerBounds(r12)\n  $r4 \u003d $r3[0]\n  $z6 \u003d TypeUtils.containsTypeVariables($r4)\n  if ($z6 !\u003d 0) goto B16 else B17\n}",
      "B16 {\n  $r5 \u003d TypeUtils.getImplicitUpperBounds(r12)\n  $r6 \u003d $r5[0]\n  $z7 \u003d TypeUtils.containsTypeVariables($r6)\n  if ($z7 \u003d\u003d false) goto B17 else B18\n}",
      "B17 {\n  $z10 \u003d 1\n  goto B19\n}",
      "B18 {\n  $z10 \u003d 0\n}",
      "B19 {\n  return\n}",
      "B20 {\n  $z4 \u003d GenericArrayType\n  if ($z4 \u003d\u003d false) goto B21 else B22\n}",
      "B21 {\n  $r1 \u003d GenericArrayType) r0\n  $r2 \u003d $r1.getGenericComponentType()\n  $z5 \u003d TypeUtils.containsTypeVariables($r2)\n  return\n}",
      "B22 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B14",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B13",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B9",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B20",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e [EXIT]",
      "B22 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeUtils#getImplicitUpperBounds(...1)",
        "body": "{\r\n    Objects.requireNonNull(wildcardType, \"wildcardType\");\r\n    final Type[] bounds \u003d wildcardType.getUpperBounds();\r\n    return bounds.length \u003d\u003d 0 ? new Type[] { Object.class } : normalizeUpperBounds(bounds);\r\n}"
      },
      {
        "name": "TypeUtils#getImplicitLowerBounds(...1)",
        "body": "{\r\n    Objects.requireNonNull(wildcardType, \"wildcardType\");\r\n    final Type[] bounds \u003d wildcardType.getLowerBounds();\r\n    return bounds.length \u003d\u003d 0 ? new Type[] { null } : bounds;\r\n}"
      },
      {
        "name": "TypeUtils#containsTypeVariables(...1)",
        "body": "{\r\n    if (type instanceof TypeVariable\u003c?\u003e) {\r\n        return true;\r\n    }\r\n    if (type instanceof Class\u003c?\u003e) {\r\n        return ((Class\u003c?\u003e) type).getTypeParameters().length \u003e 0;\r\n    }\r\n    if (type instanceof ParameterizedType) {\r\n        for (final Type arg : ((ParameterizedType) type).getActualTypeArguments()) {\r\n            if (containsTypeVariables(arg)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    if (type instanceof WildcardType) {\r\n        final WildcardType wild \u003d (WildcardType) type;\r\n        return containsTypeVariables(getImplicitLowerBounds(wild)[0]) || containsTypeVariables(getImplicitUpperBounds(wild)[0]);\r\n    }\r\n    if (type instanceof GenericArrayType) {\r\n        return containsTypeVariables(((GenericArrayType) type).getGenericComponentType());\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.TypeUtils",
    "methodName": "determineTypeArguments",
    "signature": "java.util.Map determineTypeArguments(java.lang.Class,java.lang.reflect.ParameterizedType)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(cls, \"cls\");\r\n    Objects.requireNonNull(superParameterizedType, \"superParameterizedType\");\r\n    final Class\u003c?\u003e superClass \u003d getRawType(superParameterizedType);\r\n    // compatibility check\r\n    if (!isAssignable(cls, superClass)) {\r\n        return null;\r\n    }\r\n    if (cls.equals(superClass)) {\r\n        return getTypeArguments(superParameterizedType, superClass, null);\r\n    }\r\n    // get the next class in the inheritance hierarchy\r\n    final Type midType \u003d getClosestParentType(cls, superClass);\r\n    // can only be a class or a parameterized type\r\n    if (midType instanceof Class\u003c?\u003e) {\r\n        return determineTypeArguments((Class\u003c?\u003e) midType, superParameterizedType);\r\n    }\r\n    final ParameterizedType midParameterizedType \u003d (ParameterizedType) midType;\r\n    final Class\u003c?\u003e midClass \u003d getRawType(midParameterizedType);\r\n    // get the type variables of the mid class that map to the type\r\n    // arguments of the super class\r\n    final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVarAssigns \u003d determineTypeArguments(midClass, superParameterizedType);\r\n    // map the arguments of the mid type to the class type variables\r\n    mapTypeVariablesToArguments(cls, midParameterizedType, typeVarAssigns);\r\n    return typeVarAssigns;\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Class\n  ParameterizedType\n  Objects.requireNonNull(r0, \"cls\")\n  Objects.requireNonNull(r1, \"superParameterizedType\")\n  r2 \u003d TypeUtils.getRawType(r1)\n  $z0 \u003d TypeUtils.isAssignable(r0, r2)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z1 \u003d r0.equals(r2)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r9 \u003d TypeUtils.getTypeArguments(r1, r2, null)\n  return\n}",
      "B4 {\n  r3 \u003d TypeUtils.getClosestParentType(r0, r2)\n  $z2 \u003d Class\n  if ($z2 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r7 \u003d Class) r3\n  $r8 \u003d TypeUtils.determineTypeArguments($r7, r1)\n  return\n}",
      "B6 {\n  r4 \u003d ParameterizedType) r3\n  r5 \u003d TypeUtils.getRawType(r4)\n  r6 \u003d TypeUtils.determineTypeArguments(r5, r1)\n  TypeUtils.mapTypeVariablesToArguments(r0, r4, r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeUtils#mapTypeVariablesToArguments(...3)",
        "body": "{\r\n    // capture the type variables from the owner type that have assignments\r\n    final Type ownerType \u003d parameterizedType.getOwnerType();\r\n    if (ownerType instanceof ParameterizedType) {\r\n        // recursion to make sure the owner\u0027s owner type gets processed\r\n        mapTypeVariablesToArguments(cls, (ParameterizedType) ownerType, typeVarAssigns);\r\n    }\r\n    // parameterizedType is a generic interface/class (or it\u0027s in the owner\r\n    // hierarchy of said interface/class) implemented/extended by the class\r\n    // cls. Find out which type variables of cls are type arguments of\r\n    // parameterizedType:\r\n    final Type[] typeArgs \u003d parameterizedType.getActualTypeArguments();\r\n    // of the cls\u0027s type variables that are arguments of parameterizedType,\r\n    // find out which ones can be determined from the super type\u0027s arguments\r\n    final TypeVariable\u003c?\u003e[] typeVars \u003d getRawType(parameterizedType).getTypeParameters();\r\n    // use List view of type parameters of cls so the contains() method can be used:\r\n    final List\u003cTypeVariable\u003cClass\u003cT\u003e\u003e\u003e typeVarList \u003d Arrays.asList(cls.getTypeParameters());\r\n    for (int i \u003d 0; i \u003c typeArgs.length; i++) {\r\n        final TypeVariable\u003c?\u003e typeVar \u003d typeVars[i];\r\n        final Type typeArg \u003d typeArgs[i];\r\n        // argument of parameterizedType is a type variable of cls\r\n        if (typeVarList.contains(typeArg) \u0026\u0026 // type variable of parameterizedType has an assignment in\r\n        // the super type.\r\n        typeVarAssigns.containsKey(typeVar)) {\r\n            // map the assignment to the cls\u0027s type variable\r\n            typeVarAssigns.put((TypeVariable\u003c?\u003e) typeArg, typeVarAssigns.get(typeVar));\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "TypeUtils#getTypeArguments(...3)",
        "body": "{\r\n    // make sure they\u0027re assignable\r\n    if (!isAssignable(cls, toClass)) {\r\n        return null;\r\n    }\r\n    // can\u0027t work with primitives\r\n    if (cls.isPrimitive()) {\r\n        // both classes are primitives?\r\n        if (toClass.isPrimitive()) {\r\n            // dealing with widening here. No type arguments to be\r\n            // harvested with these two types.\r\n            return new HashMap\u003c\u003e();\r\n        }\r\n        // work with wrapper the wrapper class instead of the primitive\r\n        cls \u003d ClassUtils.primitiveToWrapper(cls);\r\n    }\r\n    // create a copy of the incoming map, or an empty one if it\u0027s null\r\n    final HashMap\u003cTypeVariable\u003c?\u003e, Type\u003e typeVarAssigns \u003d subtypeVarAssigns \u003d\u003d null ? new HashMap\u003c\u003e() : new HashMap\u003c\u003e(subtypeVarAssigns);\r\n    // has target class been reached?\r\n    if (toClass.equals(cls)) {\r\n        return typeVarAssigns;\r\n    }\r\n    // walk the inheritance hierarchy until the target class is reached\r\n    return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);\r\n}"
      },
      {
        "name": "TypeUtils#getRawType(...1)",
        "body": "{\r\n    final Type rawType \u003d parameterizedType.getRawType();\r\n    // check if raw type is a Class object\r\n    // not currently necessary, but since the return type is Type instead of\r\n    // Class, there\u0027s enough reason to believe that future versions of Java\r\n    // may return other Type implementations. And type-safety checking is\r\n    // rarely a bad idea.\r\n    if (!(rawType instanceof Class\u003c?\u003e)) {\r\n        throw new IllegalStateException(\"Wait... What!? Type of rawType: \" + rawType);\r\n    }\r\n    return (Class\u003c?\u003e) rawType;\r\n}"
      },
      {
        "name": "TypeUtils#getClosestParentType(...2)",
        "body": "{\r\n    // only look at the interfaces if the super class is also an interface\r\n    if (superClass.isInterface()) {\r\n        // get the generic interfaces of the subject class\r\n        final Type[] interfaceTypes \u003d cls.getGenericInterfaces();\r\n        // will hold the best generic interface match found\r\n        Type genericInterface \u003d null;\r\n        // find the interface closest to the super class\r\n        for (final Type midType : interfaceTypes) {\r\n            final Class\u003c?\u003e midClass;\r\n            if (midType instanceof ParameterizedType) {\r\n                midClass \u003d getRawType((ParameterizedType) midType);\r\n            } else if (midType instanceof Class\u003c?\u003e) {\r\n                midClass \u003d (Class\u003c?\u003e) midType;\r\n            } else {\r\n                throw new IllegalStateException(\"Unexpected generic\" + \" interface type found: \" + midType);\r\n            }\r\n            // check if this interface is further up the inheritance chain\r\n            // than the previously found match\r\n            if (isAssignable(midClass, superClass) \u0026\u0026 isAssignable(genericInterface, (Type) midClass)) {\r\n                genericInterface \u003d midType;\r\n            }\r\n        }\r\n        // found a match?\r\n        if (genericInterface !\u003d null) {\r\n            return genericInterface;\r\n        }\r\n    }\r\n    // none of the interfaces were descendants of the target class, so the\r\n    // super class has to be one, instead\r\n    return cls.getGenericSuperclass();\r\n}"
      },
      {
        "name": "TypeUtils#determineTypeArguments(...2)",
        "body": "{\r\n    Objects.requireNonNull(cls, \"cls\");\r\n    Objects.requireNonNull(superParameterizedType, \"superParameterizedType\");\r\n    final Class\u003c?\u003e superClass \u003d getRawType(superParameterizedType);\r\n    // compatibility check\r\n    if (!isAssignable(cls, superClass)) {\r\n        return null;\r\n    }\r\n    if (cls.equals(superClass)) {\r\n        return getTypeArguments(superParameterizedType, superClass, null);\r\n    }\r\n    // get the next class in the inheritance hierarchy\r\n    final Type midType \u003d getClosestParentType(cls, superClass);\r\n    // can only be a class or a parameterized type\r\n    if (midType instanceof Class\u003c?\u003e) {\r\n        return determineTypeArguments((Class\u003c?\u003e) midType, superParameterizedType);\r\n    }\r\n    final ParameterizedType midParameterizedType \u003d (ParameterizedType) midType;\r\n    final Class\u003c?\u003e midClass \u003d getRawType(midParameterizedType);\r\n    // get the type variables of the mid class that map to the type\r\n    // arguments of the super class\r\n    final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVarAssigns \u003d determineTypeArguments(midClass, superParameterizedType);\r\n    // map the arguments of the mid type to the class type variables\r\n    mapTypeVariablesToArguments(cls, midParameterizedType, typeVarAssigns);\r\n    return typeVarAssigns;\r\n}"
      },
      {
        "name": "TypeUtils#isAssignable(...2)",
        "body": "{\r\n    if (type \u003d\u003d null) {\r\n        // consistency with ClassUtils.isAssignable() behavior\r\n        return toClass \u003d\u003d null || !toClass.isPrimitive();\r\n    }\r\n    // only a null type can be assigned to null type which\r\n    // would have cause the previous to return true\r\n    if (toClass \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    // all types are assignable to themselves\r\n    if (toClass.equals(type)) {\r\n        return true;\r\n    }\r\n    if (type instanceof Class\u003c?\u003e) {\r\n        // just comparing two classes\r\n        return ClassUtils.isAssignable((Class\u003c?\u003e) type, toClass);\r\n    }\r\n    if (type instanceof ParameterizedType) {\r\n        // only have to compare the raw type to the class\r\n        return isAssignable(getRawType((ParameterizedType) type), toClass);\r\n    }\r\n    // *\r\n    if (type instanceof TypeVariable\u003c?\u003e) {\r\n        // if any of the bounds are assignable to the class, then the\r\n        // type is assignable to the class.\r\n        for (final Type bound : ((TypeVariable\u003c?\u003e) type).getBounds()) {\r\n            if (isAssignable(bound, toClass)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    // the only classes to which a generic array type can be assigned\r\n    // are class Object and array classes\r\n    if (type instanceof GenericArrayType) {\r\n        return toClass.equals(Object.class) || toClass.isArray() \u0026\u0026 isAssignable(((GenericArrayType) type).getGenericComponentType(), toClass.getComponentType());\r\n    }\r\n    // wildcard types are not assignable to a class (though one would think\r\n    // \"? super Object\" would be assignable to Object)\r\n    if (type instanceof WildcardType) {\r\n        return false;\r\n    }\r\n    throw new IllegalStateException(\"found an unhandled type: \" + type);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.TypeUtils",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.reflect.Type,java.lang.reflect.Type)",
    "visibility": "public",
    "body": "{\r\n    if (Objects.equals(type1, type2)) {\r\n        return true;\r\n    }\r\n    if (type1 instanceof ParameterizedType) {\r\n        return equals((ParameterizedType) type1, type2);\r\n    }\r\n    if (type1 instanceof GenericArrayType) {\r\n        return equals((GenericArrayType) type1, type2);\r\n    }\r\n    if (type1 instanceof WildcardType) {\r\n        return equals((WildcardType) type1, type2);\r\n    }\r\n    return false;\r\n}",
    "nodes": 9,
    "edges": 8,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B6",
      "B6 : If($z3 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  Type\n  Type\n  $z0 \u003d Objects.equals(r0, r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z1 \u003d ParameterizedType\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d ParameterizedType) r0\n  $z6 \u003d TypeUtils.equals($r4, r1)\n  return\n}",
      "B4 {\n  $z2 \u003d GenericArrayType\n  if ($z2 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r3 \u003d GenericArrayType) r0\n  $z5 \u003d TypeUtils.equals($r3, r1)\n  return\n}",
      "B6 {\n  $z3 \u003d WildcardType\n  if ($z3 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $r2 \u003d WildcardType) r0\n  $z4 \u003d TypeUtils.equals($r2, r1)\n  return\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeUtils#equals(...2)",
        "body": "{\r\n    return type instanceof GenericArrayType \u0026\u0026 equals(genericArrayType.getGenericComponentType(), ((GenericArrayType) type).getGenericComponentType());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.TypeUtils",
    "methodName": "getArrayComponentType",
    "signature": "java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)",
    "visibility": "public",
    "body": "{\r\n    if (type instanceof Class\u003c?\u003e) {\r\n        final Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) type;\r\n        return cls.isArray() ? cls.getComponentType() : null;\r\n    }\r\n    if (type instanceof GenericArrayType) {\r\n        return ((GenericArrayType) type).getGenericComponentType();\r\n    }\r\n    return null;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B5",
      "B1 : If($z2 \u003d\u003d false) → B2 | else → B3",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Type\n  $z0 \u003d Class\n  if ($z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  r3 \u003d Class) r0\n  $z2 \u003d r3.isArray()\n  if ($z2 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r3.getComponentType()\n  goto B4\n}",
      "B3 {\n  $r4 \u003d null\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $z1 \u003d GenericArrayType\n  if ($z1 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r1 \u003d GenericArrayType) r0\n  $r2 \u003d $r1.getGenericComponentType()\n  return\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.TypeUtils",
    "methodName": "getImplicitBounds",
    "signature": "java.lang.reflect.Type[] getImplicitBounds(java.lang.reflect.TypeVariable)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(typeVariable, \"typeVariable\");\r\n    final Type[] bounds \u003d typeVariable.getBounds();\r\n    return bounds.length \u003d\u003d 0 ? new Type[] { Object.class } : normalizeUpperBounds(bounds);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TypeVariable\n  Objects.requireNonNull(r0, \"typeVariable\")\n  r1 \u003d r0.getBounds()\n  $i0 \u003d lengthof r1\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Type)[1]\n  $r2[0] \u003d class \"Ljava/lang/Object;\"\n  goto B3\n}",
      "B2 {\n  $r2 \u003d TypeUtils.normalizeUpperBounds(r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeUtils#normalizeUpperBounds(...1)",
        "body": "{\r\n    Objects.requireNonNull(bounds, \"bounds\");\r\n    // don\u0027t bother if there\u0027s only one (or none) type\r\n    if (bounds.length \u003c 2) {\r\n        return bounds;\r\n    }\r\n    final Set\u003cType\u003e types \u003d new HashSet\u003c\u003e(bounds.length);\r\n    for (final Type type1 : bounds) {\r\n        boolean subtypeFound \u003d false;\r\n        for (final Type type2 : bounds) {\r\n            if (type1 !\u003d type2 \u0026\u0026 isAssignable(type2, type1, null)) {\r\n                subtypeFound \u003d true;\r\n                break;\r\n            }\r\n        }\r\n        if (!subtypeFound) {\r\n            types.add(type1);\r\n        }\r\n    }\r\n    return types.toArray(ArrayUtils.EMPTY_TYPE_ARRAY);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.TypeUtils",
    "methodName": "getImplicitLowerBounds",
    "signature": "java.lang.reflect.Type[] getImplicitLowerBounds(java.lang.reflect.WildcardType)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(wildcardType, \"wildcardType\");\r\n    final Type[] bounds \u003d wildcardType.getLowerBounds();\r\n    return bounds.length \u003d\u003d 0 ? new Type[] { null } : bounds;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  WildcardType\n  Objects.requireNonNull(r0, \"wildcardType\")\n  r1 \u003d r0.getLowerBounds()\n  $i0 \u003d lengthof r1\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Type)[1]\n  $r2[0] \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.TypeUtils",
    "methodName": "getImplicitUpperBounds",
    "signature": "java.lang.reflect.Type[] getImplicitUpperBounds(java.lang.reflect.WildcardType)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(wildcardType, \"wildcardType\");\r\n    final Type[] bounds \u003d wildcardType.getUpperBounds();\r\n    return bounds.length \u003d\u003d 0 ? new Type[] { Object.class } : normalizeUpperBounds(bounds);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  WildcardType\n  Objects.requireNonNull(r0, \"wildcardType\")\n  r1 \u003d r0.getUpperBounds()\n  $i0 \u003d lengthof r1\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Type)[1]\n  $r2[0] \u003d class \"Ljava/lang/Object;\"\n  goto B3\n}",
      "B2 {\n  $r2 \u003d TypeUtils.normalizeUpperBounds(r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeUtils#normalizeUpperBounds(...1)",
        "body": "{\r\n    Objects.requireNonNull(bounds, \"bounds\");\r\n    // don\u0027t bother if there\u0027s only one (or none) type\r\n    if (bounds.length \u003c 2) {\r\n        return bounds;\r\n    }\r\n    final Set\u003cType\u003e types \u003d new HashSet\u003c\u003e(bounds.length);\r\n    for (final Type type1 : bounds) {\r\n        boolean subtypeFound \u003d false;\r\n        for (final Type type2 : bounds) {\r\n            if (type1 !\u003d type2 \u0026\u0026 isAssignable(type2, type1, null)) {\r\n                subtypeFound \u003d true;\r\n                break;\r\n            }\r\n        }\r\n        if (!subtypeFound) {\r\n            types.add(type1);\r\n        }\r\n    }\r\n    return types.toArray(ArrayUtils.EMPTY_TYPE_ARRAY);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.TypeUtils",
    "methodName": "getRawType",
    "signature": "java.lang.Class getRawType(java.lang.reflect.Type,java.lang.reflect.Type)",
    "visibility": "public",
    "body": "{\r\n    if (type instanceof Class\u003c?\u003e) {\r\n        // it is raw, no problem\r\n        return (Class\u003c?\u003e) type;\r\n    }\r\n    if (type instanceof ParameterizedType) {\r\n        // simple enough to get the raw type of a ParameterizedType\r\n        return getRawType((ParameterizedType) type);\r\n    }\r\n    if (type instanceof TypeVariable\u003c?\u003e) {\r\n        if (assigningType \u003d\u003d null) {\r\n            return null;\r\n        }\r\n        // get the entity declaring this type variable\r\n        final Object genericDeclaration \u003d ((TypeVariable\u003c?\u003e) type).getGenericDeclaration();\r\n        // can\u0027t get the raw type of a method- or constructor-declared type\r\n        // variable\r\n        if (!(genericDeclaration instanceof Class\u003c?\u003e)) {\r\n            return null;\r\n        }\r\n        // get the type arguments for the declaring class/interface based\r\n        // on the enclosing type\r\n        final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVarAssigns \u003d getTypeArguments(assigningType, (Class\u003c?\u003e) genericDeclaration);\r\n        // enclosingType has to be a subclass (or subinterface) of the\r\n        // declaring type\r\n        if (typeVarAssigns \u003d\u003d null) {\r\n            return null;\r\n        }\r\n        // get the argument assigned to this type variable\r\n        final Type typeArgument \u003d typeVarAssigns.get(type);\r\n        if (typeArgument \u003d\u003d null) {\r\n            return null;\r\n        }\r\n        // get the argument for this type variable\r\n        return getRawType(typeArgument, assigningType);\r\n    }\r\n    if (type instanceof GenericArrayType) {\r\n        // get raw component type\r\n        final Class\u003c?\u003e rawComponentType \u003d getRawType(((GenericArrayType) type).getGenericComponentType(), assigningType);\r\n        // create array type from raw component type and return its class\r\n        return rawComponentType !\u003d null ? Array.newInstance(rawComponentType, 0).getClass() : null;\r\n    }\r\n    // (hand-waving) this is not the method you\u0027re looking for\r\n    if (type instanceof WildcardType) {\r\n        return null;\r\n    }\r\n    throw new IllegalArgumentException(\"unknown type: \" + type);\r\n}",
    "nodes": 22,
    "edges": 22,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B14",
      "B5 : If(r7 !\u003d null) → B6 | else → B7",
      "B7 : If($z5 !\u003d 0) → B8 | else → B9",
      "B9 : If(r12 !\u003d null) → B10 | else → B11",
      "B11 : If(r14 !\u003d null) → B12 | else → B13",
      "B14 : If($z3 \u003d\u003d false) → B15 | else → B19",
      "B15 : If(r20 \u003d\u003d null) → B16 | else → B17",
      "B19 : If($z4 \u003d\u003d false) → B20 | else → B21"
    ],
    "blockList": [
      "B0 {\n  Type\n  Type\n  $z0 \u003d Class\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r18 \u003d Class) r0\n  return\n}",
      "B2 {\n  $z1 \u003d ParameterizedType\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r16 \u003d ParameterizedType) r0\n  $r17 \u003d TypeUtils.getRawType($r16)\n  return\n}",
      "B4 {\n  $z2 \u003d TypeVariable\n  if ($z2 \u003d\u003d false) goto B5 else B14\n}",
      "B5 {\n  if (r7 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $r10 \u003d TypeVariable) r0\n  r19 \u003d $r10.getGenericDeclaration()\n  $z5 \u003d Class\n  if ($z5 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $r11 \u003d Class) r19\n  r12 \u003d TypeUtils.getTypeArguments(r7, $r11)\n  if (r12 !\u003d null) goto B10 else B11\n}",
      "B10 {\n  return\n}",
      "B11 {\n  $r13 \u003d r12.get(r0)\n  r14 \u003d Type) $r13\n  if (r14 !\u003d null) goto B12 else B13\n}",
      "B12 {\n  return\n}",
      "B13 {\n  $r15 \u003d TypeUtils.getRawType(r14, r7)\n  return\n}",
      "B14 {\n  $z3 \u003d GenericArrayType\n  if ($z3 \u003d\u003d false) goto B15 else B19\n}",
      "B15 {\n  $r6 \u003d GenericArrayType) r0\n  $r8 \u003d $r6.getGenericComponentType()\n  r20 \u003d TypeUtils.getRawType($r8, r7)\n  if (r20 \u003d\u003d null) goto B16 else B17\n}",
      "B16 {\n  $r9 \u003d Array.newInstance(r20, 0)\n  $r21 \u003d $r9.getClass()\n  goto B18\n}",
      "B17 {\n  $r21 \u003d null\n}",
      "B18 {\n  return\n}",
      "B19 {\n  $z4 \u003d WildcardType\n  if ($z4 \u003d\u003d false) goto B20 else B21\n}",
      "B20 {\n  return\n}",
      "B21 {\n  $r1 \u003d IllegalArgumentException\n  $r2 \u003d StringBuilder\n  new StringBuilder()\n  $r3 \u003d $r2.append(\"unknown type: \")\n  $r4 \u003d $r3.append(r0)\n  $r5 \u003d $r4.toString()\n  new IllegalArgumentException($r5)\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B14",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B19",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e [EXIT]",
      "B21 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeUtils#getTypeArguments(...2)",
        "body": "{\r\n    return getTypeArguments(type, toClass, null);\r\n}"
      },
      {
        "name": "TypeUtils#getRawType(...2)",
        "body": "{\r\n    if (type instanceof Class\u003c?\u003e) {\r\n        // it is raw, no problem\r\n        return (Class\u003c?\u003e) type;\r\n    }\r\n    if (type instanceof ParameterizedType) {\r\n        // simple enough to get the raw type of a ParameterizedType\r\n        return getRawType((ParameterizedType) type);\r\n    }\r\n    if (type instanceof TypeVariable\u003c?\u003e) {\r\n        if (assigningType \u003d\u003d null) {\r\n            return null;\r\n        }\r\n        // get the entity declaring this type variable\r\n        final Object genericDeclaration \u003d ((TypeVariable\u003c?\u003e) type).getGenericDeclaration();\r\n        // can\u0027t get the raw type of a method- or constructor-declared type\r\n        // variable\r\n        if (!(genericDeclaration instanceof Class\u003c?\u003e)) {\r\n            return null;\r\n        }\r\n        // get the type arguments for the declaring class/interface based\r\n        // on the enclosing type\r\n        final Map\u003cTypeVariable\u003c?\u003e, Type\u003e typeVarAssigns \u003d getTypeArguments(assigningType, (Class\u003c?\u003e) genericDeclaration);\r\n        // enclosingType has to be a subclass (or subinterface) of the\r\n        // declaring type\r\n        if (typeVarAssigns \u003d\u003d null) {\r\n            return null;\r\n        }\r\n        // get the argument assigned to this type variable\r\n        final Type typeArgument \u003d typeVarAssigns.get(type);\r\n        if (typeArgument \u003d\u003d null) {\r\n            return null;\r\n        }\r\n        // get the argument for this type variable\r\n        return getRawType(typeArgument, assigningType);\r\n    }\r\n    if (type instanceof GenericArrayType) {\r\n        // get raw component type\r\n        final Class\u003c?\u003e rawComponentType \u003d getRawType(((GenericArrayType) type).getGenericComponentType(), assigningType);\r\n        // create array type from raw component type and return its class\r\n        return rawComponentType !\u003d null ? Array.newInstance(rawComponentType, 0).getClass() : null;\r\n    }\r\n    // (hand-waving) this is not the method you\u0027re looking for\r\n    if (type instanceof WildcardType) {\r\n        return null;\r\n    }\r\n    throw new IllegalArgumentException(\"unknown type: \" + type);\r\n}"
      },
      {
        "name": "TypeUtils#getRawType(...1)",
        "body": "{\r\n    final Type rawType \u003d parameterizedType.getRawType();\r\n    // check if raw type is a Class object\r\n    // not currently necessary, but since the return type is Type instead of\r\n    // Class, there\u0027s enough reason to believe that future versions of Java\r\n    // may return other Type implementations. And type-safety checking is\r\n    // rarely a bad idea.\r\n    if (!(rawType instanceof Class\u003c?\u003e)) {\r\n        throw new IllegalStateException(\"Wait... What!? Type of rawType: \" + rawType);\r\n    }\r\n    return (Class\u003c?\u003e) rawType;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.TypeUtils",
    "methodName": "isArrayType",
    "signature": "boolean isArrayType(java.lang.reflect.Type)",
    "visibility": "public",
    "body": "{\r\n    return type instanceof GenericArrayType || type instanceof Class\u003c?\u003e \u0026\u0026 ((Class\u003c?\u003e) type).isArray();\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B4",
      "B2 : If($z2 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Type\n  $z0 \u003d GenericArrayType\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $z1 \u003d Class\n  if ($z1 \u003d\u003d false) goto B2 else B4\n}",
      "B2 {\n  $r1 \u003d Class) r0\n  $z2 \u003d $r1.isArray()\n  if ($z2 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $z3 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z3 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.TypeUtils",
    "methodName": "isInstance",
    "signature": "boolean isInstance(java.lang.Object,java.lang.reflect.Type)",
    "visibility": "public",
    "body": "{\r\n    if (type \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return value \u003d\u003d null ? !(type instanceof Class\u003c?\u003e) || !((Class\u003c?\u003e) type).isPrimitive() : isAssignable(value.getClass(), type, null);\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r1 !\u003d null) → B3 | else → B7",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Object\n  Type\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d null) goto B3 else B7\n}",
      "B3 {\n  $z0 \u003d Class\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r3 \u003d Class) r0\n  $z1 \u003d $r3.isPrimitive()\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $z2 \u003d 1\n  goto B8\n}",
      "B6 {\n  $z2 \u003d 0\n  goto B8\n}",
      "B7 {\n  $r2 \u003d r1.getClass()\n  $z2 \u003d TypeUtils.isAssignable($r2, r0, null)\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeUtils#isAssignable(...3)",
        "body": "{\r\n    if (type \u003d\u003d null) {\r\n        return true;\r\n    }\r\n    // only a null type can be assigned to null type which\r\n    // would have cause the previous to return true\r\n    if (toGenericArrayType \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    // all types are assignable to themselves\r\n    if (toGenericArrayType.equals(type)) {\r\n        return true;\r\n    }\r\n    final Type toComponentType \u003d toGenericArrayType.getGenericComponentType();\r\n    if (type instanceof Class\u003c?\u003e) {\r\n        final Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) type;\r\n        // compare the component types\r\n        return cls.isArray() \u0026\u0026 isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns);\r\n    }\r\n    if (type instanceof GenericArrayType) {\r\n        // compare the component types\r\n        return isAssignable(((GenericArrayType) type).getGenericComponentType(), toComponentType, typeVarAssigns);\r\n    }\r\n    if (type instanceof WildcardType) {\r\n        // so long as one of the upper bounds is assignable, it\u0027s good\r\n        for (final Type bound : getImplicitUpperBounds((WildcardType) type)) {\r\n            if (isAssignable(bound, toGenericArrayType)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    if (type instanceof TypeVariable\u003c?\u003e) {\r\n        // probably should remove the following logic and just return false.\r\n        // type variables cannot specify arrays as bounds.\r\n        for (final Type bound : getImplicitBounds((TypeVariable\u003c?\u003e) type)) {\r\n            if (isAssignable(bound, toGenericArrayType)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    if (type instanceof ParameterizedType) {\r\n        // the raw type of a parameterized type is never an array or\r\n        // generic array, otherwise the declaration would look like this:\r\n        // Collection[]\u003c ? extends String \u003e collection;\r\n        return false;\r\n    }\r\n    throw new IllegalStateException(\"found an unhandled type: \" + type);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.TypeUtils",
    "methodName": "normalizeUpperBounds",
    "signature": "java.lang.reflect.Type[] normalizeUpperBounds(java.lang.reflect.Type[])",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(bounds, \"bounds\");\r\n    // don\u0027t bother if there\u0027s only one (or none) type\r\n    if (bounds.length \u003c 2) {\r\n        return bounds;\r\n    }\r\n    final Set\u003cType\u003e types \u003d new HashSet\u003c\u003e(bounds.length);\r\n    for (final Type type1 : bounds) {\r\n        boolean subtypeFound \u003d false;\r\n        for (final Type type2 : bounds) {\r\n            if (type1 !\u003d type2 \u0026\u0026 isAssignable(type2, type1, null)) {\r\n                subtypeFound \u003d true;\r\n                break;\r\n            }\r\n        }\r\n        if (!subtypeFound) {\r\n            types.add(type1);\r\n        }\r\n    }\r\n    return types.toArray(ArrayUtils.EMPTY_TYPE_ARRAY);\r\n}",
    "nodes": 14,
    "edges": 18,
    "cc": 6,
    "flowSummary": [
      "B0 : If($i0 \u003e\u003d 2) → B1 | else → B2",
      "B3 : If(i4 \u003e\u003d i2) → B4 | else → B13",
      "B5 : If(i5 \u003e\u003d i3) → B6 | else → B10",
      "B6 : If(r5 \u003d\u003d r6) → B7 | else → B9",
      "B7 : If($z0 \u003d\u003d false) → B8 | else → B9",
      "B10 : If(z1 !\u003d 0) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  Type[]\n  Objects.requireNonNull(r0, \"bounds\")\n  $i0 \u003d lengthof r0\n  if ($i0 \u003e\u003d 2) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d HashSet\n  $i1 \u003d lengthof r0\n  new HashSet($i1)\n  i2 \u003d lengthof r0\n  i4 \u003d 0\n}",
      "B3 {\n  if (i4 \u003e\u003d i2) goto B4 else B13\n}",
      "B4 {\n  r5 \u003d r0[i4]\n  z1 \u003d 0\n  i3 \u003d lengthof r0\n  i5 \u003d 0\n}",
      "B5 {\n  if (i5 \u003e\u003d i3) goto B6 else B10\n}",
      "B6 {\n  r6 \u003d r0[i5]\n  if (r5 \u003d\u003d r6) goto B7 else B9\n}",
      "B7 {\n  $z0 \u003d TypeUtils.isAssignable(r6, r5, null)\n  if ($z0 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  z1 \u003d 1\n  goto B10\n}",
      "B9 {\n  i5 \u003d i5 + 1\n  goto B5\n}",
      "B10 {\n  if (z1 !\u003d 0) goto B11 else B12\n}",
      "B11 {\n  $r1.add(r5)\n}",
      "B12 {\n  i4 \u003d i4 + 1\n  goto B3\n}",
      "B13 {\n  $r2 \u003d Type[] EMPTY_TYPE_ARRAY\u003e\n  $r3 \u003d $r1.toArray($r2)\n  $r4 \u003d Type[]) $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B13",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B5",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B3",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeUtils#isAssignable(...3)",
        "body": "{\r\n    if (type \u003d\u003d null) {\r\n        return true;\r\n    }\r\n    // only a null type can be assigned to null type which\r\n    // would have cause the previous to return true\r\n    if (toGenericArrayType \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    // all types are assignable to themselves\r\n    if (toGenericArrayType.equals(type)) {\r\n        return true;\r\n    }\r\n    final Type toComponentType \u003d toGenericArrayType.getGenericComponentType();\r\n    if (type instanceof Class\u003c?\u003e) {\r\n        final Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) type;\r\n        // compare the component types\r\n        return cls.isArray() \u0026\u0026 isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns);\r\n    }\r\n    if (type instanceof GenericArrayType) {\r\n        // compare the component types\r\n        return isAssignable(((GenericArrayType) type).getGenericComponentType(), toComponentType, typeVarAssigns);\r\n    }\r\n    if (type instanceof WildcardType) {\r\n        // so long as one of the upper bounds is assignable, it\u0027s good\r\n        for (final Type bound : getImplicitUpperBounds((WildcardType) type)) {\r\n            if (isAssignable(bound, toGenericArrayType)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    if (type instanceof TypeVariable\u003c?\u003e) {\r\n        // probably should remove the following logic and just return false.\r\n        // type variables cannot specify arrays as bounds.\r\n        for (final Type bound : getImplicitBounds((TypeVariable\u003c?\u003e) type)) {\r\n            if (isAssignable(bound, toGenericArrayType)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    if (type instanceof ParameterizedType) {\r\n        // the raw type of a parameterized type is never an array or\r\n        // generic array, otherwise the declaration would look like this:\r\n        // Collection[]\u003c ? extends String \u003e collection;\r\n        return false;\r\n    }\r\n    throw new IllegalStateException(\"found an unhandled type: \" + type);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.TypeUtils",
    "methodName": "parameterizeWithOwner",
    "signature": "java.lang.reflect.ParameterizedType parameterizeWithOwner(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[])",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(rawClass, \"rawClass\");\r\n    final Type useOwner;\r\n    if (rawClass.getEnclosingClass() \u003d\u003d null) {\r\n        Validate.isTrue(owner \u003d\u003d null, \"no owner allowed for top-level %s\", rawClass);\r\n        useOwner \u003d null;\r\n    } else if (owner \u003d\u003d null) {\r\n        useOwner \u003d rawClass.getEnclosingClass();\r\n    } else {\r\n        Validate.isTrue(isAssignable(owner, rawClass.getEnclosingClass()), \"%s is invalid owner type for parameterized %s\", owner, rawClass);\r\n        useOwner \u003d owner;\r\n    }\r\n    Validate.noNullElements(typeArguments, \"null type argument at index %s\");\r\n    Validate.isTrue(rawClass.getTypeParameters().length \u003d\u003d typeArguments.length, \"invalid number of type parameters specified: expected %d, got %d\", rawClass.getTypeParameters().length, typeArguments.length);\r\n    return new ParameterizedTypeImpl(rawClass, useOwner, typeArguments);\r\n}",
    "nodes": 12,
    "edges": 15,
    "cc": 5,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B5",
      "B1 : If(r2 !\u003d null) → B2 | else → B3",
      "B5 : If(r2 !\u003d null) → B6 | else → B7",
      "B8 : If($i2 !\u003d $i3) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  Type\n  Class\n  Type[]\n  Objects.requireNonNull(r0, \"rawClass\")\n  $r1 \u003d r0.getEnclosingClass()\n  if ($r1 !\u003d null) goto B1 else B5\n}",
      "B1 {\n  if (r2 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  $r11 \u003d Object)[1]\n  $r11[0] \u003d r0\n  Validate.isTrue($z1, \"no owner allowed for top-level %s\", $r11)\n  r12 \u003d null\n  goto B8\n}",
      "B5 {\n  if (r2 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  r12 \u003d r0.getEnclosingClass()\n  goto B8\n}",
      "B7 {\n  $r3 \u003d r0.getEnclosingClass()\n  $z0 \u003d TypeUtils.isAssignable(r2, $r3)\n  $r4 \u003d Object)[2]\n  $r4[0] \u003d r2\n  $r4[1] \u003d r0\n  Validate.isTrue($z0, \"%s is invalid owner type for parameterized %s\", $r4)\n  r12 \u003d r2\n}",
      "B8 {\n  $r13 \u003d Object)[0]\n  Validate.noNullElements(r5, \"null type argument at index %s\", $r13)\n  $r14 \u003d r0.getTypeParameters()\n  $i2 \u003d lengthof $r14\n  $i3 \u003d lengthof r5\n  if ($i2 !\u003d $i3) goto B9 else B10\n}",
      "B9 {\n  $z2 \u003d 1\n  goto B11\n}",
      "B10 {\n  $z2 \u003d 0\n}",
      "B11 {\n  $r6 \u003d Object)[2]\n  $r7 \u003d r0.getTypeParameters()\n  $i0 \u003d lengthof $r7\n  $r8 \u003d Integer.valueOf($i0)\n  $r6[0] \u003d $r8\n  $i1 \u003d lengthof r5\n  $r9 \u003d Integer.valueOf($i1)\n  $r6[1] \u003d $r9\n  Validate.isTrue($z2, \"invalid number of type parameters specified: expected %d, got %d\", $r6)\n  $r10 \u003d TypeUtils$ParameterizedTypeImpl\n  new TypeUtils$ParameterizedTypeImpl(r0, r12, r5, null)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeUtils#isAssignable(...2)",
        "body": "{\r\n    if (type \u003d\u003d null) {\r\n        // consistency with ClassUtils.isAssignable() behavior\r\n        return toClass \u003d\u003d null || !toClass.isPrimitive();\r\n    }\r\n    // only a null type can be assigned to null type which\r\n    // would have cause the previous to return true\r\n    if (toClass \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    // all types are assignable to themselves\r\n    if (toClass.equals(type)) {\r\n        return true;\r\n    }\r\n    if (type instanceof Class\u003c?\u003e) {\r\n        // just comparing two classes\r\n        return ClassUtils.isAssignable((Class\u003c?\u003e) type, toClass);\r\n    }\r\n    if (type instanceof ParameterizedType) {\r\n        // only have to compare the raw type to the class\r\n        return isAssignable(getRawType((ParameterizedType) type), toClass);\r\n    }\r\n    // *\r\n    if (type instanceof TypeVariable\u003c?\u003e) {\r\n        // if any of the bounds are assignable to the class, then the\r\n        // type is assignable to the class.\r\n        for (final Type bound : ((TypeVariable\u003c?\u003e) type).getBounds()) {\r\n            if (isAssignable(bound, toClass)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    // the only classes to which a generic array type can be assigned\r\n    // are class Object and array classes\r\n    if (type instanceof GenericArrayType) {\r\n        return toClass.equals(Object.class) || toClass.isArray() \u0026\u0026 isAssignable(((GenericArrayType) type).getGenericComponentType(), toClass.getComponentType());\r\n    }\r\n    // wildcard types are not assignable to a class (though one would think\r\n    // \"? super Object\" would be assignable to Object)\r\n    if (type instanceof WildcardType) {\r\n        return false;\r\n    }\r\n    throw new IllegalStateException(\"found an unhandled type: \" + type);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.TypeUtils",
    "methodName": "toLongString",
    "signature": "java.lang.String toLongString(java.lang.reflect.TypeVariable)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(typeVariable, \"typeVariable\");\r\n    final StringBuilder buf \u003d new StringBuilder();\r\n    final GenericDeclaration d \u003d typeVariable.getGenericDeclaration();\r\n    if (d instanceof Class\u003c?\u003e) {\r\n        Class\u003c?\u003e c \u003d (Class\u003c?\u003e) d;\r\n        while (true) {\r\n            if (c.getEnclosingClass() \u003d\u003d null) {\r\n                buf.insert(0, c.getName());\r\n                break;\r\n            }\r\n            buf.insert(0, c.getSimpleName()).insert(0, \u0027.\u0027);\r\n            c \u003d c.getEnclosingClass();\r\n        }\r\n    } else if (d instanceof Type) {\r\n        // not possible as of now\r\n        buf.append(toString((Type) d));\r\n    } else {\r\n        buf.append(d);\r\n    }\r\n    return buf.append(\u0027:\u0027).append(typeVariableToString(typeVariable)).toString();\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B6",
      "B2 : If($r5 !\u003d null) → B3 | else → B4",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  TypeVariable\n  Objects.requireNonNull(r0, \"typeVariable\")\n  $r1 \u003d StringBuilder\n  new StringBuilder()\n  r2 \u003d r0.getGenericDeclaration()\n  $z0 \u003d Class\n  if ($z0 \u003d\u003d false) goto B1 else B6\n}",
      "B1 {\n  r9 \u003d Class) r2\n}",
      "B2 {\n  $r5 \u003d r9.getEnclosingClass()\n  if ($r5 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r8 \u003d r9.getName()\n  $r1.insert(0, $r8)\n  goto B5\n}",
      "B4 {\n  $r6 \u003d r9.getSimpleName()\n  $r7 \u003d $r1.insert(0, $r6)\n  $r7.insert(0, 46)\n  r9 \u003d r9.getEnclosingClass()\n  goto B2\n}",
      "B5 {\n  goto B9\n}",
      "B6 {\n  $z1 \u003d Type\n  if ($z1 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $r3 \u003d Type) r2\n  $r4 \u003d TypeUtils.toString($r3)\n  $r1.append($r4)\n  goto B9\n}",
      "B8 {\n  $r1.append(r2)\n}",
      "B9 {\n  $r10 \u003d $r1.append(58)\n  $r11 \u003d TypeUtils.typeVariableToString(r0)\n  $r12 \u003d $r10.append($r11)\n  $r13 \u003d $r12.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B2",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeUtils#toString(...1)",
        "body": "{\r\n    Objects.requireNonNull(type, \"type\");\r\n    if (type instanceof Class\u003c?\u003e) {\r\n        return classToString((Class\u003c?\u003e) type);\r\n    }\r\n    if (type instanceof ParameterizedType) {\r\n        return parameterizedTypeToString((ParameterizedType) type);\r\n    }\r\n    if (type instanceof WildcardType) {\r\n        return wildcardTypeToString((WildcardType) type);\r\n    }\r\n    if (type instanceof TypeVariable\u003c?\u003e) {\r\n        return typeVariableToString((TypeVariable\u003c?\u003e) type);\r\n    }\r\n    if (type instanceof GenericArrayType) {\r\n        return genericArrayTypeToString((GenericArrayType) type);\r\n    }\r\n    throw new IllegalArgumentException(ObjectUtils.identityToString(type));\r\n}"
      },
      {
        "name": "TypeUtils#typeVariableToString(...1)",
        "body": "{\r\n    final StringBuilder builder \u003d new StringBuilder(typeVariable.getName());\r\n    final Type[] bounds \u003d typeVariable.getBounds();\r\n    if (bounds.length \u003e 0 \u0026\u0026 !(bounds.length \u003d\u003d 1 \u0026\u0026 Object.class.equals(bounds[0]))) {\r\n        builder.append(\" extends \");\r\n        AMP_JOINER.join(builder, typeVariable.getBounds());\r\n    }\r\n    return builder.toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.TypeUtils",
    "methodName": "toString",
    "signature": "java.lang.String toString(java.lang.reflect.Type)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(type, \"type\");\r\n    if (type instanceof Class\u003c?\u003e) {\r\n        return classToString((Class\u003c?\u003e) type);\r\n    }\r\n    if (type instanceof ParameterizedType) {\r\n        return parameterizedTypeToString((ParameterizedType) type);\r\n    }\r\n    if (type instanceof WildcardType) {\r\n        return wildcardTypeToString((WildcardType) type);\r\n    }\r\n    if (type instanceof TypeVariable\u003c?\u003e) {\r\n        return typeVariableToString((TypeVariable\u003c?\u003e) type);\r\n    }\r\n    if (type instanceof GenericArrayType) {\r\n        return genericArrayTypeToString((GenericArrayType) type);\r\n    }\r\n    throw new IllegalArgumentException(ObjectUtils.identityToString(type));\r\n}",
    "nodes": 11,
    "edges": 10,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B6",
      "B6 : If($z3 \u003d\u003d false) → B7 | else → B8",
      "B8 : If($z4 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  Type\n  Objects.requireNonNull(r0, \"type\")\n  $z0 \u003d Class\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r11 \u003d Class) r0\n  $r12 \u003d TypeUtils.classToString($r11)\n  return\n}",
      "B2 {\n  $z1 \u003d ParameterizedType\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r9 \u003d ParameterizedType) r0\n  $r10 \u003d TypeUtils.parameterizedTypeToString($r9)\n  return\n}",
      "B4 {\n  $z2 \u003d WildcardType\n  if ($z2 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r7 \u003d WildcardType) r0\n  $r8 \u003d TypeUtils.wildcardTypeToString($r7)\n  return\n}",
      "B6 {\n  $z3 \u003d TypeVariable\n  if ($z3 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $r5 \u003d TypeVariable) r0\n  $r6 \u003d TypeUtils.typeVariableToString($r5)\n  return\n}",
      "B8 {\n  $z4 \u003d GenericArrayType\n  if ($z4 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r3 \u003d GenericArrayType) r0\n  $r4 \u003d TypeUtils.genericArrayTypeToString($r3)\n  return\n}",
      "B10 {\n  $r1 \u003d IllegalArgumentException\n  $r2 \u003d ObjectUtils.identityToString(r0)\n  new IllegalArgumentException($r2)\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeUtils#parameterizedTypeToString(...1)",
        "body": "{\r\n    final StringBuilder builder \u003d new StringBuilder();\r\n    final Type useOwner \u003d parameterizedType.getOwnerType();\r\n    final Class\u003c?\u003e raw \u003d (Class\u003c?\u003e) parameterizedType.getRawType();\r\n    if (useOwner \u003d\u003d null) {\r\n        builder.append(raw.getName());\r\n    } else {\r\n        if (useOwner instanceof Class\u003c?\u003e) {\r\n            builder.append(((Class\u003c?\u003e) useOwner).getName());\r\n        } else {\r\n            builder.append(useOwner);\r\n        }\r\n        builder.append(\u0027.\u0027).append(raw.getSimpleName());\r\n    }\r\n    final int[] recursiveTypeIndexes \u003d findRecursiveTypes(parameterizedType);\r\n    if (recursiveTypeIndexes.length \u003e 0) {\r\n        appendRecursiveTypes(builder, recursiveTypeIndexes, parameterizedType.getActualTypeArguments());\r\n    } else {\r\n        GT_JOINER.join(builder, parameterizedType.getActualTypeArguments());\r\n    }\r\n    return builder.toString();\r\n}"
      },
      {
        "name": "TypeUtils#classToString(...1)",
        "body": "{\r\n    if (cls.isArray()) {\r\n        return toString(cls.getComponentType()) + \"[]\";\r\n    }\r\n    if (isCyclical(cls)) {\r\n        return cls.getSimpleName() + \"(cycle)\";\r\n    }\r\n    final StringBuilder buf \u003d new StringBuilder();\r\n    if (cls.getEnclosingClass() !\u003d null) {\r\n        buf.append(classToString(cls.getEnclosingClass())).append(\u0027.\u0027).append(cls.getSimpleName());\r\n    } else {\r\n        buf.append(cls.getName());\r\n    }\r\n    if (cls.getTypeParameters().length \u003e 0) {\r\n        // AppendableJoiner.joinSB(buf, null, null, \", \", TypeUtils::anyToString, cls.getTypeParameters());\r\n        CTJ_JOINER.join(buf, (TypeVariable[]) cls.getTypeParameters());\r\n    }\r\n    return buf.toString();\r\n}"
      },
      {
        "name": "TypeUtils#genericArrayTypeToString(...1)",
        "body": "{\r\n    return String.format(\"%s[]\", toString(genericArrayType.getGenericComponentType()));\r\n}"
      },
      {
        "name": "TypeUtils#wildcardTypeToString(...1)",
        "body": "{\r\n    final StringBuilder builder \u003d new StringBuilder().append(\u0027?\u0027);\r\n    final Type[] lowerBounds \u003d wildcardType.getLowerBounds();\r\n    final Type[] upperBounds \u003d wildcardType.getUpperBounds();\r\n    if (lowerBounds.length \u003e 1 || lowerBounds.length \u003d\u003d 1 \u0026\u0026 lowerBounds[0] !\u003d null) {\r\n        AMP_JOINER.join(builder.append(\" super \"), lowerBounds);\r\n    } else if (upperBounds.length \u003e 1 || upperBounds.length \u003d\u003d 1 \u0026\u0026 !Object.class.equals(upperBounds[0])) {\r\n        AMP_JOINER.join(builder.append(\" extends \"), upperBounds);\r\n    }\r\n    return builder.toString();\r\n}"
      },
      {
        "name": "TypeUtils#typeVariableToString(...1)",
        "body": "{\r\n    final StringBuilder builder \u003d new StringBuilder(typeVariable.getName());\r\n    final Type[] bounds \u003d typeVariable.getBounds();\r\n    if (bounds.length \u003e 0 \u0026\u0026 !(bounds.length \u003d\u003d 1 \u0026\u0026 Object.class.equals(bounds[0]))) {\r\n        builder.append(\" extends \");\r\n        AMP_JOINER.join(builder, typeVariable.getBounds());\r\n    }\r\n    return builder.toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.TypeUtils",
    "methodName": "typesSatisfyVariables",
    "signature": "boolean typesSatisfyVariables(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(typeVariableMap, \"typeVariableMap\");\r\n    // all types must be assignable to all the bounds of their mapped\r\n    // type variable.\r\n    for (final Map.Entry\u003cTypeVariable\u003c?\u003e, Type\u003e entry : typeVariableMap.entrySet()) {\r\n        final TypeVariable\u003c?\u003e typeVar \u003d entry.getKey();\r\n        final Type type \u003d entry.getValue();\r\n        for (final Type bound : getImplicitBounds(typeVar)) {\r\n            if (!isAssignable(type, substituteTypeVariables(bound, typeVariableMap), typeVariableMap)) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B8",
      "B3 : If(i1 \u003e\u003d i0) → B4 | else → B7",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Map\n  Objects.requireNonNull(r0, \"typeVariableMap\")\n  $r1 \u003d r0.entrySet()\n  r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B8\n}",
      "B2 {\n  $r3 \u003d r2.next()\n  r4 \u003d Map$Entry) $r3\n  $r5 \u003d r4.getKey()\n  r6 \u003d TypeVariable) $r5\n  $r7 \u003d r4.getValue()\n  r8 \u003d Type) $r7\n  r9 \u003d TypeUtils.getImplicitBounds(r6)\n  i0 \u003d lengthof r9\n  i1 \u003d 0\n}",
      "B3 {\n  if (i1 \u003e\u003d i0) goto B4 else B7\n}",
      "B4 {\n  r10 \u003d r9[i1]\n  $r11 \u003d TypeUtils.substituteTypeVariables(r10, r0)\n  $z1 \u003d TypeUtils.isAssignable(r8, $r11, r0)\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i1 \u003d i1 + 1\n  goto B3\n}",
      "B7 {\n  goto B1\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e B1",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeUtils#substituteTypeVariables(...2)",
        "body": "{\r\n    if (type instanceof TypeVariable\u003c?\u003e \u0026\u0026 typeVarAssigns !\u003d null) {\r\n        final Type replacementType \u003d typeVarAssigns.get(type);\r\n        if (replacementType \u003d\u003d null) {\r\n            throw new IllegalArgumentException(\"missing assignment type for type variable \" + type);\r\n        }\r\n        return replacementType;\r\n    }\r\n    return type;\r\n}"
      },
      {
        "name": "TypeUtils#getImplicitBounds(...1)",
        "body": "{\r\n    Objects.requireNonNull(typeVariable, \"typeVariable\");\r\n    final Type[] bounds \u003d typeVariable.getBounds();\r\n    return bounds.length \u003d\u003d 0 ? new Type[] { Object.class } : normalizeUpperBounds(bounds);\r\n}"
      },
      {
        "name": "TypeUtils#isAssignable(...3)",
        "body": "{\r\n    if (type \u003d\u003d null) {\r\n        return true;\r\n    }\r\n    // only a null type can be assigned to null type which\r\n    // would have cause the previous to return true\r\n    if (toGenericArrayType \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    // all types are assignable to themselves\r\n    if (toGenericArrayType.equals(type)) {\r\n        return true;\r\n    }\r\n    final Type toComponentType \u003d toGenericArrayType.getGenericComponentType();\r\n    if (type instanceof Class\u003c?\u003e) {\r\n        final Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) type;\r\n        // compare the component types\r\n        return cls.isArray() \u0026\u0026 isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns);\r\n    }\r\n    if (type instanceof GenericArrayType) {\r\n        // compare the component types\r\n        return isAssignable(((GenericArrayType) type).getGenericComponentType(), toComponentType, typeVarAssigns);\r\n    }\r\n    if (type instanceof WildcardType) {\r\n        // so long as one of the upper bounds is assignable, it\u0027s good\r\n        for (final Type bound : getImplicitUpperBounds((WildcardType) type)) {\r\n            if (isAssignable(bound, toGenericArrayType)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    if (type instanceof TypeVariable\u003c?\u003e) {\r\n        // probably should remove the following logic and just return false.\r\n        // type variables cannot specify arrays as bounds.\r\n        for (final Type bound : getImplicitBounds((TypeVariable\u003c?\u003e) type)) {\r\n            if (isAssignable(bound, toGenericArrayType)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    if (type instanceof ParameterizedType) {\r\n        // the raw type of a parameterized type is never an array or\r\n        // generic array, otherwise the declaration would look like this:\r\n        // Collection[]\u003c ? extends String \u003e collection;\r\n        return false;\r\n    }\r\n    throw new IllegalStateException(\"found an unhandled type: \" + type);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.reflect.TypeUtils",
    "methodName": "unrollVariables",
    "signature": "java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)",
    "visibility": "public",
    "body": "{\r\n    if (typeArguments \u003d\u003d null) {\r\n        typeArguments \u003d Collections.emptyMap();\r\n    }\r\n    if (containsTypeVariables(type)) {\r\n        if (type instanceof TypeVariable\u003c?\u003e) {\r\n            return unrollVariables(typeArguments, typeArguments.get(type));\r\n        }\r\n        if (type instanceof ParameterizedType) {\r\n            final ParameterizedType p \u003d (ParameterizedType) type;\r\n            final Map\u003cTypeVariable\u003c?\u003e, Type\u003e parameterizedTypeArguments;\r\n            if (p.getOwnerType() \u003d\u003d null) {\r\n                parameterizedTypeArguments \u003d typeArguments;\r\n            } else {\r\n                parameterizedTypeArguments \u003d new HashMap\u003c\u003e(typeArguments);\r\n                parameterizedTypeArguments.putAll(getTypeArguments(p));\r\n            }\r\n            final Type[] args \u003d p.getActualTypeArguments();\r\n            for (int i \u003d 0; i \u003c args.length; i++) {\r\n                final Type unrolled \u003d unrollVariables(parameterizedTypeArguments, args[i]);\r\n                if (unrolled !\u003d null) {\r\n                    args[i] \u003d unrolled;\r\n                }\r\n            }\r\n            return parameterizeWithOwner(p.getOwnerType(), (Class\u003c?\u003e) p.getRawType(), args);\r\n        }\r\n        if (type instanceof WildcardType) {\r\n            final WildcardType wild \u003d (WildcardType) type;\r\n            return wildcardType().withUpperBounds(unrollBounds(typeArguments, wild.getUpperBounds())).withLowerBounds(unrollBounds(typeArguments, wild.getLowerBounds())).build();\r\n        }\r\n    }\r\n    return type;\r\n}",
    "nodes": 18,
    "edges": 22,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r22 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B17",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B5",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B15",
      "B6 : If($r9 !\u003d null) → B7 | else → B8",
      "B10 : If(i0 \u003e\u003d $i1) → B11 | else → B14",
      "B11 : If(r17 \u003d\u003d null) → B12 | else → B13",
      "B15 : If($z3 \u003d\u003d false) → B16 | else → B17"
    ],
    "blockList": [
      "B0 {\n  Map\n  Type\n  if (r22 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r22 \u003d Collections.emptyMap()\n}",
      "B2 {\n  $z0 \u003d TypeUtils.containsTypeVariables(r0)\n  if ($z0 \u003d\u003d false) goto B3 else B17\n}",
      "B3 {\n  $z1 \u003d TypeVariable\n  if ($z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r19 \u003d r22.get(r0)\n  $r20 \u003d Type) $r19\n  $r21 \u003d TypeUtils.unrollVariables(r22, $r20)\n  return\n}",
      "B5 {\n  $z2 \u003d ParameterizedType\n  if ($z2 \u003d\u003d false) goto B6 else B15\n}",
      "B6 {\n  r23 \u003d ParameterizedType) r0\n  $r9 \u003d r23.getOwnerType()\n  if ($r9 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  r24 \u003d r22\n  goto B9\n}",
      "B8 {\n  $r10 \u003d HashMap\n  new HashMap(r22)\n  r24 \u003d $r10\n  $r11 \u003d TypeUtils.getTypeArguments(r23)\n  $r10.putAll($r11)\n}",
      "B9 {\n  $r18 \u003d r23.getActualTypeArguments()\n  i0 \u003d 0\n}",
      "B10 {\n  $i1 \u003d lengthof $r18\n  if (i0 \u003e\u003d $i1) goto B11 else B14\n}",
      "B11 {\n  $r16 \u003d $r18[i0]\n  r17 \u003d TypeUtils.unrollVariables(r24, $r16)\n  if (r17 \u003d\u003d null) goto B12 else B13\n}",
      "B12 {\n  $r18[i0] \u003d r17\n}",
      "B13 {\n  i0 \u003d i0 + 1\n  goto B10\n}",
      "B14 {\n  $r14 \u003d r23.getOwnerType()\n  $r12 \u003d r23.getRawType()\n  $r13 \u003d Class) $r12\n  $r15 \u003d TypeUtils.parameterizeWithOwner($r14, $r13, $r18)\n  return\n}",
      "B15 {\n  $z3 \u003d WildcardType\n  if ($z3 \u003d\u003d false) goto B16 else B17\n}",
      "B16 {\n  r25 \u003d WildcardType) r0\n  $r3 \u003d TypeUtils.wildcardType()\n  $r1 \u003d r25.getUpperBounds()\n  $r2 \u003d TypeUtils.unrollBounds(r22, $r1)\n  $r6 \u003d $r3.withUpperBounds($r2)\n  $r4 \u003d r25.getLowerBounds()\n  $r5 \u003d TypeUtils.unrollBounds(r22, $r4)\n  $r7 \u003d $r6.withLowerBounds($r5)\n  $r8 \u003d $r7.build()\n  return\n}",
      "B17 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B17",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B15",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B10",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TypeUtils#getTypeArguments(...1)",
        "body": "{\r\n    return getTypeArguments(type, getRawType(type), null);\r\n}"
      },
      {
        "name": "TypeUtils#wildcardType(...0)",
        "body": "{\r\n    return new WildcardTypeBuilder();\r\n}"
      },
      {
        "name": "TypeUtils#unrollBounds(...2)",
        "body": "{\r\n    Type[] result \u003d bounds;\r\n    int i \u003d 0;\r\n    for (; i \u003c result.length; i++) {\r\n        final Type unrolled \u003d unrollVariables(typeArguments, result[i]);\r\n        if (unrolled \u003d\u003d null) {\r\n            result \u003d ArrayUtils.remove(result, i--);\r\n        } else {\r\n            result[i] \u003d unrolled;\r\n        }\r\n    }\r\n    return result;\r\n}"
      },
      {
        "name": "TypeUtils#containsTypeVariables(...1)",
        "body": "{\r\n    if (type instanceof TypeVariable\u003c?\u003e) {\r\n        return true;\r\n    }\r\n    if (type instanceof Class\u003c?\u003e) {\r\n        return ((Class\u003c?\u003e) type).getTypeParameters().length \u003e 0;\r\n    }\r\n    if (type instanceof ParameterizedType) {\r\n        for (final Type arg : ((ParameterizedType) type).getActualTypeArguments()) {\r\n            if (containsTypeVariables(arg)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    if (type instanceof WildcardType) {\r\n        final WildcardType wild \u003d (WildcardType) type;\r\n        return containsTypeVariables(getImplicitLowerBounds(wild)[0]) || containsTypeVariables(getImplicitUpperBounds(wild)[0]);\r\n    }\r\n    if (type instanceof GenericArrayType) {\r\n        return containsTypeVariables(((GenericArrayType) type).getGenericComponentType());\r\n    }\r\n    return false;\r\n}"
      },
      {
        "name": "TypeUtils#unrollVariables(...2)",
        "body": "{\r\n    if (typeArguments \u003d\u003d null) {\r\n        typeArguments \u003d Collections.emptyMap();\r\n    }\r\n    if (containsTypeVariables(type)) {\r\n        if (type instanceof TypeVariable\u003c?\u003e) {\r\n            return unrollVariables(typeArguments, typeArguments.get(type));\r\n        }\r\n        if (type instanceof ParameterizedType) {\r\n            final ParameterizedType p \u003d (ParameterizedType) type;\r\n            final Map\u003cTypeVariable\u003c?\u003e, Type\u003e parameterizedTypeArguments;\r\n            if (p.getOwnerType() \u003d\u003d null) {\r\n                parameterizedTypeArguments \u003d typeArguments;\r\n            } else {\r\n                parameterizedTypeArguments \u003d new HashMap\u003c\u003e(typeArguments);\r\n                parameterizedTypeArguments.putAll(getTypeArguments(p));\r\n            }\r\n            final Type[] args \u003d p.getActualTypeArguments();\r\n            for (int i \u003d 0; i \u003c args.length; i++) {\r\n                final Type unrolled \u003d unrollVariables(parameterizedTypeArguments, args[i]);\r\n                if (unrolled !\u003d null) {\r\n                    args[i] \u003d unrolled;\r\n                }\r\n            }\r\n            return parameterizeWithOwner(p.getOwnerType(), (Class\u003c?\u003e) p.getRawType(), args);\r\n        }\r\n        if (type instanceof WildcardType) {\r\n            final WildcardType wild \u003d (WildcardType) type;\r\n            return wildcardType().withUpperBounds(unrollBounds(typeArguments, wild.getUpperBounds())).withLowerBounds(unrollBounds(typeArguments, wild.getLowerBounds())).build();\r\n        }\r\n    }\r\n    return type;\r\n}"
      },
      {
        "name": "TypeUtils#parameterizeWithOwner(...3)",
        "body": "{\r\n    Objects.requireNonNull(rawClass, \"rawClass\");\r\n    Objects.requireNonNull(typeVariableMap, \"typeVariableMap\");\r\n    return parameterizeWithOwner(owner, rawClass, extractTypeArgumentsFrom(typeVariableMap, rawClass.getTypeParameters()));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.RegExUtils",
    "methodName": "replaceAll",
    "signature": "java.lang.String replaceAll(java.lang.String,java.util.regex.Pattern,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (ObjectUtils.anyNull(text, regex, replacement)) {\r\n        return text;\r\n    }\r\n    return regex.matcher(text).replaceAll(replacement);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  Pattern\n  String\n  $r0 \u003d Object)[3]\n  $r0[0] \u003d r1\n  $r0[1] \u003d r2\n  $r0[2] \u003d r3\n  $z0 \u003d ObjectUtils.anyNull($r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d r2.matcher(r1)\n  $r5 \u003d $r4.replaceAll(r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.RegExUtils",
    "methodName": "replaceAll",
    "signature": "java.lang.String replaceAll(java.lang.String,java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (ObjectUtils.anyNull(text, regex, replacement)) {\r\n        return text;\r\n    }\r\n    return text.replaceAll(regex, replacement);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  String\n  $r0 \u003d Object)[3]\n  $r0[0] \u003d r1\n  $r0[1] \u003d r2\n  $r0[2] \u003d r3\n  $z0 \u003d ObjectUtils.anyNull($r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d r1.replaceAll(r2, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.RegExUtils",
    "methodName": "replaceFirst",
    "signature": "java.lang.String replaceFirst(java.lang.String,java.util.regex.Pattern,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (text \u003d\u003d null || regex \u003d\u003d null || replacement \u003d\u003d null) {\r\n        return text;\r\n    }\r\n    return regex.matcher(text).replaceFirst(replacement);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r1 \u003d\u003d null) → B2 | else → B3",
      "B2 : If(r2 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  String\n  Pattern\n  String\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  if (r1 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  if (r2 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d r1.matcher(r0)\n  $r4 \u003d $r3.replaceFirst(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.RegExUtils",
    "methodName": "replaceFirst",
    "signature": "java.lang.String replaceFirst(java.lang.String,java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (text \u003d\u003d null || regex \u003d\u003d null || replacement \u003d\u003d null) {\r\n        return text;\r\n    }\r\n    return text.replaceFirst(regex, replacement);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r1 \u003d\u003d null) → B2 | else → B3",
      "B2 : If(r2 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  String\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  if (r1 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  if (r2 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d r0.replaceFirst(r1, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.RegExUtils",
    "methodName": "replacePattern",
    "signature": "java.lang.String replacePattern(java.lang.String,java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (ObjectUtils.anyNull(text, regex, replacement)) {\r\n        return text;\r\n    }\r\n    return dotAllMatcher(regex, text).replaceAll(replacement);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  String\n  $r0 \u003d Object)[3]\n  $r0[0] \u003d r1\n  $r0[1] \u003d r2\n  $r0[2] \u003d r3\n  $z0 \u003d ObjectUtils.anyNull($r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d RegExUtils.dotAllMatcher(r2, r1)\n  $r5 \u003d $r4.replaceAll(r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "RegExUtils#dotAllMatcher(...2)",
        "body": "{\r\n    return dotAll(regex).matcher(text);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.RuntimeEnvironment",
    "methodName": "inContainer",
    "signature": "java.lang.Boolean inContainer()",
    "visibility": "public",
    "body": "{\r\n    return inDocker() || inPodman();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  $r0 \u003d RuntimeEnvironment.inDocker()\n  $z0 \u003d $r0.booleanValue()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d RuntimeEnvironment.inPodman()\n  $z1 \u003d $r2.booleanValue()\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  $r1 \u003d Boolean.valueOf($z2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "RuntimeEnvironment#inPodman(...0)",
        "body": "{\r\n    return containsLine(\"/proc/1/environ\", \"container\u003dpodman\");\r\n}"
      },
      {
        "name": "RuntimeEnvironment#inDocker(...0)",
        "body": "{\r\n    return containsLine(\"/proc/1/cgroup\", \"/docker\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.stream.Streams",
    "methodName": "of",
    "signature": "java.util.stream.Stream of(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    return collection \u003d\u003d null ? Stream.empty() : collection.stream();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Collection\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d Stream.empty()\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0.stream()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.stream.Streams",
    "methodName": "of",
    "signature": "java.util.stream.Stream of(java.lang.Iterable)",
    "visibility": "public",
    "body": "{\r\n    return iterable \u003d\u003d null ? Stream.empty() : StreamSupport.stream(iterable.spliterator(), false);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Stream.empty()\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0.spliterator()\n  $r2 \u003d StreamSupport.stream($r1, 0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.stream.Streams",
    "methodName": "of",
    "signature": "java.util.stream.Stream of(java.util.Iterator)",
    "visibility": "public",
    "body": "{\r\n    return iterator \u003d\u003d null ? Stream.empty() : StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator, Spliterator.ORDERED), false);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Stream.empty()\n  goto B3\n}",
      "B2 {\n  $r1 \u003d Spliterators.spliteratorUnknownSize(r0, 16)\n  $r2 \u003d StreamSupport.stream($r1, 0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.stream.Streams",
    "methodName": "of",
    "signature": "java.util.stream.Stream of(java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d Stream.empty()\n  goto B3\n}",
      "B2 {\n  $r1 \u003d Stream.of(r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "abbreviate",
    "signature": "java.lang.String abbreviate(java.lang.String,java.lang.String,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (isNotEmpty(str) \u0026\u0026 EMPTY.equals(abbrevMarker) \u0026\u0026 maxWidth \u003e 0) {\r\n        return substring(str, 0, maxWidth);\r\n    }\r\n    if (isAnyEmpty(str, abbrevMarker)) {\r\n        return str;\r\n    }\r\n    final int abbrevMarkerLength \u003d abbrevMarker.length();\r\n    final int minAbbrevWidth \u003d abbrevMarkerLength + 1;\r\n    final int minAbbrevWidthOffset \u003d abbrevMarkerLength + abbrevMarkerLength + 1;\r\n    if (maxWidth \u003c minAbbrevWidth) {\r\n        throw new IllegalArgumentException(String.format(\"Minimum abbreviation width is %d\", minAbbrevWidth));\r\n    }\r\n    final int strLen \u003d str.length();\r\n    if (strLen \u003c\u003d maxWidth) {\r\n        return str;\r\n    }\r\n    if (offset \u003e strLen) {\r\n        offset \u003d strLen;\r\n    }\r\n    if (strLen - offset \u003c maxWidth - abbrevMarkerLength) {\r\n        offset \u003d strLen - (maxWidth - abbrevMarkerLength);\r\n    }\r\n    if (offset \u003c\u003d abbrevMarkerLength + 1) {\r\n        return str.substring(0, maxWidth - abbrevMarkerLength) + abbrevMarker;\r\n    }\r\n    if (maxWidth \u003c minAbbrevWidthOffset) {\r\n        throw new IllegalArgumentException(String.format(\"Minimum abbreviation width with offset is %d\", minAbbrevWidthOffset));\r\n    }\r\n    if (offset + maxWidth - abbrevMarkerLength \u003c strLen) {\r\n        return abbrevMarker + abbreviate(str.substring(offset), abbrevMarker, maxWidth - abbrevMarkerLength);\r\n    }\r\n    return abbrevMarker + str.substring(strLen - (maxWidth - abbrevMarkerLength));\r\n}",
    "nodes": 21,
    "edges": 24,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B4",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B4",
      "B2 : If(i4 \u003c\u003d 0) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B6",
      "B6 : If(i4 \u003e\u003d i1) → B7 | else → B8",
      "B8 : If(i5 \u003e i4) → B9 | else → B10",
      "B10 : If(i16 \u003c\u003d i5) → B11 | else → B12",
      "B12 : If($i7 \u003e\u003d $i6) → B13 | else → B14",
      "B14 : If(i16 \u003e $i8) → B15 | else → B16",
      "B16 : If(i4 \u003e\u003d i3) → B17 | else → B18",
      "B18 : If($i10 \u003e\u003d i5) → B19 | else → B20"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  i16 :\u003d @parameter2: int\n  i4 :\u003d @parameter3: int\n  $z0 \u003d StringUtils.isNotEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B4\n}",
      "B1 {\n  $r26 \u003d \"\"\n  $z1 \u003d $r26.equals(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B4\n}",
      "B2 {\n  if (i4 \u003c\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r27 \u003d StringUtils.substring(r0, 0, i4)\n  return\n}",
      "B4 {\n  $r28 \u003d CharSequence)[2]\n  $r28[0] \u003d r0\n  $r28[1] \u003d r1\n  $z2 \u003d StringUtils.isAnyEmpty($r28)\n  if ($z2 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i0 \u003d r1.length()\n  i1 \u003d i0 + 1\n  $i2 \u003d i0 + i0\n  i3 \u003d $i2 + 1\n  if (i4 \u003e\u003d i1) goto B7 else B8\n}",
      "B7 {\n  $r22 \u003d IllegalArgumentException\n  $r23 \u003d Object)[1]\n  $r24 \u003d Integer.valueOf(i1)\n  $r23[0] \u003d $r24\n  $r25 \u003d String.format(\"Minimum abbreviation width is %d\", $r23)\n  new IllegalArgumentException($r25)\n  throw $r22\n}",
      "B8 {\n  i5 \u003d r0.length()\n  if (i5 \u003e i4) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  if (i16 \u003c\u003d i5) goto B11 else B12\n}",
      "B11 {\n  i16 \u003d i5\n}",
      "B12 {\n  $i7 \u003d i5 - i16\n  $i6 \u003d i4 - i0\n  if ($i7 \u003e\u003d $i6) goto B13 else B14\n}",
      "B13 {\n  $i15 \u003d i4 - i0\n  i16 \u003d i5 - $i15\n}",
      "B14 {\n  $i8 \u003d i0 + 1\n  if (i16 \u003e $i8) goto B15 else B16\n}",
      "B15 {\n  $r17 \u003d StringBuilder\n  new StringBuilder()\n  $i14 \u003d i4 - i0\n  $r18 \u003d r0.substring(0, $i14)\n  $r19 \u003d $r17.append($r18)\n  $r20 \u003d $r19.append(r1)\n  $r21 \u003d $r20.toString()\n  return\n}",
      "B16 {\n  if (i4 \u003e\u003d i3) goto B17 else B18\n}",
      "B17 {\n  $r13 \u003d IllegalArgumentException\n  $r14 \u003d Object)[1]\n  $r15 \u003d Integer.valueOf(i3)\n  $r14[0] \u003d $r15\n  $r16 \u003d String.format(\"Minimum abbreviation width with offset is %d\", $r14)\n  new IllegalArgumentException($r16)\n  throw $r13\n}",
      "B18 {\n  $i9 \u003d i16 + i4\n  $i10 \u003d $i9 - i0\n  if ($i10 \u003e\u003d i5) goto B19 else B20\n}",
      "B19 {\n  $r7 \u003d StringBuilder\n  new StringBuilder()\n  $r10 \u003d $r7.append(r1)\n  $r8 \u003d r0.substring(i16)\n  $i13 \u003d i4 - i0\n  $r9 \u003d StringUtils.abbreviate($r8, r1, $i13)\n  $r11 \u003d $r10.append($r9)\n  $r12 \u003d $r11.toString()\n  return\n}",
      "B20 {\n  $r2 \u003d StringBuilder\n  new StringBuilder()\n  $r4 \u003d $r2.append(r1)\n  $i11 \u003d i4 - i0\n  $i12 \u003d i5 - $i11\n  $r3 \u003d r0.substring($i12)\n  $r5 \u003d $r4.append($r3)\n  $r6 \u003d $r5.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isNotEmpty(...1)",
        "body": "{\r\n    return !isEmpty(cs);\r\n}"
      },
      {
        "name": "StringUtils#isAnyEmpty(...2)",
        "body": "(source not found)"
      },
      {
        "name": "StringUtils#substring(...3)",
        "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // handle negatives\r\n    if (end \u003c 0) {\r\n        // remember end is negative\r\n        end \u003d str.length() + end;\r\n    }\r\n    if (start \u003c 0) {\r\n        // remember start is negative\r\n        start \u003d str.length() + start;\r\n    }\r\n    // check length next\r\n    if (end \u003e str.length()) {\r\n        end \u003d str.length();\r\n    }\r\n    // if start is greater than end, return \"\"\r\n    if (start \u003e end) {\r\n        return EMPTY;\r\n    }\r\n    if (start \u003c 0) {\r\n        start \u003d 0;\r\n    }\r\n    if (end \u003c 0) {\r\n        end \u003d 0;\r\n    }\r\n    return str.substring(start, end);\r\n}"
      },
      {
        "name": "StringUtils#abbreviate(...3)",
        "body": "{\r\n    return abbreviate(str, \"...\", offset, maxWidth);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "abbreviateMiddle",
    "signature": "java.lang.String abbreviateMiddle(java.lang.String,java.lang.String,int)",
    "visibility": "public",
    "body": "{\r\n    if (isAnyEmpty(str, middle) || length \u003e\u003d str.length() || length \u003c middle.length() + 2) {\r\n        return str;\r\n    }\r\n    final int targetSting \u003d length - middle.length();\r\n    final int startOffset \u003d targetSting / 2 + targetSting % 2;\r\n    final int endOffset \u003d str.length() - targetSting / 2;\r\n    return str.substring(0, startOffset) + middle + str.substring(endOffset);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If(i0 \u003e\u003d $i1) → B2 | else → B3",
      "B2 : If(i0 \u003e\u003d $i3) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  i0 :\u003d @parameter2: int\n  $r0 \u003d CharSequence)[2]\n  $r0[0] \u003d r1\n  $r0[1] \u003d r2\n  $z0 \u003d StringUtils.isAnyEmpty($r0)\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $i1 \u003d r1.length()\n  if (i0 \u003e\u003d $i1) goto B2 else B3\n}",
      "B2 {\n  $i2 \u003d r2.length()\n  $i3 \u003d $i2 + 2\n  if (i0 \u003e\u003d $i3) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i4 \u003d r2.length()\n  i5 \u003d i0 - $i4\n  $i7 \u003d i5 / 2\n  $i6 \u003d i5 % 2\n  i8 \u003d $i7 + $i6\n  $i10 \u003d r1.length()\n  $i9 \u003d i5 / 2\n  i11 \u003d $i10 - $i9\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  $r4 \u003d r1.substring(0, i8)\n  $r5 \u003d $r3.append($r4)\n  $r7 \u003d $r5.append(r2)\n  $r6 \u003d r1.substring(i11)\n  $r8 \u003d $r7.append($r6)\n  $r9 \u003d $r8.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isAnyEmpty(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "capitalize",
    "signature": "java.lang.String capitalize(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    final int strLen \u003d length(str);\r\n    if (strLen \u003d\u003d 0) {\r\n        return str;\r\n    }\r\n    final int firstCodepoint \u003d str.codePointAt(0);\r\n    final int newCodePoint \u003d Character.toTitleCase(firstCodepoint);\r\n    if (firstCodepoint \u003d\u003d newCodePoint) {\r\n        // already capitalized\r\n        return str;\r\n    }\r\n    // cannot be longer than the char array\r\n    final int[] newCodePoints \u003d new int[strLen];\r\n    int outOffset \u003d 0;\r\n    // copy the first code point\r\n    newCodePoints[outOffset++] \u003d newCodePoint;\r\n    for (int inOffset \u003d Character.charCount(firstCodepoint); inOffset \u003c strLen; ) {\r\n        final int codePoint \u003d str.codePointAt(inOffset);\r\n        // copy the remaining ones\r\n        newCodePoints[outOffset++] \u003d codePoint;\r\n        inOffset +\u003d Character.charCount(codePoint);\r\n    }\r\n    return new String(newCodePoints, 0, outOffset);\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 !\u003d 0) → B1 | else → B2",
      "B2 : If(i1 !\u003d i2) → B3 | else → B4",
      "B5 : If(i7 \u003e\u003d i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  String\n  i0 \u003d StringUtils.length(r0)\n  if (i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i1 \u003d r0.codePointAt(0)\n  i2 \u003d Character.toTitleCase(i1)\n  if (i1 !\u003d i2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r1 \u003d newarray (int)[i0]\n  i6 \u003d 1\n  r1[0] \u003d i2\n  i7 \u003d Character.charCount(i1)\n}",
      "B5 {\n  if (i7 \u003e\u003d i0) goto B6 else B7\n}",
      "B6 {\n  i3 \u003d r0.codePointAt(i7)\n  $i4 \u003d i6\n  i6 \u003d i6 + 1\n  r1[$i4] \u003d i3\n  $i5 \u003d Character.charCount(i3)\n  i7 \u003d i7 + $i5\n  goto B5\n}",
      "B7 {\n  $r2 \u003d String\n  new String(r1, 0, i6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#length(...1)",
        "body": "{\r\n    return cs \u003d\u003d null ? 0 : cs.length();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "center",
    "signature": "java.lang.String center(java.lang.String,int,char)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null || size \u003c\u003d 0) {\r\n        return str;\r\n    }\r\n    final int strLen \u003d str.length();\r\n    final int pads \u003d size - strLen;\r\n    if (pads \u003c\u003d 0) {\r\n        return str;\r\n    }\r\n    str \u003d leftPad(str, strLen + pads / 2, padChar);\r\n    return rightPad(str, size, padChar);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(i0 \u003e 0) → B2 | else → B3",
      "B3 : If(i2 \u003e 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  String\n  i0 :\u003d @parameter1: int\n  c4 :\u003d @parameter2: char\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (i0 \u003e 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  i1 \u003d r1.length()\n  i2 \u003d i0 - i1\n  if (i2 \u003e 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $i3 \u003d i2 / 2\n  $i5 \u003d i1 + $i3\n  r2 \u003d StringUtils.leftPad(r1, $i5, c4)\n  $r0 \u003d StringUtils.rightPad(r2, i0, c4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#leftPad(...3)",
        "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final int pads \u003d size - str.length();\r\n    if (pads \u003c\u003d 0) {\r\n        // returns original String when possible\r\n        return str;\r\n    }\r\n    if (pads \u003e PAD_LIMIT) {\r\n        return leftPad(str, size, String.valueOf(padChar));\r\n    }\r\n    return repeat(padChar, pads).concat(str);\r\n}"
      },
      {
        "name": "StringUtils#rightPad(...3)",
        "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final int pads \u003d size - str.length();\r\n    if (pads \u003c\u003d 0) {\r\n        // returns original String when possible\r\n        return str;\r\n    }\r\n    if (pads \u003e PAD_LIMIT) {\r\n        return rightPad(str, size, String.valueOf(padChar));\r\n    }\r\n    return str.concat(repeat(padChar, pads));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "center",
    "signature": "java.lang.String center(java.lang.String,int,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null || size \u003c\u003d 0) {\r\n        return str;\r\n    }\r\n    if (isEmpty(padStr)) {\r\n        padStr \u003d SPACE;\r\n    }\r\n    final int strLen \u003d str.length();\r\n    final int pads \u003d size - strLen;\r\n    if (pads \u003c\u003d 0) {\r\n        return str;\r\n    }\r\n    str \u003d leftPad(str, strLen + pads / 2, padStr);\r\n    return rightPad(str, size, padStr);\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(i0 \u003e 0) → B2 | else → B3",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5",
      "B5 : If($i4 \u003e 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  String\n  i0 :\u003d @parameter1: int\n  String\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (i0 \u003e 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $z0 \u003d StringUtils.isEmpty(r2)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  r2 \u003d \" \"\n}",
      "B5 {\n  $i3 \u003d r1.length()\n  $i4 \u003d i0 - $i3\n  if ($i4 \u003e 0) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $i1 \u003d $i4 / 2\n  $i2 \u003d $i3 + $i1\n  r3 \u003d StringUtils.leftPad(r1, $i2, r2)\n  $r0 \u003d StringUtils.rightPad(r3, i0, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#leftPad(...3)",
        "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final int pads \u003d size - str.length();\r\n    if (pads \u003c\u003d 0) {\r\n        // returns original String when possible\r\n        return str;\r\n    }\r\n    if (pads \u003e PAD_LIMIT) {\r\n        return leftPad(str, size, String.valueOf(padChar));\r\n    }\r\n    return repeat(padChar, pads).concat(str);\r\n}"
      },
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      },
      {
        "name": "StringUtils#rightPad(...3)",
        "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final int pads \u003d size - str.length();\r\n    if (pads \u003c\u003d 0) {\r\n        // returns original String when possible\r\n        return str;\r\n    }\r\n    if (pads \u003e PAD_LIMIT) {\r\n        return rightPad(str, size, String.valueOf(padChar));\r\n    }\r\n    return str.concat(repeat(padChar, pads));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "chomp",
    "signature": "java.lang.String chomp(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str)) {\r\n        return str;\r\n    }\r\n    if (str.length() \u003d\u003d 1) {\r\n        final char ch \u003d str.charAt(0);\r\n        if (ch \u003d\u003d CharUtils.CR || ch \u003d\u003d CharUtils.LF) {\r\n            return EMPTY;\r\n        }\r\n        return str;\r\n    }\r\n    int lastIdx \u003d str.length() - 1;\r\n    final char last \u003d str.charAt(lastIdx);\r\n    if (last \u003d\u003d CharUtils.LF) {\r\n        if (str.charAt(lastIdx - 1) \u003d\u003d CharUtils.CR) {\r\n            lastIdx--;\r\n        }\r\n    } else if (last !\u003d CharUtils.CR) {\r\n        lastIdx++;\r\n    }\r\n    return str.substring(0, lastIdx);\r\n}",
    "nodes": 13,
    "edges": 16,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($i0 !\u003d 1) → B3 | else → B7",
      "B3 : If($i7 \u003d\u003d 13) → B4 | else → B5",
      "B4 : If($i8 !\u003d 10) → B5 | else → B6",
      "B7 : If($i9 !\u003d 10) → B8 | else → B10",
      "B8 : If($i10 !\u003d 13) → B9 | else → B12",
      "B10 : If($i13 \u003d\u003d 13) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d r0.length()\n  if ($i0 !\u003d 1) goto B3 else B7\n}",
      "B3 {\n  c5 \u003d r0.charAt(0)\n  $i7 \u003d (int) c5\n  if ($i7 \u003d\u003d 13) goto B4 else B5\n}",
      "B4 {\n  $i8 \u003d (int) c5\n  if ($i8 !\u003d 10) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $i1 \u003d r0.length()\n  i6 \u003d $i1 - 1\n  c2 \u003d r0.charAt(i6)\n  $i9 \u003d (int) c2\n  if ($i9 !\u003d 10) goto B8 else B10\n}",
      "B8 {\n  $i3 \u003d i6 - 1\n  $c4 \u003d r0.charAt($i3)\n  $i10 \u003d (int) $c4\n  if ($i10 !\u003d 13) goto B9 else B12\n}",
      "B9 {\n  $i12 \u003d (int) -1\n  i6 \u003d i6 + $i12\n  goto B12\n}",
      "B10 {\n  $i13 \u003d (int) c2\n  if ($i13 \u003d\u003d 13) goto B11 else B12\n}",
      "B11 {\n  i6 \u003d i6 + 1\n}",
      "B12 {\n  $r1 \u003d r0.substring(0, i6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B12",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "chop",
    "signature": "java.lang.String chop(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final int strLen \u003d str.length();\r\n    if (strLen \u003c 2) {\r\n        return EMPTY;\r\n    }\r\n    final int lastIdx \u003d strLen - 1;\r\n    final String ret \u003d str.substring(0, lastIdx);\r\n    final char last \u003d str.charAt(lastIdx);\r\n    if (last \u003d\u003d CharUtils.LF \u0026\u0026 ret.charAt(lastIdx - 1) \u003d\u003d CharUtils.CR) {\r\n        return ret.substring(0, lastIdx - 1);\r\n    }\r\n    return ret;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003e\u003d 2) → B3 | else → B4",
      "B4 : If($i6 !\u003d 10) → B5 | else → B7",
      "B5 : If($i7 !\u003d 13) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d r0.length()\n  if (i0 \u003e\u003d 2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i1 \u003d i0 - 1\n  r1 \u003d r0.substring(0, i1)\n  c2 \u003d r0.charAt(i1)\n  $i6 \u003d (int) c2\n  if ($i6 !\u003d 10) goto B5 else B7\n}",
      "B5 {\n  $i3 \u003d i1 - 1\n  $c4 \u003d r1.charAt($i3)\n  $i7 \u003d (int) $c4\n  if ($i7 !\u003d 13) goto B6 else B7\n}",
      "B6 {\n  $i5 \u003d i1 - 1\n  $r2 \u003d r1.substring(0, $i5)\n  return\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "compare",
    "signature": "int compare(java.lang.String,java.lang.String,boolean)",
    "visibility": "public",
    "body": "{\r\n    if (str1 \u003d\u003d str2) {\r\n        // NOSONARLINT this intentionally uses \u003d\u003d to allow for both null\r\n        return 0;\r\n    }\r\n    if (str1 \u003d\u003d null) {\r\n        return nullIsLess ? -1 : 1;\r\n    }\r\n    if (str2 \u003d\u003d null) {\r\n        return nullIsLess ? 1 : -1;\r\n    }\r\n    return str1.compareTo(str2);\r\n}",
    "nodes": 13,
    "edges": 14,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B7",
      "B3 : If(z0 \u003d\u003d false) → B4 | else → B5",
      "B7 : If(r1 !\u003d null) → B8 | else → B12",
      "B8 : If(z0 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  z0 :\u003d @parameter2: boolean\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B7\n}",
      "B3 {\n  if (z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $b1 \u003d -1\n  goto B6\n}",
      "B5 {\n  $b1 \u003d 1\n}",
      "B6 {\n  return\n}",
      "B7 {\n  if (r1 !\u003d null) goto B8 else B12\n}",
      "B8 {\n  if (z0 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $b2 \u003d 1\n  goto B11\n}",
      "B10 {\n  $b2 \u003d -1\n}",
      "B11 {\n  return\n}",
      "B12 {\n  $i0 \u003d r0.compareTo(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "compareIgnoreCase",
    "signature": "int compareIgnoreCase(java.lang.String,java.lang.String,boolean)",
    "visibility": "public",
    "body": "{\r\n    if (str1 \u003d\u003d str2) {\r\n        // NOSONARLINT this intentionally uses \u003d\u003d to allow for both null\r\n        return 0;\r\n    }\r\n    if (str1 \u003d\u003d null) {\r\n        return nullIsLess ? -1 : 1;\r\n    }\r\n    if (str2 \u003d\u003d null) {\r\n        return nullIsLess ? 1 : -1;\r\n    }\r\n    return str1.compareToIgnoreCase(str2);\r\n}",
    "nodes": 13,
    "edges": 14,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B7",
      "B3 : If(z0 \u003d\u003d false) → B4 | else → B5",
      "B7 : If(r1 !\u003d null) → B8 | else → B12",
      "B8 : If(z0 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  z0 :\u003d @parameter2: boolean\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B7\n}",
      "B3 {\n  if (z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $b1 \u003d -1\n  goto B6\n}",
      "B5 {\n  $b1 \u003d 1\n}",
      "B6 {\n  return\n}",
      "B7 {\n  if (r1 !\u003d null) goto B8 else B12\n}",
      "B8 {\n  if (z0 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $b2 \u003d 1\n  goto B11\n}",
      "B10 {\n  $b2 \u003d -1\n}",
      "B11 {\n  return\n}",
      "B12 {\n  $i0 \u003d r0.compareToIgnoreCase(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "contains",
    "signature": "boolean contains(java.lang.CharSequence,java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (seq \u003d\u003d null || searchSeq \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return CharSequenceUtils.indexOf(seq, searchSeq, 0) \u003e\u003d 0;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r1 !\u003d null) → B2 | else → B3",
      "B3 : If($i0 \u003c 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $i0 \u003d CharSequenceUtils.indexOf(r0, r1, 0)\n  if ($i0 \u003c 0) goto B4 else B5\n}",
      "B4 {\n  $z0 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z0 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "contains",
    "signature": "boolean contains(java.lang.CharSequence,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(seq)) {\r\n        return false;\r\n    }\r\n    return CharSequenceUtils.indexOf(seq, searchChar, 0) \u003e\u003d 0;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($i1 \u003c 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  i0 :\u003d @parameter1: int\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d CharSequenceUtils.indexOf(r0, i0, 0)\n  if ($i1 \u003c 0) goto B3 else B4\n}",
      "B3 {\n  $z1 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z1 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "containsAny",
    "signature": "boolean containsAny(java.lang.CharSequence,char[])",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\r\n        return false;\r\n    }\r\n    final int csLength \u003d cs.length();\r\n    final int searchLength \u003d searchChars.length;\r\n    final int csLast \u003d csLength - 1;\r\n    final int searchLast \u003d searchLength - 1;\r\n    for (int i \u003d 0; i \u003c csLength; i++) {\r\n        final char ch \u003d cs.charAt(i);\r\n        for (int j \u003d 0; j \u003c searchLength; j++) {\r\n            if (searchChars[j] \u003d\u003d ch) {\r\n                if (!Character.isHighSurrogate(ch)) {\r\n                    // ch is in the Basic Multilingual Plane\r\n                    return true;\r\n                }\r\n                if (j \u003d\u003d searchLast) {\r\n                    // missing low surrogate, fine, like String.indexOf(String)\r\n                    return true;\r\n                }\r\n                if (i \u003c csLast \u0026\u0026 searchChars[j + 1] \u003d\u003d cs.charAt(i + 1)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 18,
    "edges": 22,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i10 \u003e\u003d i0) → B5 | else → B17",
      "B6 : If(i11 \u003e\u003d i1) → B7 | else → B16",
      "B7 : If($i12 !\u003d $i13) → B8 | else → B15",
      "B8 : If($z2 !\u003d 0) → B9 | else → B10",
      "B10 : If(i11 !\u003d i3) → B11 | else → B12",
      "B12 : If(i10 \u003e\u003d i2) → B13 | else → B15",
      "B13 : If($i14 !\u003d $i15) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  r1 :\u003d @parameter1: char[]\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d ArrayUtils.isEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  i0 \u003d r0.length()\n  i1 \u003d lengthof r1\n  i2 \u003d i0 - 1\n  i3 \u003d i1 - 1\n  i10 \u003d 0\n}",
      "B4 {\n  if (i10 \u003e\u003d i0) goto B5 else B17\n}",
      "B5 {\n  c4 \u003d r0.charAt(i10)\n  i11 \u003d 0\n}",
      "B6 {\n  if (i11 \u003e\u003d i1) goto B7 else B16\n}",
      "B7 {\n  $c5 \u003d r1[i11]\n  $i12 \u003d (int) $c5\n  $i13 \u003d (int) c4\n  if ($i12 !\u003d $i13) goto B8 else B15\n}",
      "B8 {\n  $z2 \u003d Character.isHighSurrogate(c4)\n  if ($z2 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  if (i11 !\u003d i3) goto B11 else B12\n}",
      "B11 {\n  return\n}",
      "B12 {\n  if (i10 \u003e\u003d i2) goto B13 else B15\n}",
      "B13 {\n  $i6 \u003d i11 + 1\n  $c8 \u003d r1[$i6]\n  $i7 \u003d i10 + 1\n  $c9 \u003d r0.charAt($i7)\n  $i14 \u003d (int) $c8\n  $i15 \u003d (int) $c9\n  if ($i14 !\u003d $i15) goto B14 else B15\n}",
      "B14 {\n  return\n}",
      "B15 {\n  i11 \u003d i11 + 1\n  goto B6\n}",
      "B16 {\n  i10 \u003d i10 + 1\n  goto B4\n}",
      "B17 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B17",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B16",
      "B7 --\u003e B8",
      "B7 --\u003e B15",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B15",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B6",
      "B16 --\u003e B4",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "containsAny",
    "signature": "boolean containsAny(java.lang.CharSequence,java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (searchChars \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return containsAny(cs, CharSequenceUtils.toCharArray(searchChars));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d CharSequenceUtils.toCharArray(r0)\n  $z0 \u003d StringUtils.containsAny(r1, $r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#containsAny(...2)",
        "body": "{\r\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\r\n        return false;\r\n    }\r\n    final int csLength \u003d cs.length();\r\n    final int searchLength \u003d searchChars.length;\r\n    final int csLast \u003d csLength - 1;\r\n    final int searchLast \u003d searchLength - 1;\r\n    for (int i \u003d 0; i \u003c csLength; i++) {\r\n        final char ch \u003d cs.charAt(i);\r\n        for (int j \u003d 0; j \u003c searchLength; j++) {\r\n            if (searchChars[j] \u003d\u003d ch) {\r\n                if (!Character.isHighSurrogate(ch)) {\r\n                    // ch is in the Basic Multilingual Plane\r\n                    return true;\r\n                }\r\n                if (j \u003d\u003d searchLast) {\r\n                    // missing low surrogate, fine, like String.indexOf(String)\r\n                    return true;\r\n                }\r\n                if (i \u003c csLast \u0026\u0026 searchChars[j + 1] \u003d\u003d cs.charAt(i + 1)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "containsIgnoreCase",
    "signature": "boolean containsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null || searchStr \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    final int len \u003d searchStr.length();\r\n    final int max \u003d str.length() - len;\r\n    for (int i \u003d 0; i \u003c\u003d max; i++) {\r\n        if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, len)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r1 !\u003d null) → B2 | else → B3",
      "B4 : If(i3 \u003e i2) → B5 | else → B8",
      "B5 : If($z0 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  i0 \u003d r1.length()\n  $i1 \u003d r0.length()\n  i2 \u003d $i1 - i0\n  i3 \u003d 0\n}",
      "B4 {\n  if (i3 \u003e i2) goto B5 else B8\n}",
      "B5 {\n  $z0 \u003d CharSequenceUtils.regionMatches(r0, 1, i3, r1, 0, i0)\n  if ($z0 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  i3 \u003d i3 + 1\n  goto B4\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B4",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "containsNone",
    "signature": "boolean containsNone(java.lang.CharSequence,char[])",
    "visibility": "public",
    "body": "{\r\n    if (cs \u003d\u003d null || searchChars \u003d\u003d null) {\r\n        return true;\r\n    }\r\n    final int csLen \u003d cs.length();\r\n    final int csLast \u003d csLen - 1;\r\n    final int searchLen \u003d searchChars.length;\r\n    final int searchLast \u003d searchLen - 1;\r\n    for (int i \u003d 0; i \u003c csLen; i++) {\r\n        final char ch \u003d cs.charAt(i);\r\n        for (int j \u003d 0; j \u003c searchLen; j++) {\r\n            if (searchChars[j] \u003d\u003d ch) {\r\n                if (!Character.isHighSurrogate(ch)) {\r\n                    // ch is in the Basic Multilingual Plane\r\n                    return false;\r\n                }\r\n                if (j \u003d\u003d searchLast) {\r\n                    // missing low surrogate, fine, like String.indexOf(String)\r\n                    return false;\r\n                }\r\n                if (i \u003c csLast \u0026\u0026 searchChars[j + 1] \u003d\u003d cs.charAt(i + 1)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 18,
    "edges": 22,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r1 !\u003d null) → B2 | else → B3",
      "B4 : If(i10 \u003e\u003d i0) → B5 | else → B17",
      "B6 : If(i11 \u003e\u003d i2) → B7 | else → B16",
      "B7 : If($i12 !\u003d $i13) → B8 | else → B15",
      "B8 : If($z0 !\u003d 0) → B9 | else → B10",
      "B10 : If(i11 !\u003d i3) → B11 | else → B12",
      "B12 : If(i10 \u003e\u003d i1) → B13 | else → B15",
      "B13 : If($i14 !\u003d $i15) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  r1 :\u003d @parameter1: char[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  i0 \u003d r0.length()\n  i1 \u003d i0 - 1\n  i2 \u003d lengthof r1\n  i3 \u003d i2 - 1\n  i10 \u003d 0\n}",
      "B4 {\n  if (i10 \u003e\u003d i0) goto B5 else B17\n}",
      "B5 {\n  c4 \u003d r0.charAt(i10)\n  i11 \u003d 0\n}",
      "B6 {\n  if (i11 \u003e\u003d i2) goto B7 else B16\n}",
      "B7 {\n  $c5 \u003d r1[i11]\n  $i12 \u003d (int) $c5\n  $i13 \u003d (int) c4\n  if ($i12 !\u003d $i13) goto B8 else B15\n}",
      "B8 {\n  $z0 \u003d Character.isHighSurrogate(c4)\n  if ($z0 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  if (i11 !\u003d i3) goto B11 else B12\n}",
      "B11 {\n  return\n}",
      "B12 {\n  if (i10 \u003e\u003d i1) goto B13 else B15\n}",
      "B13 {\n  $i6 \u003d i11 + 1\n  $c8 \u003d r1[$i6]\n  $i7 \u003d i10 + 1\n  $c9 \u003d r0.charAt($i7)\n  $i14 \u003d (int) $c8\n  $i15 \u003d (int) $c9\n  if ($i14 !\u003d $i15) goto B14 else B15\n}",
      "B14 {\n  return\n}",
      "B15 {\n  i11 \u003d i11 + 1\n  goto B6\n}",
      "B16 {\n  i10 \u003d i10 + 1\n  goto B4\n}",
      "B17 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B17",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B16",
      "B7 --\u003e B8",
      "B7 --\u003e B15",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B15",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B6",
      "B16 --\u003e B4",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "containsNone",
    "signature": "boolean containsNone(java.lang.CharSequence,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (invalidChars \u003d\u003d null) {\r\n        return true;\r\n    }\r\n    return containsNone(cs, invalidChars.toCharArray());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d r0.toCharArray()\n  $z0 \u003d StringUtils.containsNone(r1, $r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#containsNone(...2)",
        "body": "{\r\n    if (cs \u003d\u003d null || searchChars \u003d\u003d null) {\r\n        return true;\r\n    }\r\n    final int csLen \u003d cs.length();\r\n    final int csLast \u003d csLen - 1;\r\n    final int searchLen \u003d searchChars.length;\r\n    final int searchLast \u003d searchLen - 1;\r\n    for (int i \u003d 0; i \u003c csLen; i++) {\r\n        final char ch \u003d cs.charAt(i);\r\n        for (int j \u003d 0; j \u003c searchLen; j++) {\r\n            if (searchChars[j] \u003d\u003d ch) {\r\n                if (!Character.isHighSurrogate(ch)) {\r\n                    // ch is in the Basic Multilingual Plane\r\n                    return false;\r\n                }\r\n                if (j \u003d\u003d searchLast) {\r\n                    // missing low surrogate, fine, like String.indexOf(String)\r\n                    return false;\r\n                }\r\n                if (i \u003c csLast \u0026\u0026 searchChars[j + 1] \u003d\u003d cs.charAt(i + 1)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "containsOnly",
    "signature": "boolean containsOnly(java.lang.CharSequence,char[])",
    "visibility": "public",
    "body": "{\r\n    // All these pre-checks are to maintain API with an older version\r\n    if (valid \u003d\u003d null || cs \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (cs.length() \u003d\u003d 0) {\r\n        return true;\r\n    }\r\n    if (valid.length \u003d\u003d 0) {\r\n        return false;\r\n    }\r\n    return indexOfAnyBut(cs, valid) \u003d\u003d INDEX_NOT_FOUND;\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r1 !\u003d null) → B2 | else → B3",
      "B3 : If($i0 !\u003d 0) → B4 | else → B5",
      "B5 : If($i1 !\u003d 0) → B6 | else → B7",
      "B7 : If($i2 !\u003d $i4) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  r0 :\u003d @parameter1: char[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $i0 \u003d r1.length()\n  if ($i0 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $i1 \u003d lengthof r0\n  if ($i1 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $i2 \u003d StringUtils.indexOfAnyBut(r1, r0)\n  $i4 \u003d (int) -1\n  if ($i2 !\u003d $i4) goto B8 else B9\n}",
      "B8 {\n  $z0 \u003d 1\n  goto B10\n}",
      "B9 {\n  $z0 \u003d 0\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#indexOfAnyBut(...2)",
        "body": "{\r\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    final int csLen \u003d cs.length();\r\n    final int csLast \u003d csLen - 1;\r\n    final int searchLen \u003d searchChars.length;\r\n    final int searchLast \u003d searchLen - 1;\r\n    outer: for (int i \u003d 0; i \u003c csLen; i++) {\r\n        final char ch \u003d cs.charAt(i);\r\n        for (int j \u003d 0; j \u003c searchLen; j++) {\r\n            if (searchChars[j] \u003d\u003d ch) {\r\n                if (i \u003e\u003d csLast || j \u003e\u003d searchLast || !Character.isHighSurrogate(ch)) {\r\n                    continue outer;\r\n                }\r\n                if (searchChars[j + 1] \u003d\u003d cs.charAt(i + 1)) {\r\n                    continue outer;\r\n                }\r\n            }\r\n        }\r\n        return i;\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "containsOnly",
    "signature": "boolean containsOnly(java.lang.CharSequence,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (cs \u003d\u003d null || validChars \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return containsOnly(cs, validChars.toCharArray());\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r1 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  String\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r2 \u003d r1.toCharArray()\n  $z0 \u003d StringUtils.containsOnly(r0, $r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#containsOnly(...2)",
        "body": "{\r\n    // All these pre-checks are to maintain API with an older version\r\n    if (valid \u003d\u003d null || cs \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (cs.length() \u003d\u003d 0) {\r\n        return true;\r\n    }\r\n    if (valid.length \u003d\u003d 0) {\r\n        return false;\r\n    }\r\n    return indexOfAnyBut(cs, valid) \u003d\u003d INDEX_NOT_FOUND;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "containsWhitespace",
    "signature": "boolean containsWhitespace(java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(seq)) {\r\n        return false;\r\n    }\r\n    final int strLen \u003d seq.length();\r\n    for (int i \u003d 0; i \u003c strLen; i++) {\r\n        if (Character.isWhitespace(seq.charAt(i))) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If(i2 \u003e\u003d i0) → B4 | else → B7",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d r0.length()\n  i2 \u003d 0\n}",
      "B3 {\n  if (i2 \u003e\u003d i0) goto B4 else B7\n}",
      "B4 {\n  $c1 \u003d r0.charAt(i2)\n  $z1 \u003d Character.isWhitespace($c1)\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "countMatches",
    "signature": "int countMatches(java.lang.CharSequence,char)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str)) {\r\n        return 0;\r\n    }\r\n    int count \u003d 0;\r\n    // We could also call str.toCharArray() for faster lookups but that would generate more garbage.\r\n    for (int i \u003d 0; i \u003c str.length(); i++) {\r\n        if (ch \u003d\u003d str.charAt(i)) {\r\n            count++;\r\n        }\r\n    }\r\n    return count;\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If(i4 \u003e\u003d $i0) → B4 | else → B7",
      "B4 : If($i5 !\u003d $i6) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  c1 :\u003d @parameter1: char\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i3 \u003d 0\n  i4 \u003d 0\n}",
      "B3 {\n  $i0 \u003d r0.length()\n  if (i4 \u003e\u003d $i0) goto B4 else B7\n}",
      "B4 {\n  $c2 \u003d r0.charAt(i4)\n  $i5 \u003d (int) c1\n  $i6 \u003d (int) $c2\n  if ($i5 !\u003d $i6) goto B5 else B6\n}",
      "B5 {\n  i3 \u003d i3 + 1\n}",
      "B6 {\n  i4 \u003d i4 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "countMatches",
    "signature": "int countMatches(java.lang.CharSequence,java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str) || isEmpty(sub)) {\r\n        return 0;\r\n    }\r\n    int count \u003d 0;\r\n    int idx \u003d 0;\r\n    while ((idx \u003d CharSequenceUtils.indexOf(str, sub, idx)) !\u003d INDEX_NOT_FOUND) {\r\n        count++;\r\n        idx +\u003d sub.length();\r\n    }\r\n    return count;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B4 : If($i0 \u003d\u003d $i5) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d StringUtils.isEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  i2 \u003d 0\n  i3 \u003d 0\n}",
      "B4 {\n  $i0 \u003d CharSequenceUtils.indexOf(r0, r1, i3)\n  $i5 \u003d (int) -1\n  if ($i0 \u003d\u003d $i5) goto B5 else B6\n}",
      "B5 {\n  i2 \u003d i2 + 1\n  $i1 \u003d r1.length()\n  i3 \u003d $i0 + $i1\n  goto B4\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "defaultIfBlank",
    "signature": "java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence\n  $z0 \u003d StringUtils.isBlank(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "defaultIfEmpty",
    "signature": "java.lang.CharSequence defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "deleteWhitespace",
    "signature": "java.lang.String deleteWhitespace(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str)) {\r\n        return str;\r\n    }\r\n    final int sz \u003d str.length();\r\n    final char[] chs \u003d new char[sz];\r\n    int count \u003d 0;\r\n    for (int i \u003d 0; i \u003c sz; i++) {\r\n        if (!Character.isWhitespace(str.charAt(i))) {\r\n            chs[count++] \u003d str.charAt(i);\r\n        }\r\n    }\r\n    if (count \u003d\u003d sz) {\r\n        return str;\r\n    }\r\n    if (count \u003d\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    return new String(chs, 0, count);\r\n}",
    "nodes": 12,
    "edges": 13,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If(i5 \u003e\u003d i0) → B4 | else → B7",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6",
      "B7 : If(i4 !\u003d i0) → B8 | else → B9",
      "B9 : If(i4 !\u003d 0) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d r0.length()\n  r1 \u003d newarray (char)[i0]\n  i4 \u003d 0\n  i5 \u003d 0\n}",
      "B3 {\n  if (i5 \u003e\u003d i0) goto B4 else B7\n}",
      "B4 {\n  $c1 \u003d r0.charAt(i5)\n  $z1 \u003d Character.isWhitespace($c1)\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $i2 \u003d i4\n  i4 \u003d i4 + 1\n  $c3 \u003d r0.charAt(i5)\n  r1[$i2] \u003d $c3\n}",
      "B6 {\n  i5 \u003d i5 + 1\n  goto B3\n}",
      "B7 {\n  if (i4 !\u003d i0) goto B8 else B9\n}",
      "B8 {\n  return\n}",
      "B9 {\n  if (i4 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  return\n}",
      "B11 {\n  $r2 \u003d String\n  new String(r1, 0, i4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B3",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "difference",
    "signature": "java.lang.String difference(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str1 \u003d\u003d null) {\r\n        return str2;\r\n    }\r\n    if (str2 \u003d\u003d null) {\r\n        return str1;\r\n    }\r\n    final int at \u003d indexOfDifference(str1, str2);\r\n    if (at \u003d\u003d INDEX_NOT_FOUND) {\r\n        return EMPTY;\r\n    }\r\n    return str2.substring(at);\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r1 !\u003d null) → B3 | else → B4",
      "B4 : If(i0 !\u003d $i2) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i0 \u003d StringUtils.indexOfDifference(r0, r1)\n  $i2 \u003d (int) -1\n  if (i0 !\u003d $i2) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r2 \u003d r1.substring(i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#indexOfDifference(...2)",
        "body": "{\r\n    if (cs1 \u003d\u003d cs2) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    if (cs1 \u003d\u003d null || cs2 \u003d\u003d null) {\r\n        return 0;\r\n    }\r\n    int i;\r\n    for (i \u003d 0; i \u003c cs1.length() \u0026\u0026 i \u003c cs2.length(); ++i) {\r\n        if (cs1.charAt(i) !\u003d cs2.charAt(i)) {\r\n            break;\r\n        }\r\n    }\r\n    if (i \u003c cs2.length() || i \u003c cs1.length()) {\r\n        return i;\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "endsWithAny",
    "signature": "boolean endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchStrings)) {\r\n        return false;\r\n    }\r\n    for (final CharSequence searchString : searchStrings) {\r\n        if (endsWith(sequence, searchString)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i1 \u003e\u003d i0) → B5 | else → B8",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence[]\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d ArrayUtils.isEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  i0 \u003d lengthof r1\n  i1 \u003d 0\n}",
      "B4 {\n  if (i1 \u003e\u003d i0) goto B5 else B8\n}",
      "B5 {\n  r2 \u003d r1[i1]\n  $z2 \u003d StringUtils.endsWith(r0, r2)\n  if ($z2 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  i1 \u003d i1 + 1\n  goto B4\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B4",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      },
      {
        "name": "StringUtils#endsWith(...2)",
        "body": "{\r\n    return endsWith(str, suffix, false);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.CharSequence,java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (cs1 \u003d\u003d cs2) {\r\n        return true;\r\n    }\r\n    if (cs1 \u003d\u003d null || cs2 \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (cs1.length() !\u003d cs2.length()) {\r\n        return false;\r\n    }\r\n    if (cs1 instanceof String \u0026\u0026 cs2 instanceof String) {\r\n        return cs1.equals(cs2);\r\n    }\r\n    // Step-wise comparison\r\n    final int length \u003d cs1.length();\r\n    for (int i \u003d 0; i \u003c length; i++) {\r\n        if (cs1.charAt(i) !\u003d cs2.charAt(i)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 16,
    "edges": 18,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 \u003d\u003d null) → B3 | else → B4",
      "B3 : If(r1 !\u003d null) → B4 | else → B5",
      "B5 : If($i1 \u003d\u003d $i0) → B6 | else → B7",
      "B7 : If($z0 \u003d\u003d false) → B8 | else → B10",
      "B8 : If($z1 \u003d\u003d false) → B9 | else → B10",
      "B11 : If(i5 \u003e\u003d $i4) → B12 | else → B15",
      "B12 : If($i6 \u003d\u003d $i7) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  if (r1 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $i1 \u003d r0.length()\n  $i0 \u003d r1.length()\n  if ($i1 \u003d\u003d $i0) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $z0 \u003d String\n  if ($z0 \u003d\u003d false) goto B8 else B10\n}",
      "B8 {\n  $z1 \u003d String\n  if ($z1 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $z2 \u003d r0.equals(r1)\n  return\n}",
      "B10 {\n  $i4 \u003d r0.length()\n  i5 \u003d 0\n}",
      "B11 {\n  if (i5 \u003e\u003d $i4) goto B12 else B15\n}",
      "B12 {\n  $c3 \u003d r0.charAt(i5)\n  $c2 \u003d r1.charAt(i5)\n  $i6 \u003d (int) $c3\n  $i7 \u003d (int) $c2\n  if ($i6 \u003d\u003d $i7) goto B13 else B14\n}",
      "B13 {\n  return\n}",
      "B14 {\n  i5 \u003d i5 + 1\n  goto B11\n}",
      "B15 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B11",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "equalsAny",
    "signature": "boolean equalsAny(java.lang.CharSequence,java.lang.CharSequence[])",
    "visibility": "public",
    "body": "{\r\n    if (ArrayUtils.isNotEmpty(searchStrings)) {\r\n        for (final CharSequence next : searchStrings) {\r\n            if (equals(string, next)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B6",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B6",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence[]\n  $z0 \u003d ArrayUtils.isNotEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B6\n}",
      "B1 {\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B6\n}",
      "B3 {\n  r1 \u003d r0[i1]\n  $z1 \u003d StringUtils.equals(r2, r1)\n  if ($z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#equals(...2)",
        "body": "{\r\n    if (cs1 \u003d\u003d cs2) {\r\n        return true;\r\n    }\r\n    if (cs1 \u003d\u003d null || cs2 \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (cs1.length() !\u003d cs2.length()) {\r\n        return false;\r\n    }\r\n    if (cs1 instanceof String \u0026\u0026 cs2 instanceof String) {\r\n        return cs1.equals(cs2);\r\n    }\r\n    // Step-wise comparison\r\n    final int length \u003d cs1.length();\r\n    for (int i \u003d 0; i \u003c length; i++) {\r\n        if (cs1.charAt(i) !\u003d cs2.charAt(i)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "equalsAnyIgnoreCase",
    "signature": "boolean equalsAnyIgnoreCase(java.lang.CharSequence,java.lang.CharSequence[])",
    "visibility": "public",
    "body": "{\r\n    if (ArrayUtils.isNotEmpty(searchStrings)) {\r\n        for (final CharSequence next : searchStrings) {\r\n            if (equalsIgnoreCase(string, next)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B6",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B6",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence[]\n  $z0 \u003d ArrayUtils.isNotEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B6\n}",
      "B1 {\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B6\n}",
      "B3 {\n  r1 \u003d r0[i1]\n  $z1 \u003d StringUtils.equalsIgnoreCase(r2, r1)\n  if ($z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#equalsIgnoreCase(...2)",
        "body": "{\r\n    if (cs1 \u003d\u003d cs2) {\r\n        return true;\r\n    }\r\n    if (cs1 \u003d\u003d null || cs2 \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (cs1.length() !\u003d cs2.length()) {\r\n        return false;\r\n    }\r\n    return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, cs1.length());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "equalsIgnoreCase",
    "signature": "boolean equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (cs1 \u003d\u003d cs2) {\r\n        return true;\r\n    }\r\n    if (cs1 \u003d\u003d null || cs2 \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (cs1.length() !\u003d cs2.length()) {\r\n        return false;\r\n    }\r\n    return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, cs1.length());\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 \u003d\u003d null) → B3 | else → B4",
      "B3 : If(r1 !\u003d null) → B4 | else → B5",
      "B5 : If($i1 \u003d\u003d $i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  if (r1 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $i1 \u003d r0.length()\n  $i0 \u003d r1.length()\n  if ($i1 \u003d\u003d $i0) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $i2 \u003d r0.length()\n  $z0 \u003d CharSequenceUtils.regionMatches(r0, 1, 0, r1, 0, $i2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "firstNonBlank",
    "signature": "java.lang.CharSequence firstNonBlank(java.lang.CharSequence[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B6",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B6",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  CharSequence[]\n  if (r0 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B6\n}",
      "B3 {\n  r1 \u003d r0[i1]\n  $z0 \u003d StringUtils.isNotBlank(r1)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "firstNonEmpty",
    "signature": "java.lang.CharSequence firstNonEmpty(java.lang.CharSequence[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B6",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B6",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  CharSequence[]\n  if (r0 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B6\n}",
      "B3 {\n  r1 \u003d r0[i1]\n  $z0 \u003d StringUtils.isNotEmpty(r1)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "getBytes",
    "signature": "byte[] getBytes(java.lang.String,java.nio.charset.Charset)",
    "visibility": "public",
    "body": "{\r\n    return string \u003d\u003d null ? ArrayUtils.EMPTY_BYTE_ARRAY : string.getBytes(Charsets.toCharset(charset));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  Charset\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d ArrayUtils: byte[] EMPTY_BYTE_ARRAY\u003e\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Charsets.toCharset(r1)\n  $r3 \u003d r0.getBytes($r2)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "getBytes",
    "signature": "byte[] getBytes(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return string \u003d\u003d null ? ArrayUtils.EMPTY_BYTE_ARRAY : string.getBytes(Charsets.toCharsetName(charset));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d ArrayUtils: byte[] EMPTY_BYTE_ARRAY\u003e\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Charsets.toCharsetName(r1)\n  $r3 \u003d r0.getBytes($r2)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "getCommonPrefix",
    "signature": "java.lang.String getCommonPrefix(java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    if (ArrayUtils.isEmpty(strs)) {\r\n        return EMPTY;\r\n    }\r\n    final int smallestIndexOfDiff \u003d indexOfDifference(strs);\r\n    if (smallestIndexOfDiff \u003d\u003d INDEX_NOT_FOUND) {\r\n        // all strings were identical\r\n        if (strs[0] \u003d\u003d null) {\r\n            return EMPTY;\r\n        }\r\n        return strs[0];\r\n    }\r\n    if (smallestIndexOfDiff \u003d\u003d 0) {\r\n        // there were no common initial characters\r\n        return EMPTY;\r\n    }\r\n    // we found a common initial character sequence\r\n    return strs[0].substring(0, smallestIndexOfDiff);\r\n}",
    "nodes": 9,
    "edges": 8,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(i0 !\u003d $i2) → B3 | else → B6",
      "B3 : If($r3 !\u003d null) → B4 | else → B5",
      "B6 : If(i0 !\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  String[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d StringUtils.indexOfDifference(r0)\n  $i2 \u003d (int) -1\n  if (i0 !\u003d $i2) goto B3 else B6\n}",
      "B3 {\n  $r3 \u003d r0[0]\n  if ($r3 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r4 \u003d r0[0]\n  return\n}",
      "B6 {\n  if (i0 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $r1 \u003d r0[0]\n  $r2 \u003d $r1.substring(0, i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#indexOfDifference(...1)",
        "body": "{\r\n    if (ArrayUtils.getLength(css) \u003c\u003d 1) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    boolean anyStringNull \u003d false;\r\n    boolean allStringsNull \u003d true;\r\n    final int arrayLen \u003d css.length;\r\n    int shortestStrLen \u003d Integer.MAX_VALUE;\r\n    int longestStrLen \u003d 0;\r\n    // find the min and max string lengths; this avoids checking to make\r\n    // sure we are not exceeding the length of the string each time through\r\n    // the bottom loop.\r\n    for (final CharSequence cs : css) {\r\n        if (cs \u003d\u003d null) {\r\n            anyStringNull \u003d true;\r\n            shortestStrLen \u003d 0;\r\n        } else {\r\n            allStringsNull \u003d false;\r\n            shortestStrLen \u003d Math.min(cs.length(), shortestStrLen);\r\n            longestStrLen \u003d Math.max(cs.length(), longestStrLen);\r\n        }\r\n    }\r\n    // handle lists containing all nulls or all empty strings\r\n    if (allStringsNull || longestStrLen \u003d\u003d 0 \u0026\u0026 !anyStringNull) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    // handle lists containing some nulls or some empty strings\r\n    if (shortestStrLen \u003d\u003d 0) {\r\n        return 0;\r\n    }\r\n    // find the position with the first difference across all strings\r\n    int firstDiff \u003d -1;\r\n    for (int stringPos \u003d 0; stringPos \u003c shortestStrLen; stringPos++) {\r\n        final char comparisonChar \u003d css[0].charAt(stringPos);\r\n        for (int arrayPos \u003d 1; arrayPos \u003c arrayLen; arrayPos++) {\r\n            if (css[arrayPos].charAt(stringPos) !\u003d comparisonChar) {\r\n                firstDiff \u003d stringPos;\r\n                break;\r\n            }\r\n        }\r\n        if (firstDiff !\u003d -1) {\r\n            break;\r\n        }\r\n    }\r\n    if (firstDiff \u003d\u003d -1 \u0026\u0026 shortestStrLen !\u003d longestStrLen) {\r\n        // we compared all of the characters up to the length of the\r\n        // shortest string and didn\u0027t find a match, but the string lengths\r\n        // vary, so return the length of the shortest string.\r\n        return shortestStrLen;\r\n    }\r\n    return firstDiff;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "getDigits",
    "signature": "java.lang.String getDigits(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str)) {\r\n        return str;\r\n    }\r\n    final int sz \u003d str.length();\r\n    final StringBuilder strDigits \u003d new StringBuilder(sz);\r\n    for (int i \u003d 0; i \u003c sz; i++) {\r\n        final char tempChar \u003d str.charAt(i);\r\n        if (Character.isDigit(tempChar)) {\r\n            strDigits.append(tempChar);\r\n        }\r\n    }\r\n    return strDigits.toString();\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If(i2 \u003e\u003d i0) → B4 | else → B7",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d r0.length()\n  $r1 \u003d StringBuilder\n  new StringBuilder(i0)\n  i2 \u003d 0\n}",
      "B3 {\n  if (i2 \u003e\u003d i0) goto B4 else B7\n}",
      "B4 {\n  c1 \u003d r0.charAt(i2)\n  $z1 \u003d Character.isDigit(c1)\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r1.append(c1)\n}",
      "B6 {\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B7 {\n  $r2 \u003d $r1.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "getFuzzyDistance",
    "signature": "int getFuzzyDistance(java.lang.CharSequence,java.lang.CharSequence,java.util.Locale)",
    "visibility": "public",
    "body": "{\r\n    if (term \u003d\u003d null || query \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Strings must not be null\");\r\n    }\r\n    if (locale \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Locale must not be null\");\r\n    }\r\n    // fuzzy logic is case-insensitive. We normalize the Strings to lower\r\n    // case right from the start. Turning characters to lower case\r\n    // via Character.toLowerCase(char) is unfortunately insufficient\r\n    // as it does not accept a locale.\r\n    final String termLowerCase \u003d term.toString().toLowerCase(locale);\r\n    final String queryLowerCase \u003d query.toString().toLowerCase(locale);\r\n    // the resulting score\r\n    int score \u003d 0;\r\n    // the position in the term which will be scanned next for potential\r\n    // query character matches\r\n    int termIndex \u003d 0;\r\n    // index of the previously matched character in the term\r\n    int previousMatchingCharacterIndex \u003d Integer.MIN_VALUE;\r\n    for (int queryIndex \u003d 0; queryIndex \u003c queryLowerCase.length(); queryIndex++) {\r\n        final char queryChar \u003d queryLowerCase.charAt(queryIndex);\r\n        boolean termCharacterMatchFound \u003d false;\r\n        for (; termIndex \u003c termLowerCase.length() \u0026\u0026 !termCharacterMatchFound; termIndex++) {\r\n            final char termChar \u003d termLowerCase.charAt(termIndex);\r\n            if (queryChar \u003d\u003d termChar) {\r\n                // simple character matches result in one point\r\n                score++;\r\n                // subsequent character matches further improve\r\n                // the score.\r\n                if (previousMatchingCharacterIndex + 1 \u003d\u003d termIndex) {\r\n                    score +\u003d 2;\r\n                }\r\n                previousMatchingCharacterIndex \u003d termIndex;\r\n                // we can leave the nested loop. Every character in the\r\n                // query can match at most one character in the term.\r\n                termCharacterMatchFound \u003d true;\r\n            }\r\n        }\r\n    }\r\n    return score;\r\n}",
    "nodes": 17,
    "edges": 22,
    "cc": 7,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r2 !\u003d null) → B2 | else → B3",
      "B3 : If(r3 !\u003d null) → B4 | else → B5",
      "B6 : If(i8 \u003e\u003d $i0) → B7 | else → B16",
      "B8 : If(i6 \u003e\u003d $i2) → B9 | else → B15",
      "B9 : If(z0 !\u003d 0) → B10 | else → B15",
      "B10 : If($i9 !\u003d $i10) → B11 | else → B14",
      "B11 : If($i4 !\u003d i6) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence\n  Locale\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r2 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r9 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Strings must not be null\")\n  throw $r9\n}",
      "B3 {\n  if (r3 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r10 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Locale must not be null\")\n  throw $r10\n}",
      "B5 {\n  $r4 \u003d r0.toString()\n  r5 \u003d $r4.toLowerCase(r3)\n  $r6 \u003d r2.toString()\n  r7 \u003d $r6.toLowerCase(r3)\n  i5 \u003d 0\n  i6 \u003d 0\n  i7 \u003d -2147483648\n  i8 \u003d 0\n}",
      "B6 {\n  $i0 \u003d r7.length()\n  if (i8 \u003e\u003d $i0) goto B7 else B16\n}",
      "B7 {\n  c1 \u003d r7.charAt(i8)\n  z0 \u003d 0\n}",
      "B8 {\n  $i2 \u003d r5.length()\n  if (i6 \u003e\u003d $i2) goto B9 else B15\n}",
      "B9 {\n  if (z0 !\u003d 0) goto B10 else B15\n}",
      "B10 {\n  c3 \u003d r5.charAt(i6)\n  $i9 \u003d (int) c1\n  $i10 \u003d (int) c3\n  if ($i9 !\u003d $i10) goto B11 else B14\n}",
      "B11 {\n  i5 \u003d i5 + 1\n  $i4 \u003d i7 + 1\n  if ($i4 !\u003d i6) goto B12 else B13\n}",
      "B12 {\n  i5 \u003d i5 + 2\n}",
      "B13 {\n  i7 \u003d i6\n  z0 \u003d 1\n}",
      "B14 {\n  i6 \u003d i6 + 1\n  goto B8\n}",
      "B15 {\n  i8 \u003d i8 + 1\n  goto B6\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B16",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B15",
      "B9 --\u003e B10",
      "B9 --\u003e B15",
      "B10 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B14 --\u003e B8",
      "B15 --\u003e B6",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "getIfBlank",
    "signature": "java.lang.CharSequence getIfBlank(java.lang.CharSequence,java.util.function.Supplier)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  Supplier\n  $z0 \u003d StringUtils.isBlank(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Suppliers.get(r1)\n  $r3 \u003d CharSequence) $r2\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "getIfEmpty",
    "signature": "java.lang.CharSequence getIfEmpty(java.lang.CharSequence,java.util.function.Supplier)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  Supplier\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Suppliers.get(r1)\n  $r3 \u003d CharSequence) $r2\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "getJaroWinklerDistance",
    "signature": "double getJaroWinklerDistance(java.lang.CharSequence,java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    final double DEFAULT_SCALING_FACTOR \u003d 0.1;\r\n    if (first \u003d\u003d null || second \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Strings must not be null\");\r\n    }\r\n    final int[] mtp \u003d matches(first, second);\r\n    final double m \u003d mtp[0];\r\n    if (m \u003d\u003d 0) {\r\n        return 0D;\r\n    }\r\n    final double j \u003d (m / first.length() + m / second.length() + (m - mtp[1]) / m) / 3;\r\n    final double jw \u003d j \u003c 0.7D ? j : j + Math.min(DEFAULT_SCALING_FACTOR, 1D / mtp[3]) * mtp[2] * (1D - j);\r\n    return Math.round(jw * 100.0D) / 100.0D;\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r2 !\u003d null) → B2 | else → B3",
      "B3 : If($b1 !\u003d 0) → B4 | else → B5",
      "B5 : If($i9 \u003e\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r2 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Strings must not be null\")\n  throw $r4\n}",
      "B3 {\n  r3 \u003d StringUtils.matches(r0, r2)\n  $i0 \u003d r3[0]\n  d0 \u003d (double) $i0\n  $b1 \u003d 0\n  if ($b1 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $i2 \u003d r0.length()\n  $d1 \u003d (double) $i2\n  $d4 \u003d d0 / $d1\n  $i3 \u003d r2.length()\n  $d2 \u003d (double) $i3\n  $d3 \u003d d0 / $d2\n  $d8 \u003d $d4 + $d3\n  $i4 \u003d r3[1]\n  $d5 \u003d (double) $i4\n  $d6 \u003d d0 - $d5\n  $d7 \u003d $d6 / d0\n  $d9 \u003d $d8 + $d7\n  d10 \u003d 0\n  $b5 \u003d 7\n  $i9 \u003d (int) $b5\n  if ($i9 \u003e\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $d21 \u003d d10\n  goto B8\n}",
      "B7 {\n  $i6 \u003d r3[3]\n  $d11 \u003d (double) $i6\n  $d12 \u003d 0 / $d11\n  $d14 \u003d Math.min(0.1, $d12)\n  $i7 \u003d r3[2]\n  $d13 \u003d (double) $i7\n  $d16 \u003d $d14 * $d13\n  $d15 \u003d 0 - d10\n  $d17 \u003d $d16 * $d15\n  $d21 \u003d d10 + $d17\n}",
      "B8 {\n  $d18 \u003d 0\n  $l8 \u003d Math.round($d18)\n  $d19 \u003d (double) $l8\n  $d20 \u003d 0\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#matches(...2)",
        "body": "{\r\n    final CharSequence max;\r\n    final CharSequence min;\r\n    if (first.length() \u003e second.length()) {\r\n        max \u003d first;\r\n        min \u003d second;\r\n    } else {\r\n        max \u003d second;\r\n        min \u003d first;\r\n    }\r\n    final int range \u003d Math.max(max.length() / 2 - 1, 0);\r\n    final int[] matchIndexes \u003d ArrayFill.fill(new int[min.length()], -1);\r\n    final boolean[] matchFlags \u003d new boolean[max.length()];\r\n    int matches \u003d 0;\r\n    for (int mi \u003d 0; mi \u003c min.length(); mi++) {\r\n        final char c1 \u003d min.charAt(mi);\r\n        for (int xi \u003d Math.max(mi - range, 0), xn \u003d Math.min(mi + range + 1, max.length()); xi \u003c xn; xi++) {\r\n            if (!matchFlags[xi] \u0026\u0026 c1 \u003d\u003d max.charAt(xi)) {\r\n                matchIndexes[mi] \u003d xi;\r\n                matchFlags[xi] \u003d true;\r\n                matches++;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    final char[] ms1 \u003d new char[matches];\r\n    final char[] ms2 \u003d new char[matches];\r\n    for (int i \u003d 0, si \u003d 0; i \u003c min.length(); i++) {\r\n        if (matchIndexes[i] !\u003d -1) {\r\n            ms1[si] \u003d min.charAt(i);\r\n            si++;\r\n        }\r\n    }\r\n    for (int i \u003d 0, si \u003d 0; i \u003c max.length(); i++) {\r\n        if (matchFlags[i]) {\r\n            ms2[si] \u003d max.charAt(i);\r\n            si++;\r\n        }\r\n    }\r\n    int transpositions \u003d 0;\r\n    for (int mi \u003d 0; mi \u003c ms1.length; mi++) {\r\n        if (ms1[mi] !\u003d ms2[mi]) {\r\n            transpositions++;\r\n        }\r\n    }\r\n    int prefix \u003d 0;\r\n    for (int mi \u003d 0; mi \u003c min.length(); mi++) {\r\n        if (first.charAt(mi) !\u003d second.charAt(mi)) {\r\n            break;\r\n        }\r\n        prefix++;\r\n    }\r\n    return new int[] { matches, transpositions / 2, prefix, max.length() };\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "getLevenshteinDistance",
    "signature": "int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (s \u003d\u003d null || t \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Strings must not be null\");\r\n    }\r\n    int n \u003d s.length();\r\n    int m \u003d t.length();\r\n    if (n \u003d\u003d 0) {\r\n        return m;\r\n    }\r\n    if (m \u003d\u003d 0) {\r\n        return n;\r\n    }\r\n    if (n \u003e m) {\r\n        // swap the input strings to consume less memory\r\n        final CharSequence tmp \u003d s;\r\n        s \u003d t;\r\n        t \u003d tmp;\r\n        n \u003d m;\r\n        m \u003d t.length();\r\n    }\r\n    final int[] p \u003d new int[n + 1];\r\n    // indexes into strings s and t\r\n    // iterates through s\r\n    int i;\r\n    // iterates through t\r\n    int j;\r\n    int upperleft;\r\n    int upper;\r\n    // jth character of t\r\n    char jOfT;\r\n    int cost;\r\n    for (i \u003d 0; i \u003c\u003d n; i++) {\r\n        p[i] \u003d i;\r\n    }\r\n    for (j \u003d 1; j \u003c\u003d m; j++) {\r\n        upperleft \u003d p[0];\r\n        jOfT \u003d t.charAt(j - 1);\r\n        p[0] \u003d j;\r\n        for (i \u003d 1; i \u003c\u003d n; i++) {\r\n            upper \u003d p[i];\r\n            cost \u003d s.charAt(i - 1) \u003d\u003d jOfT ? 0 : 1;\r\n            // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\r\n            p[i] \u003d Math.min(Math.min(p[i - 1] + 1, p[i] + 1), upperleft + cost);\r\n            upperleft \u003d upper;\r\n        }\r\n    }\r\n    return p[n];\r\n}",
    "nodes": 22,
    "edges": 27,
    "cc": 7,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r3 !\u003d null) → B2 | else → B3",
      "B3 : If(i15 !\u003d 0) → B4 | else → B5",
      "B5 : If(i16 !\u003d 0) → B6 | else → B7",
      "B7 : If(i15 \u003c\u003d i16) → B8 | else → B9",
      "B10 : If(i17 \u003e i15) → B11 | else → B12",
      "B13 : If(i18 \u003e i16) → B14 | else → B21",
      "B15 : If(i20 \u003e i15) → B16 | else → B20",
      "B16 : If($i21 !\u003d $i22) → B17 | else → B18"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence\n  if (r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r3 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Strings must not be null\")\n  throw $r5\n}",
      "B3 {\n  i15 \u003d r2.length()\n  i16 \u003d r3.length()\n  if (i15 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  if (i16 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  if (i15 \u003c\u003d i16) goto B8 else B9\n}",
      "B8 {\n  r4 \u003d r2\n  r2 \u003d r3\n  r3 \u003d r4\n  i15 \u003d i16\n  i16 \u003d r4.length()\n}",
      "B9 {\n  $i0 \u003d i15 + 1\n  $r1 \u003d newarray (int)[$i0]\n  i17 \u003d 0\n}",
      "B10 {\n  if (i17 \u003e i15) goto B11 else B12\n}",
      "B11 {\n  $r1[i17] \u003d i17\n  i17 \u003d i17 + 1\n  goto B10\n}",
      "B12 {\n  i18 \u003d 1\n}",
      "B13 {\n  if (i18 \u003e i16) goto B14 else B21\n}",
      "B14 {\n  i19 \u003d $r1[0]\n  $i2 \u003d i18 - 1\n  c3 \u003d r3.charAt($i2)\n  $r1[0] \u003d i18\n  i20 \u003d 1\n}",
      "B15 {\n  if (i20 \u003e i15) goto B16 else B20\n}",
      "B16 {\n  i4 \u003d $r1[i20]\n  $i5 \u003d i20 - 1\n  $c6 \u003d r2.charAt($i5)\n  $i21 \u003d (int) $c6\n  $i22 \u003d (int) c3\n  if ($i21 !\u003d $i22) goto B17 else B18\n}",
      "B17 {\n  $z0 \u003d 0\n  goto B19\n}",
      "B18 {\n  $z0 \u003d 1\n}",
      "B19 {\n  $i7 \u003d i20 - 1\n  $i8 \u003d $r1[$i7]\n  $i11 \u003d $i8 + 1\n  $i9 \u003d $r1[i20]\n  $i10 \u003d $i9 + 1\n  $i13 \u003d Math.min($i11, $i10)\n  $i12 \u003d i19 + $z0\n  $i14 \u003d Math.min($i13, $i12)\n  $r1[i20] \u003d $i14\n  i19 \u003d i4\n  i20 \u003d i20 + 1\n  goto B15\n}",
      "B20 {\n  i18 \u003d i18 + 1\n  goto B13\n}",
      "B21 {\n  $i1 \u003d $r1[i15]\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B10",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B21",
      "B14 --\u003e B15",
      "B15 --\u003e B16",
      "B15 --\u003e B20",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e B15",
      "B20 --\u003e B13",
      "B21 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "getLevenshteinDistance",
    "signature": "int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)",
    "visibility": "public",
    "body": "{\r\n    if (s \u003d\u003d null || t \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Strings must not be null\");\r\n    }\r\n    if (threshold \u003c 0) {\r\n        throw new IllegalArgumentException(\"Threshold must not be negative\");\r\n    }\r\n    /*\r\n        This implementation only computes the distance if it\u0027s less than or equal to the\r\n        threshold value, returning -1 if it\u0027s greater.  The advantage is performance: unbounded\r\n        distance is O(nm), but a bound of k allows us to reduce it to O(km) time by only\r\n        computing a diagonal stripe of width 2k + 1 of the cost table.\r\n        It is also possible to use this to compute the unbounded Levenshtein distance by starting\r\n        the threshold at 1 and doubling each time until the distance is found; this is O(dm), where\r\n        d is the distance.\r\n\r\n        One subtlety comes from needing to ignore entries on the border of our stripe\r\n        eg.\r\n        p[] \u003d |#|#|#|*\r\n        d[] \u003d  *|#|#|#|\r\n        We must ignore the entry to the left of the leftmost member\r\n        We must ignore the entry above the rightmost member\r\n\r\n        Another subtlety comes from our stripe running off the matrix if the strings aren\u0027t\r\n        of the same size.  Since string s is always swapped to be the shorter of the two,\r\n        the stripe will always run off to the upper right instead of the lower left of the matrix.\r\n\r\n        As a concrete example, suppose s is of length 5, t is of length 7, and our threshold is 1.\r\n        In this case we\u0027re going to walk a stripe of length 3.  The matrix would look like so:\r\n\r\n           1 2 3 4 5\r\n        1 |#|#| | | |\r\n        2 |#|#|#| | |\r\n        3 | |#|#|#| |\r\n        4 | | |#|#|#|\r\n        5 | | | |#|#|\r\n        6 | | | | |#|\r\n        7 | | | | | |\r\n\r\n        Note how the stripe leads off the table as there is no possible way to turn a string of length 5\r\n        into one of length 7 in edit distance of 1.\r\n\r\n        Additionally, this implementation decreases memory usage by using two\r\n        single-dimensional arrays and swapping them back and forth instead of allocating\r\n        an entire n by m matrix.  This requires a few minor changes, such as immediately returning\r\n        when it\u0027s detected that the stripe has run off the matrix and initially filling the arrays with\r\n        large values so that entries we don\u0027t compute are ignored.\r\n\r\n        See Algorithms on Strings, Trees and Sequences by Dan Gusfield for some discussion.\r\n         */\r\n    // length of s\r\n    int n \u003d s.length();\r\n    // length of t\r\n    int m \u003d t.length();\r\n    // if one string is empty, the edit distance is necessarily the length of the other\r\n    if (n \u003d\u003d 0) {\r\n        return m \u003c\u003d threshold ? m : -1;\r\n    }\r\n    if (m \u003d\u003d 0) {\r\n        return n \u003c\u003d threshold ? n : -1;\r\n    }\r\n    if (Math.abs(n - m) \u003e threshold) {\r\n        // no need to calculate the distance if the length difference is greater than the threshold\r\n        return -1;\r\n    }\r\n    if (n \u003e m) {\r\n        // swap the two strings to consume less memory\r\n        final CharSequence tmp \u003d s;\r\n        s \u003d t;\r\n        t \u003d tmp;\r\n        n \u003d m;\r\n        m \u003d t.length();\r\n    }\r\n    // \u0027previous\u0027 cost array, horizontally\r\n    int[] p \u003d new int[n + 1];\r\n    // cost array, horizontally\r\n    int[] d \u003d new int[n + 1];\r\n    // placeholder to assist in swapping p and d\r\n    int[] tmp;\r\n    // fill in starting table values\r\n    final int boundary \u003d Math.min(n, threshold) + 1;\r\n    for (int i \u003d 0; i \u003c boundary; i++) {\r\n        p[i] \u003d i;\r\n    }\r\n    // these fills ensure that the value above the rightmost entry of our\r\n    // stripe will be ignored in following loop iterations\r\n    Arrays.fill(p, boundary, p.length, Integer.MAX_VALUE);\r\n    Arrays.fill(d, Integer.MAX_VALUE);\r\n    // iterates through t\r\n    for (int j \u003d 1; j \u003c\u003d m; j++) {\r\n        // jth character of t\r\n        final char jOfT \u003d t.charAt(j - 1);\r\n        d[0] \u003d j;\r\n        // compute stripe indices, constrain to array size\r\n        final int min \u003d Math.max(1, j - threshold);\r\n        final int max \u003d j \u003e Integer.MAX_VALUE - threshold ? n : Math.min(n, j + threshold);\r\n        // the stripe may lead off of the table if s and t are of different sizes\r\n        if (min \u003e max) {\r\n            return -1;\r\n        }\r\n        // ignore entry left of leftmost\r\n        if (min \u003e 1) {\r\n            d[min - 1] \u003d Integer.MAX_VALUE;\r\n        }\r\n        // iterates through [min, max] in s\r\n        for (int i \u003d min; i \u003c\u003d max; i++) {\r\n            if (s.charAt(i - 1) \u003d\u003d jOfT) {\r\n                // diagonally left and up\r\n                d[i] \u003d p[i - 1];\r\n            } else {\r\n                // 1 + minimum of cell to the left, to the top, diagonally left and up\r\n                d[i] \u003d 1 + Math.min(Math.min(d[i - 1], p[i]), p[i - 1]);\r\n            }\r\n        }\r\n        // copy current distance counts to \u0027previous row\u0027 distance counts\r\n        tmp \u003d p;\r\n        p \u003d d;\r\n        d \u003d tmp;\r\n    }\r\n    // if p[n] is greater than the threshold, there\u0027s no guarantee on it being the correct\r\n    // distance\r\n    if (p[n] \u003c\u003d threshold) {\r\n        return p[n];\r\n    }\r\n    return -1;\r\n}",
    "nodes": 41,
    "edges": 50,
    "cc": 11,
    "flowSummary": [
      "B0 : If(r5 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r6 !\u003d null) → B2 | else → B3",
      "B3 : If(i0 \u003e\u003d 0) → B4 | else → B5",
      "B5 : If(i30 !\u003d 0) → B6 | else → B10",
      "B6 : If(i31 \u003e i0) → B7 | else → B8",
      "B10 : If(i31 !\u003d 0) → B11 | else → B15",
      "B11 : If(i30 \u003e i0) → B12 | else → B13",
      "B15 : If($i2 \u003c\u003d i0) → B16 | else → B17",
      "B17 : If(i30 \u003c\u003d i31) → B18 | else → B19",
      "B20 : If(i34 \u003e\u003d $i29) → B21 | else → B22",
      "B23 : If(i35 \u003e i31) → B24 | else → B38",
      "B24 : If(i35 \u003c\u003d $i13) → B25 | else → B26",
      "B27 : If(i12 \u003c\u003d $i36) → B28 | else → B29",
      "B29 : If(i12 \u003c\u003d 1) → B30 | else → B31",
      "B32 : If(i37 \u003e i15) → B33 | else → B37",
      "B33 : If($i46 !\u003d $i47) → B34 | else → B35",
      "B38 : If($i7 \u003e i0) → B39 | else → B40"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence\n  i0 :\u003d @parameter2: int\n  if (r5 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r6 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r10 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Strings must not be null\")\n  throw $r10\n}",
      "B3 {\n  if (i0 \u003e\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r11 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Threshold must not be negative\")\n  throw $r11\n}",
      "B5 {\n  i30 \u003d r5.length()\n  i31 \u003d r6.length()\n  if (i30 !\u003d 0) goto B6 else B10\n}",
      "B6 {\n  if (i31 \u003e i0) goto B7 else B8\n}",
      "B7 {\n  $i32 \u003d i31\n  goto B9\n}",
      "B8 {\n  $i39 \u003d (int) -1\n  $i32 \u003d $i39\n}",
      "B9 {\n  return\n}",
      "B10 {\n  if (i31 !\u003d 0) goto B11 else B15\n}",
      "B11 {\n  if (i30 \u003e i0) goto B12 else B13\n}",
      "B12 {\n  $i33 \u003d i30\n  goto B14\n}",
      "B13 {\n  $i41 \u003d (int) -1\n  $i33 \u003d $i41\n}",
      "B14 {\n  return\n}",
      "B15 {\n  $i1 \u003d i30 - i31\n  $i2 \u003d Math.abs($i1)\n  if ($i2 \u003c\u003d i0) goto B16 else B17\n}",
      "B16 {\n  $i43 \u003d (int) -1\n  return\n}",
      "B17 {\n  if (i30 \u003c\u003d i31) goto B18 else B19\n}",
      "B18 {\n  r7 \u003d r5\n  r5 \u003d r6\n  r6 \u003d r7\n  i30 \u003d i31\n  i31 \u003d r7.length()\n}",
      "B19 {\n  $i3 \u003d i30 + 1\n  $r2 \u003d newarray (int)[$i3]\n  r8 \u003d $r2\n  $i4 \u003d i30 + 1\n  $r3 \u003d newarray (int)[$i4]\n  r9 \u003d $r3\n  $i5 \u003d Math.min(i30, i0)\n  $i29 \u003d $i5 + 1\n  i34 \u003d 0\n}",
      "B20 {\n  if (i34 \u003e\u003d $i29) goto B21 else B22\n}",
      "B21 {\n  $r2[i34] \u003d i34\n  i34 \u003d i34 + 1\n  goto B20\n}",
      "B22 {\n  $i6 \u003d lengthof $r2\n  Arrays.fill($r2, $i29, $i6, 2147483647)\n  Arrays.fill($r3, 2147483647)\n  i35 \u003d 1\n}",
      "B23 {\n  if (i35 \u003e i31) goto B24 else B38\n}",
      "B24 {\n  $i9 \u003d i35 - 1\n  c10 \u003d r6.charAt($i9)\n  r9[0] \u003d i35\n  $i11 \u003d i35 - i0\n  i12 \u003d Math.max(1, $i11)\n  $i13 \u003d 2147483647 - i0\n  if (i35 \u003c\u003d $i13) goto B25 else B26\n}",
      "B25 {\n  $i36 \u003d i30\n  goto B27\n}",
      "B26 {\n  $i14 \u003d i35 + i0\n  $i36 \u003d Math.min(i30, $i14)\n}",
      "B27 {\n  i15 \u003d $i36\n  if (i12 \u003c\u003d $i36) goto B28 else B29\n}",
      "B28 {\n  $i45 \u003d (int) -1\n  return\n}",
      "B29 {\n  if (i12 \u003c\u003d 1) goto B30 else B31\n}",
      "B30 {\n  $i28 \u003d i12 - 1\n  r9[$i28] \u003d 2147483647\n}",
      "B31 {\n  i37 \u003d i12\n}",
      "B32 {\n  if (i37 \u003e i15) goto B33 else B37\n}",
      "B33 {\n  $i16 \u003d i37 - 1\n  $c17 \u003d r5.charAt($i16)\n  $i46 \u003d (int) $c17\n  $i47 \u003d (int) c10\n  if ($i46 !\u003d $i47) goto B34 else B35\n}",
      "B34 {\n  $i26 \u003d i37 - 1\n  $i27 \u003d r8[$i26]\n  r9[i37] \u003d $i27\n  goto B36\n}",
      "B35 {\n  $i18 \u003d i37 - 1\n  $i20 \u003d r9[$i18]\n  $i19 \u003d r8[i37]\n  $i23 \u003d Math.min($i20, $i19)\n  $i21 \u003d i37 - 1\n  $i22 \u003d r8[$i21]\n  $i24 \u003d Math.min($i23, $i22)\n  $i25 \u003d 1 + $i24\n  r9[i37] \u003d $i25\n}",
      "B36 {\n  i37 \u003d i37 + 1\n  goto B32\n}",
      "B37 {\n  r1 \u003d r8\n  r8 \u003d r9\n  r9 \u003d r1\n  i35 \u003d i35 + 1\n  goto B23\n}",
      "B38 {\n  $i7 \u003d r8[i30]\n  if ($i7 \u003e i0) goto B39 else B40\n}",
      "B39 {\n  $i8 \u003d r8[i30]\n  return\n}",
      "B40 {\n  $i49 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B15",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B20",
      "B22 --\u003e B23",
      "B23 --\u003e B24",
      "B23 --\u003e B38",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B27",
      "B27 --\u003e B28",
      "B27 --\u003e B29",
      "B28 --\u003e [EXIT]",
      "B29 --\u003e B30",
      "B29 --\u003e B31",
      "B30 --\u003e B31",
      "B31 --\u003e B32",
      "B32 --\u003e B33",
      "B32 --\u003e B37",
      "B33 --\u003e B34",
      "B33 --\u003e B35",
      "B34 --\u003e B36",
      "B35 --\u003e B36",
      "B36 --\u003e B32",
      "B37 --\u003e B23",
      "B38 --\u003e B39",
      "B38 --\u003e B40",
      "B39 --\u003e [EXIT]",
      "B40 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "indexOf",
    "signature": "int indexOf(java.lang.CharSequence,java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (seq \u003d\u003d null || searchSeq \u003d\u003d null) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    return CharSequenceUtils.indexOf(seq, searchSeq, 0);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r1 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $i2 \u003d (int) -1\n  return\n}",
      "B3 {\n  $i0 \u003d CharSequenceUtils.indexOf(r0, r1, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "indexOf",
    "signature": "int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)",
    "visibility": "public",
    "body": "{\r\n    if (seq \u003d\u003d null || searchSeq \u003d\u003d null) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    return CharSequenceUtils.indexOf(seq, searchSeq, startPos);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r1 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence\n  i0 :\u003d @parameter2: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $i3 \u003d (int) -1\n  return\n}",
      "B3 {\n  $i1 \u003d CharSequenceUtils.indexOf(r0, r1, i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "indexOf",
    "signature": "int indexOf(java.lang.CharSequence,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(seq)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    return CharSequenceUtils.indexOf(seq, searchChar, 0);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  i0 :\u003d @parameter1: int\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $i3 \u003d (int) -1\n  return\n}",
      "B2 {\n  $i1 \u003d CharSequenceUtils.indexOf(r0, i0, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "indexOf",
    "signature": "int indexOf(java.lang.CharSequence,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(seq)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    return CharSequenceUtils.indexOf(seq, searchChar, startPos);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $i4 \u003d (int) -1\n  return\n}",
      "B2 {\n  $i2 \u003d CharSequenceUtils.indexOf(r0, i0, i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "indexOfAny",
    "signature": "int indexOfAny(java.lang.CharSequence,char[])",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    final int csLen \u003d cs.length();\r\n    final int csLast \u003d csLen - 1;\r\n    final int searchLen \u003d searchChars.length;\r\n    final int searchLast \u003d searchLen - 1;\r\n    for (int i \u003d 0; i \u003c csLen; i++) {\r\n        final char ch \u003d cs.charAt(i);\r\n        for (int j \u003d 0; j \u003c searchLen; j++) {\r\n            if (searchChars[j] \u003d\u003d ch) {\r\n                if (i \u003e\u003d csLast || j \u003e\u003d searchLast || !Character.isHighSurrogate(ch)) {\r\n                    return i;\r\n                }\r\n                // ch is a supplementary character\r\n                if (searchChars[j + 1] \u003d\u003d cs.charAt(i + 1)) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 17,
    "edges": 22,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i10 \u003e\u003d i0) → B5 | else → B16",
      "B6 : If(i11 \u003e\u003d i2) → B7 | else → B15",
      "B7 : If($i14 !\u003d $i15) → B8 | else → B14",
      "B8 : If(i10 \u003e\u003d i1) → B9 | else → B11",
      "B9 : If(i11 \u003e\u003d i3) → B10 | else → B11",
      "B10 : If($z2 !\u003d 0) → B11 | else → B12",
      "B12 : If($i16 !\u003d $i17) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  r1 :\u003d @parameter1: char[]\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d ArrayUtils.isEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $i13 \u003d (int) -1\n  return\n}",
      "B3 {\n  i0 \u003d r0.length()\n  i1 \u003d i0 - 1\n  i2 \u003d lengthof r1\n  i3 \u003d i2 - 1\n  i10 \u003d 0\n}",
      "B4 {\n  if (i10 \u003e\u003d i0) goto B5 else B16\n}",
      "B5 {\n  c4 \u003d r0.charAt(i10)\n  i11 \u003d 0\n}",
      "B6 {\n  if (i11 \u003e\u003d i2) goto B7 else B15\n}",
      "B7 {\n  $c5 \u003d r1[i11]\n  $i14 \u003d (int) $c5\n  $i15 \u003d (int) c4\n  if ($i14 !\u003d $i15) goto B8 else B14\n}",
      "B8 {\n  if (i10 \u003e\u003d i1) goto B9 else B11\n}",
      "B9 {\n  if (i11 \u003e\u003d i3) goto B10 else B11\n}",
      "B10 {\n  $z2 \u003d Character.isHighSurrogate(c4)\n  if ($z2 !\u003d 0) goto B11 else B12\n}",
      "B11 {\n  return\n}",
      "B12 {\n  $i6 \u003d i11 + 1\n  $c8 \u003d r1[$i6]\n  $i7 \u003d i10 + 1\n  $c9 \u003d r0.charAt($i7)\n  $i16 \u003d (int) $c8\n  $i17 \u003d (int) $c9\n  if ($i16 !\u003d $i17) goto B13 else B14\n}",
      "B13 {\n  return\n}",
      "B14 {\n  i11 \u003d i11 + 1\n  goto B6\n}",
      "B15 {\n  i10 \u003d i10 + 1\n  goto B4\n}",
      "B16 {\n  $i19 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B16",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B15",
      "B7 --\u003e B8",
      "B7 --\u003e B14",
      "B8 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B6",
      "B15 --\u003e B4",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "indexOfAny",
    "signature": "int indexOfAny(java.lang.CharSequence,java.lang.CharSequence[])",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null || searchStrs \u003d\u003d null) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    // String\u0027s can\u0027t have a MAX_VALUEth index.\r\n    int ret \u003d Integer.MAX_VALUE;\r\n    int tmp;\r\n    for (final CharSequence search : searchStrs) {\r\n        if (search \u003d\u003d null) {\r\n            continue;\r\n        }\r\n        tmp \u003d CharSequenceUtils.indexOf(str, search, 0);\r\n        if (tmp \u003d\u003d INDEX_NOT_FOUND) {\r\n            continue;\r\n        }\r\n        if (tmp \u003c ret) {\r\n            ret \u003d tmp;\r\n        }\r\n    }\r\n    return ret \u003d\u003d Integer.MAX_VALUE ? INDEX_NOT_FOUND : ret;\r\n}",
    "nodes": 16,
    "edges": 21,
    "cc": 7,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r1 !\u003d null) → B2 | else → B3",
      "B4 : If(i3 \u003e\u003d i0) → B5 | else → B12",
      "B5 : If(r2 !\u003d null) → B6 | else → B7",
      "B7 : If(i1 !\u003d $i8) → B8 | else → B9",
      "B9 : If(i1 \u003e\u003d i2) → B10 | else → B11",
      "B12 : If(i2 !\u003d 2147483647) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $i6 \u003d (int) -1\n  return\n}",
      "B3 {\n  i2 \u003d 2147483647\n  i0 \u003d lengthof r1\n  i3 \u003d 0\n}",
      "B4 {\n  if (i3 \u003e\u003d i0) goto B5 else B12\n}",
      "B5 {\n  r2 \u003d r1[i3]\n  if (r2 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  goto B11\n}",
      "B7 {\n  i1 \u003d CharSequenceUtils.indexOf(r0, r2, 0)\n  $i8 \u003d (int) -1\n  if (i1 !\u003d $i8) goto B8 else B9\n}",
      "B8 {\n  goto B11\n}",
      "B9 {\n  if (i1 \u003e\u003d i2) goto B10 else B11\n}",
      "B10 {\n  i2 \u003d i1\n}",
      "B11 {\n  i3 \u003d i3 + 1\n  goto B4\n}",
      "B12 {\n  if (i2 !\u003d 2147483647) goto B13 else B14\n}",
      "B13 {\n  $i10 \u003d (int) -1\n  $i4 \u003d $i10\n  goto B15\n}",
      "B14 {\n  $i4 \u003d i2\n}",
      "B15 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B12",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B4",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "indexOfAny",
    "signature": "int indexOfAny(java.lang.CharSequence,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(cs) || isEmpty(searchChars)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    return indexOfAny(cs, searchChars.toCharArray());\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d StringUtils.isEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $i2 \u003d (int) -1\n  return\n}",
      "B3 {\n  $r2 \u003d r1.toCharArray()\n  $i0 \u003d StringUtils.indexOfAny(r0, $r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      },
      {
        "name": "StringUtils#indexOfAny(...2)",
        "body": "{\r\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    final int csLen \u003d cs.length();\r\n    final int csLast \u003d csLen - 1;\r\n    final int searchLen \u003d searchChars.length;\r\n    final int searchLast \u003d searchLen - 1;\r\n    for (int i \u003d 0; i \u003c csLen; i++) {\r\n        final char ch \u003d cs.charAt(i);\r\n        for (int j \u003d 0; j \u003c searchLen; j++) {\r\n            if (searchChars[j] \u003d\u003d ch) {\r\n                if (i \u003e\u003d csLast || j \u003e\u003d searchLast || !Character.isHighSurrogate(ch)) {\r\n                    return i;\r\n                }\r\n                // ch is a supplementary character\r\n                if (searchChars[j + 1] \u003d\u003d cs.charAt(i + 1)) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "indexOfAnyBut",
    "signature": "int indexOfAnyBut(java.lang.CharSequence,char[])",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    final int csLen \u003d cs.length();\r\n    final int csLast \u003d csLen - 1;\r\n    final int searchLen \u003d searchChars.length;\r\n    final int searchLast \u003d searchLen - 1;\r\n    outer: for (int i \u003d 0; i \u003c csLen; i++) {\r\n        final char ch \u003d cs.charAt(i);\r\n        for (int j \u003d 0; j \u003c searchLen; j++) {\r\n            if (searchChars[j] \u003d\u003d ch) {\r\n                if (i \u003e\u003d csLast || j \u003e\u003d searchLast || !Character.isHighSurrogate(ch)) {\r\n                    continue outer;\r\n                }\r\n                if (searchChars[j + 1] \u003d\u003d cs.charAt(i + 1)) {\r\n                    continue outer;\r\n                }\r\n            }\r\n        }\r\n        return i;\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 18,
    "edges": 24,
    "cc": 8,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i10 \u003e\u003d i0) → B5 | else → B17",
      "B6 : If(i11 \u003e\u003d i2) → B7 | else → B15",
      "B7 : If($i14 !\u003d $i15) → B8 | else → B14",
      "B8 : If(i10 \u003e\u003d i1) → B9 | else → B16",
      "B9 : If(i11 \u003e\u003d i3) → B10 | else → B16",
      "B10 : If($z2 !\u003d 0) → B11 | else → B12",
      "B12 : If($i16 !\u003d $i17) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  r1 :\u003d @parameter1: char[]\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d ArrayUtils.isEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $i13 \u003d (int) -1\n  return\n}",
      "B3 {\n  i0 \u003d r0.length()\n  i1 \u003d i0 - 1\n  i2 \u003d lengthof r1\n  i3 \u003d i2 - 1\n  i10 \u003d 0\n}",
      "B4 {\n  if (i10 \u003e\u003d i0) goto B5 else B17\n}",
      "B5 {\n  c4 \u003d r0.charAt(i10)\n  i11 \u003d 0\n}",
      "B6 {\n  if (i11 \u003e\u003d i2) goto B7 else B15\n}",
      "B7 {\n  $c5 \u003d r1[i11]\n  $i14 \u003d (int) $c5\n  $i15 \u003d (int) c4\n  if ($i14 !\u003d $i15) goto B8 else B14\n}",
      "B8 {\n  if (i10 \u003e\u003d i1) goto B9 else B16\n}",
      "B9 {\n  if (i11 \u003e\u003d i3) goto B10 else B16\n}",
      "B10 {\n  $z2 \u003d Character.isHighSurrogate(c4)\n  if ($z2 !\u003d 0) goto B11 else B12\n}",
      "B11 {\n  goto B16\n}",
      "B12 {\n  $i6 \u003d i11 + 1\n  $c8 \u003d r1[$i6]\n  $i7 \u003d i10 + 1\n  $c9 \u003d r0.charAt($i7)\n  $i16 \u003d (int) $c8\n  $i17 \u003d (int) $c9\n  if ($i16 !\u003d $i17) goto B13 else B14\n}",
      "B13 {\n  goto B16\n}",
      "B14 {\n  i11 \u003d i11 + 1\n  goto B6\n}",
      "B15 {\n  return\n}",
      "B16 {\n  i10 \u003d i10 + 1\n  goto B4\n}",
      "B17 {\n  $i19 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B17",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B15",
      "B7 --\u003e B8",
      "B7 --\u003e B14",
      "B8 --\u003e B9",
      "B8 --\u003e B16",
      "B9 --\u003e B10",
      "B9 --\u003e B16",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B16",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B16",
      "B14 --\u003e B6",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B4",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "indexOfAnyBut",
    "signature": "int indexOfAnyBut(java.lang.CharSequence,java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(seq) || isEmpty(searchChars)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    final int strLen \u003d seq.length();\r\n    for (int i \u003d 0; i \u003c strLen; i++) {\r\n        final char ch \u003d seq.charAt(i);\r\n        final boolean chFound \u003d CharSequenceUtils.indexOf(searchChars, ch, 0) \u003e\u003d 0;\r\n        if (i + 1 \u003c strLen \u0026\u0026 Character.isHighSurrogate(ch)) {\r\n            final char ch2 \u003d seq.charAt(i + 1);\r\n            if (chFound \u0026\u0026 CharSequenceUtils.indexOf(searchChars, ch2, 0) \u003c 0) {\r\n                return i;\r\n            }\r\n        } else if (!chFound) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 18,
    "edges": 23,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i7 \u003e\u003d i0) → B5 | else → B17",
      "B5 : If($i2 \u003c 0) → B6 | else → B7",
      "B8 : If($i3 \u003e\u003d i0) → B9 | else → B14",
      "B9 : If($z3 \u003d\u003d false) → B10 | else → B14",
      "B10 : If($z6 \u003d\u003d false) → B11 | else → B13",
      "B11 : If($i6 \u003e\u003d 0) → B12 | else → B13",
      "B14 : If(z2 !\u003d 0) → B15 | else → B16"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d StringUtils.isEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $i9 \u003d (int) -1\n  return\n}",
      "B3 {\n  i0 \u003d r0.length()\n  i7 \u003d 0\n}",
      "B4 {\n  if (i7 \u003e\u003d i0) goto B5 else B17\n}",
      "B5 {\n  c1 \u003d r0.charAt(i7)\n  $i10 \u003d (int) c1\n  $i2 \u003d CharSequenceUtils.indexOf(r1, $i10, 0)\n  if ($i2 \u003c 0) goto B6 else B7\n}",
      "B6 {\n  $z6 \u003d 1\n  $z5 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z6 \u003d 0\n  $z5 \u003d 0\n}",
      "B8 {\n  z2 \u003d $z5\n  $i3 \u003d i7 + 1\n  if ($i3 \u003e\u003d i0) goto B9 else B14\n}",
      "B9 {\n  $z3 \u003d Character.isHighSurrogate(c1)\n  if ($z3 \u003d\u003d false) goto B10 else B14\n}",
      "B10 {\n  $i4 \u003d i7 + 1\n  c5 \u003d r0.charAt($i4)\n  if ($z6 \u003d\u003d false) goto B11 else B13\n}",
      "B11 {\n  $i11 \u003d (int) c5\n  $i6 \u003d CharSequenceUtils.indexOf(r1, $i11, 0)\n  if ($i6 \u003e\u003d 0) goto B12 else B13\n}",
      "B12 {\n  return\n}",
      "B13 {\n  goto B16\n}",
      "B14 {\n  if (z2 !\u003d 0) goto B15 else B16\n}",
      "B15 {\n  return\n}",
      "B16 {\n  i7 \u003d i7 + 1\n  goto B4\n}",
      "B17 {\n  $i13 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B17",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B14",
      "B9 --\u003e B10",
      "B9 --\u003e B14",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B16",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B4",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "indexOfDifference",
    "signature": "int indexOfDifference(java.lang.CharSequence[])",
    "visibility": "public",
    "body": "{\r\n    if (ArrayUtils.getLength(css) \u003c\u003d 1) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    boolean anyStringNull \u003d false;\r\n    boolean allStringsNull \u003d true;\r\n    final int arrayLen \u003d css.length;\r\n    int shortestStrLen \u003d Integer.MAX_VALUE;\r\n    int longestStrLen \u003d 0;\r\n    // find the min and max string lengths; this avoids checking to make\r\n    // sure we are not exceeding the length of the string each time through\r\n    // the bottom loop.\r\n    for (final CharSequence cs : css) {\r\n        if (cs \u003d\u003d null) {\r\n            anyStringNull \u003d true;\r\n            shortestStrLen \u003d 0;\r\n        } else {\r\n            allStringsNull \u003d false;\r\n            shortestStrLen \u003d Math.min(cs.length(), shortestStrLen);\r\n            longestStrLen \u003d Math.max(cs.length(), longestStrLen);\r\n        }\r\n    }\r\n    // handle lists containing all nulls or all empty strings\r\n    if (allStringsNull || longestStrLen \u003d\u003d 0 \u0026\u0026 !anyStringNull) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    // handle lists containing some nulls or some empty strings\r\n    if (shortestStrLen \u003d\u003d 0) {\r\n        return 0;\r\n    }\r\n    // find the position with the first difference across all strings\r\n    int firstDiff \u003d -1;\r\n    for (int stringPos \u003d 0; stringPos \u003c shortestStrLen; stringPos++) {\r\n        final char comparisonChar \u003d css[0].charAt(stringPos);\r\n        for (int arrayPos \u003d 1; arrayPos \u003c arrayLen; arrayPos++) {\r\n            if (css[arrayPos].charAt(stringPos) !\u003d comparisonChar) {\r\n                firstDiff \u003d stringPos;\r\n                break;\r\n            }\r\n        }\r\n        if (firstDiff !\u003d -1) {\r\n            break;\r\n        }\r\n    }\r\n    if (firstDiff \u003d\u003d -1 \u0026\u0026 shortestStrLen !\u003d longestStrLen) {\r\n        // we compared all of the characters up to the length of the\r\n        // shortest string and didn\u0027t find a match, but the string lengths\r\n        // vary, so return the length of the shortest string.\r\n        return shortestStrLen;\r\n    }\r\n    return firstDiff;\r\n}",
    "nodes": 28,
    "edges": 36,
    "cc": 10,
    "flowSummary": [
      "B0 : If($i0 \u003e 1) → B1 | else → B2",
      "B3 : If(i8 \u003e\u003d i7) → B4 | else → B8",
      "B4 : If(r3 !\u003d null) → B5 | else → B6",
      "B8 : If(z1 !\u003d 0) → B9 | else → B11",
      "B9 : If(i6 !\u003d 0) → B10 | else → B12",
      "B10 : If(z0 !\u003d 0) → B11 | else → B12",
      "B12 : If(i5 !\u003d 0) → B13 | else → B14",
      "B15 : If(i10 \u003e\u003d i5) → B16 | else → B24",
      "B17 : If(i12 \u003e\u003d i1) → B18 | else → B21",
      "B18 : If($i19 \u003d\u003d $i20) → B19 | else → B20",
      "B21 : If(i9 \u003d\u003d $i22) → B22 | else → B23",
      "B24 : If(i9 !\u003d $i24) → B25 | else → B27",
      "B25 : If(i5 \u003d\u003d i6) → B26 | else → B27"
    ],
    "blockList": [
      "B0 {\n  CharSequence[]\n  $i0 \u003d ArrayUtils.getLength(r0)\n  if ($i0 \u003e 1) goto B1 else B2\n}",
      "B1 {\n  $i14 \u003d (int) -1\n  return\n}",
      "B2 {\n  z0 \u003d 0\n  z1 \u003d 1\n  i1 \u003d lengthof r0\n  i5 \u003d 2147483647\n  i6 \u003d 0\n  i7 \u003d lengthof r0\n  i8 \u003d 0\n}",
      "B3 {\n  if (i8 \u003e\u003d i7) goto B4 else B8\n}",
      "B4 {\n  r3 \u003d r0[i8]\n  if (r3 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  z0 \u003d 1\n  i5 \u003d 0\n  goto B7\n}",
      "B6 {\n  z1 \u003d 0\n  $i3 \u003d r3.length()\n  i5 \u003d Math.min($i3, i5)\n  $i4 \u003d r3.length()\n  i6 \u003d Math.max($i4, i6)\n}",
      "B7 {\n  i8 \u003d i8 + 1\n  goto B3\n}",
      "B8 {\n  if (z1 !\u003d 0) goto B9 else B11\n}",
      "B9 {\n  if (i6 !\u003d 0) goto B10 else B12\n}",
      "B10 {\n  if (z0 !\u003d 0) goto B11 else B12\n}",
      "B11 {\n  $i16 \u003d (int) -1\n  return\n}",
      "B12 {\n  if (i5 !\u003d 0) goto B13 else B14\n}",
      "B13 {\n  return\n}",
      "B14 {\n  $i18 \u003d (int) -1\n  i9 \u003d $i18\n  i10 \u003d 0\n}",
      "B15 {\n  if (i10 \u003e\u003d i5) goto B16 else B24\n}",
      "B16 {\n  $r1 \u003d r0[0]\n  c11 \u003d $r1.charAt(i10)\n  i12 \u003d 1\n}",
      "B17 {\n  if (i12 \u003e\u003d i1) goto B18 else B21\n}",
      "B18 {\n  $r2 \u003d r0[i12]\n  $c2 \u003d $r2.charAt(i10)\n  $i19 \u003d (int) $c2\n  $i20 \u003d (int) c11\n  if ($i19 \u003d\u003d $i20) goto B19 else B20\n}",
      "B19 {\n  i9 \u003d i10\n  goto B21\n}",
      "B20 {\n  i12 \u003d i12 + 1\n  goto B17\n}",
      "B21 {\n  $i22 \u003d (int) -1\n  if (i9 \u003d\u003d $i22) goto B22 else B23\n}",
      "B22 {\n  goto B24\n}",
      "B23 {\n  i10 \u003d i10 + 1\n  goto B15\n}",
      "B24 {\n  $i24 \u003d (int) -1\n  if (i9 !\u003d $i24) goto B25 else B27\n}",
      "B25 {\n  if (i5 \u003d\u003d i6) goto B26 else B27\n}",
      "B26 {\n  return\n}",
      "B27 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B3",
      "B8 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B15 --\u003e B16",
      "B15 --\u003e B24",
      "B16 --\u003e B17",
      "B17 --\u003e B18",
      "B17 --\u003e B21",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B17",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B15",
      "B24 --\u003e B25",
      "B24 --\u003e B27",
      "B25 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e [EXIT]",
      "B27 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "indexOfDifference",
    "signature": "int indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (cs1 \u003d\u003d cs2) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    if (cs1 \u003d\u003d null || cs2 \u003d\u003d null) {\r\n        return 0;\r\n    }\r\n    int i;\r\n    for (i \u003d 0; i \u003c cs1.length() \u0026\u0026 i \u003c cs2.length(); ++i) {\r\n        if (cs1.charAt(i) !\u003d cs2.charAt(i)) {\r\n            break;\r\n        }\r\n    }\r\n    if (i \u003c cs2.length() || i \u003c cs1.length()) {\r\n        return i;\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 15,
    "edges": 19,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 \u003d\u003d null) → B3 | else → B4",
      "B3 : If(r1 !\u003d null) → B4 | else → B5",
      "B6 : If(i5 \u003e\u003d $i0) → B7 | else → B11",
      "B7 : If(i5 \u003e\u003d $i2) → B8 | else → B11",
      "B8 : If($i9 \u003d\u003d $i10) → B9 | else → B10",
      "B11 : If(i5 \u003c $i6) → B12 | else → B13",
      "B12 : If(i5 \u003e\u003d $i1) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $i8 \u003d (int) -1\n  return\n}",
      "B2 {\n  if (r0 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  if (r1 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  i5 \u003d 0\n}",
      "B6 {\n  $i0 \u003d r0.length()\n  if (i5 \u003e\u003d $i0) goto B7 else B11\n}",
      "B7 {\n  $i2 \u003d r1.length()\n  if (i5 \u003e\u003d $i2) goto B8 else B11\n}",
      "B8 {\n  $c4 \u003d r0.charAt(i5)\n  $c3 \u003d r1.charAt(i5)\n  $i9 \u003d (int) $c4\n  $i10 \u003d (int) $c3\n  if ($i9 \u003d\u003d $i10) goto B9 else B10\n}",
      "B9 {\n  goto B11\n}",
      "B10 {\n  i5 \u003d i5 + 1\n  goto B6\n}",
      "B11 {\n  $i6 \u003d r1.length()\n  if (i5 \u003c $i6) goto B12 else B13\n}",
      "B12 {\n  $i1 \u003d r0.length()\n  if (i5 \u003e\u003d $i1) goto B13 else B14\n}",
      "B13 {\n  return\n}",
      "B14 {\n  $i12 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B6",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "indexOfIgnoreCase",
    "signature": "int indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null || searchStr \u003d\u003d null) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    if (startPos \u003c 0) {\r\n        startPos \u003d 0;\r\n    }\r\n    final int endLimit \u003d str.length() - searchStr.length() + 1;\r\n    if (startPos \u003e endLimit) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    if (searchStr.length() \u003d\u003d 0) {\r\n        return startPos;\r\n    }\r\n    for (int i \u003d startPos; i \u003c endLimit; i++) {\r\n        if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 15,
    "edges": 17,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r1 !\u003d null) → B2 | else → B3",
      "B3 : If(i6 \u003e\u003d 0) → B4 | else → B5",
      "B5 : If(i6 \u003c\u003d $i5) → B6 | else → B7",
      "B7 : If($i3 !\u003d 0) → B8 | else → B9",
      "B10 : If(i7 \u003e\u003d $i5) → B11 | else → B14",
      "B11 : If($z0 \u003d\u003d false) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence\n  i6 :\u003d @parameter2: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $i9 \u003d (int) -1\n  return\n}",
      "B3 {\n  if (i6 \u003e\u003d 0) goto B4 else B5\n}",
      "B4 {\n  i6 \u003d 0\n}",
      "B5 {\n  $i1 \u003d r0.length()\n  $i0 \u003d r1.length()\n  $i2 \u003d $i1 - $i0\n  $i5 \u003d $i2 + 1\n  if (i6 \u003c\u003d $i5) goto B6 else B7\n}",
      "B6 {\n  $i11 \u003d (int) -1\n  return\n}",
      "B7 {\n  $i3 \u003d r1.length()\n  if ($i3 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  return\n}",
      "B9 {\n  i7 \u003d i6\n}",
      "B10 {\n  if (i7 \u003e\u003d $i5) goto B11 else B14\n}",
      "B11 {\n  $i4 \u003d r1.length()\n  $z0 \u003d CharSequenceUtils.regionMatches(r0, 1, i7, r1, 0, $i4)\n  if ($z0 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  return\n}",
      "B13 {\n  i7 \u003d i7 + 1\n  goto B10\n}",
      "B14 {\n  $i13 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B10",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "isAllBlank",
    "signature": "boolean isAllBlank(java.lang.CharSequence[])",
    "visibility": "public",
    "body": "{\r\n    if (ArrayUtils.isEmpty(css)) {\r\n        return true;\r\n    }\r\n    for (final CharSequence cs : css) {\r\n        if (isNotBlank(cs)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If(i1 \u003e\u003d i0) → B4 | else → B7",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CharSequence[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B3 {\n  if (i1 \u003e\u003d i0) goto B4 else B7\n}",
      "B4 {\n  r1 \u003d r0[i1]\n  $z1 \u003d StringUtils.isNotBlank(r1)\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i1 \u003d i1 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isNotBlank(...1)",
        "body": "{\r\n    return !isBlank(cs);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "isAllEmpty",
    "signature": "boolean isAllEmpty(java.lang.CharSequence[])",
    "visibility": "public",
    "body": "{\r\n    if (ArrayUtils.isEmpty(css)) {\r\n        return true;\r\n    }\r\n    for (final CharSequence cs : css) {\r\n        if (isNotEmpty(cs)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If(i1 \u003e\u003d i0) → B4 | else → B7",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CharSequence[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B3 {\n  if (i1 \u003e\u003d i0) goto B4 else B7\n}",
      "B4 {\n  r1 \u003d r0[i1]\n  $z1 \u003d StringUtils.isNotEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i1 \u003d i1 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isNotEmpty(...1)",
        "body": "{\r\n    return !isEmpty(cs);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "isAllLowerCase",
    "signature": "boolean isAllLowerCase(java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(cs)) {\r\n        return false;\r\n    }\r\n    final int sz \u003d cs.length();\r\n    for (int i \u003d 0; i \u003c sz; i++) {\r\n        if (!Character.isLowerCase(cs.charAt(i))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If(i2 \u003e\u003d i0) → B4 | else → B7",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d r0.length()\n  i2 \u003d 0\n}",
      "B3 {\n  if (i2 \u003e\u003d i0) goto B4 else B7\n}",
      "B4 {\n  $c1 \u003d r0.charAt(i2)\n  $z1 \u003d Character.isLowerCase($c1)\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "isAllUpperCase",
    "signature": "boolean isAllUpperCase(java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(cs)) {\r\n        return false;\r\n    }\r\n    final int sz \u003d cs.length();\r\n    for (int i \u003d 0; i \u003c sz; i++) {\r\n        if (!Character.isUpperCase(cs.charAt(i))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If(i2 \u003e\u003d i0) → B4 | else → B7",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d r0.length()\n  i2 \u003d 0\n}",
      "B3 {\n  if (i2 \u003e\u003d i0) goto B4 else B7\n}",
      "B4 {\n  $c1 \u003d r0.charAt(i2)\n  $z1 \u003d Character.isUpperCase($c1)\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "isAlpha",
    "signature": "boolean isAlpha(java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(cs)) {\r\n        return false;\r\n    }\r\n    final int sz \u003d cs.length();\r\n    for (int i \u003d 0; i \u003c sz; i++) {\r\n        if (!Character.isLetter(cs.charAt(i))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If(i2 \u003e\u003d i0) → B4 | else → B7",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d r0.length()\n  i2 \u003d 0\n}",
      "B3 {\n  if (i2 \u003e\u003d i0) goto B4 else B7\n}",
      "B4 {\n  $c1 \u003d r0.charAt(i2)\n  $z1 \u003d Character.isLetter($c1)\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "isAlphanumeric",
    "signature": "boolean isAlphanumeric(java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(cs)) {\r\n        return false;\r\n    }\r\n    final int sz \u003d cs.length();\r\n    for (int i \u003d 0; i \u003c sz; i++) {\r\n        if (!Character.isLetterOrDigit(cs.charAt(i))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If(i2 \u003e\u003d i0) → B4 | else → B7",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d r0.length()\n  i2 \u003d 0\n}",
      "B3 {\n  if (i2 \u003e\u003d i0) goto B4 else B7\n}",
      "B4 {\n  $c1 \u003d r0.charAt(i2)\n  $z1 \u003d Character.isLetterOrDigit($c1)\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "isAlphanumericSpace",
    "signature": "boolean isAlphanumericSpace(java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (cs \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    final int sz \u003d cs.length();\r\n    for (int i \u003d 0; i \u003c sz; i++) {\r\n        final char nowChar \u003d cs.charAt(i);\r\n        if (nowChar !\u003d \u0027 \u0027 \u0026\u0026 !Character.isLetterOrDigit(nowChar)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i2 \u003e\u003d i0) → B4 | else → B8",
      "B4 : If($i3 \u003d\u003d 32) → B5 | else → B7",
      "B5 : If($z0 !\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d r0.length()\n  i2 \u003d 0\n}",
      "B3 {\n  if (i2 \u003e\u003d i0) goto B4 else B8\n}",
      "B4 {\n  c1 \u003d r0.charAt(i2)\n  $i3 \u003d (int) c1\n  if ($i3 \u003d\u003d 32) goto B5 else B7\n}",
      "B5 {\n  $z0 \u003d Character.isLetterOrDigit(c1)\n  if ($z0 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B3",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "isAlphaSpace",
    "signature": "boolean isAlphaSpace(java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (cs \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    final int sz \u003d cs.length();\r\n    for (int i \u003d 0; i \u003c sz; i++) {\r\n        final char nowChar \u003d cs.charAt(i);\r\n        if (nowChar !\u003d \u0027 \u0027 \u0026\u0026 !Character.isLetter(nowChar)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i2 \u003e\u003d i0) → B4 | else → B8",
      "B4 : If($i3 \u003d\u003d 32) → B5 | else → B7",
      "B5 : If($z0 !\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d r0.length()\n  i2 \u003d 0\n}",
      "B3 {\n  if (i2 \u003e\u003d i0) goto B4 else B8\n}",
      "B4 {\n  c1 \u003d r0.charAt(i2)\n  $i3 \u003d (int) c1\n  if ($i3 \u003d\u003d 32) goto B5 else B7\n}",
      "B5 {\n  $z0 \u003d Character.isLetter(c1)\n  if ($z0 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B3",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "isAnyBlank",
    "signature": "boolean isAnyBlank(java.lang.CharSequence[])",
    "visibility": "public",
    "body": "{\r\n    if (ArrayUtils.isEmpty(css)) {\r\n        return false;\r\n    }\r\n    for (final CharSequence cs : css) {\r\n        if (isBlank(cs)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If(i1 \u003e\u003d i0) → B4 | else → B7",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CharSequence[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B3 {\n  if (i1 \u003e\u003d i0) goto B4 else B7\n}",
      "B4 {\n  r1 \u003d r0[i1]\n  $z1 \u003d StringUtils.isBlank(r1)\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i1 \u003d i1 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isBlank(...1)",
        "body": "{\r\n    final int strLen \u003d length(cs);\r\n    if (strLen \u003d\u003d 0) {\r\n        return true;\r\n    }\r\n    for (int i \u003d 0; i \u003c strLen; i++) {\r\n        if (!Character.isWhitespace(cs.charAt(i))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "isAnyEmpty",
    "signature": "boolean isAnyEmpty(java.lang.CharSequence[])",
    "visibility": "public",
    "body": "{\r\n    if (ArrayUtils.isEmpty(css)) {\r\n        return false;\r\n    }\r\n    for (final CharSequence cs : css) {\r\n        if (isEmpty(cs)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If(i1 \u003e\u003d i0) → B4 | else → B7",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CharSequence[]\n  $z0 \u003d ArrayUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B3 {\n  if (i1 \u003e\u003d i0) goto B4 else B7\n}",
      "B4 {\n  r1 \u003d r0[i1]\n  $z1 \u003d StringUtils.isEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i1 \u003d i1 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "isAsciiPrintable",
    "signature": "boolean isAsciiPrintable(java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (cs \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    final int sz \u003d cs.length();\r\n    for (int i \u003d 0; i \u003c sz; i++) {\r\n        if (!CharUtils.isAsciiPrintable(cs.charAt(i))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i2 \u003e\u003d i0) → B4 | else → B7",
      "B4 : If($z0 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d r0.length()\n  i2 \u003d 0\n}",
      "B3 {\n  if (i2 \u003e\u003d i0) goto B4 else B7\n}",
      "B4 {\n  $c1 \u003d r0.charAt(i2)\n  $z0 \u003d CharUtils.isAsciiPrintable($c1)\n  if ($z0 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "isBlank",
    "signature": "boolean isBlank(java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    final int strLen \u003d length(cs);\r\n    if (strLen \u003d\u003d 0) {\r\n        return true;\r\n    }\r\n    for (int i \u003d 0; i \u003c strLen; i++) {\r\n        if (!Character.isWhitespace(cs.charAt(i))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 !\u003d 0) → B1 | else → B2",
      "B3 : If(i2 \u003e\u003d i0) → B4 | else → B7",
      "B4 : If($z0 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  i0 \u003d StringUtils.length(r0)\n  if (i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i2 \u003d 0\n}",
      "B3 {\n  if (i2 \u003e\u003d i0) goto B4 else B7\n}",
      "B4 {\n  $c1 \u003d r0.charAt(i2)\n  $z0 \u003d Character.isWhitespace($c1)\n  if ($z0 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#length(...1)",
        "body": "{\r\n    return cs \u003d\u003d null ? 0 : cs.length();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty(java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($i0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d r0.length()\n  if ($i0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "isMixedCase",
    "signature": "boolean isMixedCase(java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(cs) || cs.length() \u003d\u003d 1) {\r\n        return false;\r\n    }\r\n    boolean containsUppercase \u003d false;\r\n    boolean containsLowercase \u003d false;\r\n    final int sz \u003d cs.length();\r\n    for (int i \u003d 0; i \u003c sz; i++) {\r\n        final char nowChar \u003d cs.charAt(i);\r\n        if (Character.isUpperCase(nowChar)) {\r\n            containsUppercase \u003d true;\r\n        } else if (Character.isLowerCase(nowChar)) {\r\n            containsLowercase \u003d true;\r\n        }\r\n        if (containsUppercase \u0026\u0026 containsLowercase) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 14,
    "edges": 18,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($i0 !\u003d 1) → B2 | else → B3",
      "B4 : If(i3 \u003e\u003d i1) → B5 | else → B13",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B7",
      "B7 : If($z2 \u003d\u003d false) → B8 | else → B9",
      "B9 : If(z3 \u003d\u003d false) → B10 | else → B12",
      "B10 : If(z4 \u003d\u003d false) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d r0.length()\n  if ($i0 !\u003d 1) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  z3 \u003d 0\n  z4 \u003d 0\n  i1 \u003d r0.length()\n  i3 \u003d 0\n}",
      "B4 {\n  if (i3 \u003e\u003d i1) goto B5 else B13\n}",
      "B5 {\n  c2 \u003d r0.charAt(i3)\n  $z1 \u003d Character.isUpperCase(c2)\n  if ($z1 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  z3 \u003d 1\n  goto B9\n}",
      "B7 {\n  $z2 \u003d Character.isLowerCase(c2)\n  if ($z2 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  z4 \u003d 1\n}",
      "B9 {\n  if (z3 \u003d\u003d false) goto B10 else B12\n}",
      "B10 {\n  if (z4 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  return\n}",
      "B12 {\n  i3 \u003d i3 + 1\n  goto B4\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B13",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B4",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "isNoneBlank",
    "signature": "boolean isNoneBlank(java.lang.CharSequence[])",
    "visibility": "public",
    "body": "{\r\n    return !isAnyBlank(css);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharSequence[]\n  $z0 \u003d StringUtils.isAnyBlank(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isAnyBlank(...1)",
        "body": "{\r\n    if (ArrayUtils.isEmpty(css)) {\r\n        return false;\r\n    }\r\n    for (final CharSequence cs : css) {\r\n        if (isBlank(cs)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "isNoneEmpty",
    "signature": "boolean isNoneEmpty(java.lang.CharSequence[])",
    "visibility": "public",
    "body": "{\r\n    return !isAnyEmpty(css);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharSequence[]\n  $z0 \u003d StringUtils.isAnyEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isAnyEmpty(...1)",
        "body": "{\r\n    if (ArrayUtils.isEmpty(css)) {\r\n        return false;\r\n    }\r\n    for (final CharSequence cs : css) {\r\n        if (isEmpty(cs)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "isNotBlank",
    "signature": "boolean isNotBlank(java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    return !isBlank(cs);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  $z0 \u003d StringUtils.isBlank(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isBlank(...1)",
        "body": "{\r\n    final int strLen \u003d length(cs);\r\n    if (strLen \u003d\u003d 0) {\r\n        return true;\r\n    }\r\n    for (int i \u003d 0; i \u003c strLen; i++) {\r\n        if (!Character.isWhitespace(cs.charAt(i))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "isNotEmpty",
    "signature": "boolean isNotEmpty(java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    return !isEmpty(cs);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "isNumeric",
    "signature": "boolean isNumeric(java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(cs)) {\r\n        return false;\r\n    }\r\n    final int sz \u003d cs.length();\r\n    for (int i \u003d 0; i \u003c sz; i++) {\r\n        if (!Character.isDigit(cs.charAt(i))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If(i2 \u003e\u003d i0) → B4 | else → B7",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d r0.length()\n  i2 \u003d 0\n}",
      "B3 {\n  if (i2 \u003e\u003d i0) goto B4 else B7\n}",
      "B4 {\n  $c1 \u003d r0.charAt(i2)\n  $z1 \u003d Character.isDigit($c1)\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "isNumericSpace",
    "signature": "boolean isNumericSpace(java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (cs \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    final int sz \u003d cs.length();\r\n    for (int i \u003d 0; i \u003c sz; i++) {\r\n        final char nowChar \u003d cs.charAt(i);\r\n        if (nowChar !\u003d \u0027 \u0027 \u0026\u0026 !Character.isDigit(nowChar)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i2 \u003e\u003d i0) → B4 | else → B8",
      "B4 : If($i3 \u003d\u003d 32) → B5 | else → B7",
      "B5 : If($z0 !\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d r0.length()\n  i2 \u003d 0\n}",
      "B3 {\n  if (i2 \u003e\u003d i0) goto B4 else B8\n}",
      "B4 {\n  c1 \u003d r0.charAt(i2)\n  $i3 \u003d (int) c1\n  if ($i3 \u003d\u003d 32) goto B5 else B7\n}",
      "B5 {\n  $z0 \u003d Character.isDigit(c1)\n  if ($z0 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B3",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "isWhitespace",
    "signature": "boolean isWhitespace(java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (cs \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    final int sz \u003d cs.length();\r\n    for (int i \u003d 0; i \u003c sz; i++) {\r\n        if (!Character.isWhitespace(cs.charAt(i))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i2 \u003e\u003d i0) → B4 | else → B7",
      "B4 : If($z0 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d r0.length()\n  i2 \u003d 0\n}",
      "B3 {\n  if (i2 \u003e\u003d i0) goto B4 else B7\n}",
      "B4 {\n  $c1 \u003d r0.charAt(i2)\n  $z0 \u003d Character.isWhitespace($c1)\n  if ($z0 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(boolean[],char)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return join(array, delimiter, 0, array.length);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  c0 :\u003d @parameter1: char\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d lengthof r0\n  $r1 \u003d StringUtils.join(r0, c0, 0, $i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#join(...4)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (endIndex - startIndex \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    final StringBuilder stringBuilder \u003d new StringBuilder(array.length * 5 + array.length - 1);\r\n    for (int i \u003d startIndex; i \u003c endIndex; i++) {\r\n        stringBuilder.append(array[i]).append(delimiter);\r\n    }\r\n    return stringBuilder.substring(0, stringBuilder.length() - 1);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(boolean[],char,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (endIndex - startIndex \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    final StringBuilder stringBuilder \u003d new StringBuilder(array.length * 5 + array.length - 1);\r\n    for (int i \u003d startIndex; i \u003c endIndex; i++) {\r\n        stringBuilder.append(array[i]).append(delimiter);\r\n    }\r\n    return stringBuilder.substring(0, stringBuilder.length() - 1);\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i2 \u003e 0) → B3 | else → B4",
      "B5 : If(i11 \u003e\u003d i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: boolean[]\n  c10 :\u003d @parameter1: char\n  i1 :\u003d @parameter2: int\n  i0 :\u003d @parameter3: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i2 \u003d i0 - i1\n  if ($i2 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r1 \u003d StringBuilder\n  $i3 \u003d lengthof r0\n  $i5 \u003d $i3 * 5\n  $i4 \u003d lengthof r0\n  $i6 \u003d $i5 + $i4\n  $i7 \u003d $i6 - 1\n  new StringBuilder($i7)\n  i11 \u003d i1\n}",
      "B5 {\n  if (i11 \u003e\u003d i0) goto B6 else B7\n}",
      "B6 {\n  $z0 \u003d r0[i11]\n  $r3 \u003d $r1.append($z0)\n  $r3.append(c10)\n  i11 \u003d i11 + 1\n  goto B5\n}",
      "B7 {\n  $i8 \u003d $r1.length()\n  $i9 \u003d $i8 - 1\n  $r2 \u003d $r1.substring(0, $i9)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(byte[],char)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return join(array, delimiter, 0, array.length);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  c0 :\u003d @parameter1: char\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d lengthof r0\n  $r1 \u003d StringUtils.join(r0, c0, 0, $i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#join(...4)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (endIndex - startIndex \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    final StringBuilder stringBuilder \u003d new StringBuilder(array.length * 5 + array.length - 1);\r\n    for (int i \u003d startIndex; i \u003c endIndex; i++) {\r\n        stringBuilder.append(array[i]).append(delimiter);\r\n    }\r\n    return stringBuilder.substring(0, stringBuilder.length() - 1);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(byte[],char,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (endIndex - startIndex \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    final StringBuilder stringBuilder \u003d new StringBuilder();\r\n    for (int i \u003d startIndex; i \u003c endIndex; i++) {\r\n        stringBuilder.append(array[i]).append(delimiter);\r\n    }\r\n    return stringBuilder.substring(0, stringBuilder.length() - 1);\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i2 \u003e 0) → B3 | else → B4",
      "B5 : If(i7 \u003e\u003d i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  c6 :\u003d @parameter1: char\n  i1 :\u003d @parameter2: int\n  i0 :\u003d @parameter3: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i2 \u003d i0 - i1\n  if ($i2 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r4 \u003d StringBuilder\n  new StringBuilder()\n  i7 \u003d i1\n}",
      "B5 {\n  if (i7 \u003e\u003d i0) goto B6 else B7\n}",
      "B6 {\n  $b5 \u003d r0[i7]\n  $i8 \u003d (int) $b5\n  $r3 \u003d $r4.append($i8)\n  $r3.append(c6)\n  i7 \u003d i7 + 1\n  goto B5\n}",
      "B7 {\n  $i3 \u003d $r4.length()\n  $i4 \u003d $i3 - 1\n  $r2 \u003d $r4.substring(0, $i4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(char[],char)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return join(array, delimiter, 0, array.length);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  c0 :\u003d @parameter1: char\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d lengthof r0\n  $r1 \u003d StringUtils.join(r0, c0, 0, $i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#join(...4)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (endIndex - startIndex \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    final StringBuilder stringBuilder \u003d new StringBuilder(array.length * 5 + array.length - 1);\r\n    for (int i \u003d startIndex; i \u003c endIndex; i++) {\r\n        stringBuilder.append(array[i]).append(delimiter);\r\n    }\r\n    return stringBuilder.substring(0, stringBuilder.length() - 1);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(char[],char,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (endIndex - startIndex \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    final StringBuilder stringBuilder \u003d new StringBuilder(array.length * 2 - 1);\r\n    for (int i \u003d startIndex; i \u003c endIndex; i++) {\r\n        stringBuilder.append(array[i]).append(delimiter);\r\n    }\r\n    return stringBuilder.substring(0, stringBuilder.length() - 1);\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i2 \u003e 0) → B3 | else → B4",
      "B5 : If(i10 \u003e\u003d i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  c9 :\u003d @parameter1: char\n  i1 :\u003d @parameter2: int\n  i0 :\u003d @parameter3: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i2 \u003d i0 - i1\n  if ($i2 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r1 \u003d StringBuilder\n  $i3 \u003d lengthof r0\n  $i4 \u003d $i3 * 2\n  $i5 \u003d $i4 - 1\n  new StringBuilder($i5)\n  i10 \u003d i1\n}",
      "B5 {\n  if (i10 \u003e\u003d i0) goto B6 else B7\n}",
      "B6 {\n  $c8 \u003d r0[i10]\n  $r3 \u003d $r1.append($c8)\n  $r3.append(c9)\n  i10 \u003d i10 + 1\n  goto B5\n}",
      "B7 {\n  $i6 \u003d $r1.length()\n  $i7 \u003d $i6 - 1\n  $r2 \u003d $r1.substring(0, $i7)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(double[],char)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return join(array, delimiter, 0, array.length);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  c0 :\u003d @parameter1: char\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d lengthof r0\n  $r1 \u003d StringUtils.join(r0, c0, 0, $i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#join(...4)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (endIndex - startIndex \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    final StringBuilder stringBuilder \u003d new StringBuilder(array.length * 5 + array.length - 1);\r\n    for (int i \u003d startIndex; i \u003c endIndex; i++) {\r\n        stringBuilder.append(array[i]).append(delimiter);\r\n    }\r\n    return stringBuilder.substring(0, stringBuilder.length() - 1);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(double[],char,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (endIndex - startIndex \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    final StringBuilder stringBuilder \u003d new StringBuilder();\r\n    for (int i \u003d startIndex; i \u003c endIndex; i++) {\r\n        stringBuilder.append(array[i]).append(delimiter);\r\n    }\r\n    return stringBuilder.substring(0, stringBuilder.length() - 1);\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i2 \u003e 0) → B3 | else → B4",
      "B5 : If(i6 \u003e\u003d i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: double[]\n  c5 :\u003d @parameter1: char\n  i1 :\u003d @parameter2: int\n  i0 :\u003d @parameter3: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i2 \u003d i0 - i1\n  if ($i2 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r1 \u003d StringBuilder\n  new StringBuilder()\n  i6 \u003d i1\n}",
      "B5 {\n  if (i6 \u003e\u003d i0) goto B6 else B7\n}",
      "B6 {\n  $d0 \u003d r0[i6]\n  $r3 \u003d $r1.append($d0)\n  $r3.append(c5)\n  i6 \u003d i6 + 1\n  goto B5\n}",
      "B7 {\n  $i3 \u003d $r1.length()\n  $i4 \u003d $i3 - 1\n  $r2 \u003d $r1.substring(0, $i4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(float[],char)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return join(array, delimiter, 0, array.length);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  c0 :\u003d @parameter1: char\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d lengthof r0\n  $r1 \u003d StringUtils.join(r0, c0, 0, $i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#join(...4)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (endIndex - startIndex \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    final StringBuilder stringBuilder \u003d new StringBuilder(array.length * 5 + array.length - 1);\r\n    for (int i \u003d startIndex; i \u003c endIndex; i++) {\r\n        stringBuilder.append(array[i]).append(delimiter);\r\n    }\r\n    return stringBuilder.substring(0, stringBuilder.length() - 1);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(float[],char,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (endIndex - startIndex \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    final StringBuilder stringBuilder \u003d new StringBuilder();\r\n    for (int i \u003d startIndex; i \u003c endIndex; i++) {\r\n        stringBuilder.append(array[i]).append(delimiter);\r\n    }\r\n    return stringBuilder.substring(0, stringBuilder.length() - 1);\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i2 \u003e 0) → B3 | else → B4",
      "B5 : If(i6 \u003e\u003d i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: float[]\n  c5 :\u003d @parameter1: char\n  i1 :\u003d @parameter2: int\n  i0 :\u003d @parameter3: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i2 \u003d i0 - i1\n  if ($i2 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r1 \u003d StringBuilder\n  new StringBuilder()\n  i6 \u003d i1\n}",
      "B5 {\n  if (i6 \u003e\u003d i0) goto B6 else B7\n}",
      "B6 {\n  $f0 \u003d r0[i6]\n  $r3 \u003d $r1.append($f0)\n  $r3.append(c5)\n  i6 \u003d i6 + 1\n  goto B5\n}",
      "B7 {\n  $i3 \u003d $r1.length()\n  $i4 \u003d $i3 - 1\n  $r2 \u003d $r1.substring(0, $i4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(int[],char)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return join(array, separator, 0, array.length);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  c0 :\u003d @parameter1: char\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d lengthof r0\n  $r1 \u003d StringUtils.join(r0, c0, 0, $i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#join(...4)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (endIndex - startIndex \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    final StringBuilder stringBuilder \u003d new StringBuilder(array.length * 5 + array.length - 1);\r\n    for (int i \u003d startIndex; i \u003c endIndex; i++) {\r\n        stringBuilder.append(array[i]).append(delimiter);\r\n    }\r\n    return stringBuilder.substring(0, stringBuilder.length() - 1);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(int[],char,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (endIndex - startIndex \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    final StringBuilder stringBuilder \u003d new StringBuilder();\r\n    for (int i \u003d startIndex; i \u003c endIndex; i++) {\r\n        stringBuilder.append(array[i]).append(delimiter);\r\n    }\r\n    return stringBuilder.substring(0, stringBuilder.length() - 1);\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i2 \u003e 0) → B3 | else → B4",
      "B5 : If(i7 \u003e\u003d i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  c6 :\u003d @parameter1: char\n  i1 :\u003d @parameter2: int\n  i0 :\u003d @parameter3: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i2 \u003d i0 - i1\n  if ($i2 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r1 \u003d StringBuilder\n  new StringBuilder()\n  i7 \u003d i1\n}",
      "B5 {\n  if (i7 \u003e\u003d i0) goto B6 else B7\n}",
      "B6 {\n  $i5 \u003d r0[i7]\n  $r3 \u003d $r1.append($i5)\n  $r3.append(c6)\n  i7 \u003d i7 + 1\n  goto B5\n}",
      "B7 {\n  $i3 \u003d $r1.length()\n  $i4 \u003d $i3 - 1\n  $r2 \u003d $r1.substring(0, $i4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(java.lang.Iterable,char)",
    "visibility": "public",
    "body": "{\r\n    return iterable !\u003d null ? join(iterable.iterator(), separator) : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  c0 :\u003d @parameter1: char\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d r0.iterator()\n  $r2 \u003d StringUtils.join($r1, c0)\n  goto B3\n}",
      "B2 {\n  $r2 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#join(...2)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return join(array, delimiter, 0, array.length);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(java.lang.Iterable,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return iterable !\u003d null ? join(iterable.iterator(), separator) : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  String\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0.iterator()\n  $r3 \u003d StringUtils.join($r2, r1)\n  goto B3\n}",
      "B2 {\n  $r3 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#join(...2)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return join(array, delimiter, 0, array.length);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(java.util.Iterator,char)",
    "visibility": "public",
    "body": "{\r\n    // handle null, zero and one elements before building a buffer\r\n    if (iterator \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (!iterator.hasNext()) {\r\n        return EMPTY;\r\n    }\r\n    return Streams.of(iterator).collect(LangCollectors.joining(toStringOrEmpty(String.valueOf(separator)), EMPTY, EMPTY, StringUtils::toStringOrEmpty));\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  c0 :\u003d @parameter1: char\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r0.hasNext()\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r5 \u003d Streams.of(r0)\n  $r1 \u003d String.valueOf(c0)\n  $r3 \u003d StringUtils.toStringOrEmpty($r1)\n  $r2 \u003d StringUtils$toStringOrEmpty__164.bootstrap$()\n  $r4 \u003d LangCollectors.joining($r3, \"\", \"\", $r2)\n  $r6 \u003d $r5.collect($r4)\n  $r7 \u003d String) $r6\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#toStringOrEmpty(...1)",
        "body": "{\r\n    return Objects.toString(obj, EMPTY);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(java.util.Iterator,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    // handle null, zero and one elements before building a buffer\r\n    if (iterator \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (!iterator.hasNext()) {\r\n        return EMPTY;\r\n    }\r\n    return Streams.of(iterator).collect(LangCollectors.joining(toStringOrEmpty(separator), EMPTY, EMPTY, StringUtils::toStringOrEmpty));\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r0.hasNext()\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r5 \u003d Streams.of(r0)\n  $r3 \u003d StringUtils.toStringOrEmpty(r1)\n  $r2 \u003d StringUtils$toStringOrEmpty__165.bootstrap$()\n  $r4 \u003d LangCollectors.joining($r3, \"\", \"\", $r2)\n  $r6 \u003d $r5.collect($r4)\n  $r7 \u003d String) $r6\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#toStringOrEmpty(...1)",
        "body": "{\r\n    return Objects.toString(obj, EMPTY);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(java.util.List,char,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (list \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final int noOfItems \u003d endIndex - startIndex;\r\n    if (noOfItems \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    final List\u003c?\u003e subList \u003d list.subList(startIndex, endIndex);\r\n    return join(subList.iterator(), separator);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i2 \u003e 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  List\n  c3 :\u003d @parameter1: char\n  i1 :\u003d @parameter2: int\n  i0 :\u003d @parameter3: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i2 \u003d i0 - i1\n  if (i2 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r1 \u003d r0.subList(i1, i0)\n  $r2 \u003d r1.iterator()\n  $r3 \u003d StringUtils.join($r2, c3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#join(...2)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return join(array, delimiter, 0, array.length);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(java.util.List,java.lang.String,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (list \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final int noOfItems \u003d endIndex - startIndex;\r\n    if (noOfItems \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    final List\u003c?\u003e subList \u003d list.subList(startIndex, endIndex);\r\n    return join(subList.iterator(), separator);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i2 \u003e 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  List\n  String\n  i1 :\u003d @parameter2: int\n  i0 :\u003d @parameter3: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i2 \u003d i0 - i1\n  if (i2 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r1 \u003d r0.subList(i1, i0)\n  $r3 \u003d r1.iterator()\n  $r4 \u003d StringUtils.join($r3, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#join(...2)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return join(array, delimiter, 0, array.length);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(long[],char)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return join(array, separator, 0, array.length);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  c0 :\u003d @parameter1: char\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d lengthof r0\n  $r1 \u003d StringUtils.join(r0, c0, 0, $i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#join(...4)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (endIndex - startIndex \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    final StringBuilder stringBuilder \u003d new StringBuilder(array.length * 5 + array.length - 1);\r\n    for (int i \u003d startIndex; i \u003c endIndex; i++) {\r\n        stringBuilder.append(array[i]).append(delimiter);\r\n    }\r\n    return stringBuilder.substring(0, stringBuilder.length() - 1);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(long[],char,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (endIndex - startIndex \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    final StringBuilder stringBuilder \u003d new StringBuilder();\r\n    for (int i \u003d startIndex; i \u003c endIndex; i++) {\r\n        stringBuilder.append(array[i]).append(delimiter);\r\n    }\r\n    return stringBuilder.substring(0, stringBuilder.length() - 1);\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i2 \u003e 0) → B3 | else → B4",
      "B5 : If(i7 \u003e\u003d i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  c6 :\u003d @parameter1: char\n  i1 :\u003d @parameter2: int\n  i0 :\u003d @parameter3: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i2 \u003d i0 - i1\n  if ($i2 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r1 \u003d StringBuilder\n  new StringBuilder()\n  i7 \u003d i1\n}",
      "B5 {\n  if (i7 \u003e\u003d i0) goto B6 else B7\n}",
      "B6 {\n  $l5 \u003d r0[i7]\n  $r3 \u003d $r1.append($l5)\n  $r3.append(c6)\n  i7 \u003d i7 + 1\n  goto B5\n}",
      "B7 {\n  $i3 \u003d $r1.length()\n  $i4 \u003d $i3 - 1\n  $r2 \u003d $r1.substring(0, $i4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(java.lang.Object[],char)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return join(array, delimiter, 0, array.length);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  c0 :\u003d @parameter1: char\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d lengthof r0\n  $r1 \u003d StringUtils.join(r0, c0, 0, $i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#join(...4)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (endIndex - startIndex \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    final StringBuilder stringBuilder \u003d new StringBuilder(array.length * 5 + array.length - 1);\r\n    for (int i \u003d startIndex; i \u003c endIndex; i++) {\r\n        stringBuilder.append(array[i]).append(delimiter);\r\n    }\r\n    return stringBuilder.substring(0, stringBuilder.length() - 1);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(java.lang.Object[],java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return array !\u003d null ? join(array, toStringOrEmpty(delimiter), 0, array.length) : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  String\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d StringUtils.toStringOrEmpty(r1)\n  $i0 \u003d lengthof r0\n  $r3 \u003d StringUtils.join(r0, $r2, 0, $i0)\n  goto B3\n}",
      "B2 {\n  $r3 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#join(...4)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (endIndex - startIndex \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    final StringBuilder stringBuilder \u003d new StringBuilder(array.length * 5 + array.length - 1);\r\n    for (int i \u003d startIndex; i \u003c endIndex; i++) {\r\n        stringBuilder.append(array[i]).append(delimiter);\r\n    }\r\n    return stringBuilder.substring(0, stringBuilder.length() - 1);\r\n}"
      },
      {
        "name": "StringUtils#toStringOrEmpty(...1)",
        "body": "{\r\n    return Objects.toString(obj, EMPTY);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(java.lang.Object[],java.lang.String,int,int)",
    "visibility": "public",
    "body": "{\r\n    return array !\u003d null ? Streams.of(array).skip(startIndex).limit(Math.max(0, endIndex - startIndex)).collect(LangCollectors.joining(delimiter, EMPTY, EMPTY, StringUtils::toStringOrEmpty)) : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  String\n  i0 :\u003d @parameter2: int\n  i2 :\u003d @parameter3: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d Streams.of(r0)\n  $l1 \u003d (long) i0\n  $r2 \u003d $r1.skip($l1)\n  $i3 \u003d i2 - i0\n  $i4 \u003d Math.max(0, $i3)\n  $l5 \u003d (long) $i4\n  $r6 \u003d $r2.limit($l5)\n  $r4 \u003d StringUtils$toStringOrEmpty__166.bootstrap$()\n  $r5 \u003d LangCollectors.joining(r3, \"\", \"\", $r4)\n  $r7 \u003d $r6.collect($r5)\n  $r8 \u003d String) $r7\n  goto B3\n}",
      "B2 {\n  $r8 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(short[],char)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return join(array, delimiter, 0, array.length);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  c0 :\u003d @parameter1: char\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d lengthof r0\n  $r1 \u003d StringUtils.join(r0, c0, 0, $i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#join(...4)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (endIndex - startIndex \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    final StringBuilder stringBuilder \u003d new StringBuilder(array.length * 5 + array.length - 1);\r\n    for (int i \u003d startIndex; i \u003c endIndex; i++) {\r\n        stringBuilder.append(array[i]).append(delimiter);\r\n    }\r\n    return stringBuilder.substring(0, stringBuilder.length() - 1);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "join",
    "signature": "java.lang.String join(short[],char,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (endIndex - startIndex \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    final StringBuilder stringBuilder \u003d new StringBuilder();\r\n    for (int i \u003d startIndex; i \u003c endIndex; i++) {\r\n        stringBuilder.append(array[i]).append(delimiter);\r\n    }\r\n    return stringBuilder.substring(0, stringBuilder.length() - 1);\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i2 \u003e 0) → B3 | else → B4",
      "B5 : If(i7 \u003e\u003d i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: short[]\n  c6 :\u003d @parameter1: char\n  i1 :\u003d @parameter2: int\n  i0 :\u003d @parameter3: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i2 \u003d i0 - i1\n  if ($i2 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r4 \u003d StringBuilder\n  new StringBuilder()\n  i7 \u003d i1\n}",
      "B5 {\n  if (i7 \u003e\u003d i0) goto B6 else B7\n}",
      "B6 {\n  $s5 \u003d r0[i7]\n  $i8 \u003d (int) $s5\n  $r3 \u003d $r4.append($i8)\n  $r3.append(c6)\n  i7 \u003d i7 + 1\n  goto B5\n}",
      "B7 {\n  $i3 \u003d $r4.length()\n  $i4 \u003d $i3 - 1\n  $r2 \u003d $r4.substring(0, $i4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "joinWith",
    "signature": "java.lang.String joinWith(java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    if (array \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Object varargs must not be null\");\r\n    }\r\n    return join(array, delimiter);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  Object[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Object varargs must not be null\")\n  throw $r3\n}",
      "B2 {\n  $r2 \u003d StringUtils.join(r0, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#join(...2)",
        "body": "{\r\n    if (array \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return join(array, delimiter, 0, array.length);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "lastIndexOf",
    "signature": "int lastIndexOf(java.lang.CharSequence,java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (seq \u003d\u003d null) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    return CharSequenceUtils.lastIndexOf(seq, searchSeq, seq.length());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i3 \u003d (int) -1\n  return\n}",
      "B2 {\n  $i0 \u003d r0.length()\n  $i1 \u003d CharSequenceUtils.lastIndexOf(r0, r1, $i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "lastIndexOf",
    "signature": "int lastIndexOf(java.lang.CharSequence,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(seq)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    return CharSequenceUtils.lastIndexOf(seq, searchChar, seq.length());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  i0 :\u003d @parameter1: int\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $i4 \u003d (int) -1\n  return\n}",
      "B2 {\n  $i1 \u003d r0.length()\n  $i2 \u003d CharSequenceUtils.lastIndexOf(r0, i0, $i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "lastIndexOf",
    "signature": "int lastIndexOf(java.lang.CharSequence,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(seq)) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    return CharSequenceUtils.lastIndexOf(seq, searchChar, startPos);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $i4 \u003d (int) -1\n  return\n}",
      "B2 {\n  $i2 \u003d CharSequenceUtils.lastIndexOf(r0, i0, i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "lastIndexOfAny",
    "signature": "int lastIndexOfAny(java.lang.CharSequence,java.lang.CharSequence[])",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null || searchStrs \u003d\u003d null) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    int ret \u003d INDEX_NOT_FOUND;\r\n    int tmp;\r\n    for (final CharSequence search : searchStrs) {\r\n        if (search \u003d\u003d null) {\r\n            continue;\r\n        }\r\n        tmp \u003d CharSequenceUtils.lastIndexOf(str, search, str.length());\r\n        if (tmp \u003e ret) {\r\n            ret \u003d tmp;\r\n        }\r\n    }\r\n    return ret;\r\n}",
    "nodes": 11,
    "edges": 14,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r1 !\u003d null) → B2 | else → B3",
      "B4 : If(i4 \u003e\u003d i0) → B5 | else → B10",
      "B5 : If(r2 !\u003d null) → B6 | else → B7",
      "B7 : If(i2 \u003c\u003d i3) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $i6 \u003d (int) -1\n  return\n}",
      "B3 {\n  $i8 \u003d (int) -1\n  i3 \u003d $i8\n  i0 \u003d lengthof r1\n  i4 \u003d 0\n}",
      "B4 {\n  if (i4 \u003e\u003d i0) goto B5 else B10\n}",
      "B5 {\n  r2 \u003d r1[i4]\n  if (r2 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  goto B9\n}",
      "B7 {\n  $i1 \u003d r0.length()\n  i2 \u003d CharSequenceUtils.lastIndexOf(r0, r2, $i1)\n  if (i2 \u003c\u003d i3) goto B8 else B9\n}",
      "B8 {\n  i3 \u003d i2\n}",
      "B9 {\n  i4 \u003d i4 + 1\n  goto B4\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B10",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B4",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "lastIndexOfIgnoreCase",
    "signature": "int lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null || searchStr \u003d\u003d null) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    return lastIndexOfIgnoreCase(str, searchStr, str.length());\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r1 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $i3 \u003d (int) -1\n  return\n}",
      "B3 {\n  $i0 \u003d r0.length()\n  $i1 \u003d StringUtils.lastIndexOfIgnoreCase(r0, r1, $i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#lastIndexOfIgnoreCase(...3)",
        "body": "{\r\n    if (str \u003d\u003d null || searchStr \u003d\u003d null) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    final int searchStrLength \u003d searchStr.length();\r\n    final int strLength \u003d str.length();\r\n    if (startPos \u003e strLength - searchStrLength) {\r\n        startPos \u003d strLength - searchStrLength;\r\n    }\r\n    if (startPos \u003c 0) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    if (searchStrLength \u003d\u003d 0) {\r\n        return startPos;\r\n    }\r\n    for (int i \u003d startPos; i \u003e\u003d 0; i--) {\r\n        if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStrLength)) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "lastIndexOfIgnoreCase",
    "signature": "int lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null || searchStr \u003d\u003d null) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    final int searchStrLength \u003d searchStr.length();\r\n    final int strLength \u003d str.length();\r\n    if (startPos \u003e strLength - searchStrLength) {\r\n        startPos \u003d strLength - searchStrLength;\r\n    }\r\n    if (startPos \u003c 0) {\r\n        return INDEX_NOT_FOUND;\r\n    }\r\n    if (searchStrLength \u003d\u003d 0) {\r\n        return startPos;\r\n    }\r\n    for (int i \u003d startPos; i \u003e\u003d 0; i--) {\r\n        if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStrLength)) {\r\n            return i;\r\n        }\r\n    }\r\n    return INDEX_NOT_FOUND;\r\n}",
    "nodes": 15,
    "edges": 17,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r1 !\u003d null) → B2 | else → B3",
      "B3 : If(i3 \u003c\u003d $i2) → B4 | else → B5",
      "B5 : If(i3 \u003e\u003d 0) → B6 | else → B7",
      "B7 : If(i0 !\u003d 0) → B8 | else → B9",
      "B10 : If(i4 \u003c 0) → B11 | else → B14",
      "B11 : If($z0 \u003d\u003d false) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence\n  i3 :\u003d @parameter2: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $i6 \u003d (int) -1\n  return\n}",
      "B3 {\n  i0 \u003d r1.length()\n  i1 \u003d r0.length()\n  $i2 \u003d i1 - i0\n  if (i3 \u003c\u003d $i2) goto B4 else B5\n}",
      "B4 {\n  i3 \u003d i1 - i0\n}",
      "B5 {\n  if (i3 \u003e\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $i8 \u003d (int) -1\n  return\n}",
      "B7 {\n  if (i0 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  return\n}",
      "B9 {\n  i4 \u003d i3\n}",
      "B10 {\n  if (i4 \u003c 0) goto B11 else B14\n}",
      "B11 {\n  $z0 \u003d CharSequenceUtils.regionMatches(r0, 1, i4, r1, 0, i0)\n  if ($z0 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  return\n}",
      "B13 {\n  $i10 \u003d (int) -1\n  i4 \u003d i4 + $i10\n  goto B10\n}",
      "B14 {\n  $i12 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B10",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "left",
    "signature": "java.lang.String left(java.lang.String,int)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (len \u003c 0) {\r\n        return EMPTY;\r\n    }\r\n    if (str.length() \u003c\u003d len) {\r\n        return str;\r\n    }\r\n    return str.substring(0, len);\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003e\u003d 0) → B3 | else → B4",
      "B4 : If($i1 \u003e i0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  String\n  i0 :\u003d @parameter1: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (i0 \u003e\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i1 \u003d r0.length()\n  if ($i1 \u003e i0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r1 \u003d r0.substring(0, i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "leftPad",
    "signature": "java.lang.String leftPad(java.lang.String,int,char)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final int pads \u003d size - str.length();\r\n    if (pads \u003c\u003d 0) {\r\n        // returns original String when possible\r\n        return str;\r\n    }\r\n    if (pads \u003e PAD_LIMIT) {\r\n        return leftPad(str, size, String.valueOf(padChar));\r\n    }\r\n    return repeat(padChar, pads).concat(str);\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i2 \u003e 0) → B3 | else → B4",
      "B4 : If(i2 \u003c\u003d 8192) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  String\n  i0 :\u003d @parameter1: int\n  c3 :\u003d @parameter2: char\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d r0.length()\n  i2 \u003d i0 - $i1\n  if (i2 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (i2 \u003c\u003d 8192) goto B5 else B6\n}",
      "B5 {\n  $r3 \u003d String.valueOf(c3)\n  $r4 \u003d StringUtils.leftPad(r0, i0, $r3)\n  return\n}",
      "B6 {\n  $r1 \u003d StringUtils.repeat(c3, i2)\n  $r2 \u003d $r1.concat(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#repeat(...2)",
        "body": "{\r\n    if (repeat \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    return new String(ArrayFill.fill(new char[repeat], ch));\r\n}"
      },
      {
        "name": "StringUtils#leftPad(...3)",
        "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final int pads \u003d size - str.length();\r\n    if (pads \u003c\u003d 0) {\r\n        // returns original String when possible\r\n        return str;\r\n    }\r\n    if (pads \u003e PAD_LIMIT) {\r\n        return leftPad(str, size, String.valueOf(padChar));\r\n    }\r\n    return repeat(padChar, pads).concat(str);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "leftPad",
    "signature": "java.lang.String leftPad(java.lang.String,int,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (isEmpty(padStr)) {\r\n        padStr \u003d SPACE;\r\n    }\r\n    final int padLen \u003d padStr.length();\r\n    final int strLen \u003d str.length();\r\n    final int pads \u003d size - strLen;\r\n    if (pads \u003c\u003d 0) {\r\n        // returns original String when possible\r\n        return str;\r\n    }\r\n    if (padLen \u003d\u003d 1 \u0026\u0026 pads \u003c\u003d PAD_LIMIT) {\r\n        return leftPad(str, size, padStr.charAt(0));\r\n    }\r\n    if (pads \u003d\u003d padLen) {\r\n        return padStr.concat(str);\r\n    }\r\n    if (pads \u003c padLen) {\r\n        return padStr.substring(0, pads).concat(str);\r\n    }\r\n    final char[] padding \u003d new char[pads];\r\n    final char[] padChars \u003d padStr.toCharArray();\r\n    for (int i \u003d 0; i \u003c pads; i++) {\r\n        padding[i] \u003d padChars[i % padLen];\r\n    }\r\n    return new String(padding).concat(str);\r\n}",
    "nodes": 17,
    "edges": 19,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($i6 \u003e 0) → B5 | else → B6",
      "B6 : If($i4 !\u003d 1) → B7 | else → B9",
      "B7 : If($i6 \u003e 8192) → B8 | else → B9",
      "B9 : If($i6 !\u003d $i4) → B10 | else → B11",
      "B11 : If($i6 \u003e\u003d $i4) → B12 | else → B13",
      "B14 : If(i7 \u003e\u003d $i6) → B15 | else → B16"
    ],
    "blockList": [
      "B0 {\n  String\n  i0 :\u003d @parameter1: int\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d StringUtils.isEmpty(r9)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  r9 \u003d \" \"\n}",
      "B4 {\n  $i4 \u003d r9.length()\n  $i5 \u003d r0.length()\n  $i6 \u003d i0 - $i5\n  if ($i6 \u003e 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  if ($i4 !\u003d 1) goto B7 else B9\n}",
      "B7 {\n  if ($i6 \u003e 8192) goto B8 else B9\n}",
      "B8 {\n  $c3 \u003d r9.charAt(0)\n  $r8 \u003d StringUtils.leftPad(r0, i0, $c3)\n  return\n}",
      "B9 {\n  if ($i6 !\u003d $i4) goto B10 else B11\n}",
      "B10 {\n  $r7 \u003d r9.concat(r0)\n  return\n}",
      "B11 {\n  if ($i6 \u003e\u003d $i4) goto B12 else B13\n}",
      "B12 {\n  $r5 \u003d r9.substring(0, $i6)\n  $r6 \u003d $r5.concat(r0)\n  return\n}",
      "B13 {\n  r1 \u003d newarray (char)[$i6]\n  r2 \u003d r9.toCharArray()\n  i7 \u003d 0\n}",
      "B14 {\n  if (i7 \u003e\u003d $i6) goto B15 else B16\n}",
      "B15 {\n  $i1 \u003d i7 % $i4\n  $c2 \u003d r2[$i1]\n  r1[i7] \u003d $c2\n  i7 \u003d i7 + 1\n  goto B14\n}",
      "B16 {\n  $r3 \u003d String\n  new String(r1)\n  $r4 \u003d $r3.concat(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B14",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#leftPad(...3)",
        "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final int pads \u003d size - str.length();\r\n    if (pads \u003c\u003d 0) {\r\n        // returns original String when possible\r\n        return str;\r\n    }\r\n    if (pads \u003e PAD_LIMIT) {\r\n        return leftPad(str, size, String.valueOf(padChar));\r\n    }\r\n    return repeat(padChar, pads).concat(str);\r\n}"
      },
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "length",
    "signature": "int length(java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    return cs \u003d\u003d null ? 0 : cs.length();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d 0\n  goto B3\n}",
      "B2 {\n  $i0 \u003d r0.length()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "lowerCase",
    "signature": "java.lang.String lowerCase(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return str.toLowerCase();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.toLowerCase()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "lowerCase",
    "signature": "java.lang.String lowerCase(java.lang.String,java.util.Locale)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return str.toLowerCase(LocaleUtils.toLocale(locale));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  Locale\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d LocaleUtils.toLocale(r1)\n  $r3 \u003d r0.toLowerCase($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "mid",
    "signature": "java.lang.String mid(java.lang.String,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (len \u003c 0 || pos \u003e str.length()) {\r\n        return EMPTY;\r\n    }\r\n    if (pos \u003c 0) {\r\n        pos \u003d 0;\r\n    }\r\n    if (str.length() \u003c\u003d pos + len) {\r\n        return str.substring(pos);\r\n    }\r\n    return str.substring(pos, pos + len);\r\n}",
    "nodes": 10,
    "edges": 11,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003c 0) → B3 | else → B4",
      "B3 : If(i5 \u003c\u003d $i1) → B4 | else → B5",
      "B5 : If(i5 \u003e\u003d 0) → B6 | else → B7",
      "B7 : If($i3 \u003e $i2) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  String\n  i5 :\u003d @parameter1: int\n  i0 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (i0 \u003c 0) goto B3 else B4\n}",
      "B3 {\n  $i1 \u003d r0.length()\n  if (i5 \u003c\u003d $i1) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  if (i5 \u003e\u003d 0) goto B6 else B7\n}",
      "B6 {\n  i5 \u003d 0\n}",
      "B7 {\n  $i3 \u003d r0.length()\n  $i2 \u003d i5 + i0\n  if ($i3 \u003e $i2) goto B8 else B9\n}",
      "B8 {\n  $r2 \u003d r0.substring(i5)\n  return\n}",
      "B9 {\n  $i4 \u003d i5 + i0\n  $r1 \u003d r0.substring(i5, $i4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "normalizeSpace",
    "signature": "java.lang.String normalizeSpace(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    // LANG-1020: Improved performance significantly by normalizing manually instead of using regex\r\n    // See https://github.com/librucha/commons-lang-normalizespaces-benchmark for performance test\r\n    if (isEmpty(str)) {\r\n        return str;\r\n    }\r\n    final int size \u003d str.length();\r\n    final char[] newChars \u003d new char[size];\r\n    int count \u003d 0;\r\n    int whitespacesCount \u003d 0;\r\n    boolean startWhitespaces \u003d true;\r\n    for (int i \u003d 0; i \u003c size; i++) {\r\n        final char actualChar \u003d str.charAt(i);\r\n        final boolean isWhitespace \u003d Character.isWhitespace(actualChar);\r\n        if (isWhitespace) {\r\n            if (whitespacesCount \u003d\u003d 0 \u0026\u0026 !startWhitespaces) {\r\n                newChars[count++] \u003d SPACE.charAt(0);\r\n            }\r\n            whitespacesCount++;\r\n        } else {\r\n            startWhitespaces \u003d false;\r\n            newChars[count++] \u003d actualChar \u003d\u003d 160 ? 32 : actualChar;\r\n            whitespacesCount \u003d 0;\r\n        }\r\n    }\r\n    if (startWhitespaces) {\r\n        return EMPTY;\r\n    }\r\n    return new String(newChars, 0, count - (whitespacesCount \u003e 0 ? 1 : 0)).trim();\r\n}",
    "nodes": 20,
    "edges": 25,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If(i9 \u003e\u003d i0) → B4 | else → B14",
      "B4 : If(z1 \u003d\u003d false) → B5 | else → B9",
      "B5 : If(i8 !\u003d 0) → B6 | else → B8",
      "B6 : If(z5 !\u003d 0) → B7 | else → B8",
      "B9 : If($i11 !\u003d 160) → B10 | else → B11",
      "B14 : If(z4 \u003d\u003d false) → B15 | else → B16",
      "B16 : If(i8 \u003c\u003d 0) → B17 | else → B18"
    ],
    "blockList": [
      "B0 {\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d r0.length()\n  r1 \u003d newarray (char)[i0]\n  i7 \u003d 0\n  i8 \u003d 0\n  z2 \u003d 1\n  z5 \u003d 1\n  z4 \u003d 1\n  i9 \u003d 0\n}",
      "B3 {\n  if (i9 \u003e\u003d i0) goto B4 else B14\n}",
      "B4 {\n  c3 \u003d r0.charAt(i9)\n  z1 \u003d Character.isWhitespace(c3)\n  if (z1 \u003d\u003d false) goto B5 else B9\n}",
      "B5 {\n  if (i8 !\u003d 0) goto B6 else B8\n}",
      "B6 {\n  if (z5 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $i5 \u003d i7\n  i7 \u003d i7 + 1\n  $r4 \u003d \" \"\n  $c6 \u003d $r4.charAt(0)\n  r1[$i5] \u003d $c6\n}",
      "B8 {\n  i8 \u003d i8 + 1\n  goto B13\n}",
      "B9 {\n  z2 \u003d 0\n  z5 \u003d 0\n  z4 \u003d 0\n  $i4 \u003d i7\n  i7 \u003d i7 + 1\n  $i11 \u003d (int) c3\n  if ($i11 !\u003d 160) goto B10 else B11\n}",
      "B10 {\n  $c10 \u003d 32\n  goto B12\n}",
      "B11 {\n  $c10 \u003d c3\n}",
      "B12 {\n  r1[$i4] \u003d $c10\n  i8 \u003d 0\n}",
      "B13 {\n  i9 \u003d i9 + 1\n  goto B3\n}",
      "B14 {\n  if (z4 \u003d\u003d false) goto B15 else B16\n}",
      "B15 {\n  return\n}",
      "B16 {\n  $r5 \u003d String\n  $i2 \u003d i7\n  if (i8 \u003c\u003d 0) goto B17 else B18\n}",
      "B17 {\n  $z3 \u003d 1\n  goto B19\n}",
      "B18 {\n  $z3 \u003d 0\n}",
      "B19 {\n  $i1 \u003d $i2 - $z3\n  new String(r1, 0, $i1)\n  $r3 \u003d $r5.trim()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B14",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B13",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B13 --\u003e B3",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "overlay",
    "signature": "java.lang.String overlay(java.lang.String,java.lang.String,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (overlay \u003d\u003d null) {\r\n        overlay \u003d EMPTY;\r\n    }\r\n    final int len \u003d str.length();\r\n    if (start \u003c 0) {\r\n        start \u003d 0;\r\n    }\r\n    if (start \u003e len) {\r\n        start \u003d len;\r\n    }\r\n    if (end \u003c 0) {\r\n        end \u003d 0;\r\n    }\r\n    if (end \u003e len) {\r\n        end \u003d len;\r\n    }\r\n    if (start \u003e end) {\r\n        final int temp \u003d start;\r\n        start \u003d end;\r\n        end \u003d temp;\r\n    }\r\n    return str.substring(0, start) + overlay + str.substring(end);\r\n}",
    "nodes": 15,
    "edges": 20,
    "cc": 7,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r8 !\u003d null) → B3 | else → B4",
      "B4 : If(i2 \u003e\u003d 0) → B5 | else → B6",
      "B6 : If(i2 \u003c\u003d $i1) → B7 | else → B8",
      "B8 : If(i3 \u003e\u003d 0) → B9 | else → B10",
      "B10 : If(i3 \u003c\u003d $i1) → B11 | else → B12",
      "B12 : If(i2 \u003c\u003d i3) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  i2 :\u003d @parameter2: int\n  i3 :\u003d @parameter3: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r8 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  r8 \u003d \"\"\n}",
      "B4 {\n  $i1 \u003d r0.length()\n  if (i2 \u003e\u003d 0) goto B5 else B6\n}",
      "B5 {\n  i2 \u003d 0\n}",
      "B6 {\n  if (i2 \u003c\u003d $i1) goto B7 else B8\n}",
      "B7 {\n  i2 \u003d $i1\n}",
      "B8 {\n  if (i3 \u003e\u003d 0) goto B9 else B10\n}",
      "B9 {\n  i3 \u003d 0\n}",
      "B10 {\n  if (i3 \u003c\u003d $i1) goto B11 else B12\n}",
      "B11 {\n  i3 \u003d $i1\n}",
      "B12 {\n  if (i2 \u003c\u003d i3) goto B13 else B14\n}",
      "B13 {\n  i0 \u003d i2\n  i2 \u003d i3\n  i3 \u003d i0\n}",
      "B14 {\n  $r1 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d r0.substring(0, i2)\n  $r3 \u003d $r1.append($r2)\n  $r5 \u003d $r3.append(r8)\n  $r4 \u003d r0.substring(i3)\n  $r6 \u003d $r5.append($r4)\n  $r7 \u003d $r6.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "remove",
    "signature": "java.lang.String remove(java.lang.String,char)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str) || str.indexOf(remove) \u003d\u003d INDEX_NOT_FOUND) {\r\n        return str;\r\n    }\r\n    final char[] chars \u003d str.toCharArray();\r\n    int pos \u003d 0;\r\n    for (int i \u003d 0; i \u003c chars.length; i++) {\r\n        if (chars[i] !\u003d remove) {\r\n            chars[pos++] \u003d chars[i];\r\n        }\r\n    }\r\n    return new String(chars, 0, pos);\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($i1 !\u003d $i10) → B2 | else → B3",
      "B4 : If(i7 \u003e\u003d $i2) → B5 | else → B8",
      "B5 : If($i11 \u003d\u003d $i12) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  String\n  c0 :\u003d @parameter1: char\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $i8 \u003d (int) c0\n  $i1 \u003d r0.indexOf($i8)\n  $i10 \u003d (int) -1\n  if ($i1 !\u003d $i10) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  r1 \u003d r0.toCharArray()\n  i6 \u003d 0\n  i7 \u003d 0\n}",
      "B4 {\n  $i2 \u003d lengthof r1\n  if (i7 \u003e\u003d $i2) goto B5 else B8\n}",
      "B5 {\n  $c3 \u003d r1[i7]\n  $i11 \u003d (int) $c3\n  $i12 \u003d (int) c0\n  if ($i11 \u003d\u003d $i12) goto B6 else B7\n}",
      "B6 {\n  $i4 \u003d i6\n  i6 \u003d i6 + 1\n  $c5 \u003d r1[i7]\n  r1[$i4] \u003d $c5\n}",
      "B7 {\n  i7 \u003d i7 + 1\n  goto B4\n}",
      "B8 {\n  $r3 \u003d String\n  new String(r1, 0, i6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B4",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "remove",
    "signature": "java.lang.String remove(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str) || isEmpty(remove)) {\r\n        return str;\r\n    }\r\n    return replace(str, remove, EMPTY, -1);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d StringUtils.isEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $i1 \u003d (int) -1\n  $r2 \u003d StringUtils.replace(r0, r1, \"\", $i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      },
      {
        "name": "StringUtils#replace(...4)",
        "body": "{\r\n    return replace(text, searchString, replacement, max, false);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "removeEnd",
    "signature": "java.lang.String removeEnd(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str) || isEmpty(remove)) {\r\n        return str;\r\n    }\r\n    if (str.endsWith(remove)) {\r\n        return str.substring(0, str.length() - remove.length());\r\n    }\r\n    return str;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B3 : If($z2 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d StringUtils.isEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $z2 \u003d r0.endsWith(r1)\n  if ($z2 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $i1 \u003d r0.length()\n  $i0 \u003d r1.length()\n  $i2 \u003d $i1 - $i0\n  $r2 \u003d r0.substring(0, $i2)\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "removeEndIgnoreCase",
    "signature": "java.lang.String removeEndIgnoreCase(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str) || isEmpty(remove)) {\r\n        return str;\r\n    }\r\n    if (endsWithIgnoreCase(str, remove)) {\r\n        return str.substring(0, str.length() - remove.length());\r\n    }\r\n    return str;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B3 : If($z2 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d StringUtils.isEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $z2 \u003d StringUtils.endsWithIgnoreCase(r0, r1)\n  if ($z2 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $i1 \u003d r0.length()\n  $i0 \u003d r1.length()\n  $i2 \u003d $i1 - $i0\n  $r2 \u003d r0.substring(0, $i2)\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      },
      {
        "name": "StringUtils#endsWithIgnoreCase(...2)",
        "body": "{\r\n    return endsWith(str, suffix, true);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "removeStart",
    "signature": "java.lang.String removeStart(java.lang.String,char)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str)) {\r\n        return str;\r\n    }\r\n    return str.charAt(0) \u003d\u003d remove ? str.substring(1) : str;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($i2 !\u003d $i3) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  String\n  c0 :\u003d @parameter1: char\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $c1 \u003d r0.charAt(0)\n  $i2 \u003d (int) $c1\n  $i3 \u003d (int) c0\n  if ($i2 !\u003d $i3) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d r0.substring(1)\n  goto B5\n}",
      "B4 {\n  $r1 \u003d r0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "removeStart",
    "signature": "java.lang.String removeStart(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str) || isEmpty(remove)) {\r\n        return str;\r\n    }\r\n    if (str.startsWith(remove)) {\r\n        return str.substring(remove.length());\r\n    }\r\n    return str;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B3 : If($z2 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d StringUtils.isEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $z2 \u003d r0.startsWith(r1)\n  if ($z2 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $i0 \u003d r1.length()\n  $r2 \u003d r0.substring($i0)\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "removeStartIgnoreCase",
    "signature": "java.lang.String removeStartIgnoreCase(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str !\u003d null \u0026\u0026 startsWithIgnoreCase(str, remove)) {\r\n        return str.substring(length(remove));\r\n    }\r\n    return str;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d StringUtils.startsWithIgnoreCase(r0, r1)\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $i0 \u003d StringUtils.length(r1)\n  $r2 \u003d r0.substring($i0)\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#startsWithIgnoreCase(...2)",
        "body": "{\r\n    return startsWith(str, prefix, true);\r\n}"
      },
      {
        "name": "StringUtils#length(...1)",
        "body": "{\r\n    return cs \u003d\u003d null ? 0 : cs.length();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "repeat",
    "signature": "java.lang.String repeat(char,int)",
    "visibility": "public",
    "body": "{\r\n    if (repeat \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    return new String(ArrayFill.fill(new char[repeat], ch));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 \u003e 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  c1 :\u003d @parameter0: char\n  i0 :\u003d @parameter1: int\n  if (i0 \u003e 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r0 \u003d String\n  $r1 \u003d newarray (char)[i0]\n  $r2 \u003d ArrayFill.fill($r1, c1)\n  new String($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "repeat",
    "signature": "java.lang.String repeat(java.lang.String,int)",
    "visibility": "public",
    "body": "{\r\n    // Performance tuned for 2.0 (JDK1.4)\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (repeat \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    final int inputLength \u003d str.length();\r\n    if (repeat \u003d\u003d 1 || inputLength \u003d\u003d 0) {\r\n        return str;\r\n    }\r\n    if (inputLength \u003d\u003d 1 \u0026\u0026 repeat \u003c\u003d PAD_LIMIT) {\r\n        return repeat(str.charAt(0), repeat);\r\n    }\r\n    final int outputLength \u003d inputLength * repeat;\r\n    switch(inputLength) {\r\n        case 1:\r\n            return repeat(str.charAt(0), repeat);\r\n        case 2:\r\n            final char ch0 \u003d str.charAt(0);\r\n            final char ch1 \u003d str.charAt(1);\r\n            final char[] output2 \u003d new char[outputLength];\r\n            for (int i \u003d repeat * 2 - 2; i \u003e\u003d 0; i--, i--) {\r\n                output2[i] \u003d ch0;\r\n                output2[i + 1] \u003d ch1;\r\n            }\r\n            return new String(output2);\r\n        default:\r\n            final StringBuilder buf \u003d new StringBuilder(outputLength);\r\n            for (int i \u003d 0; i \u003c repeat; i++) {\r\n                buf.append(str);\r\n            }\r\n            return buf.toString();\r\n    }\r\n}",
    "nodes": 20,
    "edges": 23,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003e 0) → B3 | else → B4",
      "B4 : If(i0 \u003d\u003d 1) → B5 | else → B6",
      "B5 : If(i1 !\u003d 0) → B6 | else → B7",
      "B7 : If(i1 !\u003d 1) → B8 | else → B10",
      "B8 : If(i0 \u003e 8192) → B9 | else → B10",
      "B10 : If(switch-on i1) → B11 | else → B12",
      "B13 : If(i9 \u003c 0) → B14 | else → B15",
      "B17 : If(i11 \u003e\u003d i0) → B18 | else → B19"
    ],
    "blockList": [
      "B0 {\n  String\n  i0 :\u003d @parameter1: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (i0 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i1 \u003d r0.length()\n  if (i0 \u003d\u003d 1) goto B5 else B6\n}",
      "B5 {\n  if (i1 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  if (i1 !\u003d 1) goto B8 else B10\n}",
      "B8 {\n  if (i0 \u003e 8192) goto B9 else B10\n}",
      "B9 {\n  $c8 \u003d r0.charAt(0)\n  $r6 \u003d StringUtils.repeat($c8, i0)\n  return\n}",
      "B10 {\n  $i7 \u003d i1 * i0\n  StringBuilder; }\n}",
      "B11 {\n  $c6 \u003d r0.charAt(0)\n  $r3 \u003d StringUtils.repeat($c6, i0)\n  return\n}",
      "B12 {\n  c2 \u003d r0.charAt(0)\n  c3 \u003d r0.charAt(1)\n  r1 \u003d newarray (char)[$i7]\n  $i4 \u003d i0 * 2\n  i9 \u003d $i4 - 2\n}",
      "B13 {\n  if (i9 \u003c 0) goto B14 else B15\n}",
      "B14 {\n  r1[i9] \u003d c2\n  $i5 \u003d i9 + 1\n  r1[$i5] \u003d c3\n  $i13 \u003d (int) -1\n  i10 \u003d i9 + $i13\n  $i15 \u003d (int) -1\n  i9 \u003d i10 + $i15\n  goto B13\n}",
      "B15 {\n  $r7 \u003d String\n  new String(r1)\n  return\n}",
      "B16 {\n  $r8 \u003d StringBuilder\n  new StringBuilder($i7)\n  i11 \u003d 0\n}",
      "B17 {\n  if (i11 \u003e\u003d i0) goto B18 else B19\n}",
      "B18 {\n  $r8.append(r0)\n  i11 \u003d i11 + 1\n  goto B17\n}",
      "B19 {\n  $r5 \u003d $r8.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B10 --\u003e B16",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B13",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B17",
      "B19 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#repeat(...2)",
        "body": "{\r\n    if (repeat \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    return new String(ArrayFill.fill(new char[repeat], ch));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "repeat",
    "signature": "java.lang.String repeat(java.lang.String,java.lang.String,int)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null || separator \u003d\u003d null) {\r\n        return repeat(str, repeat);\r\n    }\r\n    // given that repeat(String, int) is quite optimized, better to rely on it than try and splice this into it\r\n    final String result \u003d repeat(str + separator, repeat);\r\n    return removeEnd(result, separator);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r2 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  i0 :\u003d @parameter2: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r2 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d StringUtils.repeat(r0, i0)\n  return\n}",
      "B3 {\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  $r4 \u003d $r3.append(r0)\n  $r5 \u003d $r4.append(r2)\n  $r6 \u003d $r5.toString()\n  r7 \u003d StringUtils.repeat($r6, i0)\n  $r8 \u003d StringUtils.removeEnd(r7, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#repeat(...2)",
        "body": "{\r\n    if (repeat \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    return new String(ArrayFill.fill(new char[repeat], ch));\r\n}"
      },
      {
        "name": "StringUtils#removeEnd(...2)",
        "body": "{\r\n    if (isEmpty(str) || isEmpty(remove)) {\r\n        return str;\r\n    }\r\n    if (str.endsWith(remove)) {\r\n        return str.substring(0, str.length() - remove.length());\r\n    }\r\n    return str;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "replaceChars",
    "signature": "java.lang.String replaceChars(java.lang.String,char,char)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return str.replace(searchChar, replaceChar);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  c0 :\u003d @parameter1: char\n  c1 :\u003d @parameter2: char\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.replace(c0, c1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "replaceChars",
    "signature": "java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str) || isEmpty(searchChars)) {\r\n        return str;\r\n    }\r\n    if (replaceChars \u003d\u003d null) {\r\n        replaceChars \u003d EMPTY;\r\n    }\r\n    boolean modified \u003d false;\r\n    final int replaceCharsLength \u003d replaceChars.length();\r\n    final int strLength \u003d str.length();\r\n    final StringBuilder buf \u003d new StringBuilder(strLength);\r\n    for (int i \u003d 0; i \u003c strLength; i++) {\r\n        final char ch \u003d str.charAt(i);\r\n        final int index \u003d searchChars.indexOf(ch);\r\n        if (index \u003e\u003d 0) {\r\n            modified \u003d true;\r\n            if (index \u003c replaceCharsLength) {\r\n                buf.append(replaceChars.charAt(index));\r\n            }\r\n        } else {\r\n            buf.append(ch);\r\n        }\r\n    }\r\n    if (modified) {\r\n        return buf.toString();\r\n    }\r\n    return str;\r\n}",
    "nodes": 15,
    "edges": 19,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B3 : If(r4 !\u003d null) → B4 | else → B5",
      "B6 : If(i5 \u003e\u003d $i4) → B7 | else → B12",
      "B7 : If(i1 \u003c 0) → B8 | else → B10",
      "B8 : If(i1 \u003e\u003d $i3) → B9 | else → B11",
      "B12 : If(z2 \u003d\u003d false) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d StringUtils.isEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  if (r4 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  r4 \u003d \"\"\n}",
      "B5 {\n  z2 \u003d 0\n  $i3 \u003d r4.length()\n  $i4 \u003d r0.length()\n  $r5 \u003d StringBuilder\n  new StringBuilder($i4)\n  i5 \u003d 0\n}",
      "B6 {\n  if (i5 \u003e\u003d $i4) goto B7 else B12\n}",
      "B7 {\n  c0 \u003d r0.charAt(i5)\n  $i6 \u003d (int) c0\n  i1 \u003d r1.indexOf($i6)\n  if (i1 \u003c 0) goto B8 else B10\n}",
      "B8 {\n  z2 \u003d 1\n  if (i1 \u003e\u003d $i3) goto B9 else B11\n}",
      "B9 {\n  $c2 \u003d r4.charAt(i1)\n  $r5.append($c2)\n  goto B11\n}",
      "B10 {\n  $r5.append(c0)\n}",
      "B11 {\n  i5 \u003d i5 + 1\n  goto B6\n}",
      "B12 {\n  if (z2 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  $r3 \u003d $r5.toString()\n  return\n}",
      "B14 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B12",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B6",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "reverse",
    "signature": "java.lang.String reverse(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return new StringBuilder(str).reverse().toString();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d StringBuilder\n  new StringBuilder(r0)\n  $r2 \u003d $r1.reverse()\n  $r3 \u003d $r2.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "right",
    "signature": "java.lang.String right(java.lang.String,int)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (len \u003c 0) {\r\n        return EMPTY;\r\n    }\r\n    if (str.length() \u003c\u003d len) {\r\n        return str;\r\n    }\r\n    return str.substring(str.length() - len);\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003e\u003d 0) → B3 | else → B4",
      "B4 : If($i1 \u003e i0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  String\n  i0 :\u003d @parameter1: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (i0 \u003e\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i1 \u003d r0.length()\n  if ($i1 \u003e i0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $i2 \u003d r0.length()\n  $i3 \u003d $i2 - i0\n  $r1 \u003d r0.substring($i3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "rightPad",
    "signature": "java.lang.String rightPad(java.lang.String,int,char)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final int pads \u003d size - str.length();\r\n    if (pads \u003c\u003d 0) {\r\n        // returns original String when possible\r\n        return str;\r\n    }\r\n    if (pads \u003e PAD_LIMIT) {\r\n        return rightPad(str, size, String.valueOf(padChar));\r\n    }\r\n    return str.concat(repeat(padChar, pads));\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i2 \u003e 0) → B3 | else → B4",
      "B4 : If(i2 \u003c\u003d 8192) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  String\n  i0 :\u003d @parameter1: int\n  c3 :\u003d @parameter2: char\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d r0.length()\n  i2 \u003d i0 - $i1\n  if (i2 \u003e 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (i2 \u003c\u003d 8192) goto B5 else B6\n}",
      "B5 {\n  $r3 \u003d String.valueOf(c3)\n  $r4 \u003d StringUtils.rightPad(r0, i0, $r3)\n  return\n}",
      "B6 {\n  $r1 \u003d StringUtils.repeat(c3, i2)\n  $r2 \u003d r0.concat($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#repeat(...2)",
        "body": "{\r\n    if (repeat \u003c\u003d 0) {\r\n        return EMPTY;\r\n    }\r\n    return new String(ArrayFill.fill(new char[repeat], ch));\r\n}"
      },
      {
        "name": "StringUtils#rightPad(...3)",
        "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final int pads \u003d size - str.length();\r\n    if (pads \u003c\u003d 0) {\r\n        // returns original String when possible\r\n        return str;\r\n    }\r\n    if (pads \u003e PAD_LIMIT) {\r\n        return rightPad(str, size, String.valueOf(padChar));\r\n    }\r\n    return str.concat(repeat(padChar, pads));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "rightPad",
    "signature": "java.lang.String rightPad(java.lang.String,int,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (isEmpty(padStr)) {\r\n        padStr \u003d SPACE;\r\n    }\r\n    final int padLen \u003d padStr.length();\r\n    final int strLen \u003d str.length();\r\n    final int pads \u003d size - strLen;\r\n    if (pads \u003c\u003d 0) {\r\n        // returns original String when possible\r\n        return str;\r\n    }\r\n    if (padLen \u003d\u003d 1 \u0026\u0026 pads \u003c\u003d PAD_LIMIT) {\r\n        return rightPad(str, size, padStr.charAt(0));\r\n    }\r\n    if (pads \u003d\u003d padLen) {\r\n        return str.concat(padStr);\r\n    }\r\n    if (pads \u003c padLen) {\r\n        return str.concat(padStr.substring(0, pads));\r\n    }\r\n    final char[] padding \u003d new char[pads];\r\n    final char[] padChars \u003d padStr.toCharArray();\r\n    for (int i \u003d 0; i \u003c pads; i++) {\r\n        padding[i] \u003d padChars[i % padLen];\r\n    }\r\n    return str.concat(new String(padding));\r\n}",
    "nodes": 17,
    "edges": 19,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($i6 \u003e 0) → B5 | else → B6",
      "B6 : If($i4 !\u003d 1) → B7 | else → B9",
      "B7 : If($i6 \u003e 8192) → B8 | else → B9",
      "B9 : If($i6 !\u003d $i4) → B10 | else → B11",
      "B11 : If($i6 \u003e\u003d $i4) → B12 | else → B13",
      "B14 : If(i7 \u003e\u003d $i6) → B15 | else → B16"
    ],
    "blockList": [
      "B0 {\n  String\n  i0 :\u003d @parameter1: int\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d StringUtils.isEmpty(r9)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  r9 \u003d \" \"\n}",
      "B4 {\n  $i4 \u003d r9.length()\n  $i5 \u003d r0.length()\n  $i6 \u003d i0 - $i5\n  if ($i6 \u003e 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  if ($i4 !\u003d 1) goto B7 else B9\n}",
      "B7 {\n  if ($i6 \u003e 8192) goto B8 else B9\n}",
      "B8 {\n  $c3 \u003d r9.charAt(0)\n  $r8 \u003d StringUtils.rightPad(r0, i0, $c3)\n  return\n}",
      "B9 {\n  if ($i6 !\u003d $i4) goto B10 else B11\n}",
      "B10 {\n  $r7 \u003d r0.concat(r9)\n  return\n}",
      "B11 {\n  if ($i6 \u003e\u003d $i4) goto B12 else B13\n}",
      "B12 {\n  $r5 \u003d r9.substring(0, $i6)\n  $r6 \u003d r0.concat($r5)\n  return\n}",
      "B13 {\n  r1 \u003d newarray (char)[$i6]\n  r2 \u003d r9.toCharArray()\n  i7 \u003d 0\n}",
      "B14 {\n  if (i7 \u003e\u003d $i6) goto B15 else B16\n}",
      "B15 {\n  $i1 \u003d i7 % $i4\n  $c2 \u003d r2[$i1]\n  r1[i7] \u003d $c2\n  i7 \u003d i7 + 1\n  goto B14\n}",
      "B16 {\n  $r3 \u003d String\n  new String(r1)\n  $r4 \u003d r0.concat($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B14",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      },
      {
        "name": "StringUtils#rightPad(...3)",
        "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final int pads \u003d size - str.length();\r\n    if (pads \u003c\u003d 0) {\r\n        // returns original String when possible\r\n        return str;\r\n    }\r\n    if (pads \u003e PAD_LIMIT) {\r\n        return rightPad(str, size, String.valueOf(padChar));\r\n    }\r\n    return str.concat(repeat(padChar, pads));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "rotate",
    "signature": "java.lang.String rotate(java.lang.String,int)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final int strLen \u003d str.length();\r\n    if (shift \u003d\u003d 0 || strLen \u003d\u003d 0 || shift % strLen \u003d\u003d 0) {\r\n        return str;\r\n    }\r\n    final StringBuilder builder \u003d new StringBuilder(strLen);\r\n    final int offset \u003d -(shift % strLen);\r\n    builder.append(substring(str, offset));\r\n    builder.append(substring(str, 0, offset));\r\n    return builder.toString();\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i1 \u003d\u003d false) → B3 | else → B5",
      "B3 : If(i0 \u003d\u003d false) → B4 | else → B5",
      "B4 : If($i2 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  String\n  i1 :\u003d @parameter1: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d r0.length()\n  if (i1 \u003d\u003d false) goto B3 else B5\n}",
      "B3 {\n  if (i0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $i2 \u003d i1 % i0\n  if ($i2 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r1 \u003d StringBuilder\n  new StringBuilder(i0)\n  $i3 \u003d i1 % i0\n  i4 \u003d neg $i3\n  $r2 \u003d StringUtils.substring(r0, i4)\n  $r1.append($r2)\n  $r3 \u003d StringUtils.substring(r0, 0, i4)\n  $r1.append($r3)\n  $r4 \u003d $r1.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#substring(...2)",
        "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // handle negatives, which means last n characters\r\n    if (start \u003c 0) {\r\n        // remember start is negative\r\n        start \u003d str.length() + start;\r\n    }\r\n    if (start \u003c 0) {\r\n        start \u003d 0;\r\n    }\r\n    if (start \u003e str.length()) {\r\n        return EMPTY;\r\n    }\r\n    return str.substring(start);\r\n}"
      },
      {
        "name": "StringUtils#substring(...3)",
        "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // handle negatives\r\n    if (end \u003c 0) {\r\n        // remember end is negative\r\n        end \u003d str.length() + end;\r\n    }\r\n    if (start \u003c 0) {\r\n        // remember start is negative\r\n        start \u003d str.length() + start;\r\n    }\r\n    // check length next\r\n    if (end \u003e str.length()) {\r\n        end \u003d str.length();\r\n    }\r\n    // if start is greater than end, return \"\"\r\n    if (start \u003e end) {\r\n        return EMPTY;\r\n    }\r\n    if (start \u003c 0) {\r\n        start \u003d 0;\r\n    }\r\n    if (end \u003c 0) {\r\n        end \u003d 0;\r\n    }\r\n    return str.substring(start, end);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "startsWithAny",
    "signature": "boolean startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchStrings)) {\r\n        return false;\r\n    }\r\n    for (final CharSequence searchString : searchStrings) {\r\n        if (startsWith(sequence, searchString)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i1 \u003e\u003d i0) → B5 | else → B8",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence[]\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d ArrayUtils.isEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  i0 \u003d lengthof r1\n  i1 \u003d 0\n}",
      "B4 {\n  if (i1 \u003e\u003d i0) goto B5 else B8\n}",
      "B5 {\n  r2 \u003d r1[i1]\n  $z2 \u003d StringUtils.startsWith(r0, r2)\n  if ($z2 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  i1 \u003d i1 + 1\n  goto B4\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B4",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      },
      {
        "name": "StringUtils#startsWith(...2)",
        "body": "{\r\n    return startsWith(str, prefix, false);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "stripAccents",
    "signature": "java.lang.String stripAccents(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(input)) {\r\n        return input;\r\n    }\r\n    final StringBuilder decomposed \u003d new StringBuilder(Normalizer.normalize(input, Normalizer.Form.NFKD));\r\n    convertRemainingAccentCharacters(decomposed);\r\n    return STRIP_ACCENTS_PATTERN.matcher(decomposed).replaceAll(EMPTY);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d StringBuilder\n  $r2 \u003d Normalizer$Form NFKD\u003e\n  $r3 \u003d Normalizer.normalize(r0, $r2)\n  new StringBuilder($r3)\n  StringUtils.convertRemainingAccentCharacters($r1)\n  $r4 \u003d Pattern STRIP_ACCENTS_PATTERN\u003e\n  $r5 \u003d $r4.matcher($r1)\n  $r6 \u003d $r5.replaceAll(\"\")\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      },
      {
        "name": "StringUtils#convertRemainingAccentCharacters(...1)",
        "body": "{\r\n    for (int i \u003d 0; i \u003c decomposed.length(); i++) {\r\n        final char charAt \u003d decomposed.charAt(i);\r\n        switch(charAt) {\r\n            case \u0027\\u0141\u0027:\r\n                decomposed.setCharAt(i, \u0027L\u0027);\r\n                break;\r\n            case \u0027\\u0142\u0027:\r\n                decomposed.setCharAt(i, \u0027l\u0027);\r\n                break;\r\n            // D with stroke\r\n            case \u0027\\u0110\u0027:\r\n                // LATIN CAPITAL LETTER D WITH STROKE\r\n                decomposed.setCharAt(i, \u0027D\u0027);\r\n                break;\r\n            case \u0027\\u0111\u0027:\r\n                // LATIN SMALL LETTER D WITH STROKE\r\n                decomposed.setCharAt(i, \u0027d\u0027);\r\n                break;\r\n            // I with bar\r\n            case \u0027\\u0197\u0027:\r\n                decomposed.setCharAt(i, \u0027I\u0027);\r\n                break;\r\n            case \u0027\\u0268\u0027:\r\n                decomposed.setCharAt(i, \u0027i\u0027);\r\n                break;\r\n            case \u0027\\u1D7B\u0027:\r\n                decomposed.setCharAt(i, \u0027I\u0027);\r\n                break;\r\n            case \u0027\\u1DA4\u0027:\r\n                decomposed.setCharAt(i, \u0027i\u0027);\r\n                break;\r\n            case \u0027\\u1DA7\u0027:\r\n                decomposed.setCharAt(i, \u0027I\u0027);\r\n                break;\r\n            // U with bar\r\n            case \u0027\\u0244\u0027:\r\n                // LATIN CAPITAL LETTER U BAR\r\n                decomposed.setCharAt(i, \u0027U\u0027);\r\n                break;\r\n            case \u0027\\u0289\u0027:\r\n                // LATIN SMALL LETTER U BAR\r\n                decomposed.setCharAt(i, \u0027u\u0027);\r\n                break;\r\n            case \u0027\\u1D7E\u0027:\r\n                // LATIN SMALL CAPITAL LETTER U WITH STROKE\r\n                decomposed.setCharAt(i, \u0027U\u0027);\r\n                break;\r\n            case \u0027\\u1DB6\u0027:\r\n                // MODIFIER LETTER SMALL U BAR\r\n                decomposed.setCharAt(i, \u0027u\u0027);\r\n                break;\r\n            // T with stroke\r\n            case \u0027\\u0166\u0027:\r\n                // LATIN CAPITAL LETTER T WITH STROKE\r\n                decomposed.setCharAt(i, \u0027T\u0027);\r\n                break;\r\n            case \u0027\\u0167\u0027:\r\n                // LATIN SMALL LETTER T WITH STROKE\r\n                decomposed.setCharAt(i, \u0027t\u0027);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "stripAll",
    "signature": "java.lang.String[] stripAll(java.lang.String[],java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    final int strsLen \u003d ArrayUtils.getLength(strs);\r\n    if (strsLen \u003d\u003d 0) {\r\n        return strs;\r\n    }\r\n    final String[] newArr \u003d new String[strsLen];\r\n    Arrays.setAll(newArr, i -\u003e strip(strs[i], stripChars));\r\n    return newArr;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String[]\n  String\n  i0 \u003d ArrayUtils.getLength(r0)\n  if (i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r1 \u003d String)[i0]\n  $r3 \u003d StringUtils$lambda_stripAll_0__167.bootstrap$(r0, r2)\n  Arrays.setAll(r1, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#strip(...2)",
        "body": "{\r\n    str \u003d stripStart(str, stripChars);\r\n    return stripEnd(str, stripChars);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "stripEnd",
    "signature": "java.lang.String stripEnd(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    int end \u003d length(str);\r\n    if (end \u003d\u003d 0) {\r\n        return str;\r\n    }\r\n    if (stripChars \u003d\u003d null) {\r\n        while (end !\u003d 0 \u0026\u0026 Character.isWhitespace(str.charAt(end - 1))) {\r\n            end--;\r\n        }\r\n    } else if (stripChars.isEmpty()) {\r\n        return str;\r\n    } else {\r\n        while (end !\u003d 0 \u0026\u0026 stripChars.indexOf(str.charAt(end - 1)) !\u003d INDEX_NOT_FOUND) {\r\n            end--;\r\n        }\r\n    }\r\n    return str.substring(0, end);\r\n}",
    "nodes": 12,
    "edges": 16,
    "cc": 6,
    "flowSummary": [
      "B0 : If(i5 !\u003d 0) → B1 | else → B2",
      "B2 : If(r1 !\u003d null) → B3 | else → B6",
      "B3 : If(i5 \u003d\u003d false) → B4 | else → B11",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B11",
      "B6 : If($z0 \u003d\u003d false) → B7 | else → B8",
      "B8 : If(i5 \u003d\u003d false) → B9 | else → B11",
      "B9 : If($i2 \u003d\u003d $i10) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  i5 \u003d StringUtils.length(r0)\n  if (i5 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d null) goto B3 else B6\n}",
      "B3 {\n  if (i5 \u003d\u003d false) goto B4 else B11\n}",
      "B4 {\n  $i3 \u003d i5 - 1\n  $c4 \u003d r0.charAt($i3)\n  $z1 \u003d Character.isWhitespace($c4)\n  if ($z1 \u003d\u003d false) goto B5 else B11\n}",
      "B5 {\n  $i7 \u003d (int) -1\n  i5 \u003d i5 + $i7\n  goto B3\n}",
      "B6 {\n  $z0 \u003d r1.isEmpty()\n  if ($z0 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  if (i5 \u003d\u003d false) goto B9 else B11\n}",
      "B9 {\n  $i0 \u003d i5 - 1\n  $c1 \u003d r0.charAt($i0)\n  $i8 \u003d (int) $c1\n  $i2 \u003d r1.indexOf($i8)\n  $i10 \u003d (int) -1\n  if ($i2 \u003d\u003d $i10) goto B10 else B11\n}",
      "B10 {\n  $i12 \u003d (int) -1\n  i5 \u003d i5 + $i12\n  goto B8\n}",
      "B11 {\n  $r2 \u003d r0.substring(0, i5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B11",
      "B4 --\u003e B5",
      "B4 --\u003e B11",
      "B5 --\u003e B3",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B8",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#length(...1)",
        "body": "{\r\n    return cs \u003d\u003d null ? 0 : cs.length();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "stripStart",
    "signature": "java.lang.String stripStart(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    final int strLen \u003d length(str);\r\n    if (strLen \u003d\u003d 0) {\r\n        return str;\r\n    }\r\n    int start \u003d 0;\r\n    if (stripChars \u003d\u003d null) {\r\n        while (start !\u003d strLen \u0026\u0026 Character.isWhitespace(str.charAt(start))) {\r\n            start++;\r\n        }\r\n    } else if (stripChars.isEmpty()) {\r\n        return str;\r\n    } else {\r\n        while (start !\u003d strLen \u0026\u0026 stripChars.indexOf(str.charAt(start)) !\u003d INDEX_NOT_FOUND) {\r\n            start++;\r\n        }\r\n    }\r\n    return str.substring(start);\r\n}",
    "nodes": 12,
    "edges": 16,
    "cc": 6,
    "flowSummary": [
      "B0 : If(i0 !\u003d 0) → B1 | else → B2",
      "B2 : If(r1 !\u003d null) → B3 | else → B6",
      "B3 : If(i4 \u003d\u003d i0) → B4 | else → B11",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B11",
      "B6 : If($z0 \u003d\u003d false) → B7 | else → B8",
      "B8 : If(i4 \u003d\u003d i0) → B9 | else → B11",
      "B9 : If($i2 \u003d\u003d $i7) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  i0 \u003d StringUtils.length(r0)\n  if (i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i4 \u003d 0\n  if (r1 !\u003d null) goto B3 else B6\n}",
      "B3 {\n  if (i4 \u003d\u003d i0) goto B4 else B11\n}",
      "B4 {\n  $c3 \u003d r0.charAt(i4)\n  $z1 \u003d Character.isWhitespace($c3)\n  if ($z1 \u003d\u003d false) goto B5 else B11\n}",
      "B5 {\n  i4 \u003d i4 + 1\n  goto B3\n}",
      "B6 {\n  $z0 \u003d r1.isEmpty()\n  if ($z0 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  if (i4 \u003d\u003d i0) goto B9 else B11\n}",
      "B9 {\n  $c1 \u003d r0.charAt(i4)\n  $i5 \u003d (int) $c1\n  $i2 \u003d r1.indexOf($i5)\n  $i7 \u003d (int) -1\n  if ($i2 \u003d\u003d $i7) goto B10 else B11\n}",
      "B10 {\n  i4 \u003d i4 + 1\n  goto B8\n}",
      "B11 {\n  $r2 \u003d r0.substring(i4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B11",
      "B4 --\u003e B5",
      "B4 --\u003e B11",
      "B5 --\u003e B3",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B8",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#length(...1)",
        "body": "{\r\n    return cs \u003d\u003d null ? 0 : cs.length();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "stripToEmpty",
    "signature": "java.lang.String stripToEmpty(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return str \u003d\u003d null ? EMPTY : strip(str, null);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d \"\"\n  goto B3\n}",
      "B2 {\n  $r1 \u003d StringUtils.strip(r0, null)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#strip(...2)",
        "body": "{\r\n    str \u003d stripStart(str, stripChars);\r\n    return stripEnd(str, stripChars);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "stripToNull",
    "signature": "java.lang.String stripToNull(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    str \u003d strip(str, null);\r\n    // NOSONARLINT str cannot be null here\r\n    return str.isEmpty() ? null : str;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r1 \u003d StringUtils.strip(r0, null)\n  $z0 \u003d r1.isEmpty()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d null\n  goto B5\n}",
      "B4 {\n  $r2 \u003d r1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#strip(...2)",
        "body": "{\r\n    str \u003d stripStart(str, stripChars);\r\n    return stripEnd(str, stripChars);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "substring",
    "signature": "java.lang.String substring(java.lang.String,int)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // handle negatives, which means last n characters\r\n    if (start \u003c 0) {\r\n        // remember start is negative\r\n        start \u003d str.length() + start;\r\n    }\r\n    if (start \u003c 0) {\r\n        start \u003d 0;\r\n    }\r\n    if (start \u003e str.length()) {\r\n        return EMPTY;\r\n    }\r\n    return str.substring(start);\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i2 \u003e\u003d 0) → B3 | else → B4",
      "B4 : If(i2 \u003e\u003d 0) → B5 | else → B6",
      "B6 : If(i2 \u003c\u003d $i0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  String\n  i2 :\u003d @parameter1: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (i2 \u003e\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $i1 \u003d r0.length()\n  i2 \u003d $i1 + i2\n}",
      "B4 {\n  if (i2 \u003e\u003d 0) goto B5 else B6\n}",
      "B5 {\n  i2 \u003d 0\n}",
      "B6 {\n  $i0 \u003d r0.length()\n  if (i2 \u003c\u003d $i0) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $r1 \u003d r0.substring(i2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "substring",
    "signature": "java.lang.String substring(java.lang.String,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // handle negatives\r\n    if (end \u003c 0) {\r\n        // remember end is negative\r\n        end \u003d str.length() + end;\r\n    }\r\n    if (start \u003c 0) {\r\n        // remember start is negative\r\n        start \u003d str.length() + start;\r\n    }\r\n    // check length next\r\n    if (end \u003e str.length()) {\r\n        end \u003d str.length();\r\n    }\r\n    // if start is greater than end, return \"\"\r\n    if (start \u003e end) {\r\n        return EMPTY;\r\n    }\r\n    if (start \u003c 0) {\r\n        start \u003d 0;\r\n    }\r\n    if (end \u003c 0) {\r\n        end \u003d 0;\r\n    }\r\n    return str.substring(start, end);\r\n}",
    "nodes": 15,
    "edges": 19,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i4 \u003e\u003d 0) → B3 | else → B4",
      "B4 : If(i3 \u003e\u003d 0) → B5 | else → B6",
      "B6 : If(i4 \u003c\u003d $i0) → B7 | else → B8",
      "B8 : If(i3 \u003c\u003d i4) → B9 | else → B10",
      "B10 : If(i3 \u003e\u003d 0) → B11 | else → B12",
      "B12 : If(i4 \u003e\u003d 0) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  String\n  i3 :\u003d @parameter1: int\n  i4 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (i4 \u003e\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $i2 \u003d r0.length()\n  i4 \u003d $i2 + i4\n}",
      "B4 {\n  if (i3 \u003e\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $i1 \u003d r0.length()\n  i3 \u003d $i1 + i3\n}",
      "B6 {\n  $i0 \u003d r0.length()\n  if (i4 \u003c\u003d $i0) goto B7 else B8\n}",
      "B7 {\n  i4 \u003d r0.length()\n}",
      "B8 {\n  if (i3 \u003c\u003d i4) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  if (i3 \u003e\u003d 0) goto B11 else B12\n}",
      "B11 {\n  i3 \u003d 0\n}",
      "B12 {\n  if (i4 \u003e\u003d 0) goto B13 else B14\n}",
      "B13 {\n  i4 \u003d 0\n}",
      "B14 {\n  $r1 \u003d r0.substring(i3, i4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "substringAfter",
    "signature": "java.lang.String substringAfter(java.lang.String,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str)) {\r\n        return str;\r\n    }\r\n    final int pos \u003d str.indexOf(separator);\r\n    if (pos \u003d\u003d INDEX_NOT_FOUND) {\r\n        return EMPTY;\r\n    }\r\n    return str.substring(pos + 1);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(i1 !\u003d $i4) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  String\n  i0 :\u003d @parameter1: int\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i1 \u003d r0.indexOf(i0)\n  $i4 \u003d (int) -1\n  if (i1 !\u003d $i4) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i2 \u003d i1 + 1\n  $r1 \u003d r0.substring($i2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "substringAfter",
    "signature": "java.lang.String substringAfter(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str)) {\r\n        return str;\r\n    }\r\n    if (separator \u003d\u003d null) {\r\n        return EMPTY;\r\n    }\r\n    final int pos \u003d str.indexOf(separator);\r\n    if (pos \u003d\u003d INDEX_NOT_FOUND) {\r\n        return EMPTY;\r\n    }\r\n    return str.substring(pos + separator.length());\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r1 !\u003d null) → B3 | else → B4",
      "B4 : If(i0 !\u003d $i4) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i0 \u003d r0.indexOf(r1)\n  $i4 \u003d (int) -1\n  if (i0 !\u003d $i4) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $i1 \u003d r1.length()\n  $i2 \u003d i0 + $i1\n  $r2 \u003d r0.substring($i2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "substringAfterLast",
    "signature": "java.lang.String substringAfterLast(java.lang.String,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str)) {\r\n        return str;\r\n    }\r\n    final int pos \u003d str.lastIndexOf(separator);\r\n    if (pos \u003d\u003d INDEX_NOT_FOUND || pos \u003d\u003d str.length() - 1) {\r\n        return EMPTY;\r\n    }\r\n    return str.substring(pos + 1);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(i1 \u003d\u003d $i6) → B3 | else → B4",
      "B3 : If(i1 !\u003d $i3) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  String\n  i0 :\u003d @parameter1: int\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i1 \u003d r0.lastIndexOf(i0)\n  $i6 \u003d (int) -1\n  if (i1 \u003d\u003d $i6) goto B3 else B4\n}",
      "B3 {\n  $i2 \u003d r0.length()\n  $i3 \u003d $i2 - 1\n  if (i1 !\u003d $i3) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $i4 \u003d i1 + 1\n  $r1 \u003d r0.substring($i4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "substringAfterLast",
    "signature": "java.lang.String substringAfterLast(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str)) {\r\n        return str;\r\n    }\r\n    if (isEmpty(separator)) {\r\n        return EMPTY;\r\n    }\r\n    final int pos \u003d str.lastIndexOf(separator);\r\n    if (pos \u003d\u003d INDEX_NOT_FOUND || pos \u003d\u003d str.length() - separator.length()) {\r\n        return EMPTY;\r\n    }\r\n    return str.substring(pos + separator.length());\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If(i0 \u003d\u003d $i7) → B5 | else → B6",
      "B5 : If(i0 !\u003d $i3) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z1 \u003d StringUtils.isEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i0 \u003d r0.lastIndexOf(r1)\n  $i7 \u003d (int) -1\n  if (i0 \u003d\u003d $i7) goto B5 else B6\n}",
      "B5 {\n  $i2 \u003d r0.length()\n  $i1 \u003d r1.length()\n  $i3 \u003d $i2 - $i1\n  if (i0 !\u003d $i3) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $i4 \u003d r1.length()\n  $i5 \u003d i0 + $i4\n  $r2 \u003d r0.substring($i5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "substringBefore",
    "signature": "java.lang.String substringBefore(java.lang.String,int)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str)) {\r\n        return str;\r\n    }\r\n    final int pos \u003d str.indexOf(separator);\r\n    if (pos \u003d\u003d INDEX_NOT_FOUND) {\r\n        return str;\r\n    }\r\n    return str.substring(0, pos);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(i1 !\u003d $i3) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  String\n  i0 :\u003d @parameter1: int\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i1 \u003d r0.indexOf(i0)\n  $i3 \u003d (int) -1\n  if (i1 !\u003d $i3) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r1 \u003d r0.substring(0, i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "substringBefore",
    "signature": "java.lang.String substringBefore(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str) || separator \u003d\u003d null) {\r\n        return str;\r\n    }\r\n    if (separator.isEmpty()) {\r\n        return EMPTY;\r\n    }\r\n    final int pos \u003d str.indexOf(separator);\r\n    if (pos \u003d\u003d INDEX_NOT_FOUND) {\r\n        return str;\r\n    }\r\n    return str.substring(0, pos);\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If(r1 !\u003d null) → B2 | else → B3",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B5",
      "B5 : If(i0 !\u003d $i2) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $z1 \u003d r1.isEmpty()\n  if ($z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  i0 \u003d r0.indexOf(r1)\n  $i2 \u003d (int) -1\n  if (i0 !\u003d $i2) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $r2 \u003d r0.substring(0, i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "substringBeforeLast",
    "signature": "java.lang.String substringBeforeLast(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str) || isEmpty(separator)) {\r\n        return str;\r\n    }\r\n    final int pos \u003d str.lastIndexOf(separator);\r\n    if (pos \u003d\u003d INDEX_NOT_FOUND) {\r\n        return str;\r\n    }\r\n    return str.substring(0, pos);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B3 : If(i0 !\u003d $i2) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d StringUtils.isEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  i0 \u003d r0.lastIndexOf(r1)\n  $i2 \u003d (int) -1\n  if (i0 !\u003d $i2) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r2 \u003d r0.substring(0, i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "substringBetween",
    "signature": "java.lang.String substringBetween(java.lang.String,java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (!ObjectUtils.allNotNull(str, open, close)) {\r\n        return null;\r\n    }\r\n    final int start \u003d str.indexOf(open);\r\n    if (start !\u003d INDEX_NOT_FOUND) {\r\n        final int end \u003d str.indexOf(close, start + open.length());\r\n        if (end !\u003d INDEX_NOT_FOUND) {\r\n            return str.substring(start + open.length(), end);\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If(i0 \u003d\u003d $i7) → B3 | else → B5",
      "B3 : If(i3 \u003d\u003d $i9) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  String\n  $r0 \u003d Object)[3]\n  $r0[0] \u003d r1\n  $r0[1] \u003d r2\n  $r0[2] \u003d r3\n  $z0 \u003d ObjectUtils.allNotNull($r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d r1.indexOf(r2)\n  $i7 \u003d (int) -1\n  if (i0 \u003d\u003d $i7) goto B3 else B5\n}",
      "B3 {\n  $i1 \u003d r2.length()\n  $i2 \u003d i0 + $i1\n  i3 \u003d r1.indexOf(r3, $i2)\n  $i9 \u003d (int) -1\n  if (i3 \u003d\u003d $i9) goto B4 else B5\n}",
      "B4 {\n  $i4 \u003d r2.length()\n  $i5 \u003d i0 + $i4\n  $r4 \u003d r1.substring($i5, i3)\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "substringsBetween",
    "signature": "java.lang.String[] substringsBetween(java.lang.String,java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null || isEmpty(open) || isEmpty(close)) {\r\n        return null;\r\n    }\r\n    final int strLen \u003d str.length();\r\n    if (strLen \u003d\u003d 0) {\r\n        return ArrayUtils.EMPTY_STRING_ARRAY;\r\n    }\r\n    final int closeLen \u003d close.length();\r\n    final int openLen \u003d open.length();\r\n    final List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();\r\n    int pos \u003d 0;\r\n    while (pos \u003c strLen - closeLen) {\r\n        int start \u003d str.indexOf(open, pos);\r\n        if (start \u003c 0) {\r\n            break;\r\n        }\r\n        start +\u003d openLen;\r\n        final int end \u003d str.indexOf(close, start);\r\n        if (end \u003c 0) {\r\n            break;\r\n        }\r\n        list.add(str.substring(start, end));\r\n        pos \u003d end + closeLen;\r\n    }\r\n    if (list.isEmpty()) {\r\n        return null;\r\n    }\r\n    return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);\r\n}",
    "nodes": 16,
    "edges": 20,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If(i0 !\u003d 0) → B5 | else → B6",
      "B7 : If(i5 \u003e\u003d $i3) → B8 | else → B13",
      "B8 : If(i6 \u003e\u003d 0) → B9 | else → B10",
      "B10 : If(i4 \u003e\u003d 0) → B11 | else → B12",
      "B13 : If($z2 \u003d\u003d false) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  String\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d StringUtils.isEmpty(r1)\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d StringUtils.isEmpty(r2)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i0 \u003d r0.length()\n  if (i0 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r8 \u003d String[] EMPTY_STRING_ARRAY\u003e\n  return\n}",
      "B6 {\n  i1 \u003d r2.length()\n  i2 \u003d r1.length()\n  $r3 \u003d ArrayList\n  new ArrayList()\n  i5 \u003d 0\n}",
      "B7 {\n  $i3 \u003d i0 - i1\n  if (i5 \u003e\u003d $i3) goto B8 else B13\n}",
      "B8 {\n  i6 \u003d r0.indexOf(r1, i5)\n  if (i6 \u003e\u003d 0) goto B9 else B10\n}",
      "B9 {\n  goto B13\n}",
      "B10 {\n  i7 \u003d i6 + i2\n  i4 \u003d r0.indexOf(r2, i7)\n  if (i4 \u003e\u003d 0) goto B11 else B12\n}",
      "B11 {\n  goto B13\n}",
      "B12 {\n  $r7 \u003d r0.substring(i7, i4)\n  $r3.add($r7)\n  i5 \u003d i4 + i1\n  goto B7\n}",
      "B13 {\n  $z2 \u003d $r3.isEmpty()\n  if ($z2 \u003d\u003d false) goto B14 else B15\n}",
      "B14 {\n  return\n}",
      "B15 {\n  $r4 \u003d String[] EMPTY_STRING_ARRAY\u003e\n  $r5 \u003d $r3.toArray($r4)\n  $r6 \u003d String[]) $r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B13",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B13",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B7",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "swapCase",
    "signature": "java.lang.String swapCase(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str)) {\r\n        return str;\r\n    }\r\n    final int strLen \u003d str.length();\r\n    // cannot be longer than the char array\r\n    final int[] newCodePoints \u003d new int[strLen];\r\n    int outOffset \u003d 0;\r\n    for (int i \u003d 0; i \u003c strLen; ) {\r\n        final int oldCodepoint \u003d str.codePointAt(i);\r\n        final int newCodePoint;\r\n        if (Character.isUpperCase(oldCodepoint) || Character.isTitleCase(oldCodepoint)) {\r\n            newCodePoint \u003d Character.toLowerCase(oldCodepoint);\r\n        } else if (Character.isLowerCase(oldCodepoint)) {\r\n            newCodePoint \u003d Character.toUpperCase(oldCodepoint);\r\n        } else {\r\n            newCodePoint \u003d oldCodepoint;\r\n        }\r\n        newCodePoints[outOffset++] \u003d newCodePoint;\r\n        i +\u003d Character.charCount(newCodePoint);\r\n    }\r\n    return new String(newCodePoints, 0, outOffset);\r\n}",
    "nodes": 12,
    "edges": 15,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If(i3 \u003e\u003d i0) → B4 | else → B11",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B7",
      "B7 : If($z3 \u003d\u003d false) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d r0.length()\n  r1 \u003d newarray (int)[i0]\n  i2 \u003d 0\n  i3 \u003d 0\n}",
      "B3 {\n  if (i3 \u003e\u003d i0) goto B4 else B11\n}",
      "B4 {\n  i1 \u003d r0.codePointAt(i3)\n  $z1 \u003d Character.isUpperCase(i1)\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $z2 \u003d Character.isTitleCase(i1)\n  if ($z2 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  i4 \u003d Character.toLowerCase(i1)\n  goto B10\n}",
      "B7 {\n  $z3 \u003d Character.isLowerCase(i1)\n  if ($z3 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  i4 \u003d Character.toUpperCase(i1)\n  goto B10\n}",
      "B9 {\n  i4 \u003d i1\n}",
      "B10 {\n  $i5 \u003d i2\n  i2 \u003d i2 + 1\n  r1[$i5] \u003d i4\n  $i6 \u003d Character.charCount(i4)\n  i3 \u003d i3 + $i6\n  goto B3\n}",
      "B11 {\n  $r2 \u003d String\n  new String(r1, 0, i2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B11",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B3",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "toCodePoints",
    "signature": "int[] toCodePoints(java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (cs \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (cs.length() \u003d\u003d 0) {\r\n        return ArrayUtils.EMPTY_INT_ARRAY;\r\n    }\r\n    final String s \u003d cs.toString();\r\n    final int[] result \u003d new int[s.codePointCount(0, s.length())];\r\n    int index \u003d 0;\r\n    for (int i \u003d 0; i \u003c result.length; i++) {\r\n        result[i] \u003d s.codePointAt(index);\r\n        index +\u003d Character.charCount(result[i]);\r\n    }\r\n    return result;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i8 \u003e\u003d $i3) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d r0.length()\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d ArrayUtils: int[] EMPTY_INT_ARRAY\u003e\n  return\n}",
      "B4 {\n  r1 \u003d r0.toString()\n  $i1 \u003d r1.length()\n  $i2 \u003d r1.codePointCount(0, $i1)\n  r2 \u003d newarray (int)[$i2]\n  i7 \u003d 0\n  i8 \u003d 0\n}",
      "B5 {\n  $i3 \u003d lengthof r2\n  if (i8 \u003e\u003d $i3) goto B6 else B7\n}",
      "B6 {\n  $i4 \u003d r1.codePointAt(i7)\n  r2[i8] \u003d $i4\n  $i5 \u003d r2[i8]\n  $i6 \u003d Character.charCount($i5)\n  i7 \u003d i7 + $i6\n  i8 \u003d i8 + 1\n  goto B5\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "toRootLowerCase",
    "signature": "java.lang.String toRootLowerCase(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return source \u003d\u003d null ? null : source.toLowerCase(Locale.ROOT);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d null\n  goto B3\n}",
      "B2 {\n  $r1 \u003d Locale ROOT\u003e\n  $r2 \u003d r0.toLowerCase($r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "toRootUpperCase",
    "signature": "java.lang.String toRootUpperCase(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return source \u003d\u003d null ? null : source.toUpperCase(Locale.ROOT);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d null\n  goto B3\n}",
      "B2 {\n  $r1 \u003d Locale ROOT\u003e\n  $r2 \u003d r0.toUpperCase($r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "trim",
    "signature": "java.lang.String trim(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return str \u003d\u003d null ? null : str.trim();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d null\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0.trim()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "trimToEmpty",
    "signature": "java.lang.String trimToEmpty(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return str \u003d\u003d null ? EMPTY : str.trim();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d \"\"\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0.trim()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "trimToNull",
    "signature": "java.lang.String trimToNull(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    final String ts \u003d trim(str);\r\n    return isEmpty(ts) ? null : ts;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  r1 \u003d StringUtils.trim(r0)\n  $z0 \u003d StringUtils.isEmpty(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      },
      {
        "name": "StringUtils#trim(...1)",
        "body": "{\r\n    return str \u003d\u003d null ? null : str.trim();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "truncate",
    "signature": "java.lang.String truncate(java.lang.String,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (offset \u003c 0) {\r\n        throw new IllegalArgumentException(\"offset cannot be negative\");\r\n    }\r\n    if (maxWidth \u003c 0) {\r\n        throw new IllegalArgumentException(\"maxWith cannot be negative\");\r\n    }\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (offset \u003e str.length()) {\r\n        return EMPTY;\r\n    }\r\n    if (str.length() \u003e maxWidth) {\r\n        final int ix \u003d Math.min(offset + maxWidth, str.length());\r\n        return str.substring(offset, ix);\r\n    }\r\n    return str.substring(offset);\r\n}",
    "nodes": 11,
    "edges": 10,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 \u003e\u003d 0) → B1 | else → B2",
      "B2 : If(i1 \u003e\u003d 0) → B3 | else → B4",
      "B4 : If(r0 !\u003d null) → B5 | else → B6",
      "B6 : If(i0 \u003c\u003d $i2) → B7 | else → B8",
      "B8 : If($i3 \u003c\u003d i1) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  String\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  if (i0 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"offset cannot be negative\")\n  throw $r4\n}",
      "B2 {\n  if (i1 \u003e\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"maxWith cannot be negative\")\n  throw $r3\n}",
      "B4 {\n  if (r0 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $i2 \u003d r0.length()\n  if (i0 \u003c\u003d $i2) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $i3 \u003d r0.length()\n  if ($i3 \u003c\u003d i1) goto B9 else B10\n}",
      "B9 {\n  $i5 \u003d i0 + i1\n  $i4 \u003d r0.length()\n  i6 \u003d Math.min($i5, $i4)\n  $r2 \u003d r0.substring(i0, i6)\n  return\n}",
      "B10 {\n  $r1 \u003d r0.substring(i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "uncapitalize",
    "signature": "java.lang.String uncapitalize(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    final int strLen \u003d length(str);\r\n    if (strLen \u003d\u003d 0) {\r\n        return str;\r\n    }\r\n    final int firstCodePoint \u003d str.codePointAt(0);\r\n    final int newCodePoint \u003d Character.toLowerCase(firstCodePoint);\r\n    if (firstCodePoint \u003d\u003d newCodePoint) {\r\n        // already capitalized\r\n        return str;\r\n    }\r\n    // cannot be longer than the char array\r\n    final int[] newCodePoints \u003d new int[strLen];\r\n    int outOffset \u003d 0;\r\n    // copy the first code point\r\n    newCodePoints[outOffset++] \u003d newCodePoint;\r\n    for (int inOffset \u003d Character.charCount(firstCodePoint); inOffset \u003c strLen; ) {\r\n        final int codePoint \u003d str.codePointAt(inOffset);\r\n        // copy the remaining ones\r\n        newCodePoints[outOffset++] \u003d codePoint;\r\n        inOffset +\u003d Character.charCount(codePoint);\r\n    }\r\n    return new String(newCodePoints, 0, outOffset);\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 !\u003d 0) → B1 | else → B2",
      "B2 : If(i1 !\u003d i2) → B3 | else → B4",
      "B5 : If(i7 \u003e\u003d i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  String\n  i0 \u003d StringUtils.length(r0)\n  if (i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i1 \u003d r0.codePointAt(0)\n  i2 \u003d Character.toLowerCase(i1)\n  if (i1 !\u003d i2) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r1 \u003d newarray (int)[i0]\n  i6 \u003d 1\n  r1[0] \u003d i2\n  i7 \u003d Character.charCount(i1)\n}",
      "B5 {\n  if (i7 \u003e\u003d i0) goto B6 else B7\n}",
      "B6 {\n  i3 \u003d r0.codePointAt(i7)\n  $i4 \u003d i6\n  i6 \u003d i6 + 1\n  r1[$i4] \u003d i3\n  $i5 \u003d Character.charCount(i3)\n  i7 \u003d i7 + $i5\n  goto B5\n}",
      "B7 {\n  $r2 \u003d String\n  new String(r1, 0, i6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#length(...1)",
        "body": "{\r\n    return cs \u003d\u003d null ? 0 : cs.length();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "unwrap",
    "signature": "java.lang.String unwrap(java.lang.String,char)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str) || wrapChar \u003d\u003d CharUtils.NUL || str.length() \u003d\u003d 1) {\r\n        return str;\r\n    }\r\n    if (str.charAt(0) \u003d\u003d wrapChar \u0026\u0026 str.charAt(str.length() - 1) \u003d\u003d wrapChar) {\r\n        final int startIndex \u003d 0;\r\n        final int endIndex \u003d str.length() - 1;\r\n        return str.substring(startIndex + 1, endIndex);\r\n    }\r\n    return str;\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If(c0 \u003d\u003d false) → B2 | else → B3",
      "B2 : If($i1 !\u003d 1) → B3 | else → B4",
      "B4 : If($i8 !\u003d $i9) → B5 | else → B7",
      "B5 : If($i10 !\u003d $i11) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  String\n  c0 :\u003d @parameter1: char\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  if (c0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d r0.length()\n  if ($i1 !\u003d 1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $c2 \u003d r0.charAt(0)\n  $i8 \u003d (int) $c2\n  $i9 \u003d (int) c0\n  if ($i8 !\u003d $i9) goto B5 else B7\n}",
      "B5 {\n  $i3 \u003d r0.length()\n  $i4 \u003d $i3 - 1\n  $c5 \u003d r0.charAt($i4)\n  $i10 \u003d (int) $c5\n  $i11 \u003d (int) c0\n  if ($i10 !\u003d $i11) goto B6 else B7\n}",
      "B6 {\n  $i6 \u003d r0.length()\n  i7 \u003d $i6 - 1\n  $r1 \u003d r0.substring(1, i7)\n  return\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "unwrap",
    "signature": "java.lang.String unwrap(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str) || isEmpty(wrapToken) || str.length() \u003c 2 * wrapToken.length()) {\r\n        return str;\r\n    }\r\n    if (startsWith(str, wrapToken) \u0026\u0026 endsWith(str, wrapToken)) {\r\n        return str.substring(wrapToken.length(), str.lastIndexOf(wrapToken));\r\n    }\r\n    return str;\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3",
      "B2 : If($i2 \u003e\u003d $i1) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B7",
      "B5 : If($z3 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $z1 \u003d StringUtils.isEmpty(r1)\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $i2 \u003d r0.length()\n  $i0 \u003d r1.length()\n  $i1 \u003d 2 * $i0\n  if ($i2 \u003e\u003d $i1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z2 \u003d StringUtils.startsWith(r0, r1)\n  if ($z2 \u003d\u003d false) goto B5 else B7\n}",
      "B5 {\n  $z3 \u003d StringUtils.endsWith(r0, r1)\n  if ($z3 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $i4 \u003d r1.length()\n  $i3 \u003d r0.lastIndexOf(r1)\n  $r2 \u003d r0.substring($i4, $i3)\n  return\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      },
      {
        "name": "StringUtils#endsWith(...2)",
        "body": "{\r\n    return endsWith(str, suffix, false);\r\n}"
      },
      {
        "name": "StringUtils#startsWith(...2)",
        "body": "{\r\n    return startsWith(str, prefix, false);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "upperCase",
    "signature": "java.lang.String upperCase(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return str.toUpperCase();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.toUpperCase()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "upperCase",
    "signature": "java.lang.String upperCase(java.lang.String,java.util.Locale)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return str.toUpperCase(LocaleUtils.toLocale(locale));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  Locale\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d LocaleUtils.toLocale(r1)\n  $r3 \u003d r0.toUpperCase($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "valueOf",
    "signature": "java.lang.String valueOf(char[])",
    "visibility": "public",
    "body": "{\r\n    return value \u003d\u003d null ? null : String.valueOf(value);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d null\n  goto B3\n}",
      "B2 {\n  $r1 \u003d String.valueOf(r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "wrap",
    "signature": "java.lang.String wrap(java.lang.String,char)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str) || wrapWith \u003d\u003d CharUtils.NUL) {\r\n        return str;\r\n    }\r\n    return wrapWith + str + wrapWith;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If(c0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  String\n  c0 :\u003d @parameter1: char\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  if (c0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r1 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d $r1.append(c0)\n  $r3 \u003d $r2.append(r0)\n  $r4 \u003d $r3.append(c0)\n  $r5 \u003d $r4.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "wrap",
    "signature": "java.lang.String wrap(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str) || isEmpty(wrapWith)) {\r\n        return str;\r\n    }\r\n    return wrapWith.concat(str).concat(wrapWith);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d StringUtils.isEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r2 \u003d r1.concat(r0)\n  $r3 \u003d $r2.concat(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "wrapIfMissing",
    "signature": "java.lang.String wrapIfMissing(java.lang.String,char)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str) || wrapWith \u003d\u003d CharUtils.NUL) {\r\n        return str;\r\n    }\r\n    final boolean wrapStart \u003d str.charAt(0) !\u003d wrapWith;\r\n    final boolean wrapEnd \u003d str.charAt(str.length() - 1) !\u003d wrapWith;\r\n    if (!wrapStart \u0026\u0026 !wrapEnd) {\r\n        return str;\r\n    }\r\n    final StringBuilder builder \u003d new StringBuilder(str.length() + 2);\r\n    if (wrapStart) {\r\n        builder.append(wrapWith);\r\n    }\r\n    builder.append(str);\r\n    if (wrapEnd) {\r\n        builder.append(wrapWith);\r\n    }\r\n    return builder.toString();\r\n}",
    "nodes": 17,
    "edges": 22,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If(c0 !\u003d 0) → B2 | else → B3",
      "B3 : If($i7 \u003d\u003d $i8) → B4 | else → B5",
      "B6 : If($i9 \u003d\u003d $i10) → B7 | else → B8",
      "B9 : If(z1 !\u003d 0) → B10 | else → B12",
      "B10 : If($z6 !\u003d 0) → B11 | else → B12",
      "B12 : If(z1 \u003d\u003d false) → B13 | else → B14",
      "B14 : If(z2 \u003d\u003d false) → B15 | else → B16"
    ],
    "blockList": [
      "B0 {\n  String\n  c0 :\u003d @parameter1: char\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  if (c0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $c1 \u003d r0.charAt(0)\n  $i7 \u003d (int) $c1\n  $i8 \u003d (int) c0\n  if ($i7 \u003d\u003d $i8) goto B4 else B5\n}",
      "B4 {\n  $z3 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z3 \u003d 0\n}",
      "B6 {\n  z1 \u003d $z3\n  $i2 \u003d r0.length()\n  $i3 \u003d $i2 - 1\n  $c4 \u003d r0.charAt($i3)\n  $i9 \u003d (int) $c4\n  $i10 \u003d (int) c0\n  if ($i9 \u003d\u003d $i10) goto B7 else B8\n}",
      "B7 {\n  $z6 \u003d 1\n  $z5 \u003d 1\n  goto B9\n}",
      "B8 {\n  $z6 \u003d 0\n  $z5 \u003d 0\n}",
      "B9 {\n  z2 \u003d $z5\n  if (z1 !\u003d 0) goto B10 else B12\n}",
      "B10 {\n  if ($z6 !\u003d 0) goto B11 else B12\n}",
      "B11 {\n  return\n}",
      "B12 {\n  $r3 \u003d StringBuilder\n  $i5 \u003d r0.length()\n  $i6 \u003d $i5 + 2\n  new StringBuilder($i6)\n  if (z1 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  $r3.append(c0)\n}",
      "B14 {\n  $r3.append(r0)\n  if (z2 \u003d\u003d false) goto B15 else B16\n}",
      "B15 {\n  $r3.append(c0)\n}",
      "B16 {\n  $r2 \u003d $r3.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.StringUtils",
    "methodName": "wrapIfMissing",
    "signature": "java.lang.String wrapIfMissing(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty(str) || isEmpty(wrapWith)) {\r\n        return str;\r\n    }\r\n    final boolean wrapStart \u003d !str.startsWith(wrapWith);\r\n    final boolean wrapEnd \u003d !str.endsWith(wrapWith);\r\n    if (!wrapStart \u0026\u0026 !wrapEnd) {\r\n        return str;\r\n    }\r\n    final StringBuilder builder \u003d new StringBuilder(str.length() + wrapWith.length() + wrapWith.length());\r\n    if (wrapStart) {\r\n        builder.append(wrapWith);\r\n    }\r\n    builder.append(str);\r\n    if (wrapEnd) {\r\n        builder.append(wrapWith);\r\n    }\r\n    return builder.toString();\r\n}",
    "nodes": 17,
    "edges": 22,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B3 : If($z2 !\u003d 0) → B4 | else → B5",
      "B6 : If($z4 !\u003d 0) → B7 | else → B8",
      "B9 : If(z3 !\u003d 0) → B10 | else → B12",
      "B10 : If($z9 !\u003d 0) → B11 | else → B12",
      "B12 : If(z3 \u003d\u003d false) → B13 | else → B14",
      "B14 : If(z5 \u003d\u003d false) → B15 | else → B16"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d StringUtils.isEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $z2 \u003d r0.startsWith(r1)\n  if ($z2 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $z6 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z6 \u003d 0\n}",
      "B6 {\n  z3 \u003d $z6\n  $z4 \u003d r0.endsWith(r1)\n  if ($z4 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $z9 \u003d 1\n  $z8 \u003d 1\n  goto B9\n}",
      "B8 {\n  $z9 \u003d 0\n  $z8 \u003d 0\n}",
      "B9 {\n  z5 \u003d $z8\n  if (z3 !\u003d 0) goto B10 else B12\n}",
      "B10 {\n  if ($z9 !\u003d 0) goto B11 else B12\n}",
      "B11 {\n  return\n}",
      "B12 {\n  $r2 \u003d StringBuilder\n  $i1 \u003d r0.length()\n  $i0 \u003d r1.length()\n  $i3 \u003d $i1 + $i0\n  $i2 \u003d r1.length()\n  $i4 \u003d $i3 + $i2\n  new StringBuilder($i4)\n  if (z3 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  $r2.append(r1)\n}",
      "B14 {\n  $r2.append(r0)\n  if (z5 \u003d\u003d false) goto B15 else B16\n}",
      "B15 {\n  $r2.append(r1)\n}",
      "B16 {\n  $r3 \u003d $r2.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringUtils#isEmpty(...1)",
        "body": "{\r\n    return cs \u003d\u003d null || cs.length() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.SystemProperties",
    "methodName": "getBoolean",
    "signature": "boolean getBoolean(java.lang.String,java.util.function.BooleanSupplier)",
    "visibility": "public",
    "body": "{\r\n    final String str \u003d getProperty(key);\r\n    return str \u003d\u003d null ? defaultIfAbsent !\u003d null \u0026\u0026 defaultIfAbsent.getAsBoolean() : Boolean.parseBoolean(str);\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B5",
      "B1 : If(r2 \u003d\u003d null) → B2 | else → B4",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  String\n  BooleanSupplier\n  r1 \u003d SystemProperties.getProperty(r0)\n  if (r1 !\u003d null) goto B1 else B5\n}",
      "B1 {\n  if (r2 \u003d\u003d null) goto B2 else B4\n}",
      "B2 {\n  $z0 \u003d r2.getAsBoolean()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $z1 \u003d 1\n  goto B6\n}",
      "B4 {\n  $z1 \u003d 0\n  goto B6\n}",
      "B5 {\n  $z1 \u003d Boolean.parseBoolean(r1)\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SystemProperties#getProperty(...1)",
        "body": "{\r\n    return getProperty(property, Suppliers.nul());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.SystemProperties",
    "methodName": "getInt",
    "signature": "int getInt(java.lang.String,java.util.function.IntSupplier)",
    "visibility": "public",
    "body": "{\r\n    final String str \u003d getProperty(key);\r\n    return str \u003d\u003d null ? defaultIfAbsent !\u003d null ? defaultIfAbsent.getAsInt() : 0 : Integer.parseInt(str);\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B4",
      "B1 : If(r2 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  String\n  IntSupplier\n  r1 \u003d SystemProperties.getProperty(r0)\n  if (r1 !\u003d null) goto B1 else B4\n}",
      "B1 {\n  if (r2 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $i0 \u003d r2.getAsInt()\n  goto B5\n}",
      "B3 {\n  $i0 \u003d 0\n  goto B5\n}",
      "B4 {\n  $i0 \u003d Integer.parseInt(r1)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SystemProperties#getProperty(...1)",
        "body": "{\r\n    return getProperty(property, Suppliers.nul());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.SystemProperties",
    "methodName": "getLong",
    "signature": "long getLong(java.lang.String,java.util.function.LongSupplier)",
    "visibility": "public",
    "body": "{\r\n    final String str \u003d getProperty(key);\r\n    return str \u003d\u003d null ? defaultIfAbsent !\u003d null ? defaultIfAbsent.getAsLong() : 0 : Long.parseLong(str);\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B4",
      "B1 : If(r2 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  String\n  LongSupplier\n  r1 \u003d SystemProperties.getProperty(r0)\n  if (r1 !\u003d null) goto B1 else B4\n}",
      "B1 {\n  if (r2 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $l0 \u003d r2.getAsLong()\n  goto B5\n}",
      "B3 {\n  $l0 \u003d 0L\n  goto B5\n}",
      "B4 {\n  $l0 \u003d Long.parseLong(r1)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SystemProperties#getProperty(...1)",
        "body": "{\r\n    return getProperty(property, Suppliers.nul());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.SystemUtils",
    "methodName": "getEnvironmentVariable",
    "signature": "java.lang.String getEnvironmentVariable(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    try {\r\n        final String value \u003d System.getenv(name);\r\n        return value \u003d\u003d null ? defaultValue : value;\r\n    } catch (final SecurityException ex) {\r\n        // we are not allowed to look at this property\r\n        // System.err.println(\"Caught a SecurityException reading the environment variable \u0027\" + name + \"\u0027.\");\r\n        return defaultValue;\r\n    }\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  r3 \u003d System.getenv(r0)\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r3\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r2 :\u003d @caughtexception\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.SystemUtils",
    "methodName": "getHostName",
    "signature": "java.lang.String getHostName()",
    "visibility": "public",
    "body": "{\r\n    return IS_OS_WINDOWS ? System.getenv(\"COMPUTERNAME\") : System.getenv(\"HOSTNAME\");\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  $z0 \u003d SystemUtils: boolean IS_OS_WINDOWS\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r0 \u003d System.getenv(\"COMPUTERNAME\")\n  goto B3\n}",
      "B2 {\n  $r0 \u003d System.getenv(\"HOSTNAME\")\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.ExtendedMessageFormat",
    "methodName": "applyPattern",
    "signature": "void applyPattern(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (registry \u003d\u003d null) {\r\n        super.applyPattern(pattern);\r\n        toPattern \u003d super.toPattern();\r\n        return;\r\n    }\r\n    final ArrayList\u003cFormat\u003e foundFormats \u003d new ArrayList\u003c\u003e();\r\n    final ArrayList\u003cString\u003e foundDescriptions \u003d new ArrayList\u003c\u003e();\r\n    final StringBuilder stripCustom \u003d new StringBuilder(pattern.length());\r\n    final ParsePosition pos \u003d new ParsePosition(0);\r\n    final char[] c \u003d pattern.toCharArray();\r\n    int fmtCount \u003d 0;\r\n    while (pos.getIndex() \u003c pattern.length()) {\r\n        switch(c[pos.getIndex()]) {\r\n            case QUOTE:\r\n                appendQuotedString(pattern, pos, stripCustom);\r\n                break;\r\n            case START_FE:\r\n                fmtCount++;\r\n                seekNonWs(pattern, pos);\r\n                final int start \u003d pos.getIndex();\r\n                final int index \u003d readArgumentIndex(pattern, next(pos));\r\n                stripCustom.append(START_FE).append(index);\r\n                seekNonWs(pattern, pos);\r\n                Format format \u003d null;\r\n                String formatDescription \u003d null;\r\n                if (c[pos.getIndex()] \u003d\u003d START_FMT) {\r\n                    formatDescription \u003d parseFormatDescription(pattern, next(pos));\r\n                    format \u003d getFormat(formatDescription);\r\n                    if (format \u003d\u003d null) {\r\n                        stripCustom.append(START_FMT).append(formatDescription);\r\n                    }\r\n                }\r\n                foundFormats.add(format);\r\n                foundDescriptions.add(format \u003d\u003d null ? null : formatDescription);\r\n                Validate.isTrue(foundFormats.size() \u003d\u003d fmtCount);\r\n                Validate.isTrue(foundDescriptions.size() \u003d\u003d fmtCount);\r\n                if (c[pos.getIndex()] !\u003d END_FE) {\r\n                    throw new IllegalArgumentException(\"Unreadable format element at position \" + start);\r\n                }\r\n            //$FALL-THROUGH$\r\n            default:\r\n                stripCustom.append(c[pos.getIndex()]);\r\n                next(pos);\r\n        }\r\n    }\r\n    super.applyPattern(stripCustom.toString());\r\n    toPattern \u003d insertFormats(super.toPattern(), foundDescriptions);\r\n    if (containsElements(foundFormats)) {\r\n        final Format[] origFormats \u003d getFormats();\r\n        // only loop over what we know we have, as MessageFormat on Java 1.3\r\n        // seems to provide an extra format element:\r\n        int i \u003d 0;\r\n        for (final Format f : foundFormats) {\r\n            if (f !\u003d null) {\r\n                origFormats[i] \u003d f;\r\n            }\r\n            i++;\r\n        }\r\n        super.setFormats(origFormats);\r\n    }\r\n}",
    "nodes": 29,
    "edges": 39,
    "cc": 12,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B3 : If($i12 \u003e\u003d $i13) → B4 | else → B21",
      "B4 : If(switch-on $i17) → B5 | else → B6",
      "B6 : If($i18 !\u003d 44) → B7 | else → B9",
      "B7 : If(r22 !\u003d null) → B8 | else → B9",
      "B9 : If(r22 !\u003d null) → B10 | else → B11",
      "B12 : If($i5 !\u003d i11) → B13 | else → B14",
      "B15 : If($i6 !\u003d i11) → B16 | else → B17",
      "B18 : If($i19 \u003d\u003d 125) → B19 | else → B20",
      "B21 : If($z0 \u003d\u003d false) → B22 | else → B28",
      "B23 : If($z1 \u003d\u003d false) → B24 | else → B27",
      "B24 : If(r27 \u003d\u003d null) → B25 | else → B26"
    ],
    "blockList": [
      "B0 {\n  ExtendedMessageFormat\n  String\n  $r1 \u003d Map registry\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r0.applyPattern(r5)\n  $r21 \u003d r0.toPattern()\n  String toPattern\u003e \u003d $r21\n  return\n}",
      "B2 {\n  $r28 \u003d ArrayList\n  new ArrayList()\n  $r29 \u003d ArrayList\n  new ArrayList()\n  $r30 \u003d StringBuilder\n  $i0 \u003d r5.length()\n  new StringBuilder($i0)\n  $r31 \u003d ParsePosition\n  new ParsePosition(0)\n  r7 \u003d r5.toCharArray()\n  i11 \u003d 0\n}",
      "B3 {\n  $i12 \u003d $r31.getIndex()\n  $i13 \u003d r5.length()\n  if ($i12 \u003e\u003d $i13) goto B4 else B21\n}",
      "B4 {\n  $i1 \u003d $r31.getIndex()\n  $c2 \u003d r7[$i1]\n  $i17 \u003d (int) $c2\n  ParsePosition: int getIndex()\u003e(); }\n}",
      "B5 {\n  r0.appendQuotedString(r5, $r31, $r30)\n  goto B3\n}",
      "B6 {\n  i11 \u003d i11 + 1\n  r0.seekNonWs(r5, $r31)\n  i14 \u003d $r31.getIndex()\n  $r12 \u003d r0.next($r31)\n  i15 \u003d r0.readArgumentIndex(r5, $r12)\n  $r13 \u003d $r30.append(123)\n  $r13.append(i15)\n  r0.seekNonWs(r5, $r31)\n  r22 \u003d null\n  r23 \u003d null\n  $i3 \u003d $r31.getIndex()\n  $c4 \u003d r7[$i3]\n  $i18 \u003d (int) $c4\n  if ($i18 !\u003d 44) goto B7 else B9\n}",
      "B7 {\n  $r19 \u003d r0.next($r31)\n  r23 \u003d r0.parseFormatDescription(r5, $r19)\n  r22 \u003d r0.getFormat(r23)\n  if (r22 !\u003d null) goto B8 else B9\n}",
      "B8 {\n  $r20 \u003d $r30.append(44)\n  $r20.append(r23)\n}",
      "B9 {\n  $r28.add(r22)\n  if (r22 !\u003d null) goto B10 else B11\n}",
      "B10 {\n  $r24 \u003d null\n  goto B12\n}",
      "B11 {\n  $r24 \u003d r23\n}",
      "B12 {\n  $r29.add($r24)\n  $i5 \u003d $r28.size()\n  if ($i5 !\u003d i11) goto B13 else B14\n}",
      "B13 {\n  $z2 \u003d 1\n  goto B15\n}",
      "B14 {\n  $z2 \u003d 0\n}",
      "B15 {\n  Validate.isTrue($z2)\n  $i6 \u003d $r29.size()\n  if ($i6 !\u003d i11) goto B16 else B17\n}",
      "B16 {\n  $z3 \u003d 1\n  goto B18\n}",
      "B17 {\n  $z3 \u003d 0\n}",
      "B18 {\n  Validate.isTrue($z3)\n  $i7 \u003d $r31.getIndex()\n  $c8 \u003d r7[$i7]\n  $i19 \u003d (int) $c8\n  if ($i19 \u003d\u003d 125) goto B19 else B20\n}",
      "B19 {\n  $r33 \u003d IllegalArgumentException\n  $r32 \u003d StringBuilder\n  new StringBuilder()\n  $r16 \u003d $r32.append(\"Unreadable format element at position \")\n  $r17 \u003d $r16.append(i14)\n  $r18 \u003d $r17.toString()\n  new IllegalArgumentException($r18)\n  throw $r33\n}",
      "B20 {\n  $i9 \u003d $r31.getIndex()\n  $c10 \u003d r7[$i9]\n  $r30.append($c10)\n  r0.next($r31)\n  goto B3\n}",
      "B21 {\n  $r8 \u003d $r30.toString()\n  r0.applyPattern($r8)\n  $r9 \u003d r0.toPattern()\n  $r10 \u003d r0.insertFormats($r9, $r29)\n  String toPattern\u003e \u003d $r10\n  $z0 \u003d r0.containsElements($r28)\n  if ($z0 \u003d\u003d false) goto B22 else B28\n}",
      "B22 {\n  r25 \u003d r0.getFormats()\n  i16 \u003d 0\n  r26 \u003d $r28.iterator()\n}",
      "B23 {\n  $z1 \u003d r26.hasNext()\n  if ($z1 \u003d\u003d false) goto B24 else B27\n}",
      "B24 {\n  $r11 \u003d r26.next()\n  r27 \u003d Format) $r11\n  if (r27 \u003d\u003d null) goto B25 else B26\n}",
      "B25 {\n  r25[i16] \u003d r27\n}",
      "B26 {\n  i16 \u003d i16 + 1\n  goto B23\n}",
      "B27 {\n  r0.setFormats(r25)\n}",
      "B28 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B21",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B4 --\u003e B20",
      "B5 --\u003e B3",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e B3",
      "B21 --\u003e B22",
      "B21 --\u003e B28",
      "B22 --\u003e B23",
      "B23 --\u003e B24",
      "B23 --\u003e B27",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B26",
      "B26 --\u003e B23",
      "B27 --\u003e B28",
      "B28 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ExtendedMessageFormat#readArgumentIndex(...2)",
        "body": "{\r\n    final int start \u003d pos.getIndex();\r\n    seekNonWs(pattern, pos);\r\n    final StringBuilder result \u003d new StringBuilder();\r\n    boolean error \u003d false;\r\n    for (; !error \u0026\u0026 pos.getIndex() \u003c pattern.length(); next(pos)) {\r\n        char c \u003d pattern.charAt(pos.getIndex());\r\n        if (Character.isWhitespace(c)) {\r\n            seekNonWs(pattern, pos);\r\n            c \u003d pattern.charAt(pos.getIndex());\r\n            if (c !\u003d START_FMT \u0026\u0026 c !\u003d END_FE) {\r\n                error \u003d true;\r\n                continue;\r\n            }\r\n        }\r\n        if ((c \u003d\u003d START_FMT || c \u003d\u003d END_FE) \u0026\u0026 result.length() \u003e 0) {\r\n            try {\r\n                return Integer.parseInt(result.toString());\r\n            } catch (final NumberFormatException ignored) {\r\n                // we\u0027ve already ensured only digits, so unless something\r\n                // outlandishly large was specified we should be okay.\r\n            }\r\n        }\r\n        error \u003d !Character.isDigit(c);\r\n        result.append(c);\r\n    }\r\n    if (error) {\r\n        throw new IllegalArgumentException(\"Invalid format argument index at position \" + start + \": \" + pattern.substring(start, pos.getIndex()));\r\n    }\r\n    throw new IllegalArgumentException(\"Unterminated format element at position \" + start);\r\n}"
      },
      {
        "name": "ExtendedMessageFormat#next(...1)",
        "body": "{\r\n    pos.setIndex(pos.getIndex() + 1);\r\n    return pos;\r\n}"
      },
      {
        "name": "ExtendedMessageFormat#parseFormatDescription(...2)",
        "body": "{\r\n    final int start \u003d pos.getIndex();\r\n    seekNonWs(pattern, pos);\r\n    final int text \u003d pos.getIndex();\r\n    int depth \u003d 1;\r\n    for (; pos.getIndex() \u003c pattern.length(); next(pos)) {\r\n        switch(pattern.charAt(pos.getIndex())) {\r\n            case START_FE:\r\n                depth++;\r\n                break;\r\n            case END_FE:\r\n                depth--;\r\n                if (depth \u003d\u003d 0) {\r\n                    return pattern.substring(text, pos.getIndex());\r\n                }\r\n                break;\r\n            case QUOTE:\r\n                getQuotedString(pattern, pos);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    throw new IllegalArgumentException(\"Unterminated format element at position \" + start);\r\n}"
      },
      {
        "name": "ExtendedMessageFormat#appendQuotedString(...3)",
        "body": "{\r\n    assert pattern.toCharArray()[pos.getIndex()] \u003d\u003d QUOTE : \"Quoted string must start with quote character\";\r\n    // handle quote character at the beginning of the string\r\n    if (appendTo !\u003d null) {\r\n        appendTo.append(QUOTE);\r\n    }\r\n    next(pos);\r\n    final int start \u003d pos.getIndex();\r\n    final char[] c \u003d pattern.toCharArray();\r\n    for (int i \u003d pos.getIndex(); i \u003c pattern.length(); i++) {\r\n        if (c[pos.getIndex()] \u003d\u003d QUOTE) {\r\n            next(pos);\r\n            return appendTo \u003d\u003d null ? null : appendTo.append(c, start, pos.getIndex() - start);\r\n        }\r\n        next(pos);\r\n    }\r\n    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\r\n}"
      },
      {
        "name": "ExtendedMessageFormat#getFormats(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ExtendedMessageFormat#getFormat(...1)",
        "body": "{\r\n    if (registry !\u003d null) {\r\n        String name \u003d desc;\r\n        String args \u003d null;\r\n        final int i \u003d desc.indexOf(START_FMT);\r\n        if (i \u003e 0) {\r\n            name \u003d desc.substring(0, i).trim();\r\n            args \u003d desc.substring(i + 1).trim();\r\n        }\r\n        final FormatFactory factory \u003d registry.get(name);\r\n        if (factory !\u003d null) {\r\n            return factory.getFormat(name, args, getLocale());\r\n        }\r\n    }\r\n    return null;\r\n}"
      },
      {
        "name": "ExtendedMessageFormat#containsElements(...1)",
        "body": "{\r\n    if (coll \u003d\u003d null || coll.isEmpty()) {\r\n        return false;\r\n    }\r\n    return coll.stream().anyMatch(Objects::nonNull);\r\n}"
      },
      {
        "name": "ExtendedMessageFormat#seekNonWs(...2)",
        "body": "{\r\n    int len;\r\n    final char[] buffer \u003d pattern.toCharArray();\r\n    do {\r\n        len \u003d StrMatcher.splitMatcher().isMatch(buffer, pos.getIndex());\r\n        pos.setIndex(pos.getIndex() + len);\r\n    } while (len \u003e 0 \u0026\u0026 pos.getIndex() \u003c pattern.length());\r\n}"
      },
      {
        "name": "ExtendedMessageFormat#insertFormats(...2)",
        "body": "{\r\n    if (!containsElements(customPatterns)) {\r\n        return pattern;\r\n    }\r\n    final StringBuilder sb \u003d new StringBuilder(pattern.length() * 2);\r\n    final ParsePosition pos \u003d new ParsePosition(0);\r\n    int fe \u003d -1;\r\n    int depth \u003d 0;\r\n    while (pos.getIndex() \u003c pattern.length()) {\r\n        final char c \u003d pattern.charAt(pos.getIndex());\r\n        switch(c) {\r\n            case QUOTE:\r\n                appendQuotedString(pattern, pos, sb);\r\n                break;\r\n            case START_FE:\r\n                depth++;\r\n                sb.append(START_FE).append(readArgumentIndex(pattern, next(pos)));\r\n                // do not look for custom patterns when they are embedded, e.g. in a choice\r\n                if (depth \u003d\u003d 1) {\r\n                    fe++;\r\n                    final String customPattern \u003d customPatterns.get(fe);\r\n                    if (customPattern !\u003d null) {\r\n                        sb.append(START_FMT).append(customPattern);\r\n                    }\r\n                }\r\n                break;\r\n            case END_FE:\r\n                depth--;\r\n            //$FALL-THROUGH$\r\n            default:\r\n                sb.append(c);\r\n                next(pos);\r\n        }\r\n    }\r\n    return sb.toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.ExtendedMessageFormat",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (obj \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (!super.equals(obj)) {\r\n        return false;\r\n    }\r\n    if (ObjectUtils.notEqual(getClass(), obj.getClass())) {\r\n        return false;\r\n    }\r\n    final ExtendedMessageFormat rhs \u003d (ExtendedMessageFormat) obj;\r\n    if (ObjectUtils.notEqual(toPattern, rhs.toPattern)) {\r\n        return false;\r\n    }\r\n    return !ObjectUtils.notEqual(registry, rhs.registry);\r\n}",
    "nodes": 14,
    "edges": 14,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B4",
      "B4 : If($z0 !\u003d 0) → B5 | else → B6",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B8",
      "B8 : If($z2 \u003d\u003d false) → B9 | else → B10",
      "B10 : If($z3 !\u003d 0) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  ExtendedMessageFormat\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z0 \u003d r1.equals(r0)\n  if ($z0 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r3 \u003d r1.getClass()\n  $r2 \u003d r0.getClass()\n  $z1 \u003d ObjectUtils.notEqual($r3, $r2)\n  if ($z1 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  r4 \u003d ExtendedMessageFormat) r0\n  $r6 \u003d String toPattern\u003e\n  $r5 \u003d String toPattern\u003e\n  $z2 \u003d ObjectUtils.notEqual($r6, $r5)\n  if ($z2 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $r8 \u003d Map registry\u003e\n  $r7 \u003d Map registry\u003e\n  $z3 \u003d ObjectUtils.notEqual($r8, $r7)\n  if ($z3 !\u003d 0) goto B11 else B12\n}",
      "B11 {\n  $z4 \u003d 1\n  goto B13\n}",
      "B12 {\n  $z4 \u003d 0\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ExtendedMessageFormat#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.FormattableUtils",
    "methodName": "append",
    "signature": "java.util.Formatter append(java.lang.CharSequence,java.util.Formatter,int,int,int,char,java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    Validate.isTrue(ellipsis \u003d\u003d null || precision \u003c 0 || ellipsis.length() \u003c\u003d precision, \"Specified ellipsis \u0027%1$s\u0027 exceeds precision of %2$s\", ellipsis, Integer.valueOf(precision));\r\n    final StringBuilder buf \u003d new StringBuilder(seq);\r\n    if (precision \u003e\u003d 0 \u0026\u0026 precision \u003c seq.length()) {\r\n        final CharSequence actualEllipsis \u003d ObjectUtils.defaultIfNull(ellipsis, StringUtils.EMPTY);\r\n        buf.replace(precision - actualEllipsis.length(), seq.length(), actualEllipsis.toString());\r\n    }\r\n    final boolean leftJustify \u003d (flags \u0026 FormattableFlags.LEFT_JUSTIFY) \u003d\u003d FormattableFlags.LEFT_JUSTIFY;\r\n    for (int i \u003d buf.length(); i \u003c width; i++) {\r\n        buf.insert(leftJustify ? i : 0, padChar);\r\n    }\r\n    formatter.format(buf.toString());\r\n    return formatter;\r\n}",
    "nodes": 18,
    "edges": 25,
    "cc": 9,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(i0 \u003c 0) → B2 | else → B3",
      "B2 : If($i8 \u003e i0) → B3 | else → B4",
      "B5 : If(i0 \u003c 0) → B6 | else → B8",
      "B6 : If(i0 \u003e\u003d $i4) → B7 | else → B8",
      "B8 : If($i9 !\u003d 1) → B9 | else → B10",
      "B12 : If(i10 \u003e\u003d i2) → B13 | else → B17",
      "B13 : If(z2 \u003d\u003d false) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  Formatter\n  i1 :\u003d @parameter2: int\n  i2 :\u003d @parameter3: int\n  i0 :\u003d @parameter4: int\n  c3 :\u003d @parameter5: char\n  CharSequence\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  if (i0 \u003c 0) goto B2 else B3\n}",
      "B2 {\n  $i8 \u003d r0.length()\n  if ($i8 \u003e i0) goto B3 else B4\n}",
      "B3 {\n  $z0 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z0 \u003d 0\n}",
      "B5 {\n  $r1 \u003d Object)[2]\n  $r1[0] \u003d r0\n  $r2 \u003d Integer.valueOf(i0)\n  $r1[1] \u003d $r2\n  Validate.isTrue($z0, \"Specified ellipsis \\\u0027%1$s\\\u0027 exceeds precision of %2$s\", $r1)\n  $r3 \u003d StringBuilder\n  new StringBuilder(r4)\n  if (i0 \u003c 0) goto B6 else B8\n}",
      "B6 {\n  $i4 \u003d r4.length()\n  if (i0 \u003e\u003d $i4) goto B7 else B8\n}",
      "B7 {\n  $r8 \u003d ObjectUtils.defaultIfNull(r0, \"\")\n  r10 \u003d CharSequence) $r8\n  $i5 \u003d r10.length()\n  $i7 \u003d i0 - $i5\n  $i6 \u003d r4.length()\n  $r9 \u003d r10.toString()\n  $r3.replace($i7, $i6, $r9)\n}",
      "B8 {\n  $i9 \u003d i1 \u0026 1\n  if ($i9 !\u003d 1) goto B9 else B10\n}",
      "B9 {\n  $z1 \u003d 1\n  goto B11\n}",
      "B10 {\n  $z1 \u003d 0\n}",
      "B11 {\n  z2 \u003d $z1\n  i10 \u003d $r3.length()\n}",
      "B12 {\n  if (i10 \u003e\u003d i2) goto B13 else B17\n}",
      "B13 {\n  if (z2 \u003d\u003d false) goto B14 else B15\n}",
      "B14 {\n  $i11 \u003d i10\n  goto B16\n}",
      "B15 {\n  $i11 \u003d 0\n}",
      "B16 {\n  $r3.insert($i11, c3)\n  i10 \u003d i10 + 1\n  goto B12\n}",
      "B17 {\n  $r7 \u003d $r3.toString()\n  $r6 \u003d Object)[0]\n  r5.format($r7, $r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B17",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B12",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.text.StrBuilder append(boolean)",
    "visibility": "public",
    "body": "{\r\n    if (value) {\r\n        ensureCapacity(size + 4);\r\n        buffer[size++] \u003d \u0027t\u0027;\r\n        buffer[size++] \u003d \u0027r\u0027;\r\n        buffer[size++] \u003d \u0027u\u0027;\r\n    } else {\r\n        ensureCapacity(size + 5);\r\n        buffer[size++] \u003d \u0027f\u0027;\r\n        buffer[size++] \u003d \u0027a\u0027;\r\n        buffer[size++] \u003d \u0027l\u0027;\r\n        buffer[size++] \u003d \u0027s\u0027;\r\n    }\r\n    buffer[size++] \u003d \u0027e\u0027;\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  z0 :\u003d @parameter0: boolean\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $i12 \u003d StrBuilder: int size\u003e\n  $i13 \u003d $i12 + 4\n  r0.ensureCapacity($i13)\n  $r6 \u003d StrBuilder: char[] buffer\u003e\n  $i14 \u003d StrBuilder: int size\u003e\n  $i15 \u003d $i14 + 1\n  StrBuilder: int size\u003e \u003d $i15\n  $r6[$i14] \u003d 116\n  $r7 \u003d StrBuilder: char[] buffer\u003e\n  $i16 \u003d StrBuilder: int size\u003e\n  $i17 \u003d $i16 + 1\n  StrBuilder: int size\u003e \u003d $i17\n  $r7[$i16] \u003d 114\n  $r8 \u003d StrBuilder: char[] buffer\u003e\n  $i18 \u003d StrBuilder: int size\u003e\n  $i19 \u003d $i18 + 1\n  StrBuilder: int size\u003e \u003d $i19\n  $r8[$i18] \u003d 117\n  goto B3\n}",
      "B2 {\n  $i0 \u003d StrBuilder: int size\u003e\n  $i1 \u003d $i0 + 5\n  r0.ensureCapacity($i1)\n  $r1 \u003d StrBuilder: char[] buffer\u003e\n  $i2 \u003d StrBuilder: int size\u003e\n  $i3 \u003d $i2 + 1\n  StrBuilder: int size\u003e \u003d $i3\n  $r1[$i2] \u003d 102\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  $i4 \u003d StrBuilder: int size\u003e\n  $i5 \u003d $i4 + 1\n  StrBuilder: int size\u003e \u003d $i5\n  $r2[$i4] \u003d 97\n  $r3 \u003d StrBuilder: char[] buffer\u003e\n  $i6 \u003d StrBuilder: int size\u003e\n  $i7 \u003d $i6 + 1\n  StrBuilder: int size\u003e \u003d $i7\n  $r3[$i6] \u003d 108\n  $r4 \u003d StrBuilder: char[] buffer\u003e\n  $i8 \u003d StrBuilder: int size\u003e\n  $i9 \u003d $i8 + 1\n  StrBuilder: int size\u003e \u003d $i9\n  $r4[$i8] \u003d 115\n}",
      "B3 {\n  $r5 \u003d StrBuilder: char[] buffer\u003e\n  $i10 \u003d StrBuilder: int size\u003e\n  $i11 \u003d $i10 + 1\n  StrBuilder: int size\u003e \u003d $i11\n  $r5[$i10] \u003d 101\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#ensureCapacity(...1)",
        "body": "{\r\n    if (capacity \u003e buffer.length) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[capacity * 2]);\r\n    }\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.text.StrBuilder append(char[])",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d length();\r\n    ensureCapacity(len + 1);\r\n    buffer[size++] \u003d ch;\r\n    return this;\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003c\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  r0 :\u003d @parameter0: char[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r1.appendNull()\n  return\n}",
      "B2 {\n  i0 \u003d lengthof r0\n  if (i0 \u003c\u003d 0) goto B3 else B4\n}",
      "B3 {\n  i1 \u003d r1.length()\n  $i2 \u003d i1 + i0\n  r1.ensureCapacity($i2)\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  System.arraycopy(r0, 0, $r2, i1, i0)\n  $i3 \u003d StrBuilder: int size\u003e\n  $i4 \u003d $i3 + i0\n  StrBuilder: int size\u003e \u003d $i4\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#ensureCapacity(...1)",
        "body": "{\r\n    if (capacity \u003e buffer.length) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[capacity * 2]);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "StrBuilder#length(...0)",
        "body": "{\r\n    return size;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.text.StrBuilder append(char[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (chars \u003d\u003d null) {\r\n        return appendNull();\r\n    }\r\n    if (startIndex \u003c 0 || startIndex \u003e chars.length) {\r\n        throw new StringIndexOutOfBoundsException(\"Invalid startIndex: \" + length);\r\n    }\r\n    if (length \u003c 0 || startIndex + length \u003e chars.length) {\r\n        throw new StringIndexOutOfBoundsException(\"Invalid length: \" + length);\r\n    }\r\n    if (length \u003e 0) {\r\n        final int len \u003d length();\r\n        ensureCapacity(len + length);\r\n        System.arraycopy(chars, startIndex, buffer, len, length);\r\n        size +\u003d length;\r\n    }\r\n    return this;\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003c 0) → B3 | else → B4",
      "B3 : If(i0 \u003c\u003d $i2) → B4 | else → B5",
      "B5 : If(i1 \u003c 0) → B6 | else → B7",
      "B6 : If($i4 \u003c\u003d $i3) → B7 | else → B8",
      "B8 : If(i1 \u003c\u003d 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  r0 :\u003d @parameter0: char[]\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r13 \u003d r11.appendNull()\n  return\n}",
      "B2 {\n  if (i0 \u003c 0) goto B3 else B4\n}",
      "B3 {\n  $i2 \u003d lengthof r0\n  if (i0 \u003c\u003d $i2) goto B4 else B5\n}",
      "B4 {\n  $r1 \u003d StringIndexOutOfBoundsException\n  $r2 \u003d StringBuilder\n  new StringBuilder()\n  $r3 \u003d $r2.append(\"Invalid startIndex: \")\n  $r4 \u003d $r3.append(i1)\n  $r5 \u003d $r4.toString()\n  new StringIndexOutOfBoundsException($r5)\n  throw $r1\n}",
      "B5 {\n  if (i1 \u003c 0) goto B6 else B7\n}",
      "B6 {\n  $i4 \u003d i0 + i1\n  $i3 \u003d lengthof r0\n  if ($i4 \u003c\u003d $i3) goto B7 else B8\n}",
      "B7 {\n  $r6 \u003d StringIndexOutOfBoundsException\n  $r7 \u003d StringBuilder\n  new StringBuilder()\n  $r8 \u003d $r7.append(\"Invalid length: \")\n  $r9 \u003d $r8.append(i1)\n  $r10 \u003d $r9.toString()\n  new StringIndexOutOfBoundsException($r10)\n  throw $r6\n}",
      "B8 {\n  if (i1 \u003c\u003d 0) goto B9 else B10\n}",
      "B9 {\n  i5 \u003d r11.length()\n  $i6 \u003d i5 + i1\n  r11.ensureCapacity($i6)\n  $r12 \u003d StrBuilder: char[] buffer\u003e\n  System.arraycopy(r0, i0, $r12, i5, i1)\n  $i7 \u003d StrBuilder: int size\u003e\n  $i8 \u003d $i7 + i1\n  StrBuilder: int size\u003e \u003d $i8\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#ensureCapacity(...1)",
        "body": "{\r\n    if (capacity \u003e buffer.length) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[capacity * 2]);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "StrBuilder#length(...0)",
        "body": "{\r\n    return size;\r\n}"
      },
      {
        "name": "StrBuilder#appendNull(...0)",
        "body": "{\r\n    if (nullText \u003d\u003d null) {\r\n        return this;\r\n    }\r\n    return append(nullText);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.text.StrBuilder append(java.nio.CharBuffer)",
    "visibility": "public",
    "body": "{\r\n    if (buf \u003d\u003d null) {\r\n        return appendNull();\r\n    }\r\n    if (buf.hasArray()) {\r\n        final int length \u003d buf.remaining();\r\n        final int len \u003d length();\r\n        ensureCapacity(len + length);\r\n        System.arraycopy(buf.array(), buf.arrayOffset() + buf.position(), buffer, len, length);\r\n        size +\u003d length;\r\n    } else {\r\n        append(buf.toString());\r\n    }\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  CharBuffer\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d r1.appendNull()\n  return\n}",
      "B2 {\n  $z0 \u003d r0.hasArray()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  i0 \u003d r0.remaining()\n  i1 \u003d r1.length()\n  $i2 \u003d i1 + i0\n  r1.ensureCapacity($i2)\n  $r4 \u003d r0.array()\n  $i4 \u003d r0.arrayOffset()\n  $i3 \u003d r0.position()\n  $i5 \u003d $i4 + $i3\n  $r3 \u003d StrBuilder: char[] buffer\u003e\n  System.arraycopy($r4, $i5, $r3, i1, i0)\n  $i6 \u003d StrBuilder: int size\u003e\n  $i7 \u003d $i6 + i0\n  StrBuilder: int size\u003e \u003d $i7\n  goto B5\n}",
      "B4 {\n  $r2 \u003d r0.toString()\n  r1.append($r2)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#ensureCapacity(...1)",
        "body": "{\r\n    if (capacity \u003e buffer.length) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[capacity * 2]);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "StrBuilder#length(...0)",
        "body": "{\r\n    return size;\r\n}"
      },
      {
        "name": "StrBuilder#appendNull(...0)",
        "body": "{\r\n    if (nullText \u003d\u003d null) {\r\n        return this;\r\n    }\r\n    return append(nullText);\r\n}"
      },
      {
        "name": "StrBuilder#append(...1)",
        "body": "{\r\n    if (value) {\r\n        ensureCapacity(size + 4);\r\n        buffer[size++] \u003d \u0027t\u0027;\r\n        buffer[size++] \u003d \u0027r\u0027;\r\n        buffer[size++] \u003d \u0027u\u0027;\r\n    } else {\r\n        ensureCapacity(size + 5);\r\n        buffer[size++] \u003d \u0027f\u0027;\r\n        buffer[size++] \u003d \u0027a\u0027;\r\n        buffer[size++] \u003d \u0027l\u0027;\r\n        buffer[size++] \u003d \u0027s\u0027;\r\n    }\r\n    buffer[size++] \u003d \u0027e\u0027;\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.text.StrBuilder append(java.nio.CharBuffer,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (buf \u003d\u003d null) {\r\n        return appendNull();\r\n    }\r\n    if (buf.hasArray()) {\r\n        final int totalLength \u003d buf.remaining();\r\n        if (startIndex \u003c 0 || startIndex \u003e totalLength) {\r\n            throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\r\n        }\r\n        if (length \u003c 0 || startIndex + length \u003e totalLength) {\r\n            throw new StringIndexOutOfBoundsException(\"length must be valid\");\r\n        }\r\n        final int len \u003d length();\r\n        ensureCapacity(len + length);\r\n        System.arraycopy(buf.array(), buf.arrayOffset() + buf.position() + startIndex, buffer, len, length);\r\n        size +\u003d length;\r\n    } else {\r\n        append(buf.toString(), startIndex, length);\r\n    }\r\n    return this;\r\n}",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B10",
      "B3 : If(i0 \u003c 0) → B4 | else → B5",
      "B4 : If(i0 \u003c\u003d i2) → B5 | else → B6",
      "B6 : If(i1 \u003c 0) → B7 | else → B8",
      "B7 : If($i3 \u003c\u003d i2) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  CharBuffer\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d r1.appendNull()\n  return\n}",
      "B2 {\n  $z0 \u003d r0.hasArray()\n  if ($z0 \u003d\u003d false) goto B3 else B10\n}",
      "B3 {\n  i2 \u003d r0.remaining()\n  if (i0 \u003c 0) goto B4 else B5\n}",
      "B4 {\n  if (i0 \u003c\u003d i2) goto B5 else B6\n}",
      "B5 {\n  $r3 \u003d StringIndexOutOfBoundsException\n  new StringIndexOutOfBoundsException(\"startIndex must be valid\")\n  throw $r3\n}",
      "B6 {\n  if (i1 \u003c 0) goto B7 else B8\n}",
      "B7 {\n  $i3 \u003d i0 + i1\n  if ($i3 \u003c\u003d i2) goto B8 else B9\n}",
      "B8 {\n  $r4 \u003d StringIndexOutOfBoundsException\n  new StringIndexOutOfBoundsException(\"length must be valid\")\n  throw $r4\n}",
      "B9 {\n  i4 \u003d r1.length()\n  $i5 \u003d i4 + i1\n  r1.ensureCapacity($i5)\n  $r6 \u003d r0.array()\n  $i7 \u003d r0.arrayOffset()\n  $i6 \u003d r0.position()\n  $i8 \u003d $i7 + $i6\n  $i9 \u003d $i8 + i0\n  $r5 \u003d StrBuilder: char[] buffer\u003e\n  System.arraycopy($r6, $i9, $r5, i4, i1)\n  $i10 \u003d StrBuilder: int size\u003e\n  $i11 \u003d $i10 + i1\n  StrBuilder: int size\u003e \u003d $i11\n  goto B11\n}",
      "B10 {\n  $r2 \u003d r0.toString()\n  r1.append($r2, i0, i1)\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B10",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#ensureCapacity(...1)",
        "body": "{\r\n    if (capacity \u003e buffer.length) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[capacity * 2]);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "StrBuilder#length(...0)",
        "body": "{\r\n    return size;\r\n}"
      },
      {
        "name": "StrBuilder#appendNull(...0)",
        "body": "{\r\n    if (nullText \u003d\u003d null) {\r\n        return this;\r\n    }\r\n    return append(nullText);\r\n}"
      },
      {
        "name": "StrBuilder#append(...3)",
        "body": "{\r\n    if (chars \u003d\u003d null) {\r\n        return appendNull();\r\n    }\r\n    if (startIndex \u003c 0 || startIndex \u003e chars.length) {\r\n        throw new StringIndexOutOfBoundsException(\"Invalid startIndex: \" + length);\r\n    }\r\n    if (length \u003c 0 || startIndex + length \u003e chars.length) {\r\n        throw new StringIndexOutOfBoundsException(\"Invalid length: \" + length);\r\n    }\r\n    if (length \u003e 0) {\r\n        final int len \u003d length();\r\n        ensureCapacity(len + length);\r\n        System.arraycopy(chars, startIndex, buffer, len, length);\r\n        size +\u003d length;\r\n    }\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.text.StrBuilder append(java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (seq \u003d\u003d null) {\r\n        return appendNull();\r\n    }\r\n    if (seq instanceof StrBuilder) {\r\n        return append((StrBuilder) seq);\r\n    }\r\n    if (seq instanceof StringBuilder) {\r\n        return append((StringBuilder) seq);\r\n    }\r\n    if (seq instanceof StringBuffer) {\r\n        return append((StringBuffer) seq);\r\n    }\r\n    if (seq instanceof CharBuffer) {\r\n        return append((CharBuffer) seq);\r\n    }\r\n    return append(seq.toString());\r\n}",
    "nodes": 11,
    "edges": 10,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6",
      "B6 : If($z2 \u003d\u003d false) → B7 | else → B8",
      "B8 : If($z3 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  CharSequence\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r12 \u003d r1.appendNull()\n  return\n}",
      "B2 {\n  $z0 \u003d StrBuilder\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r10 \u003d StrBuilder) r0\n  $r11 \u003d r1.append($r10)\n  return\n}",
      "B4 {\n  $z1 \u003d StringBuilder\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r8 \u003d StringBuilder) r0\n  $r9 \u003d r1.append($r8)\n  return\n}",
      "B6 {\n  $z2 \u003d StringBuffer\n  if ($z2 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $r6 \u003d StringBuffer) r0\n  $r7 \u003d r1.append($r6)\n  return\n}",
      "B8 {\n  $z3 \u003d CharBuffer\n  if ($z3 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r4 \u003d CharBuffer) r0\n  $r5 \u003d r1.append($r4)\n  return\n}",
      "B10 {\n  $r2 \u003d r0.toString()\n  $r3 \u003d r1.append($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#appendNull(...0)",
        "body": "{\r\n    if (nullText \u003d\u003d null) {\r\n        return this;\r\n    }\r\n    return append(nullText);\r\n}"
      },
      {
        "name": "StrBuilder#append(...1)",
        "body": "{\r\n    if (value) {\r\n        ensureCapacity(size + 4);\r\n        buffer[size++] \u003d \u0027t\u0027;\r\n        buffer[size++] \u003d \u0027r\u0027;\r\n        buffer[size++] \u003d \u0027u\u0027;\r\n    } else {\r\n        ensureCapacity(size + 5);\r\n        buffer[size++] \u003d \u0027f\u0027;\r\n        buffer[size++] \u003d \u0027a\u0027;\r\n        buffer[size++] \u003d \u0027l\u0027;\r\n        buffer[size++] \u003d \u0027s\u0027;\r\n    }\r\n    buffer[size++] \u003d \u0027e\u0027;\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.text.StrBuilder append(java.lang.CharSequence,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (seq \u003d\u003d null) {\r\n        return appendNull();\r\n    }\r\n    return append(seq.toString(), startIndex, length);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  CharSequence\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r1.appendNull()\n  return\n}",
      "B2 {\n  $r2 \u003d r0.toString()\n  $r3 \u003d r1.append($r2, i0, i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#appendNull(...0)",
        "body": "{\r\n    if (nullText \u003d\u003d null) {\r\n        return this;\r\n    }\r\n    return append(nullText);\r\n}"
      },
      {
        "name": "StrBuilder#append(...3)",
        "body": "{\r\n    if (chars \u003d\u003d null) {\r\n        return appendNull();\r\n    }\r\n    if (startIndex \u003c 0 || startIndex \u003e chars.length) {\r\n        throw new StringIndexOutOfBoundsException(\"Invalid startIndex: \" + length);\r\n    }\r\n    if (length \u003c 0 || startIndex + length \u003e chars.length) {\r\n        throw new StringIndexOutOfBoundsException(\"Invalid length: \" + length);\r\n    }\r\n    if (length \u003e 0) {\r\n        final int len \u003d length();\r\n        ensureCapacity(len + length);\r\n        System.arraycopy(chars, startIndex, buffer, len, length);\r\n        size +\u003d length;\r\n    }\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj \u003d\u003d null) {\r\n        return appendNull();\r\n    }\r\n    if (obj instanceof CharSequence) {\r\n        return append((CharSequence) obj);\r\n    }\r\n    return append(obj.toString());\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d r1.appendNull()\n  return\n}",
      "B2 {\n  $z0 \u003d CharSequence\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d CharSequence) r0\n  $r5 \u003d r1.append($r4)\n  return\n}",
      "B4 {\n  $r2 \u003d r0.toString()\n  $r3 \u003d r1.append($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#appendNull(...0)",
        "body": "{\r\n    if (nullText \u003d\u003d null) {\r\n        return this;\r\n    }\r\n    return append(nullText);\r\n}"
      },
      {
        "name": "StrBuilder#append(...1)",
        "body": "{\r\n    if (value) {\r\n        ensureCapacity(size + 4);\r\n        buffer[size++] \u003d \u0027t\u0027;\r\n        buffer[size++] \u003d \u0027r\u0027;\r\n        buffer[size++] \u003d \u0027u\u0027;\r\n    } else {\r\n        ensureCapacity(size + 5);\r\n        buffer[size++] \u003d \u0027f\u0027;\r\n        buffer[size++] \u003d \u0027a\u0027;\r\n        buffer[size++] \u003d \u0027l\u0027;\r\n        buffer[size++] \u003d \u0027s\u0027;\r\n    }\r\n    buffer[size++] \u003d \u0027e\u0027;\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.text.StrBuilder append(org.apache.commons.lang3.text.StrBuilder)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return appendNull();\r\n    }\r\n    final int strLen \u003d str.length();\r\n    if (strLen \u003e 0) {\r\n        final int len \u003d length();\r\n        ensureCapacity(len + strLen);\r\n        System.arraycopy(str.buffer, 0, buffer, len, strLen);\r\n        size +\u003d strLen;\r\n    }\r\n    return this;\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003c\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  StrBuilder\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r1.appendNull()\n  return\n}",
      "B2 {\n  i0 \u003d r0.length()\n  if (i0 \u003c\u003d 0) goto B3 else B4\n}",
      "B3 {\n  i1 \u003d r1.length()\n  $i2 \u003d i1 + i0\n  r1.ensureCapacity($i2)\n  $r3 \u003d StrBuilder: char[] buffer\u003e\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  System.arraycopy($r3, 0, $r2, i1, i0)\n  $i3 \u003d StrBuilder: int size\u003e\n  $i4 \u003d $i3 + i0\n  StrBuilder: int size\u003e \u003d $i4\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#ensureCapacity(...1)",
        "body": "{\r\n    if (capacity \u003e buffer.length) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[capacity * 2]);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "StrBuilder#length(...0)",
        "body": "{\r\n    return size;\r\n}"
      },
      {
        "name": "StrBuilder#appendNull(...0)",
        "body": "{\r\n    if (nullText \u003d\u003d null) {\r\n        return this;\r\n    }\r\n    return append(nullText);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.text.StrBuilder append(org.apache.commons.lang3.text.StrBuilder,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return appendNull();\r\n    }\r\n    if (startIndex \u003c 0 || startIndex \u003e str.length()) {\r\n        throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\r\n    }\r\n    if (length \u003c 0 || startIndex + length \u003e str.length()) {\r\n        throw new StringIndexOutOfBoundsException(\"length must be valid\");\r\n    }\r\n    if (length \u003e 0) {\r\n        final int len \u003d length();\r\n        ensureCapacity(len + length);\r\n        str.getChars(startIndex, startIndex + length, buffer, len);\r\n        size +\u003d length;\r\n    }\r\n    return this;\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003c 0) → B3 | else → B4",
      "B3 : If(i0 \u003c\u003d $i1) → B4 | else → B5",
      "B5 : If(i2 \u003c 0) → B6 | else → B7",
      "B6 : If($i4 \u003c\u003d $i3) → B7 | else → B8",
      "B8 : If(i2 \u003c\u003d 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  StrBuilder\n  i0 :\u003d @parameter1: int\n  i2 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d r3.appendNull()\n  return\n}",
      "B2 {\n  if (i0 \u003c 0) goto B3 else B4\n}",
      "B3 {\n  $i1 \u003d r0.length()\n  if (i0 \u003c\u003d $i1) goto B4 else B5\n}",
      "B4 {\n  $r1 \u003d StringIndexOutOfBoundsException\n  new StringIndexOutOfBoundsException(\"startIndex must be valid\")\n  throw $r1\n}",
      "B5 {\n  if (i2 \u003c 0) goto B6 else B7\n}",
      "B6 {\n  $i4 \u003d i0 + i2\n  $i3 \u003d r0.length()\n  if ($i4 \u003c\u003d $i3) goto B7 else B8\n}",
      "B7 {\n  $r2 \u003d StringIndexOutOfBoundsException\n  new StringIndexOutOfBoundsException(\"length must be valid\")\n  throw $r2\n}",
      "B8 {\n  if (i2 \u003c\u003d 0) goto B9 else B10\n}",
      "B9 {\n  i5 \u003d r3.length()\n  $i6 \u003d i5 + i2\n  r3.ensureCapacity($i6)\n  $i7 \u003d i0 + i2\n  $r4 \u003d StrBuilder: char[] buffer\u003e\n  r0.getChars(i0, $i7, $r4, i5)\n  $i8 \u003d StrBuilder: int size\u003e\n  $i9 \u003d $i8 + i2\n  StrBuilder: int size\u003e \u003d $i9\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#ensureCapacity(...1)",
        "body": "{\r\n    if (capacity \u003e buffer.length) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[capacity * 2]);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "StrBuilder#length(...0)",
        "body": "{\r\n    return size;\r\n}"
      },
      {
        "name": "StrBuilder#appendNull(...0)",
        "body": "{\r\n    if (nullText \u003d\u003d null) {\r\n        return this;\r\n    }\r\n    return append(nullText);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.text.StrBuilder append(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return appendNull();\r\n    }\r\n    final int strLen \u003d str.length();\r\n    if (strLen \u003e 0) {\r\n        final int len \u003d length();\r\n        ensureCapacity(len + strLen);\r\n        str.getChars(0, strLen, buffer, len);\r\n        size +\u003d strLen;\r\n    }\r\n    return this;\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003c\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r1.appendNull()\n  return\n}",
      "B2 {\n  i0 \u003d r0.length()\n  if (i0 \u003c\u003d 0) goto B3 else B4\n}",
      "B3 {\n  i1 \u003d r1.length()\n  $i2 \u003d i1 + i0\n  r1.ensureCapacity($i2)\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  r0.getChars(0, i0, $r2, i1)\n  $i3 \u003d StrBuilder: int size\u003e\n  $i4 \u003d $i3 + i0\n  StrBuilder: int size\u003e \u003d $i4\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#ensureCapacity(...1)",
        "body": "{\r\n    if (capacity \u003e buffer.length) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[capacity * 2]);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "StrBuilder#length(...0)",
        "body": "{\r\n    return size;\r\n}"
      },
      {
        "name": "StrBuilder#appendNull(...0)",
        "body": "{\r\n    if (nullText \u003d\u003d null) {\r\n        return this;\r\n    }\r\n    return append(nullText);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.text.StrBuilder append(java.lang.String,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return appendNull();\r\n    }\r\n    if (startIndex \u003c 0 || startIndex \u003e str.length()) {\r\n        throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\r\n    }\r\n    if (length \u003c 0 || startIndex + length \u003e str.length()) {\r\n        throw new StringIndexOutOfBoundsException(\"length must be valid\");\r\n    }\r\n    if (length \u003e 0) {\r\n        final int len \u003d length();\r\n        ensureCapacity(len + length);\r\n        str.getChars(startIndex, startIndex + length, buffer, len);\r\n        size +\u003d length;\r\n    }\r\n    return this;\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003c 0) → B3 | else → B4",
      "B3 : If(i0 \u003c\u003d $i1) → B4 | else → B5",
      "B5 : If(i2 \u003c 0) → B6 | else → B7",
      "B6 : If($i4 \u003c\u003d $i3) → B7 | else → B8",
      "B8 : If(i2 \u003c\u003d 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  String\n  i0 :\u003d @parameter1: int\n  i2 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d r3.appendNull()\n  return\n}",
      "B2 {\n  if (i0 \u003c 0) goto B3 else B4\n}",
      "B3 {\n  $i1 \u003d r0.length()\n  if (i0 \u003c\u003d $i1) goto B4 else B5\n}",
      "B4 {\n  $r1 \u003d StringIndexOutOfBoundsException\n  new StringIndexOutOfBoundsException(\"startIndex must be valid\")\n  throw $r1\n}",
      "B5 {\n  if (i2 \u003c 0) goto B6 else B7\n}",
      "B6 {\n  $i4 \u003d i0 + i2\n  $i3 \u003d r0.length()\n  if ($i4 \u003c\u003d $i3) goto B7 else B8\n}",
      "B7 {\n  $r2 \u003d StringIndexOutOfBoundsException\n  new StringIndexOutOfBoundsException(\"length must be valid\")\n  throw $r2\n}",
      "B8 {\n  if (i2 \u003c\u003d 0) goto B9 else B10\n}",
      "B9 {\n  i5 \u003d r3.length()\n  $i6 \u003d i5 + i2\n  r3.ensureCapacity($i6)\n  $i7 \u003d i0 + i2\n  $r4 \u003d StrBuilder: char[] buffer\u003e\n  r0.getChars(i0, $i7, $r4, i5)\n  $i8 \u003d StrBuilder: int size\u003e\n  $i9 \u003d $i8 + i2\n  StrBuilder: int size\u003e \u003d $i9\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#ensureCapacity(...1)",
        "body": "{\r\n    if (capacity \u003e buffer.length) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[capacity * 2]);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "StrBuilder#length(...0)",
        "body": "{\r\n    return size;\r\n}"
      },
      {
        "name": "StrBuilder#appendNull(...0)",
        "body": "{\r\n    if (nullText \u003d\u003d null) {\r\n        return this;\r\n    }\r\n    return append(nullText);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.text.StrBuilder append(java.lang.StringBuffer)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return appendNull();\r\n    }\r\n    final int strLen \u003d str.length();\r\n    if (strLen \u003e 0) {\r\n        final int len \u003d length();\r\n        ensureCapacity(len + strLen);\r\n        str.getChars(0, strLen, buffer, len);\r\n        size +\u003d strLen;\r\n    }\r\n    return this;\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003c\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  StringBuffer\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r1.appendNull()\n  return\n}",
      "B2 {\n  i0 \u003d r0.length()\n  if (i0 \u003c\u003d 0) goto B3 else B4\n}",
      "B3 {\n  i1 \u003d r1.length()\n  $i2 \u003d i1 + i0\n  r1.ensureCapacity($i2)\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  r0.getChars(0, i0, $r2, i1)\n  $i3 \u003d StrBuilder: int size\u003e\n  $i4 \u003d $i3 + i0\n  StrBuilder: int size\u003e \u003d $i4\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#ensureCapacity(...1)",
        "body": "{\r\n    if (capacity \u003e buffer.length) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[capacity * 2]);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "StrBuilder#length(...0)",
        "body": "{\r\n    return size;\r\n}"
      },
      {
        "name": "StrBuilder#appendNull(...0)",
        "body": "{\r\n    if (nullText \u003d\u003d null) {\r\n        return this;\r\n    }\r\n    return append(nullText);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.text.StrBuilder append(java.lang.StringBuffer,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return appendNull();\r\n    }\r\n    if (startIndex \u003c 0 || startIndex \u003e str.length()) {\r\n        throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\r\n    }\r\n    if (length \u003c 0 || startIndex + length \u003e str.length()) {\r\n        throw new StringIndexOutOfBoundsException(\"length must be valid\");\r\n    }\r\n    if (length \u003e 0) {\r\n        final int len \u003d length();\r\n        ensureCapacity(len + length);\r\n        str.getChars(startIndex, startIndex + length, buffer, len);\r\n        size +\u003d length;\r\n    }\r\n    return this;\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003c 0) → B3 | else → B4",
      "B3 : If(i0 \u003c\u003d $i1) → B4 | else → B5",
      "B5 : If(i2 \u003c 0) → B6 | else → B7",
      "B6 : If($i4 \u003c\u003d $i3) → B7 | else → B8",
      "B8 : If(i2 \u003c\u003d 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  StringBuffer\n  i0 :\u003d @parameter1: int\n  i2 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d r3.appendNull()\n  return\n}",
      "B2 {\n  if (i0 \u003c 0) goto B3 else B4\n}",
      "B3 {\n  $i1 \u003d r0.length()\n  if (i0 \u003c\u003d $i1) goto B4 else B5\n}",
      "B4 {\n  $r1 \u003d StringIndexOutOfBoundsException\n  new StringIndexOutOfBoundsException(\"startIndex must be valid\")\n  throw $r1\n}",
      "B5 {\n  if (i2 \u003c 0) goto B6 else B7\n}",
      "B6 {\n  $i4 \u003d i0 + i2\n  $i3 \u003d r0.length()\n  if ($i4 \u003c\u003d $i3) goto B7 else B8\n}",
      "B7 {\n  $r2 \u003d StringIndexOutOfBoundsException\n  new StringIndexOutOfBoundsException(\"length must be valid\")\n  throw $r2\n}",
      "B8 {\n  if (i2 \u003c\u003d 0) goto B9 else B10\n}",
      "B9 {\n  i5 \u003d r3.length()\n  $i6 \u003d i5 + i2\n  r3.ensureCapacity($i6)\n  $i7 \u003d i0 + i2\n  $r4 \u003d StrBuilder: char[] buffer\u003e\n  r0.getChars(i0, $i7, $r4, i5)\n  $i8 \u003d StrBuilder: int size\u003e\n  $i9 \u003d $i8 + i2\n  StrBuilder: int size\u003e \u003d $i9\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#ensureCapacity(...1)",
        "body": "{\r\n    if (capacity \u003e buffer.length) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[capacity * 2]);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "StrBuilder#length(...0)",
        "body": "{\r\n    return size;\r\n}"
      },
      {
        "name": "StrBuilder#appendNull(...0)",
        "body": "{\r\n    if (nullText \u003d\u003d null) {\r\n        return this;\r\n    }\r\n    return append(nullText);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.text.StrBuilder append(java.lang.StringBuilder)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return appendNull();\r\n    }\r\n    final int strLen \u003d str.length();\r\n    if (strLen \u003e 0) {\r\n        final int len \u003d length();\r\n        ensureCapacity(len + strLen);\r\n        str.getChars(0, strLen, buffer, len);\r\n        size +\u003d strLen;\r\n    }\r\n    return this;\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003c\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  StringBuilder\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r1.appendNull()\n  return\n}",
      "B2 {\n  i0 \u003d r0.length()\n  if (i0 \u003c\u003d 0) goto B3 else B4\n}",
      "B3 {\n  i1 \u003d r1.length()\n  $i2 \u003d i1 + i0\n  r1.ensureCapacity($i2)\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  r0.getChars(0, i0, $r2, i1)\n  $i3 \u003d StrBuilder: int size\u003e\n  $i4 \u003d $i3 + i0\n  StrBuilder: int size\u003e \u003d $i4\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#ensureCapacity(...1)",
        "body": "{\r\n    if (capacity \u003e buffer.length) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[capacity * 2]);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "StrBuilder#length(...0)",
        "body": "{\r\n    return size;\r\n}"
      },
      {
        "name": "StrBuilder#appendNull(...0)",
        "body": "{\r\n    if (nullText \u003d\u003d null) {\r\n        return this;\r\n    }\r\n    return append(nullText);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "append",
    "signature": "org.apache.commons.lang3.text.StrBuilder append(java.lang.StringBuilder,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return appendNull();\r\n    }\r\n    if (startIndex \u003c 0 || startIndex \u003e str.length()) {\r\n        throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\r\n    }\r\n    if (length \u003c 0 || startIndex + length \u003e str.length()) {\r\n        throw new StringIndexOutOfBoundsException(\"length must be valid\");\r\n    }\r\n    if (length \u003e 0) {\r\n        final int len \u003d length();\r\n        ensureCapacity(len + length);\r\n        str.getChars(startIndex, startIndex + length, buffer, len);\r\n        size +\u003d length;\r\n    }\r\n    return this;\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003c 0) → B3 | else → B4",
      "B3 : If(i0 \u003c\u003d $i1) → B4 | else → B5",
      "B5 : If(i2 \u003c 0) → B6 | else → B7",
      "B6 : If($i4 \u003c\u003d $i3) → B7 | else → B8",
      "B8 : If(i2 \u003c\u003d 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  StringBuilder\n  i0 :\u003d @parameter1: int\n  i2 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d r3.appendNull()\n  return\n}",
      "B2 {\n  if (i0 \u003c 0) goto B3 else B4\n}",
      "B3 {\n  $i1 \u003d r0.length()\n  if (i0 \u003c\u003d $i1) goto B4 else B5\n}",
      "B4 {\n  $r1 \u003d StringIndexOutOfBoundsException\n  new StringIndexOutOfBoundsException(\"startIndex must be valid\")\n  throw $r1\n}",
      "B5 {\n  if (i2 \u003c 0) goto B6 else B7\n}",
      "B6 {\n  $i4 \u003d i0 + i2\n  $i3 \u003d r0.length()\n  if ($i4 \u003c\u003d $i3) goto B7 else B8\n}",
      "B7 {\n  $r2 \u003d StringIndexOutOfBoundsException\n  new StringIndexOutOfBoundsException(\"length must be valid\")\n  throw $r2\n}",
      "B8 {\n  if (i2 \u003c\u003d 0) goto B9 else B10\n}",
      "B9 {\n  i5 \u003d r3.length()\n  $i6 \u003d i5 + i2\n  r3.ensureCapacity($i6)\n  $i7 \u003d i0 + i2\n  $r4 \u003d StrBuilder: char[] buffer\u003e\n  r0.getChars(i0, $i7, $r4, i5)\n  $i8 \u003d StrBuilder: int size\u003e\n  $i9 \u003d $i8 + i2\n  StrBuilder: int size\u003e \u003d $i9\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#ensureCapacity(...1)",
        "body": "{\r\n    if (capacity \u003e buffer.length) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[capacity * 2]);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "StrBuilder#length(...0)",
        "body": "{\r\n    return size;\r\n}"
      },
      {
        "name": "StrBuilder#appendNull(...0)",
        "body": "{\r\n    if (nullText \u003d\u003d null) {\r\n        return this;\r\n    }\r\n    return append(nullText);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "appendAll",
    "signature": "org.apache.commons.lang3.text.StrBuilder appendAll(java.lang.Iterable)",
    "visibility": "public",
    "body": "{\r\n    if (iterable !\u003d null) {\r\n        iterable.forEach(this::append);\r\n    }\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  Iterable\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d StrBuilder$append__168.bootstrap$(r1)\n  r0.forEach($r2)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "appendAll",
    "signature": "org.apache.commons.lang3.text.StrBuilder appendAll(java.util.Iterator)",
    "visibility": "public",
    "body": "{\r\n    if (it !\u003d null) {\r\n        it.forEachRemaining(this::append);\r\n    }\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  Iterator\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d StrBuilder$append__169.bootstrap$(r1)\n  r0.forEachRemaining($r2)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "appendAll",
    "signature": "org.apache.commons.lang3.text.StrBuilder appendAll(java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B4",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  Object[]\n  $z0 \u003d ArrayUtils.isNotEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B4\n}",
      "B1 {\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B4\n}",
      "B3 {\n  r2 \u003d r0[i1]\n  r1.append(r2)\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "appendFixedWidthPadLeft",
    "signature": "org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)",
    "visibility": "public",
    "body": "{\r\n    if (width \u003e 0) {\r\n        ensureCapacity(size + width);\r\n        String str \u003d ObjectUtils.toString(obj, this::getNullText);\r\n        if (str \u003d\u003d null) {\r\n            str \u003d StringUtils.EMPTY;\r\n        }\r\n        final int strLen \u003d str.length();\r\n        if (strLen \u003e\u003d width) {\r\n            str.getChars(strLen - width, strLen, buffer, size);\r\n        } else {\r\n            final int padLen \u003d width - strLen;\r\n            for (int i \u003d 0; i \u003c padLen; i++) {\r\n                buffer[size + i] \u003d padChar;\r\n            }\r\n            str.getChars(0, strLen, buffer, size + padLen);\r\n        }\r\n        size +\u003d width;\r\n    }\r\n    return this;\r\n}",
    "nodes": 11,
    "edges": 14,
    "cc": 5,
    "flowSummary": [
      "B0 : If(i0 \u003c\u003d 0) → B1 | else → B10",
      "B1 : If(r6 !\u003d null) → B2 | else → B3",
      "B3 : If($i13 \u003c i0) → B4 | else → B5",
      "B6 : If(i14 \u003e\u003d i3) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  Object\n  i0 :\u003d @parameter1: int\n  c9 :\u003d @parameter2: char\n  if (i0 \u003c\u003d 0) goto B1 else B10\n}",
      "B1 {\n  $i1 \u003d StrBuilder: int size\u003e\n  $i2 \u003d $i1 + i0\n  r0.ensureCapacity($i2)\n  $r2 \u003d StrBuilder$getNullText__170.bootstrap$(r0)\n  r6 \u003d ObjectUtils.toString(r1, $r2)\n  if (r6 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  r6 \u003d \"\"\n}",
      "B3 {\n  $i13 \u003d r6.length()\n  if ($i13 \u003c i0) goto B4 else B5\n}",
      "B4 {\n  $i12 \u003d $i13 - i0\n  $r5 \u003d StrBuilder: char[] buffer\u003e\n  $i11 \u003d StrBuilder: int size\u003e\n  r6.getChars($i12, $i13, $r5, $i11)\n  goto B9\n}",
      "B5 {\n  i3 \u003d i0 - $i13\n  i14 \u003d 0\n}",
      "B6 {\n  if (i14 \u003e\u003d i3) goto B7 else B8\n}",
      "B7 {\n  $r4 \u003d StrBuilder: char[] buffer\u003e\n  $i8 \u003d StrBuilder: int size\u003e\n  $i10 \u003d $i8 + i14\n  $r4[$i10] \u003d c9\n  i14 \u003d i14 + 1\n  goto B6\n}",
      "B8 {\n  $r3 \u003d StrBuilder: char[] buffer\u003e\n  $i4 \u003d StrBuilder: int size\u003e\n  $i5 \u003d $i4 + i3\n  r6.getChars(0, $i13, $r3, $i5)\n}",
      "B9 {\n  $i6 \u003d StrBuilder: int size\u003e\n  $i7 \u003d $i6 + i0\n  StrBuilder: int size\u003e \u003d $i7\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B10",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B6",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#ensureCapacity(...1)",
        "body": "{\r\n    if (capacity \u003e buffer.length) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[capacity * 2]);\r\n    }\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "appendFixedWidthPadRight",
    "signature": "org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)",
    "visibility": "public",
    "body": "{\r\n    if (width \u003e 0) {\r\n        ensureCapacity(size + width);\r\n        String str \u003d ObjectUtils.toString(obj, this::getNullText);\r\n        if (str \u003d\u003d null) {\r\n            str \u003d StringUtils.EMPTY;\r\n        }\r\n        final int strLen \u003d str.length();\r\n        if (strLen \u003e\u003d width) {\r\n            str.getChars(0, width, buffer, size);\r\n        } else {\r\n            final int padLen \u003d width - strLen;\r\n            str.getChars(0, strLen, buffer, size);\r\n            for (int i \u003d 0; i \u003c padLen; i++) {\r\n                buffer[size + strLen + i] \u003d padChar;\r\n            }\r\n        }\r\n        size +\u003d width;\r\n    }\r\n    return this;\r\n}",
    "nodes": 10,
    "edges": 13,
    "cc": 5,
    "flowSummary": [
      "B0 : If(i0 \u003c\u003d 0) → B1 | else → B9",
      "B1 : If(r6 !\u003d null) → B2 | else → B3",
      "B3 : If($i12 \u003c i0) → B4 | else → B5",
      "B6 : If(i13 \u003e\u003d i3) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  Object\n  i0 :\u003d @parameter1: int\n  c9 :\u003d @parameter2: char\n  if (i0 \u003c\u003d 0) goto B1 else B9\n}",
      "B1 {\n  $i1 \u003d StrBuilder: int size\u003e\n  $i2 \u003d $i1 + i0\n  r0.ensureCapacity($i2)\n  $r2 \u003d StrBuilder$getNullText__171.bootstrap$(r0)\n  r6 \u003d ObjectUtils.toString(r1, $r2)\n  if (r6 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  r6 \u003d \"\"\n}",
      "B3 {\n  $i12 \u003d r6.length()\n  if ($i12 \u003c i0) goto B4 else B5\n}",
      "B4 {\n  $r5 \u003d StrBuilder: char[] buffer\u003e\n  $i11 \u003d StrBuilder: int size\u003e\n  r6.getChars(0, i0, $r5, $i11)\n  goto B8\n}",
      "B5 {\n  i3 \u003d i0 - $i12\n  $r3 \u003d StrBuilder: char[] buffer\u003e\n  $i4 \u003d StrBuilder: int size\u003e\n  r6.getChars(0, $i12, $r3, $i4)\n  i13 \u003d 0\n}",
      "B6 {\n  if (i13 \u003e\u003d i3) goto B7 else B8\n}",
      "B7 {\n  $r4 \u003d StrBuilder: char[] buffer\u003e\n  $i7 \u003d StrBuilder: int size\u003e\n  $i8 \u003d $i7 + $i12\n  $i10 \u003d $i8 + i13\n  $r4[$i10] \u003d c9\n  i13 \u003d i13 + 1\n  goto B6\n}",
      "B8 {\n  $i5 \u003d StrBuilder: int size\u003e\n  $i6 \u003d $i5 + i0\n  StrBuilder: int size\u003e \u003d $i6\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B9",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B6",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#ensureCapacity(...1)",
        "body": "{\r\n    if (capacity \u003e buffer.length) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[capacity * 2]);\r\n    }\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "appendNewLine",
    "signature": "org.apache.commons.lang3.text.StrBuilder appendNewLine()",
    "visibility": "public",
    "body": "{\r\n    if (newLine \u003d\u003d null) {\r\n        append(System.lineSeparator());\r\n        return this;\r\n    }\r\n    return append(newLine);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  $r1 \u003d String newLine\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d System.lineSeparator()\n  r0.append($r4)\n  return\n}",
      "B2 {\n  $r2 \u003d String newLine\u003e\n  $r3 \u003d r0.append($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#append(...1)",
        "body": "{\r\n    if (value) {\r\n        ensureCapacity(size + 4);\r\n        buffer[size++] \u003d \u0027t\u0027;\r\n        buffer[size++] \u003d \u0027r\u0027;\r\n        buffer[size++] \u003d \u0027u\u0027;\r\n    } else {\r\n        ensureCapacity(size + 5);\r\n        buffer[size++] \u003d \u0027f\u0027;\r\n        buffer[size++] \u003d \u0027a\u0027;\r\n        buffer[size++] \u003d \u0027l\u0027;\r\n        buffer[size++] \u003d \u0027s\u0027;\r\n    }\r\n    buffer[size++] \u003d \u0027e\u0027;\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "appendNull",
    "signature": "org.apache.commons.lang3.text.StrBuilder appendNull()",
    "visibility": "public",
    "body": "{\r\n    if (nullText \u003d\u003d null) {\r\n        return this;\r\n    }\r\n    return append(nullText);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  $r1 \u003d String nullText\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d String nullText\u003e\n  $r3 \u003d r0.append($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#append(...1)",
        "body": "{\r\n    if (value) {\r\n        ensureCapacity(size + 4);\r\n        buffer[size++] \u003d \u0027t\u0027;\r\n        buffer[size++] \u003d \u0027r\u0027;\r\n        buffer[size++] \u003d \u0027u\u0027;\r\n    } else {\r\n        ensureCapacity(size + 5);\r\n        buffer[size++] \u003d \u0027f\u0027;\r\n        buffer[size++] \u003d \u0027a\u0027;\r\n        buffer[size++] \u003d \u0027l\u0027;\r\n        buffer[size++] \u003d \u0027s\u0027;\r\n    }\r\n    buffer[size++] \u003d \u0027e\u0027;\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "appendPadding",
    "signature": "org.apache.commons.lang3.text.StrBuilder appendPadding(int,char)",
    "visibility": "public",
    "body": "{\r\n    if (length \u003e\u003d 0) {\r\n        ensureCapacity(size + length);\r\n        for (int i \u003d 0; i \u003c length; i++) {\r\n            buffer[size++] \u003d padChar;\r\n        }\r\n    }\r\n    return this;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B4",
      "B2 : If(i6 \u003e\u003d i0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  i0 :\u003d @parameter0: int\n  c5 :\u003d @parameter1: char\n  if (i0 \u003c 0) goto B1 else B4\n}",
      "B1 {\n  $i1 \u003d StrBuilder: int size\u003e\n  $i2 \u003d $i1 + i0\n  r0.ensureCapacity($i2)\n  i6 \u003d 0\n}",
      "B2 {\n  if (i6 \u003e\u003d i0) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d StrBuilder: char[] buffer\u003e\n  $i3 \u003d StrBuilder: int size\u003e\n  $i4 \u003d $i3 + 1\n  StrBuilder: int size\u003e \u003d $i4\n  $r1[$i3] \u003d c5\n  i6 \u003d i6 + 1\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#ensureCapacity(...1)",
        "body": "{\r\n    if (capacity \u003e buffer.length) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[capacity * 2]);\r\n    }\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "appendSeparator",
    "signature": "org.apache.commons.lang3.text.StrBuilder appendSeparator(char)",
    "visibility": "public",
    "body": "{\r\n    if (isNotEmpty()) {\r\n        append(separator);\r\n    }\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  c0 :\u003d @parameter0: char\n  $z0 \u003d r0.isNotEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r0.append(c0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#isNotEmpty(...0)",
        "body": "{\r\n    return size \u003e 0;\r\n}"
      },
      {
        "name": "StrBuilder#append(...1)",
        "body": "{\r\n    if (value) {\r\n        ensureCapacity(size + 4);\r\n        buffer[size++] \u003d \u0027t\u0027;\r\n        buffer[size++] \u003d \u0027r\u0027;\r\n        buffer[size++] \u003d \u0027u\u0027;\r\n    } else {\r\n        ensureCapacity(size + 5);\r\n        buffer[size++] \u003d \u0027f\u0027;\r\n        buffer[size++] \u003d \u0027a\u0027;\r\n        buffer[size++] \u003d \u0027l\u0027;\r\n        buffer[size++] \u003d \u0027s\u0027;\r\n    }\r\n    buffer[size++] \u003d \u0027e\u0027;\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "appendSeparator",
    "signature": "org.apache.commons.lang3.text.StrBuilder appendSeparator(char,char)",
    "visibility": "public",
    "body": "{\r\n    if (isNotEmpty()) {\r\n        append(standard);\r\n    } else {\r\n        append(defaultIfEmpty);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  c1 :\u003d @parameter0: char\n  c0 :\u003d @parameter1: char\n  $z0 \u003d r0.isNotEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r0.append(c1)\n  goto B3\n}",
      "B2 {\n  r0.append(c0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#isNotEmpty(...0)",
        "body": "{\r\n    return size \u003e 0;\r\n}"
      },
      {
        "name": "StrBuilder#append(...1)",
        "body": "{\r\n    if (value) {\r\n        ensureCapacity(size + 4);\r\n        buffer[size++] \u003d \u0027t\u0027;\r\n        buffer[size++] \u003d \u0027r\u0027;\r\n        buffer[size++] \u003d \u0027u\u0027;\r\n    } else {\r\n        ensureCapacity(size + 5);\r\n        buffer[size++] \u003d \u0027f\u0027;\r\n        buffer[size++] \u003d \u0027a\u0027;\r\n        buffer[size++] \u003d \u0027l\u0027;\r\n        buffer[size++] \u003d \u0027s\u0027;\r\n    }\r\n    buffer[size++] \u003d \u0027e\u0027;\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "appendSeparator",
    "signature": "org.apache.commons.lang3.text.StrBuilder appendSeparator(char,int)",
    "visibility": "public",
    "body": "{\r\n    if (loopIndex \u003e 0) {\r\n        append(separator);\r\n    }\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  c1 :\u003d @parameter0: char\n  i0 :\u003d @parameter1: int\n  if (i0 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.append(c1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#append(...1)",
        "body": "{\r\n    if (value) {\r\n        ensureCapacity(size + 4);\r\n        buffer[size++] \u003d \u0027t\u0027;\r\n        buffer[size++] \u003d \u0027r\u0027;\r\n        buffer[size++] \u003d \u0027u\u0027;\r\n    } else {\r\n        ensureCapacity(size + 5);\r\n        buffer[size++] \u003d \u0027f\u0027;\r\n        buffer[size++] \u003d \u0027a\u0027;\r\n        buffer[size++] \u003d \u0027l\u0027;\r\n        buffer[size++] \u003d \u0027s\u0027;\r\n    }\r\n    buffer[size++] \u003d \u0027e\u0027;\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "appendSeparator",
    "signature": "org.apache.commons.lang3.text.StrBuilder appendSeparator(java.lang.String,int)",
    "visibility": "public",
    "body": "{\r\n    if (separator !\u003d null \u0026\u0026 loopIndex \u003e 0) {\r\n        append(separator);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(i0 \u003c\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  String\n  i0 :\u003d @parameter1: int\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  if (i0 \u003c\u003d 0) goto B2 else B3\n}",
      "B2 {\n  r1.append(r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#append(...1)",
        "body": "{\r\n    if (value) {\r\n        ensureCapacity(size + 4);\r\n        buffer[size++] \u003d \u0027t\u0027;\r\n        buffer[size++] \u003d \u0027r\u0027;\r\n        buffer[size++] \u003d \u0027u\u0027;\r\n    } else {\r\n        ensureCapacity(size + 5);\r\n        buffer[size++] \u003d \u0027f\u0027;\r\n        buffer[size++] \u003d \u0027a\u0027;\r\n        buffer[size++] \u003d \u0027l\u0027;\r\n        buffer[size++] \u003d \u0027s\u0027;\r\n    }\r\n    buffer[size++] \u003d \u0027e\u0027;\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "appendSeparator",
    "signature": "org.apache.commons.lang3.text.StrBuilder appendSeparator(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    final String str \u003d isEmpty() ? defaultIfEmpty : standard;\r\n    if (str !\u003d null) {\r\n        append(str);\r\n    }\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If($r3 \u003d\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  String\n  String\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r2\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r1\n}",
      "B3 {\n  if ($r3 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  r0.append($r3)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#isEmpty(...0)",
        "body": "{\r\n    return size \u003d\u003d 0;\r\n}"
      },
      {
        "name": "StrBuilder#append(...1)",
        "body": "{\r\n    if (value) {\r\n        ensureCapacity(size + 4);\r\n        buffer[size++] \u003d \u0027t\u0027;\r\n        buffer[size++] \u003d \u0027r\u0027;\r\n        buffer[size++] \u003d \u0027u\u0027;\r\n    } else {\r\n        ensureCapacity(size + 5);\r\n        buffer[size++] \u003d \u0027f\u0027;\r\n        buffer[size++] \u003d \u0027a\u0027;\r\n        buffer[size++] \u003d \u0027l\u0027;\r\n        buffer[size++] \u003d \u0027s\u0027;\r\n    }\r\n    buffer[size++] \u003d \u0027e\u0027;\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "appendTo",
    "signature": "void appendTo(java.lang.Appendable)",
    "visibility": "public",
    "body": "{\r\n    if (appendable instanceof Writer) {\r\n        ((Writer) appendable).write(buffer, 0, size);\r\n    } else if (appendable instanceof StringBuilder) {\r\n        ((StringBuilder) appendable).append(buffer, 0, size);\r\n    } else if (appendable instanceof StringBuffer) {\r\n        ((StringBuffer) appendable).append(buffer, 0, size);\r\n    } else if (appendable instanceof CharBuffer) {\r\n        ((CharBuffer) appendable).put(buffer, 0, size);\r\n    } else {\r\n        appendable.append(this);\r\n    }\r\n}",
    "nodes": 10,
    "edges": 13,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B6",
      "B6 : If($z3 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  Appendable\n  $z0 \u003d Writer\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d Writer) r0\n  $r8 \u003d StrBuilder: char[] buffer\u003e\n  $i3 \u003d StrBuilder: int size\u003e\n  $r9.write($r8, 0, $i3)\n  goto B9\n}",
      "B2 {\n  $z1 \u003d StringBuilder\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r7 \u003d StringBuilder) r0\n  $r6 \u003d StrBuilder: char[] buffer\u003e\n  $i2 \u003d StrBuilder: int size\u003e\n  $r7.append($r6, 0, $i2)\n  goto B9\n}",
      "B4 {\n  $z2 \u003d StringBuffer\n  if ($z2 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r5 \u003d StringBuffer) r0\n  $r4 \u003d StrBuilder: char[] buffer\u003e\n  $i1 \u003d StrBuilder: int size\u003e\n  $r5.append($r4, 0, $i1)\n  goto B9\n}",
      "B6 {\n  $z3 \u003d CharBuffer\n  if ($z3 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $r3 \u003d CharBuffer) r0\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  $i0 \u003d StrBuilder: int size\u003e\n  $r3.put($r2, 0, $i0)\n  goto B9\n}",
      "B8 {\n  r0.append(r1)\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B9",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "appendWithSeparators",
    "signature": "org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.lang.Iterable,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (iterable !\u003d null) {\r\n        final String sep \u003d Objects.toString(separator, \"\");\r\n        final Iterator\u003c?\u003e it \u003d iterable.iterator();\r\n        while (it.hasNext()) {\r\n            append(it.next());\r\n            if (it.hasNext()) {\r\n                append(sep);\r\n            }\r\n        }\r\n    }\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B5",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  Iterable\n  String\n  if (r0 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  r3 \u003d Objects.toString(r2, \"\")\n  r4 \u003d r0.iterator()\n}",
      "B2 {\n  $z1 \u003d r4.hasNext()\n  if ($z1 \u003d\u003d false) goto B3 else B5\n}",
      "B3 {\n  $r5 \u003d r4.next()\n  r1.append($r5)\n  $z0 \u003d r4.hasNext()\n  if ($z0 \u003d\u003d false) goto B4 else B2\n}",
      "B4 {\n  r1.append(r3)\n  goto B2\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e B2",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#append(...1)",
        "body": "{\r\n    if (value) {\r\n        ensureCapacity(size + 4);\r\n        buffer[size++] \u003d \u0027t\u0027;\r\n        buffer[size++] \u003d \u0027r\u0027;\r\n        buffer[size++] \u003d \u0027u\u0027;\r\n    } else {\r\n        ensureCapacity(size + 5);\r\n        buffer[size++] \u003d \u0027f\u0027;\r\n        buffer[size++] \u003d \u0027a\u0027;\r\n        buffer[size++] \u003d \u0027l\u0027;\r\n        buffer[size++] \u003d \u0027s\u0027;\r\n    }\r\n    buffer[size++] \u003d \u0027e\u0027;\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "appendWithSeparators",
    "signature": "org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.util.Iterator,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (it !\u003d null) {\r\n        final String sep \u003d Objects.toString(separator, \"\");\r\n        while (it.hasNext()) {\r\n            append(it.next());\r\n            if (it.hasNext()) {\r\n                append(sep);\r\n            }\r\n        }\r\n    }\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B5",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  Iterator\n  String\n  if (r0 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  r3 \u003d Objects.toString(r2, \"\")\n}",
      "B2 {\n  $z1 \u003d r0.hasNext()\n  if ($z1 \u003d\u003d false) goto B3 else B5\n}",
      "B3 {\n  $r4 \u003d r0.next()\n  r1.append($r4)\n  $z0 \u003d r0.hasNext()\n  if ($z0 \u003d\u003d false) goto B4 else B2\n}",
      "B4 {\n  r1.append(r3)\n  goto B2\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e B2",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#append(...1)",
        "body": "{\r\n    if (value) {\r\n        ensureCapacity(size + 4);\r\n        buffer[size++] \u003d \u0027t\u0027;\r\n        buffer[size++] \u003d \u0027r\u0027;\r\n        buffer[size++] \u003d \u0027u\u0027;\r\n    } else {\r\n        ensureCapacity(size + 5);\r\n        buffer[size++] \u003d \u0027f\u0027;\r\n        buffer[size++] \u003d \u0027a\u0027;\r\n        buffer[size++] \u003d \u0027l\u0027;\r\n        buffer[size++] \u003d \u0027s\u0027;\r\n    }\r\n    buffer[size++] \u003d \u0027e\u0027;\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "appendWithSeparators",
    "signature": "org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.lang.Object[],java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (array !\u003d null \u0026\u0026 array.length \u003e 0) {\r\n        final String sep \u003d Objects.toString(separator, \"\");\r\n        append(array[0]);\r\n        for (int i \u003d 1; i \u003c array.length; i++) {\r\n            append(sep);\r\n            append(array[i]);\r\n        }\r\n    }\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B5",
      "B1 : If($i0 \u003c\u003d 0) → B2 | else → B5",
      "B3 : If(i2 \u003e\u003d $i1) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  Object[]\n  String\n  if (r0 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if ($i0 \u003c\u003d 0) goto B2 else B5\n}",
      "B2 {\n  r3 \u003d Objects.toString(r2, \"\")\n  $r4 \u003d r0[0]\n  r1.append($r4)\n  i2 \u003d 1\n}",
      "B3 {\n  $i1 \u003d lengthof r0\n  if (i2 \u003e\u003d $i1) goto B4 else B5\n}",
      "B4 {\n  r1.append(r3)\n  $r5 \u003d r0[i2]\n  r1.append($r5)\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#append(...1)",
        "body": "{\r\n    if (value) {\r\n        ensureCapacity(size + 4);\r\n        buffer[size++] \u003d \u0027t\u0027;\r\n        buffer[size++] \u003d \u0027r\u0027;\r\n        buffer[size++] \u003d \u0027u\u0027;\r\n    } else {\r\n        ensureCapacity(size + 5);\r\n        buffer[size++] \u003d \u0027f\u0027;\r\n        buffer[size++] \u003d \u0027a\u0027;\r\n        buffer[size++] \u003d \u0027l\u0027;\r\n        buffer[size++] \u003d \u0027s\u0027;\r\n    }\r\n    buffer[size++] \u003d \u0027e\u0027;\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "charAt",
    "signature": "char charAt(int)",
    "visibility": "public",
    "body": "{\r\n    if (index \u003c 0 || index \u003e\u003d length()) {\r\n        throw new StringIndexOutOfBoundsException(index);\r\n    }\r\n    return buffer[index];\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B2",
      "B1 : If(i0 \u003c $i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  i0 :\u003d @parameter0: int\n  if (i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d r1.length()\n  if (i0 \u003c $i1) goto B2 else B3\n}",
      "B2 {\n  $r0 \u003d StringIndexOutOfBoundsException\n  new StringIndexOutOfBoundsException(i0)\n  throw $r0\n}",
      "B3 {\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  $c2 \u003d $r2[i0]\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#length(...0)",
        "body": "{\r\n    return size;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "contains",
    "signature": "boolean contains(char)",
    "visibility": "public",
    "body": "{\r\n    final char[] thisBuf \u003d buffer;\r\n    for (int i \u003d 0; i \u003c this.size; i++) {\r\n        if (thisBuf[i] \u003d\u003d ch) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d $i0) → B2 | else → B5",
      "B2 : If($i4 !\u003d $i5) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  c1 :\u003d @parameter0: char\n  r1 \u003d StrBuilder: char[] buffer\u003e\n  i3 \u003d 0\n}",
      "B1 {\n  $i0 \u003d StrBuilder: int size\u003e\n  if (i3 \u003e\u003d $i0) goto B2 else B5\n}",
      "B2 {\n  $c2 \u003d r1[i3]\n  $i4 \u003d (int) $c2\n  $i5 \u003d (int) c1\n  if ($i4 !\u003d $i5) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "contains",
    "signature": "boolean contains(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return indexOf(str, 0) \u003e\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  String\n  $i0 \u003d r0.indexOf(r1, 0)\n  if ($i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#indexOf(...2)",
        "body": "{\r\n    startIndex \u003d Math.max(startIndex, 0);\r\n    if (startIndex \u003e\u003d size) {\r\n        return -1;\r\n    }\r\n    final char[] thisBuf \u003d buffer;\r\n    for (int i \u003d startIndex; i \u003c size; i++) {\r\n        if (thisBuf[i] \u003d\u003d ch) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "contains",
    "signature": "boolean contains(org.apache.commons.lang3.text.StrMatcher)",
    "visibility": "public",
    "body": "{\r\n    return indexOf(matcher, 0) \u003e\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  StrMatcher\n  $i0 \u003d r0.indexOf(r1, 0)\n  if ($i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#indexOf(...2)",
        "body": "{\r\n    startIndex \u003d Math.max(startIndex, 0);\r\n    if (startIndex \u003e\u003d size) {\r\n        return -1;\r\n    }\r\n    final char[] thisBuf \u003d buffer;\r\n    for (int i \u003d startIndex; i \u003c size; i++) {\r\n        if (thisBuf[i] \u003d\u003d ch) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "delete",
    "signature": "org.apache.commons.lang3.text.StrBuilder delete(int,int)",
    "visibility": "public",
    "body": "{\r\n    endIndex \u003d validateRange(startIndex, endIndex);\r\n    final int len \u003d endIndex - startIndex;\r\n    if (len \u003e 0) {\r\n        deleteImpl(startIndex, endIndex, len);\r\n    }\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i1 \u003c\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  i0 :\u003d @parameter0: int\n  i2 :\u003d @parameter1: int\n  i3 \u003d r0.validateRange(i0, i2)\n  i1 \u003d i3 - i0\n  if (i1 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.deleteImpl(i0, i3, i1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#deleteImpl(...3)",
        "body": "{\r\n    System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex);\r\n    size -\u003d len;\r\n}"
      },
      {
        "name": "StrBuilder#validateRange(...2)",
        "body": "{\r\n    if (startIndex \u003c 0) {\r\n        throw new StringIndexOutOfBoundsException(startIndex);\r\n    }\r\n    if (endIndex \u003e size) {\r\n        endIndex \u003d size;\r\n    }\r\n    if (startIndex \u003e endIndex) {\r\n        throw new StringIndexOutOfBoundsException(\"end \u003c start\");\r\n    }\r\n    return endIndex;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "deleteAll",
    "signature": "org.apache.commons.lang3.text.StrBuilder deleteAll(char)",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d 0; i \u003c size; i++) {\r\n        if (buffer[i] \u003d\u003d ch) {\r\n            final int start \u003d i;\r\n            while (++i \u003c size) {\r\n                if (buffer[i] !\u003d ch) {\r\n                    break;\r\n                }\r\n            }\r\n            final int len \u003d i - start;\r\n            deleteImpl(start, i, len);\r\n            i -\u003d len;\r\n        }\r\n    }\r\n    return this;\r\n}",
    "nodes": 10,
    "edges": 13,
    "cc": 5,
    "flowSummary": [
      "B1 : If(i7 \u003e\u003d $i0) → B2 | else → B9",
      "B2 : If($i8 !\u003d $i9) → B3 | else → B8",
      "B4 : If(i7 \u003e\u003d $i4) → B5 | else → B7",
      "B5 : If($i10 \u003d\u003d $i11) → B6 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  c1 :\u003d @parameter0: char\n  i7 \u003d 0\n}",
      "B1 {\n  $i0 \u003d StrBuilder: int size\u003e\n  if (i7 \u003e\u003d $i0) goto B2 else B9\n}",
      "B2 {\n  $r1 \u003d StrBuilder: char[] buffer\u003e\n  $c2 \u003d $r1[i7]\n  $i8 \u003d (int) $c2\n  $i9 \u003d (int) c1\n  if ($i8 !\u003d $i9) goto B3 else B8\n}",
      "B3 {\n  i3 \u003d i7\n}",
      "B4 {\n  i7 \u003d i7 + 1\n  $i4 \u003d StrBuilder: int size\u003e\n  if (i7 \u003e\u003d $i4) goto B5 else B7\n}",
      "B5 {\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  $c5 \u003d $r2[i7]\n  $i10 \u003d (int) $c5\n  $i11 \u003d (int) c1\n  if ($i10 \u003d\u003d $i11) goto B6 else B4\n}",
      "B6 {\n  goto B7\n}",
      "B7 {\n  $i6 \u003d i7 - i3\n  r0.deleteImpl(i3, i7, $i6)\n  i7 \u003d i7 - $i6\n}",
      "B8 {\n  i7 \u003d i7 + 1\n  goto B1\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B9",
      "B2 --\u003e B3",
      "B2 --\u003e B8",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B8 --\u003e B1",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#deleteImpl(...3)",
        "body": "{\r\n    System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex);\r\n    size -\u003d len;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "deleteAll",
    "signature": "org.apache.commons.lang3.text.StrBuilder deleteAll(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d StringUtils.length(str);\r\n    if (len \u003e 0) {\r\n        int index \u003d indexOf(str, 0);\r\n        while (index \u003e\u003d 0) {\r\n            deleteImpl(index, index + len, len);\r\n            index \u003d indexOf(str, index);\r\n        }\r\n    }\r\n    return this;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003c\u003d 0) → B1 | else → B4",
      "B2 : If(i2 \u003c 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  String\n  i0 \u003d StringUtils.length(r0)\n  if (i0 \u003c\u003d 0) goto B1 else B4\n}",
      "B1 {\n  i2 \u003d r1.indexOf(r0, 0)\n}",
      "B2 {\n  if (i2 \u003c 0) goto B3 else B4\n}",
      "B3 {\n  $i1 \u003d i2 + i0\n  r1.deleteImpl(i2, $i1, i0)\n  i2 \u003d r1.indexOf(r0, i2)\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#deleteImpl(...3)",
        "body": "{\r\n    System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex);\r\n    size -\u003d len;\r\n}"
      },
      {
        "name": "StrBuilder#indexOf(...2)",
        "body": "{\r\n    startIndex \u003d Math.max(startIndex, 0);\r\n    if (startIndex \u003e\u003d size) {\r\n        return -1;\r\n    }\r\n    final char[] thisBuf \u003d buffer;\r\n    for (int i \u003d startIndex; i \u003c size; i++) {\r\n        if (thisBuf[i] \u003d\u003d ch) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "deleteCharAt",
    "signature": "org.apache.commons.lang3.text.StrBuilder deleteCharAt(int)",
    "visibility": "public",
    "body": "{\r\n    if (index \u003c 0 || index \u003e\u003d size) {\r\n        throw new StringIndexOutOfBoundsException(index);\r\n    }\r\n    deleteImpl(index, index + 1, 1);\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B2",
      "B1 : If(i0 \u003c $i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  i0 :\u003d @parameter0: int\n  if (i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d StrBuilder: int size\u003e\n  if (i0 \u003c $i1) goto B2 else B3\n}",
      "B2 {\n  $r0 \u003d StringIndexOutOfBoundsException\n  new StringIndexOutOfBoundsException(i0)\n  throw $r0\n}",
      "B3 {\n  $i2 \u003d i0 + 1\n  r1.deleteImpl(i0, $i2, 1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#deleteImpl(...3)",
        "body": "{\r\n    System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex);\r\n    size -\u003d len;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "deleteFirst",
    "signature": "org.apache.commons.lang3.text.StrBuilder deleteFirst(char)",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d 0; i \u003c size; i++) {\r\n        if (buffer[i] \u003d\u003d ch) {\r\n            deleteImpl(i, i + 1, 1);\r\n            break;\r\n        }\r\n    }\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i4 \u003e\u003d $i0) → B2 | else → B5",
      "B2 : If($i5 !\u003d $i6) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  c1 :\u003d @parameter0: char\n  i4 \u003d 0\n}",
      "B1 {\n  $i0 \u003d StrBuilder: int size\u003e\n  if (i4 \u003e\u003d $i0) goto B2 else B5\n}",
      "B2 {\n  $r1 \u003d StrBuilder: char[] buffer\u003e\n  $c2 \u003d $r1[i4]\n  $i5 \u003d (int) $c2\n  $i6 \u003d (int) c1\n  if ($i5 !\u003d $i6) goto B3 else B4\n}",
      "B3 {\n  $i3 \u003d i4 + 1\n  r0.deleteImpl(i4, $i3, 1)\n  goto B5\n}",
      "B4 {\n  i4 \u003d i4 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#deleteImpl(...3)",
        "body": "{\r\n    System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex);\r\n    size -\u003d len;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "deleteFirst",
    "signature": "org.apache.commons.lang3.text.StrBuilder deleteFirst(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d StringUtils.length(str);\r\n    if (len \u003e 0) {\r\n        final int index \u003d indexOf(str, 0);\r\n        if (index \u003e\u003d 0) {\r\n            deleteImpl(index, index + len, len);\r\n        }\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003c\u003d 0) → B1 | else → B3",
      "B1 : If(i1 \u003c 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  String\n  i0 \u003d StringUtils.length(r0)\n  if (i0 \u003c\u003d 0) goto B1 else B3\n}",
      "B1 {\n  i1 \u003d r1.indexOf(r0, 0)\n  if (i1 \u003c 0) goto B2 else B3\n}",
      "B2 {\n  $i2 \u003d i1 + i0\n  r1.deleteImpl(i1, $i2, i0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#deleteImpl(...3)",
        "body": "{\r\n    System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex);\r\n    size -\u003d len;\r\n}"
      },
      {
        "name": "StrBuilder#indexOf(...2)",
        "body": "{\r\n    startIndex \u003d Math.max(startIndex, 0);\r\n    if (startIndex \u003e\u003d size) {\r\n        return -1;\r\n    }\r\n    final char[] thisBuf \u003d buffer;\r\n    for (int i \u003d startIndex; i \u003c size; i++) {\r\n        if (thisBuf[i] \u003d\u003d ch) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "endsWith",
    "signature": "boolean endsWith(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    final int len \u003d str.length();\r\n    if (len \u003d\u003d 0) {\r\n        return true;\r\n    }\r\n    if (len \u003e size) {\r\n        return false;\r\n    }\r\n    int pos \u003d size - len;\r\n    for (int i \u003d 0; i \u003c len; i++, pos++) {\r\n        if (buffer[pos] !\u003d str.charAt(i)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 12,
    "edges": 12,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 !\u003d 0) → B3 | else → B4",
      "B4 : If(i0 \u003c\u003d $i1) → B5 | else → B6",
      "B7 : If(i6 \u003e\u003d i0) → B8 | else → B11",
      "B8 : If($i7 \u003d\u003d $i8) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d r0.length()\n  if (i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i1 \u003d StrBuilder: int size\u003e\n  if (i0 \u003c\u003d $i1) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $i2 \u003d StrBuilder: int size\u003e\n  i5 \u003d $i2 - i0\n  i6 \u003d 0\n}",
      "B7 {\n  if (i6 \u003e\u003d i0) goto B8 else B11\n}",
      "B8 {\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  $c3 \u003d $r2[i5]\n  $c4 \u003d r0.charAt(i6)\n  $i7 \u003d (int) $c3\n  $i8 \u003d (int) $c4\n  if ($i7 \u003d\u003d $i8) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  i6 \u003d i6 + 1\n  i5 \u003d i5 + 1\n  goto B7\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B7",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "ensureCapacity",
    "signature": "org.apache.commons.lang3.text.StrBuilder ensureCapacity(int)",
    "visibility": "public",
    "body": "{\r\n    if (capacity \u003e buffer.length) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[capacity * 2]);\r\n    }\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c\u003d $i1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  i0 :\u003d @parameter0: int\n  $r1 \u003d StrBuilder: char[] buffer\u003e\n  $i1 \u003d lengthof $r1\n  if (i0 \u003c\u003d $i1) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  $i2 \u003d StrBuilder: int size\u003e\n  $r3 \u003d StrBuilder$lambda_ensureCapacity_0__172.bootstrap$(i0)\n  $r4 \u003d ArrayUtils.arraycopy($r2, 0, 0, $i2, $r3)\n  $r5 \u003d (char[]) $r4\n  StrBuilder: char[] buffer\u003e \u003d $r5\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return obj instanceof StrBuilder \u0026\u0026 equals((StrBuilder) obj);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  Object\n  $z0 \u003d StrBuilder\n  if ($z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d StrBuilder) r0\n  $z1 \u003d r1.equals($r2)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#equals(...1)",
        "body": "{\r\n    return obj instanceof StrBuilder \u0026\u0026 equals((StrBuilder) obj);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "equals",
    "signature": "boolean equals(org.apache.commons.lang3.text.StrBuilder)",
    "visibility": "public",
    "body": "{\r\n    if (this \u003d\u003d other) {\r\n        return true;\r\n    }\r\n    if (other \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (this.size !\u003d other.size) {\r\n        return false;\r\n    }\r\n    final char[] thisBuf \u003d this.buffer;\r\n    final char[] otherBuf \u003d other.buffer;\r\n    for (int i \u003d size - 1; i \u003e\u003d 0; i--) {\r\n        if (thisBuf[i] !\u003d otherBuf[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 12,
    "edges": 12,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r1 !\u003d null) → B3 | else → B4",
      "B4 : If($i1 \u003d\u003d $i0) → B5 | else → B6",
      "B7 : If(i5 \u003c 0) → B8 | else → B11",
      "B8 : If($i6 \u003d\u003d $i7) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  StrBuilder\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i1 \u003d StrBuilder: int size\u003e\n  $i0 \u003d StrBuilder: int size\u003e\n  if ($i1 \u003d\u003d $i0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  r2 \u003d StrBuilder: char[] buffer\u003e\n  r3 \u003d StrBuilder: char[] buffer\u003e\n  $i2 \u003d StrBuilder: int size\u003e\n  i5 \u003d $i2 - 1\n}",
      "B7 {\n  if (i5 \u003c 0) goto B8 else B11\n}",
      "B8 {\n  $c4 \u003d r2[i5]\n  $c3 \u003d r3[i5]\n  $i6 \u003d (int) $c4\n  $i7 \u003d (int) $c3\n  if ($i6 \u003d\u003d $i7) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $i9 \u003d (int) -1\n  i5 \u003d i5 + $i9\n  goto B7\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B7",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "equalsIgnoreCase",
    "signature": "boolean equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder)",
    "visibility": "public",
    "body": "{\r\n    if (this \u003d\u003d other) {\r\n        return true;\r\n    }\r\n    if (this.size !\u003d other.size) {\r\n        return false;\r\n    }\r\n    final char[] thisBuf \u003d this.buffer;\r\n    final char[] otherBuf \u003d other.buffer;\r\n    for (int i \u003d size - 1; i \u003e\u003d 0; i--) {\r\n        final char c1 \u003d thisBuf[i];\r\n        final char c2 \u003d otherBuf[i];\r\n        if (c1 !\u003d c2 \u0026\u0026 Character.toUpperCase(c1) !\u003d Character.toUpperCase(c2)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($i1 \u003d\u003d $i0) → B3 | else → B4",
      "B5 : If(i7 \u003c 0) → B6 | else → B10",
      "B6 : If($i8 \u003d\u003d $i9) → B7 | else → B9",
      "B7 : If($i10 \u003d\u003d $i11) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  StrBuilder\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d StrBuilder: int size\u003e\n  $i0 \u003d StrBuilder: int size\u003e\n  if ($i1 \u003d\u003d $i0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d StrBuilder: char[] buffer\u003e\n  r3 \u003d StrBuilder: char[] buffer\u003e\n  $i2 \u003d StrBuilder: int size\u003e\n  i7 \u003d $i2 - 1\n}",
      "B5 {\n  if (i7 \u003c 0) goto B6 else B10\n}",
      "B6 {\n  c3 \u003d r2[i7]\n  c4 \u003d r3[i7]\n  $i8 \u003d (int) c3\n  $i9 \u003d (int) c4\n  if ($i8 \u003d\u003d $i9) goto B7 else B9\n}",
      "B7 {\n  $c6 \u003d Character.toUpperCase(c3)\n  $c5 \u003d Character.toUpperCase(c4)\n  $i10 \u003d (int) $c6\n  $i11 \u003d (int) $c5\n  if ($i10 \u003d\u003d $i11) goto B8 else B9\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $i13 \u003d (int) -1\n  i7 \u003d i7 + $i13\n  goto B5\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B5",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "getChars",
    "signature": "char[] getChars(char[])",
    "visibility": "public",
    "body": "{\r\n    final int len \u003d length();\r\n    if (destination \u003d\u003d null || destination.length \u003c len) {\r\n        destination \u003d new char[len];\r\n    }\r\n    return ArrayUtils.arraycopy(buffer, 0, destination, 0, len);\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($i1 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  r1 :\u003d @parameter0: char[]\n  i0 \u003d r0.length()\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d lengthof r1\n  if ($i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r1 \u003d newarray (char)[i0]\n}",
      "B3 {\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  $r3 \u003d ArrayUtils.arraycopy($r2, 0, r1, 0, i0)\n  $r4 \u003d (char[]) $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#length(...0)",
        "body": "{\r\n    return size;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "getChars",
    "signature": "void getChars(int,int,char[],int)",
    "visibility": "public",
    "body": "{\r\n    if (startIndex \u003c 0) {\r\n        throw new StringIndexOutOfBoundsException(startIndex);\r\n    }\r\n    if (endIndex \u003c 0 || endIndex \u003e length()) {\r\n        throw new StringIndexOutOfBoundsException(endIndex);\r\n    }\r\n    if (startIndex \u003e endIndex) {\r\n        throw new StringIndexOutOfBoundsException(\"end \u003c start\");\r\n    }\r\n    System.arraycopy(buffer, startIndex, destination, destinationIndex, endIndex - startIndex);\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003e\u003d 0) → B1 | else → B2",
      "B2 : If(i1 \u003c 0) → B3 | else → B4",
      "B3 : If(i1 \u003c\u003d $i2) → B4 | else → B5",
      "B5 : If(i0 \u003c\u003d i1) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  i0 :\u003d @parameter0: int\n  i1 :\u003d @parameter1: int\n  r2 :\u003d @parameter2: char[]\n  i3 :\u003d @parameter3: int\n  if (i0 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d StringIndexOutOfBoundsException\n  new StringIndexOutOfBoundsException(i0)\n  throw $r5\n}",
      "B2 {\n  if (i1 \u003c 0) goto B3 else B4\n}",
      "B3 {\n  $i2 \u003d r1.length()\n  if (i1 \u003c\u003d $i2) goto B4 else B5\n}",
      "B4 {\n  $r0 \u003d StringIndexOutOfBoundsException\n  new StringIndexOutOfBoundsException(i1)\n  throw $r0\n}",
      "B5 {\n  if (i0 \u003c\u003d i1) goto B6 else B7\n}",
      "B6 {\n  $r4 \u003d StringIndexOutOfBoundsException\n  new StringIndexOutOfBoundsException(\"end \u003c start\")\n  throw $r4\n}",
      "B7 {\n  $r3 \u003d StrBuilder: char[] buffer\u003e\n  $i4 \u003d i1 - i0\n  System.arraycopy($r3, i0, r2, i3, $i4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#length(...0)",
        "body": "{\r\n    return size;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    final char[] buf \u003d buffer;\r\n    int hash \u003d 0;\r\n    for (int i \u003d size - 1; i \u003e\u003d 0; i--) {\r\n        hash \u003d 31 * hash + buf[i];\r\n    }\r\n    return hash;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i4 \u003c 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  r1 \u003d StrBuilder: char[] buffer\u003e\n  i3 \u003d 0\n  $i0 \u003d StrBuilder: int size\u003e\n  i4 \u003d $i0 - 1\n}",
      "B1 {\n  if (i4 \u003c 0) goto B2 else B3\n}",
      "B2 {\n  $i2 \u003d 31 * i3\n  $c1 \u003d r1[i4]\n  $i5 \u003d (int) $c1\n  i3 \u003d $i2 + $i5\n  $i7 \u003d (int) -1\n  i4 \u003d i4 + $i7\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "indexOf",
    "signature": "int indexOf(char,int)",
    "visibility": "public",
    "body": "{\r\n    startIndex \u003d Math.max(startIndex, 0);\r\n    if (startIndex \u003e\u003d size) {\r\n        return -1;\r\n    }\r\n    final char[] thisBuf \u003d buffer;\r\n    for (int i \u003d startIndex; i \u003c size; i++) {\r\n        if (thisBuf[i] \u003d\u003d ch) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i5 \u003c $i0) → B1 | else → B2",
      "B3 : If(i6 \u003e\u003d $i1) → B4 | else → B7",
      "B4 : If($i9 !\u003d $i10) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  c2 :\u003d @parameter0: char\n  i4 :\u003d @parameter1: int\n  i5 \u003d Math.max(i4, 0)\n  $i0 \u003d StrBuilder: int size\u003e\n  if (i5 \u003c $i0) goto B1 else B2\n}",
      "B1 {\n  $i8 \u003d (int) -1\n  return\n}",
      "B2 {\n  r1 \u003d StrBuilder: char[] buffer\u003e\n  i6 \u003d i5\n}",
      "B3 {\n  $i1 \u003d StrBuilder: int size\u003e\n  if (i6 \u003e\u003d $i1) goto B4 else B7\n}",
      "B4 {\n  $c3 \u003d r1[i6]\n  $i9 \u003d (int) $c3\n  $i10 \u003d (int) c2\n  if ($i9 !\u003d $i10) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i6 \u003d i6 + 1\n  goto B3\n}",
      "B7 {\n  $i12 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "indexOf",
    "signature": "int indexOf(org.apache.commons.lang3.text.StrMatcher,int)",
    "visibility": "public",
    "body": "{\r\n    startIndex \u003d Math.max(startIndex, 0);\r\n    if (matcher \u003d\u003d null || startIndex \u003e\u003d size) {\r\n        return -1;\r\n    }\r\n    final int len \u003d size;\r\n    final char[] buf \u003d buffer;\r\n    for (int i \u003d startIndex; i \u003c len; i++) {\r\n        if (matcher.isMatch(buf, i, startIndex, len) \u003e 0) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(i4 \u003c $i0) → B2 | else → B3",
      "B4 : If(i5 \u003e\u003d i1) → B5 | else → B8",
      "B5 : If($i2 \u003c\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  StrMatcher\n  i3 :\u003d @parameter1: int\n  i4 \u003d Math.max(i3, 0)\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d StrBuilder: int size\u003e\n  if (i4 \u003c $i0) goto B2 else B3\n}",
      "B2 {\n  $i7 \u003d (int) -1\n  return\n}",
      "B3 {\n  i1 \u003d StrBuilder: int size\u003e\n  r2 \u003d StrBuilder: char[] buffer\u003e\n  i5 \u003d i4\n}",
      "B4 {\n  if (i5 \u003e\u003d i1) goto B5 else B8\n}",
      "B5 {\n  $i2 \u003d r0.isMatch(r2, i5, i4, i1)\n  if ($i2 \u003c\u003d 0) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  i5 \u003d i5 + 1\n  goto B4\n}",
      "B8 {\n  $i9 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B4",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "insert",
    "signature": "org.apache.commons.lang3.text.StrBuilder insert(int,boolean)",
    "visibility": "public",
    "body": "{\r\n    validateIndex(index);\r\n    if (value) {\r\n        ensureCapacity(size + 4);\r\n        System.arraycopy(buffer, index, buffer, index + 4, size - index);\r\n        buffer[index++] \u003d \u0027t\u0027;\r\n        buffer[index++] \u003d \u0027r\u0027;\r\n        buffer[index++] \u003d \u0027u\u0027;\r\n        buffer[index] \u003d \u0027e\u0027;\r\n        size +\u003d 4;\r\n    } else {\r\n        ensureCapacity(size + 5);\r\n        System.arraycopy(buffer, index, buffer, index + 5, size - index);\r\n        buffer[index++] \u003d \u0027f\u0027;\r\n        buffer[index++] \u003d \u0027a\u0027;\r\n        buffer[index++] \u003d \u0027l\u0027;\r\n        buffer[index++] \u003d \u0027s\u0027;\r\n        buffer[index] \u003d \u0027e\u0027;\r\n        size +\u003d 5;\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  i14 :\u003d @parameter0: int\n  z0 :\u003d @parameter1: boolean\n  r0.validateIndex(i14)\n  if (z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $i7 \u003d StrBuilder: int size\u003e\n  $i8 \u003d $i7 + 4\n  r0.ensureCapacity($i8)\n  $r9 \u003d StrBuilder: char[] buffer\u003e\n  $r8 \u003d StrBuilder: char[] buffer\u003e\n  $i11 \u003d i14 + 4\n  $i9 \u003d StrBuilder: int size\u003e\n  $i10 \u003d $i9 - i14\n  System.arraycopy($r9, i14, $r8, $i11, $i10)\n  $r10 \u003d StrBuilder: char[] buffer\u003e\n  i15 \u003d i14 + 1\n  $r10[i14] \u003d 116\n  $r11 \u003d StrBuilder: char[] buffer\u003e\n  i16 \u003d i15 + 1\n  $r11[i15] \u003d 114\n  $r12 \u003d StrBuilder: char[] buffer\u003e\n  i17 \u003d i16 + 1\n  $r12[i16] \u003d 117\n  $r13 \u003d StrBuilder: char[] buffer\u003e\n  $r13[i17] \u003d 101\n  $i12 \u003d StrBuilder: int size\u003e\n  $i13 \u003d $i12 + 4\n  StrBuilder: int size\u003e \u003d $i13\n  goto B3\n}",
      "B2 {\n  $i0 \u003d StrBuilder: int size\u003e\n  $i1 \u003d $i0 + 5\n  r0.ensureCapacity($i1)\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  $r1 \u003d StrBuilder: char[] buffer\u003e\n  $i4 \u003d i14 + 5\n  $i2 \u003d StrBuilder: int size\u003e\n  $i3 \u003d $i2 - i14\n  System.arraycopy($r2, i14, $r1, $i4, $i3)\n  $r3 \u003d StrBuilder: char[] buffer\u003e\n  i18 \u003d i14 + 1\n  $r3[i14] \u003d 102\n  $r4 \u003d StrBuilder: char[] buffer\u003e\n  i19 \u003d i18 + 1\n  $r4[i18] \u003d 97\n  $r5 \u003d StrBuilder: char[] buffer\u003e\n  i20 \u003d i19 + 1\n  $r5[i19] \u003d 108\n  $r6 \u003d StrBuilder: char[] buffer\u003e\n  i21 \u003d i20 + 1\n  $r6[i20] \u003d 115\n  $r7 \u003d StrBuilder: char[] buffer\u003e\n  $r7[i21] \u003d 101\n  $i5 \u003d StrBuilder: int size\u003e\n  $i6 \u003d $i5 + 5\n  StrBuilder: int size\u003e \u003d $i6\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#ensureCapacity(...1)",
        "body": "{\r\n    if (capacity \u003e buffer.length) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[capacity * 2]);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "StrBuilder#validateIndex(...1)",
        "body": "{\r\n    if (index \u003c 0 || index \u003e size) {\r\n        throw new StringIndexOutOfBoundsException(index);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "insert",
    "signature": "org.apache.commons.lang3.text.StrBuilder insert(int,char[])",
    "visibility": "public",
    "body": "{\r\n    validateIndex(index);\r\n    ensureCapacity(size + 1);\r\n    System.arraycopy(buffer, index, buffer, index + 1, size - index);\r\n    buffer[index] \u003d value;\r\n    size++;\r\n    return this;\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B2 : If(i1 \u003c\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  i0 :\u003d @parameter0: int\n  r1 :\u003d @parameter1: char[]\n  r0.validateIndex(i0)\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d String nullText\u003e\n  $r6 \u003d r0.insert(i0, $r5)\n  return\n}",
      "B2 {\n  i1 \u003d lengthof r1\n  if (i1 \u003c\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $i2 \u003d StrBuilder: int size\u003e\n  $i3 \u003d $i2 + i1\n  r0.ensureCapacity($i3)\n  $r3 \u003d StrBuilder: char[] buffer\u003e\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  $i6 \u003d i0 + i1\n  $i4 \u003d StrBuilder: int size\u003e\n  $i5 \u003d $i4 - i0\n  System.arraycopy($r3, i0, $r2, $i6, $i5)\n  $r4 \u003d StrBuilder: char[] buffer\u003e\n  System.arraycopy(r1, 0, $r4, i0, i1)\n  $i7 \u003d StrBuilder: int size\u003e\n  $i8 \u003d $i7 + i1\n  StrBuilder: int size\u003e \u003d $i8\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#ensureCapacity(...1)",
        "body": "{\r\n    if (capacity \u003e buffer.length) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[capacity * 2]);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "StrBuilder#validateIndex(...1)",
        "body": "{\r\n    if (index \u003c 0 || index \u003e size) {\r\n        throw new StringIndexOutOfBoundsException(index);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "insert",
    "signature": "org.apache.commons.lang3.text.StrBuilder insert(int,char[],int,int)",
    "visibility": "public",
    "body": "{\r\n    validateIndex(index);\r\n    if (chars \u003d\u003d null) {\r\n        return insert(index, nullText);\r\n    }\r\n    if (offset \u003c 0 || offset \u003e chars.length) {\r\n        throw new StringIndexOutOfBoundsException(\"Invalid offset: \" + offset);\r\n    }\r\n    if (length \u003c 0 || offset + length \u003e chars.length) {\r\n        throw new StringIndexOutOfBoundsException(\"Invalid length: \" + length);\r\n    }\r\n    if (length \u003e 0) {\r\n        ensureCapacity(size + length);\r\n        System.arraycopy(buffer, index, buffer, index + length, size - index);\r\n        System.arraycopy(chars, offset, buffer, index, length);\r\n        size +\u003d length;\r\n    }\r\n    return this;\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B2 : If(i1 \u003c 0) → B3 | else → B4",
      "B3 : If(i1 \u003c\u003d $i2) → B4 | else → B5",
      "B5 : If(i3 \u003c 0) → B6 | else → B7",
      "B6 : If($i5 \u003c\u003d $i4) → B7 | else → B8",
      "B8 : If(i3 \u003c\u003d 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  i0 :\u003d @parameter0: int\n  r1 :\u003d @parameter1: char[]\n  i1 :\u003d @parameter2: int\n  i3 :\u003d @parameter3: int\n  r0.validateIndex(i0)\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r15 \u003d String nullText\u003e\n  $r16 \u003d r0.insert(i0, $r15)\n  return\n}",
      "B2 {\n  if (i1 \u003c 0) goto B3 else B4\n}",
      "B3 {\n  $i2 \u003d lengthof r1\n  if (i1 \u003c\u003d $i2) goto B4 else B5\n}",
      "B4 {\n  $r2 \u003d StringIndexOutOfBoundsException\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  $r4 \u003d $r3.append(\"Invalid offset: \")\n  $r5 \u003d $r4.append(i1)\n  $r6 \u003d $r5.toString()\n  new StringIndexOutOfBoundsException($r6)\n  throw $r2\n}",
      "B5 {\n  if (i3 \u003c 0) goto B6 else B7\n}",
      "B6 {\n  $i5 \u003d i1 + i3\n  $i4 \u003d lengthof r1\n  if ($i5 \u003c\u003d $i4) goto B7 else B8\n}",
      "B7 {\n  $r7 \u003d StringIndexOutOfBoundsException\n  $r8 \u003d StringBuilder\n  new StringBuilder()\n  $r9 \u003d $r8.append(\"Invalid length: \")\n  $r10 \u003d $r9.append(i3)\n  $r11 \u003d $r10.toString()\n  new StringIndexOutOfBoundsException($r11)\n  throw $r7\n}",
      "B8 {\n  if (i3 \u003c\u003d 0) goto B9 else B10\n}",
      "B9 {\n  $i6 \u003d StrBuilder: int size\u003e\n  $i7 \u003d $i6 + i3\n  r0.ensureCapacity($i7)\n  $r13 \u003d StrBuilder: char[] buffer\u003e\n  $r12 \u003d StrBuilder: char[] buffer\u003e\n  $i10 \u003d i0 + i3\n  $i8 \u003d StrBuilder: int size\u003e\n  $i9 \u003d $i8 - i0\n  System.arraycopy($r13, i0, $r12, $i10, $i9)\n  $r14 \u003d StrBuilder: char[] buffer\u003e\n  System.arraycopy(r1, i1, $r14, i0, i3)\n  $i11 \u003d StrBuilder: int size\u003e\n  $i12 \u003d $i11 + i3\n  StrBuilder: int size\u003e \u003d $i12\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#ensureCapacity(...1)",
        "body": "{\r\n    if (capacity \u003e buffer.length) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[capacity * 2]);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "StrBuilder#validateIndex(...1)",
        "body": "{\r\n    if (index \u003c 0 || index \u003e size) {\r\n        throw new StringIndexOutOfBoundsException(index);\r\n    }\r\n}"
      },
      {
        "name": "StrBuilder#insert(...2)",
        "body": "{\r\n    validateIndex(index);\r\n    if (value) {\r\n        ensureCapacity(size + 4);\r\n        System.arraycopy(buffer, index, buffer, index + 4, size - index);\r\n        buffer[index++] \u003d \u0027t\u0027;\r\n        buffer[index++] \u003d \u0027r\u0027;\r\n        buffer[index++] \u003d \u0027u\u0027;\r\n        buffer[index] \u003d \u0027e\u0027;\r\n        size +\u003d 4;\r\n    } else {\r\n        ensureCapacity(size + 5);\r\n        System.arraycopy(buffer, index, buffer, index + 5, size - index);\r\n        buffer[index++] \u003d \u0027f\u0027;\r\n        buffer[index++] \u003d \u0027a\u0027;\r\n        buffer[index++] \u003d \u0027l\u0027;\r\n        buffer[index++] \u003d \u0027s\u0027;\r\n        buffer[index] \u003d \u0027e\u0027;\r\n        size +\u003d 5;\r\n    }\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "insert",
    "signature": "org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj \u003d\u003d null) {\r\n        return insert(index, nullText);\r\n    }\r\n    return insert(index, obj.toString());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  i0 :\u003d @parameter0: int\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d String nullText\u003e\n  $r5 \u003d r1.insert(i0, $r4)\n  return\n}",
      "B2 {\n  $r2 \u003d r0.toString()\n  $r3 \u003d r1.insert(i0, $r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#insert(...2)",
        "body": "{\r\n    validateIndex(index);\r\n    if (value) {\r\n        ensureCapacity(size + 4);\r\n        System.arraycopy(buffer, index, buffer, index + 4, size - index);\r\n        buffer[index++] \u003d \u0027t\u0027;\r\n        buffer[index++] \u003d \u0027r\u0027;\r\n        buffer[index++] \u003d \u0027u\u0027;\r\n        buffer[index] \u003d \u0027e\u0027;\r\n        size +\u003d 4;\r\n    } else {\r\n        ensureCapacity(size + 5);\r\n        System.arraycopy(buffer, index, buffer, index + 5, size - index);\r\n        buffer[index++] \u003d \u0027f\u0027;\r\n        buffer[index++] \u003d \u0027a\u0027;\r\n        buffer[index++] \u003d \u0027l\u0027;\r\n        buffer[index++] \u003d \u0027s\u0027;\r\n        buffer[index] \u003d \u0027e\u0027;\r\n        size +\u003d 5;\r\n    }\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "insert",
    "signature": "org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    validateIndex(index);\r\n    if (str \u003d\u003d null) {\r\n        str \u003d nullText;\r\n    }\r\n    if (str !\u003d null) {\r\n        final int strLen \u003d str.length();\r\n        if (strLen \u003e 0) {\r\n            final int newSize \u003d size + strLen;\r\n            ensureCapacity(newSize);\r\n            System.arraycopy(buffer, index, buffer, index + strLen, size - index);\r\n            size \u003d newSize;\r\n            str.getChars(0, strLen, buffer, index);\r\n        }\r\n    }\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2",
      "B2 : If(r4 \u003d\u003d null) → B3 | else → B5",
      "B3 : If(i1 \u003c\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  i0 :\u003d @parameter0: int\n  String\n  r0.validateIndex(i0)\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r4 \u003d String nullText\u003e\n}",
      "B2 {\n  if (r4 \u003d\u003d null) goto B3 else B5\n}",
      "B3 {\n  i1 \u003d r4.length()\n  if (i1 \u003c\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $i2 \u003d StrBuilder: int size\u003e\n  i3 \u003d $i2 + i1\n  r0.ensureCapacity(i3)\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  $r1 \u003d StrBuilder: char[] buffer\u003e\n  $i6 \u003d i0 + i1\n  $i4 \u003d StrBuilder: int size\u003e\n  $i5 \u003d $i4 - i0\n  System.arraycopy($r2, i0, $r1, $i6, $i5)\n  StrBuilder: int size\u003e \u003d i3\n  $r3 \u003d StrBuilder: char[] buffer\u003e\n  r4.getChars(0, i1, $r3, i0)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#ensureCapacity(...1)",
        "body": "{\r\n    if (capacity \u003e buffer.length) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[capacity * 2]);\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "StrBuilder#validateIndex(...1)",
        "body": "{\r\n    if (index \u003c 0 || index \u003e size) {\r\n        throw new StringIndexOutOfBoundsException(index);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty()",
    "visibility": "public",
    "body": "{\r\n    return size \u003d\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  $i0 \u003d StrBuilder: int size\u003e\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "isNotEmpty",
    "signature": "boolean isNotEmpty()",
    "visibility": "public",
    "body": "{\r\n    return size \u003e 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  $i0 \u003d StrBuilder: int size\u003e\n  if ($i0 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "lastIndexOf",
    "signature": "int lastIndexOf(char,int)",
    "visibility": "public",
    "body": "{\r\n    startIndex \u003d startIndex \u003e\u003d size ? size - 1 : startIndex;\r\n    if (startIndex \u003c 0) {\r\n        return -1;\r\n    }\r\n    for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\r\n        if (buffer[i] \u003d\u003d ch) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i4 \u003c $i0) → B1 | else → B2",
      "B3 : If($i5 \u003e\u003d 0) → B4 | else → B5",
      "B6 : If(i6 \u003c 0) → B7 | else → B10",
      "B7 : If($i9 !\u003d $i10) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  c1 :\u003d @parameter0: char\n  i4 :\u003d @parameter1: int\n  $i0 \u003d StrBuilder: int size\u003e\n  if (i4 \u003c $i0) goto B1 else B2\n}",
      "B1 {\n  $i3 \u003d StrBuilder: int size\u003e\n  $i5 \u003d $i3 - 1\n  goto B3\n}",
      "B2 {\n  $i5 \u003d i4\n}",
      "B3 {\n  if ($i5 \u003e\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $i8 \u003d (int) -1\n  return\n}",
      "B5 {\n  i6 \u003d $i5\n}",
      "B6 {\n  if (i6 \u003c 0) goto B7 else B10\n}",
      "B7 {\n  $r1 \u003d StrBuilder: char[] buffer\u003e\n  $c2 \u003d $r1[i6]\n  $i9 \u003d (int) $c2\n  $i10 \u003d (int) c1\n  if ($i9 !\u003d $i10) goto B8 else B9\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $i12 \u003d (int) -1\n  i6 \u003d i6 + $i12\n  goto B6\n}",
      "B10 {\n  $i14 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B6",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "lastIndexOf",
    "signature": "int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)",
    "visibility": "public",
    "body": "{\r\n    startIndex \u003d startIndex \u003e\u003d size ? size - 1 : startIndex;\r\n    if (matcher \u003d\u003d null || startIndex \u003c 0) {\r\n        return -1;\r\n    }\r\n    final char[] buf \u003d buffer;\r\n    final int endIndex \u003d startIndex + 1;\r\n    for (int i \u003d startIndex; i \u003e\u003d 0; i--) {\r\n        if (matcher.isMatch(buf, i, 0, endIndex) \u003e 0) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i4 \u003c $i0) → B1 | else → B2",
      "B3 : If(r1 \u003d\u003d null) → B4 | else → B5",
      "B4 : If($i5 \u003e\u003d 0) → B5 | else → B6",
      "B7 : If(i6 \u003c 0) → B8 | else → B11",
      "B8 : If($i2 \u003c\u003d 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  StrMatcher\n  i4 :\u003d @parameter1: int\n  $i0 \u003d StrBuilder: int size\u003e\n  if (i4 \u003c $i0) goto B1 else B2\n}",
      "B1 {\n  $i3 \u003d StrBuilder: int size\u003e\n  $i5 \u003d $i3 - 1\n  goto B3\n}",
      "B2 {\n  $i5 \u003d i4\n}",
      "B3 {\n  if (r1 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  if ($i5 \u003e\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $i8 \u003d (int) -1\n  return\n}",
      "B6 {\n  r2 \u003d StrBuilder: char[] buffer\u003e\n  i1 \u003d $i5 + 1\n  i6 \u003d $i5\n}",
      "B7 {\n  if (i6 \u003c 0) goto B8 else B11\n}",
      "B8 {\n  $i2 \u003d r1.isMatch(r2, i6, 0, i1)\n  if ($i2 \u003c\u003d 0) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $i10 \u003d (int) -1\n  i6 \u003d i6 + $i10\n  goto B7\n}",
      "B11 {\n  $i12 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B7",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "leftString",
    "signature": "java.lang.String leftString(int)",
    "visibility": "public",
    "body": "{\r\n    if (length \u003c\u003d 0) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    if (length \u003e\u003d size) {\r\n        return new String(buffer, 0, size);\r\n    }\r\n    return new String(buffer, 0, length);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 \u003e 0) → B1 | else → B2",
      "B2 : If(i0 \u003c $i1) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  i0 :\u003d @parameter0: int\n  if (i0 \u003e 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d StrBuilder: int size\u003e\n  if (i0 \u003c $i1) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d String\n  $r4 \u003d StrBuilder: char[] buffer\u003e\n  $i2 \u003d StrBuilder: int size\u003e\n  new String($r4, 0, $i2)\n  return\n}",
      "B4 {\n  $r1 \u003d String\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  new String($r2, 0, i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "midString",
    "signature": "java.lang.String midString(int,int)",
    "visibility": "public",
    "body": "{\r\n    if (index \u003c 0) {\r\n        index \u003d 0;\r\n    }\r\n    if (length \u003c\u003d 0 || index \u003e\u003d size) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    if (size \u003c\u003d index + length) {\r\n        return new String(buffer, index, size - index);\r\n    }\r\n    return new String(buffer, index, length);\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i6 \u003e\u003d 0) → B1 | else → B2",
      "B2 : If(i0 \u003c\u003d 0) → B3 | else → B4",
      "B3 : If(i6 \u003c $i1) → B4 | else → B5",
      "B5 : If($i3 \u003e $i2) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  i6 :\u003d @parameter0: int\n  i0 :\u003d @parameter1: int\n  if (i6 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  i6 \u003d 0\n}",
      "B2 {\n  if (i0 \u003c\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $i1 \u003d StrBuilder: int size\u003e\n  if (i6 \u003c $i1) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $i3 \u003d StrBuilder: int size\u003e\n  $i2 \u003d i6 + i0\n  if ($i3 \u003e $i2) goto B6 else B7\n}",
      "B6 {\n  $r3 \u003d String\n  $r4 \u003d StrBuilder: char[] buffer\u003e\n  $i4 \u003d StrBuilder: int size\u003e\n  $i5 \u003d $i4 - i6\n  new String($r4, i6, $i5)\n  return\n}",
      "B7 {\n  $r1 \u003d String\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  new String($r2, i6, i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "minimizeCapacity",
    "signature": "org.apache.commons.lang3.text.StrBuilder minimizeCapacity()",
    "visibility": "public",
    "body": "{\r\n    if (buffer.length \u003e length()) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[length()]);\r\n    }\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003c\u003d $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  $r1 \u003d StrBuilder: char[] buffer\u003e\n  $i1 \u003d lengthof $r1\n  $i0 \u003d r0.length()\n  if ($i1 \u003c\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  $i2 \u003d StrBuilder: int size\u003e\n  $r3 \u003d StrBuilder$lambda_minimizeCapacity_1__173.bootstrap$(r0)\n  $r4 \u003d ArrayUtils.arraycopy($r2, 0, 0, $i2, $r3)\n  $r5 \u003d (char[]) $r4\n  StrBuilder: char[] buffer\u003e \u003d $r5\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#length(...0)",
        "body": "{\r\n    return size;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "readFrom",
    "signature": "int readFrom(java.lang.Readable)",
    "visibility": "public",
    "body": "{\r\n    final int oldSize \u003d size;\r\n    if (readable instanceof Reader) {\r\n        final Reader r \u003d (Reader) readable;\r\n        ensureCapacity(size + 1);\r\n        int read;\r\n        while ((read \u003d r.read(buffer, size, buffer.length - size)) !\u003d -1) {\r\n            size +\u003d read;\r\n            ensureCapacity(size + 1);\r\n        }\r\n    } else if (readable instanceof CharBuffer) {\r\n        final CharBuffer cb \u003d (CharBuffer) readable;\r\n        final int remaining \u003d cb.remaining();\r\n        ensureCapacity(size + remaining);\r\n        cb.get(buffer, size, remaining);\r\n        size +\u003d remaining;\r\n    } else {\r\n        while (true) {\r\n            ensureCapacity(size + 1);\r\n            final CharBuffer buf \u003d CharBuffer.wrap(buffer, size, buffer.length - size);\r\n            final int read \u003d readable.read(buf);\r\n            if (read \u003d\u003d -1) {\r\n                break;\r\n            }\r\n            size +\u003d read;\r\n        }\r\n    }\r\n    return size - oldSize;\r\n}",
    "nodes": 11,
    "edges": 14,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B5",
      "B2 : If($i21 \u003d\u003d $i30) → B3 | else → B4",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B7",
      "B7 : If($i9 !\u003d $i32) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  Readable\n  i0 \u003d StrBuilder: int size\u003e\n  $z0 \u003d Reader\n  if ($z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  r8 \u003d Reader) r1\n  $i15 \u003d StrBuilder: int size\u003e\n  $i16 \u003d $i15 + 1\n  r0.ensureCapacity($i16)\n}",
      "B2 {\n  $r7 \u003d StrBuilder: char[] buffer\u003e\n  $i20 \u003d StrBuilder: int size\u003e\n  $r6 \u003d StrBuilder: char[] buffer\u003e\n  $i18 \u003d lengthof $r6\n  $i17 \u003d StrBuilder: int size\u003e\n  $i19 \u003d $i18 - $i17\n  $i21 \u003d r8.read($r7, $i20, $i19)\n  $i30 \u003d (int) -1\n  if ($i21 \u003d\u003d $i30) goto B3 else B4\n}",
      "B3 {\n  $i22 \u003d StrBuilder: int size\u003e\n  $i23 \u003d $i22 + $i21\n  StrBuilder: int size\u003e \u003d $i23\n  $i24 \u003d StrBuilder: int size\u003e\n  $i25 \u003d $i24 + 1\n  r0.ensureCapacity($i25)\n  goto B2\n}",
      "B4 {\n  goto B10\n}",
      "B5 {\n  $z1 \u003d CharBuffer\n  if ($z1 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  r9 \u003d CharBuffer) r1\n  i26 \u003d r9.remaining()\n  $i10 \u003d StrBuilder: int size\u003e\n  $i11 \u003d $i10 + i26\n  r0.ensureCapacity($i11)\n  $r5 \u003d StrBuilder: char[] buffer\u003e\n  $i12 \u003d StrBuilder: int size\u003e\n  r9.get($r5, $i12, i26)\n  $i13 \u003d StrBuilder: int size\u003e\n  $i14 \u003d $i13 + i26\n  StrBuilder: int size\u003e \u003d $i14\n  goto B10\n}",
      "B7 {\n  $i1 \u003d StrBuilder: int size\u003e\n  $i2 \u003d $i1 + 1\n  r0.ensureCapacity($i2)\n  $r3 \u003d StrBuilder: char[] buffer\u003e\n  $i6 \u003d StrBuilder: int size\u003e\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  $i4 \u003d lengthof $r2\n  $i3 \u003d StrBuilder: int size\u003e\n  $i5 \u003d $i4 - $i3\n  $r4 \u003d CharBuffer.wrap($r3, $i6, $i5)\n  $i9 \u003d r1.read($r4)\n  $i32 \u003d (int) -1\n  if ($i9 !\u003d $i32) goto B8 else B9\n}",
      "B8 {\n  goto B10\n}",
      "B9 {\n  $i7 \u003d StrBuilder: int size\u003e\n  $i8 \u003d $i7 + $i9\n  StrBuilder: int size\u003e \u003d $i8\n  goto B7\n}",
      "B10 {\n  $i27 \u003d StrBuilder: int size\u003e\n  $i28 \u003d $i27 - i0\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e B10",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B7",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#ensureCapacity(...1)",
        "body": "{\r\n    if (capacity \u003e buffer.length) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[capacity * 2]);\r\n    }\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "replaceAll",
    "signature": "org.apache.commons.lang3.text.StrBuilder replaceAll(char,char)",
    "visibility": "public",
    "body": "{\r\n    if (search !\u003d replace) {\r\n        for (int i \u003d 0; i \u003c size; i++) {\r\n            if (buffer[i] \u003d\u003d search) {\r\n                buffer[i] \u003d replace;\r\n            }\r\n        }\r\n    }\r\n    return this;\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i5 \u003d\u003d $i6) → B1 | else → B6",
      "B2 : If(i4 \u003e\u003d $i2) → B3 | else → B6",
      "B3 : If($i7 !\u003d $i8) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  c0 :\u003d @parameter0: char\n  c1 :\u003d @parameter1: char\n  $i5 \u003d (int) c0\n  $i6 \u003d (int) c1\n  if ($i5 \u003d\u003d $i6) goto B1 else B6\n}",
      "B1 {\n  i4 \u003d 0\n}",
      "B2 {\n  $i2 \u003d StrBuilder: int size\u003e\n  if (i4 \u003e\u003d $i2) goto B3 else B6\n}",
      "B3 {\n  $r1 \u003d StrBuilder: char[] buffer\u003e\n  $c3 \u003d $r1[i4]\n  $i7 \u003d (int) $c3\n  $i8 \u003d (int) c0\n  if ($i7 !\u003d $i8) goto B4 else B5\n}",
      "B4 {\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  $r2[i4] \u003d c1\n}",
      "B5 {\n  i4 \u003d i4 + 1\n  goto B2\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "replaceAll",
    "signature": "org.apache.commons.lang3.text.StrBuilder replaceAll(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    final int searchLen \u003d StringUtils.length(searchStr);\r\n    if (searchLen \u003e 0) {\r\n        final int replaceLen \u003d StringUtils.length(replaceStr);\r\n        int index \u003d indexOf(searchStr, 0);\r\n        while (index \u003e\u003d 0) {\r\n            replaceImpl(index, index + searchLen, searchLen, replaceStr, replaceLen);\r\n            index \u003d indexOf(searchStr, index + replaceLen);\r\n        }\r\n    }\r\n    return this;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003c\u003d 0) → B1 | else → B4",
      "B2 : If(i4 \u003c 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  String\n  String\n  i0 \u003d StringUtils.length(r0)\n  if (i0 \u003c\u003d 0) goto B1 else B4\n}",
      "B1 {\n  i1 \u003d StringUtils.length(r2)\n  i4 \u003d r1.indexOf(r0, 0)\n}",
      "B2 {\n  if (i4 \u003c 0) goto B3 else B4\n}",
      "B3 {\n  $i2 \u003d i4 + i0\n  r1.replaceImpl(i4, $i2, i0, r2, i1)\n  $i3 \u003d i4 + i1\n  i4 \u003d r1.indexOf(r0, $i3)\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#replaceImpl(...5)",
        "body": "{\r\n    final int newSize \u003d size - removeLen + insertLen;\r\n    if (insertLen !\u003d removeLen) {\r\n        ensureCapacity(newSize);\r\n        System.arraycopy(buffer, endIndex, buffer, startIndex + insertLen, size - endIndex);\r\n        size \u003d newSize;\r\n    }\r\n    if (insertLen \u003e 0) {\r\n        insertStr.getChars(0, insertLen, buffer, startIndex);\r\n    }\r\n}"
      },
      {
        "name": "StrBuilder#indexOf(...2)",
        "body": "{\r\n    startIndex \u003d Math.max(startIndex, 0);\r\n    if (startIndex \u003e\u003d size) {\r\n        return -1;\r\n    }\r\n    final char[] thisBuf \u003d buffer;\r\n    for (int i \u003d startIndex; i \u003c size; i++) {\r\n        if (thisBuf[i] \u003d\u003d ch) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "replaceFirst",
    "signature": "org.apache.commons.lang3.text.StrBuilder replaceFirst(char,char)",
    "visibility": "public",
    "body": "{\r\n    if (search !\u003d replace) {\r\n        for (int i \u003d 0; i \u003c size; i++) {\r\n            if (buffer[i] \u003d\u003d search) {\r\n                buffer[i] \u003d replace;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return this;\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i5 \u003d\u003d $i6) → B1 | else → B6",
      "B2 : If(i4 \u003e\u003d $i2) → B3 | else → B6",
      "B3 : If($i7 !\u003d $i8) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  c0 :\u003d @parameter0: char\n  c1 :\u003d @parameter1: char\n  $i5 \u003d (int) c0\n  $i6 \u003d (int) c1\n  if ($i5 \u003d\u003d $i6) goto B1 else B6\n}",
      "B1 {\n  i4 \u003d 0\n}",
      "B2 {\n  $i2 \u003d StrBuilder: int size\u003e\n  if (i4 \u003e\u003d $i2) goto B3 else B6\n}",
      "B3 {\n  $r1 \u003d StrBuilder: char[] buffer\u003e\n  $c3 \u003d $r1[i4]\n  $i7 \u003d (int) $c3\n  $i8 \u003d (int) c0\n  if ($i7 !\u003d $i8) goto B4 else B5\n}",
      "B4 {\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  $r2[i4] \u003d c1\n  goto B6\n}",
      "B5 {\n  i4 \u003d i4 + 1\n  goto B2\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "replaceFirst",
    "signature": "org.apache.commons.lang3.text.StrBuilder replaceFirst(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    final int searchLen \u003d StringUtils.length(searchStr);\r\n    if (searchLen \u003e 0) {\r\n        final int index \u003d indexOf(searchStr, 0);\r\n        if (index \u003e\u003d 0) {\r\n            final int replaceLen \u003d StringUtils.length(replaceStr);\r\n            replaceImpl(index, index + searchLen, searchLen, replaceStr, replaceLen);\r\n        }\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003c\u003d 0) → B1 | else → B3",
      "B1 : If(i1 \u003c 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  String\n  String\n  i0 \u003d StringUtils.length(r0)\n  if (i0 \u003c\u003d 0) goto B1 else B3\n}",
      "B1 {\n  i1 \u003d r1.indexOf(r0, 0)\n  if (i1 \u003c 0) goto B2 else B3\n}",
      "B2 {\n  i2 \u003d StringUtils.length(r2)\n  $i3 \u003d i1 + i0\n  r1.replaceImpl(i1, $i3, i0, r2, i2)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#replaceImpl(...5)",
        "body": "{\r\n    final int newSize \u003d size - removeLen + insertLen;\r\n    if (insertLen !\u003d removeLen) {\r\n        ensureCapacity(newSize);\r\n        System.arraycopy(buffer, endIndex, buffer, startIndex + insertLen, size - endIndex);\r\n        size \u003d newSize;\r\n    }\r\n    if (insertLen \u003e 0) {\r\n        insertStr.getChars(0, insertLen, buffer, startIndex);\r\n    }\r\n}"
      },
      {
        "name": "StrBuilder#indexOf(...2)",
        "body": "{\r\n    startIndex \u003d Math.max(startIndex, 0);\r\n    if (startIndex \u003e\u003d size) {\r\n        return -1;\r\n    }\r\n    final char[] thisBuf \u003d buffer;\r\n    for (int i \u003d startIndex; i \u003c size; i++) {\r\n        if (thisBuf[i] \u003d\u003d ch) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "reverse",
    "signature": "org.apache.commons.lang3.text.StrBuilder reverse()",
    "visibility": "public",
    "body": "{\r\n    if (size \u003d\u003d 0) {\r\n        return this;\r\n    }\r\n    final int half \u003d size / 2;\r\n    final char[] buf \u003d buffer;\r\n    for (int leftIdx \u003d 0, rightIdx \u003d size - 1; leftIdx \u003c half; leftIdx++, rightIdx--) {\r\n        final char swap \u003d buf[leftIdx];\r\n        buf[leftIdx] \u003d buf[rightIdx];\r\n        buf[rightIdx] \u003d swap;\r\n    }\r\n    return this;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B3 : If(i6 \u003e\u003d i2) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  $i0 \u003d StrBuilder: int size\u003e\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d StrBuilder: int size\u003e\n  i2 \u003d $i1 / 2\n  r1 \u003d StrBuilder: char[] buffer\u003e\n  i6 \u003d 0\n  $i3 \u003d StrBuilder: int size\u003e\n  i7 \u003d $i3 - 1\n}",
      "B3 {\n  if (i6 \u003e\u003d i2) goto B4 else B5\n}",
      "B4 {\n  c4 \u003d r1[i6]\n  $c5 \u003d r1[i7]\n  r1[i6] \u003d $c5\n  r1[i7] \u003d c4\n  i6 \u003d i6 + 1\n  $i9 \u003d (int) -1\n  i7 \u003d i7 + $i9\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "rightString",
    "signature": "java.lang.String rightString(int)",
    "visibility": "public",
    "body": "{\r\n    if (length \u003c\u003d 0) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    if (length \u003e\u003d size) {\r\n        return new String(buffer, 0, size);\r\n    }\r\n    return new String(buffer, size - length, length);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 \u003e 0) → B1 | else → B2",
      "B2 : If(i0 \u003c $i1) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  i0 :\u003d @parameter0: int\n  if (i0 \u003e 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d StrBuilder: int size\u003e\n  if (i0 \u003c $i1) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d String\n  $r4 \u003d StrBuilder: char[] buffer\u003e\n  $i4 \u003d StrBuilder: int size\u003e\n  new String($r4, 0, $i4)\n  return\n}",
      "B4 {\n  $r1 \u003d String\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  $i2 \u003d StrBuilder: int size\u003e\n  $i3 \u003d $i2 - i0\n  new String($r2, $i3, i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "setCharAt",
    "signature": "org.apache.commons.lang3.text.StrBuilder setCharAt(int,char)",
    "visibility": "public",
    "body": "{\r\n    if (index \u003c 0 || index \u003e\u003d length()) {\r\n        throw new StringIndexOutOfBoundsException(index);\r\n    }\r\n    buffer[index] \u003d ch;\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B2",
      "B1 : If(i0 \u003c $i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  i0 :\u003d @parameter0: int\n  c2 :\u003d @parameter1: char\n  if (i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d r1.length()\n  if (i0 \u003c $i1) goto B2 else B3\n}",
      "B2 {\n  $r0 \u003d StringIndexOutOfBoundsException\n  new StringIndexOutOfBoundsException(i0)\n  throw $r0\n}",
      "B3 {\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  $r2[i0] \u003d c2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#length(...0)",
        "body": "{\r\n    return size;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "setLength",
    "signature": "org.apache.commons.lang3.text.StrBuilder setLength(int)",
    "visibility": "public",
    "body": "{\r\n    if (length \u003c 0) {\r\n        throw new StringIndexOutOfBoundsException(length);\r\n    }\r\n    if (length \u003c size) {\r\n        size \u003d length;\r\n    } else if (length \u003e size) {\r\n        ensureCapacity(length);\r\n        final int oldEnd \u003d size;\r\n        size \u003d length;\r\n        for (int i \u003d oldEnd; i \u003c length; i++) {\r\n            buffer[i] \u003d CharUtils.NUL;\r\n        }\r\n    }\r\n    return this;\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i0 \u003e\u003d 0) → B1 | else → B2",
      "B2 : If(i0 \u003e\u003d $i1) → B3 | else → B4",
      "B4 : If(i0 \u003c\u003d $i2) → B5 | else → B8",
      "B6 : If(i4 \u003e\u003d i0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  i0 :\u003d @parameter0: int\n  if (i0 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d StringIndexOutOfBoundsException\n  new StringIndexOutOfBoundsException(i0)\n  throw $r2\n}",
      "B2 {\n  $i1 \u003d StrBuilder: int size\u003e\n  if (i0 \u003e\u003d $i1) goto B3 else B4\n}",
      "B3 {\n  StrBuilder: int size\u003e \u003d i0\n  goto B8\n}",
      "B4 {\n  $i2 \u003d StrBuilder: int size\u003e\n  if (i0 \u003c\u003d $i2) goto B5 else B8\n}",
      "B5 {\n  r0.ensureCapacity(i0)\n  i3 \u003d StrBuilder: int size\u003e\n  StrBuilder: int size\u003e \u003d i0\n  i4 \u003d i3\n}",
      "B6 {\n  if (i4 \u003e\u003d i0) goto B7 else B8\n}",
      "B7 {\n  $r1 \u003d StrBuilder: char[] buffer\u003e\n  $r1[i4] \u003d 0\n  i4 \u003d i4 + 1\n  goto B6\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B6",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#ensureCapacity(...1)",
        "body": "{\r\n    if (capacity \u003e buffer.length) {\r\n        buffer \u003d ArrayUtils.arraycopy(buffer, 0, 0, size, () -\u003e new char[capacity * 2]);\r\n    }\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "setNullText",
    "signature": "org.apache.commons.lang3.text.StrBuilder setNullText(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (StringUtils.isEmpty(nullText)) {\r\n        nullText \u003d null;\r\n    }\r\n    this.nullText \u003d nullText;\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  String\n  $z0 \u003d StringUtils.isEmpty(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r1 \u003d null\n}",
      "B2 {\n  String nullText\u003e \u003d r1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "startsWith",
    "signature": "boolean startsWith(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    final int len \u003d str.length();\r\n    if (len \u003d\u003d 0) {\r\n        return true;\r\n    }\r\n    if (len \u003e size) {\r\n        return false;\r\n    }\r\n    for (int i \u003d 0; i \u003c len; i++) {\r\n        if (buffer[i] !\u003d str.charAt(i)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 12,
    "edges": 12,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 !\u003d 0) → B3 | else → B4",
      "B4 : If(i0 \u003c\u003d $i1) → B5 | else → B6",
      "B7 : If(i4 \u003e\u003d i0) → B8 | else → B11",
      "B8 : If($i5 \u003d\u003d $i6) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d r0.length()\n  if (i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i1 \u003d StrBuilder: int size\u003e\n  if (i0 \u003c\u003d $i1) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i4 \u003d 0\n}",
      "B7 {\n  if (i4 \u003e\u003d i0) goto B8 else B11\n}",
      "B8 {\n  $r2 \u003d StrBuilder: char[] buffer\u003e\n  $c2 \u003d $r2[i4]\n  $c3 \u003d r0.charAt(i4)\n  $i5 \u003d (int) $c2\n  $i6 \u003d (int) $c3\n  if ($i5 \u003d\u003d $i6) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  i4 \u003d i4 + 1\n  goto B7\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B7",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "subSequence",
    "signature": "java.lang.CharSequence subSequence(int,int)",
    "visibility": "public",
    "body": "{\r\n    if (startIndex \u003c 0) {\r\n        throw new StringIndexOutOfBoundsException(startIndex);\r\n    }\r\n    if (endIndex \u003e size) {\r\n        throw new StringIndexOutOfBoundsException(endIndex);\r\n    }\r\n    if (startIndex \u003e endIndex) {\r\n        throw new StringIndexOutOfBoundsException(endIndex - startIndex);\r\n    }\r\n    return substring(startIndex, endIndex);\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 \u003e\u003d 0) → B1 | else → B2",
      "B2 : If(i1 \u003c\u003d $i2) → B3 | else → B4",
      "B4 : If(i0 \u003c\u003d i1) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  i0 :\u003d @parameter0: int\n  i1 :\u003d @parameter1: int\n  if (i0 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d StringIndexOutOfBoundsException\n  new StringIndexOutOfBoundsException(i0)\n  throw $r4\n}",
      "B2 {\n  $i2 \u003d StrBuilder: int size\u003e\n  if (i1 \u003c\u003d $i2) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d StringIndexOutOfBoundsException\n  new StringIndexOutOfBoundsException(i1)\n  throw $r3\n}",
      "B4 {\n  if (i0 \u003c\u003d i1) goto B5 else B6\n}",
      "B5 {\n  $r2 \u003d StringIndexOutOfBoundsException\n  $i3 \u003d i1 - i0\n  new StringIndexOutOfBoundsException($i3)\n  throw $r2\n}",
      "B6 {\n  $r1 \u003d r0.substring(i0, i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#substring(...2)",
        "body": "{\r\n    endIndex \u003d validateRange(startIndex, endIndex);\r\n    return new String(buffer, startIndex, endIndex - startIndex);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "toCharArray",
    "signature": "char[] toCharArray()",
    "visibility": "public",
    "body": "{\r\n    if (size \u003d\u003d 0) {\r\n        return ArrayUtils.EMPTY_CHAR_ARRAY;\r\n    }\r\n    return ArrayUtils.arraycopy(buffer, 0, 0, size, char[]::new);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  $i0 \u003d StrBuilder: int size\u003e\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d ArrayUtils: char[] EMPTY_CHAR_ARRAY\u003e\n  return\n}",
      "B2 {\n  $r1 \u003d StrBuilder: char[] buffer\u003e\n  $i1 \u003d StrBuilder: int size\u003e\n  $r2 \u003d StrBuilder$lambda_toCharArray_2__174.bootstrap$()\n  $r3 \u003d ArrayUtils.arraycopy($r1, 0, 0, $i1, $r2)\n  $r4 \u003d (char[]) $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "toCharArray",
    "signature": "char[] toCharArray(int,int)",
    "visibility": "public",
    "body": "{\r\n    endIndex \u003d validateRange(startIndex, endIndex);\r\n    final int len \u003d endIndex - startIndex;\r\n    if (len \u003d\u003d 0) {\r\n        return ArrayUtils.EMPTY_CHAR_ARRAY;\r\n    }\r\n    return ArrayUtils.arraycopy(buffer, startIndex, 0, len, char[]::new);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i1 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  i0 :\u003d @parameter0: int\n  i2 :\u003d @parameter1: int\n  i3 \u003d r0.validateRange(i0, i2)\n  i1 \u003d i3 - i0\n  if (i1 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d ArrayUtils: char[] EMPTY_CHAR_ARRAY\u003e\n  return\n}",
      "B2 {\n  $r1 \u003d StrBuilder: char[] buffer\u003e\n  $r2 \u003d StrBuilder$lambda_toCharArray_3__175.bootstrap$()\n  $r3 \u003d ArrayUtils.arraycopy($r1, i0, 0, i1, $r2)\n  $r4 \u003d (char[]) $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#validateRange(...2)",
        "body": "{\r\n    if (startIndex \u003c 0) {\r\n        throw new StringIndexOutOfBoundsException(startIndex);\r\n    }\r\n    if (endIndex \u003e size) {\r\n        endIndex \u003d size;\r\n    }\r\n    if (startIndex \u003e endIndex) {\r\n        throw new StringIndexOutOfBoundsException(\"end \u003c start\");\r\n    }\r\n    return endIndex;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrBuilder",
    "methodName": "trim",
    "signature": "org.apache.commons.lang3.text.StrBuilder trim()",
    "visibility": "public",
    "body": "{\r\n    if (size \u003d\u003d 0) {\r\n        return this;\r\n    }\r\n    int len \u003d size;\r\n    final char[] buf \u003d buffer;\r\n    int pos \u003d 0;\r\n    while (pos \u003c len \u0026\u0026 buf[pos] \u003c\u003d \u0027 \u0027) {\r\n        pos++;\r\n    }\r\n    while (pos \u003c len \u0026\u0026 buf[len - 1] \u003c\u003d \u0027 \u0027) {\r\n        len--;\r\n    }\r\n    if (len \u003c size) {\r\n        delete(len, size);\r\n    }\r\n    if (pos \u003e 0) {\r\n        delete(0, pos);\r\n    }\r\n    return this;\r\n}",
    "nodes": 14,
    "edges": 19,
    "cc": 7,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B3 : If(i7 \u003e\u003d i6) → B4 | else → B6",
      "B4 : If($i8 \u003e 32) → B5 | else → B6",
      "B6 : If(i7 \u003e\u003d i6) → B7 | else → B9",
      "B7 : If($i9 \u003e 32) → B8 | else → B9",
      "B9 : If(i6 \u003e\u003d $i1) → B10 | else → B11",
      "B11 : If(i7 \u003c\u003d 0) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  StrBuilder\n  $i0 \u003d StrBuilder: int size\u003e\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i6 \u003d StrBuilder: int size\u003e\n  r1 \u003d StrBuilder: char[] buffer\u003e\n  i7 \u003d 0\n}",
      "B3 {\n  if (i7 \u003e\u003d i6) goto B4 else B6\n}",
      "B4 {\n  $c5 \u003d r1[i7]\n  $i8 \u003d (int) $c5\n  if ($i8 \u003e 32) goto B5 else B6\n}",
      "B5 {\n  i7 \u003d i7 + 1\n  goto B3\n}",
      "B6 {\n  if (i7 \u003e\u003d i6) goto B7 else B9\n}",
      "B7 {\n  $i3 \u003d i6 - 1\n  $c4 \u003d r1[$i3]\n  $i9 \u003d (int) $c4\n  if ($i9 \u003e 32) goto B8 else B9\n}",
      "B8 {\n  $i11 \u003d (int) -1\n  i6 \u003d i6 + $i11\n  goto B6\n}",
      "B9 {\n  $i1 \u003d StrBuilder: int size\u003e\n  if (i6 \u003e\u003d $i1) goto B10 else B11\n}",
      "B10 {\n  $i2 \u003d StrBuilder: int size\u003e\n  r0.delete(i6, $i2)\n}",
      "B11 {\n  if (i7 \u003c\u003d 0) goto B12 else B13\n}",
      "B12 {\n  r0.delete(0, i7)\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B3",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B6",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrBuilder#delete(...2)",
        "body": "{\r\n    endIndex \u003d validateRange(startIndex, endIndex);\r\n    final int len \u003d endIndex - startIndex;\r\n    if (len \u003e 0) {\r\n        deleteImpl(startIndex, endIndex, len);\r\n    }\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrSubstitutor",
    "methodName": "replace",
    "signature": "java.lang.String replace(java.lang.Object,java.util.Properties)",
    "visibility": "public",
    "body": "{\r\n    if (valueProperties \u003d\u003d null) {\r\n        return source.toString();\r\n    }\r\n    final Map\u003cString, String\u003e valueMap \u003d new HashMap\u003c\u003e();\r\n    final Enumeration\u003c?\u003e propNames \u003d valueProperties.propertyNames();\r\n    while (propNames.hasMoreElements()) {\r\n        final String propName \u003d String.valueOf(propNames.nextElement());\r\n        final String propValue \u003d valueProperties.getProperty(propName);\r\n        valueMap.put(propName, propValue);\r\n    }\r\n    return replace(source, valueMap);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Object\n  Properties\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d r3.toString()\n  return\n}",
      "B2 {\n  $r1 \u003d HashMap\n  new HashMap()\n  r2 \u003d r0.propertyNames()\n}",
      "B3 {\n  $z0 \u003d r2.hasMoreElements()\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r5 \u003d r2.nextElement()\n  r6 \u003d String.valueOf($r5)\n  r7 \u003d r0.getProperty(r6)\n  $r1.put(r6, r7)\n  goto B3\n}",
      "B5 {\n  $r4 \u003d StrSubstitutor.replace(r3, $r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrSubstitutor#replace(...2)",
        "body": "{\r\n    return new StrSubstitutor(valueMap).replace(source);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrSubstitutor",
    "methodName": "replace",
    "signature": "java.lang.String replace(char[])",
    "visibility": "public",
    "body": "{\r\n    if (source \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final StrBuilder buf \u003d new StrBuilder(source.length).append(source);\r\n    substitute(buf, 0, source.length);\r\n    return buf.toString();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrSubstitutor\n  r0 :\u003d @parameter0: char[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d StrBuilder\n  $i0 \u003d lengthof r0\n  new StrBuilder($i0)\n  r2 \u003d $r1.append(r0)\n  $i1 \u003d lengthof r0\n  r3.substitute(r2, 0, $i1)\n  $r4 \u003d r2.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrSubstitutor#substitute(...3)",
        "body": "{\r\n    return substitute(buf, offset, length, null) \u003e 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrSubstitutor",
    "methodName": "replace",
    "signature": "java.lang.String replace(char[],int,int)",
    "visibility": "public",
    "body": "{\r\n    if (source \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final StrBuilder buf \u003d new StrBuilder(length).append(source, offset, length);\r\n    substitute(buf, 0, length);\r\n    return buf.toString();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrSubstitutor\n  r0 :\u003d @parameter0: char[]\n  i1 :\u003d @parameter1: int\n  i0 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d StrBuilder\n  new StrBuilder(i0)\n  r2 \u003d $r1.append(r0, i1, i0)\n  r3.substitute(r2, 0, i0)\n  $r4 \u003d r2.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrSubstitutor#substitute(...3)",
        "body": "{\r\n    return substitute(buf, offset, length, null) \u003e 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrSubstitutor",
    "methodName": "replace",
    "signature": "java.lang.String replace(java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    if (source \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return replace(source, 0, source.length());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrSubstitutor\n  CharSequence\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d r0.length()\n  $r2 \u003d r1.replace(r0, 0, $i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrSubstitutor#replace(...3)",
        "body": "{\r\n    if (source \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final StrBuilder buf \u003d new StrBuilder(length).append(source, offset, length);\r\n    substitute(buf, 0, length);\r\n    return buf.toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrSubstitutor",
    "methodName": "replace",
    "signature": "java.lang.String replace(java.lang.CharSequence,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (source \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final StrBuilder buf \u003d new StrBuilder(length).append(source, offset, length);\r\n    substitute(buf, 0, length);\r\n    return buf.toString();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrSubstitutor\n  CharSequence\n  i1 :\u003d @parameter1: int\n  i0 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d StrBuilder\n  new StrBuilder(i0)\n  r2 \u003d $r1.append(r0, i1, i0)\n  r3.substitute(r2, 0, i0)\n  $r4 \u003d r2.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrSubstitutor#substitute(...3)",
        "body": "{\r\n    return substitute(buf, offset, length, null) \u003e 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrSubstitutor",
    "methodName": "replace",
    "signature": "java.lang.String replace(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (source \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final StrBuilder buf \u003d new StrBuilder().append(source);\r\n    substitute(buf, 0, buf.length());\r\n    return buf.toString();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrSubstitutor\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d StrBuilder\n  new StrBuilder()\n  r2 \u003d $r1.append(r0)\n  $i0 \u003d r2.length()\n  r3.substitute(r2, 0, $i0)\n  $r4 \u003d r2.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrSubstitutor#substitute(...3)",
        "body": "{\r\n    return substitute(buf, offset, length, null) \u003e 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrSubstitutor",
    "methodName": "replace",
    "signature": "java.lang.String replace(org.apache.commons.lang3.text.StrBuilder)",
    "visibility": "public",
    "body": "{\r\n    if (source \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final StrBuilder buf \u003d new StrBuilder(source.length()).append(source);\r\n    substitute(buf, 0, buf.length());\r\n    return buf.toString();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrSubstitutor\n  StrBuilder\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d StrBuilder\n  $i0 \u003d r0.length()\n  new StrBuilder($i0)\n  r2 \u003d $r1.append(r0)\n  $i1 \u003d r2.length()\n  r3.substitute(r2, 0, $i1)\n  $r4 \u003d r2.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrSubstitutor#substitute(...3)",
        "body": "{\r\n    return substitute(buf, offset, length, null) \u003e 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrSubstitutor",
    "methodName": "replace",
    "signature": "java.lang.String replace(org.apache.commons.lang3.text.StrBuilder,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (source \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final StrBuilder buf \u003d new StrBuilder(length).append(source, offset, length);\r\n    substitute(buf, 0, length);\r\n    return buf.toString();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrSubstitutor\n  StrBuilder\n  i1 :\u003d @parameter1: int\n  i0 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d StrBuilder\n  new StrBuilder(i0)\n  r2 \u003d $r1.append(r0, i1, i0)\n  r3.substitute(r2, 0, i0)\n  $r4 \u003d r2.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrSubstitutor#substitute(...3)",
        "body": "{\r\n    return substitute(buf, offset, length, null) \u003e 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrSubstitutor",
    "methodName": "replace",
    "signature": "java.lang.String replace(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (source \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final StrBuilder buf \u003d new StrBuilder(source);\r\n    if (!substitute(buf, 0, source.length())) {\r\n        return source;\r\n    }\r\n    return buf.toString();\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StrSubstitutor\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d StrBuilder\n  new StrBuilder(r0)\n  $i0 \u003d r0.length()\n  $z0 \u003d r2.substitute($r1, 0, $i0)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d $r1.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrSubstitutor#substitute(...3)",
        "body": "{\r\n    return substitute(buf, offset, length, null) \u003e 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrSubstitutor",
    "methodName": "replace",
    "signature": "java.lang.String replace(java.lang.String,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (source \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final StrBuilder buf \u003d new StrBuilder(length).append(source, offset, length);\r\n    if (!substitute(buf, 0, length)) {\r\n        return source.substring(offset, offset + length);\r\n    }\r\n    return buf.toString();\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StrSubstitutor\n  String\n  i1 :\u003d @parameter1: int\n  i0 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d StrBuilder\n  new StrBuilder(i0)\n  r2 \u003d $r1.append(r0, i1, i0)\n  $z0 \u003d r3.substitute(r2, 0, i0)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $i2 \u003d i1 + i0\n  $r5 \u003d r0.substring(i1, $i2)\n  return\n}",
      "B4 {\n  $r4 \u003d r2.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrSubstitutor#substitute(...3)",
        "body": "{\r\n    return substitute(buf, offset, length, null) \u003e 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrSubstitutor",
    "methodName": "replace",
    "signature": "java.lang.String replace(java.lang.StringBuffer)",
    "visibility": "public",
    "body": "{\r\n    if (source \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final StrBuilder buf \u003d new StrBuilder(source.length()).append(source);\r\n    substitute(buf, 0, buf.length());\r\n    return buf.toString();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrSubstitutor\n  StringBuffer\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d StrBuilder\n  $i0 \u003d r0.length()\n  new StrBuilder($i0)\n  r2 \u003d $r1.append(r0)\n  $i1 \u003d r2.length()\n  r3.substitute(r2, 0, $i1)\n  $r4 \u003d r2.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrSubstitutor#substitute(...3)",
        "body": "{\r\n    return substitute(buf, offset, length, null) \u003e 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrSubstitutor",
    "methodName": "replace",
    "signature": "java.lang.String replace(java.lang.StringBuffer,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (source \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final StrBuilder buf \u003d new StrBuilder(length).append(source, offset, length);\r\n    substitute(buf, 0, length);\r\n    return buf.toString();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrSubstitutor\n  StringBuffer\n  i1 :\u003d @parameter1: int\n  i0 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d StrBuilder\n  new StrBuilder(i0)\n  r2 \u003d $r1.append(r0, i1, i0)\n  r3.substitute(r2, 0, i0)\n  $r4 \u003d r2.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrSubstitutor#substitute(...3)",
        "body": "{\r\n    return substitute(buf, offset, length, null) \u003e 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrSubstitutor",
    "methodName": "replaceIn",
    "signature": "boolean replaceIn(org.apache.commons.lang3.text.StrBuilder)",
    "visibility": "public",
    "body": "{\r\n    if (source \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return substitute(source, 0, source.length());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrSubstitutor\n  StrBuilder\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d r0.length()\n  $z0 \u003d r1.substitute(r0, 0, $i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrSubstitutor#substitute(...3)",
        "body": "{\r\n    return substitute(buf, offset, length, null) \u003e 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrSubstitutor",
    "methodName": "replaceIn",
    "signature": "boolean replaceIn(org.apache.commons.lang3.text.StrBuilder,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (source \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return substitute(source, offset, length);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrSubstitutor\n  StrBuilder\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r1.substitute(r0, i0, i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrSubstitutor#substitute(...3)",
        "body": "{\r\n    return substitute(buf, offset, length, null) \u003e 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrSubstitutor",
    "methodName": "replaceIn",
    "signature": "boolean replaceIn(java.lang.StringBuffer)",
    "visibility": "public",
    "body": "{\r\n    if (source \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return replaceIn(source, 0, source.length());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrSubstitutor\n  StringBuffer\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d r0.length()\n  $z0 \u003d r1.replaceIn(r0, 0, $i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrSubstitutor#replaceIn(...3)",
        "body": "{\r\n    if (source \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return substitute(source, offset, length);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrSubstitutor",
    "methodName": "replaceIn",
    "signature": "boolean replaceIn(java.lang.StringBuffer,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (source \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    final StrBuilder buf \u003d new StrBuilder(length).append(source, offset, length);\r\n    if (!substitute(buf, 0, length)) {\r\n        return false;\r\n    }\r\n    source.replace(offset, offset + length, buf.toString());\r\n    return true;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StrSubstitutor\n  StringBuffer\n  i1 :\u003d @parameter1: int\n  i0 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d StrBuilder\n  new StrBuilder(i0)\n  r2 \u003d $r1.append(r0, i1, i0)\n  $z0 \u003d r3.substitute(r2, 0, i0)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i2 \u003d i1 + i0\n  $r4 \u003d r2.toString()\n  r0.replace(i1, $i2, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrSubstitutor#substitute(...3)",
        "body": "{\r\n    return substitute(buf, offset, length, null) \u003e 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrSubstitutor",
    "methodName": "replaceIn",
    "signature": "boolean replaceIn(java.lang.StringBuilder)",
    "visibility": "public",
    "body": "{\r\n    if (source \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return replaceIn(source, 0, source.length());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrSubstitutor\n  StringBuilder\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d r0.length()\n  $z0 \u003d r1.replaceIn(r0, 0, $i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrSubstitutor#replaceIn(...3)",
        "body": "{\r\n    if (source \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return substitute(source, offset, length);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrSubstitutor",
    "methodName": "replaceIn",
    "signature": "boolean replaceIn(java.lang.StringBuilder,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (source \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    final StrBuilder buf \u003d new StrBuilder(length).append(source, offset, length);\r\n    if (!substitute(buf, 0, length)) {\r\n        return false;\r\n    }\r\n    source.replace(offset, offset + length, buf.toString());\r\n    return true;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StrSubstitutor\n  StringBuilder\n  i1 :\u003d @parameter1: int\n  i0 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d StrBuilder\n  new StrBuilder(i0)\n  r2 \u003d $r1.append(r0, i1, i0)\n  $z0 \u003d r3.substitute(r2, 0, i0)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i2 \u003d i1 + i0\n  $r4 \u003d r2.toString()\n  r0.replace(i1, $i2, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrSubstitutor#substitute(...3)",
        "body": "{\r\n    return substitute(buf, offset, length, null) \u003e 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrSubstitutor",
    "methodName": "setValueDelimiter",
    "signature": "org.apache.commons.lang3.text.StrSubstitutor setValueDelimiter(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (StringUtils.isEmpty(valueDelimiter)) {\r\n        setValueDelimiterMatcher(null);\r\n        return this;\r\n    }\r\n    return setValueDelimiterMatcher(StrMatcher.stringMatcher(valueDelimiter));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrSubstitutor\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r1.setValueDelimiterMatcher(null)\n  return\n}",
      "B2 {\n  $r2 \u003d StrMatcher.stringMatcher(r0)\n  $r3 \u003d r1.setValueDelimiterMatcher($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrSubstitutor#setValueDelimiterMatcher(...1)",
        "body": "{\r\n    this.valueDelimiterMatcher \u003d valueDelimiterMatcher;\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrTokenizer",
    "methodName": "getContent",
    "signature": "java.lang.String getContent()",
    "visibility": "public",
    "body": "{\r\n    if (chars \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    return new String(chars);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrTokenizer\n  $r1 \u003d StrTokenizer: char[] chars\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d String\n  $r3 \u003d StrTokenizer: char[] chars\u003e\n  new String($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrTokenizer",
    "methodName": "hasNext",
    "signature": "boolean hasNext()",
    "visibility": "public",
    "body": "{\r\n    checkTokenized();\r\n    return tokenPos \u003c tokens.length;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003e\u003d $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrTokenizer\n  r0.checkTokenized()\n  $i1 \u003d StrTokenizer: int tokenPos\u003e\n  $r1 \u003d String[] tokens\u003e\n  $i0 \u003d lengthof $r1\n  if ($i1 \u003e\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrTokenizer#checkTokenized(...0)",
        "body": "{\r\n    if (tokens \u003d\u003d null) {\r\n        if (chars \u003d\u003d null) {\r\n            // still call tokenize as subclass may do some work\r\n            final List\u003cString\u003e split \u003d tokenize(null, 0, 0);\r\n            tokens \u003d split.toArray(ArrayUtils.EMPTY_STRING_ARRAY);\r\n        } else {\r\n            final List\u003cString\u003e split \u003d tokenize(chars, 0, chars.length);\r\n            tokens \u003d split.toArray(ArrayUtils.EMPTY_STRING_ARRAY);\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrTokenizer",
    "methodName": "hasPrevious",
    "signature": "boolean hasPrevious()",
    "visibility": "public",
    "body": "{\r\n    checkTokenized();\r\n    return tokenPos \u003e 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrTokenizer\n  r0.checkTokenized()\n  $i0 \u003d StrTokenizer: int tokenPos\u003e\n  if ($i0 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrTokenizer#checkTokenized(...0)",
        "body": "{\r\n    if (tokens \u003d\u003d null) {\r\n        if (chars \u003d\u003d null) {\r\n            // still call tokenize as subclass may do some work\r\n            final List\u003cString\u003e split \u003d tokenize(null, 0, 0);\r\n            tokens \u003d split.toArray(ArrayUtils.EMPTY_STRING_ARRAY);\r\n        } else {\r\n            final List\u003cString\u003e split \u003d tokenize(chars, 0, chars.length);\r\n            tokens \u003d split.toArray(ArrayUtils.EMPTY_STRING_ARRAY);\r\n        }\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrTokenizer",
    "methodName": "next",
    "signature": "java.lang.String next()",
    "visibility": "public",
    "body": "{\r\n    if (hasNext()) {\r\n        return tokens[tokenPos++];\r\n    }\r\n    throw new NoSuchElementException();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrTokenizer\n  $z0 \u003d r0.hasNext()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d String[] tokens\u003e\n  $i0 \u003d StrTokenizer: int tokenPos\u003e\n  $i1 \u003d $i0 + 1\n  StrTokenizer: int tokenPos\u003e \u003d $i1\n  $r3 \u003d $r2[$i0]\n  return\n}",
      "B2 {\n  $r1 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrTokenizer#hasNext(...0)",
        "body": "{\r\n    checkTokenized();\r\n    return tokenPos \u003c tokens.length;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrTokenizer",
    "methodName": "nextToken",
    "signature": "java.lang.String nextToken()",
    "visibility": "public",
    "body": "{\r\n    if (hasNext()) {\r\n        return tokens[tokenPos++];\r\n    }\r\n    return null;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrTokenizer\n  $z0 \u003d r0.hasNext()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d String[] tokens\u003e\n  $i0 \u003d StrTokenizer: int tokenPos\u003e\n  $i1 \u003d $i0 + 1\n  StrTokenizer: int tokenPos\u003e \u003d $i1\n  $r2 \u003d $r1[$i0]\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrTokenizer#hasNext(...0)",
        "body": "{\r\n    checkTokenized();\r\n    return tokenPos \u003c tokens.length;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrTokenizer",
    "methodName": "previous",
    "signature": "java.lang.String previous()",
    "visibility": "public",
    "body": "{\r\n    if (hasPrevious()) {\r\n        return tokens[--tokenPos];\r\n    }\r\n    throw new NoSuchElementException();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrTokenizer\n  $z0 \u003d r0.hasPrevious()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d String[] tokens\u003e\n  $i0 \u003d StrTokenizer: int tokenPos\u003e\n  $i1 \u003d $i0 - 1\n  StrTokenizer: int tokenPos\u003e \u003d $i1\n  $r3 \u003d $r2[$i1]\n  return\n}",
      "B2 {\n  $r1 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrTokenizer#hasPrevious(...0)",
        "body": "{\r\n    checkTokenized();\r\n    return tokenPos \u003e 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrTokenizer",
    "methodName": "previousToken",
    "signature": "java.lang.String previousToken()",
    "visibility": "public",
    "body": "{\r\n    if (hasPrevious()) {\r\n        return tokens[--tokenPos];\r\n    }\r\n    return null;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrTokenizer\n  $z0 \u003d r0.hasPrevious()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d String[] tokens\u003e\n  $i0 \u003d StrTokenizer: int tokenPos\u003e\n  $i1 \u003d $i0 - 1\n  StrTokenizer: int tokenPos\u003e \u003d $i1\n  $r2 \u003d $r1[$i1]\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrTokenizer#hasPrevious(...0)",
        "body": "{\r\n    checkTokenized();\r\n    return tokenPos \u003e 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrTokenizer",
    "methodName": "reset",
    "signature": "org.apache.commons.lang3.text.StrTokenizer reset(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    reset();\r\n    if (input !\u003d null) {\r\n        this.chars \u003d input.toCharArray();\r\n    } else {\r\n        this.chars \u003d null;\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrTokenizer\n  String\n  r0.reset()\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1.toCharArray()\n  StrTokenizer: char[] chars\u003e \u003d $r2\n  goto B3\n}",
      "B2 {\n  StrTokenizer: char[] chars\u003e \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrTokenizer#reset(...0)",
        "body": "{\r\n    tokenPos \u003d 0;\r\n    tokens \u003d null;\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrTokenizer",
    "methodName": "setDelimiterMatcher",
    "signature": "org.apache.commons.lang3.text.StrTokenizer setDelimiterMatcher(org.apache.commons.lang3.text.StrMatcher)",
    "visibility": "public",
    "body": "{\r\n    if (delim \u003d\u003d null) {\r\n        this.delimMatcher \u003d StrMatcher.noneMatcher();\r\n    } else {\r\n        this.delimMatcher \u003d delim;\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrTokenizer\n  StrMatcher\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d StrMatcher.noneMatcher()\n  StrMatcher delimMatcher\u003e \u003d $r2\n  goto B3\n}",
      "B2 {\n  StrMatcher delimMatcher\u003e \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrTokenizer",
    "methodName": "setIgnoredMatcher",
    "signature": "org.apache.commons.lang3.text.StrTokenizer setIgnoredMatcher(org.apache.commons.lang3.text.StrMatcher)",
    "visibility": "public",
    "body": "{\r\n    if (ignored !\u003d null) {\r\n        this.ignoredMatcher \u003d ignored;\r\n    }\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrTokenizer\n  StrMatcher\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  StrMatcher ignoredMatcher\u003e \u003d r0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrTokenizer",
    "methodName": "setQuoteMatcher",
    "signature": "org.apache.commons.lang3.text.StrTokenizer setQuoteMatcher(org.apache.commons.lang3.text.StrMatcher)",
    "visibility": "public",
    "body": "{\r\n    if (quote !\u003d null) {\r\n        this.quoteMatcher \u003d quote;\r\n    }\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrTokenizer\n  StrMatcher\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  StrMatcher quoteMatcher\u003e \u003d r0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrTokenizer",
    "methodName": "setTrimmerMatcher",
    "signature": "org.apache.commons.lang3.text.StrTokenizer setTrimmerMatcher(org.apache.commons.lang3.text.StrMatcher)",
    "visibility": "public",
    "body": "{\r\n    if (trimmer !\u003d null) {\r\n        this.trimmerMatcher \u003d trimmer;\r\n    }\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrTokenizer\n  StrMatcher\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  StrMatcher trimmerMatcher\u003e \u003d r0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.StrTokenizer",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    if (tokens \u003d\u003d null) {\r\n        return \"StrTokenizer[not tokenized yet]\";\r\n    }\r\n    return \"StrTokenizer\" + getTokenList();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrTokenizer\n  $r1 \u003d String[] tokens\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d StringBuilder\n  new StringBuilder()\n  $r4 \u003d $r2.append(\"StrTokenizer\")\n  $r3 \u003d r0.getTokenList()\n  $r5 \u003d $r4.append($r3)\n  $r6 \u003d $r5.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StrTokenizer#getTokenList(...0)",
        "body": "{\r\n    checkTokenized();\r\n    final List\u003cString\u003e list \u003d new ArrayList\u003c\u003e(tokens.length);\r\n    list.addAll(Arrays.asList(tokens));\r\n    return list;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.translate.AggregateTranslator",
    "methodName": "translate",
    "signature": "int translate(java.lang.CharSequence,int,java.io.Writer)",
    "visibility": "public",
    "body": "{\r\n    for (final CharSequenceTranslator translator : translators) {\r\n        final int consumed \u003d translator.translate(input, index, out);\r\n        if (consumed !\u003d 0) {\r\n            return consumed;\r\n        }\r\n    }\r\n    return 0;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d i0) → B2 | else → B5",
      "B2 : If(i2 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  AggregateTranslator\n  CharSequence\n  i1 :\u003d @parameter1: int\n  Writer\n  r1 \u003d CharSequenceTranslator[] translators\u003e\n  i0 \u003d lengthof r1\n  i3 \u003d 0\n}",
      "B1 {\n  if (i3 \u003e\u003d i0) goto B2 else B5\n}",
      "B2 {\n  r2 \u003d r1[i3]\n  i2 \u003d r2.translate(r3, i1, r4)\n  if (i2 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.translate.EntityArrays",
    "methodName": "invert",
    "signature": "java.lang.String[][] invert(java.lang.String[][])",
    "visibility": "public",
    "body": "{\r\n    final String[][] newarray \u003d new String[array.length][2];\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        newarray[i][0] \u003d array[i][1];\r\n        newarray[i][1] \u003d array[i][0];\r\n    }\r\n    return newarray;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d $i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  String[][]\n  $i0 \u003d lengthof r0\n  r1 \u003d String)[$i0][2]\n  i2 \u003d 0\n}",
      "B1 {\n  $i1 \u003d lengthof r0\n  if (i2 \u003e\u003d $i1) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r1[i2]\n  $r2 \u003d r0[i2]\n  $r3 \u003d $r2[1]\n  $r4[0] \u003d $r3\n  $r7 \u003d r1[i2]\n  $r5 \u003d r0[i2]\n  $r6 \u003d $r5[0]\n  $r7[1] \u003d $r6\n  i2 \u003d i2 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.translate.LookupTranslator",
    "methodName": "translate",
    "signature": "int translate(java.lang.CharSequence,int,java.io.Writer)",
    "visibility": "public",
    "body": "{\r\n    // check if translation exists for the input at position index\r\n    if (prefixSet.contains(input.charAt(index))) {\r\n        int max \u003d longest;\r\n        if (index + longest \u003e input.length()) {\r\n            max \u003d input.length() - index;\r\n        }\r\n        // implement greedy algorithm by trying maximum match first\r\n        for (int i \u003d max; i \u003e\u003d shortest; i--) {\r\n            final CharSequence subSeq \u003d input.subSequence(index, index + i);\r\n            final String result \u003d lookupMap.get(subSeq.toString());\r\n            if (result !\u003d null) {\r\n                out.write(result);\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n    return 0;\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B8",
      "B1 : If($i4 \u003c\u003d $i3) → B2 | else → B3",
      "B4 : If(i8 \u003c $i9) → B5 | else → B8",
      "B5 : If(r8 \u003d\u003d null) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  LookupTranslator\n  CharSequence\n  i0 :\u003d @parameter1: int\n  Writer\n  $r2 \u003d HashSet prefixSet\u003e\n  $c1 \u003d r1.charAt(i0)\n  $r3 \u003d Character.valueOf($c1)\n  $z0 \u003d $r2.contains($r3)\n  if ($z0 \u003d\u003d false) goto B1 else B8\n}",
      "B1 {\n  i7 \u003d LookupTranslator: int longest\u003e\n  $i2 \u003d LookupTranslator: int longest\u003e\n  $i4 \u003d i0 + $i2\n  $i3 \u003d r1.length()\n  if ($i4 \u003c\u003d $i3) goto B2 else B3\n}",
      "B2 {\n  $i6 \u003d r1.length()\n  i7 \u003d $i6 - i0\n}",
      "B3 {\n  i8 \u003d i7\n}",
      "B4 {\n  $i9 \u003d LookupTranslator: int shortest\u003e\n  if (i8 \u003c $i9) goto B5 else B8\n}",
      "B5 {\n  $i5 \u003d i0 + i8\n  r4 \u003d r1.subSequence(i0, $i5)\n  $r5 \u003d HashMap lookupMap\u003e\n  $r6 \u003d r4.toString()\n  $r7 \u003d $r5.get($r6)\n  r8 \u003d String) $r7\n  if (r8 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  r9.write(r8)\n  return\n}",
      "B7 {\n  $i11 \u003d (int) -1\n  i8 \u003d i8 + $i11\n  goto B4\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B8",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B4",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.translate.NumericEntityEscaper",
    "methodName": "translate",
    "signature": "boolean translate(int,java.io.Writer)",
    "visibility": "public",
    "body": "{\r\n    if (between) {\r\n        if (codePoint \u003c below || codePoint \u003e above) {\r\n            return false;\r\n        }\r\n    } else if (codePoint \u003e\u003d below \u0026\u0026 codePoint \u003c\u003d above) {\r\n        return false;\r\n    }\r\n    out.write(\"\u0026#\");\r\n    out.write(Integer.toString(codePoint, 10));\r\n    out.write(\u0027;\u0027);\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B4",
      "B1 : If(i0 \u003c $i3) → B2 | else → B3",
      "B2 : If(i0 \u003c\u003d $i4) → B3 | else → B7",
      "B4 : If(i0 \u003c $i1) → B5 | else → B7",
      "B5 : If(i0 \u003e $i2) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  NumericEntityEscaper\n  i0 :\u003d @parameter0: int\n  Writer\n  $z0 \u003d NumericEntityEscaper: boolean between\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B4\n}",
      "B1 {\n  $i3 \u003d NumericEntityEscaper: int below\u003e\n  if (i0 \u003c $i3) goto B2 else B3\n}",
      "B2 {\n  $i4 \u003d NumericEntityEscaper: int above\u003e\n  if (i0 \u003c\u003d $i4) goto B3 else B7\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i1 \u003d NumericEntityEscaper: int below\u003e\n  if (i0 \u003c $i1) goto B5 else B7\n}",
      "B5 {\n  $i2 \u003d NumericEntityEscaper: int above\u003e\n  if (i0 \u003e $i2) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  r1.write(\"\u0026#\")\n  $r2 \u003d Integer.toString(i0, 10)\n  r1.write($r2)\n  r1.write(59)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.translate.NumericEntityUnescaper",
    "methodName": "isSet",
    "signature": "boolean isSet(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  NumericEntityUnescaper\n  NumericEntityUnescaper$OPTION\n  $r1 \u003d EnumSet options\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r3 \u003d EnumSet options\u003e\n  $z0 \u003d $r3.contains(r2)\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.translate.NumericEntityUnescaper",
    "methodName": "translate",
    "signature": "int translate(java.lang.CharSequence,int,java.io.Writer)",
    "visibility": "public",
    "body": "{\r\n    final int seqEnd \u003d input.length();\r\n    // Uses -2 to ensure there is something after the \u0026#\r\n    if (input.charAt(index) \u003d\u003d \u0027\u0026\u0027 \u0026\u0026 index \u003c seqEnd - 2 \u0026\u0026 input.charAt(index + 1) \u003d\u003d \u0027#\u0027) {\r\n        int start \u003d index + 2;\r\n        boolean isHex \u003d false;\r\n        final char firstChar \u003d input.charAt(start);\r\n        if (firstChar \u003d\u003d \u0027x\u0027 || firstChar \u003d\u003d \u0027X\u0027) {\r\n            start++;\r\n            isHex \u003d true;\r\n            // Check there\u0027s more than just an x after the \u0026#\r\n            if (start \u003d\u003d seqEnd) {\r\n                return 0;\r\n            }\r\n        }\r\n        int end \u003d start;\r\n        // Note that this supports character codes without a ; on the end\r\n        while (end \u003c seqEnd \u0026\u0026 (input.charAt(end) \u003e\u003d \u00270\u0027 \u0026\u0026 input.charAt(end) \u003c\u003d \u00279\u0027 || input.charAt(end) \u003e\u003d \u0027a\u0027 \u0026\u0026 input.charAt(end) \u003c\u003d \u0027f\u0027 || input.charAt(end) \u003e\u003d \u0027A\u0027 \u0026\u0026 input.charAt(end) \u003c\u003d \u0027F\u0027)) {\r\n            end++;\r\n        }\r\n        final boolean semiNext \u003d end !\u003d seqEnd \u0026\u0026 input.charAt(end) \u003d\u003d \u0027;\u0027;\r\n        if (!semiNext) {\r\n            if (isSet(OPTION.semiColonRequired)) {\r\n                return 0;\r\n            }\r\n            if (isSet(OPTION.errorIfNoSemiColon)) {\r\n                throw new IllegalArgumentException(\"Semi-colon required at end of numeric entity\");\r\n            }\r\n        }\r\n        final int entityValue;\r\n        try {\r\n            if (isHex) {\r\n                entityValue \u003d Integer.parseInt(input.subSequence(start, end).toString(), 16);\r\n            } else {\r\n                entityValue \u003d Integer.parseInt(input.subSequence(start, end).toString(), 10);\r\n            }\r\n        } catch (final NumberFormatException nfe) {\r\n            return 0;\r\n        }\r\n        if (entityValue \u003e 0xFFFF) {\r\n            final char[] chars \u003d Character.toChars(entityValue);\r\n            out.write(chars[0]);\r\n            out.write(chars[1]);\r\n        } else {\r\n            out.write(entityValue);\r\n        }\r\n        return 2 + end - start + (isHex ? 1 : 0) + (semiNext ? 1 : 0);\r\n    }\r\n    return 0;\r\n}",
    "nodes": 41,
    "edges": 57,
    "cc": 18,
    "flowSummary": [
      "B0 : If($i23 !\u003d 38) → B1 | else → B40",
      "B1 : If(i1 \u003e\u003d $i3) → B2 | else → B40",
      "B2 : If($i24 !\u003d 35) → B3 | else → B40",
      "B3 : If($i25 \u003d\u003d 120) → B4 | else → B5",
      "B4 : If($i26 !\u003d 88) → B5 | else → B7",
      "B5 : If(i20 !\u003d i0) → B6 | else → B7",
      "B8 : If(i21 \u003e\u003d i0) → B9 | else → B16",
      "B9 : If($i27 \u003c 48) → B10 | else → B11",
      "B10 : If($i28 \u003c\u003d 57) → B11 | else → B15",
      "B11 : If($i29 \u003c 97) → B12 | else → B13",
      "B12 : If($i30 \u003c\u003d 102) → B13 | else → B15",
      "B13 : If($i31 \u003c 65) → B14 | else → B16",
      "B14 : If($i32 \u003e 70) → B15 | else → B16",
      "B16 : If(i21 \u003d\u003d i0) → B17 | else → B19",
      "B17 : If($i33 !\u003d 59) → B18 | else → B19",
      "B20 : If($z10 !\u003d 0) → B21 | else → B25",
      "B21 : If($z1 \u003d\u003d false) → B22 | else → B23",
      "B23 : If($z2 \u003d\u003d false) → B24 | else → B25",
      "B25 : If(z7 \u003d\u003d false) → B26 | else → B27",
      "B30 : If(i22 \u003c\u003d $i35) → B31 | else → B32",
      "B33 : If(z8 \u003d\u003d false) → B34 | else → B35",
      "B36 : If(z0 \u003d\u003d false) → B37 | else → B38"
    ],
    "blockList": [
      "B0 {\n  NumericEntityUnescaper\n  CharSequence\n  i1 :\u003d @parameter1: int\n  Writer\n  i0 \u003d r0.length()\n  $c2 \u003d r0.charAt(i1)\n  $i23 \u003d (int) $c2\n  if ($i23 !\u003d 38) goto B1 else B40\n}",
      "B1 {\n  $i3 \u003d i0 - 2\n  if (i1 \u003e\u003d $i3) goto B2 else B40\n}",
      "B2 {\n  $i4 \u003d i1 + 1\n  $c5 \u003d r0.charAt($i4)\n  $i24 \u003d (int) $c5\n  if ($i24 !\u003d 35) goto B3 else B40\n}",
      "B3 {\n  i20 \u003d i1 + 2\n  z3 \u003d 0\n  z8 \u003d 0\n  z7 \u003d 0\n  c6 \u003d r0.charAt(i20)\n  $i25 \u003d (int) c6\n  if ($i25 \u003d\u003d 120) goto B4 else B5\n}",
      "B4 {\n  $i26 \u003d (int) c6\n  if ($i26 !\u003d 88) goto B5 else B7\n}",
      "B5 {\n  i20 \u003d i20 + 1\n  z3 \u003d 1\n  z8 \u003d 1\n  z7 \u003d 1\n  if (i20 !\u003d i0) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  i21 \u003d i20\n}",
      "B8 {\n  if (i21 \u003e\u003d i0) goto B9 else B16\n}",
      "B9 {\n  $c14 \u003d r0.charAt(i21)\n  $i27 \u003d (int) $c14\n  if ($i27 \u003c 48) goto B10 else B11\n}",
      "B10 {\n  $c19 \u003d r0.charAt(i21)\n  $i28 \u003d (int) $c19\n  if ($i28 \u003c\u003d 57) goto B11 else B15\n}",
      "B11 {\n  $c15 \u003d r0.charAt(i21)\n  $i29 \u003d (int) $c15\n  if ($i29 \u003c 97) goto B12 else B13\n}",
      "B12 {\n  $c18 \u003d r0.charAt(i21)\n  $i30 \u003d (int) $c18\n  if ($i30 \u003c\u003d 102) goto B13 else B15\n}",
      "B13 {\n  $c16 \u003d r0.charAt(i21)\n  $i31 \u003d (int) $c16\n  if ($i31 \u003c 65) goto B14 else B16\n}",
      "B14 {\n  $c17 \u003d r0.charAt(i21)\n  $i32 \u003d (int) $c17\n  if ($i32 \u003e 70) goto B15 else B16\n}",
      "B15 {\n  i21 \u003d i21 + 1\n  goto B8\n}",
      "B16 {\n  if (i21 \u003d\u003d i0) goto B17 else B19\n}",
      "B17 {\n  $c13 \u003d r0.charAt(i21)\n  $i33 \u003d (int) $c13\n  if ($i33 !\u003d 59) goto B18 else B19\n}",
      "B18 {\n  $z10 \u003d 1\n  $z9 \u003d 1\n  goto B20\n}",
      "B19 {\n  $z10 \u003d 0\n  $z9 \u003d 0\n}",
      "B20 {\n  z0 \u003d $z9\n  if ($z10 !\u003d 0) goto B21 else B25\n}",
      "B21 {\n  $r7 \u003d NumericEntityUnescaper$OPTION semiColonRequired\u003e\n  $z1 \u003d r6.isSet($r7)\n  if ($z1 \u003d\u003d false) goto B22 else B23\n}",
      "B22 {\n  return\n}",
      "B23 {\n  $r8 \u003d NumericEntityUnescaper$OPTION errorIfNoSemiColon\u003e\n  $z2 \u003d r6.isSet($r8)\n  if ($z2 \u003d\u003d false) goto B24 else B25\n}",
      "B24 {\n  $r12 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Semi-colon required at end of numeric entity\")\n  throw $r12\n}",
      "B25 {\n  if (z7 \u003d\u003d false) goto B26 else B27\n}",
      "B26 {\n  $r4 \u003d r0.subSequence(i20, i21)\n  $r5 \u003d $r4.toString()\n  i22 \u003d Integer.parseInt($r5, 16)\n  goto B28\n}",
      "B27 {\n  $r1 \u003d r0.subSequence(i20, i21)\n  $r2 \u003d $r1.toString()\n  i22 \u003d Integer.parseInt($r2, 10)\n}",
      "B28 {\n  goto B30\n}",
      "B29 {\n  $r10 :\u003d @caughtexception\n  return\n}",
      "B30 {\n  $i35 \u003d (int) 65535\n  if (i22 \u003c\u003d $i35) goto B31 else B32\n}",
      "B31 {\n  r11 \u003d Character.toChars(i22)\n  $c11 \u003d r11[0]\n  $i36 \u003d (int) $c11\n  r3.write($i36)\n  $c12 \u003d r11[1]\n  $i37 \u003d (int) $c12\n  r3.write($i37)\n  goto B33\n}",
      "B32 {\n  r3.write(i22)\n}",
      "B33 {\n  $i7 \u003d 2 + i21\n  $i8 \u003d $i7 - i20\n  if (z8 \u003d\u003d false) goto B34 else B35\n}",
      "B34 {\n  $z5 \u003d 1\n  goto B36\n}",
      "B35 {\n  $z5 \u003d 0\n}",
      "B36 {\n  $i9 \u003d $i8 + $z5\n  if (z0 \u003d\u003d false) goto B37 else B38\n}",
      "B37 {\n  $z6 \u003d 1\n  goto B39\n}",
      "B38 {\n  $z6 \u003d 0\n}",
      "B39 {\n  $i10 \u003d $i9 + $z6\n  return\n}",
      "B40 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B40",
      "B1 --\u003e B2",
      "B1 --\u003e B40",
      "B2 --\u003e B3",
      "B2 --\u003e B40",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B16",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B10 --\u003e B15",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B12 --\u003e B15",
      "B13 --\u003e B14",
      "B13 --\u003e B16",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B8",
      "B16 --\u003e B17",
      "B16 --\u003e B19",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B20",
      "B20 --\u003e B21",
      "B20 --\u003e B25",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e [EXIT]",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e [EXIT]",
      "B25 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B28",
      "B27 --\u003e B28",
      "B28 --\u003e B30",
      "B29 --\u003e [EXIT]",
      "B30 --\u003e B31",
      "B30 --\u003e B32",
      "B31 --\u003e B33",
      "B32 --\u003e B33",
      "B33 --\u003e B34",
      "B33 --\u003e B35",
      "B34 --\u003e B36",
      "B35 --\u003e B36",
      "B36 --\u003e B37",
      "B36 --\u003e B38",
      "B37 --\u003e B39",
      "B38 --\u003e B39",
      "B39 --\u003e [EXIT]",
      "B40 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NumericEntityUnescaper#isSet(...1)",
        "body": "{\r\n    return options !\u003d null \u0026\u0026 options.contains(option);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.translate.OctalUnescaper",
    "methodName": "translate",
    "signature": "int translate(java.lang.CharSequence,int,java.io.Writer)",
    "visibility": "public",
    "body": "{\r\n    // how many characters left, ignoring the first \\\r\n    final int remaining \u003d input.length() - index - 1;\r\n    final StringBuilder builder \u003d new StringBuilder();\r\n    if (input.charAt(index) \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 remaining \u003e 0 \u0026\u0026 isOctalDigit(input.charAt(index + 1))) {\r\n        final int next \u003d index + 1;\r\n        final int next2 \u003d index + 2;\r\n        final int next3 \u003d index + 3;\r\n        // we know this is good as we checked it in the if block above\r\n        builder.append(input.charAt(next));\r\n        if (remaining \u003e 1 \u0026\u0026 isOctalDigit(input.charAt(next2))) {\r\n            builder.append(input.charAt(next2));\r\n            if (remaining \u003e 2 \u0026\u0026 isZeroToThree(input.charAt(next)) \u0026\u0026 isOctalDigit(input.charAt(next3))) {\r\n                builder.append(input.charAt(next3));\r\n            }\r\n        }\r\n        out.write(Integer.parseInt(builder.toString(), 8));\r\n        return 1 + builder.length();\r\n    }\r\n    return 0;\r\n}",
    "nodes": 11,
    "edges": 17,
    "cc": 8,
    "flowSummary": [
      "B0 : If($i19 !\u003d 92) → B1 | else → B10",
      "B1 : If(i3 \u003c\u003d 0) → B2 | else → B10",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B10",
      "B3 : If(i3 \u003c\u003d 1) → B4 | else → B9",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B9",
      "B5 : If(i3 \u003c\u003d 2) → B6 | else → B9",
      "B6 : If($z2 \u003d\u003d false) → B7 | else → B9",
      "B7 : If($z3 \u003d\u003d false) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  OctalUnescaper\n  CharSequence\n  i0 :\u003d @parameter1: int\n  Writer\n  $i1 \u003d r0.length()\n  $i2 \u003d $i1 - i0\n  i3 \u003d $i2 - 1\n  $r5 \u003d StringBuilder\n  new StringBuilder()\n  $c4 \u003d r0.charAt(i0)\n  $i19 \u003d (int) $c4\n  if ($i19 !\u003d 92) goto B1 else B10\n}",
      "B1 {\n  if (i3 \u003c\u003d 0) goto B2 else B10\n}",
      "B2 {\n  $i5 \u003d i0 + 1\n  $c6 \u003d r0.charAt($i5)\n  $z0 \u003d r2.isOctalDigit($c6)\n  if ($z0 \u003d\u003d false) goto B3 else B10\n}",
      "B3 {\n  i7 \u003d i0 + 1\n  i8 \u003d i0 + 2\n  i9 \u003d i0 + 3\n  $c10 \u003d r0.charAt(i7)\n  $r5.append($c10)\n  if (i3 \u003c\u003d 1) goto B4 else B9\n}",
      "B4 {\n  $c11 \u003d r0.charAt(i8)\n  $z1 \u003d r2.isOctalDigit($c11)\n  if ($z1 \u003d\u003d false) goto B5 else B9\n}",
      "B5 {\n  $c12 \u003d r0.charAt(i8)\n  $r5.append($c12)\n  if (i3 \u003c\u003d 2) goto B6 else B9\n}",
      "B6 {\n  $c13 \u003d r0.charAt(i7)\n  $z2 \u003d r2.isZeroToThree($c13)\n  if ($z2 \u003d\u003d false) goto B7 else B9\n}",
      "B7 {\n  $c14 \u003d r0.charAt(i9)\n  $z3 \u003d r2.isOctalDigit($c14)\n  if ($z3 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $c15 \u003d r0.charAt(i9)\n  $r5.append($c15)\n}",
      "B9 {\n  $r4 \u003d $r5.toString()\n  $i16 \u003d Integer.parseInt($r4, 8)\n  r3.write($i16)\n  $i17 \u003d $r5.length()\n  $i18 \u003d 1 + $i17\n  return\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B10",
      "B1 --\u003e B2",
      "B1 --\u003e B10",
      "B2 --\u003e B3",
      "B2 --\u003e B10",
      "B3 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "OctalUnescaper#isOctalDigit(...1)",
        "body": "{\r\n    return ch \u003e\u003d \u00270\u0027 \u0026\u0026 ch \u003c\u003d \u00277\u0027;\r\n}"
      },
      {
        "name": "OctalUnescaper#isZeroToThree(...1)",
        "body": "{\r\n    return ch \u003e\u003d \u00270\u0027 \u0026\u0026 ch \u003c\u003d \u00273\u0027;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.translate.UnicodeEscaper",
    "methodName": "translate",
    "signature": "boolean translate(int,java.io.Writer)",
    "visibility": "public",
    "body": "{\r\n    if (between) {\r\n        if (codePoint \u003c below || codePoint \u003e above) {\r\n            return false;\r\n        }\r\n    } else if (codePoint \u003e\u003d below \u0026\u0026 codePoint \u003c\u003d above) {\r\n        return false;\r\n    }\r\n    // TODO: Handle potential + sign per various Unicode escape implementations\r\n    if (codePoint \u003e 0xffff) {\r\n        out.write(toUtf16Escape(codePoint));\r\n    } else {\r\n        out.write(\"\\\\u\");\r\n        out.write(HEX_DIGITS[codePoint \u003e\u003e 12 \u0026 15]);\r\n        out.write(HEX_DIGITS[codePoint \u003e\u003e 8 \u0026 15]);\r\n        out.write(HEX_DIGITS[codePoint \u003e\u003e 4 \u0026 15]);\r\n        out.write(HEX_DIGITS[codePoint \u0026 15]);\r\n    }\r\n    return true;\r\n}",
    "nodes": 11,
    "edges": 14,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B4",
      "B1 : If(i0 \u003c $i14) → B2 | else → B3",
      "B2 : If(i0 \u003c\u003d $i15) → B3 | else → B7",
      "B4 : If(i0 \u003c $i1) → B5 | else → B7",
      "B5 : If(i0 \u003e $i13) → B6 | else → B7",
      "B7 : If(i0 \u003c\u003d $i17) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  UnicodeEscaper\n  i0 :\u003d @parameter0: int\n  Writer\n  $z0 \u003d UnicodeEscaper: boolean between\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B4\n}",
      "B1 {\n  $i14 \u003d UnicodeEscaper: int below\u003e\n  if (i0 \u003c $i14) goto B2 else B3\n}",
      "B2 {\n  $i15 \u003d UnicodeEscaper: int above\u003e\n  if (i0 \u003c\u003d $i15) goto B3 else B7\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i1 \u003d UnicodeEscaper: int below\u003e\n  if (i0 \u003c $i1) goto B5 else B7\n}",
      "B5 {\n  $i13 \u003d UnicodeEscaper: int above\u003e\n  if (i0 \u003e $i13) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $i17 \u003d (int) 65535\n  if (i0 \u003c\u003d $i17) goto B8 else B9\n}",
      "B8 {\n  $r6 \u003d r0.toUtf16Escape(i0)\n  r1.write($r6)\n  goto B10\n}",
      "B9 {\n  r1.write(\"\\\\u\")\n  $r2 \u003d UnicodeEscaper: char[] HEX_DIGITS\u003e\n  $i2 \u003d i0 \u003e\u003e 12\n  $i3 \u003d $i2 \u0026 15\n  $c4 \u003d $r2[$i3]\n  $i18 \u003d (int) $c4\n  r1.write($i18)\n  $r3 \u003d UnicodeEscaper: char[] HEX_DIGITS\u003e\n  $i5 \u003d i0 \u003e\u003e 8\n  $i6 \u003d $i5 \u0026 15\n  $c7 \u003d $r3[$i6]\n  $i19 \u003d (int) $c7\n  r1.write($i19)\n  $r4 \u003d UnicodeEscaper: char[] HEX_DIGITS\u003e\n  $i8 \u003d i0 \u003e\u003e 4\n  $i9 \u003d $i8 \u0026 15\n  $c10 \u003d $r4[$i9]\n  $i20 \u003d (int) $c10\n  r1.write($i20)\n  $r5 \u003d UnicodeEscaper: char[] HEX_DIGITS\u003e\n  $i11 \u003d i0 \u0026 15\n  $c12 \u003d $r5[$i11]\n  $i21 \u003d (int) $c12\n  r1.write($i21)\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "UnicodeEscaper#toUtf16Escape(...1)",
        "body": "{\r\n    return \"\\\\u\" + hex(codePoint);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.translate.UnicodeUnescaper",
    "methodName": "translate",
    "signature": "int translate(java.lang.CharSequence,int,java.io.Writer)",
    "visibility": "public",
    "body": "{\r\n    if (input.charAt(index) \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 index + 1 \u003c input.length() \u0026\u0026 input.charAt(index + 1) \u003d\u003d \u0027u\u0027) {\r\n        // consume optional additional \u0027u\u0027 chars\r\n        int i \u003d 2;\r\n        while (index + i \u003c input.length() \u0026\u0026 input.charAt(index + i) \u003d\u003d \u0027u\u0027) {\r\n            i++;\r\n        }\r\n        if (index + i \u003c input.length() \u0026\u0026 input.charAt(index + i) \u003d\u003d \u0027+\u0027) {\r\n            i++;\r\n        }\r\n        if (index + i + 4 \u003c\u003d input.length()) {\r\n            // Get 4 hex digits\r\n            final CharSequence unicode \u003d input.subSequence(index + i, index + i + 4);\r\n            try {\r\n                final int value \u003d Integer.parseInt(unicode.toString(), 16);\r\n                out.write((char) value);\r\n            } catch (final NumberFormatException nfe) {\r\n                throw new IllegalArgumentException(\"Unable to parse unicode value: \" + unicode, nfe);\r\n            }\r\n            return i + 4;\r\n        }\r\n        throw new IllegalArgumentException(\"Less than 4 hex digits in unicode value: \u0027\" + input.subSequence(index, input.length()) + \"\u0027 due to end of CharSequence\");\r\n    }\r\n    return 0;\r\n}",
    "nodes": 16,
    "edges": 20,
    "cc": 6,
    "flowSummary": [
      "B0 : If($i25 !\u003d 92) → B1 | else → B15",
      "B1 : If($i3 \u003e\u003d $i2) → B2 | else → B15",
      "B2 : If($i26 !\u003d 117) → B3 | else → B15",
      "B4 : If($i7 \u003e\u003d $i6) → B5 | else → B7",
      "B5 : If($i27 !\u003d 117) → B6 | else → B7",
      "B7 : If($i9 \u003e\u003d $i8) → B8 | else → B10",
      "B8 : If($i28 !\u003d 43) → B9 | else → B10",
      "B10 : If($i22 \u003e $i23) → B11 | else → B14"
    ],
    "blockList": [
      "B0 {\n  UnicodeUnescaper\n  CharSequence\n  i0 :\u003d @parameter1: int\n  Writer\n  $c1 \u003d r0.charAt(i0)\n  $i25 \u003d (int) $c1\n  if ($i25 !\u003d 92) goto B1 else B15\n}",
      "B1 {\n  $i3 \u003d i0 + 1\n  $i2 \u003d r0.length()\n  if ($i3 \u003e\u003d $i2) goto B2 else B15\n}",
      "B2 {\n  $i4 \u003d i0 + 1\n  $c5 \u003d r0.charAt($i4)\n  $i26 \u003d (int) $c5\n  if ($i26 !\u003d 117) goto B3 else B15\n}",
      "B3 {\n  i20 \u003d 2\n}",
      "B4 {\n  $i7 \u003d i0 + i20\n  $i6 \u003d r0.length()\n  if ($i7 \u003e\u003d $i6) goto B5 else B7\n}",
      "B5 {\n  $i18 \u003d i0 + i20\n  $c19 \u003d r0.charAt($i18)\n  $i27 \u003d (int) $c19\n  if ($i27 !\u003d 117) goto B6 else B7\n}",
      "B6 {\n  i20 \u003d i20 + 1\n  goto B4\n}",
      "B7 {\n  $i9 \u003d i0 + i20\n  $i8 \u003d r0.length()\n  if ($i9 \u003e\u003d $i8) goto B8 else B10\n}",
      "B8 {\n  $i16 \u003d i0 + i20\n  $c17 \u003d r0.charAt($i16)\n  $i28 \u003d (int) $c17\n  if ($i28 !\u003d 43) goto B9 else B10\n}",
      "B9 {\n  i20 \u003d i20 + 1\n}",
      "B10 {\n  $i21 \u003d i0 + i20\n  $i22 \u003d $i21 + 4\n  $i23 \u003d r0.length()\n  if ($i22 \u003e $i23) goto B11 else B14\n}",
      "B11 {\n  $i13 \u003d i0 + i20\n  $i11 \u003d i0 + i20\n  $i12 \u003d $i11 + 4\n  r8 \u003d r0.subSequence($i13, $i12)\n  $r9 \u003d r8.toString()\n  i24 \u003d Integer.parseInt($r9, 16)\n  $c14 \u003d (char) i24\n  $i29 \u003d (int) $c14\n  r10.write($i29)\n  goto B13\n}",
      "B12 {\n  $r11 :\u003d @caughtexception\n  $r19 \u003d IllegalArgumentException\n  $r18 \u003d StringBuilder\n  new StringBuilder()\n  $r14 \u003d $r18.append(\"Unable to parse unicode value: \")\n  $r15 \u003d $r14.append(r8)\n  $r16 \u003d $r15.toString()\n  new IllegalArgumentException($r16, $r11)\n  throw $r19\n}",
      "B13 {\n  $i15 \u003d i20 + 4\n  return\n}",
      "B14 {\n  $r21 \u003d IllegalArgumentException\n  $r20 \u003d StringBuilder\n  new StringBuilder()\n  $r4 \u003d $r20.append(\"Less than 4 hex digits in unicode value: \\\u0027\")\n  $i10 \u003d r0.length()\n  $r3 \u003d r0.subSequence(i0, $i10)\n  $r5 \u003d $r4.append($r3)\n  $r6 \u003d $r5.append(\"\\\u0027 due to end of CharSequence\")\n  $r7 \u003d $r6.toString()\n  new IllegalArgumentException($r7)\n  throw $r21\n}",
      "B15 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B15",
      "B1 --\u003e B2",
      "B1 --\u003e B15",
      "B2 --\u003e B3",
      "B2 --\u003e B15",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B4",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.translate.UnicodeUnpairedSurrogateRemover",
    "methodName": "translate",
    "signature": "boolean translate(int,java.io.Writer)",
    "visibility": "public",
    "body": "{\r\n    // true: It\u0027s a surrogate. Write nothing and say we\u0027ve translated.\r\n    return codePoint \u003e\u003d Character.MIN_SURROGATE \u0026\u0026 codePoint \u003c\u003d Character.MAX_SURROGATE;\r\n    // It\u0027s not a surrogate. Don\u0027t translate it.\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003c $i2) → B1 | else → B3",
      "B1 : If(i0 \u003e $i4) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  UnicodeUnpairedSurrogateRemover\n  i0 :\u003d @parameter0: int\n  Writer\n  $i2 \u003d (int) 55296\n  if (i0 \u003c $i2) goto B1 else B3\n}",
      "B1 {\n  $i4 \u003d (int) 57343\n  if (i0 \u003e $i4) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.WordUtils",
    "methodName": "capitalize",
    "signature": "java.lang.String capitalize(java.lang.String,char[])",
    "visibility": "public",
    "body": "{\r\n    final int delimLen \u003d delimiters \u003d\u003d null ? -1 : delimiters.length;\r\n    if (StringUtils.isEmpty(str) || delimLen \u003d\u003d 0) {\r\n        return str;\r\n    }\r\n    final char[] buffer \u003d str.toCharArray();\r\n    boolean capitalizeNext \u003d true;\r\n    for (int i \u003d 0; i \u003c buffer.length; i++) {\r\n        final char ch \u003d buffer[i];\r\n        if (isDelimiter(ch, delimiters)) {\r\n            capitalizeNext \u003d true;\r\n        } else if (capitalizeNext) {\r\n            buffer[i] \u003d Character.toTitleCase(ch);\r\n            capitalizeNext \u003d false;\r\n        }\r\n    }\r\n    return new String(buffer);\r\n}",
    "nodes": 14,
    "edges": 18,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If($z0 !\u003d 0) → B4 | else → B5",
      "B4 : If($i3 !\u003d 0) → B5 | else → B6",
      "B7 : If(i4 \u003e\u003d $i0) → B8 | else → B13",
      "B8 : If($z1 \u003d\u003d false) → B9 | else → B10",
      "B10 : If(z2 \u003d\u003d false) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  String\n  r0 :\u003d @parameter1: char[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i6 \u003d (int) -1\n  $i3 \u003d $i6\n  goto B3\n}",
      "B2 {\n  $i3 \u003d lengthof r0\n}",
      "B3 {\n  $z0 \u003d StringUtils.isEmpty(r1)\n  if ($z0 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  if ($i3 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  r2 \u003d r1.toCharArray()\n  z2 \u003d 1\n  i4 \u003d 0\n}",
      "B7 {\n  $i0 \u003d lengthof r2\n  if (i4 \u003e\u003d $i0) goto B8 else B13\n}",
      "B8 {\n  c1 \u003d r2[i4]\n  $z1 \u003d WordUtils.isDelimiter(c1, r0)\n  if ($z1 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  z2 \u003d 1\n  goto B12\n}",
      "B10 {\n  if (z2 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  $c2 \u003d Character.toTitleCase(c1)\n  r2[i4] \u003d $c2\n  z2 \u003d 0\n}",
      "B12 {\n  i4 \u003d i4 + 1\n  goto B7\n}",
      "B13 {\n  $r4 \u003d String\n  new String(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B13",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B7",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "WordUtils#isDelimiter(...2)",
        "body": "{\r\n    return delimiters \u003d\u003d null ? Character.isWhitespace(ch) : ArrayUtils.contains(delimiters, ch);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.WordUtils",
    "methodName": "capitalizeFully",
    "signature": "java.lang.String capitalizeFully(java.lang.String,char[])",
    "visibility": "public",
    "body": "{\r\n    final int delimLen \u003d delimiters \u003d\u003d null ? -1 : delimiters.length;\r\n    if (StringUtils.isEmpty(str) || delimLen \u003d\u003d 0) {\r\n        return str;\r\n    }\r\n    return capitalize(str.toLowerCase(), delimiters);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If($z0 !\u003d 0) → B4 | else → B5",
      "B4 : If($i0 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  String\n  r0 :\u003d @parameter1: char[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i2 \u003d (int) -1\n  $i0 \u003d $i2\n  goto B3\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n}",
      "B3 {\n  $z0 \u003d StringUtils.isEmpty(r1)\n  if ($z0 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  if ($i0 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r2 \u003d r1.toLowerCase()\n  $r3 \u003d WordUtils.capitalize($r2, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "WordUtils#capitalize(...2)",
        "body": "{\r\n    final int delimLen \u003d delimiters \u003d\u003d null ? -1 : delimiters.length;\r\n    if (StringUtils.isEmpty(str) || delimLen \u003d\u003d 0) {\r\n        return str;\r\n    }\r\n    final char[] buffer \u003d str.toCharArray();\r\n    boolean capitalizeNext \u003d true;\r\n    for (int i \u003d 0; i \u003c buffer.length; i++) {\r\n        final char ch \u003d buffer[i];\r\n        if (isDelimiter(ch, delimiters)) {\r\n            capitalizeNext \u003d true;\r\n        } else if (capitalizeNext) {\r\n            buffer[i] \u003d Character.toTitleCase(ch);\r\n            capitalizeNext \u003d false;\r\n        }\r\n    }\r\n    return new String(buffer);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.WordUtils",
    "methodName": "containsAllWords",
    "signature": "boolean containsAllWords(java.lang.CharSequence,java.lang.CharSequence[])",
    "visibility": "public",
    "body": "{\r\n    if (StringUtils.isEmpty(word) || ArrayUtils.isEmpty(words)) {\r\n        return false;\r\n    }\r\n    for (final CharSequence w : words) {\r\n        if (StringUtils.isBlank(w)) {\r\n            return false;\r\n        }\r\n        final Pattern p \u003d Pattern.compile(\".*\\\\b\" + w + \"\\\\b.*\");\r\n        if (!p.matcher(word).matches()) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B4 : If(i1 \u003e\u003d i0) → B5 | else → B10",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B7",
      "B7 : If($z3 !\u003d 0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence[]\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d ArrayUtils.isEmpty(r1)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  i0 \u003d lengthof r1\n  i1 \u003d 0\n}",
      "B4 {\n  if (i1 \u003e\u003d i0) goto B5 else B10\n}",
      "B5 {\n  r2 \u003d r1[i1]\n  $z2 \u003d StringUtils.isBlank(r2)\n  if ($z2 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  $r4 \u003d $r3.append(\".*\\\\b\")\n  $r5 \u003d $r4.append(r2)\n  $r6 \u003d $r5.append(\"\\\\b.*\")\n  $r7 \u003d $r6.toString()\n  r8 \u003d Pattern.compile($r7)\n  $r9 \u003d r8.matcher(r0)\n  $z3 \u003d $r9.matches()\n  if ($z3 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  return\n}",
      "B9 {\n  i1 \u003d i1 + 1\n  goto B4\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B10",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B4",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.WordUtils",
    "methodName": "initials",
    "signature": "java.lang.String initials(java.lang.String,char[])",
    "visibility": "public",
    "body": "{\r\n    if (StringUtils.isEmpty(str)) {\r\n        return str;\r\n    }\r\n    if (delimiters !\u003d null \u0026\u0026 delimiters.length \u003d\u003d 0) {\r\n        return StringUtils.EMPTY;\r\n    }\r\n    final int strLen \u003d str.length();\r\n    final char[] buf \u003d new char[strLen / 2 + 1];\r\n    int count \u003d 0;\r\n    boolean lastWasGap \u003d true;\r\n    for (int i \u003d 0; i \u003c strLen; i++) {\r\n        final char ch \u003d str.charAt(i);\r\n        if (isDelimiter(ch, delimiters)) {\r\n            lastWasGap \u003d true;\r\n        } else if (lastWasGap) {\r\n            buf[count++] \u003d ch;\r\n            lastWasGap \u003d false;\r\n        } else {\r\n            // ignore ch\r\n            continue;\r\n        }\r\n    }\r\n    return new String(buf, 0, count);\r\n}",
    "nodes": 13,
    "edges": 16,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(r1 \u003d\u003d null) → B3 | else → B5",
      "B3 : If($i4 !\u003d 0) → B4 | else → B5",
      "B6 : If(i7 \u003e\u003d $i5) → B7 | else → B12",
      "B7 : If($z1 \u003d\u003d false) → B8 | else → B9",
      "B9 : If(z2 \u003d\u003d false) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  String\n  r1 :\u003d @parameter1: char[]\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 \u003d\u003d null) goto B3 else B5\n}",
      "B3 {\n  $i4 \u003d lengthof r1\n  if ($i4 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $i5 \u003d r0.length()\n  $i0 \u003d $i5 / 2\n  $i1 \u003d $i0 + 1\n  $r3 \u003d newarray (char)[$i1]\n  i6 \u003d 0\n  z2 \u003d 1\n  i7 \u003d 0\n}",
      "B6 {\n  if (i7 \u003e\u003d $i5) goto B7 else B12\n}",
      "B7 {\n  c2 \u003d r0.charAt(i7)\n  $z1 \u003d WordUtils.isDelimiter(c2, r1)\n  if ($z1 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  z2 \u003d 1\n  goto B11\n}",
      "B9 {\n  if (z2 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  $i3 \u003d i6\n  i6 \u003d i6 + 1\n  $r3[$i3] \u003d c2\n  z2 \u003d 0\n}",
      "B11 {\n  i7 \u003d i7 + 1\n  goto B6\n}",
      "B12 {\n  $r2 \u003d String\n  new String($r3, 0, i6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B12",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B6",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "WordUtils#isDelimiter(...2)",
        "body": "{\r\n    return delimiters \u003d\u003d null ? Character.isWhitespace(ch) : ArrayUtils.contains(delimiters, ch);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.WordUtils",
    "methodName": "swapCase",
    "signature": "java.lang.String swapCase(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (StringUtils.isEmpty(str)) {\r\n        return str;\r\n    }\r\n    final char[] buffer \u003d str.toCharArray();\r\n    boolean whitespace \u003d true;\r\n    for (int i \u003d 0; i \u003c buffer.length; i++) {\r\n        final char ch \u003d buffer[i];\r\n        if (Character.isUpperCase(ch) || Character.isTitleCase(ch)) {\r\n            buffer[i] \u003d Character.toLowerCase(ch);\r\n            whitespace \u003d false;\r\n        } else if (Character.isLowerCase(ch)) {\r\n            if (whitespace) {\r\n                buffer[i] \u003d Character.toTitleCase(ch);\r\n                whitespace \u003d false;\r\n            } else {\r\n                buffer[i] \u003d Character.toUpperCase(ch);\r\n            }\r\n        } else {\r\n            whitespace \u003d Character.isWhitespace(ch);\r\n        }\r\n    }\r\n    return new String(buffer);\r\n}",
    "nodes": 14,
    "edges": 18,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If(i5 \u003e\u003d $i0) → B4 | else → B13",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B7",
      "B7 : If($z3 \u003d\u003d false) → B8 | else → B11",
      "B8 : If(z4 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  String\n  $z0 \u003d StringUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r1 \u003d r0.toCharArray()\n  z4 \u003d 1\n  i5 \u003d 0\n}",
      "B3 {\n  $i0 \u003d lengthof r1\n  if (i5 \u003e\u003d $i0) goto B4 else B13\n}",
      "B4 {\n  c1 \u003d r1[i5]\n  $z1 \u003d Character.isUpperCase(c1)\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $z2 \u003d Character.isTitleCase(c1)\n  if ($z2 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $c2 \u003d Character.toLowerCase(c1)\n  r1[i5] \u003d $c2\n  z4 \u003d 0\n  goto B12\n}",
      "B7 {\n  $z3 \u003d Character.isLowerCase(c1)\n  if ($z3 \u003d\u003d false) goto B8 else B11\n}",
      "B8 {\n  if (z4 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $c4 \u003d Character.toTitleCase(c1)\n  r1[i5] \u003d $c4\n  z4 \u003d 0\n  goto B12\n}",
      "B10 {\n  $c3 \u003d Character.toUpperCase(c1)\n  r1[i5] \u003d $c3\n  goto B12\n}",
      "B11 {\n  z4 \u003d Character.isWhitespace(c1)\n}",
      "B12 {\n  i5 \u003d i5 + 1\n  goto B3\n}",
      "B13 {\n  $r2 \u003d String\n  new String(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B13",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B12",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B3",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.text.WordUtils",
    "methodName": "uncapitalize",
    "signature": "java.lang.String uncapitalize(java.lang.String,char[])",
    "visibility": "public",
    "body": "{\r\n    final int delimLen \u003d delimiters \u003d\u003d null ? -1 : delimiters.length;\r\n    if (StringUtils.isEmpty(str) || delimLen \u003d\u003d 0) {\r\n        return str;\r\n    }\r\n    final char[] buffer \u003d str.toCharArray();\r\n    boolean uncapitalizeNext \u003d true;\r\n    for (int i \u003d 0; i \u003c buffer.length; i++) {\r\n        final char ch \u003d buffer[i];\r\n        if (isDelimiter(ch, delimiters)) {\r\n            uncapitalizeNext \u003d true;\r\n        } else if (uncapitalizeNext) {\r\n            buffer[i] \u003d Character.toLowerCase(ch);\r\n            uncapitalizeNext \u003d false;\r\n        }\r\n    }\r\n    return new String(buffer);\r\n}",
    "nodes": 14,
    "edges": 18,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If($z0 !\u003d 0) → B4 | else → B5",
      "B4 : If($i3 !\u003d 0) → B5 | else → B6",
      "B7 : If(i4 \u003e\u003d $i0) → B8 | else → B13",
      "B8 : If($z1 \u003d\u003d false) → B9 | else → B10",
      "B10 : If(z2 \u003d\u003d false) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  String\n  r0 :\u003d @parameter1: char[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i6 \u003d (int) -1\n  $i3 \u003d $i6\n  goto B3\n}",
      "B2 {\n  $i3 \u003d lengthof r0\n}",
      "B3 {\n  $z0 \u003d StringUtils.isEmpty(r1)\n  if ($z0 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  if ($i3 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  r2 \u003d r1.toCharArray()\n  z2 \u003d 1\n  i4 \u003d 0\n}",
      "B7 {\n  $i0 \u003d lengthof r2\n  if (i4 \u003e\u003d $i0) goto B8 else B13\n}",
      "B8 {\n  c1 \u003d r2[i4]\n  $z1 \u003d WordUtils.isDelimiter(c1, r0)\n  if ($z1 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  z2 \u003d 1\n  goto B12\n}",
      "B10 {\n  if (z2 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  $c2 \u003d Character.toLowerCase(c1)\n  r2[i4] \u003d $c2\n  z2 \u003d 0\n}",
      "B12 {\n  i4 \u003d i4 + 1\n  goto B7\n}",
      "B13 {\n  $r4 \u003d String\n  new String(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B13",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B7",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "WordUtils#isDelimiter(...2)",
        "body": "{\r\n    return delimiters \u003d\u003d null ? Character.isWhitespace(ch) : ArrayUtils.contains(delimiters, ch);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.text.WordUtils",
    "methodName": "wrap",
    "signature": "java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (str \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (newLineStr \u003d\u003d null) {\r\n        newLineStr \u003d System.lineSeparator();\r\n    }\r\n    if (wrapLength \u003c 1) {\r\n        wrapLength \u003d 1;\r\n    }\r\n    if (StringUtils.isBlank(wrapOn)) {\r\n        wrapOn \u003d \" \";\r\n    }\r\n    final Pattern patternToWrapOn \u003d Pattern.compile(wrapOn);\r\n    final int inputLineLength \u003d str.length();\r\n    int offset \u003d 0;\r\n    final StringBuilder wrappedLine \u003d new StringBuilder(inputLineLength + 32);\r\n    while (offset \u003c inputLineLength) {\r\n        int spaceToWrapAt \u003d -1;\r\n        Matcher matcher \u003d patternToWrapOn.matcher(str.substring(offset, Math.min((int) Math.min(Integer.MAX_VALUE, offset + wrapLength + 1L), inputLineLength)));\r\n        if (matcher.find()) {\r\n            if (matcher.start() \u003d\u003d 0) {\r\n                offset +\u003d matcher.end();\r\n                continue;\r\n            }\r\n            spaceToWrapAt \u003d matcher.start() + offset;\r\n        }\r\n        // only last line without leading spaces is left\r\n        if (inputLineLength - offset \u003c\u003d wrapLength) {\r\n            break;\r\n        }\r\n        while (matcher.find()) {\r\n            spaceToWrapAt \u003d matcher.start() + offset;\r\n        }\r\n        if (spaceToWrapAt \u003e\u003d offset) {\r\n            // normal case\r\n            wrappedLine.append(str, offset, spaceToWrapAt);\r\n            wrappedLine.append(newLineStr);\r\n            offset \u003d spaceToWrapAt + 1;\r\n        } else // really long word or URL\r\n        if (wrapLongWords) {\r\n            // wrap really long word one line at a time\r\n            wrappedLine.append(str, offset, wrapLength + offset);\r\n            wrappedLine.append(newLineStr);\r\n            offset +\u003d wrapLength;\r\n        } else {\r\n            // do not wrap really long word, just extend beyond limit\r\n            matcher \u003d patternToWrapOn.matcher(str.substring(offset + wrapLength));\r\n            if (matcher.find()) {\r\n                spaceToWrapAt \u003d matcher.start() + offset + wrapLength;\r\n            }\r\n            if (spaceToWrapAt \u003e\u003d 0) {\r\n                wrappedLine.append(str, offset, spaceToWrapAt);\r\n                wrappedLine.append(newLineStr);\r\n                offset \u003d spaceToWrapAt + 1;\r\n            } else {\r\n                wrappedLine.append(str, offset, str.length());\r\n                offset \u003d inputLineLength;\r\n            }\r\n        }\r\n    }\r\n    // Whatever is left in line is short enough to just pass through\r\n    wrappedLine.append(str, offset, str.length());\r\n    return wrappedLine.toString();\r\n}",
    "nodes": 29,
    "edges": 40,
    "cc": 13,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r6 !\u003d null) → B3 | else → B4",
      "B4 : If(i19 \u003e\u003d 1) → B5 | else → B6",
      "B6 : If($z0 \u003d\u003d false) → B7 | else → B8",
      "B9 : If(i20 \u003e\u003d $i18) → B10 | else → B28",
      "B10 : If($z1 \u003d\u003d false) → B11 | else → B14",
      "B11 : If($i15 !\u003d 0) → B12 | else → B13",
      "B14 : If($i8 \u003e i19) → B15 | else → B16",
      "B16 : If($z2 \u003d\u003d false) → B17 | else → B18",
      "B18 : If(i21 \u003c i20) → B19 | else → B20",
      "B20 : If(z3 \u003d\u003d false) → B21 | else → B22",
      "B22 : If($z4 \u003d\u003d false) → B23 | else → B24",
      "B24 : If(i21 \u003c 0) → B25 | else → B26"
    ],
    "blockList": [
      "B0 {\n  String\n  i19 :\u003d @parameter1: int\n  String\n  z3 :\u003d @parameter3: boolean\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r6 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  r6 \u003d System.lineSeparator()\n}",
      "B4 {\n  if (i19 \u003e\u003d 1) goto B5 else B6\n}",
      "B5 {\n  i19 \u003d 1\n}",
      "B6 {\n  $z0 \u003d StringUtils.isBlank(r7)\n  if ($z0 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  r7 \u003d \" \"\n}",
      "B8 {\n  $r5 \u003d Pattern.compile(r7)\n  $i18 \u003d r0.length()\n  i20 \u003d 0\n  $r10 \u003d StringBuilder\n  $i0 \u003d $i18 + 32\n  new StringBuilder($i0)\n}",
      "B9 {\n  if (i20 \u003e\u003d $i18) goto B10 else B28\n}",
      "B10 {\n  $i23 \u003d (int) -1\n  i21 \u003d $i23\n  $i2 \u003d i20 + i19\n  $l3 \u003d (long) $i2\n  $l4 \u003d $l3 + 1L\n  $l5 \u003d Math.min(2147483647L, $l4)\n  $i6 \u003d (int) $l5\n  $i7 \u003d Math.min($i6, $i18)\n  $r3 \u003d r0.substring(i20, $i7)\n  r8 \u003d $r5.matcher($r3)\n  $z1 \u003d r8.find()\n  if ($z1 \u003d\u003d false) goto B11 else B14\n}",
      "B11 {\n  $i15 \u003d r8.start()\n  if ($i15 !\u003d 0) goto B12 else B13\n}",
      "B12 {\n  $i17 \u003d r8.end()\n  i20 \u003d i20 + $i17\n  goto B9\n}",
      "B13 {\n  $i16 \u003d r8.start()\n  i21 \u003d $i16 + i20\n}",
      "B14 {\n  $i8 \u003d $i18 - i20\n  if ($i8 \u003e i19) goto B15 else B16\n}",
      "B15 {\n  goto B28\n}",
      "B16 {\n  $z2 \u003d r8.find()\n  if ($z2 \u003d\u003d false) goto B17 else B18\n}",
      "B17 {\n  $i14 \u003d r8.start()\n  i21 \u003d $i14 + i20\n  goto B16\n}",
      "B18 {\n  if (i21 \u003c i20) goto B19 else B20\n}",
      "B19 {\n  $r10.append(r0, i20, i21)\n  $r10.append(r6)\n  i20 \u003d i21 + 1\n  goto B27\n}",
      "B20 {\n  if (z3 \u003d\u003d false) goto B21 else B22\n}",
      "B21 {\n  $i13 \u003d i19 + i20\n  $r10.append(r0, i20, $i13)\n  $r10.append(r6)\n  i20 \u003d i20 + i19\n  goto B27\n}",
      "B22 {\n  $i9 \u003d i20 + i19\n  $r4 \u003d r0.substring($i9)\n  r9 \u003d $r5.matcher($r4)\n  $z4 \u003d r9.find()\n  if ($z4 \u003d\u003d false) goto B23 else B24\n}",
      "B23 {\n  $i11 \u003d r9.start()\n  $i12 \u003d $i11 + i20\n  i21 \u003d $i12 + i19\n}",
      "B24 {\n  if (i21 \u003c 0) goto B25 else B26\n}",
      "B25 {\n  $r10.append(r0, i20, i21)\n  $r10.append(r6)\n  i20 \u003d i21 + 1\n  goto B27\n}",
      "B26 {\n  $i10 \u003d r0.length()\n  $r10.append(r0, i20, $i10)\n  i20 \u003d $i18\n}",
      "B27 {\n  goto B9\n}",
      "B28 {\n  $i1 \u003d r0.length()\n  $r10.append(r0, i20, $i1)\n  $r2 \u003d $r10.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B28",
      "B10 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B9",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B28",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B16",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B27",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B27",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B24",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B27",
      "B27 --\u003e B9",
      "B28 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ThreadUtils",
    "methodName": "findThreadById",
    "signature": "java.lang.Thread findThreadById(long)",
    "visibility": "public",
    "body": "{\r\n    if (threadId \u003c\u003d 0) {\r\n        throw new IllegalArgumentException(\"The thread id must be greater than zero\");\r\n    }\r\n    final Collection\u003cThread\u003e result \u003d findThreads((Predicate\u003cThread\u003e) t -\u003e t !\u003d null \u0026\u0026 t.getId() \u003d\u003d threadId);\r\n    return result.isEmpty() ? null : result.iterator().next();\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003e 0) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  l0 :\u003d @parameter0: long\n  $b1 \u003d l0 cmp 0L\n  $i2 \u003d (int) $b1\n  if ($i2 \u003e 0) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"The thread id must be greater than zero\")\n  throw $r6\n}",
      "B2 {\n  $r0 \u003d ThreadUtils$lambda_findThreadById_1__176.bootstrap$(l0)\n  r1 \u003d ThreadUtils.findThreads($r0)\n  $z0 \u003d r1.isEmpty()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d null\n  goto B5\n}",
      "B4 {\n  $r2 \u003d r1.iterator()\n  $r3 \u003d $r2.next()\n  $r5 \u003d Thread) $r3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ThreadUtils#findThreads(...1)",
        "body": "{\r\n    return findThreads(getSystemThreadGroup(), true, predicate);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ThreadUtils",
    "methodName": "findThreadById",
    "signature": "java.lang.Thread findThreadById(long,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(threadGroupName, \"threadGroupName\");\r\n    final Thread thread \u003d findThreadById(threadId);\r\n    if (thread !\u003d null \u0026\u0026 thread.getThreadGroup() !\u003d null \u0026\u0026 thread.getThreadGroup().getName().equals(threadGroupName)) {\r\n        return thread;\r\n    }\r\n    return null;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B4",
      "B1 : If($r2 \u003d\u003d null) → B2 | else → B4",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  l0 :\u003d @parameter0: long\n  String\n  Objects.requireNonNull(r0, \"threadGroupName\")\n  r1 \u003d ThreadUtils.findThreadById(l0)\n  if (r1 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r2 \u003d r1.getThreadGroup()\n  if ($r2 \u003d\u003d null) goto B2 else B4\n}",
      "B2 {\n  $r3 \u003d r1.getThreadGroup()\n  $r4 \u003d $r3.getName()\n  $z0 \u003d $r4.equals(r0)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ThreadUtils#findThreadById(...1)",
        "body": "{\r\n    if (threadId \u003c\u003d 0) {\r\n        throw new IllegalArgumentException(\"The thread id must be greater than zero\");\r\n    }\r\n    final Collection\u003cThread\u003e result \u003d findThreads((Predicate\u003cThread\u003e) t -\u003e t !\u003d null \u0026\u0026 t.getId() \u003d\u003d threadId);\r\n    return result.isEmpty() ? null : result.iterator().next();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ThreadUtils",
    "methodName": "findThreadById",
    "signature": "java.lang.Thread findThreadById(long,java.lang.ThreadGroup)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(threadGroup, \"threadGroup\");\r\n    final Thread thread \u003d findThreadById(threadId);\r\n    if (thread !\u003d null \u0026\u0026 threadGroup.equals(thread.getThreadGroup())) {\r\n        return thread;\r\n    }\r\n    return null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  l0 :\u003d @parameter0: long\n  ThreadGroup\n  Objects.requireNonNull(r0, \"threadGroup\")\n  r1 \u003d ThreadUtils.findThreadById(l0)\n  if (r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d r1.getThreadGroup()\n  $z0 \u003d r0.equals($r2)\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ThreadUtils#findThreadById(...1)",
        "body": "{\r\n    if (threadId \u003c\u003d 0) {\r\n        throw new IllegalArgumentException(\"The thread id must be greater than zero\");\r\n    }\r\n    final Collection\u003cThread\u003e result \u003d findThreads((Predicate\u003cThread\u003e) t -\u003e t !\u003d null \u0026\u0026 t.getId() \u003d\u003d threadId);\r\n    return result.isEmpty() ? null : result.iterator().next();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.ThreadUtils",
    "methodName": "findThreadGroups",
    "signature": "java.util.Collection findThreadGroups(java.lang.ThreadGroup,boolean,java.util.function.Predicate)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(threadGroup, \"threadGroup\");\r\n    Objects.requireNonNull(predicate, \"predicate\");\r\n    int count \u003d threadGroup.activeGroupCount();\r\n    ThreadGroup[] threadGroups;\r\n    do {\r\n        //slightly grow the array size\r\n        threadGroups \u003d new ThreadGroup[count + count / 2 + 1];\r\n        count \u003d threadGroup.enumerate(threadGroups, recurse);\r\n        //return value of enumerate() must be strictly less than the array size according to Javadoc\r\n    } while (count \u003e\u003d threadGroups.length);\r\n    return Collections.unmodifiableCollection(Stream.of(threadGroups).limit(count).filter(predicate).collect(Collectors.toList()));\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B1 : If($i4 \u003e\u003d $i3) → B2 | else → B1"
    ],
    "blockList": [
      "B0 {\n  ThreadGroup\n  z0 :\u003d @parameter1: boolean\n  Predicate\n  Objects.requireNonNull(r0, \"threadGroup\")\n  Objects.requireNonNull(r1, \"predicate\")\n  i6 \u003d r0.activeGroupCount()\n}",
      "B1 {\n  $i0 \u003d i6 / 2\n  $i1 \u003d i6 + $i0\n  $i2 \u003d $i1 + 1\n  $r2 \u003d ThreadGroup)[$i2]\n  $i4 \u003d r0.enumerate($r2, z0)\n  i6 \u003d $i4\n  $i3 \u003d lengthof $r2\n  if ($i4 \u003e\u003d $i3) goto B2 else B1\n}",
      "B2 {\n  $r3 \u003d Stream.of($r2)\n  $l5 \u003d (long) $i4\n  $r4 \u003d $r3.limit($l5)\n  $r6 \u003d $r4.filter(r1)\n  $r5 \u003d Collectors.toList()\n  $r7 \u003d $r6.collect($r5)\n  $r8 \u003d Collection) $r7\n  $r9 \u003d Collections.unmodifiableCollection($r8)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B1",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ThreadUtils",
    "methodName": "findThreads",
    "signature": "java.util.Collection findThreads(java.lang.ThreadGroup,boolean,java.util.function.Predicate)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(threadGroup, \"The group must not be null\");\r\n    Objects.requireNonNull(predicate, \"The predicate must not be null\");\r\n    int count \u003d threadGroup.activeCount();\r\n    Thread[] threads;\r\n    do {\r\n        //slightly grow the array size\r\n        threads \u003d new Thread[count + count / 2 + 1];\r\n        count \u003d threadGroup.enumerate(threads, recurse);\r\n        //return value of enumerate() must be strictly less than the array size according to javadoc\r\n    } while (count \u003e\u003d threads.length);\r\n    return Collections.unmodifiableCollection(Stream.of(threads).limit(count).filter(predicate).collect(Collectors.toList()));\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B1 : If($i4 \u003e\u003d $i3) → B2 | else → B1"
    ],
    "blockList": [
      "B0 {\n  ThreadGroup\n  z0 :\u003d @parameter1: boolean\n  Predicate\n  Objects.requireNonNull(r0, \"The group must not be null\")\n  Objects.requireNonNull(r1, \"The predicate must not be null\")\n  i6 \u003d r0.activeCount()\n}",
      "B1 {\n  $i0 \u003d i6 / 2\n  $i1 \u003d i6 + $i0\n  $i2 \u003d $i1 + 1\n  $r2 \u003d Thread)[$i2]\n  $i4 \u003d r0.enumerate($r2, z0)\n  i6 \u003d $i4\n  $i3 \u003d lengthof $r2\n  if ($i4 \u003e\u003d $i3) goto B2 else B1\n}",
      "B2 {\n  $r3 \u003d Stream.of($r2)\n  $l5 \u003d (long) $i4\n  $r4 \u003d $r3.limit($l5)\n  $r6 \u003d $r4.filter(r1)\n  $r5 \u003d Collectors.toList()\n  $r7 \u003d $r6.collect($r5)\n  $r8 \u003d Collection) $r7\n  $r9 \u003d Collections.unmodifiableCollection($r8)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B1",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ThreadUtils",
    "methodName": "getSystemThreadGroup",
    "signature": "java.lang.ThreadGroup getSystemThreadGroup()",
    "visibility": "public",
    "body": "{\r\n    ThreadGroup threadGroup \u003d Thread.currentThread().getThreadGroup();\r\n    while (threadGroup !\u003d null \u0026\u0026 threadGroup.getParent() !\u003d null) {\r\n        threadGroup \u003d threadGroup.getParent();\r\n    }\r\n    return threadGroup;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r2 \u003d\u003d null) → B2 | else → B4",
      "B2 : If($r1 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  $r0 \u003d Thread.currentThread()\n  r2 \u003d $r0.getThreadGroup()\n}",
      "B1 {\n  if (r2 \u003d\u003d null) goto B2 else B4\n}",
      "B2 {\n  $r1 \u003d r2.getParent()\n  if ($r1 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  r2 \u003d r2.getParent()\n  goto B1\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B1",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.ThreadUtils",
    "methodName": "sleepQuietly",
    "signature": "void sleepQuietly(java.time.Duration)",
    "visibility": "public",
    "body": "{\r\n    try {\r\n        sleep(duration);\r\n    } catch (final InterruptedException ignore) {\r\n        // Ignore \u0026 be quiet.\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  Duration\n  ThreadUtils.sleep(r0)\n  goto B2\n}",
      "B1 {\n  $r1 :\u003d @caughtexception\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ThreadUtils#sleep(...1)",
        "body": "{\r\n    DurationUtils.accept(Thread::sleep, duration);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.time.DateUtils",
    "methodName": "ceiling",
    "signature": "java.util.Date ceiling(java.lang.Object,int)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(date, \"date\");\r\n    if (date instanceof Date) {\r\n        return ceiling((Date) date, field);\r\n    }\r\n    if (date instanceof Calendar) {\r\n        return ceiling((Calendar) date, field).getTime();\r\n    }\r\n    throw new ClassCastException(\"Could not find ceiling of for type: \" + date.getClass());\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Object\n  i0 :\u003d @parameter1: int\n  Objects.requireNonNull(r0, \"date\")\n  $z0 \u003d Date\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d Date) r0\n  $r11 \u003d DateUtils.ceiling($r10, i0)\n  return\n}",
      "B2 {\n  $z1 \u003d Calendar\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r7 \u003d Calendar) r0\n  $r8 \u003d DateUtils.ceiling($r7, i0)\n  $r9 \u003d $r8.getTime()\n  return\n}",
      "B4 {\n  $r1 \u003d ClassCastException\n  $r2 \u003d StringBuilder\n  new StringBuilder()\n  $r4 \u003d $r2.append(\"Could not find ceiling of for type: \")\n  $r3 \u003d r0.getClass()\n  $r5 \u003d $r4.append($r3)\n  $r6 \u003d $r5.toString()\n  new ClassCastException($r6)\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DateUtils#ceiling(...2)",
        "body": "{\r\n    Objects.requireNonNull(calendar, \"calendar\");\r\n    return modify((Calendar) calendar.clone(), field, ModifyType.CEILING);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.time.DateUtils",
    "methodName": "isSameDay",
    "signature": "boolean isSameDay(java.util.Calendar,java.util.Calendar)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(cal1, \"cal1\");\r\n    Objects.requireNonNull(cal2, \"cal2\");\r\n    return cal1.get(Calendar.ERA) \u003d\u003d cal2.get(Calendar.ERA) \u0026\u0026 cal1.get(Calendar.YEAR) \u003d\u003d cal2.get(Calendar.YEAR) \u0026\u0026 cal1.get(Calendar.DAY_OF_YEAR) \u003d\u003d cal2.get(Calendar.DAY_OF_YEAR);\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i1 !\u003d $i0) → B1 | else → B4",
      "B1 : If($i3 !\u003d $i2) → B2 | else → B4",
      "B2 : If($i5 !\u003d $i4) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Calendar\n  Calendar\n  Objects.requireNonNull(r0, \"cal1\")\n  Objects.requireNonNull(r1, \"cal2\")\n  $i1 \u003d r0.get(0)\n  $i0 \u003d r1.get(0)\n  if ($i1 !\u003d $i0) goto B1 else B4\n}",
      "B1 {\n  $i3 \u003d r0.get(1)\n  $i2 \u003d r1.get(1)\n  if ($i3 !\u003d $i2) goto B2 else B4\n}",
      "B2 {\n  $i5 \u003d r0.get(6)\n  $i4 \u003d r1.get(6)\n  if ($i5 !\u003d $i4) goto B3 else B4\n}",
      "B3 {\n  $z0 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z0 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.time.DateUtils",
    "methodName": "isSameInstant",
    "signature": "boolean isSameInstant(java.util.Calendar,java.util.Calendar)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(cal1, \"cal1\");\r\n    Objects.requireNonNull(cal2, \"cal2\");\r\n    return cal1.getTime().getTime() \u003d\u003d cal2.getTime().getTime();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($b2 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Calendar\n  Calendar\n  Objects.requireNonNull(r0, \"cal1\")\n  Objects.requireNonNull(r1, \"cal2\")\n  $r2 \u003d r0.getTime()\n  $l1 \u003d $r2.getTime()\n  $r3 \u003d r1.getTime()\n  $l0 \u003d $r3.getTime()\n  $b2 \u003d $l1 cmp $l0\n  if ($b2 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.time.DateUtils",
    "methodName": "isSameInstant",
    "signature": "boolean isSameInstant(java.util.Date,java.util.Date)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(date1, \"date1\");\r\n    Objects.requireNonNull(date2, \"date2\");\r\n    return date1.getTime() \u003d\u003d date2.getTime();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($b2 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Date\n  Date\n  Objects.requireNonNull(r0, \"date1\")\n  Objects.requireNonNull(r1, \"date2\")\n  $l1 \u003d r0.getTime()\n  $l0 \u003d r1.getTime()\n  $b2 \u003d $l1 cmp $l0\n  if ($b2 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.time.DateUtils",
    "methodName": "isSameLocalTime",
    "signature": "boolean isSameLocalTime(java.util.Calendar,java.util.Calendar)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(cal1, \"cal1\");\r\n    Objects.requireNonNull(cal2, \"cal2\");\r\n    return cal1.get(Calendar.MILLISECOND) \u003d\u003d cal2.get(Calendar.MILLISECOND) \u0026\u0026 cal1.get(Calendar.SECOND) \u003d\u003d cal2.get(Calendar.SECOND) \u0026\u0026 cal1.get(Calendar.MINUTE) \u003d\u003d cal2.get(Calendar.MINUTE) \u0026\u0026 cal1.get(Calendar.HOUR_OF_DAY) \u003d\u003d cal2.get(Calendar.HOUR_OF_DAY) \u0026\u0026 cal1.get(Calendar.DAY_OF_YEAR) \u003d\u003d cal2.get(Calendar.DAY_OF_YEAR) \u0026\u0026 cal1.get(Calendar.YEAR) \u003d\u003d cal2.get(Calendar.YEAR) \u0026\u0026 cal1.get(Calendar.ERA) \u003d\u003d cal2.get(Calendar.ERA) \u0026\u0026 cal1.getClass() \u003d\u003d cal2.getClass();\r\n}",
    "nodes": 11,
    "edges": 18,
    "cc": 9,
    "flowSummary": [
      "B0 : If($i1 !\u003d $i0) → B1 | else → B9",
      "B1 : If($i3 !\u003d $i2) → B2 | else → B9",
      "B2 : If($i5 !\u003d $i4) → B3 | else → B9",
      "B3 : If($i7 !\u003d $i6) → B4 | else → B9",
      "B4 : If($i9 !\u003d $i8) → B5 | else → B9",
      "B5 : If($i11 !\u003d $i10) → B6 | else → B9",
      "B6 : If($i13 !\u003d $i12) → B7 | else → B9",
      "B7 : If($r3 !\u003d $r2) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  Calendar\n  Calendar\n  Objects.requireNonNull(r0, \"cal1\")\n  Objects.requireNonNull(r1, \"cal2\")\n  $i1 \u003d r0.get(14)\n  $i0 \u003d r1.get(14)\n  if ($i1 !\u003d $i0) goto B1 else B9\n}",
      "B1 {\n  $i3 \u003d r0.get(13)\n  $i2 \u003d r1.get(13)\n  if ($i3 !\u003d $i2) goto B2 else B9\n}",
      "B2 {\n  $i5 \u003d r0.get(12)\n  $i4 \u003d r1.get(12)\n  if ($i5 !\u003d $i4) goto B3 else B9\n}",
      "B3 {\n  $i7 \u003d r0.get(11)\n  $i6 \u003d r1.get(11)\n  if ($i7 !\u003d $i6) goto B4 else B9\n}",
      "B4 {\n  $i9 \u003d r0.get(6)\n  $i8 \u003d r1.get(6)\n  if ($i9 !\u003d $i8) goto B5 else B9\n}",
      "B5 {\n  $i11 \u003d r0.get(1)\n  $i10 \u003d r1.get(1)\n  if ($i11 !\u003d $i10) goto B6 else B9\n}",
      "B6 {\n  $i13 \u003d r0.get(0)\n  $i12 \u003d r1.get(0)\n  if ($i13 !\u003d $i12) goto B7 else B9\n}",
      "B7 {\n  $r3 \u003d r0.getClass()\n  $r2 \u003d r1.getClass()\n  if ($r3 !\u003d $r2) goto B8 else B9\n}",
      "B8 {\n  $z0 \u003d 1\n  goto B10\n}",
      "B9 {\n  $z0 \u003d 0\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B9",
      "B1 --\u003e B2",
      "B1 --\u003e B9",
      "B2 --\u003e B3",
      "B2 --\u003e B9",
      "B3 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.time.DateUtils",
    "methodName": "iterator",
    "signature": "java.util.Iterator iterator(java.util.Calendar,int)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(calendar, \"calendar\");\r\n    final Calendar start;\r\n    final Calendar end;\r\n    int startCutoff \u003d Calendar.SUNDAY;\r\n    int endCutoff \u003d Calendar.SATURDAY;\r\n    switch(rangeStyle) {\r\n        case RANGE_MONTH_SUNDAY:\r\n        case RANGE_MONTH_MONDAY:\r\n            //Set start to the first of the month\r\n            start \u003d truncate(calendar, Calendar.MONTH);\r\n            //Set end to the last of the month\r\n            end \u003d (Calendar) start.clone();\r\n            end.add(Calendar.MONTH, 1);\r\n            end.add(Calendar.DATE, -1);\r\n            //Loop start back to the previous sunday or monday\r\n            if (rangeStyle \u003d\u003d RANGE_MONTH_MONDAY) {\r\n                startCutoff \u003d Calendar.MONDAY;\r\n                endCutoff \u003d Calendar.SUNDAY;\r\n            }\r\n            break;\r\n        case RANGE_WEEK_SUNDAY:\r\n        case RANGE_WEEK_MONDAY:\r\n        case RANGE_WEEK_RELATIVE:\r\n        case RANGE_WEEK_CENTER:\r\n            //Set start and end to the current date\r\n            start \u003d truncate(calendar, Calendar.DATE);\r\n            end \u003d truncate(calendar, Calendar.DATE);\r\n            switch(rangeStyle) {\r\n                case RANGE_WEEK_SUNDAY:\r\n                    //already set by default\r\n                    break;\r\n                case RANGE_WEEK_MONDAY:\r\n                    startCutoff \u003d Calendar.MONDAY;\r\n                    endCutoff \u003d Calendar.SUNDAY;\r\n                    break;\r\n                case RANGE_WEEK_RELATIVE:\r\n                    startCutoff \u003d calendar.get(Calendar.DAY_OF_WEEK);\r\n                    endCutoff \u003d startCutoff - 1;\r\n                    break;\r\n                case RANGE_WEEK_CENTER:\r\n                    startCutoff \u003d calendar.get(Calendar.DAY_OF_WEEK) - 3;\r\n                    endCutoff \u003d calendar.get(Calendar.DAY_OF_WEEK) + 3;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            break;\r\n        default:\r\n            throw new IllegalArgumentException(\"The range style \" + rangeStyle + \" is not valid.\");\r\n    }\r\n    if (startCutoff \u003c Calendar.SUNDAY) {\r\n        startCutoff +\u003d 7;\r\n    }\r\n    if (startCutoff \u003e Calendar.SATURDAY) {\r\n        startCutoff -\u003d 7;\r\n    }\r\n    if (endCutoff \u003c Calendar.SUNDAY) {\r\n        endCutoff +\u003d 7;\r\n    }\r\n    if (endCutoff \u003e Calendar.SATURDAY) {\r\n        endCutoff -\u003d 7;\r\n    }\r\n    while (start.get(Calendar.DAY_OF_WEEK) !\u003d startCutoff) {\r\n        start.add(Calendar.DATE, -1);\r\n    }\r\n    while (end.get(Calendar.DAY_OF_WEEK) !\u003d endCutoff) {\r\n        end.add(Calendar.DATE, 1);\r\n    }\r\n    return new DateIterator(start, end);\r\n}",
    "nodes": 23,
    "edges": 34,
    "cc": 13,
    "flowSummary": [
      "B0 : If(switch-on i0) → B3 | else → B1",
      "B1 : If(i0 !\u003d 6) → B2 | else → B10",
      "B3 : If(switch-on i0) → B4 | else → B5",
      "B10 : If(i4 \u003e\u003d 1) → B11 | else → B12",
      "B12 : If(i4 \u003c\u003d 7) → B13 | else → B14",
      "B14 : If(i5 \u003e\u003d 1) → B15 | else → B16",
      "B16 : If(i5 \u003c\u003d 7) → B17 | else → B18",
      "B18 : If($i6 \u003d\u003d i4) → B19 | else → B20",
      "B20 : If($i1 \u003d\u003d i5) → B21 | else → B22"
    ],
    "blockList": [
      "B0 {\n  Calendar\n  i0 :\u003d @parameter1: int\n  Objects.requireNonNull(r0, \"calendar\")\n  i4 \u003d 1\n  i5 \u003d 7\n  IllegalArgumentException; }\n}",
      "B1 {\n  r9 \u003d DateUtils.truncate(r0, 2)\n  $r1 \u003d r9.clone()\n  r10 \u003d Calendar) $r1\n  r10.add(2, 1)\n  $i8 \u003d (int) -1\n  r10.add(5, $i8)\n  if (i0 !\u003d 6) goto B2 else B10\n}",
      "B2 {\n  i4 \u003d 2\n  i5 \u003d 1\n  goto B10\n}",
      "B3 {\n  r9 \u003d DateUtils.truncate(r0, 5)\n  r10 \u003d DateUtils.truncate(r0, 5)\n  Calendar: int get(int)\u003e(7);     default: goto goto [?\u003d (branch)]; }\n}",
      "B4 {\n  goto B10\n}",
      "B5 {\n  i4 \u003d 2\n  i5 \u003d 1\n  goto B10\n}",
      "B6 {\n  i4 \u003d r0.get(7)\n  i5 \u003d i4 - 1\n  goto B10\n}",
      "B7 {\n  $i2 \u003d r0.get(7)\n  i4 \u003d $i2 - 3\n  $i3 \u003d r0.get(7)\n  i5 \u003d $i3 + 3\n  goto B10\n}",
      "B8 {\n  goto B10\n}",
      "B9 {\n  $r12 \u003d IllegalArgumentException\n  $r11 \u003d StringBuilder\n  new StringBuilder()\n  $r5 \u003d $r11.append(\"The range style \")\n  $r6 \u003d $r5.append(i0)\n  $r7 \u003d $r6.append(\" is not valid.\")\n  $r8 \u003d $r7.toString()\n  new IllegalArgumentException($r8)\n  throw $r12\n}",
      "B10 {\n  if (i4 \u003e\u003d 1) goto B11 else B12\n}",
      "B11 {\n  i4 \u003d i4 + 7\n}",
      "B12 {\n  if (i4 \u003c\u003d 7) goto B13 else B14\n}",
      "B13 {\n  $i10 \u003d (int) -7\n  i4 \u003d i4 + $i10\n}",
      "B14 {\n  if (i5 \u003e\u003d 1) goto B15 else B16\n}",
      "B15 {\n  i5 \u003d i5 + 7\n}",
      "B16 {\n  if (i5 \u003c\u003d 7) goto B17 else B18\n}",
      "B17 {\n  $i12 \u003d (int) -7\n  i5 \u003d i5 + $i12\n}",
      "B18 {\n  $i6 \u003d r9.get(7)\n  if ($i6 \u003d\u003d i4) goto B19 else B20\n}",
      "B19 {\n  $i14 \u003d (int) -1\n  r9.add(5, $i14)\n  goto B18\n}",
      "B20 {\n  $i1 \u003d r10.get(7)\n  if ($i1 \u003d\u003d i5) goto B21 else B22\n}",
      "B21 {\n  r10.add(5, 1)\n  goto B20\n}",
      "B22 {\n  $r13 \u003d DateUtils$DateIterator\n  new DateUtils$DateIterator(r9, r10)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B3",
      "B0 --\u003e B1",
      "B0 --\u003e B9",
      "B1 --\u003e B2",
      "B1 --\u003e B10",
      "B2 --\u003e B10",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B3 --\u003e B6",
      "B3 --\u003e B7",
      "B3 --\u003e B8",
      "B4 --\u003e B10",
      "B5 --\u003e B10",
      "B6 --\u003e B10",
      "B7 --\u003e B10",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B18",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B20",
      "B22 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DateUtils#truncate(...2)",
        "body": "{\r\n    Objects.requireNonNull(date, \"date\");\r\n    return modify((Calendar) date.clone(), field, ModifyType.TRUNCATE);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.time.DateUtils",
    "methodName": "iterator",
    "signature": "java.util.Iterator iterator(java.lang.Object,int)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(calendar, \"calendar\");\r\n    if (calendar instanceof Date) {\r\n        return iterator((Date) calendar, rangeStyle);\r\n    }\r\n    if (calendar instanceof Calendar) {\r\n        return iterator((Calendar) calendar, rangeStyle);\r\n    }\r\n    throw new ClassCastException(\"Could not iterate based on \" + calendar);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Object\n  i0 :\u003d @parameter1: int\n  Objects.requireNonNull(r0, \"calendar\")\n  $z0 \u003d Date\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d Date) r0\n  $r9 \u003d DateUtils.iterator($r8, i0)\n  return\n}",
      "B2 {\n  $z1 \u003d Calendar\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d Calendar) r0\n  $r7 \u003d DateUtils.iterator($r6, i0)\n  return\n}",
      "B4 {\n  $r1 \u003d ClassCastException\n  $r2 \u003d StringBuilder\n  new StringBuilder()\n  $r3 \u003d $r2.append(\"Could not iterate based on \")\n  $r4 \u003d $r3.append(r0)\n  $r5 \u003d $r4.toString()\n  new ClassCastException($r5)\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DateUtils#iterator(...2)",
        "body": "{\r\n    Objects.requireNonNull(calendar, \"calendar\");\r\n    final Calendar start;\r\n    final Calendar end;\r\n    int startCutoff \u003d Calendar.SUNDAY;\r\n    int endCutoff \u003d Calendar.SATURDAY;\r\n    switch(rangeStyle) {\r\n        case RANGE_MONTH_SUNDAY:\r\n        case RANGE_MONTH_MONDAY:\r\n            //Set start to the first of the month\r\n            start \u003d truncate(calendar, Calendar.MONTH);\r\n            //Set end to the last of the month\r\n            end \u003d (Calendar) start.clone();\r\n            end.add(Calendar.MONTH, 1);\r\n            end.add(Calendar.DATE, -1);\r\n            //Loop start back to the previous sunday or monday\r\n            if (rangeStyle \u003d\u003d RANGE_MONTH_MONDAY) {\r\n                startCutoff \u003d Calendar.MONDAY;\r\n                endCutoff \u003d Calendar.SUNDAY;\r\n            }\r\n            break;\r\n        case RANGE_WEEK_SUNDAY:\r\n        case RANGE_WEEK_MONDAY:\r\n        case RANGE_WEEK_RELATIVE:\r\n        case RANGE_WEEK_CENTER:\r\n            //Set start and end to the current date\r\n            start \u003d truncate(calendar, Calendar.DATE);\r\n            end \u003d truncate(calendar, Calendar.DATE);\r\n            switch(rangeStyle) {\r\n                case RANGE_WEEK_SUNDAY:\r\n                    //already set by default\r\n                    break;\r\n                case RANGE_WEEK_MONDAY:\r\n                    startCutoff \u003d Calendar.MONDAY;\r\n                    endCutoff \u003d Calendar.SUNDAY;\r\n                    break;\r\n                case RANGE_WEEK_RELATIVE:\r\n                    startCutoff \u003d calendar.get(Calendar.DAY_OF_WEEK);\r\n                    endCutoff \u003d startCutoff - 1;\r\n                    break;\r\n                case RANGE_WEEK_CENTER:\r\n                    startCutoff \u003d calendar.get(Calendar.DAY_OF_WEEK) - 3;\r\n                    endCutoff \u003d calendar.get(Calendar.DAY_OF_WEEK) + 3;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            break;\r\n        default:\r\n            throw new IllegalArgumentException(\"The range style \" + rangeStyle + \" is not valid.\");\r\n    }\r\n    if (startCutoff \u003c Calendar.SUNDAY) {\r\n        startCutoff +\u003d 7;\r\n    }\r\n    if (startCutoff \u003e Calendar.SATURDAY) {\r\n        startCutoff -\u003d 7;\r\n    }\r\n    if (endCutoff \u003c Calendar.SUNDAY) {\r\n        endCutoff +\u003d 7;\r\n    }\r\n    if (endCutoff \u003e Calendar.SATURDAY) {\r\n        endCutoff -\u003d 7;\r\n    }\r\n    while (start.get(Calendar.DAY_OF_WEEK) !\u003d startCutoff) {\r\n        start.add(Calendar.DATE, -1);\r\n    }\r\n    while (end.get(Calendar.DAY_OF_WEEK) !\u003d endCutoff) {\r\n        end.add(Calendar.DATE, 1);\r\n    }\r\n    return new DateIterator(start, end);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.time.DateUtils",
    "methodName": "round",
    "signature": "java.util.Date round(java.lang.Object,int)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(date, \"date\");\r\n    if (date instanceof Date) {\r\n        return round((Date) date, field);\r\n    }\r\n    if (date instanceof Calendar) {\r\n        return round((Calendar) date, field).getTime();\r\n    }\r\n    throw new ClassCastException(\"Could not round \" + date);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Object\n  i0 :\u003d @parameter1: int\n  Objects.requireNonNull(r0, \"date\")\n  $z0 \u003d Date\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d Date) r0\n  $r10 \u003d DateUtils.round($r9, i0)\n  return\n}",
      "B2 {\n  $z1 \u003d Calendar\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d Calendar) r0\n  $r7 \u003d DateUtils.round($r6, i0)\n  $r8 \u003d $r7.getTime()\n  return\n}",
      "B4 {\n  $r1 \u003d ClassCastException\n  $r2 \u003d StringBuilder\n  new StringBuilder()\n  $r3 \u003d $r2.append(\"Could not round \")\n  $r4 \u003d $r3.append(r0)\n  $r5 \u003d $r4.toString()\n  new ClassCastException($r5)\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DateUtils#round(...2)",
        "body": "{\r\n    Objects.requireNonNull(calendar, \"calendar\");\r\n    return modify((Calendar) calendar.clone(), field, ModifyType.ROUND);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.time.DateUtils",
    "methodName": "truncate",
    "signature": "java.util.Date truncate(java.lang.Object,int)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(date, \"date\");\r\n    if (date instanceof Date) {\r\n        return truncate((Date) date, field);\r\n    }\r\n    if (date instanceof Calendar) {\r\n        return truncate((Calendar) date, field).getTime();\r\n    }\r\n    throw new ClassCastException(\"Could not truncate \" + date);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Object\n  i0 :\u003d @parameter1: int\n  Objects.requireNonNull(r0, \"date\")\n  $z0 \u003d Date\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d Date) r0\n  $r10 \u003d DateUtils.truncate($r9, i0)\n  return\n}",
      "B2 {\n  $z1 \u003d Calendar\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d Calendar) r0\n  $r7 \u003d DateUtils.truncate($r6, i0)\n  $r8 \u003d $r7.getTime()\n  return\n}",
      "B4 {\n  $r1 \u003d ClassCastException\n  $r2 \u003d StringBuilder\n  new StringBuilder()\n  $r3 \u003d $r2.append(\"Could not truncate \")\n  $r4 \u003d $r3.append(r0)\n  $r5 \u003d $r4.toString()\n  new ClassCastException($r5)\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DateUtils#truncate(...2)",
        "body": "{\r\n    Objects.requireNonNull(date, \"date\");\r\n    return modify((Calendar) date.clone(), field, ModifyType.TRUNCATE);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.time.DateUtils",
    "methodName": "truncatedEquals",
    "signature": "boolean truncatedEquals(java.util.Calendar,java.util.Calendar,int)",
    "visibility": "public",
    "body": "{\r\n    return truncatedCompareTo(cal1, cal2, field) \u003d\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Calendar\n  Calendar\n  i0 :\u003d @parameter2: int\n  $i1 \u003d DateUtils.truncatedCompareTo(r0, r1, i0)\n  if ($i1 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DateUtils#truncatedCompareTo(...3)",
        "body": "{\r\n    final Calendar truncatedCal1 \u003d truncate(cal1, field);\r\n    final Calendar truncatedCal2 \u003d truncate(cal2, field);\r\n    return truncatedCal1.compareTo(truncatedCal2);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.time.DateUtils",
    "methodName": "truncatedEquals",
    "signature": "boolean truncatedEquals(java.util.Date,java.util.Date,int)",
    "visibility": "public",
    "body": "{\r\n    return truncatedCompareTo(date1, date2, field) \u003d\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Date\n  Date\n  i0 :\u003d @parameter2: int\n  $i1 \u003d DateUtils.truncatedCompareTo(r0, r1, i0)\n  if ($i1 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DateUtils#truncatedCompareTo(...3)",
        "body": "{\r\n    final Calendar truncatedCal1 \u003d truncate(cal1, field);\r\n    final Calendar truncatedCal2 \u003d truncate(cal2, field);\r\n    return truncatedCal1.compareTo(truncatedCal2);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.time.DurationFormatUtils",
    "methodName": "formatDuration",
    "signature": "java.lang.String formatDuration(long,java.lang.String,boolean)",
    "visibility": "public",
    "body": "{\r\n    Validate.inclusiveBetween(0, Long.MAX_VALUE, durationMillis, \"durationMillis must not be negative\");\r\n    final Token[] tokens \u003d lexx(format);\r\n    long days \u003d 0;\r\n    long hours \u003d 0;\r\n    long minutes \u003d 0;\r\n    long seconds \u003d 0;\r\n    long milliseconds \u003d durationMillis;\r\n    if (Token.containsTokenWithValue(tokens, d)) {\r\n        days \u003d milliseconds / DateUtils.MILLIS_PER_DAY;\r\n        milliseconds -\u003d days * DateUtils.MILLIS_PER_DAY;\r\n    }\r\n    if (Token.containsTokenWithValue(tokens, H)) {\r\n        hours \u003d milliseconds / DateUtils.MILLIS_PER_HOUR;\r\n        milliseconds -\u003d hours * DateUtils.MILLIS_PER_HOUR;\r\n    }\r\n    if (Token.containsTokenWithValue(tokens, m)) {\r\n        minutes \u003d milliseconds / DateUtils.MILLIS_PER_MINUTE;\r\n        milliseconds -\u003d minutes * DateUtils.MILLIS_PER_MINUTE;\r\n    }\r\n    if (Token.containsTokenWithValue(tokens, s)) {\r\n        seconds \u003d milliseconds / DateUtils.MILLIS_PER_SECOND;\r\n        milliseconds -\u003d seconds * DateUtils.MILLIS_PER_SECOND;\r\n    }\r\n    return format(tokens, 0, 0, days, hours, minutes, seconds, milliseconds, padWithZeros);\r\n}",
    "nodes": 9,
    "edges": 12,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B6",
      "B6 : If($z3 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  l0 :\u003d @parameter0: long\n  String\n  z4 :\u003d @parameter2: boolean\n  Validate.inclusiveBetween(0L, 9223372036854775807L, l0, \"durationMillis must not be negative\")\n  r1 \u003d DurationFormatUtils.lexx(r0)\n  l5 \u003d 0L\n  l6 \u003d 0L\n  l7 \u003d 0L\n  l8 \u003d 0L\n  l9 \u003d l0\n  $z0 \u003d DurationFormatUtils$Token.containsTokenWithValue(r1, \"d\")\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  l5 \u003d l0 / 86400000L\n  $l4 \u003d l5 * 86400000L\n  l9 \u003d l0 - $l4\n}",
      "B2 {\n  $z1 \u003d DurationFormatUtils$Token.containsTokenWithValue(r1, \"H\")\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  l6 \u003d l9 / 3600000L\n  $l3 \u003d l6 * 3600000L\n  l9 \u003d l9 - $l3\n}",
      "B4 {\n  $z2 \u003d DurationFormatUtils$Token.containsTokenWithValue(r1, \"m\")\n  if ($z2 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  l7 \u003d l9 / 60000L\n  $l2 \u003d l7 * 60000L\n  l9 \u003d l9 - $l2\n}",
      "B6 {\n  $z3 \u003d DurationFormatUtils$Token.containsTokenWithValue(r1, \"s\")\n  if ($z3 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  l8 \u003d l9 / 1000L\n  $l1 \u003d l8 * 1000L\n  l9 \u003d l9 - $l1\n}",
      "B8 {\n  $r2 \u003d DurationFormatUtils.format(r1, 0L, 0L, l5, l6, l7, l8, l9, z4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DurationFormatUtils#lexx(...1)",
        "body": "{\r\n    final ArrayList\u003cToken\u003e list \u003d new ArrayList\u003c\u003e(format.length());\r\n    boolean inLiteral \u003d false;\r\n    // Although the buffer is stored in a Token, the Tokens are only\r\n    // used internally, so cannot be accessed by other threads\r\n    StringBuilder buffer \u003d null;\r\n    Token previous \u003d null;\r\n    boolean inOptional \u003d false;\r\n    int optionalIndex \u003d -1;\r\n    for (int i \u003d 0; i \u003c format.length(); i++) {\r\n        final char ch \u003d format.charAt(i);\r\n        if (inLiteral \u0026\u0026 ch !\u003d \u0027\\\u0027\u0027) {\r\n            // buffer can\u0027t be null if inLiteral is true\r\n            buffer.append(ch);\r\n            continue;\r\n        }\r\n        String value \u003d null;\r\n        switch(ch) {\r\n            // TODO: Need to handle escaping of \u0027\r\n            case \u0027[\u0027:\r\n                if (inOptional) {\r\n                    throw new IllegalArgumentException(\"Nested optional block at index: \" + i);\r\n                }\r\n                optionalIndex++;\r\n                inOptional \u003d true;\r\n                break;\r\n            case \u0027]\u0027:\r\n                if (!inOptional) {\r\n                    throw new IllegalArgumentException(\"Attempting to close unopened optional block at index: \" + i);\r\n                }\r\n                inOptional \u003d false;\r\n                break;\r\n            case \u0027\\\u0027\u0027:\r\n                if (inLiteral) {\r\n                    buffer \u003d null;\r\n                    inLiteral \u003d false;\r\n                } else {\r\n                    buffer \u003d new StringBuilder();\r\n                    list.add(new Token(buffer, inOptional, optionalIndex));\r\n                    inLiteral \u003d true;\r\n                }\r\n                break;\r\n            case \u0027y\u0027:\r\n                value \u003d y;\r\n                break;\r\n            case \u0027M\u0027:\r\n                value \u003d M;\r\n                break;\r\n            case \u0027d\u0027:\r\n                value \u003d d;\r\n                break;\r\n            case \u0027H\u0027:\r\n                value \u003d H;\r\n                break;\r\n            case \u0027m\u0027:\r\n                value \u003d m;\r\n                break;\r\n            case \u0027s\u0027:\r\n                value \u003d s;\r\n                break;\r\n            case \u0027S\u0027:\r\n                value \u003d S;\r\n                break;\r\n            default:\r\n                if (buffer \u003d\u003d null) {\r\n                    buffer \u003d new StringBuilder();\r\n                    list.add(new Token(buffer, inOptional, optionalIndex));\r\n                }\r\n                buffer.append(ch);\r\n        }\r\n        if (value !\u003d null) {\r\n            if (previous !\u003d null \u0026\u0026 previous.getValue().equals(value)) {\r\n                previous.increment();\r\n            } else {\r\n                final Token token \u003d new Token(value, inOptional, optionalIndex);\r\n                list.add(token);\r\n                previous \u003d token;\r\n            }\r\n            buffer \u003d null;\r\n        }\r\n    }\r\n    if (inLiteral) {\r\n        // i.e. we have not found the end of the literal\r\n        throw new IllegalArgumentException(\"Unmatched quote in format: \" + format);\r\n    }\r\n    if (inOptional) {\r\n        // i.e. we have not found the end of the literal\r\n        throw new IllegalArgumentException(\"Unmatched optional in format: \" + format);\r\n    }\r\n    return list.toArray(Token.EMPTY_ARRAY);\r\n}"
      },
      {
        "name": "DurationFormatUtils#format(...9)",
        "body": "{\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    boolean lastOutputSeconds \u003d false;\r\n    boolean lastOutputZero \u003d false;\r\n    int optionalStart \u003d -1;\r\n    boolean firstOptionalNonLiteral \u003d false;\r\n    int optionalIndex \u003d -1;\r\n    boolean inOptional \u003d false;\r\n    for (final Token token : tokens) {\r\n        final Object value \u003d token.getValue();\r\n        final boolean isLiteral \u003d value instanceof StringBuilder;\r\n        final int count \u003d token.getCount();\r\n        if (optionalIndex !\u003d token.optionalIndex) {\r\n            optionalIndex \u003d token.optionalIndex;\r\n            if (optionalIndex \u003e -1) {\r\n                //entering new optional block\r\n                optionalStart \u003d buffer.length();\r\n                lastOutputZero \u003d false;\r\n                inOptional \u003d true;\r\n                firstOptionalNonLiteral \u003d false;\r\n            } else {\r\n                //leaving optional block\r\n                inOptional \u003d false;\r\n            }\r\n        }\r\n        if (isLiteral) {\r\n            if (!inOptional || !lastOutputZero) {\r\n                buffer.append(value.toString());\r\n            }\r\n        } else if (value.equals(y)) {\r\n            lastOutputSeconds \u003d false;\r\n            lastOutputZero \u003d years \u003d\u003d 0;\r\n            if (!inOptional || !lastOutputZero) {\r\n                buffer.append(paddedValue(years, padWithZeros, count));\r\n            }\r\n        } else if (value.equals(M)) {\r\n            lastOutputSeconds \u003d false;\r\n            lastOutputZero \u003d months \u003d\u003d 0;\r\n            if (!inOptional || !lastOutputZero) {\r\n                buffer.append(paddedValue(months, padWithZeros, count));\r\n            }\r\n        } else if (value.equals(d)) {\r\n            lastOutputSeconds \u003d false;\r\n            lastOutputZero \u003d days \u003d\u003d 0;\r\n            if (!inOptional || !lastOutputZero) {\r\n                buffer.append(paddedValue(days, padWithZeros, count));\r\n            }\r\n        } else if (value.equals(H)) {\r\n            lastOutputSeconds \u003d false;\r\n            lastOutputZero \u003d hours \u003d\u003d 0;\r\n            if (!inOptional || !lastOutputZero) {\r\n                buffer.append(paddedValue(hours, padWithZeros, count));\r\n            }\r\n        } else if (value.equals(m)) {\r\n            lastOutputSeconds \u003d false;\r\n            lastOutputZero \u003d minutes \u003d\u003d 0;\r\n            if (!inOptional || !lastOutputZero) {\r\n                buffer.append(paddedValue(minutes, padWithZeros, count));\r\n            }\r\n        } else if (value.equals(s)) {\r\n            lastOutputSeconds \u003d true;\r\n            lastOutputZero \u003d seconds \u003d\u003d 0;\r\n            if (!inOptional || !lastOutputZero) {\r\n                buffer.append(paddedValue(seconds, padWithZeros, count));\r\n            }\r\n        } else if (value.equals(S)) {\r\n            lastOutputZero \u003d milliseconds \u003d\u003d 0;\r\n            if (!inOptional || !lastOutputZero) {\r\n                if (lastOutputSeconds) {\r\n                    // ensure at least 3 digits are displayed even if padding is not selected\r\n                    final int width \u003d padWithZeros ? Math.max(3, count) : 3;\r\n                    buffer.append(paddedValue(milliseconds, true, width));\r\n                } else {\r\n                    buffer.append(paddedValue(milliseconds, padWithZeros, count));\r\n                }\r\n            }\r\n            lastOutputSeconds \u003d false;\r\n        }\r\n        //as soon as we hit first nonliteral in optional, check for literal prefix\r\n        if (inOptional \u0026\u0026 !isLiteral \u0026\u0026 !firstOptionalNonLiteral) {\r\n            firstOptionalNonLiteral \u003d true;\r\n            if (lastOutputZero) {\r\n                buffer.delete(optionalStart, buffer.length());\r\n            }\r\n        }\r\n    }\r\n    return buffer.toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.time.DurationFormatUtils",
    "methodName": "formatDurationWords",
    "signature": "java.lang.String formatDurationWords(long,boolean,boolean)",
    "visibility": "public",
    "body": "{\r\n    // This method is generally replaceable by the format method, but\r\n    // there are a series of tweaks and special cases that require\r\n    // trickery to replicate.\r\n    String duration \u003d formatDuration(durationMillis, \"d\u0027 days \u0027H\u0027 hours \u0027m\u0027 minutes \u0027s\u0027 seconds\u0027\");\r\n    if (suppressLeadingZeroElements) {\r\n        // this is a temporary marker on the front. Like ^ in regexp.\r\n        duration \u003d \" \" + duration;\r\n        String tmp \u003d StringUtils.replaceOnce(duration, \" 0 days\", StringUtils.EMPTY);\r\n        if (tmp.length() !\u003d duration.length()) {\r\n            duration \u003d tmp;\r\n            tmp \u003d StringUtils.replaceOnce(duration, \" 0 hours\", StringUtils.EMPTY);\r\n            if (tmp.length() !\u003d duration.length()) {\r\n                duration \u003d tmp;\r\n                tmp \u003d StringUtils.replaceOnce(duration, \" 0 minutes\", StringUtils.EMPTY);\r\n                duration \u003d tmp;\r\n            }\r\n        }\r\n        if (!duration.isEmpty()) {\r\n            // strip the space off again\r\n            duration \u003d duration.substring(1);\r\n        }\r\n    }\r\n    if (suppressTrailingZeroElements) {\r\n        String tmp \u003d StringUtils.replaceOnce(duration, \" 0 seconds\", StringUtils.EMPTY);\r\n        if (tmp.length() !\u003d duration.length()) {\r\n            duration \u003d tmp;\r\n            tmp \u003d StringUtils.replaceOnce(duration, \" 0 minutes\", StringUtils.EMPTY);\r\n            if (tmp.length() !\u003d duration.length()) {\r\n                duration \u003d tmp;\r\n                tmp \u003d StringUtils.replaceOnce(duration, \" 0 hours\", StringUtils.EMPTY);\r\n                if (tmp.length() !\u003d duration.length()) {\r\n                    duration \u003d StringUtils.replaceOnce(tmp, \" 0 days\", StringUtils.EMPTY);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // handle plurals\r\n    duration \u003d \" \" + duration;\r\n    duration \u003d StringUtils.replaceOnce(duration, \" 1 seconds\", \" 1 second\");\r\n    duration \u003d StringUtils.replaceOnce(duration, \" 1 minutes\", \" 1 minute\");\r\n    duration \u003d StringUtils.replaceOnce(duration, \" 1 hours\", \" 1 hour\");\r\n    duration \u003d StringUtils.replaceOnce(duration, \" 1 days\", \" 1 day\");\r\n    return duration.trim();\r\n}",
    "nodes": 12,
    "edges": 19,
    "cc": 9,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d false) → B1 | else → B6",
      "B1 : If($i8 \u003d\u003d $i7) → B2 | else → B4",
      "B2 : If($i10 \u003d\u003d $i9) → B3 | else → B4",
      "B4 : If($z2 !\u003d 0) → B5 | else → B6",
      "B6 : If(z1 \u003d\u003d false) → B7 | else → B11",
      "B7 : If($i2 \u003d\u003d $i1) → B8 | else → B11",
      "B8 : If($i4 \u003d\u003d $i3) → B9 | else → B11",
      "B9 : If($i6 \u003d\u003d $i5) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  l0 :\u003d @parameter0: long\n  z0 :\u003d @parameter1: boolean\n  z1 :\u003d @parameter2: boolean\n  r3 \u003d DurationFormatUtils.formatDuration(l0, \"d\\\u0027 days \\\u0027H\\\u0027 hours \\\u0027m\\\u0027 minutes \\\u0027s\\\u0027 seconds\\\u0027\")\n  if (z0 \u003d\u003d false) goto B1 else B6\n}",
      "B1 {\n  $r0 \u003d StringBuilder\n  new StringBuilder()\n  $r1 \u003d $r0.append(\" \")\n  $r2 \u003d $r1.append(r3)\n  r3 \u003d $r2.toString()\n  r4 \u003d StringUtils.replaceOnce(r3, \" 0 days\", \"\")\n  $i8 \u003d r4.length()\n  $i7 \u003d r3.length()\n  if ($i8 \u003d\u003d $i7) goto B2 else B4\n}",
      "B2 {\n  r3 \u003d r4\n  r5 \u003d StringUtils.replaceOnce(r4, \" 0 hours\", \"\")\n  $i10 \u003d r5.length()\n  $i9 \u003d r4.length()\n  if ($i10 \u003d\u003d $i9) goto B3 else B4\n}",
      "B3 {\n  r6 \u003d StringUtils.replaceOnce(r5, \" 0 minutes\", \"\")\n  r3 \u003d r6\n}",
      "B4 {\n  $z2 \u003d r3.isEmpty()\n  if ($z2 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  r3 \u003d r3.substring(1)\n}",
      "B6 {\n  if (z1 \u003d\u003d false) goto B7 else B11\n}",
      "B7 {\n  r7 \u003d StringUtils.replaceOnce(r3, \" 0 seconds\", \"\")\n  $i2 \u003d r7.length()\n  $i1 \u003d r3.length()\n  if ($i2 \u003d\u003d $i1) goto B8 else B11\n}",
      "B8 {\n  r3 \u003d r7\n  r8 \u003d StringUtils.replaceOnce(r7, \" 0 minutes\", \"\")\n  $i4 \u003d r8.length()\n  $i3 \u003d r7.length()\n  if ($i4 \u003d\u003d $i3) goto B9 else B11\n}",
      "B9 {\n  r3 \u003d r8\n  r9 \u003d StringUtils.replaceOnce(r8, \" 0 hours\", \"\")\n  $i6 \u003d r9.length()\n  $i5 \u003d r8.length()\n  if ($i6 \u003d\u003d $i5) goto B10 else B11\n}",
      "B10 {\n  r3 \u003d StringUtils.replaceOnce(r9, \" 0 days\", \"\")\n}",
      "B11 {\n  $r10 \u003d StringBuilder\n  new StringBuilder()\n  $r11 \u003d $r10.append(\" \")\n  $r12 \u003d $r11.append(r3)\n  $r13 \u003d $r12.toString()\n  $r14 \u003d StringUtils.replaceOnce($r13, \" 1 seconds\", \" 1 second\")\n  $r15 \u003d StringUtils.replaceOnce($r14, \" 1 minutes\", \" 1 minute\")\n  $r16 \u003d StringUtils.replaceOnce($r15, \" 1 hours\", \" 1 hour\")\n  $r17 \u003d StringUtils.replaceOnce($r16, \" 1 days\", \" 1 day\")\n  $r18 \u003d $r17.trim()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DurationFormatUtils#formatDuration(...2)",
        "body": "{\r\n    return formatDuration(durationMillis, format, true);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.time.DurationFormatUtils",
    "methodName": "formatPeriod",
    "signature": "java.lang.String formatPeriod(long,long,java.lang.String,boolean,java.util.TimeZone)",
    "visibility": "public",
    "body": "{\r\n    Validate.isTrue(startMillis \u003c\u003d endMillis, \"startMillis must not be greater than endMillis\");\r\n    // Used to optimize for differences under 28 days and\r\n    // called formatDuration(millis, format); however this did not work\r\n    // over leap years.\r\n    // TODO: Compare performance to see if anything was lost by\r\n    // losing this optimization.\r\n    final Token[] tokens \u003d lexx(format);\r\n    // time zones get funky around 0, so normalizing everything to GMT\r\n    // stops the hours being off\r\n    final Calendar start \u003d Calendar.getInstance(timezone);\r\n    start.setTime(new Date(startMillis));\r\n    final Calendar end \u003d Calendar.getInstance(timezone);\r\n    end.setTime(new Date(endMillis));\r\n    // initial estimates\r\n    long milliseconds \u003d end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND);\r\n    int seconds \u003d end.get(Calendar.SECOND) - start.get(Calendar.SECOND);\r\n    int minutes \u003d end.get(Calendar.MINUTE) - start.get(Calendar.MINUTE);\r\n    int hours \u003d end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);\r\n    int days \u003d end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH);\r\n    int months \u003d end.get(Calendar.MONTH) - start.get(Calendar.MONTH);\r\n    int years \u003d end.get(Calendar.YEAR) - start.get(Calendar.YEAR);\r\n    // each initial estimate is adjusted in case it is under 0\r\n    while (milliseconds \u003c 0) {\r\n        milliseconds +\u003d DateUtils.MILLIS_PER_SECOND;\r\n        seconds -\u003d 1;\r\n    }\r\n    while (seconds \u003c 0) {\r\n        seconds +\u003d SECONDS_PER_MINUTES;\r\n        minutes -\u003d 1;\r\n    }\r\n    while (minutes \u003c 0) {\r\n        minutes +\u003d MINUTES_PER_HOUR;\r\n        hours -\u003d 1;\r\n    }\r\n    while (hours \u003c 0) {\r\n        hours +\u003d HOURS_PER_DAY;\r\n        days -\u003d 1;\r\n    }\r\n    if (Token.containsTokenWithValue(tokens, M)) {\r\n        while (days \u003c 0) {\r\n            days +\u003d start.getActualMaximum(Calendar.DAY_OF_MONTH);\r\n            months -\u003d 1;\r\n            start.add(Calendar.MONTH, 1);\r\n        }\r\n        while (months \u003c 0) {\r\n            months +\u003d 12;\r\n            years -\u003d 1;\r\n        }\r\n        if (!Token.containsTokenWithValue(tokens, y) \u0026\u0026 years !\u003d 0) {\r\n            while (years !\u003d 0) {\r\n                months +\u003d 12 * years;\r\n                years \u003d 0;\r\n            }\r\n        }\r\n    } else {\r\n        // there are no M\u0027s in the format string\r\n        if (!Token.containsTokenWithValue(tokens, y)) {\r\n            int target \u003d end.get(Calendar.YEAR);\r\n            if (months \u003c 0) {\r\n                // target is end-year -1\r\n                target -\u003d 1;\r\n            }\r\n            while (start.get(Calendar.YEAR) !\u003d target) {\r\n                days +\u003d start.getActualMaximum(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);\r\n                // Not sure I grok why this is needed, but the brutal tests show it is\r\n                if (start instanceof GregorianCalendar \u0026\u0026 start.get(Calendar.MONTH) \u003d\u003d Calendar.FEBRUARY \u0026\u0026 start.get(Calendar.DAY_OF_MONTH) \u003d\u003d 29) {\r\n                    days +\u003d 1;\r\n                }\r\n                start.add(Calendar.YEAR, 1);\r\n                days +\u003d start.get(Calendar.DAY_OF_YEAR);\r\n            }\r\n            years \u003d 0;\r\n        }\r\n        while (start.get(Calendar.MONTH) !\u003d end.get(Calendar.MONTH)) {\r\n            days +\u003d start.getActualMaximum(Calendar.DAY_OF_MONTH);\r\n            start.add(Calendar.MONTH, 1);\r\n        }\r\n        months \u003d 0;\r\n        while (days \u003c 0) {\r\n            days +\u003d start.getActualMaximum(Calendar.DAY_OF_MONTH);\r\n            months -\u003d 1;\r\n            start.add(Calendar.MONTH, 1);\r\n        }\r\n    }\r\n    // The rest of this code adds in values that\r\n    // aren\u0027t requested. This allows the user to ask for the\r\n    // number of months and get the real count and not just 0-\u003e11.\r\n    if (!Token.containsTokenWithValue(tokens, d)) {\r\n        hours +\u003d HOURS_PER_DAY * days;\r\n        days \u003d 0;\r\n    }\r\n    if (!Token.containsTokenWithValue(tokens, H)) {\r\n        minutes +\u003d MINUTES_PER_HOUR * hours;\r\n        hours \u003d 0;\r\n    }\r\n    if (!Token.containsTokenWithValue(tokens, m)) {\r\n        seconds +\u003d SECONDS_PER_MINUTES * minutes;\r\n        minutes \u003d 0;\r\n    }\r\n    if (!Token.containsTokenWithValue(tokens, s)) {\r\n        milliseconds +\u003d DateUtils.MILLIS_PER_SECOND * seconds;\r\n        seconds \u003d 0;\r\n    }\r\n    return format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);\r\n}",
    "nodes": 45,
    "edges": 67,
    "cc": 24,
    "flowSummary": [
      "B0 : If($i53 \u003e 0) → B1 | else → B2",
      "B4 : If($i54 \u003e\u003d 0) → B5 | else → B6",
      "B6 : If(i40 \u003e\u003d 0) → B7 | else → B8",
      "B8 : If(i41 \u003e\u003d 0) → B9 | else → B10",
      "B10 : If(i42 \u003e\u003d 0) → B11 | else → B12",
      "B12 : If($z0 \u003d\u003d false) → B13 | else → B21",
      "B13 : If(i43 \u003e\u003d 0) → B14 | else → B15",
      "B15 : If(i44 \u003e\u003d 0) → B16 | else → B17",
      "B17 : If($z7 !\u003d 0) → B18 | else → B36",
      "B18 : If(i45 \u003d\u003d false) → B19 | else → B36",
      "B19 : If(i45 \u003d\u003d false) → B20 | else → B36",
      "B21 : If($z1 !\u003d 0) → B22 | else → B31",
      "B22 : If($i38 \u003e\u003d 0) → B23 | else → B24",
      "B24 : If($i48 \u003d\u003d i47) → B25 | else → B30",
      "B25 : If($z6 \u003d\u003d false) → B26 | else → B29",
      "B26 : If($i34 !\u003d 1) → B27 | else → B29",
      "B27 : If($i35 !\u003d 29) → B28 | else → B29",
      "B31 : If($i51 \u003d\u003d $i52) → B32 | else → B33",
      "B34 : If(i43 \u003e\u003d 0) → B35 | else → B36",
      "B36 : If($z9 !\u003d 0) → B37 | else → B38",
      "B38 : If($z2 !\u003d 0) → B39 | else → B40",
      "B40 : If($z3 !\u003d 0) → B41 | else → B42",
      "B42 : If($z4 !\u003d 0) → B43 | else → B44"
    ],
    "blockList": [
      "B0 {\n  l0 :\u003d @parameter0: long\n  l1 :\u003d @parameter1: long\n  String\n  z5 :\u003d @parameter3: boolean\n  TimeZone\n  $b2 \u003d l0 cmp l1\n  $i53 \u003d (int) $b2\n  if ($i53 \u003e 0) goto B1 else B2\n}",
      "B1 {\n  $z8 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z8 \u003d 0\n}",
      "B3 {\n  $r0 \u003d Object)[0]\n  Validate.isTrue($z8, \"startMillis must not be greater than endMillis\", $r0)\n  $r6 \u003d DurationFormatUtils.lexx(r1)\n  $r7 \u003d Calendar.getInstance(r2)\n  $r9 \u003d Date\n  new Date(l0)\n  $r7.setTime($r9)\n  $r8 \u003d Calendar.getInstance(r2)\n  $r10 \u003d Date\n  new Date(l1)\n  $r8.setTime($r10)\n  $i4 \u003d $r8.get(14)\n  $i3 \u003d $r7.get(14)\n  $i5 \u003d $i4 - $i3\n  l39 \u003d (long) $i5\n  $i7 \u003d $r8.get(13)\n  $i6 \u003d $r7.get(13)\n  i40 \u003d $i7 - $i6\n  $i9 \u003d $r8.get(12)\n  $i8 \u003d $r7.get(12)\n  i41 \u003d $i9 - $i8\n  $i11 \u003d $r8.get(11)\n  $i10 \u003d $r7.get(11)\n  i42 \u003d $i11 - $i10\n  $i13 \u003d $r8.get(5)\n  $i12 \u003d $r7.get(5)\n  i43 \u003d $i13 - $i12\n  $i15 \u003d $r8.get(2)\n  $i14 \u003d $r7.get(2)\n  $i38 \u003d $i15 - $i14\n  i44 \u003d $i38\n  $i17 \u003d $r8.get(1)\n  $i16 \u003d $r7.get(1)\n  i45 \u003d $i17 - $i16\n}",
      "B4 {\n  $b46 \u003d l39 cmp 0L\n  $i54 \u003d (int) $b46\n  if ($i54 \u003e\u003d 0) goto B5 else B6\n}",
      "B5 {\n  l39 \u003d l39 + 1000L\n  $i56 \u003d (int) -1\n  i40 \u003d i40 + $i56\n  goto B4\n}",
      "B6 {\n  if (i40 \u003e\u003d 0) goto B7 else B8\n}",
      "B7 {\n  i40 \u003d i40 + 60\n  $i58 \u003d (int) -1\n  i41 \u003d i41 + $i58\n  goto B6\n}",
      "B8 {\n  if (i41 \u003e\u003d 0) goto B9 else B10\n}",
      "B9 {\n  i41 \u003d i41 + 60\n  $i60 \u003d (int) -1\n  i42 \u003d i42 + $i60\n  goto B8\n}",
      "B10 {\n  if (i42 \u003e\u003d 0) goto B11 else B12\n}",
      "B11 {\n  i42 \u003d i42 + 24\n  $i62 \u003d (int) -1\n  i43 \u003d i43 + $i62\n  goto B10\n}",
      "B12 {\n  $z0 \u003d DurationFormatUtils$Token.containsTokenWithValue($r6, \"M\")\n  if ($z0 \u003d\u003d false) goto B13 else B21\n}",
      "B13 {\n  if (i43 \u003e\u003d 0) goto B14 else B15\n}",
      "B14 {\n  $i37 \u003d $r7.getActualMaximum(5)\n  i43 \u003d i43 + $i37\n  $i64 \u003d (int) -1\n  i44 \u003d i44 + $i64\n  $r7.add(2, 1)\n  goto B13\n}",
      "B15 {\n  if (i44 \u003e\u003d 0) goto B16 else B17\n}",
      "B16 {\n  i44 \u003d i44 + 12\n  $i66 \u003d (int) -1\n  i45 \u003d i45 + $i66\n  goto B15\n}",
      "B17 {\n  $z7 \u003d DurationFormatUtils$Token.containsTokenWithValue($r6, \"y\")\n  if ($z7 !\u003d 0) goto B18 else B36\n}",
      "B18 {\n  if (i45 \u003d\u003d false) goto B19 else B36\n}",
      "B19 {\n  if (i45 \u003d\u003d false) goto B20 else B36\n}",
      "B20 {\n  $i36 \u003d 12 * i45\n  i44 \u003d i44 + $i36\n  i45 \u003d 0\n  goto B19\n}",
      "B21 {\n  $z1 \u003d DurationFormatUtils$Token.containsTokenWithValue($r6, \"y\")\n  if ($z1 !\u003d 0) goto B22 else B31\n}",
      "B22 {\n  i47 \u003d $r8.get(1)\n  if ($i38 \u003e\u003d 0) goto B23 else B24\n}",
      "B23 {\n  $i68 \u003d (int) -1\n  i47 \u003d i47 + $i68\n}",
      "B24 {\n  $i48 \u003d $r7.get(1)\n  if ($i48 \u003d\u003d i47) goto B25 else B30\n}",
      "B25 {\n  $i32 \u003d $r7.getActualMaximum(6)\n  $i31 \u003d $r7.get(6)\n  $i33 \u003d $i32 - $i31\n  i49 \u003d i43 + $i33\n  $z6 \u003d GregorianCalendar\n  if ($z6 \u003d\u003d false) goto B26 else B29\n}",
      "B26 {\n  $i34 \u003d $r7.get(2)\n  if ($i34 !\u003d 1) goto B27 else B29\n}",
      "B27 {\n  $i35 \u003d $r7.get(5)\n  if ($i35 !\u003d 29) goto B28 else B29\n}",
      "B28 {\n  i49 \u003d i49 + 1\n}",
      "B29 {\n  $r7.add(1, 1)\n  $i50 \u003d $r7.get(6)\n  i43 \u003d i49 + $i50\n  goto B24\n}",
      "B30 {\n  i45 \u003d 0\n}",
      "B31 {\n  $i51 \u003d $r7.get(2)\n  $i52 \u003d $r8.get(2)\n  if ($i51 \u003d\u003d $i52) goto B32 else B33\n}",
      "B32 {\n  $i30 \u003d $r7.getActualMaximum(5)\n  i43 \u003d i43 + $i30\n  $r7.add(2, 1)\n  goto B31\n}",
      "B33 {\n  i44 \u003d 0\n}",
      "B34 {\n  if (i43 \u003e\u003d 0) goto B35 else B36\n}",
      "B35 {\n  $i29 \u003d $r7.getActualMaximum(5)\n  i43 \u003d i43 + $i29\n  $i70 \u003d (int) -1\n  i44 \u003d i44 + $i70\n  $r7.add(2, 1)\n  goto B34\n}",
      "B36 {\n  $z9 \u003d DurationFormatUtils$Token.containsTokenWithValue($r6, \"d\")\n  if ($z9 !\u003d 0) goto B37 else B38\n}",
      "B37 {\n  $i28 \u003d 24 * i43\n  i42 \u003d i42 + $i28\n  i43 \u003d 0\n}",
      "B38 {\n  $z2 \u003d DurationFormatUtils$Token.containsTokenWithValue($r6, \"H\")\n  if ($z2 !\u003d 0) goto B39 else B40\n}",
      "B39 {\n  $i27 \u003d 60 * i42\n  i41 \u003d i41 + $i27\n  i42 \u003d 0\n}",
      "B40 {\n  $z3 \u003d DurationFormatUtils$Token.containsTokenWithValue($r6, \"m\")\n  if ($z3 !\u003d 0) goto B41 else B42\n}",
      "B41 {\n  $i26 \u003d 60 * i41\n  i40 \u003d i40 + $i26\n  i41 \u003d 0\n}",
      "B42 {\n  $z4 \u003d DurationFormatUtils$Token.containsTokenWithValue($r6, \"s\")\n  if ($z4 !\u003d 0) goto B43 else B44\n}",
      "B43 {\n  $l24 \u003d (long) i40\n  $l25 \u003d 1000L * $l24\n  l39 \u003d l39 + $l25\n  i40 \u003d 0\n}",
      "B44 {\n  $l23 \u003d (long) i45\n  $l22 \u003d (long) i44\n  $l21 \u003d (long) i43\n  $l20 \u003d (long) i42\n  $l19 \u003d (long) i41\n  $l18 \u003d (long) i40\n  $r5 \u003d DurationFormatUtils.format($r6, $l23, $l22, $l21, $l20, $l19, $l18, l39, z5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B6",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B8",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B10",
      "B12 --\u003e B13",
      "B12 --\u003e B21",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B13",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B15",
      "B17 --\u003e B18",
      "B17 --\u003e B36",
      "B18 --\u003e B19",
      "B18 --\u003e B36",
      "B19 --\u003e B20",
      "B19 --\u003e B36",
      "B20 --\u003e B19",
      "B21 --\u003e B22",
      "B21 --\u003e B31",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B24",
      "B24 --\u003e B25",
      "B24 --\u003e B30",
      "B25 --\u003e B26",
      "B25 --\u003e B29",
      "B26 --\u003e B27",
      "B26 --\u003e B29",
      "B27 --\u003e B28",
      "B27 --\u003e B29",
      "B28 --\u003e B29",
      "B29 --\u003e B24",
      "B30 --\u003e B31",
      "B31 --\u003e B32",
      "B31 --\u003e B33",
      "B32 --\u003e B31",
      "B33 --\u003e B34",
      "B34 --\u003e B35",
      "B34 --\u003e B36",
      "B35 --\u003e B34",
      "B36 --\u003e B37",
      "B36 --\u003e B38",
      "B37 --\u003e B38",
      "B38 --\u003e B39",
      "B38 --\u003e B40",
      "B39 --\u003e B40",
      "B40 --\u003e B41",
      "B40 --\u003e B42",
      "B41 --\u003e B42",
      "B42 --\u003e B43",
      "B42 --\u003e B44",
      "B43 --\u003e B44",
      "B44 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DurationFormatUtils#lexx(...1)",
        "body": "{\r\n    final ArrayList\u003cToken\u003e list \u003d new ArrayList\u003c\u003e(format.length());\r\n    boolean inLiteral \u003d false;\r\n    // Although the buffer is stored in a Token, the Tokens are only\r\n    // used internally, so cannot be accessed by other threads\r\n    StringBuilder buffer \u003d null;\r\n    Token previous \u003d null;\r\n    boolean inOptional \u003d false;\r\n    int optionalIndex \u003d -1;\r\n    for (int i \u003d 0; i \u003c format.length(); i++) {\r\n        final char ch \u003d format.charAt(i);\r\n        if (inLiteral \u0026\u0026 ch !\u003d \u0027\\\u0027\u0027) {\r\n            // buffer can\u0027t be null if inLiteral is true\r\n            buffer.append(ch);\r\n            continue;\r\n        }\r\n        String value \u003d null;\r\n        switch(ch) {\r\n            // TODO: Need to handle escaping of \u0027\r\n            case \u0027[\u0027:\r\n                if (inOptional) {\r\n                    throw new IllegalArgumentException(\"Nested optional block at index: \" + i);\r\n                }\r\n                optionalIndex++;\r\n                inOptional \u003d true;\r\n                break;\r\n            case \u0027]\u0027:\r\n                if (!inOptional) {\r\n                    throw new IllegalArgumentException(\"Attempting to close unopened optional block at index: \" + i);\r\n                }\r\n                inOptional \u003d false;\r\n                break;\r\n            case \u0027\\\u0027\u0027:\r\n                if (inLiteral) {\r\n                    buffer \u003d null;\r\n                    inLiteral \u003d false;\r\n                } else {\r\n                    buffer \u003d new StringBuilder();\r\n                    list.add(new Token(buffer, inOptional, optionalIndex));\r\n                    inLiteral \u003d true;\r\n                }\r\n                break;\r\n            case \u0027y\u0027:\r\n                value \u003d y;\r\n                break;\r\n            case \u0027M\u0027:\r\n                value \u003d M;\r\n                break;\r\n            case \u0027d\u0027:\r\n                value \u003d d;\r\n                break;\r\n            case \u0027H\u0027:\r\n                value \u003d H;\r\n                break;\r\n            case \u0027m\u0027:\r\n                value \u003d m;\r\n                break;\r\n            case \u0027s\u0027:\r\n                value \u003d s;\r\n                break;\r\n            case \u0027S\u0027:\r\n                value \u003d S;\r\n                break;\r\n            default:\r\n                if (buffer \u003d\u003d null) {\r\n                    buffer \u003d new StringBuilder();\r\n                    list.add(new Token(buffer, inOptional, optionalIndex));\r\n                }\r\n                buffer.append(ch);\r\n        }\r\n        if (value !\u003d null) {\r\n            if (previous !\u003d null \u0026\u0026 previous.getValue().equals(value)) {\r\n                previous.increment();\r\n            } else {\r\n                final Token token \u003d new Token(value, inOptional, optionalIndex);\r\n                list.add(token);\r\n                previous \u003d token;\r\n            }\r\n            buffer \u003d null;\r\n        }\r\n    }\r\n    if (inLiteral) {\r\n        // i.e. we have not found the end of the literal\r\n        throw new IllegalArgumentException(\"Unmatched quote in format: \" + format);\r\n    }\r\n    if (inOptional) {\r\n        // i.e. we have not found the end of the literal\r\n        throw new IllegalArgumentException(\"Unmatched optional in format: \" + format);\r\n    }\r\n    return list.toArray(Token.EMPTY_ARRAY);\r\n}"
      },
      {
        "name": "DurationFormatUtils#format(...9)",
        "body": "{\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    boolean lastOutputSeconds \u003d false;\r\n    boolean lastOutputZero \u003d false;\r\n    int optionalStart \u003d -1;\r\n    boolean firstOptionalNonLiteral \u003d false;\r\n    int optionalIndex \u003d -1;\r\n    boolean inOptional \u003d false;\r\n    for (final Token token : tokens) {\r\n        final Object value \u003d token.getValue();\r\n        final boolean isLiteral \u003d value instanceof StringBuilder;\r\n        final int count \u003d token.getCount();\r\n        if (optionalIndex !\u003d token.optionalIndex) {\r\n            optionalIndex \u003d token.optionalIndex;\r\n            if (optionalIndex \u003e -1) {\r\n                //entering new optional block\r\n                optionalStart \u003d buffer.length();\r\n                lastOutputZero \u003d false;\r\n                inOptional \u003d true;\r\n                firstOptionalNonLiteral \u003d false;\r\n            } else {\r\n                //leaving optional block\r\n                inOptional \u003d false;\r\n            }\r\n        }\r\n        if (isLiteral) {\r\n            if (!inOptional || !lastOutputZero) {\r\n                buffer.append(value.toString());\r\n            }\r\n        } else if (value.equals(y)) {\r\n            lastOutputSeconds \u003d false;\r\n            lastOutputZero \u003d years \u003d\u003d 0;\r\n            if (!inOptional || !lastOutputZero) {\r\n                buffer.append(paddedValue(years, padWithZeros, count));\r\n            }\r\n        } else if (value.equals(M)) {\r\n            lastOutputSeconds \u003d false;\r\n            lastOutputZero \u003d months \u003d\u003d 0;\r\n            if (!inOptional || !lastOutputZero) {\r\n                buffer.append(paddedValue(months, padWithZeros, count));\r\n            }\r\n        } else if (value.equals(d)) {\r\n            lastOutputSeconds \u003d false;\r\n            lastOutputZero \u003d days \u003d\u003d 0;\r\n            if (!inOptional || !lastOutputZero) {\r\n                buffer.append(paddedValue(days, padWithZeros, count));\r\n            }\r\n        } else if (value.equals(H)) {\r\n            lastOutputSeconds \u003d false;\r\n            lastOutputZero \u003d hours \u003d\u003d 0;\r\n            if (!inOptional || !lastOutputZero) {\r\n                buffer.append(paddedValue(hours, padWithZeros, count));\r\n            }\r\n        } else if (value.equals(m)) {\r\n            lastOutputSeconds \u003d false;\r\n            lastOutputZero \u003d minutes \u003d\u003d 0;\r\n            if (!inOptional || !lastOutputZero) {\r\n                buffer.append(paddedValue(minutes, padWithZeros, count));\r\n            }\r\n        } else if (value.equals(s)) {\r\n            lastOutputSeconds \u003d true;\r\n            lastOutputZero \u003d seconds \u003d\u003d 0;\r\n            if (!inOptional || !lastOutputZero) {\r\n                buffer.append(paddedValue(seconds, padWithZeros, count));\r\n            }\r\n        } else if (value.equals(S)) {\r\n            lastOutputZero \u003d milliseconds \u003d\u003d 0;\r\n            if (!inOptional || !lastOutputZero) {\r\n                if (lastOutputSeconds) {\r\n                    // ensure at least 3 digits are displayed even if padding is not selected\r\n                    final int width \u003d padWithZeros ? Math.max(3, count) : 3;\r\n                    buffer.append(paddedValue(milliseconds, true, width));\r\n                } else {\r\n                    buffer.append(paddedValue(milliseconds, padWithZeros, count));\r\n                }\r\n            }\r\n            lastOutputSeconds \u003d false;\r\n        }\r\n        //as soon as we hit first nonliteral in optional, check for literal prefix\r\n        if (inOptional \u0026\u0026 !isLiteral \u0026\u0026 !firstOptionalNonLiteral) {\r\n            firstOptionalNonLiteral \u003d true;\r\n            if (lastOutputZero) {\r\n                buffer.delete(optionalStart, buffer.length());\r\n            }\r\n        }\r\n    }\r\n    return buffer.toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.time.DurationUtils",
    "methodName": "accept",
    "signature": "void accept(org.apache.commons.lang3.function.FailableBiConsumer,java.time.Duration)",
    "visibility": "public",
    "body": "{\r\n    if (consumer !\u003d null \u0026\u0026 duration !\u003d null) {\r\n        consumer.accept(duration.toMillis(), getNanosOfMilli(duration));\r\n    }\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r1 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  FailableBiConsumer\n  Duration\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  if (r1 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $l0 \u003d r1.toMillis()\n  $r3 \u003d Long.valueOf($l0)\n  $i1 \u003d DurationUtils.getNanosOfMilli(r1)\n  $r2 \u003d Integer.valueOf($i1)\n  r0.accept($r3, $r2)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DurationUtils#getNanosOfMilli(...1)",
        "body": "{\r\n    return zeroIfNull(duration).getNano() % 1_000_000;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.time.DurationUtils",
    "methodName": "isPositive",
    "signature": "boolean isPositive(java.time.Duration)",
    "visibility": "public",
    "body": "{\r\n    return !duration.isNegative() \u0026\u0026 !duration.isZero();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Duration\n  $z0 \u003d r0.isNegative()\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $z1 \u003d r0.isZero()\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.time.FastDateFormat",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (!(obj instanceof FastDateFormat)) {\r\n        return false;\r\n    }\r\n    final FastDateFormat other \u003d (FastDateFormat) obj;\r\n    // no need to check parser, as it has same invariants as printer\r\n    return printer.equals(other.printer);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  FastDateFormat\n  Object\n  $z0 \u003d FastDateFormat\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r1 \u003d FastDateFormat) r0\n  $r4 \u003d FastDatePrinter printer\u003e\n  $r3 \u003d FastDatePrinter printer\u003e\n  $z1 \u003d $r4.equals($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.time.FastDateParser",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (!(obj instanceof FastDateParser)) {\r\n        return false;\r\n    }\r\n    final FastDateParser other \u003d (FastDateParser) obj;\r\n    return pattern.equals(other.pattern) \u0026\u0026 timeZone.equals(other.timeZone) \u0026\u0026 locale.equals(other.locale);\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B6",
      "B3 : If($z2 \u003d\u003d false) → B4 | else → B6",
      "B4 : If($z3 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  FastDateParser\n  Object\n  $z0 \u003d FastDateParser\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r1 \u003d FastDateParser) r0\n  $r4 \u003d String pattern\u003e\n  $r3 \u003d String pattern\u003e\n  $z1 \u003d $r4.equals($r3)\n  if ($z1 \u003d\u003d false) goto B3 else B6\n}",
      "B3 {\n  $r6 \u003d TimeZone timeZone\u003e\n  $r5 \u003d TimeZone timeZone\u003e\n  $z2 \u003d $r6.equals($r5)\n  if ($z2 \u003d\u003d false) goto B4 else B6\n}",
      "B4 {\n  $r8 \u003d Locale locale\u003e\n  $r7 \u003d Locale locale\u003e\n  $z3 \u003d $r8.equals($r7)\n  if ($z3 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $z4 \u003d 1\n  goto B7\n}",
      "B6 {\n  $z4 \u003d 0\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.time.FastDateParser",
    "methodName": "parse",
    "signature": "java.util.Date parse(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    final ParsePosition pp \u003d new ParsePosition(0);\r\n    final Date date \u003d parse(source, pp);\r\n    if (date \u003d\u003d null) {\r\n        // Add a note regarding supported date range\r\n        if (locale.equals(JAPANESE_IMPERIAL)) {\r\n            throw new ParseException(\"(The \" + locale + \" locale does not support dates before 1868 AD)\\nUnparseable date: \\\"\" + source, pp.getErrorIndex());\r\n        }\r\n        throw new ParseException(\"Unparseable date: \" + source, pp.getErrorIndex());\r\n    }\r\n    return date;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B4",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  FastDateParser\n  String\n  $r0 \u003d ParsePosition\n  new ParsePosition(0)\n  r3 \u003d r1.parse(r2, $r0)\n  if (r3 !\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r5 \u003d Locale locale\u003e\n  $r4 \u003d Locale JAPANESE_IMPERIAL\u003e\n  $z0 \u003d $r5.equals($r4)\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r11 \u003d ParseException\n  $r12 \u003d StringBuilder\n  new StringBuilder()\n  $r14 \u003d $r12.append(\"(The \")\n  $r13 \u003d Locale locale\u003e\n  $r15 \u003d $r14.append($r13)\n  $r16 \u003d $r15.append(\" locale does not support dates before 1868 AD)\\nUnparseable date: \\\"\")\n  $r17 \u003d $r16.append(r2)\n  $r18 \u003d $r17.toString()\n  $i1 \u003d $r0.getErrorIndex()\n  new ParseException($r18, $i1)\n  throw $r11\n}",
      "B3 {\n  $r6 \u003d ParseException\n  $r7 \u003d StringBuilder\n  new StringBuilder()\n  $r8 \u003d $r7.append(\"Unparseable date: \")\n  $r9 \u003d $r8.append(r2)\n  $r10 \u003d $r9.toString()\n  $i0 \u003d $r0.getErrorIndex()\n  new ParseException($r10, $i0)\n  throw $r6\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FastDateParser#parse(...2)",
        "body": "{\r\n    // timing tests indicate getting new instance is 19% faster than cloning\r\n    final Calendar cal \u003d Calendar.getInstance(timeZone, locale);\r\n    cal.clear();\r\n    return parse(source, pos, cal) ? cal.getTime() : null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.time.FastDateParser",
    "methodName": "parse",
    "signature": "java.util.Date parse(java.lang.String,java.text.ParsePosition)",
    "visibility": "public",
    "body": "{\r\n    // timing tests indicate getting new instance is 19% faster than cloning\r\n    final Calendar cal \u003d Calendar.getInstance(timeZone, locale);\r\n    cal.clear();\r\n    return parse(source, pos, cal) ? cal.getTime() : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  FastDateParser\n  String\n  ParsePosition\n  $r2 \u003d TimeZone timeZone\u003e\n  $r1 \u003d Locale locale\u003e\n  r3 \u003d Calendar.getInstance($r2, $r1)\n  r3.clear()\n  $z0 \u003d r0.parse(r4, r5, r3)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d r3.getTime()\n  goto B3\n}",
      "B2 {\n  $r6 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FastDateParser#parse(...3)",
        "body": "{\r\n    final ListIterator\u003cStrategyAndWidth\u003e lt \u003d patterns.listIterator();\r\n    while (lt.hasNext()) {\r\n        final StrategyAndWidth strategyAndWidth \u003d lt.next();\r\n        final int maxWidth \u003d strategyAndWidth.getMaxWidth(lt);\r\n        if (!strategyAndWidth.strategy.parse(this, calendar, source, pos, maxWidth)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.time.FastDateParser",
    "methodName": "parse",
    "signature": "boolean parse(java.lang.String,java.text.ParsePosition,java.util.Calendar)",
    "visibility": "public",
    "body": "{\r\n    final ListIterator\u003cStrategyAndWidth\u003e lt \u003d patterns.listIterator();\r\n    while (lt.hasNext()) {\r\n        final StrategyAndWidth strategyAndWidth \u003d lt.next();\r\n        final int maxWidth \u003d strategyAndWidth.getMaxWidth(lt);\r\n        if (!strategyAndWidth.strategy.parse(this, calendar, source, pos, maxWidth)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  FastDateParser\n  String\n  ParsePosition\n  Calendar\n  $r1 \u003d List patterns\u003e\n  r2 \u003d $r1.listIterator()\n}",
      "B1 {\n  $z0 \u003d r2.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r3 \u003d r2.next()\n  r4 \u003d FastDateParser$StrategyAndWidth) $r3\n  i0 \u003d r4.getMaxWidth(r2)\n  $r8 \u003d FastDateParser$Strategy strategy\u003e\n  $z1 \u003d $r8.parse(r0, r5, r6, r7, i0)\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.time.FastDatePrinter",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (!(obj instanceof FastDatePrinter)) {\r\n        return false;\r\n    }\r\n    final FastDatePrinter other \u003d (FastDatePrinter) obj;\r\n    return pattern.equals(other.pattern) \u0026\u0026 timeZone.equals(other.timeZone) \u0026\u0026 locale.equals(other.locale);\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B6",
      "B3 : If($z2 \u003d\u003d false) → B4 | else → B6",
      "B4 : If($z3 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  FastDatePrinter\n  Object\n  $z0 \u003d FastDatePrinter\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r1 \u003d FastDatePrinter) r0\n  $r4 \u003d String pattern\u003e\n  $r3 \u003d String pattern\u003e\n  $z1 \u003d $r4.equals($r3)\n  if ($z1 \u003d\u003d false) goto B3 else B6\n}",
      "B3 {\n  $r6 \u003d TimeZone timeZone\u003e\n  $r5 \u003d TimeZone timeZone\u003e\n  $z2 \u003d $r6.equals($r5)\n  if ($z2 \u003d\u003d false) goto B4 else B6\n}",
      "B4 {\n  $r8 \u003d Locale locale\u003e\n  $r7 \u003d Locale locale\u003e\n  $z3 \u003d $r8.equals($r7)\n  if ($z3 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $z4 \u003d 1\n  goto B7\n}",
      "B6 {\n  $z4 \u003d 0\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.time.FastDatePrinter",
    "methodName": "format",
    "signature": "java.lang.Appendable format(java.util.Calendar,java.lang.Appendable)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  FastDatePrinter\n  Calendar\n  Appendable\n  $r2 \u003d r7.getTimeZone()\n  $r1 \u003d TimeZone timeZone\u003e\n  $z0 \u003d $r2.equals($r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d r7.clone()\n  r7 \u003d Calendar) $r5\n  $r6 \u003d TimeZone timeZone\u003e\n  r7.setTimeZone($r6)\n}",
      "B2 {\n  $r4 \u003d r0.applyRules(r7, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.time.FastDatePrinter",
    "methodName": "format",
    "signature": "java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)",
    "visibility": "public",
    "body": "{\r\n    if (obj instanceof Date) {\r\n        return format((Date) obj, toAppendTo);\r\n    }\r\n    if (obj instanceof Calendar) {\r\n        return format((Calendar) obj, toAppendTo);\r\n    }\r\n    if (obj instanceof Long) {\r\n        return format(((Long) obj).longValue(), toAppendTo);\r\n    }\r\n    throw new IllegalArgumentException(\"Unknown class: \" + ClassUtils.getName(obj, \"\u003cnull\u003e\"));\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  FastDatePrinter\n  Object\n  StringBuffer\n  FieldPosition\n  $z0 \u003d Date\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r13 \u003d Date) r0\n  $r14 \u003d r7.format($r13, r9)\n  return\n}",
      "B2 {\n  $z1 \u003d Calendar\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r11 \u003d Calendar) r0\n  $r12 \u003d r7.format($r11, r9)\n  return\n}",
      "B4 {\n  $z2 \u003d Long\n  if ($z2 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r8 \u003d Long) r0\n  $l0 \u003d $r8.longValue()\n  $r10 \u003d r7.format($l0, r9)\n  return\n}",
      "B6 {\n  $r1 \u003d IllegalArgumentException\n  $r2 \u003d StringBuilder\n  new StringBuilder()\n  $r4 \u003d $r2.append(\"Unknown class: \")\n  $r3 \u003d ClassUtils.getName(r0, \"\u003cnull\u003e\")\n  $r5 \u003d $r4.append($r3)\n  $r6 \u003d $r5.toString()\n  new IllegalArgumentException($r6)\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FastDatePrinter#format(...2)",
        "body": "{\r\n    // do not pass in calendar directly, this will cause TimeZone of FastDatePrinter to be ignored\r\n    if (!calendar.getTimeZone().equals(timeZone)) {\r\n        calendar \u003d (Calendar) calendar.clone();\r\n        calendar.setTimeZone(timeZone);\r\n    }\r\n    return applyRules(calendar, buf);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.time.FastTimeZone",
    "methodName": "getGmtTimeZone",
    "signature": "java.util.TimeZone getGmtTimeZone(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (\"Z\".equals(pattern) || \"UTC\".equals(pattern)) {\r\n        return GREENWICH;\r\n    }\r\n    final Matcher m \u003d GMT_PATTERN.matcher(pattern);\r\n    if (m.matches()) {\r\n        final int hours \u003d parseInt(m.group(2));\r\n        final int minutes \u003d parseInt(m.group(4));\r\n        if (hours \u003d\u003d 0 \u0026\u0026 minutes \u003d\u003d 0) {\r\n            return GREENWICH;\r\n        }\r\n        return new GmtTimeZone(parseSign(m.group(1)), hours, minutes);\r\n    }\r\n    return null;\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B3 : If($z2 \u003d\u003d false) → B4 | else → B8",
      "B4 : If(i0 !\u003d 0) → B5 | else → B7",
      "B5 : If(i1 !\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  String\n  $r1 \u003d \"Z\"\n  $z0 \u003d $r1.equals(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d \"UTC\"\n  $z1 \u003d $r3.equals(r0)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d TimeZone GREENWICH\u003e\n  return\n}",
      "B3 {\n  $r4 \u003d Pattern GMT_PATTERN\u003e\n  r5 \u003d $r4.matcher(r0)\n  $z2 \u003d r5.matches()\n  if ($z2 \u003d\u003d false) goto B4 else B8\n}",
      "B4 {\n  $r6 \u003d r5.group(2)\n  i0 \u003d FastTimeZone.parseInt($r6)\n  $r7 \u003d r5.group(4)\n  i1 \u003d FastTimeZone.parseInt($r7)\n  if (i0 !\u003d 0) goto B5 else B7\n}",
      "B5 {\n  if (i1 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $r10 \u003d TimeZone GREENWICH\u003e\n  return\n}",
      "B7 {\n  $r8 \u003d GmtTimeZone\n  $r9 \u003d r5.group(1)\n  $z3 \u003d FastTimeZone.parseSign($r9)\n  new GmtTimeZone($z3, i0, i1)\n  return\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FastTimeZone#parseSign(...1)",
        "body": "{\r\n    return group !\u003d null \u0026\u0026 group.charAt(0) \u003d\u003d \u0027-\u0027;\r\n}"
      },
      {
        "name": "FastTimeZone#parseInt(...1)",
        "body": "{\r\n    return group !\u003d null ? Integer.parseInt(group) : 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.time.FastTimeZone",
    "methodName": "getTimeZone",
    "signature": "java.util.TimeZone getTimeZone(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    final TimeZone tz \u003d getGmtTimeZone(id);\r\n    if (tz !\u003d null) {\r\n        return tz;\r\n    }\r\n    return TimeZone.getTimeZone(id);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  r1 \u003d FastTimeZone.getGmtTimeZone(r0)\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d TimeZone.getTimeZone(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FastTimeZone#getGmtTimeZone(...1)",
        "body": "{\r\n    if (\"Z\".equals(pattern) || \"UTC\".equals(pattern)) {\r\n        return GREENWICH;\r\n    }\r\n    final Matcher m \u003d GMT_PATTERN.matcher(pattern);\r\n    if (m.matches()) {\r\n        final int hours \u003d parseInt(m.group(2));\r\n        final int minutes \u003d parseInt(m.group(4));\r\n        if (hours \u003d\u003d 0 \u0026\u0026 minutes \u003d\u003d 0) {\r\n            return GREENWICH;\r\n        }\r\n        return new GmtTimeZone(parseSign(m.group(1)), hours, minutes);\r\n    }\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.time.StopWatch",
    "methodName": "getNanoTime",
    "signature": "long getNanoTime()",
    "visibility": "public",
    "body": "{\r\n    if (runningState \u003d\u003d State.STOPPED || runningState \u003d\u003d State.SUSPENDED) {\r\n        return stopTimeNanos - startTimeNanos;\r\n    }\r\n    if (runningState \u003d\u003d State.UNSTARTED) {\r\n        return 0;\r\n    }\r\n    if (runningState \u003d\u003d State.RUNNING) {\r\n        return System.nanoTime() - startTimeNanos;\r\n    }\r\n    throw new IllegalStateException(\"Illegal running state has occurred.\");\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d $r1) → B1 | else → B2",
      "B1 : If($r4 !\u003d $r3) → B2 | else → B3",
      "B3 : If($r6 !\u003d $r5) → B4 | else → B5",
      "B5 : If($r8 !\u003d $r7) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  StopWatch\n  $r2 \u003d StopWatch$State runningState\u003e\n  $r1 \u003d StopWatch$State STOPPED\u003e\n  if ($r2 \u003d\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d StopWatch$State runningState\u003e\n  $r3 \u003d StopWatch$State SUSPENDED\u003e\n  if ($r4 !\u003d $r3) goto B2 else B3\n}",
      "B2 {\n  $l1 \u003d StopWatch: long stopTimeNanos\u003e\n  $l0 \u003d StopWatch: long startTimeNanos\u003e\n  $l2 \u003d $l1 - $l0\n  return\n}",
      "B3 {\n  $r6 \u003d StopWatch$State runningState\u003e\n  $r5 \u003d StopWatch$State UNSTARTED\u003e\n  if ($r6 !\u003d $r5) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r8 \u003d StopWatch$State runningState\u003e\n  $r7 \u003d StopWatch$State RUNNING\u003e\n  if ($r8 !\u003d $r7) goto B6 else B7\n}",
      "B6 {\n  $l4 \u003d System.nanoTime()\n  $l3 \u003d StopWatch: long startTimeNanos\u003e\n  $l5 \u003d $l4 - $l3\n  return\n}",
      "B7 {\n  $r9 \u003d IllegalStateException\n  new IllegalStateException(\"Illegal running state has occurred.\")\n  throw $r9\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.time.StopWatch",
    "methodName": "getSplitNanoTime",
    "signature": "long getSplitNanoTime()",
    "visibility": "public",
    "body": "{\r\n    if (splitState !\u003d SplitState.SPLIT) {\r\n        throw new IllegalStateException(\"Stopwatch must be split to get the split time.\");\r\n    }\r\n    return stopTimeNanos - startTimeNanos;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StopWatch\n  $r2 \u003d StopWatch$SplitState splitState\u003e\n  $r1 \u003d StopWatch$SplitState SPLIT\u003e\n  if ($r2 \u003d\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IllegalStateException\n  new IllegalStateException(\"Stopwatch must be split to get the split time.\")\n  throw $r3\n}",
      "B2 {\n  $l1 \u003d StopWatch: long stopTimeNanos\u003e\n  $l0 \u003d StopWatch: long startTimeNanos\u003e\n  $l2 \u003d $l1 - $l0\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.time.StopWatch",
    "methodName": "getStartTime",
    "signature": "long getStartTime()",
    "visibility": "public",
    "body": "{\r\n    if (runningState \u003d\u003d State.UNSTARTED) {\r\n        throw new IllegalStateException(\"Stopwatch has not been started\");\r\n    }\r\n    // stopTimeNanos stores System.nanoTime() for elapsed time\r\n    return startInstant.toEpochMilli();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StopWatch\n  $r2 \u003d StopWatch$State runningState\u003e\n  $r1 \u003d StopWatch$State UNSTARTED\u003e\n  if ($r2 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalStateException\n  new IllegalStateException(\"Stopwatch has not been started\")\n  throw $r4\n}",
      "B2 {\n  $r3 \u003d Instant startInstant\u003e\n  $l0 \u003d $r3.toEpochMilli()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.time.StopWatch",
    "methodName": "getStopTime",
    "signature": "long getStopTime()",
    "visibility": "public",
    "body": "{\r\n    if (runningState \u003d\u003d State.UNSTARTED) {\r\n        throw new IllegalStateException(\"Stopwatch has not been started\");\r\n    }\r\n    // stopTimeNanos stores System.nanoTime() for elapsed time\r\n    return stopInstant.toEpochMilli();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StopWatch\n  $r2 \u003d StopWatch$State runningState\u003e\n  $r1 \u003d StopWatch$State UNSTARTED\u003e\n  if ($r2 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalStateException\n  new IllegalStateException(\"Stopwatch has not been started\")\n  throw $r4\n}",
      "B2 {\n  $r3 \u003d Instant stopInstant\u003e\n  $l0 \u003d $r3.toEpochMilli()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.time.StopWatch",
    "methodName": "resume",
    "signature": "void resume()",
    "visibility": "public",
    "body": "{\r\n    if (runningState !\u003d State.SUSPENDED) {\r\n        throw new IllegalStateException(\"Stopwatch must be suspended to resume. \");\r\n    }\r\n    startTimeNanos +\u003d System.nanoTime() - stopTimeNanos;\r\n    runningState \u003d State.RUNNING;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StopWatch\n  $r2 \u003d StopWatch$State runningState\u003e\n  $r1 \u003d StopWatch$State SUSPENDED\u003e\n  if ($r2 \u003d\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalStateException\n  new IllegalStateException(\"Stopwatch must be suspended to resume. \")\n  throw $r4\n}",
      "B2 {\n  $l0 \u003d StopWatch: long startTimeNanos\u003e\n  $l2 \u003d System.nanoTime()\n  $l1 \u003d StopWatch: long stopTimeNanos\u003e\n  $l3 \u003d $l2 - $l1\n  $l4 \u003d $l0 + $l3\n  StopWatch: long startTimeNanos\u003e \u003d $l4\n  $r3 \u003d StopWatch$State RUNNING\u003e\n  StopWatch$State runningState\u003e \u003d $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.time.StopWatch",
    "methodName": "split",
    "signature": "void split()",
    "visibility": "public",
    "body": "{\r\n    if (runningState !\u003d State.RUNNING) {\r\n        throw new IllegalStateException(\"Stopwatch is not running. \");\r\n    }\r\n    stopTimeNanos \u003d System.nanoTime();\r\n    splitState \u003d SplitState.SPLIT;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StopWatch\n  $r2 \u003d StopWatch$State runningState\u003e\n  $r1 \u003d StopWatch$State RUNNING\u003e\n  if ($r2 \u003d\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalStateException\n  new IllegalStateException(\"Stopwatch is not running. \")\n  throw $r4\n}",
      "B2 {\n  $l0 \u003d System.nanoTime()\n  StopWatch: long stopTimeNanos\u003e \u003d $l0\n  $r3 \u003d StopWatch$SplitState SPLIT\u003e\n  StopWatch$SplitState splitState\u003e \u003d $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.time.StopWatch",
    "methodName": "start",
    "signature": "void start()",
    "visibility": "public",
    "body": "{\r\n    if (runningState \u003d\u003d State.STOPPED) {\r\n        throw new IllegalStateException(\"Stopwatch must be reset before being restarted. \");\r\n    }\r\n    if (runningState !\u003d State.UNSTARTED) {\r\n        throw new IllegalStateException(\"Stopwatch already started. \");\r\n    }\r\n    startTimeNanos \u003d System.nanoTime();\r\n    startInstant \u003d Instant.now();\r\n    runningState \u003d State.RUNNING;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d $r1) → B1 | else → B2",
      "B2 : If($r4 \u003d\u003d $r3) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StopWatch\n  $r2 \u003d StopWatch$State runningState\u003e\n  $r1 \u003d StopWatch$State STOPPED\u003e\n  if ($r2 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d IllegalStateException\n  new IllegalStateException(\"Stopwatch must be reset before being restarted. \")\n  throw $r8\n}",
      "B2 {\n  $r4 \u003d StopWatch$State runningState\u003e\n  $r3 \u003d StopWatch$State UNSTARTED\u003e\n  if ($r4 \u003d\u003d $r3) goto B3 else B4\n}",
      "B3 {\n  $r7 \u003d IllegalStateException\n  new IllegalStateException(\"Stopwatch already started. \")\n  throw $r7\n}",
      "B4 {\n  $l0 \u003d System.nanoTime()\n  StopWatch: long startTimeNanos\u003e \u003d $l0\n  $r5 \u003d Instant.now()\n  Instant startInstant\u003e \u003d $r5\n  $r6 \u003d StopWatch$State RUNNING\u003e\n  StopWatch$State runningState\u003e \u003d $r6\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.time.StopWatch",
    "methodName": "stop",
    "signature": "void stop()",
    "visibility": "public",
    "body": "{\r\n    if (runningState !\u003d State.RUNNING \u0026\u0026 runningState !\u003d State.SUSPENDED) {\r\n        throw new IllegalStateException(\"Stopwatch is not running. \");\r\n    }\r\n    if (runningState \u003d\u003d State.RUNNING) {\r\n        stopTimeNanos \u003d System.nanoTime();\r\n        stopInstant \u003d Instant.now();\r\n    }\r\n    runningState \u003d State.STOPPED;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d $r1) → B1 | else → B3",
      "B1 : If($r8 \u003d\u003d $r7) → B2 | else → B3",
      "B3 : If($r4 !\u003d $r3) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  StopWatch\n  $r2 \u003d StopWatch$State runningState\u003e\n  $r1 \u003d StopWatch$State RUNNING\u003e\n  if ($r2 \u003d\u003d $r1) goto B1 else B3\n}",
      "B1 {\n  $r8 \u003d StopWatch$State runningState\u003e\n  $r7 \u003d StopWatch$State SUSPENDED\u003e\n  if ($r8 \u003d\u003d $r7) goto B2 else B3\n}",
      "B2 {\n  $r9 \u003d IllegalStateException\n  new IllegalStateException(\"Stopwatch is not running. \")\n  throw $r9\n}",
      "B3 {\n  $r4 \u003d StopWatch$State runningState\u003e\n  $r3 \u003d StopWatch$State RUNNING\u003e\n  if ($r4 !\u003d $r3) goto B4 else B5\n}",
      "B4 {\n  $l0 \u003d System.nanoTime()\n  StopWatch: long stopTimeNanos\u003e \u003d $l0\n  $r6 \u003d Instant.now()\n  Instant stopInstant\u003e \u003d $r6\n}",
      "B5 {\n  $r5 \u003d StopWatch$State STOPPED\u003e\n  StopWatch$State runningState\u003e \u003d $r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.time.StopWatch",
    "methodName": "suspend",
    "signature": "void suspend()",
    "visibility": "public",
    "body": "{\r\n    if (runningState !\u003d State.RUNNING) {\r\n        throw new IllegalStateException(\"Stopwatch must be running to suspend. \");\r\n    }\r\n    stopTimeNanos \u003d System.nanoTime();\r\n    stopInstant \u003d Instant.now();\r\n    runningState \u003d State.SUSPENDED;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StopWatch\n  $r2 \u003d StopWatch$State runningState\u003e\n  $r1 \u003d StopWatch$State RUNNING\u003e\n  if ($r2 \u003d\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d IllegalStateException\n  new IllegalStateException(\"Stopwatch must be running to suspend. \")\n  throw $r5\n}",
      "B2 {\n  $l0 \u003d System.nanoTime()\n  StopWatch: long stopTimeNanos\u003e \u003d $l0\n  $r3 \u003d Instant.now()\n  Instant stopInstant\u003e \u003d $r3\n  $r4 \u003d StopWatch$State SUSPENDED\u003e\n  StopWatch$State runningState\u003e \u003d $r4\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.time.StopWatch",
    "methodName": "toSplitString",
    "signature": "java.lang.String toSplitString()",
    "visibility": "public",
    "body": "{\r\n    final String msgStr \u003d Objects.toString(message, StringUtils.EMPTY);\r\n    final String formattedTime \u003d formatSplitTime();\r\n    return msgStr.isEmpty() ? formattedTime : msgStr + StringUtils.SPACE + formattedTime;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StopWatch\n  $r1 \u003d String message\u003e\n  r2 \u003d Objects.toString($r1, \"\")\n  r3 \u003d r0.formatSplitTime()\n  $z0 \u003d r2.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d r3\n  goto B3\n}",
      "B2 {\n  $r4 \u003d StringBuilder\n  new StringBuilder()\n  $r5 \u003d $r4.append(r2)\n  $r6 \u003d $r5.append(\" \")\n  $r7 \u003d $r6.append(r3)\n  $r8 \u003d $r7.toString()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StopWatch#formatSplitTime(...0)",
        "body": "{\r\n    return DurationFormatUtils.formatDurationHMS(getSplitDuration().toMillis());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.time.StopWatch",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    final String msgStr \u003d Objects.toString(message, StringUtils.EMPTY);\r\n    final String formattedTime \u003d formatTime();\r\n    return msgStr.isEmpty() ? formattedTime : msgStr + StringUtils.SPACE + formattedTime;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StopWatch\n  $r1 \u003d String message\u003e\n  r2 \u003d Objects.toString($r1, \"\")\n  r3 \u003d r0.formatTime()\n  $z0 \u003d r2.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d r3\n  goto B3\n}",
      "B2 {\n  $r4 \u003d StringBuilder\n  new StringBuilder()\n  $r5 \u003d $r4.append(r2)\n  $r6 \u003d $r5.append(\" \")\n  $r7 \u003d $r6.append(r3)\n  $r8 \u003d $r7.toString()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StopWatch#formatTime(...0)",
        "body": "{\r\n    return DurationFormatUtils.formatDurationHMS(getTime());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.time.StopWatch",
    "methodName": "unsplit",
    "signature": "void unsplit()",
    "visibility": "public",
    "body": "{\r\n    if (splitState !\u003d SplitState.SPLIT) {\r\n        throw new IllegalStateException(\"Stopwatch has not been split. \");\r\n    }\r\n    splitState \u003d SplitState.UNSPLIT;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StopWatch\n  $r2 \u003d StopWatch$SplitState splitState\u003e\n  $r1 \u003d StopWatch$SplitState SPLIT\u003e\n  if ($r2 \u003d\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalStateException\n  new IllegalStateException(\"Stopwatch has not been split. \")\n  throw $r4\n}",
      "B2 {\n  $r3 \u003d StopWatch$SplitState UNSPLIT\u003e\n  StopWatch$SplitState splitState\u003e \u003d $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.tuple.ImmutablePair",
    "methodName": "of",
    "signature": "org.apache.commons.lang3.tuple.ImmutablePair of(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B1 : If(r1 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Object\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r1 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d ImmutablePair\n  new ImmutablePair(r0, r1)\n  goto B4\n}",
      "B3 {\n  $r2 \u003d ImmutablePair.nullPair()\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.tuple.ImmutablePair",
    "methodName": "of",
    "signature": "org.apache.commons.lang3.tuple.ImmutablePair of(java.util.Map$Entry)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Map$Entry\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d ImmutablePair\n  $r2 \u003d r0.getKey()\n  $r1 \u003d r0.getValue()\n  new ImmutablePair($r2, $r1)\n  goto B3\n}",
      "B2 {\n  $r3 \u003d ImmutablePair.nullPair()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.tuple.ImmutableTriple",
    "methodName": "of",
    "signature": "org.apache.commons.lang3.tuple.ImmutableTriple of(java.lang.Object,java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 11,
    "edges": 14,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B3 : If(r1 \u003d\u003d null) → B4 | else → B5",
      "B6 : If($z2 !\u003d 0) → B7 | else → B8",
      "B7 : If(r2 \u003d\u003d null) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  Object\n  Object\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  if (r1 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  $z1 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z1 \u003d 0\n}",
      "B6 {\n  $z2 \u003d $z0 | $z1\n  if ($z2 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  if (r2 \u003d\u003d null) goto B8 else B9\n}",
      "B8 {\n  $r3 \u003d ImmutableTriple\n  new ImmutableTriple(r0, r1, r2)\n  goto B10\n}",
      "B9 {\n  $r3 \u003d ImmutableTriple.nullTriple()\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.tuple.MutablePair",
    "methodName": "of",
    "signature": "org.apache.commons.lang3.tuple.MutablePair of(java.util.Map$Entry)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Map$Entry\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r2 \u003d r0.getKey()\n  r3 \u003d r0.getValue()\n  goto B3\n}",
      "B2 {\n  r2 \u003d null\n  r3 \u003d null\n}",
      "B3 {\n  $r1 \u003d MutablePair\n  new MutablePair(r2, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.util.FluentBitSet",
    "methodName": "clear",
    "signature": "org.apache.commons.lang3.util.FluentBitSet clear(int[])",
    "visibility": "public",
    "body": "{\r\n    for (final int e : bitIndexArray) {\r\n        this.bitSet.clear(e);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  FluentBitSet\n  r0 :\u003d @parameter0: int[]\n  i0 \u003d lengthof r0\n  i2 \u003d 0\n}",
      "B1 {\n  if (i2 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  i1 \u003d r0[i2]\n  $r2 \u003d BitSet bitSet\u003e\n  $r2.clear(i1)\n  i2 \u003d i2 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.util.FluentBitSet",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (this \u003d\u003d obj) {\r\n        return true;\r\n    }\r\n    if (!(obj instanceof FluentBitSet)) {\r\n        return false;\r\n    }\r\n    final FluentBitSet other \u003d (FluentBitSet) obj;\r\n    return Objects.equals(bitSet, other.bitSet);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  FluentBitSet\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d FluentBitSet\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d FluentBitSet) r1\n  $r4 \u003d BitSet bitSet\u003e\n  $r3 \u003d BitSet bitSet\u003e\n  $z1 \u003d Objects.equals($r4, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.util.FluentBitSet",
    "methodName": "or",
    "signature": "org.apache.commons.lang3.util.FluentBitSet or(org.apache.commons.lang3.util.FluentBitSet[])",
    "visibility": "public",
    "body": "{\r\n    for (final FluentBitSet e : set) {\r\n        this.bitSet.or(e.bitSet);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  FluentBitSet\n  FluentBitSet[]\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r0[i1]\n  $r4 \u003d BitSet bitSet\u003e\n  $r3 \u003d BitSet bitSet\u003e\n  $r4.or($r3)\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.util.FluentBitSet",
    "methodName": "set",
    "signature": "org.apache.commons.lang3.util.FluentBitSet set(int[])",
    "visibility": "public",
    "body": "{\r\n    for (final int e : bitIndexArray) {\r\n        bitSet.set(e);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  FluentBitSet\n  r0 :\u003d @parameter0: int[]\n  i0 \u003d lengthof r0\n  i2 \u003d 0\n}",
      "B1 {\n  if (i2 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  i1 \u003d r0[i2]\n  $r2 \u003d BitSet bitSet\u003e\n  $r2.set(i1)\n  i2 \u003d i2 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "exclusiveBetween",
    "signature": "void exclusiveBetween(double,double,double)",
    "visibility": "public",
    "body": "{\r\n    // TODO when breaking BC, consider returning value\r\n    if (value \u003c\u003d start || value \u003e\u003d end) {\r\n        throw new IllegalArgumentException(String.format(DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE, value, start, end));\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003c\u003d 0) → B1 | else → B2",
      "B1 : If($i3 \u003c 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  d1 :\u003d @parameter0: double\n  d2 :\u003d @parameter1: double\n  d0 :\u003d @parameter2: double\n  $b0 \u003d d0 cmpg d1\n  $i2 \u003d (int) $b0\n  if ($i2 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $b1 \u003d d0 cmpl d2\n  $i3 \u003d (int) $b1\n  if ($i3 \u003c 0) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d IllegalArgumentException\n  $r1 \u003d Object)[3]\n  $r2 \u003d Double.valueOf(d0)\n  $r1[0] \u003d $r2\n  $r3 \u003d Double.valueOf(d1)\n  $r1[1] \u003d $r3\n  $r4 \u003d Double.valueOf(d2)\n  $r1[2] \u003d $r4\n  $r5 \u003d String.format(\"The value %s is not in the specified exclusive range of %s to %s\", $r1)\n  new IllegalArgumentException($r5)\n  throw $r6\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "exclusiveBetween",
    "signature": "void exclusiveBetween(double,double,double,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    // TODO when breaking BC, consider returning value\r\n    if (value \u003c\u003d start || value \u003e\u003d end) {\r\n        throw new IllegalArgumentException(message);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003c\u003d 0) → B1 | else → B2",
      "B1 : If($i3 \u003c 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  d1 :\u003d @parameter0: double\n  d2 :\u003d @parameter1: double\n  d0 :\u003d @parameter2: double\n  String\n  $b0 \u003d d0 cmpg d1\n  $i2 \u003d (int) $b0\n  if ($i2 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $b1 \u003d d0 cmpl d2\n  $i3 \u003d (int) $b1\n  if ($i3 \u003c 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(r1)\n  throw $r2\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "exclusiveBetween",
    "signature": "void exclusiveBetween(long,long,long)",
    "visibility": "public",
    "body": "{\r\n    // TODO when breaking BC, consider returning value\r\n    if (value \u003c\u003d start || value \u003e\u003d end) {\r\n        throw new IllegalArgumentException(String.format(DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE, value, start, end));\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i5 \u003c\u003d 0) → B1 | else → B2",
      "B1 : If($i6 \u003c 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  l1 :\u003d @parameter0: long\n  l3 :\u003d @parameter1: long\n  l0 :\u003d @parameter2: long\n  $b2 \u003d l0 cmp l1\n  $i5 \u003d (int) $b2\n  if ($i5 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $b4 \u003d l0 cmp l3\n  $i6 \u003d (int) $b4\n  if ($i6 \u003c 0) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d IllegalArgumentException\n  $r1 \u003d Object)[3]\n  $r2 \u003d Long.valueOf(l0)\n  $r1[0] \u003d $r2\n  $r3 \u003d Long.valueOf(l1)\n  $r1[1] \u003d $r3\n  $r4 \u003d Long.valueOf(l3)\n  $r1[2] \u003d $r4\n  $r5 \u003d String.format(\"The value %s is not in the specified exclusive range of %s to %s\", $r1)\n  new IllegalArgumentException($r5)\n  throw $r6\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "exclusiveBetween",
    "signature": "void exclusiveBetween(long,long,long,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    // TODO when breaking BC, consider returning value\r\n    if (value \u003c\u003d start || value \u003e\u003d end) {\r\n        throw new IllegalArgumentException(message);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i5 \u003c\u003d 0) → B1 | else → B2",
      "B1 : If($i6 \u003c 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  l1 :\u003d @parameter0: long\n  l3 :\u003d @parameter1: long\n  l0 :\u003d @parameter2: long\n  String\n  $b2 \u003d l0 cmp l1\n  $i5 \u003d (int) $b2\n  if ($i5 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $b4 \u003d l0 cmp l3\n  $i6 \u003d (int) $b4\n  if ($i6 \u003c 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(r1)\n  throw $r2\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "exclusiveBetween",
    "signature": "void exclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B2",
      "B1 : If($i1 \u003c 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Object\n  Object\n  Comparable\n  $i0 \u003d r0.compareTo(r1)\n  if ($i0 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d r0.compareTo(r4)\n  if ($i1 \u003c 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d IllegalArgumentException\n  $r3 \u003d Object)[3]\n  $r3[0] \u003d r0\n  $r3[1] \u003d r1\n  $r3[2] \u003d r4\n  $r5 \u003d String.format(\"The value %s is not in the specified exclusive range of %s to %s\", $r3)\n  new IllegalArgumentException($r5)\n  throw $r2\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "exclusiveBetween",
    "signature": "void exclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B2",
      "B1 : If($i1 \u003c 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Object\n  Object\n  Comparable\n  String\n  Object[]\n  $i0 \u003d r0.compareTo(r1)\n  if ($i0 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d r0.compareTo(r6)\n  if ($i1 \u003c 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d IllegalArgumentException\n  $r5 \u003d Validate.getMessage(r3, r4)\n  new IllegalArgumentException($r5)\n  throw $r2\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "finite",
    "signature": "void finite(double,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\r\n        throw new IllegalArgumentException(getMessage(message, values));\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  d0 :\u003d @parameter0: double\n  String\n  Object[]\n  $z0 \u003d Double.isNaN(d0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d Double.isInfinite(d0)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r0 \u003d IllegalArgumentException\n  $r3 \u003d Validate.getMessage(r1, r2)\n  new IllegalArgumentException($r3)\n  throw $r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Validate#getMessage(...2)",
        "body": "{\r\n    return ArrayUtils.isEmpty(values) ? message : String.format(message, values);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "inclusiveBetween",
    "signature": "void inclusiveBetween(double,double,double)",
    "visibility": "public",
    "body": "{\r\n    // TODO when breaking BC, consider returning value\r\n    if (value \u003c start || value \u003e end) {\r\n        throw new IllegalArgumentException(String.format(DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE, value, start, end));\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003c 0) → B1 | else → B2",
      "B1 : If($i3 \u003c\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  d1 :\u003d @parameter0: double\n  d2 :\u003d @parameter1: double\n  d0 :\u003d @parameter2: double\n  $b0 \u003d d0 cmpg d1\n  $i2 \u003d (int) $b0\n  if ($i2 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $b1 \u003d d0 cmpl d2\n  $i3 \u003d (int) $b1\n  if ($i3 \u003c\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d IllegalArgumentException\n  $r1 \u003d Object)[3]\n  $r2 \u003d Double.valueOf(d0)\n  $r1[0] \u003d $r2\n  $r3 \u003d Double.valueOf(d1)\n  $r1[1] \u003d $r3\n  $r4 \u003d Double.valueOf(d2)\n  $r1[2] \u003d $r4\n  $r5 \u003d String.format(\"The value %s is not in the specified inclusive range of %s to %s\", $r1)\n  new IllegalArgumentException($r5)\n  throw $r6\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "inclusiveBetween",
    "signature": "void inclusiveBetween(double,double,double,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    // TODO when breaking BC, consider returning value\r\n    if (value \u003c start || value \u003e end) {\r\n        throw new IllegalArgumentException(message);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003c 0) → B1 | else → B2",
      "B1 : If($i3 \u003c\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  d1 :\u003d @parameter0: double\n  d2 :\u003d @parameter1: double\n  d0 :\u003d @parameter2: double\n  String\n  $b0 \u003d d0 cmpg d1\n  $i2 \u003d (int) $b0\n  if ($i2 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $b1 \u003d d0 cmpl d2\n  $i3 \u003d (int) $b1\n  if ($i3 \u003c\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(r1)\n  throw $r2\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "inclusiveBetween",
    "signature": "void inclusiveBetween(long,long,long)",
    "visibility": "public",
    "body": "{\r\n    // TODO when breaking BC, consider returning value\r\n    if (value \u003c start || value \u003e end) {\r\n        throw new IllegalArgumentException(String.format(DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE, value, start, end));\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i5 \u003c 0) → B1 | else → B2",
      "B1 : If($i6 \u003c\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  l1 :\u003d @parameter0: long\n  l3 :\u003d @parameter1: long\n  l0 :\u003d @parameter2: long\n  $b2 \u003d l0 cmp l1\n  $i5 \u003d (int) $b2\n  if ($i5 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $b4 \u003d l0 cmp l3\n  $i6 \u003d (int) $b4\n  if ($i6 \u003c\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d IllegalArgumentException\n  $r1 \u003d Object)[3]\n  $r2 \u003d Long.valueOf(l0)\n  $r1[0] \u003d $r2\n  $r3 \u003d Long.valueOf(l1)\n  $r1[1] \u003d $r3\n  $r4 \u003d Long.valueOf(l3)\n  $r1[2] \u003d $r4\n  $r5 \u003d String.format(\"The value %s is not in the specified inclusive range of %s to %s\", $r1)\n  new IllegalArgumentException($r5)\n  throw $r6\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "inclusiveBetween",
    "signature": "void inclusiveBetween(long,long,long,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    // TODO when breaking BC, consider returning value\r\n    if (value \u003c start || value \u003e end) {\r\n        throw new IllegalArgumentException(message);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i5 \u003c 0) → B1 | else → B2",
      "B1 : If($i6 \u003c\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  l1 :\u003d @parameter0: long\n  l3 :\u003d @parameter1: long\n  l0 :\u003d @parameter2: long\n  String\n  $b2 \u003d l0 cmp l1\n  $i5 \u003d (int) $b2\n  if ($i5 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $b4 \u003d l0 cmp l3\n  $i6 \u003d (int) $b4\n  if ($i6 \u003c\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(r1)\n  throw $r2\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "inclusiveBetween",
    "signature": "void inclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c 0) → B1 | else → B2",
      "B1 : If($i1 \u003c\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Object\n  Object\n  Comparable\n  $i0 \u003d r0.compareTo(r1)\n  if ($i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d r0.compareTo(r4)\n  if ($i1 \u003c\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d IllegalArgumentException\n  $r3 \u003d Object)[3]\n  $r3[0] \u003d r0\n  $r3[1] \u003d r1\n  $r3[2] \u003d r4\n  $r5 \u003d String.format(\"The value %s is not in the specified inclusive range of %s to %s\", $r3)\n  new IllegalArgumentException($r5)\n  throw $r2\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "inclusiveBetween",
    "signature": "void inclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c 0) → B1 | else → B2",
      "B1 : If($i1 \u003c\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Object\n  Object\n  Comparable\n  String\n  Object[]\n  $i0 \u003d r0.compareTo(r1)\n  if ($i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d r0.compareTo(r6)\n  if ($i1 \u003c\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d IllegalArgumentException\n  $r5 \u003d Validate.getMessage(r3, r4)\n  new IllegalArgumentException($r5)\n  throw $r2\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "isAssignableFrom",
    "signature": "void isAssignableFrom(java.lang.Class,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    // TODO when breaking BC, consider returning type\r\n    if (type \u003d\u003d null || superType \u003d\u003d null || !superType.isAssignableFrom(type)) {\r\n        throw new IllegalArgumentException(String.format(DEFAULT_IS_ASSIGNABLE_EX_MESSAGE, ClassUtils.getName(type, \"null type\"), ClassUtils.getName(superType, \"null type\")));\r\n    }\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r1 \u003d\u003d null) → B2 | else → B3",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Class\n  Class\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  if (r1 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d r1.isAssignableFrom(r0)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d IllegalArgumentException\n  $r3 \u003d Object)[2]\n  $r4 \u003d ClassUtils.getName(r0, \"null type\")\n  $r3[0] \u003d $r4\n  $r5 \u003d ClassUtils.getName(r1, \"null type\")\n  $r3[1] \u003d $r5\n  $r6 \u003d String.format(\"Cannot assign a %s to a %s\", $r3)\n  new IllegalArgumentException($r6)\n  throw $r2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "isAssignableFrom",
    "signature": "void isAssignableFrom(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    // TODO when breaking BC, consider returning type\r\n    if (!superType.isAssignableFrom(type)) {\r\n        throw new IllegalArgumentException(getMessage(message, values));\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  Class\n  String\n  Object[]\n  $z0 \u003d r0.isAssignableFrom(r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d IllegalArgumentException\n  $r5 \u003d Validate.getMessage(r3, r4)\n  new IllegalArgumentException($r5)\n  throw $r2\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Validate#getMessage(...2)",
        "body": "{\r\n    return ArrayUtils.isEmpty(values) ? message : String.format(message, values);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "isInstanceOf",
    "signature": "void isInstanceOf(java.lang.Class,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    // TODO when breaking BC, consider returning obj\r\n    if (!type.isInstance(obj)) {\r\n        throw new IllegalArgumentException(String.format(DEFAULT_IS_INSTANCE_OF_EX_MESSAGE, type.getName(), ClassUtils.getName(obj, \"null\")));\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  Object\n  $z0 \u003d r0.isInstance(r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d IllegalArgumentException\n  $r3 \u003d Object)[2]\n  $r4 \u003d r0.getName()\n  $r3[0] \u003d $r4\n  $r5 \u003d ClassUtils.getName(r1, \"null\")\n  $r3[1] \u003d $r5\n  $r6 \u003d String.format(\"Expected type: %s, actual: %s\", $r3)\n  new IllegalArgumentException($r6)\n  throw $r2\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "isInstanceOf",
    "signature": "void isInstanceOf(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    // TODO when breaking BC, consider returning obj\r\n    if (!type.isInstance(obj)) {\r\n        throw new IllegalArgumentException(getMessage(message, values));\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  Object\n  String\n  Object[]\n  $z0 \u003d r0.isInstance(r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d IllegalArgumentException\n  $r5 \u003d Validate.getMessage(r3, r4)\n  new IllegalArgumentException($r5)\n  throw $r2\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Validate#getMessage(...2)",
        "body": "{\r\n    return ArrayUtils.isEmpty(values) ? message : String.format(message, values);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "isTrue",
    "signature": "void isTrue(boolean)",
    "visibility": "public",
    "body": "{\r\n    if (!expression) {\r\n        throw new IllegalArgumentException(DEFAULT_IS_TRUE_EX_MESSAGE);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  z0 :\u003d @parameter0: boolean\n  if (z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r0 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"The validated expression is false\")\n  throw $r0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "isTrue",
    "signature": "void isTrue(boolean,java.lang.String,double)",
    "visibility": "public",
    "body": "{\r\n    if (!expression) {\r\n        throw new IllegalArgumentException(String.format(message, Double.valueOf(value)));\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  z0 :\u003d @parameter0: boolean\n  String\n  d0 :\u003d @parameter2: double\n  if (z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r0 \u003d IllegalArgumentException\n  $r2 \u003d Object)[1]\n  $r3 \u003d Double.valueOf(d0)\n  $r2[0] \u003d $r3\n  $r4 \u003d String.format(r1, $r2)\n  new IllegalArgumentException($r4)\n  throw $r0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "isTrue",
    "signature": "void isTrue(boolean,java.lang.String,long)",
    "visibility": "public",
    "body": "{\r\n    if (!expression) {\r\n        throw new IllegalArgumentException(String.format(message, Long.valueOf(value)));\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  z0 :\u003d @parameter0: boolean\n  String\n  l0 :\u003d @parameter2: long\n  if (z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r0 \u003d IllegalArgumentException\n  $r2 \u003d Object)[1]\n  $r3 \u003d Long.valueOf(l0)\n  $r2[0] \u003d $r3\n  $r4 \u003d String.format(r1, $r2)\n  new IllegalArgumentException($r4)\n  throw $r0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "isTrue",
    "signature": "void isTrue(boolean,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    if (!expression) {\r\n        throw new IllegalArgumentException(getMessage(message, values));\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  z0 :\u003d @parameter0: boolean\n  String\n  Object[]\n  if (z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r0 \u003d IllegalArgumentException\n  $r3 \u003d Validate.getMessage(r1, r2)\n  new IllegalArgumentException($r3)\n  throw $r0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Validate#getMessage(...2)",
        "body": "{\r\n    return ArrayUtils.isEmpty(values) ? message : String.format(message, values);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "matchesPattern",
    "signature": "void matchesPattern(java.lang.CharSequence,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    // TODO when breaking BC, consider returning input\r\n    if (!Pattern.matches(pattern, input)) {\r\n        throw new IllegalArgumentException(String.format(DEFAULT_MATCHES_PATTERN_EX, input, pattern));\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  String\n  $z0 \u003d Pattern.matches(r0, r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d IllegalArgumentException\n  $r3 \u003d Object)[2]\n  $r3[0] \u003d r1\n  $r3[1] \u003d r0\n  $r4 \u003d String.format(\"The string %s does not match the pattern %s\", $r3)\n  new IllegalArgumentException($r4)\n  throw $r2\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "matchesPattern",
    "signature": "void matchesPattern(java.lang.CharSequence,java.lang.String,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    // TODO when breaking BC, consider returning input\r\n    if (!Pattern.matches(pattern, input)) {\r\n        throw new IllegalArgumentException(getMessage(message, values));\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  String\n  String\n  Object[]\n  $z0 \u003d Pattern.matches(r0, r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d IllegalArgumentException\n  $r5 \u003d Validate.getMessage(r3, r4)\n  new IllegalArgumentException($r5)\n  throw $r2\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Validate#getMessage(...2)",
        "body": "{\r\n    return ArrayUtils.isEmpty(values) ? message : String.format(message, values);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "noNullElements",
    "signature": "java.lang.Iterable noNullElements(java.lang.Iterable,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($r2 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  String\n  Object[]\n  Objects.requireNonNull(r0, \"iterable\")\n  i0 \u003d 0\n  r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  if ($r2 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d Object)[1]\n  $r5 \u003d Integer.valueOf(i0)\n  $r4[0] \u003d $r5\n  r6 \u003d ArrayUtils.addAll(r3, $r4)\n  $r7 \u003d IllegalArgumentException\n  $r9 \u003d Validate.getMessage(r8, r6)\n  new IllegalArgumentException($r9)\n  throw $r7\n}",
      "B4 {\n  i0 \u003d i0 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "noNullElements",
    "signature": "java.lang.Object[] noNullElements(java.lang.Object[],java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d $i0) → B2 | else → B5",
      "B2 : If($r1 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  String\n  Object[]\n  Objects.requireNonNull(r0, \"array\")\n  i1 \u003d 0\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if (i1 \u003e\u003d $i0) goto B2 else B5\n}",
      "B2 {\n  $r1 \u003d r0[i1]\n  if ($r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d Integer.valueOf(i1)\n  r4 \u003d ArrayUtils.add(r2, $r3)\n  $r5 \u003d IllegalArgumentException\n  $r7 \u003d Validate.getMessage(r6, r4)\n  new IllegalArgumentException($r7)\n  throw $r5\n}",
      "B4 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "notBlank",
    "signature": "java.lang.CharSequence notBlank(java.lang.CharSequence,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  String\n  Object[]\n  $r3 \u003d Validate.toSupplier(r1, r2)\n  Objects.requireNonNull(r0, $r3)\n  $z0 \u003d StringUtils.isBlank(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalArgumentException\n  $r5 \u003d Validate.getMessage(r1, r2)\n  new IllegalArgumentException($r5)\n  throw $r4\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "notEmpty",
    "signature": "java.util.Collection notEmpty(java.util.Collection,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Collection\n  String\n  Object[]\n  $r3 \u003d Validate.toSupplier(r1, r2)\n  Objects.requireNonNull(r0, $r3)\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalArgumentException\n  $r5 \u003d Validate.getMessage(r1, r2)\n  new IllegalArgumentException($r5)\n  throw $r4\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "notEmpty",
    "signature": "java.util.Map notEmpty(java.util.Map,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Map\n  String\n  Object[]\n  $r3 \u003d Validate.toSupplier(r1, r2)\n  Objects.requireNonNull(r0, $r3)\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalArgumentException\n  $r5 \u003d Validate.getMessage(r1, r2)\n  new IllegalArgumentException($r5)\n  throw $r4\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "notEmpty",
    "signature": "java.lang.CharSequence notEmpty(java.lang.CharSequence,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  String\n  Object[]\n  $r3 \u003d Validate.toSupplier(r1, r2)\n  Objects.requireNonNull(r0, $r3)\n  $i0 \u003d r0.length()\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalArgumentException\n  $r5 \u003d Validate.getMessage(r1, r2)\n  new IllegalArgumentException($r5)\n  throw $r4\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "notEmpty",
    "signature": "java.lang.Object[] notEmpty(java.lang.Object[],java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  String\n  Object[]\n  $r3 \u003d Validate.toSupplier(r1, r2)\n  Objects.requireNonNull(r0, $r3)\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalArgumentException\n  $r5 \u003d Validate.getMessage(r1, r2)\n  new IllegalArgumentException($r5)\n  throw $r4\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "notNaN",
    "signature": "void notNaN(double,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    if (Double.isNaN(value)) {\r\n        throw new IllegalArgumentException(getMessage(message, values));\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  d0 :\u003d @parameter0: double\n  String\n  Object[]\n  $z0 \u003d Double.isNaN(d0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r0 \u003d IllegalArgumentException\n  $r3 \u003d Validate.getMessage(r1, r2)\n  new IllegalArgumentException($r3)\n  throw $r0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Validate#getMessage(...2)",
        "body": "{\r\n    return ArrayUtils.isEmpty(values) ? message : String.format(message, values);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "validIndex",
    "signature": "java.util.Collection validIndex(java.util.Collection,int,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B2",
      "B1 : If(i0 \u003c $i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Collection\n  i0 :\u003d @parameter1: int\n  String\n  Object[]\n  Objects.requireNonNull(r0, \"collection\")\n  if (i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d r0.size()\n  if (i0 \u003c $i1) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d IndexOutOfBoundsException\n  $r4 \u003d Validate.getMessage(r2, r3)\n  new IndexOutOfBoundsException($r4)\n  throw $r1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "validIndex",
    "signature": "java.lang.CharSequence validIndex(java.lang.CharSequence,int,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B2",
      "B1 : If(i0 \u003c $i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  i0 :\u003d @parameter1: int\n  String\n  Object[]\n  Objects.requireNonNull(r0, \"chars\")\n  if (i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d r0.length()\n  if (i0 \u003c $i1) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d IndexOutOfBoundsException\n  $r4 \u003d Validate.getMessage(r2, r3)\n  new IndexOutOfBoundsException($r4)\n  throw $r1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "validIndex",
    "signature": "java.lang.Object[] validIndex(java.lang.Object[],int,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B2",
      "B1 : If(i0 \u003c $i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  i0 :\u003d @parameter1: int\n  String\n  Object[]\n  Objects.requireNonNull(r0, \"array\")\n  if (i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d lengthof r0\n  if (i0 \u003c $i1) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d IndexOutOfBoundsException\n  $r4 \u003d Validate.getMessage(r2, r3)\n  new IndexOutOfBoundsException($r4)\n  throw $r1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "validState",
    "signature": "void validState(boolean)",
    "visibility": "public",
    "body": "{\r\n    if (!expression) {\r\n        throw new IllegalStateException(DEFAULT_VALID_STATE_EX_MESSAGE);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  z0 :\u003d @parameter0: boolean\n  if (z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r0 \u003d IllegalStateException\n  new IllegalStateException(\"The validated state is false\")\n  throw $r0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.lang3.Validate",
    "methodName": "validState",
    "signature": "void validState(boolean,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    if (!expression) {\r\n        throw new IllegalStateException(getMessage(message, values));\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  z0 :\u003d @parameter0: boolean\n  String\n  Object[]\n  if (z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r0 \u003d IllegalStateException\n  $r3 \u003d Validate.getMessage(r1, r2)\n  new IllegalStateException($r3)\n  throw $r0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Validate#getMessage(...2)",
        "body": "{\r\n    return ArrayUtils.isEmpty(values) ? message : String.format(message, values);\r\n}"
      }
    ]
  },
  {
    "clazz": "SootCFGAnalysis",
    "methodName": "main",
    "signature": "void main(java.lang.String[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 38,
    "edges": 49,
    "cc": 13,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B31",
      "B3 : If($z7 \u003d\u003d false) → B4 | else → B30",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6",
      "B7 : If($z2 \u003d\u003d false) → B8 | else → B9",
      "B10 : If($z3 \u003d\u003d false) → B11 | else → B14",
      "B11 : If(i8 \u003c\u003d 0) → B12 | else → B13",
      "B14 : If(i6 \u003e i7) → B15 | else → B16",
      "B17 : If($z4 \u003d\u003d false) → B18 | else → B19",
      "B18 : If($z5 !\u003d 0) → B19 | else → B20",
      "B20 : If(i0 \u003d\u003d false) → B21 | else → B22",
      "B21 : If(i4 !\u003d 0) → B22 | else → B23",
      "B23 : If(i5 \u003e 0) → B24 | else → B25",
      "B25 : If($z6 !\u003d 0) → B26 | else → B27"
    ],
    "blockList": [
      "B0 {\n  String[]\n  $r0 \u003d Options.v()\n  $r0.set_prepend_classpath(1)\n  $r2 \u003d Options.v()\n  $r1 \u003d Collections.singletonList(\"C:\\\\Users\\\\00000\\\\Desktop\\\\my\\\\javaBenchmark\\\\commons-lang-rel-commons-lang-3.17.0\\\\target\\\\classes\")\n  $r2.set_process_dir($r1)\n  $r3 \u003d Options.v()\n  $r3.set_whole_program(1)\n  $r4 \u003d Options.v()\n  $r4.set_output_format(12)\n  $r5 \u003d Options.v()\n  $r5.set_no_bodies_for_excluded(1)\n  $r6 \u003d Options.v()\n  $r6.set_allow_phantom_refs(1)\n  $r7 \u003d Options.v()\n  $r7.set_keep_line_number(1)\n  $r8 \u003d Options.v()\n  $r8.setPhaseOption(\"jb\", \"use-original-names:true\")\n  $r9 \u003d Scene.v()\n  $r9.loadNecessaryClasses()\n  $r10 \u003d HashSet\n  new HashSet()\n  $r11 \u003d CSVWriter\n  $r12 \u003d FileWriter\n  new FileWriter(\"C:\\\\Users\\\\00000\\\\Desktop\\\\my\\\\cfg_analysis_all_result_lang.csv\")\n  new CSVWriter($r12)\n  $r13 \u003d String)[9]\n  $r13[0] \u003d \"Class\"\n  $r13[1] \u003d \"Method\"\n  $r13[2] \u003d \"MethodSig\"\n  $r13[3] \u003d \"Nodes\"\n  $r13[4] \u003d \"Edges\"\n  $r13[5] \u003d \"McCabe_CC\"\n  $r13[6] \u003d \"StartLine\"\n  $r13[7] \u003d \"EndLine\"\n  $r13[8] \u003d \"LineCount\"\n  $r11.writeNext($r13)\n  $r14 \u003d ArrayList\n  $r15 \u003d Scene.v()\n  $r16 \u003d $r15.getApplicationClasses()\n  new ArrayList($r16)\n  r59 \u003d $r14.iterator()\n}",
      "B1 {\n  $z0 \u003d r59.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B31\n}",
      "B2 {\n  $r23 \u003d r59.next()\n  r24 \u003d SootClass) $r23\n  $r25 \u003d r24.getMethods()\n  r26 \u003d $r25.iterator()\n}",
      "B3 {\n  $z7 \u003d r26.hasNext()\n  if ($z7 \u003d\u003d false) goto B4 else B30\n}",
      "B4 {\n  $r27 \u003d r26.next()\n  r28 \u003d SootMethod) $r27\n  $z1 \u003d r28.isConcrete()\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  goto B3\n}",
      "B6 {\n  r60 \u003d r28.retrieveActiveBody()\n  $r29 \u003d BriefBlockGraph\n  new BriefBlockGraph(r60)\n  i0 \u003d $r29.size()\n  i4 \u003d 0\n  r61 \u003d $r29.iterator()\n}",
      "B7 {\n  $z2 \u003d r61.hasNext()\n  if ($z2 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $r41 \u003d r61.next()\n  r62 \u003d Block) $r41\n  $r42 \u003d $r29.getSuccsOf(r62)\n  $i3 \u003d $r42.size()\n  i4 \u003d i4 + $i3\n  goto B7\n}",
      "B9 {\n  $i1 \u003d i4 - i0\n  i5 \u003d $i1 + 2\n  i6 \u003d 2147483647\n  i7 \u003d -2147483648\n  $r30 \u003d r60.getUnits()\n  r63 \u003d $r30.iterator()\n}",
      "B10 {\n  $z3 \u003d r63.hasNext()\n  if ($z3 \u003d\u003d false) goto B11 else B14\n}",
      "B11 {\n  $r40 \u003d r63.next()\n  r64 \u003d Unit) $r40\n  i8 \u003d r64.getJavaSourceStartLineNumber()\n  if (i8 \u003c\u003d 0) goto B12 else B13\n}",
      "B12 {\n  i6 \u003d Math.min(i6, i8)\n  i7 \u003d Math.max(i7, i8)\n}",
      "B13 {\n  goto B10\n}",
      "B14 {\n  if (i6 \u003e i7) goto B15 else B16\n}",
      "B15 {\n  $i2 \u003d i7 - i6\n  $i9 \u003d $i2 + 1\n  goto B17\n}",
      "B16 {\n  $i9 \u003d 0\n}",
      "B17 {\n  $z4 \u003d SootCFGAnalysis.isTopLevelPublic(r24)\n  if ($z4 \u003d\u003d false) goto B18 else B19\n}",
      "B18 {\n  $z5 \u003d SootCFGAnalysis.isRealMethod(r28)\n  if ($z5 !\u003d 0) goto B19 else B20\n}",
      "B19 {\n  goto B3\n}",
      "B20 {\n  if (i0 \u003d\u003d false) goto B21 else B22\n}",
      "B21 {\n  if (i4 !\u003d 0) goto B22 else B23\n}",
      "B22 {\n  goto B3\n}",
      "B23 {\n  if (i5 \u003e 0) goto B24 else B25\n}",
      "B24 {\n  goto B3\n}",
      "B25 {\n  r28.getSubSignature()\n  r65 \u003d r28.getSignature()\n  $z6 \u003d $r10.add(r65)\n  if ($z6 !\u003d 0) goto B26 else B27\n}",
      "B26 {\n  goto B3\n}",
      "B27 {\n  $r31 \u003d String)[9]\n  $r32 \u003d r24.getName()\n  $r31[0] \u003d $r32\n  $r33 \u003d r28.getName()\n  $r31[1] \u003d $r33\n  $r31[2] \u003d r65\n  $r34 \u003d String.valueOf(i0)\n  $r31[3] \u003d $r34\n  $r35 \u003d String.valueOf(i4)\n  $r31[4] \u003d $r35\n  $r36 \u003d String.valueOf(i5)\n  $r31[5] \u003d $r36\n  $r37 \u003d String.valueOf(i6)\n  $r31[6] \u003d $r37\n  $r38 \u003d String.valueOf(i7)\n  $r31[7] \u003d $r38\n  $r39 \u003d String.valueOf($i9)\n  $r31[8] \u003d $r39\n  $r11.writeNext($r31)\n  goto B29\n}",
      "B28 {\n  $r52 :\u003d @caughtexception\n  $r54 \u003d PrintStream out\u003e\n  $r53 \u003d Object)[3]\n  $r55 \u003d r24.getName()\n  $r53[0] \u003d $r55\n  $r56 \u003d r28.getName()\n  $r53[1] \u003d $r56\n  $r57 \u003d $r52.getMessage()\n  $r53[2] \u003d $r57\n  $r54.printf(\"\\u00ec\\u0098\\u00a4\\u00eb\\u00a5\\u0098 %s.%s: %s\\n\", $r53)\n}",
      "B29 {\n  goto B3\n}",
      "B30 {\n  goto B1\n}",
      "B31 {\n  $r18 \u003d PrintStream out\u003e\n  $r17 \u003d StringBuilder\n  new StringBuilder()\n  $r19 \u003d $r17.append(\" \\u00eb\\u00b6\\u0084\\u00ec\\u0084\\u009d \\u00ec\\u0099\\u0084\\u00eb\\u00a3\\u008c: \")\n  $r20 \u003d $r19.append(\"C:\\\\Users\\\\00000\\\\Desktop\\\\my\\\\cfg_analysis_all_result_lang.csv\")\n  $r21 \u003d $r20.append(\"\\u00ec\\u0097\\u0090 \\u00ec\\u00a0\\u0080\\u00ec\\u009e\\u00a5\\u00eb\\u0090\\u00a8\")\n  $r22 \u003d $r21.toString()\n  $r18.println($r22)\n  $r11.close()\n  goto B35\n}",
      "B32 {\n  $r51 :\u003d @caughtexception\n  $r11.close()\n  goto B34\n}",
      "B33 {\n  $r50 :\u003d @caughtexception\n  $r51.addSuppressed($r50)\n}",
      "B34 {\n  throw $r51\n}",
      "B35 {\n  goto B37\n}",
      "B36 {\n  $r43 :\u003d @caughtexception\n  $r45 \u003d PrintStream err\u003e\n  $r44 \u003d StringBuilder\n  new StringBuilder()\n  $r47 \u003d $r44.append(\" CSV \\u00ec\\u00a0\\u0080\\u00ec\\u009e\\u00a5 \\u00ec\\u00a4\\u0091 \\u00ec\\u0098\\u00a4\\u00eb\\u00a5\\u0098: \")\n  $r46 \u003d $r43.getMessage()\n  $r48 \u003d $r47.append($r46)\n  $r49 \u003d $r48.toString()\n  $r45.println($r49)\n}",
      "B37 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B31",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B30",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B3",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B7",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B10",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B3",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B3",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B3",
      "B25 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B3",
      "B27 --\u003e B29",
      "B28 --\u003e B29",
      "B29 --\u003e B3",
      "B30 --\u003e B1",
      "B31 --\u003e B35",
      "B32 --\u003e B34",
      "B33 --\u003e B34",
      "B34 --\u003e [EXIT]",
      "B35 --\u003e B37",
      "B36 --\u003e B37",
      "B37 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  }
]