[
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "isEligible",
    "signature": "boolean isEligible(soot.SootClass,soot.SootMethod)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 15,
    "edges": 20,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B4",
      "B1 : If($z1 !\u003d 0) → B2 | else → B4",
      "B2 : If($z2 !\u003d 0) → B3 | else → B4",
      "B3 : If($z3 \u003d\u003d 0) → B4 | else → B5",
      "B5 : If($z4 !\u003d 0) → B6 | else → B7",
      "B7 : If($z5 !\u003d 0) → B8 | else → B9",
      "B8 : If($z6 \u003d\u003d 0) → B9 | else → B10",
      "B10 : If($i1 !\u003d 0) → B11 | else → B13",
      "B11 : If($i2 !\u003d 0) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  SootClass\n  SootMethod\n  $z0 \u003d r0.isPublic()\n  if ($z0 \u003d\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $z1 \u003d r0.isInterface()\n  if ($z1 !\u003d 0) goto B2 else B4\n}",
      "B2 {\n  $z2 \u003d r0.isAbstract()\n  if ($z2 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d r0.getName()\n  $z3 \u003d $r1.contains(\"$\")\n  if ($z3 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $z4 \u003d r2.isConcrete()\n  if ($z4 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $z5 \u003d r2.isConstructor()\n  if ($z5 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  $z6 \u003d r2.isStaticInitializer()\n  if ($z6 \u003d\u003d 0) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $i0 \u003d r2.getModifiers()\n  $i1 \u003d $i0 \u0026 64\n  if ($i1 !\u003d 0) goto B11 else B13\n}",
      "B11 {\n  $i2 \u003d $i0 \u0026 4096\n  if ($i2 !\u003d 0) goto B12 else B13\n}",
      "B12 {\n  $z7 \u003d 1\n  goto B14\n}",
      "B13 {\n  $z7 \u003d 0\n}",
      "B14 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "toSimpleSig",
    "signature": "java.lang.String toSimpleSig(java.lang.String)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  $i0 \u003d r0.indexOf(32)\n  $i1 \u003d $i0 + 1\n  $r1 \u003d r0.substring($i1)\n  $i2 \u003d $r1.indexOf(40)\n  $r2 \u003d $r1.substring(0, $i2)\n  $i3 \u003d $r1.indexOf(40)\n  $i4 \u003d $i3 + 1\n  $i5 \u003d $r1.lastIndexOf(41)\n  $r3 \u003d $r1.substring($i4, $i5)\n  $z0 \u003d $r3.isBlank()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r13 \u003d dynInvoke makeConcatWithConstants($r2)\n  return\n}",
      "B2 {\n  $r4 \u003d $r3.split(\",\")\n  $r5 \u003d Arrays.stream($r4)\n  $r6 \u003d MethodAnalysisToJson$lambda_toSimpleSig_0__1.bootstrap$()\n  $r7 \u003d $r5.map($r6)\n  $r8 \u003d MethodAnalysisToJson$lambda_toSimpleSig_1__2.bootstrap$()\n  $r9 \u003d $r7.reduce($r8)\n  $r10 \u003d $r9.orElse(\"\")\n  r11 \u003d String) $r10\n  $r12 \u003d dynInvoke makeConcatWithConstants($r2, r11)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "norm",
    "signature": "java.lang.String norm(java.lang.String)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 10,
    "edges": 13,
    "cc": 5,
    "flowSummary": [
      "B1 : If($z0 !\u003d 0) → B2 | else → B3",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B7",
      "B3 : If($i0 \u003c\u003d 0) → B4 | else → B5",
      "B7 : If($i1 \u003c 0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  String\n  r3 \u003d r2.trim()\n}",
      "B1 {\n  $z0 \u003d r3.endsWith(\"\")\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d r3.endsWith(\"...\")\n  if ($z1 \u003d\u003d 0) goto B3 else B7\n}",
      "B3 {\n  $r0 \u003d r3\n  $i0 \u003d r3.lastIndexOf(91)\n  if ($i0 \u003c\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $i4 \u003d r3.lastIndexOf(91)\n  goto B6\n}",
      "B5 {\n  $i4 \u003d r3.lastIndexOf(46)\n}",
      "B6 {\n  r3 \u003d $r0.substring(0, $i4)\n  goto B1\n}",
      "B7 {\n  $i1 \u003d r3.indexOf(60)\n  if ($i1 \u003c 0) goto B8 else B9\n}",
      "B8 {\n  r3 \u003d r3.substring(0, $i1)\n}",
      "B9 {\n  $i2 \u003d r3.lastIndexOf(46)\n  $i3 \u003d $i2 + 1\n  $r1 \u003d r3.substring($i3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B1",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "sootParts",
    "signature": "java.util.List sootParts(java.lang.String)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i7 \u003e\u003d i6) → B2 | else → B5",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  String\n  $i0 \u003d r0.indexOf(32)\n  $i1 \u003d $i0 + 1\n  $r1 \u003d r0.substring($i1)\n  $i2 \u003d $r1.indexOf(40)\n  $r2 \u003d $r1.substring(0, $i2)\n  $i3 \u003d $r1.indexOf(40)\n  $i4 \u003d $i3 + 1\n  $i5 \u003d $r1.lastIndexOf(41)\n  $r3 \u003d $r1.substring($i4, $i5)\n  $r4 \u003d $r3.split(\",\")\n  $r5 \u003d ArrayList\n  new ArrayList()\n  $r5.add($r2)\n  i6 \u003d lengthof $r4\n  i7 \u003d 0\n}",
      "B1 {\n  if (i7 \u003e\u003d i6) goto B2 else B5\n}",
      "B2 {\n  r6 \u003d $r4[i7]\n  $z0 \u003d r6.isBlank()\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r7 \u003d MethodAnalysisToJson.norm(r6)\n  $r5.add($r7)\n}",
      "B4 {\n  i7 \u003d i7 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "matches",
    "signature": "boolean matches(com.github.javaparser.ast.body.MethodDeclaration,soot.SootMethod)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 10,
    "edges": 10,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($i0 \u003d\u003d $i1) → B3 | else → B4",
      "B5 : If(i4 \u003e\u003d $i2) → B6 | else → B9",
      "B6 : If($z1 !\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  MethodDeclaration\n  SootMethod\n  $r1 \u003d r0.getNameAsString()\n  $r3 \u003d r2.getName()\n  $z0 \u003d $r1.equals($r3)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d r0.getParameters()\n  $i0 \u003d $r4.size()\n  $i1 \u003d r2.getParameterCount()\n  if ($i0 \u003d\u003d $i1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r5 \u003d r2.getSubSignature()\n  $r6 \u003d MethodAnalysisToJson.sootParts($r5)\n  i4 \u003d 0\n}",
      "B5 {\n  $r7 \u003d r0.getParameters()\n  $i2 \u003d $r7.size()\n  if (i4 \u003e\u003d $i2) goto B6 else B9\n}",
      "B6 {\n  $r8 \u003d r0.getParameter(i4)\n  $r9 \u003d $r8.getType()\n  $r10 \u003d $r9.asString()\n  $r11 \u003d MethodAnalysisToJson.norm($r10)\n  $i3 \u003d i4 + 1\n  $r12 \u003d $r6.get($i3)\n  r13 \u003d String) $r12\n  $z1 \u003d $r11.equalsIgnoreCase(r13)\n  if ($z1 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  i4 \u003d i4 + 1\n  goto B5\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B5",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "main",
    "signature": "void main(java.lang.String[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 86,
    "edges": 131,
    "cc": 47,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B77",
      "B3 : If($z16 \u003d\u003d 0) → B4 | else → B76",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6",
      "B9 : If($i1 \u003d\u003d 0) → B10 | else → B3",
      "B10 : If($i2 !\u003d 0) → B11 | else → B12",
      "B13 : If($z2 \u003d\u003d 0) → B14 | else → B17",
      "B14 : If($i12 \u003c\u003d 0) → B15 | else → B16",
      "B18 : If($z17 \u003d\u003d 0) → B19 | else → B27",
      "B19 : If($i11 \u003e\u003d 2) → B20 | else → B21",
      "B21 : If($z13 \u003d\u003d 0) → B22 | else → B23",
      "B23 : If($z14 !\u003d 0) → B24 | else → B25",
      "B24 : If($z15 \u003d\u003d 0) → B25 | else → B18",
      "B27 : If(r148 \u003d\u003d null) → B28 | else → B31",
      "B28 : If($z11 \u003d\u003d 0) → B29 | else → B31",
      "B29 : If($z12 \u003d\u003d 0) → B30 | else → B31",
      "B31 : If($z18 \u003d\u003d 0) → B32 | else → B46",
      "B32 : If(i13 \u003e\u003d i14) → B33 | else → B46",
      "B46 : If(r148 \u003d\u003d null) → B47 | else → B49",
      "B47 : If($z10 \u003d\u003d 0) → B48 | else → B49",
      "B50 : If($z19 \u003d\u003d 0) → B51 | else → B66",
      "B51 : If($z6 \u003d\u003d 0) → B52 | else → B53",
      "B54 : If($z7 \u003d\u003d 0) → B55 | else → B56",
      "B57 : If($z8 !\u003d 0) → B58 | else → B59",
      "B59 : If($z9 \u003d\u003d 0) → B60 | else → B61",
      "B62 : If($r82 \u003d\u003d null) → B63 | else → B64",
      "B67 : If($z3 \u003d\u003d 0) → B68 | else → B75",
      "B68 : If(r154 \u003d\u003d null) → B69 | else → B70",
      "B70 : If($z4 \u003d\u003d 0) → B71 | else → B74",
      "B71 : If($r67 \u003d\u003d null) → B72 | else → B74",
      "B72 : If($z5 \u003d\u003d 0) → B73 | else → B74"
    ],
    "blockList": [
      "B0 {\n  String[]\n  G.reset()\n  $r0 \u003d Options.v()\n  $r0.set_prepend_classpath(1)\n  $r1 \u003d Options.v()\n  $r1.set_allow_phantom_refs(1)\n  $r2 \u003d Options.v()\n  $r3 \u003d Collections.singletonList(\"C:\\\\Users\\\\00000\\\\Desktop\\\\my\\\\javaBenchmark\\\\commons-codec-1.7-src\\\\commons-codec-1.7-src\\\\target\\\\classes\")\n  $r2.set_process_dir($r3)\n  $r4 \u003d Options.v()\n  $r4.set_output_format(12)\n  $r5 \u003d Options.v()\n  $r7 \u003d String pathSeparator\u003e\n  $r6 \u003d CharSequence)[2]\n  $r6[0] \u003d 7-src\\\\target\\\\classes\"\n  $r8 \u003d System.getProperty(\"java.class.path\")\n  $r6[1] \u003d $r8\n  $r9 \u003d String.join($r7, $r6)\n  $r5.set_soot_classpath($r9)\n  $r10 \u003d Scene.v()\n  $r10.loadNecessaryClasses()\n  $r11 \u003d HashMap\n  new HashMap()\n  $r13 \u003d Path SOURCE_ROOT\u003e\n  $r12 \u003d FileVisitOption)[0]\n  $r14 \u003d Files.walk($r13, $r12)\n  $r15 \u003d MethodAnalysisToJson$lambda_main_2__3.bootstrap$()\n  $r16 \u003d $r14.filter($r15)\n  $r17 \u003d MethodAnalysisToJson$lambda_main_3__4.bootstrap$($r11)\n  $r16.forEach($r17)\n  $r18 \u003d ArrayList\n  new ArrayList()\n  $r19 \u003d HashMap\n  new HashMap()\n  $r20 \u003d ArrayList\n  $r21 \u003d Scene.v()\n  $r22 \u003d $r21.getApplicationClasses()\n  new ArrayList($r22)\n  $r23 \u003d $r20.iterator()\n}",
      "B1 {\n  $z0 \u003d $r23.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B65\n}",
      "B2 {\n  $r30 \u003d $r23.next()\n  r134 \u003d SootClass) $r30\n  $r31 \u003d ArrayList\n  $r32 \u003d r134.getMethods()\n  new ArrayList($r32)\n  $r33 \u003d $r31.iterator()\n}",
      "B3 {\n  $z16 \u003d $r33.hasNext()\n  if ($z16 \u003d\u003d 0) goto B4 else B64\n}",
      "B4 {\n  $r34 \u003d $r33.next()\n  r135 \u003d SootMethod) $r34\n  $z1 \u003d MethodAnalysisToJson.isEligible(r134, r135)\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  goto B3\n}",
      "B6 {\n  $r35 \u003d r135.retrieveActiveBody()\n  goto B8\n}",
      "B7 {\n  $r132 :\u003d @caughtexception\n  goto B3\n}",
      "B8 {\n  $r36 \u003d ExceptionalBlockGraph\n  new ExceptionalBlockGraph($r35)\n  $i1 \u003d $r36.size()\n  $r37 \u003d $r36.getBlocks()\n  $r38 \u003d $r37.stream()\n  $r39 \u003d MethodAnalysisToJson$lambda_main_4__5.bootstrap$($r36)\n  $r40 \u003d $r38.mapToInt($r39)\n  $i2 \u003d $r40.sum()\n  $i3 \u003d $i2 - $i1\n  i4 \u003d $i3 + 2\n  if ($i1 \u003d\u003d 0) goto B9 else B3\n}",
      "B9 {\n  if ($i2 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  goto B3\n}",
      "B11 {\n  i13 \u003d 2147483647\n  i14 \u003d -2147483648\n  $r41 \u003d $r35.getUnits()\n  $r42 \u003d $r41.iterator()\n}",
      "B12 {\n  $z2 \u003d $r42.hasNext()\n  if ($z2 \u003d\u003d 0) goto B13 else B16\n}",
      "B13 {\n  $r128 \u003d $r42.next()\n  r136 \u003d Unit) $r128\n  $i12 \u003d r136.getJavaSourceStartLineNumber()\n  if ($i12 \u003c\u003d 0) goto B14 else B15\n}",
      "B14 {\n  i13 \u003d Math.min(i13, $i12)\n  i14 \u003d Math.max(i14, $i12)\n}",
      "B15 {\n  goto B12\n}",
      "B16 {\n  $r43 \u003d ArrayList\n  new ArrayList()\n  $r44 \u003d $r36.iterator()\n}",
      "B17 {\n  $z17 \u003d $r44.hasNext()\n  if ($z17 \u003d\u003d 0) goto B18 else B26\n}",
      "B18 {\n  $r118 \u003d $r44.next()\n  r137 \u003d Block) $r118\n  $r119 \u003d $r36.getSuccsOf(r137)\n  $i11 \u003d $r119.size()\n  if ($i11 \u003e\u003d 2) goto B19 else B20\n}",
      "B19 {\n  goto B17\n}",
      "B20 {\n  $r120 \u003d r137.getTail()\n  $z13 \u003d IfStmt\n  if ($z13 \u003d\u003d 0) goto B21 else B22\n}",
      "B21 {\n  $r126 \u003d IfStmt) $r120\n  $r127 \u003d $r126.getCondition()\n  r138 \u003d $r127.toString()\n  goto B25\n}",
      "B22 {\n  $z14 \u003d LookupSwitchStmt\n  if ($z14 !\u003d 0) goto B23 else B24\n}",
      "B23 {\n  $z15 \u003d TableSwitchStmt\n  if ($z15 \u003d\u003d 0) goto B24 else B17\n}",
      "B24 {\n  $r121 \u003d $r120.getUseBoxes()\n  $r122 \u003d $r121.get(0)\n  $r123 \u003d ValueBox) $r122\n  $r124 \u003d $r123.getValue()\n  $r125 \u003d String.valueOf($r124)\n  r138 \u003d dynInvoke makeConcatWithConstants($r125)\n}",
      "B25 {\n  $r139 \u003d Object)[4]\n  $i15 \u003d r137.getIndexInMethod()\n  $r140 \u003d Integer.valueOf($i15)\n  $r139[0] \u003d $r140\n  $r139[1] \u003d r138\n  $r141 \u003d $r119.get(0)\n  $r142 \u003d Block) $r141\n  $i16 \u003d $r142.getIndexInMethod()\n  $r143 \u003d Integer.valueOf($i16)\n  $r139[2] \u003d $r143\n  $r144 \u003d $r119.get(1)\n  $r145 \u003d Block) $r144\n  $i17 \u003d $r145.getIndexInMethod()\n  $r146 \u003d Integer.valueOf($i17)\n  $r139[3] \u003d $r146\n  $r147 \u003d String.format(\"B%d : If(%s) \\u2192 B%d | else \\u2192 B%d\", $r139)\n  $r43.add($r147)\n  goto B17\n}",
      "B26 {\n  $r45 \u003d r134.getName()\n  $r46 \u003d MethodAnalysisToJson$lambda_main_5__6.bootstrap$()\n  $r47 \u003d $r19.computeIfAbsent($r45, $r46)\n  r148 \u003d CompilationUnit) $r47\n  r149 \u003d \"(source not found)\"\n  $r48 \u003d r135.getSubSignature()\n  MethodAnalysisToJson.toSimpleSig($r48)\n  if (r148 \u003d\u003d null) goto B27 else B30\n}",
      "B27 {\n  $r103 \u003d r134.getShortName()\n  $r104 \u003d r148.getClassByName($r103)\n  $z11 \u003d $r104.isPresent()\n  if ($z11 \u003d\u003d 0) goto B28 else B30\n}",
      "B28 {\n  $r105 \u003d $r104.get()\n  $r106 \u003d ClassOrInterfaceDeclaration) $r105\n  $r107 \u003d $r106.getMethods()\n  $r108 \u003d $r107.stream()\n  $r109 \u003d MethodAnalysisToJson$lambda_main_6__9.bootstrap$(r135)\n  $r110 \u003d $r108.filter($r109)\n  $r111 \u003d $r110.findFirst()\n  $z12 \u003d $r111.isPresent()\n  if ($z12 \u003d\u003d 0) goto B29 else B30\n}",
      "B29 {\n  $r112 \u003d $r111.get()\n  $r113 \u003d MethodDeclaration) $r112\n  $r114 \u003d $r113.getBody()\n  $r115 \u003d MethodAnalysisToJson$toString__10.bootstrap$()\n  $r116 \u003d $r114.map($r115)\n  $r117 \u003d $r116.orElse(\"(no body)\")\n  r149 \u003d String) $r117\n}",
      "B30 {\n  $r150 \u003d \"(source not found)\"\n  $z18 \u003d $r150.equals(r149)\n  if ($z18 \u003d\u003d 0) goto B31 else B34\n}",
      "B31 {\n  if (i13 \u003e\u003d i14) goto B32 else B34\n}",
      "B32 {\n  $r96 \u003d Path SOURCE_ROOT\u003e\n  $r97 \u003d $r45.replace(46, 47)\n  $r98 \u003d dynInvoke makeConcatWithConstants($r97)\n  $r99 \u003d $r96.resolve($r98)\n  $r100 \u003d Files.readAllLines($r99)\n  $r101 \u003d System.lineSeparator()\n  $i8 \u003d i13 - 1\n  $i9 \u003d $r100.size()\n  $i10 \u003d Math.min(i14, $i9)\n  $r102 \u003d $r100.subList($i8, $i10)\n  r149 \u003d String.join($r101, $r102)\n  goto B34\n}",
      "B33 {\n  $r131 :\u003d @caughtexception\n}",
      "B34 {\n  $r151 \u003d MethodAnalysisToJson.buildPrettyCFG($r35)\n  $r152 \u003d HashSet\n  new HashSet()\n  $r153 \u003d HashSet\n  new HashSet()\n  r154 \u003d null\n  if (r148 \u003d\u003d null) goto B35 else B37\n}",
      "B35 {\n  $r85 \u003d r134.getShortName()\n  $r86 \u003d r148.getClassByName($r85)\n  $z10 \u003d $r86.isPresent()\n  if ($z10 \u003d\u003d 0) goto B36 else B37\n}",
      "B36 {\n  $r87 \u003d $r86.get()\n  r154 \u003d ClassOrInterfaceDeclaration) $r87\n  $r88 \u003d $r86.get()\n  $r89 \u003d ClassOrInterfaceDeclaration) $r88\n  $r90 \u003d $r89.getMethods()\n  $r91 \u003d $r90.stream()\n  $r92 \u003d MethodAnalysisToJson$lambda_main_7__7.bootstrap$(r135)\n  $r93 \u003d $r91.filter($r92)\n  $r94 \u003d $r93.findFirst()\n  $r95 \u003d MethodAnalysisToJson$lambda_main_8__8.bootstrap$(r134, $r152, $r153)\n  $r94.ifPresent($r95)\n}",
      "B37 {\n  $r155 \u003d new MethodInfo\n  new MethodInfo()\n  $r156 \u003d $r152.iterator()\n}",
      "B38 {\n  $z19 \u003d $r156.hasNext()\n  if ($z19 \u003d\u003d 0) goto B39 else B54\n}",
      "B39 {\n  $r74 \u003d $r156.next()\n  r157 \u003d String) $r74\n  $z6 \u003d r157.contains(\".\")\n  if ($z6 \u003d\u003d 0) goto B40 else B41\n}",
      "B40 {\n  $i6 \u003d r157.lastIndexOf(46)\n  $i7 \u003d $i6 + 1\n  $r158 \u003d r157.substring($i7)\n  goto B42\n}",
      "B41 {\n  $r158 \u003d r157\n}",
      "B42 {\n  r159 \u003d $r158\n  $z7 \u003d r157.contains(\".\")\n  if ($z7 \u003d\u003d 0) goto B43 else B44\n}",
      "B43 {\n  $r160 \u003d r157\n  goto B45\n}",
      "B44 {\n  $r75 \u003d r134.getPackageName()\n  $r160 \u003d dynInvoke makeConcatWithConstants($r75, $r158)\n}",
      "B45 {\n  r161 \u003d $r160\n  $r76 \u003d Path SOURCE_ROOT\u003e\n  $r77 \u003d $r160.replace(46, 47)\n  $r78 \u003d dynInvoke makeConcatWithConstants($r77)\n  $r79 \u003d $r76.resolve($r78)\n  r162 \u003d $r79\n  $r80 \u003d LinkOption)[0]\n  $z8 \u003d Files.exists($r79, $r80)\n  if ($z8 !\u003d 0) goto B46 else B47\n}",
      "B46 {\n  $r84 \u003d $r11.get(r159)\n  r162 \u003d Path) $r84\n}",
      "B47 {\n  $r81 \u003d new DependencyInfo\n  new DependencyInfo()\n  $z9 \u003d r161.contains(\".\")\n  if ($z9 \u003d\u003d 0) goto B48 else B49\n}",
      "B48 {\n  $r163 \u003d r161\n  goto B50\n}",
      "B49 {\n  $r163 \u003d r159\n}",
      "B50 {\n  String name\u003e \u003d $r163\n  $r82 \u003d MethodAnalysisToJson.loadCU(r162, $r19)\n  if ($r82 \u003d\u003d null) goto B51 else B52\n}",
      "B51 {\n  $r164 \u003d $r82.toString()\n  goto B53\n}",
      "B52 {\n  $r164 \u003d \"(source not found)\"\n}",
      "B53 {\n  String body\u003e \u003d $r164\n  $r83 \u003d List depClasses\u003e\n  $r83.add($r81)\n  goto B38\n}",
      "B54 {\n  $r49 \u003d $r153.iterator()\n}",
      "B55 {\n  $z3 \u003d $r49.hasNext()\n  if ($z3 \u003d\u003d 0) goto B56 else B63\n}",
      "B56 {\n  $r57 \u003d $r49.next()\n  r165 \u003d List) $r57\n  $r58 \u003d r165.get(0)\n  r166 \u003d String) $r58\n  $r59 \u003d r165.get(1)\n  $r60 \u003d String) $r59\n  $i5 \u003d Integer.parseInt($r60)\n  $r61 \u003d new DependencyInfo\n  new DependencyInfo()\n  $r62 \u003d r134.getShortName()\n  $r63 \u003d dynInvoke makeConcatWithConstants($r62, r166, $i5)\n  String name\u003e \u003d $r63\n  r167 \u003d \"(source not found)\"\n  if (r154 \u003d\u003d null) goto B57 else B58\n}",
      "B57 {\n  $r73 \u003d Collections.nCopies($i5, \"\")\n  r167 \u003d MethodAnalysisToJson.findMethodBodySrc(r154, r166, $r73)\n}",
      "B58 {\n  $r64 \u003d \"(source not found)\"\n  $z4 \u003d $r64.equals(r167)\n  if ($z4 \u003d\u003d 0) goto B59 else B62\n}",
      "B59 {\n  $r65 \u003d r134.getShortName()\n  $r66 \u003d $r11.get($r65)\n  r168 \u003d Path) $r66\n  $r67 \u003d MethodAnalysisToJson.loadCU(r168, $r19)\n  if ($r67 \u003d\u003d null) goto B60 else B62\n}",
      "B60 {\n  $r68 \u003d r134.getShortName()\n  $r69 \u003d $r67.getClassByName($r68)\n  $z5 \u003d $r69.isPresent()\n  if ($z5 \u003d\u003d 0) goto B61 else B62\n}",
      "B61 {\n  $r70 \u003d $r69.get()\n  $r71 \u003d ClassOrInterfaceDeclaration) $r70\n  $r72 \u003d Collections.nCopies($i5, \"\")\n  r167 \u003d MethodAnalysisToJson.findMethodBodySrc($r71, r166, $r72)\n}",
      "B62 {\n  String body\u003e \u003d r167\n  $r169 \u003d List depMethods\u003e\n  $r169.add($r61)\n  goto B55\n}",
      "B63 {\n  String clazz\u003e \u003d $r45\n  $r50 \u003d r135.getName()\n  String methodName\u003e \u003d $r50\n  $r51 \u003d r135.getSubSignature()\n  String signature\u003e \u003d $r51\n  $r52 \u003d MethodAnalysisToJson.vis(r135)\n  String visibility\u003e \u003d $r52\n  String body\u003e \u003d r149\n  \u003cMethodInfo: int nodes\u003e \u003d $i1\n  \u003cMethodInfo: int edges\u003e \u003d $i2\n  \u003cMethodInfo: int cc\u003e \u003d i4\n  List flowSummary\u003e \u003d $r43\n  $r53 \u003d $r151.get(\"blocks\")\n  $r54 \u003d List) $r53\n  List blockList\u003e \u003d $r54\n  $r55 \u003d $r151.get(\"edges\")\n  $r56 \u003d List) $r55\n  List blockEdges\u003e \u003d $r56\n  $r18.add($r155)\n  goto B3\n}",
      "B64 {\n  goto B1\n}",
      "B65 {\n  $r24 \u003d GsonBuilder\n  new GsonBuilder()\n  $r25 \u003d $r24.setPrettyPrinting()\n  $r26 \u003d $r25.create()\n  $r27 \u003d FileWriter\n  new FileWriter(\"C:/Users/00000/Desktop/my/jso_all_methods.json\")\n  $r26.toJson($r18, $r27)\n  $r27.close()\n  goto B69\n}",
      "B66 {\n  $r130 :\u003d @caughtexception\n  $r27.close()\n  goto B68\n}",
      "B67 {\n  $r129 :\u003d @caughtexception\n  $r130.addSuppressed($r129)\n}",
      "B68 {\n  throw $r130\n}",
      "B69 {\n  $r28 \u003d PrintStream out\u003e\n  $i0 \u003d $r18.size()\n  $r29 \u003d dynInvoke makeConcatWithConstants($i0)\n  $r28.println($r29)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B65",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B64",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B3",
      "B6 --\u003e B8",
      "B7 --\u003e B3",
      "B8 --\u003e B9",
      "B8 --\u003e B3",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B3",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B16",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B12",
      "B16 --\u003e B17",
      "B17 --\u003e B18",
      "B17 --\u003e B26",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B17",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B25",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B24",
      "B23 --\u003e B17",
      "B24 --\u003e B25",
      "B25 --\u003e B17",
      "B26 --\u003e B27",
      "B26 --\u003e B30",
      "B27 --\u003e B28",
      "B27 --\u003e B30",
      "B28 --\u003e B29",
      "B28 --\u003e B30",
      "B29 --\u003e B30",
      "B30 --\u003e B31",
      "B30 --\u003e B34",
      "B31 --\u003e B32",
      "B31 --\u003e B34",
      "B32 --\u003e B34",
      "B33 --\u003e B34",
      "B34 --\u003e B35",
      "B34 --\u003e B37",
      "B35 --\u003e B36",
      "B35 --\u003e B37",
      "B36 --\u003e B37",
      "B37 --\u003e B38",
      "B38 --\u003e B39",
      "B38 --\u003e B54",
      "B39 --\u003e B40",
      "B39 --\u003e B41",
      "B40 --\u003e B42",
      "B41 --\u003e B42",
      "B42 --\u003e B43",
      "B42 --\u003e B44",
      "B43 --\u003e B45",
      "B44 --\u003e B45",
      "B45 --\u003e B46",
      "B45 --\u003e B47",
      "B46 --\u003e B47",
      "B47 --\u003e B48",
      "B47 --\u003e B49",
      "B48 --\u003e B50",
      "B49 --\u003e B50",
      "B50 --\u003e B51",
      "B50 --\u003e B52",
      "B51 --\u003e B53",
      "B52 --\u003e B53",
      "B53 --\u003e B38",
      "B54 --\u003e B55",
      "B55 --\u003e B56",
      "B55 --\u003e B63",
      "B56 --\u003e B57",
      "B56 --\u003e B58",
      "B57 --\u003e B58",
      "B58 --\u003e B59",
      "B58 --\u003e B62",
      "B59 --\u003e B60",
      "B59 --\u003e B62",
      "B60 --\u003e B61",
      "B60 --\u003e B62",
      "B61 --\u003e B62",
      "B62 --\u003e B55",
      "B63 --\u003e B3",
      "B64 --\u003e B1",
      "B65 --\u003e B69",
      "B66 --\u003e B68",
      "B67 --\u003e B68",
      "B68 --\u003e [EXIT]",
      "B69 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "buildPrettyCFG",
    "signature": "java.util.Map buildPrettyCFG(soot.Body)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 18,
    "edges": 23,
    "cc": 7,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B6",
      "B3 : If($z5 \u003d\u003d 0) → B4 | else → B5",
      "B7 : If($z1 \u003d\u003d 0) → B8 | else → B17",
      "B9 : If($z2 \u003d\u003d 0) → B10 | else → B11",
      "B11 : If($z3 \u003d\u003d 0) → B12 | else → B13",
      "B14 : If($z4 \u003d\u003d 0) → B15 | else → B16"
    ],
    "blockList": [
      "B0 {\n  Body\n  $r0 \u003d BriefBlockGraph\n  new BriefBlockGraph(r1)\n  $r2 \u003d HashMap\n  new HashMap()\n  $r3 \u003d $r0.iterator()\n}",
      "B1 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B6\n}",
      "B2 {\n  $r23 \u003d $r3.next()\n  r27 \u003d Block) $r23\n  $r24 \u003d r27.iterator()\n}",
      "B3 {\n  $z5 \u003d $r24.hasNext()\n  if ($z5 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r25 \u003d $r24.next()\n  r28 \u003d Unit) $r25\n  $i4 \u003d r27.getIndexInMethod()\n  $r26 \u003d Integer.valueOf($i4)\n  $r2.put(r28, $r26)\n  goto B3\n}",
      "B5 {\n  goto B1\n}",
      "B6 {\n  $r4 \u003d ArrayList\n  new ArrayList()\n  $r5 \u003d ArrayList\n  new ArrayList()\n  $r6 \u003d $r0.iterator()\n}",
      "B7 {\n  $z1 \u003d $r6.hasNext()\n  if ($z1 \u003d\u003d 0) goto B8 else B17\n}",
      "B8 {\n  $r8 \u003d $r6.next()\n  r29 \u003d Block) $r8\n  $r9 \u003d StringBuilder\n  new StringBuilder()\n  $r10 \u003d $r9.append(\"B\")\n  $i0 \u003d r29.getIndexInMethod()\n  $r11 \u003d $r10.append($i0)\n  $r11.append(\" {\")\n  $r12 \u003d r29.iterator()\n}",
      "B9 {\n  $z2 \u003d $r12.hasNext()\n  if ($z2 \u003d\u003d 0) goto B10 else B11\n}",
      "B10 {\n  $r20 \u003d $r12.next()\n  r30 \u003d Unit) $r20\n  $r21 \u003d MethodAnalysisToJson.pseudo(r30, r29, $r0, $r2)\n  $r22 \u003d $r9.append(\"\\n  \")\n  $r22.append($r21)\n  goto B9\n}",
      "B11 {\n  $r9.append(\"\\n}\")\n  $r13 \u003d $r9.toString()\n  $r4.add($r13)\n  $r14 \u003d $r0.getSuccsOf(r29)\n  $z3 \u003d $r14.isEmpty()\n  if ($z3 \u003d\u003d 0) goto B12 else B13\n}",
      "B12 {\n  $i3 \u003d r29.getIndexInMethod()\n  $r19 \u003d dynInvoke makeConcatWithConstants($i3)\n  $r5.add($r19)\n  goto B16\n}",
      "B13 {\n  $r15 \u003d $r0.getSuccsOf(r29)\n  $r16 \u003d $r15.iterator()\n}",
      "B14 {\n  $z4 \u003d $r16.hasNext()\n  if ($z4 \u003d\u003d 0) goto B15 else B16\n}",
      "B15 {\n  $r17 \u003d $r16.next()\n  r31 \u003d Block) $r17\n  $i1 \u003d r29.getIndexInMethod()\n  $i2 \u003d r31.getIndexInMethod()\n  $r18 \u003d dynInvoke makeConcatWithConstants($i1, $i2)\n  $r5.add($r18)\n  goto B14\n}",
      "B16 {\n  goto B7\n}",
      "B17 {\n  $r7 \u003d HashMap\n  new HashMap()\n  $r7.put(\"blocks\", $r4)\n  $r7.put(\"edges\", $r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e B1",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B17",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B9",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B16",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B14",
      "B16 --\u003e B7",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "invoke2pseudo",
    "signature": "java.lang.String invoke2pseudo(soot.jimple.InvokeExpr)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B3",
      "B1 : If($z3 \u003d\u003d 0) → B2 | else → B3",
      "B3 : If($z1 \u003d\u003d 0) → B4 | else → B5",
      "B5 : If($z2 \u003d\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  InvokeExpr\n  $z0 \u003d SpecialInvokeExpr\n  if ($z0 \u003d\u003d 0) goto B1 else B3\n}",
      "B1 {\n  r28 \u003d SpecialInvokeExpr) r0\n  $r20 \u003d r0.getMethodRef()\n  $r21 \u003d $r20.name()\n  $z3 \u003d $r21.equals(\"\u003cinit\u003e\")\n  if ($z3 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r22 \u003d r28.getBase()\n  $r23 \u003d $r22.getType()\n  $r24 \u003d $r23.toString()\n  $i2 \u003d $r24.lastIndexOf(46)\n  $i3 \u003d $i2 + 1\n  $r25 \u003d $r24.substring($i3)\n  $r26 \u003d MethodAnalysisToJson.argList(r0)\n  $r27 \u003d dynInvoke makeConcatWithConstants($r25, $r26)\n  return\n}",
      "B3 {\n  $z1 \u003d StaticInvokeExpr\n  if ($z1 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r12 \u003d r0.getMethodRef()\n  $r13 \u003d $r12.declaringClass()\n  $r14 \u003d $r13.getName()\n  $i0 \u003d $r14.lastIndexOf(46)\n  $i1 \u003d $i0 + 1\n  $r15 \u003d $r14.substring($i1)\n  $r16 \u003d r0.getMethodRef()\n  $r17 \u003d $r16.name()\n  $r18 \u003d MethodAnalysisToJson.argList(r0)\n  $r19 \u003d dynInvoke makeConcatWithConstants($r15, $r17, $r18)\n  return\n}",
      "B5 {\n  $z2 \u003d InstanceInvokeExpr\n  if ($z2 \u003d\u003d 0) goto B6 else B7\n}",
      "B6 {\n  r29 \u003d InstanceInvokeExpr) r0\n  $r5 \u003d r29.getBase()\n  $r6 \u003d $r5.toString()\n  $r7 \u003d MethodAnalysisToJson.strip($r6)\n  $r8 \u003d r0.getMethodRef()\n  $r9 \u003d $r8.name()\n  $r10 \u003d MethodAnalysisToJson.argList(r0)\n  $r11 \u003d dynInvoke makeConcatWithConstants($r7, $r9, $r10)\n  return\n}",
      "B7 {\n  $r1 \u003d r0.getMethodRef()\n  $r2 \u003d $r1.name()\n  $r3 \u003d MethodAnalysisToJson.argList(r0)\n  $r4 \u003d dynInvoke makeConcatWithConstants($r2, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "argList",
    "signature": "java.lang.String argList(soot.jimple.InvokeExpr)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  InvokeExpr\n  $r1 \u003d r0.getArgs()\n  $z0 \u003d $r1.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d \"\"\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r0.getArgs()\n  $r3 \u003d $r2.toString()\n  $r4 \u003d $r3.replace(\"\", \"\")\n  $r5 \u003d $r4.replace(\"\", \"\")\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "strip",
    "signature": "java.lang.String strip(java.lang.String)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4",
      "B4 : If($i0 \u003c 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  String\n  $z0 \u003d r0.startsWith(\"@this:\")\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z1 \u003d r0.startsWith(\"@parameter\")\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $c2 \u003d r0.charAt(10)\n  $r1 \u003d dynInvoke makeConcatWithConstants($c2)\n  return\n}",
      "B4 {\n  $i0 \u003d r0.lastIndexOf(46)\n  if ($i0 \u003c 0) goto B5 else B6\n}",
      "B5 {\n  $i1 \u003d $i0 + 1\n  $r2 \u003d r0.substring($i1)\n  goto B7\n}",
      "B6 {\n  $r2 \u003d r0\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "pseudo",
    "signature": "java.lang.String pseudo(soot.Unit,soot.toolkits.graph.Block,soot.toolkits.graph.BlockGraph,java.util.Map)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 19,
    "edges": 20,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B5",
      "B1 : If($z7 \u003d\u003d 0) → B2 | else → B3",
      "B5 : If($z1 \u003d\u003d 0) → B6 | else → B9",
      "B6 : If($i0 !\u003d 2) → B7 | else → B8",
      "B9 : If($z2 \u003d\u003d 0) → B10 | else → B11",
      "B11 : If($z3 !\u003d 0) → B12 | else → B13",
      "B12 : If($z4 \u003d\u003d 0) → B13 | else → B14",
      "B14 : If($z5 \u003d\u003d 0) → B15 | else → B16",
      "B16 : If($z6 \u003d\u003d 0) → B17 | else → B18"
    ],
    "blockList": [
      "B0 {\n  Unit\n  Block\n  BlockGraph\n  Map\n  $z0 \u003d AssignStmt\n  if ($z0 \u003d\u003d 0) goto B1 else B5\n}",
      "B1 {\n  r39 \u003d AssignStmt) r0\n  $r32 \u003d r39.getLeftOp()\n  $r33 \u003d $r32.toString()\n  $r34 \u003d MethodAnalysisToJson.strip($r33)\n  $z7 \u003d r39.containsInvokeExpr()\n  if ($z7 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r38 \u003d r39.getInvokeExpr()\n  $r40 \u003d MethodAnalysisToJson.invoke2pseudo($r38)\n  goto B4\n}",
      "B3 {\n  $r35 \u003d r39.getRightOp()\n  $r36 \u003d $r35.toString()\n  $r40 \u003d MethodAnalysisToJson.strip($r36)\n}",
      "B4 {\n  $r37 \u003d dynInvoke makeConcatWithConstants($r34, $r40)\n  return\n}",
      "B5 {\n  $z1 \u003d IfStmt\n  if ($z1 \u003d\u003d 0) goto B6 else B9\n}",
      "B6 {\n  r41 \u003d IfStmt) r0\n  $r16 \u003d r14.getSuccsOf(r15)\n  $i0 \u003d $r16.size()\n  if ($i0 !\u003d 2) goto B7 else B8\n}",
      "B7 {\n  $r21 \u003d $r16.get(0)\n  $r22 \u003d Block) $r21\n  $i1 \u003d $r22.getIndexInMethod()\n  $r23 \u003d $r16.get(1)\n  $r24 \u003d Block) $r23\n  $i2 \u003d $r24.getIndexInMethod()\n  $r25 \u003d Object)[3]\n  $r26 \u003d r41.getCondition()\n  $r27 \u003d $r26.toString()\n  $r28 \u003d MethodAnalysisToJson.strip($r27)\n  $r25[0] \u003d $r28\n  $r29 \u003d Integer.valueOf($i1)\n  $r25[1] \u003d $r29\n  $r30 \u003d Integer.valueOf($i2)\n  $r25[2] \u003d $r30\n  $r31 \u003d String.format(\"if (%s) goto B%d else B%d\", $r25)\n  return\n}",
      "B8 {\n  $r17 \u003d r41.getCondition()\n  $r18 \u003d $r17.toString()\n  $r19 \u003d MethodAnalysisToJson.strip($r18)\n  $r20 \u003d dynInvoke makeConcatWithConstants($r19)\n  return\n}",
      "B9 {\n  $z2 \u003d GotoStmt\n  if ($z2 \u003d\u003d 0) goto B10 else B11\n}",
      "B10 {\n  r42 \u003d GotoStmt) r0\n  $r10 \u003d r42.getTarget()\n  $r11 \u003d r9.get($r10)\n  $r12 \u003d String.valueOf($r11)\n  $r13 \u003d dynInvoke makeConcatWithConstants($r12)\n  return\n}",
      "B11 {\n  $z3 \u003d ReturnStmt\n  if ($z3 !\u003d 0) goto B12 else B13\n}",
      "B12 {\n  $z4 \u003d ReturnVoidStmt\n  if ($z4 \u003d\u003d 0) goto B13 else B14\n}",
      "B13 {\n  return\n}",
      "B14 {\n  $z5 \u003d ThrowStmt\n  if ($z5 \u003d\u003d 0) goto B15 else B16\n}",
      "B15 {\n  r43 \u003d ThrowStmt) r0\n  $r5 \u003d r43.getOp()\n  $r6 \u003d $r5.toString()\n  $r7 \u003d MethodAnalysisToJson.strip($r6)\n  $r8 \u003d dynInvoke makeConcatWithConstants($r7)\n  return\n}",
      "B16 {\n  $z6 \u003d InvokeStmt\n  if ($z6 \u003d\u003d 0) goto B17 else B18\n}",
      "B17 {\n  r44 \u003d InvokeStmt) r0\n  $r3 \u003d r44.getInvokeExpr()\n  $r4 \u003d MethodAnalysisToJson.invoke2pseudo($r3)\n  return\n}",
      "B18 {\n  $r1 \u003d r0.toString()\n  $r2 \u003d MethodAnalysisToJson.strip($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "vis",
    "signature": "java.lang.String vis(soot.SootMethod)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  SootMethod\n  $z0 \u003d r0.isPublic()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z1 \u003d r0.isProtected()\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z2 \u003d r0.isPrivate()\n  if ($z2 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "loadCU",
    "signature": "com.github.javaparser.ast.CompilationUnit loadCU(java.nio.file.Path,java.util.Map)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Path\n  Map\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d r0.toString()\n  $r3 \u003d MethodAnalysisToJson$lambda_loadCU_15__18.bootstrap$(r0)\n  $r4 \u003d r1.computeIfAbsent($r2, $r3)\n  $r5 \u003d CompilationUnit) $r4\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.Base32",
    "methodName": "decode",
    "signature": "void decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)",
    "visibility": "package",
    "body": "(source not found)",
    "nodes": 25,
    "edges": 38,
    "cc": 15,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If(i0 \u003e\u003d 0) → B3 | else → B4",
      "B5 : If(i155 \u003e\u003d i0) → B6 | else → B14",
      "B6 : If($i156 !\u003d 61) → B7 | else → B8",
      "B8 : If($i157 \u003c 0) → B9 | else → B13",
      "B9 : If($i158 \u003e\u003d $i110) → B10 | else → B13",
      "B10 : If($i160 \u003c 0) → B11 | else → B13",
      "B11 : If($i119 !\u003d 0) → B12 | else → B13",
      "B14 : If($z1 \u003d\u003d 0) → B15 | else → B24",
      "B15 : If($i1 \u003c 2) → B16 | else → B24",
      "B16 : If(switch-on $i3) → B17 | else → B18"
    ],
    "blockList": [
      "B0 {\n  Base32\n  r5 :\u003d @parameter0: byte[]\n  i154 :\u003d @parameter1: int\n  i0 :\u003d @parameter2: int\n  BaseNCodec$Context\n  $z0 \u003d BaseNCodec$Context: boolean eof\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (i0 \u003e\u003d 0) goto B3 else B4\n}",
      "B3 {\n  BaseNCodec$Context: boolean eof\u003e \u003d 1\n}",
      "B4 {\n  i155 \u003d 0\n}",
      "B5 {\n  if (i155 \u003e\u003d i0) goto B6 else B14\n}",
      "B6 {\n  $i107 \u003d i154\n  i154 \u003d i154 + 1\n  b108 \u003d r5[$i107]\n  $i156 \u003d (int) b108\n  if ($i156 !\u003d 61) goto B7 else B8\n}",
      "B7 {\n  BaseNCodec$Context: boolean eof\u003e \u003d 1\n  goto B14\n}",
      "B8 {\n  $i109 \u003d Base32: int decodeSize\u003e\n  $r6 \u003d r1.ensureBufferSize($i109, r0)\n  $i157 \u003d (int) b108\n  if ($i157 \u003c 0) goto B9 else B13\n}",
      "B9 {\n  $r7 \u003d Base32: byte[] decodeTable\u003e\n  $i110 \u003d lengthof $r7\n  $i158 \u003d (int) b108\n  if ($i158 \u003e\u003d $i110) goto B10 else B13\n}",
      "B10 {\n  $r8 \u003d Base32: byte[] decodeTable\u003e\n  $i159 \u003d (int) b108\n  b111 \u003d $r8[$i159]\n  $i160 \u003d (int) b111\n  if ($i160 \u003c 0) goto B11 else B13\n}",
      "B11 {\n  $i112 \u003d BaseNCodec$Context: int modulus\u003e\n  $i113 \u003d $i112 + 1\n  $i114 \u003d $i113 % 8\n  BaseNCodec$Context: int modulus\u003e \u003d $i114\n  $l115 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l117 \u003d $l115 \u003c\u003c 5\n  $l116 \u003d (long) b111\n  $l118 \u003d $l117 + $l116\n  BaseNCodec$Context: long lbitWorkArea\u003e \u003d $l118\n  $i119 \u003d BaseNCodec$Context: int modulus\u003e\n  if ($i119 !\u003d 0) goto B12 else B13\n}",
      "B12 {\n  $i120 \u003d BaseNCodec$Context: int pos\u003e\n  $i121 \u003d $i120 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i121\n  $l122 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l123 \u003d $l122 \u003e\u003e 32\n  $l124 \u003d $l123 \u0026 255L\n  $i125 \u003d (int) $l124\n  $b126 \u003d (byte) $i125\n  $r6[$i120] \u003d $b126\n  $i127 \u003d BaseNCodec$Context: int pos\u003e\n  $i128 \u003d $i127 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i128\n  $l129 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l130 \u003d $l129 \u003e\u003e 24\n  $l131 \u003d $l130 \u0026 255L\n  $i132 \u003d (int) $l131\n  $b133 \u003d (byte) $i132\n  $r6[$i127] \u003d $b133\n  $i134 \u003d BaseNCodec$Context: int pos\u003e\n  $i135 \u003d $i134 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i135\n  $l136 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l137 \u003d $l136 \u003e\u003e 16\n  $l138 \u003d $l137 \u0026 255L\n  $i139 \u003d (int) $l138\n  $b140 \u003d (byte) $i139\n  $r6[$i134] \u003d $b140\n  $i141 \u003d BaseNCodec$Context: int pos\u003e\n  $i142 \u003d $i141 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i142\n  $l143 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l144 \u003d $l143 \u003e\u003e 8\n  $l145 \u003d $l144 \u0026 255L\n  $i146 \u003d (int) $l145\n  $b147 \u003d (byte) $i146\n  $r6[$i141] \u003d $b147\n  $i148 \u003d BaseNCodec$Context: int pos\u003e\n  $i149 \u003d $i148 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i149\n  $l150 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l151 \u003d $l150 \u0026 255L\n  $i152 \u003d (int) $l151\n  $b153 \u003d (byte) $i152\n  $r6[$i148] \u003d $b153\n}",
      "B13 {\n  i155 \u003d i155 + 1\n  goto B5\n}",
      "B14 {\n  $z1 \u003d BaseNCodec$Context: boolean eof\u003e\n  if ($z1 \u003d\u003d 0) goto B15 else B24\n}",
      "B15 {\n  $i1 \u003d BaseNCodec$Context: int modulus\u003e\n  if ($i1 \u003c 2) goto B16 else B24\n}",
      "B16 {\n  $i2 \u003d Base32: int decodeSize\u003e\n  $r2 \u003d r1.ensureBufferSize($i2, r0)\n  $i3 \u003d BaseNCodec$Context: int modulus\u003e\n  IllegalStateException; }\n}",
      "B17 {\n  $i99 \u003d BaseNCodec$Context: int pos\u003e\n  $i100 \u003d $i99 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i100\n  $l101 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l102 \u003d $l101 \u003e\u003e 2\n  $l103 \u003d $l102 \u0026 255L\n  $i104 \u003d (int) $l103\n  $b105 \u003d (byte) $i104\n  $r2[$i99] \u003d $b105\n  goto B24\n}",
      "B18 {\n  $i92 \u003d BaseNCodec$Context: int pos\u003e\n  $i93 \u003d $i92 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i93\n  $l94 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l95 \u003d $l94 \u003e\u003e 7\n  $l96 \u003d $l95 \u0026 255L\n  $i97 \u003d (int) $l96\n  $b98 \u003d (byte) $i97\n  $r2[$i92] \u003d $b98\n  goto B24\n}",
      "B19 {\n  $l77 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l78 \u003d $l77 \u003e\u003e 4\n  BaseNCodec$Context: long lbitWorkArea\u003e \u003d $l78\n  $i79 \u003d BaseNCodec$Context: int pos\u003e\n  $i80 \u003d $i79 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i80\n  $l81 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l82 \u003d $l81 \u003e\u003e 8\n  $l83 \u003d $l82 \u0026 255L\n  $i84 \u003d (int) $l83\n  $b85 \u003d (byte) $i84\n  $r2[$i79] \u003d $b85\n  $i86 \u003d BaseNCodec$Context: int pos\u003e\n  $i87 \u003d $i86 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i87\n  $l88 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l89 \u003d $l88 \u0026 255L\n  $i90 \u003d (int) $l89\n  $b91 \u003d (byte) $i90\n  $r2[$i86] \u003d $b91\n  goto B24\n}",
      "B20 {\n  $l55 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l56 \u003d $l55 \u003e\u003e 1\n  BaseNCodec$Context: long lbitWorkArea\u003e \u003d $l56\n  $i57 \u003d BaseNCodec$Context: int pos\u003e\n  $i58 \u003d $i57 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i58\n  $l59 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l60 \u003d $l59 \u003e\u003e 16\n  $l61 \u003d $l60 \u0026 255L\n  $i62 \u003d (int) $l61\n  $b63 \u003d (byte) $i62\n  $r2[$i57] \u003d $b63\n  $i64 \u003d BaseNCodec$Context: int pos\u003e\n  $i65 \u003d $i64 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i65\n  $l66 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l67 \u003d $l66 \u003e\u003e 8\n  $l68 \u003d $l67 \u0026 255L\n  $i69 \u003d (int) $l68\n  $b70 \u003d (byte) $i69\n  $r2[$i64] \u003d $b70\n  $i71 \u003d BaseNCodec$Context: int pos\u003e\n  $i72 \u003d $i71 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i72\n  $l73 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l74 \u003d $l73 \u0026 255L\n  $i75 \u003d (int) $l74\n  $b76 \u003d (byte) $i75\n  $r2[$i71] \u003d $b76\n  goto B24\n}",
      "B21 {\n  $l33 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l34 \u003d $l33 \u003e\u003e 6\n  BaseNCodec$Context: long lbitWorkArea\u003e \u003d $l34\n  $i35 \u003d BaseNCodec$Context: int pos\u003e\n  $i36 \u003d $i35 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i36\n  $l37 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l38 \u003d $l37 \u003e\u003e 16\n  $l39 \u003d $l38 \u0026 255L\n  $i40 \u003d (int) $l39\n  $b41 \u003d (byte) $i40\n  $r2[$i35] \u003d $b41\n  $i42 \u003d BaseNCodec$Context: int pos\u003e\n  $i43 \u003d $i42 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i43\n  $l44 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l45 \u003d $l44 \u003e\u003e 8\n  $l46 \u003d $l45 \u0026 255L\n  $i47 \u003d (int) $l46\n  $b48 \u003d (byte) $i47\n  $r2[$i42] \u003d $b48\n  $i49 \u003d BaseNCodec$Context: int pos\u003e\n  $i50 \u003d $i49 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i50\n  $l51 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l52 \u003d $l51 \u0026 255L\n  $i53 \u003d (int) $l52\n  $b54 \u003d (byte) $i53\n  $r2[$i49] \u003d $b54\n  goto B24\n}",
      "B22 {\n  $l4 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l5 \u003d $l4 \u003e\u003e 3\n  BaseNCodec$Context: long lbitWorkArea\u003e \u003d $l5\n  $i6 \u003d BaseNCodec$Context: int pos\u003e\n  $i7 \u003d $i6 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i7\n  $l8 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l9 \u003d $l8 \u003e\u003e 24\n  $l10 \u003d $l9 \u0026 255L\n  $i11 \u003d (int) $l10\n  $b12 \u003d (byte) $i11\n  $r2[$i6] \u003d $b12\n  $i13 \u003d BaseNCodec$Context: int pos\u003e\n  $i14 \u003d $i13 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i14\n  $l15 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l16 \u003d $l15 \u003e\u003e 16\n  $l17 \u003d $l16 \u0026 255L\n  $i18 \u003d (int) $l17\n  $b19 \u003d (byte) $i18\n  $r2[$i13] \u003d $b19\n  $i20 \u003d BaseNCodec$Context: int pos\u003e\n  $i21 \u003d $i20 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i21\n  $l22 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l23 \u003d $l22 \u003e\u003e 8\n  $l24 \u003d $l23 \u0026 255L\n  $i25 \u003d (int) $l24\n  $b26 \u003d (byte) $i25\n  $r2[$i20] \u003d $b26\n  $i27 \u003d BaseNCodec$Context: int pos\u003e\n  $i28 \u003d $i27 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i28\n  $l29 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l30 \u003d $l29 \u0026 255L\n  $i31 \u003d (int) $l30\n  $b32 \u003d (byte) $i31\n  $r2[$i27] \u003d $b32\n  goto B24\n}",
      "B23 {\n  $r9 \u003d IllegalStateException\n  $i106 \u003d BaseNCodec$Context: int modulus\u003e\n  $r4 \u003d dynInvoke makeConcatWithConstants($i106)\n  new IllegalStateException($r4)\n  throw $r9\n}",
      "B24 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B14",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B14",
      "B8 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B10",
      "B9 --\u003e B13",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B5",
      "B14 --\u003e B15",
      "B14 --\u003e B24",
      "B15 --\u003e B16",
      "B15 --\u003e B24",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B16 --\u003e B19",
      "B16 --\u003e B20",
      "B16 --\u003e B21",
      "B16 --\u003e B22",
      "B16 --\u003e B23",
      "B17 --\u003e B24",
      "B18 --\u003e B24",
      "B19 --\u003e B24",
      "B20 --\u003e B24",
      "B21 --\u003e B24",
      "B22 --\u003e B24",
      "B23 --\u003e [EXIT]",
      "B24 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.Base32",
    "methodName": "encode",
    "signature": "void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)",
    "visibility": "package",
    "body": "(source not found)",
    "nodes": 27,
    "edges": 39,
    "cc": 14,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If(i0 \u003e\u003d 0) → B3 | else → B17",
      "B3 : If(0 !\u003d $i76) → B4 | else → B6",
      "B4 : If($i240 !\u003d 0) → B5 | else → B6",
      "B6 : If(switch-on $i78) → B7 | else → B8",
      "B13 : If($i247 \u003c\u003d 0) → B14 | else → B16",
      "B14 : If($i130 \u003c\u003d 0) → B15 | else → B16",
      "B18 : If(i248 \u003e\u003d i0) → B19 | else → B26",
      "B19 : If(i249 \u003e\u003d 0) → B20 | else → B21",
      "B21 : If(0 !\u003d $i10) → B22 | else → B25",
      "B22 : If($i68 \u003c\u003d 0) → B23 | else → B25",
      "B23 : If($i70 \u003e $i69) → B24 | else → B25"
    ],
    "blockList": [
      "B0 {\n  Base32\n  r3 :\u003d @parameter0: byte[]\n  i242 :\u003d @parameter1: int\n  i0 :\u003d @parameter2: int\n  BaseNCodec$Context\n  $z0 \u003d BaseNCodec$Context: boolean eof\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (i0 \u003e\u003d 0) goto B3 else B17\n}",
      "B3 {\n  BaseNCodec$Context: boolean eof\u003e \u003d 1\n  $i76 \u003d BaseNCodec$Context: int modulus\u003e\n  if (0 !\u003d $i76) goto B4 else B6\n}",
      "B4 {\n  $i240 \u003d Base32: int lineLength\u003e\n  if ($i240 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $i77 \u003d Base32: int encodeSize\u003e\n  $r15 \u003d r1.ensureBufferSize($i77, r0)\n  $i241 \u003d BaseNCodec$Context: int pos\u003e\n  $i78 \u003d BaseNCodec$Context: int modulus\u003e\n  IllegalStateException; }\n}",
      "B7 {\n  goto B13\n}",
      "B8 {\n  $i213 \u003d BaseNCodec$Context: int pos\u003e\n  $i214 \u003d $i213 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i214\n  $r35 \u003d Base32: byte[] encodeTable\u003e\n  $l215 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l216 \u003d $l215 \u003e\u003e 3\n  $i217 \u003d (int) $l216\n  $i218 \u003d $i217 \u0026 31\n  $b219 \u003d $r35[$i218]\n  $r15[$i213] \u003d $b219\n  $i220 \u003d BaseNCodec$Context: int pos\u003e\n  $i221 \u003d $i220 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i221\n  $r36 \u003d Base32: byte[] encodeTable\u003e\n  $l222 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l223 \u003d $l222 \u003c\u003c 2\n  $i224 \u003d (int) $l223\n  $i225 \u003d $i224 \u0026 31\n  $b226 \u003d $r36[$i225]\n  $r15[$i220] \u003d $b226\n  $i227 \u003d BaseNCodec$Context: int pos\u003e\n  $i228 \u003d $i227 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i228\n  $r15[$i227] \u003d 61\n  $i229 \u003d BaseNCodec$Context: int pos\u003e\n  $i230 \u003d $i229 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i230\n  $r15[$i229] \u003d 61\n  $i231 \u003d BaseNCodec$Context: int pos\u003e\n  $i232 \u003d $i231 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i232\n  $r15[$i231] \u003d 61\n  $i233 \u003d BaseNCodec$Context: int pos\u003e\n  $i234 \u003d $i233 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i234\n  $r15[$i233] \u003d 61\n  $i235 \u003d BaseNCodec$Context: int pos\u003e\n  $i236 \u003d $i235 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i236\n  $r15[$i235] \u003d 61\n  $i237 \u003d BaseNCodec$Context: int pos\u003e\n  $i238 \u003d $i237 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i238\n  $r15[$i237] \u003d 61\n  goto B13\n}",
      "B9 {\n  $i177 \u003d BaseNCodec$Context: int pos\u003e\n  $i178 \u003d $i177 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i178\n  $r31 \u003d Base32: byte[] encodeTable\u003e\n  $l179 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l180 \u003d $l179 \u003e\u003e 11\n  $i181 \u003d (int) $l180\n  $i182 \u003d $i181 \u0026 31\n  $b183 \u003d $r31[$i182]\n  $r15[$i177] \u003d $b183\n  $i184 \u003d BaseNCodec$Context: int pos\u003e\n  $i185 \u003d $i184 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i185\n  $r32 \u003d Base32: byte[] encodeTable\u003e\n  $l186 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l187 \u003d $l186 \u003e\u003e 6\n  $i188 \u003d (int) $l187\n  $i189 \u003d $i188 \u0026 31\n  $b190 \u003d $r32[$i189]\n  $r15[$i184] \u003d $b190\n  $i191 \u003d BaseNCodec$Context: int pos\u003e\n  $i192 \u003d $i191 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i192\n  $r33 \u003d Base32: byte[] encodeTable\u003e\n  $l193 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l194 \u003d $l193 \u003e\u003e 1\n  $i195 \u003d (int) $l194\n  $i196 \u003d $i195 \u0026 31\n  $b197 \u003d $r33[$i196]\n  $r15[$i191] \u003d $b197\n  $i198 \u003d BaseNCodec$Context: int pos\u003e\n  $i199 \u003d $i198 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i199\n  $r34 \u003d Base32: byte[] encodeTable\u003e\n  $l200 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l201 \u003d $l200 \u003c\u003c 4\n  $i202 \u003d (int) $l201\n  $i203 \u003d $i202 \u0026 31\n  $b204 \u003d $r34[$i203]\n  $r15[$i198] \u003d $b204\n  $i205 \u003d BaseNCodec$Context: int pos\u003e\n  $i206 \u003d $i205 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i206\n  $r15[$i205] \u003d 61\n  $i207 \u003d BaseNCodec$Context: int pos\u003e\n  $i208 \u003d $i207 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i208\n  $r15[$i207] \u003d 61\n  $i209 \u003d BaseNCodec$Context: int pos\u003e\n  $i210 \u003d $i209 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i210\n  $r15[$i209] \u003d 61\n  $i211 \u003d BaseNCodec$Context: int pos\u003e\n  $i212 \u003d $i211 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i212\n  $r15[$i211] \u003d 61\n  goto B13\n}",
      "B10 {\n  $i136 \u003d BaseNCodec$Context: int pos\u003e\n  $i137 \u003d $i136 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i137\n  $r26 \u003d Base32: byte[] encodeTable\u003e\n  $l138 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l139 \u003d $l138 \u003e\u003e 19\n  $i140 \u003d (int) $l139\n  $i141 \u003d $i140 \u0026 31\n  $b142 \u003d $r26[$i141]\n  $r15[$i136] \u003d $b142\n  $i143 \u003d BaseNCodec$Context: int pos\u003e\n  $i144 \u003d $i143 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i144\n  $r27 \u003d Base32: byte[] encodeTable\u003e\n  $l145 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l146 \u003d $l145 \u003e\u003e 14\n  $i147 \u003d (int) $l146\n  $i148 \u003d $i147 \u0026 31\n  $b149 \u003d $r27[$i148]\n  $r15[$i143] \u003d $b149\n  $i150 \u003d BaseNCodec$Context: int pos\u003e\n  $i151 \u003d $i150 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i151\n  $r28 \u003d Base32: byte[] encodeTable\u003e\n  $l152 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l153 \u003d $l152 \u003e\u003e 9\n  $i154 \u003d (int) $l153\n  $i155 \u003d $i154 \u0026 31\n  $b156 \u003d $r28[$i155]\n  $r15[$i150] \u003d $b156\n  $i157 \u003d BaseNCodec$Context: int pos\u003e\n  $i158 \u003d $i157 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i158\n  $r29 \u003d Base32: byte[] encodeTable\u003e\n  $l159 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l160 \u003d $l159 \u003e\u003e 4\n  $i161 \u003d (int) $l160\n  $i162 \u003d $i161 \u0026 31\n  $b163 \u003d $r29[$i162]\n  $r15[$i157] \u003d $b163\n  $i164 \u003d BaseNCodec$Context: int pos\u003e\n  $i165 \u003d $i164 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i165\n  $r30 \u003d Base32: byte[] encodeTable\u003e\n  $l166 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l167 \u003d $l166 \u003c\u003c 1\n  $i168 \u003d (int) $l167\n  $i169 \u003d $i168 \u0026 31\n  $b170 \u003d $r30[$i169]\n  $r15[$i164] \u003d $b170\n  $i171 \u003d BaseNCodec$Context: int pos\u003e\n  $i172 \u003d $i171 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i172\n  $r15[$i171] \u003d 61\n  $i173 \u003d BaseNCodec$Context: int pos\u003e\n  $i174 \u003d $i173 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i174\n  $r15[$i173] \u003d 61\n  $i175 \u003d BaseNCodec$Context: int pos\u003e\n  $i176 \u003d $i175 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i176\n  $r15[$i175] \u003d 61\n  goto B13\n}",
      "B11 {\n  $i79 \u003d BaseNCodec$Context: int pos\u003e\n  $i80 \u003d $i79 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i80\n  $r16 \u003d Base32: byte[] encodeTable\u003e\n  $l81 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l82 \u003d $l81 \u003e\u003e 27\n  $i83 \u003d (int) $l82\n  $i84 \u003d $i83 \u0026 31\n  $b85 \u003d $r16[$i84]\n  $r15[$i79] \u003d $b85\n  $i86 \u003d BaseNCodec$Context: int pos\u003e\n  $i87 \u003d $i86 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i87\n  $r17 \u003d Base32: byte[] encodeTable\u003e\n  $l88 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l89 \u003d $l88 \u003e\u003e 22\n  $i90 \u003d (int) $l89\n  $i91 \u003d $i90 \u0026 31\n  $b92 \u003d $r17[$i91]\n  $r15[$i86] \u003d $b92\n  $i93 \u003d BaseNCodec$Context: int pos\u003e\n  $i94 \u003d $i93 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i94\n  $r18 \u003d Base32: byte[] encodeTable\u003e\n  $l95 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l96 \u003d $l95 \u003e\u003e 17\n  $i97 \u003d (int) $l96\n  $i98 \u003d $i97 \u0026 31\n  $b99 \u003d $r18[$i98]\n  $r15[$i93] \u003d $b99\n  $i100 \u003d BaseNCodec$Context: int pos\u003e\n  $i101 \u003d $i100 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i101\n  $r19 \u003d Base32: byte[] encodeTable\u003e\n  $l102 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l103 \u003d $l102 \u003e\u003e 12\n  $i104 \u003d (int) $l103\n  $i105 \u003d $i104 \u0026 31\n  $b106 \u003d $r19[$i105]\n  $r15[$i100] \u003d $b106\n  $i107 \u003d BaseNCodec$Context: int pos\u003e\n  $i108 \u003d $i107 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i108\n  $r20 \u003d Base32: byte[] encodeTable\u003e\n  $l109 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l110 \u003d $l109 \u003e\u003e 7\n  $i111 \u003d (int) $l110\n  $i112 \u003d $i111 \u0026 31\n  $b113 \u003d $r20[$i112]\n  $r15[$i107] \u003d $b113\n  $i114 \u003d BaseNCodec$Context: int pos\u003e\n  $i115 \u003d $i114 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i115\n  $r21 \u003d Base32: byte[] encodeTable\u003e\n  $l116 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l117 \u003d $l116 \u003e\u003e 2\n  $i118 \u003d (int) $l117\n  $i119 \u003d $i118 \u0026 31\n  $b120 \u003d $r21[$i119]\n  $r15[$i114] \u003d $b120\n  $i121 \u003d BaseNCodec$Context: int pos\u003e\n  $i122 \u003d $i121 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i122\n  $r22 \u003d Base32: byte[] encodeTable\u003e\n  $l123 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l124 \u003d $l123 \u003c\u003c 3\n  $i125 \u003d (int) $l124\n  $i126 \u003d $i125 \u0026 31\n  $b127 \u003d $r22[$i126]\n  $r15[$i121] \u003d $b127\n  $i128 \u003d BaseNCodec$Context: int pos\u003e\n  $i129 \u003d $i128 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i129\n  $r15[$i128] \u003d 61\n  goto B13\n}",
      "B12 {\n  $r37 \u003d IllegalStateException\n  $i239 \u003d BaseNCodec$Context: int modulus\u003e\n  $r38 \u003d dynInvoke makeConcatWithConstants($i239)\n  new IllegalStateException($r38)\n  throw $r37\n}",
      "B13 {\n  $i243 \u003d BaseNCodec$Context: int currentLinePos\u003e\n  $i244 \u003d BaseNCodec$Context: int pos\u003e\n  $i245 \u003d $i244 - $i241\n  $i246 \u003d $i243 + $i245\n  BaseNCodec$Context: int currentLinePos\u003e \u003d $i246\n  $i247 \u003d Base32: int lineLength\u003e\n  if ($i247 \u003c\u003d 0) goto B14 else B16\n}",
      "B14 {\n  $i130 \u003d BaseNCodec$Context: int currentLinePos\u003e\n  if ($i130 \u003c\u003d 0) goto B15 else B16\n}",
      "B15 {\n  $r24 \u003d Base32: byte[] lineSeparator\u003e\n  $i132 \u003d BaseNCodec$Context: int pos\u003e\n  $r23 \u003d Base32: byte[] lineSeparator\u003e\n  $i131 \u003d lengthof $r23\n  System.arraycopy($r24, 0, $r15, $i132, $i131)\n  $i134 \u003d BaseNCodec$Context: int pos\u003e\n  $r25 \u003d Base32: byte[] lineSeparator\u003e\n  $i133 \u003d lengthof $r25\n  $i135 \u003d $i134 + $i133\n  BaseNCodec$Context: int pos\u003e \u003d $i135\n}",
      "B16 {\n  goto B26\n}",
      "B17 {\n  i248 \u003d 0\n}",
      "B18 {\n  if (i248 \u003e\u003d i0) goto B19 else B26\n}",
      "B19 {\n  $i1 \u003d Base32: int encodeSize\u003e\n  $r2 \u003d r1.ensureBufferSize($i1, r0)\n  $i2 \u003d BaseNCodec$Context: int modulus\u003e\n  $i3 \u003d $i2 + 1\n  $i4 \u003d $i3 % 5\n  BaseNCodec$Context: int modulus\u003e \u003d $i4\n  $i5 \u003d i242\n  i242 \u003d i242 + 1\n  i249 \u003d r3[$i5]\n  if (i249 \u003e\u003d 0) goto B20 else B21\n}",
      "B20 {\n  i249 \u003d i249 + 256\n}",
      "B21 {\n  $l6 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l8 \u003d $l6 \u003c\u003c 8\n  $l7 \u003d (long) i249\n  $l9 \u003d $l8 + $l7\n  BaseNCodec$Context: long lbitWorkArea\u003e \u003d $l9\n  $i10 \u003d BaseNCodec$Context: int modulus\u003e\n  if (0 !\u003d $i10) goto B22 else B25\n}",
      "B22 {\n  $i11 \u003d BaseNCodec$Context: int pos\u003e\n  $i12 \u003d $i11 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i12\n  $r4 \u003d Base32: byte[] encodeTable\u003e\n  $l13 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l14 \u003d $l13 \u003e\u003e 35\n  $i15 \u003d (int) $l14\n  $i16 \u003d $i15 \u0026 31\n  $b17 \u003d $r4[$i16]\n  $r2[$i11] \u003d $b17\n  $i18 \u003d BaseNCodec$Context: int pos\u003e\n  $i19 \u003d $i18 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i19\n  $r5 \u003d Base32: byte[] encodeTable\u003e\n  $l20 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l21 \u003d $l20 \u003e\u003e 30\n  $i22 \u003d (int) $l21\n  $i23 \u003d $i22 \u0026 31\n  $b24 \u003d $r5[$i23]\n  $r2[$i18] \u003d $b24\n  $i25 \u003d BaseNCodec$Context: int pos\u003e\n  $i26 \u003d $i25 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i26\n  $r6 \u003d Base32: byte[] encodeTable\u003e\n  $l27 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l28 \u003d $l27 \u003e\u003e 25\n  $i29 \u003d (int) $l28\n  $i30 \u003d $i29 \u0026 31\n  $b31 \u003d $r6[$i30]\n  $r2[$i25] \u003d $b31\n  $i32 \u003d BaseNCodec$Context: int pos\u003e\n  $i33 \u003d $i32 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i33\n  $r7 \u003d Base32: byte[] encodeTable\u003e\n  $l34 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l35 \u003d $l34 \u003e\u003e 20\n  $i36 \u003d (int) $l35\n  $i37 \u003d $i36 \u0026 31\n  $b38 \u003d $r7[$i37]\n  $r2[$i32] \u003d $b38\n  $i39 \u003d BaseNCodec$Context: int pos\u003e\n  $i40 \u003d $i39 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i40\n  $r8 \u003d Base32: byte[] encodeTable\u003e\n  $l41 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l42 \u003d $l41 \u003e\u003e 15\n  $i43 \u003d (int) $l42\n  $i44 \u003d $i43 \u0026 31\n  $b45 \u003d $r8[$i44]\n  $r2[$i39] \u003d $b45\n  $i46 \u003d BaseNCodec$Context: int pos\u003e\n  $i47 \u003d $i46 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i47\n  $r9 \u003d Base32: byte[] encodeTable\u003e\n  $l48 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l49 \u003d $l48 \u003e\u003e 10\n  $i50 \u003d (int) $l49\n  $i51 \u003d $i50 \u0026 31\n  $b52 \u003d $r9[$i51]\n  $r2[$i46] \u003d $b52\n  $i53 \u003d BaseNCodec$Context: int pos\u003e\n  $i54 \u003d $i53 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i54\n  $r10 \u003d Base32: byte[] encodeTable\u003e\n  $l55 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $l56 \u003d $l55 \u003e\u003e 5\n  $i57 \u003d (int) $l56\n  $i58 \u003d $i57 \u0026 31\n  $b59 \u003d $r10[$i58]\n  $r2[$i53] \u003d $b59\n  $i60 \u003d BaseNCodec$Context: int pos\u003e\n  $i61 \u003d $i60 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i61\n  $r11 \u003d Base32: byte[] encodeTable\u003e\n  $l62 \u003d BaseNCodec$Context: long lbitWorkArea\u003e\n  $i63 \u003d (int) $l62\n  $i64 \u003d $i63 \u0026 31\n  $b65 \u003d $r11[$i64]\n  $r2[$i60] \u003d $b65\n  $i66 \u003d BaseNCodec$Context: int currentLinePos\u003e\n  $i67 \u003d $i66 + 8\n  BaseNCodec$Context: int currentLinePos\u003e \u003d $i67\n  $i68 \u003d Base32: int lineLength\u003e\n  if ($i68 \u003c\u003d 0) goto B23 else B25\n}",
      "B23 {\n  $i70 \u003d Base32: int lineLength\u003e\n  $i69 \u003d BaseNCodec$Context: int currentLinePos\u003e\n  if ($i70 \u003e $i69) goto B24 else B25\n}",
      "B24 {\n  $r13 \u003d Base32: byte[] lineSeparator\u003e\n  $i72 \u003d BaseNCodec$Context: int pos\u003e\n  $r12 \u003d Base32: byte[] lineSeparator\u003e\n  $i71 \u003d lengthof $r12\n  System.arraycopy($r13, 0, $r2, $i72, $i71)\n  $i74 \u003d BaseNCodec$Context: int pos\u003e\n  $r14 \u003d Base32: byte[] lineSeparator\u003e\n  $i73 \u003d lengthof $r14\n  $i75 \u003d $i74 + $i73\n  BaseNCodec$Context: int pos\u003e \u003d $i75\n  BaseNCodec$Context: int currentLinePos\u003e \u003d 0\n}",
      "B25 {\n  i248 \u003d i248 + 1\n  goto B18\n}",
      "B26 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B17",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B6 --\u003e B9",
      "B6 --\u003e B10",
      "B6 --\u003e B11",
      "B6 --\u003e B12",
      "B7 --\u003e B13",
      "B8 --\u003e B13",
      "B9 --\u003e B13",
      "B10 --\u003e B13",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B13 --\u003e B16",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B26",
      "B17 --\u003e B18",
      "B18 --\u003e B19",
      "B18 --\u003e B26",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B21",
      "B21 --\u003e B22",
      "B21 --\u003e B25",
      "B22 --\u003e B23",
      "B22 --\u003e B25",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B25",
      "B25 --\u003e B18",
      "B26 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.Base32",
    "methodName": "isInAlphabet",
    "signature": "boolean isInAlphabet(byte)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i3 \u003c 0) → B1 | else → B4",
      "B1 : If($i4 \u003e\u003d $i1) → B2 | else → B4",
      "B2 : If($i6 \u003d\u003d $i8) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Base32\n  b0 :\u003d @parameter0: byte\n  $i3 \u003d (int) b0\n  if ($i3 \u003c 0) goto B1 else B4\n}",
      "B1 {\n  $r1 \u003d Base32: byte[] decodeTable\u003e\n  $i1 \u003d lengthof $r1\n  $i4 \u003d (int) b0\n  if ($i4 \u003e\u003d $i1) goto B2 else B4\n}",
      "B2 {\n  $r2 \u003d Base32: byte[] decodeTable\u003e\n  $i5 \u003d (int) b0\n  $b2 \u003d $r2[$i5]\n  $i6 \u003d (int) $b2\n  $i8 \u003d (int) -1\n  if ($i6 \u003d\u003d $i8) goto B3 else B4\n}",
      "B3 {\n  $z0 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z0 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.Base64",
    "methodName": "isUrlSafe",
    "signature": "boolean isUrlSafe()",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d $r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Base64\n  $r2 \u003d Base64: byte[] encodeTable\u003e\n  $r1 \u003d Base64: byte[] URL_SAFE_ENCODE_TABLE\u003e\n  if ($r2 !\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.Base64",
    "methodName": "encode",
    "signature": "void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)",
    "visibility": "package",
    "body": "(source not found)",
    "nodes": 27,
    "edges": 39,
    "cc": 14,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If(i0 \u003e\u003d 0) → B3 | else → B17",
      "B3 : If(0 !\u003d $i43) → B4 | else → B6",
      "B4 : If($i89 !\u003d 0) → B5 | else → B6",
      "B6 : If(switch-on $i45) → B7 | else → B8",
      "B8 : If($r23 !\u003d $r22) → B9 | else → B13",
      "B10 : If($r16 !\u003d $r15) → B11 | else → B13",
      "B13 : If($i96 \u003c\u003d 0) → B14 | else → B16",
      "B14 : If($i64 \u003c\u003d 0) → B15 | else → B16",
      "B18 : If(i97 \u003e\u003d i0) → B19 | else → B26",
      "B19 : If(i98 \u003e\u003d 0) → B20 | else → B21",
      "B21 : If(0 !\u003d $i9) → B22 | else → B25",
      "B22 : If($i35 \u003c\u003d 0) → B23 | else → B25",
      "B23 : If($i37 \u003e $i36) → B24 | else → B25"
    ],
    "blockList": [
      "B0 {\n  Base64\n  r3 :\u003d @parameter0: byte[]\n  i91 :\u003d @parameter1: int\n  i0 :\u003d @parameter2: int\n  BaseNCodec$Context\n  $z0 \u003d BaseNCodec$Context: boolean eof\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (i0 \u003e\u003d 0) goto B3 else B17\n}",
      "B3 {\n  BaseNCodec$Context: boolean eof\u003e \u003d 1\n  $i43 \u003d BaseNCodec$Context: int modulus\u003e\n  if (0 !\u003d $i43) goto B4 else B6\n}",
      "B4 {\n  $i89 \u003d Base64: int lineLength\u003e\n  if ($i89 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $i44 \u003d Base64: int encodeSize\u003e\n  $r11 \u003d r1.ensureBufferSize($i44, r0)\n  $i90 \u003d BaseNCodec$Context: int pos\u003e\n  $i45 \u003d BaseNCodec$Context: int modulus\u003e\n  IllegalStateException; }\n}",
      "B7 {\n  goto B13\n}",
      "B8 {\n  $i72 \u003d BaseNCodec$Context: int pos\u003e\n  $i73 \u003d $i72 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i73\n  $r20 \u003d Base64: byte[] encodeTable\u003e\n  $i74 \u003d BaseNCodec$Context: int ibitWorkArea\u003e\n  $i75 \u003d $i74 \u003e\u003e 2\n  $i76 \u003d $i75 \u0026 63\n  $b77 \u003d $r20[$i76]\n  $r11[$i72] \u003d $b77\n  $i78 \u003d BaseNCodec$Context: int pos\u003e\n  $i79 \u003d $i78 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i79\n  $r21 \u003d Base64: byte[] encodeTable\u003e\n  $i80 \u003d BaseNCodec$Context: int ibitWorkArea\u003e\n  $i81 \u003d $i80 \u003c\u003c 4\n  $i82 \u003d $i81 \u0026 63\n  $b83 \u003d $r21[$i82]\n  $r11[$i78] \u003d $b83\n  $r23 \u003d Base64: byte[] encodeTable\u003e\n  $r22 \u003d Base64: byte[] STANDARD_ENCODE_TABLE\u003e\n  if ($r23 !\u003d $r22) goto B9 else B13\n}",
      "B9 {\n  $i84 \u003d BaseNCodec$Context: int pos\u003e\n  $i85 \u003d $i84 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i85\n  $r11[$i84] \u003d 61\n  $i86 \u003d BaseNCodec$Context: int pos\u003e\n  $i87 \u003d $i86 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i87\n  $r11[$i86] \u003d 61\n  goto B13\n}",
      "B10 {\n  $i46 \u003d BaseNCodec$Context: int pos\u003e\n  $i47 \u003d $i46 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i47\n  $r12 \u003d Base64: byte[] encodeTable\u003e\n  $i48 \u003d BaseNCodec$Context: int ibitWorkArea\u003e\n  $i49 \u003d $i48 \u003e\u003e 10\n  $i50 \u003d $i49 \u0026 63\n  $b51 \u003d $r12[$i50]\n  $r11[$i46] \u003d $b51\n  $i52 \u003d BaseNCodec$Context: int pos\u003e\n  $i53 \u003d $i52 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i53\n  $r13 \u003d Base64: byte[] encodeTable\u003e\n  $i54 \u003d BaseNCodec$Context: int ibitWorkArea\u003e\n  $i55 \u003d $i54 \u003e\u003e 4\n  $i56 \u003d $i55 \u0026 63\n  $b57 \u003d $r13[$i56]\n  $r11[$i52] \u003d $b57\n  $i58 \u003d BaseNCodec$Context: int pos\u003e\n  $i59 \u003d $i58 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i59\n  $r14 \u003d Base64: byte[] encodeTable\u003e\n  $i60 \u003d BaseNCodec$Context: int ibitWorkArea\u003e\n  $i61 \u003d $i60 \u003c\u003c 2\n  $i62 \u003d $i61 \u0026 63\n  $b63 \u003d $r14[$i62]\n  $r11[$i58] \u003d $b63\n  $r16 \u003d Base64: byte[] encodeTable\u003e\n  $r15 \u003d Base64: byte[] STANDARD_ENCODE_TABLE\u003e\n  if ($r16 !\u003d $r15) goto B11 else B13\n}",
      "B11 {\n  $i70 \u003d BaseNCodec$Context: int pos\u003e\n  $i71 \u003d $i70 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i71\n  $r11[$i70] \u003d 61\n  goto B13\n}",
      "B12 {\n  $r24 \u003d IllegalStateException\n  $i88 \u003d BaseNCodec$Context: int modulus\u003e\n  $r25 \u003d dynInvoke makeConcatWithConstants($i88)\n  new IllegalStateException($r25)\n  throw $r24\n}",
      "B13 {\n  $i92 \u003d BaseNCodec$Context: int currentLinePos\u003e\n  $i93 \u003d BaseNCodec$Context: int pos\u003e\n  $i94 \u003d $i93 - $i90\n  $i95 \u003d $i92 + $i94\n  BaseNCodec$Context: int currentLinePos\u003e \u003d $i95\n  $i96 \u003d Base64: int lineLength\u003e\n  if ($i96 \u003c\u003d 0) goto B14 else B16\n}",
      "B14 {\n  $i64 \u003d BaseNCodec$Context: int currentLinePos\u003e\n  if ($i64 \u003c\u003d 0) goto B15 else B16\n}",
      "B15 {\n  $r18 \u003d Base64: byte[] lineSeparator\u003e\n  $i66 \u003d BaseNCodec$Context: int pos\u003e\n  $r17 \u003d Base64: byte[] lineSeparator\u003e\n  $i65 \u003d lengthof $r17\n  System.arraycopy($r18, 0, $r11, $i66, $i65)\n  $i68 \u003d BaseNCodec$Context: int pos\u003e\n  $r19 \u003d Base64: byte[] lineSeparator\u003e\n  $i67 \u003d lengthof $r19\n  $i69 \u003d $i68 + $i67\n  BaseNCodec$Context: int pos\u003e \u003d $i69\n}",
      "B16 {\n  goto B26\n}",
      "B17 {\n  i97 \u003d 0\n}",
      "B18 {\n  if (i97 \u003e\u003d i0) goto B19 else B26\n}",
      "B19 {\n  $i1 \u003d Base64: int encodeSize\u003e\n  $r2 \u003d r1.ensureBufferSize($i1, r0)\n  $i2 \u003d BaseNCodec$Context: int modulus\u003e\n  $i3 \u003d $i2 + 1\n  $i4 \u003d $i3 % 3\n  BaseNCodec$Context: int modulus\u003e \u003d $i4\n  $i5 \u003d i91\n  i91 \u003d i91 + 1\n  i98 \u003d r3[$i5]\n  if (i98 \u003e\u003d 0) goto B20 else B21\n}",
      "B20 {\n  i98 \u003d i98 + 256\n}",
      "B21 {\n  $i6 \u003d BaseNCodec$Context: int ibitWorkArea\u003e\n  $i7 \u003d $i6 \u003c\u003c 8\n  $i8 \u003d $i7 + i98\n  BaseNCodec$Context: int ibitWorkArea\u003e \u003d $i8\n  $i9 \u003d BaseNCodec$Context: int modulus\u003e\n  if (0 !\u003d $i9) goto B22 else B25\n}",
      "B22 {\n  $i10 \u003d BaseNCodec$Context: int pos\u003e\n  $i11 \u003d $i10 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i11\n  $r4 \u003d Base64: byte[] encodeTable\u003e\n  $i12 \u003d BaseNCodec$Context: int ibitWorkArea\u003e\n  $i13 \u003d $i12 \u003e\u003e 18\n  $i14 \u003d $i13 \u0026 63\n  $b15 \u003d $r4[$i14]\n  $r2[$i10] \u003d $b15\n  $i16 \u003d BaseNCodec$Context: int pos\u003e\n  $i17 \u003d $i16 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i17\n  $r5 \u003d Base64: byte[] encodeTable\u003e\n  $i18 \u003d BaseNCodec$Context: int ibitWorkArea\u003e\n  $i19 \u003d $i18 \u003e\u003e 12\n  $i20 \u003d $i19 \u0026 63\n  $b21 \u003d $r5[$i20]\n  $r2[$i16] \u003d $b21\n  $i22 \u003d BaseNCodec$Context: int pos\u003e\n  $i23 \u003d $i22 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i23\n  $r6 \u003d Base64: byte[] encodeTable\u003e\n  $i24 \u003d BaseNCodec$Context: int ibitWorkArea\u003e\n  $i25 \u003d $i24 \u003e\u003e 6\n  $i26 \u003d $i25 \u0026 63\n  $b27 \u003d $r6[$i26]\n  $r2[$i22] \u003d $b27\n  $i28 \u003d BaseNCodec$Context: int pos\u003e\n  $i29 \u003d $i28 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i29\n  $r7 \u003d Base64: byte[] encodeTable\u003e\n  $i30 \u003d BaseNCodec$Context: int ibitWorkArea\u003e\n  $i31 \u003d $i30 \u0026 63\n  $b32 \u003d $r7[$i31]\n  $r2[$i28] \u003d $b32\n  $i33 \u003d BaseNCodec$Context: int currentLinePos\u003e\n  $i34 \u003d $i33 + 4\n  BaseNCodec$Context: int currentLinePos\u003e \u003d $i34\n  $i35 \u003d Base64: int lineLength\u003e\n  if ($i35 \u003c\u003d 0) goto B23 else B25\n}",
      "B23 {\n  $i37 \u003d Base64: int lineLength\u003e\n  $i36 \u003d BaseNCodec$Context: int currentLinePos\u003e\n  if ($i37 \u003e $i36) goto B24 else B25\n}",
      "B24 {\n  $r9 \u003d Base64: byte[] lineSeparator\u003e\n  $i39 \u003d BaseNCodec$Context: int pos\u003e\n  $r8 \u003d Base64: byte[] lineSeparator\u003e\n  $i38 \u003d lengthof $r8\n  System.arraycopy($r9, 0, $r2, $i39, $i38)\n  $i41 \u003d BaseNCodec$Context: int pos\u003e\n  $r10 \u003d Base64: byte[] lineSeparator\u003e\n  $i40 \u003d lengthof $r10\n  $i42 \u003d $i41 + $i40\n  BaseNCodec$Context: int pos\u003e \u003d $i42\n  BaseNCodec$Context: int currentLinePos\u003e \u003d 0\n}",
      "B25 {\n  i97 \u003d i97 + 1\n  goto B18\n}",
      "B26 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B17",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B6 --\u003e B10",
      "B6 --\u003e B12",
      "B7 --\u003e B13",
      "B8 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B13",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B13 --\u003e B16",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B26",
      "B17 --\u003e B18",
      "B18 --\u003e B19",
      "B18 --\u003e B26",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B21",
      "B21 --\u003e B22",
      "B21 --\u003e B25",
      "B22 --\u003e B23",
      "B22 --\u003e B25",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B25",
      "B25 --\u003e B18",
      "B26 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.Base64",
    "methodName": "decode",
    "signature": "void decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)",
    "visibility": "package",
    "body": "(source not found)",
    "nodes": 22,
    "edges": 32,
    "cc": 12,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If(i0 \u003e\u003d 0) → B3 | else → B4",
      "B5 : If(i55 \u003e\u003d i0) → B6 | else → B14",
      "B6 : If($i56 !\u003d 61) → B7 | else → B8",
      "B8 : If($i57 \u003c 0) → B9 | else → B13",
      "B9 : If($i58 \u003e\u003d $i28) → B10 | else → B13",
      "B10 : If($i60 \u003c 0) → B11 | else → B13",
      "B11 : If($i36 !\u003d 0) → B12 | else → B13",
      "B14 : If($z1 \u003d\u003d 0) → B15 | else → B21",
      "B15 : If($i1 \u003d\u003d 0) → B16 | else → B21",
      "B16 : If(switch-on $i3) → B17 | else → B18"
    ],
    "blockList": [
      "B0 {\n  Base64\n  r6 :\u003d @parameter0: byte[]\n  i54 :\u003d @parameter1: int\n  i0 :\u003d @parameter2: int\n  BaseNCodec$Context\n  $z0 \u003d BaseNCodec$Context: boolean eof\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (i0 \u003e\u003d 0) goto B3 else B4\n}",
      "B3 {\n  BaseNCodec$Context: boolean eof\u003e \u003d 1\n}",
      "B4 {\n  i55 \u003d 0\n}",
      "B5 {\n  if (i55 \u003e\u003d i0) goto B6 else B14\n}",
      "B6 {\n  $i25 \u003d Base64: int decodeSize\u003e\n  $r5 \u003d r1.ensureBufferSize($i25, r0)\n  $i26 \u003d i54\n  i54 \u003d i54 + 1\n  b27 \u003d r6[$i26]\n  $i56 \u003d (int) b27\n  if ($i56 !\u003d 61) goto B7 else B8\n}",
      "B7 {\n  BaseNCodec$Context: boolean eof\u003e \u003d 1\n  goto B14\n}",
      "B8 {\n  $i57 \u003d (int) b27\n  if ($i57 \u003c 0) goto B9 else B13\n}",
      "B9 {\n  $r7 \u003d Base64: byte[] DECODE_TABLE\u003e\n  $i28 \u003d lengthof $r7\n  $i58 \u003d (int) b27\n  if ($i58 \u003e\u003d $i28) goto B10 else B13\n}",
      "B10 {\n  $r8 \u003d Base64: byte[] DECODE_TABLE\u003e\n  $i59 \u003d (int) b27\n  b29 \u003d $r8[$i59]\n  $i60 \u003d (int) b29\n  if ($i60 \u003c 0) goto B11 else B13\n}",
      "B11 {\n  $i30 \u003d BaseNCodec$Context: int modulus\u003e\n  $i31 \u003d $i30 + 1\n  $i32 \u003d $i31 % 4\n  BaseNCodec$Context: int modulus\u003e \u003d $i32\n  $i33 \u003d BaseNCodec$Context: int ibitWorkArea\u003e\n  $i34 \u003d $i33 \u003c\u003c 6\n  $i61 \u003d (int) b29\n  $i35 \u003d $i34 + $i61\n  BaseNCodec$Context: int ibitWorkArea\u003e \u003d $i35\n  $i36 \u003d BaseNCodec$Context: int modulus\u003e\n  if ($i36 !\u003d 0) goto B12 else B13\n}",
      "B12 {\n  $i37 \u003d BaseNCodec$Context: int pos\u003e\n  $i38 \u003d $i37 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i38\n  $i39 \u003d BaseNCodec$Context: int ibitWorkArea\u003e\n  $i40 \u003d $i39 \u003e\u003e 16\n  $i41 \u003d $i40 \u0026 255\n  $b42 \u003d (byte) $i41\n  $r5[$i37] \u003d $b42\n  $i43 \u003d BaseNCodec$Context: int pos\u003e\n  $i44 \u003d $i43 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i44\n  $i45 \u003d BaseNCodec$Context: int ibitWorkArea\u003e\n  $i46 \u003d $i45 \u003e\u003e 8\n  $i47 \u003d $i46 \u0026 255\n  $b48 \u003d (byte) $i47\n  $r5[$i43] \u003d $b48\n  $i49 \u003d BaseNCodec$Context: int pos\u003e\n  $i50 \u003d $i49 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i50\n  $i51 \u003d BaseNCodec$Context: int ibitWorkArea\u003e\n  $i52 \u003d $i51 \u0026 255\n  $b53 \u003d (byte) $i52\n  $r5[$i49] \u003d $b53\n}",
      "B13 {\n  i55 \u003d i55 + 1\n  goto B5\n}",
      "B14 {\n  $z1 \u003d BaseNCodec$Context: boolean eof\u003e\n  if ($z1 \u003d\u003d 0) goto B15 else B21\n}",
      "B15 {\n  $i1 \u003d BaseNCodec$Context: int modulus\u003e\n  if ($i1 \u003d\u003d 0) goto B16 else B21\n}",
      "B16 {\n  $i2 \u003d Base64: int decodeSize\u003e\n  $r2 \u003d r1.ensureBufferSize($i2, r0)\n  $i3 \u003d BaseNCodec$Context: int modulus\u003e\n  IllegalStateException; }\n}",
      "B17 {\n  goto B21\n}",
      "B18 {\n  $i17 \u003d BaseNCodec$Context: int ibitWorkArea\u003e\n  $i18 \u003d $i17 \u003e\u003e 4\n  BaseNCodec$Context: int ibitWorkArea\u003e \u003d $i18\n  $i19 \u003d BaseNCodec$Context: int pos\u003e\n  $i20 \u003d $i19 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i20\n  $i21 \u003d BaseNCodec$Context: int ibitWorkArea\u003e\n  $i22 \u003d $i21 \u0026 255\n  $b23 \u003d (byte) $i22\n  $r2[$i19] \u003d $b23\n  goto B21\n}",
      "B19 {\n  $i4 \u003d BaseNCodec$Context: int ibitWorkArea\u003e\n  $i5 \u003d $i4 \u003e\u003e 2\n  BaseNCodec$Context: int ibitWorkArea\u003e \u003d $i5\n  $i6 \u003d BaseNCodec$Context: int pos\u003e\n  $i7 \u003d $i6 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i7\n  $i8 \u003d BaseNCodec$Context: int ibitWorkArea\u003e\n  $i9 \u003d $i8 \u003e\u003e 8\n  $i10 \u003d $i9 \u0026 255\n  $b11 \u003d (byte) $i10\n  $r2[$i6] \u003d $b11\n  $i12 \u003d BaseNCodec$Context: int pos\u003e\n  $i13 \u003d $i12 + 1\n  BaseNCodec$Context: int pos\u003e \u003d $i13\n  $i14 \u003d BaseNCodec$Context: int ibitWorkArea\u003e\n  $i15 \u003d $i14 \u0026 255\n  $b16 \u003d (byte) $i15\n  $r2[$i12] \u003d $b16\n  goto B21\n}",
      "B20 {\n  $r9 \u003d IllegalStateException\n  $i24 \u003d BaseNCodec$Context: int modulus\u003e\n  $r4 \u003d dynInvoke makeConcatWithConstants($i24)\n  new IllegalStateException($r4)\n  throw $r9\n}",
      "B21 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B14",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B14",
      "B8 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B10",
      "B9 --\u003e B13",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B5",
      "B14 --\u003e B15",
      "B14 --\u003e B21",
      "B15 --\u003e B16",
      "B15 --\u003e B21",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B16 --\u003e B19",
      "B16 --\u003e B20",
      "B17 --\u003e B21",
      "B18 --\u003e B21",
      "B19 --\u003e B21",
      "B20 --\u003e [EXIT]",
      "B21 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.Base64",
    "methodName": "isBase64",
    "signature": "boolean isBase64(byte)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 10,
    "cc": 5,
    "flowSummary": [
      "B0 : If($i3 \u003d\u003d 61) → B1 | else → B4",
      "B1 : If($i4 \u003c 0) → B2 | else → B5",
      "B2 : If($i5 \u003e\u003d $i1) → B3 | else → B5",
      "B3 : If($i7 \u003d\u003d $i9) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  b0 :\u003d @parameter0: byte\n  $i3 \u003d (int) b0\n  if ($i3 \u003d\u003d 61) goto B1 else B4\n}",
      "B1 {\n  $i4 \u003d (int) b0\n  if ($i4 \u003c 0) goto B2 else B5\n}",
      "B2 {\n  $r0 \u003d Base64: byte[] DECODE_TABLE\u003e\n  $i1 \u003d lengthof $r0\n  $i5 \u003d (int) b0\n  if ($i5 \u003e\u003d $i1) goto B3 else B5\n}",
      "B3 {\n  $r1 \u003d Base64: byte[] DECODE_TABLE\u003e\n  $i6 \u003d (int) b0\n  $b2 \u003d $r1[$i6]\n  $i7 \u003d (int) $b2\n  $i9 \u003d (int) -1\n  if ($i7 \u003d\u003d $i9) goto B4 else B5\n}",
      "B4 {\n  $z0 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z0 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.Base64",
    "methodName": "isBase64",
    "signature": "boolean isBase64(byte[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d $i0) → B2 | else → B6",
      "B2 : If($z0 !\u003d 0) → B3 | else → B5",
      "B3 : If($z1 !\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  i3 \u003d 0\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if (i3 \u003e\u003d $i0) goto B2 else B6\n}",
      "B2 {\n  $b1 \u003d r0[i3]\n  $z0 \u003d Base64.isBase64($b1)\n  if ($z0 !\u003d 0) goto B3 else B5\n}",
      "B3 {\n  $b2 \u003d r0[i3]\n  $z1 \u003d Base64.isWhiteSpace($b2)\n  if ($z1 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.Base64",
    "methodName": "encodeBase64",
    "signature": "byte[] encodeBase64(byte[],boolean,boolean,int)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($i0 !\u003d 0) → B2 | else → B3",
      "B3 : If(z0 \u003d\u003d 0) → B4 | else → B5",
      "B6 : If($i5 \u003c\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  z0 :\u003d @parameter1: boolean\n  z1 :\u003d @parameter2: boolean\n  i2 :\u003d @parameter3: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  if (z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r6 \u003d Base64\n  $r5 \u003d $r6\n  new Base64(z1)\n  goto B6\n}",
      "B5 {\n  $r7 \u003d Base64\n  $r5 \u003d $r7\n  $r1 \u003d Base64: byte[] CHUNK_SEPARATOR\u003e\n  new Base64(0, $r1, z1)\n}",
      "B6 {\n  $l1 \u003d $r5.getEncodedLength(r0)\n  $l3 \u003d (long) i2\n  $b4 \u003d $l1 cmp $l3\n  $i5 \u003d (int) $b4\n  if ($i5 \u003c\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $r8 \u003d IllegalArgumentException\n  $r4 \u003d dynInvoke makeConcatWithConstants($l1, i2)\n  new IllegalArgumentException($r4)\n  throw $r8\n}",
      "B8 {\n  $r2 \u003d $r5.encode(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.Base64",
    "methodName": "encodeInteger",
    "signature": "byte[] encodeInteger(java.math.BigInteger)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BigInteger\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d NullPointerException\n  new NullPointerException(\"encodeInteger called with null parameter\")\n  throw $r3\n}",
      "B2 {\n  $r1 \u003d Base64.toIntegerBytes(r0)\n  $r2 \u003d Base64.encodeBase64($r1, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.Base64",
    "methodName": "toIntegerBytes",
    "signature": "byte[] toIntegerBytes(java.math.BigInteger)",
    "visibility": "package",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i4 \u003d\u003d 0) → B1 | else → B3",
      "B1 : If($i13 !\u003d $i12) → B2 | else → B3",
      "B3 : If($i6 !\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  BigInteger\n  $i0 \u003d r0.bitLength()\n  $i1 \u003d $i0 + 7\n  $i2 \u003d $i1 \u003e\u003e 3\n  i15 \u003d $i2 \u003c\u003c 3\n  $r1 \u003d r0.toByteArray()\n  $i3 \u003d r0.bitLength()\n  $i4 \u003d $i3 % 8\n  if ($i4 \u003d\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $i10 \u003d r0.bitLength()\n  $i11 \u003d $i10 / 8\n  $i13 \u003d $i11 + 1\n  $i12 \u003d i15 / 8\n  if ($i13 !\u003d $i12) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  b16 \u003d 0\n  $i14 \u003d lengthof $r1\n  i17 \u003d $i14\n  $i5 \u003d r0.bitLength()\n  $i6 \u003d $i5 % 8\n  if ($i6 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  b16 \u003d 1\n  $i19 \u003d (int) -1\n  i17 \u003d $i14 + $i19\n}",
      "B5 {\n  $i7 \u003d i15 / 8\n  $i9 \u003d $i7 - i17\n  $i8 \u003d i15 / 8\n  $r2 \u003d newarray (byte)[$i8]\n  System.arraycopy($r1, b16, $r2, $i9, i17)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.Base64",
    "methodName": "isInAlphabet",
    "signature": "boolean isInAlphabet(byte)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i3 \u003c 0) → B1 | else → B4",
      "B1 : If($i4 \u003e\u003d $i1) → B2 | else → B4",
      "B2 : If($i6 \u003d\u003d $i8) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Base64\n  b0 :\u003d @parameter0: byte\n  $i3 \u003d (int) b0\n  if ($i3 \u003c 0) goto B1 else B4\n}",
      "B1 {\n  $r1 \u003d Base64: byte[] decodeTable\u003e\n  $i1 \u003d lengthof $r1\n  $i4 \u003d (int) b0\n  if ($i4 \u003e\u003d $i1) goto B2 else B4\n}",
      "B2 {\n  $r2 \u003d Base64: byte[] decodeTable\u003e\n  $i5 \u003d (int) b0\n  $b2 \u003d $r2[$i5]\n  $i6 \u003d (int) $b2\n  $i8 \u003d (int) -1\n  if ($i6 \u003d\u003d $i8) goto B3 else B4\n}",
      "B3 {\n  $z0 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z0 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.BaseNCodecInputStream",
    "methodName": "available",
    "signature": "int available()",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BaseNCodecInputStream\n  $r1 \u003d BaseNCodec$Context context\u003e\n  $z0 \u003d BaseNCodec$Context: boolean eof\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $b0 \u003d 0\n  goto B3\n}",
      "B2 {\n  $b0 \u003d 1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.BaseNCodecInputStream",
    "methodName": "read",
    "signature": "int read()",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i1 !\u003d 0) → B2 | else → B3",
      "B3 : If(i1 \u003c\u003d 0) → B4 | else → B8",
      "B4 : If($i3 \u003e\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  BaseNCodecInputStream\n  $r1 \u003d BaseNCodecInputStream: byte[] singleByte\u003e\n  i1 \u003d r0.read($r1, 0, 1)\n}",
      "B1 {\n  if (i1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d BaseNCodecInputStream: byte[] singleByte\u003e\n  i1 \u003d r0.read($r3, 0, 1)\n  goto B1\n}",
      "B3 {\n  if (i1 \u003c\u003d 0) goto B4 else B8\n}",
      "B4 {\n  $r2 \u003d BaseNCodecInputStream: byte[] singleByte\u003e\n  b0 \u003d $r2[0]\n  $i3 \u003d (int) b0\n  if ($i3 \u003e\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $i4 \u003d (int) b0\n  $i2 \u003d 256 + $i4\n  goto B7\n}",
      "B6 {\n  $i5 \u003d (int) b0\n  $i2 \u003d $i5\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $i7 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.BaseNCodecInputStream",
    "methodName": "read",
    "signature": "int read(byte[],int,int)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 21,
    "edges": 26,
    "cc": 7,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003c 0) → B3 | else → B4",
      "B3 : If(i1 \u003e\u003d 0) → B4 | else → B5",
      "B5 : If(i0 \u003e $i2) → B6 | else → B7",
      "B6 : If($i4 \u003c\u003d $i3) → B7 | else → B8",
      "B8 : If(i1 !\u003d 0) → B9 | else → B10",
      "B11 : If(i6 !\u003d 0) → B12 | else → B20",
      "B12 : If($z0 !\u003d 0) → B13 | else → B19",
      "B13 : If($z1 \u003d\u003d 0) → B14 | else → B15",
      "B16 : If($z2 \u003d\u003d 0) → B17 | else → B18"
    ],
    "blockList": [
      "B0 {\n  BaseNCodecInputStream\n  r0 :\u003d @parameter0: byte[]\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r12 \u003d NullPointerException\n  new NullPointerException()\n  throw $r12\n}",
      "B2 {\n  if (i0 \u003c 0) goto B3 else B4\n}",
      "B3 {\n  if (i1 \u003e\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r1 \u003d IndexOutOfBoundsException\n  new IndexOutOfBoundsException()\n  throw $r1\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i0 \u003e $i2) goto B6 else B7\n}",
      "B6 {\n  $i4 \u003d i0 + i1\n  $i3 \u003d lengthof r0\n  if ($i4 \u003c\u003d $i3) goto B7 else B8\n}",
      "B7 {\n  $r2 \u003d IndexOutOfBoundsException\n  new IndexOutOfBoundsException()\n  throw $r2\n}",
      "B8 {\n  if (i1 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  i6 \u003d 0\n}",
      "B11 {\n  if (i6 !\u003d 0) goto B12 else B20\n}",
      "B12 {\n  $r5 \u003d BaseNCodec baseNCodec\u003e\n  $r4 \u003d BaseNCodec$Context context\u003e\n  $z0 \u003d $r5.hasData($r4)\n  if ($z0 !\u003d 0) goto B13 else B19\n}",
      "B13 {\n  $z1 \u003d BaseNCodecInputStream: boolean doEncode\u003e\n  if ($z1 \u003d\u003d 0) goto B14 else B15\n}",
      "B14 {\n  $s7 \u003d 4096\n  goto B16\n}",
      "B15 {\n  $s7 \u003d 8192\n}",
      "B16 {\n  $r11 \u003d newarray (byte)[$s7]\n  $r6 \u003d InputStream in\u003e\n  $i5 \u003d $r6.read($r11)\n  $z2 \u003d BaseNCodecInputStream: boolean doEncode\u003e\n  if ($z2 \u003d\u003d 0) goto B17 else B18\n}",
      "B17 {\n  $r10 \u003d BaseNCodec baseNCodec\u003e\n  $r9 \u003d BaseNCodec$Context context\u003e\n  $r10.encode($r11, 0, $i5, $r9)\n  goto B19\n}",
      "B18 {\n  $r8 \u003d BaseNCodec baseNCodec\u003e\n  $r7 \u003d BaseNCodec$Context context\u003e\n  $r8.decode($r11, 0, $i5, $r7)\n}",
      "B19 {\n  $r13 \u003d BaseNCodec baseNCodec\u003e\n  $r14 \u003d BaseNCodec$Context context\u003e\n  i6 \u003d $r13.readResults(r0, i0, i1, $r14)\n  goto B11\n}",
      "B20 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B20",
      "B12 --\u003e B13",
      "B12 --\u003e B19",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e B11",
      "B20 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.BaseNCodecInputStream",
    "methodName": "skip",
    "signature": "long skip(long)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i11 \u003e\u003d 0) → B1 | else → B2",
      "B3 : If($i12 \u003c\u003d 0) → B4 | else → B7",
      "B4 : If($i7 !\u003d $i14) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  BaseNCodecInputStream\n  l0 :\u003d @parameter0: long\n  $b1 \u003d l0 cmp 0L\n  $i11 \u003d (int) $b1\n  if ($i11 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalArgumentException\n  $r3 \u003d dynInvoke makeConcatWithConstants(l0)\n  new IllegalArgumentException($r3)\n  throw $r4\n}",
      "B2 {\n  r0 \u003d newarray (byte)[512]\n  l9 \u003d l0\n}",
      "B3 {\n  $b2 \u003d l9 cmp 0L\n  $i12 \u003d (int) $b2\n  if ($i12 \u003c\u003d 0) goto B4 else B7\n}",
      "B4 {\n  $i4 \u003d lengthof r0\n  $l5 \u003d (long) $i4\n  $l6 \u003d Math.min($l5, l9)\n  i10 \u003d (int) $l6\n  $i7 \u003d r1.read(r0, 0, i10)\n  $i14 \u003d (int) -1\n  if ($i7 !\u003d $i14) goto B5 else B6\n}",
      "B5 {\n  goto B7\n}",
      "B6 {\n  $l8 \u003d (long) $i7\n  l9 \u003d l9 - $l8\n  goto B3\n}",
      "B7 {\n  $l3 \u003d l0 - l9\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.BaseNCodecOutputStream",
    "methodName": "write",
    "signature": "void write(byte[],int,int)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 14,
    "edges": 17,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003c 0) → B3 | else → B4",
      "B3 : If(i1 \u003e\u003d 0) → B4 | else → B5",
      "B5 : If(i0 \u003e $i2) → B6 | else → B7",
      "B6 : If($i4 \u003c\u003d $i3) → B7 | else → B8",
      "B8 : If(i1 \u003c\u003d 0) → B9 | else → B13",
      "B9 : If($z0 \u003d\u003d 0) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  BaseNCodecOutputStream\n  r0 :\u003d @parameter0: byte[]\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d NullPointerException\n  new NullPointerException()\n  throw $r8\n}",
      "B2 {\n  if (i0 \u003c 0) goto B3 else B4\n}",
      "B3 {\n  if (i1 \u003e\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r1 \u003d IndexOutOfBoundsException\n  new IndexOutOfBoundsException()\n  throw $r1\n}",
      "B5 {\n  $i2 \u003d lengthof r0\n  if (i0 \u003e $i2) goto B6 else B7\n}",
      "B6 {\n  $i4 \u003d i0 + i1\n  $i3 \u003d lengthof r0\n  if ($i4 \u003c\u003d $i3) goto B7 else B8\n}",
      "B7 {\n  $r2 \u003d IndexOutOfBoundsException\n  new IndexOutOfBoundsException()\n  throw $r2\n}",
      "B8 {\n  if (i1 \u003c\u003d 0) goto B9 else B13\n}",
      "B9 {\n  $z0 \u003d BaseNCodecOutputStream: boolean doEncode\u003e\n  if ($z0 \u003d\u003d 0) goto B10 else B11\n}",
      "B10 {\n  $r7 \u003d BaseNCodec baseNCodec\u003e\n  $r6 \u003d BaseNCodec$Context context\u003e\n  $r7.encode(r0, i0, i1, $r6)\n  goto B12\n}",
      "B11 {\n  $r5 \u003d BaseNCodec baseNCodec\u003e\n  $r4 \u003d BaseNCodec$Context context\u003e\n  $r5.decode(r0, i0, i1, $r4)\n}",
      "B12 {\n  r3.flush(0)\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.BaseNCodecOutputStream",
    "methodName": "flush",
    "signature": "void flush(boolean)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B3",
      "B1 : If($i1 \u003c\u003d 0) → B2 | else → B3",
      "B3 : If(z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  BaseNCodecOutputStream\n  z0 :\u003d @parameter0: boolean\n  $r2 \u003d BaseNCodec baseNCodec\u003e\n  $r1 \u003d BaseNCodec$Context context\u003e\n  $i0 \u003d $r2.available($r1)\n  if ($i0 \u003c\u003d 0) goto B1 else B3\n}",
      "B1 {\n  r4 \u003d newarray (byte)[$i0]\n  $r6 \u003d BaseNCodec baseNCodec\u003e\n  $r5 \u003d BaseNCodec$Context context\u003e\n  $i1 \u003d $r6.readResults(r4, 0, $i0, $r5)\n  if ($i1 \u003c\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d OutputStream out\u003e\n  $r7.write(r4, 0, $i1)\n}",
      "B3 {\n  if (z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r3 \u003d OutputStream out\u003e\n  $r3.flush()\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.BaseNCodecOutputStream",
    "methodName": "close",
    "signature": "void close()",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BaseNCodecOutputStream\n  $z0 \u003d BaseNCodecOutputStream: boolean doEncode\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d BaseNCodec baseNCodec\u003e\n  $r6 \u003d BaseNCodecOutputStream: byte[] singleByte\u003e\n  $r5 \u003d BaseNCodec$Context context\u003e\n  $i1 \u003d (int) -1\n  $r7.encode($r6, 0, $i1, $r5)\n  goto B3\n}",
      "B2 {\n  $r3 \u003d BaseNCodec baseNCodec\u003e\n  $r2 \u003d BaseNCodecOutputStream: byte[] singleByte\u003e\n  $r1 \u003d BaseNCodec$Context context\u003e\n  $i3 \u003d (int) -1\n  $r3.decode($r2, 0, $i3, $r1)\n}",
      "B3 {\n  r0.flush()\n  $r4 \u003d OutputStream out\u003e\n  $r4.close()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.BinaryCodec",
    "methodName": "encode",
    "signature": "java.lang.Object encode(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BinaryCodec\n  Object\n  $z0 \u003d r0 instanceof byte[]\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d EncoderException\n  new EncoderException(\"argument not a byte array\")\n  throw $r3\n}",
      "B2 {\n  $r1 \u003d (byte[]) r0\n  $r2 \u003d BinaryCodec.toAsciiChars($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.BinaryCodec",
    "methodName": "decode",
    "signature": "java.lang.Object decode(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 9,
    "edges": 8,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B6",
      "B6 : If($z2 \u003d\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  BinaryCodec\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d BinaryCodec: byte[] EMPTY_BYTE_ARRAY\u003e\n  return\n}",
      "B2 {\n  $z0 \u003d r0 instanceof byte[]\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r7 \u003d (byte[]) r0\n  $r8 \u003d BinaryCodec.fromAscii($r7)\n  return\n}",
      "B4 {\n  $z1 \u003d r0 instanceof char[]\n  if ($z1 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r5 \u003d (char[]) r0\n  $r6 \u003d BinaryCodec.fromAscii($r5)\n  return\n}",
      "B6 {\n  $z2 \u003d String\n  if ($z2 \u003d\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $r2 \u003d String) r0\n  $r3 \u003d $r2.toCharArray()\n  $r4 \u003d BinaryCodec.fromAscii($r3)\n  return\n}",
      "B8 {\n  $r1 \u003d DecoderException\n  new DecoderException(\"argument not a byte array\")\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.BinaryCodec",
    "methodName": "toByteArray",
    "signature": "byte[] toByteArray(java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BinaryCodec\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d BinaryCodec: byte[] EMPTY_BYTE_ARRAY\u003e\n  return\n}",
      "B2 {\n  $r1 \u003d r0.toCharArray()\n  $r2 \u003d BinaryCodec.fromAscii($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.BinaryCodec",
    "methodName": "fromAscii",
    "signature": "byte[] fromAscii(char[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 12,
    "edges": 15,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($i0 !\u003d 0) → B2 | else → B3",
      "B4 : If(i12 \u003e\u003d $i4) → B5 | else → B11",
      "B6 : If(i14 \u003e\u003d $i5) → B7 | else → B10",
      "B7 : If($i15 !\u003d 49) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d BinaryCodec: byte[] EMPTY_BYTE_ARRAY\u003e\n  return\n}",
      "B3 {\n  $i1 \u003d lengthof r0\n  $i2 \u003d $i1 \u003e\u003e 3\n  r2 \u003d newarray (byte)[$i2]\n  i12 \u003d 0\n  $i3 \u003d lengthof r0\n  i13 \u003d $i3 - 1\n}",
      "B4 {\n  $i4 \u003d lengthof r2\n  if (i12 \u003e\u003d $i4) goto B5 else B11\n}",
      "B5 {\n  i14 \u003d 0\n}",
      "B6 {\n  $r3 \u003d BinaryCodec: int[] BITS\u003e\n  $i5 \u003d lengthof $r3\n  if (i14 \u003e\u003d $i5) goto B7 else B10\n}",
      "B7 {\n  $i6 \u003d i13 - i14\n  $c7 \u003d r0[$i6]\n  $i15 \u003d (int) $c7\n  if ($i15 !\u003d 49) goto B8 else B9\n}",
      "B8 {\n  $b9 \u003d r2[i12]\n  $r4 \u003d BinaryCodec: int[] BITS\u003e\n  $i8 \u003d $r4[i14]\n  $i16 \u003d (int) $b9\n  $i10 \u003d $i16 | $i8\n  $b11 \u003d (byte) $i10\n  r2[i12] \u003d $b11\n}",
      "B9 {\n  i14 \u003d i14 + 1\n  goto B6\n}",
      "B10 {\n  i12 \u003d i12 + 1\n  $i18 \u003d (int) -8\n  i13 \u003d i13 + $i18\n  goto B4\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B11",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B6",
      "B10 --\u003e B4",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.BinaryCodec",
    "methodName": "fromAscii",
    "signature": "byte[] fromAscii(byte[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B3 : If(i11 \u003e\u003d $i3) → B4 | else → B10",
      "B5 : If(i13 \u003e\u003d $i4) → B6 | else → B9",
      "B6 : If($i14 !\u003d 49) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  $z0 \u003d BinaryCodec.isEmpty(r0)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d BinaryCodec: byte[] EMPTY_BYTE_ARRAY\u003e\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  $i1 \u003d $i0 \u003e\u003e 3\n  r1 \u003d newarray (byte)[$i1]\n  i11 \u003d 0\n  $i2 \u003d lengthof r0\n  i12 \u003d $i2 - 1\n}",
      "B3 {\n  $i3 \u003d lengthof r1\n  if (i11 \u003e\u003d $i3) goto B4 else B10\n}",
      "B4 {\n  i13 \u003d 0\n}",
      "B5 {\n  $r2 \u003d BinaryCodec: int[] BITS\u003e\n  $i4 \u003d lengthof $r2\n  if (i13 \u003e\u003d $i4) goto B6 else B9\n}",
      "B6 {\n  $i5 \u003d i12 - i13\n  $b6 \u003d r0[$i5]\n  $i14 \u003d (int) $b6\n  if ($i14 !\u003d 49) goto B7 else B8\n}",
      "B7 {\n  $b8 \u003d r1[i11]\n  $r3 \u003d BinaryCodec: int[] BITS\u003e\n  $i7 \u003d $r3[i13]\n  $i15 \u003d (int) $b8\n  $i9 \u003d $i15 | $i7\n  $b10 \u003d (byte) $i9\n  r1[i11] \u003d $b10\n}",
      "B8 {\n  i13 \u003d i13 + 1\n  goto B5\n}",
      "B9 {\n  i11 \u003d i11 + 1\n  $i17 \u003d (int) -8\n  i12 \u003d i12 + $i17\n  goto B3\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B10",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B5",
      "B9 --\u003e B3",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.BinaryCodec",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty(byte[])",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($i0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.BinaryCodec",
    "methodName": "toAsciiBytes",
    "signature": "byte[] toAsciiBytes(byte[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B3 : If(i10 \u003e\u003d $i3) → B4 | else → B11",
      "B5 : If(i12 \u003e\u003d $i4) → B6 | else → B10",
      "B6 : If($i7 !\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  $z0 \u003d BinaryCodec.isEmpty(r0)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d BinaryCodec: byte[] EMPTY_BYTE_ARRAY\u003e\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  $i1 \u003d $i0 \u003c\u003c 3\n  r1 \u003d newarray (byte)[$i1]\n  i10 \u003d 0\n  $i2 \u003d lengthof r1\n  i11 \u003d $i2 - 1\n}",
      "B3 {\n  $i3 \u003d lengthof r0\n  if (i10 \u003e\u003d $i3) goto B4 else B11\n}",
      "B4 {\n  i12 \u003d 0\n}",
      "B5 {\n  $r2 \u003d BinaryCodec: int[] BITS\u003e\n  $i4 \u003d lengthof $r2\n  if (i12 \u003e\u003d $i4) goto B6 else B10\n}",
      "B6 {\n  $b6 \u003d r0[i10]\n  $r3 \u003d BinaryCodec: int[] BITS\u003e\n  $i5 \u003d $r3[i12]\n  $i13 \u003d (int) $b6\n  $i7 \u003d $i13 \u0026 $i5\n  if ($i7 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $i9 \u003d i11 - i12\n  r1[$i9] \u003d 48\n  goto B9\n}",
      "B8 {\n  $i8 \u003d i11 - i12\n  r1[$i8] \u003d 49\n}",
      "B9 {\n  i12 \u003d i12 + 1\n  goto B5\n}",
      "B10 {\n  i10 \u003d i10 + 1\n  $i15 \u003d (int) -8\n  i11 \u003d i11 + $i15\n  goto B3\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B11",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B5",
      "B10 --\u003e B3",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.BinaryCodec",
    "methodName": "toAsciiChars",
    "signature": "char[] toAsciiChars(byte[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B3 : If(i10 \u003e\u003d $i3) → B4 | else → B11",
      "B5 : If(i12 \u003e\u003d $i4) → B6 | else → B10",
      "B6 : If($i7 !\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  $z0 \u003d BinaryCodec.isEmpty(r0)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d BinaryCodec: char[] EMPTY_CHAR_ARRAY\u003e\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  $i1 \u003d $i0 \u003c\u003c 3\n  r1 \u003d newarray (char)[$i1]\n  i10 \u003d 0\n  $i2 \u003d lengthof r1\n  i11 \u003d $i2 - 1\n}",
      "B3 {\n  $i3 \u003d lengthof r0\n  if (i10 \u003e\u003d $i3) goto B4 else B11\n}",
      "B4 {\n  i12 \u003d 0\n}",
      "B5 {\n  $r2 \u003d BinaryCodec: int[] BITS\u003e\n  $i4 \u003d lengthof $r2\n  if (i12 \u003e\u003d $i4) goto B6 else B10\n}",
      "B6 {\n  $b6 \u003d r0[i10]\n  $r3 \u003d BinaryCodec: int[] BITS\u003e\n  $i5 \u003d $r3[i12]\n  $i13 \u003d (int) $b6\n  $i7 \u003d $i13 \u0026 $i5\n  if ($i7 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $i9 \u003d i11 - i12\n  r1[$i9] \u003d 48\n  goto B9\n}",
      "B8 {\n  $i8 \u003d i11 - i12\n  r1[$i8] \u003d 49\n}",
      "B9 {\n  i12 \u003d i12 + 1\n  goto B5\n}",
      "B10 {\n  i10 \u003d i10 + 1\n  $i15 \u003d (int) -8\n  i11 \u003d i11 + $i15\n  goto B3\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B11",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B5",
      "B10 --\u003e B3",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.Hex",
    "methodName": "decodeHex",
    "signature": "byte[] decodeHex(char[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003d\u003d 0) → B1 | else → B2",
      "B3 : If(i10 \u003e\u003d i0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  i0 \u003d lengthof r0\n  $i1 \u003d i0 \u0026 1\n  if ($i1 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d DecoderException\n  new DecoderException(\"Odd number of characters.\")\n  throw $r2\n}",
      "B2 {\n  $i2 \u003d i0 \u003e\u003e 1\n  r1 \u003d newarray (byte)[$i2]\n  i9 \u003d 0\n  i10 \u003d 0\n}",
      "B3 {\n  if (i10 \u003e\u003d i0) goto B4 else B5\n}",
      "B4 {\n  $c3 \u003d r0[i10]\n  $i4 \u003d Hex.toDigit($c3, i10)\n  i11 \u003d $i4 \u003c\u003c 4\n  i12 \u003d i10 + 1\n  $c5 \u003d r0[i12]\n  $i6 \u003d Hex.toDigit($c5, i12)\n  i13 \u003d i11 | $i6\n  i10 \u003d i12 + 1\n  $i7 \u003d i13 \u0026 255\n  $b8 \u003d (byte) $i7\n  r1[i9] \u003d $b8\n  i9 \u003d i9 + 1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.Hex",
    "methodName": "encodeHex",
    "signature": "char[] encodeHex(byte[],boolean)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  z0 :\u003d @parameter1: boolean\n  if (z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Hex: char[] DIGITS_LOWER\u003e\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Hex: char[] DIGITS_UPPER\u003e\n}",
      "B3 {\n  $r1 \u003d Hex.encodeHex(r0, $r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.Hex",
    "methodName": "encodeHex",
    "signature": "char[] encodeHex(byte[],char[])",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i9 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  r2 :\u003d @parameter1: char[]\n  i0 \u003d lengthof r0\n  $i1 \u003d i0 \u003c\u003c 1\n  r1 \u003d newarray (char)[$i1]\n  i9 \u003d 0\n  i10 \u003d 0\n}",
      "B1 {\n  if (i9 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  i11 \u003d i10 + 1\n  $b2 \u003d r0[i9]\n  $s12 \u003d (short) $b2\n  $s3 \u003d 240 \u0026 $s12\n  $i13 \u003d (int) $s3\n  $i4 \u003d $i13 \u003e\u003e\u003e 4\n  $c5 \u003d r2[$i4]\n  r1[i10] \u003d $c5\n  i10 \u003d i11 + 1\n  $b6 \u003d r0[i9]\n  $b7 \u003d 15 \u0026 $b6\n  $c8 \u003d r2[$b7]\n  r1[i11] \u003d $c8\n  i9 \u003d i9 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.Hex",
    "methodName": "toDigit",
    "signature": "int toDigit(char,int)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i1 !\u003d $i4) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  c0 :\u003d @parameter0: char\n  i2 :\u003d @parameter1: int\n  $i1 \u003d Character.digit(c0, 16)\n  $i4 \u003d (int) -1\n  if ($i1 !\u003d $i4) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d DecoderException\n  $r1 \u003d dynInvoke makeConcatWithConstants(c0, i2)\n  new DecoderException($r1)\n  throw $r2\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.Hex",
    "methodName": "decode",
    "signature": "java.lang.Object decode(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 13,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Hex\n  Object\n  $z0 \u003d String\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d String) r0\n  $r7 \u003d $r2.toCharArray()\n  goto B3\n}",
      "B2 {\n  $r7 \u003d (char[]) r0\n}",
      "B3 {\n  $r1 \u003d Hex.decodeHex($r7)\n  return\n}",
      "B4 {\n  $r3 :\u003d @caughtexception\n  $r4 \u003d DecoderException\n  $r5 \u003d $r3.getMessage()\n  new DecoderException($r5, $r3)\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.Hex",
    "methodName": "encode",
    "signature": "java.lang.Object encode(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 9,
    "edges": 15,
    "cc": 8,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Hex\n  Object\n  $z0 \u003d String\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d String) r0\n  $r4 \u003d r2.getCharset()\n  $r8 \u003d $r3.getBytes($r4)\n  goto B3\n}",
      "B2 {\n  $r8 \u003d (byte[]) r0\n}",
      "B3 {\n  $r1 \u003d Hex.encodeHex($r8)\n  return\n}",
      "B4 {\n  $r5 :\u003d @caughtexception\n  $r6 \u003d EncoderException\n  $r7 \u003d $r5.getMessage()\n  new EncoderException($r7, $r5)\n  throw $r6\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.StringUtils",
    "methodName": "getBytes",
    "signature": "byte[] getBytes(java.lang.String,java.nio.charset.Charset)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  Charset\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d r0.getBytes(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.StringUtils",
    "methodName": "getBytesUnchecked",
    "signature": "byte[] getBytesUnchecked(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d r0.getBytes(r1)\n  return\n}",
      "B3 {\n  $r3 :\u003d @caughtexception\n  $r4 \u003d StringUtils.newIllegalStateException(r1, $r3)\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.StringUtils",
    "methodName": "newString",
    "signature": "java.lang.String newString(byte[],java.nio.charset.Charset)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  Charset\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d String\n  new String(r0, r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.binary.StringUtils",
    "methodName": "newString",
    "signature": "java.lang.String newString(byte[],java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d String\n  new String(r0, r2)\n  return\n}",
      "B3 {\n  $r3 :\u003d @caughtexception\n  $r4 \u003d StringUtils.newIllegalStateException(r2, $r3)\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.Charsets",
    "methodName": "toCharset",
    "signature": "java.nio.charset.Charset toCharset(java.nio.charset.Charset)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Charset\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d Charset.defaultCharset()\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.Charsets",
    "methodName": "toCharset",
    "signature": "java.nio.charset.Charset toCharset(java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d Charset.defaultCharset()\n  goto B3\n}",
      "B2 {\n  $r1 \u003d Charset.forName(r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.digest.Crypt",
    "methodName": "crypt",
    "signature": "java.lang.String crypt(byte[],java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 9,
    "edges": 8,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B6",
      "B6 : If($z2 \u003d\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  r1 :\u003d @parameter0: byte[]\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d Sha2Crypt.sha512Crypt(r1)\n  return\n}",
      "B2 {\n  $z0 \u003d r0.startsWith(\"$6$\")\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d Sha2Crypt.sha512Crypt(r1, r0)\n  return\n}",
      "B4 {\n  $z1 \u003d r0.startsWith(\"$5$\")\n  if ($z1 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r4 \u003d Sha2Crypt.sha256Crypt(r1, r0)\n  return\n}",
      "B6 {\n  $z2 \u003d r0.startsWith(\"$1$\")\n  if ($z2 \u003d\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $r3 \u003d Md5Crypt.md5Crypt(r1, r0)\n  return\n}",
      "B8 {\n  $r2 \u003d UnixCrypt.crypt(r1, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.digest.DigestUtils",
    "methodName": "digest",
    "signature": "byte[] digest(java.security.MessageDigest,java.io.InputStream)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i0 \u003c\u003d $i2) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MessageDigest\n  InputStream\n  r0 \u003d newarray (byte)[1024]\n  i0 \u003d r1.read(r0, 0, 1024)\n}",
      "B1 {\n  $i2 \u003d (int) -1\n  if (i0 \u003c\u003d $i2) goto B2 else B3\n}",
      "B2 {\n  r2.update(r0, 0, i0)\n  i0 \u003d r1.read(r0, 0, 1024)\n  goto B1\n}",
      "B3 {\n  $r3 \u003d r2.digest()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.digest.DigestUtils",
    "methodName": "getDigest",
    "signature": "java.security.MessageDigest getDigest(java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  String\n  $r1 \u003d MessageDigest.getInstance(r0)\n  return\n}",
      "B1 {\n  $r2 :\u003d @caughtexception\n  $r3 \u003d IllegalArgumentException\n  new IllegalArgumentException($r2)\n  throw $r3\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.digest.Md5Crypt",
    "methodName": "apr1Crypt",
    "signature": "java.lang.String apr1Crypt(byte[],java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  String\n  if (r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d r1.startsWith(\"$apr1$\")\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  r1 \u003d dynInvoke makeConcatWithConstants(r1)\n}",
      "B3 {\n  $r2 \u003d Md5Crypt.md5Crypt(r0, r1, \"$apr1$\")\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.digest.Md5Crypt",
    "methodName": "md5Crypt",
    "signature": "java.lang.String md5Crypt(byte[],java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 32,
    "edges": 42,
    "cc": 12,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B2 : If($r6 \u003d\u003d null) → B3 | else → B4",
      "B3 : If($z0 !\u003d 0) → B4 | else → B5",
      "B7 : If(i24 \u003c\u003d 0) → B8 | else → B12",
      "B8 : If(i24 \u003c\u003d 16) → B9 | else → B10",
      "B13 : If(i26 \u003c\u003d 0) → B14 | else → B18",
      "B14 : If($i21 !\u003d 1) → B15 | else → B16",
      "B19 : If(i27 \u003e\u003d 1000) → B20 | else → B31",
      "B20 : If($i17 \u003d\u003d 0) → B21 | else → B22",
      "B23 : If($i18 \u003d\u003d 0) → B24 | else → B25",
      "B25 : If($i19 \u003d\u003d 0) → B26 | else → B27",
      "B27 : If($i20 \u003d\u003d 0) → B28 | else → B29"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  String\n  String\n  i0 \u003d lengthof r0\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r20 \u003d B64.getRandomSalt(8)\n  goto B6\n}",
      "B2 {\n  $r3 \u003d r2.replace(\"$\", \"\\\\$\")\n  $r4 \u003d dynInvoke makeConcatWithConstants($r3)\n  $r5 \u003d Pattern.compile($r4)\n  $r6 \u003d $r5.matcher(r1)\n  if ($r6 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $z0 \u003d $r6.find()\n  if ($z0 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r23 \u003d IllegalArgumentException\n  $r8 \u003d dynInvoke makeConcatWithConstants(r1)\n  new IllegalArgumentException($r8)\n  throw $r23\n}",
      "B5 {\n  r20 \u003d $r6.group(1)\n}",
      "B6 {\n  $r9 \u003d Charset UTF_8\u003e\n  $r10 \u003d r20.getBytes($r9)\n  $r11 \u003d DigestUtils.getMd5Digest()\n  $r11.update(r0)\n  $r12 \u003d Charset UTF_8\u003e\n  $r13 \u003d r2.getBytes($r12)\n  $r11.update($r13)\n  $r11.update($r10)\n  $r14 \u003d DigestUtils.getMd5Digest()\n  r21 \u003d $r14\n  $r14.update(r0)\n  $r14.update($r10)\n  $r14.update(r0)\n  $r15 \u003d $r14.digest()\n  i24 \u003d i0\n}",
      "B7 {\n  if (i24 \u003c\u003d 0) goto B8 else B12\n}",
      "B8 {\n  if (i24 \u003c\u003d 16) goto B9 else B10\n}",
      "B9 {\n  $i25 \u003d 16\n  goto B11\n}",
      "B10 {\n  $i25 \u003d i24\n}",
      "B11 {\n  $r11.update($r15, 0, $i25)\n  $i29 \u003d (int) -16\n  i24 \u003d i24 + $i29\n  goto B7\n}",
      "B12 {\n  Arrays.fill($r15, 0)\n  i26 \u003d i0\n}",
      "B13 {\n  if (i26 \u003c\u003d 0) goto B14 else B18\n}",
      "B14 {\n  $i21 \u003d i26 \u0026 1\n  if ($i21 !\u003d 1) goto B15 else B16\n}",
      "B15 {\n  $b23 \u003d $r15[0]\n  $r11.update($b23)\n  goto B17\n}",
      "B16 {\n  $b22 \u003d r0[0]\n  $r11.update($b22)\n}",
      "B17 {\n  i26 \u003d i26 \u003e\u003e 1\n  goto B13\n}",
      "B18 {\n  $r24 \u003d StringBuilder\n  $r17 \u003d dynInvoke makeConcatWithConstants(r2, r20)\n  new StringBuilder($r17)\n  r22 \u003d $r11.digest()\n  i27 \u003d 0\n}",
      "B19 {\n  if (i27 \u003e\u003d 1000) goto B20 else B31\n}",
      "B20 {\n  $r19 \u003d DigestUtils.getMd5Digest()\n  r21 \u003d $r19\n  $i17 \u003d i27 \u0026 1\n  if ($i17 \u003d\u003d 0) goto B21 else B22\n}",
      "B21 {\n  $r19.update(r0)\n  goto B23\n}",
      "B22 {\n  $r19.update(r22, 0, 16)\n}",
      "B23 {\n  $i18 \u003d i27 % 3\n  if ($i18 \u003d\u003d 0) goto B24 else B25\n}",
      "B24 {\n  $r19.update($r10)\n}",
      "B25 {\n  $i19 \u003d i27 % 7\n  if ($i19 \u003d\u003d 0) goto B26 else B27\n}",
      "B26 {\n  $r19.update(r0)\n}",
      "B27 {\n  $i20 \u003d i27 \u0026 1\n  if ($i20 \u003d\u003d 0) goto B28 else B29\n}",
      "B28 {\n  $r19.update(r22, 0, 16)\n  goto B30\n}",
      "B29 {\n  $r19.update(r0)\n}",
      "B30 {\n  r22 \u003d $r19.digest()\n  i27 \u003d i27 + 1\n  goto B19\n}",
      "B31 {\n  $b3 \u003d r22[0]\n  $b2 \u003d r22[6]\n  $b1 \u003d r22[12]\n  B64.b64from24bit($b3, $b2, $b1, 4, $r24)\n  $b6 \u003d r22[1]\n  $b5 \u003d r22[7]\n  $b4 \u003d r22[13]\n  B64.b64from24bit($b6, $b5, $b4, 4, $r24)\n  $b9 \u003d r22[2]\n  $b8 \u003d r22[8]\n  $b7 \u003d r22[14]\n  B64.b64from24bit($b9, $b8, $b7, 4, $r24)\n  $b12 \u003d r22[3]\n  $b11 \u003d r22[9]\n  $b10 \u003d r22[15]\n  B64.b64from24bit($b12, $b11, $b10, 4, $r24)\n  $b15 \u003d r22[4]\n  $b14 \u003d r22[10]\n  $b13 \u003d r22[5]\n  B64.b64from24bit($b15, $b14, $b13, 4, $r24)\n  $b16 \u003d r22[11]\n  B64.b64from24bit(0, 0, $b16, 2, $r24)\n  $r11.reset()\n  r21.reset()\n  Arrays.fill(r0, 0)\n  Arrays.fill($r10, 0)\n  Arrays.fill(r22, 0)\n  $r18 \u003d $r24.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B7",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B18",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e B13",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B19 --\u003e B31",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B23",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B25",
      "B25 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B27",
      "B27 --\u003e B28",
      "B27 --\u003e B29",
      "B28 --\u003e B30",
      "B29 --\u003e B30",
      "B30 --\u003e B19",
      "B31 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.digest.Sha2Crypt",
    "methodName": "sha256Crypt",
    "signature": "java.lang.String sha256Crypt(byte[],java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  String\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d B64.getRandomSalt(8)\n  r3 \u003d dynInvoke makeConcatWithConstants($r2)\n}",
      "B2 {\n  $r1 \u003d Sha2Crypt.sha2Crypt(r0, r3, \"$5$\", 32, \"SHA-256\")\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.digest.Sha2Crypt",
    "methodName": "sha2Crypt",
    "signature": "java.lang.String sha2Crypt(byte[],java.lang.String,java.lang.String,int,java.lang.String)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 47,
    "edges": 62,
    "cc": 17,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B2 : If($r3 \u003d\u003d null) → B3 | else → B4",
      "B3 : If($z0 !\u003d 0) → B4 | else → B5",
      "B5 : If($r6 \u003d\u003d null) → B6 | else → B7",
      "B8 : If(i115 \u003c\u003d i1) → B9 | else → B10",
      "B11 : If(i116 \u003c\u003d 0) → B12 | else → B16",
      "B12 : If($i110 \u003d\u003d 0) → B13 | else → B14",
      "B17 : If(i117 \u003e i0) → B18 | else → B19",
      "B20 : If(i118 \u003e\u003d $i2) → B21 | else → B22",
      "B23 : If(i119 \u003e $i6) → B24 | else → B25",
      "B26 : If(i120 \u003e\u003d $i7) → B27 | else → B28",
      "B29 : If(i121 \u003e $i9) → B30 | else → B41",
      "B30 : If($i106 \u003d\u003d 0) → B31 | else → B32",
      "B33 : If($i107 \u003d\u003d 0) → B34 | else → B35",
      "B35 : If($i108 \u003d\u003d 0) → B36 | else → B37",
      "B37 : If($i109 \u003d\u003d 0) → B38 | else → B39",
      "B41 : If(z1 \u003d\u003d 0) → B42 | else → B43",
      "B43 : If(i1 !\u003d 32) → B44 | else → B45"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  String\n  String\n  i1 :\u003d @parameter3: int\n  String\n  i0 \u003d lengthof r0\n  i114 \u003d 5000\n  z1 \u003d 0\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r29 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Salt must not be null\")\n  throw $r29\n}",
      "B2 {\n  $r2 \u003d Pattern SALT_PATTERN\u003e\n  $r3 \u003d $r2.matcher(r1)\n  if ($r3 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $z0 \u003d $r3.find()\n  if ($z0 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r30 \u003d IllegalArgumentException\n  $r5 \u003d dynInvoke makeConcatWithConstants(r1)\n  new IllegalArgumentException($r5)\n  throw $r30\n}",
      "B5 {\n  $r6 \u003d $r3.group(3)\n  if ($r6 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r24 \u003d $r3.group(3)\n  $i111 \u003d Integer.parseInt($r24)\n  $i112 \u003d Math.min(999999999, $i111)\n  i114 \u003d Math.max(1000, $i112)\n  z1 \u003d 1\n}",
      "B7 {\n  $r7 \u003d $r3.group(4)\n  $r8 \u003d Charset UTF_8\u003e\n  $r9 \u003d $r7.getBytes($r8)\n  $i113 \u003d lengthof $r9\n  $r11 \u003d DigestUtils.getDigest(r10)\n  r26 \u003d $r11\n  $r11.update(r0)\n  $r11.update($r9)\n  $r12 \u003d DigestUtils.getDigest(r10)\n  $r12.update(r0)\n  $r12.update($r9)\n  $r12.update(r0)\n  $r13 \u003d $r12.digest()\n  i115 \u003d lengthof r0\n}",
      "B8 {\n  if (i115 \u003c\u003d i1) goto B9 else B10\n}",
      "B9 {\n  $r11.update($r13, 0, i1)\n  i115 \u003d i115 - i1\n  goto B8\n}",
      "B10 {\n  $r11.update($r13, 0, i115)\n  i116 \u003d lengthof r0\n}",
      "B11 {\n  if (i116 \u003c\u003d 0) goto B12 else B16\n}",
      "B12 {\n  $i110 \u003d i116 \u0026 1\n  if ($i110 \u003d\u003d 0) goto B13 else B14\n}",
      "B13 {\n  $r11.update($r13, 0, i1)\n  goto B15\n}",
      "B14 {\n  $r11.update(r0)\n}",
      "B15 {\n  i116 \u003d i116 \u003e\u003e 1\n  goto B11\n}",
      "B16 {\n  $r14 \u003d $r11.digest()\n  r27 \u003d $r14\n  $r15 \u003d DigestUtils.getDigest(r10)\n  i117 \u003d 1\n}",
      "B17 {\n  if (i117 \u003e i0) goto B18 else B19\n}",
      "B18 {\n  $r15.update(r0)\n  i117 \u003d i117 + 1\n  goto B17\n}",
      "B19 {\n  $r16 \u003d $r15.digest()\n  r17 \u003d newarray (byte)[i0]\n  i118 \u003d 0\n}",
      "B20 {\n  $i2 \u003d i0 - i1\n  if (i118 \u003e\u003d $i2) goto B21 else B22\n}",
      "B21 {\n  System.arraycopy($r16, 0, r17, i118, i1)\n  i118 \u003d i118 + i1\n  goto B20\n}",
      "B22 {\n  $i3 \u003d i0 - i118\n  System.arraycopy($r16, 0, r17, i118, $i3)\n  $r18 \u003d DigestUtils.getDigest(r10)\n  i119 \u003d 1\n}",
      "B23 {\n  $b4 \u003d $r14[0]\n  $s122 \u003d (short) $b4\n  $s5 \u003d $s122 \u0026 255\n  $i123 \u003d (int) $s5\n  $i6 \u003d 16 + $i123\n  if (i119 \u003e $i6) goto B24 else B25\n}",
      "B24 {\n  $r18.update($r9)\n  i119 \u003d i119 + 1\n  goto B23\n}",
      "B25 {\n  $r19 \u003d $r18.digest()\n  r28 \u003d newarray (byte)[$i113]\n  i120 \u003d 0\n}",
      "B26 {\n  $i7 \u003d $i113 - i1\n  if (i120 \u003e\u003d $i7) goto B27 else B28\n}",
      "B27 {\n  System.arraycopy($r19, 0, r28, i120, i1)\n  i120 \u003d i120 + i1\n  goto B26\n}",
      "B28 {\n  $i8 \u003d $i113 - i120\n  System.arraycopy($r19, 0, r28, i120, $i8)\n  i121 \u003d 0\n}",
      "B29 {\n  $i9 \u003d i114 - 1\n  if (i121 \u003e $i9) goto B30 else B41\n}",
      "B30 {\n  $r23 \u003d DigestUtils.getDigest(r10)\n  r26 \u003d $r23\n  $i106 \u003d i121 \u0026 1\n  if ($i106 \u003d\u003d 0) goto B31 else B32\n}",
      "B31 {\n  $r23.update(r17, 0, i0)\n  goto B33\n}",
      "B32 {\n  $r23.update(r27, 0, i1)\n}",
      "B33 {\n  $i107 \u003d i121 % 3\n  if ($i107 \u003d\u003d 0) goto B34 else B35\n}",
      "B34 {\n  $r23.update(r28, 0, $i113)\n}",
      "B35 {\n  $i108 \u003d i121 % 7\n  if ($i108 \u003d\u003d 0) goto B36 else B37\n}",
      "B36 {\n  $r23.update(r17, 0, i0)\n}",
      "B37 {\n  $i109 \u003d i121 \u0026 1\n  if ($i109 \u003d\u003d 0) goto B38 else B39\n}",
      "B38 {\n  $r23.update(r27, 0, i1)\n  goto B40\n}",
      "B39 {\n  $r23.update(r17, 0, i0)\n}",
      "B40 {\n  r27 \u003d $r23.digest()\n  i121 \u003d i121 + 1\n  goto B29\n}",
      "B41 {\n  $r31 \u003d StringBuilder\n  new StringBuilder(r21)\n  if (z1 \u003d\u003d 0) goto B42 else B43\n}",
      "B42 {\n  $r31.append(\"rounds\u003d\")\n  $r31.append(i114)\n  $r31.append(\"$\")\n}",
      "B43 {\n  $r31.append($r7)\n  $r31.append(\"$\")\n  if (i1 !\u003d 32) goto B44 else B45\n}",
      "B44 {\n  $b76 \u003d r27[0]\n  $b75 \u003d r27[10]\n  $b74 \u003d r27[20]\n  B64.b64from24bit($b76, $b75, $b74, 4, $r31)\n  $b79 \u003d r27[21]\n  $b78 \u003d r27[1]\n  $b77 \u003d r27[11]\n  B64.b64from24bit($b79, $b78, $b77, 4, $r31)\n  $b82 \u003d r27[12]\n  $b81 \u003d r27[22]\n  $b80 \u003d r27[2]\n  B64.b64from24bit($b82, $b81, $b80, 4, $r31)\n  $b85 \u003d r27[3]\n  $b84 \u003d r27[13]\n  $b83 \u003d r27[23]\n  B64.b64from24bit($b85, $b84, $b83, 4, $r31)\n  $b88 \u003d r27[24]\n  $b87 \u003d r27[4]\n  $b86 \u003d r27[14]\n  B64.b64from24bit($b88, $b87, $b86, 4, $r31)\n  $b91 \u003d r27[15]\n  $b90 \u003d r27[25]\n  $b89 \u003d r27[5]\n  B64.b64from24bit($b91, $b90, $b89, 4, $r31)\n  $b94 \u003d r27[6]\n  $b93 \u003d r27[16]\n  $b92 \u003d r27[26]\n  B64.b64from24bit($b94, $b93, $b92, 4, $r31)\n  $b97 \u003d r27[27]\n  $b96 \u003d r27[7]\n  $b95 \u003d r27[17]\n  B64.b64from24bit($b97, $b96, $b95, 4, $r31)\n  $b100 \u003d r27[18]\n  $b99 \u003d r27[28]\n  $b98 \u003d r27[8]\n  B64.b64from24bit($b100, $b99, $b98, 4, $r31)\n  $b103 \u003d r27[9]\n  $b102 \u003d r27[19]\n  $b101 \u003d r27[29]\n  B64.b64from24bit($b103, $b102, $b101, 4, $r31)\n  $b105 \u003d r27[31]\n  $b104 \u003d r27[30]\n  B64.b64from24bit(0, $b105, $b104, 3, $r31)\n  goto B46\n}",
      "B45 {\n  $b12 \u003d r27[0]\n  $b11 \u003d r27[21]\n  $b10 \u003d r27[42]\n  B64.b64from24bit($b12, $b11, $b10, 4, $r31)\n  $b15 \u003d r27[22]\n  $b14 \u003d r27[43]\n  $b13 \u003d r27[1]\n  B64.b64from24bit($b15, $b14, $b13, 4, $r31)\n  $b18 \u003d r27[44]\n  $b17 \u003d r27[2]\n  $b16 \u003d r27[23]\n  B64.b64from24bit($b18, $b17, $b16, 4, $r31)\n  $b21 \u003d r27[3]\n  $b20 \u003d r27[24]\n  $b19 \u003d r27[45]\n  B64.b64from24bit($b21, $b20, $b19, 4, $r31)\n  $b24 \u003d r27[25]\n  $b23 \u003d r27[46]\n  $b22 \u003d r27[4]\n  B64.b64from24bit($b24, $b23, $b22, 4, $r31)\n  $b27 \u003d r27[47]\n  $b26 \u003d r27[5]\n  $b25 \u003d r27[26]\n  B64.b64from24bit($b27, $b26, $b25, 4, $r31)\n  $b30 \u003d r27[6]\n  $b29 \u003d r27[27]\n  $b28 \u003d r27[48]\n  B64.b64from24bit($b30, $b29, $b28, 4, $r31)\n  $b33 \u003d r27[28]\n  $b32 \u003d r27[49]\n  $b31 \u003d r27[7]\n  B64.b64from24bit($b33, $b32, $b31, 4, $r31)\n  $b36 \u003d r27[50]\n  $b35 \u003d r27[8]\n  $b34 \u003d r27[29]\n  B64.b64from24bit($b36, $b35, $b34, 4, $r31)\n  $b39 \u003d r27[9]\n  $b38 \u003d r27[30]\n  $b37 \u003d r27[51]\n  B64.b64from24bit($b39, $b38, $b37, 4, $r31)\n  $b42 \u003d r27[31]\n  $b41 \u003d r27[52]\n  $b40 \u003d r27[10]\n  B64.b64from24bit($b42, $b41, $b40, 4, $r31)\n  $b45 \u003d r27[53]\n  $b44 \u003d r27[11]\n  $b43 \u003d r27[32]\n  B64.b64from24bit($b45, $b44, $b43, 4, $r31)\n  $b48 \u003d r27[12]\n  $b47 \u003d r27[33]\n  $b46 \u003d r27[54]\n  B64.b64from24bit($b48, $b47, $b46, 4, $r31)\n  $b51 \u003d r27[34]\n  $b50 \u003d r27[55]\n  $b49 \u003d r27[13]\n  B64.b64from24bit($b51, $b50, $b49, 4, $r31)\n  $b54 \u003d r27[56]\n  $b53 \u003d r27[14]\n  $b52 \u003d r27[35]\n  B64.b64from24bit($b54, $b53, $b52, 4, $r31)\n  $b57 \u003d r27[15]\n  $b56 \u003d r27[36]\n  $b55 \u003d r27[57]\n  B64.b64from24bit($b57, $b56, $b55, 4, $r31)\n  $b60 \u003d r27[37]\n  $b59 \u003d r27[58]\n  $b58 \u003d r27[16]\n  B64.b64from24bit($b60, $b59, $b58, 4, $r31)\n  $b63 \u003d r27[59]\n  $b62 \u003d r27[17]\n  $b61 \u003d r27[38]\n  B64.b64from24bit($b63, $b62, $b61, 4, $r31)\n  $b66 \u003d r27[18]\n  $b65 \u003d r27[39]\n  $b64 \u003d r27[60]\n  B64.b64from24bit($b66, $b65, $b64, 4, $r31)\n  $b69 \u003d r27[40]\n  $b68 \u003d r27[61]\n  $b67 \u003d r27[19]\n  B64.b64from24bit($b69, $b68, $b67, 4, $r31)\n  $b72 \u003d r27[62]\n  $b71 \u003d r27[20]\n  $b70 \u003d r27[41]\n  B64.b64from24bit($b72, $b71, $b70, 4, $r31)\n  $b73 \u003d r27[63]\n  B64.b64from24bit(0, 0, $b73, 2, $r31)\n}",
      "B46 {\n  Arrays.fill($r19, 0)\n  Arrays.fill(r17, 0)\n  Arrays.fill(r28, 0)\n  r26.reset()\n  $r18.reset()\n  Arrays.fill(r0, 0)\n  Arrays.fill($r9, 0)\n  $r22 \u003d $r31.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B8",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B16",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B11",
      "B16 --\u003e B17",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B17",
      "B19 --\u003e B20",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B20",
      "B22 --\u003e B23",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B23",
      "B25 --\u003e B26",
      "B26 --\u003e B27",
      "B26 --\u003e B28",
      "B27 --\u003e B26",
      "B28 --\u003e B29",
      "B29 --\u003e B30",
      "B29 --\u003e B41",
      "B30 --\u003e B31",
      "B30 --\u003e B32",
      "B31 --\u003e B33",
      "B32 --\u003e B33",
      "B33 --\u003e B34",
      "B33 --\u003e B35",
      "B34 --\u003e B35",
      "B35 --\u003e B36",
      "B35 --\u003e B37",
      "B36 --\u003e B37",
      "B37 --\u003e B38",
      "B37 --\u003e B39",
      "B38 --\u003e B40",
      "B39 --\u003e B40",
      "B40 --\u003e B29",
      "B41 --\u003e B42",
      "B41 --\u003e B43",
      "B42 --\u003e B43",
      "B43 --\u003e B44",
      "B43 --\u003e B45",
      "B44 --\u003e B46",
      "B45 --\u003e B46",
      "B46 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.digest.Sha2Crypt",
    "methodName": "sha512Crypt",
    "signature": "java.lang.String sha512Crypt(byte[],java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  String\n  if (r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d B64.getRandomSalt(8)\n  r3 \u003d dynInvoke makeConcatWithConstants($r2)\n}",
      "B2 {\n  $r1 \u003d Sha2Crypt.sha2Crypt(r0, r3, \"$6$\", 64, \"SHA-512\")\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.digest.UnixCrypt",
    "methodName": "crypt",
    "signature": "java.lang.String crypt(byte[],java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 22,
    "edges": 29,
    "cc": 9,
    "flowSummary": [
      "B0 : If(r16 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i21 \u003e\u003d $i22) → B6 | else → B7",
      "B8 : If(i23 \u003e\u003d $i3) → B9 | else → B11",
      "B9 : If(i23 \u003e\u003d $i11) → B10 | else → B11",
      "B12 : If(i25 \u003e\u003d 13) → B13 | else → B21",
      "B14 : If(i28 \u003e\u003d 6) → B15 | else → B20",
      "B15 : If($i7 \u003d\u003d 0) → B16 | else → B17",
      "B17 : If($i10 !\u003d 0) → B18 | else → B19"
    ],
    "blockList": [
      "B0 {\n  r7 :\u003d @parameter0: byte[]\n  String\n  if (r16 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r17 \u003d Random\n  new Random()\n  $r12 \u003d UnixCrypt: char[] SALT_CHARS\u003e\n  i20 \u003d lengthof $r12\n  $r13 \u003d UnixCrypt: char[] SALT_CHARS\u003e\n  $i14 \u003d $r17.nextInt(i20)\n  $c15 \u003d $r13[$i14]\n  $r14 \u003d UnixCrypt: char[] SALT_CHARS\u003e\n  $i16 \u003d $r17.nextInt(i20)\n  $c17 \u003d $r14[$i16]\n  r16 \u003d dynInvoke makeConcatWithConstants($c15, $c17)\n  goto B4\n}",
      "B2 {\n  $z0 \u003d r16.matches(\"^./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz{2,}$\")\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r18 \u003d IllegalArgumentException\n  $r10 \u003d dynInvoke makeConcatWithConstants(r16)\n  new IllegalArgumentException($r10)\n  throw $r18\n}",
      "B4 {\n  $r19 \u003d StringBuilder\n  new StringBuilder(\"             \")\n  $c0 \u003d r16.charAt(0)\n  $c1 \u003d r16.charAt(1)\n  $r19.setCharAt(0, $c0)\n  $r19.setCharAt(1, $c1)\n  $r1 \u003d UnixCrypt: int[] CON_SALT\u003e\n  $i30 \u003d (int) $c0\n  $i18 \u003d $r1[$i30]\n  $r2 \u003d UnixCrypt: int[] CON_SALT\u003e\n  $i31 \u003d (int) $c1\n  $i2 \u003d $r2[$i31]\n  $i19 \u003d $i2 \u003c\u003c 4\n  $r15 \u003d newarray (byte)[8]\n  i21 \u003d 0\n}",
      "B5 {\n  $i22 \u003d lengthof $r15\n  if (i21 \u003e\u003d $i22) goto B6 else B7\n}",
      "B6 {\n  $r15[i21] \u003d 0\n  i21 \u003d i21 + 1\n  goto B5\n}",
      "B7 {\n  i23 \u003d 0\n}",
      "B8 {\n  $i3 \u003d lengthof $r15\n  if (i23 \u003e\u003d $i3) goto B9 else B11\n}",
      "B9 {\n  $i11 \u003d lengthof r7\n  if (i23 \u003e\u003d $i11) goto B10 else B11\n}",
      "B10 {\n  b24 \u003d r7[i23]\n  $i32 \u003d (int) b24\n  $i12 \u003d $i32 \u003c\u003c 1\n  $b13 \u003d (byte) $i12\n  $r15[i23] \u003d $b13\n  i23 \u003d i23 + 1\n  goto B8\n}",
      "B11 {\n  $r3 \u003d UnixCrypt.desSetKey($r15)\n  $r4 \u003d UnixCrypt.body($r3, $i18, $i19)\n  $r8 \u003d newarray (byte)[9]\n  $i4 \u003d $r4[0]\n  UnixCrypt.intToFourBytes($i4, $r8, 0)\n  $i5 \u003d $r4[1]\n  UnixCrypt.intToFourBytes($i5, $r8, 4)\n  $r8[8] \u003d 0\n  i25 \u003d 2\n  i26 \u003d 0\n  i27 \u003d 128\n}",
      "B12 {\n  if (i25 \u003e\u003d 13) goto B13 else B21\n}",
      "B13 {\n  i28 \u003d 0\n  i29 \u003d 0\n}",
      "B14 {\n  if (i28 \u003e\u003d 6) goto B15 else B20\n}",
      "B15 {\n  i29 \u003d i29 \u003c\u003c 1\n  $b6 \u003d $r8[i26]\n  $i33 \u003d (int) $b6\n  $i7 \u003d $i33 \u0026 i27\n  if ($i7 \u003d\u003d 0) goto B16 else B17\n}",
      "B16 {\n  i29 \u003d i29 | 1\n}",
      "B17 {\n  $i10 \u003d i27 \u003e\u003e\u003e 1\n  i27 \u003d $i10\n  if ($i10 !\u003d 0) goto B18 else B19\n}",
      "B18 {\n  i26 \u003d i26 + 1\n  i27 \u003d 128\n}",
      "B19 {\n  $r6 \u003d UnixCrypt: int[] COV2CHAR\u003e\n  $i8 \u003d $r6[i29]\n  $c9 \u003d (char) $i8\n  $r19.setCharAt(i25, $c9)\n  i28 \u003d i28 + 1\n  goto B14\n}",
      "B20 {\n  i25 \u003d i25 + 1\n  goto B12\n}",
      "B21 {\n  $r5 \u003d $r19.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B8",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B21",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B20",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e B14",
      "B20 --\u003e B12",
      "B21 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.digest.UnixCrypt",
    "methodName": "body",
    "signature": "int[] body(int[],int,int)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i10 \u003e\u003d 25) → B2 | else → B6",
      "B3 : If(i11 \u003e\u003d 32) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: int[]\n  i4 :\u003d @parameter1: int\n  i5 :\u003d @parameter2: int\n  i8 \u003d 0\n  i9 \u003d 0\n  i10 \u003d 0\n}",
      "B1 {\n  if (i10 \u003e\u003d 25) goto B2 else B6\n}",
      "B2 {\n  i11 \u003d 0\n}",
      "B3 {\n  if (i11 \u003e\u003d 32) goto B4 else B5\n}",
      "B4 {\n  $i6 \u003d UnixCrypt.dEncrypt(i8, i9, i11, i4, i5, r0)\n  i8 \u003d $i6\n  $i7 \u003d i11 + 2\n  i9 \u003d UnixCrypt.dEncrypt(i9, $i6, $i7, i4, i5, r0)\n  i11 \u003d i11 + 4\n  goto B3\n}",
      "B5 {\n  i12 \u003d i8\n  i8 \u003d i9\n  i9 \u003d i12\n  i10 \u003d i10 + 1\n  goto B1\n}",
      "B6 {\n  $i1 \u003d i8 \u003e\u003e\u003e 1\n  $i0 \u003d i8 \u003c\u003c 31\n  i13 \u003d $i1 | $i0\n  $i3 \u003d i9 \u003e\u003e\u003e 1\n  $i2 \u003d i9 \u003c\u003c 31\n  i14 \u003d $i3 | $i2\n  r1 \u003d newarray (int)[2]\n  UnixCrypt.permOp(i13, i14, 1, 1431655765, r1)\n  i15 \u003d r1[0]\n  i16 \u003d r1[1]\n  UnixCrypt.permOp(i16, i15, 8, 16711935, r1)\n  i17 \u003d r1[0]\n  i18 \u003d r1[1]\n  UnixCrypt.permOp(i18, i17, 2, 858993459, r1)\n  i19 \u003d r1[0]\n  i20 \u003d r1[1]\n  $i26 \u003d (int) 65535\n  UnixCrypt.permOp(i20, i19, 16, $i26, r1)\n  i21 \u003d r1[0]\n  i22 \u003d r1[1]\n  UnixCrypt.permOp(i22, i21, 4, 252645135, r1)\n  i23 \u003d r1[0]\n  i24 \u003d r1[1]\n  r2 \u003d newarray (int)[2]\n  r2[0] \u003d i24\n  r2[1] \u003d i23\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.digest.UnixCrypt",
    "methodName": "byteToUnsigned",
    "signature": "int byteToUnsigned(byte)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003e\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  b0 :\u003d @parameter0: byte\n  $i2 \u003d (int) b0\n  if ($i2 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $i3 \u003d (int) b0\n  $i1 \u003d $i3 + 256\n  goto B3\n}",
      "B2 {\n  $i4 \u003d (int) b0\n  $i1 \u003d $i4\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.digest.UnixCrypt",
    "methodName": "desSetKey",
    "signature": "int[] desSetKey(byte[])",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i89 \u003e\u003d 16) → B2 | else → B6",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r1 :\u003d @parameter0: byte[]\n  r0 \u003d newarray (int)[32]\n  $i0 \u003d UnixCrypt.fourBytesToInt(r1, 0)\n  $i1 \u003d UnixCrypt.fourBytesToInt(r1, 4)\n  r2 \u003d newarray (int)[2]\n  UnixCrypt.permOp($i1, $i0, 4, 252645135, r2)\n  i78 \u003d r2[0]\n  i79 \u003d r2[1]\n  $i94 \u003d (int) -2\n  $i2 \u003d UnixCrypt.hPermOp(i79, $i94, -859045888)\n  $i96 \u003d (int) -2\n  $i3 \u003d UnixCrypt.hPermOp(i78, $i96, -859045888)\n  UnixCrypt.permOp($i3, $i2, 1, 1431655765, r2)\n  i80 \u003d r2[0]\n  i81 \u003d r2[1]\n  UnixCrypt.permOp(i81, i80, 8, 16711935, r2)\n  i82 \u003d r2[0]\n  i83 \u003d r2[1]\n  UnixCrypt.permOp(i83, i82, 1, 1431655765, r2)\n  i84 \u003d r2[0]\n  i85 \u003d r2[1]\n  $i4 \u003d i84 \u0026 255\n  $i6 \u003d $i4 \u003c\u003c 16\n  $i98 \u003d (int) 65280\n  $i5 \u003d i84 \u0026 $i98\n  $i9 \u003d $i6 | $i5\n  $i7 \u003d i84 \u0026 16711680\n  $i8 \u003d $i7 \u003e\u003e\u003e 16\n  $i12 \u003d $i9 | $i8\n  $i10 \u003d i85 \u0026 -268435456\n  $i11 \u003d $i10 \u003e\u003e\u003e 4\n  i86 \u003d $i12 | $i11\n  i87 \u003d i85 \u0026 268435455\n  i88 \u003d 0\n  i89 \u003d 0\n}",
      "B1 {\n  if (i89 \u003e\u003d 16) goto B2 else B6\n}",
      "B2 {\n  $r3 \u003d UnixCrypt: boolean[] SHIFT2\u003e\n  $z0 \u003d $r3[i89]\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $i69 \u003d i87 \u003e\u003e\u003e 2\n  $i68 \u003d i87 \u003c\u003c 26\n  i90 \u003d $i69 | $i68\n  $i71 \u003d i86 \u003e\u003e\u003e 2\n  $i70 \u003d i86 \u003c\u003c 26\n  i91 \u003d $i71 | $i70\n  goto B5\n}",
      "B4 {\n  $i14 \u003d i87 \u003e\u003e\u003e 1\n  $i13 \u003d i87 \u003c\u003c 27\n  i90 \u003d $i14 | $i13\n  $i16 \u003d i86 \u003e\u003e\u003e 1\n  $i15 \u003d i86 \u003c\u003c 27\n  i91 \u003d $i16 | $i15\n}",
      "B5 {\n  $i72 \u003d i90 \u0026 268435455\n  i87 \u003d $i72\n  $i73 \u003d i91 \u0026 268435455\n  i86 \u003d $i73\n  $r4 \u003d UnixCrypt: int[][] SKB\u003e\n  $r5 \u003d $r4[0]\n  $i17 \u003d $i72 \u0026 63\n  $i24 \u003d $r5[$i17]\n  $r6 \u003d UnixCrypt: int[][] SKB\u003e\n  $r7 \u003d $r6[1]\n  $i18 \u003d $i72 \u003e\u003e\u003e 6\n  $i21 \u003d $i18 \u0026 3\n  $i19 \u003d $i72 \u003e\u003e\u003e 7\n  $i20 \u003d $i19 \u0026 60\n  $i22 \u003d $i21 | $i20\n  $i23 \u003d $r7[$i22]\n  $i31 \u003d $i24 | $i23\n  $r8 \u003d UnixCrypt: int[][] SKB\u003e\n  $r9 \u003d $r8[2]\n  $i25 \u003d $i72 \u003e\u003e\u003e 13\n  $i28 \u003d $i25 \u0026 15\n  $i26 \u003d $i72 \u003e\u003e\u003e 14\n  $i27 \u003d $i26 \u0026 48\n  $i29 \u003d $i28 | $i27\n  $i30 \u003d $r9[$i29]\n  $i41 \u003d $i31 | $i30\n  $r10 \u003d UnixCrypt: int[][] SKB\u003e\n  $r11 \u003d $r10[3]\n  $i32 \u003d $i72 \u003e\u003e\u003e 20\n  $i35 \u003d $i32 \u0026 1\n  $i33 \u003d $i72 \u003e\u003e\u003e 21\n  $i34 \u003d $i33 \u0026 6\n  $i38 \u003d $i35 | $i34\n  $i36 \u003d $i72 \u003e\u003e\u003e 22\n  $i37 \u003d $i36 \u0026 56\n  $i39 \u003d $i38 | $i37\n  $i40 \u003d $r11[$i39]\n  $i74 \u003d $i41 | $i40\n  $r12 \u003d UnixCrypt: int[][] SKB\u003e\n  $r13 \u003d $r12[4]\n  $i42 \u003d $i73 \u0026 63\n  $i49 \u003d $r13[$i42]\n  $r14 \u003d UnixCrypt: int[][] SKB\u003e\n  $r15 \u003d $r14[5]\n  $i43 \u003d $i73 \u003e\u003e\u003e 7\n  $i46 \u003d $i43 \u0026 3\n  $i44 \u003d $i73 \u003e\u003e\u003e 8\n  $i45 \u003d $i44 \u0026 60\n  $i47 \u003d $i46 | $i45\n  $i48 \u003d $r15[$i47]\n  $i53 \u003d $i49 | $i48\n  $r16 \u003d UnixCrypt: int[][] SKB\u003e\n  $r17 \u003d $r16[6]\n  $i50 \u003d $i73 \u003e\u003e\u003e 15\n  $i51 \u003d $i50 \u0026 63\n  $i52 \u003d $r17[$i51]\n  $i60 \u003d $i53 | $i52\n  $r18 \u003d UnixCrypt: int[][] SKB\u003e\n  $r19 \u003d $r18[7]\n  $i54 \u003d $i73 \u003e\u003e\u003e 21\n  $i57 \u003d $i54 \u0026 15\n  $i55 \u003d $i73 \u003e\u003e\u003e 22\n  $i56 \u003d $i55 \u0026 48\n  $i58 \u003d $i57 | $i56\n  $i59 \u003d $r19[$i58]\n  $i75 \u003d $i60 | $i59\n  i92 \u003d i88 + 1\n  $i62 \u003d $i75 \u003c\u003c 16\n  $i100 \u003d (int) 65535\n  $i61 \u003d $i74 \u0026 $i100\n  $i63 \u003d $i62 | $i61\n  r0[i88] \u003d $i63\n  $i65 \u003d $i74 \u003e\u003e\u003e 16\n  $i64 \u003d $i75 \u0026 -65536\n  $i76 \u003d $i65 | $i64\n  $i67 \u003d $i76 \u003c\u003c 4\n  $i66 \u003d $i76 \u003e\u003e\u003e 28\n  $i77 \u003d $i67 | $i66\n  i88 \u003d i92 + 1\n  r0[i92] \u003d $i77\n  i89 \u003d i89 + 1\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.bm.BeiderMorseEncoder",
    "methodName": "encode",
    "signature": "java.lang.Object encode(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeiderMorseEncoder\n  Object\n  $z0 \u003d String\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d EncoderException\n  new EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\")\n  throw $r4\n}",
      "B2 {\n  $r2 \u003d String) r0\n  $r3 \u003d r1.encode($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.bm.BeiderMorseEncoder",
    "methodName": "encode",
    "signature": "java.lang.String encode(java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeiderMorseEncoder\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d PhoneticEngine engine\u003e\n  $r3 \u003d $r2.encode(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.bm.Lang",
    "methodName": "loadFromResource",
    "signature": "org.apache.commons.codec.language.bm.Lang loadFromResource(java.lang.String,org.apache.commons.codec.language.bm.Languages)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 18,
    "edges": 23,
    "cc": 7,
    "flowSummary": [
      "B0 : If($r4 !\u003d null) → B1 | else → B2",
      "B3 : If($z4 \u003d\u003d 0) → B4 | else → B17",
      "B4 : If(z3 \u003d\u003d 0) → B5 | else → B7",
      "B5 : If($z2 \u003d\u003d 0) → B6 | else → B16",
      "B7 : If($z0 \u003d\u003d 0) → B8 | else → B9",
      "B9 : If($i0 \u003c 0) → B10 | else → B11",
      "B11 : If($i1 !\u003d 0) → B12 | else → B13",
      "B13 : If($i2 \u003d\u003d 3) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  String\n  Languages\n  $r0 \u003d ArrayList\n  new ArrayList()\n  $r1 \u003d class \"Lorg/apache/commons/codec/language/bm/Lang;\"\n  $r2 \u003d $r1.getClassLoader()\n  $r4 \u003d $r2.getResourceAsStream(r3)\n  if ($r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r21 \u003d IllegalStateException\n  new IllegalStateException(\"Unable to resolve required resource:org/apache/commons/codec/language/bm/lang.txt\")\n  throw $r21\n}",
      "B2 {\n  $r5 \u003d Scanner\n  new Scanner($r4, \"UTF-8\")\n  z3 \u003d 0\n}",
      "B3 {\n  $z4 \u003d $r5.hasNextLine()\n  if ($z4 \u003d\u003d 0) goto B4 else B17\n}",
      "B4 {\n  $r8 \u003d $r5.nextLine()\n  r22 \u003d $r8\n  if (z3 \u003d\u003d 0) goto B5 else B7\n}",
      "B5 {\n  $z2 \u003d $r8.endsWith(\"*/\")\n  if ($z2 \u003d\u003d 0) goto B6 else B16\n}",
      "B6 {\n  z3 \u003d 0\n  goto B16\n}",
      "B7 {\n  $z0 \u003d $r8.startsWith(\"/*\")\n  if ($z0 \u003d\u003d 0) goto B8 else B9\n}",
      "B8 {\n  z3 \u003d 1\n  goto B16\n}",
      "B9 {\n  $i0 \u003d $r8.indexOf(\"//\")\n  if ($i0 \u003c 0) goto B10 else B11\n}",
      "B10 {\n  r22 \u003d $r8.substring(0, $i0)\n}",
      "B11 {\n  $r9 \u003d r22.trim()\n  $i1 \u003d $r9.length()\n  if ($i1 !\u003d 0) goto B12 else B13\n}",
      "B12 {\n  goto B3\n}",
      "B13 {\n  $r10 \u003d $r9.split(\"\\\\s+\")\n  $i2 \u003d lengthof $r10\n  if ($i2 \u003d\u003d 3) goto B14 else B15\n}",
      "B14 {\n  $r19 \u003d IllegalArgumentException\n  $r20 \u003d dynInvoke makeConcatWithConstants($r8, r3)\n  new IllegalArgumentException($r20)\n  throw $r19\n}",
      "B15 {\n  $r11 \u003d $r10[0]\n  $r12 \u003d Pattern.compile($r11)\n  $r13 \u003d $r10[1]\n  $r14 \u003d $r13.split(\"\\\\+\")\n  $r15 \u003d $r10[2]\n  $z1 \u003d $r15.equals(\"true\")\n  $r16 \u003d Lang$LangRule\n  $r17 \u003d HashSet\n  $r18 \u003d Arrays.asList($r14)\n  new HashSet($r18)\n  new Lang$LangRule($r12, $r17, $z1)\n  $r0.add($r16)\n}",
      "B16 {\n  goto B3\n}",
      "B17 {\n  $r6 \u003d Lang\n  new Lang($r0, r7)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B17",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B16",
      "B6 --\u003e B16",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B16",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B3",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B16",
      "B16 --\u003e B3",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.bm.Lang",
    "methodName": "guessLanguage",
    "signature": "java.lang.String guessLanguage(java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Lang\n  String\n  $r2 \u003d r0.guessLanguages(r1)\n  $z0 \u003d $r2.isSingleton()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d $r2.getAny()\n  goto B3\n}",
      "B2 {\n  $r3 \u003d \"any\"\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.bm.Lang",
    "methodName": "guessLanguages",
    "signature": "org.apache.commons.codec.language.bm.Languages$LanguageSet guessLanguages(java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 11,
    "edges": 14,
    "cc": 5,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B7",
      "B2 : If($z2 \u003d\u003d 0) → B3 | else → B6",
      "B3 : If($z3 \u003d\u003d 0) → B4 | else → B5",
      "B7 : If($z1 \u003d\u003d 0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  Lang\n  String\n  $r1 \u003d Locale ENGLISH\u003e\n  $r2 \u003d r0.toLowerCase($r1)\n  $r3 \u003d HashSet\n  $r5 \u003d Languages languages\u003e\n  $r6 \u003d $r5.getLanguages()\n  new HashSet($r6)\n  $r7 \u003d List rules\u003e\n  $r8 \u003d $r7.iterator()\n}",
      "B1 {\n  $z0 \u003d $r8.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B7\n}",
      "B2 {\n  $r11 \u003d $r8.next()\n  r12 \u003d Lang$LangRule) $r11\n  $z2 \u003d r12.matches($r2)\n  if ($z2 \u003d\u003d 0) goto B3 else B6\n}",
      "B3 {\n  $z3 \u003d Lang$LangRule: boolean acceptOnMatch\u003e\n  if ($z3 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r14 \u003d Set languages\u003e\n  $r3.retainAll($r14)\n  goto B6\n}",
      "B5 {\n  $r13 \u003d Set languages\u003e\n  $r3.removeAll($r13)\n}",
      "B6 {\n  goto B1\n}",
      "B7 {\n  $r9 \u003d Languages$LanguageSet.from($r3)\n  $r10 \u003d Languages$LanguageSet NO_LANGUAGES\u003e\n  $z1 \u003d $r9.equals($r10)\n  if ($z1 \u003d\u003d 0) goto B8 else B9\n}",
      "B8 {\n  $r15 \u003d Languages$LanguageSet ANY_LANGUAGE\u003e\n  goto B10\n}",
      "B9 {\n  $r15 \u003d $r9\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B1",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.bm.Languages",
    "methodName": "getInstance",
    "signature": "org.apache.commons.codec.language.bm.Languages getInstance(java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 13,
    "edges": 17,
    "cc": 6,
    "flowSummary": [
      "B0 : If($r4 !\u003d null) → B1 | else → B2",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B12",
      "B4 : If(z3 \u003d\u003d 0) → B5 | else → B7",
      "B5 : If($z2 \u003d\u003d 0) → B6 | else → B11",
      "B7 : If($z1 \u003d\u003d 0) → B8 | else → B9",
      "B9 : If($i0 \u003c\u003d 0) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  String\n  $r0 \u003d HashSet\n  new HashSet()\n  $r1 \u003d class \"Lorg/apache/commons/codec/language/bm/Languages;\"\n  $r2 \u003d $r1.getClassLoader()\n  $r4 \u003d $r2.getResourceAsStream(r3)\n  if ($r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d IllegalArgumentException\n  $r11 \u003d dynInvoke makeConcatWithConstants(r3)\n  new IllegalArgumentException($r11)\n  throw $r10\n}",
      "B2 {\n  $r5 \u003d Scanner\n  new Scanner($r4, \"UTF-8\")\n  z3 \u003d 0\n}",
      "B3 {\n  $z0 \u003d $r5.hasNextLine()\n  if ($z0 \u003d\u003d 0) goto B4 else B12\n}",
      "B4 {\n  $r8 \u003d $r5.nextLine()\n  $r9 \u003d $r8.trim()\n  if (z3 \u003d\u003d 0) goto B5 else B7\n}",
      "B5 {\n  $z2 \u003d $r9.endsWith(\"*/\")\n  if ($z2 \u003d\u003d 0) goto B6 else B11\n}",
      "B6 {\n  z3 \u003d 0\n  goto B11\n}",
      "B7 {\n  $z1 \u003d $r9.startsWith(\"/*\")\n  if ($z1 \u003d\u003d 0) goto B8 else B9\n}",
      "B8 {\n  z3 \u003d 1\n  goto B11\n}",
      "B9 {\n  $i0 \u003d $r9.length()\n  if ($i0 \u003c\u003d 0) goto B10 else B11\n}",
      "B10 {\n  $r0.add($r9)\n}",
      "B11 {\n  goto B3\n}",
      "B12 {\n  $r6 \u003d Languages\n  $r7 \u003d Collections.unmodifiableSet($r0)\n  new Languages($r7)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B12",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B11",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B3",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.bm.PhoneticEngine",
    "methodName": "join",
    "signature": "java.lang.String join(java.lang.Iterable,java.lang.String)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  String\n  $r0 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d r1.iterator()\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d $r2.next()\n  $r9 \u003d String) $r8\n  $r0.append($r9)\n}",
      "B2 {\n  $z1 \u003d $r2.hasNext()\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d $r0.append(r4)\n  $r6 \u003d $r2.next()\n  $r7 \u003d String) $r6\n  $r5.append($r7)\n  goto B2\n}",
      "B4 {\n  $r3 \u003d $r0.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.bm.PhoneticEngine",
    "methodName": "applyFinalRules",
    "signature": "org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.List)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 13,
    "edges": 15,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4",
      "B5 : If($z1 \u003d\u003d 0) → B6 | else → B12",
      "B7 : If(i3 \u003e\u003d $i0) → B8 | else → B11",
      "B8 : If($z2 !\u003d 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  PhoneticEngine\n  PhoneticEngine$PhonemeBuilder\n  List\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r18 \u003d NullPointerException\n  new NullPointerException(\"finalRules can not be null\")\n  throw $r18\n}",
      "B2 {\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r1 \u003d TreeSet\n  $r2 \u003d Comparator COMPARATOR\u003e\n  new TreeSet($r2)\n  $r4 \u003d r3.getPhonemes()\n  $r5 \u003d $r4.iterator()\n}",
      "B5 {\n  $z1 \u003d $r5.hasNext()\n  if ($z1 \u003d\u003d 0) goto B6 else B12\n}",
      "B6 {\n  $r7 \u003d $r5.next()\n  r8 \u003d Rule$Phoneme) $r7\n  $r9 \u003d r8.getLanguages()\n  r19 \u003d PhoneticEngine$PhonemeBuilder.empty($r9)\n  $r10 \u003d r8.getPhonemeText()\n  $r11 \u003d PhoneticEngine.cacheSubSequence($r10)\n  i3 \u003d 0\n}",
      "B7 {\n  $i0 \u003d $r11.length()\n  if (i3 \u003e\u003d $i0) goto B8 else B11\n}",
      "B8 {\n  $r13 \u003d PhoneticEngine$RulesApplication\n  $i1 \u003d PhoneticEngine: int maxPhonemes\u003e\n  new PhoneticEngine$RulesApplication(r0, $r11, r19, i3, $i1)\n  $r15 \u003d $r13.invoke()\n  $z2 \u003d $r15.isFound()\n  $r16 \u003d $r15.getPhonemeBuilder()\n  r19 \u003d $r16\n  if ($z2 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  $i2 \u003d i3 + 1\n  $r17 \u003d $r11.subSequence(i3, $i2)\n  r19 \u003d $r16.append($r17)\n}",
      "B10 {\n  i3 \u003d $r15.getI()\n  goto B7\n}",
      "B11 {\n  $r12 \u003d r19.getPhonemes()\n  $r1.addAll($r12)\n  goto B5\n}",
      "B12 {\n  $r6 \u003d PhoneticEngine$PhonemeBuilder\n  new PhoneticEngine$PhonemeBuilder($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B12",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B7",
      "B11 --\u003e B5",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.bm.PhoneticEngine",
    "methodName": "encode",
    "signature": "java.lang.String encode(java.lang.String,org.apache.commons.codec.language.bm.Languages$LanguageSet)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 29,
    "edges": 37,
    "cc": 10,
    "flowSummary": [
      "B0 : If($r16 !\u003d $r15) → B1 | else → B9",
      "B1 : If($i6 \u003c 2) → B2 | else → B4",
      "B2 : If($z3 \u003d\u003d 0) → B3 | else → B4",
      "B5 : If($z4 \u003d\u003d 0) → B6 | else → B9",
      "B6 : If($z2 \u003d\u003d 0) → B7 | else → B8",
      "B9 : If(switch-on $i1) → B10 | else → B14",
      "B11 : If($z1 \u003d\u003d 0) → B12 | else → B13",
      "B17 : If($z5 \u003d\u003d 0) → B18 | else → B19",
      "B19 : If($i2 !\u003d 1) → B20 | else → B21",
      "B22 : If($z0 \u003d\u003d 0) → B23 | else → B24",
      "B26 : If(i9 \u003e\u003d $i10) → B27 | else → B28"
    ],
    "blockList": [
      "B0 {\n  PhoneticEngine\n  String\n  Languages$LanguageSet\n  $r3 \u003d NameType nameType\u003e\n  $r2 \u003d RuleType RULES\u003e\n  $r4 \u003d Rule.getInstance($r3, $r2, r1)\n  $r6 \u003d NameType nameType\u003e\n  $r5 \u003d RuleType ruleType\u003e\n  $r7 \u003d Rule.getInstance($r6, $r5, \"common\")\n  $r9 \u003d NameType nameType\u003e\n  $r8 \u003d RuleType ruleType\u003e\n  $r10 \u003d Rule.getInstance($r9, $r8, r1)\n  $r11 \u003d Locale ENGLISH\u003e\n  $r12 \u003d r69.toLowerCase($r11)\n  $r13 \u003d $r12.replace(45, 32)\n  $r14 \u003d $r13.trim()\n  $r16 \u003d NameType nameType\u003e\n  $r15 \u003d NameType GENERIC\u003e\n  if ($r16 !\u003d $r15) goto B1 else B9\n}",
      "B1 {\n  $i6 \u003d $r14.length()\n  if ($i6 \u003c 2) goto B2 else B4\n}",
      "B2 {\n  $r63 \u003d $r14.substring(0, 2)\n  $z3 \u003d $r63.equals(\"d\\\u0027\")\n  if ($z3 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r64 \u003d $r14.substring(2)\n  $r65 \u003d dynInvoke makeConcatWithConstants($r64)\n  $r66 \u003d r0.encode($r64)\n  $r67 \u003d r0.encode($r65)\n  $r68 \u003d dynInvoke makeConcatWithConstants($r66, $r67)\n  return\n}",
      "B4 {\n  $r52 \u003d Map NAME_PREFIXES\u003e\n  $r51 \u003d NameType nameType\u003e\n  $r53 \u003d $r52.get($r51)\n  $r54 \u003d Set) $r53\n  $r55 \u003d $r54.iterator()\n}",
      "B5 {\n  $z4 \u003d $r55.hasNext()\n  if ($z4 \u003d\u003d 0) goto B6 else B9\n}",
      "B6 {\n  $r56 \u003d $r55.next()\n  r70 \u003d String) $r56\n  $r57 \u003d dynInvoke makeConcatWithConstants(r70)\n  $z2 \u003d $r14.startsWith($r57)\n  if ($z2 \u003d\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $i7 \u003d r70.length()\n  $i8 \u003d $i7 + 1\n  $r58 \u003d $r14.substring($i8)\n  $r59 \u003d dynInvoke makeConcatWithConstants(r70, $r58)\n  $r60 \u003d r0.encode($r58)\n  $r61 \u003d r0.encode($r59)\n  $r62 \u003d dynInvoke makeConcatWithConstants($r60, $r61)\n  return\n}",
      "B8 {\n  goto B5\n}",
      "B9 {\n  $r17 \u003d $r14.split(\"\\\\s+\")\n  $r18 \u003d Arrays.asList($r17)\n  $r19 \u003d ArrayList\n  new ArrayList()\n  $r21 \u003d PhoneticEngine$2: int[] $SwitchMap$org$apache$commons$codec$language$bm$NameType\u003e\n  $r20 \u003d NameType nameType\u003e\n  $i0 \u003d $r20.ordinal()\n  $i1 \u003d $r21[$i0]\n  IllegalStateException; }\n}",
      "B10 {\n  $r40 \u003d $r18.iterator()\n}",
      "B11 {\n  $z1 \u003d $r40.hasNext()\n  if ($z1 \u003d\u003d 0) goto B12 else B13\n}",
      "B12 {\n  $r45 \u003d $r40.next()\n  r71 \u003d String) $r45\n  $r46 \u003d r71.split(\"\\\u0027\")\n  $i4 \u003d lengthof $r46\n  $i5 \u003d $i4 - 1\n  r72 \u003d $r46[$i5]\n  $r19.add(r72)\n  goto B11\n}",
      "B13 {\n  $r42 \u003d Map NAME_PREFIXES\u003e\n  $r41 \u003d NameType nameType\u003e\n  $r43 \u003d $r42.get($r41)\n  $r44 \u003d Collection) $r43\n  $r19.removeAll($r44)\n  goto B17\n}",
      "B14 {\n  $r19.addAll($r18)\n  $r37 \u003d Map NAME_PREFIXES\u003e\n  $r36 \u003d NameType nameType\u003e\n  $r38 \u003d $r37.get($r36)\n  $r39 \u003d Collection) $r38\n  $r19.removeAll($r39)\n  goto B17\n}",
      "B15 {\n  $r19.addAll($r18)\n  goto B17\n}",
      "B16 {\n  $r47 \u003d IllegalStateException\n  $r48 \u003d NameType nameType\u003e\n  $r49 \u003d String.valueOf($r48)\n  $r50 \u003d dynInvoke makeConcatWithConstants($r49)\n  new IllegalStateException($r50)\n  throw $r47\n}",
      "B17 {\n  $z5 \u003d PhoneticEngine: boolean concat\u003e\n  if ($z5 \u003d\u003d 0) goto B18 else B19\n}",
      "B18 {\n  r73 \u003d PhoneticEngine.join($r19, \" \")\n  goto B25\n}",
      "B19 {\n  $i2 \u003d $r19.size()\n  if ($i2 !\u003d 1) goto B20 else B21\n}",
      "B20 {\n  $r28 \u003d $r18.iterator()\n  $r29 \u003d $r28.next()\n  r73 \u003d String) $r29\n  goto B25\n}",
      "B21 {\n  $r22 \u003d StringBuilder\n  new StringBuilder()\n  $r23 \u003d $r19.iterator()\n}",
      "B22 {\n  $z0 \u003d $r23.hasNext()\n  if ($z0 \u003d\u003d 0) goto B23 else B24\n}",
      "B23 {\n  $r25 \u003d $r23.next()\n  r74 \u003d String) $r25\n  $r26 \u003d $r22.append(\"-\")\n  $r27 \u003d r0.encode(r74)\n  $r26.append($r27)\n  goto B22\n}",
      "B24 {\n  $r24 \u003d $r22.substring(1)\n  return\n}",
      "B25 {\n  r75 \u003d PhoneticEngine$PhonemeBuilder.empty(r1)\n  $r30 \u003d PhoneticEngine.cacheSubSequence(r73)\n  i9 \u003d 0\n}",
      "B26 {\n  $i10 \u003d $r30.length()\n  if (i9 \u003e\u003d $i10) goto B27 else B28\n}",
      "B27 {\n  $r34 \u003d PhoneticEngine$RulesApplication\n  $i3 \u003d PhoneticEngine: int maxPhonemes\u003e\n  new PhoneticEngine$RulesApplication($r4, $r30, r75, i9, $i3)\n  $r35 \u003d $r34.invoke()\n  i9 \u003d $r35.getI()\n  r75 \u003d $r35.getPhonemeBuilder()\n  goto B26\n}",
      "B28 {\n  $r31 \u003d r0.applyFinalRules(r75, $r7)\n  $r32 \u003d r0.applyFinalRules($r31, $r10)\n  $r33 \u003d $r32.makeString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B9",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B5",
      "B9 --\u003e B10",
      "B9 --\u003e B14",
      "B9 --\u003e B15",
      "B9 --\u003e B16",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B11",
      "B13 --\u003e B17",
      "B14 --\u003e B17",
      "B15 --\u003e B17",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B25",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B25",
      "B21 --\u003e B22",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B22",
      "B24 --\u003e [EXIT]",
      "B25 --\u003e B26",
      "B26 --\u003e B27",
      "B26 --\u003e B28",
      "B27 --\u003e B26",
      "B28 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.bm.Rule",
    "methodName": "contains",
    "signature": "boolean contains(java.lang.CharSequence,char)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d $i0) → B2 | else → B5",
      "B2 : If($i4 !\u003d $i5) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  c2 :\u003d @parameter1: char\n  i3 \u003d 0\n}",
      "B1 {\n  $i0 \u003d r0.length()\n  if (i3 \u003e\u003d $i0) goto B2 else B5\n}",
      "B2 {\n  $c1 \u003d r0.charAt(i3)\n  $i4 \u003d (int) $c1\n  $i5 \u003d (int) c2\n  if ($i4 !\u003d $i5) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.bm.Rule",
    "methodName": "createScanner",
    "signature": "java.util.Scanner createScanner(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r6 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NameType\n  RuleType\n  String\n  $r3 \u003d Rule.createResourceName(r0, r1, r2)\n  $r4 \u003d class \"Lorg/apache/commons/codec/language/bm/Languages;\"\n  $r5 \u003d $r4.getClassLoader()\n  $r6 \u003d $r5.getResourceAsStream($r3)\n  if ($r6 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d IllegalArgumentException\n  $r9 \u003d dynInvoke makeConcatWithConstants($r3)\n  new IllegalArgumentException($r9)\n  throw $r8\n}",
      "B2 {\n  $r7 \u003d Scanner\n  new Scanner($r6, \"UTF-8\")\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.bm.Rule",
    "methodName": "createScanner",
    "signature": "java.util.Scanner createScanner(java.lang.String)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r5 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  $r0 \u003d Object)[1]\n  $r0[0] \u003d r1\n  $r2 \u003d String.format(\"org/apache/commons/codec/language/bm/%s.txt\", $r0)\n  $r3 \u003d class \"Lorg/apache/commons/codec/language/bm/Languages;\"\n  $r4 \u003d $r3.getClassLoader()\n  $r5 \u003d $r4.getResourceAsStream($r2)\n  if ($r5 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d IllegalArgumentException\n  $r8 \u003d dynInvoke makeConcatWithConstants($r2)\n  new IllegalArgumentException($r8)\n  throw $r7\n}",
      "B2 {\n  $r6 \u003d Scanner\n  new Scanner($r5, \"UTF-8\")\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.bm.Rule",
    "methodName": "endsWith",
    "signature": "boolean endsWith(java.lang.CharSequence,java.lang.CharSequence)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d $i1) → B1 | else → B2",
      "B3 : If(i7 \u003c 0) → B4 | else → B7",
      "B4 : If($i8 \u003d\u003d $i9) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence\n  $i0 \u003d r0.length()\n  $i1 \u003d r1.length()\n  if ($i0 \u003c\u003d $i1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i2 \u003d r1.length()\n  i6 \u003d $i2 - 1\n  $i3 \u003d r0.length()\n  i7 \u003d $i3 - 1\n}",
      "B3 {\n  if (i7 \u003c 0) goto B4 else B7\n}",
      "B4 {\n  $c4 \u003d r1.charAt(i6)\n  $c5 \u003d r0.charAt(i7)\n  $i8 \u003d (int) $c4\n  $i9 \u003d (int) $c5\n  if ($i8 \u003d\u003d $i9) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $i11 \u003d (int) -1\n  i6 \u003d i6 + $i11\n  $i13 \u003d (int) -1\n  i7 \u003d i7 + $i13\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.bm.Rule",
    "methodName": "getInstance",
    "signature": "java.util.List getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NameType\n  RuleType\n  Languages$LanguageSet\n  $z0 \u003d r0.isSingleton()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.getAny()\n  $r4 \u003d Rule.getInstance(r1, r2, $r3)\n  goto B3\n}",
      "B2 {\n  $r4 \u003d Rule.getInstance(r1, r2, \"any\")\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.bm.Rule",
    "methodName": "getInstance",
    "signature": "java.util.List getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r9 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NameType\n  RuleType\n  String\n  $r1 \u003d Map RULES\u003e\n  $r2 \u003d $r1.get(r0)\n  $r4 \u003d Map) $r2\n  $r5 \u003d $r4.get(r3)\n  $r7 \u003d Map) $r5\n  $r8 \u003d $r7.get(r6)\n  r9 \u003d List) $r8\n  if (r9 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d IllegalArgumentException\n  $r11 \u003d Object)[3]\n  $r12 \u003d r0.getName()\n  $r11[0] \u003d $r12\n  $r13 \u003d r3.getName()\n  $r11[1] \u003d $r13\n  $r11[2] \u003d r6\n  $r14 \u003d String.format(\"No rules found for %s, %s, %s.\", $r11)\n  new IllegalArgumentException($r14)\n  throw $r10\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.bm.Rule",
    "methodName": "parsePhoneme",
    "signature": "org.apache.commons.codec.language.bm.Rule$Phoneme parsePhoneme(java.lang.String)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 \u003c 0) → B1 | else → B4",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  String\n  $i0 \u003d r0.indexOf(\"\")\n  if ($i0 \u003c 0) goto B1 else B4\n}",
      "B1 {\n  $z0 \u003d r0.endsWith(\"\")\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r10 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Phoneme expression contains a \\\u0027\\\u0027 but does not end in \\\u0027\\\u0027\")\n  throw $r10\n}",
      "B3 {\n  $r3 \u003d r0.substring(0, $i0)\n  $i1 \u003d $i0 + 1\n  $i2 \u003d r0.length()\n  $i3 \u003d $i2 - 1\n  $r4 \u003d r0.substring($i1, $i3)\n  $r5 \u003d HashSet\n  $r6 \u003d $r4.split(\"+\")\n  $r7 \u003d Arrays.asList($r6)\n  new HashSet($r7)\n  $r8 \u003d Rule$Phoneme\n  $r9 \u003d Languages$LanguageSet.from($r5)\n  new Rule$Phoneme($r3, $r9)\n  return\n}",
      "B4 {\n  $r1 \u003d Rule$Phoneme\n  $r2 \u003d Languages$LanguageSet ANY_LANGUAGE\u003e\n  new Rule$Phoneme(r0, $r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.bm.Rule",
    "methodName": "parsePhonemeExpr",
    "signature": "org.apache.commons.codec.language.bm.Rule$PhonemeExpr parsePhonemeExpr(java.lang.String)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B10",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3",
      "B4 : If(i3 \u003e\u003d i2) → B5 | else → B6",
      "B6 : If($z2 !\u003d 0) → B7 | else → B8",
      "B7 : If($z3 \u003d\u003d 0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  String\n  $z0 \u003d r0.startsWith(\"(\")\n  if ($z0 \u003d\u003d 0) goto B1 else B10\n}",
      "B1 {\n  $z1 \u003d r0.endsWith(\")\")\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r9 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Phoneme starts with \\\u0027(\\\u0027 so must end with \\\u0027)\\\u0027\")\n  throw $r9\n}",
      "B3 {\n  $r2 \u003d ArrayList\n  new ArrayList()\n  $i0 \u003d r0.length()\n  $i1 \u003d $i0 - 1\n  $r3 \u003d r0.substring(1, $i1)\n  $r4 \u003d $r3.split(\"|\")\n  i2 \u003d lengthof $r4\n  i3 \u003d 0\n}",
      "B4 {\n  if (i3 \u003e\u003d i2) goto B5 else B6\n}",
      "B5 {\n  r7 \u003d $r4[i3]\n  $r8 \u003d Rule.parsePhoneme(r7)\n  $r2.add($r8)\n  i3 \u003d i3 + 1\n  goto B4\n}",
      "B6 {\n  $z2 \u003d $r3.startsWith(\"|\")\n  if ($z2 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $z3 \u003d $r3.endsWith(\"|\")\n  if ($z3 \u003d\u003d 0) goto B8 else B9\n}",
      "B8 {\n  $r5 \u003d Rule$Phoneme\n  $r6 \u003d Languages$LanguageSet ANY_LANGUAGE\u003e\n  new Rule$Phoneme(\"\", $r6)\n  $r2.add($r5)\n}",
      "B9 {\n  $r10 \u003d Rule$PhonemeList\n  new Rule$PhonemeList($r2)\n  return\n}",
      "B10 {\n  $r1 \u003d Rule.parsePhoneme(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B10",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.bm.Rule",
    "methodName": "parseRules",
    "signature": "java.util.List parseRules(java.util.Scanner,java.lang.String)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 33,
    "edges": 50,
    "cc": 19,
    "flowSummary": [
      "B1 : If($z5 \u003d\u003d 0) → B2 | else → B32",
      "B2 : If(z4 \u003d\u003d 0) → B3 | else → B5",
      "B3 : If($z3 \u003d\u003d 0) → B4 | else → B31",
      "B5 : If($z0 \u003d\u003d 0) → B6 | else → B7",
      "B7 : If($i0 \u003c 0) → B8 | else → B9",
      "B9 : If($i1 !\u003d 0) → B10 | else → B11",
      "B11 : If($z1 \u003d\u003d 0) → B12 | else → B15",
      "B12 : If($z2 \u003d\u003d 0) → B13 | else → B14",
      "B15 : If($i2 \u003d\u003d 4) → B16 | else → B17"
    ],
    "blockList": [
      "B0 {\n  Scanner\n  String\n  $r0 \u003d ArrayList\n  new ArrayList()\n  i5 \u003d 0\n  z4 \u003d 0\n}",
      "B1 {\n  $z5 \u003d r1.hasNextLine()\n  if ($z5 \u003d\u003d 0) goto B2 else B20\n}",
      "B2 {\n  i5 \u003d i5 + 1\n  $r2 \u003d r1.nextLine()\n  r29 \u003d $r2\n  if (z4 \u003d\u003d 0) goto B3 else B5\n}",
      "B3 {\n  $z3 \u003d $r2.endsWith(\"*/\")\n  if ($z3 \u003d\u003d 0) goto B4 else B19\n}",
      "B4 {\n  z4 \u003d 0\n  goto B19\n}",
      "B5 {\n  $z0 \u003d $r2.startsWith(\"/*\")\n  if ($z0 \u003d\u003d 0) goto B6 else B7\n}",
      "B6 {\n  z4 \u003d 1\n  goto B19\n}",
      "B7 {\n  $i0 \u003d $r2.indexOf(\"//\")\n  if ($i0 \u003c 0) goto B8 else B9\n}",
      "B8 {\n  r29 \u003d $r2.substring(0, $i0)\n}",
      "B9 {\n  $r3 \u003d r29.trim()\n  $i1 \u003d $r3.length()\n  if ($i1 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  goto B1\n}",
      "B11 {\n  $z1 \u003d $r3.startsWith(\"#include\")\n  if ($z1 \u003d\u003d 0) goto B12 else B15\n}",
      "B12 {\n  $r18 \u003d \"#include\"\n  $i4 \u003d $r18.length()\n  $r19 \u003d $r3.substring($i4)\n  $r20 \u003d $r19.trim()\n  $z2 \u003d $r20.contains(\" \")\n  if ($z2 \u003d\u003d 0) goto B13 else B14\n}",
      "B13 {\n  $r24 \u003d IllegalArgumentException\n  $r25 \u003d dynInvoke makeConcatWithConstants($r2, r15)\n  new IllegalArgumentException($r25)\n  throw $r24\n}",
      "B14 {\n  $r21 \u003d Rule.createScanner($r20)\n  $r22 \u003d dynInvoke makeConcatWithConstants(r15, $r20)\n  $r23 \u003d Rule.parseRules($r21, $r22)\n  $r0.addAll($r23)\n  goto B19\n}",
      "B15 {\n  $r4 \u003d $r3.split(\"\\\\s+\")\n  $i2 \u003d lengthof $r4\n  if ($i2 \u003d\u003d 4) goto B16 else B17\n}",
      "B16 {\n  $r16 \u003d IllegalArgumentException\n  $i3 \u003d lengthof $r4\n  $r17 \u003d dynInvoke makeConcatWithConstants($i3, $r2, r15)\n  new IllegalArgumentException($r17)\n  throw $r16\n}",
      "B17 {\n  $r5 \u003d $r4[0]\n  $r6 \u003d Rule.stripQuotes($r5)\n  $r7 \u003d $r4[1]\n  $r8 \u003d Rule.stripQuotes($r7)\n  $r9 \u003d $r4[2]\n  $r10 \u003d Rule.stripQuotes($r9)\n  $r11 \u003d $r4[3]\n  $r12 \u003d Rule.stripQuotes($r11)\n  $r13 \u003d Rule.parsePhonemeExpr($r12)\n  $r14 \u003d Rule$2\n  new Rule$2($r6, $r8, $r10, $r13, i5, r15)\n  $r0.add($r14)\n  goto B19\n}",
      "B18 {\n  $r26 :\u003d @caughtexception\n  $r27 \u003d IllegalStateException\n  $r28 \u003d dynInvoke makeConcatWithConstants(i5, r15)\n  new IllegalStateException($r28, $r26)\n  throw $r27\n}",
      "B19 {\n  goto B1\n}",
      "B20 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B20",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B19",
      "B4 --\u003e B19",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B19",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B1",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B19",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e B19",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e B1",
      "B20 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.bm.Rule",
    "methodName": "pattern",
    "signature": "org.apache.commons.codec.language.bm.Rule$RPattern pattern(java.lang.String)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 36,
    "edges": 47,
    "cc": 13,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B3 : If($z1 \u003d\u003d 0) → B4 | else → B5",
      "B6 : If($z7 !\u003d 0) → B7 | else → B20",
      "B7 : If($z0 \u003d\u003d 0) → B8 | else → B12",
      "B8 : If($z1 \u003d\u003d 0) → B9 | else → B12",
      "B9 : If($i3 !\u003d 0) → B10 | else → B11",
      "B12 : If($z0 !\u003d 0) → B13 | else → B14",
      "B13 : If($z1 \u003d\u003d 0) → B14 | else → B16",
      "B14 : If($i2 !\u003d 0) → B15 | else → B16",
      "B16 : If($z0 \u003d\u003d 0) → B17 | else → B18",
      "B18 : If($z1 \u003d\u003d 0) → B19 | else → B35",
      "B20 : If($z2 \u003d\u003d 0) → B21 | else → B35",
      "B21 : If($z3 \u003d\u003d 0) → B22 | else → B35",
      "B22 : If($z4 !\u003d 0) → B23 | else → B35",
      "B23 : If($z5 \u003d\u003d 0) → B24 | else → B25",
      "B25 : If($z5 !\u003d 0) → B26 | else → B27",
      "B28 : If($z0 \u003d\u003d 0) → B29 | else → B31",
      "B29 : If($z1 \u003d\u003d 0) → B30 | else → B31",
      "B31 : If($z0 \u003d\u003d 0) → B32 | else → B33",
      "B33 : If($z1 \u003d\u003d 0) → B34 | else → B35"
    ],
    "blockList": [
      "B0 {\n  String\n  $z0 \u003d r0.startsWith(\"^\")\n  $z1 \u003d r0.endsWith(\"$\")\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $b5 \u003d 1\n  goto B3\n}",
      "B2 {\n  $b5 \u003d 0\n}",
      "B3 {\n  if ($z1 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $i4 \u003d r0.length()\n  $i6 \u003d $i4 - 1\n  goto B6\n}",
      "B5 {\n  $i6 \u003d r0.length()\n}",
      "B6 {\n  $r11 \u003d r0.substring($b5, $i6)\n  $z7 \u003d $r11.contains(\"\")\n  if ($z7 !\u003d 0) goto B7 else B20\n}",
      "B7 {\n  if ($z0 \u003d\u003d 0) goto B8 else B12\n}",
      "B8 {\n  if ($z1 \u003d\u003d 0) goto B9 else B12\n}",
      "B9 {\n  $i3 \u003d $r11.length()\n  if ($i3 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  $r10 \u003d Rule$3\n  new Rule$3()\n  return\n}",
      "B11 {\n  $r9 \u003d Rule$4\n  new Rule$4($r11)\n  return\n}",
      "B12 {\n  if ($z0 !\u003d 0) goto B13 else B14\n}",
      "B13 {\n  if ($z1 \u003d\u003d 0) goto B14 else B16\n}",
      "B14 {\n  $i2 \u003d $r11.length()\n  if ($i2 !\u003d 0) goto B15 else B16\n}",
      "B15 {\n  $r8 \u003d Rule$RPattern ALL_STRINGS_RMATCHER\u003e\n  return\n}",
      "B16 {\n  if ($z0 \u003d\u003d 0) goto B17 else B18\n}",
      "B17 {\n  $r7 \u003d Rule$5\n  new Rule$5($r11)\n  return\n}",
      "B18 {\n  if ($z1 \u003d\u003d 0) goto B19 else B35\n}",
      "B19 {\n  $r6 \u003d Rule$6\n  new Rule$6($r11)\n  return\n}",
      "B20 {\n  $z2 \u003d $r11.startsWith(\"\")\n  $z3 \u003d $r11.endsWith(\"\")\n  if ($z2 \u003d\u003d 0) goto B21 else B35\n}",
      "B21 {\n  if ($z3 \u003d\u003d 0) goto B22 else B35\n}",
      "B22 {\n  $i0 \u003d $r11.length()\n  $i1 \u003d $i0 - 1\n  $r1 \u003d $r11.substring(1, $i1)\n  r12 \u003d $r1\n  $z4 \u003d $r1.contains(\"\")\n  if ($z4 !\u003d 0) goto B23 else B35\n}",
      "B23 {\n  $z5 \u003d $r1.startsWith(\"^\")\n  if ($z5 \u003d\u003d 0) goto B24 else B25\n}",
      "B24 {\n  r12 \u003d $r1.substring(1)\n}",
      "B25 {\n  r2 \u003d r12\n  if ($z5 !\u003d 0) goto B26 else B27\n}",
      "B26 {\n  $z10 \u003d 1\n  $z9 \u003d 1\n  goto B28\n}",
      "B27 {\n  $z10 \u003d 0\n  $z9 \u003d 0\n}",
      "B28 {\n  z6 \u003d $z10\n  if ($z0 \u003d\u003d 0) goto B29 else B31\n}",
      "B29 {\n  if ($z1 \u003d\u003d 0) goto B30 else B31\n}",
      "B30 {\n  $r5 \u003d Rule$7\n  new Rule$7(r2, $z9)\n  return\n}",
      "B31 {\n  if ($z0 \u003d\u003d 0) goto B32 else B33\n}",
      "B32 {\n  $r4 \u003d Rule$8\n  new Rule$8(r2, z6)\n  return\n}",
      "B33 {\n  if ($z1 \u003d\u003d 0) goto B34 else B35\n}",
      "B34 {\n  $r3 \u003d Rule$9\n  new Rule$9(r2, z6)\n  return\n}",
      "B35 {\n  $r13 \u003d Rule$10\n  new Rule$10(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B20",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B12",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B13 --\u003e B16",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e B19",
      "B18 --\u003e B35",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e B21",
      "B20 --\u003e B35",
      "B21 --\u003e B22",
      "B21 --\u003e B35",
      "B22 --\u003e B23",
      "B22 --\u003e B35",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B25",
      "B25 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B28",
      "B27 --\u003e B28",
      "B28 --\u003e B29",
      "B28 --\u003e B31",
      "B29 --\u003e B30",
      "B29 --\u003e B31",
      "B30 --\u003e [EXIT]",
      "B31 --\u003e B32",
      "B31 --\u003e B33",
      "B32 --\u003e [EXIT]",
      "B33 --\u003e B34",
      "B33 --\u003e B35",
      "B34 --\u003e [EXIT]",
      "B35 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.bm.Rule",
    "methodName": "startsWith",
    "signature": "boolean startsWith(java.lang.CharSequence,java.lang.CharSequence)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d $i1) → B1 | else → B2",
      "B3 : If(i5 \u003e\u003d $i2) → B4 | else → B7",
      "B4 : If($i6 \u003d\u003d $i7) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence\n  $i0 \u003d r0.length()\n  $i1 \u003d r1.length()\n  if ($i0 \u003c\u003d $i1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i5 \u003d 0\n}",
      "B3 {\n  $i2 \u003d r0.length()\n  if (i5 \u003e\u003d $i2) goto B4 else B7\n}",
      "B4 {\n  $c3 \u003d r1.charAt(i5)\n  $c4 \u003d r0.charAt(i5)\n  $i6 \u003d (int) $c3\n  $i7 \u003d (int) $c4\n  if ($i6 \u003d\u003d $i7) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i5 \u003d i5 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.bm.Rule",
    "methodName": "stripQuotes",
    "signature": "java.lang.String stripQuotes(java.lang.String)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  String\n  $z0 \u003d r0.startsWith(\"\\\"\")\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0 \u003d r0.substring(1)\n}",
      "B2 {\n  $z1 \u003d r0.endsWith(\"\\\"\")\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $i0 \u003d r0.length()\n  $i1 \u003d $i0 - 1\n  r0 \u003d r0.substring(0, $i1)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.bm.Rule",
    "methodName": "patternAndContextMatches",
    "signature": "boolean patternAndContextMatches(java.lang.CharSequence,int)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 9,
    "edges": 8,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 \u003e\u003d 0) → B1 | else → B2",
      "B2 : If(i2 \u003c\u003d $i3) → B3 | else → B4",
      "B4 : If($z0 !\u003d 0) → B5 | else → B6",
      "B6 : If($z1 !\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  Rule\n  CharSequence\n  i0 :\u003d @parameter1: int\n  if (i0 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d IndexOutOfBoundsException\n  new IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")\n  throw $r9\n}",
      "B2 {\n  $r1 \u003d String pattern\u003e\n  $i1 \u003d $r1.length()\n  i2 \u003d i0 + $i1\n  $i3 \u003d r2.length()\n  if (i2 \u003c\u003d $i3) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d r2.subSequence(i0, i2)\n  $r4 \u003d String pattern\u003e\n  $z0 \u003d $r3.equals($r4)\n  if ($z0 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r5 \u003d Rule$RPattern rContext\u003e\n  $i4 \u003d r2.length()\n  $r6 \u003d r2.subSequence(i2, $i4)\n  $z1 \u003d $r5.isMatch($r6)\n  if ($z1 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $r7 \u003d Rule$RPattern lContext\u003e\n  $r8 \u003d r2.subSequence(0, i0)\n  $z2 \u003d $r7.isMatch($r8)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.Caverphone",
    "methodName": "encode",
    "signature": "java.lang.Object encode(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Caverphone\n  Object\n  $z0 \u003d String\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d EncoderException\n  new EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\")\n  throw $r4\n}",
      "B2 {\n  $r2 \u003d String) r0\n  $r3 \u003d r1.caverphone($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.Caverphone1",
    "methodName": "encode",
    "signature": "java.lang.String encode(java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($i0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Caverphone1\n  String\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d r0.length()\n  if ($i0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r1 \u003d Locale ENGLISH\u003e\n  $r2 \u003d r0.toLowerCase($r1)\n  $r3 \u003d $r2.replaceAll(\"^a-z\", \"\")\n  $r4 \u003d $r3.replaceAll(\"^cough\", \"cou2f\")\n  $r5 \u003d $r4.replaceAll(\"^rough\", \"rou2f\")\n  $r6 \u003d $r5.replaceAll(\"^tough\", \"tou2f\")\n  $r7 \u003d $r6.replaceAll(\"^enough\", \"enou2f\")\n  $r8 \u003d $r7.replaceAll(\"^gn\", \"2n\")\n  $r9 \u003d $r8.replaceAll(\"mb$\", \"m2\")\n  $r10 \u003d $r9.replaceAll(\"cq\", \"2q\")\n  $r11 \u003d $r10.replaceAll(\"ci\", \"si\")\n  $r12 \u003d $r11.replaceAll(\"ce\", \"se\")\n  $r13 \u003d $r12.replaceAll(\"cy\", \"sy\")\n  $r14 \u003d $r13.replaceAll(\"tch\", \"2ch\")\n  $r15 \u003d $r14.replaceAll(\"c\", \"k\")\n  $r16 \u003d $r15.replaceAll(\"q\", \"k\")\n  $r17 \u003d $r16.replaceAll(\"x\", \"k\")\n  $r18 \u003d $r17.replaceAll(\"v\", \"f\")\n  $r19 \u003d $r18.replaceAll(\"dg\", \"2g\")\n  $r20 \u003d $r19.replaceAll(\"tio\", \"sio\")\n  $r21 \u003d $r20.replaceAll(\"tia\", \"sia\")\n  $r22 \u003d $r21.replaceAll(\"d\", \"t\")\n  $r23 \u003d $r22.replaceAll(\"ph\", \"fh\")\n  $r24 \u003d $r23.replaceAll(\"b\", \"p\")\n  $r25 \u003d $r24.replaceAll(\"sh\", \"s2\")\n  $r26 \u003d $r25.replaceAll(\"z\", \"s\")\n  $r27 \u003d $r26.replaceAll(\"^aeiou\", \"A\")\n  $r28 \u003d $r27.replaceAll(\"aeiou\", \"3\")\n  $r29 \u003d $r28.replaceAll(\"3gh3\", \"3kh3\")\n  $r30 \u003d $r29.replaceAll(\"gh\", \"22\")\n  $r31 \u003d $r30.replaceAll(\"g\", \"k\")\n  $r32 \u003d $r31.replaceAll(\"s+\", \"S\")\n  $r33 \u003d $r32.replaceAll(\"t+\", \"T\")\n  $r34 \u003d $r33.replaceAll(\"p+\", \"P\")\n  $r35 \u003d $r34.replaceAll(\"k+\", \"K\")\n  $r36 \u003d $r35.replaceAll(\"f+\", \"F\")\n  $r37 \u003d $r36.replaceAll(\"m+\", \"M\")\n  $r38 \u003d $r37.replaceAll(\"n+\", \"N\")\n  $r39 \u003d $r38.replaceAll(\"w3\", \"W3\")\n  $r40 \u003d $r39.replaceAll(\"wy\", \"Wy\")\n  $r41 \u003d $r40.replaceAll(\"wh3\", \"Wh3\")\n  $r42 \u003d $r41.replaceAll(\"why\", \"Why\")\n  $r43 \u003d $r42.replaceAll(\"w\", \"2\")\n  $r44 \u003d $r43.replaceAll(\"^h\", \"A\")\n  $r45 \u003d $r44.replaceAll(\"h\", \"2\")\n  $r46 \u003d $r45.replaceAll(\"r3\", \"R3\")\n  $r47 \u003d $r46.replaceAll(\"ry\", \"Ry\")\n  $r48 \u003d $r47.replaceAll(\"r\", \"2\")\n  $r49 \u003d $r48.replaceAll(\"l3\", \"L3\")\n  $r50 \u003d $r49.replaceAll(\"ly\", \"Ly\")\n  $r51 \u003d $r50.replaceAll(\"l\", \"2\")\n  $r52 \u003d $r51.replaceAll(\"j\", \"y\")\n  $r53 \u003d $r52.replaceAll(\"y3\", \"Y3\")\n  $r54 \u003d $r53.replaceAll(\"y\", \"2\")\n  $r55 \u003d $r54.replaceAll(\"2\", \"\")\n  $r56 \u003d $r55.replaceAll(\"3\", \"\")\n  $r57 \u003d dynInvoke makeConcatWithConstants($r56)\n  $r58 \u003d \"111111\"\n  $i1 \u003d $r58.length()\n  $r59 \u003d $r57.substring(0, $i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.Caverphone2",
    "methodName": "encode",
    "signature": "java.lang.String encode(java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($i0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Caverphone2\n  String\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d r0.length()\n  if ($i0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r1 \u003d Locale ENGLISH\u003e\n  $r2 \u003d r0.toLowerCase($r1)\n  $r3 \u003d $r2.replaceAll(\"^a-z\", \"\")\n  $r4 \u003d $r3.replaceAll(\"e$\", \"\")\n  $r5 \u003d $r4.replaceAll(\"^cough\", \"cou2f\")\n  $r6 \u003d $r5.replaceAll(\"^rough\", \"rou2f\")\n  $r7 \u003d $r6.replaceAll(\"^tough\", \"tou2f\")\n  $r8 \u003d $r7.replaceAll(\"^enough\", \"enou2f\")\n  $r9 \u003d $r8.replaceAll(\"^trough\", \"trou2f\")\n  $r10 \u003d $r9.replaceAll(\"^gn\", \"2n\")\n  $r11 \u003d $r10.replaceAll(\"mb$\", \"m2\")\n  $r12 \u003d $r11.replaceAll(\"cq\", \"2q\")\n  $r13 \u003d $r12.replaceAll(\"ci\", \"si\")\n  $r14 \u003d $r13.replaceAll(\"ce\", \"se\")\n  $r15 \u003d $r14.replaceAll(\"cy\", \"sy\")\n  $r16 \u003d $r15.replaceAll(\"tch\", \"2ch\")\n  $r17 \u003d $r16.replaceAll(\"c\", \"k\")\n  $r18 \u003d $r17.replaceAll(\"q\", \"k\")\n  $r19 \u003d $r18.replaceAll(\"x\", \"k\")\n  $r20 \u003d $r19.replaceAll(\"v\", \"f\")\n  $r21 \u003d $r20.replaceAll(\"dg\", \"2g\")\n  $r22 \u003d $r21.replaceAll(\"tio\", \"sio\")\n  $r23 \u003d $r22.replaceAll(\"tia\", \"sia\")\n  $r24 \u003d $r23.replaceAll(\"d\", \"t\")\n  $r25 \u003d $r24.replaceAll(\"ph\", \"fh\")\n  $r26 \u003d $r25.replaceAll(\"b\", \"p\")\n  $r27 \u003d $r26.replaceAll(\"sh\", \"s2\")\n  $r28 \u003d $r27.replaceAll(\"z\", \"s\")\n  $r29 \u003d $r28.replaceAll(\"^aeiou\", \"A\")\n  $r30 \u003d $r29.replaceAll(\"aeiou\", \"3\")\n  $r31 \u003d $r30.replaceAll(\"j\", \"y\")\n  $r32 \u003d $r31.replaceAll(\"^y3\", \"Y3\")\n  $r33 \u003d $r32.replaceAll(\"^y\", \"A\")\n  $r34 \u003d $r33.replaceAll(\"y\", \"3\")\n  $r35 \u003d $r34.replaceAll(\"3gh3\", \"3kh3\")\n  $r36 \u003d $r35.replaceAll(\"gh\", \"22\")\n  $r37 \u003d $r36.replaceAll(\"g\", \"k\")\n  $r38 \u003d $r37.replaceAll(\"s+\", \"S\")\n  $r39 \u003d $r38.replaceAll(\"t+\", \"T\")\n  $r40 \u003d $r39.replaceAll(\"p+\", \"P\")\n  $r41 \u003d $r40.replaceAll(\"k+\", \"K\")\n  $r42 \u003d $r41.replaceAll(\"f+\", \"F\")\n  $r43 \u003d $r42.replaceAll(\"m+\", \"M\")\n  $r44 \u003d $r43.replaceAll(\"n+\", \"N\")\n  $r45 \u003d $r44.replaceAll(\"w3\", \"W3\")\n  $r46 \u003d $r45.replaceAll(\"wh3\", \"Wh3\")\n  $r47 \u003d $r46.replaceAll(\"w$\", \"3\")\n  $r48 \u003d $r47.replaceAll(\"w\", \"2\")\n  $r49 \u003d $r48.replaceAll(\"^h\", \"A\")\n  $r50 \u003d $r49.replaceAll(\"h\", \"2\")\n  $r51 \u003d $r50.replaceAll(\"r3\", \"R3\")\n  $r52 \u003d $r51.replaceAll(\"r$\", \"3\")\n  $r53 \u003d $r52.replaceAll(\"r\", \"2\")\n  $r54 \u003d $r53.replaceAll(\"l3\", \"L3\")\n  $r55 \u003d $r54.replaceAll(\"l$\", \"3\")\n  $r56 \u003d $r55.replaceAll(\"l\", \"2\")\n  $r57 \u003d $r56.replaceAll(\"2\", \"\")\n  $r58 \u003d $r57.replaceAll(\"3$\", \"A\")\n  $r59 \u003d $r58.replaceAll(\"3\", \"\")\n  $r60 \u003d dynInvoke makeConcatWithConstants($r59)\n  $r61 \u003d \"1111111111\"\n  $i1 \u003d $r61.length()\n  $r62 \u003d $r60.substring(0, $i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.ColognePhonetic",
    "methodName": "arrayContains",
    "signature": "boolean arrayContains(char[],char)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d i0) → B2 | else → B5",
      "B2 : If($i4 !\u003d $i5) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: char[]\n  c2 :\u003d @parameter1: char\n  i0 \u003d lengthof r0\n  i3 \u003d 0\n}",
      "B1 {\n  if (i3 \u003e\u003d i0) goto B2 else B5\n}",
      "B2 {\n  c1 \u003d r0[i3]\n  $i4 \u003d (int) c1\n  $i5 \u003d (int) c2\n  if ($i4 !\u003d $i5) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.ColognePhonetic",
    "methodName": "colognePhonetic",
    "signature": "java.lang.String colognePhonetic(java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 61,
    "edges": 95,
    "cc": 36,
    "flowSummary": [
      "B0 : If(r15 !\u003d null) → B1 | else → B2",
      "B3 : If(i6 \u003c\u003d 0) → B4 | else → B60",
      "B4 : If($i3 \u003c\u003d 0) → B5 | else → B6",
      "B7 : If($z0 \u003d\u003d 0) → B8 | else → B9",
      "B9 : If($i9 \u003d\u003d 72) → B10 | else → B12",
      "B10 : If($i10 \u003c 65) → B11 | else → B12",
      "B11 : If($i11 \u003c\u003d 90) → B12 | else → B15",
      "B12 : If(i5 !\u003d 47) → B13 | else → B14",
      "B15 : If($i12 \u003d\u003d 66) → B16 | else → B18",
      "B16 : If($i13 !\u003d 80) → B17 | else → B19",
      "B17 : If(c7 \u003d\u003d 72) → B18 | else → B19",
      "B19 : If($i14 \u003d\u003d 68) → B20 | else → B21",
      "B20 : If($i15 !\u003d 84) → B21 | else → B23",
      "B21 : If($z1 !\u003d 0) → B22 | else → B23",
      "B23 : If($z2 \u003d\u003d 0) → B24 | else → B25",
      "B25 : If($z3 \u003d\u003d 0) → B26 | else → B27",
      "B27 : If($i16 !\u003d 88) → B28 | else → B30",
      "B28 : If($z8 !\u003d 0) → B29 | else → B30",
      "B30 : If($i17 \u003d\u003d 83) → B31 | else → B32",
      "B31 : If($i18 !\u003d 90) → B32 | else → B33",
      "B33 : If($i19 !\u003d 67) → B34 | else → B42",
      "B34 : If(i5 !\u003d 47) → B35 | else → B38",
      "B35 : If($z7 \u003d\u003d 0) → B36 | else → B37",
      "B38 : If($z5 !\u003d 0) → B39 | else → B40",
      "B39 : If($z6 !\u003d 0) → B40 | else → B41",
      "B42 : If($z4 \u003d\u003d 0) → B43 | else → B44",
      "B44 : If($i20 !\u003d 82) → B45 | else → B46",
      "B46 : If($i21 !\u003d 76) → B47 | else → B48",
      "B48 : If($i22 \u003d\u003d 77) → B49 | else → B50",
      "B49 : If($i23 !\u003d 78) → B50 | else → B51",
      "B52 : If(c8 \u003d\u003d 45) → B53 | else → B59",
      "B53 : If(i5 \u003d\u003d c8) → B54 | else → B56",
      "B54 : If(c8 !\u003d 48) → B55 | else → B58",
      "B55 : If(i5 \u003d\u003d 47) → B56 | else → B58",
      "B56 : If(c8 \u003c 48) → B57 | else → B58",
      "B57 : If(c8 \u003c\u003d 56) → B58 | else → B59"
    ],
    "blockList": [
      "B0 {\n  ColognePhonetic\n  String\n  if (r15 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.preprocess(r15)\n  $r16 \u003d ColognePhonetic$CologneOutputBuffer\n  $i0 \u003d $r1.length()\n  $i1 \u003d $i0 * 2\n  new ColognePhonetic$CologneOutputBuffer(r0, $i1)\n  $r17 \u003d ColognePhonetic$CologneInputBuffer\n  $r4 \u003d $r1.toCharArray()\n  new ColognePhonetic$CologneInputBuffer(r0, $r4)\n  c4 \u003d 45\n  i5 \u003d 47\n  i6 \u003d $r17.length()\n}",
      "B3 {\n  if (i6 \u003c\u003d 0) goto B4 else B60\n}",
      "B4 {\n  $c2 \u003d $r17.removeNext()\n  $i3 \u003d $r17.length()\n  i6 \u003d $i3\n  if ($i3 \u003c\u003d 0) goto B5 else B6\n}",
      "B5 {\n  c7 \u003d $r17.getNextChar()\n  goto B7\n}",
      "B6 {\n  c7 \u003d 45\n}",
      "B7 {\n  $r6 \u003d newarray (char)[7]\n  $r6[0] \u003d 65\n  $r6[1] \u003d 69\n  $r6[2] \u003d 73\n  $r6[3] \u003d 74\n  $r6[4] \u003d 79\n  $r6[5] \u003d 85\n  $r6[6] \u003d 89\n  $z0 \u003d ColognePhonetic.arrayContains($r6, $c2)\n  if ($z0 \u003d\u003d 0) goto B8 else B9\n}",
      "B8 {\n  c8 \u003d 48\n  goto B52\n}",
      "B9 {\n  $i9 \u003d (int) $c2\n  if ($i9 \u003d\u003d 72) goto B10 else B12\n}",
      "B10 {\n  $i10 \u003d (int) $c2\n  if ($i10 \u003c 65) goto B11 else B12\n}",
      "B11 {\n  $i11 \u003d (int) $c2\n  if ($i11 \u003c\u003d 90) goto B12 else B15\n}",
      "B12 {\n  if (i5 !\u003d 47) goto B13 else B14\n}",
      "B13 {\n  goto B3\n}",
      "B14 {\n  c8 \u003d 45\n  goto B52\n}",
      "B15 {\n  $i12 \u003d (int) $c2\n  if ($i12 \u003d\u003d 66) goto B16 else B18\n}",
      "B16 {\n  $i13 \u003d (int) $c2\n  if ($i13 !\u003d 80) goto B17 else B19\n}",
      "B17 {\n  if (c7 \u003d\u003d 72) goto B18 else B19\n}",
      "B18 {\n  c8 \u003d 49\n  goto B52\n}",
      "B19 {\n  $i14 \u003d (int) $c2\n  if ($i14 \u003d\u003d 68) goto B20 else B21\n}",
      "B20 {\n  $i15 \u003d (int) $c2\n  if ($i15 !\u003d 84) goto B21 else B23\n}",
      "B21 {\n  $r7 \u003d newarray (char)[3]\n  $r7[0] \u003d 83\n  $r7[1] \u003d 67\n  $r7[2] \u003d 90\n  $z1 \u003d ColognePhonetic.arrayContains($r7, c7)\n  if ($z1 !\u003d 0) goto B22 else B23\n}",
      "B22 {\n  c8 \u003d 50\n  goto B52\n}",
      "B23 {\n  $r8 \u003d newarray (char)[4]\n  $r8[0] \u003d 87\n  $r8[1] \u003d 70\n  $r8[2] \u003d 80\n  $r8[3] \u003d 86\n  $z2 \u003d ColognePhonetic.arrayContains($r8, $c2)\n  if ($z2 \u003d\u003d 0) goto B24 else B25\n}",
      "B24 {\n  c8 \u003d 51\n  goto B52\n}",
      "B25 {\n  $r9 \u003d newarray (char)[3]\n  $r9[0] \u003d 71\n  $r9[1] \u003d 75\n  $r9[2] \u003d 81\n  $z3 \u003d ColognePhonetic.arrayContains($r9, $c2)\n  if ($z3 \u003d\u003d 0) goto B26 else B27\n}",
      "B26 {\n  c8 \u003d 52\n  goto B52\n}",
      "B27 {\n  $i16 \u003d (int) $c2\n  if ($i16 !\u003d 88) goto B28 else B30\n}",
      "B28 {\n  $r14 \u003d newarray (char)[3]\n  $r14[0] \u003d 67\n  $r14[1] \u003d 75\n  $r14[2] \u003d 81\n  $z8 \u003d ColognePhonetic.arrayContains($r14, c4)\n  if ($z8 !\u003d 0) goto B29 else B30\n}",
      "B29 {\n  c8 \u003d 52\n  $r17.addLeft(83)\n  i6 \u003d $i3 + 1\n  goto B52\n}",
      "B30 {\n  $i17 \u003d (int) $c2\n  if ($i17 \u003d\u003d 83) goto B31 else B32\n}",
      "B31 {\n  $i18 \u003d (int) $c2\n  if ($i18 !\u003d 90) goto B32 else B33\n}",
      "B32 {\n  c8 \u003d 56\n  goto B52\n}",
      "B33 {\n  $i19 \u003d (int) $c2\n  if ($i19 !\u003d 67) goto B34 else B42\n}",
      "B34 {\n  if (i5 !\u003d 47) goto B35 else B38\n}",
      "B35 {\n  $r13 \u003d newarray (char)[9]\n  $r13[0] \u003d 65\n  $r13[1] \u003d 72\n  $r13[2] \u003d 75\n  $r13[3] \u003d 76\n  $r13[4] \u003d 79\n  $r13[5] \u003d 81\n  $r13[6] \u003d 82\n  $r13[7] \u003d 85\n  $r13[8] \u003d 88\n  $z7 \u003d ColognePhonetic.arrayContains($r13, c7)\n  if ($z7 \u003d\u003d 0) goto B36 else B37\n}",
      "B36 {\n  c8 \u003d 52\n  goto B52\n}",
      "B37 {\n  c8 \u003d 56\n  goto B52\n}",
      "B38 {\n  $r11 \u003d newarray (char)[2]\n  $r11[0] \u003d 83\n  $r11[1] \u003d 90\n  $z5 \u003d ColognePhonetic.arrayContains($r11, c4)\n  if ($z5 !\u003d 0) goto B39 else B40\n}",
      "B39 {\n  $r12 \u003d newarray (char)[7]\n  $r12[0] \u003d 65\n  $r12[1] \u003d 72\n  $r12[2] \u003d 79\n  $r12[3] \u003d 85\n  $r12[4] \u003d 75\n  $r12[5] \u003d 81\n  $r12[6] \u003d 88\n  $z6 \u003d ColognePhonetic.arrayContains($r12, c7)\n  if ($z6 !\u003d 0) goto B40 else B41\n}",
      "B40 {\n  c8 \u003d 56\n  goto B52\n}",
      "B41 {\n  c8 \u003d 52\n  goto B52\n}",
      "B42 {\n  $r10 \u003d newarray (char)[3]\n  $r10[0] \u003d 84\n  $r10[1] \u003d 68\n  $r10[2] \u003d 88\n  $z4 \u003d ColognePhonetic.arrayContains($r10, $c2)\n  if ($z4 \u003d\u003d 0) goto B43 else B44\n}",
      "B43 {\n  c8 \u003d 56\n  goto B52\n}",
      "B44 {\n  $i20 \u003d (int) $c2\n  if ($i20 !\u003d 82) goto B45 else B46\n}",
      "B45 {\n  c8 \u003d 55\n  goto B52\n}",
      "B46 {\n  $i21 \u003d (int) $c2\n  if ($i21 !\u003d 76) goto B47 else B48\n}",
      "B47 {\n  c8 \u003d 53\n  goto B52\n}",
      "B48 {\n  $i22 \u003d (int) $c2\n  if ($i22 \u003d\u003d 77) goto B49 else B50\n}",
      "B49 {\n  $i23 \u003d (int) $c2\n  if ($i23 !\u003d 78) goto B50 else B51\n}",
      "B50 {\n  c8 \u003d 54\n  goto B52\n}",
      "B51 {\n  c8 \u003d $c2\n}",
      "B52 {\n  if (c8 \u003d\u003d 45) goto B53 else B59\n}",
      "B53 {\n  if (i5 \u003d\u003d c8) goto B54 else B56\n}",
      "B54 {\n  if (c8 !\u003d 48) goto B55 else B58\n}",
      "B55 {\n  if (i5 \u003d\u003d 47) goto B56 else B58\n}",
      "B56 {\n  if (c8 \u003c 48) goto B57 else B58\n}",
      "B57 {\n  if (c8 \u003c\u003d 56) goto B58 else B59\n}",
      "B58 {\n  $r16.addRight(c8)\n}",
      "B59 {\n  c4 \u003d $c2\n  i5 \u003d c8\n  goto B3\n}",
      "B60 {\n  $r5 \u003d $r16.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B60",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B52",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B3",
      "B14 --\u003e B52",
      "B15 --\u003e B16",
      "B15 --\u003e B18",
      "B16 --\u003e B17",
      "B16 --\u003e B19",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B52",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B21",
      "B20 --\u003e B23",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B52",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B52",
      "B25 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B52",
      "B27 --\u003e B28",
      "B27 --\u003e B30",
      "B28 --\u003e B29",
      "B28 --\u003e B30",
      "B29 --\u003e B52",
      "B30 --\u003e B31",
      "B30 --\u003e B32",
      "B31 --\u003e B32",
      "B31 --\u003e B33",
      "B32 --\u003e B52",
      "B33 --\u003e B34",
      "B33 --\u003e B42",
      "B34 --\u003e B35",
      "B34 --\u003e B38",
      "B35 --\u003e B36",
      "B35 --\u003e B37",
      "B36 --\u003e B52",
      "B37 --\u003e B52",
      "B38 --\u003e B39",
      "B38 --\u003e B40",
      "B39 --\u003e B40",
      "B39 --\u003e B41",
      "B40 --\u003e B52",
      "B41 --\u003e B52",
      "B42 --\u003e B43",
      "B42 --\u003e B44",
      "B43 --\u003e B52",
      "B44 --\u003e B45",
      "B44 --\u003e B46",
      "B45 --\u003e B52",
      "B46 --\u003e B47",
      "B46 --\u003e B48",
      "B47 --\u003e B52",
      "B48 --\u003e B49",
      "B48 --\u003e B50",
      "B49 --\u003e B50",
      "B49 --\u003e B51",
      "B50 --\u003e B52",
      "B51 --\u003e B52",
      "B52 --\u003e B53",
      "B52 --\u003e B59",
      "B53 --\u003e B54",
      "B53 --\u003e B56",
      "B54 --\u003e B55",
      "B54 --\u003e B58",
      "B55 --\u003e B56",
      "B55 --\u003e B58",
      "B56 --\u003e B57",
      "B56 --\u003e B58",
      "B57 --\u003e B58",
      "B57 --\u003e B59",
      "B58 --\u003e B59",
      "B59 --\u003e B3",
      "B60 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.ColognePhonetic",
    "methodName": "encode",
    "signature": "java.lang.Object encode(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ColognePhonetic\n  Object\n  $z0 \u003d String\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d EncoderException\n  $r5 \u003d class \"Ljava/lang/String;\"\n  $r6 \u003d $r5.getName()\n  $r7 \u003d r0.getClass()\n  $r8 \u003d $r7.getName()\n  $r9 \u003d dynInvoke makeConcatWithConstants($r6, $r8)\n  new EncoderException($r9)\n  throw $r4\n}",
      "B2 {\n  $r2 \u003d String) r0\n  $r3 \u003d r1.encode($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.ColognePhonetic",
    "methodName": "preprocess",
    "signature": "java.lang.String preprocess(java.lang.String)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 10,
    "edges": 13,
    "cc": 5,
    "flowSummary": [
      "B1 : If(i6 \u003e\u003d $i0) → B2 | else → B9",
      "B2 : If($i8 \u003c\u003d 90) → B3 | else → B8",
      "B4 : If(i7 \u003e\u003d i2) → B5 | else → B8",
      "B5 : If($i9 !\u003d $i10) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  ColognePhonetic\n  String\n  $r0 \u003d Locale GERMAN\u003e\n  $r1 \u003d r7.toUpperCase($r0)\n  $r2 \u003d $r1.toCharArray()\n  i6 \u003d 0\n}",
      "B1 {\n  $i0 \u003d lengthof $r2\n  if (i6 \u003e\u003d $i0) goto B2 else B9\n}",
      "B2 {\n  $c1 \u003d $r2[i6]\n  $i8 \u003d (int) $c1\n  if ($i8 \u003c\u003d 90) goto B3 else B8\n}",
      "B3 {\n  r4 \u003d ColognePhonetic: char[][] PREPROCESS_MAP\u003e\n  i2 \u003d lengthof r4\n  i7 \u003d 0\n}",
      "B4 {\n  if (i7 \u003e\u003d i2) goto B5 else B8\n}",
      "B5 {\n  r5 \u003d r4[i7]\n  $c4 \u003d $r2[i6]\n  $c3 \u003d r5[0]\n  $i9 \u003d (int) $c4\n  $i10 \u003d (int) $c3\n  if ($i9 !\u003d $i10) goto B6 else B7\n}",
      "B6 {\n  $c5 \u003d r5[1]\n  $r2[i6] \u003d $c5\n  goto B8\n}",
      "B7 {\n  i7 \u003d i7 + 1\n  goto B4\n}",
      "B8 {\n  i6 \u003d i6 + 1\n  goto B1\n}",
      "B9 {\n  $r8 \u003d String\n  new String($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B9",
      "B2 --\u003e B3",
      "B2 --\u003e B8",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B4",
      "B8 --\u003e B1",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "doubleMetaphone",
    "signature": "java.lang.String doubleMetaphone(java.lang.String,boolean)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 58,
    "edges": 91,
    "cc": 35,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4",
      "B6 : If($z4 !\u003d 0) → B7 | else → B54",
      "B7 : If(i17 \u003e $i2) → B8 | else → B54",
      "B8 : If(switch-on $i25) → B9 | else → B10",
      "B10 : If($i26 !\u003d 66) → B11 | else → B12",
      "B17 : If($i27 !\u003d 70) → B18 | else → B19",
      "B24 : If($i28 !\u003d 75) → B25 | else → B26",
      "B29 : If($z3 \u003d\u003d 0) → B30 | else → B31",
      "B33 : If($i29 !\u003d 78) → B34 | else → B35",
      "B39 : If($i30 !\u003d 81) → B40 | else → B41",
      "B46 : If($i31 !\u003d 86) → B47 | else → B48",
      "B54 : If(z2 \u003d\u003d 0) → B55 | else → B56"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  z2 :\u003d @parameter1: boolean\n  $r1 \u003d r0.cleanInput(r3)\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r0.isSlavoGermanic($r1)\n  $z1 \u003d r0.isSilentStart($r1)\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $b16 \u003d 1\n  goto B5\n}",
      "B4 {\n  $b16 \u003d 0\n}",
      "B5 {\n  i17 \u003d $b16\n  $r5 \u003d DoubleMetaphone$DoubleMetaphoneResult\n  $i0 \u003d r0.getMaxCodeLen()\n  new DoubleMetaphone$DoubleMetaphoneResult(r0, $i0)\n}",
      "B6 {\n  $z4 \u003d $r5.isComplete()\n  if ($z4 !\u003d 0) goto B7 else B54\n}",
      "B7 {\n  $i1 \u003d $r1.length()\n  $i2 \u003d $i1 - 1\n  if (i17 \u003e $i2) goto B8 else B54\n}",
      "B8 {\n  $c3 \u003d $r1.charAt(i17)\n  $i25 \u003d (int) $c3\n  DoubleMetaphone$DoubleMetaphoneResult: void append(char)\u003e(78);     default: goto i17 \u003d i17 + 1; }\n}",
      "B9 {\n  i17 \u003d r0.handleAEIOUY($r5, i17)\n  goto B6\n}",
      "B10 {\n  $r5.append(80)\n  $i14 \u003d i17 + 1\n  $c15 \u003d r0.charAt($r1, $i14)\n  $i26 \u003d (int) $c15\n  if ($i26 !\u003d 66) goto B11 else B12\n}",
      "B11 {\n  $i18 \u003d i17 + 2\n  goto B13\n}",
      "B12 {\n  $i18 \u003d i17 + 1\n}",
      "B13 {\n  i17 \u003d $i18\n  goto B6\n}",
      "B14 {\n  $r5.append(83)\n  i17 \u003d i17 + 1\n  goto B6\n}",
      "B15 {\n  i17 \u003d r0.handleC($r1, $r5, i17)\n  goto B6\n}",
      "B16 {\n  i17 \u003d r0.handleD($r1, $r5, i17)\n  goto B6\n}",
      "B17 {\n  $r5.append(70)\n  $i12 \u003d i17 + 1\n  $c13 \u003d r0.charAt($r1, $i12)\n  $i27 \u003d (int) $c13\n  if ($i27 !\u003d 70) goto B18 else B19\n}",
      "B18 {\n  $i19 \u003d i17 + 2\n  goto B20\n}",
      "B19 {\n  $i19 \u003d i17 + 1\n}",
      "B20 {\n  i17 \u003d $i19\n  goto B6\n}",
      "B21 {\n  i17 \u003d r0.handleG($r1, $r5, i17, $z0)\n  goto B6\n}",
      "B22 {\n  i17 \u003d r0.handleH($r1, $r5, i17)\n  goto B6\n}",
      "B23 {\n  i17 \u003d r0.handleJ($r1, $r5, i17, $z0)\n  goto B6\n}",
      "B24 {\n  $r5.append(75)\n  $i10 \u003d i17 + 1\n  $c11 \u003d r0.charAt($r1, $i10)\n  $i28 \u003d (int) $c11\n  if ($i28 !\u003d 75) goto B25 else B26\n}",
      "B25 {\n  $i20 \u003d i17 + 2\n  goto B27\n}",
      "B26 {\n  $i20 \u003d i17 + 1\n}",
      "B27 {\n  i17 \u003d $i20\n  goto B6\n}",
      "B28 {\n  i17 \u003d r0.handleL($r1, $r5, i17)\n  goto B6\n}",
      "B29 {\n  $r5.append(77)\n  $z3 \u003d r0.conditionM0($r1, i17)\n  if ($z3 \u003d\u003d 0) goto B30 else B31\n}",
      "B30 {\n  $i21 \u003d i17 + 2\n  goto B32\n}",
      "B31 {\n  $i21 \u003d i17 + 1\n}",
      "B32 {\n  i17 \u003d $i21\n  goto B6\n}",
      "B33 {\n  $r5.append(78)\n  $i8 \u003d i17 + 1\n  $c9 \u003d r0.charAt($r1, $i8)\n  $i29 \u003d (int) $c9\n  if ($i29 !\u003d 78) goto B34 else B35\n}",
      "B34 {\n  $i22 \u003d i17 + 2\n  goto B36\n}",
      "B35 {\n  $i22 \u003d i17 + 1\n}",
      "B36 {\n  i17 \u003d $i22\n  goto B6\n}",
      "B37 {\n  $r5.append(78)\n  i17 \u003d i17 + 1\n  goto B6\n}",
      "B38 {\n  i17 \u003d r0.handleP($r1, $r5, i17)\n  goto B6\n}",
      "B39 {\n  $r5.append(75)\n  $i6 \u003d i17 + 1\n  $c7 \u003d r0.charAt($r1, $i6)\n  $i30 \u003d (int) $c7\n  if ($i30 !\u003d 81) goto B40 else B41\n}",
      "B40 {\n  $i23 \u003d i17 + 2\n  goto B42\n}",
      "B41 {\n  $i23 \u003d i17 + 1\n}",
      "B42 {\n  i17 \u003d $i23\n  goto B6\n}",
      "B43 {\n  i17 \u003d r0.handleR($r1, $r5, i17, $z0)\n  goto B6\n}",
      "B44 {\n  i17 \u003d r0.handleS($r1, $r5, i17, $z0)\n  goto B6\n}",
      "B45 {\n  i17 \u003d r0.handleT($r1, $r5, i17)\n  goto B6\n}",
      "B46 {\n  $r5.append(70)\n  $i4 \u003d i17 + 1\n  $c5 \u003d r0.charAt($r1, $i4)\n  $i31 \u003d (int) $c5\n  if ($i31 !\u003d 86) goto B47 else B48\n}",
      "B47 {\n  $i24 \u003d i17 + 2\n  goto B49\n}",
      "B48 {\n  $i24 \u003d i17 + 1\n}",
      "B49 {\n  i17 \u003d $i24\n  goto B6\n}",
      "B50 {\n  i17 \u003d r0.handleW($r1, $r5, i17)\n  goto B6\n}",
      "B51 {\n  i17 \u003d r0.handleX($r1, $r5, i17)\n  goto B6\n}",
      "B52 {\n  i17 \u003d r0.handleZ($r1, $r5, i17, $z0)\n  goto B6\n}",
      "B53 {\n  i17 \u003d i17 + 1\n  goto B6\n}",
      "B54 {\n  if (z2 \u003d\u003d 0) goto B55 else B56\n}",
      "B55 {\n  $r4 \u003d $r5.getAlternate()\n  goto B57\n}",
      "B56 {\n  $r4 \u003d $r5.getPrimary()\n}",
      "B57 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B54",
      "B7 --\u003e B8",
      "B7 --\u003e B54",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B8 --\u003e B15",
      "B8 --\u003e B16",
      "B8 --\u003e B17",
      "B8 --\u003e B21",
      "B8 --\u003e B22",
      "B8 --\u003e B23",
      "B8 --\u003e B24",
      "B8 --\u003e B28",
      "B8 --\u003e B29",
      "B8 --\u003e B33",
      "B8 --\u003e B38",
      "B8 --\u003e B39",
      "B8 --\u003e B43",
      "B8 --\u003e B44",
      "B8 --\u003e B45",
      "B8 --\u003e B46",
      "B8 --\u003e B50",
      "B8 --\u003e B51",
      "B8 --\u003e B52",
      "B8 --\u003e B14",
      "B8 --\u003e B37",
      "B8 --\u003e B53",
      "B9 --\u003e B6",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B6",
      "B14 --\u003e B6",
      "B15 --\u003e B6",
      "B16 --\u003e B6",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B20",
      "B20 --\u003e B6",
      "B21 --\u003e B6",
      "B22 --\u003e B6",
      "B23 --\u003e B6",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B27",
      "B27 --\u003e B6",
      "B28 --\u003e B6",
      "B29 --\u003e B30",
      "B29 --\u003e B31",
      "B30 --\u003e B32",
      "B31 --\u003e B32",
      "B32 --\u003e B6",
      "B33 --\u003e B34",
      "B33 --\u003e B35",
      "B34 --\u003e B36",
      "B35 --\u003e B36",
      "B36 --\u003e B6",
      "B37 --\u003e B6",
      "B38 --\u003e B6",
      "B39 --\u003e B40",
      "B39 --\u003e B41",
      "B40 --\u003e B42",
      "B41 --\u003e B42",
      "B42 --\u003e B6",
      "B43 --\u003e B6",
      "B44 --\u003e B6",
      "B45 --\u003e B6",
      "B46 --\u003e B47",
      "B46 --\u003e B48",
      "B47 --\u003e B49",
      "B48 --\u003e B49",
      "B49 --\u003e B6",
      "B50 --\u003e B6",
      "B51 --\u003e B6",
      "B52 --\u003e B6",
      "B53 --\u003e B6",
      "B54 --\u003e B55",
      "B54 --\u003e B56",
      "B55 --\u003e B57",
      "B56 --\u003e B57",
      "B57 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "encode",
    "signature": "java.lang.Object encode(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  Object\n  $z0 \u003d String\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d EncoderException\n  new EncoderException(\"DoubleMetaphone encode parameter is not of type String\")\n  throw $r4\n}",
      "B2 {\n  $r2 \u003d String) r0\n  $r3 \u003d r1.doubleMetaphone($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "handleAEIOUY",
    "signature": "int handleAEIOUY(org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  DoubleMetaphone$DoubleMetaphoneResult\n  i0 :\u003d @parameter1: int\n  if (i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.append(65)\n}",
      "B2 {\n  $i1 \u003d i0 + 1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "handleC",
    "signature": "int handleC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 30,
    "edges": 44,
    "cc": 16,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If(i7 !\u003d 0) → B3 | else → B5",
      "B3 : If($z12 \u003d\u003d 0) → B4 | else → B5",
      "B5 : If($z1 \u003d\u003d 0) → B6 | else → B7",
      "B7 : If($z2 \u003d\u003d 0) → B8 | else → B10",
      "B8 : If($z11 !\u003d 0) → B9 | else → B10",
      "B10 : If($z3 \u003d\u003d 0) → B11 | else → B12",
      "B12 : If($z4 \u003d\u003d 0) → B13 | else → B16",
      "B13 : If(i7 !\u003d 1) → B14 | else → B15",
      "B14 : If($i9 \u003d\u003d 77) → B15 | else → B16",
      "B16 : If($z5 \u003d\u003d 0) → B17 | else → B18",
      "B18 : If($z6 \u003d\u003d 0) → B19 | else → B23",
      "B19 : If($z10 \u003d\u003d 0) → B20 | else → B21",
      "B23 : If($z7 \u003d\u003d 0) → B24 | else → B25",
      "B25 : If($z8 \u003d\u003d 0) → B26 | else → B28",
      "B26 : If($z9 !\u003d 0) → B27 | else → B28"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  DoubleMetaphone$DoubleMetaphoneResult\n  i7 :\u003d @parameter2: int\n  $z0 \u003d r0.conditionC0(r1, i7)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r2.append(75)\n  i8 \u003d i7 + 2\n  goto B29\n}",
      "B2 {\n  if (i7 !\u003d 0) goto B3 else B5\n}",
      "B3 {\n  $z12 \u003d DoubleMetaphone.contains(r1, i7, 6, \"CAESAR\")\n  if ($z12 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  r2.append(83)\n  i8 \u003d i7 + 2\n  goto B29\n}",
      "B5 {\n  $z1 \u003d DoubleMetaphone.contains(r1, i7, 2, \"CH\")\n  if ($z1 \u003d\u003d 0) goto B6 else B7\n}",
      "B6 {\n  i8 \u003d r0.handleCH(r1, r2, i7)\n  goto B29\n}",
      "B7 {\n  $z2 \u003d DoubleMetaphone.contains(r1, i7, 2, \"CZ\")\n  if ($z2 \u003d\u003d 0) goto B8 else B10\n}",
      "B8 {\n  $i6 \u003d i7 - 2\n  $z11 \u003d DoubleMetaphone.contains(r1, $i6, 4, \"WICZ\")\n  if ($z11 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  r2.append(83, 88)\n  i8 \u003d i7 + 2\n  goto B29\n}",
      "B10 {\n  $i0 \u003d i7 + 1\n  $z3 \u003d DoubleMetaphone.contains(r1, $i0, 3, \"CIA\")\n  if ($z3 \u003d\u003d 0) goto B11 else B12\n}",
      "B11 {\n  r2.append(88)\n  i8 \u003d i7 + 3\n  goto B29\n}",
      "B12 {\n  $z4 \u003d DoubleMetaphone.contains(r1, i7, 2, \"CC\")\n  if ($z4 \u003d\u003d 0) goto B13 else B16\n}",
      "B13 {\n  if (i7 !\u003d 1) goto B14 else B15\n}",
      "B14 {\n  $c5 \u003d r0.charAt(r1, 0)\n  $i9 \u003d (int) $c5\n  if ($i9 \u003d\u003d 77) goto B15 else B16\n}",
      "B15 {\n  $i4 \u003d r0.handleCC(r1, r2, i7)\n  return\n}",
      "B16 {\n  $z5 \u003d DoubleMetaphone.contains(r1, i7, 2, \"CK\", \"CG\", \"CQ\")\n  if ($z5 \u003d\u003d 0) goto B17 else B18\n}",
      "B17 {\n  r2.append(75)\n  i8 \u003d i7 + 2\n  goto B29\n}",
      "B18 {\n  $z6 \u003d DoubleMetaphone.contains(r1, i7, 2, \"CI\", \"CE\", \"CY\")\n  if ($z6 \u003d\u003d 0) goto B19 else B23\n}",
      "B19 {\n  $z10 \u003d DoubleMetaphone.contains(r1, i7, 3, \"CIO\", \"CIE\", \"CIA\")\n  if ($z10 \u003d\u003d 0) goto B20 else B21\n}",
      "B20 {\n  r2.append(83, 88)\n  goto B22\n}",
      "B21 {\n  r2.append(83)\n}",
      "B22 {\n  i8 \u003d i7 + 2\n  goto B29\n}",
      "B23 {\n  r2.append(75)\n  $i1 \u003d i7 + 1\n  $z7 \u003d DoubleMetaphone.contains(r1, $i1, 2, \" C\", \" Q\", \" G\")\n  if ($z7 \u003d\u003d 0) goto B24 else B25\n}",
      "B24 {\n  i8 \u003d i7 + 3\n  goto B29\n}",
      "B25 {\n  $i2 \u003d i7 + 1\n  $z8 \u003d DoubleMetaphone.contains(r1, $i2, 1, \"C\", \"K\", \"Q\")\n  if ($z8 \u003d\u003d 0) goto B26 else B28\n}",
      "B26 {\n  $i3 \u003d i7 + 1\n  $z9 \u003d DoubleMetaphone.contains(r1, $i3, 2, \"CE\", \"CI\")\n  if ($z9 !\u003d 0) goto B27 else B28\n}",
      "B27 {\n  i8 \u003d i7 + 2\n  goto B29\n}",
      "B28 {\n  i8 \u003d i7 + 1\n}",
      "B29 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B29",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B29",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B29",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B29",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B29",
      "B12 --\u003e B13",
      "B12 --\u003e B16",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B29",
      "B18 --\u003e B19",
      "B18 --\u003e B23",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B22 --\u003e B29",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B29",
      "B25 --\u003e B26",
      "B25 --\u003e B28",
      "B26 --\u003e B27",
      "B26 --\u003e B28",
      "B27 --\u003e B29",
      "B28 --\u003e B29",
      "B29 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "handleCC",
    "signature": "int handleCC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 10,
    "edges": 14,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B8",
      "B1 : If($z1 !\u003d 0) → B2 | else → B8",
      "B2 : If(i5 !\u003d 1) → B3 | else → B4",
      "B3 : If($i7 \u003d\u003d 65) → B4 | else → B5",
      "B4 : If($z2 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  DoubleMetaphone$DoubleMetaphoneResult\n  i5 :\u003d @parameter2: int\n  $i0 \u003d i5 + 2\n  $z0 \u003d DoubleMetaphone.contains(r0, $i0, 1, \"I\", \"E\", \"H\")\n  if ($z0 \u003d\u003d 0) goto B1 else B8\n}",
      "B1 {\n  $i1 \u003d i5 + 2\n  $z1 \u003d DoubleMetaphone.contains(r0, $i1, 2, \"HU\")\n  if ($z1 !\u003d 0) goto B2 else B8\n}",
      "B2 {\n  if (i5 !\u003d 1) goto B3 else B4\n}",
      "B3 {\n  $i3 \u003d i5 - 1\n  $c4 \u003d r2.charAt(r0, $i3)\n  $i7 \u003d (int) $c4\n  if ($i7 \u003d\u003d 65) goto B4 else B5\n}",
      "B4 {\n  $i2 \u003d i5 - 1\n  $z2 \u003d DoubleMetaphone.contains(r0, $i2, 5, \"UCCEE\", \"UCCES\")\n  if ($z2 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  r1.append(\"KS\")\n  goto B7\n}",
      "B6 {\n  r1.append(88)\n}",
      "B7 {\n  i6 \u003d i5 + 3\n  goto B9\n}",
      "B8 {\n  r1.append(75)\n  i6 \u003d i5 + 2\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B8",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "handleCH",
    "signature": "int handleCH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 13,
    "edges": 15,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i0 \u003c\u003d 0) → B1 | else → B3",
      "B1 : If($z3 \u003d\u003d 0) → B2 | else → B3",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5",
      "B5 : If($z1 \u003d\u003d 0) → B6 | else → B7",
      "B7 : If(i0 \u003c\u003d 0) → B8 | else → B11",
      "B8 : If($z2 \u003d\u003d 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  DoubleMetaphone$DoubleMetaphoneResult\n  i0 :\u003d @parameter2: int\n  if (i0 \u003c\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $z3 \u003d DoubleMetaphone.contains(r1, i0, 4, \"CHAE\")\n  if ($z3 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  r2.append(75, 88)\n  $i3 \u003d i0 + 2\n  return\n}",
      "B3 {\n  $z0 \u003d r0.conditionCH0(r1, i0)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  r2.append(75)\n  $i2 \u003d i0 + 2\n  return\n}",
      "B5 {\n  $z1 \u003d r0.conditionCH1(r1, i0)\n  if ($z1 \u003d\u003d 0) goto B6 else B7\n}",
      "B6 {\n  r2.append(75)\n  $i1 \u003d i0 + 2\n  return\n}",
      "B7 {\n  if (i0 \u003c\u003d 0) goto B8 else B11\n}",
      "B8 {\n  $z2 \u003d DoubleMetaphone.contains(r1, 0, 2, \"MC\")\n  if ($z2 \u003d\u003d 0) goto B9 else B10\n}",
      "B9 {\n  r2.append(75)\n  goto B12\n}",
      "B10 {\n  r2.append(88, 75)\n  goto B12\n}",
      "B11 {\n  r2.append(88)\n}",
      "B12 {\n  $i4 \u003d i0 + 2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "handleD",
    "signature": "int handleD(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B4",
      "B1 : If($z2 \u003d\u003d 0) → B2 | else → B3",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  DoubleMetaphone$DoubleMetaphoneResult\n  i1 :\u003d @parameter2: int\n  $z0 \u003d DoubleMetaphone.contains(r0, i1, 2, \"DG\")\n  if ($z0 \u003d\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $i0 \u003d i1 + 2\n  $z2 \u003d DoubleMetaphone.contains(r0, $i0, 1, \"I\", \"E\", \"Y\")\n  if ($z2 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  r1.append(74)\n  i2 \u003d i1 + 3\n  goto B7\n}",
      "B3 {\n  r1.append(\"TK\")\n  i2 \u003d i1 + 2\n  goto B7\n}",
      "B4 {\n  $z1 \u003d DoubleMetaphone.contains(r0, i1, 2, \"DT\", \"DD\")\n  if ($z1 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  r1.append(84)\n  i2 \u003d i1 + 2\n  goto B7\n}",
      "B6 {\n  r1.append(84)\n  i2 \u003d i1 + 1\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "handleG",
    "signature": "int handleG(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 40,
    "edges": 64,
    "cc": 26,
    "flowSummary": [
      "B0 : If($i25 !\u003d 72) → B1 | else → B2",
      "B2 : If($i26 !\u003d 78) → B3 | else → B13",
      "B3 : If(i21 !\u003d 1) → B4 | else → B7",
      "B4 : If($z12 \u003d\u003d 0) → B5 | else → B7",
      "B5 : If(z11 !\u003d 0) → B6 | else → B7",
      "B7 : If($z13 !\u003d 0) → B8 | else → B11",
      "B8 : If($i27 \u003d\u003d 89) → B9 | else → B11",
      "B9 : If(z11 !\u003d 0) → B10 | else → B11",
      "B13 : If($z0 \u003d\u003d 0) → B14 | else → B16",
      "B14 : If(z11 !\u003d 0) → B15 | else → B16",
      "B16 : If(i21 !\u003d 0) → B17 | else → B20",
      "B17 : If($i28 \u003d\u003d 89) → B18 | else → B19",
      "B18 : If($z10 \u003d\u003d 0) → B19 | else → B20",
      "B20 : If($z1 !\u003d 0) → B21 | else → B22",
      "B21 : If($i29 !\u003d 89) → B22 | else → B26",
      "B22 : If($z2 !\u003d 0) → B23 | else → B26",
      "B23 : If($z8 !\u003d 0) → B24 | else → B26",
      "B24 : If($z9 !\u003d 0) → B25 | else → B26",
      "B26 : If($z14 !\u003d 0) → B27 | else → B28",
      "B27 : If($z7 \u003d\u003d 0) → B28 | else → B36",
      "B28 : If($z3 !\u003d 0) → B29 | else → B31",
      "B29 : If($z4 !\u003d 0) → B30 | else → B31",
      "B30 : If($z5 \u003d\u003d 0) → B31 | else → B32",
      "B32 : If($z6 \u003d\u003d 0) → B33 | else → B34",
      "B36 : If($i30 !\u003d 71) → B37 | else → B38"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  DoubleMetaphone$DoubleMetaphoneResult\n  i21 :\u003d @parameter2: int\n  z11 :\u003d @parameter3: boolean\n  $i0 \u003d i21 + 1\n  $c1 \u003d r0.charAt(r1, $i0)\n  $i25 \u003d (int) $c1\n  if ($i25 !\u003d 72) goto B1 else B2\n}",
      "B1 {\n  i22 \u003d r0.handleGH(r1, r2, i21)\n  goto B39\n}",
      "B2 {\n  $i2 \u003d i21 + 1\n  $c3 \u003d r0.charAt(r1, $i2)\n  $i26 \u003d (int) $c3\n  if ($i26 !\u003d 78) goto B3 else B13\n}",
      "B3 {\n  if (i21 !\u003d 1) goto B4 else B7\n}",
      "B4 {\n  $c20 \u003d r0.charAt(r1, 0)\n  $z12 \u003d r0.isVowel($c20)\n  if ($z12 \u003d\u003d 0) goto B5 else B7\n}",
      "B5 {\n  if (z11 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  r2.append(\"KN\", \"N\")\n  goto B12\n}",
      "B7 {\n  $i23 \u003d i21 + 2\n  $z13 \u003d DoubleMetaphone.contains(r1, $i23, 2, \"EY\")\n  if ($z13 !\u003d 0) goto B8 else B11\n}",
      "B8 {\n  $i18 \u003d i21 + 1\n  $c19 \u003d r0.charAt(r1, $i18)\n  $i27 \u003d (int) $c19\n  if ($i27 \u003d\u003d 89) goto B9 else B11\n}",
      "B9 {\n  if (z11 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  r2.append(\"N\", \"KN\")\n  goto B12\n}",
      "B11 {\n  r2.append(\"KN\")\n}",
      "B12 {\n  i22 \u003d i21 + 2\n  goto B39\n}",
      "B13 {\n  $i4 \u003d i21 + 1\n  $z0 \u003d DoubleMetaphone.contains(r1, $i4, 2, \"LI\")\n  if ($z0 \u003d\u003d 0) goto B14 else B16\n}",
      "B14 {\n  if (z11 !\u003d 0) goto B15 else B16\n}",
      "B15 {\n  r2.append(\"KL\", \"L\")\n  i22 \u003d i21 + 2\n  goto B39\n}",
      "B16 {\n  if (i21 !\u003d 0) goto B17 else B20\n}",
      "B17 {\n  $i15 \u003d i21 + 1\n  $c16 \u003d r0.charAt(r1, $i15)\n  $i28 \u003d (int) $c16\n  if ($i28 \u003d\u003d 89) goto B18 else B19\n}",
      "B18 {\n  $i17 \u003d i21 + 1\n  $r3 \u003d String[] ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER\u003e\n  $z10 \u003d DoubleMetaphone.contains(r1, $i17, 2, $r3)\n  if ($z10 \u003d\u003d 0) goto B19 else B20\n}",
      "B19 {\n  r2.append(75, 74)\n  i22 \u003d i21 + 2\n  goto B39\n}",
      "B20 {\n  $i5 \u003d i21 + 1\n  $z1 \u003d DoubleMetaphone.contains(r1, $i5, 2, \"ER\")\n  if ($z1 !\u003d 0) goto B21 else B22\n}",
      "B21 {\n  $i13 \u003d i21 + 1\n  $c14 \u003d r0.charAt(r1, $i13)\n  $i29 \u003d (int) $c14\n  if ($i29 !\u003d 89) goto B22 else B26\n}",
      "B22 {\n  $z2 \u003d DoubleMetaphone.contains(r1, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\")\n  if ($z2 !\u003d 0) goto B23 else B26\n}",
      "B23 {\n  $i11 \u003d i21 - 1\n  $z8 \u003d DoubleMetaphone.contains(r1, $i11, 1, \"E\", \"I\")\n  if ($z8 !\u003d 0) goto B24 else B26\n}",
      "B24 {\n  $i12 \u003d i21 - 1\n  $z9 \u003d DoubleMetaphone.contains(r1, $i12, 3, \"RGY\", \"OGY\")\n  if ($z9 !\u003d 0) goto B25 else B26\n}",
      "B25 {\n  r2.append(75, 74)\n  i22 \u003d i21 + 2\n  goto B39\n}",
      "B26 {\n  $i24 \u003d i21 + 1\n  $z14 \u003d DoubleMetaphone.contains(r1, $i24, 1, \"E\", \"I\", \"Y\")\n  if ($z14 !\u003d 0) goto B27 else B28\n}",
      "B27 {\n  $i8 \u003d i21 - 1\n  $z7 \u003d DoubleMetaphone.contains(r1, $i8, 4, \"AGGI\", \"OGGI\")\n  if ($z7 \u003d\u003d 0) goto B28 else B36\n}",
      "B28 {\n  $z3 \u003d DoubleMetaphone.contains(r1, 0, 4, \"VAN \", \"VON \")\n  if ($z3 !\u003d 0) goto B29 else B31\n}",
      "B29 {\n  $z4 \u003d DoubleMetaphone.contains(r1, 0, 3, \"SCH\")\n  if ($z4 !\u003d 0) goto B30 else B31\n}",
      "B30 {\n  $i6 \u003d i21 + 1\n  $z5 \u003d DoubleMetaphone.contains(r1, $i6, 2, \"ET\")\n  if ($z5 \u003d\u003d 0) goto B31 else B32\n}",
      "B31 {\n  r2.append(75)\n  goto B35\n}",
      "B32 {\n  $i7 \u003d i21 + 1\n  $z6 \u003d DoubleMetaphone.contains(r1, $i7, 3, \"IER\")\n  if ($z6 \u003d\u003d 0) goto B33 else B34\n}",
      "B33 {\n  r2.append(74)\n  goto B35\n}",
      "B34 {\n  r2.append(74, 75)\n}",
      "B35 {\n  i22 \u003d i21 + 2\n  goto B39\n}",
      "B36 {\n  $i9 \u003d i21 + 1\n  $c10 \u003d r0.charAt(r1, $i9)\n  $i30 \u003d (int) $c10\n  if ($i30 !\u003d 71) goto B37 else B38\n}",
      "B37 {\n  i22 \u003d i21 + 2\n  r2.append(75)\n  goto B39\n}",
      "B38 {\n  i22 \u003d i21 + 1\n  r2.append(75)\n}",
      "B39 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B39",
      "B2 --\u003e B3",
      "B2 --\u003e B13",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B12",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B39",
      "B13 --\u003e B14",
      "B13 --\u003e B16",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B39",
      "B16 --\u003e B17",
      "B16 --\u003e B20",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B39",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B21 --\u003e B26",
      "B22 --\u003e B23",
      "B22 --\u003e B26",
      "B23 --\u003e B24",
      "B23 --\u003e B26",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B39",
      "B26 --\u003e B27",
      "B26 --\u003e B28",
      "B27 --\u003e B28",
      "B27 --\u003e B36",
      "B28 --\u003e B29",
      "B28 --\u003e B31",
      "B29 --\u003e B30",
      "B29 --\u003e B31",
      "B30 --\u003e B31",
      "B30 --\u003e B32",
      "B31 --\u003e B35",
      "B32 --\u003e B33",
      "B32 --\u003e B34",
      "B33 --\u003e B35",
      "B34 --\u003e B35",
      "B35 --\u003e B39",
      "B36 --\u003e B37",
      "B36 --\u003e B38",
      "B37 --\u003e B39",
      "B38 --\u003e B39",
      "B39 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "handleGH",
    "signature": "int handleGH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 24,
    "edges": 38,
    "cc": 16,
    "flowSummary": [
      "B0 : If(i12 \u003c\u003d 0) → B1 | else → B3",
      "B1 : If($z4 !\u003d 0) → B2 | else → B3",
      "B3 : If(i12 !\u003d 0) → B4 | else → B8",
      "B4 : If($i14 !\u003d 73) → B5 | else → B6",
      "B8 : If(i12 \u003c\u003d 1) → B9 | else → B10",
      "B9 : If($z3 !\u003d 0) → B10 | else → B14",
      "B10 : If(i12 \u003c\u003d 2) → B11 | else → B12",
      "B11 : If($z2 !\u003d 0) → B12 | else → B14",
      "B12 : If(i12 \u003c\u003d 3) → B13 | else → B15",
      "B13 : If($z1 \u003d\u003d 0) → B14 | else → B15",
      "B15 : If(i12 \u003c\u003d 2) → B16 | else → B19",
      "B16 : If($i15 !\u003d 85) → B17 | else → B19",
      "B17 : If($z0 \u003d\u003d 0) → B18 | else → B19",
      "B19 : If(i12 \u003c\u003d 0) → B20 | else → B22",
      "B20 : If($i16 \u003d\u003d 73) → B21 | else → B22"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  DoubleMetaphone$DoubleMetaphoneResult\n  i12 :\u003d @parameter2: int\n  if (i12 \u003c\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $i10 \u003d i12 - 1\n  $c11 \u003d r0.charAt(r1, $i10)\n  $z4 \u003d r0.isVowel($c11)\n  if ($z4 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  r2.append(75)\n  i13 \u003d i12 + 2\n  goto B23\n}",
      "B3 {\n  if (i12 !\u003d 0) goto B4 else B8\n}",
      "B4 {\n  $i8 \u003d i12 + 2\n  $c9 \u003d r0.charAt(r1, $i8)\n  $i14 \u003d (int) $c9\n  if ($i14 !\u003d 73) goto B5 else B6\n}",
      "B5 {\n  r2.append(74)\n  goto B7\n}",
      "B6 {\n  r2.append(75)\n}",
      "B7 {\n  i13 \u003d i12 + 2\n  goto B23\n}",
      "B8 {\n  if (i12 \u003c\u003d 1) goto B9 else B10\n}",
      "B9 {\n  $i7 \u003d i12 - 2\n  $z3 \u003d DoubleMetaphone.contains(r1, $i7, 1, \"B\", \"H\", \"D\")\n  if ($z3 !\u003d 0) goto B10 else B14\n}",
      "B10 {\n  if (i12 \u003c\u003d 2) goto B11 else B12\n}",
      "B11 {\n  $i6 \u003d i12 - 3\n  $z2 \u003d DoubleMetaphone.contains(r1, $i6, 1, \"B\", \"H\", \"D\")\n  if ($z2 !\u003d 0) goto B12 else B14\n}",
      "B12 {\n  if (i12 \u003c\u003d 3) goto B13 else B15\n}",
      "B13 {\n  $i5 \u003d i12 - 4\n  $z1 \u003d DoubleMetaphone.contains(r1, $i5, 1, \"B\", \"H\")\n  if ($z1 \u003d\u003d 0) goto B14 else B15\n}",
      "B14 {\n  i13 \u003d i12 + 2\n  goto B23\n}",
      "B15 {\n  if (i12 \u003c\u003d 2) goto B16 else B19\n}",
      "B16 {\n  $i2 \u003d i12 - 1\n  $c3 \u003d r0.charAt(r1, $i2)\n  $i15 \u003d (int) $c3\n  if ($i15 !\u003d 85) goto B17 else B19\n}",
      "B17 {\n  $i4 \u003d i12 - 3\n  $z0 \u003d DoubleMetaphone.contains(r1, $i4, 1, \"C\", \"G\", \"L\", \"R\", \"T\")\n  if ($z0 \u003d\u003d 0) goto B18 else B19\n}",
      "B18 {\n  r2.append(70)\n  goto B22\n}",
      "B19 {\n  if (i12 \u003c\u003d 0) goto B20 else B22\n}",
      "B20 {\n  $i0 \u003d i12 - 1\n  $c1 \u003d r0.charAt(r1, $i0)\n  $i16 \u003d (int) $c1\n  if ($i16 \u003d\u003d 73) goto B21 else B22\n}",
      "B21 {\n  r2.append(75)\n}",
      "B22 {\n  i13 \u003d i12 + 2\n}",
      "B23 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B23",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B23",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B9 --\u003e B14",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B11 --\u003e B14",
      "B12 --\u003e B13",
      "B12 --\u003e B15",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B23",
      "B15 --\u003e B16",
      "B15 --\u003e B19",
      "B16 --\u003e B17",
      "B16 --\u003e B19",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B22",
      "B19 --\u003e B20",
      "B19 --\u003e B22",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B22 --\u003e B23",
      "B23 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "handleH",
    "signature": "int handleH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i4 \u003d\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d 0) → B2 | else → B4",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  DoubleMetaphone$DoubleMetaphoneResult\n  i4 :\u003d @parameter2: int\n  if (i4 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $i2 \u003d i4 - 1\n  $c3 \u003d r0.charAt(r1, $i2)\n  $z1 \u003d r0.isVowel($c3)\n  if ($z1 \u003d\u003d 0) goto B2 else B4\n}",
      "B2 {\n  $i0 \u003d i4 + 1\n  $c1 \u003d r0.charAt(r1, $i0)\n  $z0 \u003d r0.isVowel($c1)\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  r2.append(72)\n  i5 \u003d i4 + 2\n  goto B5\n}",
      "B4 {\n  i5 \u003d i4 + 1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "handleJ",
    "signature": "int handleJ(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 26,
    "edges": 41,
    "cc": 17,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z2 \u003d\u003d 0) → B2 | else → B9",
      "B2 : If(i11 !\u003d 0) → B3 | else → B4",
      "B3 : If($i17 \u003d\u003d 32) → B4 | else → B6",
      "B4 : If($i0 \u003d\u003d 4) → B5 | else → B6",
      "B5 : If($z1 \u003d\u003d 0) → B6 | else → B7",
      "B9 : If(i11 !\u003d 0) → B10 | else → B12",
      "B10 : If($z7 !\u003d 0) → B11 | else → B12",
      "B12 : If($z3 \u003d\u003d 0) → B13 | else → B17",
      "B13 : If(z6 !\u003d 0) → B14 | else → B17",
      "B14 : If($i18 \u003d\u003d 65) → B15 | else → B16",
      "B15 : If($i19 !\u003d 79) → B16 | else → B17",
      "B17 : If(i11 !\u003d $i14) → B18 | else → B19",
      "B19 : If($z4 !\u003d 0) → B20 | else → B22",
      "B20 : If($z5 !\u003d 0) → B21 | else → B22",
      "B22 : If($i20 !\u003d 74) → B23 | else → B24"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  DoubleMetaphone$DoubleMetaphoneResult\n  i11 :\u003d @parameter2: int\n  z6 :\u003d @parameter3: boolean\n  $z0 \u003d DoubleMetaphone.contains(r0, i11, 4, \"JOSE\")\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z2 \u003d DoubleMetaphone.contains(r0, 0, 4, \"SAN \")\n  if ($z2 \u003d\u003d 0) goto B2 else B9\n}",
      "B2 {\n  if (i11 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $i1 \u003d i11 + 4\n  $c2 \u003d r2.charAt(r0, $i1)\n  $i17 \u003d (int) $c2\n  if ($i17 \u003d\u003d 32) goto B4 else B6\n}",
      "B4 {\n  $i0 \u003d r0.length()\n  if ($i0 \u003d\u003d 4) goto B5 else B6\n}",
      "B5 {\n  $z1 \u003d DoubleMetaphone.contains(r0, 0, 4, \"SAN \")\n  if ($z1 \u003d\u003d 0) goto B6 else B7\n}",
      "B6 {\n  r1.append(72)\n  goto B8\n}",
      "B7 {\n  r1.append(74, 72)\n}",
      "B8 {\n  i12 \u003d i11 + 1\n  goto B25\n}",
      "B9 {\n  if (i11 !\u003d 0) goto B10 else B12\n}",
      "B10 {\n  $z7 \u003d DoubleMetaphone.contains(r0, i11, 4, \"JOSE\")\n  if ($z7 !\u003d 0) goto B11 else B12\n}",
      "B11 {\n  r1.append(74, 65)\n  goto B22\n}",
      "B12 {\n  $i3 \u003d i11 - 1\n  $c4 \u003d r2.charAt(r0, $i3)\n  $z3 \u003d r2.isVowel($c4)\n  if ($z3 \u003d\u003d 0) goto B13 else B17\n}",
      "B13 {\n  if (z6 !\u003d 0) goto B14 else B17\n}",
      "B14 {\n  $i7 \u003d i11 + 1\n  $c8 \u003d r2.charAt(r0, $i7)\n  $i18 \u003d (int) $c8\n  if ($i18 \u003d\u003d 65) goto B15 else B16\n}",
      "B15 {\n  $i9 \u003d i11 + 1\n  $c10 \u003d r2.charAt(r0, $i9)\n  $i19 \u003d (int) $c10\n  if ($i19 !\u003d 79) goto B16 else B17\n}",
      "B16 {\n  r1.append(74, 72)\n  goto B22\n}",
      "B17 {\n  $i13 \u003d r0.length()\n  $i14 \u003d $i13 - 1\n  if (i11 !\u003d $i14) goto B18 else B19\n}",
      "B18 {\n  r1.append(74, 32)\n  goto B22\n}",
      "B19 {\n  $i5 \u003d i11 + 1\n  $r3 \u003d String[] L_T_K_S_N_M_B_Z\u003e\n  $z4 \u003d DoubleMetaphone.contains(r0, $i5, 1, $r3)\n  if ($z4 !\u003d 0) goto B20 else B22\n}",
      "B20 {\n  $i6 \u003d i11 - 1\n  $z5 \u003d DoubleMetaphone.contains(r0, $i6, 1, \"S\", \"K\", \"L\")\n  if ($z5 !\u003d 0) goto B21 else B22\n}",
      "B21 {\n  r1.append(74)\n}",
      "B22 {\n  $i15 \u003d i11 + 1\n  $c16 \u003d r2.charAt(r0, $i15)\n  $i20 \u003d (int) $c16\n  if ($i20 !\u003d 74) goto B23 else B24\n}",
      "B23 {\n  i12 \u003d i11 + 2\n  goto B25\n}",
      "B24 {\n  i12 \u003d i11 + 1\n}",
      "B25 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B9",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B25",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B22",
      "B12 --\u003e B13",
      "B12 --\u003e B17",
      "B13 --\u003e B14",
      "B13 --\u003e B17",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B22",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B22",
      "B19 --\u003e B20",
      "B19 --\u003e B22",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B25",
      "B25 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "handleL",
    "signature": "int handleL(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i4 !\u003d 76) → B1 | else → B5",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  DoubleMetaphone$DoubleMetaphoneResult\n  i2 :\u003d @parameter2: int\n  $i0 \u003d i2 + 1\n  $c1 \u003d r0.charAt(r1, $i0)\n  $i4 \u003d (int) $c1\n  if ($i4 !\u003d 76) goto B1 else B5\n}",
      "B1 {\n  $z0 \u003d r0.conditionL0(r1, i2)\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  r2.appendPrimary(76)\n  goto B4\n}",
      "B3 {\n  r2.append(76)\n}",
      "B4 {\n  i3 \u003d i2 + 2\n  goto B6\n}",
      "B5 {\n  i3 \u003d i2 + 1\n  r2.append(76)\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "handleP",
    "signature": "int handleP(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i6 !\u003d 72) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  DoubleMetaphone$DoubleMetaphoneResult\n  i3 :\u003d @parameter2: int\n  $i0 \u003d i3 + 1\n  $c1 \u003d r0.charAt(r1, $i0)\n  $i6 \u003d (int) $c1\n  if ($i6 !\u003d 72) goto B1 else B2\n}",
      "B1 {\n  r2.append(70)\n  i4 \u003d i3 + 2\n  goto B6\n}",
      "B2 {\n  r2.append(80)\n  $i2 \u003d i3 + 1\n  $z0 \u003d DoubleMetaphone.contains(r1, $i2, 1, \"P\", \"B\")\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $i5 \u003d i3 + 2\n  goto B5\n}",
      "B4 {\n  $i5 \u003d i3 + 1\n}",
      "B5 {\n  i4 \u003d $i5\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "handleR",
    "signature": "int handleR(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 10,
    "edges": 14,
    "cc": 6,
    "flowSummary": [
      "B0 : If(i0 !\u003d $i2) → B1 | else → B5",
      "B1 : If(z0 !\u003d 0) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B5",
      "B3 : If($z2 !\u003d 0) → B4 | else → B5",
      "B6 : If($i8 !\u003d 82) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  DoubleMetaphone$DoubleMetaphoneResult\n  i0 :\u003d @parameter2: int\n  z0 :\u003d @parameter3: boolean\n  $i1 \u003d r0.length()\n  $i2 \u003d $i1 - 1\n  if (i0 !\u003d $i2) goto B1 else B5\n}",
      "B1 {\n  if (z0 !\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $i3 \u003d i0 - 2\n  $z1 \u003d DoubleMetaphone.contains(r0, $i3, 2, \"IE\")\n  if ($z1 \u003d\u003d 0) goto B3 else B5\n}",
      "B3 {\n  $i4 \u003d i0 - 4\n  $z2 \u003d DoubleMetaphone.contains(r0, $i4, 2, \"ME\", \"MA\")\n  if ($z2 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  r1.appendAlternate(82)\n  goto B6\n}",
      "B5 {\n  r1.append(82)\n}",
      "B6 {\n  $i5 \u003d i0 + 1\n  $c6 \u003d r2.charAt(r0, $i5)\n  $i8 \u003d (int) $c6\n  if ($i8 !\u003d 82) goto B7 else B8\n}",
      "B7 {\n  $i7 \u003d i0 + 2\n  goto B9\n}",
      "B8 {\n  $i7 \u003d i0 + 1\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "handleS",
    "signature": "int handleS(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 34,
    "edges": 49,
    "cc": 17,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If(i8 !\u003d 0) → B3 | else → B5",
      "B3 : If($z11 \u003d\u003d 0) → B4 | else → B5",
      "B5 : If($z1 \u003d\u003d 0) → B6 | else → B10",
      "B6 : If($z10 \u003d\u003d 0) → B7 | else → B8",
      "B10 : If($z2 !\u003d 0) → B11 | else → B12",
      "B11 : If($z4 \u003d\u003d 0) → B12 | else → B16",
      "B12 : If(z3 \u003d\u003d 0) → B13 | else → B14",
      "B16 : If(i8 !\u003d 0) → B17 | else → B18",
      "B17 : If($z9 !\u003d 0) → B18 | else → B19",
      "B18 : If($z5 \u003d\u003d 0) → B19 | else → B23",
      "B19 : If($z8 \u003d\u003d 0) → B20 | else → B21",
      "B23 : If($z6 \u003d\u003d 0) → B24 | else → B25",
      "B25 : If(i8 !\u003d $i3) → B26 | else → B28",
      "B26 : If($z7 \u003d\u003d 0) → B27 | else → B28",
      "B29 : If($z12 \u003d\u003d 0) → B30 | else → B31"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  DoubleMetaphone$DoubleMetaphoneResult\n  i8 :\u003d @parameter2: int\n  z3 :\u003d @parameter3: boolean\n  $i0 \u003d i8 - 1\n  $z0 \u003d DoubleMetaphone.contains(r0, $i0, 3, \"ISL\", \"YSL\")\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  i9 \u003d i8 + 1\n  goto B33\n}",
      "B2 {\n  if (i8 !\u003d 0) goto B3 else B5\n}",
      "B3 {\n  $z11 \u003d DoubleMetaphone.contains(r0, i8, 5, \"SUGAR\")\n  if ($z11 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  r1.append(88, 83)\n  i9 \u003d i8 + 1\n  goto B33\n}",
      "B5 {\n  $z1 \u003d DoubleMetaphone.contains(r0, i8, 2, \"SH\")\n  if ($z1 \u003d\u003d 0) goto B6 else B10\n}",
      "B6 {\n  $i7 \u003d i8 + 1\n  $z10 \u003d DoubleMetaphone.contains(r0, $i7, 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")\n  if ($z10 \u003d\u003d 0) goto B7 else B8\n}",
      "B7 {\n  r1.append(83)\n  goto B9\n}",
      "B8 {\n  r1.append(88)\n}",
      "B9 {\n  i9 \u003d i8 + 2\n  goto B33\n}",
      "B10 {\n  $z2 \u003d DoubleMetaphone.contains(r0, i8, 3, \"SIO\", \"SIA\")\n  if ($z2 !\u003d 0) goto B11 else B12\n}",
      "B11 {\n  $z4 \u003d DoubleMetaphone.contains(r0, i8, 4, \"SIAN\")\n  if ($z4 \u003d\u003d 0) goto B12 else B16\n}",
      "B12 {\n  if (z3 \u003d\u003d 0) goto B13 else B14\n}",
      "B13 {\n  r1.append(83)\n  goto B15\n}",
      "B14 {\n  r1.append(83, 88)\n}",
      "B15 {\n  i9 \u003d i8 + 3\n  goto B33\n}",
      "B16 {\n  if (i8 !\u003d 0) goto B17 else B18\n}",
      "B17 {\n  $i6 \u003d i8 + 1\n  $z9 \u003d DoubleMetaphone.contains(r0, $i6, 1, \"M\", \"N\", \"L\", \"W\")\n  if ($z9 !\u003d 0) goto B18 else B19\n}",
      "B18 {\n  $i1 \u003d i8 + 1\n  $z5 \u003d DoubleMetaphone.contains(r0, $i1, 1, \"Z\")\n  if ($z5 \u003d\u003d 0) goto B19 else B23\n}",
      "B19 {\n  r1.append(83, 88)\n  $i5 \u003d i8 + 1\n  $z8 \u003d DoubleMetaphone.contains(r0, $i5, 1, \"Z\")\n  if ($z8 \u003d\u003d 0) goto B20 else B21\n}",
      "B20 {\n  $i10 \u003d i8 + 2\n  goto B22\n}",
      "B21 {\n  $i10 \u003d i8 + 1\n}",
      "B22 {\n  i9 \u003d $i10\n  goto B33\n}",
      "B23 {\n  $z6 \u003d DoubleMetaphone.contains(r0, i8, 2, \"SC\")\n  if ($z6 \u003d\u003d 0) goto B24 else B25\n}",
      "B24 {\n  i9 \u003d r2.handleSC(r0, r1, i8)\n  goto B33\n}",
      "B25 {\n  $i2 \u003d r0.length()\n  $i3 \u003d $i2 - 1\n  if (i8 !\u003d $i3) goto B26 else B28\n}",
      "B26 {\n  $i4 \u003d i8 - 2\n  $z7 \u003d DoubleMetaphone.contains(r0, $i4, 2, \"AI\", \"OI\")\n  if ($z7 \u003d\u003d 0) goto B27 else B28\n}",
      "B27 {\n  r1.appendAlternate(83)\n  goto B29\n}",
      "B28 {\n  r1.append(83)\n}",
      "B29 {\n  $i11 \u003d i8 + 1\n  $z12 \u003d DoubleMetaphone.contains(r0, $i11, 1, \"S\", \"Z\")\n  if ($z12 \u003d\u003d 0) goto B30 else B31\n}",
      "B30 {\n  $i12 \u003d i8 + 2\n  goto B32\n}",
      "B31 {\n  $i12 \u003d i8 + 1\n}",
      "B32 {\n  i9 \u003d $i12\n}",
      "B33 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B33",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B33",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B33",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B11 --\u003e B16",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B33",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B18 --\u003e B23",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B22 --\u003e B33",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B33",
      "B25 --\u003e B26",
      "B25 --\u003e B28",
      "B26 --\u003e B27",
      "B26 --\u003e B28",
      "B27 --\u003e B29",
      "B28 --\u003e B29",
      "B29 --\u003e B30",
      "B29 --\u003e B31",
      "B30 --\u003e B32",
      "B31 --\u003e B32",
      "B32 --\u003e B33",
      "B33 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "handleSC",
    "signature": "int handleSC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 14,
    "edges": 20,
    "cc": 8,
    "flowSummary": [
      "B0 : If($i9 !\u003d 72) → B1 | else → B10",
      "B1 : If($z1 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($z3 \u003d\u003d 0) → B3 | else → B4",
      "B5 : If(i0 !\u003d 0) → B6 | else → B9",
      "B6 : If($z2 !\u003d 0) → B7 | else → B9",
      "B7 : If($i10 \u003d\u003d 87) → B8 | else → B9",
      "B10 : If($z0 \u003d\u003d 0) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  DoubleMetaphone$DoubleMetaphoneResult\n  i0 :\u003d @parameter2: int\n  $i1 \u003d i0 + 2\n  $c2 \u003d r0.charAt(r1, $i1)\n  $i9 \u003d (int) $c2\n  if ($i9 !\u003d 72) goto B1 else B10\n}",
      "B1 {\n  $i4 \u003d i0 + 3\n  $z1 \u003d DoubleMetaphone.contains(r1, $i4, 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")\n  if ($z1 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $i7 \u003d i0 + 3\n  $z3 \u003d DoubleMetaphone.contains(r1, $i7, 2, \"ER\", \"EN\")\n  if ($z3 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  r2.append(\"X\", \"SK\")\n  goto B13\n}",
      "B4 {\n  r2.append(\"SK\")\n  goto B13\n}",
      "B5 {\n  if (i0 !\u003d 0) goto B6 else B9\n}",
      "B6 {\n  $c5 \u003d r0.charAt(r1, 3)\n  $z2 \u003d r0.isVowel($c5)\n  if ($z2 !\u003d 0) goto B7 else B9\n}",
      "B7 {\n  $c6 \u003d r0.charAt(r1, 3)\n  $i10 \u003d (int) $c6\n  if ($i10 \u003d\u003d 87) goto B8 else B9\n}",
      "B8 {\n  r2.append(88, 83)\n  goto B13\n}",
      "B9 {\n  r2.append(88)\n  goto B13\n}",
      "B10 {\n  $i3 \u003d i0 + 2\n  $z0 \u003d DoubleMetaphone.contains(r1, $i3, 1, \"I\", \"E\", \"Y\")\n  if ($z0 \u003d\u003d 0) goto B11 else B12\n}",
      "B11 {\n  r2.append(83)\n  goto B13\n}",
      "B12 {\n  r2.append(\"SK\")\n}",
      "B13 {\n  $i8 \u003d i0 + 3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B10",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B13",
      "B4 --\u003e B13",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B13",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "handleT",
    "signature": "int handleT(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 17,
    "edges": 24,
    "cc": 9,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4",
      "B4 : If($z2 !\u003d 0) → B5 | else → B6",
      "B5 : If($z6 \u003d\u003d 0) → B6 | else → B12",
      "B6 : If($z3 !\u003d 0) → B7 | else → B9",
      "B7 : If($z4 !\u003d 0) → B8 | else → B9",
      "B8 : If($z5 \u003d\u003d 0) → B9 | else → B10",
      "B12 : If($z7 \u003d\u003d 0) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  DoubleMetaphone$DoubleMetaphoneResult\n  i2 :\u003d @parameter2: int\n  $z0 \u003d DoubleMetaphone.contains(r0, i2, 4, \"TION\")\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r1.append(88)\n  i3 \u003d i2 + 3\n  goto B16\n}",
      "B2 {\n  $z1 \u003d DoubleMetaphone.contains(r0, i2, 3, \"TIA\", \"TCH\")\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  r1.append(88)\n  i3 \u003d i2 + 3\n  goto B16\n}",
      "B4 {\n  $z2 \u003d DoubleMetaphone.contains(r0, i2, 2, \"TH\")\n  if ($z2 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $z6 \u003d DoubleMetaphone.contains(r0, i2, 3, \"TTH\")\n  if ($z6 \u003d\u003d 0) goto B6 else B12\n}",
      "B6 {\n  $i0 \u003d i2 + 2\n  $z3 \u003d DoubleMetaphone.contains(r0, $i0, 2, \"OM\", \"AM\")\n  if ($z3 !\u003d 0) goto B7 else B9\n}",
      "B7 {\n  $z4 \u003d DoubleMetaphone.contains(r0, 0, 4, \"VAN \", \"VON \")\n  if ($z4 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  $z5 \u003d DoubleMetaphone.contains(r0, 0, 3, \"SCH\")\n  if ($z5 \u003d\u003d 0) goto B9 else B10\n}",
      "B9 {\n  r1.append(84)\n  goto B11\n}",
      "B10 {\n  r1.append(48, 84)\n}",
      "B11 {\n  i3 \u003d i2 + 2\n  goto B16\n}",
      "B12 {\n  r1.append(84)\n  $i1 \u003d i2 + 1\n  $z7 \u003d DoubleMetaphone.contains(r0, $i1, 1, \"T\", \"D\")\n  if ($z7 \u003d\u003d 0) goto B13 else B14\n}",
      "B13 {\n  $i4 \u003d i2 + 2\n  goto B15\n}",
      "B14 {\n  $i4 \u003d i2 + 1\n}",
      "B15 {\n  i3 \u003d $i4\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B16",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B16",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B12",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B16",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B16",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "handleW",
    "signature": "int handleW(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 18,
    "edges": 27,
    "cc": 11,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If(i9 !\u003d 0) → B3 | else → B9",
      "B3 : If($z5 !\u003d 0) → B4 | else → B5",
      "B4 : If($z7 \u003d\u003d 0) → B5 | else → B9",
      "B5 : If($z6 \u003d\u003d 0) → B6 | else → B7",
      "B9 : If(i9 !\u003d $i1) → B10 | else → B11",
      "B10 : If($z4 !\u003d 0) → B11 | else → B13",
      "B11 : If($z1 !\u003d 0) → B12 | else → B13",
      "B12 : If($z2 \u003d\u003d 0) → B13 | else → B14",
      "B14 : If($z3 \u003d\u003d 0) → B15 | else → B16"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  DoubleMetaphone$DoubleMetaphoneResult\n  i9 :\u003d @parameter2: int\n  $z0 \u003d DoubleMetaphone.contains(r0, i9, 2, \"WR\")\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r1.append(82)\n  i10 \u003d i9 + 2\n  goto B17\n}",
      "B2 {\n  if (i9 !\u003d 0) goto B3 else B9\n}",
      "B3 {\n  $i5 \u003d i9 + 1\n  $c6 \u003d r2.charAt(r0, $i5)\n  $z5 \u003d r2.isVowel($c6)\n  if ($z5 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $z7 \u003d DoubleMetaphone.contains(r0, i9, 2, \"WH\")\n  if ($z7 \u003d\u003d 0) goto B5 else B9\n}",
      "B5 {\n  $i7 \u003d i9 + 1\n  $c8 \u003d r2.charAt(r0, $i7)\n  $z6 \u003d r2.isVowel($c8)\n  if ($z6 \u003d\u003d 0) goto B6 else B7\n}",
      "B6 {\n  r1.append(65, 70)\n  goto B8\n}",
      "B7 {\n  r1.append(65)\n}",
      "B8 {\n  i10 \u003d i9 + 1\n  goto B17\n}",
      "B9 {\n  $i0 \u003d r0.length()\n  $i1 \u003d $i0 - 1\n  if (i9 !\u003d $i1) goto B10 else B11\n}",
      "B10 {\n  $i3 \u003d i9 - 1\n  $c4 \u003d r2.charAt(r0, $i3)\n  $z4 \u003d r2.isVowel($c4)\n  if ($z4 !\u003d 0) goto B11 else B13\n}",
      "B11 {\n  $i2 \u003d i9 - 1\n  $z1 \u003d DoubleMetaphone.contains(r0, $i2, 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\")\n  if ($z1 !\u003d 0) goto B12 else B13\n}",
      "B12 {\n  $z2 \u003d DoubleMetaphone.contains(r0, 0, 3, \"SCH\")\n  if ($z2 \u003d\u003d 0) goto B13 else B14\n}",
      "B13 {\n  r1.appendAlternate(70)\n  i10 \u003d i9 + 1\n  goto B17\n}",
      "B14 {\n  $z3 \u003d DoubleMetaphone.contains(r0, i9, 4, \"WICZ\", \"WITZ\")\n  if ($z3 \u003d\u003d 0) goto B15 else B16\n}",
      "B15 {\n  r1.append(\"TS\", \"FX\")\n  i10 \u003d i9 + 4\n  goto B17\n}",
      "B16 {\n  i10 \u003d i9 + 1\n}",
      "B17 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B17",
      "B2 --\u003e B3",
      "B2 --\u003e B9",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B17",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B17",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "handleX",
    "signature": "int handleX(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 11,
    "edges": 15,
    "cc": 6,
    "flowSummary": [
      "B0 : If(i4 !\u003d 0) → B1 | else → B2",
      "B2 : If(i4 !\u003d $i1) → B3 | else → B5",
      "B3 : If($z0 !\u003d 0) → B4 | else → B6",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6",
      "B6 : If($z2 \u003d\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  DoubleMetaphone$DoubleMetaphoneResult\n  i4 :\u003d @parameter2: int\n  if (i4 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r1.append(83)\n  i5 \u003d i4 + 1\n  goto B10\n}",
      "B2 {\n  $i0 \u003d r0.length()\n  $i1 \u003d $i0 - 1\n  if (i4 !\u003d $i1) goto B3 else B5\n}",
      "B3 {\n  $i2 \u003d i4 - 3\n  $z0 \u003d DoubleMetaphone.contains(r0, $i2, 3, \"IAU\", \"EAU\")\n  if ($z0 !\u003d 0) goto B4 else B6\n}",
      "B4 {\n  $i3 \u003d i4 - 2\n  $z1 \u003d DoubleMetaphone.contains(r0, $i3, 2, \"AU\", \"OU\")\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  r1.append(\"KS\")\n}",
      "B6 {\n  $i6 \u003d i4 + 1\n  $z2 \u003d DoubleMetaphone.contains(r0, $i6, 1, \"C\", \"X\")\n  if ($z2 \u003d\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $i7 \u003d i4 + 2\n  goto B9\n}",
      "B8 {\n  $i7 \u003d i4 + 1\n}",
      "B9 {\n  i5 \u003d $i7\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B10",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "handleZ",
    "signature": "int handleZ(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 13,
    "edges": 18,
    "cc": 7,
    "flowSummary": [
      "B0 : If($i10 !\u003d 72) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B6",
      "B3 : If(z1 \u003d\u003d 0) → B4 | else → B7",
      "B4 : If(i5 \u003c\u003d 0) → B5 | else → B7",
      "B5 : If($i11 \u003d\u003d 84) → B6 | else → B7",
      "B8 : If($i12 !\u003d 90) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  DoubleMetaphone$DoubleMetaphoneResult\n  i5 :\u003d @parameter2: int\n  z1 :\u003d @parameter3: boolean\n  $i0 \u003d i5 + 1\n  $c1 \u003d r0.charAt(r1, $i0)\n  $i10 \u003d (int) $c1\n  if ($i10 !\u003d 72) goto B1 else B2\n}",
      "B1 {\n  r2.append(74)\n  i6 \u003d i5 + 2\n  goto B12\n}",
      "B2 {\n  $i2 \u003d i5 + 1\n  $z0 \u003d DoubleMetaphone.contains(r1, $i2, 2, \"ZO\", \"ZI\", \"ZA\")\n  if ($z0 !\u003d 0) goto B3 else B6\n}",
      "B3 {\n  if (z1 \u003d\u003d 0) goto B4 else B7\n}",
      "B4 {\n  if (i5 \u003c\u003d 0) goto B5 else B7\n}",
      "B5 {\n  $i3 \u003d i5 - 1\n  $c4 \u003d r0.charAt(r1, $i3)\n  $i11 \u003d (int) $c4\n  if ($i11 \u003d\u003d 84) goto B6 else B7\n}",
      "B6 {\n  r2.append(\"S\", \"TS\")\n  goto B8\n}",
      "B7 {\n  r2.append(83)\n}",
      "B8 {\n  $i7 \u003d i5 + 1\n  $c8 \u003d r0.charAt(r1, $i7)\n  $i12 \u003d (int) $c8\n  if ($i12 !\u003d 90) goto B9 else B10\n}",
      "B9 {\n  $i9 \u003d i5 + 2\n  goto B11\n}",
      "B10 {\n  $i9 \u003d i5 + 1\n}",
      "B11 {\n  i6 \u003d $i9\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B12",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "conditionC0",
    "signature": "boolean conditionC0(java.lang.String,int)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 14,
    "edges": 16,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If(i0 \u003e 1) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B6",
      "B6 : If($z2 !\u003d 0) → B7 | else → B8",
      "B8 : If($i7 \u003d\u003d 73) → B9 | else → B10",
      "B9 : If($i8 !\u003d 69) → B10 | else → B11",
      "B10 : If($z3 \u003d\u003d 0) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  i0 :\u003d @parameter1: int\n  $z0 \u003d DoubleMetaphone.contains(r0, i0, 4, \"CHIA\")\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (i0 \u003e 1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i1 \u003d i0 - 2\n  $c2 \u003d r1.charAt(r0, $i1)\n  $z1 \u003d r1.isVowel($c2)\n  if ($z1 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $i3 \u003d i0 - 1\n  $z2 \u003d DoubleMetaphone.contains(r0, $i3, 3, \"ACH\")\n  if ($z2 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $i4 \u003d i0 + 2\n  $c5 \u003d r1.charAt(r0, $i4)\n  $i7 \u003d (int) $c5\n  if ($i7 \u003d\u003d 73) goto B9 else B10\n}",
      "B9 {\n  $i8 \u003d (int) $c5\n  if ($i8 !\u003d 69) goto B10 else B11\n}",
      "B10 {\n  $i6 \u003d i0 - 2\n  $z3 \u003d DoubleMetaphone.contains(r0, $i6, 6, \"BACHER\", \"MACHER\")\n  if ($z3 \u003d\u003d 0) goto B11 else B12\n}",
      "B11 {\n  $z4 \u003d 1\n  goto B13\n}",
      "B12 {\n  $z4 \u003d 0\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "conditionCH0",
    "signature": "boolean conditionCH0(java.lang.String,int)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B5",
      "B3 : If($z2 !\u003d 0) → B4 | else → B5",
      "B5 : If($z1 \u003d\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  i0 :\u003d @parameter1: int\n  if (i0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d i0 + 1\n  $z0 \u003d DoubleMetaphone.contains(r0, $i1, 5, \"HARAC\", \"HARIS\")\n  if ($z0 !\u003d 0) goto B3 else B5\n}",
      "B3 {\n  $i2 \u003d i0 + 1\n  $z2 \u003d DoubleMetaphone.contains(r0, $i2, 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")\n  if ($z2 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $z1 \u003d DoubleMetaphone.contains(r0, 0, 5, \"CHORE\")\n  if ($z1 \u003d\u003d 0) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "conditionCH1",
    "signature": "boolean conditionCH1(java.lang.String,int)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 11,
    "edges": 18,
    "cc": 9,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B8",
      "B1 : If($z1 !\u003d 0) → B2 | else → B8",
      "B2 : If($z2 !\u003d 0) → B3 | else → B8",
      "B3 : If($z3 !\u003d 0) → B4 | else → B8",
      "B4 : If($z4 !\u003d 0) → B5 | else → B6",
      "B5 : If(i0 !\u003d 0) → B6 | else → B9",
      "B6 : If($z5 !\u003d 0) → B7 | else → B8",
      "B7 : If($i5 !\u003d $i7) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  i0 :\u003d @parameter1: int\n  $z0 \u003d DoubleMetaphone.contains(r0, 0, 4, \"VAN \", \"VON \")\n  if ($z0 !\u003d 0) goto B1 else B8\n}",
      "B1 {\n  $z1 \u003d DoubleMetaphone.contains(r0, 0, 3, \"SCH\")\n  if ($z1 !\u003d 0) goto B2 else B8\n}",
      "B2 {\n  $i1 \u003d i0 - 2\n  $z2 \u003d DoubleMetaphone.contains(r0, $i1, 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\")\n  if ($z2 !\u003d 0) goto B3 else B8\n}",
      "B3 {\n  $i2 \u003d i0 + 2\n  $z3 \u003d DoubleMetaphone.contains(r0, $i2, 1, \"T\", \"S\")\n  if ($z3 !\u003d 0) goto B4 else B8\n}",
      "B4 {\n  $i3 \u003d i0 - 1\n  $z4 \u003d DoubleMetaphone.contains(r0, $i3, 1, \"A\", \"O\", \"U\", \"E\")\n  if ($z4 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  if (i0 !\u003d 0) goto B6 else B9\n}",
      "B6 {\n  $i4 \u003d i0 + 2\n  $r1 \u003d String[] L_R_N_M_B_H_F_V_W_SPACE\u003e\n  $z5 \u003d DoubleMetaphone.contains(r0, $i4, 1, $r1)\n  if ($z5 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $i5 \u003d i0 + 1\n  $i6 \u003d r0.length()\n  $i7 \u003d $i6 - 1\n  if ($i5 !\u003d $i7) goto B8 else B9\n}",
      "B8 {\n  $z6 \u003d 1\n  goto B10\n}",
      "B9 {\n  $z6 \u003d 0\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B8",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B2 --\u003e B8",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "conditionL0",
    "signature": "boolean conditionL0(java.lang.String,int)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i0 !\u003d $i2) → B1 | else → B3",
      "B1 : If($z3 \u003d\u003d 0) → B2 | else → B3",
      "B3 : If($z0 !\u003d 0) → B4 | else → B5",
      "B4 : If($z2 \u003d\u003d 0) → B5 | else → B7",
      "B5 : If($z1 \u003d\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  i0 :\u003d @parameter1: int\n  $i1 \u003d r0.length()\n  $i2 \u003d $i1 - 3\n  if (i0 !\u003d $i2) goto B1 else B3\n}",
      "B1 {\n  $i8 \u003d i0 - 1\n  $z3 \u003d DoubleMetaphone.contains(r0, $i8, 4, \"ILLO\", \"ILLA\", \"ALLE\")\n  if ($z3 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $i3 \u003d r0.length()\n  $i4 \u003d $i3 - 2\n  $z0 \u003d DoubleMetaphone.contains(r0, $i4, 2, \"AS\", \"OS\")\n  if ($z0 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $i6 \u003d r0.length()\n  $i7 \u003d $i6 - 1\n  $z2 \u003d DoubleMetaphone.contains(r0, $i7, 1, \"A\", \"O\")\n  if ($z2 \u003d\u003d 0) goto B5 else B7\n}",
      "B5 {\n  $i5 \u003d i0 - 1\n  $z1 \u003d DoubleMetaphone.contains(r0, $i5, 4, \"ALLE\")\n  if ($z1 \u003d\u003d 0) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "conditionM0",
    "signature": "boolean conditionM0(java.lang.String,int)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i8 !\u003d 77) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B6",
      "B3 : If($i4 \u003d\u003d $i6) → B4 | else → B5",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  i0 :\u003d @parameter1: int\n  $i1 \u003d i0 + 1\n  $c2 \u003d r0.charAt(r1, $i1)\n  $i8 \u003d (int) $c2\n  if ($i8 !\u003d 77) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i3 \u003d i0 - 1\n  $z0 \u003d DoubleMetaphone.contains(r1, $i3, 3, \"UMB\")\n  if ($z0 \u003d\u003d 0) goto B3 else B6\n}",
      "B3 {\n  $i4 \u003d i0 + 1\n  $i5 \u003d r1.length()\n  $i6 \u003d $i5 - 1\n  if ($i4 \u003d\u003d $i6) goto B4 else B5\n}",
      "B4 {\n  $i7 \u003d i0 + 2\n  $z1 \u003d DoubleMetaphone.contains(r1, $i7, 2, \"ER\")\n  if ($z1 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $z2 \u003d 1\n  goto B7\n}",
      "B6 {\n  $z2 \u003d 0\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "isSlavoGermanic",
    "signature": "boolean isSlavoGermanic(java.lang.String)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 10,
    "cc": 5,
    "flowSummary": [
      "B0 : If($i0 \u003e $i5) → B1 | else → B4",
      "B1 : If($i1 \u003e $i7) → B2 | else → B4",
      "B2 : If($i2 \u003e $i9) → B3 | else → B4",
      "B3 : If($i3 \u003c\u003d $i11) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  $i0 \u003d r0.indexOf(87)\n  $i5 \u003d (int) -1\n  if ($i0 \u003e $i5) goto B1 else B4\n}",
      "B1 {\n  $i1 \u003d r0.indexOf(75)\n  $i7 \u003d (int) -1\n  if ($i1 \u003e $i7) goto B2 else B4\n}",
      "B2 {\n  $i2 \u003d r0.indexOf(\"CZ\")\n  $i9 \u003d (int) -1\n  if ($i2 \u003e $i9) goto B3 else B4\n}",
      "B3 {\n  $i3 \u003d r0.indexOf(\"WITZ\")\n  $i11 \u003d (int) -1\n  if ($i3 \u003c\u003d $i11) goto B4 else B5\n}",
      "B4 {\n  $z0 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z0 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "isVowel",
    "signature": "boolean isVowel(char)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003d\u003d $i4) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  c0 :\u003d @parameter0: char\n  $r0 \u003d \"AEIOUY\"\n  $i2 \u003d (int) c0\n  $i1 \u003d $r0.indexOf($i2)\n  $i4 \u003d (int) -1\n  if ($i1 \u003d\u003d $i4) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "isSilentStart",
    "signature": "boolean isSilentStart(java.lang.String)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B5",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  z1 \u003d 0\n  r0 \u003d String[] SILENT_START\u003e\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B5\n}",
      "B2 {\n  r1 \u003d r0[i1]\n  $z0 \u003d r2.startsWith(r1)\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  z1 \u003d 1\n  goto B5\n}",
      "B4 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "cleanInput",
    "signature": "java.lang.String cleanInput(java.lang.String)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r0 \u003d r4.trim()\n  $i0 \u003d $r0.length()\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r1 \u003d Locale ENGLISH\u003e\n  $r2 \u003d $r0.toUpperCase($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "charAt",
    "signature": "char charAt(java.lang.String,int)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B2",
      "B1 : If(i0 \u003c $i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DoubleMetaphone\n  String\n  i0 :\u003d @parameter1: int\n  if (i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d r0.length()\n  if (i0 \u003c $i1) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $c2 \u003d r0.charAt(i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.DoubleMetaphone",
    "methodName": "contains",
    "signature": "boolean contains(java.lang.String,int,int,java.lang.String[])",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 11,
    "cc": 5,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B7",
      "B1 : If($i2 \u003e $i3) → B2 | else → B7",
      "B3 : If(i6 \u003e\u003d i5) → B4 | else → B7",
      "B4 : If($z0 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  String\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  String[]\n  z1 \u003d 0\n  if (i0 \u003c 0) goto B1 else B7\n}",
      "B1 {\n  $i2 \u003d i0 + i1\n  $i3 \u003d r0.length()\n  if ($i2 \u003e $i3) goto B2 else B7\n}",
      "B2 {\n  $i4 \u003d i0 + i1\n  $r1 \u003d r0.substring(i0, $i4)\n  i5 \u003d lengthof r2\n  i6 \u003d 0\n}",
      "B3 {\n  if (i6 \u003e\u003d i5) goto B4 else B7\n}",
      "B4 {\n  r3 \u003d r2[i6]\n  $z0 \u003d $r1.equals(r3)\n  if ($z0 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  z1 \u003d 1\n  goto B7\n}",
      "B6 {\n  i6 \u003d i6 + 1\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B7",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.Metaphone",
    "methodName": "metaphone",
    "signature": "java.lang.String metaphone(java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 115,
    "edges": 190,
    "cc": 77,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($i0 !\u003d 0) → B2 | else → B3",
      "B3 : If($i1 !\u003d 1) → B4 | else → B5",
      "B5 : If(switch-on $i44) → B9 | else → B6",
      "B6 : If($i45 !\u003d 78) → B7 | else → B8",
      "B9 : If($i46 !\u003d 69) → B10 | else → B11",
      "B12 : If($i47 !\u003d 82) → B13 | else → B14",
      "B14 : If($i48 !\u003d 72) → B15 | else → B16",
      "B20 : If($i40 \u003e\u003d $i41) → B21 | else → B114",
      "B21 : If(i39 \u003e\u003d $i38) → B22 | else → B114",
      "B22 : If($i49 \u003d\u003d 67) → B23 | else → B25",
      "B23 : If($z33 \u003d\u003d 0) → B24 | else → B25",
      "B25 : If(switch-on $i50) → B26 | else → B28",
      "B26 : If(i39 !\u003d 0) → B27 | else → B110",
      "B28 : If($z31 \u003d\u003d 0) → B29 | else → B31",
      "B29 : If($z32 \u003d\u003d 0) → B30 | else → B31",
      "B32 : If($z24 \u003d\u003d 0) → B33 | else → B36",
      "B33 : If($z30 !\u003d 0) → B34 | else → B36",
      "B34 : If($i25 \u003c 0) → B35 | else → B36",
      "B36 : If($z34 \u003d\u003d 0) → B37 | else → B38",
      "B38 : If($z25 !\u003d 0) → B39 | else → B41",
      "B39 : If($i22 \u003c 0) → B40 | else → B41",
      "B41 : If($z26 \u003d\u003d 0) → B42 | else → B44",
      "B42 : If($z29 \u003d\u003d 0) → B43 | else → B44",
      "B44 : If($z27 \u003d\u003d 0) → B45 | else → B50",
      "B45 : If(i39 !\u003d 0) → B46 | else → B49",
      "B46 : If($i38 \u003c 3) → B47 | else → B49",
      "B47 : If($z28 \u003d\u003d 0) → B48 | else → B49",
      "B51 : If($z22 !\u003d 0) → B52 | else → B55",
      "B52 : If($z23 \u003d\u003d 0) → B53 | else → B55",
      "B53 : If($i19 \u003c 0) → B54 | else → B55",
      "B56 : If($z13 \u003d\u003d 0) → B57 | else → B59",
      "B57 : If($z21 \u003d\u003d 0) → B58 | else → B59",
      "B59 : If($z14 !\u003d 0) → B60 | else → B63",
      "B60 : If($z19 \u003d\u003d 0) → B61 | else → B63",
      "B61 : If($z20 !\u003d 0) → B62 | else → B63",
      "B63 : If(i39 \u003c\u003d 0) → B64 | else → B67",
      "B64 : If($z17 !\u003d 0) → B65 | else → B110",
      "B65 : If($z18 \u003d\u003d 0) → B66 | else → B67",
      "B67 : If($z15 \u003d\u003d 0) → B68 | else → B69",
      "B70 : If($z16 !\u003d 0) → B71 | else → B74",
      "B71 : If($i14 \u003c 0) → B72 | else → B74",
      "B72 : If(z35 !\u003d 0) → B73 | else → B74",
      "B75 : If($z11 \u003d\u003d 0) → B76 | else → B77",
      "B77 : If(i39 \u003c\u003d 0) → B78 | else → B80",
      "B78 : If($i9 \u003c 0) → B79 | else → B80",
      "B80 : If($z12 \u003d\u003d 0) → B81 | else → B110",
      "B83 : If(i39 \u003c\u003d 0) → B84 | else → B86",
      "B84 : If($z10 !\u003d 0) → B85 | else → B110",
      "B87 : If($z9 \u003d\u003d 0) → B88 | else → B89",
      "B91 : If($z6 !\u003d 0) → B92 | else → B94",
      "B92 : If($z7 !\u003d 0) → B93 | else → B94",
      "B93 : If($z8 \u003d\u003d 0) → B94 | else → B95",
      "B96 : If($z2 !\u003d 0) → B97 | else → B98",
      "B97 : If($z3 \u003d\u003d 0) → B98 | else → B99",
      "B99 : If($z4 \u003d\u003d 0) → B100 | else → B101",
      "B101 : If($z5 \u003d\u003d 0) → B102 | else → B103",
      "B105 : If($z0 !\u003d 0) → B106 | else → B110",
      "B106 : If($z1 \u003d\u003d 0) → B107 | else → B110",
      "B111 : If($i42 \u003c\u003d $i43) → B112 | else → B113"
    ],
    "blockList": [
      "B0 {\n  Metaphone\n  String\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d r0.length()\n  if ($i0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $i1 \u003d r0.length()\n  if ($i1 !\u003d 1) goto B4 else B5\n}",
      "B4 {\n  $r13 \u003d Locale ENGLISH\u003e\n  $r14 \u003d r0.toUpperCase($r13)\n  return\n}",
      "B5 {\n  $r1 \u003d Locale ENGLISH\u003e\n  $r2 \u003d r0.toUpperCase($r1)\n  $r3 \u003d $r2.toCharArray()\n  $r15 \u003d StringBuilder\n  new StringBuilder(40)\n  $r16 \u003d StringBuilder\n  new StringBuilder(10)\n  $c2 \u003d $r3[0]\n  $i44 \u003d (int) $c2\n  StringBuilder append(char[])\u003e($r3); }\n}",
      "B6 {\n  $c32 \u003d $r3[1]\n  $i45 \u003d (int) $c32\n  if ($i45 !\u003d 78) goto B7 else B8\n}",
      "B7 {\n  $i33 \u003d lengthof $r3\n  $i34 \u003d $i33 - 1\n  $r15.append($r3, 1, $i34)\n  goto B19\n}",
      "B8 {\n  $r15.append($r3)\n  goto B19\n}",
      "B9 {\n  $c35 \u003d $r3[1]\n  $i46 \u003d (int) $c35\n  if ($i46 !\u003d 69) goto B10 else B11\n}",
      "B10 {\n  $i36 \u003d lengthof $r3\n  $i37 \u003d $i36 - 1\n  $r15.append($r3, 1, $i37)\n  goto B19\n}",
      "B11 {\n  $r15.append($r3)\n  goto B19\n}",
      "B12 {\n  $c26 \u003d $r3[1]\n  $i47 \u003d (int) $c26\n  if ($i47 !\u003d 82) goto B13 else B14\n}",
      "B13 {\n  $i30 \u003d lengthof $r3\n  $i31 \u003d $i30 - 1\n  $r15.append($r3, 1, $i31)\n  goto B19\n}",
      "B14 {\n  $c27 \u003d $r3[1]\n  $i48 \u003d (int) $c27\n  if ($i48 !\u003d 72) goto B15 else B16\n}",
      "B15 {\n  $i28 \u003d lengthof $r3\n  $i29 \u003d $i28 - 1\n  $r15.append($r3, 1, $i29)\n  $r15.setCharAt(0, 87)\n  goto B19\n}",
      "B16 {\n  $r15.append($r3)\n  goto B19\n}",
      "B17 {\n  $r3[0] \u003d 83\n  $r15.append($r3)\n  goto B19\n}",
      "B18 {\n  $r15.append($r3)\n}",
      "B19 {\n  $i38 \u003d $r15.length()\n  i39 \u003d 0\n}",
      "B20 {\n  $i40 \u003d $r16.length()\n  $i41 \u003d r6.getMaxCodeLen()\n  if ($i40 \u003e\u003d $i41) goto B21 else B114\n}",
      "B21 {\n  if (i39 \u003e\u003d $i38) goto B22 else B114\n}",
      "B22 {\n  $c3 \u003d $r15.charAt(i39)\n  $i49 \u003d (int) $c3\n  if ($i49 \u003d\u003d 67) goto B23 else B25\n}",
      "B23 {\n  $z33 \u003d r6.isPreviousChar($r15, i39, $c3)\n  if ($z33 \u003d\u003d 0) goto B24 else B25\n}",
      "B24 {\n  i39 \u003d i39 + 1\n  goto B111\n}",
      "B25 {\n  $i50 \u003d (int) $c3\n  StringBuilder append(char)\u003e(83);     default: goto i39 \u003d i39 + 1; }\n}",
      "B26 {\n  if (i39 !\u003d 0) goto B27 else B110\n}",
      "B27 {\n  $r16.append($c3)\n  goto B110\n}",
      "B28 {\n  $z31 \u003d r6.isPreviousChar($r15, i39, 77)\n  if ($z31 \u003d\u003d 0) goto B29 else B31\n}",
      "B29 {\n  $z32 \u003d r6.isLastChar($i38, i39)\n  if ($z32 \u003d\u003d 0) goto B30 else B31\n}",
      "B30 {\n  goto B110\n}",
      "B31 {\n  $r16.append($c3)\n  goto B110\n}",
      "B32 {\n  $z24 \u003d r6.isPreviousChar($r15, i39, 83)\n  if ($z24 \u003d\u003d 0) goto B33 else B36\n}",
      "B33 {\n  $z30 \u003d r6.isLastChar($i38, i39)\n  if ($z30 !\u003d 0) goto B34 else B36\n}",
      "B34 {\n  $r12 \u003d \"EIY\"\n  $i23 \u003d i39 + 1\n  $c24 \u003d $r15.charAt($i23)\n  $i51 \u003d (int) $c24\n  $i25 \u003d $r12.indexOf($i51)\n  if ($i25 \u003c 0) goto B35 else B36\n}",
      "B35 {\n  goto B110\n}",
      "B36 {\n  $z34 \u003d r6.regionMatch($r15, i39, \"CIA\")\n  if ($z34 \u003d\u003d 0) goto B37 else B38\n}",
      "B37 {\n  $r16.append(88)\n  goto B110\n}",
      "B38 {\n  $z25 \u003d r6.isLastChar($i38, i39)\n  if ($z25 !\u003d 0) goto B39 else B41\n}",
      "B39 {\n  $r11 \u003d \"EIY\"\n  $i20 \u003d i39 + 1\n  $c21 \u003d $r15.charAt($i20)\n  $i52 \u003d (int) $c21\n  $i22 \u003d $r11.indexOf($i52)\n  if ($i22 \u003c 0) goto B40 else B41\n}",
      "B40 {\n  $r16.append(83)\n  goto B110\n}",
      "B41 {\n  $z26 \u003d r6.isPreviousChar($r15, i39, 83)\n  if ($z26 \u003d\u003d 0) goto B42 else B44\n}",
      "B42 {\n  $z29 \u003d r6.isNextChar($r15, i39, 72)\n  if ($z29 \u003d\u003d 0) goto B43 else B44\n}",
      "B43 {\n  $r16.append(75)\n  goto B110\n}",
      "B44 {\n  $z27 \u003d r6.isNextChar($r15, i39, 72)\n  if ($z27 \u003d\u003d 0) goto B45 else B50\n}",
      "B45 {\n  if (i39 !\u003d 0) goto B46 else B49\n}",
      "B46 {\n  if ($i38 \u003c 3) goto B47 else B49\n}",
      "B47 {\n  $z28 \u003d r6.isVowel($r15, 2)\n  if ($z28 \u003d\u003d 0) goto B48 else B49\n}",
      "B48 {\n  $r16.append(75)\n  goto B110\n}",
      "B49 {\n  $r16.append(88)\n  goto B110\n}",
      "B50 {\n  $r16.append(75)\n  goto B110\n}",
      "B51 {\n  $i16 \u003d i39 + 1\n  $z22 \u003d r6.isLastChar($i38, $i16)\n  if ($z22 !\u003d 0) goto B52 else B55\n}",
      "B52 {\n  $z23 \u003d r6.isNextChar($r15, i39, 71)\n  if ($z23 \u003d\u003d 0) goto B53 else B55\n}",
      "B53 {\n  $r10 \u003d \"EIY\"\n  $i17 \u003d i39 + 2\n  $c18 \u003d $r15.charAt($i17)\n  $i53 \u003d (int) $c18\n  $i19 \u003d $r10.indexOf($i53)\n  if ($i19 \u003c 0) goto B54 else B55\n}",
      "B54 {\n  $r16.append(74)\n  i39 \u003d i39 + 2\n  goto B110\n}",
      "B55 {\n  $r16.append(84)\n  goto B110\n}",
      "B56 {\n  $i10 \u003d i39 + 1\n  $z13 \u003d r6.isLastChar($i38, $i10)\n  if ($z13 \u003d\u003d 0) goto B57 else B59\n}",
      "B57 {\n  $z21 \u003d r6.isNextChar($r15, i39, 72)\n  if ($z21 \u003d\u003d 0) goto B58 else B59\n}",
      "B58 {\n  goto B110\n}",
      "B59 {\n  $i11 \u003d i39 + 1\n  $z14 \u003d r6.isLastChar($i38, $i11)\n  if ($z14 !\u003d 0) goto B60 else B63\n}",
      "B60 {\n  $z19 \u003d r6.isNextChar($r15, i39, 72)\n  if ($z19 \u003d\u003d 0) goto B61 else B63\n}",
      "B61 {\n  $i15 \u003d i39 + 2\n  $z20 \u003d r6.isVowel($r15, $i15)\n  if ($z20 !\u003d 0) goto B62 else B63\n}",
      "B62 {\n  goto B110\n}",
      "B63 {\n  if (i39 \u003c\u003d 0) goto B64 else B67\n}",
      "B64 {\n  $z17 \u003d r6.regionMatch($r15, i39, \"GN\")\n  if ($z17 !\u003d 0) goto B65 else B110\n}",
      "B65 {\n  $z18 \u003d r6.regionMatch($r15, i39, \"GNED\")\n  if ($z18 \u003d\u003d 0) goto B66 else B67\n}",
      "B66 {\n  goto B110\n}",
      "B67 {\n  $z15 \u003d r6.isPreviousChar($r15, i39, 71)\n  if ($z15 \u003d\u003d 0) goto B68 else B69\n}",
      "B68 {\n  z35 \u003d 1\n  goto B70\n}",
      "B69 {\n  z35 \u003d 0\n}",
      "B70 {\n  $z16 \u003d r6.isLastChar($i38, i39)\n  if ($z16 !\u003d 0) goto B71 else B74\n}",
      "B71 {\n  $r9 \u003d \"EIY\"\n  $i12 \u003d i39 + 1\n  $c13 \u003d $r15.charAt($i12)\n  $i54 \u003d (int) $c13\n  $i14 \u003d $r9.indexOf($i54)\n  if ($i14 \u003c 0) goto B72 else B74\n}",
      "B72 {\n  if (z35 !\u003d 0) goto B73 else B74\n}",
      "B73 {\n  $r16.append(74)\n  goto B110\n}",
      "B74 {\n  $r16.append(75)\n  goto B110\n}",
      "B75 {\n  $z11 \u003d r6.isLastChar($i38, i39)\n  if ($z11 \u003d\u003d 0) goto B76 else B77\n}",
      "B76 {\n  goto B110\n}",
      "B77 {\n  if (i39 \u003c\u003d 0) goto B78 else B80\n}",
      "B78 {\n  $r8 \u003d \"CSPTG\"\n  $i7 \u003d i39 - 1\n  $c8 \u003d $r15.charAt($i7)\n  $i55 \u003d (int) $c8\n  $i9 \u003d $r8.indexOf($i55)\n  if ($i9 \u003c 0) goto B79 else B80\n}",
      "B79 {\n  goto B110\n}",
      "B80 {\n  $i6 \u003d i39 + 1\n  $z12 \u003d r6.isVowel($r15, $i6)\n  if ($z12 \u003d\u003d 0) goto B81 else B110\n}",
      "B81 {\n  $r16.append(72)\n  goto B110\n}",
      "B82 {\n  $r16.append($c3)\n  goto B110\n}",
      "B83 {\n  if (i39 \u003c\u003d 0) goto B84 else B86\n}",
      "B84 {\n  $z10 \u003d r6.isPreviousChar($r15, i39, 67)\n  if ($z10 !\u003d 0) goto B85 else B110\n}",
      "B85 {\n  $r16.append($c3)\n  goto B110\n}",
      "B86 {\n  $r16.append($c3)\n  goto B110\n}",
      "B87 {\n  $z9 \u003d r6.isNextChar($r15, i39, 72)\n  if ($z9 \u003d\u003d 0) goto B88 else B89\n}",
      "B88 {\n  $r16.append(70)\n  goto B110\n}",
      "B89 {\n  $r16.append($c3)\n  goto B110\n}",
      "B90 {\n  $r16.append(75)\n  goto B110\n}",
      "B91 {\n  $z6 \u003d r6.regionMatch($r15, i39, \"SH\")\n  if ($z6 !\u003d 0) goto B92 else B94\n}",
      "B92 {\n  $z7 \u003d r6.regionMatch($r15, i39, \"SIO\")\n  if ($z7 !\u003d 0) goto B93 else B94\n}",
      "B93 {\n  $z8 \u003d r6.regionMatch($r15, i39, \"SIA\")\n  if ($z8 \u003d\u003d 0) goto B94 else B95\n}",
      "B94 {\n  $r16.append(88)\n  goto B110\n}",
      "B95 {\n  $r16.append(83)\n  goto B110\n}",
      "B96 {\n  $z2 \u003d r6.regionMatch($r15, i39, \"TIA\")\n  if ($z2 !\u003d 0) goto B97 else B98\n}",
      "B97 {\n  $z3 \u003d r6.regionMatch($r15, i39, \"TIO\")\n  if ($z3 \u003d\u003d 0) goto B98 else B99\n}",
      "B98 {\n  $r16.append(88)\n  goto B110\n}",
      "B99 {\n  $z4 \u003d r6.regionMatch($r15, i39, \"TCH\")\n  if ($z4 \u003d\u003d 0) goto B100 else B101\n}",
      "B100 {\n  goto B110\n}",
      "B101 {\n  $z5 \u003d r6.regionMatch($r15, i39, \"TH\")\n  if ($z5 \u003d\u003d 0) goto B102 else B103\n}",
      "B102 {\n  $r16.append(48)\n  goto B110\n}",
      "B103 {\n  $r16.append(84)\n  goto B110\n}",
      "B104 {\n  $r16.append(70)\n  goto B110\n}",
      "B105 {\n  $z0 \u003d r6.isLastChar($i38, i39)\n  if ($z0 !\u003d 0) goto B106 else B110\n}",
      "B106 {\n  $i5 \u003d i39 + 1\n  $z1 \u003d r6.isVowel($r15, $i5)\n  if ($z1 \u003d\u003d 0) goto B107 else B110\n}",
      "B107 {\n  $r16.append($c3)\n  goto B110\n}",
      "B108 {\n  $r16.append(75)\n  $r16.append(83)\n  goto B110\n}",
      "B109 {\n  $r16.append(83)\n  goto B110\n}",
      "B110 {\n  i39 \u003d i39 + 1\n}",
      "B111 {\n  $i42 \u003d $r16.length()\n  $i43 \u003d r6.getMaxCodeLen()\n  if ($i42 \u003c\u003d $i43) goto B112 else B113\n}",
      "B112 {\n  $i4 \u003d r6.getMaxCodeLen()\n  $r16.setLength($i4)\n}",
      "B113 {\n  goto B20\n}",
      "B114 {\n  $r7 \u003d $r16.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B12",
      "B5 --\u003e B17",
      "B5 --\u003e B18",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B19",
      "B8 --\u003e B19",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B19",
      "B11 --\u003e B19",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B19",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B19",
      "B16 --\u003e B19",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B20 --\u003e B21",
      "B20 --\u003e B114",
      "B21 --\u003e B22",
      "B21 --\u003e B114",
      "B22 --\u003e B23",
      "B22 --\u003e B25",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B111",
      "B25 --\u003e B26",
      "B25 --\u003e B28",
      "B25 --\u003e B32",
      "B25 --\u003e B51",
      "B25 --\u003e B82",
      "B25 --\u003e B56",
      "B25 --\u003e B75",
      "B25 --\u003e B83",
      "B25 --\u003e B87",
      "B25 --\u003e B90",
      "B25 --\u003e B91",
      "B25 --\u003e B96",
      "B25 --\u003e B104",
      "B25 --\u003e B105",
      "B25 --\u003e B108",
      "B25 --\u003e B109",
      "B25 --\u003e B110",
      "B26 --\u003e B27",
      "B26 --\u003e B110",
      "B27 --\u003e B110",
      "B28 --\u003e B29",
      "B28 --\u003e B31",
      "B29 --\u003e B30",
      "B29 --\u003e B31",
      "B30 --\u003e B110",
      "B31 --\u003e B110",
      "B32 --\u003e B33",
      "B32 --\u003e B36",
      "B33 --\u003e B34",
      "B33 --\u003e B36",
      "B34 --\u003e B35",
      "B34 --\u003e B36",
      "B35 --\u003e B110",
      "B36 --\u003e B37",
      "B36 --\u003e B38",
      "B37 --\u003e B110",
      "B38 --\u003e B39",
      "B38 --\u003e B41",
      "B39 --\u003e B40",
      "B39 --\u003e B41",
      "B40 --\u003e B110",
      "B41 --\u003e B42",
      "B41 --\u003e B44",
      "B42 --\u003e B43",
      "B42 --\u003e B44",
      "B43 --\u003e B110",
      "B44 --\u003e B45",
      "B44 --\u003e B50",
      "B45 --\u003e B46",
      "B45 --\u003e B49",
      "B46 --\u003e B47",
      "B46 --\u003e B49",
      "B47 --\u003e B48",
      "B47 --\u003e B49",
      "B48 --\u003e B110",
      "B49 --\u003e B110",
      "B50 --\u003e B110",
      "B51 --\u003e B52",
      "B51 --\u003e B55",
      "B52 --\u003e B53",
      "B52 --\u003e B55",
      "B53 --\u003e B54",
      "B53 --\u003e B55",
      "B54 --\u003e B110",
      "B55 --\u003e B110",
      "B56 --\u003e B57",
      "B56 --\u003e B59",
      "B57 --\u003e B58",
      "B57 --\u003e B59",
      "B58 --\u003e B110",
      "B59 --\u003e B60",
      "B59 --\u003e B63",
      "B60 --\u003e B61",
      "B60 --\u003e B63",
      "B61 --\u003e B62",
      "B61 --\u003e B63",
      "B62 --\u003e B110",
      "B63 --\u003e B64",
      "B63 --\u003e B67",
      "B64 --\u003e B65",
      "B64 --\u003e B110",
      "B65 --\u003e B66",
      "B65 --\u003e B67",
      "B66 --\u003e B110",
      "B67 --\u003e B68",
      "B67 --\u003e B69",
      "B68 --\u003e B70",
      "B69 --\u003e B70",
      "B70 --\u003e B71",
      "B70 --\u003e B74",
      "B71 --\u003e B72",
      "B71 --\u003e B74",
      "B72 --\u003e B73",
      "B72 --\u003e B74",
      "B73 --\u003e B110",
      "B74 --\u003e B110",
      "B75 --\u003e B76",
      "B75 --\u003e B77",
      "B76 --\u003e B110",
      "B77 --\u003e B78",
      "B77 --\u003e B80",
      "B78 --\u003e B79",
      "B78 --\u003e B80",
      "B79 --\u003e B110",
      "B80 --\u003e B81",
      "B80 --\u003e B110",
      "B81 --\u003e B110",
      "B82 --\u003e B110",
      "B83 --\u003e B84",
      "B83 --\u003e B86",
      "B84 --\u003e B85",
      "B84 --\u003e B110",
      "B85 --\u003e B110",
      "B86 --\u003e B110",
      "B87 --\u003e B88",
      "B87 --\u003e B89",
      "B88 --\u003e B110",
      "B89 --\u003e B110",
      "B90 --\u003e B110",
      "B91 --\u003e B92",
      "B91 --\u003e B94",
      "B92 --\u003e B93",
      "B92 --\u003e B94",
      "B93 --\u003e B94",
      "B93 --\u003e B95",
      "B94 --\u003e B110",
      "B95 --\u003e B110",
      "B96 --\u003e B97",
      "B96 --\u003e B98",
      "B97 --\u003e B98",
      "B97 --\u003e B99",
      "B98 --\u003e B110",
      "B99 --\u003e B100",
      "B99 --\u003e B101",
      "B100 --\u003e B110",
      "B101 --\u003e B102",
      "B101 --\u003e B103",
      "B102 --\u003e B110",
      "B103 --\u003e B110",
      "B104 --\u003e B110",
      "B105 --\u003e B106",
      "B105 --\u003e B110",
      "B106 --\u003e B107",
      "B106 --\u003e B110",
      "B107 --\u003e B110",
      "B108 --\u003e B110",
      "B109 --\u003e B110",
      "B110 --\u003e B111",
      "B111 --\u003e B112",
      "B111 --\u003e B113",
      "B112 --\u003e B113",
      "B113 --\u003e B20",
      "B114 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.Metaphone",
    "methodName": "isVowel",
    "signature": "boolean isVowel(java.lang.StringBuilder,int)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003c 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Metaphone\n  StringBuilder\n  i0 :\u003d @parameter1: int\n  $r1 \u003d \"AEIOU\"\n  $c1 \u003d r0.charAt(i0)\n  $i3 \u003d (int) $c1\n  $i2 \u003d $r1.indexOf($i3)\n  if ($i2 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.Metaphone",
    "methodName": "isPreviousChar",
    "signature": "boolean isPreviousChar(java.lang.StringBuilder,int,char)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i0 \u003c\u003d 0) → B1 | else → B6",
      "B1 : If(i0 \u003e\u003d $i1) → B2 | else → B6",
      "B2 : If($i5 !\u003d $i6) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Metaphone\n  StringBuilder\n  i0 :\u003d @parameter1: int\n  c4 :\u003d @parameter2: char\n  z0 \u003d 0\n  if (i0 \u003c\u003d 0) goto B1 else B6\n}",
      "B1 {\n  $i1 \u003d r0.length()\n  if (i0 \u003e\u003d $i1) goto B2 else B6\n}",
      "B2 {\n  $i2 \u003d i0 - 1\n  $c3 \u003d r0.charAt($i2)\n  $i5 \u003d (int) $c3\n  $i6 \u003d (int) c4\n  if ($i5 !\u003d $i6) goto B3 else B4\n}",
      "B3 {\n  $z1 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z1 \u003d 0\n}",
      "B5 {\n  z0 \u003d $z1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.Metaphone",
    "methodName": "isNextChar",
    "signature": "boolean isNextChar(java.lang.StringBuilder,int,char)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B6",
      "B1 : If(i0 \u003e\u003d $i2) → B2 | else → B6",
      "B2 : If($i6 !\u003d $i7) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Metaphone\n  StringBuilder\n  i0 :\u003d @parameter1: int\n  c5 :\u003d @parameter2: char\n  z0 \u003d 0\n  if (i0 \u003c 0) goto B1 else B6\n}",
      "B1 {\n  $i1 \u003d r0.length()\n  $i2 \u003d $i1 - 1\n  if (i0 \u003e\u003d $i2) goto B2 else B6\n}",
      "B2 {\n  $i3 \u003d i0 + 1\n  $c4 \u003d r0.charAt($i3)\n  $i6 \u003d (int) $c4\n  $i7 \u003d (int) c5\n  if ($i6 !\u003d $i7) goto B3 else B4\n}",
      "B3 {\n  $z1 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z1 \u003d 0\n}",
      "B5 {\n  z0 \u003d $z1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.Metaphone",
    "methodName": "regionMatch",
    "signature": "boolean regionMatch(java.lang.StringBuilder,int,java.lang.String)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B3",
      "B1 : If($i3 \u003e\u003d $i4) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Metaphone\n  StringBuilder\n  i0 :\u003d @parameter1: int\n  String\n  z0 \u003d 0\n  if (i0 \u003c 0) goto B1 else B3\n}",
      "B1 {\n  $i1 \u003d r0.length()\n  $i2 \u003d i0 + $i1\n  $i3 \u003d $i2 - 1\n  $i4 \u003d r1.length()\n  if ($i3 \u003e\u003d $i4) goto B2 else B3\n}",
      "B2 {\n  $i5 \u003d r0.length()\n  $i6 \u003d i0 + $i5\n  $r2 \u003d r1.substring(i0, $i6)\n  z0 \u003d $r2.equals(r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.Metaphone",
    "methodName": "isLastChar",
    "signature": "boolean isLastChar(int,int)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 !\u003d i1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Metaphone\n  i1 :\u003d @parameter0: int\n  i0 :\u003d @parameter1: int\n  $i2 \u003d i0 + 1\n  if ($i2 !\u003d i1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.Metaphone",
    "methodName": "encode",
    "signature": "java.lang.Object encode(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Metaphone\n  Object\n  $z0 \u003d String\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d EncoderException\n  new EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\")\n  throw $r4\n}",
      "B2 {\n  $r2 \u003d String) r0\n  $r3 \u003d r1.metaphone($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.Nysiis",
    "methodName": "isVowel",
    "signature": "boolean isVowel(char)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [
      "B0 : If($i1 \u003d\u003d 65) → B1 | else → B5",
      "B1 : If($i2 \u003d\u003d 69) → B2 | else → B5",
      "B2 : If($i3 \u003d\u003d 73) → B3 | else → B5",
      "B3 : If($i4 \u003d\u003d 79) → B4 | else → B5",
      "B4 : If($i5 !\u003d 85) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  c0 :\u003d @parameter0: char\n  $i1 \u003d (int) c0\n  if ($i1 \u003d\u003d 65) goto B1 else B5\n}",
      "B1 {\n  $i2 \u003d (int) c0\n  if ($i2 \u003d\u003d 69) goto B2 else B5\n}",
      "B2 {\n  $i3 \u003d (int) c0\n  if ($i3 \u003d\u003d 73) goto B3 else B5\n}",
      "B3 {\n  $i4 \u003d (int) c0\n  if ($i4 \u003d\u003d 79) goto B4 else B5\n}",
      "B4 {\n  $i5 \u003d (int) c0\n  if ($i5 !\u003d 85) goto B5 else B6\n}",
      "B5 {\n  $z0 \u003d 1\n  goto B7\n}",
      "B6 {\n  $z0 \u003d 0\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.Nysiis",
    "methodName": "transcodeRemaining",
    "signature": "char[] transcodeRemaining(char,char,char,char)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 30,
    "edges": 36,
    "cc": 8,
    "flowSummary": [
      "B0 : If($i4 !\u003d 69) → B1 | else → B3",
      "B1 : If($i5 !\u003d 86) → B2 | else → B3",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5",
      "B5 : If($i6 !\u003d 81) → B6 | else → B7",
      "B7 : If($i7 !\u003d 90) → B8 | else → B9",
      "B9 : If($i8 !\u003d 77) → B10 | else → B11",
      "B11 : If($i9 !\u003d 75) → B12 | else → B15",
      "B12 : If($i10 !\u003d 78) → B13 | else → B14",
      "B15 : If($i11 !\u003d 83) → B16 | else → B19",
      "B16 : If($i12 !\u003d 67) → B17 | else → B19",
      "B17 : If($i13 !\u003d 72) → B18 | else → B19",
      "B19 : If($i14 !\u003d 80) → B20 | else → B22",
      "B20 : If($i15 !\u003d 72) → B21 | else → B22",
      "B22 : If($i16 !\u003d 72) → B23 | else → B26",
      "B23 : If($z2 \u003d\u003d 0) → B24 | else → B25",
      "B24 : If($z3 !\u003d 0) → B25 | else → B26",
      "B26 : If($i17 !\u003d 87) → B27 | else → B29",
      "B27 : If($z1 \u003d\u003d 0) → B28 | else → B29"
    ],
    "blockList": [
      "B0 {\n  c1 :\u003d @parameter0: char\n  c0 :\u003d @parameter1: char\n  c2 :\u003d @parameter2: char\n  c3 :\u003d @parameter3: char\n  $i4 \u003d (int) c0\n  if ($i4 !\u003d 69) goto B1 else B3\n}",
      "B1 {\n  $i5 \u003d (int) c2\n  if ($i5 !\u003d 86) goto B2 else B3\n}",
      "B2 {\n  $r11 \u003d Nysiis: char[] CHARS_AF\u003e\n  return\n}",
      "B3 {\n  $z0 \u003d Nysiis.isVowel(c0)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r10 \u003d Nysiis: char[] CHARS_A\u003e\n  return\n}",
      "B5 {\n  $i6 \u003d (int) c0\n  if ($i6 !\u003d 81) goto B6 else B7\n}",
      "B6 {\n  $r9 \u003d Nysiis: char[] CHARS_G\u003e\n  return\n}",
      "B7 {\n  $i7 \u003d (int) c0\n  if ($i7 !\u003d 90) goto B8 else B9\n}",
      "B8 {\n  $r8 \u003d Nysiis: char[] CHARS_S\u003e\n  return\n}",
      "B9 {\n  $i8 \u003d (int) c0\n  if ($i8 !\u003d 77) goto B10 else B11\n}",
      "B10 {\n  $r7 \u003d Nysiis: char[] CHARS_N\u003e\n  return\n}",
      "B11 {\n  $i9 \u003d (int) c0\n  if ($i9 !\u003d 75) goto B12 else B15\n}",
      "B12 {\n  $i10 \u003d (int) c2\n  if ($i10 !\u003d 78) goto B13 else B14\n}",
      "B13 {\n  $r6 \u003d Nysiis: char[] CHARS_NN\u003e\n  return\n}",
      "B14 {\n  $r5 \u003d Nysiis: char[] CHARS_C\u003e\n  return\n}",
      "B15 {\n  $i11 \u003d (int) c0\n  if ($i11 !\u003d 83) goto B16 else B19\n}",
      "B16 {\n  $i12 \u003d (int) c2\n  if ($i12 !\u003d 67) goto B17 else B19\n}",
      "B17 {\n  $i13 \u003d (int) c3\n  if ($i13 !\u003d 72) goto B18 else B19\n}",
      "B18 {\n  $r4 \u003d Nysiis: char[] CHARS_SSS\u003e\n  return\n}",
      "B19 {\n  $i14 \u003d (int) c0\n  if ($i14 !\u003d 80) goto B20 else B22\n}",
      "B20 {\n  $i15 \u003d (int) c2\n  if ($i15 !\u003d 72) goto B21 else B22\n}",
      "B21 {\n  $r3 \u003d Nysiis: char[] CHARS_FF\u003e\n  return\n}",
      "B22 {\n  $i16 \u003d (int) c0\n  if ($i16 !\u003d 72) goto B23 else B26\n}",
      "B23 {\n  $z2 \u003d Nysiis.isVowel(c1)\n  if ($z2 \u003d\u003d 0) goto B24 else B25\n}",
      "B24 {\n  $z3 \u003d Nysiis.isVowel(c2)\n  if ($z3 !\u003d 0) goto B25 else B26\n}",
      "B25 {\n  $r2 \u003d newarray (char)[1]\n  $r2[0] \u003d c1\n  return\n}",
      "B26 {\n  $i17 \u003d (int) c0\n  if ($i17 !\u003d 87) goto B27 else B29\n}",
      "B27 {\n  $z1 \u003d Nysiis.isVowel(c1)\n  if ($z1 \u003d\u003d 0) goto B28 else B29\n}",
      "B28 {\n  $r1 \u003d newarray (char)[1]\n  $r1[0] \u003d c1\n  return\n}",
      "B29 {\n  $r0 \u003d newarray (char)[1]\n  $r0[0] \u003d c0\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B16",
      "B15 --\u003e B19",
      "B16 --\u003e B17",
      "B16 --\u003e B19",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e B20",
      "B19 --\u003e B22",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e [EXIT]",
      "B22 --\u003e B23",
      "B22 --\u003e B26",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e [EXIT]",
      "B26 --\u003e B27",
      "B26 --\u003e B29",
      "B27 --\u003e B28",
      "B27 --\u003e B29",
      "B28 --\u003e [EXIT]",
      "B29 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.Nysiis",
    "methodName": "encode",
    "signature": "java.lang.Object encode(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Nysiis\n  Object\n  $z0 \u003d String\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d EncoderException\n  new EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\")\n  throw $r4\n}",
      "B2 {\n  $r2 \u003d String) r0\n  $r3 \u003d r1.nysiis($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.Nysiis",
    "methodName": "nysiis",
    "signature": "java.lang.String nysiis(java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 28,
    "edges": 38,
    "cc": 12,
    "flowSummary": [
      "B0 : If(r26 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i34 \u003e\u003d i3) → B6 | else → B15",
      "B6 : If(i34 \u003e\u003d $i22) → B7 | else → B8",
      "B9 : If(i34 \u003e\u003d $i23) → B10 | else → B11",
      "B12 : If($i39 \u003d\u003d $i40) → B13 | else → B14",
      "B15 : If($i4 \u003c\u003d 1) → B16 | else → B24",
      "B16 : If($i41 !\u003d 83) → B17 | else → B18",
      "B18 : If($i10 \u003c\u003d 2) → B19 | else → B22",
      "B19 : If($i42 !\u003d 65) → B20 | else → B22",
      "B20 : If($i43 !\u003d 89) → B21 | else → B22",
      "B22 : If($i44 !\u003d 65) → B23 | else → B24",
      "B24 : If($z0 \u003d\u003d 0) → B25 | else → B26"
    ],
    "blockList": [
      "B0 {\n  Nysiis\n  String\n  if (r26 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r0 \u003d SoundexUtils.clean(r26)\n  $i0 \u003d $r0.length()\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r1 \u003d Pattern PAT_MAC\u003e\n  $r2 \u003d $r1.matcher($r0)\n  $r3 \u003d $r2.replaceFirst(\"MCC\")\n  $r4 \u003d Pattern PAT_KN\u003e\n  $r5 \u003d $r4.matcher($r3)\n  $r6 \u003d $r5.replaceFirst(\"NN\")\n  $r7 \u003d Pattern PAT_K\u003e\n  $r8 \u003d $r7.matcher($r6)\n  $r9 \u003d $r8.replaceFirst(\"C\")\n  $r10 \u003d Pattern PAT_PH_PF\u003e\n  $r11 \u003d $r10.matcher($r9)\n  $r12 \u003d $r11.replaceFirst(\"FF\")\n  $r13 \u003d Pattern PAT_SCH\u003e\n  $r14 \u003d $r13.matcher($r12)\n  $r15 \u003d $r14.replaceFirst(\"SSS\")\n  $r16 \u003d Pattern PAT_EE_IE\u003e\n  $r17 \u003d $r16.matcher($r15)\n  $r18 \u003d $r17.replaceFirst(\"Y\")\n  $r19 \u003d Pattern PAT_DT_ETC\u003e\n  $r20 \u003d $r19.matcher($r18)\n  $r21 \u003d $r20.replaceFirst(\"D\")\n  $r29 \u003d StringBuilder\n  $i1 \u003d $r21.length()\n  new StringBuilder($i1)\n  $c2 \u003d $r21.charAt(0)\n  $r29.append($c2)\n  $r23 \u003d $r21.toCharArray()\n  i3 \u003d lengthof $r23\n  i34 \u003d 1\n}",
      "B5 {\n  if (i34 \u003e\u003d i3) goto B6 else B15\n}",
      "B6 {\n  $i22 \u003d i3 - 1\n  if (i34 \u003e\u003d $i22) goto B7 else B8\n}",
      "B7 {\n  $i33 \u003d i34 + 1\n  $c35 \u003d $r23[$i33]\n  goto B9\n}",
      "B8 {\n  $c35 \u003d 32\n}",
      "B9 {\n  c36 \u003d $c35\n  $i23 \u003d i3 - 2\n  if (i34 \u003e\u003d $i23) goto B10 else B11\n}",
      "B10 {\n  $i32 \u003d i34 + 2\n  $c37 \u003d $r23[$i32]\n  goto B12\n}",
      "B11 {\n  $c37 \u003d 32\n}",
      "B12 {\n  $i24 \u003d i34 - 1\n  $c26 \u003d $r23[$i24]\n  $c25 \u003d $r23[i34]\n  $r25 \u003d Nysiis.transcodeRemaining($c26, $c25, c36, $c37)\n  $i27 \u003d lengthof $r25\n  System.arraycopy($r25, 0, $r23, i34, $i27)\n  $c30 \u003d $r23[i34]\n  $i28 \u003d i34 - 1\n  $c29 \u003d $r23[$i28]\n  $i39 \u003d (int) $c30\n  $i40 \u003d (int) $c29\n  if ($i39 \u003d\u003d $i40) goto B13 else B14\n}",
      "B13 {\n  $c31 \u003d $r23[i34]\n  $r29.append($c31)\n}",
      "B14 {\n  i34 \u003d i34 + 1\n  goto B5\n}",
      "B15 {\n  $i4 \u003d $r29.length()\n  if ($i4 \u003c\u003d 1) goto B16 else B24\n}",
      "B16 {\n  $i7 \u003d $r29.length()\n  $i8 \u003d $i7 - 1\n  $c9 \u003d $r29.charAt($i8)\n  c38 \u003d $c9\n  $i41 \u003d (int) $c9\n  if ($i41 !\u003d 83) goto B17 else B18\n}",
      "B17 {\n  $i18 \u003d $r29.length()\n  $i19 \u003d $i18 - 1\n  $r29.deleteCharAt($i19)\n  $i20 \u003d $r29.length()\n  $i21 \u003d $i20 - 1\n  c38 \u003d $r29.charAt($i21)\n}",
      "B18 {\n  $i10 \u003d $r29.length()\n  if ($i10 \u003c\u003d 2) goto B19 else B22\n}",
      "B19 {\n  $i13 \u003d $r29.length()\n  $i14 \u003d $i13 - 2\n  $c15 \u003d $r29.charAt($i14)\n  $i42 \u003d (int) $c15\n  if ($i42 !\u003d 65) goto B20 else B22\n}",
      "B20 {\n  $i43 \u003d (int) c38\n  if ($i43 !\u003d 89) goto B21 else B22\n}",
      "B21 {\n  $i16 \u003d $r29.length()\n  $i17 \u003d $i16 - 2\n  $r29.deleteCharAt($i17)\n}",
      "B22 {\n  $i44 \u003d (int) c38\n  if ($i44 !\u003d 65) goto B23 else B24\n}",
      "B23 {\n  $i11 \u003d $r29.length()\n  $i12 \u003d $i11 - 1\n  $r29.deleteCharAt($i12)\n}",
      "B24 {\n  $r27 \u003d $r29.toString()\n  $z0 \u003d r24.isStrict()\n  if ($z0 \u003d\u003d 0) goto B25 else B26\n}",
      "B25 {\n  $i5 \u003d $r27.length()\n  $i6 \u003d Math.min(6, $i5)\n  $r28 \u003d $r27.substring(0, $i6)\n  goto B27\n}",
      "B26 {\n  $r28 \u003d $r27\n}",
      "B27 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B15",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B5",
      "B15 --\u003e B16",
      "B15 --\u003e B24",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e B19",
      "B18 --\u003e B22",
      "B19 --\u003e B20",
      "B19 --\u003e B22",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B24",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B27",
      "B27 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.RefinedSoundex",
    "methodName": "encode",
    "signature": "java.lang.Object encode(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  RefinedSoundex\n  Object\n  $z0 \u003d String\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d EncoderException\n  new EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\")\n  throw $r4\n}",
      "B2 {\n  $r2 \u003d String) r0\n  $r3 \u003d r1.soundex($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.RefinedSoundex",
    "methodName": "getMappingCode",
    "signature": "char getMappingCode(char)",
    "visibility": "package",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  RefinedSoundex\n  c0 :\u003d @parameter0: char\n  $z0 \u003d Character.isLetter(c0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d RefinedSoundex: char[] soundexMapping\u003e\n  $c1 \u003d Character.toUpperCase(c0)\n  $i4 \u003d (int) $c1\n  $i2 \u003d $i4 - 65\n  $c3 \u003d $r1[$i2]\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.RefinedSoundex",
    "methodName": "soundex",
    "signature": "java.lang.String soundex(java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 13,
    "edges": 15,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i6 \u003e\u003d $i2) → B6 | else → B12",
      "B6 : If($i7 !\u003d i5) → B7 | else → B8",
      "B8 : If($c4 \u003d\u003d 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  RefinedSoundex\n  String\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r0 \u003d SoundexUtils.clean(r4)\n  $i0 \u003d $r0.length()\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r5 \u003d StringBuilder\n  new StringBuilder()\n  $c1 \u003d $r0.charAt(0)\n  $r5.append($c1)\n  i5 \u003d 42\n  i6 \u003d 0\n}",
      "B5 {\n  $i2 \u003d $r0.length()\n  if (i6 \u003e\u003d $i2) goto B6 else B12\n}",
      "B6 {\n  $c3 \u003d $r0.charAt(i6)\n  $c4 \u003d r3.getMappingCode($c3)\n  $i7 \u003d (int) $c4\n  if ($i7 !\u003d i5) goto B7 else B8\n}",
      "B7 {\n  goto B11\n}",
      "B8 {\n  if ($c4 \u003d\u003d 0) goto B9 else B10\n}",
      "B9 {\n  $r5.append($c4)\n}",
      "B10 {\n  i5 \u003d $c4\n}",
      "B11 {\n  i6 \u003d i6 + 1\n  goto B5\n}",
      "B12 {\n  $r2 \u003d $r5.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B12",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B11 --\u003e B5",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.Soundex",
    "methodName": "encode",
    "signature": "java.lang.Object encode(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Soundex\n  Object\n  $z0 \u003d String\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d EncoderException\n  new EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\")\n  throw $r4\n}",
      "B2 {\n  $r2 \u003d String) r0\n  $r3 \u003d r1.soundex($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.Soundex",
    "methodName": "getMappingCode",
    "signature": "char getMappingCode(java.lang.String,int)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 9,
    "edges": 14,
    "cc": 7,
    "flowSummary": [
      "B0 : If(i0 \u003c\u003d 1) → B1 | else → B8",
      "B1 : If($i8 \u003d\u003d 48) → B2 | else → B8",
      "B2 : If(72 \u003d\u003d $i9) → B3 | else → B4",
      "B3 : If(87 !\u003d $i10) → B4 | else → B8",
      "B4 : If($i11 \u003d\u003d $i12) → B5 | else → B7",
      "B5 : If(72 \u003d\u003d $i13) → B6 | else → B7",
      "B6 : If(87 !\u003d $i14) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  Soundex\n  String\n  i0 :\u003d @parameter1: int\n  $c1 \u003d r1.charAt(i0)\n  $c2 \u003d r0.map($c1)\n  if (i0 \u003c\u003d 1) goto B1 else B8\n}",
      "B1 {\n  $i8 \u003d (int) $c2\n  if ($i8 \u003d\u003d 48) goto B2 else B8\n}",
      "B2 {\n  $i3 \u003d i0 - 1\n  $c4 \u003d r1.charAt($i3)\n  $i9 \u003d (int) $c4\n  if (72 \u003d\u003d $i9) goto B3 else B4\n}",
      "B3 {\n  $i10 \u003d (int) $c4\n  if (87 !\u003d $i10) goto B4 else B8\n}",
      "B4 {\n  $i5 \u003d i0 - 2\n  $c6 \u003d r1.charAt($i5)\n  $c7 \u003d r0.map($c6)\n  $i11 \u003d (int) $c7\n  $i12 \u003d (int) $c2\n  if ($i11 \u003d\u003d $i12) goto B5 else B7\n}",
      "B5 {\n  $i13 \u003d (int) $c6\n  if (72 \u003d\u003d $i13) goto B6 else B7\n}",
      "B6 {\n  $i14 \u003d (int) $c6\n  if (87 !\u003d $i14) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B8",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.Soundex",
    "methodName": "map",
    "signature": "char map(char)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i1 \u003c 0) → B1 | else → B2",
      "B1 : If(i1 \u003c $i2) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Soundex\n  c0 :\u003d @parameter0: char\n  $i4 \u003d (int) c0\n  i1 \u003d $i4 - 65\n  if (i1 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r2.getSoundexMapping()\n  $i2 \u003d lengthof $r3\n  if (i1 \u003c $i2) goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d IllegalArgumentException\n  $r1 \u003d dynInvoke makeConcatWithConstants(c0)\n  new IllegalArgumentException($r1)\n  throw $r5\n}",
      "B3 {\n  $r4 \u003d r2.getSoundexMapping()\n  $c3 \u003d $r4[i1]\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.language.Soundex",
    "methodName": "soundex",
    "signature": "java.lang.String soundex(java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 13,
    "edges": 17,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B5 : If(i6 \u003e\u003d $i9) → B6 | else → B12",
      "B6 : If(i7 \u003e\u003d $i2) → B7 | else → B12",
      "B7 : If($c4 \u003d\u003d 0) → B8 | else → B5",
      "B8 : If($i10 \u003d\u003d 48) → B9 | else → B11",
      "B9 : If($i11 \u003d\u003d $i12) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  Soundex\n  String\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r0 \u003d SoundexUtils.clean(r4)\n  $i0 \u003d $r0.length()\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r1 \u003d newarray (char)[4]\n  $r1[0] \u003d 48\n  $r1[1] \u003d 48\n  $r1[2] \u003d 48\n  $r1[3] \u003d 48\n  i6 \u003d 1\n  i7 \u003d 1\n  $c1 \u003d $r0.charAt(0)\n  $r1[0] \u003d $c1\n  c8 \u003d r2.getMappingCode($r0, 0)\n}",
      "B5 {\n  $i9 \u003d $r0.length()\n  if (i6 \u003e\u003d $i9) goto B6 else B12\n}",
      "B6 {\n  $i2 \u003d lengthof $r1\n  if (i7 \u003e\u003d $i2) goto B7 else B12\n}",
      "B7 {\n  $i3 \u003d i6\n  i6 \u003d i6 + 1\n  $c4 \u003d r2.getMappingCode($r0, $i3)\n  if ($c4 \u003d\u003d 0) goto B8 else B5\n}",
      "B8 {\n  $i10 \u003d (int) $c4\n  if ($i10 \u003d\u003d 48) goto B9 else B11\n}",
      "B9 {\n  $i11 \u003d (int) $c4\n  $i12 \u003d (int) c8\n  if ($i11 \u003d\u003d $i12) goto B10 else B11\n}",
      "B10 {\n  $i5 \u003d i7\n  i7 \u003d i7 + 1\n  $r1[$i5] \u003d $c4\n}",
      "B11 {\n  c8 \u003d $c4\n  goto B5\n}",
      "B12 {\n  $r5 \u003d String\n  new String($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B12",
      "B6 --\u003e B7",
      "B6 --\u003e B12",
      "B7 --\u003e B8",
      "B7 --\u003e B5",
      "B8 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B5",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.BCodec",
    "methodName": "doEncoding",
    "signature": "byte[] doEncoding(byte[])",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BCodec\n  r0 :\u003d @parameter0: byte[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d Base64.encodeBase64(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.BCodec",
    "methodName": "doDecoding",
    "signature": "byte[] doDecoding(byte[])",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BCodec\n  r0 :\u003d @parameter0: byte[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d Base64.decodeBase64(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.BCodec",
    "methodName": "encode",
    "signature": "java.lang.String encode(java.lang.String,java.nio.charset.Charset)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BCodec\n  String\n  Charset\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d r1.encodeText(r0, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.BCodec",
    "methodName": "encode",
    "signature": "java.lang.String encode(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BCodec\n  String\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d r1.encodeText(r0, r2)\n  return\n}",
      "B3 {\n  $r4 :\u003d @caughtexception\n  $r5 \u003d EncoderException\n  $r6 \u003d $r4.getMessage()\n  new EncoderException($r6, $r4)\n  throw $r5\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.BCodec",
    "methodName": "encode",
    "signature": "java.lang.String encode(java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BCodec\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d r1.getCharset()\n  $r3 \u003d r1.encode(r0, $r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.BCodec",
    "methodName": "decode",
    "signature": "java.lang.String decode(java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BCodec\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d r1.decodeText(r0)\n  return\n}",
      "B3 {\n  $r3 :\u003d @caughtexception\n  $r4 \u003d DecoderException\n  $r5 \u003d $r3.getMessage()\n  new DecoderException($r5, $r3)\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.BCodec",
    "methodName": "encode",
    "signature": "java.lang.Object encode(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  BCodec\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d String\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d String) r0\n  $r7 \u003d r5.encode($r6)\n  return\n}",
      "B4 {\n  $r1 \u003d EncoderException\n  $r2 \u003d r0.getClass()\n  $r3 \u003d $r2.getName()\n  $r4 \u003d dynInvoke makeConcatWithConstants($r3)\n  new EncoderException($r4)\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.BCodec",
    "methodName": "decode",
    "signature": "java.lang.Object decode(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  BCodec\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d String\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d String) r0\n  $r7 \u003d r5.decode($r6)\n  return\n}",
      "B4 {\n  $r1 \u003d DecoderException\n  $r2 \u003d r0.getClass()\n  $r3 \u003d $r2.getName()\n  $r4 \u003d dynInvoke makeConcatWithConstants($r3)\n  new DecoderException($r4)\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.QCodec",
    "methodName": "doEncoding",
    "signature": "byte[] doEncoding(byte[])",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B8",
      "B4 : If(i2 \u003e\u003d $i0) → B5 | else → B8",
      "B5 : If($i3 !\u003d 32) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  QCodec\n  r0 :\u003d @parameter0: byte[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d BitSet PRINTABLE_CHARS\u003e\n  $r2 \u003d QuotedPrintableCodec.encodeQuotedPrintable($r1, r0)\n  $z0 \u003d QCodec: boolean encodeBlanks\u003e\n  if ($z0 \u003d\u003d 0) goto B3 else B8\n}",
      "B3 {\n  i2 \u003d 0\n}",
      "B4 {\n  $i0 \u003d lengthof $r2\n  if (i2 \u003e\u003d $i0) goto B5 else B8\n}",
      "B5 {\n  $b1 \u003d $r2[i2]\n  $i3 \u003d (int) $b1\n  if ($i3 !\u003d 32) goto B6 else B7\n}",
      "B6 {\n  $r2[i2] \u003d 95\n}",
      "B7 {\n  i2 \u003d i2 + 1\n  goto B4\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B8",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B4",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.QCodec",
    "methodName": "doDecoding",
    "signature": "byte[] doDecoding(byte[])",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 16,
    "edges": 19,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i4 \u003e\u003d i3) → B4 | else → B7",
      "B4 : If($i7 !\u003d 95) → B5 | else → B6",
      "B7 : If(z0 \u003d\u003d 0) → B8 | else → B15",
      "B9 : If(i5 \u003e\u003d $i1) → B10 | else → B14",
      "B10 : If($i8 \u003d\u003d 95) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  QCodec\n  r0 :\u003d @parameter0: byte[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  z0 \u003d 0\n  i3 \u003d lengthof r0\n  i4 \u003d 0\n}",
      "B3 {\n  if (i4 \u003e\u003d i3) goto B4 else B7\n}",
      "B4 {\n  b2 \u003d r0[i4]\n  $i7 \u003d (int) b2\n  if ($i7 !\u003d 95) goto B5 else B6\n}",
      "B5 {\n  z0 \u003d 1\n  goto B7\n}",
      "B6 {\n  i4 \u003d i4 + 1\n  goto B3\n}",
      "B7 {\n  if (z0 \u003d\u003d 0) goto B8 else B15\n}",
      "B8 {\n  $i0 \u003d lengthof r0\n  r4 \u003d newarray (byte)[$i0]\n  i5 \u003d 0\n}",
      "B9 {\n  $i1 \u003d lengthof r0\n  if (i5 \u003e\u003d $i1) goto B10 else B14\n}",
      "B10 {\n  b6 \u003d r0[i5]\n  $i8 \u003d (int) b6\n  if ($i8 \u003d\u003d 95) goto B11 else B12\n}",
      "B11 {\n  r4[i5] \u003d b6\n  goto B13\n}",
      "B12 {\n  r4[i5] \u003d 32\n}",
      "B13 {\n  i5 \u003d i5 + 1\n  goto B9\n}",
      "B14 {\n  $r2 \u003d QuotedPrintableCodec.decodeQuotedPrintable(r4)\n  return\n}",
      "B15 {\n  $r1 \u003d QuotedPrintableCodec.decodeQuotedPrintable(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B3",
      "B7 --\u003e B8",
      "B7 --\u003e B15",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B14",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B9",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.QCodec",
    "methodName": "encode",
    "signature": "java.lang.String encode(java.lang.String,java.nio.charset.Charset)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  QCodec\n  String\n  Charset\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d r1.encodeText(r0, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.QCodec",
    "methodName": "encode",
    "signature": "java.lang.String encode(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  QCodec\n  String\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d r1.encodeText(r0, r2)\n  return\n}",
      "B3 {\n  $r4 :\u003d @caughtexception\n  $r5 \u003d EncoderException\n  $r6 \u003d $r4.getMessage()\n  new EncoderException($r6, $r4)\n  throw $r5\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.QCodec",
    "methodName": "encode",
    "signature": "java.lang.String encode(java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  QCodec\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d r1.getCharset()\n  $r3 \u003d r1.encode(r0, $r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.QCodec",
    "methodName": "decode",
    "signature": "java.lang.String decode(java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  QCodec\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d r1.decodeText(r0)\n  return\n}",
      "B3 {\n  $r3 :\u003d @caughtexception\n  $r4 \u003d DecoderException\n  $r5 \u003d $r3.getMessage()\n  new DecoderException($r5, $r3)\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.QCodec",
    "methodName": "encode",
    "signature": "java.lang.Object encode(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  QCodec\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d String\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d String) r0\n  $r7 \u003d r5.encode($r6)\n  return\n}",
      "B4 {\n  $r1 \u003d EncoderException\n  $r2 \u003d r0.getClass()\n  $r3 \u003d $r2.getName()\n  $r4 \u003d dynInvoke makeConcatWithConstants($r3)\n  new EncoderException($r4)\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.QCodec",
    "methodName": "decode",
    "signature": "java.lang.Object decode(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  QCodec\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d String\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d String) r0\n  $r7 \u003d r5.decode($r6)\n  return\n}",
      "B4 {\n  $r1 \u003d DecoderException\n  $r2 \u003d r0.getClass()\n  $r3 \u003d $r2.getName()\n  $r4 \u003d dynInvoke makeConcatWithConstants($r3)\n  new DecoderException($r4)\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.QuotedPrintableCodec",
    "methodName": "encodeQuotedPrintable",
    "signature": "byte[] encodeQuotedPrintable(java.util.BitSet,byte[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 13,
    "edges": 16,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r3 !\u003d null) → B3 | else → B4",
      "B5 : If(i2 \u003e\u003d $i1) → B6 | else → B12",
      "B6 : If($i5 \u003e\u003d 0) → B7 | else → B8",
      "B8 : If($z0 \u003d\u003d 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  BitSet\n  r0 :\u003d @parameter1: byte[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r3 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  r3 \u003d BitSet PRINTABLE_CHARS\u003e\n}",
      "B4 {\n  $r4 \u003d ByteArrayOutputStream\n  new ByteArrayOutputStream()\n  $i1 \u003d lengthof r0\n  i2 \u003d 0\n}",
      "B5 {\n  if (i2 \u003e\u003d $i1) goto B6 else B12\n}",
      "B6 {\n  b0 \u003d r0[i2]\n  $i4 \u003d (int) b0\n  i3 \u003d $i4\n  $i5 \u003d (int) b0\n  if ($i5 \u003e\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $i6 \u003d (int) b0\n  i3 \u003d 256 + $i6\n}",
      "B8 {\n  $z0 \u003d r3.get(i3)\n  if ($z0 \u003d\u003d 0) goto B9 else B10\n}",
      "B9 {\n  $r4.write(i3)\n  goto B11\n}",
      "B10 {\n  QuotedPrintableCodec.encodeQuotedPrintable(i3, $r4)\n}",
      "B11 {\n  i2 \u003d i2 + 1\n  goto B5\n}",
      "B12 {\n  $r2 \u003d $r4.toByteArray()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B12",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B5",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.QuotedPrintableCodec",
    "methodName": "decodeQuotedPrintable",
    "signature": "byte[] decodeQuotedPrintable(byte[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 18,
    "edges": 26,
    "cc": 10,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i9 \u003e\u003d $i0) → B4 | else → B17",
      "B4 : If($i11 !\u003d 61) → B5 | else → B15"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r5 \u003d ByteArrayOutputStream\n  new ByteArrayOutputStream()\n  i9 \u003d 0\n}",
      "B3 {\n  $i0 \u003d lengthof r0\n  if (i9 \u003e\u003d $i0) goto B4 else B9\n}",
      "B4 {\n  b1 \u003d r0[i9]\n  $i11 \u003d (int) b1\n  if ($i11 !\u003d 61) goto B5 else B7\n}",
      "B5 {\n  i10 \u003d i9 + 1\n  $b2 \u003d r0[i10]\n  $i3 \u003d Utils.digit16($b2)\n  i9 \u003d i10 + 1\n  $b4 \u003d r0[i9]\n  $i5 \u003d Utils.digit16($b4)\n  $i6 \u003d $i3 \u003c\u003c 4\n  $i7 \u003d $i6 + $i5\n  $c8 \u003d (char) $i7\n  $i12 \u003d (int) $c8\n  $r5.write($i12)\n  goto B8\n}",
      "B6 {\n  $r3 :\u003d @caughtexception\n  $r6 \u003d DecoderException\n  new DecoderException(\"Invalid quoted-printable encoding\", $r3)\n  throw $r6\n}",
      "B7 {\n  $i13 \u003d (int) b1\n  $r5.write($i13)\n}",
      "B8 {\n  i9 \u003d i9 + 1\n  goto B3\n}",
      "B9 {\n  $r2 \u003d $r5.toByteArray()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B8",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B8 --\u003e B3",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.QuotedPrintableCodec",
    "methodName": "decode",
    "signature": "java.lang.String decode(java.lang.String,java.nio.charset.Charset)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  QuotedPrintableCodec\n  String\n  Charset\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d String\n  $r3 \u003d StringUtils.getBytesUsAscii(r0)\n  $r4 \u003d r2.decode($r3)\n  new String($r4, r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.QuotedPrintableCodec",
    "methodName": "decode",
    "signature": "java.lang.String decode(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  QuotedPrintableCodec\n  String\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d String\n  $r3 \u003d StringUtils.getBytesUsAscii(r0)\n  $r4 \u003d r2.decode($r3)\n  new String($r4, r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.QuotedPrintableCodec",
    "methodName": "encode",
    "signature": "java.lang.Object encode(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  QuotedPrintableCodec\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r0 instanceof byte[]\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r8 \u003d (byte[]) r0\n  $r9 \u003d r5.encode($r8)\n  return\n}",
      "B4 {\n  $z1 \u003d String\n  if ($z1 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r6 \u003d String) r0\n  $r7 \u003d r5.encode($r6)\n  return\n}",
      "B6 {\n  $r1 \u003d EncoderException\n  $r2 \u003d r0.getClass()\n  $r3 \u003d $r2.getName()\n  $r4 \u003d dynInvoke makeConcatWithConstants($r3)\n  new EncoderException($r4)\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.QuotedPrintableCodec",
    "methodName": "decode",
    "signature": "java.lang.Object decode(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  QuotedPrintableCodec\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r0 instanceof byte[]\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r8 \u003d (byte[]) r0\n  $r9 \u003d r5.decode($r8)\n  return\n}",
      "B4 {\n  $z1 \u003d String\n  if ($z1 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r6 \u003d String) r0\n  $r7 \u003d r5.decode($r6)\n  return\n}",
      "B6 {\n  $r1 \u003d DecoderException\n  $r2 \u003d r0.getClass()\n  $r3 \u003d $r2.getName()\n  $r4 \u003d dynInvoke makeConcatWithConstants($r3)\n  new DecoderException($r4)\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.QuotedPrintableCodec",
    "methodName": "encode",
    "signature": "java.lang.String encode(java.lang.String,java.nio.charset.Charset)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  QuotedPrintableCodec\n  String\n  Charset\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d r0.getBytes(r2)\n  $r4 \u003d r1.encode($r3)\n  $r5 \u003d StringUtils.newStringUsAscii($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.QuotedPrintableCodec",
    "methodName": "encode",
    "signature": "java.lang.String encode(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  QuotedPrintableCodec\n  String\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d r0.getBytes(r2)\n  $r4 \u003d r1.encode($r3)\n  $r5 \u003d StringUtils.newStringUsAscii($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.URLCodec",
    "methodName": "encodeUrl",
    "signature": "byte[] encodeUrl(java.util.BitSet,byte[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 15,
    "edges": 19,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r3 !\u003d null) → B3 | else → B4",
      "B5 : If(i9 \u003e\u003d $i8) → B6 | else → B14",
      "B6 : If($i12 \u003e\u003d 0) → B7 | else → B8",
      "B8 : If($z0 \u003d\u003d 0) → B9 | else → B12",
      "B9 : If(i10 !\u003d 32) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  BitSet\n  r0 :\u003d @parameter1: byte[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r3 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  r3 \u003d BitSet WWW_FORM_URL\u003e\n}",
      "B4 {\n  $r4 \u003d ByteArrayOutputStream\n  new ByteArrayOutputStream()\n  $i8 \u003d lengthof r0\n  i9 \u003d 0\n}",
      "B5 {\n  if (i9 \u003e\u003d $i8) goto B6 else B14\n}",
      "B6 {\n  b0 \u003d r0[i9]\n  $i11 \u003d (int) b0\n  i10 \u003d $i11\n  $i12 \u003d (int) b0\n  if ($i12 \u003e\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $i13 \u003d (int) b0\n  i10 \u003d 256 + $i13\n}",
      "B8 {\n  $z0 \u003d r3.get(i10)\n  if ($z0 \u003d\u003d 0) goto B9 else B12\n}",
      "B9 {\n  if (i10 !\u003d 32) goto B10 else B11\n}",
      "B10 {\n  i10 \u003d 43\n}",
      "B11 {\n  $r4.write(i10)\n  goto B13\n}",
      "B12 {\n  $r4.write(37)\n  $i1 \u003d i10 \u003e\u003e 4\n  $i2 \u003d $i1 \u0026 15\n  $c3 \u003d Character.forDigit($i2, 16)\n  $c4 \u003d Character.toUpperCase($c3)\n  $i5 \u003d i10 \u0026 15\n  $c6 \u003d Character.forDigit($i5, 16)\n  $c7 \u003d Character.toUpperCase($c6)\n  $i14 \u003d (int) $c4\n  $r4.write($i14)\n  $i15 \u003d (int) $c7\n  $r4.write($i15)\n}",
      "B13 {\n  i9 \u003d i9 + 1\n  goto B5\n}",
      "B14 {\n  $r2 \u003d $r4.toByteArray()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B14",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B12",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B5",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.URLCodec",
    "methodName": "decodeUrl",
    "signature": "byte[] decodeUrl(byte[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 20,
    "edges": 29,
    "cc": 11,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i9 \u003e\u003d $i0) → B4 | else → B19",
      "B4 : If($i11 !\u003d 43) → B5 | else → B6",
      "B6 : If($i12 !\u003d 37) → B7 | else → B17"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r5 \u003d ByteArrayOutputStream\n  new ByteArrayOutputStream()\n  i9 \u003d 0\n}",
      "B3 {\n  $i0 \u003d lengthof r0\n  if (i9 \u003e\u003d $i0) goto B4 else B11\n}",
      "B4 {\n  b1 \u003d r0[i9]\n  $i11 \u003d (int) b1\n  if ($i11 !\u003d 43) goto B5 else B6\n}",
      "B5 {\n  $r5.write(32)\n  goto B10\n}",
      "B6 {\n  $i12 \u003d (int) b1\n  if ($i12 !\u003d 37) goto B7 else B9\n}",
      "B7 {\n  i10 \u003d i9 + 1\n  $b2 \u003d r0[i10]\n  $i3 \u003d Utils.digit16($b2)\n  i9 \u003d i10 + 1\n  $b4 \u003d r0[i9]\n  $i5 \u003d Utils.digit16($b4)\n  $i6 \u003d $i3 \u003c\u003c 4\n  $i7 \u003d $i6 + $i5\n  $c8 \u003d (char) $i7\n  $i13 \u003d (int) $c8\n  $r5.write($i13)\n  goto B10\n}",
      "B8 {\n  $r3 :\u003d @caughtexception\n  $r6 \u003d DecoderException\n  new DecoderException(\"Invalid URL encoding: \", $r3)\n  throw $r6\n}",
      "B9 {\n  $i14 \u003d (int) b1\n  $r5.write($i14)\n}",
      "B10 {\n  i9 \u003d i9 + 1\n  goto B3\n}",
      "B11 {\n  $r2 \u003d $r5.toByteArray()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B11",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B10",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B10 --\u003e B3",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.URLCodec",
    "methodName": "encode",
    "signature": "java.lang.String encode(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  URLCodec\n  String\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d r0.getBytes(r2)\n  $r4 \u003d r1.encode($r3)\n  $r5 \u003d StringUtils.newStringUsAscii($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.URLCodec",
    "methodName": "encode",
    "signature": "java.lang.String encode(java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  URLCodec\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d r1.getDefaultCharset()\n  $r3 \u003d r1.encode(r0, $r2)\n  return\n}",
      "B3 {\n  $r4 :\u003d @caughtexception\n  $r5 \u003d EncoderException\n  $r6 \u003d $r4.getMessage()\n  new EncoderException($r6, $r4)\n  throw $r5\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.URLCodec",
    "methodName": "decode",
    "signature": "java.lang.String decode(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  URLCodec\n  String\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d String\n  $r3 \u003d StringUtils.getBytesUsAscii(r0)\n  $r4 \u003d r2.decode($r3)\n  new String($r4, r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.URLCodec",
    "methodName": "decode",
    "signature": "java.lang.String decode(java.lang.String)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  URLCodec\n  String\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d r1.getDefaultCharset()\n  $r3 \u003d r1.decode(r0, $r2)\n  return\n}",
      "B3 {\n  $r4 :\u003d @caughtexception\n  $r5 \u003d DecoderException\n  $r6 \u003d $r4.getMessage()\n  new DecoderException($r6, $r4)\n  throw $r5\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.URLCodec",
    "methodName": "encode",
    "signature": "java.lang.Object encode(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  URLCodec\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r0 instanceof byte[]\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r8 \u003d (byte[]) r0\n  $r9 \u003d r5.encode($r8)\n  return\n}",
      "B4 {\n  $z1 \u003d String\n  if ($z1 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r6 \u003d String) r0\n  $r7 \u003d r5.encode($r6)\n  return\n}",
      "B6 {\n  $r1 \u003d EncoderException\n  $r2 \u003d r0.getClass()\n  $r3 \u003d $r2.getName()\n  $r4 \u003d dynInvoke makeConcatWithConstants($r3)\n  new EncoderException($r4)\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.net.URLCodec",
    "methodName": "decode",
    "signature": "java.lang.Object decode(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  URLCodec\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d r0 instanceof byte[]\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r8 \u003d (byte[]) r0\n  $r9 \u003d r5.decode($r8)\n  return\n}",
      "B4 {\n  $z1 \u003d String\n  if ($z1 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r6 \u003d String) r0\n  $r7 \u003d r5.decode($r6)\n  return\n}",
      "B6 {\n  $r1 \u003d DecoderException\n  $r2 \u003d r0.getClass()\n  $r3 \u003d $r2.getName()\n  $r4 \u003d dynInvoke makeConcatWithConstants($r3)\n  new DecoderException($r4)\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.codec.StringEncoderComparator",
    "methodName": "compare",
    "signature": "int compare(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 9,
    "edges": 14,
    "cc": 7,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  StringEncoderComparator\n  Object\n  Object\n  $r2 \u003d StringEncoder stringEncoder\u003e\n  $r3 \u003d $r2.encode(r1)\n  r9 \u003d Comparable) $r3\n  $r5 \u003d StringEncoder stringEncoder\u003e\n  $r6 \u003d $r5.encode(r4)\n  r7 \u003d Comparable) $r6\n  i0 \u003d r9.compareTo(r7)\n  goto B2\n}",
      "B1 {\n  $r8 :\u003d @caughtexception\n  i0 \u003d 0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  }
]