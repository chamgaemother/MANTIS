[
  {
    "clazz": "org.apache.commons.jxpath.BasicNodeSet",
    "methodName": "add",
    "signature": "void add(org.apache.commons.jxpath.NodeSet)",
    "visibility": "public",
    "body": "{\r\n    if (pointers.addAll(nodeSet.getPointers())) {\r\n        clear();\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BasicNodeSet\n  NodeSet\n  $r2 \u003d List pointers\u003e\n  $r3 \u003d r1.getPointers()\n  $z0 \u003d $r2.addAll($r3)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r0.clear()\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BasicNodeSet#clear(...0)",
        "body": "{\r\n    readOnlyPointers \u003d null;\r\n    nodes \u003d null;\r\n    values \u003d null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.BasicNodeSet",
    "methodName": "add",
    "signature": "void add(org.apache.commons.jxpath.Pointer)",
    "visibility": "public",
    "body": "{\r\n    if (pointers.add(pointer)) {\r\n        clear();\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BasicNodeSet\n  Pointer\n  $r2 \u003d List pointers\u003e\n  $z0 \u003d $r2.add(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r0.clear()\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BasicNodeSet#clear(...0)",
        "body": "{\r\n    readOnlyPointers \u003d null;\r\n    nodes \u003d null;\r\n    values \u003d null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.BasicNodeSet",
    "methodName": "getNodes",
    "signature": "java.util.List getNodes()",
    "visibility": "public",
    "body": "{\r\n    if (nodes \u003d\u003d null) {\r\n        nodes \u003d Collections.unmodifiableList(pointers.stream().map(Pointer::getNode).collect(Collectors.toList()));\r\n    }\r\n    return nodes;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BasicNodeSet\n  $r1 \u003d List nodes\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d List pointers\u003e\n  $r5 \u003d $r3.stream()\n  $r4 \u003d BasicNodeSet$getNode__1.bootstrap$()\n  $r7 \u003d $r5.map($r4)\n  $r6 \u003d Collectors.toList()\n  $r8 \u003d $r7.collect($r6)\n  $r9 \u003d List) $r8\n  $r10 \u003d Collections.unmodifiableList($r9)\n  List nodes\u003e \u003d $r10\n}",
      "B2 {\n  $r2 \u003d List nodes\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.BasicNodeSet",
    "methodName": "getPointers",
    "signature": "java.util.List getPointers()",
    "visibility": "public",
    "body": "{\r\n    if (readOnlyPointers \u003d\u003d null) {\r\n        readOnlyPointers \u003d Collections.unmodifiableList(pointers);\r\n    }\r\n    return readOnlyPointers;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BasicNodeSet\n  $r1 \u003d List readOnlyPointers\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d List pointers\u003e\n  $r4 \u003d Collections.unmodifiableList($r3)\n  List readOnlyPointers\u003e \u003d $r4\n}",
      "B2 {\n  $r2 \u003d List readOnlyPointers\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.BasicNodeSet",
    "methodName": "getValues",
    "signature": "java.util.List getValues()",
    "visibility": "public",
    "body": "{\r\n    if (values \u003d\u003d null) {\r\n        values \u003d Collections.unmodifiableList(pointers.stream().map(Pointer::getValue).collect(Collectors.toList()));\r\n    }\r\n    return values;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BasicNodeSet\n  $r1 \u003d List values\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d List pointers\u003e\n  $r5 \u003d $r3.stream()\n  $r4 \u003d BasicNodeSet$getValue__2.bootstrap$()\n  $r7 \u003d $r5.map($r4)\n  $r6 \u003d Collectors.toList()\n  $r8 \u003d $r7.collect($r6)\n  $r9 \u003d List) $r8\n  $r10 \u003d Collections.unmodifiableList($r9)\n  List values\u003e \u003d $r10\n}",
      "B2 {\n  $r2 \u003d List values\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.BasicNodeSet",
    "methodName": "remove",
    "signature": "void remove(org.apache.commons.jxpath.Pointer)",
    "visibility": "public",
    "body": "{\r\n    if (pointers.remove(pointer)) {\r\n        clear();\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BasicNodeSet\n  Pointer\n  $r2 \u003d List pointers\u003e\n  $z0 \u003d $r2.remove(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r0.clear()\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BasicNodeSet#clear(...0)",
        "body": "{\r\n    readOnlyPointers \u003d null;\r\n    nodes \u003d null;\r\n    values \u003d null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.BasicVariables",
    "methodName": "getVariable",
    "signature": "java.lang.Object getVariable(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    // Note that a variable may be defined with a null value\r\n    if (vars.containsKey(varName)) {\r\n        return vars.get(varName);\r\n    }\r\n    throw new IllegalArgumentException(\"No such variable: \u0027\" + varName + \"\u0027\");\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BasicVariables\n  String\n  $r2 \u003d HashMap vars\u003e\n  $z0 \u003d $r2.containsKey(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d HashMap vars\u003e\n  $r10 \u003d $r9.get(r1)\n  return\n}",
      "B2 {\n  $r3 \u003d IllegalArgumentException\n  $r4 \u003d StringBuilder\n  new StringBuilder()\n  $r5 \u003d $r4.append(\"No such variable: \\\u0027\")\n  $r6 \u003d $r5.append(r1)\n  $r7 \u003d $r6.append(\"\\\u0027\")\n  $r8 \u003d $r7.toString()\n  new IllegalArgumentException($r8)\n  throw $r3\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ClassFunctions",
    "methodName": "getFunction",
    "signature": "org.apache.commons.jxpath.Function getFunction(java.lang.String,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    if (namespace \u003d\u003d null) {\r\n        if (this.namespace !\u003d null) {\r\n            return null;\r\n        }\r\n    } else if (!namespace.equals(this.namespace)) {\r\n        return null;\r\n    }\r\n    if (parameters \u003d\u003d null) {\r\n        parameters \u003d EMPTY_ARRAY;\r\n    }\r\n    if (name.equals(\"new\")) {\r\n        final Constructor constructor \u003d MethodLookupUtils.lookupConstructor(functionClass, parameters);\r\n        if (constructor !\u003d null) {\r\n            return new ConstructorFunction(constructor);\r\n        }\r\n    } else {\r\n        Method method \u003d MethodLookupUtils.lookupStaticMethod(functionClass, name, parameters);\r\n        if (method !\u003d null) {\r\n            return new MethodFunction(method);\r\n        }\r\n        method \u003d MethodLookupUtils.lookupMethod(functionClass, name, parameters);\r\n        if (method !\u003d null) {\r\n            return new MethodFunction(method);\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 16,
    "edges": 18,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B3",
      "B1 : If($r10 \u003d\u003d null) → B2 | else → B5",
      "B3 : If($z0 !\u003d 0) → B4 | else → B5",
      "B5 : If(r11 !\u003d null) → B6 | else → B7",
      "B7 : If($z1 \u003d\u003d false) → B8 | else → B11",
      "B8 : If(r12 \u003d\u003d null) → B9 | else → B10",
      "B11 : If(r13 \u003d\u003d null) → B12 | else → B13",
      "B13 : If(r14 \u003d\u003d null) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  ClassFunctions\n  String\n  String\n  Object[]\n  if (r0 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r10 \u003d String namespace\u003e\n  if ($r10 \u003d\u003d null) goto B2 else B5\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r2 \u003d String namespace\u003e\n  $z0 \u003d r0.equals($r2)\n  if ($z0 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  if (r11 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  r11 \u003d Object[] EMPTY_ARRAY\u003e\n}",
      "B7 {\n  $z1 \u003d r3.equals(\"new\")\n  if ($z1 \u003d\u003d false) goto B8 else B11\n}",
      "B8 {\n  $r8 \u003d Class functionClass\u003e\n  r12 \u003d MethodLookupUtils.lookupConstructor($r8, r11)\n  if (r12 \u003d\u003d null) goto B9 else B10\n}",
      "B9 {\n  $r9 \u003d ConstructorFunction\n  new ConstructorFunction(r12)\n  return\n}",
      "B10 {\n  goto B15\n}",
      "B11 {\n  $r4 \u003d Class functionClass\u003e\n  r13 \u003d MethodLookupUtils.lookupStaticMethod($r4, r3, r11)\n  if (r13 \u003d\u003d null) goto B12 else B13\n}",
      "B12 {\n  $r7 \u003d MethodFunction\n  new MethodFunction(r13)\n  return\n}",
      "B13 {\n  $r5 \u003d Class functionClass\u003e\n  r14 \u003d MethodLookupUtils.lookupMethod($r5, r3, r11)\n  if (r14 \u003d\u003d null) goto B14 else B15\n}",
      "B14 {\n  $r6 \u003d MethodFunction\n  new MethodFunction(r14)\n  return\n}",
      "B15 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B15",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.FunctionLibrary",
    "methodName": "getFunction",
    "signature": "org.apache.commons.jxpath.Function getFunction(java.lang.String,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    final Object candidates \u003d functionCache().get(namespace);\r\n    if (candidates instanceof Functions) {\r\n        return ((Functions) candidates).getFunction(namespace, name, parameters);\r\n    }\r\n    if (candidates instanceof List) {\r\n        final List\u003cFunctions\u003e list \u003d (List\u003cFunctions\u003e) candidates;\r\n        final int count \u003d list.size();\r\n        for (int i \u003d 0; i \u003c count; i++) {\r\n            final Function function \u003d list.get(i).getFunction(namespace, name, parameters);\r\n            if (function !\u003d null) {\r\n                return function;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B8",
      "B4 : If(i1 \u003e\u003d i0) → B5 | else → B8",
      "B5 : If(r9 \u003d\u003d null) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  FunctionLibrary\n  String\n  String\n  Object[]\n  $r2 \u003d r0.functionCache()\n  r3 \u003d $r2.get(r1)\n  $z0 \u003d Functions\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d Functions) r3\n  $r11 \u003d $r10.getFunction(r1, r6, r7)\n  return\n}",
      "B2 {\n  $z1 \u003d List\n  if ($z1 \u003d\u003d false) goto B3 else B8\n}",
      "B3 {\n  r4 \u003d List) r3\n  i0 \u003d r4.size()\n  i1 \u003d 0\n}",
      "B4 {\n  if (i1 \u003e\u003d i0) goto B5 else B8\n}",
      "B5 {\n  $r5 \u003d r4.get(i1)\n  $r8 \u003d Functions) $r5\n  r9 \u003d $r8.getFunction(r1, r6, r7)\n  if (r9 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  i1 \u003d i1 + 1\n  goto B4\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B8",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B4",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FunctionLibrary#functionCache(...0)",
        "body": "{\r\n    if (byNamespace \u003d\u003d null) {\r\n        byNamespace \u003d new HashMap\u003c\u003e();\r\n        final int count \u003d allFunctions.size();\r\n        for (int i \u003d 0; i \u003c count; i++) {\r\n            final Functions funcs \u003d allFunctions.get(i);\r\n            final Set\u003cString\u003e namespaces \u003d funcs.getUsedNamespaces();\r\n            for (final String ns : namespaces) {\r\n                final Object candidates \u003d byNamespace.get(ns);\r\n                if (candidates \u003d\u003d null) {\r\n                    byNamespace.put(ns, funcs);\r\n                } else if (candidates instanceof Functions) {\r\n                    final List\u003cObject\u003e lst \u003d new ArrayList\u003c\u003e();\r\n                    lst.add(candidates);\r\n                    lst.add(funcs);\r\n                    byNamespace.put(ns, lst);\r\n                } else {\r\n                    ((List) candidates).add(funcs);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return byNamespace;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.functions.ConstructorFunction",
    "methodName": "invoke",
    "signature": "java.lang.Object invoke(org.apache.commons.jxpath.ExpressionContext,java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    try {\r\n        Object[] args;\r\n        if (parameters \u003d\u003d null) {\r\n            parameters \u003d EMPTY_ARRAY;\r\n        }\r\n        int pi \u003d 0;\r\n        final Class[] types \u003d constructor.getParameterTypes();\r\n        if (types.length \u003e 0 \u0026\u0026 ExpressionContext.class.isAssignableFrom(types[0])) {\r\n            pi \u003d 1;\r\n        }\r\n        args \u003d new Object[parameters.length + pi];\r\n        if (pi \u003d\u003d 1) {\r\n            args[0] \u003d context;\r\n        }\r\n        for (int i \u003d 0; i \u003c parameters.length; i++) {\r\n            args[i + pi] \u003d TypeUtils.convert(parameters[i], types[i + pi]);\r\n        }\r\n        return constructor.newInstance(args);\r\n    } catch (Throwable ex) {\r\n        if (ex instanceof InvocationTargetException) {\r\n            ex \u003d ((InvocationTargetException) ex).getTargetException();\r\n        }\r\n        throw new JXPathInvalidAccessException(\"Cannot invoke constructor \" + constructor, ex);\r\n    }\r\n}",
    "nodes": 14,
    "edges": 18,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r19 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 \u003c\u003d 0) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5",
      "B5 : If(z5 !\u003d 1) → B6 | else → B7",
      "B8 : If(i5 \u003e\u003d $i6) → B9 | else → B10",
      "B11 : If($z1 \u003d\u003d false) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  ConstructorFunction\n  ExpressionContext\n  Object[]\n  if (r19 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r19 \u003d Object[] EMPTY_ARRAY\u003e\n}",
      "B2 {\n  z2 \u003d 0\n  z6 \u003d 0\n  z5 \u003d 0\n  z4 \u003d 0\n  z3 \u003d 0\n  $r1 \u003d Constructor constructor\u003e\n  $r10 \u003d $r1.getParameterTypes()\n  $i0 \u003d lengthof $r10\n  if ($i0 \u003c\u003d 0) goto B3 else B5\n}",
      "B3 {\n  $r9 \u003d class \"Lorg/apache/commons/jxpath/ExpressionContext;\"\n  $r8 \u003d $r10[0]\n  $z0 \u003d $r9.isAssignableFrom($r8)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  z2 \u003d 1\n  z6 \u003d 1\n  z5 \u003d 1\n  z4 \u003d 1\n  z3 \u003d 1\n}",
      "B5 {\n  $i3 \u003d lengthof r19\n  $i4 \u003d $i3 + z4\n  $r20 \u003d Object)[$i4]\n  if (z5 !\u003d 1) goto B6 else B7\n}",
      "B6 {\n  $r20[0] \u003d r7\n}",
      "B7 {\n  i5 \u003d 0\n}",
      "B8 {\n  $i6 \u003d lengthof r19\n  if (i5 \u003e\u003d $i6) goto B9 else B10\n}",
      "B9 {\n  $i2 \u003d i5 + z3\n  $r5 \u003d r19[i5]\n  $i1 \u003d i5 + z6\n  $r4 \u003d $r10[$i1]\n  $r6 \u003d TypeUtils.convert($r5, $r4)\n  $r20[$i2] \u003d $r6\n  i5 \u003d i5 + 1\n  goto B8\n}",
      "B10 {\n  $r2 \u003d Constructor constructor\u003e\n  $r3 \u003d $r2.newInstance($r20)\n  return\n}",
      "B11 {\n  $r11 :\u003d @caughtexception\n  r21 \u003d $r11\n  $z1 \u003d InvocationTargetException\n  if ($z1 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $r18 \u003d InvocationTargetException) $r11\n  r21 \u003d $r18.getTargetException()\n}",
      "B13 {\n  $r12 \u003d JXPathInvalidAccessException\n  $r13 \u003d StringBuilder\n  new StringBuilder()\n  $r15 \u003d $r13.append(\"Cannot invoke constructor \")\n  $r14 \u003d Constructor constructor\u003e\n  $r16 \u003d $r15.append($r14)\n  $r17 \u003d $r16.toString()\n  new JXPathInvalidAccessException($r17, r21)\n  throw $r12\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B8",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.functions.MethodFunction",
    "methodName": "invoke",
    "signature": "java.lang.Object invoke(org.apache.commons.jxpath.ExpressionContext,java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    try {\r\n        Object target;\r\n        Object[] args;\r\n        if (Modifier.isStatic(method.getModifiers())) {\r\n            target \u003d null;\r\n            if (parameters \u003d\u003d null) {\r\n                parameters \u003d EMPTY_ARRAY;\r\n            }\r\n            int pi \u003d 0;\r\n            final Class[] types \u003d method.getParameterTypes();\r\n            if (types.length \u003e\u003d 1 \u0026\u0026 ExpressionContext.class.isAssignableFrom(types[0])) {\r\n                pi \u003d 1;\r\n            }\r\n            args \u003d new Object[parameters.length + pi];\r\n            if (pi \u003d\u003d 1) {\r\n                args[0] \u003d context;\r\n            }\r\n            for (int i \u003d 0; i \u003c parameters.length; i++) {\r\n                args[i + pi] \u003d TypeUtils.convert(parameters[i], types[i + pi]);\r\n            }\r\n        } else {\r\n            int pi \u003d 0;\r\n            final Class[] types \u003d method.getParameterTypes();\r\n            if (types.length \u003e\u003d 1 \u0026\u0026 ExpressionContext.class.isAssignableFrom(types[0])) {\r\n                pi \u003d 1;\r\n            }\r\n            target \u003d TypeUtils.convert(parameters[0], method.getDeclaringClass());\r\n            args \u003d new Object[parameters.length - 1 + pi];\r\n            if (pi \u003d\u003d 1) {\r\n                args[0] \u003d context;\r\n            }\r\n            for (int i \u003d 1; i \u003c parameters.length; i++) {\r\n                args[pi + i - 1] \u003d TypeUtils.convert(parameters[i], types[i + pi - 1]);\r\n            }\r\n        }\r\n        return method.invoke(target, args);\r\n    } catch (Throwable ex) {\r\n        if (ex instanceof InvocationTargetException) {\r\n            ex \u003d ((InvocationTargetException) ex).getTargetException();\r\n        }\r\n        throw new JXPathInvalidAccessException(\"Cannot invoke \" + method, ex);\r\n    }\r\n}",
    "nodes": 24,
    "edges": 33,
    "cc": 11,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B12",
      "B1 : If(r26 !\u003d null) → B2 | else → B3",
      "B3 : If($i6 \u003c 1) → B4 | else → B6",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B6",
      "B6 : If(z10 !\u003d 1) → B7 | else → B8",
      "B9 : If(i11 \u003e\u003d $i12) → B10 | else → B11",
      "B12 : If($i1 \u003c 1) → B13 | else → B15",
      "B13 : If($z1 \u003d\u003d false) → B14 | else → B15",
      "B15 : If(z8 !\u003d 1) → B16 | else → B17",
      "B18 : If(i16 \u003e\u003d $i17) → B19 | else → B20",
      "B21 : If($z3 \u003d\u003d false) → B22 | else → B23"
    ],
    "blockList": [
      "B0 {\n  MethodFunction\n  ExpressionContext\n  Object[]\n  $r1 \u003d Method method\u003e\n  $i0 \u003d $r1.getModifiers()\n  $z0 \u003d Modifier.isStatic($i0)\n  if ($z0 \u003d\u003d false) goto B1 else B12\n}",
      "B1 {\n  r27 \u003d null\n  if (r26 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  r26 \u003d Object[] EMPTY_ARRAY\u003e\n}",
      "B3 {\n  z4 \u003d 0\n  z13 \u003d 0\n  z12 \u003d 0\n  z11 \u003d 0\n  z10 \u003d 0\n  $r11 \u003d Method method\u003e\n  $r17 \u003d $r11.getParameterTypes()\n  $i6 \u003d lengthof $r17\n  if ($i6 \u003c 1) goto B4 else B6\n}",
      "B4 {\n  $r16 \u003d class \"Lorg/apache/commons/jxpath/ExpressionContext;\"\n  $r15 \u003d $r17[0]\n  $z2 \u003d $r16.isAssignableFrom($r15)\n  if ($z2 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  z4 \u003d 1\n  z13 \u003d 1\n  z12 \u003d 1\n  z11 \u003d 1\n  z10 \u003d 1\n}",
      "B6 {\n  $i9 \u003d lengthof r26\n  $i10 \u003d $i9 + z13\n  $r28 \u003d Object)[$i10]\n  r29 \u003d $r28\n  if (z10 !\u003d 1) goto B7 else B8\n}",
      "B7 {\n  $r28[0] \u003d r8\n}",
      "B8 {\n  i11 \u003d 0\n}",
      "B9 {\n  $i12 \u003d lengthof r26\n  if (i11 \u003e\u003d $i12) goto B10 else B11\n}",
      "B10 {\n  $i8 \u003d i11 + z12\n  $r13 \u003d r26[i11]\n  $i7 \u003d i11 + z11\n  $r12 \u003d $r17[$i7]\n  $r14 \u003d TypeUtils.convert($r13, $r12)\n  $r28[$i8] \u003d $r14\n  i11 \u003d i11 + 1\n  goto B9\n}",
      "B11 {\n  goto B20\n}",
      "B12 {\n  z5 \u003d 0\n  z9 \u003d 0\n  z8 \u003d 0\n  z7 \u003d 0\n  z6 \u003d 0\n  $r2 \u003d Method method\u003e\n  r30 \u003d $r2.getParameterTypes()\n  $i1 \u003d lengthof r30\n  if ($i1 \u003c 1) goto B13 else B15\n}",
      "B13 {\n  $r10 \u003d class \"Lorg/apache/commons/jxpath/ExpressionContext;\"\n  $r9 \u003d r30[0]\n  $z1 \u003d $r10.isAssignableFrom($r9)\n  if ($z1 \u003d\u003d false) goto B14 else B15\n}",
      "B14 {\n  z5 \u003d 1\n  z9 \u003d 1\n  z8 \u003d 1\n  z7 \u003d 1\n  z6 \u003d 1\n}",
      "B15 {\n  $r31 \u003d r26[0]\n  $r32 \u003d Method method\u003e\n  $r33 \u003d $r32.getDeclaringClass()\n  r27 \u003d TypeUtils.convert($r31, $r33)\n  $i13 \u003d lengthof r26\n  $i14 \u003d $i13 - 1\n  $i15 \u003d $i14 + z7\n  $r34 \u003d Object)[$i15]\n  r29 \u003d $r34\n  if (z8 !\u003d 1) goto B16 else B17\n}",
      "B16 {\n  $r34[0] \u003d r8\n}",
      "B17 {\n  i16 \u003d 1\n}",
      "B18 {\n  $i17 \u003d lengthof r26\n  if (i16 \u003e\u003d $i17) goto B19 else B20\n}",
      "B19 {\n  $i2 \u003d z6 + i16\n  $i5 \u003d $i2 - 1\n  $r6 \u003d r26[i16]\n  $i3 \u003d i16 + z9\n  $i4 \u003d $i3 - 1\n  $r5 \u003d r30[$i4]\n  $r7 \u003d TypeUtils.convert($r6, $r5)\n  $r34[$i5] \u003d $r7\n  i16 \u003d i16 + 1\n  goto B18\n}",
      "B20 {\n  $r3 \u003d Method method\u003e\n  $r4 \u003d $r3.invoke(r27, r29)\n  return\n}",
      "B21 {\n  $r18 :\u003d @caughtexception\n  r35 \u003d $r18\n  $z3 \u003d InvocationTargetException\n  if ($z3 \u003d\u003d false) goto B22 else B23\n}",
      "B22 {\n  $r25 \u003d InvocationTargetException) $r18\n  r35 \u003d $r25.getTargetException()\n}",
      "B23 {\n  $r19 \u003d JXPathInvalidAccessException\n  $r20 \u003d StringBuilder\n  new StringBuilder()\n  $r22 \u003d $r20.append(\"Cannot invoke \")\n  $r21 \u003d Method method\u003e\n  $r23 \u003d $r22.append($r21)\n  $r24 \u003d $r23.toString()\n  new JXPathInvalidAccessException($r24, r35)\n  throw $r19\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B12",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B9",
      "B11 --\u003e B20",
      "B12 --\u003e B13",
      "B12 --\u003e B15",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e B18",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B18",
      "B20 --\u003e [EXIT]",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B23",
      "B23 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.JXPathBasicBeanInfo",
    "methodName": "getPropertyDescriptor",
    "signature": "java.beans.PropertyDescriptor getPropertyDescriptor(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (propertyDescriptorMap \u003d\u003d null) {\r\n        propertyDescriptorMap \u003d new HashMap\u003c\u003e();\r\n        final PropertyDescriptor[] pds \u003d getPropertyDescriptors();\r\n        for (final PropertyDescriptor pd : pds) {\r\n            propertyDescriptorMap.put(pd.getName(), pd);\r\n        }\r\n    }\r\n    return propertyDescriptorMap.get(propertyName);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B4",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  JXPathBasicBeanInfo\n  String\n  $r1 \u003d HashMap propertyDescriptorMap\u003e\n  if ($r1 !\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r6 \u003d HashMap\n  new HashMap()\n  HashMap propertyDescriptorMap\u003e \u003d $r6\n  r7 \u003d r0.getPropertyDescriptors()\n  i0 \u003d lengthof r7\n  i1 \u003d 0\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B4\n}",
      "B3 {\n  r8 \u003d r7[i1]\n  $r9 \u003d HashMap propertyDescriptorMap\u003e\n  $r10 \u003d r8.getName()\n  $r9.put($r10, r8)\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B4 {\n  $r3 \u003d HashMap propertyDescriptorMap\u003e\n  $r4 \u003d $r3.get(r2)\n  $r5 \u003d PropertyDescriptor) $r4\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JXPathBasicBeanInfo#getPropertyDescriptors(...0)",
        "body": "{\r\n    if (propertyDescriptors \u003d\u003d null) {\r\n        if (clazz \u003d\u003d Object.class) {\r\n            propertyDescriptors \u003d new PropertyDescriptor[0];\r\n        } else {\r\n            try {\r\n                BeanInfo bi;\r\n                if (clazz.isInterface()) {\r\n                    bi \u003d Introspector.getBeanInfo(clazz);\r\n                } else {\r\n                    bi \u003d Introspector.getBeanInfo(clazz, Object.class);\r\n                }\r\n                final PropertyDescriptor[] pds \u003d bi.getPropertyDescriptors();\r\n                final PropertyDescriptor[] descriptors \u003d new PropertyDescriptor[pds.length];\r\n                System.arraycopy(pds, 0, descriptors, 0, pds.length);\r\n                Arrays.sort(descriptors, PROPERTY_DESCRIPTOR_COMPARATOR);\r\n                propertyDescriptors \u003d descriptors;\r\n            } catch (final IntrospectionException ex) {\r\n                ex.printStackTrace();\r\n                return new PropertyDescriptor[0];\r\n            }\r\n        }\r\n    }\r\n    if (propertyDescriptors.length \u003d\u003d 0) {\r\n        return propertyDescriptors;\r\n    }\r\n    final PropertyDescriptor[] result \u003d new PropertyDescriptor[propertyDescriptors.length];\r\n    System.arraycopy(propertyDescriptors, 0, result, 0, propertyDescriptors.length);\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.JXPathBasicBeanInfo",
    "methodName": "getPropertyDescriptors",
    "signature": "java.beans.PropertyDescriptor[] getPropertyDescriptors()",
    "visibility": "public",
    "body": "{\r\n    if (propertyDescriptors \u003d\u003d null) {\r\n        if (clazz \u003d\u003d Object.class) {\r\n            propertyDescriptors \u003d new PropertyDescriptor[0];\r\n        } else {\r\n            try {\r\n                BeanInfo bi;\r\n                if (clazz.isInterface()) {\r\n                    bi \u003d Introspector.getBeanInfo(clazz);\r\n                } else {\r\n                    bi \u003d Introspector.getBeanInfo(clazz, Object.class);\r\n                }\r\n                final PropertyDescriptor[] pds \u003d bi.getPropertyDescriptors();\r\n                final PropertyDescriptor[] descriptors \u003d new PropertyDescriptor[pds.length];\r\n                System.arraycopy(pds, 0, descriptors, 0, pds.length);\r\n                Arrays.sort(descriptors, PROPERTY_DESCRIPTOR_COMPARATOR);\r\n                propertyDescriptors \u003d descriptors;\r\n            } catch (final IntrospectionException ex) {\r\n                ex.printStackTrace();\r\n                return new PropertyDescriptor[0];\r\n            }\r\n        }\r\n    }\r\n    if (propertyDescriptors.length \u003d\u003d 0) {\r\n        return propertyDescriptors;\r\n    }\r\n    final PropertyDescriptor[] result \u003d new PropertyDescriptor[propertyDescriptors.length];\r\n    System.arraycopy(propertyDescriptors, 0, result, 0, propertyDescriptors.length);\r\n    return result;\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B8",
      "B1 : If($r6 !\u003d class \"Ljava/lang/Object;\") → B2 | else → B3",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5",
      "B8 : If($i4 !\u003d 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  JXPathBasicBeanInfo\n  $r1 \u003d PropertyDescriptor[] propertyDescriptors\u003e\n  if ($r1 !\u003d null) goto B1 else B8\n}",
      "B1 {\n  $r6 \u003d Class clazz\u003e\n  if ($r6 !\u003d class \"Ljava/lang/Object;\") goto B2 else B3\n}",
      "B2 {\n  $r13 \u003d PropertyDescriptor)[0]\n  PropertyDescriptor[] propertyDescriptors\u003e \u003d $r13\n  goto B8\n}",
      "B3 {\n  $r7 \u003d Class clazz\u003e\n  $z0 \u003d $r7.isInterface()\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r10 \u003d Class clazz\u003e\n  r16 \u003d Introspector.getBeanInfo($r10)\n  goto B6\n}",
      "B5 {\n  $r8 \u003d Class clazz\u003e\n  r16 \u003d Introspector.getBeanInfo($r8, class \"Ljava/lang/Object;\")\n}",
      "B6 {\n  $r11 \u003d r16.getPropertyDescriptors()\n  $i2 \u003d lengthof $r11\n  $r12 \u003d PropertyDescriptor)[$i2]\n  $i3 \u003d lengthof $r11\n  System.arraycopy($r11, 0, $r12, 0, $i3)\n  $r9 \u003d Comparator PROPERTY_DESCRIPTOR_COMPARATOR\u003e\n  Arrays.sort($r12, $r9)\n  PropertyDescriptor[] propertyDescriptors\u003e \u003d $r12\n  goto B8\n}",
      "B7 {\n  $r14 :\u003d @caughtexception\n  $r14.printStackTrace()\n  $r15 \u003d PropertyDescriptor)[0]\n  return\n}",
      "B8 {\n  $r17 \u003d PropertyDescriptor[] propertyDescriptors\u003e\n  $i4 \u003d lengthof $r17\n  if ($i4 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  $r5 \u003d PropertyDescriptor[] propertyDescriptors\u003e\n  return\n}",
      "B10 {\n  $r2 \u003d PropertyDescriptor[] propertyDescriptors\u003e\n  $i0 \u003d lengthof $r2\n  r18 \u003d PropertyDescriptor)[$i0]\n  $r4 \u003d PropertyDescriptor[] propertyDescriptors\u003e\n  $r3 \u003d PropertyDescriptor[] propertyDescriptors\u003e\n  $i1 \u003d lengthof $r3\n  System.arraycopy($r4, 0, r18, 0, $i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B8",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B8",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.JXPathBasicBeanInfo",
    "methodName": "isDynamic",
    "signature": "boolean isDynamic()",
    "visibility": "public",
    "body": "{\r\n    return dynamicPropertyHandlerClass !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JXPathBasicBeanInfo\n  $r1 \u003d Class dynamicPropertyHandlerClass\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.JXPathBasicBeanInfo",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    buffer.append(\"BeanInfo [class \u003d \");\r\n    buffer.append(clazz.getName());\r\n    if (isDynamic()) {\r\n        buffer.append(\", dynamic\");\r\n    }\r\n    if (isAtomic()) {\r\n        buffer.append(\", atomic\");\r\n    }\r\n    buffer.append(\", properties \u003d \");\r\n    final PropertyDescriptor[] jpds \u003d getPropertyDescriptors();\r\n    for (final PropertyDescriptor jpd : jpds) {\r\n        buffer.append(\"\\n    \");\r\n        buffer.append(jpd.getPropertyType());\r\n        buffer.append(\": \");\r\n        buffer.append(jpd.getName());\r\n    }\r\n    buffer.append(\"]\");\r\n    return buffer.toString();\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B5 : If(i1 \u003e\u003d $i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  JXPathBasicBeanInfo\n  $r0 \u003d StringBuilder\n  new StringBuilder()\n  $r0.append(\"BeanInfo class \u003d \")\n  $r2 \u003d Class clazz\u003e\n  $r3 \u003d $r2.getName()\n  $r0.append($r3)\n  $z0 \u003d r1.isDynamic()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r0.append(\", dynamic\")\n}",
      "B2 {\n  $z1 \u003d r1.isAtomic()\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r0.append(\", atomic\")\n}",
      "B4 {\n  $r0.append(\", properties \u003d \")\n  $r8 \u003d r1.getPropertyDescriptors()\n  $i0 \u003d lengthof $r8\n  i1 \u003d 0\n}",
      "B5 {\n  if (i1 \u003e\u003d $i0) goto B6 else B7\n}",
      "B6 {\n  r5 \u003d $r8[i1]\n  $r0.append(\"\\n    \")\n  $r6 \u003d r5.getPropertyType()\n  $r0.append($r6)\n  $r0.append(\": \")\n  $r7 \u003d r5.getName()\n  $r0.append($r7)\n  i1 \u003d i1 + 1\n  goto B5\n}",
      "B7 {\n  $r0.append(\"\")\n  $r4 \u003d $r0.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JXPathBasicBeanInfo#isDynamic(...0)",
        "body": "{\r\n    return dynamicPropertyHandlerClass !\u003d null;\r\n}"
      },
      {
        "name": "JXPathBasicBeanInfo#isAtomic(...0)",
        "body": "{\r\n    return atomic;\r\n}"
      },
      {
        "name": "JXPathBasicBeanInfo#getPropertyDescriptors(...0)",
        "body": "{\r\n    if (propertyDescriptors \u003d\u003d null) {\r\n        if (clazz \u003d\u003d Object.class) {\r\n            propertyDescriptors \u003d new PropertyDescriptor[0];\r\n        } else {\r\n            try {\r\n                BeanInfo bi;\r\n                if (clazz.isInterface()) {\r\n                    bi \u003d Introspector.getBeanInfo(clazz);\r\n                } else {\r\n                    bi \u003d Introspector.getBeanInfo(clazz, Object.class);\r\n                }\r\n                final PropertyDescriptor[] pds \u003d bi.getPropertyDescriptors();\r\n                final PropertyDescriptor[] descriptors \u003d new PropertyDescriptor[pds.length];\r\n                System.arraycopy(pds, 0, descriptors, 0, pds.length);\r\n                Arrays.sort(descriptors, PROPERTY_DESCRIPTOR_COMPARATOR);\r\n                propertyDescriptors \u003d descriptors;\r\n            } catch (final IntrospectionException ex) {\r\n                ex.printStackTrace();\r\n                return new PropertyDescriptor[0];\r\n            }\r\n        }\r\n    }\r\n    if (propertyDescriptors.length \u003d\u003d 0) {\r\n        return propertyDescriptors;\r\n    }\r\n    final PropertyDescriptor[] result \u003d new PropertyDescriptor[propertyDescriptors.length];\r\n    System.arraycopy(propertyDescriptors, 0, result, 0, propertyDescriptors.length);\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.JXPathIntrospector",
    "methodName": "getBeanInfo",
    "signature": "org.apache.commons.jxpath.JXPathBeanInfo getBeanInfo(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    JXPathBeanInfo beanInfo \u003d byClass.get(beanClass);\r\n    if (beanInfo \u003d\u003d null) {\r\n        beanInfo \u003d findDynamicBeanInfo(beanClass);\r\n        if (beanInfo \u003d\u003d null) {\r\n            beanInfo \u003d findInformant(beanClass);\r\n            if (beanInfo \u003d\u003d null) {\r\n                beanInfo \u003d new JXPathBasicBeanInfo(beanClass);\r\n            }\r\n        }\r\n        synchronized (byClass) {\r\n            byClass.put(beanClass, beanInfo);\r\n        }\r\n    }\r\n    return beanInfo;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r5 !\u003d null) → B1 | else → B6",
      "B1 : If(r5 !\u003d null) → B2 | else → B4",
      "B2 : If(r5 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Class\n  $r1 \u003d Map byClass\u003e\n  $r2 \u003d $r1.get(r0)\n  r5 \u003d JXPathBeanInfo) $r2\n  if (r5 !\u003d null) goto B1 else B6\n}",
      "B1 {\n  r5 \u003d JXPathIntrospector.findDynamicBeanInfo(r0)\n  if (r5 !\u003d null) goto B2 else B4\n}",
      "B2 {\n  r5 \u003d JXPathIntrospector.findInformant(r0)\n  if (r5 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d JXPathBasicBeanInfo\n  new JXPathBasicBeanInfo(r0)\n  r5 \u003d $r3\n}",
      "B4 {\n  $r6 \u003d Map byClass\u003e\n  entermonitor $r6\n  $r7 \u003d Map byClass\u003e\n  $r7.put(r0, r5)\n  exitmonitor $r6\n  goto B6\n}",
      "B5 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r6\n  throw $r4\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JXPathIntrospector#findDynamicBeanInfo(...1)",
        "body": "{\r\n    JXPathBeanInfo beanInfo;\r\n    if (beanClass.isInterface()) {\r\n        beanInfo \u003d byInterface.get(beanClass);\r\n        if (beanInfo !\u003d null \u0026\u0026 beanInfo.isDynamic()) {\r\n            return beanInfo;\r\n        }\r\n    }\r\n    final Class[] interfaces \u003d beanClass.getInterfaces();\r\n    if (interfaces !\u003d null) {\r\n        for (final Class element : interfaces) {\r\n            beanInfo \u003d findDynamicBeanInfo(element);\r\n            if (beanInfo !\u003d null \u0026\u0026 beanInfo.isDynamic()) {\r\n                return beanInfo;\r\n            }\r\n        }\r\n    }\r\n    final Class sup \u003d beanClass.getSuperclass();\r\n    if (sup !\u003d null) {\r\n        beanInfo \u003d byClass.get(sup);\r\n        if (beanInfo !\u003d null \u0026\u0026 beanInfo.isDynamic()) {\r\n            return beanInfo;\r\n        }\r\n        return findDynamicBeanInfo(sup);\r\n    }\r\n    return null;\r\n}"
      },
      {
        "name": "JXPathIntrospector#findInformant(...1)",
        "body": "{\r\n    final String name \u003d beanClass.getName() + \"XBeanInfo\";\r\n    try {\r\n        return (JXPathBeanInfo) instantiate(beanClass, name);\r\n    } catch (final Exception ignore) {\r\n        // NOPMD\r\n        // Just drop through\r\n    }\r\n    // Now try checking if the bean is its own JXPathBeanInfo.\r\n    try {\r\n        if (JXPathBeanInfo.class.isAssignableFrom(beanClass)) {\r\n            return (JXPathBeanInfo) beanClass.getConstructor().newInstance();\r\n        }\r\n    } catch (final Exception ignore) {\r\n        // NOPMD\r\n        // Just drop through\r\n    }\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.MapDynamicPropertyHandler",
    "methodName": "getPropertyNames",
    "signature": "java.lang.String[] getPropertyNames(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final Map map \u003d (Map) object;\r\n    final Set set \u003d map.keySet();\r\n    final String[] names \u003d new String[set.size()];\r\n    final Iterator it \u003d set.iterator();\r\n    for (int i \u003d 0; i \u003c names.length; i++) {\r\n        names[i] \u003d String.valueOf(it.next());\r\n    }\r\n    return names;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d $i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MapDynamicPropertyHandler\n  Object\n  r1 \u003d Map) r0\n  r2 \u003d r1.keySet()\n  $i0 \u003d r2.size()\n  r3 \u003d String)[$i0]\n  r4 \u003d r2.iterator()\n  i2 \u003d 0\n}",
      "B1 {\n  $i1 \u003d lengthof r3\n  if (i2 \u003e\u003d $i1) goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d r4.next()\n  $r6 \u003d String.valueOf($r5)\n  r3[i2] \u003d $r6\n  i2 \u003d i2 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.PackageFunctions",
    "methodName": "getFunction",
    "signature": "org.apache.commons.jxpath.Function getFunction(java.lang.String,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    if (!Objects.equals(this.namespace, namespace)) {\r\n        return null;\r\n    }\r\n    if (parameters \u003d\u003d null) {\r\n        parameters \u003d EMPTY_ARRAY;\r\n    }\r\n    if (parameters.length \u003e\u003d 1) {\r\n        Object target \u003d TypeUtils.convert(parameters[0], Object.class);\r\n        if (target !\u003d null) {\r\n            Method method \u003d MethodLookupUtils.lookupMethod(target.getClass(), name, parameters);\r\n            if (method !\u003d null) {\r\n                return new MethodFunction(method);\r\n            }\r\n            if (target instanceof NodeSet) {\r\n                target \u003d ((NodeSet) target).getPointers();\r\n            }\r\n            method \u003d MethodLookupUtils.lookupMethod(target.getClass(), name, parameters);\r\n            if (method !\u003d null) {\r\n                return new MethodFunction(method);\r\n            }\r\n            if (target instanceof Collection) {\r\n                final Iterator iter \u003d ((Collection) target).iterator();\r\n                if (iter.hasNext()) {\r\n                    target \u003d iter.next();\r\n                    if (target instanceof Pointer) {\r\n                        target \u003d ((Pointer) target).getValue();\r\n                    }\r\n                } else {\r\n                    target \u003d null;\r\n                }\r\n            }\r\n        }\r\n        if (target !\u003d null) {\r\n            final Method method \u003d MethodLookupUtils.lookupMethod(target.getClass(), name, parameters);\r\n            if (method !\u003d null) {\r\n                return new MethodFunction(method);\r\n            }\r\n        }\r\n    }\r\n    final String fullName \u003d classPrefix + name;\r\n    final int inx \u003d fullName.lastIndexOf(\u0027.\u0027);\r\n    if (inx \u003d\u003d -1) {\r\n        return null;\r\n    }\r\n    final String className \u003d fullName.substring(0, inx);\r\n    final String methodName \u003d fullName.substring(inx + 1);\r\n    Class\u003c?\u003e functionClass;\r\n    try {\r\n        functionClass \u003d ClassLoaderUtil.getClass(className, true);\r\n    } catch (final ClassNotFoundException ex) {\r\n        throw new JXPathException(\"Cannot invoke extension function \" + (namespace !\u003d null ? namespace + \":\" + name : name), ex);\r\n    }\r\n    if (methodName.equals(\"new\")) {\r\n        final Constructor constructor \u003d MethodLookupUtils.lookupConstructor(functionClass, parameters);\r\n        if (constructor !\u003d null) {\r\n            return new ConstructorFunction(constructor);\r\n        }\r\n    } else {\r\n        final Method method \u003d MethodLookupUtils.lookupStaticMethod(functionClass, methodName, parameters);\r\n        if (method !\u003d null) {\r\n            return new MethodFunction(method);\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 34,
    "edges": 42,
    "cc": 10,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If(r29 !\u003d null) → B3 | else → B4",
      "B4 : If($i0 \u003c 1) → B5 | else → B20",
      "B5 : If(r30 \u003d\u003d null) → B6 | else → B17",
      "B6 : If(r31 \u003d\u003d null) → B7 | else → B8",
      "B8 : If($z2 \u003d\u003d false) → B9 | else → B10",
      "B10 : If($r17 \u003d\u003d null) → B11 | else → B12",
      "B12 : If($z3 \u003d\u003d false) → B13 | else → B17",
      "B13 : If($z4 \u003d\u003d false) → B14 | else → B16",
      "B14 : If($z5 \u003d\u003d false) → B15 | else → B17",
      "B17 : If(r30 \u003d\u003d null) → B18 | else → B20",
      "B18 : If(r33 \u003d\u003d null) → B19 | else → B20",
      "B20 : If($i2 !\u003d $i4) → B21 | else → B22",
      "B23 : If(r1 \u003d\u003d null) → B24 | else → B25",
      "B27 : If($z1 \u003d\u003d false) → B28 | else → B31",
      "B28 : If(r41 \u003d\u003d null) → B29 | else → B30",
      "B31 : If(r42 \u003d\u003d null) → B32 | else → B33"
    ],
    "blockList": [
      "B0 {\n  PackageFunctions\n  String\n  String\n  Object[]\n  $r2 \u003d String namespace\u003e\n  $z0 \u003d Objects.equals($r2, r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r29 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  r29 \u003d Object[] EMPTY_ARRAY\u003e\n}",
      "B4 {\n  $i0 \u003d lengthof r29\n  if ($i0 \u003c 1) goto B5 else B20\n}",
      "B5 {\n  $r8 \u003d r29[0]\n  r30 \u003d TypeUtils.convert($r8, class \"Ljava/lang/Object;\")\n  if (r30 \u003d\u003d null) goto B6 else B17\n}",
      "B6 {\n  $r11 \u003d r30.getClass()\n  r31 \u003d MethodLookupUtils.lookupMethod($r11, r3, r29)\n  if (r31 \u003d\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r43 \u003d MethodFunction\n  new MethodFunction(r31)\n  return\n}",
      "B8 {\n  $z2 \u003d NodeSet\n  if ($z2 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r16 \u003d NodeSet) r30\n  r30 \u003d $r16.getPointers()\n}",
      "B10 {\n  $r12 \u003d r30.getClass()\n  $r17 \u003d MethodLookupUtils.lookupMethod($r12, r3, r29)\n  if ($r17 \u003d\u003d null) goto B11 else B12\n}",
      "B11 {\n  $r44 \u003d MethodFunction\n  new MethodFunction($r17)\n  return\n}",
      "B12 {\n  $z3 \u003d Collection\n  if ($z3 \u003d\u003d false) goto B13 else B17\n}",
      "B13 {\n  $r13 \u003d Collection) r30\n  r32 \u003d $r13.iterator()\n  $z4 \u003d r32.hasNext()\n  if ($z4 \u003d\u003d false) goto B14 else B16\n}",
      "B14 {\n  r30 \u003d r32.next()\n  $z5 \u003d Pointer\n  if ($z5 \u003d\u003d false) goto B15 else B17\n}",
      "B15 {\n  $r14 \u003d Pointer) r30\n  r30 \u003d $r14.getValue()\n  goto B17\n}",
      "B16 {\n  r30 \u003d null\n}",
      "B17 {\n  if (r30 \u003d\u003d null) goto B18 else B20\n}",
      "B18 {\n  $r9 \u003d r30.getClass()\n  r33 \u003d MethodLookupUtils.lookupMethod($r9, r3, r29)\n  if (r33 \u003d\u003d null) goto B19 else B20\n}",
      "B19 {\n  $r45 \u003d MethodFunction\n  new MethodFunction(r33)\n  return\n}",
      "B20 {\n  $r46 \u003d StringBuilder\n  new StringBuilder()\n  $r35 \u003d String classPrefix\u003e\n  $r36 \u003d $r46.append($r35)\n  $r37 \u003d $r36.append(r3)\n  $r38 \u003d $r37.toString()\n  $i2 \u003d $r38.lastIndexOf(46)\n  $i4 \u003d (int) -1\n  if ($i2 !\u003d $i4) goto B21 else B22\n}",
      "B21 {\n  return\n}",
      "B22 {\n  r39 \u003d $r38.substring(0, $i2)\n  $i1 \u003d $i2 + 1\n  r4 \u003d $r38.substring($i1)\n  r5 \u003d ClassLoaderUtil.getClass(r39, 1)\n  goto B27\n}",
      "B23 {\n  $r19 :\u003d @caughtexception\n  $r49 \u003d JXPathException\n  $r47 \u003d StringBuilder\n  new StringBuilder()\n  $r22 \u003d $r47.append(\"Cannot invoke extension function \")\n  if (r1 \u003d\u003d null) goto B24 else B25\n}",
      "B24 {\n  $r48 \u003d StringBuilder\n  new StringBuilder()\n  $r26 \u003d $r48.append(r1)\n  $r27 \u003d $r26.append(\":\")\n  $r28 \u003d $r27.append(r3)\n  $r40 \u003d $r28.toString()\n  goto B26\n}",
      "B25 {\n  $r40 \u003d r3\n}",
      "B26 {\n  $r23 \u003d $r22.append($r40)\n  $r24 \u003d $r23.toString()\n  new JXPathException($r24, $r19)\n  throw $r49\n}",
      "B27 {\n  $z1 \u003d r4.equals(\"new\")\n  if ($z1 \u003d\u003d false) goto B28 else B31\n}",
      "B28 {\n  r41 \u003d MethodLookupUtils.lookupConstructor(r5, r29)\n  if (r41 \u003d\u003d null) goto B29 else B30\n}",
      "B29 {\n  $r50 \u003d ConstructorFunction\n  new ConstructorFunction(r41)\n  return\n}",
      "B30 {\n  goto B33\n}",
      "B31 {\n  r42 \u003d MethodLookupUtils.lookupStaticMethod(r5, r4, r29)\n  if (r42 \u003d\u003d null) goto B32 else B33\n}",
      "B32 {\n  $r51 \u003d MethodFunction\n  new MethodFunction(r42)\n  return\n}",
      "B33 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B20",
      "B5 --\u003e B6",
      "B5 --\u003e B17",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B17",
      "B13 --\u003e B14",
      "B13 --\u003e B16",
      "B14 --\u003e B15",
      "B14 --\u003e B17",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e B18",
      "B17 --\u003e B20",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e [EXIT]",
      "B22 --\u003e B27",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B26",
      "B26 --\u003e [EXIT]",
      "B27 --\u003e B28",
      "B27 --\u003e B31",
      "B28 --\u003e B29",
      "B28 --\u003e B30",
      "B29 --\u003e [EXIT]",
      "B30 --\u003e B33",
      "B31 --\u003e B32",
      "B31 --\u003e B33",
      "B32 --\u003e [EXIT]",
      "B33 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.AncestorContext",
    "methodName": "nextNode",
    "signature": "boolean nextNode()",
    "visibility": "public",
    "body": "{\r\n    if (!setStarted) {\r\n        setStarted \u003d true;\r\n        currentNodePointer \u003d parentContext.getCurrentNodePointer();\r\n        if (includeSelf \u0026\u0026 currentNodePointer.testNode(nodeTest)) {\r\n            position++;\r\n            return true;\r\n        }\r\n    }\r\n    while (true) {\r\n        currentNodePointer \u003d currentNodePointer.getImmediateParentPointer();\r\n        if (currentNodePointer \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        if (currentNodePointer.testNode(nodeTest)) {\r\n            position++;\r\n            return true;\r\n        }\r\n    }\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B4",
      "B1 : If($z2 \u003d\u003d false) → B2 | else → B4",
      "B2 : If($z3 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($r9 !\u003d null) → B5 | else → B6",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B4"
    ],
    "blockList": [
      "B0 {\n  AncestorContext\n  $z0 \u003d AncestorContext: boolean setStarted\u003e\n  if ($z0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  AncestorContext: boolean setStarted\u003e \u003d 1\n  $r3 \u003d EvalContext parentContext\u003e\n  $r4 \u003d $r3.getCurrentNodePointer()\n  NodePointer currentNodePointer\u003e \u003d $r4\n  $z2 \u003d AncestorContext: boolean includeSelf\u003e\n  if ($z2 \u003d\u003d false) goto B2 else B4\n}",
      "B2 {\n  $r6 \u003d NodePointer currentNodePointer\u003e\n  $r5 \u003d NodeTest nodeTest\u003e\n  $z3 \u003d $r6.testNode($r5)\n  if ($z3 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $i2 \u003d AncestorContext: int position\u003e\n  $i3 \u003d $i2 + 1\n  AncestorContext: int position\u003e \u003d $i3\n  return\n}",
      "B4 {\n  $r7 \u003d NodePointer currentNodePointer\u003e\n  $r8 \u003d $r7.getImmediateParentPointer()\n  NodePointer currentNodePointer\u003e \u003d $r8\n  $r9 \u003d NodePointer currentNodePointer\u003e\n  if ($r9 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r2 \u003d NodePointer currentNodePointer\u003e\n  $r1 \u003d NodeTest nodeTest\u003e\n  $z1 \u003d $r2.testNode($r1)\n  if ($z1 \u003d\u003d false) goto B7 else B4\n}",
      "B7 {\n  $i0 \u003d AncestorContext: int position\u003e\n  $i1 \u003d $i0 + 1\n  AncestorContext: int position\u003e \u003d $i1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B4",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.AncestorContext",
    "methodName": "setPosition",
    "signature": "boolean setPosition(int)",
    "visibility": "public",
    "body": "{\r\n    if (position \u003c getCurrentPosition()) {\r\n        reset();\r\n    }\r\n    while (getCurrentPosition() \u003c position) {\r\n        if (!nextNode()) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003e\u003d $i1) → B1 | else → B2",
      "B2 : If($i2 \u003e\u003d i0) → B3 | else → B5",
      "B3 : If($z0 !\u003d 0) → B4 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AncestorContext\n  i0 :\u003d @parameter0: int\n  $i1 \u003d r0.getCurrentPosition()\n  if (i0 \u003e\u003d $i1) goto B1 else B2\n}",
      "B1 {\n  r0.reset()\n}",
      "B2 {\n  $i2 \u003d r0.getCurrentPosition()\n  if ($i2 \u003e\u003d i0) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.nextNode()\n  if ($z0 !\u003d 0) goto B4 else B2\n}",
      "B4 {\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AncestorContext#nextNode(...0)",
        "body": "{\r\n    if (!setStarted) {\r\n        setStarted \u003d true;\r\n        currentNodePointer \u003d parentContext.getCurrentNodePointer();\r\n        if (includeSelf \u0026\u0026 currentNodePointer.testNode(nodeTest)) {\r\n            position++;\r\n            return true;\r\n        }\r\n    }\r\n    while (true) {\r\n        currentNodePointer \u003d currentNodePointer.getImmediateParentPointer();\r\n        if (currentNodePointer \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        if (currentNodePointer.testNode(nodeTest)) {\r\n            position++;\r\n            return true;\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "AncestorContext#getCurrentPosition(...0)",
        "body": "(source not found)"
      },
      {
        "name": "AncestorContext#reset(...0)",
        "body": "{\r\n    super.reset();\r\n    setStarted \u003d false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.AttributeContext",
    "methodName": "nextNode",
    "signature": "boolean nextNode()",
    "visibility": "public",
    "body": "{\r\n    super.setPosition(getCurrentPosition() + 1);\r\n    if (!setStarted) {\r\n        setStarted \u003d true;\r\n        QName qName;\r\n        if (nodeTest instanceof NodeNameTest) {\r\n            qName \u003d ((NodeNameTest) nodeTest).getNodeName();\r\n        } else if (nodeTest instanceof NodeTypeTest \u0026\u0026 ((NodeTypeTest) nodeTest).getNodeType() \u003d\u003d Compiler.NODE_TYPE_NODE) {\r\n            qName \u003d WILDCARD;\r\n        } else {\r\n            iterator \u003d null;\r\n            return false;\r\n        }\r\n        iterator \u003d parentContext.getCurrentNodePointer().attributeIterator(qName);\r\n    }\r\n    if (iterator \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (!iterator.setPosition(iterator.getPosition() + 1)) {\r\n        return false;\r\n    }\r\n    currentNodePointer \u003d iterator.getNodePointer();\r\n    return true;\r\n}",
    "nodes": 13,
    "edges": 15,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B8",
      "B1 : If($z2 \u003d\u003d false) → B2 | else → B3",
      "B3 : If($z3 \u003d\u003d false) → B4 | else → B6",
      "B4 : If($i4 !\u003d 1) → B5 | else → B6",
      "B8 : If($r15 !\u003d null) → B9 | else → B10",
      "B10 : If($z1 !\u003d 0) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  AttributeContext\n  $i0 \u003d r0.getCurrentPosition()\n  $i1 \u003d $i0 + 1\n  r0.setPosition($i1)\n  $z0 \u003d AttributeContext: boolean setStarted\u003e\n  if ($z0 !\u003d 0) goto B1 else B8\n}",
      "B1 {\n  AttributeContext: boolean setStarted\u003e \u003d 1\n  $r5 \u003d NodeTest nodeTest\u003e\n  $z2 \u003d NodeNameTest\n  if ($z2 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r12 \u003d NodeTest nodeTest\u003e\n  $r13 \u003d NodeNameTest) $r12\n  r14 \u003d $r13.getNodeName()\n  goto B7\n}",
      "B3 {\n  $r6 \u003d NodeTest nodeTest\u003e\n  $z3 \u003d NodeTypeTest\n  if ($z3 \u003d\u003d false) goto B4 else B6\n}",
      "B4 {\n  $r7 \u003d NodeTest nodeTest\u003e\n  $r8 \u003d NodeTypeTest) $r7\n  $i4 \u003d $r8.getNodeType()\n  if ($i4 !\u003d 1) goto B5 else B6\n}",
      "B5 {\n  r14 \u003d QName WILDCARD\u003e\n  goto B7\n}",
      "B6 {\n  NodeIterator iterator\u003e \u003d null\n  return\n}",
      "B7 {\n  $r9 \u003d EvalContext parentContext\u003e\n  $r10 \u003d $r9.getCurrentNodePointer()\n  $r11 \u003d $r10.attributeIterator(r14)\n  NodeIterator iterator\u003e \u003d $r11\n}",
      "B8 {\n  $r15 \u003d NodeIterator iterator\u003e\n  if ($r15 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $r2 \u003d NodeIterator iterator\u003e\n  $r1 \u003d NodeIterator iterator\u003e\n  $i2 \u003d $r1.getPosition()\n  $i3 \u003d $i2 + 1\n  $z1 \u003d $r2.setPosition($i3)\n  if ($z1 !\u003d 0) goto B11 else B12\n}",
      "B11 {\n  return\n}",
      "B12 {\n  $r3 \u003d NodeIterator iterator\u003e\n  $r4 \u003d $r3.getNodePointer()\n  NodePointer currentNodePointer\u003e \u003d $r4\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B8",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AttributeContext#getCurrentPosition(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.AttributeContext",
    "methodName": "setPosition",
    "signature": "boolean setPosition(int)",
    "visibility": "public",
    "body": "{\r\n    if (position \u003c getCurrentPosition()) {\r\n        reset();\r\n    }\r\n    while (getCurrentPosition() \u003c position) {\r\n        if (!nextNode()) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003e\u003d $i1) → B1 | else → B2",
      "B2 : If($i2 \u003e\u003d i0) → B3 | else → B5",
      "B3 : If($z0 !\u003d 0) → B4 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AttributeContext\n  i0 :\u003d @parameter0: int\n  $i1 \u003d r0.getCurrentPosition()\n  if (i0 \u003e\u003d $i1) goto B1 else B2\n}",
      "B1 {\n  r0.reset()\n}",
      "B2 {\n  $i2 \u003d r0.getCurrentPosition()\n  if ($i2 \u003e\u003d i0) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.nextNode()\n  if ($z0 !\u003d 0) goto B4 else B2\n}",
      "B4 {\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AttributeContext#nextNode(...0)",
        "body": "{\r\n    super.setPosition(getCurrentPosition() + 1);\r\n    if (!setStarted) {\r\n        setStarted \u003d true;\r\n        QName qName;\r\n        if (nodeTest instanceof NodeNameTest) {\r\n            qName \u003d ((NodeNameTest) nodeTest).getNodeName();\r\n        } else if (nodeTest instanceof NodeTypeTest \u0026\u0026 ((NodeTypeTest) nodeTest).getNodeType() \u003d\u003d Compiler.NODE_TYPE_NODE) {\r\n            qName \u003d WILDCARD;\r\n        } else {\r\n            iterator \u003d null;\r\n            return false;\r\n        }\r\n        iterator \u003d parentContext.getCurrentNodePointer().attributeIterator(qName);\r\n    }\r\n    if (iterator \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (!iterator.setPosition(iterator.getPosition() + 1)) {\r\n        return false;\r\n    }\r\n    currentNodePointer \u003d iterator.getNodePointer();\r\n    return true;\r\n}"
      },
      {
        "name": "AttributeContext#getCurrentPosition(...0)",
        "body": "(source not found)"
      },
      {
        "name": "AttributeContext#reset(...0)",
        "body": "{\r\n    setStarted \u003d false;\r\n    iterator \u003d null;\r\n    super.reset();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.ChildContext",
    "methodName": "getCurrentNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer getCurrentNodePointer()",
    "visibility": "public",
    "body": "{\r\n    if (position \u003d\u003d 0 \u0026\u0026 !setPosition(1)) {\r\n        return null;\r\n    }\r\n    return iterator \u003d\u003d null ? null : iterator.getNodePointer();\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B3",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3",
      "B3 : If($r1 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ChildContext\n  $i0 \u003d ChildContext: int position\u003e\n  if ($i0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d r0.setPosition(1)\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r1 \u003d NodeIterator iterator\u003e\n  if ($r1 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r3 \u003d null\n  goto B6\n}",
      "B5 {\n  $r2 \u003d NodeIterator iterator\u003e\n  $r3 \u003d $r2.getNodePointer()\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ChildContext#setPosition(...1)",
        "body": "{\r\n    final int oldPosition \u003d getCurrentPosition();\r\n    super.setPosition(position);\r\n    if (oldPosition \u003d\u003d 0) {\r\n        prepare();\r\n    }\r\n    return iterator !\u003d null \u0026\u0026 iterator.setPosition(position);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.ChildContext",
    "methodName": "getSingleNodePointer",
    "signature": "org.apache.commons.jxpath.Pointer getSingleNodePointer()",
    "visibility": "public",
    "body": "{\r\n    if (position \u003d\u003d 0) {\r\n        while (nextSet()) {\r\n            prepare();\r\n            if (iterator \u003d\u003d null) {\r\n                return null;\r\n            }\r\n            // See if there is a property there, singular or collection\r\n            final NodePointer pointer \u003d iterator.getNodePointer();\r\n            if (pointer !\u003d null) {\r\n                return pointer;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    return getCurrentNodePointer();\r\n}",
    "nodes": 9,
    "edges": 9,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B8",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B7",
      "B2 : If($r2 !\u003d null) → B3 | else → B4",
      "B4 : If(r4 \u003d\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  ChildContext\n  $i0 \u003d ChildContext: int position\u003e\n  if ($i0 !\u003d 0) goto B1 else B8\n}",
      "B1 {\n  $z0 \u003d r0.nextSet()\n  if ($z0 \u003d\u003d false) goto B2 else B7\n}",
      "B2 {\n  r0.prepare()\n  $r2 \u003d NodeIterator iterator\u003e\n  if ($r2 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d NodeIterator iterator\u003e\n  r4 \u003d $r3.getNodePointer()\n  if (r4 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  goto B1\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $r1 \u003d r0.getCurrentNodePointer()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B8",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B1",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ChildContext#prepare(...0)",
        "body": "{\r\n    final NodePointer parent \u003d parentContext.getCurrentNodePointer();\r\n    if (parent \u003d\u003d null) {\r\n        return;\r\n    }\r\n    final NodePointer useParent \u003d startFromParentLocation ? parent.getParent() : parent;\r\n    iterator \u003d useParent \u003d\u003d null ? null : useParent.childIterator(nodeTest, reverse, startFromParentLocation ? parent : null);\r\n}"
      },
      {
        "name": "ChildContext#nextSet(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ChildContext#getCurrentNodePointer(...0)",
        "body": "{\r\n    if (position \u003d\u003d 0 \u0026\u0026 !setPosition(1)) {\r\n        return null;\r\n    }\r\n    return iterator \u003d\u003d null ? null : iterator.getNodePointer();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.ChildContext",
    "methodName": "setPosition",
    "signature": "boolean setPosition(int)",
    "visibility": "public",
    "body": "{\r\n    final int oldPosition \u003d getCurrentPosition();\r\n    super.setPosition(position);\r\n    if (oldPosition \u003d\u003d 0) {\r\n        prepare();\r\n    }\r\n    return iterator !\u003d null \u0026\u0026 iterator.setPosition(position);\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i0 !\u003d 0) → B1 | else → B2",
      "B2 : If($r1 \u003d\u003d null) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ChildContext\n  i1 :\u003d @parameter0: int\n  i0 \u003d r0.getCurrentPosition()\n  r0.setPosition(i1)\n  if (i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.prepare()\n}",
      "B2 {\n  $r1 \u003d NodeIterator iterator\u003e\n  if ($r1 \u003d\u003d null) goto B3 else B5\n}",
      "B3 {\n  $r2 \u003d NodeIterator iterator\u003e\n  $z0 \u003d $r2.setPosition(i1)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $z1 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z1 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ChildContext#prepare(...0)",
        "body": "{\r\n    final NodePointer parent \u003d parentContext.getCurrentNodePointer();\r\n    if (parent \u003d\u003d null) {\r\n        return;\r\n    }\r\n    final NodePointer useParent \u003d startFromParentLocation ? parent.getParent() : parent;\r\n    iterator \u003d useParent \u003d\u003d null ? null : useParent.childIterator(nodeTest, reverse, startFromParentLocation ? parent : null);\r\n}"
      },
      {
        "name": "ChildContext#getCurrentPosition(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.DescendantContext",
    "methodName": "getCurrentNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer getCurrentNodePointer()",
    "visibility": "public",
    "body": "{\r\n    if (position \u003d\u003d 0 \u0026\u0026 !setPosition(1)) {\r\n        return null;\r\n    }\r\n    return currentNodePointer;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B3",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DescendantContext\n  $i0 \u003d DescendantContext: int position\u003e\n  if ($i0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d r0.setPosition(1)\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r1 \u003d NodePointer currentNodePointer\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DescendantContext#setPosition(...1)",
        "body": "{\r\n    if (position \u003c this.position) {\r\n        reset();\r\n    }\r\n    while (this.position \u003c position) {\r\n        if (!nextNode()) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.DescendantContext",
    "methodName": "nextNode",
    "signature": "boolean nextNode()",
    "visibility": "public",
    "body": "{\r\n    if (!setStarted) {\r\n        setStarted \u003d true;\r\n        if (stack \u003d\u003d null) {\r\n            stack \u003d new Stack\u003c\u003e();\r\n        } else {\r\n            stack.clear();\r\n        }\r\n        currentNodePointer \u003d parentContext.getCurrentNodePointer();\r\n        if (currentNodePointer !\u003d null) {\r\n            if (!currentNodePointer.isLeaf()) {\r\n                stack.push(currentNodePointer.childIterator(ELEMENT_NODE_TEST, false, null));\r\n            }\r\n            if (includeSelf \u0026\u0026 currentNodePointer.testNode(nodeTest)) {\r\n                position++;\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    while (!stack.isEmpty()) {\r\n        final NodeIterator it \u003d stack.peek();\r\n        if (it.setPosition(it.getPosition() + 1)) {\r\n            currentNodePointer \u003d it.getNodePointer();\r\n            if (!isRecursive()) {\r\n                if (!currentNodePointer.isLeaf()) {\r\n                    stack.push(currentNodePointer.childIterator(ELEMENT_NODE_TEST, false, null));\r\n                }\r\n                if (currentNodePointer.testNode(nodeTest)) {\r\n                    position++;\r\n                    return true;\r\n                }\r\n            }\r\n        } else {\r\n            // We get here only if the name test failed\r\n            // and the iterator ended\r\n            stack.pop();\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 20,
    "edges": 28,
    "cc": 10,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B10",
      "B1 : If($r13 !\u003d null) → B2 | else → B3",
      "B4 : If($r17 \u003d\u003d null) → B5 | else → B10",
      "B5 : If($z5 !\u003d 0) → B6 | else → B7",
      "B7 : If($z6 \u003d\u003d false) → B8 | else → B10",
      "B8 : If($z7 \u003d\u003d false) → B9 | else → B10",
      "B10 : If($z8 !\u003d 0) → B11 | else → B19",
      "B11 : If($z1 \u003d\u003d false) → B12 | else → B17",
      "B12 : If($z2 !\u003d 0) → B13 | else → B18",
      "B13 : If($z3 !\u003d 0) → B14 | else → B15",
      "B15 : If($z4 \u003d\u003d false) → B16 | else → B18"
    ],
    "blockList": [
      "B0 {\n  DescendantContext\n  $z0 \u003d DescendantContext: boolean setStarted\u003e\n  if ($z0 !\u003d 0) goto B1 else B10\n}",
      "B1 {\n  DescendantContext: boolean setStarted\u003e \u003d 1\n  $r13 \u003d Stack stack\u003e\n  if ($r13 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r25 \u003d Stack\n  new Stack()\n  Stack stack\u003e \u003d $r25\n  goto B4\n}",
      "B3 {\n  $r14 \u003d Stack stack\u003e\n  $r14.clear()\n}",
      "B4 {\n  $r15 \u003d EvalContext parentContext\u003e\n  $r16 \u003d $r15.getCurrentNodePointer()\n  NodePointer currentNodePointer\u003e \u003d $r16\n  $r17 \u003d NodePointer currentNodePointer\u003e\n  if ($r17 \u003d\u003d null) goto B5 else B10\n}",
      "B5 {\n  $r18 \u003d NodePointer currentNodePointer\u003e\n  $z5 \u003d $r18.isLeaf()\n  if ($z5 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $r23 \u003d Stack stack\u003e\n  $r22 \u003d NodePointer currentNodePointer\u003e\n  $r21 \u003d NodeTest ELEMENT_NODE_TEST\u003e\n  $r24 \u003d $r22.childIterator($r21, 0, null)\n  $r23.push($r24)\n}",
      "B7 {\n  $z6 \u003d DescendantContext: boolean includeSelf\u003e\n  if ($z6 \u003d\u003d false) goto B8 else B10\n}",
      "B8 {\n  $r20 \u003d NodePointer currentNodePointer\u003e\n  $r19 \u003d NodeTest nodeTest\u003e\n  $z7 \u003d $r20.testNode($r19)\n  if ($z7 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $i4 \u003d DescendantContext: int position\u003e\n  $i5 \u003d $i4 + 1\n  DescendantContext: int position\u003e \u003d $i5\n  return\n}",
      "B10 {\n  $r26 \u003d Stack stack\u003e\n  $z8 \u003d $r26.isEmpty()\n  if ($z8 !\u003d 0) goto B11 else B19\n}",
      "B11 {\n  $r1 \u003d Stack stack\u003e\n  $r2 \u003d $r1.peek()\n  r3 \u003d NodeIterator) $r2\n  $i0 \u003d r3.getPosition()\n  $i1 \u003d $i0 + 1\n  $z1 \u003d r3.setPosition($i1)\n  if ($z1 \u003d\u003d false) goto B12 else B17\n}",
      "B12 {\n  $r5 \u003d r3.getNodePointer()\n  NodePointer currentNodePointer\u003e \u003d $r5\n  $z2 \u003d r0.isRecursive()\n  if ($z2 !\u003d 0) goto B13 else B18\n}",
      "B13 {\n  $r6 \u003d NodePointer currentNodePointer\u003e\n  $z3 \u003d $r6.isLeaf()\n  if ($z3 !\u003d 0) goto B14 else B15\n}",
      "B14 {\n  $r11 \u003d Stack stack\u003e\n  $r10 \u003d NodePointer currentNodePointer\u003e\n  $r9 \u003d NodeTest ELEMENT_NODE_TEST\u003e\n  $r12 \u003d $r10.childIterator($r9, 0, null)\n  $r11.push($r12)\n}",
      "B15 {\n  $r8 \u003d NodePointer currentNodePointer\u003e\n  $r7 \u003d NodeTest nodeTest\u003e\n  $z4 \u003d $r8.testNode($r7)\n  if ($z4 \u003d\u003d false) goto B16 else B18\n}",
      "B16 {\n  $i2 \u003d DescendantContext: int position\u003e\n  $i3 \u003d $i2 + 1\n  DescendantContext: int position\u003e \u003d $i3\n  return\n}",
      "B17 {\n  $r4 \u003d Stack stack\u003e\n  $r4.pop()\n}",
      "B18 {\n  goto B10\n}",
      "B19 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B10",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B10",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B19",
      "B11 --\u003e B12",
      "B11 --\u003e B17",
      "B12 --\u003e B13",
      "B12 --\u003e B18",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B16",
      "B15 --\u003e B18",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e B18",
      "B18 --\u003e B10",
      "B19 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DescendantContext#isRecursive(...0)",
        "body": "{\r\n    final Object node \u003d currentNodePointer.getNode();\r\n    for (int i \u003d stack.size() - 1; --i \u003e\u003d 0; ) {\r\n        final NodeIterator it \u003d stack.get(i);\r\n        final Pointer pointer \u003d it.getNodePointer();\r\n        if (pointer !\u003d null \u0026\u0026 pointer.getNode() \u003d\u003d node) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.DescendantContext",
    "methodName": "setPosition",
    "signature": "boolean setPosition(int)",
    "visibility": "public",
    "body": "{\r\n    if (position \u003c this.position) {\r\n        reset();\r\n    }\r\n    while (this.position \u003c position) {\r\n        if (!nextNode()) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003e\u003d $i1) → B1 | else → B2",
      "B2 : If($i2 \u003e\u003d i0) → B3 | else → B5",
      "B3 : If($z0 !\u003d 0) → B4 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DescendantContext\n  i0 :\u003d @parameter0: int\n  $i1 \u003d DescendantContext: int position\u003e\n  if (i0 \u003e\u003d $i1) goto B1 else B2\n}",
      "B1 {\n  r0.reset()\n}",
      "B2 {\n  $i2 \u003d DescendantContext: int position\u003e\n  if ($i2 \u003e\u003d i0) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.nextNode()\n  if ($z0 !\u003d 0) goto B4 else B2\n}",
      "B4 {\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DescendantContext#nextNode(...0)",
        "body": "{\r\n    if (!setStarted) {\r\n        setStarted \u003d true;\r\n        if (stack \u003d\u003d null) {\r\n            stack \u003d new Stack\u003c\u003e();\r\n        } else {\r\n            stack.clear();\r\n        }\r\n        currentNodePointer \u003d parentContext.getCurrentNodePointer();\r\n        if (currentNodePointer !\u003d null) {\r\n            if (!currentNodePointer.isLeaf()) {\r\n                stack.push(currentNodePointer.childIterator(ELEMENT_NODE_TEST, false, null));\r\n            }\r\n            if (includeSelf \u0026\u0026 currentNodePointer.testNode(nodeTest)) {\r\n                position++;\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    while (!stack.isEmpty()) {\r\n        final NodeIterator it \u003d stack.peek();\r\n        if (it.setPosition(it.getPosition() + 1)) {\r\n            currentNodePointer \u003d it.getNodePointer();\r\n            if (!isRecursive()) {\r\n                if (!currentNodePointer.isLeaf()) {\r\n                    stack.push(currentNodePointer.childIterator(ELEMENT_NODE_TEST, false, null));\r\n                }\r\n                if (currentNodePointer.testNode(nodeTest)) {\r\n                    position++;\r\n                    return true;\r\n                }\r\n            }\r\n        } else {\r\n            // We get here only if the name test failed\r\n            // and the iterator ended\r\n            stack.pop();\r\n        }\r\n    }\r\n    return false;\r\n}"
      },
      {
        "name": "DescendantContext#reset(...0)",
        "body": "{\r\n    super.reset();\r\n    setStarted \u003d false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.InitialContext",
    "methodName": "nextSet",
    "signature": "boolean nextSet()",
    "visibility": "public",
    "body": "{\r\n    if (started) {\r\n        return false;\r\n    }\r\n    started \u003d true;\r\n    return true;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  InitialContext\n  $z0 \u003d InitialContext: boolean started\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  InitialContext: boolean started\u003e \u003d 1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.InitialContext",
    "methodName": "setPosition",
    "signature": "boolean setPosition(int)",
    "visibility": "public",
    "body": "{\r\n    this.position \u003d position;\r\n    if (collection) {\r\n        if (position \u003e\u003d 1 \u0026\u0026 position \u003c\u003d nodePointer.getLength()) {\r\n            nodePointer.setIndex(position - 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    return position \u003d\u003d 1;\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B5",
      "B1 : If(i0 \u003c 1) → B2 | else → B4",
      "B2 : If(i0 \u003e $i1) → B3 | else → B4",
      "B5 : If(i0 !\u003d 1) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  InitialContext\n  i0 :\u003d @parameter0: int\n  InitialContext: int position\u003e \u003d i0\n  $z0 \u003d InitialContext: boolean collection\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  if (i0 \u003c 1) goto B2 else B4\n}",
      "B2 {\n  $r1 \u003d NodePointer nodePointer\u003e\n  $i1 \u003d $r1.getLength()\n  if (i0 \u003e $i1) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d NodePointer nodePointer\u003e\n  $i2 \u003d i0 - 1\n  $r2.setIndex($i2)\n  return\n}",
      "B4 {\n  return\n}",
      "B5 {\n  if (i0 !\u003d 1) goto B6 else B7\n}",
      "B6 {\n  $z1 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z1 \u003d 0\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.NamespaceContext",
    "methodName": "nextNode",
    "signature": "boolean nextNode()",
    "visibility": "public",
    "body": "{\r\n    super.setPosition(getCurrentPosition() + 1);\r\n    if (!setStarted) {\r\n        setStarted \u003d true;\r\n        if (!(nodeTest instanceof NodeNameTest)) {\r\n            return false;\r\n        }\r\n        final NodeNameTest nodeNameTest \u003d (NodeNameTest) nodeTest;\r\n        final QName testName \u003d nodeNameTest.getNodeName();\r\n        if (testName.getPrefix() !\u003d null) {\r\n            return false;\r\n        }\r\n        if (!nodeNameTest.isWildcard()) {\r\n            currentNodePointer \u003d parentContext.getCurrentNodePointer().namespacePointer(testName.getName());\r\n            return currentNodePointer !\u003d null;\r\n        }\r\n        iterator \u003d parentContext.getCurrentNodePointer().namespaceIterator();\r\n    }\r\n    if (iterator \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (!iterator.setPosition(iterator.getPosition() + 1)) {\r\n        return false;\r\n    }\r\n    currentNodePointer \u003d iterator.getNodePointer();\r\n    return true;\r\n}",
    "nodes": 16,
    "edges": 17,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B11",
      "B1 : If($z2 !\u003d 0) → B2 | else → B3",
      "B3 : If($r10 \u003d\u003d null) → B4 | else → B5",
      "B5 : If($z3 !\u003d 0) → B6 | else → B10",
      "B6 : If($r18 \u003d\u003d null) → B7 | else → B8",
      "B11 : If($r1 !\u003d null) → B12 | else → B13",
      "B13 : If($z1 !\u003d 0) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  NamespaceContext\n  $i0 \u003d r0.getCurrentPosition()\n  $i1 \u003d $i0 + 1\n  r0.setPosition($i1)\n  $z0 \u003d NamespaceContext: boolean setStarted\u003e\n  if ($z0 !\u003d 0) goto B1 else B11\n}",
      "B1 {\n  NamespaceContext: boolean setStarted\u003e \u003d 1\n  $r6 \u003d NodeTest nodeTest\u003e\n  $z2 \u003d NodeNameTest\n  if ($z2 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r7 \u003d NodeTest nodeTest\u003e\n  r8 \u003d NodeNameTest) $r7\n  r9 \u003d r8.getNodeName()\n  $r10 \u003d r9.getPrefix()\n  if ($r10 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $z3 \u003d r8.isWildcard()\n  if ($z3 !\u003d 0) goto B6 else B10\n}",
      "B6 {\n  $r14 \u003d EvalContext parentContext\u003e\n  $r16 \u003d $r14.getCurrentNodePointer()\n  $r15 \u003d r9.getName()\n  $r17 \u003d $r16.namespacePointer($r15)\n  NodePointer currentNodePointer\u003e \u003d $r17\n  $r18 \u003d NodePointer currentNodePointer\u003e\n  if ($r18 \u003d\u003d null) goto B7 else B8\n}",
      "B7 {\n  $z4 \u003d 1\n  goto B9\n}",
      "B8 {\n  $z4 \u003d 0\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $r11 \u003d EvalContext parentContext\u003e\n  $r12 \u003d $r11.getCurrentNodePointer()\n  $r13 \u003d $r12.namespaceIterator()\n  NodeIterator iterator\u003e \u003d $r13\n}",
      "B11 {\n  $r1 \u003d NodeIterator iterator\u003e\n  if ($r1 !\u003d null) goto B12 else B13\n}",
      "B12 {\n  return\n}",
      "B13 {\n  $r3 \u003d NodeIterator iterator\u003e\n  $r2 \u003d NodeIterator iterator\u003e\n  $i2 \u003d $r2.getPosition()\n  $i3 \u003d $i2 + 1\n  $z1 \u003d $r3.setPosition($i3)\n  if ($z1 !\u003d 0) goto B14 else B15\n}",
      "B14 {\n  return\n}",
      "B15 {\n  $r4 \u003d NodeIterator iterator\u003e\n  $r5 \u003d $r4.getNodePointer()\n  NodePointer currentNodePointer\u003e \u003d $r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B11",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NamespaceContext#getCurrentPosition(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.NamespaceContext",
    "methodName": "setPosition",
    "signature": "boolean setPosition(int)",
    "visibility": "public",
    "body": "{\r\n    if (position \u003c getCurrentPosition()) {\r\n        reset();\r\n    }\r\n    while (getCurrentPosition() \u003c position) {\r\n        if (!nextNode()) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003e\u003d $i1) → B1 | else → B2",
      "B2 : If($i2 \u003e\u003d i0) → B3 | else → B5",
      "B3 : If($z0 !\u003d 0) → B4 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NamespaceContext\n  i0 :\u003d @parameter0: int\n  $i1 \u003d r0.getCurrentPosition()\n  if (i0 \u003e\u003d $i1) goto B1 else B2\n}",
      "B1 {\n  r0.reset()\n}",
      "B2 {\n  $i2 \u003d r0.getCurrentPosition()\n  if ($i2 \u003e\u003d i0) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.nextNode()\n  if ($z0 !\u003d 0) goto B4 else B2\n}",
      "B4 {\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NamespaceContext#nextNode(...0)",
        "body": "{\r\n    super.setPosition(getCurrentPosition() + 1);\r\n    if (!setStarted) {\r\n        setStarted \u003d true;\r\n        if (!(nodeTest instanceof NodeNameTest)) {\r\n            return false;\r\n        }\r\n        final NodeNameTest nodeNameTest \u003d (NodeNameTest) nodeTest;\r\n        final QName testName \u003d nodeNameTest.getNodeName();\r\n        if (testName.getPrefix() !\u003d null) {\r\n            return false;\r\n        }\r\n        if (!nodeNameTest.isWildcard()) {\r\n            currentNodePointer \u003d parentContext.getCurrentNodePointer().namespacePointer(testName.getName());\r\n            return currentNodePointer !\u003d null;\r\n        }\r\n        iterator \u003d parentContext.getCurrentNodePointer().namespaceIterator();\r\n    }\r\n    if (iterator \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (!iterator.setPosition(iterator.getPosition() + 1)) {\r\n        return false;\r\n    }\r\n    currentNodePointer \u003d iterator.getNodePointer();\r\n    return true;\r\n}"
      },
      {
        "name": "NamespaceContext#getCurrentPosition(...0)",
        "body": "(source not found)"
      },
      {
        "name": "NamespaceContext#reset(...0)",
        "body": "{\r\n    setStarted \u003d false;\r\n    iterator \u003d null;\r\n    super.reset();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.NodeSetContext",
    "methodName": "getCurrentNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer getCurrentNodePointer()",
    "visibility": "public",
    "body": "{\r\n    if (position \u003d\u003d 0 \u0026\u0026 !setPosition(1)) {\r\n        return null;\r\n    }\r\n    return (NodePointer) nodeSet.getPointers().get(position - 1);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B3",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  NodeSetContext\n  $i0 \u003d NodeSetContext: int position\u003e\n  if ($i0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d r0.setPosition(1)\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r1 \u003d NodeSet nodeSet\u003e\n  $r2 \u003d $r1.getPointers()\n  $i1 \u003d NodeSetContext: int position\u003e\n  $i2 \u003d $i1 - 1\n  $r3 \u003d $r2.get($i2)\n  $r4 \u003d NodePointer) $r3\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NodeSetContext#setPosition(...1)",
        "body": "{\r\n    super.setPosition(position);\r\n    return position \u003e\u003d 1 \u0026\u0026 position \u003c\u003d nodeSet.getPointers().size();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.NodeSetContext",
    "methodName": "nextSet",
    "signature": "boolean nextSet()",
    "visibility": "public",
    "body": "{\r\n    if (startedSet) {\r\n        return false;\r\n    }\r\n    startedSet \u003d true;\r\n    return true;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NodeSetContext\n  $z0 \u003d NodeSetContext: boolean startedSet\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  NodeSetContext: boolean startedSet\u003e \u003d 1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.NodeSetContext",
    "methodName": "setPosition",
    "signature": "boolean setPosition(int)",
    "visibility": "public",
    "body": "{\r\n    super.setPosition(position);\r\n    return position \u003e\u003d 1 \u0026\u0026 position \u003c\u003d nodeSet.getPointers().size();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003c 1) → B1 | else → B3",
      "B1 : If(i0 \u003e $i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  NodeSetContext\n  i0 :\u003d @parameter0: int\n  r0.setPosition(i0)\n  if (i0 \u003c 1) goto B1 else B3\n}",
      "B1 {\n  $r1 \u003d NodeSet nodeSet\u003e\n  $r2 \u003d $r1.getPointers()\n  $i1 \u003d $r2.size()\n  if (i0 \u003e $i1) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.ParentContext",
    "methodName": "nextNode",
    "signature": "boolean nextNode()",
    "visibility": "public",
    "body": "{\r\n    // Each set contains exactly one node: the parent\r\n    if (setStarted) {\r\n        return false;\r\n    }\r\n    setStarted \u003d true;\r\n    final NodePointer thisLocation \u003d parentContext.getCurrentNodePointer();\r\n    currentNodePointer \u003d thisLocation.getImmediateParentPointer();\r\n    while (currentNodePointer !\u003d null \u0026\u0026 currentNodePointer.isContainer()) {\r\n        currentNodePointer \u003d currentNodePointer.getImmediateParentPointer();\r\n    }\r\n    if (currentNodePointer !\u003d null \u0026\u0026 currentNodePointer.testNode(nodeTest)) {\r\n        position++;\r\n        return true;\r\n    }\r\n    return false;\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B3 : If($r4 \u003d\u003d null) → B4 | else → B6",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B6",
      "B6 : If($r5 \u003d\u003d null) → B7 | else → B9",
      "B7 : If($z1 \u003d\u003d false) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  ParentContext\n  $z0 \u003d ParentContext: boolean setStarted\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  ParentContext: boolean setStarted\u003e \u003d 1\n  $r1 \u003d EvalContext parentContext\u003e\n  r2 \u003d $r1.getCurrentNodePointer()\n  $r3 \u003d r2.getImmediateParentPointer()\n  NodePointer currentNodePointer\u003e \u003d $r3\n}",
      "B3 {\n  $r4 \u003d NodePointer currentNodePointer\u003e\n  if ($r4 \u003d\u003d null) goto B4 else B6\n}",
      "B4 {\n  $r8 \u003d NodePointer currentNodePointer\u003e\n  $z2 \u003d $r8.isContainer()\n  if ($z2 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r9 \u003d NodePointer currentNodePointer\u003e\n  $r10 \u003d $r9.getImmediateParentPointer()\n  NodePointer currentNodePointer\u003e \u003d $r10\n  goto B3\n}",
      "B6 {\n  $r5 \u003d NodePointer currentNodePointer\u003e\n  if ($r5 \u003d\u003d null) goto B7 else B9\n}",
      "B7 {\n  $r7 \u003d NodePointer currentNodePointer\u003e\n  $r6 \u003d NodeTest nodeTest\u003e\n  $z1 \u003d $r7.testNode($r6)\n  if ($z1 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $i0 \u003d ParentContext: int position\u003e\n  $i1 \u003d $i0 + 1\n  ParentContext: int position\u003e \u003d $i1\n  return\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B3",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.ParentContext",
    "methodName": "setPosition",
    "signature": "boolean setPosition(int)",
    "visibility": "public",
    "body": "{\r\n    super.setPosition(position);\r\n    return position \u003d\u003d 1;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 !\u003d 1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ParentContext\n  i0 :\u003d @parameter0: int\n  r0.setPosition(i0)\n  if (i0 !\u003d 1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext",
    "methodName": "getDocumentOrder",
    "signature": "int getDocumentOrder()",
    "visibility": "public",
    "body": "{\r\n    return reverse ? -1 : 1;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PrecedingOrFollowingContext\n  $z0 \u003d PrecedingOrFollowingContext: boolean reverse\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $b0 \u003d -1\n  goto B3\n}",
      "B2 {\n  $b0 \u003d 1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext",
    "methodName": "nextNode",
    "signature": "boolean nextNode()",
    "visibility": "public",
    "body": "{\r\n    if (!setStarted) {\r\n        setStarted \u003d true;\r\n        if (stack \u003d\u003d null) {\r\n            stack \u003d new Stack\u003c\u003e();\r\n        } else {\r\n            stack.clear();\r\n        }\r\n        currentRootLocation \u003d parentContext.getCurrentNodePointer();\r\n        final NodePointer parent \u003d currentRootLocation.getParent();\r\n        if (parent !\u003d null) {\r\n            // TBD: check type\r\n            stack.push(parent.childIterator(null, reverse, currentRootLocation));\r\n        }\r\n    }\r\n    while (true) {\r\n        if (stack.isEmpty()) {\r\n            currentRootLocation \u003d currentRootLocation.getParent();\r\n            if (currentRootLocation \u003d\u003d null || currentRootLocation.isRoot()) {\r\n                break;\r\n            }\r\n            final NodePointer parent \u003d currentRootLocation.getParent();\r\n            if (parent !\u003d null) {\r\n                stack.push(parent.childIterator(null, reverse, currentRootLocation));\r\n            }\r\n        }\r\n        while (!stack.isEmpty()) {\r\n            if (!reverse) {\r\n                final NodeIterator it \u003d stack.peek();\r\n                if (it.setPosition(it.getPosition() + 1)) {\r\n                    currentNodePointer \u003d it.getNodePointer();\r\n                    if (!currentNodePointer.isLeaf()) {\r\n                        stack.push(currentNodePointer.childIterator(null, reverse, null));\r\n                    }\r\n                    if (currentNodePointer.testNode(nodeTest)) {\r\n                        super.setPosition(getCurrentPosition() + 1);\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    // We get here only if the name test failed\r\n                    // and the iterator ended\r\n                    stack.pop();\r\n                }\r\n            } else {\r\n                NodeIterator it \u003d stack.peek();\r\n                if (it.setPosition(it.getPosition() + 1)) {\r\n                    currentNodePointer \u003d it.getNodePointer();\r\n                    if (!currentNodePointer.isLeaf()) {\r\n                        stack.push(currentNodePointer.childIterator(null, reverse, null));\r\n                    } else if (currentNodePointer.testNode(nodeTest)) {\r\n                        super.setPosition(getCurrentPosition() + 1);\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    stack.pop();\r\n                    if (!stack.isEmpty()) {\r\n                        it \u003d stack.peek();\r\n                        currentNodePointer \u003d it.getNodePointer();\r\n                        if (currentNodePointer.testNode(nodeTest)) {\r\n                            super.setPosition(getCurrentPosition() + 1);\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 31,
    "edges": 44,
    "cc": 15,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B6",
      "B1 : If($r35 !\u003d null) → B2 | else → B3",
      "B4 : If($r44 \u003d\u003d null) → B5 | else → B6",
      "B6 : If($z15 \u003d\u003d false) → B7 | else → B12",
      "B7 : If($r29 \u003d\u003d null) → B8 | else → B30",
      "B8 : If($z12 \u003d\u003d false) → B9 | else → B10",
      "B10 : If(r46 \u003d\u003d null) → B11 | else → B12",
      "B12 : If($z16 !\u003d 0) → B13 | else → B6",
      "B13 : If($z1 !\u003d 0) → B14 | else → B21",
      "B14 : If($z8 \u003d\u003d false) → B15 | else → B19",
      "B15 : If($z9 !\u003d 0) → B16 | else → B17",
      "B17 : If($z10 \u003d\u003d false) → B18 | else → B20",
      "B21 : If($z2 \u003d\u003d false) → B22 | else → B26",
      "B22 : If($z5 !\u003d 0) → B23 | else → B24",
      "B24 : If($z6 \u003d\u003d false) → B25 | else → B29",
      "B26 : If($z3 !\u003d 0) → B27 | else → B29",
      "B27 : If($z4 \u003d\u003d false) → B28 | else → B29"
    ],
    "blockList": [
      "B0 {\n  PrecedingOrFollowingContext\n  $z0 \u003d PrecedingOrFollowingContext: boolean setStarted\u003e\n  if ($z0 !\u003d 0) goto B1 else B6\n}",
      "B1 {\n  PrecedingOrFollowingContext: boolean setStarted\u003e \u003d 1\n  $r35 \u003d Stack stack\u003e\n  if ($r35 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r43 \u003d Stack\n  new Stack()\n  Stack stack\u003e \u003d $r43\n  goto B4\n}",
      "B3 {\n  $r36 \u003d Stack stack\u003e\n  $r36.clear()\n}",
      "B4 {\n  $r37 \u003d EvalContext parentContext\u003e\n  $r38 \u003d $r37.getCurrentNodePointer()\n  NodePointer currentRootLocation\u003e \u003d $r38\n  $r39 \u003d NodePointer currentRootLocation\u003e\n  $r44 \u003d $r39.getParent()\n  if ($r44 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r41 \u003d Stack stack\u003e\n  $z14 \u003d PrecedingOrFollowingContext: boolean reverse\u003e\n  $r40 \u003d NodePointer currentRootLocation\u003e\n  $r42 \u003d $r44.childIterator(null, $z14, $r40)\n  $r41.push($r42)\n}",
      "B6 {\n  $r45 \u003d Stack stack\u003e\n  $z15 \u003d $r45.isEmpty()\n  if ($z15 \u003d\u003d false) goto B7 else B12\n}",
      "B7 {\n  $r27 \u003d NodePointer currentRootLocation\u003e\n  $r28 \u003d $r27.getParent()\n  NodePointer currentRootLocation\u003e \u003d $r28\n  $r29 \u003d NodePointer currentRootLocation\u003e\n  if ($r29 \u003d\u003d null) goto B8 else B30\n}",
      "B8 {\n  $r30 \u003d NodePointer currentRootLocation\u003e\n  $z12 \u003d $r30.isRoot()\n  if ($z12 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  goto B30\n}",
      "B10 {\n  $r31 \u003d NodePointer currentRootLocation\u003e\n  r46 \u003d $r31.getParent()\n  if (r46 \u003d\u003d null) goto B11 else B12\n}",
      "B11 {\n  $r33 \u003d Stack stack\u003e\n  $z13 \u003d PrecedingOrFollowingContext: boolean reverse\u003e\n  $r32 \u003d NodePointer currentRootLocation\u003e\n  $r34 \u003d r46.childIterator(null, $z13, $r32)\n  $r33.push($r34)\n}",
      "B12 {\n  $r47 \u003d Stack stack\u003e\n  $z16 \u003d $r47.isEmpty()\n  if ($z16 !\u003d 0) goto B13 else B6\n}",
      "B13 {\n  $z1 \u003d PrecedingOrFollowingContext: boolean reverse\u003e\n  if ($z1 !\u003d 0) goto B14 else B21\n}",
      "B14 {\n  $r17 \u003d Stack stack\u003e\n  $r18 \u003d $r17.peek()\n  r48 \u003d NodeIterator) $r18\n  $i6 \u003d r48.getPosition()\n  $i7 \u003d $i6 + 1\n  $z8 \u003d r48.setPosition($i7)\n  if ($z8 \u003d\u003d false) goto B15 else B19\n}",
      "B15 {\n  $r20 \u003d r48.getNodePointer()\n  NodePointer currentNodePointer\u003e \u003d $r20\n  $r21 \u003d NodePointer currentNodePointer\u003e\n  $z9 \u003d $r21.isLeaf()\n  if ($z9 !\u003d 0) goto B16 else B17\n}",
      "B16 {\n  $r25 \u003d Stack stack\u003e\n  $r24 \u003d NodePointer currentNodePointer\u003e\n  $z11 \u003d PrecedingOrFollowingContext: boolean reverse\u003e\n  $r26 \u003d $r24.childIterator(null, $z11, null)\n  $r25.push($r26)\n}",
      "B17 {\n  $r23 \u003d NodePointer currentNodePointer\u003e\n  $r22 \u003d NodeTest nodeTest\u003e\n  $z10 \u003d $r23.testNode($r22)\n  if ($z10 \u003d\u003d false) goto B18 else B20\n}",
      "B18 {\n  $i8 \u003d r0.getCurrentPosition()\n  $i9 \u003d $i8 + 1\n  r0.setPosition($i9)\n  return\n}",
      "B19 {\n  $r19 \u003d Stack stack\u003e\n  $r19.pop()\n}",
      "B20 {\n  goto B12\n}",
      "B21 {\n  $r1 \u003d Stack stack\u003e\n  $r2 \u003d $r1.peek()\n  r49 \u003d NodeIterator) $r2\n  $i0 \u003d r49.getPosition()\n  $i1 \u003d $i0 + 1\n  $z2 \u003d r49.setPosition($i1)\n  if ($z2 \u003d\u003d false) goto B22 else B26\n}",
      "B22 {\n  $r10 \u003d r49.getNodePointer()\n  NodePointer currentNodePointer\u003e \u003d $r10\n  $r11 \u003d NodePointer currentNodePointer\u003e\n  $z5 \u003d $r11.isLeaf()\n  if ($z5 !\u003d 0) goto B23 else B24\n}",
      "B23 {\n  $r15 \u003d Stack stack\u003e\n  $r14 \u003d NodePointer currentNodePointer\u003e\n  $z7 \u003d PrecedingOrFollowingContext: boolean reverse\u003e\n  $r16 \u003d $r14.childIterator(null, $z7, null)\n  $r15.push($r16)\n  goto B29\n}",
      "B24 {\n  $r13 \u003d NodePointer currentNodePointer\u003e\n  $r12 \u003d NodeTest nodeTest\u003e\n  $z6 \u003d $r13.testNode($r12)\n  if ($z6 \u003d\u003d false) goto B25 else B29\n}",
      "B25 {\n  $i4 \u003d r0.getCurrentPosition()\n  $i5 \u003d $i4 + 1\n  r0.setPosition($i5)\n  return\n}",
      "B26 {\n  $r3 \u003d Stack stack\u003e\n  $r3.pop()\n  $r4 \u003d Stack stack\u003e\n  $z3 \u003d $r4.isEmpty()\n  if ($z3 !\u003d 0) goto B27 else B29\n}",
      "B27 {\n  $r5 \u003d Stack stack\u003e\n  $r6 \u003d $r5.peek()\n  r50 \u003d NodeIterator) $r6\n  $r7 \u003d r50.getNodePointer()\n  NodePointer currentNodePointer\u003e \u003d $r7\n  $r9 \u003d NodePointer currentNodePointer\u003e\n  $r8 \u003d NodeTest nodeTest\u003e\n  $z4 \u003d $r9.testNode($r8)\n  if ($z4 \u003d\u003d false) goto B28 else B29\n}",
      "B28 {\n  $i2 \u003d r0.getCurrentPosition()\n  $i3 \u003d $i2 + 1\n  r0.setPosition($i3)\n  return\n}",
      "B29 {\n  goto B12\n}",
      "B30 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B12",
      "B7 --\u003e B8",
      "B7 --\u003e B30",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B30",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B6",
      "B13 --\u003e B14",
      "B13 --\u003e B21",
      "B14 --\u003e B15",
      "B14 --\u003e B19",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e B18",
      "B17 --\u003e B20",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e B20",
      "B20 --\u003e B12",
      "B21 --\u003e B22",
      "B21 --\u003e B26",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B29",
      "B24 --\u003e B25",
      "B24 --\u003e B29",
      "B25 --\u003e [EXIT]",
      "B26 --\u003e B27",
      "B26 --\u003e B29",
      "B27 --\u003e B28",
      "B27 --\u003e B29",
      "B28 --\u003e [EXIT]",
      "B29 --\u003e B12",
      "B30 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PrecedingOrFollowingContext#getCurrentPosition(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext",
    "methodName": "setPosition",
    "signature": "boolean setPosition(int)",
    "visibility": "public",
    "body": "{\r\n    if (position \u003c this.position) {\r\n        reset();\r\n    }\r\n    while (this.position \u003c position) {\r\n        if (!nextNode()) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003e\u003d $i1) → B1 | else → B2",
      "B2 : If($i2 \u003e\u003d i0) → B3 | else → B5",
      "B3 : If($z0 !\u003d 0) → B4 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PrecedingOrFollowingContext\n  i0 :\u003d @parameter0: int\n  $i1 \u003d PrecedingOrFollowingContext: int position\u003e\n  if (i0 \u003e\u003d $i1) goto B1 else B2\n}",
      "B1 {\n  r0.reset()\n}",
      "B2 {\n  $i2 \u003d PrecedingOrFollowingContext: int position\u003e\n  if ($i2 \u003e\u003d i0) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.nextNode()\n  if ($z0 !\u003d 0) goto B4 else B2\n}",
      "B4 {\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PrecedingOrFollowingContext#nextNode(...0)",
        "body": "{\r\n    if (!setStarted) {\r\n        setStarted \u003d true;\r\n        if (stack \u003d\u003d null) {\r\n            stack \u003d new Stack\u003c\u003e();\r\n        } else {\r\n            stack.clear();\r\n        }\r\n        currentRootLocation \u003d parentContext.getCurrentNodePointer();\r\n        final NodePointer parent \u003d currentRootLocation.getParent();\r\n        if (parent !\u003d null) {\r\n            // TBD: check type\r\n            stack.push(parent.childIterator(null, reverse, currentRootLocation));\r\n        }\r\n    }\r\n    while (true) {\r\n        if (stack.isEmpty()) {\r\n            currentRootLocation \u003d currentRootLocation.getParent();\r\n            if (currentRootLocation \u003d\u003d null || currentRootLocation.isRoot()) {\r\n                break;\r\n            }\r\n            final NodePointer parent \u003d currentRootLocation.getParent();\r\n            if (parent !\u003d null) {\r\n                stack.push(parent.childIterator(null, reverse, currentRootLocation));\r\n            }\r\n        }\r\n        while (!stack.isEmpty()) {\r\n            if (!reverse) {\r\n                final NodeIterator it \u003d stack.peek();\r\n                if (it.setPosition(it.getPosition() + 1)) {\r\n                    currentNodePointer \u003d it.getNodePointer();\r\n                    if (!currentNodePointer.isLeaf()) {\r\n                        stack.push(currentNodePointer.childIterator(null, reverse, null));\r\n                    }\r\n                    if (currentNodePointer.testNode(nodeTest)) {\r\n                        super.setPosition(getCurrentPosition() + 1);\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    // We get here only if the name test failed\r\n                    // and the iterator ended\r\n                    stack.pop();\r\n                }\r\n            } else {\r\n                NodeIterator it \u003d stack.peek();\r\n                if (it.setPosition(it.getPosition() + 1)) {\r\n                    currentNodePointer \u003d it.getNodePointer();\r\n                    if (!currentNodePointer.isLeaf()) {\r\n                        stack.push(currentNodePointer.childIterator(null, reverse, null));\r\n                    } else if (currentNodePointer.testNode(nodeTest)) {\r\n                        super.setPosition(getCurrentPosition() + 1);\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    stack.pop();\r\n                    if (!stack.isEmpty()) {\r\n                        it \u003d stack.peek();\r\n                        currentNodePointer \u003d it.getNodePointer();\r\n                        if (currentNodePointer.testNode(nodeTest)) {\r\n                            super.setPosition(getCurrentPosition() + 1);\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}"
      },
      {
        "name": "PrecedingOrFollowingContext#reset(...0)",
        "body": "{\r\n    super.reset();\r\n    setStarted \u003d false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.PredicateContext",
    "methodName": "getCurrentNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer getCurrentNodePointer()",
    "visibility": "public",
    "body": "{\r\n    if (position \u003d\u003d 0 \u0026\u0026 !setPosition(1)) {\r\n        return null;\r\n    }\r\n    if (dynamicPropertyPointer !\u003d null) {\r\n        return dynamicPropertyPointer.getValuePointer();\r\n    }\r\n    return parentContext.getCurrentNodePointer();\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B3",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3",
      "B3 : If($r1 \u003d\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  PredicateContext\n  $i0 \u003d PredicateContext: int position\u003e\n  if ($i0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d r0.setPosition(1)\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r1 \u003d PropertyPointer dynamicPropertyPointer\u003e\n  if ($r1 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d PropertyPointer dynamicPropertyPointer\u003e\n  $r5 \u003d $r4.getValuePointer()\n  return\n}",
      "B5 {\n  $r2 \u003d EvalContext parentContext\u003e\n  $r3 \u003d $r2.getCurrentNodePointer()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PredicateContext#setPosition(...1)",
        "body": "{\r\n    if (nameTestExpression \u003d\u003d null) {\r\n        return setPositionStandard(position);\r\n    }\r\n    if (dynamicPropertyPointer \u003d\u003d null \u0026\u0026 !setupDynamicPropertyPointer()) {\r\n        return setPositionStandard(position);\r\n    }\r\n    if (position \u003c 1 || position \u003e dynamicPropertyPointer.getLength()) {\r\n        return false;\r\n    }\r\n    dynamicPropertyPointer.setIndex(position - 1);\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.PredicateContext",
    "methodName": "nextNode",
    "signature": "boolean nextNode()",
    "visibility": "public",
    "body": "{\r\n    if (done) {\r\n        return false;\r\n    }\r\n    while (parentContext.nextNode()) {\r\n        if (setupDynamicPropertyPointer()) {\r\n            final Object pred \u003d nameTestExpression.computeValue(parentContext);\r\n            final String propertyName \u003d InfoSetUtil.stringValue(pred);\r\n            // At this point it would be nice to say:\r\n            // dynamicPropertyPointer.setPropertyName(propertyName)\r\n            // and then: dynamicPropertyPointer.isActual().\r\n            // However some PropertyPointers, e.g. DynamicPropertyPointer\r\n            // will declare that any property you ask for is actual.\r\n            // That\u0027s not acceptable for us: we really need to know\r\n            // if the property is currently declared. Thus,\r\n            // we\u0027ll need to perform a search.\r\n            boolean ok \u003d false;\r\n            final String[] names \u003d dynamicPropertyPointer.getPropertyNames();\r\n            for (final String name : names) {\r\n                if (name.equals(propertyName)) {\r\n                    ok \u003d true;\r\n                    break;\r\n                }\r\n            }\r\n            if (ok) {\r\n                dynamicPropertyPointer.setPropertyName(propertyName);\r\n                position++;\r\n                return true;\r\n            }\r\n        } else {\r\n            Object pred \u003d expression.computeValue(parentContext);\r\n            if (pred instanceof Iterator) {\r\n                if (!((Iterator) pred).hasNext()) {\r\n                    return false;\r\n                }\r\n                pred \u003d ((Iterator) pred).next();\r\n            }\r\n            if (pred instanceof NodePointer) {\r\n                pred \u003d ((NodePointer) pred).getNode();\r\n            }\r\n            if (pred instanceof Number) {\r\n                final int pos \u003d (int) InfoSetUtil.doubleValue(pred);\r\n                position++;\r\n                done \u003d true;\r\n                return parentContext.setPosition(pos);\r\n            }\r\n            if (InfoSetUtil.booleanValue(pred)) {\r\n                position++;\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 24,
    "edges": 29,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z9 \u003d\u003d false) → B3 | else → B23",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B12",
      "B5 : If(i7 \u003e\u003d i4) → B6 | else → B9",
      "B6 : If($z8 \u003d\u003d false) → B7 | else → B8",
      "B9 : If(z10 \u003d\u003d false) → B10 | else → B11",
      "B12 : If($z2 \u003d\u003d false) → B13 | else → B16",
      "B13 : If($z7 !\u003d 0) → B14 | else → B15",
      "B16 : If($z3 \u003d\u003d false) → B17 | else → B18",
      "B18 : If($z4 \u003d\u003d false) → B19 | else → B20",
      "B20 : If($z5 \u003d\u003d false) → B21 | else → B22"
    ],
    "blockList": [
      "B0 {\n  PredicateContext\n  $z0 \u003d PredicateContext: boolean done\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r13 \u003d EvalContext parentContext\u003e\n  $z9 \u003d $r13.nextNode()\n  if ($z9 \u003d\u003d false) goto B3 else B23\n}",
      "B3 {\n  $z1 \u003d r0.setupDynamicPropertyPointer()\n  if ($z1 \u003d\u003d false) goto B4 else B12\n}",
      "B4 {\n  $r8 \u003d Expression nameTestExpression\u003e\n  $r7 \u003d EvalContext parentContext\u003e\n  r14 \u003d $r8.computeValue($r7)\n  r15 \u003d InfoSetUtil.stringValue(r14)\n  z10 \u003d 0\n  $r9 \u003d PropertyPointer dynamicPropertyPointer\u003e\n  r10 \u003d $r9.getPropertyNames()\n  i4 \u003d lengthof r10\n  i7 \u003d 0\n}",
      "B5 {\n  if (i7 \u003e\u003d i4) goto B6 else B9\n}",
      "B6 {\n  r12 \u003d r10[i7]\n  $z8 \u003d r12.equals(r15)\n  if ($z8 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  z10 \u003d 1\n  goto B9\n}",
      "B8 {\n  i7 \u003d i7 + 1\n  goto B5\n}",
      "B9 {\n  if (z10 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  $r11 \u003d PropertyPointer dynamicPropertyPointer\u003e\n  $r11.setPropertyName(r15)\n  $i5 \u003d PredicateContext: int position\u003e\n  $i6 \u003d $i5 + 1\n  PredicateContext: int position\u003e \u003d $i6\n  return\n}",
      "B11 {\n  goto B2\n}",
      "B12 {\n  $r2 \u003d Expression expression\u003e\n  $r1 \u003d EvalContext parentContext\u003e\n  r16 \u003d $r2.computeValue($r1)\n  $z2 \u003d Iterator\n  if ($z2 \u003d\u003d false) goto B13 else B16\n}",
      "B13 {\n  $r5 \u003d Iterator) r16\n  $z7 \u003d $r5.hasNext()\n  if ($z7 !\u003d 0) goto B14 else B15\n}",
      "B14 {\n  return\n}",
      "B15 {\n  $r6 \u003d Iterator) r16\n  r16 \u003d $r6.next()\n}",
      "B16 {\n  $z3 \u003d NodePointer\n  if ($z3 \u003d\u003d false) goto B17 else B18\n}",
      "B17 {\n  $r4 \u003d NodePointer) r16\n  r16 \u003d $r4.getNode()\n}",
      "B18 {\n  $z4 \u003d Number\n  if ($z4 \u003d\u003d false) goto B19 else B20\n}",
      "B19 {\n  $d0 \u003d InfoSetUtil.doubleValue(r16)\n  i8 \u003d (int) $d0\n  $i2 \u003d PredicateContext: int position\u003e\n  $i3 \u003d $i2 + 1\n  PredicateContext: int position\u003e \u003d $i3\n  PredicateContext: boolean done\u003e \u003d 1\n  $r3 \u003d EvalContext parentContext\u003e\n  $z6 \u003d $r3.setPosition(i8)\n  return\n}",
      "B20 {\n  $z5 \u003d InfoSetUtil.booleanValue(r16)\n  if ($z5 \u003d\u003d false) goto B21 else B22\n}",
      "B21 {\n  $i0 \u003d PredicateContext: int position\u003e\n  $i1 \u003d $i0 + 1\n  PredicateContext: int position\u003e \u003d $i1\n  return\n}",
      "B22 {\n  goto B2\n}",
      "B23 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B23",
      "B3 --\u003e B4",
      "B3 --\u003e B12",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B5",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B2",
      "B12 --\u003e B13",
      "B12 --\u003e B16",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B16",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e [EXIT]",
      "B22 --\u003e B2",
      "B23 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PredicateContext#setupDynamicPropertyPointer(...0)",
        "body": "{\r\n    if (nameTestExpression \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    NodePointer parent \u003d parentContext.getCurrentNodePointer();\r\n    if (parent \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    parent \u003d parent.getValuePointer();\r\n    if (!(parent instanceof PropertyOwnerPointer)) {\r\n        return false;\r\n    }\r\n    dynamicPropertyPointer \u003d (PropertyPointer) ((PropertyOwnerPointer) parent).getPropertyPointer().clone();\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.PredicateContext",
    "methodName": "setPosition",
    "signature": "boolean setPosition(int)",
    "visibility": "public",
    "body": "{\r\n    if (nameTestExpression \u003d\u003d null) {\r\n        return setPositionStandard(position);\r\n    }\r\n    if (dynamicPropertyPointer \u003d\u003d null \u0026\u0026 !setupDynamicPropertyPointer()) {\r\n        return setPositionStandard(position);\r\n    }\r\n    if (position \u003c 1 || position \u003e dynamicPropertyPointer.getLength()) {\r\n        return false;\r\n    }\r\n    dynamicPropertyPointer.setIndex(position - 1);\r\n    return true;\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B2 : If($r2 !\u003d null) → B3 | else → B5",
      "B3 : If($z0 !\u003d 0) → B4 | else → B5",
      "B5 : If(i0 \u003c 1) → B6 | else → B7",
      "B6 : If(i0 \u003c\u003d $i1) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  PredicateContext\n  i0 :\u003d @parameter0: int\n  $r1 \u003d Expression nameTestExpression\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z2 \u003d r0.setPositionStandard(i0)\n  return\n}",
      "B2 {\n  $r2 \u003d PropertyPointer dynamicPropertyPointer\u003e\n  if ($r2 !\u003d null) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.setupDynamicPropertyPointer()\n  if ($z0 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $z1 \u003d r0.setPositionStandard(i0)\n  return\n}",
      "B5 {\n  if (i0 \u003c 1) goto B6 else B7\n}",
      "B6 {\n  $r3 \u003d PropertyPointer dynamicPropertyPointer\u003e\n  $i1 \u003d $r3.getLength()\n  if (i0 \u003c\u003d $i1) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $r4 \u003d PropertyPointer dynamicPropertyPointer\u003e\n  $i2 \u003d i0 - 1\n  $r4.setIndex($i2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PredicateContext#setPositionStandard(...1)",
        "body": "{\r\n    if (this.position \u003e position) {\r\n        reset();\r\n    }\r\n    while (this.position \u003c position) {\r\n        if (!nextNode()) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"
      },
      {
        "name": "PredicateContext#setupDynamicPropertyPointer(...0)",
        "body": "{\r\n    if (nameTestExpression \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    NodePointer parent \u003d parentContext.getCurrentNodePointer();\r\n    if (parent \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    parent \u003d parent.getValuePointer();\r\n    if (!(parent instanceof PropertyOwnerPointer)) {\r\n        return false;\r\n    }\r\n    dynamicPropertyPointer \u003d (PropertyPointer) ((PropertyOwnerPointer) parent).getPropertyPointer().clone();\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.RootContext",
    "methodName": "getConstantContext",
    "signature": "org.apache.commons.jxpath.ri.EvalContext getConstantContext(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (constant instanceof NodeSet) {\r\n        return new NodeSetContext(new RootContext(jxpathContext, null), (NodeSet) constant);\r\n    }\r\n    NodePointer pointer;\r\n    if (constant instanceof NodePointer) {\r\n        pointer \u003d (NodePointer) constant;\r\n    } else {\r\n        pointer \u003d NodePointer.newNodePointer(new QName(null, \"\"), constant, null);\r\n    }\r\n    return new InitialContext(new RootContext(jxpathContext, pointer));\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  RootContext\n  Object\n  $z0 \u003d NodeSet\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d NodeSetContext\n  $r7 \u003d RootContext\n  $r8 \u003d JXPathContextReferenceImpl jxpathContext\u003e\n  new RootContext($r8, null)\n  $r9 \u003d NodeSet) r0\n  new NodeSetContext($r7, $r9)\n  return\n}",
      "B2 {\n  $z1 \u003d NodePointer\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  r10 \u003d NodePointer) r0\n  goto B5\n}",
      "B4 {\n  $r1 \u003d QName\n  new QName(null, \"\")\n  r10 \u003d NodePointer.newNodePointer($r1, r0, null)\n}",
      "B5 {\n  $r2 \u003d InitialContext\n  $r3 \u003d RootContext\n  $r5 \u003d JXPathContextReferenceImpl jxpathContext\u003e\n  new RootContext($r5, r10)\n  new InitialContext($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.RootContext",
    "methodName": "getRegisteredValue",
    "signature": "java.lang.Object getRegisteredValue(int)",
    "visibility": "public",
    "body": "{\r\n    if (registers \u003d\u003d null || id \u003e\u003d MAX_REGISTER || id \u003d\u003d -1) {\r\n        return UNKNOWN_VALUE;\r\n    }\r\n    return registers[id];\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(i0 \u003e\u003d 4) → B2 | else → B3",
      "B2 : If(i0 !\u003d $i2) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  RootContext\n  i0 :\u003d @parameter0: int\n  $r1 \u003d Object[] registers\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  if (i0 \u003e\u003d 4) goto B2 else B3\n}",
      "B2 {\n  $i2 \u003d (int) -1\n  if (i0 !\u003d $i2) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d Object UNKNOWN_VALUE\u003e\n  return\n}",
      "B4 {\n  $r2 \u003d Object[] registers\u003e\n  $r3 \u003d $r2[i0]\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.RootContext",
    "methodName": "setRegisteredValue",
    "signature": "int setRegisteredValue(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (registers \u003d\u003d null) {\r\n        registers \u003d new Object[MAX_REGISTER];\r\n        for (int i \u003d 0; i \u003c MAX_REGISTER; i++) {\r\n            registers[i] \u003d UNKNOWN_VALUE;\r\n        }\r\n    }\r\n    if (availableRegister \u003e\u003d MAX_REGISTER) {\r\n        return -1;\r\n    }\r\n    registers[availableRegister] \u003d value;\r\n    availableRegister++;\r\n    return availableRegister - 1;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B4",
      "B2 : If(i6 \u003e\u003d 4) → B3 | else → B4",
      "B4 : If($i0 \u003c 4) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  RootContext\n  Object\n  $r1 \u003d Object[] registers\u003e\n  if ($r1 !\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r4 \u003d Object)[4]\n  Object[] registers\u003e \u003d $r4\n  i6 \u003d 0\n}",
      "B2 {\n  if (i6 \u003e\u003d 4) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d Object[] registers\u003e\n  $r5 \u003d Object UNKNOWN_VALUE\u003e\n  $r6[i6] \u003d $r5\n  i6 \u003d i6 + 1\n  goto B2\n}",
      "B4 {\n  $i0 \u003d RootContext: int availableRegister\u003e\n  if ($i0 \u003c 4) goto B5 else B6\n}",
      "B5 {\n  $i8 \u003d (int) -1\n  return\n}",
      "B6 {\n  $r3 \u003d Object[] registers\u003e\n  $i1 \u003d RootContext: int availableRegister\u003e\n  $r3[$i1] \u003d r2\n  $i2 \u003d RootContext: int availableRegister\u003e\n  $i3 \u003d $i2 + 1\n  RootContext: int availableRegister\u003e \u003d $i3\n  $i4 \u003d RootContext: int availableRegister\u003e\n  $i5 \u003d $i4 - 1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.SelfContext",
    "methodName": "getCurrentNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer getCurrentNodePointer()",
    "visibility": "public",
    "body": "{\r\n    if (position \u003d\u003d 0 \u0026\u0026 !setPosition(1)) {\r\n        return null;\r\n    }\r\n    return nodePointer;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B3",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SelfContext\n  $i0 \u003d SelfContext: int position\u003e\n  if ($i0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d r0.setPosition(1)\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r1 \u003d NodePointer nodePointer\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SelfContext#setPosition(...1)",
        "body": "{\r\n    if (position !\u003d 1) {\r\n        return false;\r\n    }\r\n    super.setPosition(position);\r\n    if (!startedSet) {\r\n        startedSet \u003d true;\r\n        nodePointer \u003d parentContext.getCurrentNodePointer();\r\n    }\r\n    if (nodePointer \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return nodeTest \u003d\u003d null || nodePointer.testNode(nodeTest);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.SelfContext",
    "methodName": "setPosition",
    "signature": "boolean setPosition(int)",
    "visibility": "public",
    "body": "{\r\n    if (position !\u003d 1) {\r\n        return false;\r\n    }\r\n    super.setPosition(position);\r\n    if (!startedSet) {\r\n        startedSet \u003d true;\r\n        nodePointer \u003d parentContext.getCurrentNodePointer();\r\n    }\r\n    if (nodePointer \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return nodeTest \u003d\u003d null || nodePointer.testNode(nodeTest);\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i0 \u003d\u003d 1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($r1 !\u003d null) → B5 | else → B6",
      "B6 : If($r2 \u003d\u003d null) → B7 | else → B8",
      "B7 : If($z1 \u003d\u003d false) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  SelfContext\n  i0 :\u003d @parameter0: int\n  if (i0 \u003d\u003d 1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r0.setPosition(i0)\n  $z0 \u003d SelfContext: boolean startedSet\u003e\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  SelfContext: boolean startedSet\u003e \u003d 1\n  $r5 \u003d EvalContext parentContext\u003e\n  $r6 \u003d $r5.getCurrentNodePointer()\n  NodePointer nodePointer\u003e \u003d $r6\n}",
      "B4 {\n  $r1 \u003d NodePointer nodePointer\u003e\n  if ($r1 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r2 \u003d NodeTest nodeTest\u003e\n  if ($r2 \u003d\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r4 \u003d NodePointer nodePointer\u003e\n  $r3 \u003d NodeTest nodeTest\u003e\n  $z1 \u003d $r4.testNode($r3)\n  if ($z1 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $z2 \u003d 1\n  goto B10\n}",
      "B9 {\n  $z2 \u003d 0\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.SimplePathInterpreter",
    "methodName": "createNullPointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createNullPointer(org.apache.commons.jxpath.ri.EvalContext,org.apache.commons.jxpath.ri.model.NodePointer,org.apache.commons.jxpath.ri.compiler.Step[],int)",
    "visibility": "public",
    "body": "{\r\n    if (currentStep \u003d\u003d steps.length) {\r\n        return parent;\r\n    }\r\n    parent \u003d valuePointer(parent);\r\n    final Step step \u003d steps[currentStep];\r\n    final int axis \u003d step.getAxis();\r\n    if (axis \u003d\u003d Compiler.AXIS_CHILD || axis \u003d\u003d Compiler.AXIS_ATTRIBUTE) {\r\n        final NullPropertyPointer pointer \u003d new NullPropertyPointer(parent);\r\n        final QName qName \u003d ((NodeNameTest) step.getNodeTest()).getNodeName();\r\n        pointer.setPropertyName(qName.toString());\r\n        pointer.setAttribute(axis \u003d\u003d Compiler.AXIS_ATTRIBUTE);\r\n        parent \u003d pointer;\r\n    }\r\n    // else { it is self::node() }\r\n    final Expression[] predicates \u003d step.getPredicates();\r\n    return createNullPointerForPredicates(context, parent, steps, currentStep, predicates, 0);\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i0 !\u003d $i1) → B1 | else → B2",
      "B2 : If(i2 \u003d\u003d 2) → B3 | else → B4",
      "B3 : If(i2 !\u003d 5) → B4 | else → B8",
      "B4 : If(i2 !\u003d 5) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  EvalContext\n  NodePointer\n  Step[]\n  i0 :\u003d @parameter3: int\n  $i1 \u003d lengthof r0\n  if (i0 !\u003d $i1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r9 \u003d SimplePathInterpreter.valuePointer(r8)\n  r1 \u003d r0[i0]\n  i2 \u003d r1.getAxis()\n  if (i2 \u003d\u003d 2) goto B3 else B4\n}",
      "B3 {\n  if (i2 !\u003d 5) goto B4 else B8\n}",
      "B4 {\n  $r2 \u003d NullPropertyPointer\n  new NullPropertyPointer(r9)\n  $r3 \u003d r1.getNodeTest()\n  $r4 \u003d NodeNameTest) $r3\n  $r7 \u003d $r4.getNodeName()\n  $r5 \u003d $r7.toString()\n  $r2.setPropertyName($r5)\n  if (i2 !\u003d 5) goto B5 else B6\n}",
      "B5 {\n  $z0 \u003d 1\n  goto B7\n}",
      "B6 {\n  $z0 \u003d 0\n}",
      "B7 {\n  $r2.setAttribute($z0)\n  r9 \u003d $r2\n}",
      "B8 {\n  $r10 \u003d r1.getPredicates()\n  $r11 \u003d SimplePathInterpreter.createNullPointerForPredicates(r6, r9, r0, i0, $r10, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimplePathInterpreter#valuePointer(...1)",
        "body": "{\r\n    return pointer \u003d\u003d null ? null : pointer.getValuePointer();\r\n}"
      },
      {
        "name": "SimplePathInterpreter#createNullPointerForPredicates(...6)",
        "body": "{\r\n    for (int i \u003d currentPredicate; i \u003c predicates.length; i++) {\r\n        final Expression predicate \u003d predicates[i];\r\n        if (predicate instanceof NameAttributeTest) {\r\n            final String key \u003d keyFromPredicate(context, predicate);\r\n            parent \u003d valuePointer(parent);\r\n            final NullPropertyPointer pointer \u003d new NullPropertyPointer(parent);\r\n            pointer.setNameAttributeValue(key);\r\n            parent \u003d pointer;\r\n        } else {\r\n            final int index \u003d indexFromPredicate(context, predicate);\r\n            if (parent instanceof NullPropertyPointer) {\r\n                parent.setIndex(index);\r\n            } else {\r\n                parent \u003d new NullElementPointer(parent, index);\r\n            }\r\n        }\r\n    }\r\n    // Proceed with the remaining steps\r\n    return createNullPointer(context, parent, steps, currentStep + 1);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.UnionContext",
    "methodName": "getDocumentOrder",
    "signature": "int getDocumentOrder()",
    "visibility": "public",
    "body": "{\r\n    return contexts.length \u003e 1 ? 1 : super.getDocumentOrder();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  UnionContext\n  $r1 \u003d EvalContext[] contexts\u003e\n  $i0 \u003d lengthof $r1\n  if ($i0 \u003c\u003d 1) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $i1 \u003d r0.getDocumentOrder()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.axes.UnionContext",
    "methodName": "setPosition",
    "signature": "boolean setPosition(int)",
    "visibility": "public",
    "body": "{\r\n    if (!prepared) {\r\n        prepared \u003d true;\r\n        final BasicNodeSet nodeSet \u003d (BasicNodeSet) getNodeSet();\r\n        final ArrayList\u003cNodePointer\u003e pointers \u003d new ArrayList\u003c\u003e();\r\n        for (final EvalContext ctx : contexts) {\r\n            while (ctx.nextSet()) {\r\n                while (ctx.nextNode()) {\r\n                    final NodePointer ptr \u003d ctx.getCurrentNodePointer();\r\n                    if (!pointers.contains(ptr)) {\r\n                        pointers.add(ptr);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        sortPointers(pointers);\r\n        for (final Iterator\u003cNodePointer\u003e it \u003d pointers.iterator(); it.hasNext(); ) {\r\n            nodeSet.add(it.next());\r\n        }\r\n    }\r\n    return super.setPosition(position);\r\n}",
    "nodes": 14,
    "edges": 19,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B13",
      "B2 : If(i2 \u003e\u003d i1) → B3 | else → B10",
      "B4 : If($z3 \u003d\u003d false) → B5 | else → B9",
      "B5 : If($z4 \u003d\u003d false) → B6 | else → B4",
      "B6 : If($z5 !\u003d 0) → B7 | else → B8",
      "B11 : If($z2 \u003d\u003d false) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  UnionContext\n  i0 :\u003d @parameter0: int\n  $z0 \u003d UnionContext: boolean prepared\u003e\n  if ($z0 !\u003d 0) goto B1 else B13\n}",
      "B1 {\n  UnionContext: boolean prepared\u003e \u003d 1\n  $r1 \u003d r0.getNodeSet()\n  r2 \u003d BasicNodeSet) $r1\n  $r3 \u003d ArrayList\n  new ArrayList()\n  r8 \u003d EvalContext[] contexts\u003e\n  i1 \u003d lengthof r8\n  i2 \u003d 0\n}",
      "B2 {\n  if (i2 \u003e\u003d i1) goto B3 else B10\n}",
      "B3 {\n  r6 \u003d r8[i2]\n}",
      "B4 {\n  $z3 \u003d r6.nextSet()\n  if ($z3 \u003d\u003d false) goto B5 else B9\n}",
      "B5 {\n  $z4 \u003d r6.nextNode()\n  if ($z4 \u003d\u003d false) goto B6 else B4\n}",
      "B6 {\n  r7 \u003d r6.getCurrentNodePointer()\n  $z5 \u003d $r3.contains(r7)\n  if ($z5 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $r3.add(r7)\n}",
      "B8 {\n  goto B5\n}",
      "B9 {\n  i2 \u003d i2 + 1\n  goto B2\n}",
      "B10 {\n  r0.sortPointers($r3)\n  r9 \u003d $r3.iterator()\n}",
      "B11 {\n  $z2 \u003d r9.hasNext()\n  if ($z2 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $r4 \u003d r9.next()\n  $r5 \u003d Pointer) $r4\n  r2.add($r5)\n  goto B11\n}",
      "B13 {\n  $z1 \u003d r0.setPosition(i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B13",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B10",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B5",
      "B9 --\u003e B2",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B11",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "UnionContext#sortPointers(...1)",
        "body": "(source not found)"
      },
      {
        "name": "UnionContext#getNodeSet(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.compiler.Constant",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    if (value instanceof Number) {\r\n        return InfoSetUtil.stringValue(value);\r\n    }\r\n    return \"\u0027\" + value + \"\u0027\";\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Constant\n  $r1 \u003d Object value\u003e\n  $z0 \u003d Number\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d Object value\u003e\n  $r9 \u003d InfoSetUtil.stringValue($r8)\n  return\n}",
      "B2 {\n  $r2 \u003d StringBuilder\n  new StringBuilder()\n  $r4 \u003d $r2.append(\"\\\u0027\")\n  $r3 \u003d Object value\u003e\n  $r5 \u003d $r4.append($r3)\n  $r6 \u003d $r5.append(\"\\\u0027\")\n  $r7 \u003d $r6.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.compiler.CoreFunction",
    "methodName": "computeContextDependent",
    "signature": "boolean computeContextDependent()",
    "visibility": "public",
    "body": "{\r\n    if (super.computeContextDependent()) {\r\n        return true;\r\n    }\r\n    switch(functionCode) {\r\n        case Compiler.FUNCTION_LAST:\r\n        case Compiler.FUNCTION_POSITION:\r\n            return true;\r\n        case Compiler.FUNCTION_BOOLEAN:\r\n        case Compiler.FUNCTION_LOCAL_NAME:\r\n        case Compiler.FUNCTION_NAME:\r\n        case Compiler.FUNCTION_NAMESPACE_URI:\r\n        case Compiler.FUNCTION_STRING:\r\n        case Compiler.FUNCTION_LANG:\r\n        case Compiler.FUNCTION_NUMBER:\r\n            return args \u003d\u003d null || args.length \u003d\u003d 0;\r\n        case Compiler.FUNCTION_FORMAT_NUMBER:\r\n            return args !\u003d null \u0026\u0026 args.length \u003d\u003d 2;\r\n        case Compiler.FUNCTION_COUNT:\r\n        case Compiler.FUNCTION_ID:\r\n        case Compiler.FUNCTION_CONCAT:\r\n        case Compiler.FUNCTION_STARTS_WITH:\r\n        case Compiler.FUNCTION_ENDS_WITH:\r\n        case Compiler.FUNCTION_CONTAINS:\r\n        case Compiler.FUNCTION_SUBSTRING_BEFORE:\r\n        case Compiler.FUNCTION_SUBSTRING_AFTER:\r\n        case Compiler.FUNCTION_SUBSTRING:\r\n        case Compiler.FUNCTION_STRING_LENGTH:\r\n        case Compiler.FUNCTION_NORMALIZE_SPACE:\r\n        case Compiler.FUNCTION_TRANSLATE:\r\n        case Compiler.FUNCTION_NOT:\r\n        case Compiler.FUNCTION_TRUE:\r\n        case Compiler.FUNCTION_FALSE:\r\n        case Compiler.FUNCTION_SUM:\r\n        case Compiler.FUNCTION_FLOOR:\r\n        case Compiler.FUNCTION_CEILING:\r\n        case Compiler.FUNCTION_ROUND:\r\n        default:\r\n            return false;\r\n    }\r\n}",
    "nodes": 15,
    "edges": 18,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(switch-on $i0) → B3 | else → B14",
      "B4 : If($r3 \u003d\u003d null) → B5 | else → B6",
      "B5 : If($i2 !\u003d 0) → B6 | else → B7",
      "B9 : If($r1 \u003d\u003d null) → B10 | else → B12",
      "B10 : If($i1 !\u003d 2) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  CoreFunction\n  $z0 \u003d r0.computeContextDependent()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d CoreFunction: int functionCode\u003e\n  Expression[] args\u003e;     case 31: goto return 0;     default: goto return 0; }\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d Expression[] args\u003e\n  if ($r3 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r4 \u003d Expression[] args\u003e\n  $i2 \u003d lengthof $r4\n  if ($i2 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $z1 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z1 \u003d 0\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $r1 \u003d Expression[] args\u003e\n  if ($r1 \u003d\u003d null) goto B10 else B12\n}",
      "B10 {\n  $r2 \u003d Expression[] args\u003e\n  $i1 \u003d lengthof $r2\n  if ($i1 !\u003d 2) goto B11 else B12\n}",
      "B11 {\n  $z2 \u003d 1\n  goto B13\n}",
      "B12 {\n  $z2 \u003d 0\n}",
      "B13 {\n  return\n}",
      "B14 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B14",
      "B2 --\u003e B4",
      "B2 --\u003e B9",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.compiler.CoreFunction",
    "methodName": "computeValue",
    "signature": "java.lang.Object computeValue(org.apache.commons.jxpath.ri.EvalContext)",
    "visibility": "public",
    "body": "{\r\n    switch(functionCode) {\r\n        case Compiler.FUNCTION_LAST:\r\n            return functionLast(context);\r\n        case Compiler.FUNCTION_POSITION:\r\n            return functionPosition(context);\r\n        case Compiler.FUNCTION_COUNT:\r\n            return functionCount(context);\r\n        case Compiler.FUNCTION_LANG:\r\n            return functionLang(context);\r\n        case Compiler.FUNCTION_ID:\r\n            return functionID(context);\r\n        case Compiler.FUNCTION_LOCAL_NAME:\r\n            return functionLocalName(context);\r\n        case Compiler.FUNCTION_NAMESPACE_URI:\r\n            return functionNamespaceURI(context);\r\n        case Compiler.FUNCTION_NAME:\r\n            return functionName(context);\r\n        case Compiler.FUNCTION_STRING:\r\n            return functionString(context);\r\n        case Compiler.FUNCTION_CONCAT:\r\n            return functionConcat(context);\r\n        case Compiler.FUNCTION_STARTS_WITH:\r\n            return functionStartsWith(context);\r\n        case Compiler.FUNCTION_ENDS_WITH:\r\n            return functionEndsWith(context);\r\n        case Compiler.FUNCTION_CONTAINS:\r\n            return functionContains(context);\r\n        case Compiler.FUNCTION_SUBSTRING_BEFORE:\r\n            return functionSubstringBefore(context);\r\n        case Compiler.FUNCTION_SUBSTRING_AFTER:\r\n            return functionSubstringAfter(context);\r\n        case Compiler.FUNCTION_SUBSTRING:\r\n            return functionSubstring(context);\r\n        case Compiler.FUNCTION_STRING_LENGTH:\r\n            return functionStringLength(context);\r\n        case Compiler.FUNCTION_NORMALIZE_SPACE:\r\n            return functionNormalizeSpace(context);\r\n        case Compiler.FUNCTION_TRANSLATE:\r\n            return functionTranslate(context);\r\n        case Compiler.FUNCTION_BOOLEAN:\r\n            return functionBoolean(context);\r\n        case Compiler.FUNCTION_NOT:\r\n            return functionNot(context);\r\n        case Compiler.FUNCTION_TRUE:\r\n            return functionTrue(context);\r\n        case Compiler.FUNCTION_FALSE:\r\n            return functionFalse(context);\r\n        case Compiler.FUNCTION_NULL:\r\n            return functionNull(context);\r\n        case Compiler.FUNCTION_NUMBER:\r\n            return functionNumber(context);\r\n        case Compiler.FUNCTION_SUM:\r\n            return functionSum(context);\r\n        case Compiler.FUNCTION_FLOOR:\r\n            return functionFloor(context);\r\n        case Compiler.FUNCTION_CEILING:\r\n            return functionCeiling(context);\r\n        case Compiler.FUNCTION_ROUND:\r\n            return functionRound(context);\r\n        case Compiler.FUNCTION_KEY:\r\n            return functionKey(context);\r\n        case Compiler.FUNCTION_FORMAT_NUMBER:\r\n            return functionFormatNumber(context);\r\n        default:\r\n            return null;\r\n    }\r\n}",
    "nodes": 33,
    "edges": 32,
    "cc": 1,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CoreFunction\n  EvalContext\n  $i0 \u003d CoreFunction: int functionCode\u003e\n  EvalContext)\u003e(r1);     default: goto return null; }\n}",
      "B1 {\n  $r32 \u003d r0.functionLast(r1)\n  return\n}",
      "B2 {\n  $r31 \u003d r0.functionPosition(r1)\n  return\n}",
      "B3 {\n  $r30 \u003d r0.functionCount(r1)\n  return\n}",
      "B4 {\n  $r11 \u003d r0.functionLang(r1)\n  return\n}",
      "B5 {\n  $r29 \u003d r0.functionID(r1)\n  return\n}",
      "B6 {\n  $r28 \u003d r0.functionLocalName(r1)\n  return\n}",
      "B7 {\n  $r27 \u003d r0.functionNamespaceURI(r1)\n  return\n}",
      "B8 {\n  $r26 \u003d r0.functionName(r1)\n  return\n}",
      "B9 {\n  $r25 \u003d r0.functionString(r1)\n  return\n}",
      "B10 {\n  $r24 \u003d r0.functionConcat(r1)\n  return\n}",
      "B11 {\n  $r23 \u003d r0.functionStartsWith(r1)\n  return\n}",
      "B12 {\n  $r2 \u003d r0.functionEndsWith(r1)\n  return\n}",
      "B13 {\n  $r22 \u003d r0.functionContains(r1)\n  return\n}",
      "B14 {\n  $r21 \u003d r0.functionSubstringBefore(r1)\n  return\n}",
      "B15 {\n  $r20 \u003d r0.functionSubstringAfter(r1)\n  return\n}",
      "B16 {\n  $r19 \u003d r0.functionSubstring(r1)\n  return\n}",
      "B17 {\n  $r18 \u003d r0.functionStringLength(r1)\n  return\n}",
      "B18 {\n  $r17 \u003d r0.functionNormalizeSpace(r1)\n  return\n}",
      "B19 {\n  $r16 \u003d r0.functionTranslate(r1)\n  return\n}",
      "B20 {\n  $r15 \u003d r0.functionBoolean(r1)\n  return\n}",
      "B21 {\n  $r14 \u003d r0.functionNot(r1)\n  return\n}",
      "B22 {\n  $r13 \u003d r0.functionTrue(r1)\n  return\n}",
      "B23 {\n  $r12 \u003d r0.functionFalse(r1)\n  return\n}",
      "B24 {\n  $r5 \u003d r0.functionNull(r1)\n  return\n}",
      "B25 {\n  $r10 \u003d r0.functionNumber(r1)\n  return\n}",
      "B26 {\n  $r9 \u003d r0.functionSum(r1)\n  return\n}",
      "B27 {\n  $r8 \u003d r0.functionFloor(r1)\n  return\n}",
      "B28 {\n  $r7 \u003d r0.functionCeiling(r1)\n  return\n}",
      "B29 {\n  $r6 \u003d r0.functionRound(r1)\n  return\n}",
      "B30 {\n  $r4 \u003d r0.functionKey(r1)\n  return\n}",
      "B31 {\n  $r3 \u003d r0.functionFormatNumber(r1)\n  return\n}",
      "B32 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B0 --\u003e B5",
      "B0 --\u003e B6",
      "B0 --\u003e B7",
      "B0 --\u003e B8",
      "B0 --\u003e B9",
      "B0 --\u003e B10",
      "B0 --\u003e B11",
      "B0 --\u003e B13",
      "B0 --\u003e B14",
      "B0 --\u003e B15",
      "B0 --\u003e B16",
      "B0 --\u003e B17",
      "B0 --\u003e B18",
      "B0 --\u003e B19",
      "B0 --\u003e B20",
      "B0 --\u003e B21",
      "B0 --\u003e B22",
      "B0 --\u003e B23",
      "B0 --\u003e B4",
      "B0 --\u003e B25",
      "B0 --\u003e B26",
      "B0 --\u003e B27",
      "B0 --\u003e B28",
      "B0 --\u003e B29",
      "B0 --\u003e B24",
      "B0 --\u003e B30",
      "B0 --\u003e B31",
      "B0 --\u003e B12",
      "B0 --\u003e B32",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e [EXIT]",
      "B21 --\u003e [EXIT]",
      "B22 --\u003e [EXIT]",
      "B23 --\u003e [EXIT]",
      "B24 --\u003e [EXIT]",
      "B25 --\u003e [EXIT]",
      "B26 --\u003e [EXIT]",
      "B27 --\u003e [EXIT]",
      "B28 --\u003e [EXIT]",
      "B29 --\u003e [EXIT]",
      "B30 --\u003e [EXIT]",
      "B31 --\u003e [EXIT]",
      "B32 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CoreFunction#functionSubstringAfter(...1)",
        "body": "{\r\n    assertArgCount(2);\r\n    final String s1 \u003d InfoSetUtil.stringValue(getArg1().computeValue(context));\r\n    final String s2 \u003d InfoSetUtil.stringValue(getArg2().computeValue(context));\r\n    final int index \u003d s1.indexOf(s2);\r\n    if (index \u003d\u003d -1) {\r\n        return \"\";\r\n    }\r\n    return s1.substring(index + s2.length());\r\n}"
      },
      {
        "name": "CoreFunction#functionNormalizeSpace(...1)",
        "body": "{\r\n    assertArgCount(1);\r\n    final String s \u003d InfoSetUtil.stringValue(getArg1().computeValue(context));\r\n    final char[] chars \u003d s.toCharArray();\r\n    int out \u003d 0;\r\n    int phase \u003d 0;\r\n    for (int in \u003d 0; in \u003c chars.length; in++) {\r\n        switch(chars[in]) {\r\n            case \u0027 \u0027:\r\n            case \u0027\\t\u0027:\r\n            case \u0027\\r\u0027:\r\n            case \u0027\\n\u0027:\r\n                if (phase \u003d\u003d 1) {\r\n                    // non-space\r\n                    phase \u003d 2;\r\n                    chars[out++] \u003d \u0027 \u0027;\r\n                }\r\n                break;\r\n            default:\r\n                chars[out++] \u003d chars[in];\r\n                phase \u003d 1;\r\n        }\r\n    }\r\n    if (phase \u003d\u003d 2) {\r\n        // trailing-space\r\n        out--;\r\n    }\r\n    return new String(chars, 0, out);\r\n}"
      },
      {
        "name": "CoreFunction#functionStartsWith(...1)",
        "body": "{\r\n    assertArgCount(2);\r\n    final String s1 \u003d InfoSetUtil.stringValue(getArg1().computeValue(context));\r\n    final String s2 \u003d InfoSetUtil.stringValue(getArg2().computeValue(context));\r\n    return s1.startsWith(s2) ? Boolean.TRUE : Boolean.FALSE;\r\n}"
      },
      {
        "name": "CoreFunction#functionSubstring(...1)",
        "body": "{\r\n    final int minArgs \u003d 2;\r\n    final int maxArgs \u003d 3;\r\n    assertArgRange(minArgs, maxArgs);\r\n    final int ac \u003d getArgumentCount();\r\n    final String s1 \u003d InfoSetUtil.stringValue(getArg1().computeValue(context));\r\n    double from \u003d InfoSetUtil.doubleValue(getArg2().computeValue(context));\r\n    if (Double.isNaN(from)) {\r\n        return \"\";\r\n    }\r\n    from \u003d Math.round(from);\r\n    if (from \u003e s1.length() + 1) {\r\n        return \"\";\r\n    }\r\n    if (ac \u003d\u003d 2) {\r\n        if (from \u003c 1) {\r\n            from \u003d 1;\r\n        }\r\n        return s1.substring((int) from - 1);\r\n    }\r\n    double length \u003d InfoSetUtil.doubleValue(getArg3().computeValue(context));\r\n    length \u003d Math.round(length);\r\n    if (length \u003c 0) {\r\n        return \"\";\r\n    }\r\n    final double to \u003d from + length;\r\n    if (to \u003c 1) {\r\n        return \"\";\r\n    }\r\n    if (to \u003e s1.length() + 1) {\r\n        if (from \u003c 1) {\r\n            from \u003d 1;\r\n        }\r\n        return s1.substring((int) from - 1);\r\n    }\r\n    if (from \u003c 1) {\r\n        from \u003d 1;\r\n    }\r\n    return s1.substring((int) from - 1, (int) (to - 1));\r\n}"
      },
      {
        "name": "CoreFunction#functionFalse(...1)",
        "body": "{\r\n    assertArgCount(0);\r\n    return Boolean.FALSE;\r\n}"
      },
      {
        "name": "CoreFunction#functionKey(...1)",
        "body": "{\r\n    assertArgCount(2);\r\n    final String key \u003d InfoSetUtil.stringValue(getArg1().computeValue(context));\r\n    Object value \u003d getArg2().compute(context);\r\n    EvalContext ec \u003d null;\r\n    if (value instanceof EvalContext) {\r\n        ec \u003d (EvalContext) value;\r\n        if (!ec.hasNext()) {\r\n            // empty context -\u003e empty results\r\n            return new NodeSetContext(context, new BasicNodeSet());\r\n        }\r\n        value \u003d ((NodePointer) ec.next()).getValue();\r\n    }\r\n    final JXPathContext jxpathContext \u003d context.getJXPathContext();\r\n    NodeSet nodeSet \u003d jxpathContext.getNodeSetByKey(key, value);\r\n    if (ec !\u003d null \u0026\u0026 ec.hasNext()) {\r\n        final BasicNodeSet accum \u003d new BasicNodeSet();\r\n        accum.add(nodeSet);\r\n        while (ec.hasNext()) {\r\n            value \u003d ((NodePointer) ec.next()).getValue();\r\n            accum.add(jxpathContext.getNodeSetByKey(key, value));\r\n        }\r\n        nodeSet \u003d accum;\r\n    }\r\n    return new NodeSetContext(context, nodeSet);\r\n}"
      },
      {
        "name": "CoreFunction#functionString(...1)",
        "body": "{\r\n    if (getArgumentCount() \u003d\u003d 0) {\r\n        return InfoSetUtil.stringValue(context.getCurrentNodePointer());\r\n    }\r\n    assertArgCount(1);\r\n    return InfoSetUtil.stringValue(getArg1().computeValue(context));\r\n}"
      },
      {
        "name": "CoreFunction#functionNot(...1)",
        "body": "{\r\n    assertArgCount(1);\r\n    return InfoSetUtil.booleanValue(getArg1().computeValue(context)) ? Boolean.FALSE : Boolean.TRUE;\r\n}"
      },
      {
        "name": "CoreFunction#functionBoolean(...1)",
        "body": "{\r\n    assertArgCount(1);\r\n    return InfoSetUtil.booleanValue(getArg1().computeValue(context)) ? Boolean.TRUE : Boolean.FALSE;\r\n}"
      },
      {
        "name": "CoreFunction#functionSubstringBefore(...1)",
        "body": "{\r\n    assertArgCount(2);\r\n    final String s1 \u003d InfoSetUtil.stringValue(getArg1().computeValue(context));\r\n    final String s2 \u003d InfoSetUtil.stringValue(getArg2().computeValue(context));\r\n    final int index \u003d s1.indexOf(s2);\r\n    if (index \u003d\u003d -1) {\r\n        return \"\";\r\n    }\r\n    return s1.substring(0, index);\r\n}"
      },
      {
        "name": "CoreFunction#functionSum(...1)",
        "body": "{\r\n    assertArgCount(1);\r\n    final Object v \u003d getArg1().compute(context);\r\n    if (v \u003d\u003d null) {\r\n        return ZERO;\r\n    }\r\n    if (v instanceof EvalContext) {\r\n        double sum \u003d 0.0;\r\n        final EvalContext ctx \u003d (EvalContext) v;\r\n        while (ctx.hasNext()) {\r\n            final NodePointer ptr \u003d (NodePointer) ctx.next();\r\n            sum +\u003d InfoSetUtil.doubleValue(ptr);\r\n        }\r\n        return Double.valueOf(sum);\r\n    }\r\n    throw new JXPathException(\"Invalid argument type for \u0027sum\u0027: \" + v.getClass().getName());\r\n}"
      },
      {
        "name": "CoreFunction#functionFloor(...1)",
        "body": "{\r\n    assertArgCount(1);\r\n    final double v \u003d InfoSetUtil.doubleValue(getArg1().computeValue(context));\r\n    if (Double.isNaN(v) || Double.isInfinite(v)) {\r\n        return Double.valueOf(v);\r\n    }\r\n    return Double.valueOf(Math.floor(v));\r\n}"
      },
      {
        "name": "CoreFunction#functionTranslate(...1)",
        "body": "{\r\n    final int argCount \u003d 3;\r\n    assertArgCount(argCount);\r\n    final String s1 \u003d InfoSetUtil.stringValue(getArg1().computeValue(context));\r\n    final String s2 \u003d InfoSetUtil.stringValue(getArg2().computeValue(context));\r\n    final String s3 \u003d InfoSetUtil.stringValue(getArg3().computeValue(context));\r\n    final char[] chars \u003d s1.toCharArray();\r\n    int out \u003d 0;\r\n    for (int in \u003d 0; in \u003c chars.length; in++) {\r\n        final char c \u003d chars[in];\r\n        final int inx \u003d s2.indexOf(c);\r\n        if (inx !\u003d -1) {\r\n            if (inx \u003c s3.length()) {\r\n                chars[out++] \u003d s3.charAt(inx);\r\n            }\r\n        } else {\r\n            chars[out++] \u003d c;\r\n        }\r\n    }\r\n    return new String(chars, 0, out);\r\n}"
      },
      {
        "name": "CoreFunction#functionLang(...1)",
        "body": "{\r\n    assertArgCount(1);\r\n    final String lang \u003d InfoSetUtil.stringValue(getArg1().computeValue(context));\r\n    final NodePointer pointer \u003d (NodePointer) context.getSingleNodePointer();\r\n    if (pointer \u003d\u003d null) {\r\n        return Boolean.FALSE;\r\n    }\r\n    return pointer.isLanguage(lang) ? Boolean.TRUE : Boolean.FALSE;\r\n}"
      },
      {
        "name": "CoreFunction#functionTrue(...1)",
        "body": "{\r\n    assertArgCount(0);\r\n    return Boolean.TRUE;\r\n}"
      },
      {
        "name": "CoreFunction#functionNumber(...1)",
        "body": "{\r\n    if (getArgumentCount() \u003d\u003d 0) {\r\n        return InfoSetUtil.number(context.getCurrentNodePointer());\r\n    }\r\n    assertArgCount(1);\r\n    return InfoSetUtil.number(getArg1().computeValue(context));\r\n}"
      },
      {
        "name": "CoreFunction#functionID(...1)",
        "body": "{\r\n    assertArgCount(1);\r\n    final String id \u003d InfoSetUtil.stringValue(getArg1().computeValue(context));\r\n    final JXPathContext jxpathContext \u003d context.getJXPathContext();\r\n    final NodePointer pointer \u003d (NodePointer) jxpathContext.getContextPointer();\r\n    return pointer.getPointerByID(jxpathContext, id);\r\n}"
      },
      {
        "name": "CoreFunction#functionEndsWith(...1)",
        "body": "{\r\n    assertArgCount(2);\r\n    final String s1 \u003d InfoSetUtil.stringValue(getArg1().computeValue(context));\r\n    final String s2 \u003d InfoSetUtil.stringValue(getArg2().computeValue(context));\r\n    return s1.endsWith(s2) ? Boolean.TRUE : Boolean.FALSE;\r\n}"
      },
      {
        "name": "CoreFunction#functionStringLength(...1)",
        "body": "{\r\n    String s;\r\n    if (getArgumentCount() \u003d\u003d 0) {\r\n        s \u003d InfoSetUtil.stringValue(context.getCurrentNodePointer());\r\n    } else {\r\n        assertArgCount(1);\r\n        s \u003d InfoSetUtil.stringValue(getArg1().computeValue(context));\r\n    }\r\n    return Double.valueOf(s.length());\r\n}"
      },
      {
        "name": "CoreFunction#functionNull(...1)",
        "body": "{\r\n    assertArgCount(0);\r\n    return null;\r\n}"
      },
      {
        "name": "CoreFunction#functionCount(...1)",
        "body": "{\r\n    assertArgCount(1);\r\n    final Expression arg1 \u003d getArg1();\r\n    int count \u003d 0;\r\n    Object value \u003d arg1.compute(context);\r\n    if (value instanceof NodePointer) {\r\n        value \u003d ((NodePointer) value).getValue();\r\n    }\r\n    if (value instanceof EvalContext) {\r\n        final EvalContext ctx \u003d (EvalContext) value;\r\n        while (ctx.hasNext()) {\r\n            ctx.next();\r\n            count++;\r\n        }\r\n    } else if (value instanceof Collection) {\r\n        count \u003d ((Collection) value).size();\r\n    } else if (value \u003d\u003d null) {\r\n        count \u003d 0;\r\n    } else {\r\n        count \u003d 1;\r\n    }\r\n    return Double.valueOf(count);\r\n}"
      },
      {
        "name": "CoreFunction#functionLast(...1)",
        "body": "{\r\n    assertArgCount(0);\r\n    // Move the position to the beginning and iterate through\r\n    // the context to count nodes.\r\n    final int old \u003d context.getCurrentPosition();\r\n    context.reset();\r\n    int count \u003d 0;\r\n    while (context.nextNode()) {\r\n        count++;\r\n    }\r\n    // Restore the current position.\r\n    if (old !\u003d 0) {\r\n        context.setPosition(old);\r\n    }\r\n    return Double.valueOf(count);\r\n}"
      },
      {
        "name": "CoreFunction#functionCeiling(...1)",
        "body": "{\r\n    assertArgCount(1);\r\n    final double v \u003d InfoSetUtil.doubleValue(getArg1().computeValue(context));\r\n    if (Double.isNaN(v) || Double.isInfinite(v)) {\r\n        return Double.valueOf(v);\r\n    }\r\n    return Double.valueOf(Math.ceil(v));\r\n}"
      },
      {
        "name": "CoreFunction#functionRound(...1)",
        "body": "{\r\n    assertArgCount(1);\r\n    final double v \u003d InfoSetUtil.doubleValue(getArg1().computeValue(context));\r\n    if (Double.isNaN(v) || Double.isInfinite(v)) {\r\n        return Double.valueOf(v);\r\n    }\r\n    return Double.valueOf(Math.round(v));\r\n}"
      },
      {
        "name": "CoreFunction#functionFormatNumber(...1)",
        "body": "{\r\n    final int minArgs \u003d 2;\r\n    final int maxArgs \u003d 3;\r\n    assertArgRange(minArgs, maxArgs);\r\n    final double number \u003d InfoSetUtil.doubleValue(getArg1().computeValue(context));\r\n    final String pattern \u003d InfoSetUtil.stringValue(getArg2().computeValue(context));\r\n    DecimalFormatSymbols symbols;\r\n    if (getArgumentCount() \u003d\u003d maxArgs) {\r\n        final String symbolsName \u003d InfoSetUtil.stringValue(getArg3().computeValue(context));\r\n        symbols \u003d context.getJXPathContext().getDecimalFormatSymbols(symbolsName);\r\n    } else {\r\n        final NodePointer pointer \u003d context.getCurrentNodePointer();\r\n        Locale locale;\r\n        if (pointer !\u003d null) {\r\n            locale \u003d pointer.getLocale();\r\n        } else {\r\n            locale \u003d context.getJXPathContext().getLocale();\r\n        }\r\n        symbols \u003d new DecimalFormatSymbols(locale);\r\n    }\r\n    final DecimalFormat format \u003d (DecimalFormat) NumberFormat.getInstance();\r\n    format.setDecimalFormatSymbols(symbols);\r\n    format.applyLocalizedPattern(pattern);\r\n    return format.format(number);\r\n}"
      },
      {
        "name": "CoreFunction#functionLocalName(...1)",
        "body": "{\r\n    if (getArgumentCount() \u003d\u003d 0) {\r\n        final NodePointer ptr \u003d context.getCurrentNodePointer();\r\n        return ptr.getName().getName();\r\n    }\r\n    assertArgCount(1);\r\n    final Object set \u003d getArg1().compute(context);\r\n    if (set instanceof EvalContext) {\r\n        final EvalContext ctx \u003d (EvalContext) set;\r\n        if (ctx.hasNext()) {\r\n            final NodePointer ptr \u003d (NodePointer) ctx.next();\r\n            return ptr.getName().getName();\r\n        }\r\n    }\r\n    return \"\";\r\n}"
      },
      {
        "name": "CoreFunction#functionNamespaceURI(...1)",
        "body": "{\r\n    if (getArgumentCount() \u003d\u003d 0) {\r\n        final NodePointer ptr \u003d context.getCurrentNodePointer();\r\n        final String str \u003d ptr.getNamespaceURI();\r\n        return str \u003d\u003d null ? \"\" : str;\r\n    }\r\n    assertArgCount(1);\r\n    final Object set \u003d getArg1().compute(context);\r\n    if (set instanceof EvalContext) {\r\n        final EvalContext ctx \u003d (EvalContext) set;\r\n        if (ctx.hasNext()) {\r\n            final NodePointer ptr \u003d (NodePointer) ctx.next();\r\n            final String str \u003d ptr.getNamespaceURI();\r\n            return str \u003d\u003d null ? \"\" : str;\r\n        }\r\n    }\r\n    return \"\";\r\n}"
      },
      {
        "name": "CoreFunction#functionContains(...1)",
        "body": "{\r\n    assertArgCount(2);\r\n    final String s1 \u003d InfoSetUtil.stringValue(getArg1().computeValue(context));\r\n    final String s2 \u003d InfoSetUtil.stringValue(getArg2().computeValue(context));\r\n    return Boolean.valueOf(s1.contains(s2));\r\n}"
      },
      {
        "name": "CoreFunction#functionConcat(...1)",
        "body": "{\r\n    if (getArgumentCount() \u003c 2) {\r\n        assertArgCount(2);\r\n    }\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    final Expression[] args \u003d getArguments();\r\n    for (final Expression arg : args) {\r\n        buffer.append(InfoSetUtil.stringValue(arg.compute(context)));\r\n    }\r\n    return buffer.toString();\r\n}"
      },
      {
        "name": "CoreFunction#functionPosition(...1)",
        "body": "{\r\n    assertArgCount(0);\r\n    return Integer.valueOf(context.getCurrentPosition());\r\n}"
      },
      {
        "name": "CoreFunction#functionName(...1)",
        "body": "{\r\n    if (getArgumentCount() \u003d\u003d 0) {\r\n        final NodePointer ptr \u003d context.getCurrentNodePointer();\r\n        return ptr.getName().toString();\r\n    }\r\n    assertArgCount(1);\r\n    final Object set \u003d getArg1().compute(context);\r\n    if (set instanceof EvalContext) {\r\n        final EvalContext ctx \u003d (EvalContext) set;\r\n        if (ctx.hasNext()) {\r\n            final NodePointer ptr \u003d (NodePointer) ctx.next();\r\n            return ptr.getName().toString();\r\n        }\r\n    }\r\n    return \"\";\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.compiler.CoreFunction",
    "methodName": "getArgumentCount",
    "signature": "int getArgumentCount()",
    "visibility": "public",
    "body": "{\r\n    if (args \u003d\u003d null) {\r\n        return 0;\r\n    }\r\n    return args.length;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CoreFunction\n  $r1 \u003d Expression[] args\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d Expression[] args\u003e\n  $i0 \u003d lengthof $r2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.compiler.CoreFunction",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    buffer.append(getFunctionName());\r\n    buffer.append(\u0027(\u0027);\r\n    final Expression[] args \u003d getArguments();\r\n    if (args !\u003d null) {\r\n        for (int i \u003d 0; i \u003c args.length; i++) {\r\n            if (i \u003e 0) {\r\n                buffer.append(\", \");\r\n            }\r\n            buffer.append(args[i]);\r\n        }\r\n    }\r\n    buffer.append(\u0027)\u0027);\r\n    return buffer.toString();\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B6",
      "B2 : If(i1 \u003e\u003d $i0) → B3 | else → B6",
      "B3 : If(i1 \u003c\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  CoreFunction\n  $r0 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d r1.getFunctionName()\n  $r0.append($r2)\n  $r0.append(40)\n  r3 \u003d r1.getArguments()\n  if (r3 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  i1 \u003d 0\n}",
      "B2 {\n  $i0 \u003d lengthof r3\n  if (i1 \u003e\u003d $i0) goto B3 else B6\n}",
      "B3 {\n  if (i1 \u003c\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r0.append(\", \")\n}",
      "B5 {\n  $r5 \u003d r3[i1]\n  $r0.append($r5)\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B6 {\n  $r0.append(41)\n  $r4 \u003d $r0.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CoreFunction#getArguments(...0)",
        "body": "(source not found)"
      },
      {
        "name": "CoreFunction#getFunctionName(...0)",
        "body": "{\r\n    switch(functionCode) {\r\n        case Compiler.FUNCTION_LAST:\r\n            return \"last\";\r\n        case Compiler.FUNCTION_POSITION:\r\n            return \"position\";\r\n        case Compiler.FUNCTION_COUNT:\r\n            return \"count\";\r\n        case Compiler.FUNCTION_ID:\r\n            return \"id\";\r\n        case Compiler.FUNCTION_LOCAL_NAME:\r\n            return \"local-name\";\r\n        case Compiler.FUNCTION_NAMESPACE_URI:\r\n            return \"namespace-uri\";\r\n        case Compiler.FUNCTION_NAME:\r\n            return \"name\";\r\n        case Compiler.FUNCTION_STRING:\r\n            return \"string\";\r\n        case Compiler.FUNCTION_CONCAT:\r\n            return \"concat\";\r\n        case Compiler.FUNCTION_STARTS_WITH:\r\n            return \"starts-with\";\r\n        case Compiler.FUNCTION_ENDS_WITH:\r\n            return \"ends-with\";\r\n        case Compiler.FUNCTION_CONTAINS:\r\n            return \"contains\";\r\n        case Compiler.FUNCTION_SUBSTRING_BEFORE:\r\n            return \"substring-before\";\r\n        case Compiler.FUNCTION_SUBSTRING_AFTER:\r\n            return \"substring-after\";\r\n        case Compiler.FUNCTION_SUBSTRING:\r\n            return \"substring\";\r\n        case Compiler.FUNCTION_STRING_LENGTH:\r\n            return \"string-length\";\r\n        case Compiler.FUNCTION_NORMALIZE_SPACE:\r\n            return \"normalize-space\";\r\n        case Compiler.FUNCTION_TRANSLATE:\r\n            return \"translate\";\r\n        case Compiler.FUNCTION_BOOLEAN:\r\n            return \"boolean\";\r\n        case Compiler.FUNCTION_NOT:\r\n            return \"not\";\r\n        case Compiler.FUNCTION_TRUE:\r\n            return \"true\";\r\n        case Compiler.FUNCTION_FALSE:\r\n            return \"false\";\r\n        case Compiler.FUNCTION_LANG:\r\n            return \"lang\";\r\n        case Compiler.FUNCTION_NUMBER:\r\n            return \"number\";\r\n        case Compiler.FUNCTION_SUM:\r\n            return \"sum\";\r\n        case Compiler.FUNCTION_FLOOR:\r\n            return \"floor\";\r\n        case Compiler.FUNCTION_CEILING:\r\n            return \"ceiling\";\r\n        case Compiler.FUNCTION_ROUND:\r\n            return \"round\";\r\n        case Compiler.FUNCTION_KEY:\r\n            return \"key\";\r\n        case Compiler.FUNCTION_FORMAT_NUMBER:\r\n            return \"format-number\";\r\n        default:\r\n            return \"unknownFunction\" + functionCode + \"()\";\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.compiler.CoreOperationAdd",
    "methodName": "computeValue",
    "signature": "java.lang.Object computeValue(org.apache.commons.jxpath.ri.EvalContext)",
    "visibility": "public",
    "body": "{\r\n    double s \u003d 0.0;\r\n    for (final Expression arg : args) {\r\n        s +\u003d InfoSetUtil.doubleValue(arg.computeValue(context));\r\n    }\r\n    return Double.valueOf(s);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CoreOperationAdd\n  EvalContext\n  d1 \u003d 0\n  r1 \u003d Expression[] args\u003e\n  i0 \u003d lengthof r1\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r3 \u003d r1[i1]\n  $r5 \u003d r3.computeValue(r4)\n  $d0 \u003d InfoSetUtil.doubleValue($r5)\n  d1 \u003d d1 + $d0\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  $r2 \u003d Double.valueOf(d1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.compiler.CoreOperationAnd",
    "methodName": "computeValue",
    "signature": "java.lang.Object computeValue(org.apache.commons.jxpath.ri.EvalContext)",
    "visibility": "public",
    "body": "{\r\n    for (final Expression arg : args) {\r\n        if (!InfoSetUtil.booleanValue(arg.computeValue(context))) {\r\n            return Boolean.FALSE;\r\n        }\r\n    }\r\n    return Boolean.TRUE;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B5",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CoreOperationAnd\n  EvalContext\n  r1 \u003d Expression[] args\u003e\n  i0 \u003d lengthof r1\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B5\n}",
      "B2 {\n  r3 \u003d r1[i1]\n  $r5 \u003d r3.computeValue(r4)\n  $z0 \u003d InfoSetUtil.booleanValue($r5)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d Boolean FALSE\u003e\n  return\n}",
      "B4 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B5 {\n  $r2 \u003d Boolean TRUE\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.compiler.CoreOperationOr",
    "methodName": "computeValue",
    "signature": "java.lang.Object computeValue(org.apache.commons.jxpath.ri.EvalContext)",
    "visibility": "public",
    "body": "{\r\n    for (final Expression arg : args) {\r\n        if (InfoSetUtil.booleanValue(arg.computeValue(context))) {\r\n            return Boolean.TRUE;\r\n        }\r\n    }\r\n    return Boolean.FALSE;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B5",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CoreOperationOr\n  EvalContext\n  r1 \u003d Expression[] args\u003e\n  i0 \u003d lengthof r1\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B5\n}",
      "B2 {\n  r3 \u003d r1[i1]\n  $r5 \u003d r3.computeValue(r4)\n  $z0 \u003d InfoSetUtil.booleanValue($r5)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d Boolean TRUE\u003e\n  return\n}",
      "B4 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B5 {\n  $r2 \u003d Boolean FALSE\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.compiler.CoreOperationUnion",
    "methodName": "computeValue",
    "signature": "java.lang.Object computeValue(org.apache.commons.jxpath.ri.EvalContext)",
    "visibility": "public",
    "body": "{\r\n    final EvalContext[] argCtxs \u003d new EvalContext[args.length];\r\n    for (int i \u003d 0; i \u003c args.length; i++) {\r\n        final Object value \u003d args[i].compute(context);\r\n        if (value instanceof EvalContext) {\r\n            argCtxs[i] \u003d (EvalContext) value;\r\n        } else {\r\n            argCtxs[i] \u003d context.getRootContext().getConstantContext(value);\r\n        }\r\n    }\r\n    return new UnionContext(context.getRootContext(), argCtxs);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d $i1) → B2 | else → B6",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CoreOperationUnion\n  EvalContext\n  $r1 \u003d Expression[] args\u003e\n  $i0 \u003d lengthof $r1\n  r2 \u003d EvalContext)[$i0]\n  i2 \u003d 0\n}",
      "B1 {\n  $r3 \u003d Expression[] args\u003e\n  $i1 \u003d lengthof $r3\n  if (i2 \u003e\u003d $i1) goto B2 else B6\n}",
      "B2 {\n  $r7 \u003d Expression[] args\u003e\n  $r8 \u003d $r7[i2]\n  r9 \u003d $r8.compute(r5)\n  $z0 \u003d EvalContext\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r12 \u003d EvalContext) r9\n  r2[i2] \u003d $r12\n  goto B5\n}",
      "B4 {\n  $r10 \u003d r5.getRootContext()\n  $r11 \u003d $r10.getConstantContext(r9)\n  r2[i2] \u003d $r11\n}",
      "B5 {\n  i2 \u003d i2 + 1\n  goto B1\n}",
      "B6 {\n  $r4 \u003d UnionContext\n  $r6 \u003d r5.getRootContext()\n  new UnionContext($r6, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.compiler.ExpressionPath",
    "methodName": "computeContextDependent",
    "signature": "boolean computeContextDependent()",
    "visibility": "public",
    "body": "{\r\n    if (expression.isContextDependent()) {\r\n        return true;\r\n    }\r\n    if (predicates !\u003d null) {\r\n        for (final Expression predicate : predicates) {\r\n            if (predicate.isContextDependent()) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return super.computeContextDependent();\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($r2 \u003d\u003d null) → B3 | else → B8",
      "B4 : If(i1 \u003e\u003d i0) → B5 | else → B8",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  ExpressionPath\n  $r1 \u003d Expression expression\u003e\n  $z0 \u003d $r1.isContextDependent()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d Expression[] predicates\u003e\n  if ($r2 \u003d\u003d null) goto B3 else B8\n}",
      "B3 {\n  r3 \u003d Expression[] predicates\u003e\n  i0 \u003d lengthof r3\n  i1 \u003d 0\n}",
      "B4 {\n  if (i1 \u003e\u003d i0) goto B5 else B8\n}",
      "B5 {\n  r4 \u003d r3[i1]\n  $z2 \u003d r4.isContextDependent()\n  if ($z2 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  i1 \u003d i1 + 1\n  goto B4\n}",
      "B8 {\n  $z1 \u003d r0.computeContextDependent()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B8",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B4",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.compiler.ExpressionPath",
    "methodName": "isSimpleExpressionPath",
    "signature": "boolean isSimpleExpressionPath()",
    "visibility": "public",
    "body": "{\r\n    if (!basicKnown) {\r\n        basicKnown \u003d true;\r\n        basic \u003d isSimplePath() \u0026\u0026 areBasicPredicates(getPredicates());\r\n    }\r\n    return basic;\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B6",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B4",
      "B2 : If($z2 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ExpressionPath\n  $z0 \u003d ExpressionPath: boolean basicKnown\u003e\n  if ($z0 !\u003d 0) goto B1 else B6\n}",
      "B1 {\n  ExpressionPath: boolean basicKnown\u003e \u003d 1\n  $z1 \u003d r0.isSimplePath()\n  if ($z1 \u003d\u003d false) goto B2 else B4\n}",
      "B2 {\n  $r1 \u003d r0.getPredicates()\n  $z2 \u003d r0.areBasicPredicates($r1)\n  if ($z2 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $z3 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z3 \u003d 0\n}",
      "B5 {\n  ExpressionPath: boolean basic\u003e \u003d $z3\n}",
      "B6 {\n  $z4 \u003d ExpressionPath: boolean basic\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ExpressionPath#isSimplePath(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ExpressionPath#getPredicates(...0)",
        "body": "{\r\n    return predicates;\r\n}"
      },
      {
        "name": "ExpressionPath#areBasicPredicates(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.compiler.ExpressionPath",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    if (expression instanceof CoreOperation || expression instanceof ExpressionPath || expression instanceof LocationPath) {\r\n        buffer.append(\u0027(\u0027);\r\n        buffer.append(expression);\r\n        buffer.append(\u0027)\u0027);\r\n    } else {\r\n        buffer.append(expression);\r\n    }\r\n    if (predicates !\u003d null) {\r\n        for (final Expression predicate : predicates) {\r\n            buffer.append(\u0027[\u0027);\r\n            buffer.append(predicate);\r\n            buffer.append(\u0027]\u0027);\r\n        }\r\n    }\r\n    final Step[] steps \u003d getSteps();\r\n    if (steps !\u003d null) {\r\n        for (final Step step : steps) {\r\n            buffer.append(\"/\");\r\n            buffer.append(step);\r\n        }\r\n    }\r\n    return buffer.toString();\r\n}",
    "nodes": 14,
    "edges": 20,
    "cc": 8,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3",
      "B2 : If($z2 \u003d\u003d false) → B3 | else → B4",
      "B5 : If($r3 \u003d\u003d null) → B6 | else → B9",
      "B7 : If(i1 \u003e\u003d i0) → B8 | else → B9",
      "B9 : If($r6 \u003d\u003d null) → B10 | else → B13",
      "B11 : If(i3 \u003e\u003d i2) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  ExpressionPath\n  $r0 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d Expression expression\u003e\n  $z0 \u003d CoreOperation\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $r7 \u003d Expression expression\u003e\n  $z1 \u003d ExpressionPath\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r8 \u003d Expression expression\u003e\n  $z2 \u003d LocationPath\n  if ($z2 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r0.append(40)\n  $r10 \u003d Expression expression\u003e\n  $r0.append($r10)\n  $r0.append(41)\n  goto B5\n}",
      "B4 {\n  $r9 \u003d Expression expression\u003e\n  $r0.append($r9)\n}",
      "B5 {\n  $r3 \u003d Expression[] predicates\u003e\n  if ($r3 \u003d\u003d null) goto B6 else B9\n}",
      "B6 {\n  r11 \u003d Expression[] predicates\u003e\n  i0 \u003d lengthof r11\n  i1 \u003d 0\n}",
      "B7 {\n  if (i1 \u003e\u003d i0) goto B8 else B9\n}",
      "B8 {\n  r12 \u003d r11[i1]\n  $r0.append(91)\n  $r0.append(r12)\n  $r0.append(93)\n  i1 \u003d i1 + 1\n  goto B7\n}",
      "B9 {\n  $r6 \u003d r1.getSteps()\n  if ($r6 \u003d\u003d null) goto B10 else B13\n}",
      "B10 {\n  i2 \u003d lengthof $r6\n  i3 \u003d 0\n}",
      "B11 {\n  if (i3 \u003e\u003d i2) goto B12 else B13\n}",
      "B12 {\n  r5 \u003d $r6[i3]\n  $r0.append(\"/\")\n  $r0.append(r5)\n  i3 \u003d i3 + 1\n  goto B11\n}",
      "B13 {\n  $r4 \u003d $r0.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B7",
      "B9 --\u003e B10",
      "B9 --\u003e B13",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B11",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ExpressionPath#getSteps(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.compiler.ExtensionFunction",
    "methodName": "computeValue",
    "signature": "java.lang.Object computeValue(org.apache.commons.jxpath.ri.EvalContext)",
    "visibility": "public",
    "body": "{\r\n    Object[] parameters \u003d null;\r\n    if (args !\u003d null) {\r\n        parameters \u003d new Object[args.length];\r\n        for (int i \u003d 0; i \u003c args.length; i++) {\r\n            parameters[i] \u003d convert(args[i].compute(context));\r\n        }\r\n    }\r\n    final Function function \u003d context.getRootContext().getFunction(functionName, parameters);\r\n    if (function \u003d\u003d null) {\r\n        throw new JXPathFunctionNotFoundException(\"No such function: \" + functionName + Arrays.asList(parameters));\r\n    }\r\n    final Object result \u003d function.invoke(context, parameters);\r\n    return result instanceof NodeSet ? new NodeSetContext(context, (NodeSet) result) : result;\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B4",
      "B2 : If(i2 \u003e\u003d $i1) → B3 | else → B4",
      "B4 : If($r17 !\u003d null) → B5 | else → B6",
      "B6 : If($z0 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  ExtensionFunction\n  EvalContext\n  r22 \u003d null\n  $r1 \u003d Expression[] args\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r15 \u003d Expression[] args\u003e\n  $i0 \u003d lengthof $r15\n  r22 \u003d Object)[$i0]\n  i2 \u003d 0\n}",
      "B2 {\n  $r16 \u003d Expression[] args\u003e\n  $i1 \u003d lengthof $r16\n  if (i2 \u003e\u003d $i1) goto B3 else B4\n}",
      "B3 {\n  $r18 \u003d Expression[] args\u003e\n  $r19 \u003d $r18[i2]\n  $r20 \u003d $r19.compute(r2)\n  $r21 \u003d r0.convert($r20)\n  r22[i2] \u003d $r21\n  i2 \u003d i2 + 1\n  goto B2\n}",
      "B4 {\n  $r4 \u003d r2.getRootContext()\n  $r3 \u003d QName functionName\u003e\n  $r17 \u003d $r4.getFunction($r3, r22)\n  if ($r17 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r25 \u003d JXPathFunctionNotFoundException\n  $r24 \u003d StringBuilder\n  new StringBuilder()\n  $r10 \u003d $r24.append(\"No such function: \")\n  $r9 \u003d QName functionName\u003e\n  $r12 \u003d $r10.append($r9)\n  $r11 \u003d Arrays.asList(r22)\n  $r13 \u003d $r12.append($r11)\n  $r14 \u003d $r13.toString()\n  new JXPathFunctionNotFoundException($r14)\n  throw $r25\n}",
      "B6 {\n  r5 \u003d $r17.invoke(r2, r22)\n  $z0 \u003d NodeSet\n  if ($z0 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $r26 \u003d NodeSetContext\n  $r23 \u003d $r26\n  $r6 \u003d NodeSet) r5\n  new NodeSetContext(r2, $r6)\n  goto B9\n}",
      "B8 {\n  $r23 \u003d r5\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ExtensionFunction#convert(...1)",
        "body": "{\r\n    return object instanceof EvalContext ? ((EvalContext) object).getValue() : object;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.compiler.ExtensionFunction",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    buffer.append(functionName);\r\n    buffer.append(\u0027(\u0027);\r\n    final Expression[] args \u003d getArguments();\r\n    if (args !\u003d null) {\r\n        for (int i \u003d 0; i \u003c args.length; i++) {\r\n            if (i \u003e 0) {\r\n                buffer.append(\", \");\r\n            }\r\n            buffer.append(args[i]);\r\n        }\r\n    }\r\n    buffer.append(\u0027)\u0027);\r\n    return buffer.toString();\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r3 \u003d\u003d null) → B1 | else → B6",
      "B2 : If(i1 \u003e\u003d $i0) → B3 | else → B6",
      "B3 : If(i1 \u003c\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ExtensionFunction\n  $r0 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d QName functionName\u003e\n  $r0.append($r2)\n  $r0.append(40)\n  r3 \u003d r1.getArguments()\n  if (r3 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  i1 \u003d 0\n}",
      "B2 {\n  $i0 \u003d lengthof r3\n  if (i1 \u003e\u003d $i0) goto B3 else B6\n}",
      "B3 {\n  if (i1 \u003c\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r0.append(\", \")\n}",
      "B5 {\n  $r5 \u003d r3[i1]\n  $r0.append($r5)\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B6 {\n  $r0.append(41)\n  $r4 \u003d $r0.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ExtensionFunction#getArguments(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.compiler.LocationPath",
    "methodName": "compute",
    "signature": "java.lang.Object compute(org.apache.commons.jxpath.ri.EvalContext)",
    "visibility": "public",
    "body": "{\r\n    // Create a chain of contexts\r\n    EvalContext rootContext;\r\n    if (isAbsolute()) {\r\n        rootContext \u003d context.getRootContext().getAbsoluteRootContext();\r\n    } else {\r\n        rootContext \u003d new InitialContext(context);\r\n    }\r\n    return evalSteps(rootContext);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  LocationPath\n  EvalContext\n  $z0 \u003d r0.isAbsolute()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r2.getRootContext()\n  r5 \u003d $r4.getAbsoluteRootContext()\n  goto B3\n}",
      "B2 {\n  $r1 \u003d InitialContext\n  new InitialContext(r2)\n  r5 \u003d $r1\n}",
      "B3 {\n  $r3 \u003d r0.evalSteps(r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "LocationPath#evalSteps(...1)",
        "body": "(source not found)"
      },
      {
        "name": "LocationPath#isAbsolute(...0)",
        "body": "{\r\n    return absolute;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.compiler.LocationPath",
    "methodName": "computeContextDependent",
    "signature": "boolean computeContextDependent()",
    "visibility": "public",
    "body": "{\r\n    return !absolute || super.computeContextDependent();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  LocationPath\n  $z0 \u003d LocationPath: boolean absolute\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d r0.computeContextDependent()\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.compiler.LocationPath",
    "methodName": "computeValue",
    "signature": "java.lang.Object computeValue(org.apache.commons.jxpath.ri.EvalContext)",
    "visibility": "public",
    "body": "{\r\n    // Create a chain of contexts\r\n    EvalContext rootContext;\r\n    if (isAbsolute()) {\r\n        rootContext \u003d context.getRootContext().getAbsoluteRootContext();\r\n    } else {\r\n        rootContext \u003d new InitialContext(context);\r\n    }\r\n    return getSingleNodePointerForSteps(rootContext);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  LocationPath\n  EvalContext\n  $z0 \u003d r0.isAbsolute()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r2.getRootContext()\n  r5 \u003d $r4.getAbsoluteRootContext()\n  goto B3\n}",
      "B2 {\n  $r1 \u003d InitialContext\n  new InitialContext(r2)\n  r5 \u003d $r1\n}",
      "B3 {\n  $r3 \u003d r0.getSingleNodePointerForSteps(r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "LocationPath#getSingleNodePointerForSteps(...1)",
        "body": "(source not found)"
      },
      {
        "name": "LocationPath#isAbsolute(...0)",
        "body": "{\r\n    return absolute;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.compiler.LocationPath",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    final Step[] steps \u003d getSteps();\r\n    if (steps !\u003d null) {\r\n        for (int i \u003d 0; i \u003c steps.length; i++) {\r\n            if (i \u003e 0 || absolute) {\r\n                buffer.append(\u0027/\u0027);\r\n            }\r\n            buffer.append(steps[i]);\r\n        }\r\n    }\r\n    return buffer.toString();\r\n}",
    "nodes": 8,
    "edges": 11,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B7",
      "B2 : If(i1 \u003e\u003d $i0) → B3 | else → B7",
      "B3 : If(i1 \u003e 0) → B4 | else → B5",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  LocationPath\n  $r0 \u003d StringBuilder\n  new StringBuilder()\n  r2 \u003d r1.getSteps()\n  if (r2 \u003d\u003d null) goto B1 else B7\n}",
      "B1 {\n  i1 \u003d 0\n}",
      "B2 {\n  $i0 \u003d lengthof r2\n  if (i1 \u003e\u003d $i0) goto B3 else B7\n}",
      "B3 {\n  if (i1 \u003e 0) goto B4 else B5\n}",
      "B4 {\n  $z0 \u003d LocationPath: boolean absolute\u003e\n  if ($z0 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r0.append(47)\n}",
      "B6 {\n  $r4 \u003d r2[i1]\n  $r0.append($r4)\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B7 {\n  $r3 \u003d $r0.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B7",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B2",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "LocationPath#getSteps(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.compiler.NodeTypeTest",
    "methodName": "nodeTypeToString",
    "signature": "java.lang.String nodeTypeToString(int)",
    "visibility": "public",
    "body": "{\r\n    switch(code) {\r\n        case Compiler.NODE_TYPE_NODE:\r\n            return \"node\";\r\n        case Compiler.NODE_TYPE_TEXT:\r\n            return \"text\";\r\n        case Compiler.NODE_TYPE_COMMENT:\r\n            return \"comment\";\r\n        case Compiler.NODE_TYPE_PI:\r\n            return \"processing-instruction\";\r\n        default:\r\n            return \"UNKNOWN\";\r\n    }\r\n}",
    "nodes": 6,
    "edges": 5,
    "cc": 1,
    "flowSummary": [
      "B0 : If(switch-on i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  tableswitch(i0) {     case 1: goto return \"node\";     case 2: goto return \"text\";     case 3: goto return \"comment\";     case 4: goto return \"processing-instruction\";     default: goto return \"UNKNOWN\"; }\n}",
      "B1 {\n  return\n}",
      "B2 {\n  return\n}",
      "B3 {\n  return\n}",
      "B4 {\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B0 --\u003e B4",
      "B0 --\u003e B5",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.compiler.Step",
    "methodName": "axisToString",
    "signature": "java.lang.String axisToString(int)",
    "visibility": "public",
    "body": "{\r\n    switch(axis) {\r\n        case Compiler.AXIS_SELF:\r\n            return \"self\";\r\n        case Compiler.AXIS_CHILD:\r\n            return \"child\";\r\n        case Compiler.AXIS_PARENT:\r\n            return \"parent\";\r\n        case Compiler.AXIS_ANCESTOR:\r\n            return \"ancestor\";\r\n        case Compiler.AXIS_ATTRIBUTE:\r\n            return \"attribute\";\r\n        case Compiler.AXIS_NAMESPACE:\r\n            return \"namespace\";\r\n        case Compiler.AXIS_PRECEDING:\r\n            return \"preceding\";\r\n        case Compiler.AXIS_FOLLOWING:\r\n            return \"following\";\r\n        case Compiler.AXIS_DESCENDANT:\r\n            return \"descendant\";\r\n        case Compiler.AXIS_ANCESTOR_OR_SELF:\r\n            return \"ancestor-or-self\";\r\n        case Compiler.AXIS_FOLLOWING_SIBLING:\r\n            return \"following-sibling\";\r\n        case Compiler.AXIS_PRECEDING_SIBLING:\r\n            return \"preceding-sibling\";\r\n        case Compiler.AXIS_DESCENDANT_OR_SELF:\r\n            return \"descendant-or-self\";\r\n        default:\r\n            return \"UNKNOWN\";\r\n    }\r\n}",
    "nodes": 15,
    "edges": 14,
    "cc": 1,
    "flowSummary": [
      "B0 : If(switch-on i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  tableswitch(i0) {     case 1: goto return \"self\";     case 2: goto return \"child\";     case 3: goto return \"parent\";     case 4: goto return \"ancestor\";     case 5: goto return \"attribute\";     case 6: goto return \"namespace\";     case 7: goto return \"preceding\";     case 8: goto return \"following\";     case 9: goto return \"descendant\";     case 10: goto return \"ancestor-or-self\";     case 11: goto return \"following-sibling\";     case 12: goto return \"preceding-sibling\";     case 13: goto return \"descendant-or-self\";     default: goto return \"UNKNOWN\"; }\n}",
      "B1 {\n  return\n}",
      "B2 {\n  return\n}",
      "B3 {\n  return\n}",
      "B4 {\n  return\n}",
      "B5 {\n  return\n}",
      "B6 {\n  return\n}",
      "B7 {\n  return\n}",
      "B8 {\n  return\n}",
      "B9 {\n  return\n}",
      "B10 {\n  return\n}",
      "B11 {\n  return\n}",
      "B12 {\n  return\n}",
      "B13 {\n  return\n}",
      "B14 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B0 --\u003e B4",
      "B0 --\u003e B5",
      "B0 --\u003e B6",
      "B0 --\u003e B7",
      "B0 --\u003e B8",
      "B0 --\u003e B9",
      "B0 --\u003e B10",
      "B0 --\u003e B11",
      "B0 --\u003e B12",
      "B0 --\u003e B13",
      "B0 --\u003e B14",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.compiler.Step",
    "methodName": "isContextDependent",
    "signature": "boolean isContextDependent()",
    "visibility": "public",
    "body": "{\r\n    if (predicates !\u003d null) {\r\n        for (final Expression predicate : predicates) {\r\n            if (predicate.isContextDependent()) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B6",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B6",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Step\n  $r1 \u003d Expression[] predicates\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  r2 \u003d Expression[] predicates\u003e\n  i0 \u003d lengthof r2\n  i1 \u003d 0\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B6\n}",
      "B3 {\n  r3 \u003d r2[i1]\n  $z0 \u003d r3.isContextDependent()\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.compiler.Step",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    final int axis \u003d getAxis();\r\n    if (axis \u003d\u003d Compiler.AXIS_CHILD) {\r\n        buffer.append(nodeTest);\r\n    } else if (axis \u003d\u003d Compiler.AXIS_ATTRIBUTE) {\r\n        buffer.append(\u0027@\u0027);\r\n        buffer.append(nodeTest);\r\n    } else if (axis \u003d\u003d Compiler.AXIS_SELF \u0026\u0026 nodeTest instanceof NodeTypeTest \u0026\u0026 ((NodeTypeTest) nodeTest).getNodeType() \u003d\u003d Compiler.NODE_TYPE_NODE) {\r\n        buffer.append(\".\");\r\n    } else if (axis \u003d\u003d Compiler.AXIS_PARENT \u0026\u0026 nodeTest instanceof NodeTypeTest \u0026\u0026 ((NodeTypeTest) nodeTest).getNodeType() \u003d\u003d Compiler.NODE_TYPE_NODE) {\r\n        buffer.append(\"..\");\r\n    } else if (axis \u003d\u003d Compiler.AXIS_DESCENDANT_OR_SELF \u0026\u0026 nodeTest instanceof NodeTypeTest \u0026\u0026 ((NodeTypeTest) nodeTest).getNodeType() \u003d\u003d Compiler.NODE_TYPE_NODE \u0026\u0026 (predicates \u003d\u003d null || predicates.length \u003d\u003d 0)) {\r\n        buffer.append(\"\");\r\n    } else {\r\n        buffer.append(axisToString(axis));\r\n        buffer.append(\"::\");\r\n        buffer.append(nodeTest);\r\n    }\r\n    final Expression[] predicates \u003d getPredicates();\r\n    if (predicates !\u003d null) {\r\n        for (final Expression predicate : predicates) {\r\n            buffer.append(\u0027[\u0027);\r\n            buffer.append(predicate);\r\n            buffer.append(\u0027]\u0027);\r\n        }\r\n    }\r\n    return buffer.toString();\r\n}",
    "nodes": 24,
    "edges": 38,
    "cc": 16,
    "flowSummary": [
      "B0 : If(i0 !\u003d 2) → B1 | else → B2",
      "B2 : If(i0 !\u003d 5) → B3 | else → B4",
      "B4 : If(i0 !\u003d 1) → B5 | else → B8",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B8",
      "B6 : If($i5 !\u003d 1) → B7 | else → B8",
      "B8 : If(i0 !\u003d 3) → B9 | else → B12",
      "B9 : If($z1 \u003d\u003d false) → B10 | else → B12",
      "B10 : If($i4 !\u003d 1) → B11 | else → B12",
      "B12 : If(i0 !\u003d 13) → B13 | else → B18",
      "B13 : If($z0 \u003d\u003d false) → B14 | else → B18",
      "B14 : If($i2 !\u003d 1) → B15 | else → B18",
      "B15 : If($r7 \u003d\u003d null) → B16 | else → B17",
      "B16 : If($i3 !\u003d 0) → B17 | else → B18",
      "B19 : If($r19 \u003d\u003d null) → B20 | else → B23",
      "B21 : If(i6 \u003e\u003d i1) → B22 | else → B23"
    ],
    "blockList": [
      "B0 {\n  Step\n  $r0 \u003d StringBuilder\n  new StringBuilder()\n  i0 \u003d r1.getAxis()\n  if (i0 !\u003d 2) goto B1 else B2\n}",
      "B1 {\n  $r16 \u003d NodeTest nodeTest\u003e\n  $r0.append($r16)\n  goto B19\n}",
      "B2 {\n  if (i0 !\u003d 5) goto B3 else B4\n}",
      "B3 {\n  $r0.append(64)\n  $r15 \u003d NodeTest nodeTest\u003e\n  $r0.append($r15)\n  goto B19\n}",
      "B4 {\n  if (i0 !\u003d 1) goto B5 else B8\n}",
      "B5 {\n  $r12 \u003d NodeTest nodeTest\u003e\n  $z2 \u003d NodeTypeTest\n  if ($z2 \u003d\u003d false) goto B6 else B8\n}",
      "B6 {\n  $r13 \u003d NodeTest nodeTest\u003e\n  $r14 \u003d NodeTypeTest) $r13\n  $i5 \u003d $r14.getNodeType()\n  if ($i5 !\u003d 1) goto B7 else B8\n}",
      "B7 {\n  $r0.append(\".\")\n  goto B19\n}",
      "B8 {\n  if (i0 !\u003d 3) goto B9 else B12\n}",
      "B9 {\n  $r9 \u003d NodeTest nodeTest\u003e\n  $z1 \u003d NodeTypeTest\n  if ($z1 \u003d\u003d false) goto B10 else B12\n}",
      "B10 {\n  $r10 \u003d NodeTest nodeTest\u003e\n  $r11 \u003d NodeTypeTest) $r10\n  $i4 \u003d $r11.getNodeType()\n  if ($i4 !\u003d 1) goto B11 else B12\n}",
      "B11 {\n  $r0.append(\"..\")\n  goto B19\n}",
      "B12 {\n  if (i0 !\u003d 13) goto B13 else B18\n}",
      "B13 {\n  $r4 \u003d NodeTest nodeTest\u003e\n  $z0 \u003d NodeTypeTest\n  if ($z0 \u003d\u003d false) goto B14 else B18\n}",
      "B14 {\n  $r5 \u003d NodeTest nodeTest\u003e\n  $r6 \u003d NodeTypeTest) $r5\n  $i2 \u003d $r6.getNodeType()\n  if ($i2 !\u003d 1) goto B15 else B18\n}",
      "B15 {\n  $r7 \u003d Expression[] predicates\u003e\n  if ($r7 \u003d\u003d null) goto B16 else B17\n}",
      "B16 {\n  $r8 \u003d Expression[] predicates\u003e\n  $i3 \u003d lengthof $r8\n  if ($i3 !\u003d 0) goto B17 else B18\n}",
      "B17 {\n  $r0.append(\"\")\n  goto B19\n}",
      "B18 {\n  $r17 \u003d Step.axisToString(i0)\n  $r0.append($r17)\n  $r0.append(\"::\")\n  $r18 \u003d NodeTest nodeTest\u003e\n  $r0.append($r18)\n}",
      "B19 {\n  $r19 \u003d r1.getPredicates()\n  if ($r19 \u003d\u003d null) goto B20 else B23\n}",
      "B20 {\n  i1 \u003d lengthof $r19\n  i6 \u003d 0\n}",
      "B21 {\n  if (i6 \u003e\u003d i1) goto B22 else B23\n}",
      "B22 {\n  r3 \u003d $r19[i6]\n  $r0.append(91)\n  $r0.append(r3)\n  $r0.append(93)\n  i6 \u003d i6 + 1\n  goto B21\n}",
      "B23 {\n  $r2 \u003d $r0.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B19",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B19",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B19",
      "B8 --\u003e B9",
      "B8 --\u003e B12",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B19",
      "B12 --\u003e B13",
      "B12 --\u003e B18",
      "B13 --\u003e B14",
      "B13 --\u003e B18",
      "B14 --\u003e B15",
      "B14 --\u003e B18",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B19 --\u003e B23",
      "B20 --\u003e B21",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B21",
      "B23 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Step#getAxis(...0)",
        "body": "{\r\n    return axis;\r\n}"
      },
      {
        "name": "Step#getPredicates(...0)",
        "body": "{\r\n    return predicates;\r\n}"
      },
      {
        "name": "Step#axisToString(...1)",
        "body": "{\r\n    switch(axis) {\r\n        case Compiler.AXIS_SELF:\r\n            return \"self\";\r\n        case Compiler.AXIS_CHILD:\r\n            return \"child\";\r\n        case Compiler.AXIS_PARENT:\r\n            return \"parent\";\r\n        case Compiler.AXIS_ANCESTOR:\r\n            return \"ancestor\";\r\n        case Compiler.AXIS_ATTRIBUTE:\r\n            return \"attribute\";\r\n        case Compiler.AXIS_NAMESPACE:\r\n            return \"namespace\";\r\n        case Compiler.AXIS_PRECEDING:\r\n            return \"preceding\";\r\n        case Compiler.AXIS_FOLLOWING:\r\n            return \"following\";\r\n        case Compiler.AXIS_DESCENDANT:\r\n            return \"descendant\";\r\n        case Compiler.AXIS_ANCESTOR_OR_SELF:\r\n            return \"ancestor-or-self\";\r\n        case Compiler.AXIS_FOLLOWING_SIBLING:\r\n            return \"following-sibling\";\r\n        case Compiler.AXIS_PRECEDING_SIBLING:\r\n            return \"preceding-sibling\";\r\n        case Compiler.AXIS_DESCENDANT_OR_SELF:\r\n            return \"descendant-or-self\";\r\n        default:\r\n            return \"UNKNOWN\";\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.compiler.TreeCompiler",
    "methodName": "equal",
    "signature": "java.lang.Object equal(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return isNameAttributeTest((Expression) left) ? new NameAttributeTest((Expression) left, (Expression) right) : new CoreOperationEqual((Expression) left, (Expression) right);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeCompiler\n  Object\n  Object\n  $r2 \u003d Expression) r1\n  $z0 \u003d r0.isNameAttributeTest($r2)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d NameAttributeTest\n  $r8 \u003d $r9\n  $r7 \u003d Expression) r1\n  $r6 \u003d Expression) r3\n  new NameAttributeTest($r7, $r6)\n  goto B3\n}",
      "B2 {\n  $r10 \u003d CoreOperationEqual\n  $r8 \u003d $r10\n  $r5 \u003d Expression) r1\n  $r4 \u003d Expression) r3\n  new CoreOperationEqual($r5, $r4)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeCompiler#isNameAttributeTest(...1)",
        "body": "{\r\n    if (!(arg instanceof LocationPath)) {\r\n        return false;\r\n    }\r\n    final Step[] steps \u003d ((LocationPath) arg).getSteps();\r\n    if (steps.length !\u003d 1) {\r\n        return false;\r\n    }\r\n    if (steps[0].getAxis() !\u003d AXIS_ATTRIBUTE) {\r\n        return false;\r\n    }\r\n    final NodeTest test \u003d steps[0].getNodeTest();\r\n    if (!(test instanceof NodeNameTest)) {\r\n        return false;\r\n    }\r\n    if (!((NodeNameTest) test).getNodeName().equals(QNAME_NAME)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.InfoSetUtil",
    "methodName": "booleanValue",
    "signature": "boolean booleanValue(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (object instanceof Number) {\r\n        final double value \u003d ((Number) object).doubleValue();\r\n        final int negZero \u003d -0;\r\n        return value !\u003d 0 \u0026\u0026 value !\u003d negZero \u0026\u0026 !Double.isNaN(value);\r\n    }\r\n    if (object instanceof Boolean) {\r\n        return ((Boolean) object).booleanValue();\r\n    }\r\n    if (object instanceof EvalContext) {\r\n        final EvalContext ctx \u003d (EvalContext) object;\r\n        final Pointer ptr \u003d ctx.getSingleNodePointer();\r\n        return ptr !\u003d null \u0026\u0026 booleanValue(ptr);\r\n    }\r\n    if (object instanceof String) {\r\n        return ((String) object).length() !\u003d 0;\r\n    }\r\n    if (object instanceof NodePointer) {\r\n        NodePointer pointer \u003d (NodePointer) object;\r\n        if (pointer instanceof VariablePointer) {\r\n            return booleanValue(pointer.getNode());\r\n        }\r\n        pointer \u003d pointer.getValuePointer();\r\n        return pointer.isActual();\r\n    }\r\n    return object !\u003d null;\r\n}",
    "nodes": 28,
    "edges": 34,
    "cc": 8,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B7",
      "B1 : If($b1 \u003d\u003d false) → B2 | else → B5",
      "B2 : If($b2 \u003d\u003d false) → B3 | else → B5",
      "B3 : If($z10 !\u003d 0) → B4 | else → B5",
      "B7 : If($z1 \u003d\u003d false) → B8 | else → B9",
      "B9 : If($z2 \u003d\u003d false) → B10 | else → B15",
      "B10 : If(r3 \u003d\u003d null) → B11 | else → B13",
      "B11 : If($z8 \u003d\u003d false) → B12 | else → B13",
      "B15 : If($z3 \u003d\u003d false) → B16 | else → B20",
      "B16 : If($i0 \u003d\u003d false) → B17 | else → B18",
      "B20 : If($z4 \u003d\u003d false) → B21 | else → B24",
      "B21 : If($z5 \u003d\u003d false) → B22 | else → B23",
      "B24 : If(r0 \u003d\u003d null) → B25 | else → B26"
    ],
    "blockList": [
      "B0 {\n  Object\n  $z0 \u003d Number\n  if ($z0 \u003d\u003d false) goto B1 else B7\n}",
      "B1 {\n  $r5 \u003d Number) r0\n  d0 \u003d $r5.doubleValue()\n  $b1 \u003d 0\n  if ($b1 \u003d\u003d false) goto B2 else B5\n}",
      "B2 {\n  $b2 \u003d 0\n  if ($b2 \u003d\u003d false) goto B3 else B5\n}",
      "B3 {\n  $z10 \u003d Double.isNaN(d0)\n  if ($z10 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $z11 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z11 \u003d 0\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $z1 \u003d Boolean\n  if ($z1 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $r4 \u003d Boolean) r0\n  $z9 \u003d $r4.booleanValue()\n  return\n}",
      "B9 {\n  $z2 \u003d EvalContext\n  if ($z2 \u003d\u003d false) goto B10 else B15\n}",
      "B10 {\n  r6 \u003d EvalContext) r0\n  r3 \u003d r6.getSingleNodePointer()\n  if (r3 \u003d\u003d null) goto B11 else B13\n}",
      "B11 {\n  $z8 \u003d InfoSetUtil.booleanValue(r3)\n  if ($z8 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $z12 \u003d 1\n  goto B14\n}",
      "B13 {\n  $z12 \u003d 0\n}",
      "B14 {\n  return\n}",
      "B15 {\n  $z3 \u003d String\n  if ($z3 \u003d\u003d false) goto B16 else B20\n}",
      "B16 {\n  $r2 \u003d String) r0\n  $i0 \u003d $r2.length()\n  if ($i0 \u003d\u003d false) goto B17 else B18\n}",
      "B17 {\n  $z13 \u003d 1\n  goto B19\n}",
      "B18 {\n  $z13 \u003d 0\n}",
      "B19 {\n  return\n}",
      "B20 {\n  $z4 \u003d NodePointer\n  if ($z4 \u003d\u003d false) goto B21 else B24\n}",
      "B21 {\n  r7 \u003d NodePointer) r0\n  $z5 \u003d VariablePointer\n  if ($z5 \u003d\u003d false) goto B22 else B23\n}",
      "B22 {\n  $r1 \u003d r7.getNode()\n  $z7 \u003d InfoSetUtil.booleanValue($r1)\n  return\n}",
      "B23 {\n  r8 \u003d r7.getValuePointer()\n  $z6 \u003d r8.isActual()\n  return\n}",
      "B24 {\n  if (r0 \u003d\u003d null) goto B25 else B26\n}",
      "B25 {\n  $z14 \u003d 1\n  goto B27\n}",
      "B26 {\n  $z14 \u003d 0\n}",
      "B27 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B7",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B15",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B16",
      "B15 --\u003e B20",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e B21",
      "B20 --\u003e B24",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e [EXIT]",
      "B23 --\u003e [EXIT]",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B27",
      "B27 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "InfoSetUtil#booleanValue(...1)",
        "body": "{\r\n    if (object instanceof Number) {\r\n        final double value \u003d ((Number) object).doubleValue();\r\n        final int negZero \u003d -0;\r\n        return value !\u003d 0 \u0026\u0026 value !\u003d negZero \u0026\u0026 !Double.isNaN(value);\r\n    }\r\n    if (object instanceof Boolean) {\r\n        return ((Boolean) object).booleanValue();\r\n    }\r\n    if (object instanceof EvalContext) {\r\n        final EvalContext ctx \u003d (EvalContext) object;\r\n        final Pointer ptr \u003d ctx.getSingleNodePointer();\r\n        return ptr !\u003d null \u0026\u0026 booleanValue(ptr);\r\n    }\r\n    if (object instanceof String) {\r\n        return ((String) object).length() !\u003d 0;\r\n    }\r\n    if (object instanceof NodePointer) {\r\n        NodePointer pointer \u003d (NodePointer) object;\r\n        if (pointer instanceof VariablePointer) {\r\n            return booleanValue(pointer.getNode());\r\n        }\r\n        pointer \u003d pointer.getValuePointer();\r\n        return pointer.isActual();\r\n    }\r\n    return object !\u003d null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.InfoSetUtil",
    "methodName": "doubleValue",
    "signature": "double doubleValue(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (object instanceof Number) {\r\n        return ((Number) object).doubleValue();\r\n    }\r\n    if (object instanceof Boolean) {\r\n        return ((Boolean) object).booleanValue() ? 0.0 : 1.0;\r\n    }\r\n    if (object instanceof String) {\r\n        if (object.equals(\"\")) {\r\n            return 0.0;\r\n        }\r\n        try {\r\n            return Double.parseDouble((String) object);\r\n        } catch (final NumberFormatException ex) {\r\n            return Double.NaN;\r\n        }\r\n    }\r\n    if (object instanceof NodePointer) {\r\n        return doubleValue(((NodePointer) object).getValue());\r\n    }\r\n    if (object instanceof EvalContext) {\r\n        final EvalContext ctx \u003d (EvalContext) object;\r\n        final Pointer ptr \u003d ctx.getSingleNodePointer();\r\n        return ptr \u003d\u003d null ? Double.NaN : doubleValue(ptr);\r\n    }\r\n    return doubleValue(stringValue(object));\r\n}",
    "nodes": 20,
    "edges": 20,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B7",
      "B3 : If($z6 \u003d\u003d false) → B4 | else → B5",
      "B7 : If($z2 \u003d\u003d false) → B8 | else → B12",
      "B8 : If($z5 \u003d\u003d false) → B9 | else → B10",
      "B12 : If($z3 \u003d\u003d false) → B13 | else → B14",
      "B14 : If($z4 \u003d\u003d false) → B15 | else → B19",
      "B15 : If(r2 !\u003d null) → B16 | else → B17"
    ],
    "blockList": [
      "B0 {\n  Object\n  $z0 \u003d Number\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d Number) r0\n  $d3 \u003d $r7.doubleValue()\n  return\n}",
      "B2 {\n  $z1 \u003d Boolean\n  if ($z1 \u003d\u003d false) goto B3 else B7\n}",
      "B3 {\n  $r6 \u003d Boolean) r0\n  $z6 \u003d $r6.booleanValue()\n  if ($z6 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $d4 \u003d 0\n  goto B6\n}",
      "B5 {\n  $d4 \u003d 0\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $z2 \u003d String\n  if ($z2 \u003d\u003d false) goto B8 else B12\n}",
      "B8 {\n  $z5 \u003d r0.equals(\"\")\n  if ($z5 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $r5 \u003d String) r0\n  $d2 \u003d Double.parseDouble($r5)\n  return\n}",
      "B11 {\n  $r8 :\u003d @caughtexception\n  return\n}",
      "B12 {\n  $z3 \u003d NodePointer\n  if ($z3 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  $r3 \u003d NodePointer) r0\n  $r4 \u003d $r3.getValue()\n  $d1 \u003d InfoSetUtil.doubleValue($r4)\n  return\n}",
      "B14 {\n  $z4 \u003d EvalContext\n  if ($z4 \u003d\u003d false) goto B15 else B19\n}",
      "B15 {\n  r9 \u003d EvalContext) r0\n  r2 \u003d r9.getSingleNodePointer()\n  if (r2 !\u003d null) goto B16 else B17\n}",
      "B16 {\n  $d5 \u003d #NaN\n  goto B18\n}",
      "B17 {\n  $d5 \u003d InfoSetUtil.doubleValue(r2)\n}",
      "B18 {\n  return\n}",
      "B19 {\n  $r1 \u003d InfoSetUtil.stringValue(r0)\n  $d0 \u003d InfoSetUtil.doubleValue($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B19",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "InfoSetUtil#doubleValue(...1)",
        "body": "{\r\n    if (object instanceof Number) {\r\n        return ((Number) object).doubleValue();\r\n    }\r\n    if (object instanceof Boolean) {\r\n        return ((Boolean) object).booleanValue() ? 0.0 : 1.0;\r\n    }\r\n    if (object instanceof String) {\r\n        if (object.equals(\"\")) {\r\n            return 0.0;\r\n        }\r\n        try {\r\n            return Double.parseDouble((String) object);\r\n        } catch (final NumberFormatException ex) {\r\n            return Double.NaN;\r\n        }\r\n    }\r\n    if (object instanceof NodePointer) {\r\n        return doubleValue(((NodePointer) object).getValue());\r\n    }\r\n    if (object instanceof EvalContext) {\r\n        final EvalContext ctx \u003d (EvalContext) object;\r\n        final Pointer ptr \u003d ctx.getSingleNodePointer();\r\n        return ptr \u003d\u003d null ? Double.NaN : doubleValue(ptr);\r\n    }\r\n    return doubleValue(stringValue(object));\r\n}"
      },
      {
        "name": "InfoSetUtil#stringValue(...1)",
        "body": "{\r\n    if (object instanceof String) {\r\n        return (String) object;\r\n    }\r\n    if (object instanceof Number) {\r\n        final double d \u003d ((Number) object).doubleValue();\r\n        final long l \u003d ((Number) object).longValue();\r\n        return d \u003d\u003d l ? String.valueOf(l) : String.valueOf(d);\r\n    }\r\n    if (object instanceof Boolean) {\r\n        return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\r\n    }\r\n    if (object \u003d\u003d null) {\r\n        return \"\";\r\n    }\r\n    if (object instanceof NodePointer) {\r\n        return stringValue(((NodePointer) object).getValue());\r\n    }\r\n    if (object instanceof EvalContext) {\r\n        final EvalContext ctx \u003d (EvalContext) object;\r\n        final Pointer ptr \u003d ctx.getSingleNodePointer();\r\n        return ptr \u003d\u003d null ? \"\" : stringValue(ptr);\r\n    }\r\n    return String.valueOf(object);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.InfoSetUtil",
    "methodName": "number",
    "signature": "java.lang.Number number(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (object instanceof Number) {\r\n        return (Number) object;\r\n    }\r\n    if (object instanceof Boolean) {\r\n        return ((Boolean) object).booleanValue() ? ONE : ZERO;\r\n    }\r\n    if (object instanceof String) {\r\n        try {\r\n            return Double.valueOf((String) object);\r\n        } catch (final NumberFormatException ex) {\r\n            return NOT_A_NUMBER;\r\n        }\r\n    }\r\n    if (object instanceof EvalContext) {\r\n        final EvalContext ctx \u003d (EvalContext) object;\r\n        final Pointer ptr \u003d ctx.getSingleNodePointer();\r\n        return ptr \u003d\u003d null ? NOT_A_NUMBER : number(ptr);\r\n    }\r\n    if (object instanceof NodePointer) {\r\n        return number(((NodePointer) object).getValue());\r\n    }\r\n    return number(stringValue(object));\r\n}",
    "nodes": 18,
    "edges": 18,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B7",
      "B3 : If($z5 \u003d\u003d false) → B4 | else → B5",
      "B7 : If($z2 \u003d\u003d false) → B8 | else → B10",
      "B10 : If($z3 \u003d\u003d false) → B11 | else → B15",
      "B11 : If(r6 !\u003d null) → B12 | else → B13",
      "B15 : If($z4 \u003d\u003d false) → B16 | else → B17"
    ],
    "blockList": [
      "B0 {\n  Object\n  $z0 \u003d Number\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d Number) r0\n  return\n}",
      "B2 {\n  $z1 \u003d Boolean\n  if ($z1 \u003d\u003d false) goto B3 else B7\n}",
      "B3 {\n  $r9 \u003d Boolean) r0\n  $z5 \u003d $r9.booleanValue()\n  if ($z5 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r13 \u003d Double ONE\u003e\n  goto B6\n}",
      "B5 {\n  $r13 \u003d Double ZERO\u003e\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $z2 \u003d String\n  if ($z2 \u003d\u003d false) goto B8 else B10\n}",
      "B8 {\n  $r7 \u003d String) r0\n  $r8 \u003d Double.valueOf($r7)\n  return\n}",
      "B9 {\n  $r11 :\u003d @caughtexception\n  $r12 \u003d Double NOT_A_NUMBER\u003e\n  return\n}",
      "B10 {\n  $z3 \u003d EvalContext\n  if ($z3 \u003d\u003d false) goto B11 else B15\n}",
      "B11 {\n  r14 \u003d EvalContext) r0\n  r6 \u003d r14.getSingleNodePointer()\n  if (r6 !\u003d null) goto B12 else B13\n}",
      "B12 {\n  $r15 \u003d Double NOT_A_NUMBER\u003e\n  goto B14\n}",
      "B13 {\n  $r15 \u003d InfoSetUtil.number(r6)\n}",
      "B14 {\n  return\n}",
      "B15 {\n  $z4 \u003d NodePointer\n  if ($z4 \u003d\u003d false) goto B16 else B17\n}",
      "B16 {\n  $r3 \u003d NodePointer) r0\n  $r4 \u003d $r3.getValue()\n  $r5 \u003d InfoSetUtil.number($r4)\n  return\n}",
      "B17 {\n  $r1 \u003d InfoSetUtil.stringValue(r0)\n  $r2 \u003d InfoSetUtil.number($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B15",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "InfoSetUtil#stringValue(...1)",
        "body": "{\r\n    if (object instanceof String) {\r\n        return (String) object;\r\n    }\r\n    if (object instanceof Number) {\r\n        final double d \u003d ((Number) object).doubleValue();\r\n        final long l \u003d ((Number) object).longValue();\r\n        return d \u003d\u003d l ? String.valueOf(l) : String.valueOf(d);\r\n    }\r\n    if (object instanceof Boolean) {\r\n        return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\r\n    }\r\n    if (object \u003d\u003d null) {\r\n        return \"\";\r\n    }\r\n    if (object instanceof NodePointer) {\r\n        return stringValue(((NodePointer) object).getValue());\r\n    }\r\n    if (object instanceof EvalContext) {\r\n        final EvalContext ctx \u003d (EvalContext) object;\r\n        final Pointer ptr \u003d ctx.getSingleNodePointer();\r\n        return ptr \u003d\u003d null ? \"\" : stringValue(ptr);\r\n    }\r\n    return String.valueOf(object);\r\n}"
      },
      {
        "name": "InfoSetUtil#number(...1)",
        "body": "{\r\n    if (object instanceof Number) {\r\n        return (Number) object;\r\n    }\r\n    if (object instanceof Boolean) {\r\n        return ((Boolean) object).booleanValue() ? ONE : ZERO;\r\n    }\r\n    if (object instanceof String) {\r\n        try {\r\n            return Double.valueOf((String) object);\r\n        } catch (final NumberFormatException ex) {\r\n            return NOT_A_NUMBER;\r\n        }\r\n    }\r\n    if (object instanceof EvalContext) {\r\n        final EvalContext ctx \u003d (EvalContext) object;\r\n        final Pointer ptr \u003d ctx.getSingleNodePointer();\r\n        return ptr \u003d\u003d null ? NOT_A_NUMBER : number(ptr);\r\n    }\r\n    if (object instanceof NodePointer) {\r\n        return number(((NodePointer) object).getValue());\r\n    }\r\n    return number(stringValue(object));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.InfoSetUtil",
    "methodName": "stringValue",
    "signature": "java.lang.String stringValue(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (object instanceof String) {\r\n        return (String) object;\r\n    }\r\n    if (object instanceof Number) {\r\n        final double d \u003d ((Number) object).doubleValue();\r\n        final long l \u003d ((Number) object).longValue();\r\n        return d \u003d\u003d l ? String.valueOf(l) : String.valueOf(d);\r\n    }\r\n    if (object instanceof Boolean) {\r\n        return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\r\n    }\r\n    if (object \u003d\u003d null) {\r\n        return \"\";\r\n    }\r\n    if (object instanceof NodePointer) {\r\n        return stringValue(((NodePointer) object).getValue());\r\n    }\r\n    if (object instanceof EvalContext) {\r\n        final EvalContext ctx \u003d (EvalContext) object;\r\n        final Pointer ptr \u003d ctx.getSingleNodePointer();\r\n        return ptr \u003d\u003d null ? \"\" : stringValue(ptr);\r\n    }\r\n    return String.valueOf(object);\r\n}",
    "nodes": 22,
    "edges": 24,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B7",
      "B3 : If($b1 !\u003d 0) → B4 | else → B5",
      "B7 : If($z2 \u003d\u003d false) → B8 | else → B12",
      "B8 : If($z5 \u003d\u003d false) → B9 | else → B10",
      "B12 : If(r0 !\u003d null) → B13 | else → B14",
      "B14 : If($z3 \u003d\u003d false) → B15 | else → B16",
      "B16 : If($z4 \u003d\u003d false) → B17 | else → B21",
      "B17 : If(r2 !\u003d null) → B18 | else → B19"
    ],
    "blockList": [
      "B0 {\n  Object\n  $z0 \u003d String\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d String) r0\n  return\n}",
      "B2 {\n  $z1 \u003d Number\n  if ($z1 \u003d\u003d false) goto B3 else B7\n}",
      "B3 {\n  $r7 \u003d Number) r0\n  d1 \u003d $r7.doubleValue()\n  $r8 \u003d Number) r0\n  l0 \u003d $r8.longValue()\n  $d0 \u003d (double) l0\n  $b1 \u003d d1 cmpl $d0\n  if ($b1 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r10 \u003d String.valueOf(l0)\n  goto B6\n}",
      "B5 {\n  $r10 \u003d String.valueOf(d1)\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $z2 \u003d Boolean\n  if ($z2 \u003d\u003d false) goto B8 else B12\n}",
      "B8 {\n  $r6 \u003d Boolean) r0\n  $z5 \u003d $r6.booleanValue()\n  if ($z5 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r11 \u003d \"true\"\n  goto B11\n}",
      "B10 {\n  $r11 \u003d \"false\"\n}",
      "B11 {\n  return\n}",
      "B12 {\n  if (r0 !\u003d null) goto B13 else B14\n}",
      "B13 {\n  return\n}",
      "B14 {\n  $z3 \u003d NodePointer\n  if ($z3 \u003d\u003d false) goto B15 else B16\n}",
      "B15 {\n  $r3 \u003d NodePointer) r0\n  $r4 \u003d $r3.getValue()\n  $r5 \u003d InfoSetUtil.stringValue($r4)\n  return\n}",
      "B16 {\n  $z4 \u003d EvalContext\n  if ($z4 \u003d\u003d false) goto B17 else B21\n}",
      "B17 {\n  r12 \u003d EvalContext) r0\n  r2 \u003d r12.getSingleNodePointer()\n  if (r2 !\u003d null) goto B18 else B19\n}",
      "B18 {\n  $r13 \u003d \"\"\n  goto B20\n}",
      "B19 {\n  $r13 \u003d InfoSetUtil.stringValue(r2)\n}",
      "B20 {\n  return\n}",
      "B21 {\n  $r1 \u003d String.valueOf(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B21",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B20",
      "B20 --\u003e [EXIT]",
      "B21 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "InfoSetUtil#stringValue(...1)",
        "body": "{\r\n    if (object instanceof String) {\r\n        return (String) object;\r\n    }\r\n    if (object instanceof Number) {\r\n        final double d \u003d ((Number) object).doubleValue();\r\n        final long l \u003d ((Number) object).longValue();\r\n        return d \u003d\u003d l ? String.valueOf(l) : String.valueOf(d);\r\n    }\r\n    if (object instanceof Boolean) {\r\n        return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\r\n    }\r\n    if (object \u003d\u003d null) {\r\n        return \"\";\r\n    }\r\n    if (object instanceof NodePointer) {\r\n        return stringValue(((NodePointer) object).getValue());\r\n    }\r\n    if (object instanceof EvalContext) {\r\n        final EvalContext ctx \u003d (EvalContext) object;\r\n        final Pointer ptr \u003d ctx.getSingleNodePointer();\r\n        return ptr \u003d\u003d null ? \"\" : stringValue(ptr);\r\n    }\r\n    return String.valueOf(object);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.JXPathContextReferenceImpl",
    "methodName": "createPath",
    "signature": "org.apache.commons.jxpath.Pointer createPath(java.lang.String,org.apache.commons.jxpath.ri.compiler.Expression)",
    "visibility": "public",
    "body": "{\r\n    try {\r\n        final Object result \u003d expr.computeValue(getEvalContext());\r\n        Pointer pointer;\r\n        if (result instanceof Pointer) {\r\n            pointer \u003d (Pointer) result;\r\n        } else if (result instanceof EvalContext) {\r\n            final EvalContext ctx \u003d (EvalContext) result;\r\n            pointer \u003d ctx.getSingleNodePointer();\r\n        } else {\r\n            checkSimplePath(expr);\r\n            // This should never happen\r\n            throw new JXPathException(\"Cannot create path:\" + xpath);\r\n        }\r\n        return ((NodePointer) pointer).createPath(this);\r\n    } catch (final Throwable ex) {\r\n        throw new JXPathException(\"Exception trying to create XPath \" + xpath, ex);\r\n    }\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  JXPathContextReferenceImpl\n  String\n  Expression\n  $r2 \u003d r1.getEvalContext()\n  r18 \u003d r0.computeValue($r2)\n  $z0 \u003d Pointer\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r19 \u003d Pointer) r18\n  goto B5\n}",
      "B2 {\n  $z1 \u003d EvalContext\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  r9 \u003d EvalContext) r18\n  r19 \u003d r9.getSingleNodePointer()\n  goto B5\n}",
      "B4 {\n  r1.checkSimplePath(r0)\n  $r3 \u003d JXPathException\n  $r4 \u003d StringBuilder\n  new StringBuilder()\n  $r6 \u003d $r4.append(\"Cannot create path:\")\n  $r7 \u003d $r6.append(r5)\n  $r8 \u003d $r7.toString()\n  new JXPathException($r8)\n  throw $r3\n}",
      "B5 {\n  $r10 \u003d NodePointer) r19\n  $r11 \u003d $r10.createPath(r1)\n  return\n}",
      "B6 {\n  $r12 :\u003d @caughtexception\n  $r13 \u003d JXPathException\n  $r14 \u003d StringBuilder\n  new StringBuilder()\n  $r15 \u003d $r14.append(\"Exception trying to create XPath \")\n  $r16 \u003d $r15.append(r5)\n  $r17 \u003d $r16.toString()\n  new JXPathException($r17, $r12)\n  throw $r13\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JXPathContextReferenceImpl#checkSimplePath(...1)",
        "body": "{\r\n    if (!(expr instanceof LocationPath) || !((LocationPath) expr).isSimplePath()) {\r\n        throw new JXPathInvalidSyntaxException(\"JXPath can only create a path if it uses exclusively \" + \"the child:: and attribute:: axes and has \" + \"no context-dependent predicates\");\r\n    }\r\n}"
      },
      {
        "name": "JXPathContextReferenceImpl#getEvalContext(...0)",
        "body": "{\r\n    return new InitialContext(new RootContext(this, (NodePointer) getContextPointer()));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.JXPathContextReferenceImpl",
    "methodName": "getFunction",
    "signature": "org.apache.commons.jxpath.Function getFunction(org.apache.commons.jxpath.ri.QName,java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    final String namespace \u003d functionName.getPrefix();\r\n    final String name \u003d functionName.getName();\r\n    JXPathContext funcCtx \u003d this;\r\n    Function func;\r\n    Functions funcs;\r\n    while (funcCtx !\u003d null) {\r\n        funcs \u003d funcCtx.getFunctions();\r\n        if (funcs !\u003d null) {\r\n            func \u003d funcs.getFunction(namespace, name, parameters);\r\n            if (func !\u003d null) {\r\n                return func;\r\n            }\r\n        }\r\n        funcCtx \u003d funcCtx.getParentContext();\r\n    }\r\n    throw new JXPathFunctionNotFoundException(\"Undefined function: \" + functionName.toString());\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r13 \u003d\u003d null) → B2 | else → B6",
      "B2 : If(r10 \u003d\u003d null) → B3 | else → B5",
      "B3 : If(r12 \u003d\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  JXPathContextReferenceImpl\n  QName\n  Object[]\n  r1 \u003d r0.getPrefix()\n  r2 \u003d r0.getName()\n  r13 \u003d r3\n}",
      "B1 {\n  if (r13 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  r10 \u003d r13.getFunctions()\n  if (r10 \u003d\u003d null) goto B3 else B5\n}",
      "B3 {\n  r12 \u003d r10.getFunction(r1, r2, r11)\n  if (r12 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  r13 \u003d r13.getParentContext()\n  goto B1\n}",
      "B6 {\n  $r4 \u003d JXPathFunctionNotFoundException\n  $r5 \u003d StringBuilder\n  new StringBuilder()\n  $r7 \u003d $r5.append(\"Undefined function: \")\n  $r6 \u003d r0.toString()\n  $r8 \u003d $r7.append($r6)\n  $r9 \u003d $r8.toString()\n  new JXPathFunctionNotFoundException($r9)\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.JXPathContextReferenceImpl",
    "methodName": "getPointer",
    "signature": "org.apache.commons.jxpath.Pointer getPointer(java.lang.String,org.apache.commons.jxpath.ri.compiler.Expression)",
    "visibility": "public",
    "body": "{\r\n    Object result \u003d expr.computeValue(getEvalContext());\r\n    if (result instanceof EvalContext) {\r\n        result \u003d ((EvalContext) result).getSingleNodePointer();\r\n    }\r\n    if (result instanceof Pointer) {\r\n        if (!isLenient() \u0026\u0026 !((NodePointer) result).isActual()) {\r\n            throw new JXPathNotFoundException(\"No pointer for xpath: \" + xpath);\r\n        }\r\n        return (Pointer) result;\r\n    }\r\n    return NodePointer.newNodePointer(null, result, getLocale());\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B7",
      "B3 : If($z2 !\u003d 0) → B4 | else → B6",
      "B4 : If($z3 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  JXPathContextReferenceImpl\n  String\n  Expression\n  $r2 \u003d r1.getEvalContext()\n  r14 \u003d r0.computeValue($r2)\n  $z0 \u003d EvalContext\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r13 \u003d EvalContext) r14\n  r14 \u003d $r13.getSingleNodePointer()\n}",
      "B2 {\n  $z1 \u003d Pointer\n  if ($z1 \u003d\u003d false) goto B3 else B7\n}",
      "B3 {\n  $z2 \u003d r1.isLenient()\n  if ($z2 !\u003d 0) goto B4 else B6\n}",
      "B4 {\n  $r6 \u003d NodePointer) r14\n  $z3 \u003d $r6.isActual()\n  if ($z3 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r7 \u003d JXPathNotFoundException\n  $r8 \u003d StringBuilder\n  new StringBuilder()\n  $r10 \u003d $r8.append(\"No pointer for xpath: \")\n  $r11 \u003d $r10.append(r9)\n  $r12 \u003d $r11.toString()\n  new JXPathNotFoundException($r12)\n  throw $r7\n}",
      "B6 {\n  $r5 \u003d Pointer) r14\n  return\n}",
      "B7 {\n  $r3 \u003d r1.getLocale()\n  $r4 \u003d NodePointer.newNodePointer(null, r14, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JXPathContextReferenceImpl#getLocale(...0)",
        "body": "(source not found)"
      },
      {
        "name": "JXPathContextReferenceImpl#getEvalContext(...0)",
        "body": "{\r\n    return new InitialContext(new RootContext(this, (NodePointer) getContextPointer()));\r\n}"
      },
      {
        "name": "JXPathContextReferenceImpl#isLenient(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.JXPathContextReferenceImpl",
    "methodName": "getRelativeContext",
    "signature": "org.apache.commons.jxpath.JXPathContext getRelativeContext(org.apache.commons.jxpath.Pointer)",
    "visibility": "public",
    "body": "{\r\n    final Object contextBean \u003d pointer.getNode();\r\n    if (contextBean \u003d\u003d null) {\r\n        throw new JXPathException(\"Cannot create a relative context for a non-existent node: \" + pointer);\r\n    }\r\n    return new JXPathContextReferenceImpl(this, contextBean, pointer);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JXPathContextReferenceImpl\n  Pointer\n  r1 \u003d r0.getNode()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d JXPathException\n  $r5 \u003d StringBuilder\n  new StringBuilder()\n  $r6 \u003d $r5.append(\"Cannot create a relative context for a non-existent node: \")\n  $r7 \u003d $r6.append(r0)\n  $r8 \u003d $r7.toString()\n  new JXPathException($r8)\n  throw $r4\n}",
      "B2 {\n  $r2 \u003d JXPathContextReferenceImpl\n  new JXPathContextReferenceImpl(r3, r1, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.JXPathContextReferenceImpl",
    "methodName": "getValue",
    "signature": "java.lang.Object getValue(java.lang.String,org.apache.commons.jxpath.ri.compiler.Expression)",
    "visibility": "public",
    "body": "{\r\n    Object result \u003d expr.computeValue(getEvalContext());\r\n    if (result \u003d\u003d null) {\r\n        if (expr instanceof Path \u0026\u0026 !isLenient()) {\r\n            throw new JXPathNotFoundException(\"No value for xpath: \" + xpath);\r\n        }\r\n        return null;\r\n    }\r\n    if (result instanceof EvalContext) {\r\n        final EvalContext ctx \u003d (EvalContext) result;\r\n        result \u003d ctx.getSingleNodePointer();\r\n        if (!isLenient() \u0026\u0026 result \u003d\u003d null) {\r\n            throw new JXPathNotFoundException(\"No value for xpath: \" + xpath);\r\n        }\r\n    }\r\n    if (result instanceof NodePointer) {\r\n        result \u003d ((NodePointer) result).getValuePointer();\r\n        if (!isLenient()) {\r\n            NodePointer.verify((NodePointer) result);\r\n        }\r\n        result \u003d ((NodePointer) result).getValue();\r\n    }\r\n    return result;\r\n}",
    "nodes": 14,
    "edges": 18,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r18 !\u003d null) → B1 | else → B5",
      "B1 : If($z3 \u003d\u003d false) → B2 | else → B4",
      "B2 : If($z4 !\u003d 0) → B3 | else → B4",
      "B5 : If($z0 \u003d\u003d false) → B6 | else → B9",
      "B6 : If($z2 !\u003d 0) → B7 | else → B9",
      "B7 : If(r18 !\u003d null) → B8 | else → B9",
      "B9 : If($z5 \u003d\u003d false) → B10 | else → B13",
      "B10 : If($z1 !\u003d 0) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  JXPathContextReferenceImpl\n  String\n  Expression\n  $r2 \u003d r1.getEvalContext()\n  r18 \u003d r0.computeValue($r2)\n  if (r18 !\u003d null) goto B1 else B5\n}",
      "B1 {\n  $z3 \u003d Path\n  if ($z3 \u003d\u003d false) goto B2 else B4\n}",
      "B2 {\n  $z4 \u003d r1.isLenient()\n  if ($z4 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r13 \u003d JXPathNotFoundException\n  $r14 \u003d StringBuilder\n  new StringBuilder()\n  $r15 \u003d $r14.append(\"No value for xpath: \")\n  $r16 \u003d $r15.append(r9)\n  $r17 \u003d $r16.toString()\n  new JXPathNotFoundException($r17)\n  throw $r13\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $z0 \u003d EvalContext\n  if ($z0 \u003d\u003d false) goto B6 else B9\n}",
      "B6 {\n  r6 \u003d EvalContext) r18\n  r18 \u003d r6.getSingleNodePointer()\n  $z2 \u003d r1.isLenient()\n  if ($z2 !\u003d 0) goto B7 else B9\n}",
      "B7 {\n  if (r18 !\u003d null) goto B8 else B9\n}",
      "B8 {\n  $r7 \u003d JXPathNotFoundException\n  $r8 \u003d StringBuilder\n  new StringBuilder()\n  $r10 \u003d $r8.append(\"No value for xpath: \")\n  $r11 \u003d $r10.append(r9)\n  $r12 \u003d $r11.toString()\n  new JXPathNotFoundException($r12)\n  throw $r7\n}",
      "B9 {\n  $z5 \u003d NodePointer\n  if ($z5 \u003d\u003d false) goto B10 else B13\n}",
      "B10 {\n  $r3 \u003d NodePointer) r18\n  r19 \u003d $r3.getValuePointer()\n  $z1 \u003d r1.isLenient()\n  if ($z1 !\u003d 0) goto B11 else B12\n}",
      "B11 {\n  $r5 \u003d NodePointer) r19\n  NodePointer.verify($r5)\n}",
      "B12 {\n  $r4 \u003d NodePointer) r19\n  r18 \u003d $r4.getValue()\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B13",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JXPathContextReferenceImpl#getEvalContext(...0)",
        "body": "{\r\n    return new InitialContext(new RootContext(this, (NodePointer) getContextPointer()));\r\n}"
      },
      {
        "name": "JXPathContextReferenceImpl#isLenient(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.JXPathContextReferenceImpl",
    "methodName": "getValue",
    "signature": "java.lang.Object getValue(java.lang.String,org.apache.commons.jxpath.ri.compiler.Expression,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    Object value \u003d getValue(xpath, expr);\r\n    if (value !\u003d null \u0026\u0026 requiredType !\u003d null) {\r\n        if (!TypeUtils.canConvert(value, requiredType)) {\r\n            throw new JXPathTypeConversionException(\"Invalid expression type. \u0027\" + xpath + \"\u0027 returns \" + value.getClass().getName() + \". It cannot be converted to \" + requiredType.getName());\r\n        }\r\n        value \u003d TypeUtils.convert(value, requiredType);\r\n    }\r\n    return value;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r16 \u003d\u003d null) → B1 | else → B5",
      "B1 : If(r3 \u003d\u003d null) → B2 | else → B5",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  JXPathContextReferenceImpl\n  String\n  Expression\n  Class\n  r16 \u003d r0.getValue(r1, r2)\n  if (r16 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  if (r3 \u003d\u003d null) goto B2 else B5\n}",
      "B2 {\n  $z0 \u003d TypeUtils.canConvert(r16, r3)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d JXPathTypeConversionException\n  $r5 \u003d StringBuilder\n  new StringBuilder()\n  $r6 \u003d $r5.append(\"Invalid expression type. \\\u0027\")\n  $r7 \u003d $r6.append(r1)\n  $r10 \u003d $r7.append(\"\\\u0027 returns \")\n  $r8 \u003d r16.getClass()\n  $r9 \u003d $r8.getName()\n  $r11 \u003d $r10.append($r9)\n  $r13 \u003d $r11.append(\". It cannot be converted to \")\n  $r12 \u003d r3.getName()\n  $r14 \u003d $r13.append($r12)\n  $r15 \u003d $r14.toString()\n  new JXPathTypeConversionException($r15)\n  throw $r4\n}",
      "B4 {\n  r16 \u003d TypeUtils.convert(r16, r3)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JXPathContextReferenceImpl#getValue(...2)",
        "body": "{\r\n    final Expression expr \u003d compileExpression(xpath);\r\n    return getValue(xpath, expr, requiredType);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.JXPathContextReferenceImpl",
    "methodName": "registerNamespace",
    "signature": "void registerNamespace(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (namespaceResolver.isSealed()) {\r\n        namespaceResolver \u003d (NamespaceResolver) namespaceResolver.clone();\r\n    }\r\n    namespaceResolver.registerNamespace(prefix, namespaceURI);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JXPathContextReferenceImpl\n  String\n  String\n  $r1 \u003d NamespaceResolver namespaceResolver\u003e\n  $z0 \u003d $r1.isSealed()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d NamespaceResolver namespaceResolver\u003e\n  $r6 \u003d $r5.clone()\n  $r7 \u003d NamespaceResolver) $r6\n  NamespaceResolver namespaceResolver\u003e \u003d $r7\n}",
      "B2 {\n  $r4 \u003d NamespaceResolver namespaceResolver\u003e\n  $r4.registerNamespace(r2, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.JXPathContextReferenceImpl",
    "methodName": "removeAll",
    "signature": "void removeAll(java.lang.String,org.apache.commons.jxpath.ri.compiler.Expression)",
    "visibility": "public",
    "body": "{\r\n    try {\r\n        final ArrayList\u003cNodePointer\u003e list \u003d new ArrayList\u003c\u003e();\r\n        Iterator\u003cNodePointer\u003e it \u003d expr.iteratePointers(getEvalContext());\r\n        while (it.hasNext()) {\r\n            list.add(it.next());\r\n        }\r\n        Collections.sort(list, ReverseComparator.INSTANCE);\r\n        it \u003d list.iterator();\r\n        if (it.hasNext()) {\r\n            final NodePointer pointer \u003d it.next();\r\n            pointer.remove();\r\n            while (it.hasNext()) {\r\n                removePath(it.next().asPath());\r\n            }\r\n        }\r\n    } catch (final Throwable ex) {\r\n        throw new JXPathException(\"Exception trying to remove all for xpath \" + xpath, ex);\r\n    }\r\n}",
    "nodes": 10,
    "edges": 11,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B7",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  JXPathContextReferenceImpl\n  String\n  Expression\n  $r0 \u003d ArrayList\n  new ArrayList()\n  $r3 \u003d r2.getEvalContext()\n  r19 \u003d r1.iteratePointers($r3)\n}",
      "B1 {\n  $z0 \u003d r19.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r10 \u003d r19.next()\n  $r11 \u003d NodePointer) $r10\n  $r0.add($r11)\n  goto B1\n}",
      "B3 {\n  $r4 \u003d Comparator INSTANCE\u003e\n  Collections.sort($r0, $r4)\n  r20 \u003d $r0.iterator()\n  $z1 \u003d r20.hasNext()\n  if ($z1 \u003d\u003d false) goto B4 else B7\n}",
      "B4 {\n  $r5 \u003d r20.next()\n  r6 \u003d NodePointer) $r5\n  r6.remove()\n}",
      "B5 {\n  $z2 \u003d r20.hasNext()\n  if ($z2 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r7 \u003d r20.next()\n  $r8 \u003d NodePointer) $r7\n  $r9 \u003d $r8.asPath()\n  r2.removePath($r9)\n  goto B5\n}",
      "B7 {\n  goto B9\n}",
      "B8 {\n  $r12 :\u003d @caughtexception\n  $r13 \u003d JXPathException\n  $r14 \u003d StringBuilder\n  new StringBuilder()\n  $r16 \u003d $r14.append(\"Exception trying to remove all for xpath \")\n  $r17 \u003d $r16.append(r15)\n  $r18 \u003d $r17.toString()\n  new JXPathException($r18, $r12)\n  throw $r13\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JXPathContextReferenceImpl#getEvalContext(...0)",
        "body": "{\r\n    return new InitialContext(new RootContext(this, (NodePointer) getContextPointer()));\r\n}"
      },
      {
        "name": "JXPathContextReferenceImpl#removePath(...1)",
        "body": "{\r\n    removePath(xpath, compileExpression(xpath));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.JXPathContextReferenceImpl",
    "methodName": "removePath",
    "signature": "void removePath(java.lang.String,org.apache.commons.jxpath.ri.compiler.Expression)",
    "visibility": "public",
    "body": "{\r\n    try {\r\n        final NodePointer pointer \u003d (NodePointer) getPointer(xpath, expr);\r\n        if (pointer !\u003d null) {\r\n            pointer.remove();\r\n        }\r\n    } catch (final Throwable ex) {\r\n        throw new JXPathException(\"Exception trying to remove XPath \" + xpath, ex);\r\n    }\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r10 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JXPathContextReferenceImpl\n  String\n  Expression\n  $r3 \u003d r0.getPointer(r1, r2)\n  r10 \u003d NodePointer) $r3\n  if (r10 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r10.remove()\n}",
      "B2 {\n  goto B4\n}",
      "B3 {\n  $r4 :\u003d @caughtexception\n  $r5 \u003d JXPathException\n  $r6 \u003d StringBuilder\n  new StringBuilder()\n  $r7 \u003d $r6.append(\"Exception trying to remove XPath \")\n  $r8 \u003d $r7.append(r1)\n  $r9 \u003d $r8.toString()\n  new JXPathException($r9, $r4)\n  throw $r5\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JXPathContextReferenceImpl#getPointer(...2)",
        "body": "{\r\n    Object result \u003d expr.computeValue(getEvalContext());\r\n    if (result instanceof EvalContext) {\r\n        result \u003d ((EvalContext) result).getSingleNodePointer();\r\n    }\r\n    if (result instanceof Pointer) {\r\n        if (!isLenient() \u0026\u0026 !((NodePointer) result).isActual()) {\r\n            throw new JXPathNotFoundException(\"No pointer for xpath: \" + xpath);\r\n        }\r\n        return (Pointer) result;\r\n    }\r\n    return NodePointer.newNodePointer(null, result, getLocale());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.JXPathContextReferenceImpl",
    "methodName": "setExceptionHandler",
    "signature": "void setExceptionHandler(org.apache.commons.jxpath.ExceptionHandler)",
    "visibility": "public",
    "body": "{\r\n    if (rootPointer instanceof NodePointer) {\r\n        ((NodePointer) rootPointer).setExceptionHandler(exceptionHandler);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JXPathContextReferenceImpl\n  ExceptionHandler\n  $r1 \u003d Pointer rootPointer\u003e\n  $z0 \u003d NodePointer\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Pointer rootPointer\u003e\n  $r4 \u003d NodePointer) $r2\n  $r4.setExceptionHandler(r3)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.JXPathContextReferenceImpl",
    "methodName": "setNamespaceContextPointer",
    "signature": "void setNamespaceContextPointer(org.apache.commons.jxpath.Pointer)",
    "visibility": "public",
    "body": "{\r\n    if (namespaceResolver.isSealed()) {\r\n        namespaceResolver \u003d (NamespaceResolver) namespaceResolver.clone();\r\n    }\r\n    namespaceResolver.setNamespaceContextPointer((NodePointer) pointer);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JXPathContextReferenceImpl\n  Pointer\n  $r1 \u003d NamespaceResolver namespaceResolver\u003e\n  $z0 \u003d $r1.isSealed()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d NamespaceResolver namespaceResolver\u003e\n  $r6 \u003d $r5.clone()\n  $r7 \u003d NamespaceResolver) $r6\n  NamespaceResolver namespaceResolver\u003e \u003d $r7\n}",
      "B2 {\n  $r4 \u003d NamespaceResolver namespaceResolver\u003e\n  $r3 \u003d NodePointer) r2\n  $r4.setNamespaceContextPointer($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.BeanAttributeIterator",
    "methodName": "getNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer getNodePointer()",
    "visibility": "public",
    "body": "{\r\n    return includeXmlLang \u0026\u0026 position \u003d\u003d 1 ? new LangAttributePointer(parent) : super.getNodePointer();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($i0 !\u003d 1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  BeanAttributeIterator\n  $z0 \u003d BeanAttributeIterator: boolean includeXmlLang\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $i0 \u003d BeanAttributeIterator: int position\u003e\n  if ($i0 !\u003d 1) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d LangAttributePointer\n  $r3 \u003d $r1\n  $r2 \u003d NodePointer parent\u003e\n  new LangAttributePointer($r2)\n  goto B4\n}",
      "B3 {\n  $r3 \u003d r0.getNodePointer()\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.BeanAttributeIterator",
    "methodName": "setPosition",
    "signature": "boolean setPosition(int)",
    "visibility": "public",
    "body": "{\r\n    this.position \u003d position;\r\n    if (includeXmlLang) {\r\n        return position \u003d\u003d 1 || super.setPosition(position - 1);\r\n    }\r\n    return super.setPosition(position);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B6",
      "B1 : If(i0 \u003d\u003d 1) → B2 | else → B3",
      "B2 : If($z2 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  BeanAttributeIterator\n  i0 :\u003d @parameter0: int\n  BeanAttributeIterator: int position\u003e \u003d i0\n  $z0 \u003d BeanAttributeIterator: boolean includeXmlLang\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B6\n}",
      "B1 {\n  if (i0 \u003d\u003d 1) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d i0 - 1\n  $z2 \u003d r0.setPosition($i1)\n  if ($z2 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $z3 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z3 \u003d 0\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $z1 \u003d r0.setPosition(i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.BeanPointer",
    "methodName": "asPath",
    "signature": "java.lang.String asPath()",
    "visibility": "public",
    "body": "{\r\n    if (parent !\u003d null) {\r\n        return super.asPath();\r\n    }\r\n    if (bean \u003d\u003d null) {\r\n        return \"null()\";\r\n    }\r\n    if (bean instanceof Number) {\r\n        String string \u003d bean.toString();\r\n        if (string.endsWith(\".0\")) {\r\n            string \u003d string.substring(0, string.length() - 2);\r\n        }\r\n        return string;\r\n    }\r\n    if (bean instanceof Boolean) {\r\n        return ((Boolean) bean).booleanValue() ? \"true()\" : \"false()\";\r\n    }\r\n    if (bean instanceof String) {\r\n        return \"\u0027\" + bean + \"\u0027\";\r\n    }\r\n    return \"/\";\r\n}",
    "nodes": 16,
    "edges": 17,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r2 !\u003d null) → B3 | else → B4",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B8",
      "B5 : If($z4 \u003d\u003d false) → B6 | else → B7",
      "B8 : If($z1 \u003d\u003d false) → B9 | else → B13",
      "B9 : If($z3 \u003d\u003d false) → B10 | else → B11",
      "B13 : If($z2 \u003d\u003d false) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  BeanPointer\n  $r1 \u003d NodePointer parent\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r15 \u003d r0.asPath()\n  return\n}",
      "B2 {\n  $r2 \u003d Object bean\u003e\n  if ($r2 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d Object bean\u003e\n  $z0 \u003d Number\n  if ($z0 \u003d\u003d false) goto B5 else B8\n}",
      "B5 {\n  $r14 \u003d Object bean\u003e\n  r16 \u003d $r14.toString()\n  $z4 \u003d r16.endsWith(\".0\")\n  if ($z4 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $i0 \u003d r16.length()\n  $i1 \u003d $i0 - 2\n  r16 \u003d r16.substring(0, $i1)\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $r4 \u003d Object bean\u003e\n  $z1 \u003d Boolean\n  if ($z1 \u003d\u003d false) goto B9 else B13\n}",
      "B9 {\n  $r12 \u003d Object bean\u003e\n  $r13 \u003d Boolean) $r12\n  $z3 \u003d $r13.booleanValue()\n  if ($z3 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  $r17 \u003d \"true()\"\n  goto B12\n}",
      "B11 {\n  $r17 \u003d \"false()\"\n}",
      "B12 {\n  return\n}",
      "B13 {\n  $r5 \u003d Object bean\u003e\n  $z2 \u003d String\n  if ($z2 \u003d\u003d false) goto B14 else B15\n}",
      "B14 {\n  $r6 \u003d StringBuilder\n  new StringBuilder()\n  $r8 \u003d $r6.append(\"\\\u0027\")\n  $r7 \u003d Object bean\u003e\n  $r9 \u003d $r8.append($r7)\n  $r10 \u003d $r9.append(\"\\\u0027\")\n  $r11 \u003d $r10.toString()\n  return\n}",
      "B15 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.BeanPointer",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (!(object instanceof BeanPointer)) {\r\n        return false;\r\n    }\r\n    final BeanPointer other \u003d (BeanPointer) object;\r\n    if (parent !\u003d other.parent \u0026\u0026 (parent \u003d\u003d null || !parent.equals(other.parent))) {\r\n        return false;\r\n    }\r\n    if (qName \u003d\u003d null \u0026\u0026 other.qName !\u003d null || qName !\u003d null \u0026\u0026 !qName.equals(other.qName)) {\r\n        return false;\r\n    }\r\n    final int iThis \u003d index \u003d\u003d WHOLE_COLLECTION ? 0 : index;\r\n    final int iOther \u003d other.index \u003d\u003d WHOLE_COLLECTION ? 0 : other.index;\r\n    if (iThis !\u003d iOther) {\r\n        return false;\r\n    }\r\n    if (bean instanceof Number || bean instanceof String || bean instanceof Boolean) {\r\n        return bean.equals(other.bean);\r\n    }\r\n    return bean \u003d\u003d other.bean;\r\n}",
    "nodes": 29,
    "edges": 38,
    "cc": 11,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($r4 \u003d\u003d $r3) → B5 | else → B8",
      "B5 : If($r15 \u003d\u003d null) → B6 | else → B7",
      "B6 : If($z5 !\u003d 0) → B7 | else → B8",
      "B8 : If($r5 !\u003d null) → B9 | else → B10",
      "B9 : If($r14 !\u003d null) → B10 | else → B12",
      "B10 : If($r6 \u003d\u003d null) → B11 | else → B13",
      "B11 : If($z4 !\u003d 0) → B12 | else → B13",
      "B13 : If($i0 !\u003d -2147483648) → B14 | else → B15",
      "B16 : If($i2 !\u003d -2147483648) → B17 | else → B18",
      "B19 : If(i1 \u003d\u003d $i4) → B20 | else → B21",
      "B21 : If($z1 !\u003d 0) → B22 | else → B24",
      "B22 : If($z2 !\u003d 0) → B23 | else → B24",
      "B23 : If($z3 \u003d\u003d false) → B24 | else → B25",
      "B25 : If($r11 !\u003d $r10) → B26 | else → B27"
    ],
    "blockList": [
      "B0 {\n  BeanPointer\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d BeanPointer\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d BeanPointer) r0\n  $r4 \u003d NodePointer parent\u003e\n  $r3 \u003d NodePointer parent\u003e\n  if ($r4 \u003d\u003d $r3) goto B5 else B8\n}",
      "B5 {\n  $r15 \u003d NodePointer parent\u003e\n  if ($r15 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r17 \u003d NodePointer parent\u003e\n  $r16 \u003d NodePointer parent\u003e\n  $z5 \u003d $r17.equals($r16)\n  if ($z5 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $r5 \u003d QName qName\u003e\n  if ($r5 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  $r14 \u003d QName qName\u003e\n  if ($r14 !\u003d null) goto B10 else B12\n}",
      "B10 {\n  $r6 \u003d QName qName\u003e\n  if ($r6 \u003d\u003d null) goto B11 else B13\n}",
      "B11 {\n  $r13 \u003d QName qName\u003e\n  $r12 \u003d QName qName\u003e\n  $z4 \u003d $r13.equals($r12)\n  if ($z4 !\u003d 0) goto B12 else B13\n}",
      "B12 {\n  return\n}",
      "B13 {\n  $i0 \u003d BeanPointer: int index\u003e\n  if ($i0 !\u003d -2147483648) goto B14 else B15\n}",
      "B14 {\n  $i3 \u003d 0\n  goto B16\n}",
      "B15 {\n  $i3 \u003d BeanPointer: int index\u003e\n}",
      "B16 {\n  i1 \u003d $i3\n  $i2 \u003d BeanPointer: int index\u003e\n  if ($i2 !\u003d -2147483648) goto B17 else B18\n}",
      "B17 {\n  $i4 \u003d 0\n  goto B19\n}",
      "B18 {\n  $i4 \u003d BeanPointer: int index\u003e\n}",
      "B19 {\n  if (i1 \u003d\u003d $i4) goto B20 else B21\n}",
      "B20 {\n  return\n}",
      "B21 {\n  $r7 \u003d Object bean\u003e\n  $z1 \u003d Number\n  if ($z1 !\u003d 0) goto B22 else B24\n}",
      "B22 {\n  $r8 \u003d Object bean\u003e\n  $z2 \u003d String\n  if ($z2 !\u003d 0) goto B23 else B24\n}",
      "B23 {\n  $r9 \u003d Object bean\u003e\n  $z3 \u003d Boolean\n  if ($z3 \u003d\u003d false) goto B24 else B25\n}",
      "B24 {\n  $r18 \u003d Object bean\u003e\n  $r19 \u003d Object bean\u003e\n  $z6 \u003d $r18.equals($r19)\n  return\n}",
      "B25 {\n  $r11 \u003d Object bean\u003e\n  $r10 \u003d Object bean\u003e\n  if ($r11 !\u003d $r10) goto B26 else B27\n}",
      "B26 {\n  $z7 \u003d 1\n  goto B28\n}",
      "B27 {\n  $z7 \u003d 0\n}",
      "B28 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e [EXIT]",
      "B21 --\u003e B22",
      "B21 --\u003e B24",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e [EXIT]",
      "B25 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B28",
      "B27 --\u003e B28",
      "B28 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.BeanPointer",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    return qName \u003d\u003d null ? 0 : qName.hashCode();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanPointer\n  $r1 \u003d QName qName\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d 0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d QName qName\u003e\n  $i0 \u003d $r2.hashCode()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.BeanPointer",
    "methodName": "isLeaf",
    "signature": "boolean isLeaf()",
    "visibility": "public",
    "body": "{\r\n    final Object value \u003d getNode();\r\n    return value \u003d\u003d null || JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  BeanPointer\n  r1 \u003d r0.getNode()\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1.getClass()\n  $r3 \u003d JXPathIntrospector.getBeanInfo($r2)\n  $z0 \u003d $r3.isAtomic()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPointer#getNode(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.BeanPointerFactory",
    "methodName": "createNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createNodePointer(org.apache.commons.jxpath.ri.model.NodePointer,org.apache.commons.jxpath.ri.QName,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (bean \u003d\u003d null) {\r\n        return new NullPointer(parent, qName);\r\n    }\r\n    final JXPathBeanInfo bi \u003d JXPathIntrospector.getBeanInfo(bean.getClass());\r\n    return new BeanPointer(parent, qName, bean, bi);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanPointerFactory\n  NodePointer\n  QName\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d NullPointer\n  new NullPointer(r4, r5)\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getClass()\n  r2 \u003d JXPathIntrospector.getBeanInfo($r1)\n  $r3 \u003d BeanPointer\n  new BeanPointer(r4, r5, r0, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer",
    "methodName": "createPath",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createPath(org.apache.commons.jxpath.JXPathContext)",
    "visibility": "public",
    "body": "{\r\n    if (getImmediateNode() \u003d\u003d null) {\r\n        super.createPath(context);\r\n        baseValue \u003d UNINITIALIZED;\r\n        value \u003d UNINITIALIZED;\r\n    }\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyPointer\n  JXPathContext\n  $r1 \u003d r0.getImmediateNode()\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r0.createPath(r2)\n  $r3 \u003d Object UNINITIALIZED\u003e\n  Object baseValue\u003e \u003d $r3\n  $r4 \u003d Object UNINITIALIZED\u003e\n  Object value\u003e \u003d $r4\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPropertyPointer#getImmediateNode(...0)",
        "body": "{\r\n    if (value \u003d\u003d UNINITIALIZED) {\r\n        if (index \u003d\u003d WHOLE_COLLECTION) {\r\n            value \u003d ValueUtils.getValue(getBaseValue());\r\n        } else {\r\n            final PropertyDescriptor pd \u003d getPropertyDescriptor();\r\n            if (pd \u003d\u003d null) {\r\n                value \u003d null;\r\n            } else {\r\n                value \u003d ValueUtils.getValue(getBean(), pd, index);\r\n            }\r\n        }\r\n    }\r\n    return value;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer",
    "methodName": "getBaseValue",
    "signature": "java.lang.Object getBaseValue()",
    "visibility": "public",
    "body": "{\r\n    if (baseValue \u003d\u003d UNINITIALIZED) {\r\n        final PropertyDescriptor pd \u003d getPropertyDescriptor();\r\n        if (pd \u003d\u003d null) {\r\n            return null;\r\n        }\r\n        baseValue \u003d ValueUtils.getValue(getBean(), pd);\r\n    }\r\n    return baseValue;\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d $r1) → B1 | else → B4",
      "B1 : If(r4 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyPointer\n  $r2 \u003d Object baseValue\u003e\n  $r1 \u003d Object UNINITIALIZED\u003e\n  if ($r2 !\u003d $r1) goto B1 else B4\n}",
      "B1 {\n  r4 \u003d r0.getPropertyDescriptor()\n  if (r4 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r5 \u003d r0.getBean()\n  $r6 \u003d ValueUtils.getValue($r5, r4)\n  Object baseValue\u003e \u003d $r6\n}",
      "B4 {\n  $r3 \u003d Object baseValue\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPropertyPointer#getPropertyDescriptor(...0)",
        "body": "{\r\n    if (propertyDescriptor \u003d\u003d null) {\r\n        final int inx \u003d getPropertyIndex();\r\n        if (inx \u003d\u003d UNSPECIFIED_PROPERTY) {\r\n            propertyDescriptor \u003d beanInfo.getPropertyDescriptor(propertyName);\r\n        } else {\r\n            final PropertyDescriptor[] propertyDescriptors \u003d getPropertyDescriptors();\r\n            if (inx \u003e\u003d 0 \u0026\u0026 inx \u003c propertyDescriptors.length) {\r\n                propertyDescriptor \u003d propertyDescriptors[inx];\r\n            } else {\r\n                propertyDescriptor \u003d null;\r\n            }\r\n        }\r\n    }\r\n    return propertyDescriptor;\r\n}"
      },
      {
        "name": "BeanPropertyPointer#getBean(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer",
    "methodName": "getImmediateNode",
    "signature": "java.lang.Object getImmediateNode()",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d UNINITIALIZED) {\r\n        if (index \u003d\u003d WHOLE_COLLECTION) {\r\n            value \u003d ValueUtils.getValue(getBaseValue());\r\n        } else {\r\n            final PropertyDescriptor pd \u003d getPropertyDescriptor();\r\n            if (pd \u003d\u003d null) {\r\n                value \u003d null;\r\n            } else {\r\n                value \u003d ValueUtils.getValue(getBean(), pd, index);\r\n            }\r\n        }\r\n    }\r\n    return value;\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r2 !\u003d $r1) → B1 | else → B6",
      "B1 : If($i0 !\u003d -2147483648) → B2 | else → B3",
      "B3 : If(r3 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyPointer\n  $r2 \u003d Object value\u003e\n  $r1 \u003d Object UNINITIALIZED\u003e\n  if ($r2 !\u003d $r1) goto B1 else B6\n}",
      "B1 {\n  $i0 \u003d BeanPropertyPointer: int index\u003e\n  if ($i0 !\u003d -2147483648) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d r0.getBaseValue()\n  $r7 \u003d ValueUtils.getValue($r6)\n  Object value\u003e \u003d $r7\n  goto B6\n}",
      "B3 {\n  r3 \u003d r0.getPropertyDescriptor()\n  if (r3 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  Object value\u003e \u003d null\n  goto B6\n}",
      "B5 {\n  $r4 \u003d r0.getBean()\n  $i1 \u003d BeanPropertyPointer: int index\u003e\n  $r5 \u003d ValueUtils.getValue($r4, r3, $i1)\n  Object value\u003e \u003d $r5\n}",
      "B6 {\n  $r8 \u003d Object value\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPropertyPointer#getBaseValue(...0)",
        "body": "{\r\n    if (baseValue \u003d\u003d UNINITIALIZED) {\r\n        final PropertyDescriptor pd \u003d getPropertyDescriptor();\r\n        if (pd \u003d\u003d null) {\r\n            return null;\r\n        }\r\n        baseValue \u003d ValueUtils.getValue(getBean(), pd);\r\n    }\r\n    return baseValue;\r\n}"
      },
      {
        "name": "BeanPropertyPointer#getPropertyDescriptor(...0)",
        "body": "{\r\n    if (propertyDescriptor \u003d\u003d null) {\r\n        final int inx \u003d getPropertyIndex();\r\n        if (inx \u003d\u003d UNSPECIFIED_PROPERTY) {\r\n            propertyDescriptor \u003d beanInfo.getPropertyDescriptor(propertyName);\r\n        } else {\r\n            final PropertyDescriptor[] propertyDescriptors \u003d getPropertyDescriptors();\r\n            if (inx \u003e\u003d 0 \u0026\u0026 inx \u003c propertyDescriptors.length) {\r\n                propertyDescriptor \u003d propertyDescriptors[inx];\r\n            } else {\r\n                propertyDescriptor \u003d null;\r\n            }\r\n        }\r\n    }\r\n    return propertyDescriptor;\r\n}"
      },
      {
        "name": "BeanPropertyPointer#getBean(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer",
    "methodName": "getLength",
    "signature": "int getLength()",
    "visibility": "public",
    "body": "{\r\n    final PropertyDescriptor pd \u003d getPropertyDescriptor();\r\n    if (pd \u003d\u003d null) {\r\n        return 1;\r\n    }\r\n    if (pd instanceof IndexedPropertyDescriptor) {\r\n        return ValueUtils.getIndexedPropertyLength(getBean(), (IndexedPropertyDescriptor) pd);\r\n    }\r\n    final int hint \u003d ValueUtils.getCollectionHint(pd.getPropertyType());\r\n    if (hint \u003d\u003d -1) {\r\n        return 1;\r\n    }\r\n    return super.getLength();\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If(i0 !\u003d $i4) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyPointer\n  r1 \u003d r0.getPropertyDescriptor()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d IndexedPropertyDescriptor\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d r0.getBean()\n  $r3 \u003d IndexedPropertyDescriptor) r1\n  $i2 \u003d ValueUtils.getIndexedPropertyLength($r4, $r3)\n  return\n}",
      "B4 {\n  $r2 \u003d r1.getPropertyType()\n  i0 \u003d ValueUtils.getCollectionHint($r2)\n  $i4 \u003d (int) -1\n  if (i0 !\u003d $i4) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $i1 \u003d r0.getLength()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPropertyPointer#getPropertyDescriptor(...0)",
        "body": "{\r\n    if (propertyDescriptor \u003d\u003d null) {\r\n        final int inx \u003d getPropertyIndex();\r\n        if (inx \u003d\u003d UNSPECIFIED_PROPERTY) {\r\n            propertyDescriptor \u003d beanInfo.getPropertyDescriptor(propertyName);\r\n        } else {\r\n            final PropertyDescriptor[] propertyDescriptors \u003d getPropertyDescriptors();\r\n            if (inx \u003e\u003d 0 \u0026\u0026 inx \u003c propertyDescriptors.length) {\r\n                propertyDescriptor \u003d propertyDescriptors[inx];\r\n            } else {\r\n                propertyDescriptor \u003d null;\r\n            }\r\n        }\r\n    }\r\n    return propertyDescriptor;\r\n}"
      },
      {
        "name": "BeanPropertyPointer#getBean(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer",
    "methodName": "getPropertyCount",
    "signature": "int getPropertyCount()",
    "visibility": "public",
    "body": "{\r\n    if (beanInfo.isAtomic()) {\r\n        return 0;\r\n    }\r\n    return getPropertyDescriptors().length;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyPointer\n  $r1 \u003d JXPathBeanInfo beanInfo\u003e\n  $z0 \u003d $r1.isAtomic()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d r0.getPropertyDescriptors()\n  $i0 \u003d lengthof $r2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPropertyPointer#getPropertyDescriptors(...0)",
        "body": "{\r\n    if (propertyDescriptors \u003d\u003d null) {\r\n        propertyDescriptors \u003d beanInfo.getPropertyDescriptors();\r\n    }\r\n    return propertyDescriptors;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer",
    "methodName": "getPropertyName",
    "signature": "java.lang.String getPropertyName()",
    "visibility": "public",
    "body": "{\r\n    if (propertyName \u003d\u003d null) {\r\n        final PropertyDescriptor pd \u003d getPropertyDescriptor();\r\n        if (pd !\u003d null) {\r\n            propertyName \u003d pd.getName();\r\n        }\r\n    }\r\n    return propertyName !\u003d null ? propertyName : \"*\";\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B3",
      "B1 : If(r2 \u003d\u003d null) → B2 | else → B3",
      "B3 : If($r4 \u003d\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyPointer\n  $r1 \u003d String propertyName\u003e\n  if ($r1 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  r2 \u003d r0.getPropertyDescriptor()\n  if (r2 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d r2.getName()\n  String propertyName\u003e \u003d $r3\n}",
      "B3 {\n  $r4 \u003d String propertyName\u003e\n  if ($r4 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r5 \u003d String propertyName\u003e\n  goto B6\n}",
      "B5 {\n  $r5 \u003d \"*\"\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPropertyPointer#getPropertyDescriptor(...0)",
        "body": "{\r\n    if (propertyDescriptor \u003d\u003d null) {\r\n        final int inx \u003d getPropertyIndex();\r\n        if (inx \u003d\u003d UNSPECIFIED_PROPERTY) {\r\n            propertyDescriptor \u003d beanInfo.getPropertyDescriptor(propertyName);\r\n        } else {\r\n            final PropertyDescriptor[] propertyDescriptors \u003d getPropertyDescriptors();\r\n            if (inx \u003e\u003d 0 \u0026\u0026 inx \u003c propertyDescriptors.length) {\r\n                propertyDescriptor \u003d propertyDescriptors[inx];\r\n            } else {\r\n                propertyDescriptor \u003d null;\r\n            }\r\n        }\r\n    }\r\n    return propertyDescriptor;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer",
    "methodName": "getPropertyNames",
    "signature": "java.lang.String[] getPropertyNames()",
    "visibility": "public",
    "body": "{\r\n    if (names \u003d\u003d null) {\r\n        final PropertyDescriptor[] pds \u003d getPropertyDescriptors();\r\n        names \u003d new String[pds.length];\r\n        for (int i \u003d 0; i \u003c names.length; i++) {\r\n            names[i] \u003d pds[i].getName();\r\n        }\r\n    }\r\n    return names;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B4",
      "B2 : If(i2 \u003e\u003d $i1) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyPointer\n  $r1 \u003d String[] names\u003e\n  if ($r1 !\u003d null) goto B1 else B4\n}",
      "B1 {\n  r3 \u003d r0.getPropertyDescriptors()\n  $i0 \u003d lengthof r3\n  $r4 \u003d String)[$i0]\n  String[] names\u003e \u003d $r4\n  i2 \u003d 0\n}",
      "B2 {\n  $r5 \u003d String[] names\u003e\n  $i1 \u003d lengthof $r5\n  if (i2 \u003e\u003d $i1) goto B3 else B4\n}",
      "B3 {\n  $r7 \u003d String[] names\u003e\n  $r6 \u003d r3[i2]\n  $r8 \u003d $r6.getName()\n  $r7[i2] \u003d $r8\n  i2 \u003d i2 + 1\n  goto B2\n}",
      "B4 {\n  $r2 \u003d String[] names\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPropertyPointer#getPropertyDescriptors(...0)",
        "body": "{\r\n    if (propertyDescriptors \u003d\u003d null) {\r\n        propertyDescriptors \u003d beanInfo.getPropertyDescriptors();\r\n    }\r\n    return propertyDescriptors;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer",
    "methodName": "isCollection",
    "signature": "boolean isCollection()",
    "visibility": "public",
    "body": "{\r\n    final PropertyDescriptor pd \u003d getPropertyDescriptor();\r\n    if (pd \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (pd instanceof IndexedPropertyDescriptor) {\r\n        return true;\r\n    }\r\n    final int hint \u003d ValueUtils.getCollectionHint(pd.getPropertyType());\r\n    if (hint \u003d\u003d -1) {\r\n        return false;\r\n    }\r\n    if (hint \u003d\u003d 1) {\r\n        return true;\r\n    }\r\n    final Object value \u003d getBaseValue();\r\n    return value !\u003d null \u0026\u0026 ValueUtils.isCollection(value);\r\n}",
    "nodes": 13,
    "edges": 14,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If(i0 !\u003d $i2) → B5 | else → B6",
      "B6 : If(i0 !\u003d 1) → B7 | else → B8",
      "B8 : If(r3 \u003d\u003d null) → B9 | else → B11",
      "B9 : If($z1 \u003d\u003d false) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyPointer\n  r1 \u003d r0.getPropertyDescriptor()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d IndexedPropertyDescriptor\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r2 \u003d r1.getPropertyType()\n  i0 \u003d ValueUtils.getCollectionHint($r2)\n  $i2 \u003d (int) -1\n  if (i0 !\u003d $i2) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  if (i0 !\u003d 1) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  r3 \u003d r0.getBaseValue()\n  if (r3 \u003d\u003d null) goto B9 else B11\n}",
      "B9 {\n  $z1 \u003d ValueUtils.isCollection(r3)\n  if ($z1 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  $z2 \u003d 1\n  goto B12\n}",
      "B11 {\n  $z2 \u003d 0\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPropertyPointer#getPropertyDescriptor(...0)",
        "body": "{\r\n    if (propertyDescriptor \u003d\u003d null) {\r\n        final int inx \u003d getPropertyIndex();\r\n        if (inx \u003d\u003d UNSPECIFIED_PROPERTY) {\r\n            propertyDescriptor \u003d beanInfo.getPropertyDescriptor(propertyName);\r\n        } else {\r\n            final PropertyDescriptor[] propertyDescriptors \u003d getPropertyDescriptors();\r\n            if (inx \u003e\u003d 0 \u0026\u0026 inx \u003c propertyDescriptors.length) {\r\n                propertyDescriptor \u003d propertyDescriptors[inx];\r\n            } else {\r\n                propertyDescriptor \u003d null;\r\n            }\r\n        }\r\n    }\r\n    return propertyDescriptor;\r\n}"
      },
      {
        "name": "BeanPropertyPointer#getBaseValue(...0)",
        "body": "{\r\n    if (baseValue \u003d\u003d UNINITIALIZED) {\r\n        final PropertyDescriptor pd \u003d getPropertyDescriptor();\r\n        if (pd \u003d\u003d null) {\r\n            return null;\r\n        }\r\n        baseValue \u003d ValueUtils.getValue(getBean(), pd);\r\n    }\r\n    return baseValue;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer",
    "methodName": "remove",
    "signature": "void remove()",
    "visibility": "public",
    "body": "{\r\n    if (index \u003d\u003d WHOLE_COLLECTION) {\r\n        setValue(null);\r\n    } else if (isCollection()) {\r\n        final Object o \u003d getBaseValue();\r\n        final Object collection \u003d ValueUtils.remove(getBaseValue(), index);\r\n        if (collection !\u003d o) {\r\n            ValueUtils.setValue(getBean(), getPropertyDescriptor(), collection);\r\n        }\r\n    } else if (index \u003d\u003d 0) {\r\n        index \u003d WHOLE_COLLECTION;\r\n        setValue(null);\r\n    }\r\n}",
    "nodes": 9,
    "edges": 12,
    "cc": 5,
    "flowSummary": [
      "B0 : If($i0 !\u003d -2147483648) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B6",
      "B3 : If(r3 \u003d\u003d r1) → B4 | else → B5",
      "B6 : If($i1 !\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyPointer\n  $i0 \u003d BeanPropertyPointer: int index\u003e\n  if ($i0 !\u003d -2147483648) goto B1 else B2\n}",
      "B1 {\n  r0.setValue(null)\n  goto B8\n}",
      "B2 {\n  $z0 \u003d r0.isCollection()\n  if ($z0 \u003d\u003d false) goto B3 else B6\n}",
      "B3 {\n  r1 \u003d r0.getBaseValue()\n  $r2 \u003d r0.getBaseValue()\n  $i2 \u003d BeanPropertyPointer: int index\u003e\n  r3 \u003d ValueUtils.remove($r2, $i2)\n  if (r3 \u003d\u003d r1) goto B4 else B5\n}",
      "B4 {\n  $r5 \u003d r0.getBean()\n  $r4 \u003d r0.getPropertyDescriptor()\n  ValueUtils.setValue($r5, $r4, r3)\n}",
      "B5 {\n  goto B8\n}",
      "B6 {\n  $i1 \u003d BeanPropertyPointer: int index\u003e\n  if ($i1 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  BeanPropertyPointer: int index\u003e \u003d -2147483648\n  r0.setValue(null)\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPropertyPointer#setValue(...1)",
        "body": "{\r\n    final PropertyDescriptor pd \u003d getPropertyDescriptor();\r\n    if (pd \u003d\u003d null) {\r\n        throw new JXPathInvalidAccessException(\"Cannot set property: \" + asPath() + \" - no such property\");\r\n    }\r\n    if (index \u003d\u003d WHOLE_COLLECTION) {\r\n        ValueUtils.setValue(getBean(), pd, value);\r\n    } else {\r\n        ValueUtils.setValue(getBean(), pd, index, value);\r\n    }\r\n    this.value \u003d value;\r\n}"
      },
      {
        "name": "BeanPropertyPointer#getBaseValue(...0)",
        "body": "{\r\n    if (baseValue \u003d\u003d UNINITIALIZED) {\r\n        final PropertyDescriptor pd \u003d getPropertyDescriptor();\r\n        if (pd \u003d\u003d null) {\r\n            return null;\r\n        }\r\n        baseValue \u003d ValueUtils.getValue(getBean(), pd);\r\n    }\r\n    return baseValue;\r\n}"
      },
      {
        "name": "BeanPropertyPointer#getPropertyDescriptor(...0)",
        "body": "{\r\n    if (propertyDescriptor \u003d\u003d null) {\r\n        final int inx \u003d getPropertyIndex();\r\n        if (inx \u003d\u003d UNSPECIFIED_PROPERTY) {\r\n            propertyDescriptor \u003d beanInfo.getPropertyDescriptor(propertyName);\r\n        } else {\r\n            final PropertyDescriptor[] propertyDescriptors \u003d getPropertyDescriptors();\r\n            if (inx \u003e\u003d 0 \u0026\u0026 inx \u003c propertyDescriptors.length) {\r\n                propertyDescriptor \u003d propertyDescriptors[inx];\r\n            } else {\r\n                propertyDescriptor \u003d null;\r\n            }\r\n        }\r\n    }\r\n    return propertyDescriptor;\r\n}"
      },
      {
        "name": "BeanPropertyPointer#getBean(...0)",
        "body": "(source not found)"
      },
      {
        "name": "BeanPropertyPointer#isCollection(...0)",
        "body": "{\r\n    final PropertyDescriptor pd \u003d getPropertyDescriptor();\r\n    if (pd \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (pd instanceof IndexedPropertyDescriptor) {\r\n        return true;\r\n    }\r\n    final int hint \u003d ValueUtils.getCollectionHint(pd.getPropertyType());\r\n    if (hint \u003d\u003d -1) {\r\n        return false;\r\n    }\r\n    if (hint \u003d\u003d 1) {\r\n        return true;\r\n    }\r\n    final Object value \u003d getBaseValue();\r\n    return value !\u003d null \u0026\u0026 ValueUtils.isCollection(value);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer",
    "methodName": "setIndex",
    "signature": "void setIndex(int)",
    "visibility": "public",
    "body": "{\r\n    if (this.index \u003d\u003d index) {\r\n        return;\r\n    }\r\n    // When dealing with a scalar, index \u003d\u003d 0 is equivalent to\r\n    // WHOLE_COLLECTION, so do not change it.\r\n    if (this.index !\u003d WHOLE_COLLECTION || index !\u003d 0 || isCollection()) {\r\n        super.setIndex(index);\r\n        value \u003d UNINITIALIZED;\r\n    }\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i1 !\u003d i0) → B1 | else → B2",
      "B2 : If($i2 !\u003d -2147483648) → B3 | else → B5",
      "B3 : If(i0 !\u003d 0) → B4 | else → B5",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyPointer\n  i0 :\u003d @parameter0: int\n  $i1 \u003d BeanPropertyPointer: int index\u003e\n  if ($i1 !\u003d i0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i2 \u003d BeanPropertyPointer: int index\u003e\n  if ($i2 !\u003d -2147483648) goto B3 else B5\n}",
      "B3 {\n  if (i0 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $z0 \u003d r0.isCollection()\n  if ($z0 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  r0.setIndex(i0)\n  $r1 \u003d Object UNINITIALIZED\u003e\n  Object value\u003e \u003d $r1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPropertyPointer#isCollection(...0)",
        "body": "{\r\n    final PropertyDescriptor pd \u003d getPropertyDescriptor();\r\n    if (pd \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (pd instanceof IndexedPropertyDescriptor) {\r\n        return true;\r\n    }\r\n    final int hint \u003d ValueUtils.getCollectionHint(pd.getPropertyType());\r\n    if (hint \u003d\u003d -1) {\r\n        return false;\r\n    }\r\n    if (hint \u003d\u003d 1) {\r\n        return true;\r\n    }\r\n    final Object value \u003d getBaseValue();\r\n    return value !\u003d null \u0026\u0026 ValueUtils.isCollection(value);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer",
    "methodName": "setPropertyIndex",
    "signature": "void setPropertyIndex(int)",
    "visibility": "public",
    "body": "{\r\n    if (propertyIndex !\u003d index) {\r\n        super.setPropertyIndex(index);\r\n        propertyName \u003d null;\r\n        propertyDescriptor \u003d null;\r\n        baseValue \u003d UNINITIALIZED;\r\n        value \u003d UNINITIALIZED;\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003d\u003d i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyPointer\n  i0 :\u003d @parameter0: int\n  $i1 \u003d BeanPropertyPointer: int propertyIndex\u003e\n  if ($i1 \u003d\u003d i0) goto B1 else B2\n}",
      "B1 {\n  r0.setPropertyIndex(i0)\n  String propertyName\u003e \u003d null\n  PropertyDescriptor propertyDescriptor\u003e \u003d null\n  $r1 \u003d Object UNINITIALIZED\u003e\n  Object baseValue\u003e \u003d $r1\n  $r2 \u003d Object UNINITIALIZED\u003e\n  Object value\u003e \u003d $r2\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer",
    "methodName": "setValue",
    "signature": "void setValue(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final PropertyDescriptor pd \u003d getPropertyDescriptor();\r\n    if (pd \u003d\u003d null) {\r\n        throw new JXPathInvalidAccessException(\"Cannot set property: \" + asPath() + \" - no such property\");\r\n    }\r\n    if (index \u003d\u003d WHOLE_COLLECTION) {\r\n        ValueUtils.setValue(getBean(), pd, value);\r\n    } else {\r\n        ValueUtils.setValue(getBean(), pd, index, value);\r\n    }\r\n    this.value \u003d value;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d -2147483648) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  BeanPropertyPointer\n  Object\n  r1 \u003d r0.getPropertyDescriptor()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d JXPathInvalidAccessException\n  $r6 \u003d StringBuilder\n  new StringBuilder()\n  $r8 \u003d $r6.append(\"Cannot set property: \")\n  $r7 \u003d r0.asPath()\n  $r9 \u003d $r8.append($r7)\n  $r10 \u003d $r9.append(\" - no such property\")\n  $r11 \u003d $r10.toString()\n  new JXPathInvalidAccessException($r11)\n  throw $r5\n}",
      "B2 {\n  $i0 \u003d BeanPropertyPointer: int index\u003e\n  if ($i0 !\u003d -2147483648) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d r0.getBean()\n  ValueUtils.setValue($r4, r1, r2)\n  goto B5\n}",
      "B4 {\n  $r3 \u003d r0.getBean()\n  $i1 \u003d BeanPropertyPointer: int index\u003e\n  ValueUtils.setValue($r3, r1, $i1, r2)\n}",
      "B5 {\n  Object value\u003e \u003d r2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BeanPropertyPointer#getPropertyDescriptor(...0)",
        "body": "{\r\n    if (propertyDescriptor \u003d\u003d null) {\r\n        final int inx \u003d getPropertyIndex();\r\n        if (inx \u003d\u003d UNSPECIFIED_PROPERTY) {\r\n            propertyDescriptor \u003d beanInfo.getPropertyDescriptor(propertyName);\r\n        } else {\r\n            final PropertyDescriptor[] propertyDescriptors \u003d getPropertyDescriptors();\r\n            if (inx \u003e\u003d 0 \u0026\u0026 inx \u003c propertyDescriptors.length) {\r\n                propertyDescriptor \u003d propertyDescriptors[inx];\r\n            } else {\r\n                propertyDescriptor \u003d null;\r\n            }\r\n        }\r\n    }\r\n    return propertyDescriptor;\r\n}"
      },
      {
        "name": "BeanPropertyPointer#asPath(...0)",
        "body": "(source not found)"
      },
      {
        "name": "BeanPropertyPointer#getBean(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.CollectionPointer",
    "methodName": "asPath",
    "signature": "java.lang.String asPath()",
    "visibility": "public",
    "body": "{\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    final NodePointer parent \u003d getImmediateParentPointer();\r\n    if (parent !\u003d null) {\r\n        buffer.append(parent.asPath());\r\n        if (index !\u003d WHOLE_COLLECTION) {\r\n            // Address the list[1][2] case\r\n            if (parent.getIndex() !\u003d WHOLE_COLLECTION) {\r\n                buffer.append(\"/.\");\r\n            }\r\n            buffer.append(\"[\").append(index + 1).append(\u0027]\u0027);\r\n        }\r\n    } else if (index !\u003d WHOLE_COLLECTION) {\r\n        buffer.append(\"/.[\").append(index + 1).append(\u0027]\u0027);\r\n    } else {\r\n        buffer.append(\"/\");\r\n    }\r\n    return buffer.toString();\r\n}",
    "nodes": 9,
    "edges": 12,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B5",
      "B1 : If($i3 \u003d\u003d -2147483648) → B2 | else → B8",
      "B2 : If($i4 \u003d\u003d -2147483648) → B3 | else → B4",
      "B5 : If($i0 \u003d\u003d -2147483648) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  CollectionPointer\n  $r0 \u003d StringBuilder\n  new StringBuilder()\n  r2 \u003d r1.getImmediateParentPointer()\n  if (r2 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  $r5 \u003d r2.asPath()\n  $r0.append($r5)\n  $i3 \u003d CollectionPointer: int index\u003e\n  if ($i3 \u003d\u003d -2147483648) goto B2 else B8\n}",
      "B2 {\n  $i4 \u003d r2.getIndex()\n  if ($i4 \u003d\u003d -2147483648) goto B3 else B4\n}",
      "B3 {\n  $r0.append(\"/.\")\n}",
      "B4 {\n  $r6 \u003d $r0.append(\"\")\n  $i5 \u003d CollectionPointer: int index\u003e\n  $i6 \u003d $i5 + 1\n  $r7 \u003d $r6.append($i6)\n  $r7.append(93)\n  goto B8\n}",
      "B5 {\n  $i0 \u003d CollectionPointer: int index\u003e\n  if ($i0 \u003d\u003d -2147483648) goto B6 else B7\n}",
      "B6 {\n  $r3 \u003d $r0.append(\"/.\")\n  $i1 \u003d CollectionPointer: int index\u003e\n  $i2 \u003d $i1 + 1\n  $r4 \u003d $r3.append($i2)\n  $r4.append(93)\n  goto B8\n}",
      "B7 {\n  $r0.append(\"/\")\n}",
      "B8 {\n  $r8 \u003d $r0.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionPointer#getImmediateParentPointer(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.CollectionPointer",
    "methodName": "attributeIterator",
    "signature": "org.apache.commons.jxpath.ri.model.NodeIterator attributeIterator(org.apache.commons.jxpath.ri.QName)",
    "visibility": "public",
    "body": "{\r\n    return index \u003d\u003d WHOLE_COLLECTION ? new CollectionAttributeNodeIterator(this, qName) : getValuePointer().attributeIterator(qName);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d -2147483648) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CollectionPointer\n  QName\n  $i0 \u003d CollectionPointer: int index\u003e\n  if ($i0 !\u003d -2147483648) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d CollectionAttributeNodeIterator\n  $r3 \u003d $r4\n  new CollectionAttributeNodeIterator(r0, r1)\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r0.getValuePointer()\n  $r3 \u003d $r2.attributeIterator(r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionPointer#getValuePointer(...0)",
        "body": "{\r\n    if (valuePointer \u003d\u003d null) {\r\n        if (index \u003d\u003d WHOLE_COLLECTION) {\r\n            valuePointer \u003d this;\r\n        } else {\r\n            final Object value \u003d getImmediateNode();\r\n            valuePointer \u003d newChildNodePointer(this, getName(), value);\r\n        }\r\n    }\r\n    return valuePointer;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.CollectionPointer",
    "methodName": "childIterator",
    "signature": "org.apache.commons.jxpath.ri.model.NodeIterator childIterator(org.apache.commons.jxpath.ri.compiler.NodeTest,boolean,org.apache.commons.jxpath.ri.model.NodePointer)",
    "visibility": "public",
    "body": "{\r\n    if (index \u003d\u003d WHOLE_COLLECTION) {\r\n        return new CollectionChildNodeIterator(this, test, reverse, startWith);\r\n    }\r\n    return getValuePointer().childIterator(test, reverse, startWith);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d -2147483648) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CollectionPointer\n  NodeTest\n  z0 :\u003d @parameter1: boolean\n  NodePointer\n  $i0 \u003d CollectionPointer: int index\u003e\n  if ($i0 !\u003d -2147483648) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d CollectionChildNodeIterator\n  new CollectionChildNodeIterator(r0, r1, z0, r2)\n  return\n}",
      "B2 {\n  $r3 \u003d r0.getValuePointer()\n  $r4 \u003d $r3.childIterator(r1, z0, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionPointer#getValuePointer(...0)",
        "body": "{\r\n    if (valuePointer \u003d\u003d null) {\r\n        if (index \u003d\u003d WHOLE_COLLECTION) {\r\n            valuePointer \u003d this;\r\n        } else {\r\n            final Object value \u003d getImmediateNode();\r\n            valuePointer \u003d newChildNodePointer(this, getName(), value);\r\n        }\r\n    }\r\n    return valuePointer;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.CollectionPointer",
    "methodName": "createPath",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createPath(org.apache.commons.jxpath.JXPathContext)",
    "visibility": "public",
    "body": "{\r\n    if (ValueUtils.getLength(getBaseValue()) \u003c\u003d index) {\r\n        collection \u003d ValueUtils.expandCollection(getNode(), index + 1);\r\n    }\r\n    return this;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003e $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CollectionPointer\n  JXPathContext\n  $r1 \u003d r0.getBaseValue()\n  $i1 \u003d ValueUtils.getLength($r1)\n  $i0 \u003d CollectionPointer: int index\u003e\n  if ($i1 \u003e $i0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0.getNode()\n  $i2 \u003d CollectionPointer: int index\u003e\n  $i3 \u003d $i2 + 1\n  $r3 \u003d ValueUtils.expandCollection($r2, $i3)\n  Object collection\u003e \u003d $r3\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionPointer#getBaseValue(...0)",
        "body": "{\r\n    return collection;\r\n}"
      },
      {
        "name": "CollectionPointer#getNode(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.CollectionPointer",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (!(object instanceof CollectionPointer)) {\r\n        return false;\r\n    }\r\n    final CollectionPointer other \u003d (CollectionPointer) object;\r\n    return collection \u003d\u003d other.collection \u0026\u0026 index \u003d\u003d other.index;\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($r4 !\u003d $r3) → B5 | else → B7",
      "B5 : If($i1 !\u003d $i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  CollectionPointer\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d CollectionPointer\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d CollectionPointer) r0\n  $r4 \u003d Object collection\u003e\n  $r3 \u003d Object collection\u003e\n  if ($r4 !\u003d $r3) goto B5 else B7\n}",
      "B5 {\n  $i1 \u003d CollectionPointer: int index\u003e\n  $i0 \u003d CollectionPointer: int index\u003e\n  if ($i1 !\u003d $i0) goto B6 else B7\n}",
      "B6 {\n  $z1 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z1 \u003d 0\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.CollectionPointer",
    "methodName": "getImmediateNode",
    "signature": "java.lang.Object getImmediateNode()",
    "visibility": "public",
    "body": "{\r\n    return index \u003d\u003d WHOLE_COLLECTION ? ValueUtils.getValue(collection) : ValueUtils.getValue(collection, index);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d -2147483648) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CollectionPointer\n  $i0 \u003d CollectionPointer: int index\u003e\n  if ($i0 !\u003d -2147483648) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Object collection\u003e\n  $r3 \u003d ValueUtils.getValue($r2)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d Object collection\u003e\n  $i1 \u003d CollectionPointer: int index\u003e\n  $r3 \u003d ValueUtils.getValue($r1, $i1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.CollectionPointer",
    "methodName": "getValuePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer getValuePointer()",
    "visibility": "public",
    "body": "{\r\n    if (valuePointer \u003d\u003d null) {\r\n        if (index \u003d\u003d WHOLE_COLLECTION) {\r\n            valuePointer \u003d this;\r\n        } else {\r\n            final Object value \u003d getImmediateNode();\r\n            valuePointer \u003d newChildNodePointer(this, getName(), value);\r\n        }\r\n    }\r\n    return valuePointer;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B4",
      "B1 : If($i0 !\u003d -2147483648) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CollectionPointer\n  $r1 \u003d NodePointer valuePointer\u003e\n  if ($r1 !\u003d null) goto B1 else B4\n}",
      "B1 {\n  $i0 \u003d CollectionPointer: int index\u003e\n  if ($i0 !\u003d -2147483648) goto B2 else B3\n}",
      "B2 {\n  NodePointer valuePointer\u003e \u003d r0\n  goto B4\n}",
      "B3 {\n  r2 \u003d r0.getImmediateNode()\n  $r3 \u003d r0.getName()\n  $r4 \u003d CollectionPointer.newChildNodePointer(r0, $r3, r2)\n  NodePointer valuePointer\u003e \u003d $r4\n}",
      "B4 {\n  $r5 \u003d NodePointer valuePointer\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionPointer#newChildNodePointer(...3)",
        "body": "(source not found)"
      },
      {
        "name": "CollectionPointer#getImmediateNode(...0)",
        "body": "{\r\n    return index \u003d\u003d WHOLE_COLLECTION ? ValueUtils.getValue(collection) : ValueUtils.getValue(collection, index);\r\n}"
      },
      {
        "name": "CollectionPointer#getName(...0)",
        "body": "{\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.CollectionPointer",
    "methodName": "isContainer",
    "signature": "boolean isContainer()",
    "visibility": "public",
    "body": "{\r\n    return index !\u003d WHOLE_COLLECTION;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d -2147483648) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CollectionPointer\n  $i0 \u003d CollectionPointer: int index\u003e\n  if ($i0 \u003d\u003d -2147483648) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.CollectionPointer",
    "methodName": "isLeaf",
    "signature": "boolean isLeaf()",
    "visibility": "public",
    "body": "{\r\n    final Object value \u003d getNode();\r\n    return value \u003d\u003d null || JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CollectionPointer\n  r1 \u003d r0.getNode()\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1.getClass()\n  $r3 \u003d JXPathIntrospector.getBeanInfo($r2)\n  $z0 \u003d $r3.isAtomic()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionPointer#getNode(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.CollectionPointer",
    "methodName": "namespaceIterator",
    "signature": "org.apache.commons.jxpath.ri.model.NodeIterator namespaceIterator()",
    "visibility": "public",
    "body": "{\r\n    return index \u003d\u003d WHOLE_COLLECTION ? null : getValuePointer().namespaceIterator();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d -2147483648) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CollectionPointer\n  $i0 \u003d CollectionPointer: int index\u003e\n  if ($i0 !\u003d -2147483648) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d null\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0.getValuePointer()\n  $r2 \u003d $r1.namespaceIterator()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionPointer#getValuePointer(...0)",
        "body": "{\r\n    if (valuePointer \u003d\u003d null) {\r\n        if (index \u003d\u003d WHOLE_COLLECTION) {\r\n            valuePointer \u003d this;\r\n        } else {\r\n            final Object value \u003d getImmediateNode();\r\n            valuePointer \u003d newChildNodePointer(this, getName(), value);\r\n        }\r\n    }\r\n    return valuePointer;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.CollectionPointer",
    "methodName": "namespacePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer namespacePointer(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return index \u003d\u003d WHOLE_COLLECTION ? null : getValuePointer().namespacePointer(namespace);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d -2147483648) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CollectionPointer\n  String\n  $i0 \u003d CollectionPointer: int index\u003e\n  if ($i0 !\u003d -2147483648) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r0.getValuePointer()\n  $r3 \u003d $r2.namespacePointer(r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionPointer#getValuePointer(...0)",
        "body": "{\r\n    if (valuePointer \u003d\u003d null) {\r\n        if (index \u003d\u003d WHOLE_COLLECTION) {\r\n            valuePointer \u003d this;\r\n        } else {\r\n            final Object value \u003d getImmediateNode();\r\n            valuePointer \u003d newChildNodePointer(this, getName(), value);\r\n        }\r\n    }\r\n    return valuePointer;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.CollectionPointer",
    "methodName": "setValue",
    "signature": "void setValue(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (index \u003d\u003d WHOLE_COLLECTION) {\r\n        parent.setValue(value);\r\n    } else {\r\n        ValueUtils.setValue(collection, index, value);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d -2147483648) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CollectionPointer\n  Object\n  $i0 \u003d CollectionPointer: int index\u003e\n  if ($i0 !\u003d -2147483648) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d NodePointer parent\u003e\n  $r3.setValue(r1)\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Object collection\u003e\n  $i1 \u003d CollectionPointer: int index\u003e\n  ValueUtils.setValue($r2, $i1, r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.CollectionPointer",
    "methodName": "testNode",
    "signature": "boolean testNode(org.apache.commons.jxpath.ri.compiler.NodeTest)",
    "visibility": "public",
    "body": "{\r\n    if (index \u003d\u003d WHOLE_COLLECTION) {\r\n        if (test \u003d\u003d null) {\r\n            return true;\r\n        }\r\n        if (test instanceof NodeNameTest) {\r\n            return false;\r\n        }\r\n        return test instanceof NodeTypeTest \u0026\u0026 ((NodeTypeTest) test).getNodeType() \u003d\u003d Compiler.NODE_TYPE_NODE;\r\n    }\r\n    return getValuePointer().testNode(test);\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 !\u003d -2147483648) → B1 | else → B10",
      "B1 : If(r1 !\u003d null) → B2 | else → B3",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B5",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B8",
      "B6 : If($i1 !\u003d 1) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  CollectionPointer\n  NodeTest\n  $i0 \u003d CollectionPointer: int index\u003e\n  if ($i0 !\u003d -2147483648) goto B1 else B10\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $z1 \u003d NodeNameTest\n  if ($z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $z2 \u003d NodeTypeTest\n  if ($z2 \u003d\u003d false) goto B6 else B8\n}",
      "B6 {\n  $r3 \u003d NodeTypeTest) r1\n  $i1 \u003d $r3.getNodeType()\n  if ($i1 !\u003d 1) goto B7 else B8\n}",
      "B7 {\n  $z3 \u003d 1\n  goto B9\n}",
      "B8 {\n  $z3 \u003d 0\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $r2 \u003d r0.getValuePointer()\n  $z0 \u003d $r2.testNode(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B10",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionPointer#getValuePointer(...0)",
        "body": "{\r\n    if (valuePointer \u003d\u003d null) {\r\n        if (index \u003d\u003d WHOLE_COLLECTION) {\r\n            valuePointer \u003d this;\r\n        } else {\r\n            final Object value \u003d getImmediateNode();\r\n            valuePointer \u003d newChildNodePointer(this, getName(), value);\r\n        }\r\n    }\r\n    return valuePointer;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.CollectionPointerFactory",
    "methodName": "createNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createNodePointer(org.apache.commons.jxpath.ri.model.NodePointer,org.apache.commons.jxpath.ri.QName,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return ValueUtils.isCollection(bean) ? new CollectionPointer(parent, bean) : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CollectionPointerFactory\n  NodePointer\n  QName\n  Object\n  $z0 \u003d ValueUtils.isCollection(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d CollectionPointer\n  new CollectionPointer(r1, r0)\n  goto B3\n}",
      "B2 {\n  $r4 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.CollectionPointerFactory",
    "methodName": "createNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createNodePointer(org.apache.commons.jxpath.ri.QName,java.lang.Object,java.util.Locale)",
    "visibility": "public",
    "body": "{\r\n    return ValueUtils.isCollection(bean) ? new CollectionPointer(bean, locale) : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CollectionPointerFactory\n  QName\n  Object\n  Locale\n  $z0 \u003d ValueUtils.isCollection(r0)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d CollectionPointer\n  new CollectionPointer(r0, r1)\n  goto B3\n}",
      "B2 {\n  $r4 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.LangAttributePointer",
    "methodName": "asPath",
    "signature": "java.lang.String asPath()",
    "visibility": "public",
    "body": "{\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    if (parent !\u003d null) {\r\n        buffer.append(parent.asPath());\r\n        if (buffer.length() \u003d\u003d 0 || buffer.charAt(buffer.length() - 1) !\u003d \u0027/\u0027) {\r\n            buffer.append(\u0027/\u0027);\r\n        }\r\n    }\r\n    buffer.append(\"@xml:lang\");\r\n    return buffer.toString();\r\n}",
    "nodes": 5,
    "edges": 7,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B4",
      "B1 : If($i0 \u003d\u003d false) → B2 | else → B3",
      "B2 : If($i4 \u003d\u003d 47) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  LangAttributePointer\n  $r6 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d NodePointer parent\u003e\n  if ($r2 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r3 \u003d NodePointer parent\u003e\n  $r4 \u003d $r3.asPath()\n  $r6.append($r4)\n  $i0 \u003d $r6.length()\n  if ($i0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d $r6.length()\n  $i2 \u003d $i1 - 1\n  $c3 \u003d $r6.charAt($i2)\n  $i4 \u003d (int) $c3\n  if ($i4 \u003d\u003d 47) goto B3 else B4\n}",
      "B3 {\n  $r6.append(47)\n}",
      "B4 {\n  $r6.append(\"@xml:lang\")\n  $r5 \u003d $r6.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.NullElementPointer",
    "methodName": "asPath",
    "signature": "java.lang.String asPath()",
    "visibility": "public",
    "body": "{\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    final NodePointer parent \u003d getImmediateParentPointer();\r\n    if (parent !\u003d null) {\r\n        buffer.append(parent.asPath());\r\n    }\r\n    if (index !\u003d WHOLE_COLLECTION) {\r\n        // Address the list[1][2] case\r\n        if (parent !\u003d null \u0026\u0026 parent.getIndex() !\u003d WHOLE_COLLECTION) {\r\n            buffer.append(\"/.\");\r\n        } else if (parent !\u003d null \u0026\u0026 parent.getImmediateParentPointer() !\u003d null \u0026\u0026 parent.getImmediateParentPointer().getIndex() !\u003d WHOLE_COLLECTION) {\r\n            buffer.append(\"/.\");\r\n        }\r\n        buffer.append(\"[\").append(index + 1).append(\u0027]\u0027);\r\n    }\r\n    return buffer.toString();\r\n}",
    "nodes": 12,
    "edges": 18,
    "cc": 8,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($i0 \u003d\u003d -2147483648) → B3 | else → B11",
      "B3 : If(r2 \u003d\u003d null) → B4 | else → B6",
      "B4 : If($i2 \u003d\u003d -2147483648) → B5 | else → B6",
      "B6 : If(r2 \u003d\u003d null) → B7 | else → B10",
      "B7 : If($r3 \u003d\u003d null) → B8 | else → B10",
      "B8 : If($i1 \u003d\u003d -2147483648) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  NullElementPointer\n  $r0 \u003d StringBuilder\n  new StringBuilder()\n  r2 \u003d r1.getImmediateParentPointer()\n  if (r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d r2.asPath()\n  $r0.append($r5)\n}",
      "B2 {\n  $i0 \u003d NullElementPointer: int index\u003e\n  if ($i0 \u003d\u003d -2147483648) goto B3 else B11\n}",
      "B3 {\n  if (r2 \u003d\u003d null) goto B4 else B6\n}",
      "B4 {\n  $i2 \u003d r2.getIndex()\n  if ($i2 \u003d\u003d -2147483648) goto B5 else B6\n}",
      "B5 {\n  $r0.append(\"/.\")\n  goto B10\n}",
      "B6 {\n  if (r2 \u003d\u003d null) goto B7 else B10\n}",
      "B7 {\n  $r3 \u003d r2.getImmediateParentPointer()\n  if ($r3 \u003d\u003d null) goto B8 else B10\n}",
      "B8 {\n  $r4 \u003d r2.getImmediateParentPointer()\n  $i1 \u003d $r4.getIndex()\n  if ($i1 \u003d\u003d -2147483648) goto B9 else B10\n}",
      "B9 {\n  $r0.append(\"/.\")\n}",
      "B10 {\n  $r6 \u003d $r0.append(\"\")\n  $i3 \u003d NullElementPointer: int index\u003e\n  $i4 \u003d $i3 + 1\n  $r7 \u003d $r6.append($i4)\n  $r7.append(93)\n}",
      "B11 {\n  $r8 \u003d $r0.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B11",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NullElementPointer#getImmediateParentPointer(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.NullElementPointer",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (!(object instanceof NullElementPointer)) {\r\n        return false;\r\n    }\r\n    final NullElementPointer other \u003d (NullElementPointer) object;\r\n    return getImmediateParentPointer() \u003d\u003d other.getImmediateParentPointer() \u0026\u0026 index \u003d\u003d other.index;\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($r4 !\u003d $r3) → B5 | else → B7",
      "B5 : If($i1 !\u003d $i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  NullElementPointer\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d NullElementPointer\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d NullElementPointer) r0\n  $r4 \u003d r1.getImmediateParentPointer()\n  $r3 \u003d r2.getImmediateParentPointer()\n  if ($r4 !\u003d $r3) goto B5 else B7\n}",
      "B5 {\n  $i1 \u003d NullElementPointer: int index\u003e\n  $i0 \u003d NullElementPointer: int index\u003e\n  if ($i1 !\u003d $i0) goto B6 else B7\n}",
      "B6 {\n  $z1 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z1 \u003d 0\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NullElementPointer#getImmediateParentPointer(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.NullPointer",
    "methodName": "asPath",
    "signature": "java.lang.String asPath()",
    "visibility": "public",
    "body": "{\r\n    if (id !\u003d null) {\r\n        return \"id(\" + id + \")\";\r\n    }\r\n    return parent \u003d\u003d null ? \"null()\" : super.asPath();\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r2 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  NullPointer\n  $r1 \u003d String id\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  $r5 \u003d $r3.append(\"id(\")\n  $r4 \u003d String id\u003e\n  $r6 \u003d $r5.append($r4)\n  $r7 \u003d $r6.append(\")\")\n  $r8 \u003d $r7.toString()\n  return\n}",
      "B2 {\n  $r2 \u003d NodePointer parent\u003e\n  if ($r2 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r9 \u003d \"null()\"\n  goto B5\n}",
      "B4 {\n  $r9 \u003d r0.asPath()\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.NullPointer",
    "methodName": "createPath",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createPath(org.apache.commons.jxpath.JXPathContext)",
    "visibility": "public",
    "body": "{\r\n    if (parent !\u003d null) {\r\n        return parent.createPath(context).getValuePointer();\r\n    }\r\n    throw new UnsupportedOperationException(\"Cannot create the root object: \" + asPath());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NullPointer\n  JXPathContext\n  $r1 \u003d NodePointer parent\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d NodePointer parent\u003e\n  $r10 \u003d $r9.createPath(r8)\n  $r11 \u003d $r10.getValuePointer()\n  return\n}",
      "B2 {\n  $r2 \u003d UnsupportedOperationException\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  $r5 \u003d $r3.append(\"Cannot create the root object: \")\n  $r4 \u003d r0.asPath()\n  $r6 \u003d $r5.append($r4)\n  $r7 \u003d $r6.toString()\n  new UnsupportedOperationException($r7)\n  throw $r2\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NullPointer#asPath(...0)",
        "body": "{\r\n    if (id !\u003d null) {\r\n        return \"id(\" + id + \")\";\r\n    }\r\n    return parent \u003d\u003d null ? \"null()\" : super.asPath();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.NullPointer",
    "methodName": "createPath",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createPath(org.apache.commons.jxpath.JXPathContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (parent !\u003d null) {\r\n        return parent.createPath(context, value).getValuePointer();\r\n    }\r\n    throw new UnsupportedOperationException(\"Cannot create the root object: \" + asPath());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NullPointer\n  JXPathContext\n  Object\n  $r1 \u003d NodePointer parent\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d NodePointer parent\u003e\n  $r11 \u003d $r10.createPath(r8, r9)\n  $r12 \u003d $r11.getValuePointer()\n  return\n}",
      "B2 {\n  $r2 \u003d UnsupportedOperationException\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  $r5 \u003d $r3.append(\"Cannot create the root object: \")\n  $r4 \u003d r0.asPath()\n  $r6 \u003d $r5.append($r4)\n  $r7 \u003d $r6.toString()\n  new UnsupportedOperationException($r7)\n  throw $r2\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NullPointer#asPath(...0)",
        "body": "{\r\n    if (id !\u003d null) {\r\n        return \"id(\" + id + \")\";\r\n    }\r\n    return parent \u003d\u003d null ? \"null()\" : super.asPath();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.NullPointer",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (!(object instanceof NullPointer)) {\r\n        return false;\r\n    }\r\n    final NullPointer other \u003d (NullPointer) object;\r\n    return qName \u003d\u003d other.qName || qName !\u003d null \u0026\u0026 qName.equals(other.qName);\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($r4 \u003d\u003d $r3) → B5 | else → B7",
      "B5 : If($r5 \u003d\u003d null) → B6 | else → B8",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  NullPointer\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d NullPointer\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d NullPointer) r0\n  $r4 \u003d QName qName\u003e\n  $r3 \u003d QName qName\u003e\n  if ($r4 \u003d\u003d $r3) goto B5 else B7\n}",
      "B5 {\n  $r5 \u003d QName qName\u003e\n  if ($r5 \u003d\u003d null) goto B6 else B8\n}",
      "B6 {\n  $r7 \u003d QName qName\u003e\n  $r6 \u003d QName qName\u003e\n  $z1 \u003d $r7.equals($r6)\n  if ($z1 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $z2 \u003d 1\n  goto B9\n}",
      "B8 {\n  $z2 \u003d 0\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.NullPointer",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    return qName \u003d\u003d null ? 0 : qName.hashCode();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NullPointer\n  $r1 \u003d QName qName\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d 0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d QName qName\u003e\n  $i0 \u003d $r2.hashCode()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer",
    "methodName": "asPath",
    "signature": "java.lang.String asPath()",
    "visibility": "public",
    "body": "{\r\n    if (!byNameAttribute) {\r\n        return super.asPath();\r\n    }\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    buffer.append(getImmediateParentPointer().asPath());\r\n    buffer.append(\"[@name\u003d\u0027\");\r\n    buffer.append(escape(getPropertyName()));\r\n    buffer.append(\"\u0027]\");\r\n    if (index !\u003d WHOLE_COLLECTION) {\r\n        buffer.append(\u0027[\u0027).append(index + 1).append(\u0027]\u0027);\r\n    }\r\n    return buffer.toString();\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($i0 \u003d\u003d -2147483648) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  NullPropertyPointer\n  $z0 \u003d NullPropertyPointer: boolean byNameAttribute\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d r0.asPath()\n  return\n}",
      "B2 {\n  $r1 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d r0.getImmediateParentPointer()\n  $r3 \u003d $r2.asPath()\n  $r1.append($r3)\n  $r1.append(\"@name\u003d\\\u0027\")\n  $r4 \u003d r0.getPropertyName()\n  $r5 \u003d r0.escape($r4)\n  $r1.append($r5)\n  $r1.append(\"\\\u0027\")\n  $i0 \u003d NullPropertyPointer: int index\u003e\n  if ($i0 \u003d\u003d -2147483648) goto B3 else B4\n}",
      "B3 {\n  $r7 \u003d $r1.append(91)\n  $i1 \u003d NullPropertyPointer: int index\u003e\n  $i2 \u003d $i1 + 1\n  $r8 \u003d $r7.append($i2)\n  $r8.append(93)\n}",
      "B4 {\n  $r6 \u003d $r1.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NullPropertyPointer#getImmediateParentPointer(...0)",
        "body": "(source not found)"
      },
      {
        "name": "NullPropertyPointer#escape(...1)",
        "body": "(source not found)"
      },
      {
        "name": "NullPropertyPointer#getPropertyName(...0)",
        "body": "{\r\n    return propertyName;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer",
    "methodName": "createPath",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createPath(org.apache.commons.jxpath.JXPathContext)",
    "visibility": "public",
    "body": "{\r\n    NodePointer newParent \u003d parent.createPath(context);\r\n    if (isAttribute()) {\r\n        return newParent.createAttribute(context, getName());\r\n    }\r\n    if (parent instanceof NullPointer \u0026\u0026 parent.equals(newParent)) {\r\n        throw createBadFactoryException(context.getFactory());\r\n    }\r\n    // Consider these two use cases:\r\n    // 1. The parent pointer of NullPropertyPointer is\r\n    // a PropertyOwnerPointer other than NullPointer. When we call\r\n    // createPath on it, it most likely returns itself. We then\r\n    // take a PropertyPointer from it and get the PropertyPointer\r\n    // to expand the collection for the corresponding property.\r\n    //\r\n    // 2. The parent pointer of NullPropertyPointer is a NullPointer.\r\n    // When we call createPath, it may return a PropertyOwnerPointer\r\n    // or it may return anything else, like a DOMNodePointer.\r\n    // In the former case we need to do exactly what we did in use\r\n    // case 1. In the latter case, we simply request that the\r\n    // non-property pointer expand the collection by itself.\r\n    if (newParent instanceof PropertyOwnerPointer) {\r\n        final PropertyOwnerPointer pop \u003d (PropertyOwnerPointer) newParent;\r\n        newParent \u003d pop.getPropertyPointer();\r\n    }\r\n    return newParent.createChild(context, getName(), getIndex());\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B5",
      "B3 : If($z3 \u003d\u003d false) → B4 | else → B5",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  NullPropertyPointer\n  JXPathContext\n  $r2 \u003d NodePointer parent\u003e\n  r12 \u003d $r2.createPath(r1)\n  $z0 \u003d r0.isAttribute()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d r0.getName()\n  $r11 \u003d r12.createAttribute(r1, $r10)\n  return\n}",
      "B2 {\n  $r3 \u003d NodePointer parent\u003e\n  $z1 \u003d NullPointer\n  if ($z1 \u003d\u003d false) goto B3 else B5\n}",
      "B3 {\n  $r7 \u003d NodePointer parent\u003e\n  $z3 \u003d $r7.equals(r12)\n  if ($z3 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r8 \u003d r1.getFactory()\n  $r9 \u003d r0.createBadFactoryException($r8)\n  throw $r9\n}",
      "B5 {\n  $z2 \u003d PropertyOwnerPointer\n  if ($z2 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  r6 \u003d PropertyOwnerPointer) r12\n  r12 \u003d r6.getPropertyPointer()\n}",
      "B7 {\n  $r4 \u003d r0.getName()\n  $i0 \u003d r0.getIndex()\n  $r5 \u003d r12.createChild(r1, $r4, $i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NullPropertyPointer#getIndex(...0)",
        "body": "(source not found)"
      },
      {
        "name": "NullPropertyPointer#isAttribute(...0)",
        "body": "(source not found)"
      },
      {
        "name": "NullPropertyPointer#getName(...0)",
        "body": "{\r\n    return new QName(propertyName);\r\n}"
      },
      {
        "name": "NullPropertyPointer#createBadFactoryException(...1)",
        "body": "{\r\n    return new JXPathAbstractFactoryException(\"Factory \" + factory + \" reported success creating object for path: \" + asPath() + \" but object was null.  Terminating to avoid stack recursion.\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer",
    "methodName": "createPath",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createPath(org.apache.commons.jxpath.JXPathContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    NodePointer newParent \u003d parent.createPath(context);\r\n    if (isAttribute()) {\r\n        final NodePointer pointer \u003d newParent.createAttribute(context, getName());\r\n        pointer.setValue(value);\r\n        return pointer;\r\n    }\r\n    if (parent instanceof NullPointer \u0026\u0026 parent.equals(newParent)) {\r\n        throw createBadFactoryException(context.getFactory());\r\n    }\r\n    if (newParent instanceof PropertyOwnerPointer) {\r\n        final PropertyOwnerPointer pop \u003d (PropertyOwnerPointer) newParent;\r\n        newParent \u003d pop.getPropertyPointer();\r\n    }\r\n    return newParent.createChild(context, getName(), index, value);\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B5",
      "B3 : If($z3 \u003d\u003d false) → B4 | else → B5",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  NullPropertyPointer\n  JXPathContext\n  Object\n  $r2 \u003d NodePointer parent\u003e\n  r11 \u003d $r2.createPath(r1)\n  $z0 \u003d r0.isAttribute()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d r0.getName()\n  r12 \u003d r11.createAttribute(r1, $r10)\n  r12.setValue(r4)\n  return\n}",
      "B2 {\n  $r3 \u003d NodePointer parent\u003e\n  $z1 \u003d NullPointer\n  if ($z1 \u003d\u003d false) goto B3 else B5\n}",
      "B3 {\n  $r7 \u003d NodePointer parent\u003e\n  $z3 \u003d $r7.equals(r11)\n  if ($z3 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r8 \u003d r1.getFactory()\n  $r9 \u003d r0.createBadFactoryException($r8)\n  throw $r9\n}",
      "B5 {\n  $z2 \u003d PropertyOwnerPointer\n  if ($z2 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  r13 \u003d PropertyOwnerPointer) r11\n  r11 \u003d r13.getPropertyPointer()\n}",
      "B7 {\n  $r5 \u003d r0.getName()\n  $i0 \u003d NullPropertyPointer: int index\u003e\n  $r6 \u003d r11.createChild(r1, $r5, $i0, r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NullPropertyPointer#isAttribute(...0)",
        "body": "(source not found)"
      },
      {
        "name": "NullPropertyPointer#getName(...0)",
        "body": "{\r\n    return new QName(propertyName);\r\n}"
      },
      {
        "name": "NullPropertyPointer#createBadFactoryException(...1)",
        "body": "{\r\n    return new JXPathAbstractFactoryException(\"Factory \" + factory + \" reported success creating object for path: \" + asPath() + \" but object was null.  Terminating to avoid stack recursion.\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer",
    "methodName": "isCollection",
    "signature": "boolean isCollection()",
    "visibility": "public",
    "body": "{\r\n    return getIndex() !\u003d WHOLE_COLLECTION;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d -2147483648) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NullPropertyPointer\n  $i0 \u003d r0.getIndex()\n  if ($i0 \u003d\u003d -2147483648) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NullPropertyPointer#getIndex(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer",
    "methodName": "setValue",
    "signature": "void setValue(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (parent \u003d\u003d null || parent.isContainer()) {\r\n        throw new JXPathInvalidAccessException(\"Cannot set property \" + asPath() + \", the target object is null\");\r\n    }\r\n    if (!(parent instanceof PropertyOwnerPointer) || !((PropertyOwnerPointer) parent).isDynamicPropertyDeclarationSupported()) {\r\n        throw new JXPathInvalidAccessException(\"Cannot set property \" + asPath() + \", path does not match a changeable location\");\r\n    }\r\n    // If the parent property owner can create\r\n    // a property automatically - let it do so\r\n    final PropertyPointer propertyPointer \u003d ((PropertyOwnerPointer) parent).getPropertyPointer();\r\n    propertyPointer.setPropertyName(propertyName);\r\n    propertyPointer.setValue(value);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B5",
      "B4 : If($z2 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  NullPropertyPointer\n  Object\n  $r1 \u003d NodePointer parent\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d NodePointer parent\u003e\n  $z0 \u003d $r9.isContainer()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d JXPathInvalidAccessException\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  $r5 \u003d $r3.append(\"Cannot set property \")\n  $r4 \u003d r0.asPath()\n  $r6 \u003d $r5.append($r4)\n  $r7 \u003d $r6.append(\", the target object is null\")\n  $r8 \u003d $r7.toString()\n  new JXPathInvalidAccessException($r8)\n  throw $r2\n}",
      "B3 {\n  $r10 \u003d NodePointer parent\u003e\n  $z1 \u003d PropertyOwnerPointer\n  if ($z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r18 \u003d NodePointer parent\u003e\n  $r19 \u003d PropertyOwnerPointer) $r18\n  $z2 \u003d $r19.isDynamicPropertyDeclarationSupported()\n  if ($z2 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r11 \u003d JXPathInvalidAccessException\n  $r12 \u003d StringBuilder\n  new StringBuilder()\n  $r14 \u003d $r12.append(\"Cannot set property \")\n  $r13 \u003d r0.asPath()\n  $r15 \u003d $r14.append($r13)\n  $r16 \u003d $r15.append(\", path does not match a changeable location\")\n  $r17 \u003d $r16.toString()\n  new JXPathInvalidAccessException($r17)\n  throw $r11\n}",
      "B6 {\n  $r20 \u003d NodePointer parent\u003e\n  $r21 \u003d PropertyOwnerPointer) $r20\n  r22 \u003d $r21.getPropertyPointer()\n  $r23 \u003d String propertyName\u003e\n  r22.setPropertyName($r23)\n  r22.setValue(r24)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NullPropertyPointer#asPath(...0)",
        "body": "{\r\n    if (!byNameAttribute) {\r\n        return super.asPath();\r\n    }\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    buffer.append(getImmediateParentPointer().asPath());\r\n    buffer.append(\"[@name\u003d\u0027\");\r\n    buffer.append(escape(getPropertyName()));\r\n    buffer.append(\"\u0027]\");\r\n    if (index !\u003d WHOLE_COLLECTION) {\r\n        buffer.append(\u0027[\u0027).append(index + 1).append(\u0027]\u0027);\r\n    }\r\n    return buffer.toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.PropertyIterator",
    "methodName": "getNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer getNodePointer()",
    "visibility": "public",
    "body": "{\r\n    if (position \u003d\u003d 0) {\r\n        if (name !\u003d null) {\r\n            if (!targetReady) {\r\n                prepareForIndividualProperty(name);\r\n            }\r\n            // If there is no such property - return null\r\n            if (empty) {\r\n                return null;\r\n            }\r\n        } else {\r\n            if (!setPosition(1)) {\r\n                return null;\r\n            }\r\n            reset();\r\n        }\r\n    }\r\n    try {\r\n        return propertyNodePointer.getValuePointer();\r\n    } catch (final Throwable t) {\r\n        propertyNodePointer.handle(t);\r\n        final NullPropertyPointer npp \u003d new NullPropertyPointer(propertyNodePointer.getImmediateParentPointer());\r\n        npp.setPropertyName(propertyNodePointer.getPropertyName());\r\n        npp.setIndex(propertyNodePointer.getIndex());\r\n        return npp.getValuePointer();\r\n    }\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B9",
      "B1 : If($r1 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B9",
      "B6 : If($z0 !\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  PropertyIterator\n  $i0 \u003d PropertyIterator: int position\u003e\n  if ($i0 !\u003d 0) goto B1 else B9\n}",
      "B1 {\n  $r1 \u003d String name\u003e\n  if ($r1 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $z1 \u003d PropertyIterator: boolean targetReady\u003e\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d String name\u003e\n  r0.prepareForIndividualProperty($r2)\n}",
      "B4 {\n  $z2 \u003d PropertyIterator: boolean empty\u003e\n  if ($z2 \u003d\u003d false) goto B5 else B9\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $z0 \u003d r0.setPosition(1)\n  if ($z0 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  r0.reset()\n}",
      "B9 {\n  $r12 \u003d PropertyPointer propertyNodePointer\u003e\n  $r13 \u003d $r12.getValuePointer()\n  return\n}",
      "B10 {\n  $r3 :\u003d @caughtexception\n  $r4 \u003d PropertyPointer propertyNodePointer\u003e\n  $r4.handle($r3)\n  $r5 \u003d NullPropertyPointer\n  $r6 \u003d PropertyPointer propertyNodePointer\u003e\n  $r7 \u003d $r6.getImmediateParentPointer()\n  new NullPropertyPointer($r7)\n  $r8 \u003d PropertyPointer propertyNodePointer\u003e\n  $r9 \u003d $r8.getPropertyName()\n  $r5.setPropertyName($r9)\n  $r10 \u003d PropertyPointer propertyNodePointer\u003e\n  $i1 \u003d $r10.getIndex()\n  $r5.setIndex($i1)\n  $r11 \u003d $r5.getValuePointer()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B9",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PropertyIterator#setPosition(...1)",
        "body": "{\r\n    return name \u003d\u003d null ? setPositionAllProperties(position) : setPositionIndividualProperty(position);\r\n}"
      },
      {
        "name": "PropertyIterator#prepareForIndividualProperty(...1)",
        "body": "{\r\n    targetReady \u003d true;\r\n    empty \u003d true;\r\n    final String[] names \u003d propertyNodePointer.getPropertyNames();\r\n    if (!reverse) {\r\n        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\r\n            startPropertyIndex \u003d 0;\r\n        }\r\n        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\r\n            startIndex \u003d 0;\r\n        }\r\n        for (int i \u003d startPropertyIndex; i \u003c names.length; i++) {\r\n            if (names[i].equals(name)) {\r\n                propertyNodePointer.setPropertyIndex(i);\r\n                if (i !\u003d startPropertyIndex) {\r\n                    startIndex \u003d 0;\r\n                    includeStart \u003d true;\r\n                }\r\n                empty \u003d false;\r\n                break;\r\n            }\r\n        }\r\n    } else {\r\n        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\r\n            startPropertyIndex \u003d names.length - 1;\r\n        }\r\n        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\r\n            startIndex \u003d -1;\r\n        }\r\n        for (int i \u003d startPropertyIndex; i \u003e\u003d 0; i--) {\r\n            if (names[i].equals(name)) {\r\n                propertyNodePointer.setPropertyIndex(i);\r\n                if (i !\u003d startPropertyIndex) {\r\n                    startIndex \u003d -1;\r\n                    includeStart \u003d true;\r\n                }\r\n                empty \u003d false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "PropertyIterator#reset(...0)",
        "body": "{\r\n    position \u003d 0;\r\n    targetReady \u003d false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.beans.PropertyIterator",
    "methodName": "setPosition",
    "signature": "boolean setPosition(int)",
    "visibility": "public",
    "body": "{\r\n    return name \u003d\u003d null ? setPositionAllProperties(position) : setPositionIndividualProperty(position);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PropertyIterator\n  i0 :\u003d @parameter0: int\n  $r1 \u003d String name\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r0.setPositionAllProperties(i0)\n  goto B3\n}",
      "B2 {\n  $z0 \u003d r0.setPositionIndividualProperty(i0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PropertyIterator#setPositionAllProperties(...1)",
        "body": "{\r\n    this.position \u003d position;\r\n    if (position \u003c 1) {\r\n        return false;\r\n    }\r\n    int offset;\r\n    final int count \u003d propertyNodePointer.getPropertyCount();\r\n    if (!reverse) {\r\n        int index \u003d 1;\r\n        for (int i \u003d startPropertyIndex; i \u003c count; i++) {\r\n            propertyNodePointer.setPropertyIndex(i);\r\n            int length \u003d getLength();\r\n            if (i \u003d\u003d startPropertyIndex) {\r\n                length -\u003d startIndex;\r\n                if (!includeStart) {\r\n                    length--;\r\n                }\r\n                offset \u003d startIndex + position - index;\r\n                if (!includeStart) {\r\n                    offset++;\r\n                }\r\n            } else {\r\n                offset \u003d position - index;\r\n            }\r\n            if (index \u003c\u003d position \u0026\u0026 position \u003c index + length) {\r\n                propertyNodePointer.setIndex(offset);\r\n                return true;\r\n            }\r\n            index +\u003d length;\r\n        }\r\n    } else {\r\n        int index \u003d 1;\r\n        int start \u003d startPropertyIndex;\r\n        if (start \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\r\n            start \u003d count - 1;\r\n        }\r\n        for (int i \u003d start; i \u003e\u003d 0; i--) {\r\n            propertyNodePointer.setPropertyIndex(i);\r\n            int length \u003d getLength();\r\n            if (i \u003d\u003d startPropertyIndex) {\r\n                int end \u003d startIndex;\r\n                if (end \u003d\u003d -1) {\r\n                    end \u003d length - 1;\r\n                }\r\n                length \u003d end + 1;\r\n                offset \u003d end - position + 1;\r\n                if (!includeStart) {\r\n                    offset--;\r\n                    length--;\r\n                }\r\n            } else {\r\n                offset \u003d length - (position - index) - 1;\r\n            }\r\n            if (index \u003c\u003d position \u0026\u0026 position \u003c index + length) {\r\n                propertyNodePointer.setIndex(offset);\r\n                return true;\r\n            }\r\n            index +\u003d length;\r\n        }\r\n    }\r\n    return false;\r\n}"
      },
      {
        "name": "PropertyIterator#setPositionIndividualProperty(...1)",
        "body": "{\r\n    this.position \u003d position;\r\n    if (position \u003c 1) {\r\n        return false;\r\n    }\r\n    if (!targetReady) {\r\n        prepareForIndividualProperty(name);\r\n    }\r\n    if (empty) {\r\n        return false;\r\n    }\r\n    final int length \u003d getLength();\r\n    int index;\r\n    if (!reverse) {\r\n        index \u003d position + startIndex;\r\n        if (!includeStart) {\r\n            index++;\r\n        }\r\n        if (index \u003e length) {\r\n            return false;\r\n        }\r\n    } else {\r\n        int end \u003d startIndex;\r\n        if (end \u003d\u003d -1) {\r\n            end \u003d length - 1;\r\n        }\r\n        index \u003d end - position + 2;\r\n        if (!includeStart) {\r\n            index--;\r\n        }\r\n        if (index \u003c 1) {\r\n            return false;\r\n        }\r\n    }\r\n    propertyNodePointer.setIndex(index - 1);\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.container.ContainerPointer",
    "methodName": "asPath",
    "signature": "java.lang.String asPath()",
    "visibility": "public",
    "body": "{\r\n    return parent \u003d\u003d null ? \"/\" : parent.asPath();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ContainerPointer\n  $r1 \u003d NodePointer parent\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d \"/\"\n  goto B3\n}",
      "B2 {\n  $r2 \u003d NodePointer parent\u003e\n  $r3 \u003d $r2.asPath()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.container.ContainerPointer",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (!(object instanceof ContainerPointer)) {\r\n        return false;\r\n    }\r\n    final ContainerPointer other \u003d (ContainerPointer) object;\r\n    return container \u003d\u003d other.container \u0026\u0026 index \u003d\u003d other.index;\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($r4 !\u003d $r3) → B5 | else → B7",
      "B5 : If($i1 !\u003d $i0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  ContainerPointer\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d ContainerPointer\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d ContainerPointer) r0\n  $r4 \u003d Container container\u003e\n  $r3 \u003d Container container\u003e\n  if ($r4 !\u003d $r3) goto B5 else B7\n}",
      "B5 {\n  $i1 \u003d ContainerPointer: int index\u003e\n  $i0 \u003d ContainerPointer: int index\u003e\n  if ($i1 !\u003d $i0) goto B6 else B7\n}",
      "B6 {\n  $z1 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z1 \u003d 0\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.container.ContainerPointer",
    "methodName": "getImmediateNode",
    "signature": "java.lang.Object getImmediateNode()",
    "visibility": "public",
    "body": "{\r\n    final Object value \u003d getBaseValue();\r\n    if (index !\u003d WHOLE_COLLECTION) {\r\n        return index \u003e\u003d 0 \u0026\u0026 index \u003c getLength() ? ValueUtils.getValue(value, index) : null;\r\n    }\r\n    return ValueUtils.getValue(value);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d -2147483648) → B1 | else → B6",
      "B1 : If($i1 \u003c 0) → B2 | else → B4",
      "B2 : If($i2 \u003e\u003d $i3) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ContainerPointer\n  r1 \u003d r0.getBaseValue()\n  $i0 \u003d ContainerPointer: int index\u003e\n  if ($i0 \u003d\u003d -2147483648) goto B1 else B6\n}",
      "B1 {\n  $i1 \u003d ContainerPointer: int index\u003e\n  if ($i1 \u003c 0) goto B2 else B4\n}",
      "B2 {\n  $i2 \u003d ContainerPointer: int index\u003e\n  $i3 \u003d r0.getLength()\n  if ($i2 \u003e\u003d $i3) goto B3 else B4\n}",
      "B3 {\n  $i4 \u003d ContainerPointer: int index\u003e\n  $r3 \u003d ValueUtils.getValue(r1, $i4)\n  goto B5\n}",
      "B4 {\n  $r3 \u003d null\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r2 \u003d ValueUtils.getValue(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ContainerPointer#getLength(...0)",
        "body": "{\r\n    final Object value \u003d getBaseValue();\r\n    return value \u003d\u003d null ? 1 : ValueUtils.getLength(value);\r\n}"
      },
      {
        "name": "ContainerPointer#getBaseValue(...0)",
        "body": "{\r\n    return container;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.container.ContainerPointer",
    "methodName": "getImmediateValuePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer getImmediateValuePointer()",
    "visibility": "public",
    "body": "{\r\n    if (valuePointer \u003d\u003d null) {\r\n        final Object value \u003d getImmediateNode();\r\n        valuePointer \u003d newChildNodePointer(this, getName(), value);\r\n    }\r\n    return valuePointer;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ContainerPointer\n  $r1 \u003d NodePointer valuePointer\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r3 \u003d r0.getImmediateNode()\n  $r4 \u003d r0.getName()\n  $r5 \u003d ContainerPointer.newChildNodePointer(r0, $r4, r3)\n  NodePointer valuePointer\u003e \u003d $r5\n}",
      "B2 {\n  $r2 \u003d NodePointer valuePointer\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ContainerPointer#newChildNodePointer(...3)",
        "body": "(source not found)"
      },
      {
        "name": "ContainerPointer#getImmediateNode(...0)",
        "body": "{\r\n    final Object value \u003d getBaseValue();\r\n    if (index !\u003d WHOLE_COLLECTION) {\r\n        return index \u003e\u003d 0 \u0026\u0026 index \u003c getLength() ? ValueUtils.getValue(value, index) : null;\r\n    }\r\n    return ValueUtils.getValue(value);\r\n}"
      },
      {
        "name": "ContainerPointer#getName(...0)",
        "body": "{\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.container.ContainerPointer",
    "methodName": "getLength",
    "signature": "int getLength()",
    "visibility": "public",
    "body": "{\r\n    final Object value \u003d getBaseValue();\r\n    return value \u003d\u003d null ? 1 : ValueUtils.getLength(value);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ContainerPointer\n  r1 \u003d r0.getBaseValue()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $i0 \u003d ValueUtils.getLength(r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ContainerPointer#getBaseValue(...0)",
        "body": "{\r\n    return container;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.container.ContainerPointer",
    "methodName": "isCollection",
    "signature": "boolean isCollection()",
    "visibility": "public",
    "body": "{\r\n    final Object value \u003d getBaseValue();\r\n    return value !\u003d null \u0026\u0026 ValueUtils.isCollection(value);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ContainerPointer\n  r1 \u003d r0.getBaseValue()\n  if (r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d ValueUtils.isCollection(r1)\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ContainerPointer#getBaseValue(...0)",
        "body": "{\r\n    return container;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.container.ContainerPointerFactory",
    "methodName": "createNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createNodePointer(org.apache.commons.jxpath.ri.model.NodePointer,org.apache.commons.jxpath.ri.QName,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return bean instanceof Container ? new ContainerPointer(parent, (Container) bean) : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ContainerPointerFactory\n  NodePointer\n  QName\n  Object\n  $z0 \u003d Container\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d ContainerPointer\n  $r2 \u003d Container) r0\n  new ContainerPointer(r1, $r2)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.container.ContainerPointerFactory",
    "methodName": "createNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createNodePointer(org.apache.commons.jxpath.ri.QName,java.lang.Object,java.util.Locale)",
    "visibility": "public",
    "body": "{\r\n    return bean instanceof Container ? new ContainerPointer((Container) bean, locale) : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ContainerPointerFactory\n  QName\n  Object\n  Locale\n  $z0 \u003d Container\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d ContainerPointer\n  $r2 \u003d Container) r0\n  new ContainerPointer($r2, r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator",
    "methodName": "getNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer getNodePointer()",
    "visibility": "public",
    "body": "{\r\n    if (position \u003d\u003d 0) {\r\n        if (!setPosition(1)) {\r\n            return null;\r\n        }\r\n        position \u003d 0;\r\n    }\r\n    int index \u003d position - 1;\r\n    if (index \u003c 0) {\r\n        index \u003d 0;\r\n    }\r\n    return new DOMAttributePointer(parent, attributes.get(index));\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B4",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3",
      "B4 : If($i2 \u003e\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  DOMAttributeIterator\n  $i0 \u003d DOMAttributeIterator: int position\u003e\n  if ($i0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $z0 \u003d r0.setPosition(1)\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  DOMAttributeIterator: int position\u003e \u003d 0\n}",
      "B4 {\n  $i1 \u003d DOMAttributeIterator: int position\u003e\n  $i2 \u003d $i1 - 1\n  i3 \u003d $i2\n  if ($i2 \u003e\u003d 0) goto B5 else B6\n}",
      "B5 {\n  i3 \u003d 0\n}",
      "B6 {\n  $r1 \u003d DOMAttributePointer\n  $r3 \u003d NodePointer parent\u003e\n  $r2 \u003d List attributes\u003e\n  $r4 \u003d $r2.get(i3)\n  $r5 \u003d Attr) $r4\n  new DOMAttributePointer($r3, $r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DOMAttributeIterator#setPosition(...1)",
        "body": "{\r\n    this.position \u003d position;\r\n    return position \u003e\u003d 1 \u0026\u0026 position \u003c\u003d attributes.size();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator",
    "methodName": "setPosition",
    "signature": "boolean setPosition(int)",
    "visibility": "public",
    "body": "{\r\n    this.position \u003d position;\r\n    return position \u003e\u003d 1 \u0026\u0026 position \u003c\u003d attributes.size();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003c 1) → B1 | else → B3",
      "B1 : If(i0 \u003e $i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DOMAttributeIterator\n  i0 :\u003d @parameter0: int\n  DOMAttributeIterator: int position\u003e \u003d i0\n  if (i0 \u003c 1) goto B1 else B3\n}",
      "B1 {\n  $r1 \u003d List attributes\u003e\n  $i1 \u003d $r1.size()\n  if (i0 \u003e $i1) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMAttributePointer",
    "methodName": "asPath",
    "signature": "java.lang.String asPath()",
    "visibility": "public",
    "body": "{\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    if (parent !\u003d null) {\r\n        buffer.append(parent.asPath());\r\n        if (buffer.length() \u003d\u003d 0 || buffer.charAt(buffer.length() - 1) !\u003d \u0027/\u0027) {\r\n            buffer.append(\u0027/\u0027);\r\n        }\r\n    }\r\n    buffer.append(\u0027@\u0027);\r\n    buffer.append(getName());\r\n    return buffer.toString();\r\n}",
    "nodes": 5,
    "edges": 7,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B4",
      "B1 : If($i0 \u003d\u003d false) → B2 | else → B3",
      "B2 : If($i4 \u003d\u003d 47) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DOMAttributePointer\n  $r7 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d NodePointer parent\u003e\n  if ($r2 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r3 \u003d NodePointer parent\u003e\n  $r4 \u003d $r3.asPath()\n  $r7.append($r4)\n  $i0 \u003d $r7.length()\n  if ($i0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d $r7.length()\n  $i2 \u003d $i1 - 1\n  $c3 \u003d $r7.charAt($i2)\n  $i4 \u003d (int) $c3\n  if ($i4 \u003d\u003d 47) goto B3 else B4\n}",
      "B3 {\n  $r7.append(47)\n}",
      "B4 {\n  $r7.append(64)\n  $r5 \u003d r1.getName()\n  $r7.append($r5)\n  $r6 \u003d $r7.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DOMAttributePointer#getName(...0)",
        "body": "{\r\n    return new QName(DOMNodePointer.getPrefix(attr), DOMNodePointer.getLocalName(attr));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMAttributePointer",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return object \u003d\u003d this || object instanceof DOMAttributePointer \u0026\u0026 attr \u003d\u003d ((DOMAttributePointer) object).attr;\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d r1) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B4",
      "B2 : If($r4 !\u003d $r3) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DOMAttributePointer\n  Object\n  if (r0 \u003d\u003d r1) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d DOMAttributePointer\n  if ($z0 \u003d\u003d false) goto B2 else B4\n}",
      "B2 {\n  $r4 \u003d Attr attr\u003e\n  $r2 \u003d DOMAttributePointer) r0\n  $r3 \u003d Attr attr\u003e\n  if ($r4 !\u003d $r3) goto B3 else B4\n}",
      "B3 {\n  $z1 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z1 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMAttributePointer",
    "methodName": "getNamespaceURI",
    "signature": "java.lang.String getNamespaceURI()",
    "visibility": "public",
    "body": "{\r\n    final String prefix \u003d DOMNodePointer.getPrefix(attr);\r\n    return prefix \u003d\u003d null ? null : parent.getNamespaceURI(prefix);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DOMAttributePointer\n  $r1 \u003d Attr attr\u003e\n  r2 \u003d DOMNodePointer.getPrefix($r1)\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d null\n  goto B3\n}",
      "B2 {\n  $r3 \u003d NodePointer parent\u003e\n  $r4 \u003d $r3.getNamespaceURI(r2)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMAttributePointer",
    "methodName": "getValue",
    "signature": "java.lang.Object getValue()",
    "visibility": "public",
    "body": "{\r\n    final String value \u003d attr.getValue();\r\n    if (value \u003d\u003d null || value.isEmpty() \u0026\u0026 !attr.getSpecified()) {\r\n        return null;\r\n    }\r\n    return value;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B4",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DOMAttributePointer\n  $r1 \u003d Attr attr\u003e\n  r2 \u003d $r1.getValue()\n  if (r2 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d r2.isEmpty()\n  if ($z0 \u003d\u003d false) goto B2 else B4\n}",
      "B2 {\n  $r3 \u003d Attr attr\u003e\n  $z1 \u003d $r3.getSpecified()\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMAttributePointer",
    "methodName": "testNode",
    "signature": "boolean testNode(org.apache.commons.jxpath.ri.compiler.NodeTest)",
    "visibility": "public",
    "body": "{\r\n    return nodeTest \u003d\u003d null || nodeTest instanceof NodeTypeTest \u0026\u0026 ((NodeTypeTest) nodeTest).getNodeType() \u003d\u003d Compiler.NODE_TYPE_NODE;\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B4",
      "B2 : If($i0 !\u003d 1) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DOMAttributePointer\n  NodeTest\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d NodeTypeTest\n  if ($z0 \u003d\u003d false) goto B2 else B4\n}",
      "B2 {\n  $r1 \u003d NodeTypeTest) r0\n  $i0 \u003d $r1.getNodeType()\n  if ($i0 !\u003d 1) goto B3 else B4\n}",
      "B3 {\n  $z1 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z1 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator",
    "methodName": "getNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer getNodePointer()",
    "visibility": "public",
    "body": "{\r\n    if (position \u003d\u003d 0) {\r\n        if (!setPosition(1)) {\r\n            return null;\r\n        }\r\n        position \u003d 0;\r\n    }\r\n    int index \u003d position - 1;\r\n    if (index \u003c 0) {\r\n        index \u003d 0;\r\n    }\r\n    String prefix \u003d \"\";\r\n    final Attr attr \u003d attributes.get(index);\r\n    final String name \u003d attr.getPrefix();\r\n    if (name !\u003d null \u0026\u0026 name.equals(\"xmlns\")) {\r\n        prefix \u003d DOMNodePointer.getLocalName(attr);\r\n    }\r\n    return new NamespacePointer(parent, prefix, attr.getValue());\r\n}",
    "nodes": 10,
    "edges": 13,
    "cc": 5,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B4",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3",
      "B4 : If($i2 \u003e\u003d 0) → B5 | else → B6",
      "B6 : If($r4 \u003d\u003d null) → B7 | else → B9",
      "B7 : If($z0 \u003d\u003d false) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  DOMNamespaceIterator\n  $i0 \u003d DOMNamespaceIterator: int position\u003e\n  if ($i0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $z1 \u003d r0.setPosition(1)\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  DOMNamespaceIterator: int position\u003e \u003d 0\n}",
      "B4 {\n  $i1 \u003d DOMNamespaceIterator: int position\u003e\n  $i2 \u003d $i1 - 1\n  i3 \u003d $i2\n  if ($i2 \u003e\u003d 0) goto B5 else B6\n}",
      "B5 {\n  i3 \u003d 0\n}",
      "B6 {\n  r5 \u003d \"\"\n  $r1 \u003d List attributes\u003e\n  $r2 \u003d $r1.get(i3)\n  $r3 \u003d Attr) $r2\n  $r4 \u003d $r3.getPrefix()\n  if ($r4 \u003d\u003d null) goto B7 else B9\n}",
      "B7 {\n  $z0 \u003d $r4.equals(\"xmlns\")\n  if ($z0 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  r5 \u003d DOMNodePointer.getLocalName($r3)\n}",
      "B9 {\n  $r6 \u003d NamespacePointer\n  $r7 \u003d NodePointer parent\u003e\n  $r8 \u003d $r3.getValue()\n  new NamespacePointer($r7, r5, $r8)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DOMNamespaceIterator#setPosition(...1)",
        "body": "{\r\n    this.position \u003d position;\r\n    return position \u003e\u003d 1 \u0026\u0026 position \u003c\u003d attributes.size();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator",
    "methodName": "setPosition",
    "signature": "boolean setPosition(int)",
    "visibility": "public",
    "body": "{\r\n    this.position \u003d position;\r\n    return position \u003e\u003d 1 \u0026\u0026 position \u003c\u003d attributes.size();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i0 \u003c 1) → B1 | else → B3",
      "B1 : If(i0 \u003e $i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DOMNamespaceIterator\n  i0 :\u003d @parameter0: int\n  DOMNamespaceIterator: int position\u003e \u003d i0\n  if (i0 \u003c 1) goto B1 else B3\n}",
      "B1 {\n  $r1 \u003d List attributes\u003e\n  $i1 \u003d $r1.size()\n  if (i0 \u003e $i1) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator",
    "methodName": "getNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer getNodePointer()",
    "visibility": "public",
    "body": "{\r\n    if (position \u003d\u003d 0) {\r\n        setPosition(1);\r\n    }\r\n    return child \u003d\u003d null ? null : new DOMNodePointer(parent, child);\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B2 : If($r1 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DOMNodeIterator\n  $i0 \u003d DOMNodeIterator: int position\u003e\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.setPosition(1)\n}",
      "B2 {\n  $r1 \u003d Node child\u003e\n  if ($r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d null\n  goto B5\n}",
      "B4 {\n  $r4 \u003d DOMNodePointer\n  $r3 \u003d NodePointer parent\u003e\n  $r2 \u003d Node child\u003e\n  new DOMNodePointer($r3, $r2)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DOMNodeIterator#setPosition(...1)",
        "body": "{\r\n    while (this.position \u003c position) {\r\n        if (!next()) {\r\n            return false;\r\n        }\r\n    }\r\n    while (this.position \u003e position) {\r\n        if (!previous()) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator",
    "methodName": "setPosition",
    "signature": "boolean setPosition(int)",
    "visibility": "public",
    "body": "{\r\n    while (this.position \u003c position) {\r\n        if (!next()) {\r\n            return false;\r\n        }\r\n    }\r\n    while (this.position \u003e position) {\r\n        if (!previous()) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B1 : If($i1 \u003e\u003d i0) → B2 | else → B4",
      "B2 : If($z1 !\u003d 0) → B3 | else → B1",
      "B4 : If($i2 \u003c\u003d i0) → B5 | else → B7",
      "B5 : If($z0 !\u003d 0) → B6 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DOMNodeIterator\n  i0 :\u003d @parameter0: int\n}",
      "B1 {\n  $i1 \u003d DOMNodeIterator: int position\u003e\n  if ($i1 \u003e\u003d i0) goto B2 else B4\n}",
      "B2 {\n  $z1 \u003d r0.next()\n  if ($z1 !\u003d 0) goto B3 else B1\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i2 \u003d DOMNodeIterator: int position\u003e\n  if ($i2 \u003c\u003d i0) goto B5 else B7\n}",
      "B5 {\n  $z0 \u003d r0.previous()\n  if ($z0 !\u003d 0) goto B6 else B4\n}",
      "B6 {\n  return\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DOMNodeIterator#next(...0)",
        "body": "{\r\n    position++;\r\n    if (!reverse) {\r\n        if (position \u003d\u003d 1 \u0026\u0026 child \u003d\u003d null) {\r\n            child \u003d node.getFirstChild();\r\n        } else {\r\n            child \u003d child.getNextSibling();\r\n        }\r\n        while (child !\u003d null \u0026\u0026 !testChild()) {\r\n            child \u003d child.getNextSibling();\r\n        }\r\n    } else {\r\n        if (position \u003d\u003d 1 \u0026\u0026 child \u003d\u003d null) {\r\n            child \u003d node.getLastChild();\r\n        } else {\r\n            child \u003d child.getPreviousSibling();\r\n        }\r\n        while (child !\u003d null \u0026\u0026 !testChild()) {\r\n            child \u003d child.getPreviousSibling();\r\n        }\r\n    }\r\n    return child !\u003d null;\r\n}"
      },
      {
        "name": "DOMNodeIterator#previous(...0)",
        "body": "{\r\n    position--;\r\n    if (!reverse) {\r\n        if (position \u003d\u003d 0) {\r\n            child \u003d null;\r\n        } else if (child \u003d\u003d null) {\r\n            child \u003d node.getLastChild();\r\n        } else {\r\n            child \u003d child.getPreviousSibling();\r\n        }\r\n        while (child !\u003d null \u0026\u0026 !testChild()) {\r\n            child \u003d child.getPreviousSibling();\r\n        }\r\n    } else {\r\n        child \u003d child.getNextSibling();\r\n        while (child !\u003d null \u0026\u0026 !testChild()) {\r\n            child \u003d child.getNextSibling();\r\n        }\r\n    }\r\n    return child !\u003d null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer",
    "methodName": "getLocalName",
    "signature": "java.lang.String getLocalName(org.w3c.dom.Node)",
    "visibility": "public",
    "body": "{\r\n    final String localName \u003d node.getLocalName();\r\n    if (localName !\u003d null) {\r\n        return localName;\r\n    }\r\n    final String name \u003d node.getNodeName();\r\n    final int index \u003d name.lastIndexOf(\u0027:\u0027);\r\n    return index \u003c 0 ? name : name.substring(index + 1);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003e\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Node\n  r1 \u003d r0.getLocalName()\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r2 \u003d r0.getNodeName()\n  i0 \u003d r2.lastIndexOf(58)\n  if (i0 \u003e\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d r2\n  goto B5\n}",
      "B4 {\n  $i1 \u003d i0 + 1\n  $r3 \u003d r2.substring($i1)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer",
    "methodName": "getNamespaceURI",
    "signature": "java.lang.String getNamespaceURI(org.w3c.dom.Node)",
    "visibility": "public",
    "body": "{\r\n    if (node instanceof Document) {\r\n        node \u003d ((Document) node).getDocumentElement();\r\n    }\r\n    final Element element \u003d (Element) node;\r\n    String uri \u003d element.getNamespaceURI();\r\n    if (uri \u003d\u003d null) {\r\n        final String prefix \u003d getPrefix(node);\r\n        final String qname \u003d prefix \u003d\u003d null ? \"xmlns\" : \"xmlns:\" + prefix;\r\n        Node aNode \u003d node;\r\n        while (aNode !\u003d null) {\r\n            if (aNode.getNodeType() \u003d\u003d Node.ELEMENT_NODE) {\r\n                final Attr attr \u003d ((Element) aNode).getAttributeNode(qname);\r\n                if (attr !\u003d null) {\r\n                    uri \u003d attr.getValue();\r\n                    break;\r\n                }\r\n            }\r\n            aNode \u003d aNode.getParentNode();\r\n        }\r\n    }\r\n    return \"\".equals(uri) ? null : uri;\r\n}",
    "nodes": 16,
    "edges": 22,
    "cc": 8,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($r9 !\u003d null) → B3 | else → B12",
      "B3 : If(r0 !\u003d null) → B4 | else → B5",
      "B7 : If(r13 \u003d\u003d null) → B8 | else → B12",
      "B8 : If($s0 !\u003d 1) → B9 | else → B11",
      "B9 : If(r6 \u003d\u003d null) → B10 | else → B11",
      "B12 : If($z1 \u003d\u003d false) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  Node\n  $z0 \u003d Document\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d Document) r10\n  r10 \u003d $r7.getDocumentElement()\n}",
      "B2 {\n  $r8 \u003d Element) r10\n  $r9 \u003d $r8.getNamespaceURI()\n  r11 \u003d $r9\n  if ($r9 !\u003d null) goto B3 else B12\n}",
      "B3 {\n  r0 \u003d DOMNodePointer.getPrefix(r10)\n  if (r0 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r12 \u003d \"xmlns\"\n  goto B6\n}",
      "B5 {\n  $r1 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d $r1.append(\"xmlns:\")\n  $r3 \u003d $r2.append(r0)\n  $r12 \u003d $r3.toString()\n}",
      "B6 {\n  r4 \u003d $r12\n  r13 \u003d r10\n}",
      "B7 {\n  if (r13 \u003d\u003d null) goto B8 else B12\n}",
      "B8 {\n  $s0 \u003d r13.getNodeType()\n  if ($s0 !\u003d 1) goto B9 else B11\n}",
      "B9 {\n  $r5 \u003d Element) r13\n  r6 \u003d $r5.getAttributeNode(r4)\n  if (r6 \u003d\u003d null) goto B10 else B11\n}",
      "B10 {\n  r11 \u003d r6.getValue()\n  goto B12\n}",
      "B11 {\n  r13 \u003d r13.getParentNode()\n  goto B7\n}",
      "B12 {\n  $r14 \u003d \"\"\n  $z1 \u003d $r14.equals(r11)\n  if ($z1 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  $r15 \u003d null\n  goto B15\n}",
      "B14 {\n  $r15 \u003d r11\n}",
      "B15 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B12",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B7",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DOMNodePointer#getPrefix(...1)",
        "body": "{\r\n    final String prefix \u003d node.getPrefix();\r\n    if (prefix !\u003d null) {\r\n        return prefix;\r\n    }\r\n    final String name \u003d node.getNodeName();\r\n    final int index \u003d name.lastIndexOf(\u0027:\u0027);\r\n    return index \u003c 0 ? null : name.substring(0, index);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer",
    "methodName": "getPrefix",
    "signature": "java.lang.String getPrefix(org.w3c.dom.Node)",
    "visibility": "public",
    "body": "{\r\n    final String prefix \u003d node.getPrefix();\r\n    if (prefix !\u003d null) {\r\n        return prefix;\r\n    }\r\n    final String name \u003d node.getNodeName();\r\n    final int index \u003d name.lastIndexOf(\u0027:\u0027);\r\n    return index \u003c 0 ? null : name.substring(0, index);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003e\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Node\n  r1 \u003d r0.getPrefix()\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r2 \u003d r0.getNodeName()\n  i0 \u003d r2.lastIndexOf(58)\n  if (i0 \u003e\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d null\n  goto B5\n}",
      "B4 {\n  $r3 \u003d r2.substring(0, i0)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer",
    "methodName": "testNode",
    "signature": "boolean testNode(org.w3c.dom.Node,org.apache.commons.jxpath.ri.compiler.NodeTest)",
    "visibility": "public",
    "body": "{\r\n    if (test \u003d\u003d null) {\r\n        return true;\r\n    }\r\n    if (test instanceof NodeNameTest) {\r\n        if (node.getNodeType() !\u003d Node.ELEMENT_NODE) {\r\n            return false;\r\n        }\r\n        final NodeNameTest nodeNameTest \u003d (NodeNameTest) test;\r\n        final QName testName \u003d nodeNameTest.getNodeName();\r\n        final String namespaceURI \u003d nodeNameTest.getNamespaceURI();\r\n        final boolean wildcard \u003d nodeNameTest.isWildcard();\r\n        final String testPrefix \u003d testName.getPrefix();\r\n        if (wildcard \u0026\u0026 testPrefix \u003d\u003d null) {\r\n            return true;\r\n        }\r\n        if (wildcard || testName.getName().equals(getLocalName(node))) {\r\n            final String nodeNS \u003d getNamespaceURI(node);\r\n            return equalStrings(namespaceURI, nodeNS) || nodeNS \u003d\u003d null \u0026\u0026 equalStrings(testPrefix, getPrefix(node));\r\n        }\r\n        return false;\r\n    }\r\n    if (test instanceof NodeTypeTest) {\r\n        final int nodeType \u003d node.getNodeType();\r\n        switch(((NodeTypeTest) test).getNodeType()) {\r\n            case Compiler.NODE_TYPE_NODE:\r\n                return true;\r\n            case Compiler.NODE_TYPE_TEXT:\r\n                return nodeType \u003d\u003d Node.CDATA_SECTION_NODE || nodeType \u003d\u003d Node.TEXT_NODE;\r\n            case Compiler.NODE_TYPE_COMMENT:\r\n                return nodeType \u003d\u003d Node.COMMENT_NODE;\r\n            case Compiler.NODE_TYPE_PI:\r\n                return nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n    if (test instanceof ProcessingInstructionTest \u0026\u0026 node.getNodeType() \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\r\n        final String testPI \u003d ((ProcessingInstructionTest) test).getTarget();\r\n        final String nodePI \u003d ((ProcessingInstruction) node).getTarget();\r\n        return testPI.equals(nodePI);\r\n    }\r\n    return false;\r\n}",
    "nodes": 38,
    "edges": 47,
    "cc": 11,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B17",
      "B3 : If($s2 \u003d\u003d 1) → B4 | else → B5",
      "B5 : If(z4 \u003d\u003d false) → B6 | else → B8",
      "B6 : If(r6 !\u003d null) → B7 | else → B8",
      "B8 : If(z4 !\u003d 0) → B9 | else → B10",
      "B9 : If($z7 \u003d\u003d false) → B10 | else → B16",
      "B10 : If($z5 !\u003d 0) → B11 | else → B13",
      "B11 : If($r10 !\u003d null) → B12 | else → B14",
      "B12 : If($z6 \u003d\u003d false) → B13 | else → B14",
      "B17 : If($z1 \u003d\u003d false) → B18 | else → B34",
      "B18 : If(switch-on $i1) → B19 | else → B20",
      "B20 : If($i4 \u003d\u003d 4) → B21 | else → B22",
      "B21 : If($i5 !\u003d 3) → B22 | else → B23",
      "B25 : If($i6 !\u003d 8) → B26 | else → B27",
      "B29 : If($i7 !\u003d 7) → B30 | else → B31",
      "B34 : If($z2 \u003d\u003d false) → B35 | else → B37",
      "B35 : If($i8 !\u003d 7) → B36 | else → B37"
    ],
    "blockList": [
      "B0 {\n  Node\n  NodeTest\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d NodeNameTest\n  if ($z0 \u003d\u003d false) goto B3 else B17\n}",
      "B3 {\n  $s2 \u003d r1.getNodeType()\n  if ($s2 \u003d\u003d 1) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  r11 \u003d NodeNameTest) r0\n  r12 \u003d r11.getNodeName()\n  r5 \u003d r11.getNamespaceURI()\n  z4 \u003d r11.isWildcard()\n  r6 \u003d r12.getPrefix()\n  if (z4 \u003d\u003d false) goto B6 else B8\n}",
      "B6 {\n  if (r6 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  if (z4 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  $r9 \u003d r12.getName()\n  $r8 \u003d DOMNodePointer.getLocalName(r1)\n  $z7 \u003d $r9.equals($r8)\n  if ($z7 \u003d\u003d false) goto B10 else B16\n}",
      "B10 {\n  $r10 \u003d DOMNodePointer.getNamespaceURI(r1)\n  $z5 \u003d DOMNodePointer.equalStrings(r5, $r10)\n  if ($z5 !\u003d 0) goto B11 else B13\n}",
      "B11 {\n  if ($r10 !\u003d null) goto B12 else B14\n}",
      "B12 {\n  $r7 \u003d DOMNodePointer.getPrefix(r1)\n  $z6 \u003d DOMNodePointer.equalStrings(r6, $r7)\n  if ($z6 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  $z8 \u003d 1\n  goto B15\n}",
      "B14 {\n  $z8 \u003d 0\n}",
      "B15 {\n  return\n}",
      "B16 {\n  return\n}",
      "B17 {\n  $z1 \u003d NodeTypeTest\n  if ($z1 \u003d\u003d false) goto B18 else B34\n}",
      "B18 {\n  s3 \u003d r1.getNodeType()\n  $r4 \u003d NodeTypeTest) r0\n  $i1 \u003d $r4.getNodeType()\n  tableswitch($i1) {     case 1: goto return 1;     case 2: goto $i4 \u003d (int) s3;     case 3: goto $i6 \u003d (int) s3;     case 4: goto $i7 \u003d (int) s3;     default: goto return 0; }\n}",
      "B19 {\n  return\n}",
      "B20 {\n  $i4 \u003d (int) s3\n  if ($i4 \u003d\u003d 4) goto B21 else B22\n}",
      "B21 {\n  $i5 \u003d (int) s3\n  if ($i5 !\u003d 3) goto B22 else B23\n}",
      "B22 {\n  $z9 \u003d 1\n  goto B24\n}",
      "B23 {\n  $z9 \u003d 0\n}",
      "B24 {\n  return\n}",
      "B25 {\n  $i6 \u003d (int) s3\n  if ($i6 !\u003d 8) goto B26 else B27\n}",
      "B26 {\n  $z10 \u003d 1\n  goto B28\n}",
      "B27 {\n  $z10 \u003d 0\n}",
      "B28 {\n  return\n}",
      "B29 {\n  $i7 \u003d (int) s3\n  if ($i7 !\u003d 7) goto B30 else B31\n}",
      "B30 {\n  $z11 \u003d 1\n  goto B32\n}",
      "B31 {\n  $z11 \u003d 0\n}",
      "B32 {\n  return\n}",
      "B33 {\n  return\n}",
      "B34 {\n  $z2 \u003d ProcessingInstructionTest\n  if ($z2 \u003d\u003d false) goto B35 else B37\n}",
      "B35 {\n  $s0 \u003d r1.getNodeType()\n  $i8 \u003d (int) $s0\n  if ($i8 !\u003d 7) goto B36 else B37\n}",
      "B36 {\n  $r2 \u003d ProcessingInstructionTest) r0\n  r13 \u003d $r2.getTarget()\n  $r3 \u003d ProcessingInstruction) r1\n  r14 \u003d $r3.getTarget()\n  $z3 \u003d r13.equals(r14)\n  return\n}",
      "B37 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B17",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B9 --\u003e B16",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B14",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e B18",
      "B17 --\u003e B34",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B18 --\u003e B25",
      "B18 --\u003e B29",
      "B18 --\u003e B33",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B24",
      "B24 --\u003e [EXIT]",
      "B25 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B28",
      "B27 --\u003e B28",
      "B28 --\u003e [EXIT]",
      "B29 --\u003e B30",
      "B29 --\u003e B31",
      "B30 --\u003e B32",
      "B31 --\u003e B32",
      "B32 --\u003e [EXIT]",
      "B33 --\u003e [EXIT]",
      "B34 --\u003e B35",
      "B34 --\u003e B37",
      "B35 --\u003e B36",
      "B35 --\u003e B37",
      "B36 --\u003e [EXIT]",
      "B37 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DOMNodePointer#getNamespaceURI(...1)",
        "body": "{\r\n    if (node instanceof Document) {\r\n        node \u003d ((Document) node).getDocumentElement();\r\n    }\r\n    final Element element \u003d (Element) node;\r\n    String uri \u003d element.getNamespaceURI();\r\n    if (uri \u003d\u003d null) {\r\n        final String prefix \u003d getPrefix(node);\r\n        final String qname \u003d prefix \u003d\u003d null ? \"xmlns\" : \"xmlns:\" + prefix;\r\n        Node aNode \u003d node;\r\n        while (aNode !\u003d null) {\r\n            if (aNode.getNodeType() \u003d\u003d Node.ELEMENT_NODE) {\r\n                final Attr attr \u003d ((Element) aNode).getAttributeNode(qname);\r\n                if (attr !\u003d null) {\r\n                    uri \u003d attr.getValue();\r\n                    break;\r\n                }\r\n            }\r\n            aNode \u003d aNode.getParentNode();\r\n        }\r\n    }\r\n    return \"\".equals(uri) ? null : uri;\r\n}"
      },
      {
        "name": "DOMNodePointer#getPrefix(...1)",
        "body": "{\r\n    final String prefix \u003d node.getPrefix();\r\n    if (prefix !\u003d null) {\r\n        return prefix;\r\n    }\r\n    final String name \u003d node.getNodeName();\r\n    final int index \u003d name.lastIndexOf(\u0027:\u0027);\r\n    return index \u003c 0 ? null : name.substring(0, index);\r\n}"
      },
      {
        "name": "DOMNodePointer#equalStrings(...2)",
        "body": "{\r\n    if (s1 \u003d\u003d s2) {\r\n        return true;\r\n    }\r\n    s1 \u003d s1 \u003d\u003d null ? \"\" : s1.trim();\r\n    s2 \u003d s2 \u003d\u003d null ? \"\" : s2.trim();\r\n    return s1.equals(s2);\r\n}"
      },
      {
        "name": "DOMNodePointer#getLocalName(...1)",
        "body": "{\r\n    final String localName \u003d node.getLocalName();\r\n    if (localName !\u003d null) {\r\n        return localName;\r\n    }\r\n    final String name \u003d node.getNodeName();\r\n    final int index \u003d name.lastIndexOf(\u0027:\u0027);\r\n    return index \u003c 0 ? name : name.substring(index + 1);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer",
    "methodName": "asPath",
    "signature": "java.lang.String asPath()",
    "visibility": "public",
    "body": "{\r\n    if (id !\u003d null) {\r\n        return \"id(\u0027\" + escape(id) + \"\u0027)\";\r\n    }\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    if (parent !\u003d null) {\r\n        buffer.append(parent.asPath());\r\n    }\r\n    switch(node.getNodeType()) {\r\n        case Node.ELEMENT_NODE:\r\n            // If the parent pointer is not a DOMNodePointer, it is\r\n            // the parent\u0027s responsibility to produce the node test part\r\n            // of the path\r\n            if (parent instanceof DOMNodePointer) {\r\n                if (buffer.length() \u003d\u003d 0 || buffer.charAt(buffer.length() - 1) !\u003d \u0027/\u0027) {\r\n                    buffer.append(\u0027/\u0027);\r\n                }\r\n                final String ln \u003d getLocalName(node);\r\n                final String nsURI \u003d getNamespaceURI();\r\n                if (nsURI \u003d\u003d null) {\r\n                    buffer.append(ln);\r\n                    buffer.append(\u0027[\u0027);\r\n                    buffer.append(getRelativePositionByQName()).append(\u0027]\u0027);\r\n                } else {\r\n                    final String prefix \u003d getNamespaceResolver().getPrefix(nsURI);\r\n                    if (prefix !\u003d null) {\r\n                        buffer.append(prefix);\r\n                        buffer.append(\u0027:\u0027);\r\n                        buffer.append(ln);\r\n                        buffer.append(\u0027[\u0027);\r\n                        buffer.append(getRelativePositionByQName());\r\n                    } else {\r\n                        buffer.append(\"node()\");\r\n                        buffer.append(\u0027[\u0027);\r\n                        buffer.append(getRelativePositionOfElement());\r\n                    }\r\n                    buffer.append(\u0027]\u0027);\r\n                }\r\n            }\r\n            break;\r\n        case Node.TEXT_NODE:\r\n        case Node.CDATA_SECTION_NODE:\r\n            buffer.append(\"/text()\");\r\n            buffer.append(\u0027[\u0027);\r\n            buffer.append(getRelativePositionOfTextNode()).append(\u0027]\u0027);\r\n            break;\r\n        case Node.PROCESSING_INSTRUCTION_NODE:\r\n            buffer.append(\"/processing-instruction(\\\u0027\");\r\n            buffer.append(((ProcessingInstruction) node).getTarget()).append(\"\u0027)\");\r\n            buffer.append(\u0027[\u0027);\r\n            buffer.append(getRelativePositionOfPI()).append(\u0027]\u0027);\r\n            break;\r\n        case Node.DOCUMENT_NODE:\r\n            // That\u0027ll be empty\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return buffer.toString();\r\n}",
    "nodes": 20,
    "edges": 29,
    "cc": 11,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r3 \u003d\u003d null) → B3 | else → B4",
      "B4 : If(switch-on $i10) → B5 | else → B19",
      "B5 : If($z0 \u003d\u003d false) → B6 | else → B19",
      "B6 : If($i3 \u003d\u003d false) → B7 | else → B8",
      "B7 : If($i11 \u003d\u003d 47) → B8 | else → B9",
      "B9 : If($r26 !\u003d null) → B10 | else → B11",
      "B11 : If(r13 \u003d\u003d null) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  DOMNodePointer\n  $r1 \u003d String id\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r28 \u003d StringBuilder\n  new StringBuilder()\n  $r20 \u003d $r28.append(\"id(\\\u0027\")\n  $r18 \u003d String id\u003e\n  $r19 \u003d r0.escape($r18)\n  $r21 \u003d $r20.append($r19)\n  $r22 \u003d $r21.append(\"\\\u0027)\")\n  $r23 \u003d $r22.toString()\n  return\n}",
      "B2 {\n  $r29 \u003d StringBuilder\n  new StringBuilder()\n  $r3 \u003d NodePointer parent\u003e\n  if ($r3 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r15 \u003d NodePointer parent\u003e\n  $r16 \u003d $r15.asPath()\n  $r29.append($r16)\n}",
      "B4 {\n  $r4 \u003d Node node\u003e\n  $s0 \u003d $r4.getNodeType()\n  $i10 \u003d (int) $s0\n  String toString()\u003e(); }\n}",
      "B5 {\n  $r11 \u003d NodePointer parent\u003e\n  $z0 \u003d DOMNodePointer\n  if ($z0 \u003d\u003d false) goto B6 else B19\n}",
      "B6 {\n  $i3 \u003d $r29.length()\n  if ($i3 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $i7 \u003d $r29.length()\n  $i8 \u003d $i7 - 1\n  $c9 \u003d $r29.charAt($i8)\n  $i11 \u003d (int) $c9\n  if ($i11 \u003d\u003d 47) goto B8 else B9\n}",
      "B8 {\n  $r29.append(47)\n}",
      "B9 {\n  $r24 \u003d Node node\u003e\n  $r25 \u003d DOMNodePointer.getLocalName($r24)\n  $r26 \u003d r0.getNamespaceURI()\n  if ($r26 !\u003d null) goto B10 else B11\n}",
      "B10 {\n  $r29.append($r25)\n  $r29.append(91)\n  $i6 \u003d r0.getRelativePositionByQName()\n  $r14 \u003d $r29.append($i6)\n  $r14.append(93)\n  goto B15\n}",
      "B11 {\n  $r12 \u003d r0.getNamespaceResolver()\n  r13 \u003d $r12.getPrefix($r26)\n  if (r13 \u003d\u003d null) goto B12 else B13\n}",
      "B12 {\n  $r29.append(r13)\n  $r29.append(58)\n  $r29.append($r25)\n  $r29.append(91)\n  $i5 \u003d r0.getRelativePositionByQName()\n  $r29.append($i5)\n  goto B14\n}",
      "B13 {\n  $r29.append(\"node()\")\n  $r29.append(91)\n  $i4 \u003d r0.getRelativePositionOfElement()\n  $r29.append($i4)\n}",
      "B14 {\n  $r29.append(93)\n}",
      "B15 {\n  goto B19\n}",
      "B16 {\n  $r29.append(\"/text()\")\n  $r29.append(91)\n  $i2 \u003d r0.getRelativePositionOfTextNode()\n  $r10 \u003d $r29.append($i2)\n  $r10.append(93)\n  goto B19\n}",
      "B17 {\n  $r29.append(\"/processing-instruction(\\\u0027\")\n  $r5 \u003d Node node\u003e\n  $r6 \u003d ProcessingInstruction) $r5\n  $r7 \u003d $r6.getTarget()\n  $r8 \u003d $r29.append($r7)\n  $r8.append(\"\\\u0027)\")\n  $r29.append(91)\n  $i1 \u003d r0.getRelativePositionOfPI()\n  $r9 \u003d $r29.append($i1)\n  $r9.append(93)\n  goto B19\n}",
      "B18 {\n  goto B19\n}",
      "B19 {\n  $r27 \u003d $r29.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B19",
      "B4 --\u003e B16",
      "B4 --\u003e B17",
      "B4 --\u003e B18",
      "B5 --\u003e B6",
      "B5 --\u003e B19",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B15",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B15 --\u003e B19",
      "B16 --\u003e B19",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DOMNodePointer#getNamespaceURI(...0)",
        "body": "{\r\n    return getNamespaceURI(node);\r\n}"
      },
      {
        "name": "DOMNodePointer#escape(...1)",
        "body": "(source not found)"
      },
      {
        "name": "DOMNodePointer#getNamespaceResolver(...0)",
        "body": "{\r\n    if (localNamespaceResolver \u003d\u003d null) {\r\n        localNamespaceResolver \u003d new NamespaceResolver(super.getNamespaceResolver());\r\n        localNamespaceResolver.setNamespaceContextPointer(this);\r\n    }\r\n    return localNamespaceResolver;\r\n}"
      },
      {
        "name": "DOMNodePointer#getRelativePositionOfElement(...0)",
        "body": "{\r\n    int count \u003d 1;\r\n    Node n \u003d node.getPreviousSibling();\r\n    while (n !\u003d null) {\r\n        if (n.getNodeType() \u003d\u003d Node.ELEMENT_NODE) {\r\n            count++;\r\n        }\r\n        n \u003d n.getPreviousSibling();\r\n    }\r\n    return count;\r\n}"
      },
      {
        "name": "DOMNodePointer#getRelativePositionOfPI(...0)",
        "body": "{\r\n    int count \u003d 1;\r\n    final String target \u003d ((ProcessingInstruction) node).getTarget();\r\n    Node n \u003d node.getPreviousSibling();\r\n    while (n !\u003d null) {\r\n        if (n.getNodeType() \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE \u0026\u0026 ((ProcessingInstruction) n).getTarget().equals(target)) {\r\n            count++;\r\n        }\r\n        n \u003d n.getPreviousSibling();\r\n    }\r\n    return count;\r\n}"
      },
      {
        "name": "DOMNodePointer#getRelativePositionByQName(...0)",
        "body": "{\r\n    int count \u003d 1;\r\n    Node n \u003d node.getPreviousSibling();\r\n    while (n !\u003d null) {\r\n        if (n.getNodeType() \u003d\u003d Node.ELEMENT_NODE \u0026\u0026 matchesQName(n)) {\r\n            count++;\r\n        }\r\n        n \u003d n.getPreviousSibling();\r\n    }\r\n    return count;\r\n}"
      },
      {
        "name": "DOMNodePointer#getRelativePositionOfTextNode(...0)",
        "body": "{\r\n    int count \u003d 1;\r\n    Node n \u003d node.getPreviousSibling();\r\n    while (n !\u003d null) {\r\n        if (n.getNodeType() \u003d\u003d Node.TEXT_NODE || n.getNodeType() \u003d\u003d Node.CDATA_SECTION_NODE) {\r\n            count++;\r\n        }\r\n        n \u003d n.getPreviousSibling();\r\n    }\r\n    return count;\r\n}"
      },
      {
        "name": "DOMNodePointer#getLocalName(...1)",
        "body": "{\r\n    final String localName \u003d node.getLocalName();\r\n    if (localName !\u003d null) {\r\n        return localName;\r\n    }\r\n    final String name \u003d node.getNodeName();\r\n    final int index \u003d name.lastIndexOf(\u0027:\u0027);\r\n    return index \u003c 0 ? name : name.substring(index + 1);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer",
    "methodName": "compareChildNodePointers",
    "signature": "int compareChildNodePointers(org.apache.commons.jxpath.ri.model.NodePointer,org.apache.commons.jxpath.ri.model.NodePointer)",
    "visibility": "public",
    "body": "{\r\n    final Node node1 \u003d (Node) pointer1.getBaseValue();\r\n    final Node node2 \u003d (Node) pointer2.getBaseValue();\r\n    if (node1 \u003d\u003d node2) {\r\n        return 0;\r\n    }\r\n    final int t1 \u003d node1.getNodeType();\r\n    final int t2 \u003d node2.getNodeType();\r\n    if (t1 \u003d\u003d Node.ATTRIBUTE_NODE \u0026\u0026 t2 !\u003d Node.ATTRIBUTE_NODE) {\r\n        return -1;\r\n    }\r\n    if (t1 !\u003d Node.ATTRIBUTE_NODE \u0026\u0026 t2 \u003d\u003d Node.ATTRIBUTE_NODE) {\r\n        return 1;\r\n    }\r\n    if (t1 \u003d\u003d Node.ATTRIBUTE_NODE \u0026\u0026 t2 \u003d\u003d Node.ATTRIBUTE_NODE) {\r\n        final NamedNodeMap map \u003d ((Node) getNode()).getAttributes();\r\n        final int length \u003d map.getLength();\r\n        for (int i \u003d 0; i \u003c length; i++) {\r\n            final Node n \u003d map.item(i);\r\n            if (n \u003d\u003d node1) {\r\n                return -1;\r\n            }\r\n            if (n \u003d\u003d node2) {\r\n                return 1;\r\n            }\r\n        }\r\n        // Should not happen\r\n        return 0;\r\n    }\r\n    Node current \u003d node.getFirstChild();\r\n    while (current !\u003d null) {\r\n        if (current \u003d\u003d node1) {\r\n            return -1;\r\n        }\r\n        if (current \u003d\u003d node2) {\r\n            return 1;\r\n        }\r\n        current \u003d current.getNextSibling();\r\n    }\r\n    return 0;\r\n}",
    "nodes": 26,
    "edges": 30,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r2 !\u003d r5) → B1 | else → B2",
      "B2 : If($i4 !\u003d 2) → B3 | else → B5",
      "B3 : If($i5 \u003d\u003d 2) → B4 | else → B5",
      "B5 : If($i8 \u003d\u003d 2) → B6 | else → B8",
      "B6 : If($i9 !\u003d 2) → B7 | else → B8",
      "B8 : If($i10 !\u003d 2) → B9 | else → B18",
      "B9 : If($i11 !\u003d 2) → B10 | else → B18",
      "B11 : If(i3 \u003e\u003d i2) → B12 | else → B17",
      "B12 : If(r10 !\u003d r2) → B13 | else → B14",
      "B14 : If(r10 !\u003d r5) → B15 | else → B16",
      "B19 : If(r12 \u003d\u003d null) → B20 | else → B25",
      "B20 : If(r12 !\u003d r2) → B21 | else → B22",
      "B22 : If(r12 !\u003d r5) → B23 | else → B24"
    ],
    "blockList": [
      "B0 {\n  DOMNodePointer\n  NodePointer\n  NodePointer\n  $r1 \u003d r0.getBaseValue()\n  r2 \u003d Node) $r1\n  $r4 \u003d r3.getBaseValue()\n  r5 \u003d Node) $r4\n  if (r2 !\u003d r5) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  s0 \u003d r2.getNodeType()\n  s1 \u003d r5.getNodeType()\n  $i4 \u003d (int) s0\n  if ($i4 !\u003d 2) goto B3 else B5\n}",
      "B3 {\n  $i5 \u003d (int) s1\n  if ($i5 \u003d\u003d 2) goto B4 else B5\n}",
      "B4 {\n  $i7 \u003d (int) -1\n  return\n}",
      "B5 {\n  $i8 \u003d (int) s0\n  if ($i8 \u003d\u003d 2) goto B6 else B8\n}",
      "B6 {\n  $i9 \u003d (int) s1\n  if ($i9 !\u003d 2) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $i10 \u003d (int) s0\n  if ($i10 !\u003d 2) goto B9 else B18\n}",
      "B9 {\n  $i11 \u003d (int) s1\n  if ($i11 !\u003d 2) goto B10 else B18\n}",
      "B10 {\n  $r8 \u003d r6.getNode()\n  $r9 \u003d Node) $r8\n  r11 \u003d $r9.getAttributes()\n  i2 \u003d r11.getLength()\n  i3 \u003d 0\n}",
      "B11 {\n  if (i3 \u003e\u003d i2) goto B12 else B17\n}",
      "B12 {\n  r10 \u003d r11.item(i3)\n  if (r10 !\u003d r2) goto B13 else B14\n}",
      "B13 {\n  $i13 \u003d (int) -1\n  return\n}",
      "B14 {\n  if (r10 !\u003d r5) goto B15 else B16\n}",
      "B15 {\n  return\n}",
      "B16 {\n  i3 \u003d i3 + 1\n  goto B11\n}",
      "B17 {\n  return\n}",
      "B18 {\n  $r7 \u003d Node node\u003e\n  r12 \u003d $r7.getFirstChild()\n}",
      "B19 {\n  if (r12 \u003d\u003d null) goto B20 else B25\n}",
      "B20 {\n  if (r12 !\u003d r2) goto B21 else B22\n}",
      "B21 {\n  $i15 \u003d (int) -1\n  return\n}",
      "B22 {\n  if (r12 !\u003d r5) goto B23 else B24\n}",
      "B23 {\n  return\n}",
      "B24 {\n  r12 \u003d r12.getNextSibling()\n  goto B19\n}",
      "B25 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B18",
      "B9 --\u003e B10",
      "B9 --\u003e B18",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B17",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B11",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B19 --\u003e B25",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e [EXIT]",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e [EXIT]",
      "B24 --\u003e B19",
      "B25 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DOMNodePointer#getNode(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer",
    "methodName": "createAttribute",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createAttribute(org.apache.commons.jxpath.JXPathContext,org.apache.commons.jxpath.ri.QName)",
    "visibility": "public",
    "body": "{\r\n    if (!(node instanceof Element)) {\r\n        return super.createAttribute(context, qName);\r\n    }\r\n    final Element element \u003d (Element) node;\r\n    final String prefix \u003d qName.getPrefix();\r\n    if (prefix !\u003d null) {\r\n        String ns \u003d null;\r\n        final NamespaceResolver nsr \u003d getNamespaceResolver();\r\n        if (nsr !\u003d null) {\r\n            ns \u003d nsr.getNamespaceURI(prefix);\r\n        }\r\n        if (ns \u003d\u003d null) {\r\n            throw new JXPathException(\"Unknown namespace prefix: \" + prefix);\r\n        }\r\n        element.setAttributeNS(ns, qName.toString(), \"\");\r\n    } else if (!element.hasAttribute(qName.getName())) {\r\n        element.setAttribute(qName.getName(), \"\");\r\n    }\r\n    final NodeIterator it \u003d attributeIterator(qName);\r\n    it.setPosition(1);\r\n    return it.getNodePointer();\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If(r5 \u003d\u003d null) → B3 | else → B8",
      "B3 : If(r8 \u003d\u003d null) → B4 | else → B5",
      "B5 : If(r17 !\u003d null) → B6 | else → B7",
      "B8 : If($z1 !\u003d 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  DOMNodePointer\n  JXPathContext\n  QName\n  $r1 \u003d Node node\u003e\n  $z0 \u003d Element\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r16 \u003d r0.createAttribute(r15, r4)\n  return\n}",
      "B2 {\n  $r2 \u003d Node node\u003e\n  r3 \u003d Element) $r2\n  r5 \u003d r4.getPrefix()\n  if (r5 \u003d\u003d null) goto B3 else B8\n}",
      "B3 {\n  r17 \u003d null\n  r8 \u003d r0.getNamespaceResolver()\n  if (r8 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  r17 \u003d r8.getNamespaceURI(r5)\n}",
      "B5 {\n  if (r17 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r10 \u003d JXPathException\n  $r11 \u003d StringBuilder\n  new StringBuilder()\n  $r12 \u003d $r11.append(\"Unknown namespace prefix: \")\n  $r13 \u003d $r12.append(r5)\n  $r14 \u003d $r13.toString()\n  new JXPathException($r14)\n  throw $r10\n}",
      "B7 {\n  $r9 \u003d r4.toString()\n  r3.setAttributeNS(r17, $r9, \"\")\n  goto B10\n}",
      "B8 {\n  $r6 \u003d r4.getName()\n  $z1 \u003d r3.hasAttribute($r6)\n  if ($z1 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  $r7 \u003d r4.getName()\n  r3.setAttribute($r7, \"\")\n}",
      "B10 {\n  $r18 \u003d r0.attributeIterator(r4)\n  $r18.setPosition(1)\n  $r19 \u003d $r18.getNodePointer()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B8",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DOMNodePointer#getNamespaceResolver(...0)",
        "body": "{\r\n    if (localNamespaceResolver \u003d\u003d null) {\r\n        localNamespaceResolver \u003d new NamespaceResolver(super.getNamespaceResolver());\r\n        localNamespaceResolver.setNamespaceContextPointer(this);\r\n    }\r\n    return localNamespaceResolver;\r\n}"
      },
      {
        "name": "DOMNodePointer#attributeIterator(...1)",
        "body": "{\r\n    return new DOMAttributeIterator(this, qName);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer",
    "methodName": "createChild",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext,org.apache.commons.jxpath.ri.QName,int)",
    "visibility": "public",
    "body": "{\r\n    if (index \u003d\u003d WHOLE_COLLECTION) {\r\n        index \u003d 0;\r\n    }\r\n    final boolean success \u003d getAbstractFactory(context).createObject(context, this, node, qName.toString(), index);\r\n    if (success) {\r\n        NodeTest nodeTest;\r\n        final String prefix \u003d qName.getPrefix();\r\n        final String namespaceURI \u003d prefix \u003d\u003d null ? null : context.getNamespaceURI(prefix);\r\n        nodeTest \u003d new NodeNameTest(qName, namespaceURI);\r\n        final NodeIterator it \u003d childIterator(nodeTest, false, null);\r\n        if (it !\u003d null \u0026\u0026 it.setPosition(index + 1)) {\r\n            return it.getNodePointer();\r\n        }\r\n    }\r\n    throw new JXPathAbstractFactoryException(\"Factory could not create a child node for path: \" + asPath() + \"/\" + qName + \"[\" + (index + 1) + \"]\");\r\n}",
    "nodes": 10,
    "edges": 13,
    "cc": 5,
    "flowSummary": [
      "B0 : If(i1 !\u003d -2147483648) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B9",
      "B3 : If(r6 !\u003d null) → B4 | else → B5",
      "B6 : If($r9 \u003d\u003d null) → B7 | else → B9",
      "B7 : If($z0 \u003d\u003d false) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  DOMNodePointer\n  JXPathContext\n  QName\n  i1 :\u003d @parameter2: int\n  if (i1 !\u003d -2147483648) goto B1 else B2\n}",
      "B1 {\n  i1 \u003d 0\n}",
      "B2 {\n  $r5 \u003d r0.getAbstractFactory(r1)\n  $r3 \u003d Node node\u003e\n  $r4 \u003d r2.toString()\n  $z1 \u003d $r5.createObject(r1, r0, $r3, $r4, i1)\n  if ($z1 \u003d\u003d false) goto B3 else B9\n}",
      "B3 {\n  r6 \u003d r2.getPrefix()\n  if (r6 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r10 \u003d null\n  goto B6\n}",
      "B5 {\n  $r10 \u003d r1.getNamespaceURI(r6)\n}",
      "B6 {\n  $r7 \u003d NodeNameTest\n  new NodeNameTest(r2, $r10)\n  $r9 \u003d r0.childIterator($r7, 0, null)\n  if ($r9 \u003d\u003d null) goto B7 else B9\n}",
      "B7 {\n  $i0 \u003d i1 + 1\n  $z0 \u003d $r9.setPosition($i0)\n  if ($z0 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $r8 \u003d $r9.getNodePointer()\n  return\n}",
      "B9 {\n  $r11 \u003d JXPathAbstractFactoryException\n  $r12 \u003d StringBuilder\n  new StringBuilder()\n  $r13 \u003d $r12.append(\"Factory could not create a child node for path: \")\n  $r14 \u003d r0.asPath()\n  $r15 \u003d $r13.append($r14)\n  $r16 \u003d $r15.append(\"/\")\n  $r17 \u003d $r16.append(r2)\n  $r18 \u003d $r17.append(\"\")\n  $i2 \u003d i1 + 1\n  $r19 \u003d $r18.append($i2)\n  $r20 \u003d $r19.append(\"\")\n  $r21 \u003d $r20.toString()\n  new JXPathAbstractFactoryException($r21)\n  throw $r11\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B9",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DOMNodePointer#asPath(...0)",
        "body": "{\r\n    if (id !\u003d null) {\r\n        return \"id(\u0027\" + escape(id) + \"\u0027)\";\r\n    }\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    if (parent !\u003d null) {\r\n        buffer.append(parent.asPath());\r\n    }\r\n    switch(node.getNodeType()) {\r\n        case Node.ELEMENT_NODE:\r\n            // If the parent pointer is not a DOMNodePointer, it is\r\n            // the parent\u0027s responsibility to produce the node test part\r\n            // of the path\r\n            if (parent instanceof DOMNodePointer) {\r\n                if (buffer.length() \u003d\u003d 0 || buffer.charAt(buffer.length() - 1) !\u003d \u0027/\u0027) {\r\n                    buffer.append(\u0027/\u0027);\r\n                }\r\n                final String ln \u003d getLocalName(node);\r\n                final String nsURI \u003d getNamespaceURI();\r\n                if (nsURI \u003d\u003d null) {\r\n                    buffer.append(ln);\r\n                    buffer.append(\u0027[\u0027);\r\n                    buffer.append(getRelativePositionByQName()).append(\u0027]\u0027);\r\n                } else {\r\n                    final String prefix \u003d getNamespaceResolver().getPrefix(nsURI);\r\n                    if (prefix !\u003d null) {\r\n                        buffer.append(prefix);\r\n                        buffer.append(\u0027:\u0027);\r\n                        buffer.append(ln);\r\n                        buffer.append(\u0027[\u0027);\r\n                        buffer.append(getRelativePositionByQName());\r\n                    } else {\r\n                        buffer.append(\"node()\");\r\n                        buffer.append(\u0027[\u0027);\r\n                        buffer.append(getRelativePositionOfElement());\r\n                    }\r\n                    buffer.append(\u0027]\u0027);\r\n                }\r\n            }\r\n            break;\r\n        case Node.TEXT_NODE:\r\n        case Node.CDATA_SECTION_NODE:\r\n            buffer.append(\"/text()\");\r\n            buffer.append(\u0027[\u0027);\r\n            buffer.append(getRelativePositionOfTextNode()).append(\u0027]\u0027);\r\n            break;\r\n        case Node.PROCESSING_INSTRUCTION_NODE:\r\n            buffer.append(\"/processing-instruction(\\\u0027\");\r\n            buffer.append(((ProcessingInstruction) node).getTarget()).append(\"\u0027)\");\r\n            buffer.append(\u0027[\u0027);\r\n            buffer.append(getRelativePositionOfPI()).append(\u0027]\u0027);\r\n            break;\r\n        case Node.DOCUMENT_NODE:\r\n            // That\u0027ll be empty\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return buffer.toString();\r\n}"
      },
      {
        "name": "DOMNodePointer#childIterator(...3)",
        "body": "{\r\n    return new DOMNodeIterator(this, test, reverse, startWith);\r\n}"
      },
      {
        "name": "DOMNodePointer#getAbstractFactory(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return object \u003d\u003d this || object instanceof DOMNodePointer \u0026\u0026 node \u003d\u003d ((DOMNodePointer) object).node;\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d r1) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B4",
      "B2 : If($r4 !\u003d $r3) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DOMNodePointer\n  Object\n  if (r0 \u003d\u003d r1) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d DOMNodePointer\n  if ($z0 \u003d\u003d false) goto B2 else B4\n}",
      "B2 {\n  $r4 \u003d Node node\u003e\n  $r2 \u003d DOMNodePointer) r0\n  $r3 \u003d Node node\u003e\n  if ($r4 !\u003d $r3) goto B3 else B4\n}",
      "B3 {\n  $z1 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z1 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer",
    "methodName": "getDefaultNamespaceURI",
    "signature": "java.lang.String getDefaultNamespaceURI()",
    "visibility": "public",
    "body": "{\r\n    if (defaultNamespace \u003d\u003d null) {\r\n        Node aNode \u003d node;\r\n        if (aNode instanceof Document) {\r\n            aNode \u003d ((Document) aNode).getDocumentElement();\r\n        }\r\n        while (aNode !\u003d null) {\r\n            if (aNode.getNodeType() \u003d\u003d Node.ELEMENT_NODE) {\r\n                final Attr attr \u003d ((Element) aNode).getAttributeNode(\"xmlns\");\r\n                if (attr !\u003d null) {\r\n                    defaultNamespace \u003d attr.getValue();\r\n                    break;\r\n                }\r\n            }\r\n            aNode \u003d aNode.getParentNode();\r\n        }\r\n    }\r\n    if (defaultNamespace \u003d\u003d null) {\r\n        defaultNamespace \u003d \"\";\r\n    }\r\n    // TBD: We are supposed to resolve relative URIs to absolute ones.\r\n    return defaultNamespace.isEmpty() ? null : defaultNamespace;\r\n}",
    "nodes": 14,
    "edges": 20,
    "cc": 8,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B8",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3",
      "B3 : If(r7 \u003d\u003d null) → B4 | else → B8",
      "B4 : If($s0 !\u003d 1) → B5 | else → B7",
      "B5 : If(r4 \u003d\u003d null) → B6 | else → B7",
      "B8 : If($r8 !\u003d null) → B9 | else → B10",
      "B10 : If($z0 \u003d\u003d false) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  DOMNodePointer\n  $r1 \u003d String defaultNamespace\u003e\n  if ($r1 !\u003d null) goto B1 else B8\n}",
      "B1 {\n  r7 \u003d Node node\u003e\n  $z1 \u003d Document\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d Document) r7\n  r7 \u003d $r6.getDocumentElement()\n}",
      "B3 {\n  if (r7 \u003d\u003d null) goto B4 else B8\n}",
      "B4 {\n  $s0 \u003d r7.getNodeType()\n  if ($s0 !\u003d 1) goto B5 else B7\n}",
      "B5 {\n  $r3 \u003d Element) r7\n  r4 \u003d $r3.getAttributeNode(\"xmlns\")\n  if (r4 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r5 \u003d r4.getValue()\n  String defaultNamespace\u003e \u003d $r5\n  goto B8\n}",
      "B7 {\n  r7 \u003d r7.getParentNode()\n  goto B3\n}",
      "B8 {\n  $r8 \u003d String defaultNamespace\u003e\n  if ($r8 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  String defaultNamespace\u003e \u003d \"\"\n}",
      "B10 {\n  $r2 \u003d String defaultNamespace\u003e\n  $z0 \u003d $r2.isEmpty()\n  if ($z0 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  $r9 \u003d null\n  goto B13\n}",
      "B12 {\n  $r9 \u003d String defaultNamespace\u003e\n}",
      "B13 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B8",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B3",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer",
    "methodName": "getName",
    "signature": "org.apache.commons.jxpath.ri.QName getName()",
    "visibility": "public",
    "body": "{\r\n    String ln \u003d null;\r\n    String ns \u003d null;\r\n    final int type \u003d node.getNodeType();\r\n    if (type \u003d\u003d Node.ELEMENT_NODE) {\r\n        ns \u003d getPrefix(node);\r\n        ln \u003d getLocalName(node);\r\n    } else if (type \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\r\n        ln \u003d ((ProcessingInstruction) node).getTarget();\r\n    }\r\n    return new QName(ns, ln);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(s0 !\u003d 1) → B1 | else → B2",
      "B2 : If($i1 !\u003d 7) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DOMNodePointer\n  r6 \u003d null\n  r7 \u003d null\n  $r1 \u003d Node node\u003e\n  s0 \u003d $r1.getNodeType()\n  if (s0 !\u003d 1) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d Node node\u003e\n  r7 \u003d DOMNodePointer.getPrefix($r4)\n  $r5 \u003d Node node\u003e\n  r6 \u003d DOMNodePointer.getLocalName($r5)\n  goto B4\n}",
      "B2 {\n  $i1 \u003d (int) s0\n  if ($i1 !\u003d 7) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d Node node\u003e\n  $r3 \u003d ProcessingInstruction) $r2\n  r6 \u003d $r3.getTarget()\n}",
      "B4 {\n  $r9 \u003d QName\n  new QName(r7, r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DOMNodePointer#getPrefix(...1)",
        "body": "{\r\n    final String prefix \u003d node.getPrefix();\r\n    if (prefix !\u003d null) {\r\n        return prefix;\r\n    }\r\n    final String name \u003d node.getNodeName();\r\n    final int index \u003d name.lastIndexOf(\u0027:\u0027);\r\n    return index \u003c 0 ? null : name.substring(0, index);\r\n}"
      },
      {
        "name": "DOMNodePointer#getLocalName(...1)",
        "body": "{\r\n    final String localName \u003d node.getLocalName();\r\n    if (localName !\u003d null) {\r\n        return localName;\r\n    }\r\n    final String name \u003d node.getNodeName();\r\n    final int index \u003d name.lastIndexOf(\u0027:\u0027);\r\n    return index \u003c 0 ? name : name.substring(index + 1);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer",
    "methodName": "getNamespaceResolver",
    "signature": "org.apache.commons.jxpath.ri.NamespaceResolver getNamespaceResolver()",
    "visibility": "public",
    "body": "{\r\n    if (localNamespaceResolver \u003d\u003d null) {\r\n        localNamespaceResolver \u003d new NamespaceResolver(super.getNamespaceResolver());\r\n        localNamespaceResolver.setNamespaceContextPointer(this);\r\n    }\r\n    return localNamespaceResolver;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DOMNodePointer\n  $r1 \u003d NamespaceResolver localNamespaceResolver\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d NamespaceResolver\n  $r4 \u003d r0.getNamespaceResolver()\n  new NamespaceResolver($r4)\n  NamespaceResolver localNamespaceResolver\u003e \u003d $r3\n  $r5 \u003d NamespaceResolver localNamespaceResolver\u003e\n  $r5.setNamespaceContextPointer(r0)\n}",
      "B2 {\n  $r2 \u003d NamespaceResolver localNamespaceResolver\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer",
    "methodName": "getNamespaceURI",
    "signature": "java.lang.String getNamespaceURI(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (prefix \u003d\u003d null || prefix.isEmpty()) {\r\n        return getDefaultNamespaceURI();\r\n    }\r\n    if (prefix.equals(\"xml\")) {\r\n        return XML_NAMESPACE_URI;\r\n    }\r\n    if (prefix.equals(\"xmlns\")) {\r\n        return XMLNS_NAMESPACE_URI;\r\n    }\r\n    String namespace \u003d null;\r\n    if (namespaces \u003d\u003d null) {\r\n        namespaces \u003d new HashMap\u003c\u003e();\r\n    } else {\r\n        namespace \u003d namespaces.get(prefix);\r\n    }\r\n    if (namespace \u003d\u003d null) {\r\n        final String qname \u003d \"xmlns:\" + prefix;\r\n        Node aNode \u003d node;\r\n        if (aNode instanceof Document) {\r\n            aNode \u003d ((Document) aNode).getDocumentElement();\r\n        }\r\n        while (aNode !\u003d null) {\r\n            if (aNode.getNodeType() \u003d\u003d Node.ELEMENT_NODE) {\r\n                final Attr attr \u003d ((Element) aNode).getAttributeNode(qname);\r\n                if (attr !\u003d null) {\r\n                    namespace \u003d attr.getValue();\r\n                    break;\r\n                }\r\n            }\r\n            aNode \u003d aNode.getParentNode();\r\n        }\r\n        if (namespace \u003d\u003d null || namespace.isEmpty()) {\r\n            namespace \u003d UNKNOWN_NAMESPACE;\r\n        }\r\n    }\r\n    namespaces.put(prefix, namespace);\r\n    if (namespace \u003d\u003d UNKNOWN_NAMESPACE) {\r\n        return null;\r\n    }\r\n    // TBD: We are supposed to resolve relative URIs to absolute ones.\r\n    return namespace;\r\n}",
    "nodes": 24,
    "edges": 32,
    "cc": 10,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B5",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B7",
      "B7 : If($r3 !\u003d null) → B8 | else → B9",
      "B10 : If(r14 !\u003d null) → B11 | else → B21",
      "B11 : If($z3 \u003d\u003d false) → B12 | else → B13",
      "B13 : If(r15 \u003d\u003d null) → B14 | else → B18",
      "B14 : If($s0 !\u003d 1) → B15 | else → B17",
      "B15 : If(r11 \u003d\u003d null) → B16 | else → B17",
      "B18 : If(r14 \u003d\u003d null) → B19 | else → B20",
      "B19 : If($z4 \u003d\u003d false) → B20 | else → B21",
      "B21 : If(r14 !\u003d \"\u003c\u003cunknown namespace\u003e\u003e\") → B22 | else → B23"
    ],
    "blockList": [
      "B0 {\n  DOMNodePointer\n  String\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r1.getDefaultNamespaceURI()\n  return\n}",
      "B3 {\n  $z1 \u003d r0.equals(\"xml\")\n  if ($z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $z2 \u003d r0.equals(\"xmlns\")\n  if ($z2 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  r14 \u003d null\n  $r3 \u003d Map namespaces\u003e\n  if ($r3 !\u003d null) goto B8 else B9\n}",
      "B8 {\n  $r13 \u003d HashMap\n  new HashMap()\n  Map namespaces\u003e \u003d $r13\n  goto B10\n}",
      "B9 {\n  $r4 \u003d Map namespaces\u003e\n  $r5 \u003d $r4.get(r0)\n  r14 \u003d String) $r5\n}",
      "B10 {\n  if (r14 !\u003d null) goto B11 else B21\n}",
      "B11 {\n  $r6 \u003d StringBuilder\n  new StringBuilder()\n  $r7 \u003d $r6.append(\"xmlns:\")\n  $r8 \u003d $r7.append(r0)\n  r9 \u003d $r8.toString()\n  r15 \u003d Node node\u003e\n  $z3 \u003d Document\n  if ($z3 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $r12 \u003d Document) r15\n  r15 \u003d $r12.getDocumentElement()\n}",
      "B13 {\n  if (r15 \u003d\u003d null) goto B14 else B18\n}",
      "B14 {\n  $s0 \u003d r15.getNodeType()\n  if ($s0 !\u003d 1) goto B15 else B17\n}",
      "B15 {\n  $r10 \u003d Element) r15\n  r11 \u003d $r10.getAttributeNode(r9)\n  if (r11 \u003d\u003d null) goto B16 else B17\n}",
      "B16 {\n  r14 \u003d r11.getValue()\n  goto B18\n}",
      "B17 {\n  r15 \u003d r15.getParentNode()\n  goto B13\n}",
      "B18 {\n  if (r14 \u003d\u003d null) goto B19 else B20\n}",
      "B19 {\n  $z4 \u003d r14.isEmpty()\n  if ($z4 \u003d\u003d false) goto B20 else B21\n}",
      "B20 {\n  r14 \u003d \"\u003c\u003cunknown namespace\u003e\u003e\"\n}",
      "B21 {\n  $r16 \u003d Map namespaces\u003e\n  $r16.put(r0, r14)\n  if (r14 !\u003d \"\u003c\u003cunknown namespace\u003e\u003e\") goto B22 else B23\n}",
      "B22 {\n  return\n}",
      "B23 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B21",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B18",
      "B14 --\u003e B15",
      "B14 --\u003e B17",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B13",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B21",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e [EXIT]",
      "B23 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DOMNodePointer#getDefaultNamespaceURI(...0)",
        "body": "{\r\n    if (defaultNamespace \u003d\u003d null) {\r\n        Node aNode \u003d node;\r\n        if (aNode instanceof Document) {\r\n            aNode \u003d ((Document) aNode).getDocumentElement();\r\n        }\r\n        while (aNode !\u003d null) {\r\n            if (aNode.getNodeType() \u003d\u003d Node.ELEMENT_NODE) {\r\n                final Attr attr \u003d ((Element) aNode).getAttributeNode(\"xmlns\");\r\n                if (attr !\u003d null) {\r\n                    defaultNamespace \u003d attr.getValue();\r\n                    break;\r\n                }\r\n            }\r\n            aNode \u003d aNode.getParentNode();\r\n        }\r\n    }\r\n    if (defaultNamespace \u003d\u003d null) {\r\n        defaultNamespace \u003d \"\";\r\n    }\r\n    // TBD: We are supposed to resolve relative URIs to absolute ones.\r\n    return defaultNamespace.isEmpty() ? null : defaultNamespace;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer",
    "methodName": "getPointerByID",
    "signature": "org.apache.commons.jxpath.Pointer getPointerByID(org.apache.commons.jxpath.JXPathContext,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    final Document document \u003d node.getNodeType() \u003d\u003d Node.DOCUMENT_NODE ? (Document) node : node.getOwnerDocument();\r\n    final Element element \u003d document.getElementById(id);\r\n    return element \u003d\u003d null ? (Pointer) new NullPointer(getLocale(), id) : new DOMNodePointer(element, getLocale(), id);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i1 !\u003d 9) → B1 | else → B2",
      "B3 : If($r7 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  DOMNodePointer\n  JXPathContext\n  String\n  $r1 \u003d Node node\u003e\n  $s0 \u003d $r1.getNodeType()\n  $i1 \u003d (int) $s0\n  if ($i1 !\u003d 9) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d Node node\u003e\n  $r9 \u003d Document) $r6\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Node node\u003e\n  $r9 \u003d $r2.getOwnerDocument()\n}",
      "B3 {\n  $r7 \u003d $r9.getElementById(r3)\n  if ($r7 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r11 \u003d NullPointer\n  $r10 \u003d $r11\n  $r5 \u003d r0.getLocale()\n  new NullPointer($r5, r3)\n  goto B6\n}",
      "B5 {\n  $r12 \u003d DOMNodePointer\n  $r10 \u003d $r12\n  $r4 \u003d r0.getLocale()\n  new DOMNodePointer($r7, $r4, r3)\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DOMNodePointer#getLocale(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer",
    "methodName": "getValue",
    "signature": "java.lang.Object getValue()",
    "visibility": "public",
    "body": "{\r\n    if (node.getNodeType() \u003d\u003d Node.COMMENT_NODE) {\r\n        final String text \u003d ((Comment) node).getData();\r\n        return text \u003d\u003d null ? \"\" : text.trim();\r\n    }\r\n    return stringValue(node);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 !\u003d 8) → B1 | else → B5",
      "B1 : If(r6 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DOMNodePointer\n  $r1 \u003d Node node\u003e\n  $s0 \u003d $r1.getNodeType()\n  $i1 \u003d (int) $s0\n  if ($i1 !\u003d 8) goto B1 else B5\n}",
      "B1 {\n  $r4 \u003d Node node\u003e\n  $r5 \u003d Comment) $r4\n  r6 \u003d $r5.getData()\n  if (r6 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d \"\"\n  goto B4\n}",
      "B3 {\n  $r7 \u003d r6.trim()\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r2 \u003d Node node\u003e\n  $r3 \u003d r0.stringValue($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DOMNodePointer#stringValue(...1)",
        "body": "{\r\n    final int nodeType \u003d node.getNodeType();\r\n    if (nodeType \u003d\u003d Node.COMMENT_NODE) {\r\n        return \"\";\r\n    }\r\n    final boolean trim \u003d !\"preserve\".equals(findEnclosingAttribute(node, \"xml:space\"));\r\n    if (nodeType \u003d\u003d Node.TEXT_NODE || nodeType \u003d\u003d Node.CDATA_SECTION_NODE) {\r\n        final String text \u003d node.getNodeValue();\r\n        return text \u003d\u003d null ? \"\" : trim ? text.trim() : text;\r\n    }\r\n    if (nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\r\n        final String text \u003d ((ProcessingInstruction) node).getData();\r\n        return text \u003d\u003d null ? \"\" : trim ? text.trim() : text;\r\n    }\r\n    final NodeList list \u003d node.getChildNodes();\r\n    final StringBuilder buf \u003d new StringBuilder();\r\n    for (int i \u003d 0; i \u003c list.getLength(); i++) {\r\n        final Node child \u003d list.item(i);\r\n        buf.append(stringValue(child));\r\n    }\r\n    return buf.toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer",
    "methodName": "isLanguage",
    "signature": "boolean isLanguage(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    final String current \u003d getLanguage();\r\n    return current \u003d\u003d null ? super.isLanguage(lang) : current.toUpperCase(Locale.ENGLISH).startsWith(lang.toUpperCase(Locale.ENGLISH));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DOMNodePointer\n  String\n  r1 \u003d r0.getLanguage()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r0.isLanguage(r3)\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Locale ENGLISH\u003e\n  $r6 \u003d r1.toUpperCase($r2)\n  $r4 \u003d Locale ENGLISH\u003e\n  $r5 \u003d r3.toUpperCase($r4)\n  $z0 \u003d $r6.startsWith($r5)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DOMNodePointer#getLanguage(...0)",
        "body": "{\r\n    return findEnclosingAttribute(node, \"xml:lang\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer",
    "methodName": "isLeaf",
    "signature": "boolean isLeaf()",
    "visibility": "public",
    "body": "{\r\n    return !node.hasChildNodes();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DOMNodePointer\n  $r1 \u003d Node node\u003e\n  $z0 \u003d $r1.hasChildNodes()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer",
    "methodName": "remove",
    "signature": "void remove()",
    "visibility": "public",
    "body": "{\r\n    final Node parent \u003d node.getParentNode();\r\n    if (parent \u003d\u003d null) {\r\n        throw new JXPathException(\"Cannot remove root DOM node\");\r\n    }\r\n    parent.removeChild(node);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DOMNodePointer\n  $r1 \u003d Node node\u003e\n  r2 \u003d $r1.getParentNode()\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d JXPathException\n  new JXPathException(\"Cannot remove root DOM node\")\n  throw $r4\n}",
      "B2 {\n  $r3 \u003d Node node\u003e\n  r2.removeChild($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer",
    "methodName": "setValue",
    "signature": "void setValue(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (node.getNodeType() \u003d\u003d Node.TEXT_NODE || node.getNodeType() \u003d\u003d Node.CDATA_SECTION_NODE) {\r\n        final String string \u003d (String) TypeUtils.convert(value, String.class);\r\n        if (string !\u003d null \u0026\u0026 !string.isEmpty()) {\r\n            node.setNodeValue(string);\r\n        } else {\r\n            node.getParentNode().removeChild(node);\r\n        }\r\n    } else {\r\n        NodeList children \u003d node.getChildNodes();\r\n        final int count \u003d children.getLength();\r\n        for (int i \u003d count; --i \u003e\u003d 0; ) {\r\n            final Node child \u003d children.item(i);\r\n            node.removeChild(child);\r\n        }\r\n        if (value instanceof Node) {\r\n            final Node valueNode \u003d (Node) value;\r\n            if (valueNode instanceof Element || valueNode instanceof Document) {\r\n                children \u003d valueNode.getChildNodes();\r\n                for (int i \u003d 0; i \u003c children.getLength(); i++) {\r\n                    final Node child \u003d children.item(i);\r\n                    node.appendChild(child.cloneNode(true));\r\n                }\r\n            } else {\r\n                node.appendChild(valueNode.cloneNode(true));\r\n            }\r\n        } else {\r\n            final String string \u003d (String) TypeUtils.convert(value, String.class);\r\n            if (string !\u003d null \u0026\u0026 !string.isEmpty()) {\r\n                final Node textNode \u003d node.getOwnerDocument().createTextNode(string);\r\n                node.appendChild(textNode);\r\n            }\r\n        }\r\n    }\r\n}",
    "nodes": 23,
    "edges": 33,
    "cc": 12,
    "flowSummary": [
      "B0 : If($i6 \u003d\u003d 3) → B1 | else → B2",
      "B1 : If($i7 !\u003d 4) → B2 | else → B7",
      "B2 : If($r21 \u003d\u003d null) → B3 | else → B5",
      "B3 : If($z0 !\u003d 0) → B4 | else → B5",
      "B8 : If(i3 \u003c 0) → B9 | else → B10",
      "B10 : If($z1 \u003d\u003d false) → B11 | else → B19",
      "B11 : If($z3 !\u003d 0) → B12 | else → B13",
      "B12 : If($z4 \u003d\u003d false) → B13 | else → B17",
      "B14 : If(i4 \u003e\u003d $i5) → B15 | else → B16",
      "B19 : If(r25 \u003d\u003d null) → B20 | else → B22",
      "B20 : If($z2 !\u003d 0) → B21 | else → B22"
    ],
    "blockList": [
      "B0 {\n  DOMNodePointer\n  Object\n  $r1 \u003d Node node\u003e\n  $s0 \u003d $r1.getNodeType()\n  $i6 \u003d (int) $s0\n  if ($i6 \u003d\u003d 3) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d Node node\u003e\n  $s1 \u003d $r8.getNodeType()\n  $i7 \u003d (int) $s1\n  if ($i7 !\u003d 4) goto B2 else B7\n}",
      "B2 {\n  $r3 \u003d TypeUtils.convert(r2, class \"Ljava/lang/String;\")\n  $r21 \u003d String) $r3\n  if ($r21 \u003d\u003d null) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d $r21.isEmpty()\n  if ($z0 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r7 \u003d Node node\u003e\n  $r7.setNodeValue($r21)\n  goto B6\n}",
      "B5 {\n  $r4 \u003d Node node\u003e\n  $r6 \u003d $r4.getParentNode()\n  $r5 \u003d Node node\u003e\n  $r6.removeChild($r5)\n}",
      "B6 {\n  goto B22\n}",
      "B7 {\n  $r9 \u003d Node node\u003e\n  r22 \u003d $r9.getChildNodes()\n  i2 \u003d r22.getLength()\n  i3 \u003d i2\n}",
      "B8 {\n  $i9 \u003d (int) -1\n  i3 \u003d i3 + $i9\n  if (i3 \u003c 0) goto B9 else B10\n}",
      "B9 {\n  r23 \u003d r22.item(i3)\n  $r20 \u003d Node node\u003e\n  $r20.removeChild(r23)\n  goto B8\n}",
      "B10 {\n  $z1 \u003d Node\n  if ($z1 \u003d\u003d false) goto B11 else B19\n}",
      "B11 {\n  r24 \u003d Node) r2\n  $z3 \u003d Element\n  if ($z3 !\u003d 0) goto B12 else B13\n}",
      "B12 {\n  $z4 \u003d Document\n  if ($z4 \u003d\u003d false) goto B13 else B17\n}",
      "B13 {\n  $r19 \u003d r24.getChildNodes()\n  i4 \u003d 0\n}",
      "B14 {\n  $i5 \u003d $r19.getLength()\n  if (i4 \u003e\u003d $i5) goto B15 else B16\n}",
      "B15 {\n  r14 \u003d $r19.item(i4)\n  $r15 \u003d Node node\u003e\n  $r16 \u003d r14.cloneNode(1)\n  $r15.appendChild($r16)\n  i4 \u003d i4 + 1\n  goto B14\n}",
      "B16 {\n  goto B18\n}",
      "B17 {\n  $r17 \u003d Node node\u003e\n  $r18 \u003d r24.cloneNode(1)\n  $r17.appendChild($r18)\n}",
      "B18 {\n  goto B22\n}",
      "B19 {\n  $r10 \u003d TypeUtils.convert(r2, class \"Ljava/lang/String;\")\n  r25 \u003d String) $r10\n  if (r25 \u003d\u003d null) goto B20 else B22\n}",
      "B20 {\n  $z2 \u003d r25.isEmpty()\n  if ($z2 !\u003d 0) goto B21 else B22\n}",
      "B21 {\n  $r11 \u003d Node node\u003e\n  $r12 \u003d $r11.getOwnerDocument()\n  r26 \u003d $r12.createTextNode(r25)\n  $r13 \u003d Node node\u003e\n  $r13.appendChild(r26)\n}",
      "B22 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B22",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B8",
      "B10 --\u003e B11",
      "B10 --\u003e B19",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B12 --\u003e B17",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B14",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e B22",
      "B19 --\u003e B20",
      "B19 --\u003e B22",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B22 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMPointerFactory",
    "methodName": "createNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createNodePointer(org.apache.commons.jxpath.ri.model.NodePointer,org.apache.commons.jxpath.ri.QName,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return bean instanceof Node ? new DOMNodePointer(parent, (Node) bean) : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DOMPointerFactory\n  NodePointer\n  QName\n  Object\n  $z0 \u003d Node\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d DOMNodePointer\n  $r2 \u003d Node) r0\n  new DOMNodePointer(r1, $r2)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.DOMPointerFactory",
    "methodName": "createNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createNodePointer(org.apache.commons.jxpath.ri.QName,java.lang.Object,java.util.Locale)",
    "visibility": "public",
    "body": "{\r\n    return bean instanceof Node ? new DOMNodePointer((Node) bean, locale) : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DOMPointerFactory\n  QName\n  Object\n  Locale\n  $z0 \u003d Node\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d DOMNodePointer\n  $r2 \u003d Node) r0\n  new DOMNodePointer($r2, r1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.NamespacePointer",
    "methodName": "asPath",
    "signature": "java.lang.String asPath()",
    "visibility": "public",
    "body": "{\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    if (parent !\u003d null) {\r\n        buffer.append(parent.asPath());\r\n        if (buffer.length() \u003d\u003d 0 || buffer.charAt(buffer.length() - 1) !\u003d \u0027/\u0027) {\r\n            buffer.append(\u0027/\u0027);\r\n        }\r\n    }\r\n    buffer.append(\"namespace::\");\r\n    buffer.append(prefix);\r\n    return buffer.toString();\r\n}",
    "nodes": 5,
    "edges": 7,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B4",
      "B1 : If($i0 \u003d\u003d false) → B2 | else → B3",
      "B2 : If($i4 \u003d\u003d 47) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  NamespacePointer\n  $r7 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d NodePointer parent\u003e\n  if ($r2 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r3 \u003d NodePointer parent\u003e\n  $r4 \u003d $r3.asPath()\n  $r7.append($r4)\n  $i0 \u003d $r7.length()\n  if ($i0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d $r7.length()\n  $i2 \u003d $i1 - 1\n  $c3 \u003d $r7.charAt($i2)\n  $i4 \u003d (int) $c3\n  if ($i4 \u003d\u003d 47) goto B3 else B4\n}",
      "B3 {\n  $r7.append(47)\n}",
      "B4 {\n  $r7.append(\"namespace::\")\n  $r5 \u003d String prefix\u003e\n  $r7.append($r5)\n  $r6 \u003d $r7.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.NamespacePointer",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (!(object instanceof NamespacePointer)) {\r\n        return false;\r\n    }\r\n    final NamespacePointer other \u003d (NamespacePointer) object;\r\n    return prefix.equals(other.prefix);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  NamespacePointer\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d NamespacePointer\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d NamespacePointer) r0\n  $r4 \u003d String prefix\u003e\n  $r3 \u003d String prefix\u003e\n  $z1 \u003d $r4.equals($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.NamespacePointer",
    "methodName": "getNamespaceURI",
    "signature": "java.lang.String getNamespaceURI()",
    "visibility": "public",
    "body": "{\r\n    if (namespaceURI \u003d\u003d null) {\r\n        namespaceURI \u003d parent.getNamespaceURI(prefix);\r\n    }\r\n    return namespaceURI;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NamespacePointer\n  $r1 \u003d String namespaceURI\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d NodePointer parent\u003e\n  $r3 \u003d String prefix\u003e\n  $r5 \u003d $r4.getNamespaceURI($r3)\n  String namespaceURI\u003e \u003d $r5\n}",
      "B2 {\n  $r2 \u003d String namespaceURI\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dom.NamespacePointer",
    "methodName": "testNode",
    "signature": "boolean testNode(org.apache.commons.jxpath.ri.compiler.NodeTest)",
    "visibility": "public",
    "body": "{\r\n    return nodeTest \u003d\u003d null || nodeTest instanceof NodeTypeTest \u0026\u0026 ((NodeTypeTest) nodeTest).getNodeType() \u003d\u003d Compiler.NODE_TYPE_NODE;\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B4",
      "B2 : If($i0 !\u003d 1) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  NamespacePointer\n  NodeTest\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d NodeTypeTest\n  if ($z0 \u003d\u003d false) goto B2 else B4\n}",
      "B2 {\n  $r1 \u003d NodeTypeTest) r0\n  $i0 \u003d $r1.getNodeType()\n  if ($i0 !\u003d 1) goto B3 else B4\n}",
      "B3 {\n  $z1 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z1 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointer",
    "methodName": "asPath",
    "signature": "java.lang.String asPath()",
    "visibility": "public",
    "body": "{\r\n    return parent \u003d\u003d null ? \"/\" : super.asPath();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DynaBeanPointer\n  $r1 \u003d NodePointer parent\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d \"/\"\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r0.asPath()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointer",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (!(object instanceof DynaBeanPointer)) {\r\n        return false;\r\n    }\r\n    final DynaBeanPointer other \u003d (DynaBeanPointer) object;\r\n    if (!(Objects.equals(parent, other.parent) \u0026\u0026 Objects.equals(qName, other.qName))) {\r\n        return false;\r\n    }\r\n    final int iThis \u003d index \u003d\u003d WHOLE_COLLECTION ? 0 : index;\r\n    final int iOther \u003d other.index \u003d\u003d WHOLE_COLLECTION ? 0 : other.index;\r\n    return iThis \u003d\u003d iOther \u0026\u0026 dynaBean \u003d\u003d other.dynaBean;\r\n}",
    "nodes": 18,
    "edges": 22,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6",
      "B5 : If($z2 !\u003d 0) → B6 | else → B7",
      "B7 : If($i0 !\u003d -2147483648) → B8 | else → B9",
      "B10 : If($i2 !\u003d -2147483648) → B11 | else → B12",
      "B13 : If(i1 !\u003d $i4) → B14 | else → B16",
      "B14 : If($r8 !\u003d $r7) → B15 | else → B16"
    ],
    "blockList": [
      "B0 {\n  DynaBeanPointer\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d DynaBeanPointer\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d DynaBeanPointer) r0\n  $r4 \u003d NodePointer parent\u003e\n  $r3 \u003d NodePointer parent\u003e\n  $z1 \u003d Objects.equals($r4, $r3)\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r6 \u003d QName qName\u003e\n  $r5 \u003d QName qName\u003e\n  $z2 \u003d Objects.equals($r6, $r5)\n  if ($z2 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $i0 \u003d DynaBeanPointer: int index\u003e\n  if ($i0 !\u003d -2147483648) goto B8 else B9\n}",
      "B8 {\n  $i3 \u003d 0\n  goto B10\n}",
      "B9 {\n  $i3 \u003d DynaBeanPointer: int index\u003e\n}",
      "B10 {\n  i1 \u003d $i3\n  $i2 \u003d DynaBeanPointer: int index\u003e\n  if ($i2 !\u003d -2147483648) goto B11 else B12\n}",
      "B11 {\n  $i4 \u003d 0\n  goto B13\n}",
      "B12 {\n  $i4 \u003d DynaBeanPointer: int index\u003e\n}",
      "B13 {\n  if (i1 !\u003d $i4) goto B14 else B16\n}",
      "B14 {\n  $r8 \u003d DynaBean dynaBean\u003e\n  $r7 \u003d DynaBean dynaBean\u003e\n  if ($r8 !\u003d $r7) goto B15 else B16\n}",
      "B15 {\n  $z3 \u003d 1\n  goto B17\n}",
      "B16 {\n  $z3 \u003d 0\n}",
      "B17 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B16",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointer",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    return qName \u003d\u003d null ? 0 : qName.hashCode();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DynaBeanPointer\n  $r1 \u003d QName qName\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d 0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d QName qName\u003e\n  $i0 \u003d $r2.hashCode()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointerFactory",
    "methodName": "createNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createNodePointer(org.apache.commons.jxpath.ri.model.NodePointer,org.apache.commons.jxpath.ri.QName,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return bean instanceof DynaBean ? new DynaBeanPointer(parent, qName, (DynaBean) bean) : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DynaBeanPointerFactory\n  NodePointer\n  QName\n  Object\n  $z0 \u003d DynaBean\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d DynaBeanPointer\n  $r3 \u003d DynaBean) r0\n  new DynaBeanPointer(r1, r2, $r3)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointerFactory",
    "methodName": "createNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createNodePointer(org.apache.commons.jxpath.ri.QName,java.lang.Object,java.util.Locale)",
    "visibility": "public",
    "body": "{\r\n    return bean instanceof DynaBean ? new DynaBeanPointer(qName, (DynaBean) bean, locale) : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DynaBeanPointerFactory\n  QName\n  Object\n  Locale\n  $z0 \u003d DynaBean\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d DynaBeanPointer\n  $r3 \u003d DynaBean) r0\n  new DynaBeanPointer(r1, $r3, r2)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPropertyPointer",
    "methodName": "getImmediateNode",
    "signature": "java.lang.Object getImmediateNode()",
    "visibility": "public",
    "body": "{\r\n    final String name \u003d getPropertyName();\r\n    if (name.equals(\"*\")) {\r\n        return null;\r\n    }\r\n    Object value;\r\n    if (index \u003d\u003d WHOLE_COLLECTION) {\r\n        value \u003d ValueUtils.getValue(dynaBean.get(name));\r\n    } else if (isIndexedProperty()) {\r\n        // DynaClass at this point is not based on whether\r\n        // the property is indeed indexed, but rather on\r\n        // whether it is an array or List. Therefore\r\n        // the indexed set may fail.\r\n        try {\r\n            value \u003d ValueUtils.getValue(dynaBean.get(name, index));\r\n        } catch (final ArrayIndexOutOfBoundsException ex) {\r\n            value \u003d null;\r\n        } catch (final IllegalArgumentException ex) {\r\n            value \u003d dynaBean.get(name);\r\n            value \u003d ValueUtils.getValue(value, index);\r\n        }\r\n    } else {\r\n        value \u003d dynaBean.get(name);\r\n        if (ValueUtils.isCollection(value)) {\r\n            value \u003d ValueUtils.getValue(value, index);\r\n        } else if (index !\u003d 0) {\r\n            value \u003d null;\r\n        }\r\n    }\r\n    return value;\r\n}",
    "nodes": 13,
    "edges": 16,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($i0 !\u003d -2147483648) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B8",
      "B8 : If($z2 \u003d\u003d false) → B9 | else → B10",
      "B10 : If($i1 \u003d\u003d false) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  DynaBeanPropertyPointer\n  r1 \u003d r0.getPropertyName()\n  $z0 \u003d r1.equals(\"*\")\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d DynaBeanPropertyPointer: int index\u003e\n  if ($i0 !\u003d -2147483648) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d DynaBean dynaBean\u003e\n  $r6 \u003d $r5.get(r1)\n  r10 \u003d ValueUtils.getValue($r6)\n  goto B12\n}",
      "B4 {\n  $z1 \u003d r0.isIndexedProperty()\n  if ($z1 \u003d\u003d false) goto B5 else B8\n}",
      "B5 {\n  $r3 \u003d DynaBean dynaBean\u003e\n  $i3 \u003d DynaBeanPropertyPointer: int index\u003e\n  $r4 \u003d $r3.get(r1, $i3)\n  r10 \u003d ValueUtils.getValue($r4)\n  goto B12\n}",
      "B6 {\n  $r9 :\u003d @caughtexception\n  r10 \u003d null\n  goto B12\n}",
      "B7 {\n  $r7 :\u003d @caughtexception\n  $r8 \u003d DynaBean dynaBean\u003e\n  r11 \u003d $r8.get(r1)\n  $i4 \u003d DynaBeanPropertyPointer: int index\u003e\n  r10 \u003d ValueUtils.getValue(r11, $i4)\n  goto B12\n}",
      "B8 {\n  $r2 \u003d DynaBean dynaBean\u003e\n  r10 \u003d $r2.get(r1)\n  $z2 \u003d ValueUtils.isCollection(r10)\n  if ($z2 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $i2 \u003d DynaBeanPropertyPointer: int index\u003e\n  r10 \u003d ValueUtils.getValue(r10, $i2)\n  goto B12\n}",
      "B10 {\n  $i1 \u003d DynaBeanPropertyPointer: int index\u003e\n  if ($i1 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  r10 \u003d null\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B12",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B12",
      "B6 --\u003e B12",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DynaBeanPropertyPointer#isIndexedProperty(...0)",
        "body": "{\r\n    final DynaClass dynaClass \u003d dynaBean.getDynaClass();\r\n    final DynaProperty property \u003d dynaClass.getDynaProperty(name);\r\n    return property.isIndexed();\r\n}"
      },
      {
        "name": "DynaBeanPropertyPointer#getPropertyName(...0)",
        "body": "{\r\n    if (name \u003d\u003d null) {\r\n        final String[] names \u003d getPropertyNames();\r\n        name \u003d propertyIndex \u003e\u003d 0 \u0026\u0026 propertyIndex \u003c names.length ? names[propertyIndex] : \"*\";\r\n    }\r\n    return name;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPropertyPointer",
    "methodName": "getPropertyIndex",
    "signature": "int getPropertyIndex()",
    "visibility": "public",
    "body": "{\r\n    if (propertyIndex \u003d\u003d UNSPECIFIED_PROPERTY) {\r\n        final String[] names \u003d getPropertyNames();\r\n        for (int i \u003d 0; i \u003c names.length; i++) {\r\n            if (names[i].equals(name)) {\r\n                propertyIndex \u003d i;\r\n                name \u003d null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return super.getPropertyIndex();\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 !\u003d -2147483648) → B1 | else → B6",
      "B2 : If(i2 \u003e\u003d $i1) → B3 | else → B6",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  DynaBeanPropertyPointer\n  $i0 \u003d DynaBeanPropertyPointer: int propertyIndex\u003e\n  if ($i0 !\u003d -2147483648) goto B1 else B6\n}",
      "B1 {\n  r1 \u003d r0.getPropertyNames()\n  i2 \u003d 0\n}",
      "B2 {\n  $i1 \u003d lengthof r1\n  if (i2 \u003e\u003d $i1) goto B3 else B6\n}",
      "B3 {\n  $r3 \u003d r1[i2]\n  $r2 \u003d String name\u003e\n  $z0 \u003d $r3.equals($r2)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  DynaBeanPropertyPointer: int propertyIndex\u003e \u003d i2\n  String name\u003e \u003d null\n  goto B6\n}",
      "B5 {\n  i2 \u003d i2 + 1\n  goto B2\n}",
      "B6 {\n  $i3 \u003d r0.getPropertyIndex()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DynaBeanPropertyPointer#getPropertyNames(...0)",
        "body": "{\r\n    /* @todo do something about the sorting - LIKE WHAT? - MJB */\r\n    if (names \u003d\u003d null) {\r\n        final DynaClass dynaClass \u003d dynaBean.getDynaClass();\r\n        final DynaProperty[] dynaProperties \u003d dynaClass.getDynaProperties();\r\n        final ArrayList\u003cString\u003e properties \u003d new ArrayList\u003c\u003e(dynaProperties.length);\r\n        for (final DynaProperty element : dynaProperties) {\r\n            final String name \u003d element.getName();\r\n            if (!CLASS.equals(name)) {\r\n                properties.add(name);\r\n            }\r\n        }\r\n        names \u003d properties.toArray(new String[properties.size()]);\r\n        Arrays.sort(names);\r\n    }\r\n    return names;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPropertyPointer",
    "methodName": "getPropertyName",
    "signature": "java.lang.String getPropertyName()",
    "visibility": "public",
    "body": "{\r\n    if (name \u003d\u003d null) {\r\n        final String[] names \u003d getPropertyNames();\r\n        name \u003d propertyIndex \u003e\u003d 0 \u0026\u0026 propertyIndex \u003c names.length ? names[propertyIndex] : \"*\";\r\n    }\r\n    return name;\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B6",
      "B1 : If($i0 \u003c 0) → B2 | else → B4",
      "B2 : If($i2 \u003e\u003d $i1) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DynaBeanPropertyPointer\n  $r1 \u003d String name\u003e\n  if ($r1 !\u003d null) goto B1 else B6\n}",
      "B1 {\n  r2 \u003d r0.getPropertyNames()\n  $i0 \u003d DynaBeanPropertyPointer: int propertyIndex\u003e\n  if ($i0 \u003c 0) goto B2 else B4\n}",
      "B2 {\n  $i2 \u003d DynaBeanPropertyPointer: int propertyIndex\u003e\n  $i1 \u003d lengthof r2\n  if ($i2 \u003e\u003d $i1) goto B3 else B4\n}",
      "B3 {\n  $i3 \u003d DynaBeanPropertyPointer: int propertyIndex\u003e\n  $r3 \u003d r2[$i3]\n  goto B5\n}",
      "B4 {\n  $r3 \u003d \"*\"\n}",
      "B5 {\n  String name\u003e \u003d $r3\n}",
      "B6 {\n  $r4 \u003d String name\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DynaBeanPropertyPointer#getPropertyNames(...0)",
        "body": "{\r\n    /* @todo do something about the sorting - LIKE WHAT? - MJB */\r\n    if (names \u003d\u003d null) {\r\n        final DynaClass dynaClass \u003d dynaBean.getDynaClass();\r\n        final DynaProperty[] dynaProperties \u003d dynaClass.getDynaProperties();\r\n        final ArrayList\u003cString\u003e properties \u003d new ArrayList\u003c\u003e(dynaProperties.length);\r\n        for (final DynaProperty element : dynaProperties) {\r\n            final String name \u003d element.getName();\r\n            if (!CLASS.equals(name)) {\r\n                properties.add(name);\r\n            }\r\n        }\r\n        names \u003d properties.toArray(new String[properties.size()]);\r\n        Arrays.sort(names);\r\n    }\r\n    return names;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPropertyPointer",
    "methodName": "getPropertyNames",
    "signature": "java.lang.String[] getPropertyNames()",
    "visibility": "public",
    "body": "{\r\n    /* @todo do something about the sorting - LIKE WHAT? - MJB */\r\n    if (names \u003d\u003d null) {\r\n        final DynaClass dynaClass \u003d dynaBean.getDynaClass();\r\n        final DynaProperty[] dynaProperties \u003d dynaClass.getDynaProperties();\r\n        final ArrayList\u003cString\u003e properties \u003d new ArrayList\u003c\u003e(dynaProperties.length);\r\n        for (final DynaProperty element : dynaProperties) {\r\n            final String name \u003d element.getName();\r\n            if (!CLASS.equals(name)) {\r\n                properties.add(name);\r\n            }\r\n        }\r\n        names \u003d properties.toArray(new String[properties.size()]);\r\n        Arrays.sort(names);\r\n    }\r\n    return names;\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B7",
      "B2 : If(i3 \u003e\u003d i1) → B3 | else → B6",
      "B3 : If($z0 !\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  DynaBeanPropertyPointer\n  $r1 \u003d String[] names\u003e\n  if ($r1 !\u003d null) goto B1 else B7\n}",
      "B1 {\n  $r3 \u003d DynaBean dynaBean\u003e\n  r4 \u003d $r3.getDynaClass()\n  r5 \u003d r4.getDynaProperties()\n  $r6 \u003d ArrayList\n  $i0 \u003d lengthof r5\n  new ArrayList($i0)\n  i1 \u003d lengthof r5\n  i3 \u003d 0\n}",
      "B2 {\n  if (i3 \u003e\u003d i1) goto B3 else B6\n}",
      "B3 {\n  r11 \u003d r5[i3]\n  r12 \u003d r11.getName()\n  $r13 \u003d \"class\"\n  $z0 \u003d $r13.equals(r12)\n  if ($z0 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r6.add(r12)\n}",
      "B5 {\n  i3 \u003d i3 + 1\n  goto B2\n}",
      "B6 {\n  $i2 \u003d $r6.size()\n  $r7 \u003d String)[$i2]\n  $r8 \u003d $r6.toArray($r7)\n  $r9 \u003d String[]) $r8\n  String[] names\u003e \u003d $r9\n  $r10 \u003d String[] names\u003e\n  Arrays.sort($r10)\n}",
      "B7 {\n  $r2 \u003d String[] names\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B7",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B2",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPropertyPointer",
    "methodName": "remove",
    "signature": "void remove()",
    "visibility": "public",
    "body": "{\r\n    if (index \u003d\u003d WHOLE_COLLECTION) {\r\n        dynaBean.set(getPropertyName(), null);\r\n    } else if (isIndexedProperty()) {\r\n        dynaBean.set(getPropertyName(), index, null);\r\n    } else if (isCollection()) {\r\n        final Object collection \u003d ValueUtils.remove(getBaseValue(), index);\r\n        dynaBean.set(getPropertyName(), collection);\r\n    } else if (index \u003d\u003d 0) {\r\n        dynaBean.set(getPropertyName(), null);\r\n    }\r\n}",
    "nodes": 9,
    "edges": 12,
    "cc": 5,
    "flowSummary": [
      "B0 : If($i0 !\u003d -2147483648) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6",
      "B6 : If($i1 !\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  DynaBeanPropertyPointer\n  $i0 \u003d DynaBeanPropertyPointer: int index\u003e\n  if ($i0 !\u003d -2147483648) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d DynaBean dynaBean\u003e\n  $r10 \u003d r0.getPropertyName()\n  $r9.set($r10, null)\n  goto B8\n}",
      "B2 {\n  $z0 \u003d r0.isIndexedProperty()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r7 \u003d DynaBean dynaBean\u003e\n  $r8 \u003d r0.getPropertyName()\n  $i3 \u003d DynaBeanPropertyPointer: int index\u003e\n  $r7.set($r8, $i3, null)\n  goto B8\n}",
      "B4 {\n  $z1 \u003d r0.isCollection()\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r3 \u003d r0.getBaseValue()\n  $i2 \u003d DynaBeanPropertyPointer: int index\u003e\n  r4 \u003d ValueUtils.remove($r3, $i2)\n  $r5 \u003d DynaBean dynaBean\u003e\n  $r6 \u003d r0.getPropertyName()\n  $r5.set($r6, r4)\n  goto B8\n}",
      "B6 {\n  $i1 \u003d DynaBeanPropertyPointer: int index\u003e\n  if ($i1 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $r1 \u003d DynaBean dynaBean\u003e\n  $r2 \u003d r0.getPropertyName()\n  $r1.set($r2, null)\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DynaBeanPropertyPointer#getBaseValue(...0)",
        "body": "{\r\n    return dynaBean.get(getPropertyName());\r\n}"
      },
      {
        "name": "DynaBeanPropertyPointer#isIndexedProperty(...0)",
        "body": "{\r\n    final DynaClass dynaClass \u003d dynaBean.getDynaClass();\r\n    final DynaProperty property \u003d dynaClass.getDynaProperty(name);\r\n    return property.isIndexed();\r\n}"
      },
      {
        "name": "DynaBeanPropertyPointer#isCollection(...0)",
        "body": "(source not found)"
      },
      {
        "name": "DynaBeanPropertyPointer#getPropertyName(...0)",
        "body": "{\r\n    if (name \u003d\u003d null) {\r\n        final String[] names \u003d getPropertyNames();\r\n        name \u003d propertyIndex \u003e\u003d 0 \u0026\u0026 propertyIndex \u003c names.length ? names[propertyIndex] : \"*\";\r\n    }\r\n    return name;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPropertyPointer",
    "methodName": "setPropertyIndex",
    "signature": "void setPropertyIndex(int)",
    "visibility": "public",
    "body": "{\r\n    if (propertyIndex !\u003d index) {\r\n        super.setPropertyIndex(index);\r\n        name \u003d null;\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003d\u003d i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DynaBeanPropertyPointer\n  i0 :\u003d @parameter0: int\n  $i1 \u003d DynaBeanPropertyPointer: int propertyIndex\u003e\n  if ($i1 \u003d\u003d i0) goto B1 else B2\n}",
      "B1 {\n  r0.setPropertyIndex(i0)\n  String name\u003e \u003d null\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynabeans.StrictLazyDynaBeanPointerFactory",
    "methodName": "createNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createNodePointer(org.apache.commons.jxpath.ri.model.NodePointer,org.apache.commons.jxpath.ri.QName,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return object instanceof LazyDynaBean ? new StrictLazyDynaBeanPointer(parent, qName, (LazyDynaBean) object) : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrictLazyDynaBeanPointerFactory\n  NodePointer\n  QName\n  Object\n  $z0 \u003d LazyDynaBean\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d StrictLazyDynaBeanPointerFactory$StrictLazyDynaBeanPointer\n  $r3 \u003d LazyDynaBean) r0\n  new StrictLazyDynaBeanPointerFactory$StrictLazyDynaBeanPointer(r1, r2, $r3)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynabeans.StrictLazyDynaBeanPointerFactory",
    "methodName": "createNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createNodePointer(org.apache.commons.jxpath.ri.QName,java.lang.Object,java.util.Locale)",
    "visibility": "public",
    "body": "{\r\n    return object instanceof LazyDynaBean ? new StrictLazyDynaBeanPointer(qName, (LazyDynaBean) object, locale) : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StrictLazyDynaBeanPointerFactory\n  QName\n  Object\n  Locale\n  $z0 \u003d LazyDynaBean\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d StrictLazyDynaBeanPointerFactory$StrictLazyDynaBeanPointer\n  $r3 \u003d LazyDynaBean) r0\n  new StrictLazyDynaBeanPointerFactory$StrictLazyDynaBeanPointer(r1, $r3, r2)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynamic.DynamicPointer",
    "methodName": "asPath",
    "signature": "java.lang.String asPath()",
    "visibility": "public",
    "body": "{\r\n    return parent \u003d\u003d null ? \"/\" : super.asPath();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DynamicPointer\n  $r1 \u003d NodePointer parent\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d \"/\"\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r0.asPath()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynamic.DynamicPointer",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (!(object instanceof DynamicPointer)) {\r\n        return false;\r\n    }\r\n    final DynamicPointer other \u003d (DynamicPointer) object;\r\n    if (bean !\u003d other.bean) {\r\n        return false;\r\n    }\r\n    return qName \u003d\u003d other.qName || qName !\u003d null \u0026\u0026 qName.equals(other.qName);\r\n}",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($r4 \u003d\u003d $r3) → B5 | else → B6",
      "B6 : If($r6 \u003d\u003d $r5) → B7 | else → B9",
      "B7 : If($r7 \u003d\u003d null) → B8 | else → B10",
      "B8 : If($z1 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  DynamicPointer\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d DynamicPointer\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d DynamicPointer) r0\n  $r4 \u003d Object bean\u003e\n  $r3 \u003d Object bean\u003e\n  if ($r4 \u003d\u003d $r3) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r6 \u003d QName qName\u003e\n  $r5 \u003d QName qName\u003e\n  if ($r6 \u003d\u003d $r5) goto B7 else B9\n}",
      "B7 {\n  $r7 \u003d QName qName\u003e\n  if ($r7 \u003d\u003d null) goto B8 else B10\n}",
      "B8 {\n  $r9 \u003d QName qName\u003e\n  $r8 \u003d QName qName\u003e\n  $z1 \u003d $r9.equals($r8)\n  if ($z1 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $z2 \u003d 1\n  goto B11\n}",
      "B10 {\n  $z2 \u003d 0\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynamic.DynamicPointer",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    return System.identityHashCode(bean) + (qName \u003d\u003d null ? 0 : qName.hashCode());\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DynamicPointer\n  $r1 \u003d Object bean\u003e\n  $i0 \u003d System.identityHashCode($r1)\n  $r2 \u003d QName qName\u003e\n  if ($r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i2 \u003d 0\n  goto B3\n}",
      "B2 {\n  $r3 \u003d QName qName\u003e\n  $i2 \u003d $r3.hashCode()\n}",
      "B3 {\n  $i1 \u003d $i0 + $i2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynamic.DynamicPointer",
    "methodName": "isLeaf",
    "signature": "boolean isLeaf()",
    "visibility": "public",
    "body": "{\r\n    final Object value \u003d getNode();\r\n    return value \u003d\u003d null || JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DynamicPointer\n  r1 \u003d r0.getNode()\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1.getClass()\n  $r3 \u003d JXPathIntrospector.getBeanInfo($r2)\n  $z0 \u003d $r3.isAtomic()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DynamicPointer#getNode(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynamic.DynamicPointerFactory",
    "methodName": "createNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createNodePointer(org.apache.commons.jxpath.ri.model.NodePointer,org.apache.commons.jxpath.ri.QName,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (bean \u003d\u003d null) {\r\n        return new NullPointer(parent, qName);\r\n    }\r\n    final JXPathBeanInfo bi \u003d JXPathIntrospector.getBeanInfo(bean.getClass());\r\n    if (bi.isDynamic()) {\r\n        final DynamicPropertyHandler handler \u003d ValueUtils.getDynamicPropertyHandler(bi.getDynamicPropertyHandlerClass());\r\n        return new DynamicPointer(parent, qName, bean, handler);\r\n    }\r\n    return null;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DynamicPointerFactory\n  NodePointer\n  QName\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d NullPointer\n  new NullPointer(r6, r7)\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getClass()\n  r2 \u003d JXPathIntrospector.getBeanInfo($r1)\n  $z0 \u003d r2.isDynamic()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d r2.getDynamicPropertyHandlerClass()\n  r4 \u003d ValueUtils.getDynamicPropertyHandler($r3)\n  $r5 \u003d DynamicPointer\n  new DynamicPointer(r6, r7, r0, r4)\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynamic.DynamicPointerFactory",
    "methodName": "createNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createNodePointer(org.apache.commons.jxpath.ri.QName,java.lang.Object,java.util.Locale)",
    "visibility": "public",
    "body": "{\r\n    final JXPathBeanInfo bi \u003d JXPathIntrospector.getBeanInfo(bean.getClass());\r\n    if (bi.isDynamic()) {\r\n        final DynamicPropertyHandler handler \u003d ValueUtils.getDynamicPropertyHandler(bi.getDynamicPropertyHandlerClass());\r\n        return new DynamicPointer(qName, bean, handler, locale);\r\n    }\r\n    return null;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DynamicPointerFactory\n  QName\n  Object\n  Locale\n  $r1 \u003d r0.getClass()\n  r2 \u003d JXPathIntrospector.getBeanInfo($r1)\n  $z0 \u003d r2.isDynamic()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r2.getDynamicPropertyHandlerClass()\n  r4 \u003d ValueUtils.getDynamicPropertyHandler($r3)\n  $r5 \u003d DynamicPointer\n  new DynamicPointer(r6, r0, r4, r7)\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertyPointer",
    "methodName": "asPath",
    "signature": "java.lang.String asPath()",
    "visibility": "public",
    "body": "{\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    buffer.append(getImmediateParentPointer().asPath());\r\n    if (buffer.length() \u003d\u003d 0) {\r\n        buffer.append(\"/.\");\r\n    } else if (buffer.charAt(buffer.length() - 1) \u003d\u003d \u0027/\u0027) {\r\n        buffer.append(\u0027.\u0027);\r\n    }\r\n    buffer.append(\"[@name\u003d\u0027\");\r\n    buffer.append(escape(getPropertyName()));\r\n    buffer.append(\"\u0027]\");\r\n    if (index !\u003d WHOLE_COLLECTION \u0026\u0026 isCollection()) {\r\n        buffer.append(\u0027[\u0027).append(index + 1).append(\u0027]\u0027);\r\n    }\r\n    return buffer.toString();\r\n}",
    "nodes": 8,
    "edges": 11,
    "cc": 5,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B2 : If($i7 !\u003d 47) → B3 | else → B4",
      "B4 : If($i6 \u003d\u003d -2147483648) → B5 | else → B7",
      "B5 : If($z0 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  DynamicPropertyPointer\n  $r9 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d r1.getImmediateParentPointer()\n  $r3 \u003d $r2.asPath()\n  $r9.append($r3)\n  $i0 \u003d $r9.length()\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r9.append(\"/.\")\n  goto B4\n}",
      "B2 {\n  $i1 \u003d $r9.length()\n  $i2 \u003d $i1 - 1\n  $c3 \u003d $r9.charAt($i2)\n  $i7 \u003d (int) $c3\n  if ($i7 !\u003d 47) goto B3 else B4\n}",
      "B3 {\n  $r9.append(46)\n}",
      "B4 {\n  $r9.append(\"@name\u003d\\\u0027\")\n  $r6 \u003d r1.getPropertyName()\n  $r7 \u003d r1.escape($r6)\n  $r9.append($r7)\n  $r9.append(\"\\\u0027\")\n  $i6 \u003d DynamicPropertyPointer: int index\u003e\n  if ($i6 \u003d\u003d -2147483648) goto B5 else B7\n}",
      "B5 {\n  $z0 \u003d r1.isCollection()\n  if ($z0 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r4 \u003d $r9.append(91)\n  $i4 \u003d DynamicPropertyPointer: int index\u003e\n  $i5 \u003d $i4 + 1\n  $r5 \u003d $r4.append($i5)\n  $r5.append(93)\n}",
      "B7 {\n  $r8 \u003d $r9.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DynamicPropertyPointer#getImmediateParentPointer(...0)",
        "body": "(source not found)"
      },
      {
        "name": "DynamicPropertyPointer#escape(...1)",
        "body": "(source not found)"
      },
      {
        "name": "DynamicPropertyPointer#isCollection(...0)",
        "body": "(source not found)"
      },
      {
        "name": "DynamicPropertyPointer#getPropertyName(...0)",
        "body": "{\r\n    if (name \u003d\u003d null) {\r\n        final String[] names \u003d getPropertyNames();\r\n        name \u003d propertyIndex \u003e\u003d 0 \u0026\u0026 propertyIndex \u003c names.length ? names[propertyIndex] : \"*\";\r\n    }\r\n    return name;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertyPointer",
    "methodName": "createPath",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createPath(org.apache.commons.jxpath.JXPathContext)",
    "visibility": "public",
    "body": "{\r\n    // Ignore the name passed to us, use our own data\r\n    Object collection \u003d getBaseValue();\r\n    if (collection \u003d\u003d null) {\r\n        final AbstractFactory factory \u003d getAbstractFactory(context);\r\n        final boolean success \u003d factory.createObject(context, this, getBean(), getPropertyName(), 0);\r\n        if (!success) {\r\n            throw new JXPathAbstractFactoryException(\"Factory could not create an object for path: \" + asPath());\r\n        }\r\n        collection \u003d getBaseValue();\r\n    }\r\n    if (index !\u003d WHOLE_COLLECTION) {\r\n        if (index \u003c 0) {\r\n            throw new JXPathInvalidAccessException(\"Index is less than 1: \" + asPath());\r\n        }\r\n        if (index \u003e\u003d getLength()) {\r\n            collection \u003d ValueUtils.expandCollection(collection, index + 1);\r\n            handler.setProperty(getBean(), getPropertyName(), collection);\r\n        }\r\n    }\r\n    return this;\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r20 !\u003d null) → B1 | else → B4",
      "B1 : If(z0 !\u003d 0) → B2 | else → B3",
      "B4 : If($i0 \u003d\u003d -2147483648) → B5 | else → B9",
      "B5 : If($i1 \u003e\u003d 0) → B6 | else → B7",
      "B7 : If($i2 \u003c $i3) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  DynamicPropertyPointer\n  JXPathContext\n  r20 \u003d r0.getBaseValue()\n  if (r20 !\u003d null) goto B1 else B4\n}",
      "B1 {\n  r11 \u003d r0.getAbstractFactory(r10)\n  $r13 \u003d r0.getBean()\n  $r12 \u003d r0.getPropertyName()\n  z0 \u003d r11.createObject(r10, r0, $r13, $r12, 0)\n  if (z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r14 \u003d JXPathAbstractFactoryException\n  $r15 \u003d StringBuilder\n  new StringBuilder()\n  $r17 \u003d $r15.append(\"Factory could not create an object for path: \")\n  $r16 \u003d r0.asPath()\n  $r18 \u003d $r17.append($r16)\n  $r19 \u003d $r18.toString()\n  new JXPathAbstractFactoryException($r19)\n  throw $r14\n}",
      "B3 {\n  r20 \u003d r0.getBaseValue()\n}",
      "B4 {\n  $i0 \u003d DynamicPropertyPointer: int index\u003e\n  if ($i0 \u003d\u003d -2147483648) goto B5 else B9\n}",
      "B5 {\n  $i1 \u003d DynamicPropertyPointer: int index\u003e\n  if ($i1 \u003e\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $r4 \u003d JXPathInvalidAccessException\n  $r5 \u003d StringBuilder\n  new StringBuilder()\n  $r7 \u003d $r5.append(\"Index is less than 1: \")\n  $r6 \u003d r0.asPath()\n  $r8 \u003d $r7.append($r6)\n  $r9 \u003d $r8.toString()\n  new JXPathInvalidAccessException($r9)\n  throw $r4\n}",
      "B7 {\n  $i2 \u003d DynamicPropertyPointer: int index\u003e\n  $i3 \u003d r0.getLength()\n  if ($i2 \u003c $i3) goto B8 else B9\n}",
      "B8 {\n  $i4 \u003d DynamicPropertyPointer: int index\u003e\n  $i5 \u003d $i4 + 1\n  r21 \u003d ValueUtils.expandCollection(r20, $i5)\n  $r1 \u003d DynamicPropertyHandler handler\u003e\n  $r3 \u003d r0.getBean()\n  $r2 \u003d r0.getPropertyName()\n  $r1.setProperty($r3, $r2, r21)\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DynamicPropertyPointer#getLength(...0)",
        "body": "(source not found)"
      },
      {
        "name": "DynamicPropertyPointer#getBaseValue(...0)",
        "body": "{\r\n    return handler.getProperty(getBean(), getPropertyName());\r\n}"
      },
      {
        "name": "DynamicPropertyPointer#asPath(...0)",
        "body": "{\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    buffer.append(getImmediateParentPointer().asPath());\r\n    if (buffer.length() \u003d\u003d 0) {\r\n        buffer.append(\"/.\");\r\n    } else if (buffer.charAt(buffer.length() - 1) \u003d\u003d \u0027/\u0027) {\r\n        buffer.append(\u0027.\u0027);\r\n    }\r\n    buffer.append(\"[@name\u003d\u0027\");\r\n    buffer.append(escape(getPropertyName()));\r\n    buffer.append(\"\u0027]\");\r\n    if (index !\u003d WHOLE_COLLECTION \u0026\u0026 isCollection()) {\r\n        buffer.append(\u0027[\u0027).append(index + 1).append(\u0027]\u0027);\r\n    }\r\n    return buffer.toString();\r\n}"
      },
      {
        "name": "DynamicPropertyPointer#getBean(...0)",
        "body": "(source not found)"
      },
      {
        "name": "DynamicPropertyPointer#getAbstractFactory(...1)",
        "body": "(source not found)"
      },
      {
        "name": "DynamicPropertyPointer#getPropertyName(...0)",
        "body": "{\r\n    if (name \u003d\u003d null) {\r\n        final String[] names \u003d getPropertyNames();\r\n        name \u003d propertyIndex \u003e\u003d 0 \u0026\u0026 propertyIndex \u003c names.length ? names[propertyIndex] : \"*\";\r\n    }\r\n    return name;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertyPointer",
    "methodName": "createPath",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createPath(org.apache.commons.jxpath.JXPathContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (index \u003d\u003d WHOLE_COLLECTION) {\r\n        handler.setProperty(getBean(), getPropertyName(), value);\r\n    } else {\r\n        createPath(context);\r\n        ValueUtils.setValue(getBaseValue(), index, value);\r\n    }\r\n    return this;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d -2147483648) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DynamicPropertyPointer\n  JXPathContext\n  Object\n  $i0 \u003d DynamicPropertyPointer: int index\u003e\n  if ($i0 !\u003d -2147483648) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d DynamicPropertyHandler handler\u003e\n  $r6 \u003d r0.getBean()\n  $r5 \u003d r0.getPropertyName()\n  $r4.setProperty($r6, $r5, r2)\n  goto B3\n}",
      "B2 {\n  r0.createPath(r1)\n  $r3 \u003d r0.getBaseValue()\n  $i1 \u003d DynamicPropertyPointer: int index\u003e\n  ValueUtils.setValue($r3, $i1, r2)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DynamicPropertyPointer#getBaseValue(...0)",
        "body": "{\r\n    return handler.getProperty(getBean(), getPropertyName());\r\n}"
      },
      {
        "name": "DynamicPropertyPointer#getBean(...0)",
        "body": "(source not found)"
      },
      {
        "name": "DynamicPropertyPointer#createPath(...1)",
        "body": "{\r\n    // Ignore the name passed to us, use our own data\r\n    Object collection \u003d getBaseValue();\r\n    if (collection \u003d\u003d null) {\r\n        final AbstractFactory factory \u003d getAbstractFactory(context);\r\n        final boolean success \u003d factory.createObject(context, this, getBean(), getPropertyName(), 0);\r\n        if (!success) {\r\n            throw new JXPathAbstractFactoryException(\"Factory could not create an object for path: \" + asPath());\r\n        }\r\n        collection \u003d getBaseValue();\r\n    }\r\n    if (index !\u003d WHOLE_COLLECTION) {\r\n        if (index \u003c 0) {\r\n            throw new JXPathInvalidAccessException(\"Index is less than 1: \" + asPath());\r\n        }\r\n        if (index \u003e\u003d getLength()) {\r\n            collection \u003d ValueUtils.expandCollection(collection, index + 1);\r\n            handler.setProperty(getBean(), getPropertyName(), collection);\r\n        }\r\n    }\r\n    return this;\r\n}"
      },
      {
        "name": "DynamicPropertyPointer#getPropertyName(...0)",
        "body": "{\r\n    if (name \u003d\u003d null) {\r\n        final String[] names \u003d getPropertyNames();\r\n        name \u003d propertyIndex \u003e\u003d 0 \u0026\u0026 propertyIndex \u003c names.length ? names[propertyIndex] : \"*\";\r\n    }\r\n    return name;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertyPointer",
    "methodName": "getImmediateNode",
    "signature": "java.lang.Object getImmediateNode()",
    "visibility": "public",
    "body": "{\r\n    Object value;\r\n    if (index \u003d\u003d WHOLE_COLLECTION) {\r\n        value \u003d ValueUtils.getValue(handler.getProperty(getBean(), getPropertyName()));\r\n    } else {\r\n        value \u003d ValueUtils.getValue(handler.getProperty(getBean(), getPropertyName()), index);\r\n    }\r\n    return value;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d -2147483648) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DynamicPropertyPointer\n  $i0 \u003d DynamicPropertyPointer: int index\u003e\n  if ($i0 !\u003d -2147483648) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d DynamicPropertyHandler handler\u003e\n  $r7 \u003d r0.getBean()\n  $r6 \u003d r0.getPropertyName()\n  $r8 \u003d $r5.getProperty($r7, $r6)\n  r9 \u003d ValueUtils.getValue($r8)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d DynamicPropertyHandler handler\u003e\n  $r3 \u003d r0.getBean()\n  $r2 \u003d r0.getPropertyName()\n  $r4 \u003d $r1.getProperty($r3, $r2)\n  $i1 \u003d DynamicPropertyPointer: int index\u003e\n  r9 \u003d ValueUtils.getValue($r4, $i1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DynamicPropertyPointer#getBean(...0)",
        "body": "(source not found)"
      },
      {
        "name": "DynamicPropertyPointer#getPropertyName(...0)",
        "body": "{\r\n    if (name \u003d\u003d null) {\r\n        final String[] names \u003d getPropertyNames();\r\n        name \u003d propertyIndex \u003e\u003d 0 \u0026\u0026 propertyIndex \u003c names.length ? names[propertyIndex] : \"*\";\r\n    }\r\n    return name;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertyPointer",
    "methodName": "getPropertyIndex",
    "signature": "int getPropertyIndex()",
    "visibility": "public",
    "body": "{\r\n    if (propertyIndex \u003d\u003d UNSPECIFIED_PROPERTY) {\r\n        final String[] names \u003d getPropertyNames();\r\n        for (int i \u003d 0; i \u003c names.length; i++) {\r\n            if (names[i].equals(name)) {\r\n                setPropertyIndex(i);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return super.getPropertyIndex();\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 !\u003d -2147483648) → B1 | else → B6",
      "B2 : If(i2 \u003e\u003d $i1) → B3 | else → B6",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  DynamicPropertyPointer\n  $i0 \u003d DynamicPropertyPointer: int propertyIndex\u003e\n  if ($i0 !\u003d -2147483648) goto B1 else B6\n}",
      "B1 {\n  r1 \u003d r0.getPropertyNames()\n  i2 \u003d 0\n}",
      "B2 {\n  $i1 \u003d lengthof r1\n  if (i2 \u003e\u003d $i1) goto B3 else B6\n}",
      "B3 {\n  $r3 \u003d r1[i2]\n  $r2 \u003d String name\u003e\n  $z0 \u003d $r3.equals($r2)\n  if ($z0 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  r0.setPropertyIndex(i2)\n  goto B6\n}",
      "B5 {\n  i2 \u003d i2 + 1\n  goto B2\n}",
      "B6 {\n  $i3 \u003d r0.getPropertyIndex()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DynamicPropertyPointer#setPropertyIndex(...1)",
        "body": "{\r\n    if (propertyIndex !\u003d index) {\r\n        super.setPropertyIndex(index);\r\n        name \u003d null;\r\n    }\r\n}"
      },
      {
        "name": "DynamicPropertyPointer#getPropertyNames(...0)",
        "body": "{\r\n    if (names \u003d\u003d null) {\r\n        String[] allNames \u003d handler.getPropertyNames(getBean());\r\n        names \u003d new String[allNames.length];\r\n        System.arraycopy(allNames, 0, names, 0, names.length);\r\n        Arrays.sort(names);\r\n        if (requiredPropertyName !\u003d null) {\r\n            final int inx \u003d Arrays.binarySearch(names, requiredPropertyName);\r\n            if (inx \u003c 0) {\r\n                allNames \u003d names;\r\n                names \u003d new String[allNames.length + 1];\r\n                names[0] \u003d requiredPropertyName;\r\n                System.arraycopy(allNames, 0, names, 1, allNames.length);\r\n                Arrays.sort(names);\r\n            }\r\n        }\r\n    }\r\n    return names;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertyPointer",
    "methodName": "getPropertyName",
    "signature": "java.lang.String getPropertyName()",
    "visibility": "public",
    "body": "{\r\n    if (name \u003d\u003d null) {\r\n        final String[] names \u003d getPropertyNames();\r\n        name \u003d propertyIndex \u003e\u003d 0 \u0026\u0026 propertyIndex \u003c names.length ? names[propertyIndex] : \"*\";\r\n    }\r\n    return name;\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B6",
      "B1 : If($i0 \u003c 0) → B2 | else → B4",
      "B2 : If($i2 \u003e\u003d $i1) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DynamicPropertyPointer\n  $r1 \u003d String name\u003e\n  if ($r1 !\u003d null) goto B1 else B6\n}",
      "B1 {\n  r2 \u003d r0.getPropertyNames()\n  $i0 \u003d DynamicPropertyPointer: int propertyIndex\u003e\n  if ($i0 \u003c 0) goto B2 else B4\n}",
      "B2 {\n  $i2 \u003d DynamicPropertyPointer: int propertyIndex\u003e\n  $i1 \u003d lengthof r2\n  if ($i2 \u003e\u003d $i1) goto B3 else B4\n}",
      "B3 {\n  $i3 \u003d DynamicPropertyPointer: int propertyIndex\u003e\n  $r3 \u003d r2[$i3]\n  goto B5\n}",
      "B4 {\n  $r3 \u003d \"*\"\n}",
      "B5 {\n  String name\u003e \u003d $r3\n}",
      "B6 {\n  $r4 \u003d String name\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DynamicPropertyPointer#getPropertyNames(...0)",
        "body": "{\r\n    if (names \u003d\u003d null) {\r\n        String[] allNames \u003d handler.getPropertyNames(getBean());\r\n        names \u003d new String[allNames.length];\r\n        System.arraycopy(allNames, 0, names, 0, names.length);\r\n        Arrays.sort(names);\r\n        if (requiredPropertyName !\u003d null) {\r\n            final int inx \u003d Arrays.binarySearch(names, requiredPropertyName);\r\n            if (inx \u003c 0) {\r\n                allNames \u003d names;\r\n                names \u003d new String[allNames.length + 1];\r\n                names[0] \u003d requiredPropertyName;\r\n                System.arraycopy(allNames, 0, names, 1, allNames.length);\r\n                Arrays.sort(names);\r\n            }\r\n        }\r\n    }\r\n    return names;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertyPointer",
    "methodName": "getPropertyNames",
    "signature": "java.lang.String[] getPropertyNames()",
    "visibility": "public",
    "body": "{\r\n    if (names \u003d\u003d null) {\r\n        String[] allNames \u003d handler.getPropertyNames(getBean());\r\n        names \u003d new String[allNames.length];\r\n        System.arraycopy(allNames, 0, names, 0, names.length);\r\n        Arrays.sort(names);\r\n        if (requiredPropertyName !\u003d null) {\r\n            final int inx \u003d Arrays.binarySearch(names, requiredPropertyName);\r\n            if (inx \u003c 0) {\r\n                allNames \u003d names;\r\n                names \u003d new String[allNames.length + 1];\r\n                names[0] \u003d requiredPropertyName;\r\n                System.arraycopy(allNames, 0, names, 1, allNames.length);\r\n                Arrays.sort(names);\r\n            }\r\n        }\r\n    }\r\n    return names;\r\n}",
    "nodes": 5,
    "edges": 7,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B4",
      "B1 : If($r8 \u003d\u003d null) → B2 | else → B4",
      "B2 : If(i2 \u003e\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  DynamicPropertyPointer\n  $r1 \u003d String[] names\u003e\n  if ($r1 !\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r2 \u003d DynamicPropertyHandler handler\u003e\n  $r3 \u003d r0.getBean()\n  r16 \u003d $r2.getPropertyNames($r3)\n  $i0 \u003d lengthof r16\n  $r4 \u003d String)[$i0]\n  String[] names\u003e \u003d $r4\n  $r6 \u003d String[] names\u003e\n  $r5 \u003d String[] names\u003e\n  $i1 \u003d lengthof $r5\n  System.arraycopy(r16, 0, $r6, 0, $i1)\n  $r7 \u003d String[] names\u003e\n  Arrays.sort($r7)\n  $r8 \u003d String requiredPropertyName\u003e\n  if ($r8 \u003d\u003d null) goto B2 else B4\n}",
      "B2 {\n  $r10 \u003d String[] names\u003e\n  $r9 \u003d String requiredPropertyName\u003e\n  i2 \u003d Arrays.binarySearch($r10, $r9)\n  if (i2 \u003e\u003d 0) goto B3 else B4\n}",
      "B3 {\n  r17 \u003d String[] names\u003e\n  $i3 \u003d lengthof r17\n  $i4 \u003d $i3 + 1\n  $r11 \u003d String)[$i4]\n  String[] names\u003e \u003d $r11\n  $r13 \u003d String[] names\u003e\n  $r12 \u003d String requiredPropertyName\u003e\n  $r13[0] \u003d $r12\n  $r14 \u003d String[] names\u003e\n  $i5 \u003d lengthof r17\n  System.arraycopy(r17, 0, $r14, 1, $i5)\n  $r15 \u003d String[] names\u003e\n  Arrays.sort($r15)\n}",
      "B4 {\n  $r18 \u003d String[] names\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DynamicPropertyPointer#getBean(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertyPointer",
    "methodName": "remove",
    "signature": "void remove()",
    "visibility": "public",
    "body": "{\r\n    if (index \u003d\u003d WHOLE_COLLECTION) {\r\n        removeKey();\r\n    } else if (isCollection()) {\r\n        final Object collection \u003d ValueUtils.remove(getBaseValue(), index);\r\n        handler.setProperty(getBean(), getPropertyName(), collection);\r\n    } else if (index \u003d\u003d 0) {\r\n        removeKey();\r\n    }\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 !\u003d -2147483648) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($i1 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  DynamicPropertyPointer\n  $i0 \u003d DynamicPropertyPointer: int index\u003e\n  if ($i0 !\u003d -2147483648) goto B1 else B2\n}",
      "B1 {\n  r0.removeKey()\n  goto B6\n}",
      "B2 {\n  $z0 \u003d r0.isCollection()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d r0.getBaseValue()\n  $i2 \u003d DynamicPropertyPointer: int index\u003e\n  r2 \u003d ValueUtils.remove($r1, $i2)\n  $r3 \u003d DynamicPropertyHandler handler\u003e\n  $r5 \u003d r0.getBean()\n  $r4 \u003d r0.getPropertyName()\n  $r3.setProperty($r5, $r4, r2)\n  goto B6\n}",
      "B4 {\n  $i1 \u003d DynamicPropertyPointer: int index\u003e\n  if ($i1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  r0.removeKey()\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DynamicPropertyPointer#removeKey(...0)",
        "body": "{\r\n    final Object bean \u003d getBean();\r\n    if (bean instanceof Map) {\r\n        ((Map) bean).remove(getPropertyName());\r\n    } else {\r\n        handler.setProperty(bean, getPropertyName(), null);\r\n    }\r\n}"
      },
      {
        "name": "DynamicPropertyPointer#getBaseValue(...0)",
        "body": "{\r\n    return handler.getProperty(getBean(), getPropertyName());\r\n}"
      },
      {
        "name": "DynamicPropertyPointer#getBean(...0)",
        "body": "(source not found)"
      },
      {
        "name": "DynamicPropertyPointer#isCollection(...0)",
        "body": "(source not found)"
      },
      {
        "name": "DynamicPropertyPointer#getPropertyName(...0)",
        "body": "{\r\n    if (name \u003d\u003d null) {\r\n        final String[] names \u003d getPropertyNames();\r\n        name \u003d propertyIndex \u003e\u003d 0 \u0026\u0026 propertyIndex \u003c names.length ? names[propertyIndex] : \"*\";\r\n    }\r\n    return name;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertyPointer",
    "methodName": "setPropertyIndex",
    "signature": "void setPropertyIndex(int)",
    "visibility": "public",
    "body": "{\r\n    if (propertyIndex !\u003d index) {\r\n        super.setPropertyIndex(index);\r\n        name \u003d null;\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003d\u003d i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DynamicPropertyPointer\n  i0 :\u003d @parameter0: int\n  $i1 \u003d DynamicPropertyPointer: int propertyIndex\u003e\n  if ($i1 \u003d\u003d i0) goto B1 else B2\n}",
      "B1 {\n  r0.setPropertyIndex(i0)\n  String name\u003e \u003d null\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertyPointer",
    "methodName": "setPropertyName",
    "signature": "void setPropertyName(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    setPropertyIndex(UNSPECIFIED_PROPERTY);\r\n    this.name \u003d propertyName;\r\n    requiredPropertyName \u003d propertyName;\r\n    if (names !\u003d null \u0026\u0026 Arrays.binarySearch(names, propertyName) \u003c 0) {\r\n        names \u003d null;\r\n    }\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($i0 \u003e\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DynamicPropertyPointer\n  String\n  r0.setPropertyIndex(-2147483648)\n  String name\u003e \u003d r1\n  String requiredPropertyName\u003e \u003d r1\n  $r2 \u003d String[] names\u003e\n  if ($r2 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r3 \u003d String[] names\u003e\n  $i0 \u003d Arrays.binarySearch($r3, r1)\n  if ($i0 \u003e\u003d 0) goto B2 else B3\n}",
      "B2 {\n  String[] names\u003e \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DynamicPropertyPointer#setPropertyIndex(...1)",
        "body": "{\r\n    if (propertyIndex !\u003d index) {\r\n        super.setPropertyIndex(index);\r\n        name \u003d null;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertyPointer",
    "methodName": "setValue",
    "signature": "void setValue(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (index \u003d\u003d WHOLE_COLLECTION) {\r\n        handler.setProperty(getBean(), getPropertyName(), value);\r\n    } else {\r\n        ValueUtils.setValue(handler.getProperty(getBean(), getPropertyName()), index, value);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d -2147483648) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DynamicPropertyPointer\n  Object\n  $i0 \u003d DynamicPropertyPointer: int index\u003e\n  if ($i0 !\u003d -2147483648) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d DynamicPropertyHandler handler\u003e\n  $r8 \u003d r0.getBean()\n  $r7 \u003d r0.getPropertyName()\n  $r6.setProperty($r8, $r7, r4)\n  goto B3\n}",
      "B2 {\n  $r1 \u003d DynamicPropertyHandler handler\u003e\n  $r3 \u003d r0.getBean()\n  $r2 \u003d r0.getPropertyName()\n  $r5 \u003d $r1.getProperty($r3, $r2)\n  $i1 \u003d DynamicPropertyPointer: int index\u003e\n  ValueUtils.setValue($r5, $i1, r4)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DynamicPropertyPointer#getBean(...0)",
        "body": "(source not found)"
      },
      {
        "name": "DynamicPropertyPointer#getPropertyName(...0)",
        "body": "{\r\n    if (name \u003d\u003d null) {\r\n        final String[] names \u003d getPropertyNames();\r\n        name \u003d propertyIndex \u003e\u003d 0 \u0026\u0026 propertyIndex \u003c names.length ? names[propertyIndex] : \"*\";\r\n    }\r\n    return name;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator",
    "methodName": "getNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer getNodePointer()",
    "visibility": "public",
    "body": "{\r\n    if (position \u003d\u003d 0) {\r\n        if (!setPosition(1)) {\r\n            return null;\r\n        }\r\n        position \u003d 0;\r\n    }\r\n    int index \u003d position - 1;\r\n    if (index \u003c 0) {\r\n        index \u003d 0;\r\n    }\r\n    return new JDOMAttributePointer(parent, attributes.get(index));\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B4",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3",
      "B4 : If($i2 \u003e\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  JDOMAttributeIterator\n  $i0 \u003d JDOMAttributeIterator: int position\u003e\n  if ($i0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $z0 \u003d r0.setPosition(1)\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  JDOMAttributeIterator: int position\u003e \u003d 0\n}",
      "B4 {\n  $i1 \u003d JDOMAttributeIterator: int position\u003e\n  $i2 \u003d $i1 - 1\n  i3 \u003d $i2\n  if ($i2 \u003e\u003d 0) goto B5 else B6\n}",
      "B5 {\n  i3 \u003d 0\n}",
      "B6 {\n  $r1 \u003d JDOMAttributePointer\n  $r3 \u003d NodePointer parent\u003e\n  $r2 \u003d List attributes\u003e\n  $r4 \u003d $r2.get(i3)\n  $r5 \u003d Attribute) $r4\n  new JDOMAttributePointer($r3, $r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JDOMAttributeIterator#setPosition(...1)",
        "body": "{\r\n    if (attributes \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    this.position \u003d position;\r\n    return position \u003e\u003d 1 \u0026\u0026 position \u003c\u003d attributes.size();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator",
    "methodName": "setPosition",
    "signature": "boolean setPosition(int)",
    "visibility": "public",
    "body": "{\r\n    if (attributes \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    this.position \u003d position;\r\n    return position \u003e\u003d 1 \u0026\u0026 position \u003c\u003d attributes.size();\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003c 1) → B3 | else → B5",
      "B3 : If(i0 \u003e $i1) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  JDOMAttributeIterator\n  i0 :\u003d @parameter0: int\n  $r1 \u003d List attributes\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  JDOMAttributeIterator: int position\u003e \u003d i0\n  if (i0 \u003c 1) goto B3 else B5\n}",
      "B3 {\n  $r2 \u003d List attributes\u003e\n  $i1 \u003d $r2.size()\n  if (i0 \u003e $i1) goto B4 else B5\n}",
      "B4 {\n  $z0 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z0 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMAttributePointer",
    "methodName": "asPath",
    "signature": "java.lang.String asPath()",
    "visibility": "public",
    "body": "{\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    if (parent !\u003d null) {\r\n        buffer.append(parent.asPath());\r\n        if (buffer.length() \u003d\u003d 0 || buffer.charAt(buffer.length() - 1) !\u003d \u0027/\u0027) {\r\n            buffer.append(\u0027/\u0027);\r\n        }\r\n    }\r\n    buffer.append(\u0027@\u0027);\r\n    buffer.append(getName());\r\n    return buffer.toString();\r\n}",
    "nodes": 5,
    "edges": 7,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B4",
      "B1 : If($i0 \u003d\u003d false) → B2 | else → B3",
      "B2 : If($i4 \u003d\u003d 47) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  JDOMAttributePointer\n  $r7 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d NodePointer parent\u003e\n  if ($r2 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r3 \u003d NodePointer parent\u003e\n  $r4 \u003d $r3.asPath()\n  $r7.append($r4)\n  $i0 \u003d $r7.length()\n  if ($i0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d $r7.length()\n  $i2 \u003d $i1 - 1\n  $c3 \u003d $r7.charAt($i2)\n  $i4 \u003d (int) $c3\n  if ($i4 \u003d\u003d 47) goto B3 else B4\n}",
      "B3 {\n  $r7.append(47)\n}",
      "B4 {\n  $r7.append(64)\n  $r5 \u003d r1.getName()\n  $r7.append($r5)\n  $r6 \u003d $r7.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JDOMAttributePointer#getName(...0)",
        "body": "{\r\n    return new QName(JDOMNodePointer.getPrefix(attribute), JDOMNodePointer.getLocalName(attribute));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMAttributePointer",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return object \u003d\u003d this || object instanceof JDOMAttributePointer \u0026\u0026 ((JDOMAttributePointer) object).attribute \u003d\u003d attribute;\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d r1) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B4",
      "B2 : If($r4 !\u003d $r3) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  JDOMAttributePointer\n  Object\n  if (r0 \u003d\u003d r1) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d JDOMAttributePointer\n  if ($z0 \u003d\u003d false) goto B2 else B4\n}",
      "B2 {\n  $r2 \u003d JDOMAttributePointer) r0\n  $r4 \u003d Attribute attribute\u003e\n  $r3 \u003d Attribute attribute\u003e\n  if ($r4 !\u003d $r3) goto B3 else B4\n}",
      "B3 {\n  $z1 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z1 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMAttributePointer",
    "methodName": "getNamespaceURI",
    "signature": "java.lang.String getNamespaceURI()",
    "visibility": "public",
    "body": "{\r\n    String uri \u003d attribute.getNamespaceURI();\r\n    if (uri !\u003d null \u0026\u0026 uri.isEmpty()) {\r\n        uri \u003d null;\r\n    }\r\n    return uri;\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  JDOMAttributePointer\n  $r1 \u003d Attribute attribute\u003e\n  r2 \u003d $r1.getNamespaceURI()\n  if (r2 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d r2.isEmpty()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMNamespaceIterator",
    "methodName": "getNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer getNodePointer()",
    "visibility": "public",
    "body": "{\r\n    if (position \u003d\u003d 0) {\r\n        if (!setPosition(1)) {\r\n            return null;\r\n        }\r\n        position \u003d 0;\r\n    }\r\n    int index \u003d position - 1;\r\n    if (index \u003c 0) {\r\n        index \u003d 0;\r\n    }\r\n    final Namespace ns \u003d namespaces.get(index);\r\n    return new JDOMNamespacePointer(parent, ns.getPrefix(), ns.getURI());\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B4",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3",
      "B4 : If($i2 \u003e\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  JDOMNamespaceIterator\n  $i0 \u003d JDOMNamespaceIterator: int position\u003e\n  if ($i0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $z0 \u003d r0.setPosition(1)\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  JDOMNamespaceIterator: int position\u003e \u003d 0\n}",
      "B4 {\n  $i1 \u003d JDOMNamespaceIterator: int position\u003e\n  $i2 \u003d $i1 - 1\n  i3 \u003d $i2\n  if ($i2 \u003e\u003d 0) goto B5 else B6\n}",
      "B5 {\n  i3 \u003d 0\n}",
      "B6 {\n  $r1 \u003d List namespaces\u003e\n  $r2 \u003d $r1.get(i3)\n  $r7 \u003d Namespace) $r2\n  $r3 \u003d JDOMNamespacePointer\n  $r4 \u003d NodePointer parent\u003e\n  $r6 \u003d $r7.getPrefix()\n  $r5 \u003d $r7.getURI()\n  new JDOMNamespacePointer($r4, $r6, $r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JDOMNamespaceIterator#setPosition(...1)",
        "body": "{\r\n    if (namespaces \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    this.position \u003d position;\r\n    return position \u003e\u003d 1 \u0026\u0026 position \u003c\u003d namespaces.size();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMNamespaceIterator",
    "methodName": "setPosition",
    "signature": "boolean setPosition(int)",
    "visibility": "public",
    "body": "{\r\n    if (namespaces \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    this.position \u003d position;\r\n    return position \u003e\u003d 1 \u0026\u0026 position \u003c\u003d namespaces.size();\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003c 1) → B3 | else → B5",
      "B3 : If(i0 \u003e $i1) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  JDOMNamespaceIterator\n  i0 :\u003d @parameter0: int\n  $r1 \u003d List namespaces\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  JDOMNamespaceIterator: int position\u003e \u003d i0\n  if (i0 \u003c 1) goto B3 else B5\n}",
      "B3 {\n  $r2 \u003d List namespaces\u003e\n  $i1 \u003d $r2.size()\n  if (i0 \u003e $i1) goto B4 else B5\n}",
      "B4 {\n  $z0 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z0 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMNamespacePointer",
    "methodName": "asPath",
    "signature": "java.lang.String asPath()",
    "visibility": "public",
    "body": "{\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    if (parent !\u003d null) {\r\n        buffer.append(parent.asPath());\r\n        if (buffer.length() \u003d\u003d 0 || buffer.charAt(buffer.length() - 1) !\u003d \u0027/\u0027) {\r\n            buffer.append(\u0027/\u0027);\r\n        }\r\n    }\r\n    buffer.append(\"namespace::\");\r\n    buffer.append(prefix);\r\n    return buffer.toString();\r\n}",
    "nodes": 5,
    "edges": 7,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B4",
      "B1 : If($i0 \u003d\u003d false) → B2 | else → B3",
      "B2 : If($i4 \u003d\u003d 47) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  JDOMNamespacePointer\n  $r7 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d NodePointer parent\u003e\n  if ($r2 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r3 \u003d NodePointer parent\u003e\n  $r4 \u003d $r3.asPath()\n  $r7.append($r4)\n  $i0 \u003d $r7.length()\n  if ($i0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d $r7.length()\n  $i2 \u003d $i1 - 1\n  $c3 \u003d $r7.charAt($i2)\n  $i4 \u003d (int) $c3\n  if ($i4 \u003d\u003d 47) goto B3 else B4\n}",
      "B3 {\n  $r7.append(47)\n}",
      "B4 {\n  $r7.append(\"namespace::\")\n  $r5 \u003d String prefix\u003e\n  $r7.append($r5)\n  $r6 \u003d $r7.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMNamespacePointer",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return object \u003d\u003d this || object instanceof JDOMNamespacePointer \u0026\u0026 prefix.equals(((JDOMNamespacePointer) object).prefix);\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d r1) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B4",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  JDOMNamespacePointer\n  Object\n  if (r0 \u003d\u003d r1) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d JDOMNamespacePointer\n  if ($z0 \u003d\u003d false) goto B2 else B4\n}",
      "B2 {\n  $r4 \u003d String prefix\u003e\n  $r2 \u003d JDOMNamespacePointer) r0\n  $r3 \u003d String prefix\u003e\n  $z1 \u003d $r4.equals($r3)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $z2 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z2 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMNamespacePointer",
    "methodName": "getNamespaceURI",
    "signature": "java.lang.String getNamespaceURI()",
    "visibility": "public",
    "body": "{\r\n    if (namespaceURI \u003d\u003d null) {\r\n        namespaceURI \u003d parent.getNamespaceURI(prefix);\r\n    }\r\n    return namespaceURI;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JDOMNamespacePointer\n  $r1 \u003d String namespaceURI\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d NodePointer parent\u003e\n  $r3 \u003d String prefix\u003e\n  $r5 \u003d $r4.getNamespaceURI($r3)\n  String namespaceURI\u003e \u003d $r5\n}",
      "B2 {\n  $r2 \u003d String namespaceURI\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMNodeIterator",
    "methodName": "getNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer getNodePointer()",
    "visibility": "public",
    "body": "{\r\n    if (child \u003d\u003d null) {\r\n        if (!setPosition(1)) {\r\n            return null;\r\n        }\r\n        position \u003d 0;\r\n    }\r\n    return new JDOMNodePointer(parent, child);\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B4",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  JDOMNodeIterator\n  $r1 \u003d Object child\u003e\n  if ($r1 !\u003d null) goto B1 else B4\n}",
      "B1 {\n  $z0 \u003d r0.setPosition(1)\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  JDOMNodeIterator: int position\u003e \u003d 0\n}",
      "B4 {\n  $r2 \u003d JDOMNodePointer\n  $r4 \u003d NodePointer parent\u003e\n  $r3 \u003d Object child\u003e\n  new JDOMNodePointer($r4, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JDOMNodeIterator#setPosition(...1)",
        "body": "{\r\n    while (this.position \u003c position) {\r\n        if (!next()) {\r\n            return false;\r\n        }\r\n    }\r\n    while (this.position \u003e position) {\r\n        if (!previous()) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMNodeIterator",
    "methodName": "setPosition",
    "signature": "boolean setPosition(int)",
    "visibility": "public",
    "body": "{\r\n    while (this.position \u003c position) {\r\n        if (!next()) {\r\n            return false;\r\n        }\r\n    }\r\n    while (this.position \u003e position) {\r\n        if (!previous()) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B1 : If($i1 \u003e\u003d i0) → B2 | else → B4",
      "B2 : If($z1 !\u003d 0) → B3 | else → B1",
      "B4 : If($i2 \u003c\u003d i0) → B5 | else → B7",
      "B5 : If($z0 !\u003d 0) → B6 | else → B4"
    ],
    "blockList": [
      "B0 {\n  JDOMNodeIterator\n  i0 :\u003d @parameter0: int\n}",
      "B1 {\n  $i1 \u003d JDOMNodeIterator: int position\u003e\n  if ($i1 \u003e\u003d i0) goto B2 else B4\n}",
      "B2 {\n  $z1 \u003d r0.next()\n  if ($z1 !\u003d 0) goto B3 else B1\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i2 \u003d JDOMNodeIterator: int position\u003e\n  if ($i2 \u003c\u003d i0) goto B5 else B7\n}",
      "B5 {\n  $z0 \u003d r0.previous()\n  if ($z0 !\u003d 0) goto B6 else B4\n}",
      "B6 {\n  return\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JDOMNodeIterator#next(...0)",
        "body": "{\r\n    position++;\r\n    if (!reverse) {\r\n        if (position \u003d\u003d 1) {\r\n            index \u003d 0;\r\n            if (child !\u003d null) {\r\n                index \u003d children.indexOf(child) + 1;\r\n            }\r\n        } else {\r\n            index++;\r\n        }\r\n        for (; index \u003c children.size(); index++) {\r\n            child \u003d children.get(index);\r\n            if (testChild()) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    if (position \u003d\u003d 1) {\r\n        index \u003d children.size() - 1;\r\n        if (child !\u003d null) {\r\n            index \u003d children.indexOf(child) - 1;\r\n        }\r\n    } else {\r\n        index--;\r\n    }\r\n    for (; index \u003e\u003d 0; index--) {\r\n        child \u003d children.get(index);\r\n        if (testChild()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      },
      {
        "name": "JDOMNodeIterator#previous(...0)",
        "body": "{\r\n    position--;\r\n    if (!reverse) {\r\n        while (--index \u003e\u003d 0) {\r\n            child \u003d children.get(index);\r\n            if (testChild()) {\r\n                return true;\r\n            }\r\n        }\r\n    } else {\r\n        for (; index \u003c children.size(); index++) {\r\n            child \u003d children.get(index);\r\n            if (testChild()) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer",
    "methodName": "getLocalName",
    "signature": "java.lang.String getLocalName(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (node instanceof Element) {\r\n        return ((Element) node).getName();\r\n    }\r\n    if (node instanceof Attribute) {\r\n        return ((Attribute) node).getName();\r\n    }\r\n    return null;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Object\n  $z0 \u003d Element\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Element) r0\n  $r4 \u003d $r3.getName()\n  return\n}",
      "B2 {\n  $z1 \u003d Attribute\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d Attribute) r0\n  $r2 \u003d $r1.getName()\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer",
    "methodName": "getPrefix",
    "signature": "java.lang.String getPrefix(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (node instanceof Element) {\r\n        final String prefix \u003d ((Element) node).getNamespacePrefix();\r\n        return prefix \u003d\u003d null || prefix.isEmpty() ? null : prefix;\r\n    }\r\n    if (node instanceof Attribute) {\r\n        final String prefix \u003d ((Attribute) node).getNamespacePrefix();\r\n        return prefix \u003d\u003d null || prefix.isEmpty() ? null : prefix;\r\n    }\r\n    return null;\r\n}",
    "nodes": 13,
    "edges": 16,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B6",
      "B1 : If(r3 \u003d\u003d null) → B2 | else → B3",
      "B2 : If($z3 \u003d\u003d false) → B3 | else → B4",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B12",
      "B7 : If(r5 \u003d\u003d null) → B8 | else → B9",
      "B8 : If($z2 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  Object\n  $z0 \u003d Element\n  if ($z0 \u003d\u003d false) goto B1 else B6\n}",
      "B1 {\n  $r2 \u003d Element) r0\n  r3 \u003d $r2.getNamespacePrefix()\n  if (r3 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $z3 \u003d r3.isEmpty()\n  if ($z3 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d null\n  goto B5\n}",
      "B4 {\n  $r4 \u003d r3\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $z1 \u003d Attribute\n  if ($z1 \u003d\u003d false) goto B7 else B12\n}",
      "B7 {\n  $r1 \u003d Attribute) r0\n  r5 \u003d $r1.getNamespacePrefix()\n  if (r5 \u003d\u003d null) goto B8 else B9\n}",
      "B8 {\n  $z2 \u003d r5.isEmpty()\n  if ($z2 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r6 \u003d null\n  goto B11\n}",
      "B10 {\n  $r6 \u003d r5\n}",
      "B11 {\n  return\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B12",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer",
    "methodName": "testNode",
    "signature": "boolean testNode(org.apache.commons.jxpath.ri.model.NodePointer,java.lang.Object,org.apache.commons.jxpath.ri.compiler.NodeTest)",
    "visibility": "public",
    "body": "{\r\n    if (test \u003d\u003d null) {\r\n        return true;\r\n    }\r\n    if (test instanceof NodeNameTest) {\r\n        if (!(node instanceof Element)) {\r\n            return false;\r\n        }\r\n        final NodeNameTest nodeNameTest \u003d (NodeNameTest) test;\r\n        final QName testName \u003d nodeNameTest.getNodeName();\r\n        final String namespaceURI \u003d nodeNameTest.getNamespaceURI();\r\n        final boolean wildcard \u003d nodeNameTest.isWildcard();\r\n        final String testPrefix \u003d testName.getPrefix();\r\n        if (wildcard \u0026\u0026 testPrefix \u003d\u003d null) {\r\n            return true;\r\n        }\r\n        if (wildcard || testName.getName().equals(getLocalName(node))) {\r\n            final String nodeNS \u003d getNamespaceURI(node);\r\n            return equalStrings(namespaceURI, nodeNS) || nodeNS \u003d\u003d null \u0026\u0026 equalStrings(testPrefix, getPrefix(node));\r\n        }\r\n        return false;\r\n    }\r\n    if (test instanceof NodeTypeTest) {\r\n        switch(((NodeTypeTest) test).getNodeType()) {\r\n            case Compiler.NODE_TYPE_NODE:\r\n                return true;\r\n            case Compiler.NODE_TYPE_TEXT:\r\n                return node instanceof Text || node instanceof CDATA;\r\n            case Compiler.NODE_TYPE_COMMENT:\r\n                return node instanceof Comment;\r\n            case Compiler.NODE_TYPE_PI:\r\n                return node instanceof ProcessingInstruction;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n    if (test instanceof ProcessingInstructionTest \u0026\u0026 node instanceof ProcessingInstruction) {\r\n        final String testPI \u003d ((ProcessingInstructionTest) test).getTarget();\r\n        final String nodePI \u003d ((ProcessingInstruction) node).getTarget();\r\n        return testPI.equals(nodePI);\r\n    }\r\n    return false;\r\n}",
    "nodes": 32,
    "edges": 39,
    "cc": 9,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B17",
      "B3 : If($z9 !\u003d 0) → B4 | else → B5",
      "B5 : If(z10 \u003d\u003d false) → B6 | else → B8",
      "B6 : If(r6 !\u003d null) → B7 | else → B8",
      "B8 : If(z10 !\u003d 0) → B9 | else → B10",
      "B9 : If($z13 \u003d\u003d false) → B10 | else → B16",
      "B10 : If($z11 !\u003d 0) → B11 | else → B13",
      "B11 : If($r10 !\u003d null) → B12 | else → B14",
      "B12 : If($z12 \u003d\u003d false) → B13 | else → B14",
      "B17 : If($z1 \u003d\u003d false) → B18 | else → B28",
      "B18 : If(switch-on $i0) → B19 | else → B20",
      "B20 : If($z7 !\u003d 0) → B21 | else → B22",
      "B21 : If($z8 \u003d\u003d false) → B22 | else → B23",
      "B28 : If($z2 \u003d\u003d false) → B29 | else → B31",
      "B29 : If($z3 \u003d\u003d false) → B30 | else → B31"
    ],
    "blockList": [
      "B0 {\n  NodePointer\n  Object\n  NodeTest\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d NodeNameTest\n  if ($z0 \u003d\u003d false) goto B3 else B17\n}",
      "B3 {\n  $z9 \u003d Element\n  if ($z9 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  r12 \u003d NodeNameTest) r0\n  r13 \u003d r12.getNodeName()\n  r5 \u003d r12.getNamespaceURI()\n  z10 \u003d r12.isWildcard()\n  r6 \u003d r13.getPrefix()\n  if (z10 \u003d\u003d false) goto B6 else B8\n}",
      "B6 {\n  if (r6 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  if (z10 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  $r9 \u003d r13.getName()\n  $r8 \u003d JDOMNodePointer.getLocalName(r1)\n  $z13 \u003d $r9.equals($r8)\n  if ($z13 \u003d\u003d false) goto B10 else B16\n}",
      "B10 {\n  $r10 \u003d JDOMNodePointer.getNamespaceURI(r1)\n  $z11 \u003d JDOMNodePointer.equalStrings(r5, $r10)\n  if ($z11 !\u003d 0) goto B11 else B13\n}",
      "B11 {\n  if ($r10 !\u003d null) goto B12 else B14\n}",
      "B12 {\n  $r7 \u003d JDOMNodePointer.getPrefix(r1)\n  $z12 \u003d JDOMNodePointer.equalStrings(r6, $r7)\n  if ($z12 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  $z14 \u003d 1\n  goto B15\n}",
      "B14 {\n  $z14 \u003d 0\n}",
      "B15 {\n  return\n}",
      "B16 {\n  return\n}",
      "B17 {\n  $z1 \u003d NodeTypeTest\n  if ($z1 \u003d\u003d false) goto B18 else B28\n}",
      "B18 {\n  $r4 \u003d NodeTypeTest) r0\n  $i0 \u003d $r4.getNodeType()\n  ProcessingInstruction;     default: goto return 0; }\n}",
      "B19 {\n  return\n}",
      "B20 {\n  $z7 \u003d Text\n  if ($z7 !\u003d 0) goto B21 else B22\n}",
      "B21 {\n  $z8 \u003d CDATA\n  if ($z8 \u003d\u003d false) goto B22 else B23\n}",
      "B22 {\n  $z15 \u003d 1\n  goto B24\n}",
      "B23 {\n  $z15 \u003d 0\n}",
      "B24 {\n  return\n}",
      "B25 {\n  $z6 \u003d Comment\n  return\n}",
      "B26 {\n  $z5 \u003d ProcessingInstruction\n  return\n}",
      "B27 {\n  return\n}",
      "B28 {\n  $z2 \u003d ProcessingInstructionTest\n  if ($z2 \u003d\u003d false) goto B29 else B31\n}",
      "B29 {\n  $z3 \u003d ProcessingInstruction\n  if ($z3 \u003d\u003d false) goto B30 else B31\n}",
      "B30 {\n  $r2 \u003d ProcessingInstructionTest) r0\n  r14 \u003d $r2.getTarget()\n  $r3 \u003d ProcessingInstruction) r1\n  r15 \u003d $r3.getTarget()\n  $z4 \u003d r14.equals(r15)\n  return\n}",
      "B31 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B17",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B9 --\u003e B16",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B14",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e B18",
      "B17 --\u003e B28",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B18 --\u003e B25",
      "B18 --\u003e B26",
      "B18 --\u003e B27",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B24",
      "B24 --\u003e [EXIT]",
      "B25 --\u003e [EXIT]",
      "B26 --\u003e [EXIT]",
      "B27 --\u003e [EXIT]",
      "B28 --\u003e B29",
      "B28 --\u003e B31",
      "B29 --\u003e B30",
      "B29 --\u003e B31",
      "B30 --\u003e [EXIT]",
      "B31 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JDOMNodePointer#getNamespaceURI(...1)",
        "body": "{\r\n    if (node instanceof Element) {\r\n        final Element element \u003d (Element) node;\r\n        String ns \u003d element.getNamespaceURI();\r\n        if (\"\".equals(ns)) {\r\n            ns \u003d null;\r\n        }\r\n        return ns;\r\n    }\r\n    return null;\r\n}"
      },
      {
        "name": "JDOMNodePointer#getPrefix(...1)",
        "body": "{\r\n    if (node instanceof Element) {\r\n        final String prefix \u003d ((Element) node).getNamespacePrefix();\r\n        return prefix \u003d\u003d null || prefix.isEmpty() ? null : prefix;\r\n    }\r\n    if (node instanceof Attribute) {\r\n        final String prefix \u003d ((Attribute) node).getNamespacePrefix();\r\n        return prefix \u003d\u003d null || prefix.isEmpty() ? null : prefix;\r\n    }\r\n    return null;\r\n}"
      },
      {
        "name": "JDOMNodePointer#equalStrings(...2)",
        "body": "{\r\n    if (s1 \u003d\u003d s2) {\r\n        return true;\r\n    }\r\n    s1 \u003d s1 \u003d\u003d null ? \"\" : s1.trim();\r\n    s2 \u003d s2 \u003d\u003d null ? \"\" : s2.trim();\r\n    return s1.equals(s2);\r\n}"
      },
      {
        "name": "JDOMNodePointer#getLocalName(...1)",
        "body": "{\r\n    if (node instanceof Element) {\r\n        return ((Element) node).getName();\r\n    }\r\n    if (node instanceof Attribute) {\r\n        return ((Attribute) node).getName();\r\n    }\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer",
    "methodName": "asPath",
    "signature": "java.lang.String asPath()",
    "visibility": "public",
    "body": "{\r\n    if (id !\u003d null) {\r\n        return \"id(\u0027\" + escape(id) + \"\u0027)\";\r\n    }\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    if (parent !\u003d null) {\r\n        buffer.append(parent.asPath());\r\n    }\r\n    if (node instanceof Element) {\r\n        // If the parent pointer is not a JDOMNodePointer, it is\r\n        // the parent\u0027s responsibility to produce the node test part\r\n        // of the path\r\n        if (parent instanceof JDOMNodePointer) {\r\n            if (buffer.length() \u003d\u003d 0 || buffer.charAt(buffer.length() - 1) !\u003d \u0027/\u0027) {\r\n                buffer.append(\u0027/\u0027);\r\n            }\r\n            final String nsURI \u003d getNamespaceURI();\r\n            final String ln \u003d getLocalName(node);\r\n            if (nsURI \u003d\u003d null) {\r\n                buffer.append(ln);\r\n                buffer.append(\u0027[\u0027);\r\n                buffer.append(getRelativePositionByQName()).append(\u0027]\u0027);\r\n            } else {\r\n                final String prefix \u003d getNamespaceResolver().getPrefix(nsURI);\r\n                if (prefix !\u003d null) {\r\n                    buffer.append(prefix);\r\n                    buffer.append(\u0027:\u0027);\r\n                    buffer.append(ln);\r\n                    buffer.append(\u0027[\u0027);\r\n                    buffer.append(getRelativePositionByQName());\r\n                } else {\r\n                    buffer.append(\"node()\");\r\n                    buffer.append(\u0027[\u0027);\r\n                    buffer.append(getRelativePositionOfElement());\r\n                }\r\n                buffer.append(\u0027]\u0027);\r\n            }\r\n        }\r\n    } else if (node instanceof Text || node instanceof CDATA) {\r\n        buffer.append(\"/text()\");\r\n        buffer.append(\u0027[\u0027).append(getRelativePositionOfTextNode()).append(\u0027]\u0027);\r\n    } else if (node instanceof ProcessingInstruction) {\r\n        buffer.append(\"/processing-instruction(\\\u0027\").append(((ProcessingInstruction) node).getTarget()).append(\"\u0027)\");\r\n        buffer.append(\u0027[\u0027).append(getRelativePositionOfPI()).append(\u0027]\u0027);\r\n    }\r\n    return buffer.toString();\r\n}",
    "nodes": 22,
    "edges": 31,
    "cc": 11,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r3 \u003d\u003d null) → B3 | else → B4",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B16",
      "B5 : If($z4 \u003d\u003d false) → B6 | else → B21",
      "B6 : If($i2 \u003d\u003d false) → B7 | else → B8",
      "B7 : If($i9 \u003d\u003d 47) → B8 | else → B9",
      "B9 : If($r30 !\u003d null) → B10 | else → B11",
      "B11 : If(r19 \u003d\u003d null) → B12 | else → B13",
      "B16 : If($z1 !\u003d 0) → B17 | else → B18",
      "B17 : If($z2 \u003d\u003d false) → B18 | else → B19",
      "B19 : If($z3 \u003d\u003d false) → B20 | else → B21"
    ],
    "blockList": [
      "B0 {\n  JDOMNodePointer\n  $r1 \u003d String id\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r34 \u003d StringBuilder\n  new StringBuilder()\n  $r26 \u003d $r34.append(\"id(\\\u0027\")\n  $r24 \u003d String id\u003e\n  $r25 \u003d r0.escape($r24)\n  $r27 \u003d $r26.append($r25)\n  $r28 \u003d $r27.append(\"\\\u0027)\")\n  $r29 \u003d $r28.toString()\n  return\n}",
      "B2 {\n  $r35 \u003d StringBuilder\n  new StringBuilder()\n  $r3 \u003d NodePointer parent\u003e\n  if ($r3 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r21 \u003d NodePointer parent\u003e\n  $r22 \u003d $r21.asPath()\n  $r35.append($r22)\n}",
      "B4 {\n  $r4 \u003d Object node\u003e\n  $z0 \u003d Element\n  if ($z0 \u003d\u003d false) goto B5 else B16\n}",
      "B5 {\n  $r17 \u003d NodePointer parent\u003e\n  $z4 \u003d JDOMNodePointer\n  if ($z4 \u003d\u003d false) goto B6 else B21\n}",
      "B6 {\n  $i2 \u003d $r35.length()\n  if ($i2 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $i6 \u003d $r35.length()\n  $i7 \u003d $i6 - 1\n  $c8 \u003d $r35.charAt($i7)\n  $i9 \u003d (int) $c8\n  if ($i9 \u003d\u003d 47) goto B8 else B9\n}",
      "B8 {\n  $r35.append(47)\n}",
      "B9 {\n  $r30 \u003d r0.getNamespaceURI()\n  $r31 \u003d Object node\u003e\n  $r32 \u003d JDOMNodePointer.getLocalName($r31)\n  if ($r30 !\u003d null) goto B10 else B11\n}",
      "B10 {\n  $r35.append($r32)\n  $r35.append(91)\n  $i5 \u003d r0.getRelativePositionByQName()\n  $r20 \u003d $r35.append($i5)\n  $r20.append(93)\n  goto B15\n}",
      "B11 {\n  $r18 \u003d r0.getNamespaceResolver()\n  r19 \u003d $r18.getPrefix($r30)\n  if (r19 \u003d\u003d null) goto B12 else B13\n}",
      "B12 {\n  $r35.append(r19)\n  $r35.append(58)\n  $r35.append($r32)\n  $r35.append(91)\n  $i4 \u003d r0.getRelativePositionByQName()\n  $r35.append($i4)\n  goto B14\n}",
      "B13 {\n  $r35.append(\"node()\")\n  $r35.append(91)\n  $i3 \u003d r0.getRelativePositionOfElement()\n  $r35.append($i3)\n}",
      "B14 {\n  $r35.append(93)\n}",
      "B15 {\n  goto B21\n}",
      "B16 {\n  $r5 \u003d Object node\u003e\n  $z1 \u003d Text\n  if ($z1 !\u003d 0) goto B17 else B18\n}",
      "B17 {\n  $r8 \u003d Object node\u003e\n  $z2 \u003d CDATA\n  if ($z2 \u003d\u003d false) goto B18 else B19\n}",
      "B18 {\n  $r35.append(\"/text()\")\n  $r6 \u003d $r35.append(91)\n  $i0 \u003d r0.getRelativePositionOfTextNode()\n  $r7 \u003d $r6.append($i0)\n  $r7.append(93)\n  goto B21\n}",
      "B19 {\n  $r9 \u003d Object node\u003e\n  $z3 \u003d ProcessingInstruction\n  if ($z3 \u003d\u003d false) goto B20 else B21\n}",
      "B20 {\n  $r13 \u003d $r35.append(\"/processing-instruction(\\\u0027\")\n  $r10 \u003d Object node\u003e\n  $r11 \u003d ProcessingInstruction) $r10\n  $r12 \u003d $r11.getTarget()\n  $r14 \u003d $r13.append($r12)\n  $r14.append(\"\\\u0027)\")\n  $r15 \u003d $r35.append(91)\n  $i1 \u003d r0.getRelativePositionOfPI()\n  $r16 \u003d $r15.append($i1)\n  $r16.append(93)\n}",
      "B21 {\n  $r33 \u003d $r35.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B16",
      "B5 --\u003e B6",
      "B5 --\u003e B21",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B15",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B15 --\u003e B21",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B21",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B21",
      "B21 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JDOMNodePointer#getNamespaceURI(...0)",
        "body": "{\r\n    return getNamespaceURI(node);\r\n}"
      },
      {
        "name": "JDOMNodePointer#escape(...1)",
        "body": "(source not found)"
      },
      {
        "name": "JDOMNodePointer#getNamespaceResolver(...0)",
        "body": "{\r\n    if (localNamespaceResolver \u003d\u003d null) {\r\n        localNamespaceResolver \u003d new NamespaceResolver(super.getNamespaceResolver());\r\n        localNamespaceResolver.setNamespaceContextPointer(this);\r\n    }\r\n    return localNamespaceResolver;\r\n}"
      },
      {
        "name": "JDOMNodePointer#getRelativePositionOfElement(...0)",
        "body": "{\r\n    final Object parent \u003d ((Element) node).getParent();\r\n    if (parent \u003d\u003d null) {\r\n        return 1;\r\n    }\r\n    List children;\r\n    if (parent instanceof Element) {\r\n        children \u003d ((Element) parent).getContent();\r\n    } else {\r\n        children \u003d ((Document) parent).getContent();\r\n    }\r\n    int count \u003d 0;\r\n    for (final Object child : children) {\r\n        if (child instanceof Element) {\r\n            count++;\r\n        }\r\n        if (child \u003d\u003d node) {\r\n            break;\r\n        }\r\n    }\r\n    return count;\r\n}"
      },
      {
        "name": "JDOMNodePointer#getRelativePositionOfPI(...0)",
        "body": "{\r\n    final String target \u003d ((ProcessingInstruction) node).getTarget();\r\n    final Element parent \u003d (Element) ((ProcessingInstruction) node).getParent();\r\n    if (parent \u003d\u003d null) {\r\n        return 1;\r\n    }\r\n    final List children \u003d parent.getContent();\r\n    int count \u003d 0;\r\n    for (final Object child : children) {\r\n        if (child instanceof ProcessingInstruction \u0026\u0026 (target \u003d\u003d null || target.equals(((ProcessingInstruction) child).getTarget()))) {\r\n            count++;\r\n        }\r\n        if (child \u003d\u003d node) {\r\n            break;\r\n        }\r\n    }\r\n    return count;\r\n}"
      },
      {
        "name": "JDOMNodePointer#getRelativePositionByQName(...0)",
        "body": "{\r\n    if (node instanceof Element) {\r\n        final Object parent \u003d ((Element) node).getParent();\r\n        if (!(parent instanceof Element)) {\r\n            return 1;\r\n        }\r\n        final List children \u003d ((Element) parent).getContent();\r\n        int count \u003d 0;\r\n        for (final Object child : children) {\r\n            if (child instanceof Element \u0026\u0026 matchesQName((Element) child)) {\r\n                count++;\r\n            }\r\n            if (child \u003d\u003d node) {\r\n                break;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n    return 1;\r\n}"
      },
      {
        "name": "JDOMNodePointer#getRelativePositionOfTextNode(...0)",
        "body": "{\r\n    Element parent;\r\n    if (node instanceof Text) {\r\n        parent \u003d (Element) ((Text) node).getParent();\r\n    } else {\r\n        parent \u003d (Element) ((CDATA) node).getParent();\r\n    }\r\n    if (parent \u003d\u003d null) {\r\n        return 1;\r\n    }\r\n    final List children \u003d parent.getContent();\r\n    int count \u003d 0;\r\n    for (final Object child : children) {\r\n        if (child instanceof Text || child instanceof CDATA) {\r\n            count++;\r\n        }\r\n        if (child \u003d\u003d node) {\r\n            break;\r\n        }\r\n    }\r\n    return count;\r\n}"
      },
      {
        "name": "JDOMNodePointer#getLocalName(...1)",
        "body": "{\r\n    if (node instanceof Element) {\r\n        return ((Element) node).getName();\r\n    }\r\n    if (node instanceof Attribute) {\r\n        return ((Attribute) node).getName();\r\n    }\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer",
    "methodName": "compareChildNodePointers",
    "signature": "int compareChildNodePointers(org.apache.commons.jxpath.ri.model.NodePointer,org.apache.commons.jxpath.ri.model.NodePointer)",
    "visibility": "public",
    "body": "{\r\n    final Object node1 \u003d pointer1.getBaseValue();\r\n    final Object node2 \u003d pointer2.getBaseValue();\r\n    if (node1 \u003d\u003d node2) {\r\n        return 0;\r\n    }\r\n    if (node1 instanceof Attribute \u0026\u0026 !(node2 instanceof Attribute)) {\r\n        return -1;\r\n    }\r\n    if (!(node1 instanceof Attribute) \u0026\u0026 node2 instanceof Attribute) {\r\n        return 1;\r\n    }\r\n    if (node1 instanceof Attribute \u0026\u0026 node2 instanceof Attribute) {\r\n        final List list \u003d ((Element) getNode()).getAttributes();\r\n        final int length \u003d list.size();\r\n        for (int i \u003d 0; i \u003c length; i++) {\r\n            final Object n \u003d list.get(i);\r\n            if (n \u003d\u003d node1) {\r\n                return -1;\r\n            }\r\n            if (n \u003d\u003d node2) {\r\n                return 1;\r\n            }\r\n        }\r\n        // Should not happen\r\n        return 0;\r\n    }\r\n    if (!(node instanceof Element)) {\r\n        throw new IllegalStateException(\"JXPath internal error: compareChildNodes called for \" + node);\r\n    }\r\n    final List children \u003d ((Element) node).getContent();\r\n    final int length \u003d children.size();\r\n    for (int i \u003d 0; i \u003c length; i++) {\r\n        final Object n \u003d children.get(i);\r\n        if (n \u003d\u003d node1) {\r\n            return -1;\r\n        }\r\n        if (n \u003d\u003d node2) {\r\n            return 1;\r\n        }\r\n    }\r\n    return 0;\r\n}",
    "nodes": 28,
    "edges": 32,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r1 !\u003d r3) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B5",
      "B3 : If($z6 !\u003d 0) → B4 | else → B5",
      "B5 : If($z1 !\u003d 0) → B6 | else → B8",
      "B6 : If($z5 \u003d\u003d false) → B7 | else → B8",
      "B8 : If($z2 \u003d\u003d false) → B9 | else → B18",
      "B9 : If($z4 \u003d\u003d false) → B10 | else → B18",
      "B11 : If(i1 \u003e\u003d i0) → B12 | else → B17",
      "B12 : If(r17 !\u003d r1) → B13 | else → B14",
      "B14 : If(r17 !\u003d r3) → B15 | else → B16",
      "B18 : If($z3 !\u003d 0) → B19 | else → B20",
      "B21 : If(i3 \u003e\u003d i2) → B22 | else → B27",
      "B22 : If(r19 !\u003d r1) → B23 | else → B24",
      "B24 : If(r19 !\u003d r3) → B25 | else → B26"
    ],
    "blockList": [
      "B0 {\n  JDOMNodePointer\n  NodePointer\n  NodePointer\n  r1 \u003d r0.getBaseValue()\n  r3 \u003d r2.getBaseValue()\n  if (r1 !\u003d r3) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d Attribute\n  if ($z0 \u003d\u003d false) goto B3 else B5\n}",
      "B3 {\n  $z6 \u003d Attribute\n  if ($z6 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $i5 \u003d (int) -1\n  return\n}",
      "B5 {\n  $z1 \u003d Attribute\n  if ($z1 !\u003d 0) goto B6 else B8\n}",
      "B6 {\n  $z5 \u003d Attribute\n  if ($z5 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $z2 \u003d Attribute\n  if ($z2 \u003d\u003d false) goto B9 else B18\n}",
      "B9 {\n  $z4 \u003d Attribute\n  if ($z4 \u003d\u003d false) goto B10 else B18\n}",
      "B10 {\n  $r14 \u003d r4.getNode()\n  $r15 \u003d Element) $r14\n  r16 \u003d $r15.getAttributes()\n  i0 \u003d r16.size()\n  i1 \u003d 0\n}",
      "B11 {\n  if (i1 \u003e\u003d i0) goto B12 else B17\n}",
      "B12 {\n  r17 \u003d r16.get(i1)\n  if (r17 !\u003d r1) goto B13 else B14\n}",
      "B13 {\n  $i7 \u003d (int) -1\n  return\n}",
      "B14 {\n  if (r17 !\u003d r3) goto B15 else B16\n}",
      "B15 {\n  return\n}",
      "B16 {\n  i1 \u003d i1 + 1\n  goto B11\n}",
      "B17 {\n  return\n}",
      "B18 {\n  $r5 \u003d Object node\u003e\n  $z3 \u003d Element\n  if ($z3 !\u003d 0) goto B19 else B20\n}",
      "B19 {\n  $r21 \u003d IllegalStateException\n  $r20 \u003d StringBuilder\n  new StringBuilder()\n  $r11 \u003d $r20.append(\"JXPath internal error: compareChildNodes called for \")\n  $r10 \u003d Object node\u003e\n  $r12 \u003d $r11.append($r10)\n  $r13 \u003d $r12.toString()\n  new IllegalStateException($r13)\n  throw $r21\n}",
      "B20 {\n  $r6 \u003d Object node\u003e\n  $r7 \u003d Element) $r6\n  r18 \u003d $r7.getContent()\n  i2 \u003d r18.size()\n  i3 \u003d 0\n}",
      "B21 {\n  if (i3 \u003e\u003d i2) goto B22 else B27\n}",
      "B22 {\n  r19 \u003d r18.get(i3)\n  if (r19 !\u003d r1) goto B23 else B24\n}",
      "B23 {\n  $i9 \u003d (int) -1\n  return\n}",
      "B24 {\n  if (r19 !\u003d r3) goto B25 else B26\n}",
      "B25 {\n  return\n}",
      "B26 {\n  i3 \u003d i3 + 1\n  goto B21\n}",
      "B27 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B18",
      "B9 --\u003e B10",
      "B9 --\u003e B18",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B17",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B11",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e B21",
      "B21 --\u003e B22",
      "B21 --\u003e B27",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e [EXIT]",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e [EXIT]",
      "B26 --\u003e B21",
      "B27 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JDOMNodePointer#getNode(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer",
    "methodName": "createAttribute",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createAttribute(org.apache.commons.jxpath.JXPathContext,org.apache.commons.jxpath.ri.QName)",
    "visibility": "public",
    "body": "{\r\n    if (!(node instanceof Element)) {\r\n        return super.createAttribute(context, qName);\r\n    }\r\n    final Element element \u003d (Element) node;\r\n    final String prefix \u003d qName.getPrefix();\r\n    if (prefix !\u003d null) {\r\n        final String namespaceUri \u003d getNamespaceResolver().getNamespaceURI(prefix);\r\n        if (namespaceUri \u003d\u003d null) {\r\n            throw new JXPathException(\"Unknown namespace prefix: \" + prefix);\r\n        }\r\n        final Namespace ns \u003d Namespace.getNamespace(prefix, namespaceUri);\r\n        final Attribute attr \u003d element.getAttribute(qName.getName(), ns);\r\n        if (attr \u003d\u003d null) {\r\n            element.setAttribute(qName.getName(), \"\", ns);\r\n        }\r\n    } else {\r\n        final Attribute attr \u003d element.getAttribute(qName.getName());\r\n        if (attr \u003d\u003d null) {\r\n            element.setAttribute(qName.getName(), \"\");\r\n        }\r\n    }\r\n    final NodeIterator it \u003d attributeIterator(qName);\r\n    it.setPosition(1);\r\n    return it.getNodePointer();\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If(r5 \u003d\u003d null) → B3 | else → B8",
      "B3 : If(r20 !\u003d null) → B4 | else → B5",
      "B5 : If(r11 !\u003d null) → B6 | else → B7",
      "B8 : If(r21 !\u003d null) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  JDOMNodePointer\n  JXPathContext\n  QName\n  $r1 \u003d Object node\u003e\n  $z0 \u003d Element\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r19 \u003d r0.createAttribute(r18, r4)\n  return\n}",
      "B2 {\n  $r2 \u003d Object node\u003e\n  r3 \u003d Element) $r2\n  r5 \u003d r4.getPrefix()\n  if (r5 \u003d\u003d null) goto B3 else B8\n}",
      "B3 {\n  $r8 \u003d r0.getNamespaceResolver()\n  r20 \u003d $r8.getNamespaceURI(r5)\n  if (r20 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r13 \u003d JXPathException\n  $r14 \u003d StringBuilder\n  new StringBuilder()\n  $r15 \u003d $r14.append(\"Unknown namespace prefix: \")\n  $r16 \u003d $r15.append(r5)\n  $r17 \u003d $r16.toString()\n  new JXPathException($r17)\n  throw $r13\n}",
      "B5 {\n  r9 \u003d Namespace.getNamespace(r5, r20)\n  $r10 \u003d r4.getName()\n  r11 \u003d r3.getAttribute($r10, r9)\n  if (r11 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r12 \u003d r4.getName()\n  r3.setAttribute($r12, \"\", r9)\n}",
      "B7 {\n  goto B10\n}",
      "B8 {\n  $r6 \u003d r4.getName()\n  r21 \u003d r3.getAttribute($r6)\n  if (r21 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  $r7 \u003d r4.getName()\n  r3.setAttribute($r7, \"\")\n}",
      "B10 {\n  $r22 \u003d r0.attributeIterator(r4)\n  $r22.setPosition(1)\n  $r23 \u003d $r22.getNodePointer()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B8",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B10",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JDOMNodePointer#getNamespaceResolver(...0)",
        "body": "{\r\n    if (localNamespaceResolver \u003d\u003d null) {\r\n        localNamespaceResolver \u003d new NamespaceResolver(super.getNamespaceResolver());\r\n        localNamespaceResolver.setNamespaceContextPointer(this);\r\n    }\r\n    return localNamespaceResolver;\r\n}"
      },
      {
        "name": "JDOMNodePointer#attributeIterator(...1)",
        "body": "{\r\n    return new JDOMAttributeIterator(this, qName);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer",
    "methodName": "createChild",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext,org.apache.commons.jxpath.ri.QName,int)",
    "visibility": "public",
    "body": "{\r\n    if (index \u003d\u003d WHOLE_COLLECTION) {\r\n        index \u003d 0;\r\n    }\r\n    final boolean success \u003d getAbstractFactory(context).createObject(context, this, node, qName.toString(), index);\r\n    if (success) {\r\n        NodeTest nodeTest;\r\n        final String prefix \u003d qName.getPrefix();\r\n        final String namespaceURI \u003d prefix \u003d\u003d null ? null : context.getNamespaceURI(prefix);\r\n        nodeTest \u003d new NodeNameTest(qName, namespaceURI);\r\n        final NodeIterator it \u003d childIterator(nodeTest, false, null);\r\n        if (it !\u003d null \u0026\u0026 it.setPosition(index + 1)) {\r\n            return it.getNodePointer();\r\n        }\r\n    }\r\n    throw new JXPathAbstractFactoryException(\"Factory could not create a child node for path: \" + asPath() + \"/\" + qName + \"[\" + (index + 1) + \"]\");\r\n}",
    "nodes": 10,
    "edges": 13,
    "cc": 5,
    "flowSummary": [
      "B0 : If(i1 !\u003d -2147483648) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B9",
      "B3 : If(r6 !\u003d null) → B4 | else → B5",
      "B6 : If($r9 \u003d\u003d null) → B7 | else → B9",
      "B7 : If($z0 \u003d\u003d false) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  JDOMNodePointer\n  JXPathContext\n  QName\n  i1 :\u003d @parameter2: int\n  if (i1 !\u003d -2147483648) goto B1 else B2\n}",
      "B1 {\n  i1 \u003d 0\n}",
      "B2 {\n  $r5 \u003d r0.getAbstractFactory(r1)\n  $r3 \u003d Object node\u003e\n  $r4 \u003d r2.toString()\n  $z1 \u003d $r5.createObject(r1, r0, $r3, $r4, i1)\n  if ($z1 \u003d\u003d false) goto B3 else B9\n}",
      "B3 {\n  r6 \u003d r2.getPrefix()\n  if (r6 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r10 \u003d null\n  goto B6\n}",
      "B5 {\n  $r10 \u003d r1.getNamespaceURI(r6)\n}",
      "B6 {\n  $r7 \u003d NodeNameTest\n  new NodeNameTest(r2, $r10)\n  $r9 \u003d r0.childIterator($r7, 0, null)\n  if ($r9 \u003d\u003d null) goto B7 else B9\n}",
      "B7 {\n  $i0 \u003d i1 + 1\n  $z0 \u003d $r9.setPosition($i0)\n  if ($z0 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $r8 \u003d $r9.getNodePointer()\n  return\n}",
      "B9 {\n  $r11 \u003d JXPathAbstractFactoryException\n  $r12 \u003d StringBuilder\n  new StringBuilder()\n  $r13 \u003d $r12.append(\"Factory could not create a child node for path: \")\n  $r14 \u003d r0.asPath()\n  $r15 \u003d $r13.append($r14)\n  $r16 \u003d $r15.append(\"/\")\n  $r17 \u003d $r16.append(r2)\n  $r18 \u003d $r17.append(\"\")\n  $i2 \u003d i1 + 1\n  $r19 \u003d $r18.append($i2)\n  $r20 \u003d $r19.append(\"\")\n  $r21 \u003d $r20.toString()\n  new JXPathAbstractFactoryException($r21)\n  throw $r11\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B9",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JDOMNodePointer#asPath(...0)",
        "body": "{\r\n    if (id !\u003d null) {\r\n        return \"id(\u0027\" + escape(id) + \"\u0027)\";\r\n    }\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    if (parent !\u003d null) {\r\n        buffer.append(parent.asPath());\r\n    }\r\n    if (node instanceof Element) {\r\n        // If the parent pointer is not a JDOMNodePointer, it is\r\n        // the parent\u0027s responsibility to produce the node test part\r\n        // of the path\r\n        if (parent instanceof JDOMNodePointer) {\r\n            if (buffer.length() \u003d\u003d 0 || buffer.charAt(buffer.length() - 1) !\u003d \u0027/\u0027) {\r\n                buffer.append(\u0027/\u0027);\r\n            }\r\n            final String nsURI \u003d getNamespaceURI();\r\n            final String ln \u003d getLocalName(node);\r\n            if (nsURI \u003d\u003d null) {\r\n                buffer.append(ln);\r\n                buffer.append(\u0027[\u0027);\r\n                buffer.append(getRelativePositionByQName()).append(\u0027]\u0027);\r\n            } else {\r\n                final String prefix \u003d getNamespaceResolver().getPrefix(nsURI);\r\n                if (prefix !\u003d null) {\r\n                    buffer.append(prefix);\r\n                    buffer.append(\u0027:\u0027);\r\n                    buffer.append(ln);\r\n                    buffer.append(\u0027[\u0027);\r\n                    buffer.append(getRelativePositionByQName());\r\n                } else {\r\n                    buffer.append(\"node()\");\r\n                    buffer.append(\u0027[\u0027);\r\n                    buffer.append(getRelativePositionOfElement());\r\n                }\r\n                buffer.append(\u0027]\u0027);\r\n            }\r\n        }\r\n    } else if (node instanceof Text || node instanceof CDATA) {\r\n        buffer.append(\"/text()\");\r\n        buffer.append(\u0027[\u0027).append(getRelativePositionOfTextNode()).append(\u0027]\u0027);\r\n    } else if (node instanceof ProcessingInstruction) {\r\n        buffer.append(\"/processing-instruction(\\\u0027\").append(((ProcessingInstruction) node).getTarget()).append(\"\u0027)\");\r\n        buffer.append(\u0027[\u0027).append(getRelativePositionOfPI()).append(\u0027]\u0027);\r\n    }\r\n    return buffer.toString();\r\n}"
      },
      {
        "name": "JDOMNodePointer#childIterator(...3)",
        "body": "{\r\n    return new JDOMNodeIterator(this, test, reverse, startWith);\r\n}"
      },
      {
        "name": "JDOMNodePointer#getAbstractFactory(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (!(object instanceof JDOMNodePointer)) {\r\n        return false;\r\n    }\r\n    final JDOMNodePointer other \u003d (JDOMNodePointer) object;\r\n    return node \u003d\u003d other.node;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($r4 !\u003d $r3) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  JDOMNodePointer\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d JDOMNodePointer\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d JDOMNodePointer) r0\n  $r4 \u003d Object node\u003e\n  $r3 \u003d Object node\u003e\n  if ($r4 !\u003d $r3) goto B5 else B6\n}",
      "B5 {\n  $z1 \u003d 1\n  goto B7\n}",
      "B6 {\n  $z1 \u003d 0\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer",
    "methodName": "getName",
    "signature": "org.apache.commons.jxpath.ri.QName getName()",
    "visibility": "public",
    "body": "{\r\n    String ns \u003d null;\r\n    String ln \u003d null;\r\n    if (node instanceof Element) {\r\n        ns \u003d ((Element) node).getNamespacePrefix();\r\n        if (ns !\u003d null \u0026\u0026 ns.isEmpty()) {\r\n            ns \u003d null;\r\n        }\r\n        ln \u003d ((Element) node).getName();\r\n    } else if (node instanceof ProcessingInstruction) {\r\n        ln \u003d ((ProcessingInstruction) node).getTarget();\r\n    }\r\n    return new QName(ns, ln);\r\n}",
    "nodes": 8,
    "edges": 11,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B5",
      "B1 : If(r7 \u003d\u003d null) → B2 | else → B4",
      "B2 : If($z2 \u003d\u003d false) → B3 | else → B4",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  JDOMNodePointer\n  r7 \u003d null\n  r8 \u003d null\n  $r1 \u003d Object node\u003e\n  $z0 \u003d Element\n  if ($z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  $r5 \u003d Object node\u003e\n  $r6 \u003d Element) $r5\n  r7 \u003d $r6.getNamespacePrefix()\n  if (r7 \u003d\u003d null) goto B2 else B4\n}",
      "B2 {\n  $z2 \u003d r7.isEmpty()\n  if ($z2 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  r7 \u003d null\n}",
      "B4 {\n  $r9 \u003d Object node\u003e\n  $r10 \u003d Element) $r9\n  r8 \u003d $r10.getName()\n  goto B7\n}",
      "B5 {\n  $r2 \u003d Object node\u003e\n  $z1 \u003d ProcessingInstruction\n  if ($z1 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r3 \u003d Object node\u003e\n  $r4 \u003d ProcessingInstruction) $r3\n  r8 \u003d $r4.getTarget()\n}",
      "B7 {\n  $r11 \u003d QName\n  new QName(r7, r8)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer",
    "methodName": "getNamespaceResolver",
    "signature": "org.apache.commons.jxpath.ri.NamespaceResolver getNamespaceResolver()",
    "visibility": "public",
    "body": "{\r\n    if (localNamespaceResolver \u003d\u003d null) {\r\n        localNamespaceResolver \u003d new NamespaceResolver(super.getNamespaceResolver());\r\n        localNamespaceResolver.setNamespaceContextPointer(this);\r\n    }\r\n    return localNamespaceResolver;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JDOMNodePointer\n  $r1 \u003d NamespaceResolver localNamespaceResolver\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d NamespaceResolver\n  $r4 \u003d r0.getNamespaceResolver()\n  new NamespaceResolver($r4)\n  NamespaceResolver localNamespaceResolver\u003e \u003d $r3\n  $r5 \u003d NamespaceResolver localNamespaceResolver\u003e\n  $r5.setNamespaceContextPointer(r0)\n}",
      "B2 {\n  $r2 \u003d NamespaceResolver localNamespaceResolver\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer",
    "methodName": "getNamespaceURI",
    "signature": "java.lang.String getNamespaceURI(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (prefix.equals(\"xml\")) {\r\n        return Namespace.XML_NAMESPACE.getURI();\r\n    }\r\n    Element element \u003d null;\r\n    if (node instanceof Document) {\r\n        element \u003d ((Document) node).getRootElement();\r\n    }\r\n    if (node instanceof Element) {\r\n        element \u003d (Element) node;\r\n    }\r\n    if (element \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    final Namespace ns \u003d element.getNamespace(prefix);\r\n    return ns \u003d\u003d null ? null : ns.getURI();\r\n}",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B6",
      "B6 : If(r10 !\u003d null) → B7 | else → B8",
      "B8 : If(r4 !\u003d null) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  JDOMNodePointer\n  String\n  $z0 \u003d r0.equals(\"xml\")\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d Namespace XML_NAMESPACE\u003e\n  $r9 \u003d $r8.getURI()\n  return\n}",
      "B2 {\n  r10 \u003d null\n  $r2 \u003d Object node\u003e\n  $z1 \u003d Document\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d Object node\u003e\n  $r7 \u003d Document) $r6\n  r10 \u003d $r7.getRootElement()\n}",
      "B4 {\n  $r3 \u003d Object node\u003e\n  $z2 \u003d Element\n  if ($z2 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r5 \u003d Object node\u003e\n  r10 \u003d Element) $r5\n}",
      "B6 {\n  if (r10 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  r4 \u003d r10.getNamespace(r0)\n  if (r4 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  $r11 \u003d null\n  goto B11\n}",
      "B10 {\n  $r11 \u003d r4.getURI()\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer",
    "methodName": "getValue",
    "signature": "java.lang.Object getValue()",
    "visibility": "public",
    "body": "{\r\n    if (node instanceof Element) {\r\n        final StringBuilder buf \u003d new StringBuilder();\r\n        for (final NodeIterator children \u003d childIterator(null, false, null); children.setPosition(children.getPosition() + 1); ) {\r\n            final NodePointer ptr \u003d children.getNodePointer();\r\n            if (ptr.getImmediateNode() instanceof Element || ptr.getImmediateNode() instanceof Text) {\r\n                buf.append(ptr.getValue());\r\n            }\r\n        }\r\n        return buf.toString();\r\n    }\r\n    if (node instanceof Comment) {\r\n        String text \u003d ((Comment) node).getText();\r\n        if (text !\u003d null) {\r\n            text \u003d text.trim();\r\n        }\r\n        return text;\r\n    }\r\n    String result \u003d null;\r\n    if (node instanceof Text) {\r\n        result \u003d ((Text) node).getText();\r\n    }\r\n    if (node instanceof ProcessingInstruction) {\r\n        result \u003d ((ProcessingInstruction) node).getData();\r\n    }\r\n    final boolean trim \u003d !\"preserve\".equals(findEnclosingAttribute(node, \"space\", Namespace.XML_NAMESPACE));\r\n    return result !\u003d null \u0026\u0026 trim ? result.trim() : result;\r\n}",
    "nodes": 24,
    "edges": 32,
    "cc": 10,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B8",
      "B2 : If($z5 \u003d\u003d false) → B3 | else → B7",
      "B3 : If($z6 !\u003d 0) → B4 | else → B5",
      "B4 : If($z7 \u003d\u003d false) → B5 | else → B6",
      "B8 : If($z1 \u003d\u003d false) → B9 | else → B12",
      "B9 : If(r22 \u003d\u003d null) → B10 | else → B11",
      "B12 : If($z2 \u003d\u003d false) → B13 | else → B14",
      "B14 : If($z3 \u003d\u003d false) → B15 | else → B16",
      "B16 : If($z4 !\u003d 0) → B17 | else → B18",
      "B19 : If(r23 \u003d\u003d null) → B20 | else → B22",
      "B20 : If($z8 \u003d\u003d false) → B21 | else → B22"
    ],
    "blockList": [
      "B0 {\n  JDOMNodePointer\n  $r1 \u003d Object node\u003e\n  $z0 \u003d Element\n  if ($z0 \u003d\u003d false) goto B1 else B8\n}",
      "B1 {\n  $r15 \u003d StringBuilder\n  new StringBuilder()\n  r21 \u003d r0.childIterator(null, 0, null)\n}",
      "B2 {\n  $i0 \u003d r21.getPosition()\n  $i1 \u003d $i0 + 1\n  $z5 \u003d r21.setPosition($i1)\n  if ($z5 \u003d\u003d false) goto B3 else B7\n}",
      "B3 {\n  r17 \u003d r21.getNodePointer()\n  $r18 \u003d r17.getImmediateNode()\n  $z6 \u003d Element\n  if ($z6 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r20 \u003d r17.getImmediateNode()\n  $z7 \u003d Text\n  if ($z7 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r19 \u003d r17.getValue()\n  $r15.append($r19)\n}",
      "B6 {\n  goto B2\n}",
      "B7 {\n  $r16 \u003d $r15.toString()\n  return\n}",
      "B8 {\n  $r2 \u003d Object node\u003e\n  $z1 \u003d Comment\n  if ($z1 \u003d\u003d false) goto B9 else B12\n}",
      "B9 {\n  $r13 \u003d Object node\u003e\n  $r14 \u003d Comment) $r13\n  r22 \u003d $r14.getText()\n  if (r22 \u003d\u003d null) goto B10 else B11\n}",
      "B10 {\n  r22 \u003d r22.trim()\n}",
      "B11 {\n  return\n}",
      "B12 {\n  r23 \u003d null\n  $r3 \u003d Object node\u003e\n  $z2 \u003d Text\n  if ($z2 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  $r11 \u003d Object node\u003e\n  $r12 \u003d Text) $r11\n  r23 \u003d $r12.getText()\n}",
      "B14 {\n  $r4 \u003d Object node\u003e\n  $z3 \u003d ProcessingInstruction\n  if ($z3 \u003d\u003d false) goto B15 else B16\n}",
      "B15 {\n  $r9 \u003d Object node\u003e\n  $r10 \u003d ProcessingInstruction) $r9\n  r23 \u003d $r10.getData()\n}",
      "B16 {\n  $r8 \u003d \"preserve\"\n  $r6 \u003d Object node\u003e\n  $r5 \u003d Namespace XML_NAMESPACE\u003e\n  $r7 \u003d JDOMNodePointer.findEnclosingAttribute($r6, \"space\", $r5)\n  $z4 \u003d $r8.equals($r7)\n  if ($z4 !\u003d 0) goto B17 else B18\n}",
      "B17 {\n  $z8 \u003d 1\n  goto B19\n}",
      "B18 {\n  $z8 \u003d 0\n}",
      "B19 {\n  if (r23 \u003d\u003d null) goto B20 else B22\n}",
      "B20 {\n  if ($z8 \u003d\u003d false) goto B21 else B22\n}",
      "B21 {\n  $r24 \u003d r23.trim()\n  goto B23\n}",
      "B22 {\n  $r24 \u003d r23\n}",
      "B23 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B8",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B2",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B12",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B19 --\u003e B22",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B23",
      "B23 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JDOMNodePointer#childIterator(...3)",
        "body": "{\r\n    return new JDOMNodeIterator(this, test, reverse, startWith);\r\n}"
      },
      {
        "name": "JDOMNodePointer#findEnclosingAttribute(...3)",
        "body": "{\r\n    while (n !\u003d null) {\r\n        if (n instanceof Element) {\r\n            final Element e \u003d (Element) n;\r\n            final String attr \u003d e.getAttributeValue(attrName, ns);\r\n            if (attr !\u003d null \u0026\u0026 !attr.isEmpty()) {\r\n                return attr;\r\n            }\r\n        }\r\n        n \u003d nodeParent(n);\r\n    }\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer",
    "methodName": "isLanguage",
    "signature": "boolean isLanguage(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    final String current \u003d getLanguage();\r\n    return current \u003d\u003d null ? super.isLanguage(lang) : current.toUpperCase(Locale.ENGLISH).startsWith(lang.toUpperCase(Locale.ENGLISH));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JDOMNodePointer\n  String\n  r1 \u003d r0.getLanguage()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r0.isLanguage(r3)\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Locale ENGLISH\u003e\n  $r6 \u003d r1.toUpperCase($r2)\n  $r4 \u003d Locale ENGLISH\u003e\n  $r5 \u003d r3.toUpperCase($r4)\n  $z0 \u003d $r6.startsWith($r5)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JDOMNodePointer#getLanguage(...0)",
        "body": "{\r\n    return findEnclosingAttribute(node, \"lang\", Namespace.XML_NAMESPACE);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer",
    "methodName": "isLeaf",
    "signature": "boolean isLeaf()",
    "visibility": "public",
    "body": "{\r\n    if (node instanceof Element) {\r\n        return ((Element) node).getContent().isEmpty();\r\n    }\r\n    if (node instanceof Document) {\r\n        return ((Document) node).getContent().isEmpty();\r\n    }\r\n    return true;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  JDOMNodePointer\n  $r1 \u003d Object node\u003e\n  $z0 \u003d Element\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d Object node\u003e\n  $r7 \u003d Element) $r6\n  $r8 \u003d $r7.getContent()\n  $z3 \u003d $r8.isEmpty()\n  return\n}",
      "B2 {\n  $r2 \u003d Object node\u003e\n  $z1 \u003d Document\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d Object node\u003e\n  $r4 \u003d Document) $r3\n  $r5 \u003d $r4.getContent()\n  $z2 \u003d $r5.isEmpty()\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer",
    "methodName": "remove",
    "signature": "void remove()",
    "visibility": "public",
    "body": "{\r\n    final Element parent \u003d nodeParent(node);\r\n    if (parent \u003d\u003d null) {\r\n        throw new JXPathException(\"Cannot remove root JDOM node\");\r\n    }\r\n    parent.getContent().remove(node);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JDOMNodePointer\n  $r1 \u003d Object node\u003e\n  r2 \u003d JDOMNodePointer.nodeParent($r1)\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d JXPathException\n  new JXPathException(\"Cannot remove root JDOM node\")\n  throw $r5\n}",
      "B2 {\n  $r4 \u003d r2.getContent()\n  $r3 \u003d Object node\u003e\n  $r4.remove($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JDOMNodePointer#nodeParent(...1)",
        "body": "{\r\n    if (node instanceof Element) {\r\n        final Object parent \u003d ((Element) node).getParent();\r\n        return parent instanceof Element ? (Element) parent : null;\r\n    }\r\n    if (node instanceof Text) {\r\n        return (Element) ((Text) node).getParent();\r\n    }\r\n    if (node instanceof CDATA) {\r\n        return (Element) ((CDATA) node).getParent();\r\n    }\r\n    if (node instanceof ProcessingInstruction) {\r\n        return (Element) ((ProcessingInstruction) node).getParent();\r\n    }\r\n    if (node instanceof Comment) {\r\n        return (Element) ((Comment) node).getParent();\r\n    }\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer",
    "methodName": "setValue",
    "signature": "void setValue(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (node instanceof Text) {\r\n        final String string \u003d (String) TypeUtils.convert(value, String.class);\r\n        if (string !\u003d null \u0026\u0026 !string.isEmpty()) {\r\n            ((Text) node).setText(string);\r\n        } else {\r\n            nodeParent(node).removeContent((Text) node);\r\n        }\r\n    } else {\r\n        final Element element \u003d (Element) node;\r\n        element.getContent().clear();\r\n        if (value instanceof Element) {\r\n            final Element valueElement \u003d (Element) value;\r\n            addContent(valueElement.getContent());\r\n        } else if (value instanceof Document) {\r\n            final Document valueDocument \u003d (Document) value;\r\n            addContent(valueDocument.getContent());\r\n        } else if (value instanceof Text || value instanceof CDATA) {\r\n            final String string \u003d ((Text) value).getText();\r\n            element.addContent(new Text(string));\r\n        } else if (value instanceof ProcessingInstruction) {\r\n            final ProcessingInstruction pi \u003d (ProcessingInstruction) ((ProcessingInstruction) value).clone();\r\n            element.addContent(pi);\r\n        } else if (value instanceof Comment) {\r\n            final Comment comment \u003d (Comment) ((Comment) value).clone();\r\n            element.addContent(comment);\r\n        } else {\r\n            final String string \u003d (String) TypeUtils.convert(value, String.class);\r\n            if (string !\u003d null \u0026\u0026 !string.isEmpty()) {\r\n                element.addContent(new Text(string));\r\n            }\r\n        }\r\n    }\r\n}",
    "nodes": 21,
    "edges": 31,
    "cc": 12,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B6",
      "B1 : If(r23 \u003d\u003d null) → B2 | else → B4",
      "B2 : If($z8 !\u003d 0) → B3 | else → B4",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B8",
      "B8 : If($z2 \u003d\u003d false) → B9 | else → B10",
      "B10 : If($z3 !\u003d 0) → B11 | else → B12",
      "B11 : If($z4 \u003d\u003d false) → B12 | else → B13",
      "B13 : If($z5 \u003d\u003d false) → B14 | else → B15",
      "B15 : If($z6 \u003d\u003d false) → B16 | else → B17",
      "B17 : If(r29 \u003d\u003d null) → B18 | else → B20",
      "B18 : If($z7 !\u003d 0) → B19 | else → B20"
    ],
    "blockList": [
      "B0 {\n  JDOMNodePointer\n  Object\n  $r1 \u003d Object node\u003e\n  $z0 \u003d Text\n  if ($z0 \u003d\u003d false) goto B1 else B6\n}",
      "B1 {\n  $r16 \u003d TypeUtils.convert(r4, class \"Ljava/lang/String;\")\n  r23 \u003d String) $r16\n  if (r23 \u003d\u003d null) goto B2 else B4\n}",
      "B2 {\n  $z8 \u003d r23.isEmpty()\n  if ($z8 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r21 \u003d Object node\u003e\n  $r22 \u003d Text) $r21\n  $r22.setText(r23)\n  goto B5\n}",
      "B4 {\n  $r17 \u003d Object node\u003e\n  $r20 \u003d JDOMNodePointer.nodeParent($r17)\n  $r18 \u003d Object node\u003e\n  $r19 \u003d Text) $r18\n  $r32 \u003d Content) $r19\n  $r20.removeContent($r32)\n}",
      "B5 {\n  goto B20\n}",
      "B6 {\n  $r2 \u003d Object node\u003e\n  r24 \u003d Element) $r2\n  $r3 \u003d r24.getContent()\n  $r3.clear()\n  $z1 \u003d Element\n  if ($z1 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  r25 \u003d Element) r4\n  $r15 \u003d r25.getContent()\n  r0.addContent($r15)\n  goto B20\n}",
      "B8 {\n  $z2 \u003d Document\n  if ($z2 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  r26 \u003d Document) r4\n  $r14 \u003d r26.getContent()\n  r0.addContent($r14)\n  goto B20\n}",
      "B10 {\n  $z3 \u003d Text\n  if ($z3 !\u003d 0) goto B11 else B12\n}",
      "B11 {\n  $z4 \u003d CDATA\n  if ($z4 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  $r5 \u003d Text) r4\n  $r13 \u003d $r5.getText()\n  $r30 \u003d Text\n  new Text($r13)\n  $r33 \u003d Content) $r30\n  r24.addContent($r33)\n  goto B20\n}",
      "B13 {\n  $z5 \u003d ProcessingInstruction\n  if ($z5 \u003d\u003d false) goto B14 else B15\n}",
      "B14 {\n  $r11 \u003d ProcessingInstruction) r4\n  $r12 \u003d $r11.clone()\n  r27 \u003d ProcessingInstruction) $r12\n  $r34 \u003d Content) r27\n  r24.addContent($r34)\n  goto B20\n}",
      "B15 {\n  $z6 \u003d Comment\n  if ($z6 \u003d\u003d false) goto B16 else B17\n}",
      "B16 {\n  $r9 \u003d Comment) r4\n  $r10 \u003d $r9.clone()\n  r28 \u003d Comment) $r10\n  $r35 \u003d Content) r28\n  r24.addContent($r35)\n  goto B20\n}",
      "B17 {\n  $r7 \u003d TypeUtils.convert(r4, class \"Ljava/lang/String;\")\n  r29 \u003d String) $r7\n  if (r29 \u003d\u003d null) goto B18 else B20\n}",
      "B18 {\n  $z7 \u003d r29.isEmpty()\n  if ($z7 !\u003d 0) goto B19 else B20\n}",
      "B19 {\n  $r31 \u003d Text\n  new Text(r29)\n  $r36 \u003d Content) $r31\n  r24.addContent($r36)\n}",
      "B20 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B20",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B20",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B20",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B20",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B20",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B20",
      "B17 --\u003e B18",
      "B17 --\u003e B20",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B20",
      "B20 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JDOMNodePointer#addContent(...1)",
        "body": "{\r\n    final Element element \u003d (Element) node;\r\n    final int count \u003d content.size();\r\n    for (int i \u003d 0; i \u003c count; i++) {\r\n        Object child \u003d content.get(i);\r\n        if (child instanceof Element) {\r\n            child \u003d ((Element) child).clone();\r\n            element.addContent((Element) child);\r\n        } else if (child instanceof Text) {\r\n            child \u003d ((Text) child).clone();\r\n            element.addContent((Text) child);\r\n        } else if (node instanceof CDATA) {\r\n            child \u003d ((CDATA) child).clone();\r\n            element.addContent((CDATA) child);\r\n        } else if (node instanceof ProcessingInstruction) {\r\n            child \u003d ((ProcessingInstruction) child).clone();\r\n            element.addContent((ProcessingInstruction) child);\r\n        } else if (node instanceof Comment) {\r\n            child \u003d ((Comment) child).clone();\r\n            element.addContent((Comment) child);\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "JDOMNodePointer#nodeParent(...1)",
        "body": "{\r\n    if (node instanceof Element) {\r\n        final Object parent \u003d ((Element) node).getParent();\r\n        return parent instanceof Element ? (Element) parent : null;\r\n    }\r\n    if (node instanceof Text) {\r\n        return (Element) ((Text) node).getParent();\r\n    }\r\n    if (node instanceof CDATA) {\r\n        return (Element) ((CDATA) node).getParent();\r\n    }\r\n    if (node instanceof ProcessingInstruction) {\r\n        return (Element) ((ProcessingInstruction) node).getParent();\r\n    }\r\n    if (node instanceof Comment) {\r\n        return (Element) ((Comment) node).getParent();\r\n    }\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory",
    "methodName": "createNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createNodePointer(org.apache.commons.jxpath.ri.model.NodePointer,org.apache.commons.jxpath.ri.QName,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (bean instanceof Document) {\r\n        return new JDOMNodePointer(parent, bean);\r\n    }\r\n    if (bean instanceof Element) {\r\n        return new JDOMNodePointer(parent, bean);\r\n    }\r\n    return null;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  JDOMPointerFactory\n  NodePointer\n  QName\n  Object\n  $z0 \u003d Document\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d JDOMNodePointer\n  new JDOMNodePointer(r2, r0)\n  return\n}",
      "B2 {\n  $z1 \u003d Element\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d JDOMNodePointer\n  new JDOMNodePointer(r2, r0)\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.jdom.JDOMPointerFactory",
    "methodName": "createNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createNodePointer(org.apache.commons.jxpath.ri.QName,java.lang.Object,java.util.Locale)",
    "visibility": "public",
    "body": "{\r\n    if (bean instanceof Document) {\r\n        return new JDOMNodePointer(bean, locale);\r\n    }\r\n    if (bean instanceof Element) {\r\n        return new JDOMNodePointer(bean, locale);\r\n    }\r\n    return null;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  JDOMPointerFactory\n  QName\n  Object\n  Locale\n  $z0 \u003d Document\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d JDOMNodePointer\n  new JDOMNodePointer(r0, r2)\n  return\n}",
      "B2 {\n  $z1 \u003d Element\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d JDOMNodePointer\n  new JDOMNodePointer(r0, r2)\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.VariablePointer",
    "methodName": "asPath",
    "signature": "java.lang.String asPath()",
    "visibility": "public",
    "body": "{\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    buffer.append(\u0027$\u0027);\r\n    buffer.append(qName);\r\n    if (!actual) {\r\n        if (index !\u003d WHOLE_COLLECTION) {\r\n            buffer.append(\u0027[\u0027).append(index + 1).append(\u0027]\u0027);\r\n        }\r\n    } else if (index !\u003d WHOLE_COLLECTION \u0026\u0026 (getNode() \u003d\u003d null || isCollection())) {\r\n        buffer.append(\u0027[\u0027).append(index + 1).append(\u0027]\u0027);\r\n    }\r\n    return buffer.toString();\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If($i3 \u003d\u003d -2147483648) → B2 | else → B7",
      "B3 : If($i0 \u003d\u003d -2147483648) → B4 | else → B7",
      "B4 : If($r3 \u003d\u003d null) → B5 | else → B6",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  VariablePointer\n  $r0 \u003d StringBuilder\n  new StringBuilder()\n  $r0.append(36)\n  $r2 \u003d QName qName\u003e\n  $r0.append($r2)\n  $z0 \u003d VariablePointer: boolean actual\u003e\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $i3 \u003d VariablePointer: int index\u003e\n  if ($i3 \u003d\u003d -2147483648) goto B2 else B7\n}",
      "B2 {\n  $r6 \u003d $r0.append(91)\n  $i4 \u003d VariablePointer: int index\u003e\n  $i5 \u003d $i4 + 1\n  $r7 \u003d $r6.append($i5)\n  $r7.append(93)\n  goto B7\n}",
      "B3 {\n  $i0 \u003d VariablePointer: int index\u003e\n  if ($i0 \u003d\u003d -2147483648) goto B4 else B7\n}",
      "B4 {\n  $r3 \u003d r1.getNode()\n  if ($r3 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  $z1 \u003d r1.isCollection()\n  if ($z1 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r4 \u003d $r0.append(91)\n  $i1 \u003d VariablePointer: int index\u003e\n  $i2 \u003d $i1 + 1\n  $r5 \u003d $r4.append($i2)\n  $r5.append(93)\n}",
      "B7 {\n  $r8 \u003d $r0.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "VariablePointer#getNode(...0)",
        "body": "(source not found)"
      },
      {
        "name": "VariablePointer#isCollection(...0)",
        "body": "{\r\n    final Object value \u003d getBaseValue();\r\n    return value !\u003d null \u0026\u0026 ValueUtils.isCollection(value);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.VariablePointer",
    "methodName": "createChild",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext,org.apache.commons.jxpath.ri.QName,int)",
    "visibility": "public",
    "body": "{\r\n    final Object collection \u003d createCollection(context, index);\r\n    if (!isActual() || index !\u003d 0 \u0026\u0026 index !\u003d WHOLE_COLLECTION) {\r\n        final AbstractFactory factory \u003d getAbstractFactory(context);\r\n        final boolean success \u003d factory.createObject(context, this, collection, getName().toString(), index);\r\n        if (!success) {\r\n            throw new JXPathAbstractFactoryException(\"Factory could not create object path: \" + asPath());\r\n        }\r\n        final NodePointer cln \u003d (NodePointer) clone();\r\n        cln.setIndex(index);\r\n        return cln;\r\n    }\r\n    return this;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If(i0 \u003d\u003d false) → B2 | else → B6",
      "B2 : If(i0 \u003d\u003d -2147483648) → B3 | else → B6",
      "B3 : If($z1 !\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  VariablePointer\n  JXPathContext\n  QName\n  i0 :\u003d @parameter2: int\n  r2 \u003d r0.createCollection(r1, i0)\n  $z0 \u003d r0.isActual()\n  if ($z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  if (i0 \u003d\u003d false) goto B2 else B6\n}",
      "B2 {\n  if (i0 \u003d\u003d -2147483648) goto B3 else B6\n}",
      "B3 {\n  $r13 \u003d r0.getAbstractFactory(r1)\n  $r3 \u003d r0.getName()\n  $r4 \u003d $r3.toString()\n  $z1 \u003d $r13.createObject(r1, r0, r2, $r4, i0)\n  if ($z1 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r7 \u003d JXPathAbstractFactoryException\n  $r8 \u003d StringBuilder\n  new StringBuilder()\n  $r10 \u003d $r8.append(\"Factory could not create object path: \")\n  $r9 \u003d r0.asPath()\n  $r11 \u003d $r10.append($r9)\n  $r12 \u003d $r11.toString()\n  new JXPathAbstractFactoryException($r12)\n  throw $r7\n}",
      "B5 {\n  $r5 \u003d r0.clone()\n  r6 \u003d NodePointer) $r5\n  r6.setIndex(i0)\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "VariablePointer#clone(...0)",
        "body": "(source not found)"
      },
      {
        "name": "VariablePointer#asPath(...0)",
        "body": "{\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    buffer.append(\u0027$\u0027);\r\n    buffer.append(qName);\r\n    if (!actual) {\r\n        if (index !\u003d WHOLE_COLLECTION) {\r\n            buffer.append(\u0027[\u0027).append(index + 1).append(\u0027]\u0027);\r\n        }\r\n    } else if (index !\u003d WHOLE_COLLECTION \u0026\u0026 (getNode() \u003d\u003d null || isCollection())) {\r\n        buffer.append(\u0027[\u0027).append(index + 1).append(\u0027]\u0027);\r\n    }\r\n    return buffer.toString();\r\n}"
      },
      {
        "name": "VariablePointer#createCollection(...2)",
        "body": "{\r\n    createPath(context);\r\n    Object collection \u003d getBaseValue();\r\n    if (collection \u003d\u003d null) {\r\n        throw new JXPathAbstractFactoryException(\"Factory did not assign a collection to variable \u0027\" + qName + \"\u0027 for path: \" + asPath());\r\n    }\r\n    if (index \u003d\u003d WHOLE_COLLECTION) {\r\n        index \u003d 0;\r\n    } else if (index \u003c 0) {\r\n        throw new JXPathInvalidAccessException(\"Index is less than 1: \" + asPath());\r\n    }\r\n    if (index \u003e\u003d getLength()) {\r\n        collection \u003d ValueUtils.expandCollection(collection, index + 1);\r\n        variables.declareVariable(qName.toString(), collection);\r\n    }\r\n    return collection;\r\n}"
      },
      {
        "name": "VariablePointer#getName(...0)",
        "body": "{\r\n    return qName;\r\n}"
      },
      {
        "name": "VariablePointer#getAbstractFactory(...1)",
        "body": "(source not found)"
      },
      {
        "name": "VariablePointer#isActual(...0)",
        "body": "{\r\n    return actual;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.VariablePointer",
    "methodName": "createPath",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createPath(org.apache.commons.jxpath.JXPathContext)",
    "visibility": "public",
    "body": "{\r\n    if (!actual) {\r\n        final AbstractFactory factory \u003d getAbstractFactory(context);\r\n        if (!factory.declareVariable(context, qName.toString())) {\r\n            throw new JXPathAbstractFactoryException(\"Factory cannot define variable \u0027\" + qName + \"\u0027 for path: \" + asPath());\r\n        }\r\n        findVariables(context);\r\n        // Assert: actual \u003d\u003d true\r\n    }\r\n    return this;\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B4",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  VariablePointer\n  JXPathContext\n  $z0 \u003d VariablePointer: boolean actual\u003e\n  if ($z0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  r2 \u003d r0.getAbstractFactory(r1)\n  $r3 \u003d QName qName\u003e\n  $r4 \u003d $r3.toString()\n  $z1 \u003d r2.declareVariable(r1, $r4)\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d JXPathAbstractFactoryException\n  $r6 \u003d StringBuilder\n  new StringBuilder()\n  $r8 \u003d $r6.append(\"Factory cannot define variable \\\u0027\")\n  $r7 \u003d QName qName\u003e\n  $r9 \u003d $r8.append($r7)\n  $r11 \u003d $r9.append(\"\\\u0027 for path: \")\n  $r10 \u003d r0.asPath()\n  $r12 \u003d $r11.append($r10)\n  $r13 \u003d $r12.toString()\n  new JXPathAbstractFactoryException($r13)\n  throw $r5\n}",
      "B3 {\n  r0.findVariables(r1)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "VariablePointer#asPath(...0)",
        "body": "{\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    buffer.append(\u0027$\u0027);\r\n    buffer.append(qName);\r\n    if (!actual) {\r\n        if (index !\u003d WHOLE_COLLECTION) {\r\n            buffer.append(\u0027[\u0027).append(index + 1).append(\u0027]\u0027);\r\n        }\r\n    } else if (index !\u003d WHOLE_COLLECTION \u0026\u0026 (getNode() \u003d\u003d null || isCollection())) {\r\n        buffer.append(\u0027[\u0027).append(index + 1).append(\u0027]\u0027);\r\n    }\r\n    return buffer.toString();\r\n}"
      },
      {
        "name": "VariablePointer#findVariables(...1)",
        "body": "{\r\n    valuePointer \u003d null;\r\n    JXPathContext varCtx \u003d context;\r\n    while (varCtx !\u003d null) {\r\n        variables \u003d varCtx.getVariables();\r\n        if (variables.isDeclaredVariable(qName.toString())) {\r\n            actual \u003d true;\r\n            break;\r\n        }\r\n        varCtx \u003d varCtx.getParentContext();\r\n        variables \u003d null;\r\n    }\r\n}"
      },
      {
        "name": "VariablePointer#getAbstractFactory(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.VariablePointer",
    "methodName": "createPath",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createPath(org.apache.commons.jxpath.JXPathContext,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (actual) {\r\n        setValue(value);\r\n        return this;\r\n    }\r\n    final NodePointer ptr \u003d createPath(context);\r\n    ptr.setValue(value);\r\n    return ptr;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  VariablePointer\n  JXPathContext\n  Object\n  $z0 \u003d VariablePointer: boolean actual\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r0.setValue(r3)\n  return\n}",
      "B2 {\n  r2 \u003d r0.createPath(r1)\n  r2.setValue(r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "VariablePointer#setValue(...1)",
        "body": "{\r\n    if (!actual) {\r\n        throw new JXPathException(\"Cannot set undefined variable: \" + qName);\r\n    }\r\n    valuePointer \u003d null;\r\n    if (index !\u003d WHOLE_COLLECTION) {\r\n        final Object collection \u003d getBaseValue();\r\n        ValueUtils.setValue(collection, index, value);\r\n    } else {\r\n        variables.declareVariable(qName.toString(), value);\r\n    }\r\n}"
      },
      {
        "name": "VariablePointer#createPath(...1)",
        "body": "{\r\n    if (!actual) {\r\n        final AbstractFactory factory \u003d getAbstractFactory(context);\r\n        if (!factory.declareVariable(context, qName.toString())) {\r\n            throw new JXPathAbstractFactoryException(\"Factory cannot define variable \u0027\" + qName + \"\u0027 for path: \" + asPath());\r\n        }\r\n        findVariables(context);\r\n        // Assert: actual \u003d\u003d true\r\n    }\r\n    return this;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.VariablePointer",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (!(object instanceof VariablePointer)) {\r\n        return false;\r\n    }\r\n    final VariablePointer other \u003d (VariablePointer) object;\r\n    return variables \u003d\u003d other.variables \u0026\u0026 qName.equals(other.qName) \u0026\u0026 index \u003d\u003d other.index;\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($r4 !\u003d $r3) → B5 | else → B8",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B8",
      "B6 : If($i1 !\u003d $i0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  VariablePointer\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d VariablePointer\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d VariablePointer) r0\n  $r4 \u003d Variables variables\u003e\n  $r3 \u003d Variables variables\u003e\n  if ($r4 !\u003d $r3) goto B5 else B8\n}",
      "B5 {\n  $r6 \u003d QName qName\u003e\n  $r5 \u003d QName qName\u003e\n  $z1 \u003d $r6.equals($r5)\n  if ($z1 \u003d\u003d false) goto B6 else B8\n}",
      "B6 {\n  $i1 \u003d VariablePointer: int index\u003e\n  $i0 \u003d VariablePointer: int index\u003e\n  if ($i1 !\u003d $i0) goto B7 else B8\n}",
      "B7 {\n  $z2 \u003d 1\n  goto B9\n}",
      "B8 {\n  $z2 \u003d 0\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.VariablePointer",
    "methodName": "getBaseValue",
    "signature": "java.lang.Object getBaseValue()",
    "visibility": "public",
    "body": "{\r\n    if (!actual) {\r\n        throw new JXPathException(\"Undefined variable: \" + qName);\r\n    }\r\n    return variables.getVariable(qName.toString());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  VariablePointer\n  $z0 \u003d VariablePointer: boolean actual\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d JXPathException\n  $r6 \u003d StringBuilder\n  new StringBuilder()\n  $r8 \u003d $r6.append(\"Undefined variable: \")\n  $r7 \u003d QName qName\u003e\n  $r9 \u003d $r8.append($r7)\n  $r10 \u003d $r9.toString()\n  new JXPathException($r10)\n  throw $r5\n}",
      "B2 {\n  $r2 \u003d Variables variables\u003e\n  $r1 \u003d QName qName\u003e\n  $r3 \u003d $r1.toString()\n  $r4 \u003d $r2.getVariable($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.VariablePointer",
    "methodName": "getImmediateNode",
    "signature": "java.lang.Object getImmediateNode()",
    "visibility": "public",
    "body": "{\r\n    final Object value \u003d getBaseValue();\r\n    return index \u003d\u003d WHOLE_COLLECTION ? ValueUtils.getValue(value) : ValueUtils.getValue(value, index);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d -2147483648) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  VariablePointer\n  r1 \u003d r0.getBaseValue()\n  $i0 \u003d VariablePointer: int index\u003e\n  if ($i0 !\u003d -2147483648) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d ValueUtils.getValue(r1)\n  goto B3\n}",
      "B2 {\n  $i1 \u003d VariablePointer: int index\u003e\n  $r2 \u003d ValueUtils.getValue(r1, $i1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "VariablePointer#getBaseValue(...0)",
        "body": "{\r\n    if (!actual) {\r\n        throw new JXPathException(\"Undefined variable: \" + qName);\r\n    }\r\n    return variables.getVariable(qName.toString());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.VariablePointer",
    "methodName": "getImmediateValuePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer getImmediateValuePointer()",
    "visibility": "public",
    "body": "{\r\n    if (valuePointer \u003d\u003d null) {\r\n        Object value;\r\n        if (!actual) {\r\n            return new NullPointer(this, getName()) {\r\n\r\n                private static final long serialVersionUID \u003d 1L;\r\n\r\n                @Override\r\n                public Object getImmediateNode() {\r\n                    throw new JXPathException(\"Undefined variable: \" + qName);\r\n                }\r\n            };\r\n        }\r\n        value \u003d getImmediateNode();\r\n        valuePointer \u003d newChildNodePointer(this, null, value);\r\n    }\r\n    return valuePointer;\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B4",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  VariablePointer\n  $r1 \u003d NodePointer valuePointer\u003e\n  if ($r1 !\u003d null) goto B1 else B4\n}",
      "B1 {\n  $z0 \u003d VariablePointer: boolean actual\u003e\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d VariablePointer$1\n  $r6 \u003d r0.getName()\n  new VariablePointer$1(r0, r0, $r6)\n  return\n}",
      "B3 {\n  r3 \u003d r0.getImmediateNode()\n  $r4 \u003d VariablePointer.newChildNodePointer(r0, null, r3)\n  NodePointer valuePointer\u003e \u003d $r4\n}",
      "B4 {\n  $r2 \u003d NodePointer valuePointer\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "VariablePointer#newChildNodePointer(...3)",
        "body": "(source not found)"
      },
      {
        "name": "VariablePointer#getImmediateNode(...0)",
        "body": "{\r\n    final Object value \u003d getBaseValue();\r\n    return index \u003d\u003d WHOLE_COLLECTION ? ValueUtils.getValue(value) : ValueUtils.getValue(value, index);\r\n}"
      },
      {
        "name": "VariablePointer#getName(...0)",
        "body": "{\r\n    return qName;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.VariablePointer",
    "methodName": "getLength",
    "signature": "int getLength()",
    "visibility": "public",
    "body": "{\r\n    if (actual) {\r\n        final Object value \u003d getBaseValue();\r\n        return value \u003d\u003d null ? 1 : ValueUtils.getLength(value);\r\n    }\r\n    return 0;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B5",
      "B1 : If(r1 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  VariablePointer\n  $z0 \u003d VariablePointer: boolean actual\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  r1 \u003d r0.getBaseValue()\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $i0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $i0 \u003d ValueUtils.getLength(r1)\n}",
      "B4 {\n  return\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "VariablePointer#getBaseValue(...0)",
        "body": "{\r\n    if (!actual) {\r\n        throw new JXPathException(\"Undefined variable: \" + qName);\r\n    }\r\n    return variables.getVariable(qName.toString());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.VariablePointer",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    return (actual ? System.identityHashCode(variables) : 0) + qName.hashCode() + index;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  VariablePointer\n  $z0 \u003d VariablePointer: boolean actual\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Variables variables\u003e\n  $i4 \u003d System.identityHashCode($r2)\n  goto B3\n}",
      "B2 {\n  $i4 \u003d 0\n}",
      "B3 {\n  $r1 \u003d QName qName\u003e\n  $i0 \u003d $r1.hashCode()\n  $i2 \u003d $i4 + $i0\n  $i1 \u003d VariablePointer: int index\u003e\n  $i3 \u003d $i2 + $i1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.VariablePointer",
    "methodName": "isCollection",
    "signature": "boolean isCollection()",
    "visibility": "public",
    "body": "{\r\n    final Object value \u003d getBaseValue();\r\n    return value !\u003d null \u0026\u0026 ValueUtils.isCollection(value);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  VariablePointer\n  r1 \u003d r0.getBaseValue()\n  if (r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d ValueUtils.isCollection(r1)\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "VariablePointer#getBaseValue(...0)",
        "body": "{\r\n    if (!actual) {\r\n        throw new JXPathException(\"Undefined variable: \" + qName);\r\n    }\r\n    return variables.getVariable(qName.toString());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.VariablePointer",
    "methodName": "isLeaf",
    "signature": "boolean isLeaf()",
    "visibility": "public",
    "body": "{\r\n    final Object value \u003d getNode();\r\n    return value \u003d\u003d null || JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  VariablePointer\n  r1 \u003d r0.getNode()\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1.getClass()\n  $r3 \u003d JXPathIntrospector.getBeanInfo($r2)\n  $z0 \u003d $r3.isAtomic()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "VariablePointer#getNode(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.VariablePointer",
    "methodName": "remove",
    "signature": "void remove()",
    "visibility": "public",
    "body": "{\r\n    if (actual) {\r\n        if (index \u003d\u003d WHOLE_COLLECTION) {\r\n            variables.undeclareVariable(qName.toString());\r\n        } else {\r\n            if (index \u003c 0) {\r\n                throw new JXPathInvalidAccessException(\"Index is less than 1: \" + asPath());\r\n            }\r\n            Object collection \u003d getBaseValue();\r\n            if (collection !\u003d null \u0026\u0026 index \u003c getLength()) {\r\n                collection \u003d ValueUtils.remove(collection, index);\r\n                variables.declareVariable(qName.toString(), collection);\r\n            }\r\n        }\r\n    }\r\n}",
    "nodes": 9,
    "edges": 12,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B8",
      "B1 : If($i0 !\u003d -2147483648) → B2 | else → B3",
      "B3 : If($i1 \u003e\u003d 0) → B4 | else → B5",
      "B5 : If(r13 \u003d\u003d null) → B6 | else → B8",
      "B6 : If($i2 \u003e\u003d $i3) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  VariablePointer\n  $z0 \u003d VariablePointer: boolean actual\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B8\n}",
      "B1 {\n  $i0 \u003d VariablePointer: int index\u003e\n  if ($i0 !\u003d -2147483648) goto B2 else B3\n}",
      "B2 {\n  $r11 \u003d Variables variables\u003e\n  $r10 \u003d QName qName\u003e\n  $r12 \u003d $r10.toString()\n  $r11.undeclareVariable($r12)\n  goto B8\n}",
      "B3 {\n  $i1 \u003d VariablePointer: int index\u003e\n  if ($i1 \u003e\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d JXPathInvalidAccessException\n  $r5 \u003d StringBuilder\n  new StringBuilder()\n  $r7 \u003d $r5.append(\"Index is less than 1: \")\n  $r6 \u003d r0.asPath()\n  $r8 \u003d $r7.append($r6)\n  $r9 \u003d $r8.toString()\n  new JXPathInvalidAccessException($r9)\n  throw $r4\n}",
      "B5 {\n  r13 \u003d r0.getBaseValue()\n  if (r13 \u003d\u003d null) goto B6 else B8\n}",
      "B6 {\n  $i2 \u003d VariablePointer: int index\u003e\n  $i3 \u003d r0.getLength()\n  if ($i2 \u003e\u003d $i3) goto B7 else B8\n}",
      "B7 {\n  $i4 \u003d VariablePointer: int index\u003e\n  r14 \u003d ValueUtils.remove(r13, $i4)\n  $r2 \u003d Variables variables\u003e\n  $r1 \u003d QName qName\u003e\n  $r3 \u003d $r1.toString()\n  $r2.declareVariable($r3, r14)\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B8",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B8",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "VariablePointer#getLength(...0)",
        "body": "{\r\n    if (actual) {\r\n        final Object value \u003d getBaseValue();\r\n        return value \u003d\u003d null ? 1 : ValueUtils.getLength(value);\r\n    }\r\n    return 0;\r\n}"
      },
      {
        "name": "VariablePointer#asPath(...0)",
        "body": "{\r\n    final StringBuilder buffer \u003d new StringBuilder();\r\n    buffer.append(\u0027$\u0027);\r\n    buffer.append(qName);\r\n    if (!actual) {\r\n        if (index !\u003d WHOLE_COLLECTION) {\r\n            buffer.append(\u0027[\u0027).append(index + 1).append(\u0027]\u0027);\r\n        }\r\n    } else if (index !\u003d WHOLE_COLLECTION \u0026\u0026 (getNode() \u003d\u003d null || isCollection())) {\r\n        buffer.append(\u0027[\u0027).append(index + 1).append(\u0027]\u0027);\r\n    }\r\n    return buffer.toString();\r\n}"
      },
      {
        "name": "VariablePointer#getBaseValue(...0)",
        "body": "{\r\n    if (!actual) {\r\n        throw new JXPathException(\"Undefined variable: \" + qName);\r\n    }\r\n    return variables.getVariable(qName.toString());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.VariablePointer",
    "methodName": "setValue",
    "signature": "void setValue(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (!actual) {\r\n        throw new JXPathException(\"Cannot set undefined variable: \" + qName);\r\n    }\r\n    valuePointer \u003d null;\r\n    if (index !\u003d WHOLE_COLLECTION) {\r\n        final Object collection \u003d getBaseValue();\r\n        ValueUtils.setValue(collection, index, value);\r\n    } else {\r\n        variables.declareVariable(qName.toString(), value);\r\n    }\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($i0 \u003d\u003d -2147483648) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  VariablePointer\n  Object\n  $z0 \u003d VariablePointer: boolean actual\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d JXPathException\n  $r7 \u003d StringBuilder\n  new StringBuilder()\n  $r9 \u003d $r7.append(\"Cannot set undefined variable: \")\n  $r8 \u003d QName qName\u003e\n  $r10 \u003d $r9.append($r8)\n  $r11 \u003d $r10.toString()\n  new JXPathException($r11)\n  throw $r6\n}",
      "B2 {\n  NodePointer valuePointer\u003e \u003d null\n  $i0 \u003d VariablePointer: int index\u003e\n  if ($i0 \u003d\u003d -2147483648) goto B3 else B4\n}",
      "B3 {\n  r5 \u003d r0.getBaseValue()\n  $i1 \u003d VariablePointer: int index\u003e\n  ValueUtils.setValue(r5, $i1, r3)\n  goto B5\n}",
      "B4 {\n  $r2 \u003d Variables variables\u003e\n  $r1 \u003d QName qName\u003e\n  $r4 \u003d $r1.toString()\n  $r2.declareVariable($r4, r3)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "VariablePointer#getBaseValue(...0)",
        "body": "{\r\n    if (!actual) {\r\n        throw new JXPathException(\"Undefined variable: \" + qName);\r\n    }\r\n    return variables.getVariable(qName.toString());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.model.VariablePointerFactory",
    "methodName": "createNodePointer",
    "signature": "org.apache.commons.jxpath.ri.model.NodePointer createNodePointer(org.apache.commons.jxpath.ri.QName,java.lang.Object,java.util.Locale)",
    "visibility": "public",
    "body": "{\r\n    if (object instanceof VariableContextWrapper) {\r\n        JXPathContext varCtx \u003d ((VariableContextWrapper) object).getContext();\r\n        while (varCtx !\u003d null) {\r\n            final Variables vars \u003d varCtx.getVariables();\r\n            if (vars.isDeclaredVariable(qName.toString())) {\r\n                return new VariablePointer(vars, qName);\r\n            }\r\n            varCtx \u003d varCtx.getParentContext();\r\n        }\r\n        // The variable is not declared, but we will create\r\n        // a pointer anyway in case the user wants to set, rather\r\n        // than get, the value of the variable.\r\n        return new VariablePointer(qName);\r\n    }\r\n    return null;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B7",
      "B2 : If(r9 \u003d\u003d null) → B3 | else → B6",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  VariablePointerFactory\n  QName\n  Object\n  Locale\n  $z0 \u003d VariablePointerFactory$VariableContextWrapper\n  if ($z0 \u003d\u003d false) goto B1 else B7\n}",
      "B1 {\n  $r1 \u003d VariablePointerFactory$VariableContextWrapper) r0\n  r9 \u003d $r1.getContext()\n}",
      "B2 {\n  if (r9 \u003d\u003d null) goto B3 else B6\n}",
      "B3 {\n  r4 \u003d r9.getVariables()\n  $r5 \u003d r3.toString()\n  $z1 \u003d r4.isDeclaredVariable($r5)\n  if ($z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r6 \u003d VariablePointer\n  new VariablePointer(r4, r3)\n  return\n}",
      "B5 {\n  r9 \u003d r9.getParentContext()\n  goto B2\n}",
      "B6 {\n  $r2 \u003d VariablePointer\n  new VariablePointer(r3)\n  return\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B7",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.NamespaceResolver",
    "methodName": "getNamespaceContextPointer",
    "signature": "org.apache.commons.jxpath.Pointer getNamespaceContextPointer()",
    "visibility": "public",
    "body": "{\r\n    if (pointer \u003d\u003d null \u0026\u0026 parent !\u003d null) {\r\n        return parent.getNamespaceContextPointer();\r\n    }\r\n    return pointer;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B3",
      "B1 : If($r3 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  NamespaceResolver\n  $r1 \u003d NodePointer pointer\u003e\n  if ($r1 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r3 \u003d NamespaceResolver parent\u003e\n  if ($r3 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d NamespaceResolver parent\u003e\n  $r5 \u003d $r4.getNamespaceContextPointer()\n  return\n}",
      "B3 {\n  $r2 \u003d NodePointer pointer\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.NamespaceResolver",
    "methodName": "getNamespaceURI",
    "signature": "java.lang.String getNamespaceURI(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    final String uri \u003d getExternallyRegisteredNamespaceURI(prefix);\r\n    return uri \u003d\u003d null \u0026\u0026 pointer !\u003d null ? pointer.getNamespaceURI(prefix) : uri;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B3",
      "B1 : If($r3 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  NamespaceResolver\n  String\n  r2 \u003d r0.getExternallyRegisteredNamespaceURI(r1)\n  if (r2 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r3 \u003d NodePointer pointer\u003e\n  if ($r3 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d NodePointer pointer\u003e\n  $r5 \u003d $r4.getNamespaceURI(r1)\n  goto B4\n}",
      "B3 {\n  $r5 \u003d r2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NamespaceResolver#getExternallyRegisteredNamespaceURI(...1)",
        "body": "{\r\n    final String uri \u003d namespaceMap.get(prefix);\r\n    return uri \u003d\u003d null \u0026\u0026 parent !\u003d null ? parent.getExternallyRegisteredNamespaceURI(prefix) : uri;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.NamespaceResolver",
    "methodName": "getPrefix",
    "signature": "java.lang.String getPrefix(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    final String prefix \u003d getExternallyRegisteredPrefix(namespaceURI);\r\n    return prefix \u003d\u003d null \u0026\u0026 pointer !\u003d null ? getPrefix(pointer, namespaceURI) : prefix;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B3",
      "B1 : If($r3 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  NamespaceResolver\n  String\n  r2 \u003d r0.getExternallyRegisteredPrefix(r1)\n  if (r2 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r3 \u003d NodePointer pointer\u003e\n  if ($r3 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d NodePointer pointer\u003e\n  $r5 \u003d NamespaceResolver.getPrefix($r4, r1)\n  goto B4\n}",
      "B3 {\n  $r5 \u003d r2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NamespaceResolver#getPrefix(...2)",
        "body": "{\r\n    NodePointer currentPointer \u003d pointer;\r\n    while (currentPointer !\u003d null) {\r\n        final NodeIterator ni \u003d currentPointer.namespaceIterator();\r\n        for (int position \u003d 1; ni !\u003d null \u0026\u0026 ni.setPosition(position); position++) {\r\n            final NodePointer nsPointer \u003d ni.getNodePointer();\r\n            final String uri \u003d nsPointer.getNamespaceURI();\r\n            if (uri.equals(namespaceURI)) {\r\n                final String prefix \u003d nsPointer.getName().getName();\r\n                if (!\"\".equals(prefix)) {\r\n                    return prefix;\r\n                }\r\n            }\r\n        }\r\n        currentPointer \u003d currentPointer.getParent();\r\n    }\r\n    return null;\r\n}"
      },
      {
        "name": "NamespaceResolver#getExternallyRegisteredPrefix(...1)",
        "body": "{\r\n    final String prefix \u003d reverseMap.get(namespaceURI);\r\n    return prefix \u003d\u003d null \u0026\u0026 parent !\u003d null ? parent.getExternallyRegisteredPrefix(namespaceURI) : prefix;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.NamespaceResolver",
    "methodName": "registerNamespace",
    "signature": "void registerNamespace(java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (isSealed()) {\r\n        throw new IllegalStateException(\"Cannot register namespaces on a sealed NamespaceResolver\");\r\n    }\r\n    namespaceMap.put(prefix, namespaceURI);\r\n    reverseMap.put(namespaceURI, prefix);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NamespaceResolver\n  String\n  String\n  $z0 \u003d r0.isSealed()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d IllegalStateException\n  new IllegalStateException(\"Cannot register namespaces on a sealed NamespaceResolver\")\n  throw $r5\n}",
      "B2 {\n  $r3 \u003d HashMap namespaceMap\u003e\n  $r3.put(r1, r2)\n  $r4 \u003d HashMap reverseMap\u003e\n  $r4.put(r2, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NamespaceResolver#isSealed(...0)",
        "body": "{\r\n    return sealed;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.NamespaceResolver",
    "methodName": "seal",
    "signature": "void seal()",
    "visibility": "public",
    "body": "{\r\n    sealed \u003d true;\r\n    if (parent !\u003d null) {\r\n        parent.seal();\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NamespaceResolver\n  NamespaceResolver: boolean sealed\u003e \u003d 1\n  $r1 \u003d NamespaceResolver parent\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d NamespaceResolver parent\u003e\n  $r2.seal()\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.ParseException",
    "methodName": "getMessage",
    "signature": "java.lang.String getMessage()",
    "visibility": "public",
    "body": "{\r\n    if (!specialConstructor) {\r\n        return super.getMessage();\r\n    }\r\n    String expected \u003d \"\";\r\n    int maxSize \u003d 0;\r\n    for (final int[] element : expectedTokenSequences) {\r\n        if (maxSize \u003c element.length) {\r\n            maxSize \u003d element.length;\r\n        }\r\n        for (final int element2 : element) {\r\n            expected +\u003d tokenImage[element2] + \" \";\r\n        }\r\n        if (element[element.length - 1] !\u003d 0) {\r\n            expected +\u003d \"...\";\r\n        }\r\n        expected +\u003d eol + \"    \";\r\n    }\r\n    String retval \u003d \"Encountered \\\"\";\r\n    Token tok \u003d currentToken.next;\r\n    for (int i \u003d 0; i \u003c maxSize; i++) {\r\n        if (i !\u003d 0) {\r\n            retval +\u003d \" \";\r\n        }\r\n        if (tok.kind \u003d\u003d 0) {\r\n            retval +\u003d tokenImage[0];\r\n            break;\r\n        }\r\n        retval +\u003d add_escapes(tok.image);\r\n        tok \u003d tok.next;\r\n    }\r\n    retval +\u003d \"\\\" at line \" + currentToken.next.beginLine + \", column \" + currentToken.next.beginColumn;\r\n    retval +\u003d \".\" + eol;\r\n    if (expectedTokenSequences.length \u003d\u003d 1) {\r\n        retval +\u003d \"Was expecting:\" + eol + \"    \";\r\n    } else {\r\n        retval +\u003d \"Was expecting one of:\" + eol + \"    \";\r\n    }\r\n    retval +\u003d expected;\r\n    return retval;\r\n}",
    "nodes": 23,
    "edges": 30,
    "cc": 9,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B3 : If(i12 \u003e\u003d i11) → B4 | else → B12",
      "B4 : If(i10 \u003e\u003d $i4) → B5 | else → B6",
      "B7 : If(i13 \u003e\u003d $i9) → B8 | else → B9",
      "B9 : If($i7 \u003d\u003d false) → B10 | else → B11",
      "B13 : If(i14 \u003e\u003d i10) → B14 | else → B19",
      "B14 : If(i14 \u003d\u003d false) → B15 | else → B16",
      "B16 : If($i3 !\u003d 0) → B17 | else → B18",
      "B19 : If($i2 !\u003d 1) → B20 | else → B21"
    ],
    "blockList": [
      "B0 {\n  ParseException\n  $z0 \u003d ParseException: boolean specialConstructor\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r64 \u003d r0.getMessage()\n  return\n}",
      "B2 {\n  r65 \u003d \"\"\n  i10 \u003d 0\n  r66 \u003d ParseException: int[][] expectedTokenSequences\u003e\n  i11 \u003d lengthof r66\n  i12 \u003d 0\n}",
      "B3 {\n  if (i12 \u003e\u003d i11) goto B4 else B12\n}",
      "B4 {\n  r49 \u003d r66[i12]\n  $i4 \u003d lengthof r49\n  if (i10 \u003e\u003d $i4) goto B5 else B6\n}",
      "B5 {\n  i10 \u003d lengthof r49\n}",
      "B6 {\n  $i9 \u003d lengthof r49\n  i13 \u003d 0\n}",
      "B7 {\n  if (i13 \u003e\u003d $i9) goto B8 else B9\n}",
      "B8 {\n  i8 \u003d r49[i13]\n  $r58 \u003d StringBuilder\n  new StringBuilder()\n  $r61 \u003d $r58.append(r65)\n  $r59 \u003d String[] tokenImage\u003e\n  $r60 \u003d $r59[i8]\n  $r62 \u003d $r61.append($r60)\n  $r63 \u003d $r62.append(\" \")\n  r65 \u003d $r63.toString()\n  i13 \u003d i13 + 1\n  goto B7\n}",
      "B9 {\n  $i5 \u003d lengthof r49\n  $i6 \u003d $i5 - 1\n  $i7 \u003d r49[$i6]\n  if ($i7 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  $r55 \u003d StringBuilder\n  new StringBuilder()\n  $r56 \u003d $r55.append(r65)\n  $r57 \u003d $r56.append(\"...\")\n  r65 \u003d $r57.toString()\n}",
      "B11 {\n  $r50 \u003d StringBuilder\n  new StringBuilder()\n  $r52 \u003d $r50.append(r65)\n  $r51 \u003d String eol\u003e\n  $r53 \u003d $r52.append($r51)\n  $r54 \u003d $r53.append(\"    \")\n  r65 \u003d $r54.toString()\n  i12 \u003d i12 + 1\n  goto B3\n}",
      "B12 {\n  r67 \u003d \"Encountered \\\"\"\n  $r1 \u003d Token currentToken\u003e\n  r68 \u003d Token next\u003e\n  i14 \u003d 0\n}",
      "B13 {\n  if (i14 \u003e\u003d i10) goto B14 else B19\n}",
      "B14 {\n  if (i14 \u003d\u003d false) goto B15 else B16\n}",
      "B15 {\n  $r46 \u003d StringBuilder\n  new StringBuilder()\n  $r47 \u003d $r46.append(r67)\n  $r48 \u003d $r47.append(\" \")\n  r67 \u003d $r48.toString()\n}",
      "B16 {\n  $i3 \u003d Token: int kind\u003e\n  if ($i3 !\u003d 0) goto B17 else B18\n}",
      "B17 {\n  $r39 \u003d StringBuilder\n  new StringBuilder()\n  $r42 \u003d $r39.append(r67)\n  $r40 \u003d String[] tokenImage\u003e\n  $r41 \u003d $r40[0]\n  $r43 \u003d $r42.append($r41)\n  r67 \u003d $r43.toString()\n  goto B19\n}",
      "B18 {\n  $r34 \u003d StringBuilder\n  new StringBuilder()\n  $r37 \u003d $r34.append(r67)\n  $r35 \u003d String image\u003e\n  $r36 \u003d r0.add_escapes($r35)\n  $r38 \u003d $r37.append($r36)\n  r67 \u003d $r38.toString()\n  r68 \u003d Token next\u003e\n  i14 \u003d i14 + 1\n  goto B13\n}",
      "B19 {\n  $r2 \u003d StringBuilder\n  new StringBuilder()\n  $r3 \u003d $r2.append(r67)\n  $r6 \u003d $r3.append(\"\\\" at line \")\n  $r4 \u003d Token currentToken\u003e\n  $r5 \u003d Token next\u003e\n  $i0 \u003d Token: int beginLine\u003e\n  $r7 \u003d $r6.append($i0)\n  $r10 \u003d $r7.append(\", column \")\n  $r8 \u003d Token currentToken\u003e\n  $r9 \u003d Token next\u003e\n  $i1 \u003d Token: int beginColumn\u003e\n  $r11 \u003d $r10.append($i1)\n  $r44 \u003d $r11.toString()\n  $r12 \u003d StringBuilder\n  new StringBuilder()\n  $r13 \u003d $r12.append($r44)\n  $r15 \u003d $r13.append(\".\")\n  $r14 \u003d String eol\u003e\n  $r16 \u003d $r15.append($r14)\n  $r45 \u003d $r16.toString()\n  $r17 \u003d ParseException: int[][] expectedTokenSequences\u003e\n  $i2 \u003d lengthof $r17\n  if ($i2 !\u003d 1) goto B20 else B21\n}",
      "B20 {\n  $r27 \u003d StringBuilder\n  new StringBuilder()\n  $r28 \u003d $r27.append($r45)\n  $r30 \u003d $r28.append(\"Was expecting:\")\n  $r29 \u003d String eol\u003e\n  $r31 \u003d $r30.append($r29)\n  $r32 \u003d $r31.append(\"    \")\n  r69 \u003d $r32.toString()\n  goto B22\n}",
      "B21 {\n  $r18 \u003d StringBuilder\n  new StringBuilder()\n  $r19 \u003d $r18.append($r45)\n  $r21 \u003d $r19.append(\"Was expecting one of:\")\n  $r20 \u003d String eol\u003e\n  $r22 \u003d $r21.append($r20)\n  $r23 \u003d $r22.append(\"    \")\n  r69 \u003d $r23.toString()\n}",
      "B22 {\n  $r24 \u003d StringBuilder\n  new StringBuilder()\n  $r25 \u003d $r24.append(r69)\n  $r26 \u003d $r25.append(r65)\n  $r33 \u003d $r26.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B12",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B7",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B3",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B19",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B13",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B22 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ParseException#add_escapes(...1)",
        "body": "{\r\n    final StringBuilder retval \u003d new StringBuilder();\r\n    char ch;\r\n    for (int i \u003d 0; i \u003c str.length(); i++) {\r\n        switch(str.charAt(i)) {\r\n            case 0:\r\n                continue;\r\n            case \u0027\\b\u0027:\r\n                retval.append(\"\\\\b\");\r\n                continue;\r\n            case \u0027\\t\u0027:\r\n                retval.append(\"\\\\t\");\r\n                continue;\r\n            case \u0027\\n\u0027:\r\n                retval.append(\"\\\\n\");\r\n                continue;\r\n            case \u0027\\f\u0027:\r\n                retval.append(\"\\\\f\");\r\n                continue;\r\n            case \u0027\\r\u0027:\r\n                retval.append(\"\\\\r\");\r\n                continue;\r\n            case \u0027\\\"\u0027:\r\n                retval.append(\"\\\\\\\"\");\r\n                continue;\r\n            case \u0027\\\u0027\u0027:\r\n                retval.append(\"\\\\\\\u0027\");\r\n                continue;\r\n            case \u0027\\\\\u0027:\r\n                retval.append(\"\\\\\\\\\");\r\n                continue;\r\n            default:\r\n                if ((ch \u003d str.charAt(i)) \u003c 0x20 || ch \u003e 0x7e) {\r\n                    final String s \u003d \"0000\" + Integer.toString(ch, 16);\r\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4));\r\n                } else {\r\n                    retval.append(ch);\r\n                }\r\n                continue;\r\n        }\r\n    }\r\n    return retval.toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.SimpleCharStream",
    "methodName": "adjustBeginLineColumn",
    "signature": "void adjustBeginLineColumn(int,int)",
    "visibility": "public",
    "body": "{\r\n    int start \u003d tokenBegin;\r\n    int len;\r\n    if (bufpos \u003e\u003d tokenBegin) {\r\n        len \u003d bufpos - tokenBegin + inBuf + 1;\r\n    } else {\r\n        len \u003d bufsize - tokenBegin + bufpos + 1 + inBuf;\r\n    }\r\n    int i \u003d 0, j \u003d 0, k \u003d 0;\r\n    int nextColDiff \u003d 0, columnDiff \u003d 0;\r\n    while (i \u003c len \u0026\u0026 bufline[j \u003d start % bufsize] \u003d\u003d bufline[k \u003d ++start % bufsize]) {\r\n        bufline[j] \u003d newLine;\r\n        nextColDiff \u003d columnDiff + bufcolumn[k] - bufcolumn[j];\r\n        bufcolumn[j] \u003d newCol + columnDiff;\r\n        columnDiff \u003d nextColDiff;\r\n        i++;\r\n    }\r\n    if (i \u003c len) {\r\n        bufline[j] \u003d newLine++;\r\n        bufcolumn[j] \u003d newCol + columnDiff;\r\n        while (i++ \u003c len) {\r\n            if (bufline[j \u003d start % bufsize] !\u003d bufline[++start % bufsize]) {\r\n                bufline[j] \u003d newLine++;\r\n            } else {\r\n                bufline[j] \u003d newLine;\r\n            }\r\n        }\r\n    }\r\n    line \u003d bufline[j];\r\n    column \u003d bufcolumn[j];\r\n}",
    "nodes": 14,
    "edges": 19,
    "cc": 7,
    "flowSummary": [
      "B0 : If($i1 \u003c $i0) → B1 | else → B2",
      "B4 : If(i38 \u003e\u003d i37) → B5 | else → B7",
      "B5 : If($i25 !\u003d $i24) → B6 | else → B7",
      "B7 : If(i38 \u003e\u003d i37) → B8 | else → B13",
      "B9 : If($i43 \u003e\u003d i37) → B10 | else → B13",
      "B10 : If($i18 \u003d\u003d $i17) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  SimpleCharStream\n  i35 :\u003d @parameter0: int\n  i11 :\u003d @parameter1: int\n  i36 \u003d SimpleCharStream: int tokenBegin\u003e\n  $i1 \u003d SimpleCharStream: int bufpos\u003e\n  $i0 \u003d SimpleCharStream: int tokenBegin\u003e\n  if ($i1 \u003c $i0) goto B1 else B2\n}",
      "B1 {\n  $i31 \u003d SimpleCharStream: int bufpos\u003e\n  $i30 \u003d SimpleCharStream: int tokenBegin\u003e\n  $i33 \u003d $i31 - $i30\n  $i32 \u003d SimpleCharStream: int inBuf\u003e\n  $i34 \u003d $i33 + $i32\n  i37 \u003d $i34 + 1\n  goto B3\n}",
      "B2 {\n  $i3 \u003d SimpleCharStream: int bufsize\u003e\n  $i2 \u003d SimpleCharStream: int tokenBegin\u003e\n  $i5 \u003d $i3 - $i2\n  $i4 \u003d SimpleCharStream: int bufpos\u003e\n  $i6 \u003d $i5 + $i4\n  $i8 \u003d $i6 + 1\n  $i7 \u003d SimpleCharStream: int inBuf\u003e\n  i37 \u003d $i8 + $i7\n}",
      "B3 {\n  i38 \u003d 0\n  i39 \u003d 0\n  i40 \u003d 0\n}",
      "B4 {\n  if (i38 \u003e\u003d i37) goto B5 else B7\n}",
      "B5 {\n  $r9 \u003d SimpleCharStream: int[] bufline\u003e\n  $i20 \u003d SimpleCharStream: int bufsize\u003e\n  $i21 \u003d i36 % $i20\n  i39 \u003d $i21\n  $i25 \u003d $r9[$i21]\n  $r10 \u003d SimpleCharStream: int[] bufline\u003e\n  i36 \u003d i36 + 1\n  $i22 \u003d SimpleCharStream: int bufsize\u003e\n  $i23 \u003d i36 % $i22\n  $i24 \u003d $r10[$i23]\n  if ($i25 !\u003d $i24) goto B6 else B7\n}",
      "B6 {\n  $r11 \u003d SimpleCharStream: int[] bufline\u003e\n  $r11[$i21] \u003d i35\n  $r12 \u003d SimpleCharStream: int[] bufcolumn\u003e\n  $i26 \u003d $r12[$i23]\n  $i28 \u003d i40 + $i26\n  $r13 \u003d SimpleCharStream: int[] bufcolumn\u003e\n  $i27 \u003d $r13[$i21]\n  i41 \u003d $i28 - $i27\n  $r14 \u003d SimpleCharStream: int[] bufcolumn\u003e\n  $i29 \u003d i11 + i40\n  $r14[$i21] \u003d $i29\n  i40 \u003d i41\n  i38 \u003d i38 + 1\n  goto B4\n}",
      "B7 {\n  if (i38 \u003e\u003d i37) goto B8 else B13\n}",
      "B8 {\n  $r3 \u003d SimpleCharStream: int[] bufline\u003e\n  i42 \u003d i35 + 1\n  $r3[i39] \u003d i35\n  $r4 \u003d SimpleCharStream: int[] bufcolumn\u003e\n  $i12 \u003d i11 + i40\n  $r4[i39] \u003d $i12\n}",
      "B9 {\n  $i43 \u003d i38\n  i38 \u003d i38 + 1\n  if ($i43 \u003e\u003d i37) goto B10 else B13\n}",
      "B10 {\n  $r5 \u003d SimpleCharStream: int[] bufline\u003e\n  $i13 \u003d SimpleCharStream: int bufsize\u003e\n  $i14 \u003d i36 % $i13\n  i39 \u003d $i14\n  $i18 \u003d $r5[$i14]\n  $r6 \u003d SimpleCharStream: int[] bufline\u003e\n  i36 \u003d i36 + 1\n  $i15 \u003d SimpleCharStream: int bufsize\u003e\n  $i16 \u003d i36 % $i15\n  $i17 \u003d $r6[$i16]\n  if ($i18 \u003d\u003d $i17) goto B11 else B12\n}",
      "B11 {\n  $r8 \u003d SimpleCharStream: int[] bufline\u003e\n  $i19 \u003d i42\n  i42 \u003d i42 + 1\n  $r8[$i14] \u003d $i19\n  goto B9\n}",
      "B12 {\n  $r7 \u003d SimpleCharStream: int[] bufline\u003e\n  $r7[$i14] \u003d i42\n  goto B9\n}",
      "B13 {\n  $r1 \u003d SimpleCharStream: int[] bufline\u003e\n  $i9 \u003d $r1[i39]\n  SimpleCharStream: int line\u003e \u003d $i9\n  $r2 \u003d SimpleCharStream: int[] bufcolumn\u003e\n  $i10 \u003d $r2[i39]\n  SimpleCharStream: int column\u003e \u003d $i10\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B4",
      "B7 --\u003e B8",
      "B7 --\u003e B13",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B13",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B9",
      "B12 --\u003e B9",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.SimpleCharStream",
    "methodName": "backup",
    "signature": "void backup(int)",
    "visibility": "public",
    "body": "{\r\n    inBuf +\u003d amount;\r\n    if ((bufpos -\u003d amount) \u003c 0) {\r\n        bufpos +\u003d bufsize;\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i4 \u003e\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleCharStream\n  i0 :\u003d @parameter0: int\n  $i1 \u003d SimpleCharStream: int inBuf\u003e\n  $i2 \u003d $i1 + i0\n  SimpleCharStream: int inBuf\u003e \u003d $i2\n  $i3 \u003d SimpleCharStream: int bufpos\u003e\n  $i4 \u003d $i3 - i0\n  SimpleCharStream: int bufpos\u003e \u003d $i4\n  if ($i4 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $i6 \u003d SimpleCharStream: int bufpos\u003e\n  $i5 \u003d SimpleCharStream: int bufsize\u003e\n  $i7 \u003d $i6 + $i5\n  SimpleCharStream: int bufpos\u003e \u003d $i7\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.SimpleCharStream",
    "methodName": "GetImage",
    "signature": "java.lang.String GetImage()",
    "visibility": "public",
    "body": "{\r\n    if (bufpos \u003e\u003d tokenBegin) {\r\n        return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);\r\n    }\r\n    return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i1 \u003c $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleCharStream\n  $i1 \u003d SimpleCharStream: int bufpos\u003e\n  $i0 \u003d SimpleCharStream: int tokenBegin\u003e\n  if ($i1 \u003c $i0) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d String\n  $r10 \u003d SimpleCharStream: char[] buffer\u003e\n  $i12 \u003d SimpleCharStream: int tokenBegin\u003e\n  $i9 \u003d SimpleCharStream: int bufpos\u003e\n  $i8 \u003d SimpleCharStream: int tokenBegin\u003e\n  $i10 \u003d $i9 - $i8\n  $i11 \u003d $i10 + 1\n  new String($r10, $i12, $i11)\n  return\n}",
      "B2 {\n  $r1 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d String\n  $r3 \u003d SimpleCharStream: char[] buffer\u003e\n  $i5 \u003d SimpleCharStream: int tokenBegin\u003e\n  $i3 \u003d SimpleCharStream: int bufsize\u003e\n  $i2 \u003d SimpleCharStream: int tokenBegin\u003e\n  $i4 \u003d $i3 - $i2\n  new String($r3, $i5, $i4)\n  $r6 \u003d $r1.append($r2)\n  $r4 \u003d String\n  $r5 \u003d SimpleCharStream: char[] buffer\u003e\n  $i6 \u003d SimpleCharStream: int bufpos\u003e\n  $i7 \u003d $i6 + 1\n  new String($r5, 0, $i7)\n  $r7 \u003d $r6.append($r4)\n  $r8 \u003d $r7.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.SimpleCharStream",
    "methodName": "GetSuffix",
    "signature": "char[] GetSuffix(int)",
    "visibility": "public",
    "body": "{\r\n    final char[] ret \u003d new char[len];\r\n    if (bufpos + 1 \u003e\u003d len) {\r\n        System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);\r\n    } else {\r\n        System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0, len - bufpos - 1);\r\n        System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);\r\n    }\r\n    return ret;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003c i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleCharStream\n  i0 :\u003d @parameter0: int\n  r0 \u003d newarray (char)[i0]\n  $i1 \u003d SimpleCharStream: int bufpos\u003e\n  $i2 \u003d $i1 + 1\n  if ($i2 \u003c i0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d SimpleCharStream: char[] buffer\u003e\n  $i16 \u003d SimpleCharStream: int bufpos\u003e\n  $i17 \u003d $i16 - i0\n  $i18 \u003d $i17 + 1\n  System.arraycopy($r4, $i18, r0, 0, i0)\n  goto B3\n}",
      "B2 {\n  $r2 \u003d SimpleCharStream: char[] buffer\u003e\n  $i6 \u003d SimpleCharStream: int bufsize\u003e\n  $i3 \u003d SimpleCharStream: int bufpos\u003e\n  $i4 \u003d i0 - $i3\n  $i5 \u003d $i4 - 1\n  $i10 \u003d $i6 - $i5\n  $i7 \u003d SimpleCharStream: int bufpos\u003e\n  $i8 \u003d i0 - $i7\n  $i9 \u003d $i8 - 1\n  System.arraycopy($r2, $i10, r0, 0, $i9)\n  $r3 \u003d SimpleCharStream: char[] buffer\u003e\n  $i11 \u003d SimpleCharStream: int bufpos\u003e\n  $i12 \u003d i0 - $i11\n  $i15 \u003d $i12 - 1\n  $i13 \u003d SimpleCharStream: int bufpos\u003e\n  $i14 \u003d $i13 + 1\n  System.arraycopy($r3, 0, r0, $i15, $i14)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.SimpleCharStream",
    "methodName": "readChar",
    "signature": "char readChar()",
    "visibility": "public",
    "body": "{\r\n    if (inBuf \u003e 0) {\r\n        --inBuf;\r\n        if (++bufpos \u003d\u003d bufsize) {\r\n            bufpos \u003d 0;\r\n        }\r\n        return buffer[bufpos];\r\n    }\r\n    if (++bufpos \u003e\u003d maxNextCharInd) {\r\n        FillBuff();\r\n    }\r\n    final char c \u003d buffer[bufpos];\r\n    UpdateLineColumn(c);\r\n    return c;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B4",
      "B1 : If($i9 !\u003d $i10) → B2 | else → B3",
      "B4 : If($i2 \u003c $i3) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  SimpleCharStream\n  $i0 \u003d SimpleCharStream: int inBuf\u003e\n  if ($i0 \u003c\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $i6 \u003d SimpleCharStream: int inBuf\u003e\n  $i7 \u003d $i6 - 1\n  SimpleCharStream: int inBuf\u003e \u003d $i7\n  $i8 \u003d SimpleCharStream: int bufpos\u003e\n  $i9 \u003d $i8 + 1\n  SimpleCharStream: int bufpos\u003e \u003d $i9\n  $i10 \u003d SimpleCharStream: int bufsize\u003e\n  if ($i9 !\u003d $i10) goto B2 else B3\n}",
      "B2 {\n  SimpleCharStream: int bufpos\u003e \u003d 0\n}",
      "B3 {\n  $r2 \u003d SimpleCharStream: char[] buffer\u003e\n  $i11 \u003d SimpleCharStream: int bufpos\u003e\n  $c12 \u003d $r2[$i11]\n  return\n}",
      "B4 {\n  $i1 \u003d SimpleCharStream: int bufpos\u003e\n  $i2 \u003d $i1 + 1\n  SimpleCharStream: int bufpos\u003e \u003d $i2\n  $i3 \u003d SimpleCharStream: int maxNextCharInd\u003e\n  if ($i2 \u003c $i3) goto B5 else B6\n}",
      "B5 {\n  r0.FillBuff()\n}",
      "B6 {\n  $r1 \u003d SimpleCharStream: char[] buffer\u003e\n  $i4 \u003d SimpleCharStream: int bufpos\u003e\n  $c5 \u003d $r1[$i4]\n  r0.UpdateLineColumn($c5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleCharStream#FillBuff(...0)",
        "body": "{\r\n    if (maxNextCharInd \u003d\u003d available) {\r\n        if (available \u003d\u003d bufsize) {\r\n            if (tokenBegin \u003e 2048) {\r\n                bufpos \u003d maxNextCharInd \u003d 0;\r\n                available \u003d tokenBegin;\r\n            } else if (tokenBegin \u003c 0) {\r\n                bufpos \u003d maxNextCharInd \u003d 0;\r\n            } else {\r\n                ExpandBuff(false);\r\n            }\r\n        } else if (available \u003e tokenBegin) {\r\n            available \u003d bufsize;\r\n        } else if (tokenBegin - available \u003c 2048) {\r\n            ExpandBuff(true);\r\n        } else {\r\n            available \u003d tokenBegin;\r\n        }\r\n    }\r\n    int i;\r\n    try {\r\n        if ((i \u003d inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) \u003d\u003d -1) {\r\n            inputStream.close();\r\n            throw new java.io.IOException();\r\n        }\r\n        maxNextCharInd +\u003d i;\r\n    } catch (final java.io.IOException e) {\r\n        --bufpos;\r\n        backup(0);\r\n        if (tokenBegin \u003d\u003d -1) {\r\n            tokenBegin \u003d bufpos;\r\n        }\r\n        throw e;\r\n    }\r\n}"
      },
      {
        "name": "SimpleCharStream#UpdateLineColumn(...1)",
        "body": "{\r\n    column++;\r\n    if (prevCharIsLF) {\r\n        prevCharIsLF \u003d false;\r\n        line +\u003d column \u003d 1;\r\n    } else if (prevCharIsCR) {\r\n        prevCharIsCR \u003d false;\r\n        if (c \u003d\u003d \u0027\\n\u0027) {\r\n            prevCharIsLF \u003d true;\r\n        } else {\r\n            line +\u003d column \u003d 1;\r\n        }\r\n    }\r\n    switch(c) {\r\n        case \u0027\\r\u0027:\r\n            prevCharIsCR \u003d true;\r\n            break;\r\n        case \u0027\\n\u0027:\r\n            prevCharIsLF \u003d true;\r\n            break;\r\n        case \u0027\\t\u0027:\r\n            column--;\r\n            column +\u003d 8 - (column \u0026 07);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    bufline[bufpos] \u003d line;\r\n    bufcolumn[bufpos] \u003d column;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.SimpleCharStream",
    "methodName": "ReInit",
    "signature": "void ReInit(java.io.Reader,int,int,int)",
    "visibility": "public",
    "body": "{\r\n    inputStream \u003d dstream;\r\n    line \u003d startLine;\r\n    column \u003d startColumn - 1;\r\n    if (buffer \u003d\u003d null || bufferSize !\u003d buffer.length) {\r\n        available \u003d bufsize \u003d bufferSize;\r\n        buffer \u003d new char[bufferSize];\r\n        bufline \u003d new int[bufferSize];\r\n        bufcolumn \u003d new int[bufferSize];\r\n    }\r\n    prevCharIsLF \u003d prevCharIsCR \u003d false;\r\n    tokenBegin \u003d inBuf \u003d maxNextCharInd \u003d 0;\r\n    bufpos \u003d -1;\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(i3 \u003d\u003d $i4) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SimpleCharStream\n  Reader\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  i3 :\u003d @parameter3: int\n  Reader inputStream\u003e \u003d r1\n  SimpleCharStream: int line\u003e \u003d i0\n  $i2 \u003d i1 - 1\n  SimpleCharStream: int column\u003e \u003d $i2\n  $r2 \u003d SimpleCharStream: char[] buffer\u003e\n  if ($r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d SimpleCharStream: char[] buffer\u003e\n  $i4 \u003d lengthof $r6\n  if (i3 \u003d\u003d $i4) goto B2 else B3\n}",
      "B2 {\n  SimpleCharStream: int bufsize\u003e \u003d i3\n  SimpleCharStream: int available\u003e \u003d i3\n  $r3 \u003d newarray (char)[i3]\n  SimpleCharStream: char[] buffer\u003e \u003d $r3\n  $r4 \u003d newarray (int)[i3]\n  SimpleCharStream: int[] bufline\u003e \u003d $r4\n  $r5 \u003d newarray (int)[i3]\n  SimpleCharStream: int[] bufcolumn\u003e \u003d $r5\n}",
      "B3 {\n  SimpleCharStream: boolean prevCharIsCR\u003e \u003d 0\n  SimpleCharStream: boolean prevCharIsLF\u003e \u003d 0\n  SimpleCharStream: int maxNextCharInd\u003e \u003d 0\n  SimpleCharStream: int inBuf\u003e \u003d 0\n  SimpleCharStream: int tokenBegin\u003e \u003d 0\n  $i6 \u003d (int) -1\n  SimpleCharStream: int bufpos\u003e \u003d $i6\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.Token",
    "methodName": "newToken",
    "signature": "org.apache.commons.jxpath.ri.parser.Token newToken(int)",
    "visibility": "public",
    "body": "{\r\n    switch(ofKind) {\r\n        default:\r\n            return new Token();\r\n    }\r\n}",
    "nodes": 2,
    "edges": 1,
    "cc": 1,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  Token; }\n}",
      "B1 {\n  $r0 \u003d Token\n  new Token()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.TokenMgrError",
    "methodName": "addEscapes",
    "signature": "java.lang.String addEscapes(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    final StringBuilder retval \u003d new StringBuilder();\r\n    char ch;\r\n    for (int i \u003d 0; i \u003c str.length(); i++) {\r\n        switch(str.charAt(i)) {\r\n            case 0:\r\n                continue;\r\n            case \u0027\\b\u0027:\r\n                retval.append(\"\\\\b\");\r\n                continue;\r\n            case \u0027\\t\u0027:\r\n                retval.append(\"\\\\t\");\r\n                continue;\r\n            case \u0027\\n\u0027:\r\n                retval.append(\"\\\\n\");\r\n                continue;\r\n            case \u0027\\f\u0027:\r\n                retval.append(\"\\\\f\");\r\n                continue;\r\n            case \u0027\\r\u0027:\r\n                retval.append(\"\\\\r\");\r\n                continue;\r\n            case \u0027\\\"\u0027:\r\n                retval.append(\"\\\\\\\"\");\r\n                continue;\r\n            case \u0027\\\u0027\u0027:\r\n                retval.append(\"\\\\\\\u0027\");\r\n                continue;\r\n            case \u0027\\\\\u0027:\r\n                retval.append(\"\\\\\\\\\");\r\n                continue;\r\n            default:\r\n                if ((ch \u003d str.charAt(i)) \u003c 0x20 || ch \u003e 0x7e) {\r\n                    final String s \u003d \"0000\" + Integer.toString(ch, 16);\r\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4));\r\n                } else {\r\n                    retval.append(ch);\r\n                }\r\n                continue;\r\n        }\r\n    }\r\n    return retval.toString();\r\n}",
    "nodes": 18,
    "edges": 29,
    "cc": 13,
    "flowSummary": [
      "B1 : If(i5 \u003e\u003d $i0) → B2 | else → B17",
      "B2 : If(switch-on $i6) → B3 | else → B4",
      "B12 : If($i7 \u003c 32) → B13 | else → B14",
      "B13 : If($i8 \u003c\u003d 126) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  String\n  $r13 \u003d StringBuilder\n  new StringBuilder()\n  i5 \u003d 0\n}",
      "B1 {\n  $i0 \u003d r1.length()\n  if (i5 \u003e\u003d $i0) goto B2 else B17\n}",
      "B2 {\n  $c1 \u003d r1.charAt(i5)\n  $i6 \u003d (int) $c1\n  String: char charAt(int)\u003e(i5); }\n}",
      "B3 {\n  goto B16\n}",
      "B4 {\n  $r13.append(\"\\\\b\")\n  goto B16\n}",
      "B5 {\n  $r13.append(\"\\\\t\")\n  goto B16\n}",
      "B6 {\n  $r13.append(\"\\\\n\")\n  goto B16\n}",
      "B7 {\n  $r13.append(\"\\\\f\")\n  goto B16\n}",
      "B8 {\n  $r13.append(\"\\\\r\")\n  goto B16\n}",
      "B9 {\n  $r13.append(\"\\\\\\\"\")\n  goto B16\n}",
      "B10 {\n  $r13.append(\"\\\\\\\u0027\")\n  goto B16\n}",
      "B11 {\n  $r13.append(\"\\\\\\\\\")\n  goto B16\n}",
      "B12 {\n  $c2 \u003d r1.charAt(i5)\n  $i7 \u003d (int) $c2\n  if ($i7 \u003c 32) goto B13 else B14\n}",
      "B13 {\n  $i8 \u003d (int) $c2\n  if ($i8 \u003c\u003d 126) goto B14 else B15\n}",
      "B14 {\n  $r14 \u003d StringBuilder\n  new StringBuilder()\n  $r5 \u003d $r14.append(\"0000\")\n  $i9 \u003d (int) $c2\n  $r4 \u003d Integer.toString($i9, 16)\n  $r6 \u003d $r5.append($r4)\n  $r12 \u003d $r6.toString()\n  $r15 \u003d StringBuilder\n  new StringBuilder()\n  $r9 \u003d $r15.append(\"\\\\u\")\n  $i3 \u003d $r12.length()\n  $i4 \u003d $i3 - 4\n  $r8 \u003d $r12.substring($i4)\n  $r10 \u003d $r9.append($r8)\n  $r11 \u003d $r10.toString()\n  $r13.append($r11)\n  goto B16\n}",
      "B15 {\n  $r13.append($c2)\n}",
      "B16 {\n  i5 \u003d i5 + 1\n  goto B1\n}",
      "B17 {\n  $r2 \u003d $r13.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B17",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B2 --\u003e B5",
      "B2 --\u003e B6",
      "B2 --\u003e B7",
      "B2 --\u003e B8",
      "B2 --\u003e B9",
      "B2 --\u003e B10",
      "B2 --\u003e B11",
      "B2 --\u003e B12",
      "B3 --\u003e B16",
      "B4 --\u003e B16",
      "B5 --\u003e B16",
      "B6 --\u003e B16",
      "B7 --\u003e B16",
      "B8 --\u003e B16",
      "B9 --\u003e B16",
      "B10 --\u003e B16",
      "B11 --\u003e B16",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B1",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "AbbreviatedAxisSpecifier",
    "signature": "int AbbreviatedAxisSpecifier()",
    "visibility": "public",
    "body": "{\r\n    int axis \u003d Compiler.AXIS_CHILD;\r\n    switch(jj_nt.kind) {\r\n        case 87:\r\n            jj_consume_token(87);\r\n            axis \u003d Compiler.AXIS_ATTRIBUTE;\r\n            break;\r\n        default:\r\n            jj_la1[15] \u003d jj_gen;\r\n            ;\r\n    }\r\n    {\r\n        if (true) {\r\n            return axis;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  b2 \u003d 2\n  $r1 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B1 {\n  r0.jj_consume_token(87)\n  b2 \u003d 5\n  goto B3\n}",
      "B2 {\n  $r2 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r2[15] \u003d $i1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "AbsoluteLocationPath",
    "signature": "java.lang.Object AbsoluteLocationPath()",
    "visibility": "public",
    "body": "{\r\n    final ArrayList steps \u003d new ArrayList();\r\n    if (jj_2_2(2147483647)) {\r\n        LocationStep(steps);\r\n        label_1: while (true) {\r\n            switch(jj_nt.kind) {\r\n                case SLASH:\r\n                case SLASHSLASH:\r\n                    ;\r\n                    break;\r\n                default:\r\n                    jj_la1[6] \u003d jj_gen;\r\n                    break label_1;\r\n            }\r\n            LocationStep(steps);\r\n        }\r\n    } else {\r\n        switch(jj_nt.kind) {\r\n            case SLASH:\r\n                jj_consume_token(SLASH);\r\n                break;\r\n            default:\r\n                jj_la1[7] \u003d jj_gen;\r\n                jj_consume_token(-1);\r\n                throw new ParseException();\r\n        }\r\n    }\r\n    {\r\n        if (true) {\r\n            return compiler.locationPath(true, steps.toArray());\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 10,
    "edges": 11,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B6",
      "B2 : If(switch-on $i2) → B3 | else → B4",
      "B6 : If(switch-on $i0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  $r10 \u003d ArrayList\n  new ArrayList()\n  $z0 \u003d r1.jj_2_2(2147483647)\n  if ($z0 \u003d\u003d false) goto B1 else B6\n}",
      "B1 {\n  r1.LocationStep($r10)\n}",
      "B2 {\n  $r8 \u003d Token jj_nt\u003e\n  $i2 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B3 {\n  goto B5\n}",
      "B4 {\n  $r9 \u003d XPathParser: int[] jj_la1\u003e\n  $i3 \u003d XPathParser: int jj_gen\u003e\n  $r9[6] \u003d $i3\n  goto B9\n}",
      "B5 {\n  r1.LocationStep($r10)\n  goto B2\n}",
      "B6 {\n  $r2 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B7 {\n  r1.jj_consume_token(6)\n  goto B9\n}",
      "B8 {\n  $r6 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r6[7] \u003d $i1\n  $i5 \u003d (int) -1\n  r1.jj_consume_token($i5)\n  $r11 \u003d ParseException\n  new ParseException()\n  throw $r11\n}",
      "B9 {\n  $r3 \u003d Compiler compiler\u003e\n  $r4 \u003d $r10.toArray()\n  $r5 \u003d $r3.locationPath(1, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B2",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      },
      {
        "name": "XPathParser#jj_2_2(...1)",
        "body": "{\r\n    jj_la \u003d xla;\r\n    jj_lastpos \u003d jj_scanpos \u003d token;\r\n    try {\r\n        return !jj_3_2();\r\n    } catch (final LookaheadSuccess ls) {\r\n        return true;\r\n    } finally {\r\n        jj_save(1, xla);\r\n    }\r\n}"
      },
      {
        "name": "XPathParser#LocationStep(...1)",
        "body": "{\r\n    Object t;\r\n    final Object s;\r\n    switch(jj_nt.kind) {\r\n        case SLASH:\r\n            jj_consume_token(SLASH);\r\n            break;\r\n        case SLASHSLASH:\r\n            jj_consume_token(SLASHSLASH);\r\n            // Abbreviated step: descendant-or-self::node()\r\n            t \u003d compiler.nodeTypeTest(Compiler.NODE_TYPE_NODE);\r\n            steps.add(compiler.step(Compiler.AXIS_DESCENDANT_OR_SELF, t, null));\r\n            break;\r\n        default:\r\n            jj_la1[9] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    NodeTest(steps);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "AdditiveExpr",
    "signature": "java.lang.Object AdditiveExpr()",
    "visibility": "public",
    "body": "{\r\n    Object ex, r;\r\n    ArrayList list \u003d null;\r\n    ex \u003d SubtractiveExpr();\r\n    label_12: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case PLUS:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[30] \u003d jj_gen;\r\n                break label_12;\r\n        }\r\n        jj_consume_token(PLUS);\r\n        r \u003d SubtractiveExpr();\r\n        if (list \u003d\u003d null) {\r\n            list \u003d new ArrayList();\r\n            list.add(ex);\r\n        }\r\n        list.add(r);\r\n    }\r\n    if (list !\u003d null) {\r\n        ex \u003d compiler.sum(list.toArray());\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B1 : If(switch-on $i0) → B2 | else → B3",
      "B4 : If(r7 !\u003d null) → B5 | else → B6",
      "B7 : If(r7 \u003d\u003d null) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  r7 \u003d null\n  r8 \u003d r0.SubtractiveExpr()\n}",
      "B1 {\n  $r1 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B2 {\n  goto B4\n}",
      "B3 {\n  $r4 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r4[30] \u003d $i1\n  goto B7\n}",
      "B4 {\n  r0.jj_consume_token(9)\n  r2 \u003d r0.SubtractiveExpr()\n  if (r7 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r3 \u003d ArrayList\n  new ArrayList()\n  r7 \u003d $r3\n  $r3.add(r8)\n}",
      "B6 {\n  r7.add(r2)\n  goto B1\n}",
      "B7 {\n  if (r7 \u003d\u003d null) goto B8 else B9\n}",
      "B8 {\n  $r5 \u003d Compiler compiler\u003e\n  $r6 \u003d r7.toArray()\n  r8 \u003d $r5.sum($r6)\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B1",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      },
      {
        "name": "XPathParser#SubtractiveExpr(...0)",
        "body": "{\r\n    Object ex, r \u003d null;\r\n    ex \u003d MultiplicativeExpr();\r\n    label_13: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case MINUS:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[31] \u003d jj_gen;\r\n                break label_13;\r\n        }\r\n        jj_consume_token(MINUS);\r\n        r \u003d MultiplicativeExpr();\r\n        ex \u003d compiler.minus(ex, r);\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "AndExpr",
    "signature": "java.lang.Object AndExpr()",
    "visibility": "public",
    "body": "{\r\n    Object ex, r;\r\n    ArrayList list \u003d null;\r\n    ex \u003d EqualityExpr();\r\n    label_9: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case AND:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[25] \u003d jj_gen;\r\n                break label_9;\r\n        }\r\n        jj_consume_token(AND);\r\n        r \u003d EqualityExpr();\r\n        if (list \u003d\u003d null) {\r\n            list \u003d new ArrayList();\r\n            list.add(ex);\r\n        }\r\n        list.add(r);\r\n    }\r\n    if (list !\u003d null) {\r\n        ex \u003d compiler.and(list.toArray());\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B1 : If(switch-on $i0) → B2 | else → B3",
      "B4 : If(r7 !\u003d null) → B5 | else → B6",
      "B7 : If(r7 \u003d\u003d null) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  r7 \u003d null\n  r8 \u003d r0.EqualityExpr()\n}",
      "B1 {\n  $r1 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B2 {\n  goto B4\n}",
      "B3 {\n  $r4 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r4[25] \u003d $i1\n  goto B7\n}",
      "B4 {\n  r0.jj_consume_token(28)\n  r2 \u003d r0.EqualityExpr()\n  if (r7 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r3 \u003d ArrayList\n  new ArrayList()\n  r7 \u003d $r3\n  $r3.add(r8)\n}",
      "B6 {\n  r7.add(r2)\n  goto B1\n}",
      "B7 {\n  if (r7 \u003d\u003d null) goto B8 else B9\n}",
      "B8 {\n  $r5 \u003d Compiler compiler\u003e\n  $r6 \u003d r7.toArray()\n  r8 \u003d $r5.and($r6)\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B1",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#EqualityExpr(...0)",
        "body": "{\r\n    Object ex, r;\r\n    ex \u003d RelationalExpr();\r\n    label_10: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case EQ:\r\n            case NEQ:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[26] \u003d jj_gen;\r\n                break label_10;\r\n        }\r\n        switch(jj_nt.kind) {\r\n            case EQ:\r\n                jj_consume_token(EQ);\r\n                r \u003d RelationalExpr();\r\n                ex \u003d compiler.equal(ex, r);\r\n                break;\r\n            case NEQ:\r\n                jj_consume_token(NEQ);\r\n                r \u003d RelationalExpr();\r\n                ex \u003d compiler.notEqual(ex, r);\r\n                break;\r\n            default:\r\n                jj_la1[27] \u003d jj_gen;\r\n                jj_consume_token(-1);\r\n                throw new ParseException();\r\n        }\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      },
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "ArgumentList",
    "signature": "java.util.ArrayList ArgumentList()",
    "visibility": "public",
    "body": "{\r\n    ArrayList args \u003d null;\r\n    Object arg;\r\n    jj_consume_token(81);\r\n    switch(jj_nt.kind) {\r\n        case SLASH:\r\n        case SLASHSLASH:\r\n        case MINUS:\r\n        case VARIABLE:\r\n        case Literal:\r\n        case Number:\r\n        case OR:\r\n        case AND:\r\n        case MOD:\r\n        case DIV:\r\n        case NODE:\r\n        case TEXT:\r\n        case COMMENT:\r\n        case PI:\r\n        case AXIS_SELF:\r\n        case AXIS_CHILD:\r\n        case AXIS_PARENT:\r\n        case AXIS_ANCESTOR:\r\n        case AXIS_ATTRIBUTE:\r\n        case AXIS_NAMESPACE:\r\n        case AXIS_PRECEDING:\r\n        case AXIS_FOLLOWING:\r\n        case AXIS_DESCENDANT:\r\n        case AXIS_ANCESTOR_OR_SELF:\r\n        case AXIS_FOLLOWING_SIBLING:\r\n        case AXIS_PRECEDING_SIBLING:\r\n        case AXIS_DESCENDANT_OR_SELF:\r\n        case FUNCTION_LAST:\r\n        case FUNCTION_POSITION:\r\n        case FUNCTION_COUNT:\r\n        case FUNCTION_ID:\r\n        case FUNCTION_KEY:\r\n        case FUNCTION_LOCAL_NAME:\r\n        case FUNCTION_NAMESPACE_URI:\r\n        case FUNCTION_NAME:\r\n        case FUNCTION_STRING:\r\n        case FUNCTION_CONCAT:\r\n        case FUNCTION_STARTS_WITH:\r\n        case FUNCTION_ENDS_WITH:\r\n        case FUNCTION_CONTAINS:\r\n        case FUNCTION_SUBSTRING_BEFORE:\r\n        case FUNCTION_SUBSTRING_AFTER:\r\n        case FUNCTION_SUBSTRING:\r\n        case FUNCTION_STRING_LENGTH:\r\n        case FUNCTION_NORMALIZE_SPACE:\r\n        case FUNCTION_TRANSLATE:\r\n        case FUNCTION_BOOLEAN:\r\n        case FUNCTION_NOT:\r\n        case FUNCTION_TRUE:\r\n        case FUNCTION_FALSE:\r\n        case FUNCTION_NULL:\r\n        case FUNCTION_LANG:\r\n        case FUNCTION_NUMBER:\r\n        case FUNCTION_SUM:\r\n        case FUNCTION_FLOOR:\r\n        case FUNCTION_CEILING:\r\n        case FUNCTION_ROUND:\r\n        case FUNCTION_FORMAT_NUMBER:\r\n        case NCName:\r\n        case 81:\r\n        case 83:\r\n        case 84:\r\n        case 87:\r\n        case 89:\r\n            arg \u003d Argument();\r\n            args \u003d new ArrayList();\r\n            args.add(arg);\r\n            label_4: while (true) {\r\n                switch(jj_nt.kind) {\r\n                    case 88:\r\n                        ;\r\n                        break;\r\n                    default:\r\n                        jj_la1[18] \u003d jj_gen;\r\n                        break label_4;\r\n                }\r\n                jj_consume_token(88);\r\n                arg \u003d Argument();\r\n                args.add(arg);\r\n            }\r\n            break;\r\n        default:\r\n            jj_la1[19] \u003d jj_gen;\r\n            ;\r\n    }\r\n    jj_consume_token(82);\r\n    {\r\n        if (true) {\r\n            return args;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B6",
      "B2 : If(switch-on $i1) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  r6 \u003d null\n  r0.jj_consume_token(81)\n  $r1 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B1 {\n  r7 \u003d r0.Argument()\n  $r2 \u003d ArrayList\n  new ArrayList()\n  r6 \u003d $r2\n  $r2.add(r7)\n}",
      "B2 {\n  $r3 \u003d Token jj_nt\u003e\n  $i1 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B3 {\n  goto B5\n}",
      "B4 {\n  $r4 \u003d XPathParser: int[] jj_la1\u003e\n  $i2 \u003d XPathParser: int jj_gen\u003e\n  $r4[18] \u003d $i2\n  goto B7\n}",
      "B5 {\n  r0.jj_consume_token(88)\n  r8 \u003d r0.Argument()\n  $r2.add(r8)\n  goto B2\n}",
      "B6 {\n  $r5 \u003d XPathParser: int[] jj_la1\u003e\n  $i3 \u003d XPathParser: int jj_gen\u003e\n  $r5[19] \u003d $i3\n}",
      "B7 {\n  r0.jj_consume_token(82)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B2",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      },
      {
        "name": "XPathParser#Argument(...0)",
        "body": "{\r\n    Object ex;\r\n    ex \u003d Expression();\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "AxisName",
    "signature": "int AxisName()",
    "visibility": "public",
    "body": "{\r\n    int axis \u003d 0;\r\n    switch(jj_nt.kind) {\r\n        case AXIS_SELF:\r\n            jj_consume_token(AXIS_SELF);\r\n            axis \u003d Compiler.AXIS_SELF;\r\n            break;\r\n        case AXIS_CHILD:\r\n            jj_consume_token(AXIS_CHILD);\r\n            axis \u003d Compiler.AXIS_CHILD;\r\n            break;\r\n        case AXIS_PARENT:\r\n            jj_consume_token(AXIS_PARENT);\r\n            axis \u003d Compiler.AXIS_PARENT;\r\n            break;\r\n        case AXIS_ANCESTOR:\r\n            jj_consume_token(AXIS_ANCESTOR);\r\n            axis \u003d Compiler.AXIS_ANCESTOR;\r\n            break;\r\n        case AXIS_ATTRIBUTE:\r\n            jj_consume_token(AXIS_ATTRIBUTE);\r\n            axis \u003d Compiler.AXIS_ATTRIBUTE;\r\n            break;\r\n        case AXIS_NAMESPACE:\r\n            jj_consume_token(AXIS_NAMESPACE);\r\n            axis \u003d Compiler.AXIS_NAMESPACE;\r\n            break;\r\n        case AXIS_PRECEDING:\r\n            jj_consume_token(AXIS_PRECEDING);\r\n            axis \u003d Compiler.AXIS_PRECEDING;\r\n            break;\r\n        case AXIS_FOLLOWING:\r\n            jj_consume_token(AXIS_FOLLOWING);\r\n            axis \u003d Compiler.AXIS_FOLLOWING;\r\n            break;\r\n        case AXIS_DESCENDANT:\r\n            jj_consume_token(AXIS_DESCENDANT);\r\n            axis \u003d Compiler.AXIS_DESCENDANT;\r\n            break;\r\n        case AXIS_ANCESTOR_OR_SELF:\r\n            jj_consume_token(AXIS_ANCESTOR_OR_SELF);\r\n            axis \u003d Compiler.AXIS_ANCESTOR_OR_SELF;\r\n            break;\r\n        case AXIS_FOLLOWING_SIBLING:\r\n            jj_consume_token(AXIS_FOLLOWING_SIBLING);\r\n            axis \u003d Compiler.AXIS_FOLLOWING_SIBLING;\r\n            break;\r\n        case AXIS_PRECEDING_SIBLING:\r\n            jj_consume_token(AXIS_PRECEDING_SIBLING);\r\n            axis \u003d Compiler.AXIS_PRECEDING_SIBLING;\r\n            break;\r\n        case AXIS_DESCENDANT_OR_SELF:\r\n            jj_consume_token(AXIS_DESCENDANT_OR_SELF);\r\n            axis \u003d Compiler.AXIS_DESCENDANT_OR_SELF;\r\n            break;\r\n        default:\r\n            jj_la1[14] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    {\r\n        if (true) {\r\n            return axis;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 16,
    "edges": 27,
    "cc": 13,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  $r1 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B1 {\n  r0.jj_consume_token(35)\n  b2 \u003d 1\n  goto B15\n}",
      "B2 {\n  r0.jj_consume_token(36)\n  b2 \u003d 2\n  goto B15\n}",
      "B3 {\n  r0.jj_consume_token(37)\n  b2 \u003d 3\n  goto B15\n}",
      "B4 {\n  r0.jj_consume_token(38)\n  b2 \u003d 4\n  goto B15\n}",
      "B5 {\n  r0.jj_consume_token(39)\n  b2 \u003d 5\n  goto B15\n}",
      "B6 {\n  r0.jj_consume_token(40)\n  b2 \u003d 6\n  goto B15\n}",
      "B7 {\n  r0.jj_consume_token(41)\n  b2 \u003d 7\n  goto B15\n}",
      "B8 {\n  r0.jj_consume_token(42)\n  b2 \u003d 8\n  goto B15\n}",
      "B9 {\n  r0.jj_consume_token(43)\n  b2 \u003d 9\n  goto B15\n}",
      "B10 {\n  r0.jj_consume_token(44)\n  b2 \u003d 10\n  goto B15\n}",
      "B11 {\n  r0.jj_consume_token(45)\n  b2 \u003d 11\n  goto B15\n}",
      "B12 {\n  r0.jj_consume_token(46)\n  b2 \u003d 12\n  goto B15\n}",
      "B13 {\n  r0.jj_consume_token(47)\n  b2 \u003d 13\n  goto B15\n}",
      "B14 {\n  $r2 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r2[14] \u003d $i1\n  $i4 \u003d (int) -1\n  r0.jj_consume_token($i4)\n  $r4 \u003d ParseException\n  new ParseException()\n  throw $r4\n}",
      "B15 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B0 --\u003e B4",
      "B0 --\u003e B5",
      "B0 --\u003e B6",
      "B0 --\u003e B7",
      "B0 --\u003e B8",
      "B0 --\u003e B9",
      "B0 --\u003e B10",
      "B0 --\u003e B11",
      "B0 --\u003e B12",
      "B0 --\u003e B13",
      "B0 --\u003e B14",
      "B1 --\u003e B15",
      "B2 --\u003e B15",
      "B3 --\u003e B15",
      "B4 --\u003e B15",
      "B5 --\u003e B15",
      "B6 --\u003e B15",
      "B7 --\u003e B15",
      "B8 --\u003e B15",
      "B9 --\u003e B15",
      "B10 --\u003e B15",
      "B11 --\u003e B15",
      "B12 --\u003e B15",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "AxisSpecifier",
    "signature": "int AxisSpecifier()",
    "visibility": "public",
    "body": "{\r\n    int axis;\r\n    switch(jj_nt.kind) {\r\n        case AXIS_SELF:\r\n        case AXIS_CHILD:\r\n        case AXIS_PARENT:\r\n        case AXIS_ANCESTOR:\r\n        case AXIS_ATTRIBUTE:\r\n        case AXIS_NAMESPACE:\r\n        case AXIS_PRECEDING:\r\n        case AXIS_FOLLOWING:\r\n        case AXIS_DESCENDANT:\r\n        case AXIS_ANCESTOR_OR_SELF:\r\n        case AXIS_FOLLOWING_SIBLING:\r\n        case AXIS_PRECEDING_SIBLING:\r\n        case AXIS_DESCENDANT_OR_SELF:\r\n            axis \u003d AxisName();\r\n            break;\r\n        default:\r\n            jj_la1[13] \u003d jj_gen;\r\n            axis \u003d AbbreviatedAxisSpecifier();\r\n    }\r\n    {\r\n        if (true) {\r\n            return axis;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  $r1 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B1 {\n  i2 \u003d r0.AxisName()\n  goto B3\n}",
      "B2 {\n  $r2 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r2[13] \u003d $i1\n  i2 \u003d r0.AbbreviatedAxisSpecifier()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#AxisName(...0)",
        "body": "{\r\n    int axis \u003d 0;\r\n    switch(jj_nt.kind) {\r\n        case AXIS_SELF:\r\n            jj_consume_token(AXIS_SELF);\r\n            axis \u003d Compiler.AXIS_SELF;\r\n            break;\r\n        case AXIS_CHILD:\r\n            jj_consume_token(AXIS_CHILD);\r\n            axis \u003d Compiler.AXIS_CHILD;\r\n            break;\r\n        case AXIS_PARENT:\r\n            jj_consume_token(AXIS_PARENT);\r\n            axis \u003d Compiler.AXIS_PARENT;\r\n            break;\r\n        case AXIS_ANCESTOR:\r\n            jj_consume_token(AXIS_ANCESTOR);\r\n            axis \u003d Compiler.AXIS_ANCESTOR;\r\n            break;\r\n        case AXIS_ATTRIBUTE:\r\n            jj_consume_token(AXIS_ATTRIBUTE);\r\n            axis \u003d Compiler.AXIS_ATTRIBUTE;\r\n            break;\r\n        case AXIS_NAMESPACE:\r\n            jj_consume_token(AXIS_NAMESPACE);\r\n            axis \u003d Compiler.AXIS_NAMESPACE;\r\n            break;\r\n        case AXIS_PRECEDING:\r\n            jj_consume_token(AXIS_PRECEDING);\r\n            axis \u003d Compiler.AXIS_PRECEDING;\r\n            break;\r\n        case AXIS_FOLLOWING:\r\n            jj_consume_token(AXIS_FOLLOWING);\r\n            axis \u003d Compiler.AXIS_FOLLOWING;\r\n            break;\r\n        case AXIS_DESCENDANT:\r\n            jj_consume_token(AXIS_DESCENDANT);\r\n            axis \u003d Compiler.AXIS_DESCENDANT;\r\n            break;\r\n        case AXIS_ANCESTOR_OR_SELF:\r\n            jj_consume_token(AXIS_ANCESTOR_OR_SELF);\r\n            axis \u003d Compiler.AXIS_ANCESTOR_OR_SELF;\r\n            break;\r\n        case AXIS_FOLLOWING_SIBLING:\r\n            jj_consume_token(AXIS_FOLLOWING_SIBLING);\r\n            axis \u003d Compiler.AXIS_FOLLOWING_SIBLING;\r\n            break;\r\n        case AXIS_PRECEDING_SIBLING:\r\n            jj_consume_token(AXIS_PRECEDING_SIBLING);\r\n            axis \u003d Compiler.AXIS_PRECEDING_SIBLING;\r\n            break;\r\n        case AXIS_DESCENDANT_OR_SELF:\r\n            jj_consume_token(AXIS_DESCENDANT_OR_SELF);\r\n            axis \u003d Compiler.AXIS_DESCENDANT_OR_SELF;\r\n            break;\r\n        default:\r\n            jj_la1[14] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    {\r\n        if (true) {\r\n            return axis;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      },
      {
        "name": "XPathParser#AbbreviatedAxisSpecifier(...0)",
        "body": "{\r\n    int axis \u003d Compiler.AXIS_CHILD;\r\n    switch(jj_nt.kind) {\r\n        case 87:\r\n            jj_consume_token(87);\r\n            axis \u003d Compiler.AXIS_ATTRIBUTE;\r\n            break;\r\n        default:\r\n            jj_la1[15] \u003d jj_gen;\r\n            ;\r\n    }\r\n    {\r\n        if (true) {\r\n            return axis;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "CoreFunctionCall",
    "signature": "java.lang.Object CoreFunctionCall()",
    "visibility": "public",
    "body": "{\r\n    int code \u003d 0;\r\n    ArrayList args;\r\n    code \u003d CoreFunctionName();\r\n    args \u003d ArgumentList();\r\n    if (args \u003d\u003d null) {\r\n        {\r\n            if (true) {\r\n                return compiler.function(code, null);\r\n            }\r\n        }\r\n    } else {\r\n        {\r\n            if (true) {\r\n                return compiler.function(code, args.toArray());\r\n            }\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  i0 \u003d r0.CoreFunctionName()\n  r1 \u003d r0.ArgumentList()\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d Compiler compiler\u003e\n  $r6 \u003d $r5.function(i0, null)\n  return\n}",
      "B2 {\n  $r2 \u003d Compiler compiler\u003e\n  $r3 \u003d r1.toArray()\n  $r4 \u003d $r2.function(i0, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#CoreFunctionName(...0)",
        "body": "{\r\n    int code;\r\n    switch(jj_nt.kind) {\r\n        case FUNCTION_LAST:\r\n            jj_consume_token(FUNCTION_LAST);\r\n            code \u003d Compiler.FUNCTION_LAST;\r\n            break;\r\n        case FUNCTION_POSITION:\r\n            jj_consume_token(FUNCTION_POSITION);\r\n            code \u003d Compiler.FUNCTION_POSITION;\r\n            break;\r\n        case FUNCTION_COUNT:\r\n            jj_consume_token(FUNCTION_COUNT);\r\n            code \u003d Compiler.FUNCTION_COUNT;\r\n            break;\r\n        case FUNCTION_ID:\r\n            jj_consume_token(FUNCTION_ID);\r\n            code \u003d Compiler.FUNCTION_ID;\r\n            break;\r\n        case FUNCTION_LOCAL_NAME:\r\n            jj_consume_token(FUNCTION_LOCAL_NAME);\r\n            code \u003d Compiler.FUNCTION_LOCAL_NAME;\r\n            break;\r\n        case FUNCTION_NAMESPACE_URI:\r\n            jj_consume_token(FUNCTION_NAMESPACE_URI);\r\n            code \u003d Compiler.FUNCTION_NAMESPACE_URI;\r\n            break;\r\n        case FUNCTION_NAME:\r\n            jj_consume_token(FUNCTION_NAME);\r\n            code \u003d Compiler.FUNCTION_NAME;\r\n            break;\r\n        case FUNCTION_STRING:\r\n            jj_consume_token(FUNCTION_STRING);\r\n            code \u003d Compiler.FUNCTION_STRING;\r\n            break;\r\n        case FUNCTION_CONCAT:\r\n            jj_consume_token(FUNCTION_CONCAT);\r\n            code \u003d Compiler.FUNCTION_CONCAT;\r\n            break;\r\n        case FUNCTION_STARTS_WITH:\r\n            jj_consume_token(FUNCTION_STARTS_WITH);\r\n            code \u003d Compiler.FUNCTION_STARTS_WITH;\r\n            break;\r\n        case FUNCTION_ENDS_WITH:\r\n            jj_consume_token(FUNCTION_ENDS_WITH);\r\n            code \u003d Compiler.FUNCTION_ENDS_WITH;\r\n            break;\r\n        case FUNCTION_CONTAINS:\r\n            jj_consume_token(FUNCTION_CONTAINS);\r\n            code \u003d Compiler.FUNCTION_CONTAINS;\r\n            break;\r\n        case FUNCTION_SUBSTRING_BEFORE:\r\n            jj_consume_token(FUNCTION_SUBSTRING_BEFORE);\r\n            code \u003d Compiler.FUNCTION_SUBSTRING_BEFORE;\r\n            break;\r\n        case FUNCTION_SUBSTRING_AFTER:\r\n            jj_consume_token(FUNCTION_SUBSTRING_AFTER);\r\n            code \u003d Compiler.FUNCTION_SUBSTRING_AFTER;\r\n            break;\r\n        case FUNCTION_SUBSTRING:\r\n            jj_consume_token(FUNCTION_SUBSTRING);\r\n            code \u003d Compiler.FUNCTION_SUBSTRING;\r\n            break;\r\n        case FUNCTION_STRING_LENGTH:\r\n            jj_consume_token(FUNCTION_STRING_LENGTH);\r\n            code \u003d Compiler.FUNCTION_STRING_LENGTH;\r\n            break;\r\n        case FUNCTION_NORMALIZE_SPACE:\r\n            jj_consume_token(FUNCTION_NORMALIZE_SPACE);\r\n            code \u003d Compiler.FUNCTION_NORMALIZE_SPACE;\r\n            break;\r\n        case FUNCTION_TRANSLATE:\r\n            jj_consume_token(FUNCTION_TRANSLATE);\r\n            code \u003d Compiler.FUNCTION_TRANSLATE;\r\n            break;\r\n        case FUNCTION_BOOLEAN:\r\n            jj_consume_token(FUNCTION_BOOLEAN);\r\n            code \u003d Compiler.FUNCTION_BOOLEAN;\r\n            break;\r\n        case FUNCTION_NOT:\r\n            jj_consume_token(FUNCTION_NOT);\r\n            code \u003d Compiler.FUNCTION_NOT;\r\n            break;\r\n        case FUNCTION_TRUE:\r\n            jj_consume_token(FUNCTION_TRUE);\r\n            code \u003d Compiler.FUNCTION_TRUE;\r\n            break;\r\n        case FUNCTION_FALSE:\r\n            jj_consume_token(FUNCTION_FALSE);\r\n            code \u003d Compiler.FUNCTION_FALSE;\r\n            break;\r\n        case FUNCTION_NULL:\r\n            jj_consume_token(FUNCTION_NULL);\r\n            code \u003d Compiler.FUNCTION_NULL;\r\n            break;\r\n        case FUNCTION_LANG:\r\n            jj_consume_token(FUNCTION_LANG);\r\n            code \u003d Compiler.FUNCTION_LANG;\r\n            break;\r\n        case FUNCTION_NUMBER:\r\n            jj_consume_token(FUNCTION_NUMBER);\r\n            code \u003d Compiler.FUNCTION_NUMBER;\r\n            break;\r\n        case FUNCTION_SUM:\r\n            jj_consume_token(FUNCTION_SUM);\r\n            code \u003d Compiler.FUNCTION_SUM;\r\n            break;\r\n        case FUNCTION_FLOOR:\r\n            jj_consume_token(FUNCTION_FLOOR);\r\n            code \u003d Compiler.FUNCTION_FLOOR;\r\n            break;\r\n        case FUNCTION_CEILING:\r\n            jj_consume_token(FUNCTION_CEILING);\r\n            code \u003d Compiler.FUNCTION_CEILING;\r\n            break;\r\n        case FUNCTION_ROUND:\r\n            jj_consume_token(FUNCTION_ROUND);\r\n            code \u003d Compiler.FUNCTION_ROUND;\r\n            break;\r\n        case FUNCTION_KEY:\r\n            jj_consume_token(FUNCTION_KEY);\r\n            code \u003d Compiler.FUNCTION_KEY;\r\n            break;\r\n        case FUNCTION_FORMAT_NUMBER:\r\n            jj_consume_token(FUNCTION_FORMAT_NUMBER);\r\n            code \u003d Compiler.FUNCTION_FORMAT_NUMBER;\r\n            break;\r\n        default:\r\n            jj_la1[2] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    {\r\n        if (true) {\r\n            return code;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      },
      {
        "name": "XPathParser#ArgumentList(...0)",
        "body": "{\r\n    ArrayList args \u003d null;\r\n    Object arg;\r\n    jj_consume_token(81);\r\n    switch(jj_nt.kind) {\r\n        case SLASH:\r\n        case SLASHSLASH:\r\n        case MINUS:\r\n        case VARIABLE:\r\n        case Literal:\r\n        case Number:\r\n        case OR:\r\n        case AND:\r\n        case MOD:\r\n        case DIV:\r\n        case NODE:\r\n        case TEXT:\r\n        case COMMENT:\r\n        case PI:\r\n        case AXIS_SELF:\r\n        case AXIS_CHILD:\r\n        case AXIS_PARENT:\r\n        case AXIS_ANCESTOR:\r\n        case AXIS_ATTRIBUTE:\r\n        case AXIS_NAMESPACE:\r\n        case AXIS_PRECEDING:\r\n        case AXIS_FOLLOWING:\r\n        case AXIS_DESCENDANT:\r\n        case AXIS_ANCESTOR_OR_SELF:\r\n        case AXIS_FOLLOWING_SIBLING:\r\n        case AXIS_PRECEDING_SIBLING:\r\n        case AXIS_DESCENDANT_OR_SELF:\r\n        case FUNCTION_LAST:\r\n        case FUNCTION_POSITION:\r\n        case FUNCTION_COUNT:\r\n        case FUNCTION_ID:\r\n        case FUNCTION_KEY:\r\n        case FUNCTION_LOCAL_NAME:\r\n        case FUNCTION_NAMESPACE_URI:\r\n        case FUNCTION_NAME:\r\n        case FUNCTION_STRING:\r\n        case FUNCTION_CONCAT:\r\n        case FUNCTION_STARTS_WITH:\r\n        case FUNCTION_ENDS_WITH:\r\n        case FUNCTION_CONTAINS:\r\n        case FUNCTION_SUBSTRING_BEFORE:\r\n        case FUNCTION_SUBSTRING_AFTER:\r\n        case FUNCTION_SUBSTRING:\r\n        case FUNCTION_STRING_LENGTH:\r\n        case FUNCTION_NORMALIZE_SPACE:\r\n        case FUNCTION_TRANSLATE:\r\n        case FUNCTION_BOOLEAN:\r\n        case FUNCTION_NOT:\r\n        case FUNCTION_TRUE:\r\n        case FUNCTION_FALSE:\r\n        case FUNCTION_NULL:\r\n        case FUNCTION_LANG:\r\n        case FUNCTION_NUMBER:\r\n        case FUNCTION_SUM:\r\n        case FUNCTION_FLOOR:\r\n        case FUNCTION_CEILING:\r\n        case FUNCTION_ROUND:\r\n        case FUNCTION_FORMAT_NUMBER:\r\n        case NCName:\r\n        case 81:\r\n        case 83:\r\n        case 84:\r\n        case 87:\r\n        case 89:\r\n            arg \u003d Argument();\r\n            args \u003d new ArrayList();\r\n            args.add(arg);\r\n            label_4: while (true) {\r\n                switch(jj_nt.kind) {\r\n                    case 88:\r\n                        ;\r\n                        break;\r\n                    default:\r\n                        jj_la1[18] \u003d jj_gen;\r\n                        break label_4;\r\n                }\r\n                jj_consume_token(88);\r\n                arg \u003d Argument();\r\n                args.add(arg);\r\n            }\r\n            break;\r\n        default:\r\n            jj_la1[19] \u003d jj_gen;\r\n            ;\r\n    }\r\n    jj_consume_token(82);\r\n    {\r\n        if (true) {\r\n            return args;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "CoreFunctionName",
    "signature": "int CoreFunctionName()",
    "visibility": "public",
    "body": "{\r\n    int code;\r\n    switch(jj_nt.kind) {\r\n        case FUNCTION_LAST:\r\n            jj_consume_token(FUNCTION_LAST);\r\n            code \u003d Compiler.FUNCTION_LAST;\r\n            break;\r\n        case FUNCTION_POSITION:\r\n            jj_consume_token(FUNCTION_POSITION);\r\n            code \u003d Compiler.FUNCTION_POSITION;\r\n            break;\r\n        case FUNCTION_COUNT:\r\n            jj_consume_token(FUNCTION_COUNT);\r\n            code \u003d Compiler.FUNCTION_COUNT;\r\n            break;\r\n        case FUNCTION_ID:\r\n            jj_consume_token(FUNCTION_ID);\r\n            code \u003d Compiler.FUNCTION_ID;\r\n            break;\r\n        case FUNCTION_LOCAL_NAME:\r\n            jj_consume_token(FUNCTION_LOCAL_NAME);\r\n            code \u003d Compiler.FUNCTION_LOCAL_NAME;\r\n            break;\r\n        case FUNCTION_NAMESPACE_URI:\r\n            jj_consume_token(FUNCTION_NAMESPACE_URI);\r\n            code \u003d Compiler.FUNCTION_NAMESPACE_URI;\r\n            break;\r\n        case FUNCTION_NAME:\r\n            jj_consume_token(FUNCTION_NAME);\r\n            code \u003d Compiler.FUNCTION_NAME;\r\n            break;\r\n        case FUNCTION_STRING:\r\n            jj_consume_token(FUNCTION_STRING);\r\n            code \u003d Compiler.FUNCTION_STRING;\r\n            break;\r\n        case FUNCTION_CONCAT:\r\n            jj_consume_token(FUNCTION_CONCAT);\r\n            code \u003d Compiler.FUNCTION_CONCAT;\r\n            break;\r\n        case FUNCTION_STARTS_WITH:\r\n            jj_consume_token(FUNCTION_STARTS_WITH);\r\n            code \u003d Compiler.FUNCTION_STARTS_WITH;\r\n            break;\r\n        case FUNCTION_ENDS_WITH:\r\n            jj_consume_token(FUNCTION_ENDS_WITH);\r\n            code \u003d Compiler.FUNCTION_ENDS_WITH;\r\n            break;\r\n        case FUNCTION_CONTAINS:\r\n            jj_consume_token(FUNCTION_CONTAINS);\r\n            code \u003d Compiler.FUNCTION_CONTAINS;\r\n            break;\r\n        case FUNCTION_SUBSTRING_BEFORE:\r\n            jj_consume_token(FUNCTION_SUBSTRING_BEFORE);\r\n            code \u003d Compiler.FUNCTION_SUBSTRING_BEFORE;\r\n            break;\r\n        case FUNCTION_SUBSTRING_AFTER:\r\n            jj_consume_token(FUNCTION_SUBSTRING_AFTER);\r\n            code \u003d Compiler.FUNCTION_SUBSTRING_AFTER;\r\n            break;\r\n        case FUNCTION_SUBSTRING:\r\n            jj_consume_token(FUNCTION_SUBSTRING);\r\n            code \u003d Compiler.FUNCTION_SUBSTRING;\r\n            break;\r\n        case FUNCTION_STRING_LENGTH:\r\n            jj_consume_token(FUNCTION_STRING_LENGTH);\r\n            code \u003d Compiler.FUNCTION_STRING_LENGTH;\r\n            break;\r\n        case FUNCTION_NORMALIZE_SPACE:\r\n            jj_consume_token(FUNCTION_NORMALIZE_SPACE);\r\n            code \u003d Compiler.FUNCTION_NORMALIZE_SPACE;\r\n            break;\r\n        case FUNCTION_TRANSLATE:\r\n            jj_consume_token(FUNCTION_TRANSLATE);\r\n            code \u003d Compiler.FUNCTION_TRANSLATE;\r\n            break;\r\n        case FUNCTION_BOOLEAN:\r\n            jj_consume_token(FUNCTION_BOOLEAN);\r\n            code \u003d Compiler.FUNCTION_BOOLEAN;\r\n            break;\r\n        case FUNCTION_NOT:\r\n            jj_consume_token(FUNCTION_NOT);\r\n            code \u003d Compiler.FUNCTION_NOT;\r\n            break;\r\n        case FUNCTION_TRUE:\r\n            jj_consume_token(FUNCTION_TRUE);\r\n            code \u003d Compiler.FUNCTION_TRUE;\r\n            break;\r\n        case FUNCTION_FALSE:\r\n            jj_consume_token(FUNCTION_FALSE);\r\n            code \u003d Compiler.FUNCTION_FALSE;\r\n            break;\r\n        case FUNCTION_NULL:\r\n            jj_consume_token(FUNCTION_NULL);\r\n            code \u003d Compiler.FUNCTION_NULL;\r\n            break;\r\n        case FUNCTION_LANG:\r\n            jj_consume_token(FUNCTION_LANG);\r\n            code \u003d Compiler.FUNCTION_LANG;\r\n            break;\r\n        case FUNCTION_NUMBER:\r\n            jj_consume_token(FUNCTION_NUMBER);\r\n            code \u003d Compiler.FUNCTION_NUMBER;\r\n            break;\r\n        case FUNCTION_SUM:\r\n            jj_consume_token(FUNCTION_SUM);\r\n            code \u003d Compiler.FUNCTION_SUM;\r\n            break;\r\n        case FUNCTION_FLOOR:\r\n            jj_consume_token(FUNCTION_FLOOR);\r\n            code \u003d Compiler.FUNCTION_FLOOR;\r\n            break;\r\n        case FUNCTION_CEILING:\r\n            jj_consume_token(FUNCTION_CEILING);\r\n            code \u003d Compiler.FUNCTION_CEILING;\r\n            break;\r\n        case FUNCTION_ROUND:\r\n            jj_consume_token(FUNCTION_ROUND);\r\n            code \u003d Compiler.FUNCTION_ROUND;\r\n            break;\r\n        case FUNCTION_KEY:\r\n            jj_consume_token(FUNCTION_KEY);\r\n            code \u003d Compiler.FUNCTION_KEY;\r\n            break;\r\n        case FUNCTION_FORMAT_NUMBER:\r\n            jj_consume_token(FUNCTION_FORMAT_NUMBER);\r\n            code \u003d Compiler.FUNCTION_FORMAT_NUMBER;\r\n            break;\r\n        default:\r\n            jj_la1[2] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    {\r\n        if (true) {\r\n            return code;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 34,
    "edges": 63,
    "cc": 31,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  $r1 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B1 {\n  r0.jj_consume_token(48)\n  b2 \u003d 1\n  goto B33\n}",
      "B2 {\n  r0.jj_consume_token(49)\n  b2 \u003d 2\n  goto B33\n}",
      "B3 {\n  r0.jj_consume_token(50)\n  b2 \u003d 3\n  goto B33\n}",
      "B4 {\n  r0.jj_consume_token(51)\n  b2 \u003d 4\n  goto B33\n}",
      "B5 {\n  r0.jj_consume_token(53)\n  b2 \u003d 5\n  goto B33\n}",
      "B6 {\n  r0.jj_consume_token(54)\n  b2 \u003d 6\n  goto B33\n}",
      "B7 {\n  r0.jj_consume_token(55)\n  b2 \u003d 7\n  goto B33\n}",
      "B8 {\n  r0.jj_consume_token(56)\n  b2 \u003d 8\n  goto B33\n}",
      "B9 {\n  r0.jj_consume_token(57)\n  b2 \u003d 9\n  goto B33\n}",
      "B10 {\n  r0.jj_consume_token(58)\n  b2 \u003d 10\n  goto B33\n}",
      "B11 {\n  r0.jj_consume_token(59)\n  b2 \u003d 31\n  goto B33\n}",
      "B12 {\n  r0.jj_consume_token(60)\n  b2 \u003d 11\n  goto B33\n}",
      "B13 {\n  r0.jj_consume_token(61)\n  b2 \u003d 12\n  goto B33\n}",
      "B14 {\n  r0.jj_consume_token(62)\n  b2 \u003d 13\n  goto B33\n}",
      "B15 {\n  r0.jj_consume_token(63)\n  b2 \u003d 14\n  goto B33\n}",
      "B16 {\n  r0.jj_consume_token(64)\n  b2 \u003d 15\n  goto B33\n}",
      "B17 {\n  r0.jj_consume_token(65)\n  b2 \u003d 16\n  goto B33\n}",
      "B18 {\n  r0.jj_consume_token(66)\n  b2 \u003d 17\n  goto B33\n}",
      "B19 {\n  r0.jj_consume_token(67)\n  b2 \u003d 18\n  goto B33\n}",
      "B20 {\n  r0.jj_consume_token(68)\n  b2 \u003d 19\n  goto B33\n}",
      "B21 {\n  r0.jj_consume_token(69)\n  b2 \u003d 20\n  goto B33\n}",
      "B22 {\n  r0.jj_consume_token(70)\n  b2 \u003d 21\n  goto B33\n}",
      "B23 {\n  r0.jj_consume_token(71)\n  b2 \u003d 28\n  goto B33\n}",
      "B24 {\n  r0.jj_consume_token(72)\n  b2 \u003d 22\n  goto B33\n}",
      "B25 {\n  r0.jj_consume_token(73)\n  b2 \u003d 23\n  goto B33\n}",
      "B26 {\n  r0.jj_consume_token(74)\n  b2 \u003d 24\n  goto B33\n}",
      "B27 {\n  r0.jj_consume_token(75)\n  b2 \u003d 25\n  goto B33\n}",
      "B28 {\n  r0.jj_consume_token(76)\n  b2 \u003d 26\n  goto B33\n}",
      "B29 {\n  r0.jj_consume_token(77)\n  b2 \u003d 27\n  goto B33\n}",
      "B30 {\n  r0.jj_consume_token(52)\n  b2 \u003d 29\n  goto B33\n}",
      "B31 {\n  r0.jj_consume_token(78)\n  b2 \u003d 30\n  goto B33\n}",
      "B32 {\n  $r2 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r2[2] \u003d $i1\n  $i4 \u003d (int) -1\n  r0.jj_consume_token($i4)\n  $r4 \u003d ParseException\n  new ParseException()\n  throw $r4\n}",
      "B33 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B0 --\u003e B4",
      "B0 --\u003e B30",
      "B0 --\u003e B5",
      "B0 --\u003e B6",
      "B0 --\u003e B7",
      "B0 --\u003e B8",
      "B0 --\u003e B9",
      "B0 --\u003e B10",
      "B0 --\u003e B11",
      "B0 --\u003e B12",
      "B0 --\u003e B13",
      "B0 --\u003e B14",
      "B0 --\u003e B15",
      "B0 --\u003e B16",
      "B0 --\u003e B17",
      "B0 --\u003e B18",
      "B0 --\u003e B19",
      "B0 --\u003e B20",
      "B0 --\u003e B21",
      "B0 --\u003e B22",
      "B0 --\u003e B23",
      "B0 --\u003e B24",
      "B0 --\u003e B25",
      "B0 --\u003e B26",
      "B0 --\u003e B27",
      "B0 --\u003e B28",
      "B0 --\u003e B29",
      "B0 --\u003e B31",
      "B0 --\u003e B32",
      "B1 --\u003e B33",
      "B2 --\u003e B33",
      "B3 --\u003e B33",
      "B4 --\u003e B33",
      "B5 --\u003e B33",
      "B6 --\u003e B33",
      "B7 --\u003e B33",
      "B8 --\u003e B33",
      "B9 --\u003e B33",
      "B10 --\u003e B33",
      "B11 --\u003e B33",
      "B12 --\u003e B33",
      "B13 --\u003e B33",
      "B14 --\u003e B33",
      "B15 --\u003e B33",
      "B16 --\u003e B33",
      "B17 --\u003e B33",
      "B18 --\u003e B33",
      "B19 --\u003e B33",
      "B20 --\u003e B33",
      "B21 --\u003e B33",
      "B22 --\u003e B33",
      "B23 --\u003e B33",
      "B24 --\u003e B33",
      "B25 --\u003e B33",
      "B26 --\u003e B33",
      "B27 --\u003e B33",
      "B28 --\u003e B33",
      "B29 --\u003e B33",
      "B30 --\u003e B33",
      "B31 --\u003e B33",
      "B32 --\u003e [EXIT]",
      "B33 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "EqualityExpr",
    "signature": "java.lang.Object EqualityExpr()",
    "visibility": "public",
    "body": "{\r\n    Object ex, r;\r\n    ex \u003d RelationalExpr();\r\n    label_10: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case EQ:\r\n            case NEQ:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[26] \u003d jj_gen;\r\n                break label_10;\r\n        }\r\n        switch(jj_nt.kind) {\r\n            case EQ:\r\n                jj_consume_token(EQ);\r\n                r \u003d RelationalExpr();\r\n                ex \u003d compiler.equal(ex, r);\r\n                break;\r\n            case NEQ:\r\n                jj_consume_token(NEQ);\r\n                r \u003d RelationalExpr();\r\n                ex \u003d compiler.notEqual(ex, r);\r\n                break;\r\n            default:\r\n                jj_la1[27] \u003d jj_gen;\r\n                jj_consume_token(-1);\r\n                throw new ParseException();\r\n        }\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B1 : If(switch-on $i3) → B2 | else → B3",
      "B4 : If(switch-on $i0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  r7 \u003d r0.RelationalExpr()\n}",
      "B1 {\n  $r8 \u003d Token jj_nt\u003e\n  $i3 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B2 {\n  goto B4\n}",
      "B3 {\n  $r6 \u003d XPathParser: int[] jj_la1\u003e\n  $i2 \u003d XPathParser: int jj_gen\u003e\n  $r6[26] \u003d $i2\n  goto B8\n}",
      "B4 {\n  $r1 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B5 {\n  r0.jj_consume_token(11)\n  r9 \u003d r0.RelationalExpr()\n  $r3 \u003d Compiler compiler\u003e\n  r7 \u003d $r3.equal(r7, r9)\n  goto B1\n}",
      "B6 {\n  r0.jj_consume_token(12)\n  r10 \u003d r0.RelationalExpr()\n  $r2 \u003d Compiler compiler\u003e\n  r7 \u003d $r2.notEqual(r7, r10)\n  goto B1\n}",
      "B7 {\n  $r4 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r4[27] \u003d $i1\n  $i5 \u003d (int) -1\n  r0.jj_consume_token($i5)\n  $r11 \u003d ParseException\n  new ParseException()\n  throw $r11\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B4 --\u003e B7",
      "B5 --\u003e B1",
      "B6 --\u003e B1",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      },
      {
        "name": "XPathParser#RelationalExpr(...0)",
        "body": "{\r\n    Object ex, r;\r\n    ex \u003d AdditiveExpr();\r\n    label_11: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case LT:\r\n            case LTE:\r\n            case GT:\r\n            case GTE:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[28] \u003d jj_gen;\r\n                break label_11;\r\n        }\r\n        switch(jj_nt.kind) {\r\n            case LT:\r\n                jj_consume_token(LT);\r\n                r \u003d AdditiveExpr();\r\n                ex \u003d compiler.lessThan(ex, r);\r\n                break;\r\n            case GT:\r\n                jj_consume_token(GT);\r\n                r \u003d AdditiveExpr();\r\n                ex \u003d compiler.greaterThan(ex, r);\r\n                break;\r\n            case LTE:\r\n                jj_consume_token(LTE);\r\n                r \u003d AdditiveExpr();\r\n                ex \u003d compiler.lessThanOrEqual(ex, r);\r\n                break;\r\n            case GTE:\r\n                jj_consume_token(GTE);\r\n                r \u003d AdditiveExpr();\r\n                ex \u003d compiler.greaterThanOrEqual(ex, r);\r\n                break;\r\n            default:\r\n                jj_la1[29] \u003d jj_gen;\r\n                jj_consume_token(-1);\r\n                throw new ParseException();\r\n        }\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "FilterExpr",
    "signature": "java.lang.Object FilterExpr()",
    "visibility": "public",
    "body": "{\r\n    Object ex, p;\r\n    final ArrayList ps \u003d new ArrayList();\r\n    boolean path \u003d false;\r\n    final ArrayList steps \u003d new ArrayList();\r\n    ex \u003d PrimaryExpr();\r\n    label_6: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case 85:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[22] \u003d jj_gen;\r\n                break label_6;\r\n        }\r\n        p \u003d Predicate();\r\n        path \u003d true;\r\n        ps.add(p);\r\n    }\r\n    label_7: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case SLASH:\r\n            case SLASHSLASH:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[23] \u003d jj_gen;\r\n                break label_7;\r\n        }\r\n        LocationStep(steps);\r\n        path \u003d true;\r\n    }\r\n    if (path) {\r\n        {\r\n            if (true) {\r\n                return compiler.expressionPath(ex, ps.toArray(), steps.toArray());\r\n            }\r\n        }\r\n    } else {\r\n        {\r\n            if (true) {\r\n                return ex;\r\n            }\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 12,
    "edges": 13,
    "cc": 3,
    "flowSummary": [
      "B1 : If(switch-on $i0) → B2 | else → B3",
      "B5 : If(switch-on $i2) → B6 | else → B7",
      "B9 : If(z0 \u003d\u003d false) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  $r0 \u003d ArrayList\n  new ArrayList()\n  z0 \u003d 0\n  $r1 \u003d ArrayList\n  new ArrayList()\n  r3 \u003d r2.PrimaryExpr()\n}",
      "B1 {\n  $r4 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B2 {\n  goto B4\n}",
      "B3 {\n  $r6 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r6[22] \u003d $i1\n  goto B5\n}",
      "B4 {\n  r5 \u003d r2.Predicate()\n  z0 \u003d 1\n  $r0.add(r5)\n  goto B1\n}",
      "B5 {\n  $r7 \u003d Token jj_nt\u003e\n  $i2 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B6 {\n  goto B8\n}",
      "B7 {\n  $r8 \u003d XPathParser: int[] jj_la1\u003e\n  $i3 \u003d XPathParser: int jj_gen\u003e\n  $r8[23] \u003d $i3\n  goto B9\n}",
      "B8 {\n  r2.LocationStep($r1)\n  z0 \u003d 1\n  goto B5\n}",
      "B9 {\n  if (z0 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  $r9 \u003d Compiler compiler\u003e\n  $r11 \u003d $r0.toArray()\n  $r10 \u003d $r1.toArray()\n  $r12 \u003d $r9.expressionPath(r3, $r11, $r10)\n  return\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B1",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B5",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#Predicate(...0)",
        "body": "{\r\n    Object ex;\r\n    jj_consume_token(85);\r\n    ex \u003d Expression();\r\n    jj_consume_token(86);\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      },
      {
        "name": "XPathParser#LocationStep(...1)",
        "body": "{\r\n    Object t;\r\n    final Object s;\r\n    switch(jj_nt.kind) {\r\n        case SLASH:\r\n            jj_consume_token(SLASH);\r\n            break;\r\n        case SLASHSLASH:\r\n            jj_consume_token(SLASHSLASH);\r\n            // Abbreviated step: descendant-or-self::node()\r\n            t \u003d compiler.nodeTypeTest(Compiler.NODE_TYPE_NODE);\r\n            steps.add(compiler.step(Compiler.AXIS_DESCENDANT_OR_SELF, t, null));\r\n            break;\r\n        default:\r\n            jj_la1[9] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    NodeTest(steps);\r\n}"
      },
      {
        "name": "XPathParser#PrimaryExpr(...0)",
        "body": "{\r\n    Object ex \u003d null;\r\n    switch(jj_nt.kind) {\r\n        case VARIABLE:\r\n            ex \u003d VariableReference();\r\n            break;\r\n        case 81:\r\n            jj_consume_token(81);\r\n            ex \u003d Expression();\r\n            jj_consume_token(82);\r\n            break;\r\n        case Literal:\r\n            jj_consume_token(Literal);\r\n            ex \u003d compiler.literal(unescape(token.image.substring(1, token.image.length() - 1)));\r\n            break;\r\n        case Number:\r\n            jj_consume_token(Number);\r\n            ex \u003d compiler.number(token.image);\r\n            break;\r\n        default:\r\n            jj_la1[16] \u003d jj_gen;\r\n            if (jj_2_5(2147483647)) {\r\n                ex \u003d CoreFunctionCall();\r\n            } else {\r\n                switch(jj_nt.kind) {\r\n                    case OR:\r\n                    case AND:\r\n                    case MOD:\r\n                    case DIV:\r\n                    case NODE:\r\n                    case TEXT:\r\n                    case COMMENT:\r\n                    case PI:\r\n                    case FUNCTION_LAST:\r\n                    case FUNCTION_POSITION:\r\n                    case FUNCTION_COUNT:\r\n                    case FUNCTION_ID:\r\n                    case FUNCTION_KEY:\r\n                    case FUNCTION_LOCAL_NAME:\r\n                    case FUNCTION_NAMESPACE_URI:\r\n                    case FUNCTION_NAME:\r\n                    case FUNCTION_STRING:\r\n                    case FUNCTION_CONCAT:\r\n                    case FUNCTION_STARTS_WITH:\r\n                    case FUNCTION_ENDS_WITH:\r\n                    case FUNCTION_CONTAINS:\r\n                    case FUNCTION_SUBSTRING_BEFORE:\r\n                    case FUNCTION_SUBSTRING_AFTER:\r\n                    case FUNCTION_SUBSTRING:\r\n                    case FUNCTION_STRING_LENGTH:\r\n                    case FUNCTION_NORMALIZE_SPACE:\r\n                    case FUNCTION_TRANSLATE:\r\n                    case FUNCTION_BOOLEAN:\r\n                    case FUNCTION_NOT:\r\n                    case FUNCTION_TRUE:\r\n                    case FUNCTION_FALSE:\r\n                    case FUNCTION_NULL:\r\n                    case FUNCTION_LANG:\r\n                    case FUNCTION_NUMBER:\r\n                    case FUNCTION_SUM:\r\n                    case FUNCTION_FLOOR:\r\n                    case FUNCTION_CEILING:\r\n                    case FUNCTION_ROUND:\r\n                    case FUNCTION_FORMAT_NUMBER:\r\n                    case NCName:\r\n                        ex \u003d FunctionCall();\r\n                        break;\r\n                    default:\r\n                        jj_la1[17] \u003d jj_gen;\r\n                        jj_consume_token(-1);\r\n                        throw new ParseException();\r\n                }\r\n            }\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "FunctionCall",
    "signature": "java.lang.Object FunctionCall()",
    "visibility": "public",
    "body": "{\r\n    Object name;\r\n    ArrayList args;\r\n    name \u003d FunctionName();\r\n    args \u003d ArgumentList();\r\n    if (args \u003d\u003d null) {\r\n        {\r\n            if (true) {\r\n                return compiler.function(name, null);\r\n            }\r\n        }\r\n    } else {\r\n        {\r\n            if (true) {\r\n                return compiler.function(name, args.toArray());\r\n            }\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  r1 \u003d r0.FunctionName()\n  r2 \u003d r0.ArgumentList()\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d Compiler compiler\u003e\n  $r7 \u003d $r6.function(r1, null)\n  return\n}",
      "B2 {\n  $r3 \u003d Compiler compiler\u003e\n  $r4 \u003d r2.toArray()\n  $r5 \u003d $r3.function(r1, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#FunctionName(...0)",
        "body": "{\r\n    Object qname;\r\n    qname \u003d QName_Without_CoreFunctions();\r\n    {\r\n        if (true) {\r\n            return qname;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      },
      {
        "name": "XPathParser#ArgumentList(...0)",
        "body": "{\r\n    ArrayList args \u003d null;\r\n    Object arg;\r\n    jj_consume_token(81);\r\n    switch(jj_nt.kind) {\r\n        case SLASH:\r\n        case SLASHSLASH:\r\n        case MINUS:\r\n        case VARIABLE:\r\n        case Literal:\r\n        case Number:\r\n        case OR:\r\n        case AND:\r\n        case MOD:\r\n        case DIV:\r\n        case NODE:\r\n        case TEXT:\r\n        case COMMENT:\r\n        case PI:\r\n        case AXIS_SELF:\r\n        case AXIS_CHILD:\r\n        case AXIS_PARENT:\r\n        case AXIS_ANCESTOR:\r\n        case AXIS_ATTRIBUTE:\r\n        case AXIS_NAMESPACE:\r\n        case AXIS_PRECEDING:\r\n        case AXIS_FOLLOWING:\r\n        case AXIS_DESCENDANT:\r\n        case AXIS_ANCESTOR_OR_SELF:\r\n        case AXIS_FOLLOWING_SIBLING:\r\n        case AXIS_PRECEDING_SIBLING:\r\n        case AXIS_DESCENDANT_OR_SELF:\r\n        case FUNCTION_LAST:\r\n        case FUNCTION_POSITION:\r\n        case FUNCTION_COUNT:\r\n        case FUNCTION_ID:\r\n        case FUNCTION_KEY:\r\n        case FUNCTION_LOCAL_NAME:\r\n        case FUNCTION_NAMESPACE_URI:\r\n        case FUNCTION_NAME:\r\n        case FUNCTION_STRING:\r\n        case FUNCTION_CONCAT:\r\n        case FUNCTION_STARTS_WITH:\r\n        case FUNCTION_ENDS_WITH:\r\n        case FUNCTION_CONTAINS:\r\n        case FUNCTION_SUBSTRING_BEFORE:\r\n        case FUNCTION_SUBSTRING_AFTER:\r\n        case FUNCTION_SUBSTRING:\r\n        case FUNCTION_STRING_LENGTH:\r\n        case FUNCTION_NORMALIZE_SPACE:\r\n        case FUNCTION_TRANSLATE:\r\n        case FUNCTION_BOOLEAN:\r\n        case FUNCTION_NOT:\r\n        case FUNCTION_TRUE:\r\n        case FUNCTION_FALSE:\r\n        case FUNCTION_NULL:\r\n        case FUNCTION_LANG:\r\n        case FUNCTION_NUMBER:\r\n        case FUNCTION_SUM:\r\n        case FUNCTION_FLOOR:\r\n        case FUNCTION_CEILING:\r\n        case FUNCTION_ROUND:\r\n        case FUNCTION_FORMAT_NUMBER:\r\n        case NCName:\r\n        case 81:\r\n        case 83:\r\n        case 84:\r\n        case 87:\r\n        case 89:\r\n            arg \u003d Argument();\r\n            args \u003d new ArrayList();\r\n            args.add(arg);\r\n            label_4: while (true) {\r\n                switch(jj_nt.kind) {\r\n                    case 88:\r\n                        ;\r\n                        break;\r\n                    default:\r\n                        jj_la1[18] \u003d jj_gen;\r\n                        break label_4;\r\n                }\r\n                jj_consume_token(88);\r\n                arg \u003d Argument();\r\n                args.add(arg);\r\n            }\r\n            break;\r\n        default:\r\n            jj_la1[19] \u003d jj_gen;\r\n            ;\r\n    }\r\n    jj_consume_token(82);\r\n    {\r\n        if (true) {\r\n            return args;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "generateParseException",
    "signature": "org.apache.commons.jxpath.ri.parser.ParseException generateParseException()",
    "visibility": "public",
    "body": "{\r\n    jj_expentries.removeAllElements();\r\n    final boolean[] la1tokens \u003d new boolean[90];\r\n    for (int i \u003d 0; i \u003c 90; i++) {\r\n        la1tokens[i] \u003d false;\r\n    }\r\n    if (jj_kind \u003e\u003d 0) {\r\n        la1tokens[jj_kind] \u003d true;\r\n        jj_kind \u003d -1;\r\n    }\r\n    for (int i \u003d 0; i \u003c 39; i++) {\r\n        if (jj_la1[i] \u003d\u003d jj_gen) {\r\n            for (int j \u003d 0; j \u003c 32; j++) {\r\n                if ((jj_la1_0[i] \u0026 1 \u003c\u003c j) !\u003d 0) {\r\n                    la1tokens[j] \u003d true;\r\n                }\r\n                if ((jj_la1_1[i] \u0026 1 \u003c\u003c j) !\u003d 0) {\r\n                    la1tokens[32 + j] \u003d true;\r\n                }\r\n                if ((jj_la1_2[i] \u0026 1 \u003c\u003c j) !\u003d 0) {\r\n                    la1tokens[64 + j] \u003d true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    for (int i \u003d 0; i \u003c 90; i++) {\r\n        if (la1tokens[i]) {\r\n            jj_expentry \u003d new int[1];\r\n            jj_expentry[0] \u003d i;\r\n            jj_expentries.addElement(jj_expentry);\r\n        }\r\n    }\r\n    jj_endpos \u003d 0;\r\n    jj_rescan_token();\r\n    jj_add_error_token(0, 0);\r\n    final int[][] exptokseq \u003d new int[jj_expentries.size()][];\r\n    for (int i \u003d 0; i \u003c jj_expentries.size(); i++) {\r\n        exptokseq[i] \u003d (int[]) jj_expentries.elementAt(i);\r\n    }\r\n    return new ParseException(token, exptokseq, tokenImage);\r\n}",
    "nodes": 27,
    "edges": 37,
    "cc": 12,
    "flowSummary": [
      "B1 : If(i17 \u003e\u003d 90) → B2 | else → B3",
      "B3 : If($i0 \u003c 0) → B4 | else → B5",
      "B6 : If(i18 \u003e\u003d 39) → B7 | else → B18",
      "B7 : If($i4 !\u003d $i3) → B8 | else → B17",
      "B9 : If(i19 \u003e\u003d 32) → B10 | else → B17",
      "B10 : If($i7 \u003d\u003d false) → B11 | else → B12",
      "B12 : If($i10 \u003d\u003d false) → B13 | else → B14",
      "B14 : If($i13 \u003d\u003d false) → B15 | else → B16",
      "B19 : If(i20 \u003e\u003d 90) → B20 | else → B23",
      "B20 : If($z0 \u003d\u003d false) → B21 | else → B22",
      "B24 : If(i21 \u003e\u003d $i2) → B25 | else → B26"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  $r1 \u003d Vector jj_expentries\u003e\n  $r1.removeAllElements()\n  r2 \u003d newarray (boolean)[90]\n  i17 \u003d 0\n}",
      "B1 {\n  if (i17 \u003e\u003d 90) goto B2 else B3\n}",
      "B2 {\n  r2[i17] \u003d 0\n  i17 \u003d i17 + 1\n  goto B1\n}",
      "B3 {\n  $i0 \u003d XPathParser: int jj_kind\u003e\n  if ($i0 \u003c 0) goto B4 else B5\n}",
      "B4 {\n  $i16 \u003d XPathParser: int jj_kind\u003e\n  r2[$i16] \u003d 1\n  $i23 \u003d (int) -1\n  XPathParser: int jj_kind\u003e \u003d $i23\n}",
      "B5 {\n  i18 \u003d 0\n}",
      "B6 {\n  if (i18 \u003e\u003d 39) goto B7 else B18\n}",
      "B7 {\n  $r15 \u003d XPathParser: int[] jj_la1\u003e\n  $i4 \u003d $r15[i18]\n  $i3 \u003d XPathParser: int jj_gen\u003e\n  if ($i4 !\u003d $i3) goto B8 else B17\n}",
      "B8 {\n  i19 \u003d 0\n}",
      "B9 {\n  if (i19 \u003e\u003d 32) goto B10 else B17\n}",
      "B10 {\n  $r16 \u003d XPathParser: int[] jj_la1_0\u003e\n  $i6 \u003d $r16[i18]\n  $i5 \u003d 1 \u003c\u003c i19\n  $i7 \u003d $i6 \u0026 $i5\n  if ($i7 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  r2[i19] \u003d 1\n}",
      "B12 {\n  $r17 \u003d XPathParser: int[] jj_la1_1\u003e\n  $i9 \u003d $r17[i18]\n  $i8 \u003d 1 \u003c\u003c i19\n  $i10 \u003d $i9 \u0026 $i8\n  if ($i10 \u003d\u003d false) goto B13 else B14\n}",
      "B13 {\n  $i15 \u003d 32 + i19\n  r2[$i15] \u003d 1\n}",
      "B14 {\n  $r18 \u003d XPathParser: int[] jj_la1_2\u003e\n  $i12 \u003d $r18[i18]\n  $i11 \u003d 1 \u003c\u003c i19\n  $i13 \u003d $i12 \u0026 $i11\n  if ($i13 \u003d\u003d false) goto B15 else B16\n}",
      "B15 {\n  $i14 \u003d 64 + i19\n  r2[$i14] \u003d 1\n}",
      "B16 {\n  i19 \u003d i19 + 1\n  goto B9\n}",
      "B17 {\n  i18 \u003d i18 + 1\n  goto B6\n}",
      "B18 {\n  i20 \u003d 0\n}",
      "B19 {\n  if (i20 \u003e\u003d 90) goto B20 else B23\n}",
      "B20 {\n  $z0 \u003d r2[i20]\n  if ($z0 \u003d\u003d false) goto B21 else B22\n}",
      "B21 {\n  $r11 \u003d newarray (int)[1]\n  XPathParser: int[] jj_expentry\u003e \u003d $r11\n  $r12 \u003d XPathParser: int[] jj_expentry\u003e\n  $r12[0] \u003d i20\n  $r14 \u003d Vector jj_expentries\u003e\n  $r13 \u003d XPathParser: int[] jj_expentry\u003e\n  $r14.addElement($r13)\n}",
      "B22 {\n  i20 \u003d i20 + 1\n  goto B19\n}",
      "B23 {\n  XPathParser: int jj_endpos\u003e \u003d 0\n  r0.jj_rescan_token()\n  r0.jj_add_error_token(0, 0)\n  $r3 \u003d Vector jj_expentries\u003e\n  $i1 \u003d $r3.size()\n  r19 \u003d newarray (int[])[$i1]\n  i21 \u003d 0\n}",
      "B24 {\n  $r4 \u003d Vector jj_expentries\u003e\n  $i2 \u003d $r4.size()\n  if (i21 \u003e\u003d $i2) goto B25 else B26\n}",
      "B25 {\n  $r8 \u003d Vector jj_expentries\u003e\n  $r9 \u003d $r8.elementAt(i21)\n  $r10 \u003d (int[]) $r9\n  r19[i21] \u003d $r10\n  i21 \u003d i21 + 1\n  goto B24\n}",
      "B26 {\n  $r20 \u003d ParseException\n  $r7 \u003d Token token\u003e\n  $r6 \u003d String[] tokenImage\u003e\n  new ParseException($r7, r19, $r6)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B18",
      "B7 --\u003e B8",
      "B7 --\u003e B17",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B17",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B9",
      "B17 --\u003e B6",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B19 --\u003e B23",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B22 --\u003e B19",
      "B23 --\u003e B24",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B24",
      "B26 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#jj_add_error_token(...2)",
        "body": "{\r\n    if (pos \u003e\u003d 100) {\r\n        return;\r\n    }\r\n    if (pos \u003d\u003d jj_endpos + 1) {\r\n        jj_lasttokens[jj_endpos++] \u003d kind;\r\n    } else if (jj_endpos !\u003d 0) {\r\n        jj_expentry \u003d new int[jj_endpos];\r\n        for (int i \u003d 0; i \u003c jj_endpos; i++) {\r\n            jj_expentry[i] \u003d jj_lasttokens[i];\r\n        }\r\n        boolean exists \u003d false;\r\n        for (final java.util.Enumeration e \u003d jj_expentries.elements(); e.hasMoreElements(); ) {\r\n            final int[] oldentry \u003d (int[]) e.nextElement();\r\n            if (oldentry.length \u003d\u003d jj_expentry.length) {\r\n                exists \u003d true;\r\n                for (int i \u003d 0; i \u003c jj_expentry.length; i++) {\r\n                    if (oldentry[i] !\u003d jj_expentry[i]) {\r\n                        exists \u003d false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (exists) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (!exists) {\r\n            jj_expentries.addElement(jj_expentry);\r\n        }\r\n        if (pos !\u003d 0) {\r\n            jj_lasttokens[(jj_endpos \u003d pos) - 1] \u003d kind;\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "XPathParser#jj_rescan_token(...0)",
        "body": "{\r\n    jj_rescan \u003d true;\r\n    for (int i \u003d 0; i \u003c 6; i++) {\r\n        JJCalls p \u003d jj_2_rtns[i];\r\n        do {\r\n            if (p.gen \u003e jj_gen) {\r\n                jj_la \u003d p.arg;\r\n                jj_lastpos \u003d jj_scanpos \u003d p.first;\r\n                switch(i) {\r\n                    case 0:\r\n                        jj_3_1();\r\n                        break;\r\n                    case 1:\r\n                        jj_3_2();\r\n                        break;\r\n                    case 2:\r\n                        jj_3_3();\r\n                        break;\r\n                    case 3:\r\n                        jj_3_4();\r\n                        break;\r\n                    case 4:\r\n                        jj_3_5();\r\n                        break;\r\n                    case 5:\r\n                        jj_3_6();\r\n                        break;\r\n                }\r\n            }\r\n            p \u003d p.next;\r\n        } while (p !\u003d null);\r\n    }\r\n    jj_rescan \u003d false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "getNextToken",
    "signature": "org.apache.commons.jxpath.ri.parser.Token getNextToken()",
    "visibility": "public",
    "body": "{\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    jj_gen++;\r\n    return token;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  $r1 \u003d Token jj_nt\u003e\n  Token token\u003e \u003d $r1\n  $r2 \u003d Token next\u003e\n  if ($r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d Token jj_nt\u003e\n  $r8 \u003d Token next\u003e\n  Token jj_nt\u003e \u003d $r8\n  goto B3\n}",
      "B2 {\n  $r4 \u003d Token jj_nt\u003e\n  $r3 \u003d XPathParserTokenManager token_source\u003e\n  $r5 \u003d $r3.getNextToken()\n  Token next\u003e \u003d $r5\n  Token jj_nt\u003e \u003d $r5\n}",
      "B3 {\n  $i0 \u003d XPathParser: int jj_gen\u003e\n  $i1 \u003d $i0 + 1\n  XPathParser: int jj_gen\u003e \u003d $i1\n  $r6 \u003d Token token\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "getToken",
    "signature": "org.apache.commons.jxpath.ri.parser.Token getToken(int)",
    "visibility": "public",
    "body": "{\r\n    Token t \u003d lookingAhead ? jj_scanpos : token;\r\n    for (int i \u003d 0; i \u003c index; i++) {\r\n        if (t.next !\u003d null) {\r\n            t \u003d t.next;\r\n        } else {\r\n            t \u003d t.next \u003d token_source.getNextToken();\r\n        }\r\n    }\r\n    return t;\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B4 : If(i1 \u003e\u003d i0) → B5 | else → B9",
      "B5 : If($r1 \u003d\u003d null) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  i0 :\u003d @parameter0: int\n  $z0 \u003d XPathParser: boolean lookingAhead\u003e\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d Token jj_scanpos\u003e\n  goto B3\n}",
      "B2 {\n  $r4 \u003d Token token\u003e\n}",
      "B3 {\n  r5 \u003d $r4\n  i1 \u003d 0\n}",
      "B4 {\n  if (i1 \u003e\u003d i0) goto B5 else B9\n}",
      "B5 {\n  $r1 \u003d Token next\u003e\n  if ($r1 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  r5 \u003d Token next\u003e\n  goto B8\n}",
      "B7 {\n  $r2 \u003d XPathParserTokenManager token_source\u003e\n  $r3 \u003d $r2.getNextToken()\n  Token next\u003e \u003d $r3\n  r5 \u003d $r3\n}",
      "B8 {\n  i1 \u003d i1 + 1\n  goto B4\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B4",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "LocationPath",
    "signature": "java.lang.Object LocationPath()",
    "visibility": "public",
    "body": "{\r\n    Object ex \u003d null;\r\n    switch(jj_nt.kind) {\r\n        case OR:\r\n        case AND:\r\n        case MOD:\r\n        case DIV:\r\n        case NODE:\r\n        case TEXT:\r\n        case COMMENT:\r\n        case PI:\r\n        case AXIS_SELF:\r\n        case AXIS_CHILD:\r\n        case AXIS_PARENT:\r\n        case AXIS_ANCESTOR:\r\n        case AXIS_ATTRIBUTE:\r\n        case AXIS_NAMESPACE:\r\n        case AXIS_PRECEDING:\r\n        case AXIS_FOLLOWING:\r\n        case AXIS_DESCENDANT:\r\n        case AXIS_ANCESTOR_OR_SELF:\r\n        case AXIS_FOLLOWING_SIBLING:\r\n        case AXIS_PRECEDING_SIBLING:\r\n        case AXIS_DESCENDANT_OR_SELF:\r\n        case FUNCTION_LAST:\r\n        case FUNCTION_POSITION:\r\n        case FUNCTION_COUNT:\r\n        case FUNCTION_ID:\r\n        case FUNCTION_KEY:\r\n        case FUNCTION_LOCAL_NAME:\r\n        case FUNCTION_NAMESPACE_URI:\r\n        case FUNCTION_NAME:\r\n        case FUNCTION_STRING:\r\n        case FUNCTION_CONCAT:\r\n        case FUNCTION_STARTS_WITH:\r\n        case FUNCTION_ENDS_WITH:\r\n        case FUNCTION_CONTAINS:\r\n        case FUNCTION_SUBSTRING_BEFORE:\r\n        case FUNCTION_SUBSTRING_AFTER:\r\n        case FUNCTION_SUBSTRING:\r\n        case FUNCTION_STRING_LENGTH:\r\n        case FUNCTION_NORMALIZE_SPACE:\r\n        case FUNCTION_TRANSLATE:\r\n        case FUNCTION_BOOLEAN:\r\n        case FUNCTION_NOT:\r\n        case FUNCTION_TRUE:\r\n        case FUNCTION_FALSE:\r\n        case FUNCTION_NULL:\r\n        case FUNCTION_LANG:\r\n        case FUNCTION_NUMBER:\r\n        case FUNCTION_SUM:\r\n        case FUNCTION_FLOOR:\r\n        case FUNCTION_CEILING:\r\n        case FUNCTION_ROUND:\r\n        case FUNCTION_FORMAT_NUMBER:\r\n        case NCName:\r\n        case 83:\r\n        case 84:\r\n        case 87:\r\n        case 89:\r\n            ex \u003d RelativeLocationPath();\r\n            break;\r\n        case SLASH:\r\n        case SLASHSLASH:\r\n            ex \u003d AbsoluteLocationPath();\r\n            break;\r\n        default:\r\n            jj_la1[5] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  $r1 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B1 {\n  r4 \u003d r0.RelativeLocationPath()\n  goto B4\n}",
      "B2 {\n  r4 \u003d r0.AbsoluteLocationPath()\n  goto B4\n}",
      "B3 {\n  $r2 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r2[5] \u003d $i1\n  $i3 \u003d (int) -1\n  r0.jj_consume_token($i3)\n  $r5 \u003d ParseException\n  new ParseException()\n  throw $r5\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B0 --\u003e B1",
      "B1 --\u003e B4",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      },
      {
        "name": "XPathParser#AbsoluteLocationPath(...0)",
        "body": "{\r\n    final ArrayList steps \u003d new ArrayList();\r\n    if (jj_2_2(2147483647)) {\r\n        LocationStep(steps);\r\n        label_1: while (true) {\r\n            switch(jj_nt.kind) {\r\n                case SLASH:\r\n                case SLASHSLASH:\r\n                    ;\r\n                    break;\r\n                default:\r\n                    jj_la1[6] \u003d jj_gen;\r\n                    break label_1;\r\n            }\r\n            LocationStep(steps);\r\n        }\r\n    } else {\r\n        switch(jj_nt.kind) {\r\n            case SLASH:\r\n                jj_consume_token(SLASH);\r\n                break;\r\n            default:\r\n                jj_la1[7] \u003d jj_gen;\r\n                jj_consume_token(-1);\r\n                throw new ParseException();\r\n        }\r\n    }\r\n    {\r\n        if (true) {\r\n            return compiler.locationPath(true, steps.toArray());\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      },
      {
        "name": "XPathParser#RelativeLocationPath(...0)",
        "body": "{\r\n    final ArrayList steps \u003d new ArrayList();\r\n    NodeTest(steps);\r\n    label_2: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case SLASH:\r\n            case SLASHSLASH:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[8] \u003d jj_gen;\r\n                break label_2;\r\n        }\r\n        LocationStep(steps);\r\n    }\r\n    {\r\n        if (true) {\r\n            return compiler.locationPath(false, steps.toArray());\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "LocationStep",
    "signature": "void LocationStep(java.util.ArrayList)",
    "visibility": "public",
    "body": "{\r\n    Object t;\r\n    final Object s;\r\n    switch(jj_nt.kind) {\r\n        case SLASH:\r\n            jj_consume_token(SLASH);\r\n            break;\r\n        case SLASHSLASH:\r\n            jj_consume_token(SLASHSLASH);\r\n            // Abbreviated step: descendant-or-self::node()\r\n            t \u003d compiler.nodeTypeTest(Compiler.NODE_TYPE_NODE);\r\n            steps.add(compiler.step(Compiler.AXIS_DESCENDANT_OR_SELF, t, null));\r\n            break;\r\n        default:\r\n            jj_la1[9] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    NodeTest(steps);\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  ArrayList\n  $r1 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B1 {\n  r0.jj_consume_token(6)\n  goto B4\n}",
      "B2 {\n  r0.jj_consume_token(7)\n  $r2 \u003d Compiler compiler\u003e\n  r3 \u003d $r2.nodeTypeTest(1)\n  $r5 \u003d Compiler compiler\u003e\n  $r6 \u003d $r5.step(13, r3, null)\n  r4.add($r6)\n  goto B4\n}",
      "B3 {\n  $r7 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r7[9] \u003d $i1\n  $i3 \u003d (int) -1\n  r0.jj_consume_token($i3)\n  $r9 \u003d ParseException\n  new ParseException()\n  throw $r9\n}",
      "B4 {\n  r0.NodeTest(r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B1 --\u003e B4",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      },
      {
        "name": "XPathParser#NodeTest(...1)",
        "body": "{\r\n    int axis;\r\n    int type \u003d -1;\r\n    String instruction \u003d null;\r\n    Object name \u003d null;\r\n    Object s;\r\n    Object p;\r\n    final ArrayList ps \u003d new ArrayList();\r\n    switch(jj_nt.kind) {\r\n        case OR:\r\n        case AND:\r\n        case MOD:\r\n        case DIV:\r\n        case NODE:\r\n        case TEXT:\r\n        case COMMENT:\r\n        case PI:\r\n        case AXIS_SELF:\r\n        case AXIS_CHILD:\r\n        case AXIS_PARENT:\r\n        case AXIS_ANCESTOR:\r\n        case AXIS_ATTRIBUTE:\r\n        case AXIS_NAMESPACE:\r\n        case AXIS_PRECEDING:\r\n        case AXIS_FOLLOWING:\r\n        case AXIS_DESCENDANT:\r\n        case AXIS_ANCESTOR_OR_SELF:\r\n        case AXIS_FOLLOWING_SIBLING:\r\n        case AXIS_PRECEDING_SIBLING:\r\n        case AXIS_DESCENDANT_OR_SELF:\r\n        case FUNCTION_LAST:\r\n        case FUNCTION_POSITION:\r\n        case FUNCTION_COUNT:\r\n        case FUNCTION_ID:\r\n        case FUNCTION_KEY:\r\n        case FUNCTION_LOCAL_NAME:\r\n        case FUNCTION_NAMESPACE_URI:\r\n        case FUNCTION_NAME:\r\n        case FUNCTION_STRING:\r\n        case FUNCTION_CONCAT:\r\n        case FUNCTION_STARTS_WITH:\r\n        case FUNCTION_ENDS_WITH:\r\n        case FUNCTION_CONTAINS:\r\n        case FUNCTION_SUBSTRING_BEFORE:\r\n        case FUNCTION_SUBSTRING_AFTER:\r\n        case FUNCTION_SUBSTRING:\r\n        case FUNCTION_STRING_LENGTH:\r\n        case FUNCTION_NORMALIZE_SPACE:\r\n        case FUNCTION_TRANSLATE:\r\n        case FUNCTION_BOOLEAN:\r\n        case FUNCTION_NOT:\r\n        case FUNCTION_TRUE:\r\n        case FUNCTION_FALSE:\r\n        case FUNCTION_NULL:\r\n        case FUNCTION_LANG:\r\n        case FUNCTION_NUMBER:\r\n        case FUNCTION_SUM:\r\n        case FUNCTION_FLOOR:\r\n        case FUNCTION_CEILING:\r\n        case FUNCTION_ROUND:\r\n        case FUNCTION_FORMAT_NUMBER:\r\n        case NCName:\r\n        case 87:\r\n        case 89:\r\n            axis \u003d AxisSpecifier();\r\n            if (jj_2_3(2147483647)) {\r\n                type \u003d NodeType();\r\n                jj_consume_token(81);\r\n                jj_consume_token(82);\r\n            } else if (jj_2_4(2147483647)) {\r\n                jj_consume_token(PI);\r\n                jj_consume_token(81);\r\n                jj_consume_token(Literal);\r\n                instruction \u003d unescape(token.image.substring(1, token.image.length() - 1));\r\n                jj_consume_token(82);\r\n            } else {\r\n                switch(jj_nt.kind) {\r\n                    case OR:\r\n                    case AND:\r\n                    case MOD:\r\n                    case DIV:\r\n                    case NODE:\r\n                    case TEXT:\r\n                    case COMMENT:\r\n                    case PI:\r\n                    case FUNCTION_LAST:\r\n                    case FUNCTION_POSITION:\r\n                    case FUNCTION_COUNT:\r\n                    case FUNCTION_ID:\r\n                    case FUNCTION_KEY:\r\n                    case FUNCTION_LOCAL_NAME:\r\n                    case FUNCTION_NAMESPACE_URI:\r\n                    case FUNCTION_NAME:\r\n                    case FUNCTION_STRING:\r\n                    case FUNCTION_CONCAT:\r\n                    case FUNCTION_STARTS_WITH:\r\n                    case FUNCTION_ENDS_WITH:\r\n                    case FUNCTION_CONTAINS:\r\n                    case FUNCTION_SUBSTRING_BEFORE:\r\n                    case FUNCTION_SUBSTRING_AFTER:\r\n                    case FUNCTION_SUBSTRING:\r\n                    case FUNCTION_STRING_LENGTH:\r\n                    case FUNCTION_NORMALIZE_SPACE:\r\n                    case FUNCTION_TRANSLATE:\r\n                    case FUNCTION_BOOLEAN:\r\n                    case FUNCTION_NOT:\r\n                    case FUNCTION_TRUE:\r\n                    case FUNCTION_FALSE:\r\n                    case FUNCTION_NULL:\r\n                    case FUNCTION_LANG:\r\n                    case FUNCTION_NUMBER:\r\n                    case FUNCTION_SUM:\r\n                    case FUNCTION_FLOOR:\r\n                    case FUNCTION_CEILING:\r\n                    case FUNCTION_ROUND:\r\n                    case FUNCTION_FORMAT_NUMBER:\r\n                    case NCName:\r\n                    case 89:\r\n                        name \u003d WildcardName();\r\n                        break;\r\n                    default:\r\n                        jj_la1[10] \u003d jj_gen;\r\n                        jj_consume_token(-1);\r\n                        throw new ParseException();\r\n                }\r\n            }\r\n            break;\r\n        case 83:\r\n            jj_consume_token(83);\r\n            axis \u003d Compiler.AXIS_SELF;\r\n            type \u003d Compiler.NODE_TYPE_NODE;\r\n            break;\r\n        case 84:\r\n            jj_consume_token(84);\r\n            axis \u003d Compiler.AXIS_PARENT;\r\n            type \u003d Compiler.NODE_TYPE_NODE;\r\n            break;\r\n        default:\r\n            jj_la1[11] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    label_3: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case 85:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[12] \u003d jj_gen;\r\n                break label_3;\r\n        }\r\n        p \u003d Predicate();\r\n        ps.add(p);\r\n    }\r\n    if (name !\u003d null) {\r\n        s \u003d compiler.nodeNameTest(name);\r\n    } else if (instruction !\u003d null) {\r\n        s \u003d compiler.processingInstructionTest(instruction);\r\n    } else {\r\n        s \u003d compiler.nodeTypeTest(type);\r\n    }\r\n    steps.add(compiler.step(axis, s, ps.toArray()));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "MultiplicativeExpr",
    "signature": "java.lang.Object MultiplicativeExpr()",
    "visibility": "public",
    "body": "{\r\n    Object ex, r;\r\n    ex \u003d UnaryExpr();\r\n    label_14: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case MOD:\r\n            case DIV:\r\n            case 89:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[32] \u003d jj_gen;\r\n                break label_14;\r\n        }\r\n        switch(jj_nt.kind) {\r\n            case 89:\r\n                jj_consume_token(89);\r\n                r \u003d UnaryExpr();\r\n                ex \u003d compiler.multiply(ex, r);\r\n                break;\r\n            case DIV:\r\n                jj_consume_token(DIV);\r\n                r \u003d UnaryExpr();\r\n                ex \u003d compiler.divide(ex, r);\r\n                break;\r\n            case MOD:\r\n                jj_consume_token(MOD);\r\n                r \u003d UnaryExpr();\r\n                ex \u003d compiler.mod(ex, r);\r\n                break;\r\n            default:\r\n                jj_la1[33] \u003d jj_gen;\r\n                jj_consume_token(-1);\r\n                throw new ParseException();\r\n        }\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B1 : If(switch-on $i3) → B2 | else → B3",
      "B4 : If(switch-on $i0) → B7 | else → B6"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  r8 \u003d r0.UnaryExpr()\n}",
      "B1 {\n  $r9 \u003d Token jj_nt\u003e\n  $i3 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B2 {\n  goto B4\n}",
      "B3 {\n  $r7 \u003d XPathParser: int[] jj_la1\u003e\n  $i2 \u003d XPathParser: int jj_gen\u003e\n  $r7[32] \u003d $i2\n  goto B9\n}",
      "B4 {\n  $r1 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B5 {\n  r0.jj_consume_token(89)\n  r10 \u003d r0.UnaryExpr()\n  $r2 \u003d Compiler compiler\u003e\n  r8 \u003d $r2.multiply(r8, r10)\n  goto B1\n}",
      "B6 {\n  r0.jj_consume_token(30)\n  r11 \u003d r0.UnaryExpr()\n  $r3 \u003d Compiler compiler\u003e\n  r8 \u003d $r3.divide(r8, r11)\n  goto B1\n}",
      "B7 {\n  r0.jj_consume_token(29)\n  r12 \u003d r0.UnaryExpr()\n  $r4 \u003d Compiler compiler\u003e\n  r8 \u003d $r4.mod(r8, r12)\n  goto B1\n}",
      "B8 {\n  $r5 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r5[33] \u003d $i1\n  $i5 \u003d (int) -1\n  r0.jj_consume_token($i5)\n  $r13 \u003d ParseException\n  new ParseException()\n  throw $r13\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B7",
      "B4 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B1",
      "B6 --\u003e B1",
      "B7 --\u003e B1",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      },
      {
        "name": "XPathParser#UnaryExpr(...0)",
        "body": "{\r\n    Object ex;\r\n    switch(jj_nt.kind) {\r\n        case SLASH:\r\n        case SLASHSLASH:\r\n        case VARIABLE:\r\n        case Literal:\r\n        case Number:\r\n        case OR:\r\n        case AND:\r\n        case MOD:\r\n        case DIV:\r\n        case NODE:\r\n        case TEXT:\r\n        case COMMENT:\r\n        case PI:\r\n        case AXIS_SELF:\r\n        case AXIS_CHILD:\r\n        case AXIS_PARENT:\r\n        case AXIS_ANCESTOR:\r\n        case AXIS_ATTRIBUTE:\r\n        case AXIS_NAMESPACE:\r\n        case AXIS_PRECEDING:\r\n        case AXIS_FOLLOWING:\r\n        case AXIS_DESCENDANT:\r\n        case AXIS_ANCESTOR_OR_SELF:\r\n        case AXIS_FOLLOWING_SIBLING:\r\n        case AXIS_PRECEDING_SIBLING:\r\n        case AXIS_DESCENDANT_OR_SELF:\r\n        case FUNCTION_LAST:\r\n        case FUNCTION_POSITION:\r\n        case FUNCTION_COUNT:\r\n        case FUNCTION_ID:\r\n        case FUNCTION_KEY:\r\n        case FUNCTION_LOCAL_NAME:\r\n        case FUNCTION_NAMESPACE_URI:\r\n        case FUNCTION_NAME:\r\n        case FUNCTION_STRING:\r\n        case FUNCTION_CONCAT:\r\n        case FUNCTION_STARTS_WITH:\r\n        case FUNCTION_ENDS_WITH:\r\n        case FUNCTION_CONTAINS:\r\n        case FUNCTION_SUBSTRING_BEFORE:\r\n        case FUNCTION_SUBSTRING_AFTER:\r\n        case FUNCTION_SUBSTRING:\r\n        case FUNCTION_STRING_LENGTH:\r\n        case FUNCTION_NORMALIZE_SPACE:\r\n        case FUNCTION_TRANSLATE:\r\n        case FUNCTION_BOOLEAN:\r\n        case FUNCTION_NOT:\r\n        case FUNCTION_TRUE:\r\n        case FUNCTION_FALSE:\r\n        case FUNCTION_NULL:\r\n        case FUNCTION_LANG:\r\n        case FUNCTION_NUMBER:\r\n        case FUNCTION_SUM:\r\n        case FUNCTION_FLOOR:\r\n        case FUNCTION_CEILING:\r\n        case FUNCTION_ROUND:\r\n        case FUNCTION_FORMAT_NUMBER:\r\n        case NCName:\r\n        case 81:\r\n        case 83:\r\n        case 84:\r\n        case 87:\r\n        case 89:\r\n            ex \u003d UnionExpr();\r\n            break;\r\n        case MINUS:\r\n            jj_consume_token(MINUS);\r\n            ex \u003d UnaryExpr();\r\n            ex \u003d compiler.minus(ex);\r\n            break;\r\n        default:\r\n            jj_la1[34] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "NCName",
    "signature": "java.lang.String NCName()",
    "visibility": "public",
    "body": "{\r\n    switch(jj_nt.kind) {\r\n        case OR:\r\n        case AND:\r\n        case MOD:\r\n        case DIV:\r\n        case NCName:\r\n            NCName_Without_CoreFunctions();\r\n            break;\r\n        case NODE:\r\n            jj_consume_token(NODE);\r\n            break;\r\n        case TEXT:\r\n            jj_consume_token(TEXT);\r\n            break;\r\n        case COMMENT:\r\n            jj_consume_token(COMMENT);\r\n            break;\r\n        case PI:\r\n            jj_consume_token(PI);\r\n            break;\r\n        case FUNCTION_LAST:\r\n            jj_consume_token(FUNCTION_LAST);\r\n            break;\r\n        case FUNCTION_POSITION:\r\n            jj_consume_token(FUNCTION_POSITION);\r\n            break;\r\n        case FUNCTION_COUNT:\r\n            jj_consume_token(FUNCTION_COUNT);\r\n            break;\r\n        case FUNCTION_ID:\r\n            jj_consume_token(FUNCTION_ID);\r\n            break;\r\n        case FUNCTION_LOCAL_NAME:\r\n            jj_consume_token(FUNCTION_LOCAL_NAME);\r\n            break;\r\n        case FUNCTION_NAMESPACE_URI:\r\n            jj_consume_token(FUNCTION_NAMESPACE_URI);\r\n            break;\r\n        case FUNCTION_NAME:\r\n            jj_consume_token(FUNCTION_NAME);\r\n            break;\r\n        case FUNCTION_STRING:\r\n            jj_consume_token(FUNCTION_STRING);\r\n            break;\r\n        case FUNCTION_CONCAT:\r\n            jj_consume_token(FUNCTION_CONCAT);\r\n            break;\r\n        case FUNCTION_STARTS_WITH:\r\n            jj_consume_token(FUNCTION_STARTS_WITH);\r\n            break;\r\n        case FUNCTION_ENDS_WITH:\r\n            jj_consume_token(FUNCTION_ENDS_WITH);\r\n            break;\r\n        case FUNCTION_CONTAINS:\r\n            jj_consume_token(FUNCTION_CONTAINS);\r\n            break;\r\n        case FUNCTION_SUBSTRING_BEFORE:\r\n            jj_consume_token(FUNCTION_SUBSTRING_BEFORE);\r\n            break;\r\n        case FUNCTION_SUBSTRING_AFTER:\r\n            jj_consume_token(FUNCTION_SUBSTRING_AFTER);\r\n            break;\r\n        case FUNCTION_SUBSTRING:\r\n            jj_consume_token(FUNCTION_SUBSTRING);\r\n            break;\r\n        case FUNCTION_STRING_LENGTH:\r\n            jj_consume_token(FUNCTION_STRING_LENGTH);\r\n            break;\r\n        case FUNCTION_NORMALIZE_SPACE:\r\n            jj_consume_token(FUNCTION_NORMALIZE_SPACE);\r\n            break;\r\n        case FUNCTION_TRANSLATE:\r\n            jj_consume_token(FUNCTION_TRANSLATE);\r\n            break;\r\n        case FUNCTION_BOOLEAN:\r\n            jj_consume_token(FUNCTION_BOOLEAN);\r\n            break;\r\n        case FUNCTION_NOT:\r\n            jj_consume_token(FUNCTION_NOT);\r\n            break;\r\n        case FUNCTION_TRUE:\r\n            jj_consume_token(FUNCTION_TRUE);\r\n            break;\r\n        case FUNCTION_FALSE:\r\n            jj_consume_token(FUNCTION_FALSE);\r\n            break;\r\n        case FUNCTION_NULL:\r\n            jj_consume_token(FUNCTION_NULL);\r\n            break;\r\n        case FUNCTION_LANG:\r\n            jj_consume_token(FUNCTION_LANG);\r\n            break;\r\n        case FUNCTION_NUMBER:\r\n            jj_consume_token(FUNCTION_NUMBER);\r\n            break;\r\n        case FUNCTION_SUM:\r\n            jj_consume_token(FUNCTION_SUM);\r\n            break;\r\n        case FUNCTION_FLOOR:\r\n            jj_consume_token(FUNCTION_FLOOR);\r\n            break;\r\n        case FUNCTION_CEILING:\r\n            jj_consume_token(FUNCTION_CEILING);\r\n            break;\r\n        case FUNCTION_ROUND:\r\n            jj_consume_token(FUNCTION_ROUND);\r\n            break;\r\n        case FUNCTION_KEY:\r\n            jj_consume_token(FUNCTION_KEY);\r\n            break;\r\n        case FUNCTION_FORMAT_NUMBER:\r\n            jj_consume_token(FUNCTION_FORMAT_NUMBER);\r\n            break;\r\n        default:\r\n            jj_la1[0] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    {\r\n        if (true) {\r\n            return token.image;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 39,
    "edges": 73,
    "cc": 36,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  $r1 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B1 {\n  r0.NCName_Without_CoreFunctions()\n  goto B38\n}",
      "B2 {\n  r0.jj_consume_token(31)\n  goto B38\n}",
      "B3 {\n  r0.jj_consume_token(32)\n  goto B38\n}",
      "B4 {\n  r0.jj_consume_token(33)\n  goto B38\n}",
      "B5 {\n  r0.jj_consume_token(34)\n  goto B38\n}",
      "B6 {\n  r0.jj_consume_token(48)\n  goto B38\n}",
      "B7 {\n  r0.jj_consume_token(49)\n  goto B38\n}",
      "B8 {\n  r0.jj_consume_token(50)\n  goto B38\n}",
      "B9 {\n  r0.jj_consume_token(51)\n  goto B38\n}",
      "B10 {\n  r0.jj_consume_token(53)\n  goto B38\n}",
      "B11 {\n  r0.jj_consume_token(54)\n  goto B38\n}",
      "B12 {\n  r0.jj_consume_token(55)\n  goto B38\n}",
      "B13 {\n  r0.jj_consume_token(56)\n  goto B38\n}",
      "B14 {\n  r0.jj_consume_token(57)\n  goto B38\n}",
      "B15 {\n  r0.jj_consume_token(58)\n  goto B38\n}",
      "B16 {\n  r0.jj_consume_token(59)\n  goto B38\n}",
      "B17 {\n  r0.jj_consume_token(60)\n  goto B38\n}",
      "B18 {\n  r0.jj_consume_token(61)\n  goto B38\n}",
      "B19 {\n  r0.jj_consume_token(62)\n  goto B38\n}",
      "B20 {\n  r0.jj_consume_token(63)\n  goto B38\n}",
      "B21 {\n  r0.jj_consume_token(64)\n  goto B38\n}",
      "B22 {\n  r0.jj_consume_token(65)\n  goto B38\n}",
      "B23 {\n  r0.jj_consume_token(66)\n  goto B38\n}",
      "B24 {\n  r0.jj_consume_token(67)\n  goto B38\n}",
      "B25 {\n  r0.jj_consume_token(68)\n  goto B38\n}",
      "B26 {\n  r0.jj_consume_token(69)\n  goto B38\n}",
      "B27 {\n  r0.jj_consume_token(70)\n  goto B38\n}",
      "B28 {\n  r0.jj_consume_token(71)\n  goto B38\n}",
      "B29 {\n  r0.jj_consume_token(72)\n  goto B38\n}",
      "B30 {\n  r0.jj_consume_token(73)\n  goto B38\n}",
      "B31 {\n  r0.jj_consume_token(74)\n  goto B38\n}",
      "B32 {\n  r0.jj_consume_token(75)\n  goto B38\n}",
      "B33 {\n  r0.jj_consume_token(76)\n  goto B38\n}",
      "B34 {\n  r0.jj_consume_token(77)\n  goto B38\n}",
      "B35 {\n  r0.jj_consume_token(52)\n  goto B38\n}",
      "B36 {\n  r0.jj_consume_token(78)\n  goto B38\n}",
      "B37 {\n  $r2 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r2[0] \u003d $i1\n  $i3 \u003d (int) -1\n  r0.jj_consume_token($i3)\n  $r6 \u003d ParseException\n  new ParseException()\n  throw $r6\n}",
      "B38 {\n  $r4 \u003d Token token\u003e\n  $r5 \u003d String image\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B0 --\u003e B4",
      "B0 --\u003e B5",
      "B0 --\u003e B37",
      "B0 --\u003e B6",
      "B0 --\u003e B7",
      "B0 --\u003e B8",
      "B0 --\u003e B9",
      "B0 --\u003e B35",
      "B0 --\u003e B10",
      "B0 --\u003e B11",
      "B0 --\u003e B12",
      "B0 --\u003e B13",
      "B0 --\u003e B14",
      "B0 --\u003e B15",
      "B0 --\u003e B16",
      "B0 --\u003e B17",
      "B0 --\u003e B18",
      "B0 --\u003e B19",
      "B0 --\u003e B20",
      "B0 --\u003e B21",
      "B0 --\u003e B22",
      "B0 --\u003e B23",
      "B0 --\u003e B24",
      "B0 --\u003e B25",
      "B0 --\u003e B26",
      "B0 --\u003e B27",
      "B0 --\u003e B28",
      "B0 --\u003e B29",
      "B0 --\u003e B30",
      "B0 --\u003e B31",
      "B0 --\u003e B32",
      "B0 --\u003e B33",
      "B0 --\u003e B34",
      "B0 --\u003e B36",
      "B1 --\u003e B38",
      "B2 --\u003e B38",
      "B3 --\u003e B38",
      "B4 --\u003e B38",
      "B5 --\u003e B38",
      "B6 --\u003e B38",
      "B7 --\u003e B38",
      "B8 --\u003e B38",
      "B9 --\u003e B38",
      "B10 --\u003e B38",
      "B11 --\u003e B38",
      "B12 --\u003e B38",
      "B13 --\u003e B38",
      "B14 --\u003e B38",
      "B15 --\u003e B38",
      "B16 --\u003e B38",
      "B17 --\u003e B38",
      "B18 --\u003e B38",
      "B19 --\u003e B38",
      "B20 --\u003e B38",
      "B21 --\u003e B38",
      "B22 --\u003e B38",
      "B23 --\u003e B38",
      "B24 --\u003e B38",
      "B25 --\u003e B38",
      "B26 --\u003e B38",
      "B27 --\u003e B38",
      "B28 --\u003e B38",
      "B29 --\u003e B38",
      "B30 --\u003e B38",
      "B31 --\u003e B38",
      "B32 --\u003e B38",
      "B33 --\u003e B38",
      "B34 --\u003e B38",
      "B35 --\u003e B38",
      "B36 --\u003e B38",
      "B37 --\u003e [EXIT]",
      "B38 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      },
      {
        "name": "XPathParser#NCName_Without_CoreFunctions(...0)",
        "body": "{\r\n    switch(jj_nt.kind) {\r\n        case NCName:\r\n            jj_consume_token(NCName);\r\n            break;\r\n        case OR:\r\n            jj_consume_token(OR);\r\n            break;\r\n        case AND:\r\n            jj_consume_token(AND);\r\n            break;\r\n        case MOD:\r\n            jj_consume_token(MOD);\r\n            break;\r\n        case DIV:\r\n            jj_consume_token(DIV);\r\n            break;\r\n        default:\r\n            jj_la1[1] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    {\r\n        if (true) {\r\n            return token.image;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "NCName_Without_CoreFunctions",
    "signature": "java.lang.String NCName_Without_CoreFunctions()",
    "visibility": "public",
    "body": "{\r\n    switch(jj_nt.kind) {\r\n        case NCName:\r\n            jj_consume_token(NCName);\r\n            break;\r\n        case OR:\r\n            jj_consume_token(OR);\r\n            break;\r\n        case AND:\r\n            jj_consume_token(AND);\r\n            break;\r\n        case MOD:\r\n            jj_consume_token(MOD);\r\n            break;\r\n        case DIV:\r\n            jj_consume_token(DIV);\r\n            break;\r\n        default:\r\n            jj_la1[1] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    {\r\n        if (true) {\r\n            return token.image;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 8,
    "edges": 11,
    "cc": 5,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  $r1 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B1 {\n  r0.jj_consume_token(79)\n  goto B7\n}",
      "B2 {\n  r0.jj_consume_token(27)\n  goto B7\n}",
      "B3 {\n  r0.jj_consume_token(28)\n  goto B7\n}",
      "B4 {\n  r0.jj_consume_token(29)\n  goto B7\n}",
      "B5 {\n  r0.jj_consume_token(30)\n  goto B7\n}",
      "B6 {\n  $r2 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r2[1] \u003d $i1\n  $i3 \u003d (int) -1\n  r0.jj_consume_token($i3)\n  $r6 \u003d ParseException\n  new ParseException()\n  throw $r6\n}",
      "B7 {\n  $r4 \u003d Token token\u003e\n  $r5 \u003d String image\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B0 --\u003e B4",
      "B0 --\u003e B5",
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B7",
      "B2 --\u003e B7",
      "B3 --\u003e B7",
      "B4 --\u003e B7",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "NodeTest",
    "signature": "void NodeTest(java.util.ArrayList)",
    "visibility": "public",
    "body": "{\r\n    int axis;\r\n    int type \u003d -1;\r\n    String instruction \u003d null;\r\n    Object name \u003d null;\r\n    Object s;\r\n    Object p;\r\n    final ArrayList ps \u003d new ArrayList();\r\n    switch(jj_nt.kind) {\r\n        case OR:\r\n        case AND:\r\n        case MOD:\r\n        case DIV:\r\n        case NODE:\r\n        case TEXT:\r\n        case COMMENT:\r\n        case PI:\r\n        case AXIS_SELF:\r\n        case AXIS_CHILD:\r\n        case AXIS_PARENT:\r\n        case AXIS_ANCESTOR:\r\n        case AXIS_ATTRIBUTE:\r\n        case AXIS_NAMESPACE:\r\n        case AXIS_PRECEDING:\r\n        case AXIS_FOLLOWING:\r\n        case AXIS_DESCENDANT:\r\n        case AXIS_ANCESTOR_OR_SELF:\r\n        case AXIS_FOLLOWING_SIBLING:\r\n        case AXIS_PRECEDING_SIBLING:\r\n        case AXIS_DESCENDANT_OR_SELF:\r\n        case FUNCTION_LAST:\r\n        case FUNCTION_POSITION:\r\n        case FUNCTION_COUNT:\r\n        case FUNCTION_ID:\r\n        case FUNCTION_KEY:\r\n        case FUNCTION_LOCAL_NAME:\r\n        case FUNCTION_NAMESPACE_URI:\r\n        case FUNCTION_NAME:\r\n        case FUNCTION_STRING:\r\n        case FUNCTION_CONCAT:\r\n        case FUNCTION_STARTS_WITH:\r\n        case FUNCTION_ENDS_WITH:\r\n        case FUNCTION_CONTAINS:\r\n        case FUNCTION_SUBSTRING_BEFORE:\r\n        case FUNCTION_SUBSTRING_AFTER:\r\n        case FUNCTION_SUBSTRING:\r\n        case FUNCTION_STRING_LENGTH:\r\n        case FUNCTION_NORMALIZE_SPACE:\r\n        case FUNCTION_TRANSLATE:\r\n        case FUNCTION_BOOLEAN:\r\n        case FUNCTION_NOT:\r\n        case FUNCTION_TRUE:\r\n        case FUNCTION_FALSE:\r\n        case FUNCTION_NULL:\r\n        case FUNCTION_LANG:\r\n        case FUNCTION_NUMBER:\r\n        case FUNCTION_SUM:\r\n        case FUNCTION_FLOOR:\r\n        case FUNCTION_CEILING:\r\n        case FUNCTION_ROUND:\r\n        case FUNCTION_FORMAT_NUMBER:\r\n        case NCName:\r\n        case 87:\r\n        case 89:\r\n            axis \u003d AxisSpecifier();\r\n            if (jj_2_3(2147483647)) {\r\n                type \u003d NodeType();\r\n                jj_consume_token(81);\r\n                jj_consume_token(82);\r\n            } else if (jj_2_4(2147483647)) {\r\n                jj_consume_token(PI);\r\n                jj_consume_token(81);\r\n                jj_consume_token(Literal);\r\n                instruction \u003d unescape(token.image.substring(1, token.image.length() - 1));\r\n                jj_consume_token(82);\r\n            } else {\r\n                switch(jj_nt.kind) {\r\n                    case OR:\r\n                    case AND:\r\n                    case MOD:\r\n                    case DIV:\r\n                    case NODE:\r\n                    case TEXT:\r\n                    case COMMENT:\r\n                    case PI:\r\n                    case FUNCTION_LAST:\r\n                    case FUNCTION_POSITION:\r\n                    case FUNCTION_COUNT:\r\n                    case FUNCTION_ID:\r\n                    case FUNCTION_KEY:\r\n                    case FUNCTION_LOCAL_NAME:\r\n                    case FUNCTION_NAMESPACE_URI:\r\n                    case FUNCTION_NAME:\r\n                    case FUNCTION_STRING:\r\n                    case FUNCTION_CONCAT:\r\n                    case FUNCTION_STARTS_WITH:\r\n                    case FUNCTION_ENDS_WITH:\r\n                    case FUNCTION_CONTAINS:\r\n                    case FUNCTION_SUBSTRING_BEFORE:\r\n                    case FUNCTION_SUBSTRING_AFTER:\r\n                    case FUNCTION_SUBSTRING:\r\n                    case FUNCTION_STRING_LENGTH:\r\n                    case FUNCTION_NORMALIZE_SPACE:\r\n                    case FUNCTION_TRANSLATE:\r\n                    case FUNCTION_BOOLEAN:\r\n                    case FUNCTION_NOT:\r\n                    case FUNCTION_TRUE:\r\n                    case FUNCTION_FALSE:\r\n                    case FUNCTION_NULL:\r\n                    case FUNCTION_LANG:\r\n                    case FUNCTION_NUMBER:\r\n                    case FUNCTION_SUM:\r\n                    case FUNCTION_FLOOR:\r\n                    case FUNCTION_CEILING:\r\n                    case FUNCTION_ROUND:\r\n                    case FUNCTION_FORMAT_NUMBER:\r\n                    case NCName:\r\n                    case 89:\r\n                        name \u003d WildcardName();\r\n                        break;\r\n                    default:\r\n                        jj_la1[10] \u003d jj_gen;\r\n                        jj_consume_token(-1);\r\n                        throw new ParseException();\r\n                }\r\n            }\r\n            break;\r\n        case 83:\r\n            jj_consume_token(83);\r\n            axis \u003d Compiler.AXIS_SELF;\r\n            type \u003d Compiler.NODE_TYPE_NODE;\r\n            break;\r\n        case 84:\r\n            jj_consume_token(84);\r\n            axis \u003d Compiler.AXIS_PARENT;\r\n            type \u003d Compiler.NODE_TYPE_NODE;\r\n            break;\r\n        default:\r\n            jj_la1[11] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    label_3: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case 85:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[12] \u003d jj_gen;\r\n                break label_3;\r\n        }\r\n        p \u003d Predicate();\r\n        ps.add(p);\r\n    }\r\n    if (name !\u003d null) {\r\n        s \u003d compiler.nodeNameTest(name);\r\n    } else if (instruction !\u003d null) {\r\n        s \u003d compiler.processingInstructionTest(instruction);\r\n    } else {\r\n        s \u003d compiler.nodeTypeTest(type);\r\n    }\r\n    steps.add(compiler.step(axis, s, ps.toArray()));\r\n}",
    "nodes": 21,
    "edges": 27,
    "cc": 8,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B10",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B5",
      "B5 : If(switch-on $i2) → B6 | else → B7",
      "B11 : If(switch-on $i9) → B12 | else → B13",
      "B15 : If(r20 \u003d\u003d null) → B16 | else → B17",
      "B17 : If(r19 \u003d\u003d null) → B18 | else → B19"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  ArrayList\n  $i11 \u003d (int) -1\n  i7 \u003d $i11\n  r19 \u003d null\n  r20 \u003d null\n  $r26 \u003d ArrayList\n  new ArrayList()\n  $r2 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B1 {\n  i8 \u003d r1.AxisSpecifier()\n  $z0 \u003d r1.jj_2_3(2147483647)\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  i7 \u003d r1.NodeType()\n  r1.jj_consume_token(81)\n  r1.jj_consume_token(82)\n  goto B11\n}",
      "B3 {\n  $z1 \u003d r1.jj_2_4(2147483647)\n  if ($z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  r1.jj_consume_token(34)\n  r1.jj_consume_token(81)\n  r1.jj_consume_token(18)\n  $r12 \u003d Token token\u003e\n  $r15 \u003d String image\u003e\n  $r13 \u003d Token token\u003e\n  $r14 \u003d String image\u003e\n  $i4 \u003d $r14.length()\n  $i5 \u003d $i4 - 1\n  $r16 \u003d $r15.substring(1, $i5)\n  r19 \u003d r1.unescape($r16)\n  r1.jj_consume_token(82)\n  goto B11\n}",
      "B5 {\n  $r9 \u003d Token jj_nt\u003e\n  $i2 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B6 {\n  r20 \u003d r1.WildcardName()\n  goto B11\n}",
      "B7 {\n  $r10 \u003d XPathParser: int[] jj_la1\u003e\n  $i3 \u003d XPathParser: int jj_gen\u003e\n  $r10[10] \u003d $i3\n  $i13 \u003d (int) -1\n  r1.jj_consume_token($i13)\n  $r27 \u003d ParseException\n  new ParseException()\n  throw $r27\n}",
      "B8 {\n  r1.jj_consume_token(83)\n  i8 \u003d 1\n  i7 \u003d 1\n  goto B11\n}",
      "B9 {\n  r1.jj_consume_token(84)\n  i8 \u003d 3\n  i7 \u003d 1\n  goto B11\n}",
      "B10 {\n  $r17 \u003d XPathParser: int[] jj_la1\u003e\n  $i6 \u003d XPathParser: int jj_gen\u003e\n  $r17[11] \u003d $i6\n  $i15 \u003d (int) -1\n  r1.jj_consume_token($i15)\n  $r28 \u003d ParseException\n  new ParseException()\n  throw $r28\n}",
      "B11 {\n  $r21 \u003d Token jj_nt\u003e\n  $i9 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B12 {\n  goto B14\n}",
      "B13 {\n  $r4 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r4[12] \u003d $i1\n  goto B15\n}",
      "B14 {\n  r3 \u003d r1.Predicate()\n  $r26.add(r3)\n  goto B11\n}",
      "B15 {\n  if (r20 \u003d\u003d null) goto B16 else B17\n}",
      "B16 {\n  $r8 \u003d Compiler compiler\u003e\n  r22 \u003d $r8.nodeNameTest(r20)\n  goto B20\n}",
      "B17 {\n  if (r19 \u003d\u003d null) goto B18 else B19\n}",
      "B18 {\n  $r7 \u003d Compiler compiler\u003e\n  r22 \u003d $r7.processingInstructionTest(r19)\n  goto B20\n}",
      "B19 {\n  $r5 \u003d Compiler compiler\u003e\n  r22 \u003d $r5.nodeTypeTest(i7)\n}",
      "B20 {\n  $r23 \u003d Compiler compiler\u003e\n  $r24 \u003d $r26.toArray()\n  $r25 \u003d $r23.step(i8, r22, $r24)\n  r6.add($r25)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B10",
      "B0 --\u003e B8",
      "B0 --\u003e B9",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B11",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B11",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B11",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B11",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B11",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B20",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B20",
      "B20 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#WildcardName(...0)",
        "body": "{\r\n    Object qn;\r\n    String nc1, nc2 \u003d null;\r\n    switch(jj_nt.kind) {\r\n        case 89:\r\n            jj_consume_token(89);\r\n            break;\r\n        case OR:\r\n        case AND:\r\n        case MOD:\r\n        case DIV:\r\n        case NODE:\r\n        case TEXT:\r\n        case COMMENT:\r\n        case PI:\r\n        case FUNCTION_LAST:\r\n        case FUNCTION_POSITION:\r\n        case FUNCTION_COUNT:\r\n        case FUNCTION_ID:\r\n        case FUNCTION_KEY:\r\n        case FUNCTION_LOCAL_NAME:\r\n        case FUNCTION_NAMESPACE_URI:\r\n        case FUNCTION_NAME:\r\n        case FUNCTION_STRING:\r\n        case FUNCTION_CONCAT:\r\n        case FUNCTION_STARTS_WITH:\r\n        case FUNCTION_ENDS_WITH:\r\n        case FUNCTION_CONTAINS:\r\n        case FUNCTION_SUBSTRING_BEFORE:\r\n        case FUNCTION_SUBSTRING_AFTER:\r\n        case FUNCTION_SUBSTRING:\r\n        case FUNCTION_STRING_LENGTH:\r\n        case FUNCTION_NORMALIZE_SPACE:\r\n        case FUNCTION_TRANSLATE:\r\n        case FUNCTION_BOOLEAN:\r\n        case FUNCTION_NOT:\r\n        case FUNCTION_TRUE:\r\n        case FUNCTION_FALSE:\r\n        case FUNCTION_NULL:\r\n        case FUNCTION_LANG:\r\n        case FUNCTION_NUMBER:\r\n        case FUNCTION_SUM:\r\n        case FUNCTION_FLOOR:\r\n        case FUNCTION_CEILING:\r\n        case FUNCTION_ROUND:\r\n        case FUNCTION_FORMAT_NUMBER:\r\n        case NCName:\r\n            NCName();\r\n            break;\r\n        default:\r\n            jj_la1[35] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    nc1 \u003d token.image;\r\n    switch(jj_nt.kind) {\r\n        case 80:\r\n            jj_consume_token(80);\r\n            switch(jj_nt.kind) {\r\n                case 89:\r\n                    jj_consume_token(89);\r\n                    break;\r\n                case OR:\r\n                case AND:\r\n                case MOD:\r\n                case DIV:\r\n                case NODE:\r\n                case TEXT:\r\n                case COMMENT:\r\n                case PI:\r\n                case FUNCTION_LAST:\r\n                case FUNCTION_POSITION:\r\n                case FUNCTION_COUNT:\r\n                case FUNCTION_ID:\r\n                case FUNCTION_KEY:\r\n                case FUNCTION_LOCAL_NAME:\r\n                case FUNCTION_NAMESPACE_URI:\r\n                case FUNCTION_NAME:\r\n                case FUNCTION_STRING:\r\n                case FUNCTION_CONCAT:\r\n                case FUNCTION_STARTS_WITH:\r\n                case FUNCTION_ENDS_WITH:\r\n                case FUNCTION_CONTAINS:\r\n                case FUNCTION_SUBSTRING_BEFORE:\r\n                case FUNCTION_SUBSTRING_AFTER:\r\n                case FUNCTION_SUBSTRING:\r\n                case FUNCTION_STRING_LENGTH:\r\n                case FUNCTION_NORMALIZE_SPACE:\r\n                case FUNCTION_TRANSLATE:\r\n                case FUNCTION_BOOLEAN:\r\n                case FUNCTION_NOT:\r\n                case FUNCTION_TRUE:\r\n                case FUNCTION_FALSE:\r\n                case FUNCTION_NULL:\r\n                case FUNCTION_LANG:\r\n                case FUNCTION_NUMBER:\r\n                case FUNCTION_SUM:\r\n                case FUNCTION_FLOOR:\r\n                case FUNCTION_CEILING:\r\n                case FUNCTION_ROUND:\r\n                case FUNCTION_FORMAT_NUMBER:\r\n                case NCName:\r\n                    NCName();\r\n                    break;\r\n                default:\r\n                    jj_la1[36] \u003d jj_gen;\r\n                    jj_consume_token(-1);\r\n                    throw new ParseException();\r\n            }\r\n            nc2 \u003d token.image;\r\n            break;\r\n        default:\r\n            jj_la1[37] \u003d jj_gen;\r\n            ;\r\n    }\r\n    if (nc2 !\u003d null) {\r\n        qn \u003d compiler.qname(nc1, nc2);\r\n    } else {\r\n        qn \u003d compiler.qname(null, nc1);\r\n    }\r\n    {\r\n        if (true) {\r\n            return qn;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      },
      {
        "name": "XPathParser#jj_2_3(...1)",
        "body": "{\r\n    jj_la \u003d xla;\r\n    jj_lastpos \u003d jj_scanpos \u003d token;\r\n    try {\r\n        return !jj_3_3();\r\n    } catch (final LookaheadSuccess ls) {\r\n        return true;\r\n    } finally {\r\n        jj_save(2, xla);\r\n    }\r\n}"
      },
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      },
      {
        "name": "XPathParser#jj_2_4(...1)",
        "body": "{\r\n    jj_la \u003d xla;\r\n    jj_lastpos \u003d jj_scanpos \u003d token;\r\n    try {\r\n        return !jj_3_4();\r\n    } catch (final LookaheadSuccess ls) {\r\n        return true;\r\n    } finally {\r\n        jj_save(3, xla);\r\n    }\r\n}"
      },
      {
        "name": "XPathParser#unescape(...1)",
        "body": "{\r\n    int index \u003d string.indexOf(\"\u0026apos;\");\r\n    while (index !\u003d -1) {\r\n        string \u003d string.substring(0, index) + \"\\\u0027\" + string.substring(index + 6);\r\n        index \u003d string.indexOf(\"\u0026apos;\");\r\n    }\r\n    index \u003d string.indexOf(\"\u0026quot;\");\r\n    while (index !\u003d -1) {\r\n        string \u003d string.substring(0, index) + \"\\\"\" + string.substring(index + 6);\r\n        index \u003d string.indexOf(\"\u0026quot;\");\r\n    }\r\n    return string;\r\n}"
      },
      {
        "name": "XPathParser#NodeType(...0)",
        "body": "{\r\n    int type;\r\n    switch(jj_nt.kind) {\r\n        case TEXT:\r\n            jj_consume_token(TEXT);\r\n            type \u003d Compiler.NODE_TYPE_TEXT;\r\n            break;\r\n        case NODE:\r\n            jj_consume_token(NODE);\r\n            type \u003d Compiler.NODE_TYPE_NODE;\r\n            break;\r\n        case COMMENT:\r\n            jj_consume_token(COMMENT);\r\n            type \u003d Compiler.NODE_TYPE_COMMENT;\r\n            break;\r\n        case PI:\r\n            jj_consume_token(PI);\r\n            type \u003d Compiler.NODE_TYPE_PI;\r\n            break;\r\n        default:\r\n            jj_la1[38] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    {\r\n        if (true) {\r\n            return type;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      },
      {
        "name": "XPathParser#Predicate(...0)",
        "body": "{\r\n    Object ex;\r\n    jj_consume_token(85);\r\n    ex \u003d Expression();\r\n    jj_consume_token(86);\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      },
      {
        "name": "XPathParser#AxisSpecifier(...0)",
        "body": "{\r\n    int axis;\r\n    switch(jj_nt.kind) {\r\n        case AXIS_SELF:\r\n        case AXIS_CHILD:\r\n        case AXIS_PARENT:\r\n        case AXIS_ANCESTOR:\r\n        case AXIS_ATTRIBUTE:\r\n        case AXIS_NAMESPACE:\r\n        case AXIS_PRECEDING:\r\n        case AXIS_FOLLOWING:\r\n        case AXIS_DESCENDANT:\r\n        case AXIS_ANCESTOR_OR_SELF:\r\n        case AXIS_FOLLOWING_SIBLING:\r\n        case AXIS_PRECEDING_SIBLING:\r\n        case AXIS_DESCENDANT_OR_SELF:\r\n            axis \u003d AxisName();\r\n            break;\r\n        default:\r\n            jj_la1[13] \u003d jj_gen;\r\n            axis \u003d AbbreviatedAxisSpecifier();\r\n    }\r\n    {\r\n        if (true) {\r\n            return axis;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "NodeType",
    "signature": "int NodeType()",
    "visibility": "public",
    "body": "{\r\n    int type;\r\n    switch(jj_nt.kind) {\r\n        case TEXT:\r\n            jj_consume_token(TEXT);\r\n            type \u003d Compiler.NODE_TYPE_TEXT;\r\n            break;\r\n        case NODE:\r\n            jj_consume_token(NODE);\r\n            type \u003d Compiler.NODE_TYPE_NODE;\r\n            break;\r\n        case COMMENT:\r\n            jj_consume_token(COMMENT);\r\n            type \u003d Compiler.NODE_TYPE_COMMENT;\r\n            break;\r\n        case PI:\r\n            jj_consume_token(PI);\r\n            type \u003d Compiler.NODE_TYPE_PI;\r\n            break;\r\n        default:\r\n            jj_la1[38] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    {\r\n        if (true) {\r\n            return type;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B2 | else → B1"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  $r1 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B1 {\n  r0.jj_consume_token(32)\n  b2 \u003d 2\n  goto B6\n}",
      "B2 {\n  r0.jj_consume_token(31)\n  b2 \u003d 1\n  goto B6\n}",
      "B3 {\n  r0.jj_consume_token(33)\n  b2 \u003d 3\n  goto B6\n}",
      "B4 {\n  r0.jj_consume_token(34)\n  b2 \u003d 4\n  goto B6\n}",
      "B5 {\n  $r2 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r2[38] \u003d $i1\n  $i4 \u003d (int) -1\n  r0.jj_consume_token($i4)\n  $r4 \u003d ParseException\n  new ParseException()\n  throw $r4\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B2",
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B0 --\u003e B4",
      "B0 --\u003e B5",
      "B1 --\u003e B6",
      "B2 --\u003e B6",
      "B3 --\u003e B6",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "OrExpr",
    "signature": "java.lang.Object OrExpr()",
    "visibility": "public",
    "body": "{\r\n    Object ex, r;\r\n    ArrayList list \u003d null;\r\n    ex \u003d AndExpr();\r\n    label_8: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case OR:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[24] \u003d jj_gen;\r\n                break label_8;\r\n        }\r\n        jj_consume_token(OR);\r\n        r \u003d AndExpr();\r\n        if (list \u003d\u003d null) {\r\n            list \u003d new ArrayList();\r\n            list.add(ex);\r\n        }\r\n        list.add(r);\r\n    }\r\n    if (list !\u003d null) {\r\n        ex \u003d compiler.or(list.toArray());\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B1 : If(switch-on $i0) → B2 | else → B3",
      "B4 : If(r7 !\u003d null) → B5 | else → B6",
      "B7 : If(r7 \u003d\u003d null) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  r7 \u003d null\n  r8 \u003d r0.AndExpr()\n}",
      "B1 {\n  $r1 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B2 {\n  goto B4\n}",
      "B3 {\n  $r4 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r4[24] \u003d $i1\n  goto B7\n}",
      "B4 {\n  r0.jj_consume_token(27)\n  r2 \u003d r0.AndExpr()\n  if (r7 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r3 \u003d ArrayList\n  new ArrayList()\n  r7 \u003d $r3\n  $r3.add(r8)\n}",
      "B6 {\n  r7.add(r2)\n  goto B1\n}",
      "B7 {\n  if (r7 \u003d\u003d null) goto B8 else B9\n}",
      "B8 {\n  $r5 \u003d Compiler compiler\u003e\n  $r6 \u003d r7.toArray()\n  r8 \u003d $r5.or($r6)\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B1",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      },
      {
        "name": "XPathParser#AndExpr(...0)",
        "body": "{\r\n    Object ex, r;\r\n    ArrayList list \u003d null;\r\n    ex \u003d EqualityExpr();\r\n    label_9: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case AND:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[25] \u003d jj_gen;\r\n                break label_9;\r\n        }\r\n        jj_consume_token(AND);\r\n        r \u003d EqualityExpr();\r\n        if (list \u003d\u003d null) {\r\n            list \u003d new ArrayList();\r\n            list.add(ex);\r\n        }\r\n        list.add(r);\r\n    }\r\n    if (list !\u003d null) {\r\n        ex \u003d compiler.and(list.toArray());\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "PathExpr",
    "signature": "java.lang.Object PathExpr()",
    "visibility": "public",
    "body": "{\r\n    Object ex \u003d null;\r\n    final Object[] steps;\r\n    if (jj_2_6(2147483647)) {\r\n        ex \u003d FilterExpr();\r\n    } else {\r\n        switch(jj_nt.kind) {\r\n            case SLASH:\r\n            case SLASHSLASH:\r\n            case OR:\r\n            case AND:\r\n            case MOD:\r\n            case DIV:\r\n            case NODE:\r\n            case TEXT:\r\n            case COMMENT:\r\n            case PI:\r\n            case AXIS_SELF:\r\n            case AXIS_CHILD:\r\n            case AXIS_PARENT:\r\n            case AXIS_ANCESTOR:\r\n            case AXIS_ATTRIBUTE:\r\n            case AXIS_NAMESPACE:\r\n            case AXIS_PRECEDING:\r\n            case AXIS_FOLLOWING:\r\n            case AXIS_DESCENDANT:\r\n            case AXIS_ANCESTOR_OR_SELF:\r\n            case AXIS_FOLLOWING_SIBLING:\r\n            case AXIS_PRECEDING_SIBLING:\r\n            case AXIS_DESCENDANT_OR_SELF:\r\n            case FUNCTION_LAST:\r\n            case FUNCTION_POSITION:\r\n            case FUNCTION_COUNT:\r\n            case FUNCTION_ID:\r\n            case FUNCTION_KEY:\r\n            case FUNCTION_LOCAL_NAME:\r\n            case FUNCTION_NAMESPACE_URI:\r\n            case FUNCTION_NAME:\r\n            case FUNCTION_STRING:\r\n            case FUNCTION_CONCAT:\r\n            case FUNCTION_STARTS_WITH:\r\n            case FUNCTION_ENDS_WITH:\r\n            case FUNCTION_CONTAINS:\r\n            case FUNCTION_SUBSTRING_BEFORE:\r\n            case FUNCTION_SUBSTRING_AFTER:\r\n            case FUNCTION_SUBSTRING:\r\n            case FUNCTION_STRING_LENGTH:\r\n            case FUNCTION_NORMALIZE_SPACE:\r\n            case FUNCTION_TRANSLATE:\r\n            case FUNCTION_BOOLEAN:\r\n            case FUNCTION_NOT:\r\n            case FUNCTION_TRUE:\r\n            case FUNCTION_FALSE:\r\n            case FUNCTION_NULL:\r\n            case FUNCTION_LANG:\r\n            case FUNCTION_NUMBER:\r\n            case FUNCTION_SUM:\r\n            case FUNCTION_FLOOR:\r\n            case FUNCTION_CEILING:\r\n            case FUNCTION_ROUND:\r\n            case FUNCTION_FORMAT_NUMBER:\r\n            case NCName:\r\n            case 83:\r\n            case 84:\r\n            case 87:\r\n            case 89:\r\n                ex \u003d LocationPath();\r\n                break;\r\n            default:\r\n                jj_la1[21] \u003d jj_gen;\r\n                jj_consume_token(-1);\r\n                throw new ParseException();\r\n        }\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(switch-on $i0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  $z0 \u003d r0.jj_2_6(2147483647)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r4 \u003d r0.FilterExpr()\n  goto B5\n}",
      "B2 {\n  $r1 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B3 {\n  r4 \u003d r0.LocationPath()\n  goto B5\n}",
      "B4 {\n  $r2 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r2[21] \u003d $i1\n  $i3 \u003d (int) -1\n  r0.jj_consume_token($i3)\n  $r5 \u003d ParseException\n  new ParseException()\n  throw $r5\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#jj_2_6(...1)",
        "body": "{\r\n    jj_la \u003d xla;\r\n    jj_lastpos \u003d jj_scanpos \u003d token;\r\n    try {\r\n        return !jj_3_6();\r\n    } catch (final LookaheadSuccess ls) {\r\n        return true;\r\n    } finally {\r\n        jj_save(5, xla);\r\n    }\r\n}"
      },
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      },
      {
        "name": "XPathParser#FilterExpr(...0)",
        "body": "{\r\n    Object ex, p;\r\n    final ArrayList ps \u003d new ArrayList();\r\n    boolean path \u003d false;\r\n    final ArrayList steps \u003d new ArrayList();\r\n    ex \u003d PrimaryExpr();\r\n    label_6: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case 85:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[22] \u003d jj_gen;\r\n                break label_6;\r\n        }\r\n        p \u003d Predicate();\r\n        path \u003d true;\r\n        ps.add(p);\r\n    }\r\n    label_7: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case SLASH:\r\n            case SLASHSLASH:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[23] \u003d jj_gen;\r\n                break label_7;\r\n        }\r\n        LocationStep(steps);\r\n        path \u003d true;\r\n    }\r\n    if (path) {\r\n        {\r\n            if (true) {\r\n                return compiler.expressionPath(ex, ps.toArray(), steps.toArray());\r\n            }\r\n        }\r\n    } else {\r\n        {\r\n            if (true) {\r\n                return ex;\r\n            }\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      },
      {
        "name": "XPathParser#LocationPath(...0)",
        "body": "{\r\n    Object ex \u003d null;\r\n    switch(jj_nt.kind) {\r\n        case OR:\r\n        case AND:\r\n        case MOD:\r\n        case DIV:\r\n        case NODE:\r\n        case TEXT:\r\n        case COMMENT:\r\n        case PI:\r\n        case AXIS_SELF:\r\n        case AXIS_CHILD:\r\n        case AXIS_PARENT:\r\n        case AXIS_ANCESTOR:\r\n        case AXIS_ATTRIBUTE:\r\n        case AXIS_NAMESPACE:\r\n        case AXIS_PRECEDING:\r\n        case AXIS_FOLLOWING:\r\n        case AXIS_DESCENDANT:\r\n        case AXIS_ANCESTOR_OR_SELF:\r\n        case AXIS_FOLLOWING_SIBLING:\r\n        case AXIS_PRECEDING_SIBLING:\r\n        case AXIS_DESCENDANT_OR_SELF:\r\n        case FUNCTION_LAST:\r\n        case FUNCTION_POSITION:\r\n        case FUNCTION_COUNT:\r\n        case FUNCTION_ID:\r\n        case FUNCTION_KEY:\r\n        case FUNCTION_LOCAL_NAME:\r\n        case FUNCTION_NAMESPACE_URI:\r\n        case FUNCTION_NAME:\r\n        case FUNCTION_STRING:\r\n        case FUNCTION_CONCAT:\r\n        case FUNCTION_STARTS_WITH:\r\n        case FUNCTION_ENDS_WITH:\r\n        case FUNCTION_CONTAINS:\r\n        case FUNCTION_SUBSTRING_BEFORE:\r\n        case FUNCTION_SUBSTRING_AFTER:\r\n        case FUNCTION_SUBSTRING:\r\n        case FUNCTION_STRING_LENGTH:\r\n        case FUNCTION_NORMALIZE_SPACE:\r\n        case FUNCTION_TRANSLATE:\r\n        case FUNCTION_BOOLEAN:\r\n        case FUNCTION_NOT:\r\n        case FUNCTION_TRUE:\r\n        case FUNCTION_FALSE:\r\n        case FUNCTION_NULL:\r\n        case FUNCTION_LANG:\r\n        case FUNCTION_NUMBER:\r\n        case FUNCTION_SUM:\r\n        case FUNCTION_FLOOR:\r\n        case FUNCTION_CEILING:\r\n        case FUNCTION_ROUND:\r\n        case FUNCTION_FORMAT_NUMBER:\r\n        case NCName:\r\n        case 83:\r\n        case 84:\r\n        case 87:\r\n        case 89:\r\n            ex \u003d RelativeLocationPath();\r\n            break;\r\n        case SLASH:\r\n        case SLASHSLASH:\r\n            ex \u003d AbsoluteLocationPath();\r\n            break;\r\n        default:\r\n            jj_la1[5] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "PrimaryExpr",
    "signature": "java.lang.Object PrimaryExpr()",
    "visibility": "public",
    "body": "{\r\n    Object ex \u003d null;\r\n    switch(jj_nt.kind) {\r\n        case VARIABLE:\r\n            ex \u003d VariableReference();\r\n            break;\r\n        case 81:\r\n            jj_consume_token(81);\r\n            ex \u003d Expression();\r\n            jj_consume_token(82);\r\n            break;\r\n        case Literal:\r\n            jj_consume_token(Literal);\r\n            ex \u003d compiler.literal(unescape(token.image.substring(1, token.image.length() - 1)));\r\n            break;\r\n        case Number:\r\n            jj_consume_token(Number);\r\n            ex \u003d compiler.number(token.image);\r\n            break;\r\n        default:\r\n            jj_la1[16] \u003d jj_gen;\r\n            if (jj_2_5(2147483647)) {\r\n                ex \u003d CoreFunctionCall();\r\n            } else {\r\n                switch(jj_nt.kind) {\r\n                    case OR:\r\n                    case AND:\r\n                    case MOD:\r\n                    case DIV:\r\n                    case NODE:\r\n                    case TEXT:\r\n                    case COMMENT:\r\n                    case PI:\r\n                    case FUNCTION_LAST:\r\n                    case FUNCTION_POSITION:\r\n                    case FUNCTION_COUNT:\r\n                    case FUNCTION_ID:\r\n                    case FUNCTION_KEY:\r\n                    case FUNCTION_LOCAL_NAME:\r\n                    case FUNCTION_NAMESPACE_URI:\r\n                    case FUNCTION_NAME:\r\n                    case FUNCTION_STRING:\r\n                    case FUNCTION_CONCAT:\r\n                    case FUNCTION_STARTS_WITH:\r\n                    case FUNCTION_ENDS_WITH:\r\n                    case FUNCTION_CONTAINS:\r\n                    case FUNCTION_SUBSTRING_BEFORE:\r\n                    case FUNCTION_SUBSTRING_AFTER:\r\n                    case FUNCTION_SUBSTRING:\r\n                    case FUNCTION_STRING_LENGTH:\r\n                    case FUNCTION_NORMALIZE_SPACE:\r\n                    case FUNCTION_TRANSLATE:\r\n                    case FUNCTION_BOOLEAN:\r\n                    case FUNCTION_NOT:\r\n                    case FUNCTION_TRUE:\r\n                    case FUNCTION_FALSE:\r\n                    case FUNCTION_NULL:\r\n                    case FUNCTION_LANG:\r\n                    case FUNCTION_NUMBER:\r\n                    case FUNCTION_SUM:\r\n                    case FUNCTION_FLOOR:\r\n                    case FUNCTION_CEILING:\r\n                    case FUNCTION_ROUND:\r\n                    case FUNCTION_FORMAT_NUMBER:\r\n                    case NCName:\r\n                        ex \u003d FunctionCall();\r\n                        break;\r\n                    default:\r\n                        jj_la1[17] \u003d jj_gen;\r\n                        jj_consume_token(-1);\r\n                        throw new ParseException();\r\n                }\r\n            }\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 11,
    "edges": 15,
    "cc": 6,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B3",
      "B5 : If($z0 \u003d\u003d false) → B6 | else → B7",
      "B7 : If(switch-on $i4) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  $r1 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B1 {\n  r16 \u003d r0.VariableReference()\n  goto B10\n}",
      "B2 {\n  r0.jj_consume_token(81)\n  r16 \u003d r0.Expression()\n  r0.jj_consume_token(82)\n  goto B10\n}",
      "B3 {\n  r0.jj_consume_token(18)\n  $r8 \u003d Compiler compiler\u003e\n  $r5 \u003d Token token\u003e\n  $r9 \u003d String image\u003e\n  $r6 \u003d Token token\u003e\n  $r7 \u003d String image\u003e\n  $i1 \u003d $r7.length()\n  $i2 \u003d $i1 - 1\n  $r10 \u003d $r9.substring(1, $i2)\n  $r11 \u003d r0.unescape($r10)\n  r16 \u003d $r8.literal($r11)\n  goto B10\n}",
      "B4 {\n  r0.jj_consume_token(20)\n  $r4 \u003d Compiler compiler\u003e\n  $r2 \u003d Token token\u003e\n  $r3 \u003d String image\u003e\n  r16 \u003d $r4.number($r3)\n  goto B10\n}",
      "B5 {\n  $r12 \u003d XPathParser: int[] jj_la1\u003e\n  $i3 \u003d XPathParser: int jj_gen\u003e\n  $r12[16] \u003d $i3\n  $z0 \u003d r0.jj_2_5(2147483647)\n  if ($z0 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  r16 \u003d r0.CoreFunctionCall()\n  goto B10\n}",
      "B7 {\n  $r13 \u003d Token jj_nt\u003e\n  $i4 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B8 {\n  r16 \u003d r0.FunctionCall()\n  goto B10\n}",
      "B9 {\n  $r14 \u003d XPathParser: int[] jj_la1\u003e\n  $i5 \u003d XPathParser: int jj_gen\u003e\n  $r14[17] \u003d $i5\n  $i7 \u003d (int) -1\n  r0.jj_consume_token($i7)\n  $r17 \u003d ParseException\n  new ParseException()\n  throw $r17\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B0 --\u003e B4",
      "B0 --\u003e B2",
      "B0 --\u003e B5",
      "B1 --\u003e B10",
      "B2 --\u003e B10",
      "B3 --\u003e B10",
      "B4 --\u003e B10",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#jj_2_5(...1)",
        "body": "{\r\n    jj_la \u003d xla;\r\n    jj_lastpos \u003d jj_scanpos \u003d token;\r\n    try {\r\n        return !jj_3_5();\r\n    } catch (final LookaheadSuccess ls) {\r\n        return true;\r\n    } finally {\r\n        jj_save(4, xla);\r\n    }\r\n}"
      },
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      },
      {
        "name": "XPathParser#CoreFunctionCall(...0)",
        "body": "{\r\n    int code \u003d 0;\r\n    ArrayList args;\r\n    code \u003d CoreFunctionName();\r\n    args \u003d ArgumentList();\r\n    if (args \u003d\u003d null) {\r\n        {\r\n            if (true) {\r\n                return compiler.function(code, null);\r\n            }\r\n        }\r\n    } else {\r\n        {\r\n            if (true) {\r\n                return compiler.function(code, args.toArray());\r\n            }\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      },
      {
        "name": "XPathParser#unescape(...1)",
        "body": "{\r\n    int index \u003d string.indexOf(\"\u0026apos;\");\r\n    while (index !\u003d -1) {\r\n        string \u003d string.substring(0, index) + \"\\\u0027\" + string.substring(index + 6);\r\n        index \u003d string.indexOf(\"\u0026apos;\");\r\n    }\r\n    index \u003d string.indexOf(\"\u0026quot;\");\r\n    while (index !\u003d -1) {\r\n        string \u003d string.substring(0, index) + \"\\\"\" + string.substring(index + 6);\r\n        index \u003d string.indexOf(\"\u0026quot;\");\r\n    }\r\n    return string;\r\n}"
      },
      {
        "name": "XPathParser#Expression(...0)",
        "body": "{\r\n    Object ex;\r\n    ex \u003d OrExpr();\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      },
      {
        "name": "XPathParser#VariableReference(...0)",
        "body": "{\r\n    Object ex;\r\n    jj_consume_token(VARIABLE);\r\n    ex \u003d QName();\r\n    {\r\n        if (true) {\r\n            return compiler.variableReference(ex);\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      },
      {
        "name": "XPathParser#FunctionCall(...0)",
        "body": "{\r\n    Object name;\r\n    ArrayList args;\r\n    name \u003d FunctionName();\r\n    args \u003d ArgumentList();\r\n    if (args \u003d\u003d null) {\r\n        {\r\n            if (true) {\r\n                return compiler.function(name, null);\r\n            }\r\n        }\r\n    } else {\r\n        {\r\n            if (true) {\r\n                return compiler.function(name, args.toArray());\r\n            }\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "QName",
    "signature": "java.lang.Object QName()",
    "visibility": "public",
    "body": "{\r\n    String nc1, nc2 \u003d null;\r\n    nc1 \u003d NCName();\r\n    switch(jj_nt.kind) {\r\n        case 80:\r\n            jj_consume_token(80);\r\n            nc2 \u003d NCName();\r\n            break;\r\n        default:\r\n            jj_la1[3] \u003d jj_gen;\r\n            ;\r\n    }\r\n    if (nc2 \u003d\u003d null) {\r\n        {\r\n            if (true) {\r\n                return compiler.qname(null, nc1);\r\n            }\r\n        }\r\n    } else {\r\n        {\r\n            if (true) {\r\n                return compiler.qname(nc1, nc2);\r\n            }\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B2",
      "B3 : If(r8 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  r8 \u003d null\n  r1 \u003d r0.NCName()\n  $r2 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B1 {\n  r0.jj_consume_token(80)\n  r8 \u003d r0.NCName()\n  goto B3\n}",
      "B2 {\n  $r7 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r7[3] \u003d $i1\n}",
      "B3 {\n  if (r8 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r5 \u003d Compiler compiler\u003e\n  $r6 \u003d $r5.qname(null, r1)\n  return\n}",
      "B5 {\n  $r3 \u003d Compiler compiler\u003e\n  $r4 \u003d $r3.qname(r1, r8)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#NCName(...0)",
        "body": "{\r\n    switch(jj_nt.kind) {\r\n        case OR:\r\n        case AND:\r\n        case MOD:\r\n        case DIV:\r\n        case NCName:\r\n            NCName_Without_CoreFunctions();\r\n            break;\r\n        case NODE:\r\n            jj_consume_token(NODE);\r\n            break;\r\n        case TEXT:\r\n            jj_consume_token(TEXT);\r\n            break;\r\n        case COMMENT:\r\n            jj_consume_token(COMMENT);\r\n            break;\r\n        case PI:\r\n            jj_consume_token(PI);\r\n            break;\r\n        case FUNCTION_LAST:\r\n            jj_consume_token(FUNCTION_LAST);\r\n            break;\r\n        case FUNCTION_POSITION:\r\n            jj_consume_token(FUNCTION_POSITION);\r\n            break;\r\n        case FUNCTION_COUNT:\r\n            jj_consume_token(FUNCTION_COUNT);\r\n            break;\r\n        case FUNCTION_ID:\r\n            jj_consume_token(FUNCTION_ID);\r\n            break;\r\n        case FUNCTION_LOCAL_NAME:\r\n            jj_consume_token(FUNCTION_LOCAL_NAME);\r\n            break;\r\n        case FUNCTION_NAMESPACE_URI:\r\n            jj_consume_token(FUNCTION_NAMESPACE_URI);\r\n            break;\r\n        case FUNCTION_NAME:\r\n            jj_consume_token(FUNCTION_NAME);\r\n            break;\r\n        case FUNCTION_STRING:\r\n            jj_consume_token(FUNCTION_STRING);\r\n            break;\r\n        case FUNCTION_CONCAT:\r\n            jj_consume_token(FUNCTION_CONCAT);\r\n            break;\r\n        case FUNCTION_STARTS_WITH:\r\n            jj_consume_token(FUNCTION_STARTS_WITH);\r\n            break;\r\n        case FUNCTION_ENDS_WITH:\r\n            jj_consume_token(FUNCTION_ENDS_WITH);\r\n            break;\r\n        case FUNCTION_CONTAINS:\r\n            jj_consume_token(FUNCTION_CONTAINS);\r\n            break;\r\n        case FUNCTION_SUBSTRING_BEFORE:\r\n            jj_consume_token(FUNCTION_SUBSTRING_BEFORE);\r\n            break;\r\n        case FUNCTION_SUBSTRING_AFTER:\r\n            jj_consume_token(FUNCTION_SUBSTRING_AFTER);\r\n            break;\r\n        case FUNCTION_SUBSTRING:\r\n            jj_consume_token(FUNCTION_SUBSTRING);\r\n            break;\r\n        case FUNCTION_STRING_LENGTH:\r\n            jj_consume_token(FUNCTION_STRING_LENGTH);\r\n            break;\r\n        case FUNCTION_NORMALIZE_SPACE:\r\n            jj_consume_token(FUNCTION_NORMALIZE_SPACE);\r\n            break;\r\n        case FUNCTION_TRANSLATE:\r\n            jj_consume_token(FUNCTION_TRANSLATE);\r\n            break;\r\n        case FUNCTION_BOOLEAN:\r\n            jj_consume_token(FUNCTION_BOOLEAN);\r\n            break;\r\n        case FUNCTION_NOT:\r\n            jj_consume_token(FUNCTION_NOT);\r\n            break;\r\n        case FUNCTION_TRUE:\r\n            jj_consume_token(FUNCTION_TRUE);\r\n            break;\r\n        case FUNCTION_FALSE:\r\n            jj_consume_token(FUNCTION_FALSE);\r\n            break;\r\n        case FUNCTION_NULL:\r\n            jj_consume_token(FUNCTION_NULL);\r\n            break;\r\n        case FUNCTION_LANG:\r\n            jj_consume_token(FUNCTION_LANG);\r\n            break;\r\n        case FUNCTION_NUMBER:\r\n            jj_consume_token(FUNCTION_NUMBER);\r\n            break;\r\n        case FUNCTION_SUM:\r\n            jj_consume_token(FUNCTION_SUM);\r\n            break;\r\n        case FUNCTION_FLOOR:\r\n            jj_consume_token(FUNCTION_FLOOR);\r\n            break;\r\n        case FUNCTION_CEILING:\r\n            jj_consume_token(FUNCTION_CEILING);\r\n            break;\r\n        case FUNCTION_ROUND:\r\n            jj_consume_token(FUNCTION_ROUND);\r\n            break;\r\n        case FUNCTION_KEY:\r\n            jj_consume_token(FUNCTION_KEY);\r\n            break;\r\n        case FUNCTION_FORMAT_NUMBER:\r\n            jj_consume_token(FUNCTION_FORMAT_NUMBER);\r\n            break;\r\n        default:\r\n            jj_la1[0] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    {\r\n        if (true) {\r\n            return token.image;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      },
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "QName_Without_CoreFunctions",
    "signature": "java.lang.Object QName_Without_CoreFunctions()",
    "visibility": "public",
    "body": "{\r\n    String nc1, nc2 \u003d null;\r\n    if (jj_2_1(2147483647)) {\r\n        nc1 \u003d NCName();\r\n        jj_consume_token(80);\r\n        nc2 \u003d NCName();\r\n    } else {\r\n        switch(jj_nt.kind) {\r\n            case OR:\r\n            case AND:\r\n            case MOD:\r\n            case DIV:\r\n            case NCName:\r\n                nc1 \u003d NCName_Without_CoreFunctions();\r\n                break;\r\n            default:\r\n                jj_la1[4] \u003d jj_gen;\r\n                jj_consume_token(-1);\r\n                throw new ParseException();\r\n        }\r\n    }\r\n    if (nc2 \u003d\u003d null) {\r\n        {\r\n            if (true) {\r\n                return compiler.qname(null, nc1);\r\n            }\r\n        }\r\n    } else {\r\n        {\r\n            if (true) {\r\n                return compiler.qname(nc1, nc2);\r\n            }\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If(switch-on $i0) → B3 | else → B4",
      "B5 : If(r8 !\u003d null) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  r8 \u003d null\n  $z0 \u003d r0.jj_2_1(2147483647)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r9 \u003d r0.NCName()\n  r0.jj_consume_token(80)\n  r8 \u003d r0.NCName()\n  goto B5\n}",
      "B2 {\n  $r1 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B3 {\n  r9 \u003d r0.NCName_Without_CoreFunctions()\n  goto B5\n}",
      "B4 {\n  $r6 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r6[4] \u003d $i1\n  $i3 \u003d (int) -1\n  r0.jj_consume_token($i3)\n  $r10 \u003d ParseException\n  new ParseException()\n  throw $r10\n}",
      "B5 {\n  if (r8 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r4 \u003d Compiler compiler\u003e\n  $r5 \u003d $r4.qname(null, r9)\n  return\n}",
      "B7 {\n  $r2 \u003d Compiler compiler\u003e\n  $r3 \u003d $r2.qname(r9, r8)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#NCName(...0)",
        "body": "{\r\n    switch(jj_nt.kind) {\r\n        case OR:\r\n        case AND:\r\n        case MOD:\r\n        case DIV:\r\n        case NCName:\r\n            NCName_Without_CoreFunctions();\r\n            break;\r\n        case NODE:\r\n            jj_consume_token(NODE);\r\n            break;\r\n        case TEXT:\r\n            jj_consume_token(TEXT);\r\n            break;\r\n        case COMMENT:\r\n            jj_consume_token(COMMENT);\r\n            break;\r\n        case PI:\r\n            jj_consume_token(PI);\r\n            break;\r\n        case FUNCTION_LAST:\r\n            jj_consume_token(FUNCTION_LAST);\r\n            break;\r\n        case FUNCTION_POSITION:\r\n            jj_consume_token(FUNCTION_POSITION);\r\n            break;\r\n        case FUNCTION_COUNT:\r\n            jj_consume_token(FUNCTION_COUNT);\r\n            break;\r\n        case FUNCTION_ID:\r\n            jj_consume_token(FUNCTION_ID);\r\n            break;\r\n        case FUNCTION_LOCAL_NAME:\r\n            jj_consume_token(FUNCTION_LOCAL_NAME);\r\n            break;\r\n        case FUNCTION_NAMESPACE_URI:\r\n            jj_consume_token(FUNCTION_NAMESPACE_URI);\r\n            break;\r\n        case FUNCTION_NAME:\r\n            jj_consume_token(FUNCTION_NAME);\r\n            break;\r\n        case FUNCTION_STRING:\r\n            jj_consume_token(FUNCTION_STRING);\r\n            break;\r\n        case FUNCTION_CONCAT:\r\n            jj_consume_token(FUNCTION_CONCAT);\r\n            break;\r\n        case FUNCTION_STARTS_WITH:\r\n            jj_consume_token(FUNCTION_STARTS_WITH);\r\n            break;\r\n        case FUNCTION_ENDS_WITH:\r\n            jj_consume_token(FUNCTION_ENDS_WITH);\r\n            break;\r\n        case FUNCTION_CONTAINS:\r\n            jj_consume_token(FUNCTION_CONTAINS);\r\n            break;\r\n        case FUNCTION_SUBSTRING_BEFORE:\r\n            jj_consume_token(FUNCTION_SUBSTRING_BEFORE);\r\n            break;\r\n        case FUNCTION_SUBSTRING_AFTER:\r\n            jj_consume_token(FUNCTION_SUBSTRING_AFTER);\r\n            break;\r\n        case FUNCTION_SUBSTRING:\r\n            jj_consume_token(FUNCTION_SUBSTRING);\r\n            break;\r\n        case FUNCTION_STRING_LENGTH:\r\n            jj_consume_token(FUNCTION_STRING_LENGTH);\r\n            break;\r\n        case FUNCTION_NORMALIZE_SPACE:\r\n            jj_consume_token(FUNCTION_NORMALIZE_SPACE);\r\n            break;\r\n        case FUNCTION_TRANSLATE:\r\n            jj_consume_token(FUNCTION_TRANSLATE);\r\n            break;\r\n        case FUNCTION_BOOLEAN:\r\n            jj_consume_token(FUNCTION_BOOLEAN);\r\n            break;\r\n        case FUNCTION_NOT:\r\n            jj_consume_token(FUNCTION_NOT);\r\n            break;\r\n        case FUNCTION_TRUE:\r\n            jj_consume_token(FUNCTION_TRUE);\r\n            break;\r\n        case FUNCTION_FALSE:\r\n            jj_consume_token(FUNCTION_FALSE);\r\n            break;\r\n        case FUNCTION_NULL:\r\n            jj_consume_token(FUNCTION_NULL);\r\n            break;\r\n        case FUNCTION_LANG:\r\n            jj_consume_token(FUNCTION_LANG);\r\n            break;\r\n        case FUNCTION_NUMBER:\r\n            jj_consume_token(FUNCTION_NUMBER);\r\n            break;\r\n        case FUNCTION_SUM:\r\n            jj_consume_token(FUNCTION_SUM);\r\n            break;\r\n        case FUNCTION_FLOOR:\r\n            jj_consume_token(FUNCTION_FLOOR);\r\n            break;\r\n        case FUNCTION_CEILING:\r\n            jj_consume_token(FUNCTION_CEILING);\r\n            break;\r\n        case FUNCTION_ROUND:\r\n            jj_consume_token(FUNCTION_ROUND);\r\n            break;\r\n        case FUNCTION_KEY:\r\n            jj_consume_token(FUNCTION_KEY);\r\n            break;\r\n        case FUNCTION_FORMAT_NUMBER:\r\n            jj_consume_token(FUNCTION_FORMAT_NUMBER);\r\n            break;\r\n        default:\r\n            jj_la1[0] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    {\r\n        if (true) {\r\n            return token.image;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      },
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      },
      {
        "name": "XPathParser#NCName_Without_CoreFunctions(...0)",
        "body": "{\r\n    switch(jj_nt.kind) {\r\n        case NCName:\r\n            jj_consume_token(NCName);\r\n            break;\r\n        case OR:\r\n            jj_consume_token(OR);\r\n            break;\r\n        case AND:\r\n            jj_consume_token(AND);\r\n            break;\r\n        case MOD:\r\n            jj_consume_token(MOD);\r\n            break;\r\n        case DIV:\r\n            jj_consume_token(DIV);\r\n            break;\r\n        default:\r\n            jj_la1[1] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    {\r\n        if (true) {\r\n            return token.image;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      },
      {
        "name": "XPathParser#jj_2_1(...1)",
        "body": "{\r\n    jj_la \u003d xla;\r\n    jj_lastpos \u003d jj_scanpos \u003d token;\r\n    try {\r\n        return !jj_3_1();\r\n    } catch (final LookaheadSuccess ls) {\r\n        return true;\r\n    } finally {\r\n        jj_save(0, xla);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "ReInit",
    "signature": "void ReInit(java.io.InputStream)",
    "visibility": "public",
    "body": "{\r\n    jj_input_stream.ReInit(stream, 1, 1);\r\n    token_source.ReInit(jj_input_stream);\r\n    token \u003d new Token();\r\n    token.next \u003d jj_nt \u003d token_source.getNextToken();\r\n    jj_gen \u003d 0;\r\n    for (int i \u003d 0; i \u003c 39; i++) {\r\n        jj_la1[i] \u003d -1;\r\n    }\r\n    for (int i \u003d 0; i \u003c jj_2_rtns.length; i++) {\r\n        jj_2_rtns[i] \u003d new JJCalls();\r\n    }\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d 39) → B2 | else → B3",
      "B4 : If(i2 \u003e\u003d $i0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  InputStream\n  $r2 \u003d SimpleCharStream jj_input_stream\u003e\n  $r2.ReInit(r1, 1, 1)\n  $r4 \u003d XPathParserTokenManager token_source\u003e\n  $r3 \u003d SimpleCharStream jj_input_stream\u003e\n  $r4.ReInit($r3)\n  $r13 \u003d Token\n  new Token()\n  Token token\u003e \u003d $r13\n  $r7 \u003d Token token\u003e\n  $r6 \u003d XPathParserTokenManager token_source\u003e\n  $r8 \u003d $r6.getNextToken()\n  Token jj_nt\u003e \u003d $r8\n  Token next\u003e \u003d $r8\n  XPathParser: int jj_gen\u003e \u003d 0\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d 39) goto B2 else B3\n}",
      "B2 {\n  $r12 \u003d XPathParser: int[] jj_la1\u003e\n  $i4 \u003d (int) -1\n  $r12[i1] \u003d $i4\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  i2 \u003d 0\n}",
      "B4 {\n  $r9 \u003d XPathParser$JJCalls[] jj_2_rtns\u003e\n  $i0 \u003d lengthof $r9\n  if (i2 \u003e\u003d $i0) goto B5 else B6\n}",
      "B5 {\n  $r11 \u003d XPathParser$JJCalls[] jj_2_rtns\u003e\n  $r14 \u003d XPathParser$JJCalls\n  new XPathParser$JJCalls()\n  $r11[i2] \u003d $r14\n  i2 \u003d i2 + 1\n  goto B4\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "ReInit",
    "signature": "void ReInit(java.io.Reader)",
    "visibility": "public",
    "body": "{\r\n    jj_input_stream.ReInit(stream, 1, 1);\r\n    token_source.ReInit(jj_input_stream);\r\n    token \u003d new Token();\r\n    token.next \u003d jj_nt \u003d token_source.getNextToken();\r\n    jj_gen \u003d 0;\r\n    for (int i \u003d 0; i \u003c 39; i++) {\r\n        jj_la1[i] \u003d -1;\r\n    }\r\n    for (int i \u003d 0; i \u003c jj_2_rtns.length; i++) {\r\n        jj_2_rtns[i] \u003d new JJCalls();\r\n    }\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d 39) → B2 | else → B3",
      "B4 : If(i2 \u003e\u003d $i0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  Reader\n  $r2 \u003d SimpleCharStream jj_input_stream\u003e\n  $r2.ReInit(r1, 1, 1)\n  $r4 \u003d XPathParserTokenManager token_source\u003e\n  $r3 \u003d SimpleCharStream jj_input_stream\u003e\n  $r4.ReInit($r3)\n  $r13 \u003d Token\n  new Token()\n  Token token\u003e \u003d $r13\n  $r7 \u003d Token token\u003e\n  $r6 \u003d XPathParserTokenManager token_source\u003e\n  $r8 \u003d $r6.getNextToken()\n  Token jj_nt\u003e \u003d $r8\n  Token next\u003e \u003d $r8\n  XPathParser: int jj_gen\u003e \u003d 0\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d 39) goto B2 else B3\n}",
      "B2 {\n  $r12 \u003d XPathParser: int[] jj_la1\u003e\n  $i4 \u003d (int) -1\n  $r12[i1] \u003d $i4\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  i2 \u003d 0\n}",
      "B4 {\n  $r9 \u003d XPathParser$JJCalls[] jj_2_rtns\u003e\n  $i0 \u003d lengthof $r9\n  if (i2 \u003e\u003d $i0) goto B5 else B6\n}",
      "B5 {\n  $r11 \u003d XPathParser$JJCalls[] jj_2_rtns\u003e\n  $r14 \u003d XPathParser$JJCalls\n  new XPathParser$JJCalls()\n  $r11[i2] \u003d $r14\n  i2 \u003d i2 + 1\n  goto B4\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "ReInit",
    "signature": "void ReInit(org.apache.commons.jxpath.ri.parser.XPathParserTokenManager)",
    "visibility": "public",
    "body": "{\r\n    token_source \u003d tm;\r\n    token \u003d new Token();\r\n    token.next \u003d jj_nt \u003d token_source.getNextToken();\r\n    jj_gen \u003d 0;\r\n    for (int i \u003d 0; i \u003c 39; i++) {\r\n        jj_la1[i] \u003d -1;\r\n    }\r\n    for (int i \u003d 0; i \u003c jj_2_rtns.length; i++) {\r\n        jj_2_rtns[i] \u003d new JJCalls();\r\n    }\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d 39) → B2 | else → B3",
      "B4 : If(i2 \u003e\u003d $i0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  XPathParserTokenManager\n  XPathParserTokenManager token_source\u003e \u003d r1\n  $r10 \u003d Token\n  new Token()\n  Token token\u003e \u003d $r10\n  $r4 \u003d Token token\u003e\n  $r3 \u003d XPathParserTokenManager token_source\u003e\n  $r5 \u003d $r3.getNextToken()\n  Token jj_nt\u003e \u003d $r5\n  Token next\u003e \u003d $r5\n  XPathParser: int jj_gen\u003e \u003d 0\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d 39) goto B2 else B3\n}",
      "B2 {\n  $r9 \u003d XPathParser: int[] jj_la1\u003e\n  $i4 \u003d (int) -1\n  $r9[i1] \u003d $i4\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  i2 \u003d 0\n}",
      "B4 {\n  $r6 \u003d XPathParser$JJCalls[] jj_2_rtns\u003e\n  $i0 \u003d lengthof $r6\n  if (i2 \u003e\u003d $i0) goto B5 else B6\n}",
      "B5 {\n  $r8 \u003d XPathParser$JJCalls[] jj_2_rtns\u003e\n  $r11 \u003d XPathParser$JJCalls\n  new XPathParser$JJCalls()\n  $r8[i2] \u003d $r11\n  i2 \u003d i2 + 1\n  goto B4\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "RelationalExpr",
    "signature": "java.lang.Object RelationalExpr()",
    "visibility": "public",
    "body": "{\r\n    Object ex, r;\r\n    ex \u003d AdditiveExpr();\r\n    label_11: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case LT:\r\n            case LTE:\r\n            case GT:\r\n            case GTE:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[28] \u003d jj_gen;\r\n                break label_11;\r\n        }\r\n        switch(jj_nt.kind) {\r\n            case LT:\r\n                jj_consume_token(LT);\r\n                r \u003d AdditiveExpr();\r\n                ex \u003d compiler.lessThan(ex, r);\r\n                break;\r\n            case GT:\r\n                jj_consume_token(GT);\r\n                r \u003d AdditiveExpr();\r\n                ex \u003d compiler.greaterThan(ex, r);\r\n                break;\r\n            case LTE:\r\n                jj_consume_token(LTE);\r\n                r \u003d AdditiveExpr();\r\n                ex \u003d compiler.lessThanOrEqual(ex, r);\r\n                break;\r\n            case GTE:\r\n                jj_consume_token(GTE);\r\n                r \u003d AdditiveExpr();\r\n                ex \u003d compiler.greaterThanOrEqual(ex, r);\r\n                break;\r\n            default:\r\n                jj_la1[29] \u003d jj_gen;\r\n                jj_consume_token(-1);\r\n                throw new ParseException();\r\n        }\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 11,
    "edges": 14,
    "cc": 5,
    "flowSummary": [
      "B1 : If(switch-on $i3) → B2 | else → B3",
      "B4 : If(switch-on $i0) → B5 | else → B7"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  r9 \u003d r0.AdditiveExpr()\n}",
      "B1 {\n  $r10 \u003d Token jj_nt\u003e\n  $i3 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B2 {\n  goto B4\n}",
      "B3 {\n  $r8 \u003d XPathParser: int[] jj_la1\u003e\n  $i2 \u003d XPathParser: int jj_gen\u003e\n  $r8[28] \u003d $i2\n  goto B10\n}",
      "B4 {\n  $r1 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B5 {\n  r0.jj_consume_token(13)\n  r11 \u003d r0.AdditiveExpr()\n  $r5 \u003d Compiler compiler\u003e\n  r9 \u003d $r5.lessThan(r9, r11)\n  goto B1\n}",
      "B6 {\n  r0.jj_consume_token(15)\n  r12 \u003d r0.AdditiveExpr()\n  $r3 \u003d Compiler compiler\u003e\n  r9 \u003d $r3.greaterThan(r9, r12)\n  goto B1\n}",
      "B7 {\n  r0.jj_consume_token(14)\n  r13 \u003d r0.AdditiveExpr()\n  $r4 \u003d Compiler compiler\u003e\n  r9 \u003d $r4.lessThanOrEqual(r9, r13)\n  goto B1\n}",
      "B8 {\n  r0.jj_consume_token(16)\n  r14 \u003d r0.AdditiveExpr()\n  $r2 \u003d Compiler compiler\u003e\n  r9 \u003d $r2.greaterThanOrEqual(r9, r14)\n  goto B1\n}",
      "B9 {\n  $r6 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r6[29] \u003d $i1\n  $i5 \u003d (int) -1\n  r0.jj_consume_token($i5)\n  $r15 \u003d ParseException\n  new ParseException()\n  throw $r15\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B10",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B4 --\u003e B6",
      "B4 --\u003e B8",
      "B4 --\u003e B9",
      "B5 --\u003e B1",
      "B6 --\u003e B1",
      "B7 --\u003e B1",
      "B8 --\u003e B1",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      },
      {
        "name": "XPathParser#AdditiveExpr(...0)",
        "body": "{\r\n    Object ex, r;\r\n    ArrayList list \u003d null;\r\n    ex \u003d SubtractiveExpr();\r\n    label_12: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case PLUS:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[30] \u003d jj_gen;\r\n                break label_12;\r\n        }\r\n        jj_consume_token(PLUS);\r\n        r \u003d SubtractiveExpr();\r\n        if (list \u003d\u003d null) {\r\n            list \u003d new ArrayList();\r\n            list.add(ex);\r\n        }\r\n        list.add(r);\r\n    }\r\n    if (list !\u003d null) {\r\n        ex \u003d compiler.sum(list.toArray());\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "RelativeLocationPath",
    "signature": "java.lang.Object RelativeLocationPath()",
    "visibility": "public",
    "body": "{\r\n    final ArrayList steps \u003d new ArrayList();\r\n    NodeTest(steps);\r\n    label_2: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case SLASH:\r\n            case SLASHSLASH:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[8] \u003d jj_gen;\r\n                break label_2;\r\n        }\r\n        LocationStep(steps);\r\n    }\r\n    {\r\n        if (true) {\r\n            return compiler.locationPath(false, steps.toArray());\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(switch-on $i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  $r0 \u003d ArrayList\n  new ArrayList()\n  r1.NodeTest($r0)\n}",
      "B1 {\n  $r2 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B2 {\n  goto B4\n}",
      "B3 {\n  $r3 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r3[8] \u003d $i1\n  goto B5\n}",
      "B4 {\n  r1.LocationStep($r0)\n  goto B1\n}",
      "B5 {\n  $r4 \u003d Compiler compiler\u003e\n  $r5 \u003d $r0.toArray()\n  $r6 \u003d $r4.locationPath(0, $r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#NodeTest(...1)",
        "body": "{\r\n    int axis;\r\n    int type \u003d -1;\r\n    String instruction \u003d null;\r\n    Object name \u003d null;\r\n    Object s;\r\n    Object p;\r\n    final ArrayList ps \u003d new ArrayList();\r\n    switch(jj_nt.kind) {\r\n        case OR:\r\n        case AND:\r\n        case MOD:\r\n        case DIV:\r\n        case NODE:\r\n        case TEXT:\r\n        case COMMENT:\r\n        case PI:\r\n        case AXIS_SELF:\r\n        case AXIS_CHILD:\r\n        case AXIS_PARENT:\r\n        case AXIS_ANCESTOR:\r\n        case AXIS_ATTRIBUTE:\r\n        case AXIS_NAMESPACE:\r\n        case AXIS_PRECEDING:\r\n        case AXIS_FOLLOWING:\r\n        case AXIS_DESCENDANT:\r\n        case AXIS_ANCESTOR_OR_SELF:\r\n        case AXIS_FOLLOWING_SIBLING:\r\n        case AXIS_PRECEDING_SIBLING:\r\n        case AXIS_DESCENDANT_OR_SELF:\r\n        case FUNCTION_LAST:\r\n        case FUNCTION_POSITION:\r\n        case FUNCTION_COUNT:\r\n        case FUNCTION_ID:\r\n        case FUNCTION_KEY:\r\n        case FUNCTION_LOCAL_NAME:\r\n        case FUNCTION_NAMESPACE_URI:\r\n        case FUNCTION_NAME:\r\n        case FUNCTION_STRING:\r\n        case FUNCTION_CONCAT:\r\n        case FUNCTION_STARTS_WITH:\r\n        case FUNCTION_ENDS_WITH:\r\n        case FUNCTION_CONTAINS:\r\n        case FUNCTION_SUBSTRING_BEFORE:\r\n        case FUNCTION_SUBSTRING_AFTER:\r\n        case FUNCTION_SUBSTRING:\r\n        case FUNCTION_STRING_LENGTH:\r\n        case FUNCTION_NORMALIZE_SPACE:\r\n        case FUNCTION_TRANSLATE:\r\n        case FUNCTION_BOOLEAN:\r\n        case FUNCTION_NOT:\r\n        case FUNCTION_TRUE:\r\n        case FUNCTION_FALSE:\r\n        case FUNCTION_NULL:\r\n        case FUNCTION_LANG:\r\n        case FUNCTION_NUMBER:\r\n        case FUNCTION_SUM:\r\n        case FUNCTION_FLOOR:\r\n        case FUNCTION_CEILING:\r\n        case FUNCTION_ROUND:\r\n        case FUNCTION_FORMAT_NUMBER:\r\n        case NCName:\r\n        case 87:\r\n        case 89:\r\n            axis \u003d AxisSpecifier();\r\n            if (jj_2_3(2147483647)) {\r\n                type \u003d NodeType();\r\n                jj_consume_token(81);\r\n                jj_consume_token(82);\r\n            } else if (jj_2_4(2147483647)) {\r\n                jj_consume_token(PI);\r\n                jj_consume_token(81);\r\n                jj_consume_token(Literal);\r\n                instruction \u003d unescape(token.image.substring(1, token.image.length() - 1));\r\n                jj_consume_token(82);\r\n            } else {\r\n                switch(jj_nt.kind) {\r\n                    case OR:\r\n                    case AND:\r\n                    case MOD:\r\n                    case DIV:\r\n                    case NODE:\r\n                    case TEXT:\r\n                    case COMMENT:\r\n                    case PI:\r\n                    case FUNCTION_LAST:\r\n                    case FUNCTION_POSITION:\r\n                    case FUNCTION_COUNT:\r\n                    case FUNCTION_ID:\r\n                    case FUNCTION_KEY:\r\n                    case FUNCTION_LOCAL_NAME:\r\n                    case FUNCTION_NAMESPACE_URI:\r\n                    case FUNCTION_NAME:\r\n                    case FUNCTION_STRING:\r\n                    case FUNCTION_CONCAT:\r\n                    case FUNCTION_STARTS_WITH:\r\n                    case FUNCTION_ENDS_WITH:\r\n                    case FUNCTION_CONTAINS:\r\n                    case FUNCTION_SUBSTRING_BEFORE:\r\n                    case FUNCTION_SUBSTRING_AFTER:\r\n                    case FUNCTION_SUBSTRING:\r\n                    case FUNCTION_STRING_LENGTH:\r\n                    case FUNCTION_NORMALIZE_SPACE:\r\n                    case FUNCTION_TRANSLATE:\r\n                    case FUNCTION_BOOLEAN:\r\n                    case FUNCTION_NOT:\r\n                    case FUNCTION_TRUE:\r\n                    case FUNCTION_FALSE:\r\n                    case FUNCTION_NULL:\r\n                    case FUNCTION_LANG:\r\n                    case FUNCTION_NUMBER:\r\n                    case FUNCTION_SUM:\r\n                    case FUNCTION_FLOOR:\r\n                    case FUNCTION_CEILING:\r\n                    case FUNCTION_ROUND:\r\n                    case FUNCTION_FORMAT_NUMBER:\r\n                    case NCName:\r\n                    case 89:\r\n                        name \u003d WildcardName();\r\n                        break;\r\n                    default:\r\n                        jj_la1[10] \u003d jj_gen;\r\n                        jj_consume_token(-1);\r\n                        throw new ParseException();\r\n                }\r\n            }\r\n            break;\r\n        case 83:\r\n            jj_consume_token(83);\r\n            axis \u003d Compiler.AXIS_SELF;\r\n            type \u003d Compiler.NODE_TYPE_NODE;\r\n            break;\r\n        case 84:\r\n            jj_consume_token(84);\r\n            axis \u003d Compiler.AXIS_PARENT;\r\n            type \u003d Compiler.NODE_TYPE_NODE;\r\n            break;\r\n        default:\r\n            jj_la1[11] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    label_3: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case 85:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[12] \u003d jj_gen;\r\n                break label_3;\r\n        }\r\n        p \u003d Predicate();\r\n        ps.add(p);\r\n    }\r\n    if (name !\u003d null) {\r\n        s \u003d compiler.nodeNameTest(name);\r\n    } else if (instruction !\u003d null) {\r\n        s \u003d compiler.processingInstructionTest(instruction);\r\n    } else {\r\n        s \u003d compiler.nodeTypeTest(type);\r\n    }\r\n    steps.add(compiler.step(axis, s, ps.toArray()));\r\n}"
      },
      {
        "name": "XPathParser#LocationStep(...1)",
        "body": "{\r\n    Object t;\r\n    final Object s;\r\n    switch(jj_nt.kind) {\r\n        case SLASH:\r\n            jj_consume_token(SLASH);\r\n            break;\r\n        case SLASHSLASH:\r\n            jj_consume_token(SLASHSLASH);\r\n            // Abbreviated step: descendant-or-self::node()\r\n            t \u003d compiler.nodeTypeTest(Compiler.NODE_TYPE_NODE);\r\n            steps.add(compiler.step(Compiler.AXIS_DESCENDANT_OR_SELF, t, null));\r\n            break;\r\n        default:\r\n            jj_la1[9] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    NodeTest(steps);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "SubtractiveExpr",
    "signature": "java.lang.Object SubtractiveExpr()",
    "visibility": "public",
    "body": "{\r\n    Object ex, r \u003d null;\r\n    ex \u003d MultiplicativeExpr();\r\n    label_13: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case MINUS:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[31] \u003d jj_gen;\r\n                break label_13;\r\n        }\r\n        jj_consume_token(MINUS);\r\n        r \u003d MultiplicativeExpr();\r\n        ex \u003d compiler.minus(ex, r);\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(switch-on $i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  r4 \u003d r0.MultiplicativeExpr()\n}",
      "B1 {\n  $r1 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B2 {\n  goto B4\n}",
      "B3 {\n  $r3 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r3[31] \u003d $i1\n  goto B5\n}",
      "B4 {\n  r0.jj_consume_token(10)\n  r5 \u003d r0.MultiplicativeExpr()\n  $r2 \u003d Compiler compiler\u003e\n  r4 \u003d $r2.minus(r4, r5)\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      },
      {
        "name": "XPathParser#MultiplicativeExpr(...0)",
        "body": "{\r\n    Object ex, r;\r\n    ex \u003d UnaryExpr();\r\n    label_14: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case MOD:\r\n            case DIV:\r\n            case 89:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[32] \u003d jj_gen;\r\n                break label_14;\r\n        }\r\n        switch(jj_nt.kind) {\r\n            case 89:\r\n                jj_consume_token(89);\r\n                r \u003d UnaryExpr();\r\n                ex \u003d compiler.multiply(ex, r);\r\n                break;\r\n            case DIV:\r\n                jj_consume_token(DIV);\r\n                r \u003d UnaryExpr();\r\n                ex \u003d compiler.divide(ex, r);\r\n                break;\r\n            case MOD:\r\n                jj_consume_token(MOD);\r\n                r \u003d UnaryExpr();\r\n                ex \u003d compiler.mod(ex, r);\r\n                break;\r\n            default:\r\n                jj_la1[33] \u003d jj_gen;\r\n                jj_consume_token(-1);\r\n                throw new ParseException();\r\n        }\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "UnaryExpr",
    "signature": "java.lang.Object UnaryExpr()",
    "visibility": "public",
    "body": "{\r\n    Object ex;\r\n    switch(jj_nt.kind) {\r\n        case SLASH:\r\n        case SLASHSLASH:\r\n        case VARIABLE:\r\n        case Literal:\r\n        case Number:\r\n        case OR:\r\n        case AND:\r\n        case MOD:\r\n        case DIV:\r\n        case NODE:\r\n        case TEXT:\r\n        case COMMENT:\r\n        case PI:\r\n        case AXIS_SELF:\r\n        case AXIS_CHILD:\r\n        case AXIS_PARENT:\r\n        case AXIS_ANCESTOR:\r\n        case AXIS_ATTRIBUTE:\r\n        case AXIS_NAMESPACE:\r\n        case AXIS_PRECEDING:\r\n        case AXIS_FOLLOWING:\r\n        case AXIS_DESCENDANT:\r\n        case AXIS_ANCESTOR_OR_SELF:\r\n        case AXIS_FOLLOWING_SIBLING:\r\n        case AXIS_PRECEDING_SIBLING:\r\n        case AXIS_DESCENDANT_OR_SELF:\r\n        case FUNCTION_LAST:\r\n        case FUNCTION_POSITION:\r\n        case FUNCTION_COUNT:\r\n        case FUNCTION_ID:\r\n        case FUNCTION_KEY:\r\n        case FUNCTION_LOCAL_NAME:\r\n        case FUNCTION_NAMESPACE_URI:\r\n        case FUNCTION_NAME:\r\n        case FUNCTION_STRING:\r\n        case FUNCTION_CONCAT:\r\n        case FUNCTION_STARTS_WITH:\r\n        case FUNCTION_ENDS_WITH:\r\n        case FUNCTION_CONTAINS:\r\n        case FUNCTION_SUBSTRING_BEFORE:\r\n        case FUNCTION_SUBSTRING_AFTER:\r\n        case FUNCTION_SUBSTRING:\r\n        case FUNCTION_STRING_LENGTH:\r\n        case FUNCTION_NORMALIZE_SPACE:\r\n        case FUNCTION_TRANSLATE:\r\n        case FUNCTION_BOOLEAN:\r\n        case FUNCTION_NOT:\r\n        case FUNCTION_TRUE:\r\n        case FUNCTION_FALSE:\r\n        case FUNCTION_NULL:\r\n        case FUNCTION_LANG:\r\n        case FUNCTION_NUMBER:\r\n        case FUNCTION_SUM:\r\n        case FUNCTION_FLOOR:\r\n        case FUNCTION_CEILING:\r\n        case FUNCTION_ROUND:\r\n        case FUNCTION_FORMAT_NUMBER:\r\n        case NCName:\r\n        case 81:\r\n        case 83:\r\n        case 84:\r\n        case 87:\r\n        case 89:\r\n            ex \u003d UnionExpr();\r\n            break;\r\n        case MINUS:\r\n            jj_consume_token(MINUS);\r\n            ex \u003d UnaryExpr();\r\n            ex \u003d compiler.minus(ex);\r\n            break;\r\n        default:\r\n            jj_la1[34] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B3"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  $r1 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B1 {\n  r5 \u003d r0.UnionExpr()\n  goto B4\n}",
      "B2 {\n  r0.jj_consume_token(10)\n  r6 \u003d r0.UnaryExpr()\n  $r2 \u003d Compiler compiler\u003e\n  r5 \u003d $r2.minus(r6)\n  goto B4\n}",
      "B3 {\n  $r3 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r3[34] \u003d $i1\n  $i3 \u003d (int) -1\n  r0.jj_consume_token($i3)\n  $r7 \u003d ParseException\n  new ParseException()\n  throw $r7\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B0 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      },
      {
        "name": "XPathParser#UnaryExpr(...0)",
        "body": "{\r\n    Object ex;\r\n    switch(jj_nt.kind) {\r\n        case SLASH:\r\n        case SLASHSLASH:\r\n        case VARIABLE:\r\n        case Literal:\r\n        case Number:\r\n        case OR:\r\n        case AND:\r\n        case MOD:\r\n        case DIV:\r\n        case NODE:\r\n        case TEXT:\r\n        case COMMENT:\r\n        case PI:\r\n        case AXIS_SELF:\r\n        case AXIS_CHILD:\r\n        case AXIS_PARENT:\r\n        case AXIS_ANCESTOR:\r\n        case AXIS_ATTRIBUTE:\r\n        case AXIS_NAMESPACE:\r\n        case AXIS_PRECEDING:\r\n        case AXIS_FOLLOWING:\r\n        case AXIS_DESCENDANT:\r\n        case AXIS_ANCESTOR_OR_SELF:\r\n        case AXIS_FOLLOWING_SIBLING:\r\n        case AXIS_PRECEDING_SIBLING:\r\n        case AXIS_DESCENDANT_OR_SELF:\r\n        case FUNCTION_LAST:\r\n        case FUNCTION_POSITION:\r\n        case FUNCTION_COUNT:\r\n        case FUNCTION_ID:\r\n        case FUNCTION_KEY:\r\n        case FUNCTION_LOCAL_NAME:\r\n        case FUNCTION_NAMESPACE_URI:\r\n        case FUNCTION_NAME:\r\n        case FUNCTION_STRING:\r\n        case FUNCTION_CONCAT:\r\n        case FUNCTION_STARTS_WITH:\r\n        case FUNCTION_ENDS_WITH:\r\n        case FUNCTION_CONTAINS:\r\n        case FUNCTION_SUBSTRING_BEFORE:\r\n        case FUNCTION_SUBSTRING_AFTER:\r\n        case FUNCTION_SUBSTRING:\r\n        case FUNCTION_STRING_LENGTH:\r\n        case FUNCTION_NORMALIZE_SPACE:\r\n        case FUNCTION_TRANSLATE:\r\n        case FUNCTION_BOOLEAN:\r\n        case FUNCTION_NOT:\r\n        case FUNCTION_TRUE:\r\n        case FUNCTION_FALSE:\r\n        case FUNCTION_NULL:\r\n        case FUNCTION_LANG:\r\n        case FUNCTION_NUMBER:\r\n        case FUNCTION_SUM:\r\n        case FUNCTION_FLOOR:\r\n        case FUNCTION_CEILING:\r\n        case FUNCTION_ROUND:\r\n        case FUNCTION_FORMAT_NUMBER:\r\n        case NCName:\r\n        case 81:\r\n        case 83:\r\n        case 84:\r\n        case 87:\r\n        case 89:\r\n            ex \u003d UnionExpr();\r\n            break;\r\n        case MINUS:\r\n            jj_consume_token(MINUS);\r\n            ex \u003d UnaryExpr();\r\n            ex \u003d compiler.minus(ex);\r\n            break;\r\n        default:\r\n            jj_la1[34] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      },
      {
        "name": "XPathParser#UnionExpr(...0)",
        "body": "{\r\n    Object ex, r;\r\n    ArrayList list \u003d null;\r\n    ex \u003d PathExpr();\r\n    label_5: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case UNION:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[20] \u003d jj_gen;\r\n                break label_5;\r\n        }\r\n        jj_consume_token(UNION);\r\n        r \u003d PathExpr();\r\n        if (list \u003d\u003d null) {\r\n            list \u003d new ArrayList();\r\n            list.add(ex);\r\n        }\r\n        list.add(r);\r\n    }\r\n    if (list !\u003d null) {\r\n        ex \u003d compiler.union(list.toArray());\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "UnionExpr",
    "signature": "java.lang.Object UnionExpr()",
    "visibility": "public",
    "body": "{\r\n    Object ex, r;\r\n    ArrayList list \u003d null;\r\n    ex \u003d PathExpr();\r\n    label_5: while (true) {\r\n        switch(jj_nt.kind) {\r\n            case UNION:\r\n                ;\r\n                break;\r\n            default:\r\n                jj_la1[20] \u003d jj_gen;\r\n                break label_5;\r\n        }\r\n        jj_consume_token(UNION);\r\n        r \u003d PathExpr();\r\n        if (list \u003d\u003d null) {\r\n            list \u003d new ArrayList();\r\n            list.add(ex);\r\n        }\r\n        list.add(r);\r\n    }\r\n    if (list !\u003d null) {\r\n        ex \u003d compiler.union(list.toArray());\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B1 : If(switch-on $i0) → B2 | else → B3",
      "B4 : If(r7 !\u003d null) → B5 | else → B6",
      "B7 : If(r7 \u003d\u003d null) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  r7 \u003d null\n  r8 \u003d r0.PathExpr()\n}",
      "B1 {\n  $r1 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B2 {\n  goto B4\n}",
      "B3 {\n  $r4 \u003d XPathParser: int[] jj_la1\u003e\n  $i1 \u003d XPathParser: int jj_gen\u003e\n  $r4[20] \u003d $i1\n  goto B7\n}",
      "B4 {\n  r0.jj_consume_token(8)\n  r2 \u003d r0.PathExpr()\n  if (r7 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r3 \u003d ArrayList\n  new ArrayList()\n  r7 \u003d $r3\n  $r3.add(r8)\n}",
      "B6 {\n  r7.add(r2)\n  goto B1\n}",
      "B7 {\n  if (r7 \u003d\u003d null) goto B8 else B9\n}",
      "B8 {\n  $r5 \u003d Compiler compiler\u003e\n  $r6 \u003d r7.toArray()\n  r8 \u003d $r5.union($r6)\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B1",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      },
      {
        "name": "XPathParser#PathExpr(...0)",
        "body": "{\r\n    Object ex \u003d null;\r\n    final Object[] steps;\r\n    if (jj_2_6(2147483647)) {\r\n        ex \u003d FilterExpr();\r\n    } else {\r\n        switch(jj_nt.kind) {\r\n            case SLASH:\r\n            case SLASHSLASH:\r\n            case OR:\r\n            case AND:\r\n            case MOD:\r\n            case DIV:\r\n            case NODE:\r\n            case TEXT:\r\n            case COMMENT:\r\n            case PI:\r\n            case AXIS_SELF:\r\n            case AXIS_CHILD:\r\n            case AXIS_PARENT:\r\n            case AXIS_ANCESTOR:\r\n            case AXIS_ATTRIBUTE:\r\n            case AXIS_NAMESPACE:\r\n            case AXIS_PRECEDING:\r\n            case AXIS_FOLLOWING:\r\n            case AXIS_DESCENDANT:\r\n            case AXIS_ANCESTOR_OR_SELF:\r\n            case AXIS_FOLLOWING_SIBLING:\r\n            case AXIS_PRECEDING_SIBLING:\r\n            case AXIS_DESCENDANT_OR_SELF:\r\n            case FUNCTION_LAST:\r\n            case FUNCTION_POSITION:\r\n            case FUNCTION_COUNT:\r\n            case FUNCTION_ID:\r\n            case FUNCTION_KEY:\r\n            case FUNCTION_LOCAL_NAME:\r\n            case FUNCTION_NAMESPACE_URI:\r\n            case FUNCTION_NAME:\r\n            case FUNCTION_STRING:\r\n            case FUNCTION_CONCAT:\r\n            case FUNCTION_STARTS_WITH:\r\n            case FUNCTION_ENDS_WITH:\r\n            case FUNCTION_CONTAINS:\r\n            case FUNCTION_SUBSTRING_BEFORE:\r\n            case FUNCTION_SUBSTRING_AFTER:\r\n            case FUNCTION_SUBSTRING:\r\n            case FUNCTION_STRING_LENGTH:\r\n            case FUNCTION_NORMALIZE_SPACE:\r\n            case FUNCTION_TRANSLATE:\r\n            case FUNCTION_BOOLEAN:\r\n            case FUNCTION_NOT:\r\n            case FUNCTION_TRUE:\r\n            case FUNCTION_FALSE:\r\n            case FUNCTION_NULL:\r\n            case FUNCTION_LANG:\r\n            case FUNCTION_NUMBER:\r\n            case FUNCTION_SUM:\r\n            case FUNCTION_FLOOR:\r\n            case FUNCTION_CEILING:\r\n            case FUNCTION_ROUND:\r\n            case FUNCTION_FORMAT_NUMBER:\r\n            case NCName:\r\n            case 83:\r\n            case 84:\r\n            case 87:\r\n            case 89:\r\n                ex \u003d LocationPath();\r\n                break;\r\n            default:\r\n                jj_la1[21] \u003d jj_gen;\r\n                jj_consume_token(-1);\r\n                throw new ParseException();\r\n        }\r\n    }\r\n    {\r\n        if (true) {\r\n            return ex;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParser",
    "methodName": "WildcardName",
    "signature": "java.lang.Object WildcardName()",
    "visibility": "public",
    "body": "{\r\n    Object qn;\r\n    String nc1, nc2 \u003d null;\r\n    switch(jj_nt.kind) {\r\n        case 89:\r\n            jj_consume_token(89);\r\n            break;\r\n        case OR:\r\n        case AND:\r\n        case MOD:\r\n        case DIV:\r\n        case NODE:\r\n        case TEXT:\r\n        case COMMENT:\r\n        case PI:\r\n        case FUNCTION_LAST:\r\n        case FUNCTION_POSITION:\r\n        case FUNCTION_COUNT:\r\n        case FUNCTION_ID:\r\n        case FUNCTION_KEY:\r\n        case FUNCTION_LOCAL_NAME:\r\n        case FUNCTION_NAMESPACE_URI:\r\n        case FUNCTION_NAME:\r\n        case FUNCTION_STRING:\r\n        case FUNCTION_CONCAT:\r\n        case FUNCTION_STARTS_WITH:\r\n        case FUNCTION_ENDS_WITH:\r\n        case FUNCTION_CONTAINS:\r\n        case FUNCTION_SUBSTRING_BEFORE:\r\n        case FUNCTION_SUBSTRING_AFTER:\r\n        case FUNCTION_SUBSTRING:\r\n        case FUNCTION_STRING_LENGTH:\r\n        case FUNCTION_NORMALIZE_SPACE:\r\n        case FUNCTION_TRANSLATE:\r\n        case FUNCTION_BOOLEAN:\r\n        case FUNCTION_NOT:\r\n        case FUNCTION_TRUE:\r\n        case FUNCTION_FALSE:\r\n        case FUNCTION_NULL:\r\n        case FUNCTION_LANG:\r\n        case FUNCTION_NUMBER:\r\n        case FUNCTION_SUM:\r\n        case FUNCTION_FLOOR:\r\n        case FUNCTION_CEILING:\r\n        case FUNCTION_ROUND:\r\n        case FUNCTION_FORMAT_NUMBER:\r\n        case NCName:\r\n            NCName();\r\n            break;\r\n        default:\r\n            jj_la1[35] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    nc1 \u003d token.image;\r\n    switch(jj_nt.kind) {\r\n        case 80:\r\n            jj_consume_token(80);\r\n            switch(jj_nt.kind) {\r\n                case 89:\r\n                    jj_consume_token(89);\r\n                    break;\r\n                case OR:\r\n                case AND:\r\n                case MOD:\r\n                case DIV:\r\n                case NODE:\r\n                case TEXT:\r\n                case COMMENT:\r\n                case PI:\r\n                case FUNCTION_LAST:\r\n                case FUNCTION_POSITION:\r\n                case FUNCTION_COUNT:\r\n                case FUNCTION_ID:\r\n                case FUNCTION_KEY:\r\n                case FUNCTION_LOCAL_NAME:\r\n                case FUNCTION_NAMESPACE_URI:\r\n                case FUNCTION_NAME:\r\n                case FUNCTION_STRING:\r\n                case FUNCTION_CONCAT:\r\n                case FUNCTION_STARTS_WITH:\r\n                case FUNCTION_ENDS_WITH:\r\n                case FUNCTION_CONTAINS:\r\n                case FUNCTION_SUBSTRING_BEFORE:\r\n                case FUNCTION_SUBSTRING_AFTER:\r\n                case FUNCTION_SUBSTRING:\r\n                case FUNCTION_STRING_LENGTH:\r\n                case FUNCTION_NORMALIZE_SPACE:\r\n                case FUNCTION_TRANSLATE:\r\n                case FUNCTION_BOOLEAN:\r\n                case FUNCTION_NOT:\r\n                case FUNCTION_TRUE:\r\n                case FUNCTION_FALSE:\r\n                case FUNCTION_NULL:\r\n                case FUNCTION_LANG:\r\n                case FUNCTION_NUMBER:\r\n                case FUNCTION_SUM:\r\n                case FUNCTION_FLOOR:\r\n                case FUNCTION_CEILING:\r\n                case FUNCTION_ROUND:\r\n                case FUNCTION_FORMAT_NUMBER:\r\n                case NCName:\r\n                    NCName();\r\n                    break;\r\n                default:\r\n                    jj_la1[36] \u003d jj_gen;\r\n                    jj_consume_token(-1);\r\n                    throw new ParseException();\r\n            }\r\n            nc2 \u003d token.image;\r\n            break;\r\n        default:\r\n            jj_la1[37] \u003d jj_gen;\r\n            ;\r\n    }\r\n    if (nc2 !\u003d null) {\r\n        qn \u003d compiler.qname(nc1, nc2);\r\n    } else {\r\n        qn \u003d compiler.qname(null, nc1);\r\n    }\r\n    {\r\n        if (true) {\r\n            return qn;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}",
    "nodes": 15,
    "edges": 18,
    "cc": 5,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B2 | else → B3",
      "B4 : If(switch-on $i1) → B5 | else → B10",
      "B5 : If(switch-on $i2) → B7 | else → B8",
      "B11 : If(r14 \u003d\u003d null) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  XPathParser\n  r14 \u003d null\n  $r1 \u003d Token jj_nt\u003e\n  $i0 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B1 {\n  r0.jj_consume_token(89)\n  goto B4\n}",
      "B2 {\n  r0.NCName()\n  goto B4\n}",
      "B3 {\n  $r12 \u003d XPathParser: int[] jj_la1\u003e\n  $i5 \u003d XPathParser: int jj_gen\u003e\n  $r12[35] \u003d $i5\n  $i7 \u003d (int) -1\n  r0.jj_consume_token($i7)\n  $r16 \u003d ParseException\n  new ParseException()\n  throw $r16\n}",
      "B4 {\n  $r2 \u003d Token token\u003e\n  $r11 \u003d String image\u003e\n  $r3 \u003d Token jj_nt\u003e\n  $i1 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B5 {\n  r0.jj_consume_token(80)\n  $r4 \u003d Token jj_nt\u003e\n  $i2 \u003d Token: int kind\u003e\n  XPathParser: int[] jj_la1\u003e; }\n}",
      "B6 {\n  r0.jj_consume_token(89)\n  goto B9\n}",
      "B7 {\n  r0.NCName()\n  goto B9\n}",
      "B8 {\n  $r8 \u003d XPathParser: int[] jj_la1\u003e\n  $i3 \u003d XPathParser: int jj_gen\u003e\n  $r8[36] \u003d $i3\n  $i9 \u003d (int) -1\n  r0.jj_consume_token($i9)\n  $r17 \u003d ParseException\n  new ParseException()\n  throw $r17\n}",
      "B9 {\n  $r5 \u003d Token token\u003e\n  r14 \u003d String image\u003e\n  goto B11\n}",
      "B10 {\n  $r10 \u003d XPathParser: int[] jj_la1\u003e\n  $i4 \u003d XPathParser: int jj_gen\u003e\n  $r10[37] \u003d $i4\n}",
      "B11 {\n  if (r14 \u003d\u003d null) goto B12 else B13\n}",
      "B12 {\n  $r7 \u003d Compiler compiler\u003e\n  r15 \u003d $r7.qname($r11, r14)\n  goto B14\n}",
      "B13 {\n  $r6 \u003d Compiler compiler\u003e\n  r15 \u003d $r6.qname(null, $r11)\n}",
      "B14 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B0 --\u003e B1",
      "B1 --\u003e B4",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B10",
      "B5 --\u003e B7",
      "B5 --\u003e B8",
      "B5 --\u003e B6",
      "B6 --\u003e B9",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParser#jj_consume_token(...1)",
        "body": "{\r\n    final Token oldToken \u003d token;\r\n    if ((token \u003d jj_nt).next !\u003d null) {\r\n        jj_nt \u003d jj_nt.next;\r\n    } else {\r\n        jj_nt \u003d jj_nt.next \u003d token_source.getNextToken();\r\n    }\r\n    if (token.kind \u003d\u003d kind) {\r\n        jj_gen++;\r\n        if (++jj_gc \u003e 100) {\r\n            jj_gc \u003d 0;\r\n            for (final JJCalls jj_2_rtn : jj_2_rtns) {\r\n                JJCalls c \u003d jj_2_rtn;\r\n                while (c !\u003d null) {\r\n                    if (c.gen \u003c jj_gen) {\r\n                        c.first \u003d null;\r\n                    }\r\n                    c \u003d c.next;\r\n                }\r\n            }\r\n        }\r\n        return token;\r\n    }\r\n    jj_nt \u003d token;\r\n    token \u003d oldToken;\r\n    jj_kind \u003d kind;\r\n    throw generateParseException();\r\n}"
      },
      {
        "name": "XPathParser#NCName(...0)",
        "body": "{\r\n    switch(jj_nt.kind) {\r\n        case OR:\r\n        case AND:\r\n        case MOD:\r\n        case DIV:\r\n        case NCName:\r\n            NCName_Without_CoreFunctions();\r\n            break;\r\n        case NODE:\r\n            jj_consume_token(NODE);\r\n            break;\r\n        case TEXT:\r\n            jj_consume_token(TEXT);\r\n            break;\r\n        case COMMENT:\r\n            jj_consume_token(COMMENT);\r\n            break;\r\n        case PI:\r\n            jj_consume_token(PI);\r\n            break;\r\n        case FUNCTION_LAST:\r\n            jj_consume_token(FUNCTION_LAST);\r\n            break;\r\n        case FUNCTION_POSITION:\r\n            jj_consume_token(FUNCTION_POSITION);\r\n            break;\r\n        case FUNCTION_COUNT:\r\n            jj_consume_token(FUNCTION_COUNT);\r\n            break;\r\n        case FUNCTION_ID:\r\n            jj_consume_token(FUNCTION_ID);\r\n            break;\r\n        case FUNCTION_LOCAL_NAME:\r\n            jj_consume_token(FUNCTION_LOCAL_NAME);\r\n            break;\r\n        case FUNCTION_NAMESPACE_URI:\r\n            jj_consume_token(FUNCTION_NAMESPACE_URI);\r\n            break;\r\n        case FUNCTION_NAME:\r\n            jj_consume_token(FUNCTION_NAME);\r\n            break;\r\n        case FUNCTION_STRING:\r\n            jj_consume_token(FUNCTION_STRING);\r\n            break;\r\n        case FUNCTION_CONCAT:\r\n            jj_consume_token(FUNCTION_CONCAT);\r\n            break;\r\n        case FUNCTION_STARTS_WITH:\r\n            jj_consume_token(FUNCTION_STARTS_WITH);\r\n            break;\r\n        case FUNCTION_ENDS_WITH:\r\n            jj_consume_token(FUNCTION_ENDS_WITH);\r\n            break;\r\n        case FUNCTION_CONTAINS:\r\n            jj_consume_token(FUNCTION_CONTAINS);\r\n            break;\r\n        case FUNCTION_SUBSTRING_BEFORE:\r\n            jj_consume_token(FUNCTION_SUBSTRING_BEFORE);\r\n            break;\r\n        case FUNCTION_SUBSTRING_AFTER:\r\n            jj_consume_token(FUNCTION_SUBSTRING_AFTER);\r\n            break;\r\n        case FUNCTION_SUBSTRING:\r\n            jj_consume_token(FUNCTION_SUBSTRING);\r\n            break;\r\n        case FUNCTION_STRING_LENGTH:\r\n            jj_consume_token(FUNCTION_STRING_LENGTH);\r\n            break;\r\n        case FUNCTION_NORMALIZE_SPACE:\r\n            jj_consume_token(FUNCTION_NORMALIZE_SPACE);\r\n            break;\r\n        case FUNCTION_TRANSLATE:\r\n            jj_consume_token(FUNCTION_TRANSLATE);\r\n            break;\r\n        case FUNCTION_BOOLEAN:\r\n            jj_consume_token(FUNCTION_BOOLEAN);\r\n            break;\r\n        case FUNCTION_NOT:\r\n            jj_consume_token(FUNCTION_NOT);\r\n            break;\r\n        case FUNCTION_TRUE:\r\n            jj_consume_token(FUNCTION_TRUE);\r\n            break;\r\n        case FUNCTION_FALSE:\r\n            jj_consume_token(FUNCTION_FALSE);\r\n            break;\r\n        case FUNCTION_NULL:\r\n            jj_consume_token(FUNCTION_NULL);\r\n            break;\r\n        case FUNCTION_LANG:\r\n            jj_consume_token(FUNCTION_LANG);\r\n            break;\r\n        case FUNCTION_NUMBER:\r\n            jj_consume_token(FUNCTION_NUMBER);\r\n            break;\r\n        case FUNCTION_SUM:\r\n            jj_consume_token(FUNCTION_SUM);\r\n            break;\r\n        case FUNCTION_FLOOR:\r\n            jj_consume_token(FUNCTION_FLOOR);\r\n            break;\r\n        case FUNCTION_CEILING:\r\n            jj_consume_token(FUNCTION_CEILING);\r\n            break;\r\n        case FUNCTION_ROUND:\r\n            jj_consume_token(FUNCTION_ROUND);\r\n            break;\r\n        case FUNCTION_KEY:\r\n            jj_consume_token(FUNCTION_KEY);\r\n            break;\r\n        case FUNCTION_FORMAT_NUMBER:\r\n            jj_consume_token(FUNCTION_FORMAT_NUMBER);\r\n            break;\r\n        default:\r\n            jj_la1[0] \u003d jj_gen;\r\n            jj_consume_token(-1);\r\n            throw new ParseException();\r\n    }\r\n    {\r\n        if (true) {\r\n            return token.image;\r\n        }\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParserTokenManager",
    "methodName": "getNextToken",
    "signature": "org.apache.commons.jxpath.ri.parser.Token getNextToken()",
    "visibility": "public",
    "body": "{\r\n    Token matchedToken;\r\n    int curPos \u003d 0;\r\n    EOFLoop: for (; ; ) {\r\n        try {\r\n            curChar \u003d input_stream.BeginToken();\r\n        } catch (final java.io.IOException e) {\r\n            jjmatchedKind \u003d 0;\r\n            matchedToken \u003d jjFillToken();\r\n            return matchedToken;\r\n        }\r\n        try {\r\n            input_stream.backup(0);\r\n            while (curChar \u003c\u003d 32 \u0026\u0026 (0x100003600L \u0026 1L \u003c\u003c curChar) !\u003d 0L) {\r\n                curChar \u003d input_stream.BeginToken();\r\n            }\r\n        } catch (final java.io.IOException e1) {\r\n            continue EOFLoop;\r\n        }\r\n        jjmatchedKind \u003d 0x7fffffff;\r\n        jjmatchedPos \u003d 0;\r\n        curPos \u003d jjMoveStringLiteralDfa0_0();\r\n        if (jjmatchedKind !\u003d 0x7fffffff) {\r\n            if (jjmatchedPos + 1 \u003c curPos) {\r\n                input_stream.backup(curPos - jjmatchedPos - 1);\r\n            }\r\n            if ((jjtoToken[jjmatchedKind \u003e\u003e 6] \u0026 1L \u003c\u003c (jjmatchedKind \u0026 077)) !\u003d 0L) {\r\n                matchedToken \u003d jjFillToken();\r\n                return matchedToken;\r\n            }\r\n            continue EOFLoop;\r\n        }\r\n        int error_line \u003d input_stream.getEndLine();\r\n        int error_column \u003d input_stream.getEndColumn();\r\n        String error_after \u003d null;\r\n        boolean EOFSeen \u003d false;\r\n        try {\r\n            input_stream.readChar();\r\n            input_stream.backup(1);\r\n        } catch (final java.io.IOException e1) {\r\n            EOFSeen \u003d true;\r\n            error_after \u003d curPos \u003c\u003d 1 ? \"\" : input_stream.GetImage();\r\n            if (curChar \u003d\u003d \u0027\\n\u0027 || curChar \u003d\u003d \u0027\\r\u0027) {\r\n                error_line++;\r\n                error_column \u003d 0;\r\n            } else {\r\n                error_column++;\r\n            }\r\n        }\r\n        if (!EOFSeen) {\r\n            input_stream.backup(1);\r\n            error_after \u003d curPos \u003c\u003d 1 ? \"\" : input_stream.GetImage();\r\n        }\r\n        throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\r\n    }\r\n}",
    "nodes": 28,
    "edges": 35,
    "cc": 9,
    "flowSummary": [
      "B4 : If($i28 \u003e 32) → B5 | else → B7",
      "B5 : If($b18 \u003d\u003d false) → B6 | else → B7",
      "B9 : If($i1 \u003d\u003d 2147483647) → B10 | else → B14",
      "B10 : If($i3 \u003e\u003d i23) → B11 | else → B12",
      "B12 : If($b11 \u003d\u003d false) → B13 | else → B1",
      "B15 : If(i23 \u003e 1) → B16 | else → B17",
      "B18 : If($i29 \u003d\u003d 10) → B19 | else → B20",
      "B19 : If($i30 !\u003d 13) → B20 | else → B21",
      "B22 : If(z1 !\u003d 0) → B23 | else → B27",
      "B23 : If(i23 \u003e 1) → B24 | else → B25"
    ],
    "blockList": [
      "B0 {\n  XPathParserTokenManager\n}",
      "B1 {\n  $r15 \u003d SimpleCharStream input_stream\u003e\n  $c22 \u003d $r15.BeginToken()\n  XPathParserTokenManager: char curChar\u003e \u003d $c22\n  goto B3\n}",
      "B2 {\n  $r14 :\u003d @caughtexception\n  XPathParserTokenManager: int jjmatchedKind\u003e \u003d 0\n  r16 \u003d r0.jjFillToken()\n  return\n}",
      "B3 {\n  $r1 \u003d SimpleCharStream input_stream\u003e\n  $r1.backup(0)\n}",
      "B4 {\n  $c0 \u003d XPathParserTokenManager: char curChar\u003e\n  $i28 \u003d (int) $c0\n  if ($i28 \u003e 32) goto B5 else B7\n}",
      "B5 {\n  $c15 \u003d XPathParserTokenManager: char curChar\u003e\n  $l16 \u003d 1L \u003c\u003c $c15\n  $l17 \u003d 4294981120L \u0026 $l16\n  $b18 \u003d $l17 cmp 0L\n  if ($b18 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r10 \u003d SimpleCharStream input_stream\u003e\n  $c19 \u003d $r10.BeginToken()\n  XPathParserTokenManager: char curChar\u003e \u003d $c19\n  goto B4\n}",
      "B7 {\n  goto B9\n}",
      "B8 {\n  $r13 :\u003d @caughtexception\n  goto B1\n}",
      "B9 {\n  XPathParserTokenManager: int jjmatchedKind\u003e \u003d 2147483647\n  XPathParserTokenManager: int jjmatchedPos\u003e \u003d 0\n  i23 \u003d r0.jjMoveStringLiteralDfa0_0()\n  $i1 \u003d XPathParserTokenManager: int jjmatchedKind\u003e\n  if ($i1 \u003d\u003d 2147483647) goto B10 else B14\n}",
      "B10 {\n  $i2 \u003d XPathParserTokenManager: int jjmatchedPos\u003e\n  $i3 \u003d $i2 + 1\n  if ($i3 \u003e\u003d i23) goto B11 else B12\n}",
      "B11 {\n  $r9 \u003d SimpleCharStream input_stream\u003e\n  $i12 \u003d XPathParserTokenManager: int jjmatchedPos\u003e\n  $i13 \u003d i23 - $i12\n  $i14 \u003d $i13 - 1\n  $r9.backup($i14)\n}",
      "B12 {\n  $r8 \u003d XPathParserTokenManager: long[] jjtoToken\u003e\n  $i4 \u003d XPathParserTokenManager: int jjmatchedKind\u003e\n  $i5 \u003d $i4 \u003e\u003e 6\n  $l9 \u003d $r8[$i5]\n  $i6 \u003d XPathParserTokenManager: int jjmatchedKind\u003e\n  $i7 \u003d $i6 \u0026 63\n  $l8 \u003d 1L \u003c\u003c $i7\n  $l10 \u003d $l9 \u0026 $l8\n  $b11 \u003d $l10 cmp 0L\n  if ($b11 \u003d\u003d false) goto B13 else B1\n}",
      "B13 {\n  r17 \u003d r0.jjFillToken()\n  return\n}",
      "B14 {\n  $r2 \u003d SimpleCharStream input_stream\u003e\n  i24 \u003d $r2.getEndLine()\n  $r3 \u003d SimpleCharStream input_stream\u003e\n  i25 \u003d $r3.getEndColumn()\n  r18 \u003d null\n  z0 \u003d 0\n  z2 \u003d 0\n  z1 \u003d 0\n  $r4 \u003d SimpleCharStream input_stream\u003e\n  $r4.readChar()\n  $r5 \u003d SimpleCharStream input_stream\u003e\n  $r5.backup(1)\n  goto B22\n}",
      "B15 {\n  $r11 :\u003d @caughtexception\n  z0 \u003d 1\n  z2 \u003d 1\n  z1 \u003d 1\n  if (i23 \u003e 1) goto B16 else B17\n}",
      "B16 {\n  $r19 \u003d \"\"\n  goto B18\n}",
      "B17 {\n  $r12 \u003d SimpleCharStream input_stream\u003e\n  $r19 \u003d $r12.GetImage()\n}",
      "B18 {\n  r18 \u003d $r19\n  $c20 \u003d XPathParserTokenManager: char curChar\u003e\n  $i29 \u003d (int) $c20\n  if ($i29 \u003d\u003d 10) goto B19 else B20\n}",
      "B19 {\n  $c21 \u003d XPathParserTokenManager: char curChar\u003e\n  $i30 \u003d (int) $c21\n  if ($i30 !\u003d 13) goto B20 else B21\n}",
      "B20 {\n  i24 \u003d i24 + 1\n  i25 \u003d 0\n  goto B22\n}",
      "B21 {\n  i25 \u003d i25 + 1\n}",
      "B22 {\n  if (z1 !\u003d 0) goto B23 else B27\n}",
      "B23 {\n  $r6 \u003d SimpleCharStream input_stream\u003e\n  $r6.backup(1)\n  if (i23 \u003e 1) goto B24 else B25\n}",
      "B24 {\n  $r20 \u003d \"\"\n  goto B26\n}",
      "B25 {\n  $r7 \u003d SimpleCharStream input_stream\u003e\n  $r20 \u003d $r7.GetImage()\n}",
      "B26 {\n  r18 \u003d $r20\n}",
      "B27 {\n  $r22 \u003d TokenMgrError\n  $i26 \u003d XPathParserTokenManager: int curLexState\u003e\n  $c27 \u003d XPathParserTokenManager: char curChar\u003e\n  new TokenMgrError(z2, $i26, i24, i25, r18, $c27, 0)\n  throw $r22\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B4",
      "B7 --\u003e B9",
      "B8 --\u003e B1",
      "B9 --\u003e B10",
      "B9 --\u003e B14",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B1",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B22",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B22 --\u003e B23",
      "B22 --\u003e B27",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B26",
      "B26 --\u003e B27",
      "B27 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "XPathParserTokenManager#jjFillToken(...0)",
        "body": "{\r\n    final Token t \u003d Token.newToken(jjmatchedKind);\r\n    t.kind \u003d jjmatchedKind;\r\n    final String im \u003d jjstrLiteralImages[jjmatchedKind];\r\n    t.image \u003d im \u003d\u003d null ? input_stream.GetImage() : im;\r\n    t.beginLine \u003d input_stream.getBeginLine();\r\n    t.beginColumn \u003d input_stream.getBeginColumn();\r\n    t.endLine \u003d input_stream.getEndLine();\r\n    t.endColumn \u003d input_stream.getEndColumn();\r\n    return t;\r\n}"
      },
      {
        "name": "XPathParserTokenManager#jjMoveStringLiteralDfa0_0(...0)",
        "body": "{\r\n    switch(curChar) {\r\n        case 33:\r\n            return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);\r\n        case 36:\r\n            return jjStopAtPos(0, 17);\r\n        case 40:\r\n            return jjStopAtPos(0, 81);\r\n        case 41:\r\n            return jjStopAtPos(0, 82);\r\n        case 42:\r\n            return jjStopAtPos(0, 89);\r\n        case 43:\r\n            return jjStopAtPos(0, 9);\r\n        case 44:\r\n            return jjStopAtPos(0, 88);\r\n        case 45:\r\n            return jjStopAtPos(0, 10);\r\n        case 46:\r\n            jjmatchedKind \u003d 83;\r\n            return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);\r\n        case 47:\r\n            jjmatchedKind \u003d 6;\r\n            return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);\r\n        case 58:\r\n            return jjStopAtPos(0, 80);\r\n        case 60:\r\n            jjmatchedKind \u003d 13;\r\n            return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);\r\n        case 61:\r\n            return jjStopAtPos(0, 11);\r\n        case 62:\r\n            jjmatchedKind \u003d 15;\r\n            return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);\r\n        case 64:\r\n            return jjStopAtPos(0, 87);\r\n        case 91:\r\n            return jjStopAtPos(0, 85);\r\n        case 93:\r\n            return jjStopAtPos(0, 86);\r\n        case 97:\r\n            return jjMoveStringLiteralDfa1_0(0x10c010000000L, 0x0L);\r\n        case 98:\r\n            return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);\r\n        case 99:\r\n            return jjMoveStringLiteralDfa1_0(0x1204001200000000L, 0x1000L);\r\n        case 100:\r\n            return jjMoveStringLiteralDfa1_0(0x880040000000L, 0x0L);\r\n        case 101:\r\n            return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);\r\n        case 102:\r\n            return jjMoveStringLiteralDfa1_0(0x240000000000L, 0x4840L);\r\n        case 105:\r\n            return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);\r\n        case 107:\r\n            return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);\r\n        case 108:\r\n            return jjMoveStringLiteralDfa1_0(0x21000000000000L, 0x100L);\r\n        case 109:\r\n            return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);\r\n        case 110:\r\n            return jjMoveStringLiteralDfa1_0(0xc0010080000000L, 0x292L);\r\n        case 111:\r\n            return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);\r\n        case 112:\r\n            return jjMoveStringLiteralDfa1_0(0x2422400000000L, 0x0L);\r\n        case 114:\r\n            return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);\r\n        case 115:\r\n            return jjMoveStringLiteralDfa1_0(0xe500000800000000L, 0x401L);\r\n        case 116:\r\n            return jjMoveStringLiteralDfa1_0(0x100000000L, 0x24L);\r\n        case 124:\r\n            return jjStopAtPos(0, 8);\r\n        default:\r\n            return jjMoveNfa_0(0, 0);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.parser.XPathParserTokenManager",
    "methodName": "SwitchTo",
    "signature": "void SwitchTo(int)",
    "visibility": "public",
    "body": "{\r\n    if (lexState \u003e\u003d 1 || lexState \u003c 0) {\r\n        throw new TokenMgrError(\"Error: Ignoring invalid lexical state : \" + lexState + \". State unchanged.\", TokenMgrError.INVALID_LEXICAL_STATE);\r\n    }\r\n    curLexState \u003d lexState;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003e\u003d 1) → B1 | else → B2",
      "B1 : If(i0 \u003e\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  XPathParserTokenManager\n  i0 :\u003d @parameter0: int\n  if (i0 \u003e\u003d 1) goto B1 else B2\n}",
      "B1 {\n  if (i0 \u003e\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r0 \u003d TokenMgrError\n  $r1 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d $r1.append(\"Error: Ignoring invalid lexical state : \")\n  $r3 \u003d $r2.append(i0)\n  $r4 \u003d $r3.append(\". State unchanged.\")\n  $r5 \u003d $r4.toString()\n  new TokenMgrError($r5, 2)\n  throw $r0\n}",
      "B3 {\n  XPathParserTokenManager: int curLexState\u003e \u003d i0\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.ri.QName",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (this \u003d\u003d object) {\r\n        return true;\r\n    }\r\n    if (!(object instanceof QName)) {\r\n        return false;\r\n    }\r\n    return qualifiedName.equals(((QName) object).qualifiedName);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  QName\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d QName\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r4 \u003d String qualifiedName\u003e\n  $r2 \u003d QName) r1\n  $r3 \u003d String qualifiedName\u003e\n  $z1 \u003d $r4.equals($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.servlet.HttpSessionHandler",
    "methodName": "getProperty",
    "signature": "java.lang.Object getProperty(java.lang.Object,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    final HttpSessionAndServletContext handle \u003d (HttpSessionAndServletContext) bean;\r\n    final HttpSession session \u003d handle.getSession();\r\n    if (session !\u003d null) {\r\n        final Object object \u003d session.getAttribute(property);\r\n        if (object !\u003d null) {\r\n            return object;\r\n        }\r\n    }\r\n    return super.getProperty(handle.getServletContext(), property);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r7 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  HttpSessionHandler\n  Object\n  String\n  r1 \u003d HttpSessionAndServletContext) r0\n  r2 \u003d r1.getSession()\n  if (r2 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  r7 \u003d r2.getAttribute(r4)\n  if (r7 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r5 \u003d r1.getServletContext()\n  $r6 \u003d r3.getProperty($r5, r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.servlet.HttpSessionHandler",
    "methodName": "setProperty",
    "signature": "void setProperty(java.lang.Object,java.lang.String,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final HttpSessionAndServletContext handle \u003d (HttpSessionAndServletContext) bean;\r\n    final HttpSession session \u003d handle.getSession();\r\n    if (session \u003d\u003d null) {\r\n        throw new JXPathException(\"Cannot set session attribute: \" + \"there is no session\");\r\n    }\r\n    session.setAttribute(property, value);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  HttpSessionHandler\n  Object\n  String\n  Object\n  r1 \u003d HttpSessionAndServletContext) r0\n  r2 \u003d r1.getSession()\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d JXPathException\n  new JXPathException(\"Cannot set session attribute: there is no session\")\n  throw $r5\n}",
      "B2 {\n  r2.setAttribute(r3, r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.servlet.JXPathServletContexts",
    "methodName": "getApplicationContext",
    "signature": "org.apache.commons.jxpath.JXPathContext getApplicationContext(javax.servlet.ServletContext)",
    "visibility": "public",
    "body": "{\r\n    JXPathContext context \u003d (JXPathContext) servletContext.getAttribute(Constants.JXPATH_CONTEXT);\r\n    if (context \u003d\u003d null) {\r\n        context \u003d factory.newContext(null, servletContext);\r\n        context.setVariables(new KeywordVariables(Constants.APPLICATION_SCOPE, servletContext));\r\n        servletContext.setAttribute(Constants.JXPATH_CONTEXT, context);\r\n    }\r\n    return context;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ServletContext\n  $r1 \u003d r0.getAttribute(\"org.apache.commons.jxpath.JXPATH_CONTEXT\")\n  r4 \u003d JXPathContext) $r1\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d JXPathContextFactory factory\u003e\n  r4 \u003d $r2.newContext(null, r0)\n  $r3 \u003d KeywordVariables\n  new KeywordVariables(\"application\", r0)\n  r4.setVariables($r3)\n  r0.setAttribute(\"org.apache.commons.jxpath.JXPATH_CONTEXT\", r4)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.servlet.JXPathServletContexts",
    "methodName": "getPageContext",
    "signature": "org.apache.commons.jxpath.JXPathContext getPageContext(javax.servlet.jsp.PageContext)",
    "visibility": "public",
    "body": "{\r\n    JXPathContext context \u003d (JXPathContext) pageContext.getAttribute(Constants.JXPATH_CONTEXT);\r\n    if (context \u003d\u003d null) {\r\n        final JXPathContext parentContext \u003d getRequestContext(pageContext.getRequest(), pageContext.getServletContext());\r\n        context \u003d factory.newContext(parentContext, pageContext);\r\n        context.setVariables(new KeywordVariables(Constants.PAGE_SCOPE, new PageScopeContext(pageContext)));\r\n        pageContext.setAttribute(Constants.JXPATH_CONTEXT, context);\r\n    }\r\n    return context;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r8 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PageContext\n  $r1 \u003d r0.getAttribute(\"org.apache.commons.jxpath.JXPATH_CONTEXT\")\n  r8 \u003d JXPathContext) $r1\n  if (r8 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.getRequest()\n  $r2 \u003d r0.getServletContext()\n  r4 \u003d JXPathServletContexts.getRequestContext($r3, $r2)\n  $r5 \u003d JXPathContextFactory factory\u003e\n  r8 \u003d $r5.newContext(r4, r0)\n  $r6 \u003d KeywordVariables\n  $r7 \u003d PageScopeContext\n  new PageScopeContext(r0)\n  new KeywordVariables(\"page\", $r7)\n  r8.setVariables($r6)\n  r0.setAttribute(\"org.apache.commons.jxpath.JXPATH_CONTEXT\", r8)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JXPathServletContexts#getRequestContext(...2)",
        "body": "{\r\n    JXPathContext context \u003d (JXPathContext) request.getAttribute(Constants.JXPATH_CONTEXT);\r\n    // If we are in an included JSP or Servlet, the request parameter\r\n    // will represent the included URL, but the JXPathContext we have\r\n    // just acquired will represent the outer request.\r\n    if (context !\u003d null) {\r\n        final ServletRequestAndContext handle \u003d (ServletRequestAndContext) context.getContextBean();\r\n        if (handle.getServletRequest() \u003d\u003d request) {\r\n            return context;\r\n        }\r\n    }\r\n    JXPathContext parentContext \u003d null;\r\n    if (request instanceof HttpServletRequest) {\r\n        final HttpSession session \u003d ((HttpServletRequest) request).getSession(false);\r\n        if (session !\u003d null) {\r\n            parentContext \u003d getSessionContext(session, servletContext);\r\n        } else {\r\n            parentContext \u003d getApplicationContext(servletContext);\r\n        }\r\n    }\r\n    final ServletRequestAndContext handle \u003d new ServletRequestAndContext(request, servletContext);\r\n    context \u003d factory.newContext(parentContext, handle);\r\n    context.setVariables(new KeywordVariables(Constants.REQUEST_SCOPE, handle));\r\n    request.setAttribute(Constants.JXPATH_CONTEXT, context);\r\n    return context;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.servlet.JXPathServletContexts",
    "methodName": "getRequestContext",
    "signature": "org.apache.commons.jxpath.JXPathContext getRequestContext(javax.servlet.ServletRequest,javax.servlet.ServletContext)",
    "visibility": "public",
    "body": "{\r\n    JXPathContext context \u003d (JXPathContext) request.getAttribute(Constants.JXPATH_CONTEXT);\r\n    // If we are in an included JSP or Servlet, the request parameter\r\n    // will represent the included URL, but the JXPathContext we have\r\n    // just acquired will represent the outer request.\r\n    if (context !\u003d null) {\r\n        final ServletRequestAndContext handle \u003d (ServletRequestAndContext) context.getContextBean();\r\n        if (handle.getServletRequest() \u003d\u003d request) {\r\n            return context;\r\n        }\r\n    }\r\n    JXPathContext parentContext \u003d null;\r\n    if (request instanceof HttpServletRequest) {\r\n        final HttpSession session \u003d ((HttpServletRequest) request).getSession(false);\r\n        if (session !\u003d null) {\r\n            parentContext \u003d getSessionContext(session, servletContext);\r\n        } else {\r\n            parentContext \u003d getApplicationContext(servletContext);\r\n        }\r\n    }\r\n    final ServletRequestAndContext handle \u003d new ServletRequestAndContext(request, servletContext);\r\n    context \u003d factory.newContext(parentContext, handle);\r\n    context.setVariables(new KeywordVariables(Constants.REQUEST_SCOPE, handle));\r\n    request.setAttribute(Constants.JXPATH_CONTEXT, context);\r\n    return context;\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r6 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($r5 !\u003d r0) → B2 | else → B3",
      "B3 : If($z0 \u003d\u003d false) → B4 | else → B7",
      "B4 : If(r9 \u003d\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  ServletRequest\n  ServletContext\n  $r1 \u003d r0.getAttribute(\"org.apache.commons.jxpath.JXPATH_CONTEXT\")\n  r6 \u003d JXPathContext) $r1\n  if (r6 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r4 \u003d r6.getContextBean()\n  r7 \u003d ServletRequestAndContext) $r4\n  $r5 \u003d r7.getServletRequest()\n  if ($r5 !\u003d r0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  r8 \u003d null\n  $z0 \u003d HttpServletRequest\n  if ($z0 \u003d\u003d false) goto B4 else B7\n}",
      "B4 {\n  $r3 \u003d HttpServletRequest) r0\n  r9 \u003d $r3.getSession(0)\n  if (r9 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  r8 \u003d JXPathServletContexts.getSessionContext(r9, r2)\n  goto B7\n}",
      "B6 {\n  r8 \u003d JXPathServletContexts.getApplicationContext(r2)\n}",
      "B7 {\n  $r10 \u003d ServletRequestAndContext\n  new ServletRequestAndContext(r0, r2)\n  $r11 \u003d JXPathContextFactory factory\u003e\n  $r12 \u003d $r11.newContext(r8, $r10)\n  $r13 \u003d KeywordVariables\n  new KeywordVariables(\"request\", $r10)\n  $r12.setVariables($r13)\n  r0.setAttribute(\"org.apache.commons.jxpath.JXPATH_CONTEXT\", $r12)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JXPathServletContexts#getApplicationContext(...1)",
        "body": "{\r\n    JXPathContext context \u003d (JXPathContext) servletContext.getAttribute(Constants.JXPATH_CONTEXT);\r\n    if (context \u003d\u003d null) {\r\n        context \u003d factory.newContext(null, servletContext);\r\n        context.setVariables(new KeywordVariables(Constants.APPLICATION_SCOPE, servletContext));\r\n        servletContext.setAttribute(Constants.JXPATH_CONTEXT, context);\r\n    }\r\n    return context;\r\n}"
      },
      {
        "name": "JXPathServletContexts#getSessionContext(...2)",
        "body": "{\r\n    JXPathContext context \u003d (JXPathContext) session.getAttribute(Constants.JXPATH_CONTEXT);\r\n    if (context \u003d\u003d null) {\r\n        final JXPathContext parentContext \u003d getApplicationContext(servletContext);\r\n        final HttpSessionAndServletContext handle \u003d new HttpSessionAndServletContext(session, servletContext);\r\n        context \u003d factory.newContext(parentContext, handle);\r\n        context.setVariables(new KeywordVariables(Constants.SESSION_SCOPE, handle));\r\n        session.setAttribute(Constants.JXPATH_CONTEXT, context);\r\n    }\r\n    return context;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.servlet.JXPathServletContexts",
    "methodName": "getSessionContext",
    "signature": "org.apache.commons.jxpath.JXPathContext getSessionContext(javax.servlet.http.HttpSession,javax.servlet.ServletContext)",
    "visibility": "public",
    "body": "{\r\n    JXPathContext context \u003d (JXPathContext) session.getAttribute(Constants.JXPATH_CONTEXT);\r\n    if (context \u003d\u003d null) {\r\n        final JXPathContext parentContext \u003d getApplicationContext(servletContext);\r\n        final HttpSessionAndServletContext handle \u003d new HttpSessionAndServletContext(session, servletContext);\r\n        context \u003d factory.newContext(parentContext, handle);\r\n        context.setVariables(new KeywordVariables(Constants.SESSION_SCOPE, handle));\r\n        session.setAttribute(Constants.JXPATH_CONTEXT, context);\r\n    }\r\n    return context;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r7 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  HttpSession\n  ServletContext\n  $r1 \u003d r0.getAttribute(\"org.apache.commons.jxpath.JXPATH_CONTEXT\")\n  r7 \u003d JXPathContext) $r1\n  if (r7 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r3 \u003d JXPathServletContexts.getApplicationContext(r2)\n  $r4 \u003d HttpSessionAndServletContext\n  new HttpSessionAndServletContext(r0, r2)\n  $r5 \u003d JXPathContextFactory factory\u003e\n  r7 \u003d $r5.newContext(r3, $r4)\n  $r6 \u003d KeywordVariables\n  new KeywordVariables(\"session\", $r4)\n  r7.setVariables($r6)\n  r0.setAttribute(\"org.apache.commons.jxpath.JXPATH_CONTEXT\", r7)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "JXPathServletContexts#getApplicationContext(...1)",
        "body": "{\r\n    JXPathContext context \u003d (JXPathContext) servletContext.getAttribute(Constants.JXPATH_CONTEXT);\r\n    if (context \u003d\u003d null) {\r\n        context \u003d factory.newContext(null, servletContext);\r\n        context.setVariables(new KeywordVariables(Constants.APPLICATION_SCOPE, servletContext));\r\n        servletContext.setAttribute(Constants.JXPATH_CONTEXT, context);\r\n    }\r\n    return context;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.servlet.KeywordVariables",
    "methodName": "getVariable",
    "signature": "java.lang.Object getVariable(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return isDeclaredVariable(variable) ? value : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  KeywordVariables\n  String\n  $z0 \u003d r0.isDeclaredVariable(r1)\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Object value\u003e\n  goto B3\n}",
      "B2 {\n  $r2 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "KeywordVariables#isDeclaredVariable(...1)",
        "body": "{\r\n    return variable.equals(keyword);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.servlet.PageContextHandler",
    "methodName": "getPropertyNames",
    "signature": "java.lang.String[] getPropertyNames(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final HashSet\u003cString\u003e set \u003d new HashSet\u003c\u003e();\r\n    Enumeration\u003cString\u003e e \u003d ((PageContext) pageContext).getAttributeNamesInScope(PageContext.PAGE_SCOPE);\r\n    while (e.hasMoreElements()) {\r\n        set.add(e.nextElement());\r\n    }\r\n    e \u003d ((PageContext) pageContext).getAttributeNamesInScope(PageContext.REQUEST_SCOPE);\r\n    while (e.hasMoreElements()) {\r\n        set.add(e.nextElement());\r\n    }\r\n    e \u003d ((PageContext) pageContext).getAttributeNamesInScope(PageContext.SESSION_SCOPE);\r\n    while (e.hasMoreElements()) {\r\n        set.add(e.nextElement());\r\n    }\r\n    e \u003d ((PageContext) pageContext).getAttributeNamesInScope(PageContext.APPLICATION_SCOPE);\r\n    while (e.hasMoreElements()) {\r\n        set.add(e.nextElement());\r\n    }\r\n    return set.toArray(new String[set.size()]);\r\n}",
    "nodes": 13,
    "edges": 16,
    "cc": 5,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6",
      "B7 : If($z2 \u003d\u003d false) → B8 | else → B9",
      "B10 : If($z3 \u003d\u003d false) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  PageContextHandler\n  Object\n  $r0 \u003d HashSet\n  new HashSet()\n  $r2 \u003d PageContext) r1\n  r18 \u003d $r2.getAttributeNamesInScope(1)\n}",
      "B1 {\n  $z0 \u003d r18.hasMoreElements()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r15 \u003d r18.nextElement()\n  $r16 \u003d String) $r15\n  $r0.add($r16)\n  goto B1\n}",
      "B3 {\n  $r3 \u003d PageContext) r1\n  r19 \u003d $r3.getAttributeNamesInScope(2)\n}",
      "B4 {\n  $z1 \u003d r19.hasMoreElements()\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r13 \u003d r19.nextElement()\n  $r14 \u003d String) $r13\n  $r0.add($r14)\n  goto B4\n}",
      "B6 {\n  $r4 \u003d PageContext) r1\n  r20 \u003d $r4.getAttributeNamesInScope(3)\n}",
      "B7 {\n  $z2 \u003d r20.hasMoreElements()\n  if ($z2 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $r11 \u003d r20.nextElement()\n  $r12 \u003d String) $r11\n  $r0.add($r12)\n  goto B7\n}",
      "B9 {\n  $r5 \u003d PageContext) r1\n  r21 \u003d $r5.getAttributeNamesInScope(4)\n}",
      "B10 {\n  $z3 \u003d r21.hasMoreElements()\n  if ($z3 \u003d\u003d false) goto B11 else B12\n}",
      "B11 {\n  $r9 \u003d r21.nextElement()\n  $r10 \u003d String) $r9\n  $r0.add($r10)\n  goto B10\n}",
      "B12 {\n  $i0 \u003d $r0.size()\n  $r6 \u003d String)[$i0]\n  $r7 \u003d $r0.toArray($r6)\n  $r8 \u003d String[]) $r7\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B7",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B10",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.servlet.PageScopeContextHandler",
    "methodName": "getPropertyNames",
    "signature": "java.lang.String[] getPropertyNames(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final Enumeration\u003cString\u003e e \u003d ((PageScopeContext) pageScope).getAttributeNames();\r\n    final ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e(DEFAULT_LIST_SIZE);\r\n    while (e.hasMoreElements()) {\r\n        list.add(e.nextElement());\r\n    }\r\n    return list.toArray(new String[list.size()]);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  PageScopeContextHandler\n  Object\n  $r1 \u003d PageScopeContext) r0\n  r2 \u003d $r1.getAttributeNames()\n  $r3 \u003d ArrayList\n  new ArrayList(16)\n}",
      "B1 {\n  $z0 \u003d r2.hasMoreElements()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d r2.nextElement()\n  $r8 \u003d String) $r7\n  $r3.add($r8)\n  goto B1\n}",
      "B3 {\n  $i0 \u003d $r3.size()\n  $r4 \u003d String)[$i0]\n  $r5 \u003d $r3.toArray($r4)\n  $r6 \u003d String[]) $r5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.servlet.ServletRequestAndContext",
    "methodName": "getSession",
    "signature": "javax.servlet.http.HttpSession getSession()",
    "visibility": "public",
    "body": "{\r\n    return request instanceof HttpServletRequest ? ((HttpServletRequest) request).getSession(false) : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ServletRequestAndContext\n  $r1 \u003d ServletRequest request\u003e\n  $z0 \u003d HttpServletRequest\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d ServletRequest request\u003e\n  $r3 \u003d HttpServletRequest) $r2\n  $r4 \u003d $r3.getSession(0)\n  goto B3\n}",
      "B2 {\n  $r4 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.servlet.ServletRequestHandler",
    "methodName": "getProperty",
    "signature": "java.lang.Object getProperty(java.lang.Object,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    final ServletRequestAndContext handle \u003d (ServletRequestAndContext) bean;\r\n    final ServletRequest servletRequest \u003d handle.getServletRequest();\r\n    final String[] strings \u003d servletRequest.getParameterValues(property);\r\n    if (strings !\u003d null) {\r\n        if (strings.length \u003d\u003d 0) {\r\n            return null;\r\n        }\r\n        if (strings.length \u003d\u003d 1) {\r\n            return strings[0];\r\n        }\r\n        return strings;\r\n    }\r\n    final Object object \u003d servletRequest.getAttribute(property);\r\n    if (object !\u003d null) {\r\n        return object;\r\n    }\r\n    return super.getProperty(bean, property);\r\n}",
    "nodes": 9,
    "edges": 8,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r4 \u003d\u003d null) → B1 | else → B6",
      "B1 : If($i0 !\u003d 0) → B2 | else → B3",
      "B3 : If($i1 !\u003d 1) → B4 | else → B5",
      "B6 : If(r5 \u003d\u003d null) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  ServletRequestHandler\n  Object\n  String\n  r1 \u003d ServletRequestAndContext) r0\n  r2 \u003d r1.getServletRequest()\n  r4 \u003d r2.getParameterValues(r3)\n  if (r4 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  $i0 \u003d lengthof r4\n  if ($i0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $i1 \u003d lengthof r4\n  if ($i1 !\u003d 1) goto B4 else B5\n}",
      "B4 {\n  $r8 \u003d r4[0]\n  return\n}",
      "B5 {\n  return\n}",
      "B6 {\n  r5 \u003d r2.getAttribute(r3)\n  if (r5 \u003d\u003d null) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $r7 \u003d r6.getProperty(r0, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.util.BasicTypeConverter",
    "methodName": "canConvert",
    "signature": "boolean canConvert(java.lang.Object,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d null) {\r\n        return true;\r\n    }\r\n    final Class useType \u003d TypeUtils.wrapPrimitive(toType);\r\n    final Class fromType \u003d object.getClass();\r\n    if (useType.isAssignableFrom(fromType)) {\r\n        return true;\r\n    }\r\n    if (useType \u003d\u003d String.class) {\r\n        return true;\r\n    }\r\n    if (object instanceof Boolean \u0026\u0026 (Number.class.isAssignableFrom(useType) || \"java.util.concurrent.atomic.AtomicBoolean\".equals(useType.getName()))) {\r\n        return true;\r\n    }\r\n    if (object instanceof Number \u0026\u0026 (Number.class.isAssignableFrom(useType) || useType \u003d\u003d Boolean.class)) {\r\n        return true;\r\n    }\r\n    if (object instanceof String \u0026\u0026 (useType \u003d\u003d Boolean.class || useType \u003d\u003d Character.class || useType \u003d\u003d Byte.class || useType \u003d\u003d Short.class || useType \u003d\u003d Integer.class || useType \u003d\u003d Long.class || useType \u003d\u003d Float.class || useType \u003d\u003d Double.class)) {\r\n        return true;\r\n    }\r\n    if (fromType.isArray()) {\r\n        // Collection -\u003e array\r\n        if (useType.isArray()) {\r\n            final Class cType \u003d useType.getComponentType();\r\n            final int length \u003d Array.getLength(object);\r\n            for (int i \u003d 0; i \u003c length; i++) {\r\n                final Object value \u003d Array.get(object, i);\r\n                if (!canConvert(value, cType)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        if (Collection.class.isAssignableFrom(useType)) {\r\n            return canCreateCollection(useType);\r\n        }\r\n        if (Array.getLength(object) \u003e 0) {\r\n            final Object value \u003d Array.get(object, 0);\r\n            return canConvert(value, useType);\r\n        }\r\n        return canConvert(\"\", useType);\r\n    }\r\n    if (object instanceof Collection) {\r\n        // Collection -\u003e array\r\n        if (useType.isArray()) {\r\n            final Class cType \u003d useType.getComponentType();\r\n            final Iterator it \u003d ((Collection) object).iterator();\r\n            while (it.hasNext()) {\r\n                final Object value \u003d it.next();\r\n                if (!canConvert(value, cType)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        if (Collection.class.isAssignableFrom(useType)) {\r\n            return canCreateCollection(useType);\r\n        }\r\n        if (((Collection) object).size() \u003e 0) {\r\n            Object value;\r\n            if (object instanceof List) {\r\n                value \u003d ((List) object).get(0);\r\n            } else {\r\n                final Iterator it \u003d ((Collection) object).iterator();\r\n                value \u003d it.next();\r\n            }\r\n            return canConvert(value, useType);\r\n        }\r\n        return canConvert(\"\", useType);\r\n    }\r\n    if (object instanceof NodeSet) {\r\n        return canConvert(((NodeSet) object).getValues(), useType);\r\n    }\r\n    if (object instanceof Pointer) {\r\n        return canConvert(((Pointer) object).getValue(), useType);\r\n    }\r\n    return ConvertUtils.lookup(useType) !\u003d null;\r\n}",
    "nodes": 61,
    "edges": 76,
    "cc": 17,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If(r2 !\u003d class \"Ljava/lang/String;\") → B5 | else → B6",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B10",
      "B7 : If($z25 !\u003d 0) → B8 | else → B9",
      "B8 : If($z26 \u003d\u003d false) → B9 | else → B10",
      "B10 : If($z2 \u003d\u003d false) → B11 | else → B14",
      "B11 : If($z24 !\u003d 0) → B12 | else → B13",
      "B12 : If(r2 !\u003d class \"Ljava/lang/Boolean;\") → B13 | else → B14",
      "B14 : If($z3 \u003d\u003d false) → B15 | else → B24",
      "B15 : If(r2 \u003d\u003d class \"Ljava/lang/Boolean;\") → B16 | else → B23",
      "B16 : If(r2 \u003d\u003d class \"Ljava/lang/Character;\") → B17 | else → B23",
      "B17 : If(r2 \u003d\u003d class \"Ljava/lang/Byte;\") → B18 | else → B23",
      "B18 : If(r2 \u003d\u003d class \"Ljava/lang/Short;\") → B19 | else → B23",
      "B19 : If(r2 \u003d\u003d class \"Ljava/lang/Integer;\") → B20 | else → B23",
      "B20 : If(r2 \u003d\u003d class \"Ljava/lang/Long;\") → B21 | else → B23",
      "B21 : If(r2 \u003d\u003d class \"Ljava/lang/Float;\") → B22 | else → B23",
      "B22 : If(r2 !\u003d class \"Ljava/lang/Double;\") → B23 | else → B24",
      "B24 : If($z4 \u003d\u003d false) → B25 | else → B37",
      "B25 : If($z18 \u003d\u003d false) → B26 | else → B32",
      "B27 : If(i3 \u003e\u003d i2) → B28 | else → B31",
      "B28 : If($z23 !\u003d 0) → B29 | else → B30",
      "B32 : If($z19 \u003d\u003d false) → B33 | else → B34",
      "B34 : If($i1 \u003c\u003d 0) → B35 | else → B36",
      "B37 : If($z5 \u003d\u003d false) → B38 | else → B53",
      "B38 : If($z10 \u003d\u003d false) → B39 | else → B45",
      "B40 : If($z16 \u003d\u003d false) → B41 | else → B44",
      "B41 : If($z17 !\u003d 0) → B42 | else → B43",
      "B45 : If($z11 \u003d\u003d false) → B46 | else → B47",
      "B47 : If($i0 \u003c\u003d 0) → B48 | else → B52",
      "B48 : If($z13 \u003d\u003d false) → B49 | else → B50",
      "B53 : If($z6 \u003d\u003d false) → B54 | else → B55",
      "B55 : If($z7 \u003d\u003d false) → B56 | else → B57",
      "B57 : If($r4 \u003d\u003d null) → B58 | else → B59"
    ],
    "blockList": [
      "B0 {\n  BasicTypeConverter\n  Object\n  Class\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r2 \u003d TypeUtils.wrapPrimitive(r1)\n  r3 \u003d r0.getClass()\n  $z0 \u003d r2.isAssignableFrom(r3)\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r2 !\u003d class \"Ljava/lang/String;\") goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $z1 \u003d Boolean\n  if ($z1 \u003d\u003d false) goto B7 else B10\n}",
      "B7 {\n  $r18 \u003d class \"Ljava/lang/Number;\"\n  $z25 \u003d $r18.isAssignableFrom(r2)\n  if ($z25 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  $r20 \u003d AtomicBoolean\"\n  $r19 \u003d r2.getName()\n  $z26 \u003d $r20.equals($r19)\n  if ($z26 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $z2 \u003d Number\n  if ($z2 \u003d\u003d false) goto B11 else B14\n}",
      "B11 {\n  $r17 \u003d class \"Ljava/lang/Number;\"\n  $z24 \u003d $r17.isAssignableFrom(r2)\n  if ($z24 !\u003d 0) goto B12 else B13\n}",
      "B12 {\n  if (r2 !\u003d class \"Ljava/lang/Boolean;\") goto B13 else B14\n}",
      "B13 {\n  return\n}",
      "B14 {\n  $z3 \u003d String\n  if ($z3 \u003d\u003d false) goto B15 else B24\n}",
      "B15 {\n  if (r2 \u003d\u003d class \"Ljava/lang/Boolean;\") goto B16 else B23\n}",
      "B16 {\n  if (r2 \u003d\u003d class \"Ljava/lang/Character;\") goto B17 else B23\n}",
      "B17 {\n  if (r2 \u003d\u003d class \"Ljava/lang/Byte;\") goto B18 else B23\n}",
      "B18 {\n  if (r2 \u003d\u003d class \"Ljava/lang/Short;\") goto B19 else B23\n}",
      "B19 {\n  if (r2 \u003d\u003d class \"Ljava/lang/Integer;\") goto B20 else B23\n}",
      "B20 {\n  if (r2 \u003d\u003d class \"Ljava/lang/Long;\") goto B21 else B23\n}",
      "B21 {\n  if (r2 \u003d\u003d class \"Ljava/lang/Float;\") goto B22 else B23\n}",
      "B22 {\n  if (r2 !\u003d class \"Ljava/lang/Double;\") goto B23 else B24\n}",
      "B23 {\n  return\n}",
      "B24 {\n  $z4 \u003d r3.isArray()\n  if ($z4 \u003d\u003d false) goto B25 else B37\n}",
      "B25 {\n  $z18 \u003d r2.isArray()\n  if ($z18 \u003d\u003d false) goto B26 else B32\n}",
      "B26 {\n  r21 \u003d r2.getComponentType()\n  i2 \u003d Array.getLength(r0)\n  i3 \u003d 0\n}",
      "B27 {\n  if (i3 \u003e\u003d i2) goto B28 else B31\n}",
      "B28 {\n  r16 \u003d Array.get(r0, i3)\n  $z23 \u003d r5.canConvert(r16, r21)\n  if ($z23 !\u003d 0) goto B29 else B30\n}",
      "B29 {\n  return\n}",
      "B30 {\n  i3 \u003d i3 + 1\n  goto B27\n}",
      "B31 {\n  return\n}",
      "B32 {\n  $r15 \u003d class \"Ljava/util/Collection;\"\n  $z19 \u003d $r15.isAssignableFrom(r2)\n  if ($z19 \u003d\u003d false) goto B33 else B34\n}",
      "B33 {\n  $z22 \u003d r5.canCreateCollection(r2)\n  return\n}",
      "B34 {\n  $i1 \u003d Array.getLength(r0)\n  if ($i1 \u003c\u003d 0) goto B35 else B36\n}",
      "B35 {\n  r22 \u003d Array.get(r0, 0)\n  $z21 \u003d r5.canConvert(r22, r2)\n  return\n}",
      "B36 {\n  $z20 \u003d r5.canConvert(\"\", r2)\n  return\n}",
      "B37 {\n  $z5 \u003d Collection\n  if ($z5 \u003d\u003d false) goto B38 else B53\n}",
      "B38 {\n  $z10 \u003d r2.isArray()\n  if ($z10 \u003d\u003d false) goto B39 else B45\n}",
      "B39 {\n  r23 \u003d r2.getComponentType()\n  $r14 \u003d Collection) r0\n  r24 \u003d $r14.iterator()\n}",
      "B40 {\n  $z16 \u003d r24.hasNext()\n  if ($z16 \u003d\u003d false) goto B41 else B44\n}",
      "B41 {\n  r25 \u003d r24.next()\n  $z17 \u003d r5.canConvert(r25, r23)\n  if ($z17 !\u003d 0) goto B42 else B43\n}",
      "B42 {\n  return\n}",
      "B43 {\n  goto B40\n}",
      "B44 {\n  return\n}",
      "B45 {\n  $r10 \u003d class \"Ljava/util/Collection;\"\n  $z11 \u003d $r10.isAssignableFrom(r2)\n  if ($z11 \u003d\u003d false) goto B46 else B47\n}",
      "B46 {\n  $z15 \u003d r5.canCreateCollection(r2)\n  return\n}",
      "B47 {\n  $r11 \u003d Collection) r0\n  $i0 \u003d $r11.size()\n  if ($i0 \u003c\u003d 0) goto B48 else B52\n}",
      "B48 {\n  $z13 \u003d List\n  if ($z13 \u003d\u003d false) goto B49 else B50\n}",
      "B49 {\n  $r13 \u003d List) r0\n  r26 \u003d $r13.get(0)\n  goto B51\n}",
      "B50 {\n  $r12 \u003d Collection) r0\n  r27 \u003d $r12.iterator()\n  r26 \u003d r27.next()\n}",
      "B51 {\n  $z14 \u003d r5.canConvert(r26, r2)\n  return\n}",
      "B52 {\n  $z12 \u003d r5.canConvert(\"\", r2)\n  return\n}",
      "B53 {\n  $z6 \u003d NodeSet\n  if ($z6 \u003d\u003d false) goto B54 else B55\n}",
      "B54 {\n  $r8 \u003d NodeSet) r0\n  $r9 \u003d $r8.getValues()\n  $z9 \u003d r5.canConvert($r9, r2)\n  return\n}",
      "B55 {\n  $z7 \u003d Pointer\n  if ($z7 \u003d\u003d false) goto B56 else B57\n}",
      "B56 {\n  $r6 \u003d Pointer) r0\n  $r7 \u003d $r6.getValue()\n  $z8 \u003d r5.canConvert($r7, r2)\n  return\n}",
      "B57 {\n  $r4 \u003d ConvertUtils.lookup(r2)\n  if ($r4 \u003d\u003d null) goto B58 else B59\n}",
      "B58 {\n  $z27 \u003d 1\n  goto B60\n}",
      "B59 {\n  $z27 \u003d 0\n}",
      "B60 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B24",
      "B15 --\u003e B16",
      "B15 --\u003e B23",
      "B16 --\u003e B17",
      "B16 --\u003e B23",
      "B17 --\u003e B18",
      "B17 --\u003e B23",
      "B18 --\u003e B19",
      "B18 --\u003e B23",
      "B19 --\u003e B20",
      "B19 --\u003e B23",
      "B20 --\u003e B21",
      "B20 --\u003e B23",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e [EXIT]",
      "B24 --\u003e B25",
      "B24 --\u003e B37",
      "B25 --\u003e B26",
      "B25 --\u003e B32",
      "B26 --\u003e B27",
      "B27 --\u003e B28",
      "B27 --\u003e B31",
      "B28 --\u003e B29",
      "B28 --\u003e B30",
      "B29 --\u003e [EXIT]",
      "B30 --\u003e B27",
      "B31 --\u003e [EXIT]",
      "B32 --\u003e B33",
      "B32 --\u003e B34",
      "B33 --\u003e [EXIT]",
      "B34 --\u003e B35",
      "B34 --\u003e B36",
      "B35 --\u003e [EXIT]",
      "B36 --\u003e [EXIT]",
      "B37 --\u003e B38",
      "B37 --\u003e B53",
      "B38 --\u003e B39",
      "B38 --\u003e B45",
      "B39 --\u003e B40",
      "B40 --\u003e B41",
      "B40 --\u003e B44",
      "B41 --\u003e B42",
      "B41 --\u003e B43",
      "B42 --\u003e [EXIT]",
      "B43 --\u003e B40",
      "B44 --\u003e [EXIT]",
      "B45 --\u003e B46",
      "B45 --\u003e B47",
      "B46 --\u003e [EXIT]",
      "B47 --\u003e B48",
      "B47 --\u003e B52",
      "B48 --\u003e B49",
      "B48 --\u003e B50",
      "B49 --\u003e B51",
      "B50 --\u003e B51",
      "B51 --\u003e [EXIT]",
      "B52 --\u003e [EXIT]",
      "B53 --\u003e B54",
      "B53 --\u003e B55",
      "B54 --\u003e [EXIT]",
      "B55 --\u003e B56",
      "B55 --\u003e B57",
      "B56 --\u003e [EXIT]",
      "B57 --\u003e B58",
      "B57 --\u003e B59",
      "B58 --\u003e B60",
      "B59 --\u003e B60",
      "B60 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BasicTypeConverter#canConvert(...2)",
        "body": "{\r\n    if (object \u003d\u003d null) {\r\n        return true;\r\n    }\r\n    final Class useType \u003d TypeUtils.wrapPrimitive(toType);\r\n    final Class fromType \u003d object.getClass();\r\n    if (useType.isAssignableFrom(fromType)) {\r\n        return true;\r\n    }\r\n    if (useType \u003d\u003d String.class) {\r\n        return true;\r\n    }\r\n    if (object instanceof Boolean \u0026\u0026 (Number.class.isAssignableFrom(useType) || \"java.util.concurrent.atomic.AtomicBoolean\".equals(useType.getName()))) {\r\n        return true;\r\n    }\r\n    if (object instanceof Number \u0026\u0026 (Number.class.isAssignableFrom(useType) || useType \u003d\u003d Boolean.class)) {\r\n        return true;\r\n    }\r\n    if (object instanceof String \u0026\u0026 (useType \u003d\u003d Boolean.class || useType \u003d\u003d Character.class || useType \u003d\u003d Byte.class || useType \u003d\u003d Short.class || useType \u003d\u003d Integer.class || useType \u003d\u003d Long.class || useType \u003d\u003d Float.class || useType \u003d\u003d Double.class)) {\r\n        return true;\r\n    }\r\n    if (fromType.isArray()) {\r\n        // Collection -\u003e array\r\n        if (useType.isArray()) {\r\n            final Class cType \u003d useType.getComponentType();\r\n            final int length \u003d Array.getLength(object);\r\n            for (int i \u003d 0; i \u003c length; i++) {\r\n                final Object value \u003d Array.get(object, i);\r\n                if (!canConvert(value, cType)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        if (Collection.class.isAssignableFrom(useType)) {\r\n            return canCreateCollection(useType);\r\n        }\r\n        if (Array.getLength(object) \u003e 0) {\r\n            final Object value \u003d Array.get(object, 0);\r\n            return canConvert(value, useType);\r\n        }\r\n        return canConvert(\"\", useType);\r\n    }\r\n    if (object instanceof Collection) {\r\n        // Collection -\u003e array\r\n        if (useType.isArray()) {\r\n            final Class cType \u003d useType.getComponentType();\r\n            final Iterator it \u003d ((Collection) object).iterator();\r\n            while (it.hasNext()) {\r\n                final Object value \u003d it.next();\r\n                if (!canConvert(value, cType)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        if (Collection.class.isAssignableFrom(useType)) {\r\n            return canCreateCollection(useType);\r\n        }\r\n        if (((Collection) object).size() \u003e 0) {\r\n            Object value;\r\n            if (object instanceof List) {\r\n                value \u003d ((List) object).get(0);\r\n            } else {\r\n                final Iterator it \u003d ((Collection) object).iterator();\r\n                value \u003d it.next();\r\n            }\r\n            return canConvert(value, useType);\r\n        }\r\n        return canConvert(\"\", useType);\r\n    }\r\n    if (object instanceof NodeSet) {\r\n        return canConvert(((NodeSet) object).getValues(), useType);\r\n    }\r\n    if (object instanceof Pointer) {\r\n        return canConvert(((Pointer) object).getValue(), useType);\r\n    }\r\n    return ConvertUtils.lookup(useType) !\u003d null;\r\n}"
      },
      {
        "name": "BasicTypeConverter#canCreateCollection(...1)",
        "body": "{\r\n    if (!type.isInterface() \u0026\u0026 (type.getModifiers() \u0026 Modifier.ABSTRACT) \u003d\u003d 0) {\r\n        try {\r\n            type.getConstructor();\r\n            return true;\r\n        } catch (final Exception e) {\r\n            return false;\r\n        }\r\n    }\r\n    return type \u003d\u003d List.class || type \u003d\u003d Collection.class || type \u003d\u003d Set.class;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.util.BasicTypeConverter",
    "methodName": "convert",
    "signature": "java.lang.Object convert(java.lang.Object,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d null) {\r\n        return toType.isPrimitive() ? convertNullToPrimitive(toType) : null;\r\n    }\r\n    if (toType \u003d\u003d Object.class) {\r\n        if (object instanceof NodeSet) {\r\n            return convert(((NodeSet) object).getValues(), toType);\r\n        }\r\n        if (object instanceof Pointer) {\r\n            return convert(((Pointer) object).getValue(), toType);\r\n        }\r\n        return object;\r\n    }\r\n    final Class useType \u003d TypeUtils.wrapPrimitive(toType);\r\n    final Class fromType \u003d object.getClass();\r\n    if (useType.isAssignableFrom(fromType)) {\r\n        return object;\r\n    }\r\n    if (fromType.isArray()) {\r\n        final int length \u003d Array.getLength(object);\r\n        if (useType.isArray()) {\r\n            final Class cType \u003d useType.getComponentType();\r\n            final Object array \u003d Array.newInstance(cType, length);\r\n            for (int i \u003d 0; i \u003c length; i++) {\r\n                final Object value \u003d Array.get(object, i);\r\n                Array.set(array, i, convert(value, cType));\r\n            }\r\n            return array;\r\n        }\r\n        if (Collection.class.isAssignableFrom(useType)) {\r\n            final Collection collection \u003d allocateCollection(useType);\r\n            for (int i \u003d 0; i \u003c length; i++) {\r\n                collection.add(Array.get(object, i));\r\n            }\r\n            return unmodifiableCollection(collection);\r\n        }\r\n        if (length \u003e 0) {\r\n            final Object value \u003d Array.get(object, 0);\r\n            return convert(value, useType);\r\n        }\r\n        return convert(\"\", useType);\r\n    }\r\n    if (object instanceof Collection) {\r\n        final int length \u003d ((Collection) object).size();\r\n        if (useType.isArray()) {\r\n            final Class cType \u003d useType.getComponentType();\r\n            final Object array \u003d Array.newInstance(cType, length);\r\n            final Iterator it \u003d ((Collection) object).iterator();\r\n            for (int i \u003d 0; i \u003c length; i++) {\r\n                final Object value \u003d it.next();\r\n                Array.set(array, i, convert(value, cType));\r\n            }\r\n            return array;\r\n        }\r\n        if (Collection.class.isAssignableFrom(useType)) {\r\n            final Collection collection \u003d allocateCollection(useType);\r\n            collection.addAll((Collection) object);\r\n            return unmodifiableCollection(collection);\r\n        }\r\n        if (length \u003e 0) {\r\n            Object value;\r\n            if (object instanceof List) {\r\n                value \u003d ((List) object).get(0);\r\n            } else {\r\n                final Iterator it \u003d ((Collection) object).iterator();\r\n                value \u003d it.next();\r\n            }\r\n            return convert(value, useType);\r\n        }\r\n        return convert(\"\", useType);\r\n    }\r\n    if (object instanceof NodeSet) {\r\n        return convert(((NodeSet) object).getValues(), useType);\r\n    }\r\n    if (object instanceof Pointer) {\r\n        return convert(((Pointer) object).getValue(), useType);\r\n    }\r\n    if (useType \u003d\u003d String.class) {\r\n        return object.toString();\r\n    }\r\n    if (object instanceof Boolean) {\r\n        if (Number.class.isAssignableFrom(useType)) {\r\n            return allocateNumber(useType, ((Boolean) object).booleanValue() ? 1 : 0);\r\n        }\r\n        if (\"java.util.concurrent.atomic.AtomicBoolean\".equals(useType.getName())) {\r\n            try {\r\n                return useType.getConstructor(new Class[] { boolean.class }).newInstance(object);\r\n            } catch (final Exception e) {\r\n                throw new JXPathTypeConversionException(useType.getName(), e);\r\n            }\r\n        }\r\n    }\r\n    if (object instanceof Number) {\r\n        final double value \u003d ((Number) object).doubleValue();\r\n        if (useType \u003d\u003d Boolean.class) {\r\n            return value \u003d\u003d 0.0 ? Boolean.FALSE : Boolean.TRUE;\r\n        }\r\n        if (Number.class.isAssignableFrom(useType)) {\r\n            return allocateNumber(useType, value);\r\n        }\r\n    }\r\n    if (object instanceof String) {\r\n        final Object value \u003d convertStringToPrimitive(object, useType);\r\n        if (value !\u003d null) {\r\n            return value;\r\n        }\r\n    }\r\n    final Converter converter \u003d ConvertUtils.lookup(useType);\r\n    if (converter !\u003d null) {\r\n        return converter.convert(useType, object);\r\n    }\r\n    throw new JXPathTypeConversionException(\"Cannot convert \" + object.getClass() + \" to \" + useType);\r\n}",
    "nodes": 70,
    "edges": 78,
    "cc": 10,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B5",
      "B1 : If($z19 \u003d\u003d false) → B2 | else → B3",
      "B5 : If(r1 !\u003d class \"Ljava/lang/Object;\") → B6 | else → B11",
      "B6 : If($z17 \u003d\u003d false) → B7 | else → B8",
      "B8 : If($z18 \u003d\u003d false) → B9 | else → B10",
      "B11 : If($z0 \u003d\u003d false) → B12 | else → B13",
      "B13 : If($z1 \u003d\u003d false) → B14 | else → B27",
      "B14 : If($z15 \u003d\u003d false) → B15 | else → B19",
      "B16 : If(i2 \u003e\u003d i1) → B17 | else → B18",
      "B19 : If($z16 \u003d\u003d false) → B20 | else → B24",
      "B21 : If(i3 \u003e\u003d i1) → B22 | else → B23",
      "B24 : If(i1 \u003c\u003d 0) → B25 | else → B26",
      "B27 : If($z2 \u003d\u003d false) → B28 | else → B41",
      "B28 : If($z12 \u003d\u003d false) → B29 | else → B33",
      "B30 : If(i5 \u003e\u003d i4) → B31 | else → B32",
      "B33 : If($z13 \u003d\u003d false) → B34 | else → B35",
      "B35 : If(i4 \u003c\u003d 0) → B36 | else → B40",
      "B36 : If($z14 \u003d\u003d false) → B37 | else → B38",
      "B41 : If($z3 \u003d\u003d false) → B42 | else → B43",
      "B43 : If($z4 \u003d\u003d false) → B44 | else → B45",
      "B45 : If(r2 !\u003d class \"Ljava/lang/String;\") → B46 | else → B47",
      "B47 : If($z5 \u003d\u003d false) → B48 | else → B56",
      "B48 : If($z9 \u003d\u003d false) → B49 | else → B53",
      "B49 : If($z11 \u003d\u003d false) → B50 | else → B51",
      "B53 : If($z10 \u003d\u003d false) → B54 | else → B56",
      "B56 : If($z6 \u003d\u003d false) → B57 | else → B64",
      "B57 : If(r2 !\u003d class \"Ljava/lang/Boolean;\") → B58 | else → B62",
      "B58 : If($b0 !\u003d 0) → B59 | else → B60",
      "B62 : If($z8 \u003d\u003d false) → B63 | else → B64",
      "B64 : If($z7 \u003d\u003d false) → B65 | else → B67",
      "B65 : If(r74 \u003d\u003d null) → B66 | else → B67",
      "B67 : If($r14 \u003d\u003d null) → B68 | else → B69"
    ],
    "blockList": [
      "B0 {\n  BasicTypeConverter\n  Object\n  Class\n  if (r0 !\u003d null) goto B1 else B5\n}",
      "B1 {\n  $z19 \u003d r1.isPrimitive()\n  if ($z19 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r61 \u003d r13.convertNullToPrimitive(r1)\n  goto B4\n}",
      "B3 {\n  $r61 \u003d null\n}",
      "B4 {\n  return\n}",
      "B5 {\n  if (r1 !\u003d class \"Ljava/lang/Object;\") goto B6 else B11\n}",
      "B6 {\n  $z17 \u003d NodeSet\n  if ($z17 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  $r55 \u003d NodeSet) r0\n  $r56 \u003d $r55.getValues()\n  $r57 \u003d r13.convert($r56, r1)\n  return\n}",
      "B8 {\n  $z18 \u003d Pointer\n  if ($z18 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $r52 \u003d Pointer) r0\n  $r53 \u003d $r52.getValue()\n  $r54 \u003d r13.convert($r53, r1)\n  return\n}",
      "B10 {\n  return\n}",
      "B11 {\n  r2 \u003d TypeUtils.wrapPrimitive(r1)\n  r3 \u003d r0.getClass()\n  $z0 \u003d r2.isAssignableFrom(r3)\n  if ($z0 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  return\n}",
      "B13 {\n  $z1 \u003d r3.isArray()\n  if ($z1 \u003d\u003d false) goto B14 else B27\n}",
      "B14 {\n  i1 \u003d Array.getLength(r0)\n  $z15 \u003d r2.isArray()\n  if ($z15 \u003d\u003d false) goto B15 else B19\n}",
      "B15 {\n  r62 \u003d r2.getComponentType()\n  r63 \u003d Array.newInstance(r62, i1)\n  i2 \u003d 0\n}",
      "B16 {\n  if (i2 \u003e\u003d i1) goto B17 else B18\n}",
      "B17 {\n  r64 \u003d Array.get(r0, i2)\n  $r51 \u003d r13.convert(r64, r62)\n  Array.set(r63, i2, $r51)\n  i2 \u003d i2 + 1\n  goto B16\n}",
      "B18 {\n  return\n}",
      "B19 {\n  $r46 \u003d class \"Ljava/util/Collection;\"\n  $z16 \u003d $r46.isAssignableFrom(r2)\n  if ($z16 \u003d\u003d false) goto B20 else B24\n}",
      "B20 {\n  r65 \u003d r13.allocateCollection(r2)\n  i3 \u003d 0\n}",
      "B21 {\n  if (i3 \u003e\u003d i1) goto B22 else B23\n}",
      "B22 {\n  $r50 \u003d Array.get(r0, i3)\n  r65.add($r50)\n  i3 \u003d i3 + 1\n  goto B21\n}",
      "B23 {\n  $r49 \u003d r13.unmodifiableCollection(r65)\n  return\n}",
      "B24 {\n  if (i1 \u003c\u003d 0) goto B25 else B26\n}",
      "B25 {\n  r66 \u003d Array.get(r0, 0)\n  $r48 \u003d r13.convert(r66, r2)\n  return\n}",
      "B26 {\n  $r47 \u003d r13.convert(\"\", r2)\n  return\n}",
      "B27 {\n  $z2 \u003d Collection\n  if ($z2 \u003d\u003d false) goto B28 else B41\n}",
      "B28 {\n  $r35 \u003d Collection) r0\n  i4 \u003d $r35.size()\n  $z12 \u003d r2.isArray()\n  if ($z12 \u003d\u003d false) goto B29 else B33\n}",
      "B29 {\n  r67 \u003d r2.getComponentType()\n  r68 \u003d Array.newInstance(r67, i4)\n  $r43 \u003d Collection) r0\n  r69 \u003d $r43.iterator()\n  i5 \u003d 0\n}",
      "B30 {\n  if (i5 \u003e\u003d i4) goto B31 else B32\n}",
      "B31 {\n  r44 \u003d r69.next()\n  $r45 \u003d r13.convert(r44, r67)\n  Array.set(r68, i5, $r45)\n  i5 \u003d i5 + 1\n  goto B30\n}",
      "B32 {\n  return\n}",
      "B33 {\n  $r36 \u003d class \"Ljava/util/Collection;\"\n  $z13 \u003d $r36.isAssignableFrom(r2)\n  if ($z13 \u003d\u003d false) goto B34 else B35\n}",
      "B34 {\n  r70 \u003d r13.allocateCollection(r2)\n  $r41 \u003d Collection) r0\n  r70.addAll($r41)\n  $r42 \u003d r13.unmodifiableCollection(r70)\n  return\n}",
      "B35 {\n  if (i4 \u003c\u003d 0) goto B36 else B40\n}",
      "B36 {\n  $z14 \u003d List\n  if ($z14 \u003d\u003d false) goto B37 else B38\n}",
      "B37 {\n  $r40 \u003d List) r0\n  r71 \u003d $r40.get(0)\n  goto B39\n}",
      "B38 {\n  $r38 \u003d Collection) r0\n  r72 \u003d $r38.iterator()\n  r71 \u003d r72.next()\n}",
      "B39 {\n  $r39 \u003d r13.convert(r71, r2)\n  return\n}",
      "B40 {\n  $r37 \u003d r13.convert(\"\", r2)\n  return\n}",
      "B41 {\n  $z3 \u003d NodeSet\n  if ($z3 \u003d\u003d false) goto B42 else B43\n}",
      "B42 {\n  $r32 \u003d NodeSet) r0\n  $r33 \u003d $r32.getValues()\n  $r34 \u003d r13.convert($r33, r2)\n  return\n}",
      "B43 {\n  $z4 \u003d Pointer\n  if ($z4 \u003d\u003d false) goto B44 else B45\n}",
      "B44 {\n  $r29 \u003d Pointer) r0\n  $r30 \u003d $r29.getValue()\n  $r31 \u003d r13.convert($r30, r2)\n  return\n}",
      "B45 {\n  if (r2 !\u003d class \"Ljava/lang/String;\") goto B46 else B47\n}",
      "B46 {\n  $r28 \u003d r0.toString()\n  return\n}",
      "B47 {\n  $z5 \u003d Boolean\n  if ($z5 \u003d\u003d false) goto B48 else B56\n}",
      "B48 {\n  $r18 \u003d class \"Ljava/lang/Number;\"\n  $z9 \u003d $r18.isAssignableFrom(r2)\n  if ($z9 \u003d\u003d false) goto B49 else B53\n}",
      "B49 {\n  $r26 \u003d Boolean) r0\n  $z11 \u003d $r26.booleanValue()\n  if ($z11 \u003d\u003d false) goto B50 else B51\n}",
      "B50 {\n  $d0 \u003d 0\n  goto B52\n}",
      "B51 {\n  $d0 \u003d 0\n}",
      "B52 {\n  $r27 \u003d r13.allocateNumber(r2, $d0)\n  return\n}",
      "B53 {\n  $r20 \u003d AtomicBoolean\"\n  $r19 \u003d r2.getName()\n  $z10 \u003d $r20.equals($r19)\n  if ($z10 \u003d\u003d false) goto B54 else B56\n}",
      "B54 {\n  $r21 \u003d Class)[1]\n  $r22 \u003d Class TYPE\u003e\n  $r21[0] \u003d $r22\n  $r24 \u003d r2.getConstructor($r21)\n  $r23 \u003d Object)[1]\n  $r23[0] \u003d r0\n  $r25 \u003d $r24.newInstance($r23)\n  return\n}",
      "B55 {\n  $r58 :\u003d @caughtexception\n  $r59 \u003d JXPathTypeConversionException\n  $r60 \u003d r2.getName()\n  new JXPathTypeConversionException($r60, $r58)\n  throw $r59\n}",
      "B56 {\n  $z6 \u003d Number\n  if ($z6 \u003d\u003d false) goto B57 else B64\n}",
      "B57 {\n  $r15 \u003d Number) r0\n  d1 \u003d $r15.doubleValue()\n  if (r2 !\u003d class \"Ljava/lang/Boolean;\") goto B58 else B62\n}",
      "B58 {\n  $b0 \u003d 0\n  if ($b0 !\u003d 0) goto B59 else B60\n}",
      "B59 {\n  $r73 \u003d Boolean FALSE\u003e\n  goto B61\n}",
      "B60 {\n  $r73 \u003d Boolean TRUE\u003e\n}",
      "B61 {\n  return\n}",
      "B62 {\n  $r16 \u003d class \"Ljava/lang/Number;\"\n  $z8 \u003d $r16.isAssignableFrom(r2)\n  if ($z8 \u003d\u003d false) goto B63 else B64\n}",
      "B63 {\n  $r17 \u003d r13.allocateNumber(r2, d1)\n  return\n}",
      "B64 {\n  $z7 \u003d String\n  if ($z7 \u003d\u003d false) goto B65 else B67\n}",
      "B65 {\n  r74 \u003d r13.convertStringToPrimitive(r0, r2)\n  if (r74 \u003d\u003d null) goto B66 else B67\n}",
      "B66 {\n  return\n}",
      "B67 {\n  $r14 \u003d ConvertUtils.lookup(r2)\n  if ($r14 \u003d\u003d null) goto B68 else B69\n}",
      "B68 {\n  $r12 \u003d $r14.convert(r2, r0)\n  return\n}",
      "B69 {\n  $r4 \u003d JXPathTypeConversionException\n  $r5 \u003d StringBuilder\n  new StringBuilder()\n  $r7 \u003d $r5.append(\"Cannot convert \")\n  $r6 \u003d r0.getClass()\n  $r8 \u003d $r7.append($r6)\n  $r9 \u003d $r8.append(\" to \")\n  $r10 \u003d $r9.append(r2)\n  $r11 \u003d $r10.toString()\n  new JXPathTypeConversionException($r11)\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B11",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B13 --\u003e B27",
      "B14 --\u003e B15",
      "B14 --\u003e B19",
      "B15 --\u003e B16",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B16",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e B20",
      "B19 --\u003e B24",
      "B20 --\u003e B21",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B21",
      "B23 --\u003e [EXIT]",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e [EXIT]",
      "B26 --\u003e [EXIT]",
      "B27 --\u003e B28",
      "B27 --\u003e B41",
      "B28 --\u003e B29",
      "B28 --\u003e B33",
      "B29 --\u003e B30",
      "B30 --\u003e B31",
      "B30 --\u003e B32",
      "B31 --\u003e B30",
      "B32 --\u003e [EXIT]",
      "B33 --\u003e B34",
      "B33 --\u003e B35",
      "B34 --\u003e [EXIT]",
      "B35 --\u003e B36",
      "B35 --\u003e B40",
      "B36 --\u003e B37",
      "B36 --\u003e B38",
      "B37 --\u003e B39",
      "B38 --\u003e B39",
      "B39 --\u003e [EXIT]",
      "B40 --\u003e [EXIT]",
      "B41 --\u003e B42",
      "B41 --\u003e B43",
      "B42 --\u003e [EXIT]",
      "B43 --\u003e B44",
      "B43 --\u003e B45",
      "B44 --\u003e [EXIT]",
      "B45 --\u003e B46",
      "B45 --\u003e B47",
      "B46 --\u003e [EXIT]",
      "B47 --\u003e B48",
      "B47 --\u003e B56",
      "B48 --\u003e B49",
      "B48 --\u003e B53",
      "B49 --\u003e B50",
      "B49 --\u003e B51",
      "B50 --\u003e B52",
      "B51 --\u003e B52",
      "B52 --\u003e [EXIT]",
      "B53 --\u003e B54",
      "B53 --\u003e B56",
      "B54 --\u003e [EXIT]",
      "B55 --\u003e [EXIT]",
      "B56 --\u003e B57",
      "B56 --\u003e B64",
      "B57 --\u003e B58",
      "B57 --\u003e B62",
      "B58 --\u003e B59",
      "B58 --\u003e B60",
      "B59 --\u003e B61",
      "B60 --\u003e B61",
      "B61 --\u003e [EXIT]",
      "B62 --\u003e B63",
      "B62 --\u003e B64",
      "B63 --\u003e [EXIT]",
      "B64 --\u003e B65",
      "B64 --\u003e B67",
      "B65 --\u003e B66",
      "B65 --\u003e B67",
      "B66 --\u003e [EXIT]",
      "B67 --\u003e B68",
      "B67 --\u003e B69",
      "B68 --\u003e [EXIT]",
      "B69 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BasicTypeConverter#allocateCollection(...1)",
        "body": "{\r\n    if (!type.isInterface() \u0026\u0026 (type.getModifiers() \u0026 Modifier.ABSTRACT) \u003d\u003d 0) {\r\n        try {\r\n            return (Collection) type.getConstructor().newInstance();\r\n        } catch (final Exception ex) {\r\n            throw new JXPathInvalidAccessException(\"Cannot create collection of type: \" + type, ex);\r\n        }\r\n    }\r\n    if (type \u003d\u003d List.class || type \u003d\u003d Collection.class) {\r\n        return new ArrayList();\r\n    }\r\n    if (type \u003d\u003d Set.class) {\r\n        return new HashSet();\r\n    }\r\n    throw new JXPathInvalidAccessException(\"Cannot create collection of type: \" + type);\r\n}"
      },
      {
        "name": "BasicTypeConverter#unmodifiableCollection(...1)",
        "body": "{\r\n    if (collection instanceof List) {\r\n        return Collections.unmodifiableList((List\u003cE\u003e) collection);\r\n    }\r\n    if (collection instanceof SortedSet) {\r\n        return Collections.unmodifiableSortedSet((SortedSet\u003cE\u003e) collection);\r\n    }\r\n    if (collection instanceof Set) {\r\n        return Collections.unmodifiableSet((Set\u003cE\u003e) collection);\r\n    }\r\n    return Collections.unmodifiableCollection(collection);\r\n}"
      },
      {
        "name": "BasicTypeConverter#convertStringToPrimitive(...2)",
        "body": "{\r\n    toType \u003d TypeUtils.wrapPrimitive(toType);\r\n    if (toType \u003d\u003d Boolean.class) {\r\n        return Boolean.valueOf((String) object);\r\n    }\r\n    if (toType \u003d\u003d Character.class) {\r\n        return Character.valueOf(((String) object).charAt(0));\r\n    }\r\n    if (toType \u003d\u003d Byte.class) {\r\n        return Byte.valueOf((String) object);\r\n    }\r\n    if (toType \u003d\u003d Short.class) {\r\n        return Short.valueOf((String) object);\r\n    }\r\n    if (toType \u003d\u003d Integer.class) {\r\n        return Integer.valueOf((String) object);\r\n    }\r\n    if (toType \u003d\u003d Long.class) {\r\n        return Long.valueOf((String) object);\r\n    }\r\n    if (toType \u003d\u003d Float.class) {\r\n        return Float.valueOf((String) object);\r\n    }\r\n    if (toType \u003d\u003d Double.class) {\r\n        return Double.valueOf((String) object);\r\n    }\r\n    return null;\r\n}"
      },
      {
        "name": "BasicTypeConverter#allocateNumber(...2)",
        "body": "{\r\n    type \u003d TypeUtils.wrapPrimitive(type);\r\n    if (type \u003d\u003d Byte.class) {\r\n        return Byte.valueOf((byte) value);\r\n    }\r\n    if (type \u003d\u003d Short.class) {\r\n        return Short.valueOf((short) value);\r\n    }\r\n    if (type \u003d\u003d Integer.class) {\r\n        return Integer.valueOf((int) value);\r\n    }\r\n    if (type \u003d\u003d Long.class) {\r\n        return Long.valueOf((long) value);\r\n    }\r\n    if (type \u003d\u003d Float.class) {\r\n        return Float.valueOf((float) value);\r\n    }\r\n    if (type \u003d\u003d Double.class) {\r\n        return Double.valueOf(value);\r\n    }\r\n    if (type \u003d\u003d BigInteger.class) {\r\n        return BigInteger.valueOf((long) value);\r\n    }\r\n    if (type \u003d\u003d BigDecimal.class) {\r\n        return new BigDecimal(Double.toString(value));\r\n    }\r\n    final String className \u003d type.getName();\r\n    Class initialValueType \u003d null;\r\n    if (\"java.util.concurrent.atomic.AtomicInteger\".equals(className)) {\r\n        initialValueType \u003d int.class;\r\n    }\r\n    if (\"java.util.concurrent.atomic.AtomicLong\".equals(className)) {\r\n        initialValueType \u003d long.class;\r\n    }\r\n    if (initialValueType !\u003d null) {\r\n        try {\r\n            return (Number) type.getConstructor(new Class[] { initialValueType }).newInstance(allocateNumber(initialValueType, value));\r\n        } catch (final Exception e) {\r\n            throw new JXPathTypeConversionException(className, e);\r\n        }\r\n    }\r\n    return null;\r\n}"
      },
      {
        "name": "BasicTypeConverter#convertNullToPrimitive(...1)",
        "body": "{\r\n    if (toType \u003d\u003d boolean.class) {\r\n        return Boolean.FALSE;\r\n    }\r\n    if (toType \u003d\u003d char.class) {\r\n        return Character.valueOf(\u0027\\0\u0027);\r\n    }\r\n    if (toType \u003d\u003d byte.class) {\r\n        return Byte.valueOf((byte) 0);\r\n    }\r\n    if (toType \u003d\u003d short.class) {\r\n        return Short.valueOf((short) 0);\r\n    }\r\n    if (toType \u003d\u003d int.class) {\r\n        return Integer.valueOf(0);\r\n    }\r\n    if (toType \u003d\u003d long.class) {\r\n        return Long.valueOf(0L);\r\n    }\r\n    if (toType \u003d\u003d float.class) {\r\n        return Float.valueOf(0.0f);\r\n    }\r\n    if (toType \u003d\u003d double.class) {\r\n        return Double.valueOf(0.0);\r\n    }\r\n    return null;\r\n}"
      },
      {
        "name": "BasicTypeConverter#convert(...2)",
        "body": "{\r\n    if (object \u003d\u003d null) {\r\n        return toType.isPrimitive() ? convertNullToPrimitive(toType) : null;\r\n    }\r\n    if (toType \u003d\u003d Object.class) {\r\n        if (object instanceof NodeSet) {\r\n            return convert(((NodeSet) object).getValues(), toType);\r\n        }\r\n        if (object instanceof Pointer) {\r\n            return convert(((Pointer) object).getValue(), toType);\r\n        }\r\n        return object;\r\n    }\r\n    final Class useType \u003d TypeUtils.wrapPrimitive(toType);\r\n    final Class fromType \u003d object.getClass();\r\n    if (useType.isAssignableFrom(fromType)) {\r\n        return object;\r\n    }\r\n    if (fromType.isArray()) {\r\n        final int length \u003d Array.getLength(object);\r\n        if (useType.isArray()) {\r\n            final Class cType \u003d useType.getComponentType();\r\n            final Object array \u003d Array.newInstance(cType, length);\r\n            for (int i \u003d 0; i \u003c length; i++) {\r\n                final Object value \u003d Array.get(object, i);\r\n                Array.set(array, i, convert(value, cType));\r\n            }\r\n            return array;\r\n        }\r\n        if (Collection.class.isAssignableFrom(useType)) {\r\n            final Collection collection \u003d allocateCollection(useType);\r\n            for (int i \u003d 0; i \u003c length; i++) {\r\n                collection.add(Array.get(object, i));\r\n            }\r\n            return unmodifiableCollection(collection);\r\n        }\r\n        if (length \u003e 0) {\r\n            final Object value \u003d Array.get(object, 0);\r\n            return convert(value, useType);\r\n        }\r\n        return convert(\"\", useType);\r\n    }\r\n    if (object instanceof Collection) {\r\n        final int length \u003d ((Collection) object).size();\r\n        if (useType.isArray()) {\r\n            final Class cType \u003d useType.getComponentType();\r\n            final Object array \u003d Array.newInstance(cType, length);\r\n            final Iterator it \u003d ((Collection) object).iterator();\r\n            for (int i \u003d 0; i \u003c length; i++) {\r\n                final Object value \u003d it.next();\r\n                Array.set(array, i, convert(value, cType));\r\n            }\r\n            return array;\r\n        }\r\n        if (Collection.class.isAssignableFrom(useType)) {\r\n            final Collection collection \u003d allocateCollection(useType);\r\n            collection.addAll((Collection) object);\r\n            return unmodifiableCollection(collection);\r\n        }\r\n        if (length \u003e 0) {\r\n            Object value;\r\n            if (object instanceof List) {\r\n                value \u003d ((List) object).get(0);\r\n            } else {\r\n                final Iterator it \u003d ((Collection) object).iterator();\r\n                value \u003d it.next();\r\n            }\r\n            return convert(value, useType);\r\n        }\r\n        return convert(\"\", useType);\r\n    }\r\n    if (object instanceof NodeSet) {\r\n        return convert(((NodeSet) object).getValues(), useType);\r\n    }\r\n    if (object instanceof Pointer) {\r\n        return convert(((Pointer) object).getValue(), useType);\r\n    }\r\n    if (useType \u003d\u003d String.class) {\r\n        return object.toString();\r\n    }\r\n    if (object instanceof Boolean) {\r\n        if (Number.class.isAssignableFrom(useType)) {\r\n            return allocateNumber(useType, ((Boolean) object).booleanValue() ? 1 : 0);\r\n        }\r\n        if (\"java.util.concurrent.atomic.AtomicBoolean\".equals(useType.getName())) {\r\n            try {\r\n                return useType.getConstructor(new Class[] { boolean.class }).newInstance(object);\r\n            } catch (final Exception e) {\r\n                throw new JXPathTypeConversionException(useType.getName(), e);\r\n            }\r\n        }\r\n    }\r\n    if (object instanceof Number) {\r\n        final double value \u003d ((Number) object).doubleValue();\r\n        if (useType \u003d\u003d Boolean.class) {\r\n            return value \u003d\u003d 0.0 ? Boolean.FALSE : Boolean.TRUE;\r\n        }\r\n        if (Number.class.isAssignableFrom(useType)) {\r\n            return allocateNumber(useType, value);\r\n        }\r\n    }\r\n    if (object instanceof String) {\r\n        final Object value \u003d convertStringToPrimitive(object, useType);\r\n        if (value !\u003d null) {\r\n            return value;\r\n        }\r\n    }\r\n    final Converter converter \u003d ConvertUtils.lookup(useType);\r\n    if (converter !\u003d null) {\r\n        return converter.convert(useType, object);\r\n    }\r\n    throw new JXPathTypeConversionException(\"Cannot convert \" + object.getClass() + \" to \" + useType);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.util.ClassLoaderUtil",
    "methodName": "getClass",
    "signature": "java.lang.Class getClass(java.lang.String,boolean)",
    "visibility": "public",
    "body": "{\r\n    final ClassLoader contextCL \u003d Thread.currentThread().getContextClassLoader();\r\n    final ClassLoader currentCL \u003d ClassLoaderUtil.class.getClassLoader();\r\n    if (contextCL !\u003d null) {\r\n        try {\r\n            return getClass(contextCL, className, initialize);\r\n        } catch (final ClassNotFoundException ignore) {\r\n            // NOPMD\r\n            // ignore this exception and try the current class loader\r\n        }\r\n    }\r\n    return getClass(currentCL, className, initialize);\r\n}",
    "nodes": 4,
    "edges": 3,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B3"
    ],
    "blockList": [
      "B0 {\n  String\n  z0 :\u003d @parameter1: boolean\n  $r0 \u003d Thread.currentThread()\n  r1 \u003d $r0.getContextClassLoader()\n  $r2 \u003d class \"Lorg/apache/commons/jxpath/util/ClassLoaderUtil;\"\n  r3 \u003d $r2.getClassLoader()\n  if (r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r6 \u003d ClassLoaderUtil.getClass(r1, r4, z0)\n  return\n}",
      "B2 {\n  $r7 :\u003d @caughtexception\n}",
      "B3 {\n  $r5 \u003d ClassLoaderUtil.getClass(r3, r4, z0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ClassLoaderUtil#getClass(...3)",
        "body": "{\r\n    Class\u003cT\u003e clazz;\r\n    if (abbreviationMap.containsKey(className)) {\r\n        final String clsName \u003d \"[\" + abbreviationMap.get(className);\r\n        clazz \u003d (Class\u003cT\u003e) Class.forName(clsName, initialize, classLoader).getComponentType();\r\n    } else {\r\n        clazz \u003d (Class\u003cT\u003e) Class.forName(toCanonicalName(className), initialize, classLoader);\r\n    }\r\n    return clazz;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.util.JXPath11CompatibleTypeConverter",
    "methodName": "canConvert",
    "signature": "boolean canConvert(java.lang.Object,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return object instanceof NodeSet ? toType.isInstance(object) : super.canConvert(object, toType);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  JXPath11CompatibleTypeConverter\n  Object\n  Class\n  $z0 \u003d NodeSet\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d r2.isInstance(r0)\n  goto B3\n}",
      "B2 {\n  $z1 \u003d r1.canConvert(r0, r2)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.util.JXPath11CompatibleTypeConverter",
    "methodName": "convert",
    "signature": "java.lang.Object convert(java.lang.Object,java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return object instanceof NodeSet \u0026\u0026 toType.isInstance(object) ? object : super.convert(object, toType);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B3",
      "B1 : If($z1 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  JXPath11CompatibleTypeConverter\n  Object\n  Class\n  $z0 \u003d NodeSet\n  if ($z0 \u003d\u003d false) goto B1 else B3\n}",
      "B1 {\n  $z1 \u003d r2.isInstance(r0)\n  if ($z1 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d r0\n  goto B4\n}",
      "B3 {\n  $r3 \u003d r1.convert(r0, r2)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.util.KeyManagerUtils",
    "methodName": "getExtendedKeyManager",
    "signature": "org.apache.commons.jxpath.ExtendedKeyManager getExtendedKeyManager(org.apache.commons.jxpath.KeyManager)",
    "visibility": "public",
    "body": "{\r\n    return keyManager instanceof ExtendedKeyManager ? (ExtendedKeyManager) keyManager : new SingleNodeExtendedKeyManager(keyManager);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  KeyManager\n  $z0 \u003d ExtendedKeyManager\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ExtendedKeyManager) r0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d KeyManagerUtils$SingleNodeExtendedKeyManager\n  $r1 \u003d $r2\n  new KeyManagerUtils$SingleNodeExtendedKeyManager(r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.util.MethodLookupUtils",
    "methodName": "lookupConstructor",
    "signature": "java.lang.reflect.Constructor lookupConstructor(java.lang.Class,java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    boolean tryExact \u003d true;\r\n    final int count \u003d parameters \u003d\u003d null ? 0 : parameters.length;\r\n    final Class[] types \u003d new Class[count];\r\n    for (int i \u003d 0; i \u003c count; i++) {\r\n        final Object param \u003d parameters[i];\r\n        if (param !\u003d null) {\r\n            types[i] \u003d param.getClass();\r\n        } else {\r\n            types[i] \u003d null;\r\n            tryExact \u003d false;\r\n        }\r\n    }\r\n    Constructor constructor \u003d null;\r\n    if (tryExact) {\r\n        // First - without type conversion\r\n        try {\r\n            constructor \u003d targetClass.getConstructor(types);\r\n            if (constructor !\u003d null) {\r\n                return constructor;\r\n            }\r\n        } catch (final NoSuchMethodException ignore) {\r\n            // NOPMD\r\n            // Ignore\r\n        }\r\n    }\r\n    int currentMatch \u003d 0;\r\n    boolean ambiguous \u003d false;\r\n    // Then - with type conversion\r\n    final Constructor[] constructors \u003d targetClass.getConstructors();\r\n    for (final Constructor constructor2 : constructors) {\r\n        final int match \u003d matchParameterTypes(constructor2.getParameterTypes(), parameters);\r\n        if (match !\u003d NO_MATCH) {\r\n            if (match \u003e currentMatch) {\r\n                constructor \u003d constructor2;\r\n                currentMatch \u003d match;\r\n                ambiguous \u003d false;\r\n            } else if (match \u003d\u003d currentMatch) {\r\n                ambiguous \u003d true;\r\n            }\r\n        }\r\n    }\r\n    if (ambiguous) {\r\n        throw new JXPathException(\"Ambiguous constructor \" + Arrays.asList(parameters));\r\n    }\r\n    return constructor;\r\n}",
    "nodes": 25,
    "edges": 32,
    "cc": 9,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B4 : If(i3 \u003e\u003d i0) → B5 | else → B9",
      "B5 : If(r13 \u003d\u003d null) → B6 | else → B7",
      "B9 : If(z0 \u003d\u003d false) → B10 | else → B14",
      "B10 : If(r14 \u003d\u003d null) → B11 | else → B12",
      "B15 : If(i6 \u003e\u003d $i5) → B16 | else → B22",
      "B16 : If(i1 \u003d\u003d false) → B17 | else → B21",
      "B17 : If(i1 \u003c\u003d i4) → B18 | else → B19",
      "B19 : If(i1 !\u003d i4) → B20 | else → B21",
      "B22 : If(z1 \u003d\u003d false) → B23 | else → B24"
    ],
    "blockList": [
      "B0 {\n  Class\n  Object[]\n  z0 \u003d 1\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i2 \u003d 0\n  goto B3\n}",
      "B2 {\n  $i2 \u003d lengthof r0\n}",
      "B3 {\n  i0 \u003d $i2\n  $r11 \u003d Class)[$i2]\n  i3 \u003d 0\n}",
      "B4 {\n  if (i3 \u003e\u003d i0) goto B5 else B9\n}",
      "B5 {\n  r13 \u003d r0[i3]\n  if (r13 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r10 \u003d r13.getClass()\n  $r11[i3] \u003d $r10\n  goto B8\n}",
      "B7 {\n  $r11[i3] \u003d null\n  z0 \u003d 0\n}",
      "B8 {\n  i3 \u003d i3 + 1\n  goto B4\n}",
      "B9 {\n  r14 \u003d null\n  if (z0 \u003d\u003d false) goto B10 else B14\n}",
      "B10 {\n  r14 \u003d r1.getConstructor($r11)\n  if (r14 \u003d\u003d null) goto B11 else B12\n}",
      "B11 {\n  return\n}",
      "B12 {\n  goto B14\n}",
      "B13 {\n  $r12 :\u003d @caughtexception\n}",
      "B14 {\n  i4 \u003d 0\n  z1 \u003d 0\n  $r15 \u003d r1.getConstructors()\n  $i5 \u003d lengthof $r15\n  i6 \u003d 0\n}",
      "B15 {\n  if (i6 \u003e\u003d $i5) goto B16 else B22\n}",
      "B16 {\n  r8 \u003d $r15[i6]\n  $r9 \u003d r8.getParameterTypes()\n  i1 \u003d MethodLookupUtils.matchParameterTypes($r9, r0)\n  if (i1 \u003d\u003d false) goto B17 else B21\n}",
      "B17 {\n  if (i1 \u003c\u003d i4) goto B18 else B19\n}",
      "B18 {\n  r14 \u003d r8\n  i4 \u003d i1\n  z1 \u003d 0\n  goto B21\n}",
      "B19 {\n  if (i1 !\u003d i4) goto B20 else B21\n}",
      "B20 {\n  z1 \u003d 1\n}",
      "B21 {\n  i6 \u003d i6 + 1\n  goto B15\n}",
      "B22 {\n  if (z1 \u003d\u003d false) goto B23 else B24\n}",
      "B23 {\n  $r2 \u003d JXPathException\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  $r5 \u003d $r3.append(\"Ambiguous constructor \")\n  $r4 \u003d Arrays.asList(r0)\n  $r6 \u003d $r5.append($r4)\n  $r7 \u003d $r6.toString()\n  new JXPathException($r7)\n  throw $r2\n}",
      "B24 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B4",
      "B9 --\u003e B10",
      "B9 --\u003e B14",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B15 --\u003e B16",
      "B15 --\u003e B22",
      "B16 --\u003e B17",
      "B16 --\u003e B21",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B21",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B21",
      "B21 --\u003e B15",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e [EXIT]",
      "B24 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MethodLookupUtils#matchParameterTypes(...2)",
        "body": "{\r\n    int pi \u003d 0;\r\n    if (types.length \u003e\u003d 1 \u0026\u0026 ExpressionContext.class.isAssignableFrom(types[0])) {\r\n        pi++;\r\n    }\r\n    final int length \u003d parameters \u003d\u003d null ? 0 : parameters.length;\r\n    if (types.length !\u003d length + pi) {\r\n        return NO_MATCH;\r\n    }\r\n    int totalMatch \u003d EXACT_MATCH;\r\n    for (int i \u003d 0; i \u003c length; i++) {\r\n        final int match \u003d matchType(types[i + pi], parameters[i]);\r\n        if (match \u003d\u003d NO_MATCH) {\r\n            return NO_MATCH;\r\n        }\r\n        if (match \u003c totalMatch) {\r\n            totalMatch \u003d match;\r\n        }\r\n    }\r\n    return totalMatch;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.util.MethodLookupUtils",
    "methodName": "lookupMethod",
    "signature": "java.lang.reflect.Method lookupMethod(java.lang.Class,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    if (parameters \u003d\u003d null || parameters.length \u003c 1 || parameters[0] \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (matchType(targetClass, parameters[0]) \u003d\u003d NO_MATCH) {\r\n        return null;\r\n    }\r\n    targetClass \u003d TypeUtils.convert(parameters[0], targetClass).getClass();\r\n    boolean tryExact \u003d true;\r\n    final int count \u003d parameters.length - 1;\r\n    final Class[] types \u003d new Class[count];\r\n    final Object[] arguments \u003d new Object[count];\r\n    for (int i \u003d 0; i \u003c count; i++) {\r\n        final Object param \u003d parameters[i + 1];\r\n        arguments[i] \u003d param;\r\n        if (param !\u003d null) {\r\n            types[i] \u003d param.getClass();\r\n        } else {\r\n            types[i] \u003d null;\r\n            tryExact \u003d false;\r\n        }\r\n    }\r\n    Method method \u003d null;\r\n    if (tryExact) {\r\n        // First - without type conversion\r\n        try {\r\n            method \u003d targetClass.getMethod(name, types);\r\n            if (method !\u003d null \u0026\u0026 !Modifier.isStatic(method.getModifiers())) {\r\n                return method;\r\n            }\r\n        } catch (final NoSuchMethodException ignore) {\r\n            // NOPMD\r\n            // Ignore\r\n        }\r\n    }\r\n    int currentMatch \u003d 0;\r\n    boolean ambiguous \u003d false;\r\n    // Then - with type conversion\r\n    final Method[] methods \u003d targetClass.getMethods();\r\n    for (final Method method2 : methods) {\r\n        if (!Modifier.isStatic(method2.getModifiers()) \u0026\u0026 method2.getName().equals(name)) {\r\n            final int match \u003d matchParameterTypes(method2.getParameterTypes(), arguments);\r\n            if (match !\u003d NO_MATCH) {\r\n                if (match \u003e currentMatch) {\r\n                    method \u003d method2;\r\n                    currentMatch \u003d match;\r\n                    ambiguous \u003d false;\r\n                } else if (match \u003d\u003d currentMatch) {\r\n                    ambiguous \u003d true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (ambiguous) {\r\n        throw new JXPathException(\"Ambiguous method call: \" + name);\r\n    }\r\n    return method;\r\n}",
    "nodes": 31,
    "edges": 42,
    "cc": 13,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($i0 \u003c 1) → B2 | else → B3",
      "B2 : If($r1 !\u003d null) → B3 | else → B4",
      "B4 : If($i1 !\u003d 0) → B5 | else → B6",
      "B7 : If(i8 \u003e\u003d i3) → B8 | else → B12",
      "B8 : If(r20 \u003d\u003d null) → B9 | else → B10",
      "B12 : If(z3 \u003d\u003d false) → B13 | else → B18",
      "B13 : If(r21 \u003d\u003d null) → B14 | else → B16",
      "B14 : If($z2 !\u003d 0) → B15 | else → B16",
      "B19 : If(i11 \u003e\u003d $i10) → B20 | else → B28",
      "B20 : If($z0 !\u003d 0) → B21 | else → B27",
      "B21 : If($z1 \u003d\u003d false) → B22 | else → B27",
      "B22 : If(i5 \u003d\u003d false) → B23 | else → B27",
      "B23 : If(i5 \u003c\u003d i9) → B24 | else → B25",
      "B25 : If(i5 !\u003d i9) → B26 | else → B27",
      "B28 : If(z4 \u003d\u003d false) → B29 | else → B30"
    ],
    "blockList": [
      "B0 {\n  Class\n  String\n  Object[]\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $i0 \u003d lengthof r0\n  if ($i0 \u003c 1) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d r0[0]\n  if ($r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r2 \u003d r0[0]\n  $i1 \u003d MethodLookupUtils.matchType(r18, $r2)\n  if ($i1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r3 \u003d r0[0]\n  $r4 \u003d TypeUtils.convert($r3, r18)\n  r19 \u003d $r4.getClass()\n  z3 \u003d 1\n  $i2 \u003d lengthof r0\n  i3 \u003d $i2 - 1\n  r5 \u003d Class)[i3]\n  r6 \u003d Object)[i3]\n  i8 \u003d 0\n}",
      "B7 {\n  if (i8 \u003e\u003d i3) goto B8 else B12\n}",
      "B8 {\n  $i7 \u003d i8 + 1\n  r20 \u003d r0[$i7]\n  r6[i8] \u003d r20\n  if (r20 \u003d\u003d null) goto B9 else B10\n}",
      "B9 {\n  $r16 \u003d r20.getClass()\n  r5[i8] \u003d $r16\n  goto B11\n}",
      "B10 {\n  r5[i8] \u003d null\n  z3 \u003d 0\n}",
      "B11 {\n  i8 \u003d i8 + 1\n  goto B7\n}",
      "B12 {\n  r21 \u003d null\n  if (z3 \u003d\u003d false) goto B13 else B18\n}",
      "B13 {\n  r21 \u003d r19.getMethod(r9, r5)\n  if (r21 \u003d\u003d null) goto B14 else B16\n}",
      "B14 {\n  $i6 \u003d r21.getModifiers()\n  $z2 \u003d Modifier.isStatic($i6)\n  if ($z2 !\u003d 0) goto B15 else B16\n}",
      "B15 {\n  return\n}",
      "B16 {\n  goto B18\n}",
      "B17 {\n  $r17 :\u003d @caughtexception\n}",
      "B18 {\n  i9 \u003d 0\n  z4 \u003d 0\n  $r22 \u003d r19.getMethods()\n  $i10 \u003d lengthof $r22\n  i11 \u003d 0\n}",
      "B19 {\n  if (i11 \u003e\u003d $i10) goto B20 else B28\n}",
      "B20 {\n  r13 \u003d $r22[i11]\n  $i4 \u003d r13.getModifiers()\n  $z0 \u003d Modifier.isStatic($i4)\n  if ($z0 !\u003d 0) goto B21 else B27\n}",
      "B21 {\n  $r14 \u003d r13.getName()\n  $z1 \u003d $r14.equals(r9)\n  if ($z1 \u003d\u003d false) goto B22 else B27\n}",
      "B22 {\n  $r15 \u003d r13.getParameterTypes()\n  i5 \u003d MethodLookupUtils.matchParameterTypes($r15, r6)\n  if (i5 \u003d\u003d false) goto B23 else B27\n}",
      "B23 {\n  if (i5 \u003c\u003d i9) goto B24 else B25\n}",
      "B24 {\n  r21 \u003d r13\n  i9 \u003d i5\n  z4 \u003d 0\n  goto B27\n}",
      "B25 {\n  if (i5 !\u003d i9) goto B26 else B27\n}",
      "B26 {\n  z4 \u003d 1\n}",
      "B27 {\n  i11 \u003d i11 + 1\n  goto B19\n}",
      "B28 {\n  if (z4 \u003d\u003d false) goto B29 else B30\n}",
      "B29 {\n  $r7 \u003d JXPathException\n  $r8 \u003d StringBuilder\n  new StringBuilder()\n  $r10 \u003d $r8.append(\"Ambiguous method call: \")\n  $r11 \u003d $r10.append(r9)\n  $r12 \u003d $r11.toString()\n  new JXPathException($r12)\n  throw $r7\n}",
      "B30 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B7",
      "B12 --\u003e B13",
      "B12 --\u003e B18",
      "B13 --\u003e B14",
      "B13 --\u003e B16",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B19 --\u003e B28",
      "B20 --\u003e B21",
      "B20 --\u003e B27",
      "B21 --\u003e B22",
      "B21 --\u003e B27",
      "B22 --\u003e B23",
      "B22 --\u003e B27",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B27",
      "B25 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B27",
      "B27 --\u003e B19",
      "B28 --\u003e B29",
      "B28 --\u003e B30",
      "B29 --\u003e [EXIT]",
      "B30 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MethodLookupUtils#matchType(...2)",
        "body": "{\r\n    if (object \u003d\u003d null) {\r\n        return APPROXIMATE_MATCH;\r\n    }\r\n    final Class actual \u003d object.getClass();\r\n    if (expected.equals(actual)) {\r\n        return EXACT_MATCH;\r\n    }\r\n    if (expected.isAssignableFrom(actual)) {\r\n        return EXACT_MATCH;\r\n    }\r\n    if (TypeUtils.canConvert(object, expected)) {\r\n        return APPROXIMATE_MATCH;\r\n    }\r\n    return NO_MATCH;\r\n}"
      },
      {
        "name": "MethodLookupUtils#matchParameterTypes(...2)",
        "body": "{\r\n    int pi \u003d 0;\r\n    if (types.length \u003e\u003d 1 \u0026\u0026 ExpressionContext.class.isAssignableFrom(types[0])) {\r\n        pi++;\r\n    }\r\n    final int length \u003d parameters \u003d\u003d null ? 0 : parameters.length;\r\n    if (types.length !\u003d length + pi) {\r\n        return NO_MATCH;\r\n    }\r\n    int totalMatch \u003d EXACT_MATCH;\r\n    for (int i \u003d 0; i \u003c length; i++) {\r\n        final int match \u003d matchType(types[i + pi], parameters[i]);\r\n        if (match \u003d\u003d NO_MATCH) {\r\n            return NO_MATCH;\r\n        }\r\n        if (match \u003c totalMatch) {\r\n            totalMatch \u003d match;\r\n        }\r\n    }\r\n    return totalMatch;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.util.MethodLookupUtils",
    "methodName": "lookupStaticMethod",
    "signature": "java.lang.reflect.Method lookupStaticMethod(java.lang.Class,java.lang.String,java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    boolean tryExact \u003d true;\r\n    final int count \u003d parameters \u003d\u003d null ? 0 : parameters.length;\r\n    final Class[] types \u003d new Class[count];\r\n    for (int i \u003d 0; i \u003c count; i++) {\r\n        final Object param \u003d parameters[i];\r\n        if (param !\u003d null) {\r\n            types[i] \u003d param.getClass();\r\n        } else {\r\n            types[i] \u003d null;\r\n            tryExact \u003d false;\r\n        }\r\n    }\r\n    Method method \u003d null;\r\n    if (tryExact) {\r\n        // First - without type conversion\r\n        try {\r\n            method \u003d targetClass.getMethod(name, types);\r\n            if (method !\u003d null \u0026\u0026 Modifier.isStatic(method.getModifiers())) {\r\n                return method;\r\n            }\r\n        } catch (final NoSuchMethodException ignore) {\r\n            // NOPMD\r\n            // Ignore\r\n        }\r\n    }\r\n    int currentMatch \u003d 0;\r\n    boolean ambiguous \u003d false;\r\n    // Then - with type conversion\r\n    final Method[] methods \u003d targetClass.getMethods();\r\n    for (final Method method2 : methods) {\r\n        if (Modifier.isStatic(method2.getModifiers()) \u0026\u0026 method2.getName().equals(name)) {\r\n            final int match \u003d matchParameterTypes(method2.getParameterTypes(), parameters);\r\n            if (match !\u003d NO_MATCH) {\r\n                if (match \u003e currentMatch) {\r\n                    method \u003d method2;\r\n                    currentMatch \u003d match;\r\n                    ambiguous \u003d false;\r\n                } else if (match \u003d\u003d currentMatch) {\r\n                    ambiguous \u003d true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (ambiguous) {\r\n        throw new JXPathException(\"Ambiguous method call: \" + name);\r\n    }\r\n    return method;\r\n}",
    "nodes": 28,
    "edges": 38,
    "cc": 12,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B4 : If(i5 \u003e\u003d i0) → B5 | else → B9",
      "B5 : If(r14 \u003d\u003d null) → B6 | else → B7",
      "B9 : If(z3 \u003d\u003d false) → B10 | else → B15",
      "B10 : If(r15 \u003d\u003d null) → B11 | else → B13",
      "B11 : If($z2 \u003d\u003d false) → B12 | else → B13",
      "B16 : If(i8 \u003e\u003d $i7) → B17 | else → B25",
      "B17 : If($z0 \u003d\u003d false) → B18 | else → B24",
      "B18 : If($z1 \u003d\u003d false) → B19 | else → B24",
      "B19 : If(i2 \u003d\u003d false) → B20 | else → B24",
      "B20 : If(i2 \u003c\u003d i6) → B21 | else → B22",
      "B22 : If(i2 !\u003d i6) → B23 | else → B24",
      "B25 : If(z4 \u003d\u003d false) → B26 | else → B27"
    ],
    "blockList": [
      "B0 {\n  Class\n  String\n  Object[]\n  z3 \u003d 1\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i4 \u003d 0\n  goto B3\n}",
      "B2 {\n  $i4 \u003d lengthof r0\n}",
      "B3 {\n  i0 \u003d $i4\n  $r12 \u003d Class)[$i4]\n  i5 \u003d 0\n}",
      "B4 {\n  if (i5 \u003e\u003d i0) goto B5 else B9\n}",
      "B5 {\n  r14 \u003d r0[i5]\n  if (r14 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r11 \u003d r14.getClass()\n  $r12[i5] \u003d $r11\n  goto B8\n}",
      "B7 {\n  $r12[i5] \u003d null\n  z3 \u003d 0\n}",
      "B8 {\n  i5 \u003d i5 + 1\n  goto B4\n}",
      "B9 {\n  r15 \u003d null\n  if (z3 \u003d\u003d false) goto B10 else B15\n}",
      "B10 {\n  r15 \u003d r1.getMethod(r4, $r12)\n  if (r15 \u003d\u003d null) goto B11 else B13\n}",
      "B11 {\n  $i3 \u003d r15.getModifiers()\n  $z2 \u003d Modifier.isStatic($i3)\n  if ($z2 \u003d\u003d false) goto B12 else B13\n}",
      "B12 {\n  return\n}",
      "B13 {\n  goto B15\n}",
      "B14 {\n  $r13 :\u003d @caughtexception\n}",
      "B15 {\n  i6 \u003d 0\n  z4 \u003d 0\n  $r16 \u003d r1.getMethods()\n  $i7 \u003d lengthof $r16\n  i8 \u003d 0\n}",
      "B16 {\n  if (i8 \u003e\u003d $i7) goto B17 else B25\n}",
      "B17 {\n  r8 \u003d $r16[i8]\n  $i1 \u003d r8.getModifiers()\n  $z0 \u003d Modifier.isStatic($i1)\n  if ($z0 \u003d\u003d false) goto B18 else B24\n}",
      "B18 {\n  $r9 \u003d r8.getName()\n  $z1 \u003d $r9.equals(r4)\n  if ($z1 \u003d\u003d false) goto B19 else B24\n}",
      "B19 {\n  $r10 \u003d r8.getParameterTypes()\n  i2 \u003d MethodLookupUtils.matchParameterTypes($r10, r0)\n  if (i2 \u003d\u003d false) goto B20 else B24\n}",
      "B20 {\n  if (i2 \u003c\u003d i6) goto B21 else B22\n}",
      "B21 {\n  r15 \u003d r8\n  i6 \u003d i2\n  z4 \u003d 0\n  goto B24\n}",
      "B22 {\n  if (i2 !\u003d i6) goto B23 else B24\n}",
      "B23 {\n  z4 \u003d 1\n}",
      "B24 {\n  i8 \u003d i8 + 1\n  goto B16\n}",
      "B25 {\n  if (z4 \u003d\u003d false) goto B26 else B27\n}",
      "B26 {\n  $r2 \u003d JXPathException\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  $r5 \u003d $r3.append(\"Ambiguous method call: \")\n  $r6 \u003d $r5.append(r4)\n  $r7 \u003d $r6.toString()\n  new JXPathException($r7)\n  throw $r2\n}",
      "B27 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B4",
      "B9 --\u003e B10",
      "B9 --\u003e B15",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B16",
      "B16 --\u003e B17",
      "B16 --\u003e B25",
      "B17 --\u003e B18",
      "B17 --\u003e B24",
      "B18 --\u003e B19",
      "B18 --\u003e B24",
      "B19 --\u003e B20",
      "B19 --\u003e B24",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B24",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B24",
      "B24 --\u003e B16",
      "B25 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e [EXIT]",
      "B27 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MethodLookupUtils#matchParameterTypes(...2)",
        "body": "{\r\n    int pi \u003d 0;\r\n    if (types.length \u003e\u003d 1 \u0026\u0026 ExpressionContext.class.isAssignableFrom(types[0])) {\r\n        pi++;\r\n    }\r\n    final int length \u003d parameters \u003d\u003d null ? 0 : parameters.length;\r\n    if (types.length !\u003d length + pi) {\r\n        return NO_MATCH;\r\n    }\r\n    int totalMatch \u003d EXACT_MATCH;\r\n    for (int i \u003d 0; i \u003c length; i++) {\r\n        final int match \u003d matchType(types[i + pi], parameters[i]);\r\n        if (match \u003d\u003d NO_MATCH) {\r\n            return NO_MATCH;\r\n        }\r\n        if (match \u003c totalMatch) {\r\n            totalMatch \u003d match;\r\n        }\r\n    }\r\n    return totalMatch;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.util.TypeUtils",
    "methodName": "wrapPrimitive",
    "signature": "java.lang.Class wrapPrimitive(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    return p.isPrimitive() ? (Class) PRIMITIVE_TYPE_MAP.get(p) : p;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Class\n  $z0 \u003d r0.isPrimitive()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d HashMap PRIMITIVE_TYPE_MAP\u003e\n  $r2 \u003d $r1.get(r0)\n  $r3 \u003d Class) $r2\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.util.ValueUtils",
    "methodName": "expandCollection",
    "signature": "java.lang.Object expandCollection(java.lang.Object,int)",
    "visibility": "public",
    "body": "{\r\n    if (collection \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (size \u003c getLength(collection)) {\r\n        throw new JXPathException(\"adjustment of \" + collection + \" to size \" + size + \" is not an expansion\");\r\n    }\r\n    if (collection.getClass().isArray()) {\r\n        final Object bigger \u003d Array.newInstance(collection.getClass().getComponentType(), size);\r\n        System.arraycopy(collection, 0, bigger, 0, Array.getLength(collection));\r\n        return bigger;\r\n    }\r\n    if (collection instanceof Collection) {\r\n        while (((Collection) collection).size() \u003c size) {\r\n            ((Collection) collection).add(null);\r\n        }\r\n        return collection;\r\n    }\r\n    throw new JXPathException(\"Cannot turn \" + collection.getClass().getName() + \" into a collection of size \" + size);\r\n}",
    "nodes": 11,
    "edges": 11,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003e\u003d $i1) → B3 | else → B4",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B6",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B10",
      "B7 : If($i2 \u003e\u003d i0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  Object\n  i0 :\u003d @parameter1: int\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d ValueUtils.getLength(r0)\n  if (i0 \u003e\u003d $i1) goto B3 else B4\n}",
      "B3 {\n  $r16 \u003d JXPathException\n  $r17 \u003d StringBuilder\n  new StringBuilder()\n  $r18 \u003d $r17.append(\"adjustment of \")\n  $r19 \u003d $r18.append(r0)\n  $r20 \u003d $r19.append(\" to size \")\n  $r21 \u003d $r20.append(i0)\n  $r22 \u003d $r21.append(\" is not an expansion\")\n  $r23 \u003d $r22.toString()\n  new JXPathException($r23)\n  throw $r16\n}",
      "B4 {\n  $r1 \u003d r0.getClass()\n  $z0 \u003d $r1.isArray()\n  if ($z0 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r13 \u003d r0.getClass()\n  $r14 \u003d $r13.getComponentType()\n  r15 \u003d Array.newInstance($r14, i0)\n  $i3 \u003d Array.getLength(r0)\n  System.arraycopy(r0, 0, r15, 0, $i3)\n  return\n}",
      "B6 {\n  $z1 \u003d Collection\n  if ($z1 \u003d\u003d false) goto B7 else B10\n}",
      "B7 {\n  $r11 \u003d Collection) r0\n  $i2 \u003d $r11.size()\n  if ($i2 \u003e\u003d i0) goto B8 else B9\n}",
      "B8 {\n  $r12 \u003d Collection) r0\n  $r12.add(null)\n  goto B7\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $r2 \u003d JXPathException\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  $r6 \u003d $r3.append(\"Cannot turn \")\n  $r4 \u003d r0.getClass()\n  $r5 \u003d $r4.getName()\n  $r7 \u003d $r6.append($r5)\n  $r8 \u003d $r7.append(\" into a collection of size \")\n  $r9 \u003d $r8.append(i0)\n  $r10 \u003d $r9.toString()\n  new JXPathException($r10)\n  throw $r2\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B7",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ValueUtils#getLength(...1)",
        "body": "{\r\n    if (collection \u003d\u003d null) {\r\n        return 0;\r\n    }\r\n    collection \u003d getValue(collection);\r\n    if (collection.getClass().isArray()) {\r\n        return Array.getLength(collection);\r\n    }\r\n    if (collection instanceof Collection) {\r\n        return ((Collection) collection).size();\r\n    }\r\n    return 1;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.util.ValueUtils",
    "methodName": "getAccessibleMethod",
    "signature": "java.lang.reflect.Method getAccessibleMethod(java.lang.reflect.Method)",
    "visibility": "public",
    "body": "{\r\n    // Make sure we have a method to check\r\n    if (method \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // If the requested method is not public we cannot call it\r\n    if (!Modifier.isPublic(method.getModifiers())) {\r\n        return null;\r\n    }\r\n    // If the declaring class is public, we are done\r\n    Class clazz \u003d method.getDeclaringClass();\r\n    if (Modifier.isPublic(clazz.getModifiers())) {\r\n        return method;\r\n    }\r\n    final String name \u003d method.getName();\r\n    final Class[] parameterTypes \u003d method.getParameterTypes();\r\n    while (clazz !\u003d null) {\r\n        // Check the implemented interfaces and subinterfaces\r\n        final Method aMethod \u003d getAccessibleMethodFromInterfaceNest(clazz, name, parameterTypes);\r\n        if (aMethod !\u003d null) {\r\n            return aMethod;\r\n        }\r\n        clazz \u003d clazz.getSuperclass();\r\n        if (clazz !\u003d null \u0026\u0026 Modifier.isPublic(clazz.getModifiers())) {\r\n            try {\r\n                return clazz.getDeclaredMethod(name, parameterTypes);\r\n            } catch (final NoSuchMethodException ignore) {\r\n                // NOPMD\r\n                // ignore\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 16,
    "edges": 17,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6",
      "B7 : If(r6 \u003d\u003d null) → B8 | else → B15",
      "B8 : If(r3 \u003d\u003d null) → B9 | else → B10",
      "B10 : If(r6 \u003d\u003d null) → B11 | else → B14",
      "B11 : If($z2 \u003d\u003d false) → B12 | else → B14"
    ],
    "blockList": [
      "B0 {\n  Method\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d r0.getModifiers()\n  $z0 \u003d Modifier.isPublic($i0)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r6 \u003d r0.getDeclaringClass()\n  $i1 \u003d r6.getModifiers()\n  $z1 \u003d Modifier.isPublic($i1)\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  r1 \u003d r0.getName()\n  r2 \u003d r0.getParameterTypes()\n}",
      "B7 {\n  if (r6 \u003d\u003d null) goto B8 else B15\n}",
      "B8 {\n  r3 \u003d ValueUtils.getAccessibleMethodFromInterfaceNest(r6, r1, r2)\n  if (r3 \u003d\u003d null) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  r6 \u003d r6.getSuperclass()\n  if (r6 \u003d\u003d null) goto B11 else B14\n}",
      "B11 {\n  $i2 \u003d r6.getModifiers()\n  $z2 \u003d Modifier.isPublic($i2)\n  if ($z2 \u003d\u003d false) goto B12 else B14\n}",
      "B12 {\n  $r4 \u003d r6.getDeclaredMethod(r1, r2)\n  return\n}",
      "B13 {\n  $r5 :\u003d @caughtexception\n}",
      "B14 {\n  goto B7\n}",
      "B15 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B15",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e B12",
      "B11 --\u003e B14",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B14 --\u003e B7",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ValueUtils#getAccessibleMethodFromInterfaceNest(...3)",
        "body": "{\r\n    Method method \u003d null;\r\n    // Check the implemented interfaces of the parent class\r\n    final Class[] interfaces \u003d clazz.getInterfaces();\r\n    for (final Class element : interfaces) {\r\n        // Is this interface public?\r\n        if (!Modifier.isPublic(element.getModifiers())) {\r\n            continue;\r\n        }\r\n        // Does the method exist on this interface?\r\n        try {\r\n            method \u003d element.getDeclaredMethod(methodName, parameterTypes);\r\n        } catch (final NoSuchMethodException ignore) {\r\n            // NOPMD\r\n            // ignore\r\n        }\r\n        if (method !\u003d null) {\r\n            break;\r\n        }\r\n        // Recursively check our parent interfaces\r\n        method \u003d getAccessibleMethodFromInterfaceNest(element, methodName, parameterTypes);\r\n        if (method !\u003d null) {\r\n            break;\r\n        }\r\n    }\r\n    // Return whatever we have found\r\n    return method;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.util.ValueUtils",
    "methodName": "getCollectionHint",
    "signature": "int getCollectionHint(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    if (clazz.isArray()) {\r\n        return 1;\r\n    }\r\n    if (Collection.class.isAssignableFrom(clazz)) {\r\n        return 1;\r\n    }\r\n    if (clazz.isPrimitive()) {\r\n        return -1;\r\n    }\r\n    if (clazz.isInterface()) {\r\n        return 0;\r\n    }\r\n    if (Modifier.isFinal(clazz.getModifiers())) {\r\n        return -1;\r\n    }\r\n    return 0;\r\n}",
    "nodes": 11,
    "edges": 10,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d false) → B5 | else → B6",
      "B6 : If($z3 \u003d\u003d false) → B7 | else → B8",
      "B8 : If($z4 \u003d\u003d false) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  Class\n  $z0 \u003d r0.isArray()\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d class \"Ljava/util/Collection;\"\n  $z1 \u003d $r1.isAssignableFrom(r0)\n  if ($z1 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z2 \u003d r0.isPrimitive()\n  if ($z2 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $i2 \u003d (int) -1\n  return\n}",
      "B6 {\n  $z3 \u003d r0.isInterface()\n  if ($z3 \u003d\u003d false) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $i0 \u003d r0.getModifiers()\n  $z4 \u003d Modifier.isFinal($i0)\n  if ($z4 \u003d\u003d false) goto B9 else B10\n}",
      "B9 {\n  $i4 \u003d (int) -1\n  return\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.util.ValueUtils",
    "methodName": "getIndexedPropertyLength",
    "signature": "int getIndexedPropertyLength(java.lang.Object,java.beans.IndexedPropertyDescriptor)",
    "visibility": "public",
    "body": "{\r\n    if (pd.getReadMethod() !\u003d null) {\r\n        return getLength(getValue(object, pd));\r\n    }\r\n    final Method readMethod \u003d pd.getIndexedReadMethod();\r\n    if (readMethod \u003d\u003d null) {\r\n        throw new JXPathException(\"No indexed read method for property \" + pd.getName());\r\n    }\r\n    for (int i \u003d 0; i \u003c UNKNOWN_LENGTH_MAX_COUNT; i++) {\r\n        try {\r\n            readMethod.invoke(object, Integer.valueOf(i));\r\n        } catch (final Throwable t) {\r\n            return i;\r\n        }\r\n    }\r\n    throw new JXPathException(\"Cannot determine the length of the indexed property \" + pd.getName());\r\n}",
    "nodes": 10,
    "edges": 9,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(r2 !\u003d null) → B3 | else → B4",
      "B5 : If(i1 \u003e\u003d 16000) → B6 | else → B9"
    ],
    "blockList": [
      "B0 {\n  Object\n  IndexedPropertyDescriptor\n  $r1 \u003d r0.getReadMethod()\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r18 \u003d ValueUtils.getValue(r9, r0)\n  $i0 \u003d ValueUtils.getLength($r18)\n  return\n}",
      "B2 {\n  r2 \u003d r0.getIndexedReadMethod()\n  if (r2 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r12 \u003d JXPathException\n  $r13 \u003d StringBuilder\n  new StringBuilder()\n  $r15 \u003d $r13.append(\"No indexed read method for property \")\n  $r14 \u003d r0.getName()\n  $r16 \u003d $r15.append($r14)\n  $r17 \u003d $r16.toString()\n  new JXPathException($r17)\n  throw $r12\n}",
      "B4 {\n  i1 \u003d 0\n}",
      "B5 {\n  if (i1 \u003e\u003d 16000) goto B6 else B9\n}",
      "B6 {\n  $r10 \u003d Object)[1]\n  $r11 \u003d Integer.valueOf(i1)\n  $r10[0] \u003d $r11\n  r2.invoke(r9, $r10)\n  goto B8\n}",
      "B7 {\n  $r19 :\u003d @caughtexception\n  return\n}",
      "B8 {\n  i1 \u003d i1 + 1\n  goto B5\n}",
      "B9 {\n  $r3 \u003d JXPathException\n  $r4 \u003d StringBuilder\n  new StringBuilder()\n  $r6 \u003d $r4.append(\"Cannot determine the length of the indexed property \")\n  $r5 \u003d r0.getName()\n  $r7 \u003d $r6.append($r5)\n  $r8 \u003d $r7.toString()\n  new JXPathException($r8)\n  throw $r3\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B5",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ValueUtils#getLength(...1)",
        "body": "{\r\n    if (collection \u003d\u003d null) {\r\n        return 0;\r\n    }\r\n    collection \u003d getValue(collection);\r\n    if (collection.getClass().isArray()) {\r\n        return Array.getLength(collection);\r\n    }\r\n    if (collection instanceof Collection) {\r\n        return ((Collection) collection).size();\r\n    }\r\n    return 1;\r\n}"
      },
      {
        "name": "ValueUtils#getValue(...2)",
        "body": "{\r\n    collection \u003d getValue(collection);\r\n    Object value \u003d collection;\r\n    if (collection !\u003d null) {\r\n        if (collection.getClass().isArray()) {\r\n            if (index \u003c 0 || index \u003e\u003d Array.getLength(collection)) {\r\n                return null;\r\n            }\r\n            value \u003d Array.get(collection, index);\r\n        } else if (collection instanceof List) {\r\n            if (index \u003c 0 || index \u003e\u003d ((List) collection).size()) {\r\n                return null;\r\n            }\r\n            value \u003d ((List) collection).get(index);\r\n        } else if (collection instanceof Collection) {\r\n            if (index \u003c 0 || index \u003e\u003d ((Collection) collection).size()) {\r\n                return null;\r\n            }\r\n            int i \u003d 0;\r\n            final Iterator it \u003d ((Collection) collection).iterator();\r\n            for (; i \u003c index; i++) {\r\n                it.next();\r\n            }\r\n            if (it.hasNext()) {\r\n                value \u003d it.next();\r\n            } else {\r\n                value \u003d null;\r\n            }\r\n        }\r\n    }\r\n    return value;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.util.ValueUtils",
    "methodName": "getLength",
    "signature": "int getLength(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (collection \u003d\u003d null) {\r\n        return 0;\r\n    }\r\n    collection \u003d getValue(collection);\r\n    if (collection.getClass().isArray()) {\r\n        return Array.getLength(collection);\r\n    }\r\n    if (collection instanceof Collection) {\r\n        return ((Collection) collection).size();\r\n    }\r\n    return 1;\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d false) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r3 \u003d ValueUtils.getValue(r2)\n  $r0 \u003d r3.getClass()\n  $z0 \u003d $r0.isArray()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  $i1 \u003d Array.getLength(r3)\n  return\n}",
      "B4 {\n  $z1 \u003d Collection\n  if ($z1 \u003d\u003d false) goto B5 else B6\n}",
      "B5 {\n  $r1 \u003d Collection) r3\n  $i0 \u003d $r1.size()\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ValueUtils#getValue(...1)",
        "body": "{\r\n    while (object instanceof Container) {\r\n        object \u003d ((Container) object).getValue();\r\n    }\r\n    return object;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.util.ValueUtils",
    "methodName": "getValue",
    "signature": "java.lang.Object getValue(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    while (object instanceof Container) {\r\n        object \u003d ((Container) object).getValue();\r\n    }\r\n    return object;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Object\n}",
      "B1 {\n  $z0 \u003d Container\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r0 \u003d Container) r1\n  r1 \u003d $r0.getValue()\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.util.ValueUtils",
    "methodName": "getValue",
    "signature": "java.lang.Object getValue(java.lang.Object,int)",
    "visibility": "public",
    "body": "{\r\n    collection \u003d getValue(collection);\r\n    Object value \u003d collection;\r\n    if (collection !\u003d null) {\r\n        if (collection.getClass().isArray()) {\r\n            if (index \u003c 0 || index \u003e\u003d Array.getLength(collection)) {\r\n                return null;\r\n            }\r\n            value \u003d Array.get(collection, index);\r\n        } else if (collection instanceof List) {\r\n            if (index \u003c 0 || index \u003e\u003d ((List) collection).size()) {\r\n                return null;\r\n            }\r\n            value \u003d ((List) collection).get(index);\r\n        } else if (collection instanceof Collection) {\r\n            if (index \u003c 0 || index \u003e\u003d ((Collection) collection).size()) {\r\n                return null;\r\n            }\r\n            int i \u003d 0;\r\n            final Iterator it \u003d ((Collection) collection).iterator();\r\n            for (; i \u003c index; i++) {\r\n                it.next();\r\n            }\r\n            if (it.hasNext()) {\r\n                value \u003d it.next();\r\n            } else {\r\n                value \u003d null;\r\n            }\r\n        }\r\n    }\r\n    return value;\r\n}",
    "nodes": 22,
    "edges": 30,
    "cc": 10,
    "flowSummary": [
      "B0 : If(r7 \u003d\u003d null) → B1 | else → B21",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B6",
      "B2 : If(i0 \u003c 0) → B3 | else → B4",
      "B3 : If(i0 \u003c $i3) → B4 | else → B5",
      "B6 : If($z1 \u003d\u003d false) → B7 | else → B11",
      "B7 : If(i0 \u003c 0) → B8 | else → B9",
      "B8 : If(i0 \u003c $i2) → B9 | else → B10",
      "B11 : If($z2 \u003d\u003d false) → B12 | else → B21",
      "B12 : If(i0 \u003c 0) → B13 | else → B14",
      "B13 : If(i0 \u003c $i1) → B14 | else → B15",
      "B16 : If(i4 \u003e\u003d i0) → B17 | else → B18",
      "B18 : If($z3 \u003d\u003d false) → B19 | else → B20"
    ],
    "blockList": [
      "B0 {\n  Object\n  i0 :\u003d @parameter1: int\n  r7 \u003d ValueUtils.getValue(r6)\n  r8 \u003d r7\n  if (r7 \u003d\u003d null) goto B1 else B21\n}",
      "B1 {\n  $r0 \u003d r7.getClass()\n  $z0 \u003d $r0.isArray()\n  if ($z0 \u003d\u003d false) goto B2 else B6\n}",
      "B2 {\n  if (i0 \u003c 0) goto B3 else B4\n}",
      "B3 {\n  $i3 \u003d Array.getLength(r7)\n  if (i0 \u003c $i3) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  r8 \u003d Array.get(r7, i0)\n  goto B21\n}",
      "B6 {\n  $z1 \u003d List\n  if ($z1 \u003d\u003d false) goto B7 else B11\n}",
      "B7 {\n  if (i0 \u003c 0) goto B8 else B9\n}",
      "B8 {\n  $r4 \u003d List) r7\n  $i2 \u003d $r4.size()\n  if (i0 \u003c $i2) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $r5 \u003d List) r7\n  r8 \u003d $r5.get(i0)\n  goto B21\n}",
      "B11 {\n  $z2 \u003d Collection\n  if ($z2 \u003d\u003d false) goto B12 else B21\n}",
      "B12 {\n  if (i0 \u003c 0) goto B13 else B14\n}",
      "B13 {\n  $r1 \u003d Collection) r7\n  $i1 \u003d $r1.size()\n  if (i0 \u003c $i1) goto B14 else B15\n}",
      "B14 {\n  return\n}",
      "B15 {\n  i4 \u003d 0\n  $r2 \u003d Collection) r7\n  r3 \u003d $r2.iterator()\n}",
      "B16 {\n  if (i4 \u003e\u003d i0) goto B17 else B18\n}",
      "B17 {\n  r3.next()\n  i4 \u003d i4 + 1\n  goto B16\n}",
      "B18 {\n  $z3 \u003d r3.hasNext()\n  if ($z3 \u003d\u003d false) goto B19 else B20\n}",
      "B19 {\n  r8 \u003d r3.next()\n  goto B21\n}",
      "B20 {\n  r8 \u003d null\n}",
      "B21 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B21",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B21",
      "B6 --\u003e B7",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B21",
      "B11 --\u003e B12",
      "B11 --\u003e B21",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B16",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B16",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B21",
      "B21 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ValueUtils#getValue(...1)",
        "body": "{\r\n    while (object instanceof Container) {\r\n        object \u003d ((Container) object).getValue();\r\n    }\r\n    return object;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.util.ValueUtils",
    "methodName": "getValue",
    "signature": "java.lang.Object getValue(java.lang.Object,java.beans.PropertyDescriptor)",
    "visibility": "public",
    "body": "{\r\n    Object value;\r\n    try {\r\n        final Method method \u003d getAccessibleMethod(propertyDescriptor.getReadMethod());\r\n        if (method \u003d\u003d null) {\r\n            throw new JXPathException(\"No read method\");\r\n        }\r\n        value \u003d method.invoke(bean);\r\n    } catch (final Exception ex) {\r\n        throw new JXPathException(\"Cannot access property: \" + (bean \u003d\u003d null ? \"null\" : bean.getClass().getName()) + \".\" + propertyDescriptor.getName(), ex);\r\n    }\r\n    return value;\r\n}",
    "nodes": 8,
    "edges": 7,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r16 !\u003d null) → B1 | else → B2",
      "B3 : If(r2 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Object\n  PropertyDescriptor\n  $r1 \u003d r0.getReadMethod()\n  r16 \u003d ValueUtils.getAccessibleMethod($r1)\n  if (r16 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d JXPathException\n  new JXPathException(\"No read method\")\n  throw $r5\n}",
      "B2 {\n  $r3 \u003d Object)[0]\n  r4 \u003d r16.invoke(r2, $r3)\n  goto B7\n}",
      "B3 {\n  $r6 :\u003d @caughtexception\n  $r7 \u003d JXPathException\n  $r8 \u003d StringBuilder\n  new StringBuilder()\n  $r10 \u003d $r8.append(\"Cannot access property: \")\n  if (r2 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r17 \u003d \"null\"\n  goto B6\n}",
      "B5 {\n  $r9 \u003d r2.getClass()\n  $r17 \u003d $r9.getName()\n}",
      "B6 {\n  $r11 \u003d $r10.append($r17)\n  $r13 \u003d $r11.append(\".\")\n  $r12 \u003d r0.getName()\n  $r14 \u003d $r13.append($r12)\n  $r15 \u003d $r14.toString()\n  new JXPathException($r15, $r6)\n  throw $r7\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ValueUtils#getAccessibleMethod(...1)",
        "body": "{\r\n    // Make sure we have a method to check\r\n    if (method \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // If the requested method is not public we cannot call it\r\n    if (!Modifier.isPublic(method.getModifiers())) {\r\n        return null;\r\n    }\r\n    // If the declaring class is public, we are done\r\n    Class clazz \u003d method.getDeclaringClass();\r\n    if (Modifier.isPublic(clazz.getModifiers())) {\r\n        return method;\r\n    }\r\n    final String name \u003d method.getName();\r\n    final Class[] parameterTypes \u003d method.getParameterTypes();\r\n    while (clazz !\u003d null) {\r\n        // Check the implemented interfaces and subinterfaces\r\n        final Method aMethod \u003d getAccessibleMethodFromInterfaceNest(clazz, name, parameterTypes);\r\n        if (aMethod !\u003d null) {\r\n            return aMethod;\r\n        }\r\n        clazz \u003d clazz.getSuperclass();\r\n        if (clazz !\u003d null \u0026\u0026 Modifier.isPublic(clazz.getModifiers())) {\r\n            try {\r\n                return clazz.getDeclaredMethod(name, parameterTypes);\r\n            } catch (final NoSuchMethodException ignore) {\r\n                // NOPMD\r\n                // ignore\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.util.ValueUtils",
    "methodName": "isCollection",
    "signature": "boolean isCollection(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    value \u003d getValue(value);\r\n    if (value \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (value.getClass().isArray()) {\r\n        return true;\r\n    }\r\n    return value instanceof Collection;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Object\n  r2 \u003d ValueUtils.getValue(r1)\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r0 \u003d r2.getClass()\n  $z0 \u003d $r0.isArray()\n  if ($z0 \u003d\u003d false) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z1 \u003d Collection\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ValueUtils#getValue(...1)",
        "body": "{\r\n    while (object instanceof Container) {\r\n        object \u003d ((Container) object).getValue();\r\n    }\r\n    return object;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.util.ValueUtils",
    "methodName": "iterate",
    "signature": "java.util.Iterator iterate(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (collection \u003d\u003d null) {\r\n        return Collections.EMPTY_LIST.iterator();\r\n    }\r\n    if (collection.getClass().isArray()) {\r\n        final int length \u003d Array.getLength(collection);\r\n        if (length \u003d\u003d 0) {\r\n            return Collections.EMPTY_LIST.iterator();\r\n        }\r\n        final ArrayList list \u003d new ArrayList();\r\n        for (int i \u003d 0; i \u003c length; i++) {\r\n            list.add(Array.get(collection, i));\r\n        }\r\n        return list.iterator();\r\n    }\r\n    if (collection instanceof Collection) {\r\n        return ((Collection) collection).iterator();\r\n    }\r\n    return Collections.singletonList(collection).iterator();\r\n}",
    "nodes": 12,
    "edges": 12,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d false) → B3 | else → B9",
      "B3 : If(i0 !\u003d 0) → B4 | else → B5",
      "B6 : If(i1 \u003e\u003d i0) → B7 | else → B8",
      "B9 : If($z1 \u003d\u003d false) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r11 \u003d List EMPTY_LIST\u003e\n  $r12 \u003d $r11.iterator()\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getClass()\n  $z0 \u003d $r1.isArray()\n  if ($z0 \u003d\u003d false) goto B3 else B9\n}",
      "B3 {\n  i0 \u003d Array.getLength(r0)\n  if (i0 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r9 \u003d List EMPTY_LIST\u003e\n  $r10 \u003d $r9.iterator()\n  return\n}",
      "B5 {\n  $r6 \u003d ArrayList\n  new ArrayList()\n  i1 \u003d 0\n}",
      "B6 {\n  if (i1 \u003e\u003d i0) goto B7 else B8\n}",
      "B7 {\n  $r8 \u003d Array.get(r0, i1)\n  $r6.add($r8)\n  i1 \u003d i1 + 1\n  goto B6\n}",
      "B8 {\n  $r7 \u003d $r6.iterator()\n  return\n}",
      "B9 {\n  $z1 \u003d Collection\n  if ($z1 \u003d\u003d false) goto B10 else B11\n}",
      "B10 {\n  $r4 \u003d Collection) r0\n  $r5 \u003d $r4.iterator()\n  return\n}",
      "B11 {\n  $r2 \u003d Collections.singletonList(r0)\n  $r3 \u003d $r2.iterator()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B9",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B6",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.jxpath.util.ValueUtils",
    "methodName": "remove",
    "signature": "java.lang.Object remove(java.lang.Object,int)",
    "visibility": "public",
    "body": "{\r\n    collection \u003d getValue(collection);\r\n    if (collection \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (index \u003e\u003d getLength(collection)) {\r\n        throw new JXPathException(\"No such element at index \" + index);\r\n    }\r\n    if (collection.getClass().isArray()) {\r\n        final int length \u003d Array.getLength(collection);\r\n        final Object smaller \u003d Array.newInstance(collection.getClass().getComponentType(), length - 1);\r\n        if (index \u003e 0) {\r\n            System.arraycopy(collection, 0, smaller, 0, index);\r\n        }\r\n        if (index \u003c length - 1) {\r\n            System.arraycopy(collection, index + 1, smaller, index, length - index - 1);\r\n        }\r\n        return smaller;\r\n    }\r\n    if (collection instanceof List) {\r\n        final int size \u003d ((List) collection).size();\r\n        if (index \u003c size) {\r\n            ((List) collection).remove(index);\r\n        }\r\n        return collection;\r\n    }\r\n    if (collection instanceof Collection) {\r\n        final Iterator it \u003d ((Collection) collection).iterator();\r\n        for (int i \u003d 0; i \u003c index; i++) {\r\n            if (!it.hasNext()) {\r\n                break;\r\n            }\r\n            it.next();\r\n        }\r\n        if (it.hasNext()) {\r\n            it.next();\r\n            it.remove();\r\n        }\r\n        return collection;\r\n    }\r\n    throw new JXPathException(\"Cannot remove \" + collection.getClass().getName() + \"[\" + index + \"]\");\r\n}",
    "nodes": 24,
    "edges": 29,
    "cc": 7,
    "flowSummary": [
      "B0 : If(r22 !\u003d null) → B1 | else → B2",
      "B2 : If(i0 \u003c $i1) → B3 | else → B4",
      "B4 : If($z0 \u003d\u003d false) → B5 | else → B10",
      "B5 : If(i0 \u003c\u003d 0) → B6 | else → B7",
      "B7 : If(i0 \u003e\u003d $i3) → B8 | else → B9",
      "B10 : If($z1 \u003d\u003d false) → B11 | else → B14",
      "B11 : If(i0 \u003e\u003d i8) → B12 | else → B13",
      "B14 : If($z2 \u003d\u003d false) → B15 | else → B23",
      "B16 : If(i9 \u003e\u003d i0) → B17 | else → B20",
      "B17 : If($z4 !\u003d 0) → B18 | else → B19",
      "B20 : If($z3 \u003d\u003d false) → B21 | else → B22"
    ],
    "blockList": [
      "B0 {\n  Object\n  i0 :\u003d @parameter1: int\n  r22 \u003d ValueUtils.getValue(r21)\n  if (r22 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d ValueUtils.getLength(r22)\n  if (i0 \u003c $i1) goto B3 else B4\n}",
      "B3 {\n  $r16 \u003d JXPathException\n  $r17 \u003d StringBuilder\n  new StringBuilder()\n  $r18 \u003d $r17.append(\"No such element at index \")\n  $r19 \u003d $r18.append(i0)\n  $r20 \u003d $r19.toString()\n  new JXPathException($r20)\n  throw $r16\n}",
      "B4 {\n  $r0 \u003d r22.getClass()\n  $z0 \u003d $r0.isArray()\n  if ($z0 \u003d\u003d false) goto B5 else B10\n}",
      "B5 {\n  i7 \u003d Array.getLength(r22)\n  $r14 \u003d r22.getClass()\n  $r15 \u003d $r14.getComponentType()\n  $i2 \u003d i7 - 1\n  r23 \u003d Array.newInstance($r15, $i2)\n  if (i0 \u003c\u003d 0) goto B6 else B7\n}",
      "B6 {\n  System.arraycopy(r22, 0, r23, 0, i0)\n}",
      "B7 {\n  $i3 \u003d i7 - 1\n  if (i0 \u003e\u003d $i3) goto B8 else B9\n}",
      "B8 {\n  $i6 \u003d i0 + 1\n  $i4 \u003d i7 - i0\n  $i5 \u003d $i4 - 1\n  System.arraycopy(r22, $i6, r23, i0, $i5)\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $z1 \u003d List\n  if ($z1 \u003d\u003d false) goto B11 else B14\n}",
      "B11 {\n  $r12 \u003d List) r22\n  i8 \u003d $r12.size()\n  if (i0 \u003e\u003d i8) goto B12 else B13\n}",
      "B12 {\n  $r13 \u003d List) r22\n  $r13.remove(i0)\n}",
      "B13 {\n  return\n}",
      "B14 {\n  $z2 \u003d Collection\n  if ($z2 \u003d\u003d false) goto B15 else B23\n}",
      "B15 {\n  $r11 \u003d Collection) r22\n  r24 \u003d $r11.iterator()\n  i9 \u003d 0\n}",
      "B16 {\n  if (i9 \u003e\u003d i0) goto B17 else B20\n}",
      "B17 {\n  $z4 \u003d r24.hasNext()\n  if ($z4 !\u003d 0) goto B18 else B19\n}",
      "B18 {\n  goto B20\n}",
      "B19 {\n  r24.next()\n  i9 \u003d i9 + 1\n  goto B16\n}",
      "B20 {\n  $z3 \u003d r24.hasNext()\n  if ($z3 \u003d\u003d false) goto B21 else B22\n}",
      "B21 {\n  r24.next()\n  r24.remove()\n}",
      "B22 {\n  return\n}",
      "B23 {\n  $r1 \u003d JXPathException\n  $r2 \u003d StringBuilder\n  new StringBuilder()\n  $r5 \u003d $r2.append(\"Cannot remove \")\n  $r3 \u003d r22.getClass()\n  $r4 \u003d $r3.getName()\n  $r6 \u003d $r5.append($r4)\n  $r7 \u003d $r6.append(\"\")\n  $r8 \u003d $r7.append(i0)\n  $r9 \u003d $r8.append(\"\")\n  $r10 \u003d $r9.toString()\n  new JXPathException($r10)\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B10",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B23",
      "B15 --\u003e B16",
      "B16 --\u003e B17",
      "B16 --\u003e B20",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B16",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B22 --\u003e [EXIT]",
      "B23 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ValueUtils#getLength(...1)",
        "body": "{\r\n    if (collection \u003d\u003d null) {\r\n        return 0;\r\n    }\r\n    collection \u003d getValue(collection);\r\n    if (collection.getClass().isArray()) {\r\n        return Array.getLength(collection);\r\n    }\r\n    if (collection instanceof Collection) {\r\n        return ((Collection) collection).size();\r\n    }\r\n    return 1;\r\n}"
      },
      {
        "name": "ValueUtils#getValue(...1)",
        "body": "{\r\n    while (object instanceof Container) {\r\n        object \u003d ((Container) object).getValue();\r\n    }\r\n    return object;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.util.ValueUtils",
    "methodName": "setValue",
    "signature": "void setValue(java.lang.Object,int,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    collection \u003d getValue(collection);\r\n    if (collection !\u003d null) {\r\n        if (collection.getClass().isArray()) {\r\n            Array.set(collection, index, convert(value, collection.getClass().getComponentType()));\r\n        } else if (collection instanceof List) {\r\n            ((List) collection).set(index, value);\r\n        } else if (collection instanceof Collection) {\r\n            throw new UnsupportedOperationException(\"Cannot set value of an element of a \" + collection.getClass().getName());\r\n        }\r\n    }\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r14 \u003d\u003d null) → B1 | else → B7",
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B3",
      "B3 : If($z1 \u003d\u003d false) → B4 | else → B5",
      "B5 : If($z2 \u003d\u003d false) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Object\n  i0 :\u003d @parameter1: int\n  Object\n  r14 \u003d ValueUtils.getValue(r13)\n  if (r14 \u003d\u003d null) goto B1 else B7\n}",
      "B1 {\n  $r0 \u003d r14.getClass()\n  $z0 \u003d $r0.isArray()\n  if ($z0 \u003d\u003d false) goto B2 else B3\n}",
      "B2 {\n  $r10 \u003d r14.getClass()\n  $r11 \u003d $r10.getComponentType()\n  $r12 \u003d ValueUtils.convert(r8, $r11)\n  Array.set(r14, i0, $r12)\n  goto B7\n}",
      "B3 {\n  $z1 \u003d List\n  if ($z1 \u003d\u003d false) goto B4 else B5\n}",
      "B4 {\n  $r9 \u003d List) r14\n  $r9.set(i0, r8)\n  goto B7\n}",
      "B5 {\n  $z2 \u003d Collection\n  if ($z2 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  $r1 \u003d UnsupportedOperationException\n  $r2 \u003d StringBuilder\n  new StringBuilder()\n  $r5 \u003d $r2.append(\"Cannot set value of an element of a \")\n  $r3 \u003d r14.getClass()\n  $r4 \u003d $r3.getName()\n  $r6 \u003d $r5.append($r4)\n  $r7 \u003d $r6.toString()\n  new UnsupportedOperationException($r7)\n  throw $r1\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B7",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ValueUtils#getValue(...1)",
        "body": "{\r\n    while (object instanceof Container) {\r\n        object \u003d ((Container) object).getValue();\r\n    }\r\n    return object;\r\n}"
      },
      {
        "name": "ValueUtils#convert(...2)",
        "body": "{\r\n    try {\r\n        return TypeUtils.convert(value, type);\r\n    } catch (final Exception ex) {\r\n        throw new JXPathException(\"Cannot convert value of class \" + (value \u003d\u003d null ? \"null\" : value.getClass().getName()) + \" to type \" + type, ex);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.util.ValueUtils",
    "methodName": "setValue",
    "signature": "void setValue(java.lang.Object,java.beans.PropertyDescriptor,int,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (propertyDescriptor instanceof IndexedPropertyDescriptor) {\r\n        try {\r\n            final IndexedPropertyDescriptor ipd \u003d (IndexedPropertyDescriptor) propertyDescriptor;\r\n            final Method method \u003d ipd.getIndexedWriteMethod();\r\n            if (method !\u003d null) {\r\n                method.invoke(bean, Integer.valueOf(index), convert(value, ipd.getIndexedPropertyType()));\r\n                return;\r\n            }\r\n        } catch (final Exception ex) {\r\n            throw new IllegalArgumentException(\"Cannot access property: \" + propertyDescriptor.getName() + \", \" + ex.getMessage());\r\n        }\r\n    }\r\n    // We will fall through if there is no indexed read\r\n    final Object collection \u003d getValue(bean, propertyDescriptor);\r\n    if (isCollection(collection)) {\r\n        setValue(collection, index, value);\r\n    } else if (index \u003d\u003d 0) {\r\n        setValue(bean, propertyDescriptor, value);\r\n    } else {\r\n        throw new IllegalArgumentException(\"Not a collection: \" + propertyDescriptor.getName());\r\n    }\r\n}",
    "nodes": 11,
    "edges": 11,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B5",
      "B1 : If(r9 \u003d\u003d null) → B2 | else → B3",
      "B5 : If($z1 \u003d\u003d false) → B6 | else → B7",
      "B7 : If(i0 !\u003d 0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  Object\n  PropertyDescriptor\n  i0 :\u003d @parameter2: int\n  Object\n  $z0 \u003d IndexedPropertyDescriptor\n  if ($z0 \u003d\u003d false) goto B1 else B5\n}",
      "B1 {\n  r25 \u003d IndexedPropertyDescriptor) r0\n  r9 \u003d r25.getIndexedWriteMethod()\n  if (r9 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r11 \u003d Object)[2]\n  $r12 \u003d Integer.valueOf(i0)\n  $r11[0] \u003d $r12\n  $r13 \u003d r25.getIndexedPropertyType()\n  $r14 \u003d ValueUtils.convert(r8, $r13)\n  $r11[1] \u003d $r14\n  r9.invoke(r1, $r11)\n  return\n}",
      "B3 {\n  goto B5\n}",
      "B4 {\n  $r15 :\u003d @caughtexception\n  $r16 \u003d IllegalArgumentException\n  $r17 \u003d StringBuilder\n  new StringBuilder()\n  $r19 \u003d $r17.append(\"Cannot access property: \")\n  $r18 \u003d r0.getName()\n  $r20 \u003d $r19.append($r18)\n  $r22 \u003d $r20.append(\", \")\n  $r21 \u003d $r15.getMessage()\n  $r23 \u003d $r22.append($r21)\n  $r24 \u003d $r23.toString()\n  new IllegalArgumentException($r24)\n  throw $r16\n}",
      "B5 {\n  $r10 \u003d ValueUtils.getValue(r1, r0)\n  $z1 \u003d ValueUtils.isCollection($r10)\n  if ($z1 \u003d\u003d false) goto B6 else B7\n}",
      "B6 {\n  ValueUtils.setValue($r10, i0, r8)\n  goto B10\n}",
      "B7 {\n  if (i0 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  ValueUtils.setValue(r1, r0, r8)\n  goto B10\n}",
      "B9 {\n  $r2 \u003d IllegalArgumentException\n  $r3 \u003d StringBuilder\n  new StringBuilder()\n  $r5 \u003d $r3.append(\"Not a collection: \")\n  $r4 \u003d r0.getName()\n  $r6 \u003d $r5.append($r4)\n  $r7 \u003d $r6.toString()\n  new IllegalArgumentException($r7)\n  throw $r2\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ValueUtils#getValue(...2)",
        "body": "{\r\n    collection \u003d getValue(collection);\r\n    Object value \u003d collection;\r\n    if (collection !\u003d null) {\r\n        if (collection.getClass().isArray()) {\r\n            if (index \u003c 0 || index \u003e\u003d Array.getLength(collection)) {\r\n                return null;\r\n            }\r\n            value \u003d Array.get(collection, index);\r\n        } else if (collection instanceof List) {\r\n            if (index \u003c 0 || index \u003e\u003d ((List) collection).size()) {\r\n                return null;\r\n            }\r\n            value \u003d ((List) collection).get(index);\r\n        } else if (collection instanceof Collection) {\r\n            if (index \u003c 0 || index \u003e\u003d ((Collection) collection).size()) {\r\n                return null;\r\n            }\r\n            int i \u003d 0;\r\n            final Iterator it \u003d ((Collection) collection).iterator();\r\n            for (; i \u003c index; i++) {\r\n                it.next();\r\n            }\r\n            if (it.hasNext()) {\r\n                value \u003d it.next();\r\n            } else {\r\n                value \u003d null;\r\n            }\r\n        }\r\n    }\r\n    return value;\r\n}"
      },
      {
        "name": "ValueUtils#setValue(...3)",
        "body": "{\r\n    collection \u003d getValue(collection);\r\n    if (collection !\u003d null) {\r\n        if (collection.getClass().isArray()) {\r\n            Array.set(collection, index, convert(value, collection.getClass().getComponentType()));\r\n        } else if (collection instanceof List) {\r\n            ((List) collection).set(index, value);\r\n        } else if (collection instanceof Collection) {\r\n            throw new UnsupportedOperationException(\"Cannot set value of an element of a \" + collection.getClass().getName());\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "ValueUtils#convert(...2)",
        "body": "{\r\n    try {\r\n        return TypeUtils.convert(value, type);\r\n    } catch (final Exception ex) {\r\n        throw new JXPathException(\"Cannot convert value of class \" + (value \u003d\u003d null ? \"null\" : value.getClass().getName()) + \" to type \" + type, ex);\r\n    }\r\n}"
      },
      {
        "name": "ValueUtils#isCollection(...1)",
        "body": "{\r\n    value \u003d getValue(value);\r\n    if (value \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (value.getClass().isArray()) {\r\n        return true;\r\n    }\r\n    return value instanceof Collection;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.util.ValueUtils",
    "methodName": "setValue",
    "signature": "void setValue(java.lang.Object,java.beans.PropertyDescriptor,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    try {\r\n        final Method method \u003d getAccessibleMethod(propertyDescriptor.getWriteMethod());\r\n        if (method \u003d\u003d null) {\r\n            throw new JXPathException(\"No write method\");\r\n        }\r\n        value \u003d convert(value, propertyDescriptor.getPropertyType());\r\n        method.invoke(bean, value);\r\n    } catch (final Exception ex) {\r\n        throw new JXPathException(\"Cannot modify property: \" + (bean \u003d\u003d null ? \"null\" : bean.getClass().getName()) + \".\" + propertyDescriptor.getName(), ex);\r\n    }\r\n}",
    "nodes": 8,
    "edges": 7,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r17 !\u003d null) → B1 | else → B2",
      "B3 : If(r3 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Object\n  PropertyDescriptor\n  Object\n  $r1 \u003d r0.getWriteMethod()\n  r17 \u003d ValueUtils.getAccessibleMethod($r1)\n  if (r17 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d JXPathException\n  new JXPathException(\"No write method\")\n  throw $r5\n}",
      "B2 {\n  $r2 \u003d r0.getPropertyType()\n  r18 \u003d ValueUtils.convert(r16, $r2)\n  $r4 \u003d Object)[1]\n  $r4[0] \u003d r18\n  r17.invoke(r3, $r4)\n  goto B7\n}",
      "B3 {\n  $r6 :\u003d @caughtexception\n  $r7 \u003d JXPathException\n  $r8 \u003d StringBuilder\n  new StringBuilder()\n  $r10 \u003d $r8.append(\"Cannot modify property: \")\n  if (r3 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r19 \u003d \"null\"\n  goto B6\n}",
      "B5 {\n  $r9 \u003d r3.getClass()\n  $r19 \u003d $r9.getName()\n}",
      "B6 {\n  $r11 \u003d $r10.append($r19)\n  $r13 \u003d $r11.append(\".\")\n  $r12 \u003d r0.getName()\n  $r14 \u003d $r13.append($r12)\n  $r15 \u003d $r14.toString()\n  new JXPathException($r15, $r6)\n  throw $r7\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ValueUtils#convert(...2)",
        "body": "{\r\n    try {\r\n        return TypeUtils.convert(value, type);\r\n    } catch (final Exception ex) {\r\n        throw new JXPathException(\"Cannot convert value of class \" + (value \u003d\u003d null ? \"null\" : value.getClass().getName()) + \" to type \" + type, ex);\r\n    }\r\n}"
      },
      {
        "name": "ValueUtils#getAccessibleMethod(...1)",
        "body": "{\r\n    // Make sure we have a method to check\r\n    if (method \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    // If the requested method is not public we cannot call it\r\n    if (!Modifier.isPublic(method.getModifiers())) {\r\n        return null;\r\n    }\r\n    // If the declaring class is public, we are done\r\n    Class clazz \u003d method.getDeclaringClass();\r\n    if (Modifier.isPublic(clazz.getModifiers())) {\r\n        return method;\r\n    }\r\n    final String name \u003d method.getName();\r\n    final Class[] parameterTypes \u003d method.getParameterTypes();\r\n    while (clazz !\u003d null) {\r\n        // Check the implemented interfaces and subinterfaces\r\n        final Method aMethod \u003d getAccessibleMethodFromInterfaceNest(clazz, name, parameterTypes);\r\n        if (aMethod !\u003d null) {\r\n            return aMethod;\r\n        }\r\n        clazz \u003d clazz.getSuperclass();\r\n        if (clazz !\u003d null \u0026\u0026 Modifier.isPublic(clazz.getModifiers())) {\r\n            try {\r\n                return clazz.getDeclaredMethod(name, parameterTypes);\r\n            } catch (final NoSuchMethodException ignore) {\r\n                // NOPMD\r\n                // ignore\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.xml.DocumentContainer",
    "methodName": "getValue",
    "signature": "java.lang.Object getValue()",
    "visibility": "public",
    "body": "{\r\n    if (document \u003d\u003d null) {\r\n        try {\r\n            InputStream stream \u003d null;\r\n            try {\r\n                if (xmlUrl !\u003d null) {\r\n                    stream \u003d xmlUrl.openStream();\r\n                }\r\n                document \u003d parseXML(stream);\r\n            } finally {\r\n                if (stream !\u003d null) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        } catch (final IOException ex) {\r\n            throw new JXPathException(\"Cannot read XML from: \" + xmlUrl.toString(), ex);\r\n        }\r\n    }\r\n    return document;\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B10",
      "B1 : If($r3 \u003d\u003d null) → B2 | else → B3",
      "B3 : If(r15 \u003d\u003d null) → B4 | else → B8",
      "B5 : If(r15 \u003d\u003d null) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  DocumentContainer\n  $r1 \u003d Object document\u003e\n  if ($r1 !\u003d null) goto B1 else B10\n}",
      "B1 {\n  r15 \u003d null\n  $r3 \u003d URL xmlUrl\u003e\n  if ($r3 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d URL xmlUrl\u003e\n  r15 \u003d $r5.openStream()\n}",
      "B3 {\n  $r4 \u003d r0.parseXML(r15)\n  Object document\u003e \u003d $r4\n  if (r15 \u003d\u003d null) goto B4 else B8\n}",
      "B4 {\n  r15.close()\n  goto B8\n}",
      "B5 {\n  $r14 :\u003d @caughtexception\n  if (r15 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  r15.close()\n}",
      "B7 {\n  throw $r14\n}",
      "B8 {\n  goto B10\n}",
      "B9 {\n  $r6 :\u003d @caughtexception\n  $r7 \u003d JXPathException\n  $r8 \u003d StringBuilder\n  new StringBuilder()\n  $r11 \u003d $r8.append(\"Cannot read XML from: \")\n  $r9 \u003d URL xmlUrl\u003e\n  $r10 \u003d $r9.toString()\n  $r12 \u003d $r11.append($r10)\n  $r13 \u003d $r12.toString()\n  new JXPathException($r13, $r6)\n  throw $r7\n}",
      "B10 {\n  $r2 \u003d Object document\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B10",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DocumentContainer#parseXML(...1)",
        "body": "{\r\n    final XMLParser parser \u003d getParser(model);\r\n    if (parser instanceof XMLParser2) {\r\n        final XMLParser2 parser2 \u003d (XMLParser2) parser;\r\n        parser2.setValidating(isValidating());\r\n        parser2.setNamespaceAware(isNamespaceAware());\r\n        parser2.setIgnoringElementContentWhitespace(isIgnoringElementContentWhitespace());\r\n        parser2.setExpandEntityReferences(isExpandEntityReferences());\r\n        parser2.setIgnoringComments(isIgnoringComments());\r\n        parser2.setCoalescing(isCoalescing());\r\n    }\r\n    return parser.parseXML(stream);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.xml.DocumentContainer",
    "methodName": "parseXML",
    "signature": "java.lang.Object parseXML(java.io.InputStream)",
    "visibility": "public",
    "body": "{\r\n    final XMLParser parser \u003d getParser(model);\r\n    if (parser instanceof XMLParser2) {\r\n        final XMLParser2 parser2 \u003d (XMLParser2) parser;\r\n        parser2.setValidating(isValidating());\r\n        parser2.setNamespaceAware(isNamespaceAware());\r\n        parser2.setIgnoringElementContentWhitespace(isIgnoringElementContentWhitespace());\r\n        parser2.setExpandEntityReferences(isExpandEntityReferences());\r\n        parser2.setIgnoringComments(isIgnoringComments());\r\n        parser2.setCoalescing(isCoalescing());\r\n    }\r\n    return parser.parseXML(stream);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d false) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DocumentContainer\n  InputStream\n  $r1 \u003d String model\u003e\n  r2 \u003d DocumentContainer.getParser($r1)\n  $z0 \u003d XMLParser2\n  if ($z0 \u003d\u003d false) goto B1 else B2\n}",
      "B1 {\n  r5 \u003d XMLParser2) r2\n  $z1 \u003d r0.isValidating()\n  r5.setValidating($z1)\n  $z2 \u003d r0.isNamespaceAware()\n  r5.setNamespaceAware($z2)\n  $z3 \u003d r0.isIgnoringElementContentWhitespace()\n  r5.setIgnoringElementContentWhitespace($z3)\n  $z4 \u003d r0.isExpandEntityReferences()\n  r5.setExpandEntityReferences($z4)\n  $z5 \u003d r0.isIgnoringComments()\n  r5.setIgnoringComments($z5)\n  $z6 \u003d r0.isCoalescing()\n  r5.setCoalescing($z6)\n}",
      "B2 {\n  $r4 \u003d r2.parseXML(r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DocumentContainer#isExpandEntityReferences(...0)",
        "body": "(source not found)"
      },
      {
        "name": "DocumentContainer#isValidating(...0)",
        "body": "(source not found)"
      },
      {
        "name": "DocumentContainer#isCoalescing(...0)",
        "body": "(source not found)"
      },
      {
        "name": "DocumentContainer#getParser(...1)",
        "body": "{\r\n    return parsers.computeIfAbsent(model, k -\u003e {\r\n        final String className \u003d parserClasses.get(model);\r\n        if (className \u003d\u003d null) {\r\n            throw new JXPathException(\"Unsupported XML model: \" + model);\r\n        }\r\n        try {\r\n            return ClassLoaderUtil.\u003cXMLParser\u003egetClass(className, true).getConstructor().newInstance();\r\n        } catch (final Exception ex) {\r\n            throw new JXPathException(\"Cannot allocate XMLParser: \" + className, ex);\r\n        }\r\n    });\r\n}"
      },
      {
        "name": "DocumentContainer#isNamespaceAware(...0)",
        "body": "(source not found)"
      },
      {
        "name": "DocumentContainer#isIgnoringElementContentWhitespace(...0)",
        "body": "(source not found)"
      },
      {
        "name": "DocumentContainer#isIgnoringComments(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.jxpath.XMLDocumentContainer",
    "methodName": "getValue",
    "signature": "java.lang.Object getValue()",
    "visibility": "public",
    "body": "{\r\n    if (document \u003d\u003d null) {\r\n        try {\r\n            if (source !\u003d null) {\r\n                final DOMResult result \u003d new DOMResult();\r\n                final Transformer trans \u003d TransformerFactory.newInstance().newTransformer();\r\n                trans.transform(source, result);\r\n                document \u003d result.getNode();\r\n            } else {\r\n                document \u003d delegate.getValue();\r\n            }\r\n        } catch (final Exception ex) {\r\n            throw new JXPathException(\"Cannot read XML from: \" + (xmlURL !\u003d null ? xmlURL.toString() : source !\u003d null ? source.getSystemId() : \"\u003c\u003cundefined source\u003e\u003e\"), ex);\r\n        }\r\n    }\r\n    return document;\r\n}",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B11",
      "B1 : If($r3 \u003d\u003d null) → B2 | else → B3",
      "B5 : If($r13 \u003d\u003d null) → B6 | else → B7",
      "B7 : If($r14 \u003d\u003d null) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  XMLDocumentContainer\n  $r1 \u003d Object document\u003e\n  if ($r1 !\u003d null) goto B1 else B11\n}",
      "B1 {\n  $r3 \u003d Source source\u003e\n  if ($r3 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d DOMResult\n  new DOMResult()\n  $r7 \u003d TransformerFactory.newInstance()\n  r8 \u003d $r7.newTransformer()\n  $r9 \u003d Source source\u003e\n  r8.transform($r9, $r6)\n  $r10 \u003d $r6.getNode()\n  Object document\u003e \u003d $r10\n  goto B4\n}",
      "B3 {\n  $r4 \u003d DocumentContainer delegate\u003e\n  $r5 \u003d $r4.getValue()\n  Object document\u003e \u003d $r5\n}",
      "B4 {\n  goto B11\n}",
      "B5 {\n  $r11 :\u003d @caughtexception\n  $r17 \u003d JXPathException\n  $r12 \u003d StringBuilder\n  new StringBuilder()\n  $r18 \u003d $r12.append(\"Cannot read XML from: \")\n  $r13 \u003d URL xmlURL\u003e\n  if ($r13 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r16 \u003d URL xmlURL\u003e\n  $r19 \u003d $r16.toString()\n  goto B10\n}",
      "B7 {\n  $r14 \u003d Source source\u003e\n  if ($r14 \u003d\u003d null) goto B8 else B9\n}",
      "B8 {\n  $r15 \u003d Source source\u003e\n  $r19 \u003d $r15.getSystemId()\n  goto B10\n}",
      "B9 {\n  $r19 \u003d \"\u003c\u003cundefined source\u003e\u003e\"\n}",
      "B10 {\n  $r20 \u003d $r18.append($r19)\n  $r21 \u003d $r20.toString()\n  new JXPathException($r21, $r11)\n  throw $r17\n}",
      "B11 {\n  $r2 \u003d Object document\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B11",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B11",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "SootCFGAnalysis",
    "methodName": "main",
    "signature": "void main(java.lang.String[])",
    "visibility": "public",
    "body": "{\r\n    //        String targetDir \u003d \"C:\\\\Users\\\\user\\\\Desktop\\\\agtTest\\\\benchmark\\\\commons-collections4-4.5.0-M1-src\\\\commons-collections4-4.5.0-M1-src\\\\target\\\\classes\"; // 클래스 파일 경로 (.class로 컴파일된 폴더)\r\n    //        String outputCsv \u003d \"C:\\\\Users\\\\user\\\\Desktop\\\\agtTest\\\\cfg_analysis_result.tsv\"; // 결과 저장할 CSV 파일 경로\r\n    // 클래스 파일 경로 (.class로 컴파일된 폴더)\r\n    String targetDir \u003d \"C:\\\\Users\\\\00000\\\\Desktop\\\\my\\\\javaBenchmark\\\\commons-jxpath-rel-commons-jxpath-1.4.0\\\\target\\\\classes\";\r\n    // 결과 저장할 CSV 파일 경로\r\n    String outputCsv \u003d \"C:\\\\Users\\\\00000\\\\Desktop\\\\my\\\\cfg_analysis_all_result_jxpath.csv\";\r\n    // (1) 기본 Soot 설정\r\n    Options.v().set_prepend_classpath(true);\r\n    Options.v().set_process_dir(Collections.singletonList(targetDir));\r\n    Options.v().set_whole_program(true);\r\n    // 출력 없음\r\n    Options.v().set_output_format(Options.output_format_none);\r\n    Options.v().set_no_bodies_for_excluded(true);\r\n    Options.v().set_allow_phantom_refs(true);\r\n    Options.v().set_keep_line_number(true);\r\n    Options.v().setPhaseOption(\"jb\", \"use-original-names:true\");\r\n    Scene.v().loadNecessaryClasses();\r\n    // (★) 이미 본 메서드 서명을 기억할 Set\r\n    Set\u003cString\u003e seen \u003d new HashSet\u003c\u003e();\r\n    // (2) 애플리케이션 클래스들 순회\r\n    try (CSVWriter writer \u003d new CSVWriter(new FileWriter(outputCsv))) {\r\n        // CSV 헤더 작성\r\n        writer.writeNext(new String[] { \"Class\", \"Method\", \"MethodSig\", \"Nodes\", \"Edges\", \"McCabe_CC\", \"StartLine\", \"EndLine\", \"LineCount\" });\r\n        List\u003cSootClass\u003e classes \u003d new ArrayList\u003c\u003e(Scene.v().getApplicationClasses());\r\n        for (SootClass cls : classes) {\r\n            for (SootMethod method : cls.getMethods()) {\r\n                if (!method.isConcrete())\r\n                    continue;\r\n                try {\r\n                    Body body \u003d method.retrieveActiveBody();\r\n                    // 기본 블록 단위\r\n                    BlockGraph cfg \u003d new BriefBlockGraph(body);\r\n                    int nodeCount \u003d cfg.size();\r\n                    int edgeCount \u003d 0;\r\n                    for (Block b : cfg) edgeCount +\u003d cfg.getSuccsOf(b).size();\r\n                    int cc \u003d edgeCount - nodeCount + 2;\r\n                    int startLine \u003d Integer.MAX_VALUE;\r\n                    int endLine \u003d Integer.MIN_VALUE;\r\n                    for (Unit unit : body.getUnits()) {\r\n                        int line \u003d unit.getJavaSourceStartLineNumber();\r\n                        if (line \u003e 0) {\r\n                            startLine \u003d Math.min(startLine, line);\r\n                            endLine \u003d Math.max(endLine, line);\r\n                        }\r\n                    }\r\n                    int lineCount \u003d (startLine \u003c\u003d endLine) ? (endLine - startLine + 1) : 0;\r\n                    if (!isTopLevelPublic(cls) || !isRealMethod(method))\r\n                        continue;\r\n                    if (nodeCount \u003d\u003d 0 || edgeCount \u003d\u003d 0)\r\n                        continue;\r\n                    if (cc \u003c\u003d 0)\r\n                        continue;\r\n                    String methodSig \u003d method.getSubSignature();\r\n                    String uniqueKey \u003d method.getSignature();\r\n                    // (★) 이미 기록된 서명이라면 건너뛰기\r\n                    if (!seen.add(uniqueKey))\r\n                        continue;\r\n                    // 결과를 CSV로 저장\r\n                    String[] row \u003d { cls.getName(), method.getName(), uniqueKey, String.valueOf(nodeCount), String.valueOf(edgeCount), String.valueOf(cc), String.valueOf(startLine), String.valueOf(endLine), String.valueOf(lineCount) };\r\n                    writer.writeNext(row);\r\n                } catch (Exception e) {\r\n                    System.out.printf(\"[⚠️ 오류] %s.%s: %s\\n\", cls.getName(), method.getName(), e.getMessage());\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"✅ 분석 완료: \" + outputCsv + \"에 저장됨\");\r\n    } catch (IOException e) {\r\n        System.err.println(\"❌ CSV 저장 중 오류: \" + e.getMessage());\r\n    }\r\n}",
    "nodes": 38,
    "edges": 49,
    "cc": 13,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d false) → B2 | else → B31",
      "B3 : If($z7 \u003d\u003d false) → B4 | else → B30",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6",
      "B7 : If($z2 \u003d\u003d false) → B8 | else → B9",
      "B10 : If($z3 \u003d\u003d false) → B11 | else → B14",
      "B11 : If(i8 \u003c\u003d 0) → B12 | else → B13",
      "B14 : If(i6 \u003e i7) → B15 | else → B16",
      "B17 : If($z4 \u003d\u003d false) → B18 | else → B19",
      "B18 : If($z5 !\u003d 0) → B19 | else → B20",
      "B20 : If(i0 \u003d\u003d false) → B21 | else → B22",
      "B21 : If(i4 !\u003d 0) → B22 | else → B23",
      "B23 : If(i5 \u003e 0) → B24 | else → B25",
      "B25 : If($z6 !\u003d 0) → B26 | else → B27"
    ],
    "blockList": [
      "B0 {\n  String[]\n  $r0 \u003d Options.v()\n  $r0.set_prepend_classpath(1)\n  $r2 \u003d Options.v()\n  $r1 \u003d Collections.singletonList(\"C:\\\\Users\\\\00000\\\\Desktop\\\\my\\\\javaBenchmark\\\\commons-jxpath-rel-commons-jxpath-1.4.0\\\\target\\\\classes\")\n  $r2.set_process_dir($r1)\n  $r3 \u003d Options.v()\n  $r3.set_whole_program(1)\n  $r4 \u003d Options.v()\n  $r4.set_output_format(12)\n  $r5 \u003d Options.v()\n  $r5.set_no_bodies_for_excluded(1)\n  $r6 \u003d Options.v()\n  $r6.set_allow_phantom_refs(1)\n  $r7 \u003d Options.v()\n  $r7.set_keep_line_number(1)\n  $r8 \u003d Options.v()\n  $r8.setPhaseOption(\"jb\", \"use-original-names:true\")\n  $r9 \u003d Scene.v()\n  $r9.loadNecessaryClasses()\n  $r10 \u003d HashSet\n  new HashSet()\n  $r11 \u003d CSVWriter\n  $r12 \u003d FileWriter\n  new FileWriter(\"C:\\\\Users\\\\00000\\\\Desktop\\\\my\\\\cfg_analysis_all_result_jxpath.csv\")\n  new CSVWriter($r12)\n  $r13 \u003d String)[9]\n  $r13[0] \u003d \"Class\"\n  $r13[1] \u003d \"Method\"\n  $r13[2] \u003d \"MethodSig\"\n  $r13[3] \u003d \"Nodes\"\n  $r13[4] \u003d \"Edges\"\n  $r13[5] \u003d \"McCabe_CC\"\n  $r13[6] \u003d \"StartLine\"\n  $r13[7] \u003d \"EndLine\"\n  $r13[8] \u003d \"LineCount\"\n  $r11.writeNext($r13)\n  $r14 \u003d ArrayList\n  $r15 \u003d Scene.v()\n  $r16 \u003d $r15.getApplicationClasses()\n  new ArrayList($r16)\n  r59 \u003d $r14.iterator()\n}",
      "B1 {\n  $z0 \u003d r59.hasNext()\n  if ($z0 \u003d\u003d false) goto B2 else B31\n}",
      "B2 {\n  $r23 \u003d r59.next()\n  r24 \u003d SootClass) $r23\n  $r25 \u003d r24.getMethods()\n  r26 \u003d $r25.iterator()\n}",
      "B3 {\n  $z7 \u003d r26.hasNext()\n  if ($z7 \u003d\u003d false) goto B4 else B30\n}",
      "B4 {\n  $r27 \u003d r26.next()\n  r28 \u003d SootMethod) $r27\n  $z1 \u003d r28.isConcrete()\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  goto B3\n}",
      "B6 {\n  r60 \u003d r28.retrieveActiveBody()\n  $r29 \u003d BriefBlockGraph\n  new BriefBlockGraph(r60)\n  i0 \u003d $r29.size()\n  i4 \u003d 0\n  r61 \u003d $r29.iterator()\n}",
      "B7 {\n  $z2 \u003d r61.hasNext()\n  if ($z2 \u003d\u003d false) goto B8 else B9\n}",
      "B8 {\n  $r41 \u003d r61.next()\n  r62 \u003d Block) $r41\n  $r42 \u003d $r29.getSuccsOf(r62)\n  $i3 \u003d $r42.size()\n  i4 \u003d i4 + $i3\n  goto B7\n}",
      "B9 {\n  $i1 \u003d i4 - i0\n  i5 \u003d $i1 + 2\n  i6 \u003d 2147483647\n  i7 \u003d -2147483648\n  $r30 \u003d r60.getUnits()\n  r63 \u003d $r30.iterator()\n}",
      "B10 {\n  $z3 \u003d r63.hasNext()\n  if ($z3 \u003d\u003d false) goto B11 else B14\n}",
      "B11 {\n  $r40 \u003d r63.next()\n  r64 \u003d Unit) $r40\n  i8 \u003d r64.getJavaSourceStartLineNumber()\n  if (i8 \u003c\u003d 0) goto B12 else B13\n}",
      "B12 {\n  i6 \u003d Math.min(i6, i8)\n  i7 \u003d Math.max(i7, i8)\n}",
      "B13 {\n  goto B10\n}",
      "B14 {\n  if (i6 \u003e i7) goto B15 else B16\n}",
      "B15 {\n  $i2 \u003d i7 - i6\n  $i9 \u003d $i2 + 1\n  goto B17\n}",
      "B16 {\n  $i9 \u003d 0\n}",
      "B17 {\n  $z4 \u003d SootCFGAnalysis.isTopLevelPublic(r24)\n  if ($z4 \u003d\u003d false) goto B18 else B19\n}",
      "B18 {\n  $z5 \u003d SootCFGAnalysis.isRealMethod(r28)\n  if ($z5 !\u003d 0) goto B19 else B20\n}",
      "B19 {\n  goto B3\n}",
      "B20 {\n  if (i0 \u003d\u003d false) goto B21 else B22\n}",
      "B21 {\n  if (i4 !\u003d 0) goto B22 else B23\n}",
      "B22 {\n  goto B3\n}",
      "B23 {\n  if (i5 \u003e 0) goto B24 else B25\n}",
      "B24 {\n  goto B3\n}",
      "B25 {\n  r28.getSubSignature()\n  r65 \u003d r28.getSignature()\n  $z6 \u003d $r10.add(r65)\n  if ($z6 !\u003d 0) goto B26 else B27\n}",
      "B26 {\n  goto B3\n}",
      "B27 {\n  $r31 \u003d String)[9]\n  $r32 \u003d r24.getName()\n  $r31[0] \u003d $r32\n  $r33 \u003d r28.getName()\n  $r31[1] \u003d $r33\n  $r31[2] \u003d r65\n  $r34 \u003d String.valueOf(i0)\n  $r31[3] \u003d $r34\n  $r35 \u003d String.valueOf(i4)\n  $r31[4] \u003d $r35\n  $r36 \u003d String.valueOf(i5)\n  $r31[5] \u003d $r36\n  $r37 \u003d String.valueOf(i6)\n  $r31[6] \u003d $r37\n  $r38 \u003d String.valueOf(i7)\n  $r31[7] \u003d $r38\n  $r39 \u003d String.valueOf($i9)\n  $r31[8] \u003d $r39\n  $r11.writeNext($r31)\n  goto B29\n}",
      "B28 {\n  $r52 :\u003d @caughtexception\n  $r54 \u003d PrintStream out\u003e\n  $r53 \u003d Object)[3]\n  $r55 \u003d r24.getName()\n  $r53[0] \u003d $r55\n  $r56 \u003d r28.getName()\n  $r53[1] \u003d $r56\n  $r57 \u003d $r52.getMessage()\n  $r53[2] \u003d $r57\n  $r54.printf(\"\\u26a0\\ufe0f \\uc624\\ub958 %s.%s: %s\\n\", $r53)\n}",
      "B29 {\n  goto B3\n}",
      "B30 {\n  goto B1\n}",
      "B31 {\n  $r18 \u003d PrintStream out\u003e\n  $r17 \u003d StringBuilder\n  new StringBuilder()\n  $r19 \u003d $r17.append(\"\\u2705 \\ubd84\\uc11d \\uc644\\ub8cc: \")\n  $r20 \u003d $r19.append(\"C:\\\\Users\\\\00000\\\\Desktop\\\\my\\\\cfg_analysis_all_result_jxpath.csv\")\n  $r21 \u003d $r20.append(\"\\uc5d0 \\uc800\\uc7a5\\ub428\")\n  $r22 \u003d $r21.toString()\n  $r18.println($r22)\n  $r11.close()\n  goto B35\n}",
      "B32 {\n  $r51 :\u003d @caughtexception\n  $r11.close()\n  goto B34\n}",
      "B33 {\n  $r50 :\u003d @caughtexception\n  $r51.addSuppressed($r50)\n}",
      "B34 {\n  throw $r51\n}",
      "B35 {\n  goto B37\n}",
      "B36 {\n  $r43 :\u003d @caughtexception\n  $r45 \u003d PrintStream err\u003e\n  $r44 \u003d StringBuilder\n  new StringBuilder()\n  $r47 \u003d $r44.append(\"\\u274c CSV \\uc800\\uc7a5 \\uc911 \\uc624\\ub958: \")\n  $r46 \u003d $r43.getMessage()\n  $r48 \u003d $r47.append($r46)\n  $r49 \u003d $r48.toString()\n  $r45.println($r49)\n}",
      "B37 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B31",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B30",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B3",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B7",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B10",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B3",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B3",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B3",
      "B25 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B3",
      "B27 --\u003e B29",
      "B28 --\u003e B29",
      "B29 --\u003e B3",
      "B30 --\u003e B1",
      "B31 --\u003e B35",
      "B32 --\u003e B34",
      "B33 --\u003e B34",
      "B34 --\u003e [EXIT]",
      "B35 --\u003e B37",
      "B36 --\u003e B37",
      "B37 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SootCFGAnalysis#isTopLevelPublic(...1)",
        "body": "{\r\n    return c.isPublic() \u0026\u0026 !c.getName().contains(\"$\") \u0026\u0026 !c.isInterface() \u0026\u0026 !c.isAbstract();\r\n}"
      },
      {
        "name": "SootCFGAnalysis#isRealMethod(...1)",
        "body": "{\r\n    // (1) 바디 없는 메서드는 제외\r\n    if (!m.isConcrete())\r\n        return false;\r\n    // (2) 생성자/클래스 초기화자 제외\r\n    if (m.isConstructor() || m.isStaticInitializer())\r\n        return false;\r\n    // (3) 컴파일러 생성 메서드 제외 (synthetic, bridge)\r\n    final int ACC_BRIDGE \u003d 0x0040;\r\n    final int ACC_SYNTHETIC \u003d 0x1000;\r\n    int mod \u003d m.getModifiers();\r\n    // (4) public 이 아닌 메서드 제외\r\n    if (!Modifier.isPublic(mod))\r\n        return false;\r\n    return (mod \u0026 ACC_BRIDGE) \u003d\u003d 0 \u0026\u0026 (mod \u0026 ACC_SYNTHETIC) \u003d\u003d 0;\r\n}"
      }
    ]
  }
]