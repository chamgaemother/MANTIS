[
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "isEligible",
    "signature": "boolean isEligible(soot.SootClass,soot.SootMethod)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 15,
    "edges": 20,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B4",
      "B1 : If($z1 !\u003d 0) → B2 | else → B4",
      "B2 : If($z2 !\u003d 0) → B3 | else → B4",
      "B3 : If($z3 \u003d\u003d 0) → B4 | else → B5",
      "B5 : If($z4 !\u003d 0) → B6 | else → B7",
      "B7 : If($z5 !\u003d 0) → B8 | else → B9",
      "B8 : If($z6 \u003d\u003d 0) → B9 | else → B10",
      "B10 : If($i1 !\u003d 0) → B11 | else → B13",
      "B11 : If($i2 !\u003d 0) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  SootClass\n  SootMethod\n  $z0 \u003d r0.isPublic()\n  if ($z0 \u003d\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $z1 \u003d r0.isInterface()\n  if ($z1 !\u003d 0) goto B2 else B4\n}",
      "B2 {\n  $z2 \u003d r0.isAbstract()\n  if ($z2 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d r0.getName()\n  $z3 \u003d $r1.contains(\"$\")\n  if ($z3 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $z4 \u003d r2.isConcrete()\n  if ($z4 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $z5 \u003d r2.isConstructor()\n  if ($z5 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  $z6 \u003d r2.isStaticInitializer()\n  if ($z6 \u003d\u003d 0) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  $i0 \u003d r2.getModifiers()\n  $i1 \u003d $i0 \u0026 64\n  if ($i1 !\u003d 0) goto B11 else B13\n}",
      "B11 {\n  $i2 \u003d $i0 \u0026 4096\n  if ($i2 !\u003d 0) goto B12 else B13\n}",
      "B12 {\n  $z7 \u003d 1\n  goto B14\n}",
      "B13 {\n  $z7 \u003d 0\n}",
      "B14 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "toSimpleSig",
    "signature": "java.lang.String toSimpleSig(java.lang.String)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  String\n  $i0 \u003d r0.indexOf(32)\n  $i1 \u003d $i0 + 1\n  $r1 \u003d r0.substring($i1)\n  $i2 \u003d $r1.indexOf(40)\n  $r2 \u003d $r1.substring(0, $i2)\n  $i3 \u003d $r1.indexOf(40)\n  $i4 \u003d $i3 + 1\n  $i5 \u003d $r1.lastIndexOf(41)\n  $r3 \u003d $r1.substring($i4, $i5)\n  $z0 \u003d $r3.isBlank()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r13 \u003d dynInvoke makeConcatWithConstants($r2)\n  return\n}",
      "B2 {\n  $r4 \u003d $r3.split(\",\")\n  $r5 \u003d Arrays.stream($r4)\n  $r6 \u003d MethodAnalysisToJson$lambda_toSimpleSig_0__1.bootstrap$()\n  $r7 \u003d $r5.map($r6)\n  $r8 \u003d MethodAnalysisToJson$lambda_toSimpleSig_1__2.bootstrap$()\n  $r9 \u003d $r7.reduce($r8)\n  $r10 \u003d $r9.orElse(\"\")\n  r11 \u003d String) $r10\n  $r12 \u003d dynInvoke makeConcatWithConstants($r2, r11)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "norm",
    "signature": "java.lang.String norm(java.lang.String)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 10,
    "edges": 13,
    "cc": 5,
    "flowSummary": [
      "B1 : If($z0 !\u003d 0) → B2 | else → B3",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B7",
      "B3 : If($i0 \u003c\u003d 0) → B4 | else → B5",
      "B7 : If($i1 \u003c 0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  String\n  r3 \u003d r2.trim()\n}",
      "B1 {\n  $z0 \u003d r3.endsWith(\"\")\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d r3.endsWith(\"...\")\n  if ($z1 \u003d\u003d 0) goto B3 else B7\n}",
      "B3 {\n  $r0 \u003d r3\n  $i0 \u003d r3.lastIndexOf(91)\n  if ($i0 \u003c\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $i4 \u003d r3.lastIndexOf(91)\n  goto B6\n}",
      "B5 {\n  $i4 \u003d r3.lastIndexOf(46)\n}",
      "B6 {\n  r3 \u003d $r0.substring(0, $i4)\n  goto B1\n}",
      "B7 {\n  $i1 \u003d r3.indexOf(60)\n  if ($i1 \u003c 0) goto B8 else B9\n}",
      "B8 {\n  r3 \u003d r3.substring(0, $i1)\n}",
      "B9 {\n  $i2 \u003d r3.lastIndexOf(46)\n  $i3 \u003d $i2 + 1\n  $r1 \u003d r3.substring($i3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B1",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "sootParts",
    "signature": "java.util.List sootParts(java.lang.String)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i7 \u003e\u003d i6) → B2 | else → B5",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  String\n  $i0 \u003d r0.indexOf(32)\n  $i1 \u003d $i0 + 1\n  $r1 \u003d r0.substring($i1)\n  $i2 \u003d $r1.indexOf(40)\n  $r2 \u003d $r1.substring(0, $i2)\n  $i3 \u003d $r1.indexOf(40)\n  $i4 \u003d $i3 + 1\n  $i5 \u003d $r1.lastIndexOf(41)\n  $r3 \u003d $r1.substring($i4, $i5)\n  $r4 \u003d $r3.split(\",\")\n  $r5 \u003d ArrayList\n  new ArrayList()\n  $r5.add($r2)\n  i6 \u003d lengthof $r4\n  i7 \u003d 0\n}",
      "B1 {\n  if (i7 \u003e\u003d i6) goto B2 else B5\n}",
      "B2 {\n  r6 \u003d $r4[i7]\n  $z0 \u003d r6.isBlank()\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r7 \u003d MethodAnalysisToJson.norm(r6)\n  $r5.add($r7)\n}",
      "B4 {\n  i7 \u003d i7 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "matches",
    "signature": "boolean matches(com.github.javaparser.ast.body.MethodDeclaration,soot.SootMethod)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 10,
    "edges": 10,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($i0 \u003d\u003d $i1) → B3 | else → B4",
      "B5 : If(i4 \u003e\u003d $i2) → B6 | else → B9",
      "B6 : If($z1 !\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  MethodDeclaration\n  SootMethod\n  $r1 \u003d r0.getNameAsString()\n  $r3 \u003d r2.getName()\n  $z0 \u003d $r1.equals($r3)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r4 \u003d r0.getParameters()\n  $i0 \u003d $r4.size()\n  $i1 \u003d r2.getParameterCount()\n  if ($i0 \u003d\u003d $i1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r5 \u003d r2.getSubSignature()\n  $r6 \u003d MethodAnalysisToJson.sootParts($r5)\n  i4 \u003d 0\n}",
      "B5 {\n  $r7 \u003d r0.getParameters()\n  $i2 \u003d $r7.size()\n  if (i4 \u003e\u003d $i2) goto B6 else B9\n}",
      "B6 {\n  $r8 \u003d r0.getParameter(i4)\n  $r9 \u003d $r8.getType()\n  $r10 \u003d $r9.asString()\n  $r11 \u003d MethodAnalysisToJson.norm($r10)\n  $i3 \u003d i4 + 1\n  $r12 \u003d $r6.get($i3)\n  r13 \u003d String) $r12\n  $z1 \u003d $r11.equalsIgnoreCase(r13)\n  if ($z1 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  i4 \u003d i4 + 1\n  goto B5\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B5",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "main",
    "signature": "void main(java.lang.String[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 86,
    "edges": 131,
    "cc": 47,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B77",
      "B3 : If($z16 \u003d\u003d 0) → B4 | else → B76",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6",
      "B9 : If($i1 \u003d\u003d 0) → B10 | else → B3",
      "B10 : If($i2 !\u003d 0) → B11 | else → B12",
      "B13 : If($z2 \u003d\u003d 0) → B14 | else → B17",
      "B14 : If($i12 \u003c\u003d 0) → B15 | else → B16",
      "B18 : If($z17 \u003d\u003d 0) → B19 | else → B27",
      "B19 : If($i11 \u003e\u003d 2) → B20 | else → B21",
      "B21 : If($z13 \u003d\u003d 0) → B22 | else → B23",
      "B23 : If($z14 !\u003d 0) → B24 | else → B25",
      "B24 : If($z15 \u003d\u003d 0) → B25 | else → B18",
      "B27 : If(r148 \u003d\u003d null) → B28 | else → B31",
      "B28 : If($z11 \u003d\u003d 0) → B29 | else → B31",
      "B29 : If($z12 \u003d\u003d 0) → B30 | else → B31",
      "B31 : If($z18 \u003d\u003d 0) → B32 | else → B46",
      "B32 : If(i13 \u003e\u003d i14) → B33 | else → B46",
      "B46 : If(r148 \u003d\u003d null) → B47 | else → B49",
      "B47 : If($z10 \u003d\u003d 0) → B48 | else → B49",
      "B50 : If($z19 \u003d\u003d 0) → B51 | else → B66",
      "B51 : If($z6 \u003d\u003d 0) → B52 | else → B53",
      "B54 : If($z7 \u003d\u003d 0) → B55 | else → B56",
      "B57 : If($z8 !\u003d 0) → B58 | else → B59",
      "B59 : If($z9 \u003d\u003d 0) → B60 | else → B61",
      "B62 : If($r82 \u003d\u003d null) → B63 | else → B64",
      "B67 : If($z3 \u003d\u003d 0) → B68 | else → B75",
      "B68 : If(r154 \u003d\u003d null) → B69 | else → B70",
      "B70 : If($z4 \u003d\u003d 0) → B71 | else → B74",
      "B71 : If($r67 \u003d\u003d null) → B72 | else → B74",
      "B72 : If($z5 \u003d\u003d 0) → B73 | else → B74"
    ],
    "blockList": [
      "B0 {\n  String[]\n  G.reset()\n  $r0 \u003d Options.v()\n  $r0.set_prepend_classpath(1)\n  $r1 \u003d Options.v()\n  $r1.set_allow_phantom_refs(1)\n  $r2 \u003d Options.v()\n  $r3 \u003d Collections.singletonList(\"C:\\\\Users\\\\00000\\\\Desktop\\\\my\\\\javaBenchmark\\\\commons-collections4-4.5.0-src\\\\commons-collections4-4.5.0-src\\\\target\\\\classes\")\n  $r2.set_process_dir($r3)\n  $r4 \u003d Options.v()\n  $r4.set_output_format(12)\n  $r5 \u003d Options.v()\n  $r7 \u003d String pathSeparator\u003e\n  $r6 \u003d CharSequence)[2]\n  $r6[0] \u003d 0-src\\\\target\\\\classes\"\n  $r8 \u003d System.getProperty(\"java.class.path\")\n  $r6[1] \u003d $r8\n  $r9 \u003d String.join($r7, $r6)\n  $r5.set_soot_classpath($r9)\n  $r10 \u003d Scene.v()\n  $r10.loadNecessaryClasses()\n  $r11 \u003d HashMap\n  new HashMap()\n  $r13 \u003d Path SOURCE_ROOT\u003e\n  $r12 \u003d FileVisitOption)[0]\n  $r14 \u003d Files.walk($r13, $r12)\n  $r15 \u003d MethodAnalysisToJson$lambda_main_2__3.bootstrap$()\n  $r16 \u003d $r14.filter($r15)\n  $r17 \u003d MethodAnalysisToJson$lambda_main_3__4.bootstrap$($r11)\n  $r16.forEach($r17)\n  $r18 \u003d ArrayList\n  new ArrayList()\n  $r19 \u003d HashMap\n  new HashMap()\n  $r20 \u003d ArrayList\n  $r21 \u003d Scene.v()\n  $r22 \u003d $r21.getApplicationClasses()\n  new ArrayList($r22)\n  $r23 \u003d $r20.iterator()\n}",
      "B1 {\n  $z0 \u003d $r23.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B65\n}",
      "B2 {\n  $r30 \u003d $r23.next()\n  r134 \u003d SootClass) $r30\n  $r31 \u003d ArrayList\n  $r32 \u003d r134.getMethods()\n  new ArrayList($r32)\n  $r33 \u003d $r31.iterator()\n}",
      "B3 {\n  $z16 \u003d $r33.hasNext()\n  if ($z16 \u003d\u003d 0) goto B4 else B64\n}",
      "B4 {\n  $r34 \u003d $r33.next()\n  r135 \u003d SootMethod) $r34\n  $z1 \u003d MethodAnalysisToJson.isEligible(r134, r135)\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  goto B3\n}",
      "B6 {\n  $r35 \u003d r135.retrieveActiveBody()\n  goto B8\n}",
      "B7 {\n  $r132 :\u003d @caughtexception\n  goto B3\n}",
      "B8 {\n  $r36 \u003d ExceptionalBlockGraph\n  new ExceptionalBlockGraph($r35)\n  $i1 \u003d $r36.size()\n  $r37 \u003d $r36.getBlocks()\n  $r38 \u003d $r37.stream()\n  $r39 \u003d MethodAnalysisToJson$lambda_main_4__5.bootstrap$($r36)\n  $r40 \u003d $r38.mapToInt($r39)\n  $i2 \u003d $r40.sum()\n  $i3 \u003d $i2 - $i1\n  i4 \u003d $i3 + 2\n  if ($i1 \u003d\u003d 0) goto B9 else B3\n}",
      "B9 {\n  if ($i2 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  goto B3\n}",
      "B11 {\n  i13 \u003d 2147483647\n  i14 \u003d -2147483648\n  $r41 \u003d $r35.getUnits()\n  $r42 \u003d $r41.iterator()\n}",
      "B12 {\n  $z2 \u003d $r42.hasNext()\n  if ($z2 \u003d\u003d 0) goto B13 else B16\n}",
      "B13 {\n  $r128 \u003d $r42.next()\n  r136 \u003d Unit) $r128\n  $i12 \u003d r136.getJavaSourceStartLineNumber()\n  if ($i12 \u003c\u003d 0) goto B14 else B15\n}",
      "B14 {\n  i13 \u003d Math.min(i13, $i12)\n  i14 \u003d Math.max(i14, $i12)\n}",
      "B15 {\n  goto B12\n}",
      "B16 {\n  $r43 \u003d ArrayList\n  new ArrayList()\n  $r44 \u003d $r36.iterator()\n}",
      "B17 {\n  $z17 \u003d $r44.hasNext()\n  if ($z17 \u003d\u003d 0) goto B18 else B26\n}",
      "B18 {\n  $r118 \u003d $r44.next()\n  r137 \u003d Block) $r118\n  $r119 \u003d $r36.getSuccsOf(r137)\n  $i11 \u003d $r119.size()\n  if ($i11 \u003e\u003d 2) goto B19 else B20\n}",
      "B19 {\n  goto B17\n}",
      "B20 {\n  $r120 \u003d r137.getTail()\n  $z13 \u003d IfStmt\n  if ($z13 \u003d\u003d 0) goto B21 else B22\n}",
      "B21 {\n  $r126 \u003d IfStmt) $r120\n  $r127 \u003d $r126.getCondition()\n  r138 \u003d $r127.toString()\n  goto B25\n}",
      "B22 {\n  $z14 \u003d LookupSwitchStmt\n  if ($z14 !\u003d 0) goto B23 else B24\n}",
      "B23 {\n  $z15 \u003d TableSwitchStmt\n  if ($z15 \u003d\u003d 0) goto B24 else B17\n}",
      "B24 {\n  $r121 \u003d $r120.getUseBoxes()\n  $r122 \u003d $r121.get(0)\n  $r123 \u003d ValueBox) $r122\n  $r124 \u003d $r123.getValue()\n  $r125 \u003d String.valueOf($r124)\n  r138 \u003d dynInvoke makeConcatWithConstants($r125)\n}",
      "B25 {\n  $r139 \u003d Object)[4]\n  $i15 \u003d r137.getIndexInMethod()\n  $r140 \u003d Integer.valueOf($i15)\n  $r139[0] \u003d $r140\n  $r139[1] \u003d r138\n  $r141 \u003d $r119.get(0)\n  $r142 \u003d Block) $r141\n  $i16 \u003d $r142.getIndexInMethod()\n  $r143 \u003d Integer.valueOf($i16)\n  $r139[2] \u003d $r143\n  $r144 \u003d $r119.get(1)\n  $r145 \u003d Block) $r144\n  $i17 \u003d $r145.getIndexInMethod()\n  $r146 \u003d Integer.valueOf($i17)\n  $r139[3] \u003d $r146\n  $r147 \u003d String.format(\"B%d : If(%s) \\u2192 B%d | else \\u2192 B%d\", $r139)\n  $r43.add($r147)\n  goto B17\n}",
      "B26 {\n  $r45 \u003d r134.getName()\n  $r46 \u003d MethodAnalysisToJson$lambda_main_5__6.bootstrap$()\n  $r47 \u003d $r19.computeIfAbsent($r45, $r46)\n  r148 \u003d CompilationUnit) $r47\n  r149 \u003d \"(source not found)\"\n  $r48 \u003d r135.getSubSignature()\n  MethodAnalysisToJson.toSimpleSig($r48)\n  if (r148 \u003d\u003d null) goto B27 else B30\n}",
      "B27 {\n  $r103 \u003d r134.getShortName()\n  $r104 \u003d r148.getClassByName($r103)\n  $z11 \u003d $r104.isPresent()\n  if ($z11 \u003d\u003d 0) goto B28 else B30\n}",
      "B28 {\n  $r105 \u003d $r104.get()\n  $r106 \u003d ClassOrInterfaceDeclaration) $r105\n  $r107 \u003d $r106.getMethods()\n  $r108 \u003d $r107.stream()\n  $r109 \u003d MethodAnalysisToJson$lambda_main_6__9.bootstrap$(r135)\n  $r110 \u003d $r108.filter($r109)\n  $r111 \u003d $r110.findFirst()\n  $z12 \u003d $r111.isPresent()\n  if ($z12 \u003d\u003d 0) goto B29 else B30\n}",
      "B29 {\n  $r112 \u003d $r111.get()\n  $r113 \u003d MethodDeclaration) $r112\n  $r114 \u003d $r113.getBody()\n  $r115 \u003d MethodAnalysisToJson$toString__10.bootstrap$()\n  $r116 \u003d $r114.map($r115)\n  $r117 \u003d $r116.orElse(\"(no body)\")\n  r149 \u003d String) $r117\n}",
      "B30 {\n  $r150 \u003d \"(source not found)\"\n  $z18 \u003d $r150.equals(r149)\n  if ($z18 \u003d\u003d 0) goto B31 else B34\n}",
      "B31 {\n  if (i13 \u003e\u003d i14) goto B32 else B34\n}",
      "B32 {\n  $r96 \u003d Path SOURCE_ROOT\u003e\n  $r97 \u003d $r45.replace(46, 47)\n  $r98 \u003d dynInvoke makeConcatWithConstants($r97)\n  $r99 \u003d $r96.resolve($r98)\n  $r100 \u003d Files.readAllLines($r99)\n  $r101 \u003d System.lineSeparator()\n  $i8 \u003d i13 - 1\n  $i9 \u003d $r100.size()\n  $i10 \u003d Math.min(i14, $i9)\n  $r102 \u003d $r100.subList($i8, $i10)\n  r149 \u003d String.join($r101, $r102)\n  goto B34\n}",
      "B33 {\n  $r131 :\u003d @caughtexception\n}",
      "B34 {\n  $r151 \u003d MethodAnalysisToJson.buildPrettyCFG($r35)\n  $r152 \u003d HashSet\n  new HashSet()\n  $r153 \u003d HashSet\n  new HashSet()\n  r154 \u003d null\n  if (r148 \u003d\u003d null) goto B35 else B37\n}",
      "B35 {\n  $r85 \u003d r134.getShortName()\n  $r86 \u003d r148.getClassByName($r85)\n  $z10 \u003d $r86.isPresent()\n  if ($z10 \u003d\u003d 0) goto B36 else B37\n}",
      "B36 {\n  $r87 \u003d $r86.get()\n  r154 \u003d ClassOrInterfaceDeclaration) $r87\n  $r88 \u003d $r86.get()\n  $r89 \u003d ClassOrInterfaceDeclaration) $r88\n  $r90 \u003d $r89.getMethods()\n  $r91 \u003d $r90.stream()\n  $r92 \u003d MethodAnalysisToJson$lambda_main_7__7.bootstrap$(r135)\n  $r93 \u003d $r91.filter($r92)\n  $r94 \u003d $r93.findFirst()\n  $r95 \u003d MethodAnalysisToJson$lambda_main_8__8.bootstrap$(r134, $r152, $r153)\n  $r94.ifPresent($r95)\n}",
      "B37 {\n  $r155 \u003d new MethodInfo\n  new MethodInfo()\n  $r156 \u003d $r152.iterator()\n}",
      "B38 {\n  $z19 \u003d $r156.hasNext()\n  if ($z19 \u003d\u003d 0) goto B39 else B54\n}",
      "B39 {\n  $r74 \u003d $r156.next()\n  r157 \u003d String) $r74\n  $z6 \u003d r157.contains(\".\")\n  if ($z6 \u003d\u003d 0) goto B40 else B41\n}",
      "B40 {\n  $i6 \u003d r157.lastIndexOf(46)\n  $i7 \u003d $i6 + 1\n  $r158 \u003d r157.substring($i7)\n  goto B42\n}",
      "B41 {\n  $r158 \u003d r157\n}",
      "B42 {\n  r159 \u003d $r158\n  $z7 \u003d r157.contains(\".\")\n  if ($z7 \u003d\u003d 0) goto B43 else B44\n}",
      "B43 {\n  $r160 \u003d r157\n  goto B45\n}",
      "B44 {\n  $r75 \u003d r134.getPackageName()\n  $r160 \u003d dynInvoke makeConcatWithConstants($r75, $r158)\n}",
      "B45 {\n  r161 \u003d $r160\n  $r76 \u003d Path SOURCE_ROOT\u003e\n  $r77 \u003d $r160.replace(46, 47)\n  $r78 \u003d dynInvoke makeConcatWithConstants($r77)\n  $r79 \u003d $r76.resolve($r78)\n  r162 \u003d $r79\n  $r80 \u003d LinkOption)[0]\n  $z8 \u003d Files.exists($r79, $r80)\n  if ($z8 !\u003d 0) goto B46 else B47\n}",
      "B46 {\n  $r84 \u003d $r11.get(r159)\n  r162 \u003d Path) $r84\n}",
      "B47 {\n  $r81 \u003d new DependencyInfo\n  new DependencyInfo()\n  $z9 \u003d r161.contains(\".\")\n  if ($z9 \u003d\u003d 0) goto B48 else B49\n}",
      "B48 {\n  $r163 \u003d r161\n  goto B50\n}",
      "B49 {\n  $r163 \u003d r159\n}",
      "B50 {\n  String name\u003e \u003d $r163\n  $r82 \u003d MethodAnalysisToJson.loadCU(r162, $r19)\n  if ($r82 \u003d\u003d null) goto B51 else B52\n}",
      "B51 {\n  $r164 \u003d $r82.toString()\n  goto B53\n}",
      "B52 {\n  $r164 \u003d \"(source not found)\"\n}",
      "B53 {\n  String body\u003e \u003d $r164\n  $r83 \u003d List depClasses\u003e\n  $r83.add($r81)\n  goto B38\n}",
      "B54 {\n  $r49 \u003d $r153.iterator()\n}",
      "B55 {\n  $z3 \u003d $r49.hasNext()\n  if ($z3 \u003d\u003d 0) goto B56 else B63\n}",
      "B56 {\n  $r57 \u003d $r49.next()\n  r165 \u003d List) $r57\n  $r58 \u003d r165.get(0)\n  r166 \u003d String) $r58\n  $r59 \u003d r165.get(1)\n  $r60 \u003d String) $r59\n  $i5 \u003d Integer.parseInt($r60)\n  $r61 \u003d new DependencyInfo\n  new DependencyInfo()\n  $r62 \u003d r134.getShortName()\n  $r63 \u003d dynInvoke makeConcatWithConstants($r62, r166, $i5)\n  String name\u003e \u003d $r63\n  r167 \u003d \"(source not found)\"\n  if (r154 \u003d\u003d null) goto B57 else B58\n}",
      "B57 {\n  $r73 \u003d Collections.nCopies($i5, \"\")\n  r167 \u003d MethodAnalysisToJson.findMethodBodySrc(r154, r166, $r73)\n}",
      "B58 {\n  $r64 \u003d \"(source not found)\"\n  $z4 \u003d $r64.equals(r167)\n  if ($z4 \u003d\u003d 0) goto B59 else B62\n}",
      "B59 {\n  $r65 \u003d r134.getShortName()\n  $r66 \u003d $r11.get($r65)\n  r168 \u003d Path) $r66\n  $r67 \u003d MethodAnalysisToJson.loadCU(r168, $r19)\n  if ($r67 \u003d\u003d null) goto B60 else B62\n}",
      "B60 {\n  $r68 \u003d r134.getShortName()\n  $r69 \u003d $r67.getClassByName($r68)\n  $z5 \u003d $r69.isPresent()\n  if ($z5 \u003d\u003d 0) goto B61 else B62\n}",
      "B61 {\n  $r70 \u003d $r69.get()\n  $r71 \u003d ClassOrInterfaceDeclaration) $r70\n  $r72 \u003d Collections.nCopies($i5, \"\")\n  r167 \u003d MethodAnalysisToJson.findMethodBodySrc($r71, r166, $r72)\n}",
      "B62 {\n  String body\u003e \u003d r167\n  $r169 \u003d List depMethods\u003e\n  $r169.add($r61)\n  goto B55\n}",
      "B63 {\n  String clazz\u003e \u003d $r45\n  $r50 \u003d r135.getName()\n  String methodName\u003e \u003d $r50\n  $r51 \u003d r135.getSubSignature()\n  String signature\u003e \u003d $r51\n  $r52 \u003d MethodAnalysisToJson.vis(r135)\n  String visibility\u003e \u003d $r52\n  String body\u003e \u003d r149\n  \u003cMethodInfo: int nodes\u003e \u003d $i1\n  \u003cMethodInfo: int edges\u003e \u003d $i2\n  \u003cMethodInfo: int cc\u003e \u003d i4\n  List flowSummary\u003e \u003d $r43\n  $r53 \u003d $r151.get(\"blocks\")\n  $r54 \u003d List) $r53\n  List blockList\u003e \u003d $r54\n  $r55 \u003d $r151.get(\"edges\")\n  $r56 \u003d List) $r55\n  List blockEdges\u003e \u003d $r56\n  $r18.add($r155)\n  goto B3\n}",
      "B64 {\n  goto B1\n}",
      "B65 {\n  $r24 \u003d GsonBuilder\n  new GsonBuilder()\n  $r25 \u003d $r24.setPrettyPrinting()\n  $r26 \u003d $r25.create()\n  $r27 \u003d FileWriter\n  new FileWriter(\"C:/Users/00000/Desktop/my/jso_all_methods.json\")\n  $r26.toJson($r18, $r27)\n  $r27.close()\n  goto B69\n}",
      "B66 {\n  $r130 :\u003d @caughtexception\n  $r27.close()\n  goto B68\n}",
      "B67 {\n  $r129 :\u003d @caughtexception\n  $r130.addSuppressed($r129)\n}",
      "B68 {\n  throw $r130\n}",
      "B69 {\n  $r28 \u003d PrintStream out\u003e\n  $i0 \u003d $r18.size()\n  $r29 \u003d dynInvoke makeConcatWithConstants($i0)\n  $r28.println($r29)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B65",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B64",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B3",
      "B6 --\u003e B8",
      "B7 --\u003e B3",
      "B8 --\u003e B9",
      "B8 --\u003e B3",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B3",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B16",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B12",
      "B16 --\u003e B17",
      "B17 --\u003e B18",
      "B17 --\u003e B26",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B17",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B25",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B24",
      "B23 --\u003e B17",
      "B24 --\u003e B25",
      "B25 --\u003e B17",
      "B26 --\u003e B27",
      "B26 --\u003e B30",
      "B27 --\u003e B28",
      "B27 --\u003e B30",
      "B28 --\u003e B29",
      "B28 --\u003e B30",
      "B29 --\u003e B30",
      "B30 --\u003e B31",
      "B30 --\u003e B34",
      "B31 --\u003e B32",
      "B31 --\u003e B34",
      "B32 --\u003e B34",
      "B33 --\u003e B34",
      "B34 --\u003e B35",
      "B34 --\u003e B37",
      "B35 --\u003e B36",
      "B35 --\u003e B37",
      "B36 --\u003e B37",
      "B37 --\u003e B38",
      "B38 --\u003e B39",
      "B38 --\u003e B54",
      "B39 --\u003e B40",
      "B39 --\u003e B41",
      "B40 --\u003e B42",
      "B41 --\u003e B42",
      "B42 --\u003e B43",
      "B42 --\u003e B44",
      "B43 --\u003e B45",
      "B44 --\u003e B45",
      "B45 --\u003e B46",
      "B45 --\u003e B47",
      "B46 --\u003e B47",
      "B47 --\u003e B48",
      "B47 --\u003e B49",
      "B48 --\u003e B50",
      "B49 --\u003e B50",
      "B50 --\u003e B51",
      "B50 --\u003e B52",
      "B51 --\u003e B53",
      "B52 --\u003e B53",
      "B53 --\u003e B38",
      "B54 --\u003e B55",
      "B55 --\u003e B56",
      "B55 --\u003e B63",
      "B56 --\u003e B57",
      "B56 --\u003e B58",
      "B57 --\u003e B58",
      "B58 --\u003e B59",
      "B58 --\u003e B62",
      "B59 --\u003e B60",
      "B59 --\u003e B62",
      "B60 --\u003e B61",
      "B60 --\u003e B62",
      "B61 --\u003e B62",
      "B62 --\u003e B55",
      "B63 --\u003e B3",
      "B64 --\u003e B1",
      "B65 --\u003e B69",
      "B66 --\u003e B68",
      "B67 --\u003e B68",
      "B68 --\u003e [EXIT]",
      "B69 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "buildPrettyCFG",
    "signature": "java.util.Map buildPrettyCFG(soot.Body)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 18,
    "edges": 23,
    "cc": 7,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B6",
      "B3 : If($z5 \u003d\u003d 0) → B4 | else → B5",
      "B7 : If($z1 \u003d\u003d 0) → B8 | else → B17",
      "B9 : If($z2 \u003d\u003d 0) → B10 | else → B11",
      "B11 : If($z3 \u003d\u003d 0) → B12 | else → B13",
      "B14 : If($z4 \u003d\u003d 0) → B15 | else → B16"
    ],
    "blockList": [
      "B0 {\n  Body\n  $r0 \u003d BriefBlockGraph\n  new BriefBlockGraph(r1)\n  $r2 \u003d HashMap\n  new HashMap()\n  $r3 \u003d $r0.iterator()\n}",
      "B1 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B6\n}",
      "B2 {\n  $r23 \u003d $r3.next()\n  r27 \u003d Block) $r23\n  $r24 \u003d r27.iterator()\n}",
      "B3 {\n  $z5 \u003d $r24.hasNext()\n  if ($z5 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r25 \u003d $r24.next()\n  r28 \u003d Unit) $r25\n  $i4 \u003d r27.getIndexInMethod()\n  $r26 \u003d Integer.valueOf($i4)\n  $r2.put(r28, $r26)\n  goto B3\n}",
      "B5 {\n  goto B1\n}",
      "B6 {\n  $r4 \u003d ArrayList\n  new ArrayList()\n  $r5 \u003d ArrayList\n  new ArrayList()\n  $r6 \u003d $r0.iterator()\n}",
      "B7 {\n  $z1 \u003d $r6.hasNext()\n  if ($z1 \u003d\u003d 0) goto B8 else B17\n}",
      "B8 {\n  $r8 \u003d $r6.next()\n  r29 \u003d Block) $r8\n  $r9 \u003d StringBuilder\n  new StringBuilder()\n  $r10 \u003d $r9.append(\"B\")\n  $i0 \u003d r29.getIndexInMethod()\n  $r11 \u003d $r10.append($i0)\n  $r11.append(\" {\")\n  $r12 \u003d r29.iterator()\n}",
      "B9 {\n  $z2 \u003d $r12.hasNext()\n  if ($z2 \u003d\u003d 0) goto B10 else B11\n}",
      "B10 {\n  $r20 \u003d $r12.next()\n  r30 \u003d Unit) $r20\n  $r21 \u003d MethodAnalysisToJson.pseudo(r30, r29, $r0, $r2)\n  $r22 \u003d $r9.append(\"\\n  \")\n  $r22.append($r21)\n  goto B9\n}",
      "B11 {\n  $r9.append(\"\\n}\")\n  $r13 \u003d $r9.toString()\n  $r4.add($r13)\n  $r14 \u003d $r0.getSuccsOf(r29)\n  $z3 \u003d $r14.isEmpty()\n  if ($z3 \u003d\u003d 0) goto B12 else B13\n}",
      "B12 {\n  $i3 \u003d r29.getIndexInMethod()\n  $r19 \u003d dynInvoke makeConcatWithConstants($i3)\n  $r5.add($r19)\n  goto B16\n}",
      "B13 {\n  $r15 \u003d $r0.getSuccsOf(r29)\n  $r16 \u003d $r15.iterator()\n}",
      "B14 {\n  $z4 \u003d $r16.hasNext()\n  if ($z4 \u003d\u003d 0) goto B15 else B16\n}",
      "B15 {\n  $r17 \u003d $r16.next()\n  r31 \u003d Block) $r17\n  $i1 \u003d r29.getIndexInMethod()\n  $i2 \u003d r31.getIndexInMethod()\n  $r18 \u003d dynInvoke makeConcatWithConstants($i1, $i2)\n  $r5.add($r18)\n  goto B14\n}",
      "B16 {\n  goto B7\n}",
      "B17 {\n  $r7 \u003d HashMap\n  new HashMap()\n  $r7.put(\"blocks\", $r4)\n  $r7.put(\"edges\", $r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e B1",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B17",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B9",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B16",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B14",
      "B16 --\u003e B7",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "invoke2pseudo",
    "signature": "java.lang.String invoke2pseudo(soot.jimple.InvokeExpr)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B3",
      "B1 : If($z3 \u003d\u003d 0) → B2 | else → B3",
      "B3 : If($z1 \u003d\u003d 0) → B4 | else → B5",
      "B5 : If($z2 \u003d\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  InvokeExpr\n  $z0 \u003d SpecialInvokeExpr\n  if ($z0 \u003d\u003d 0) goto B1 else B3\n}",
      "B1 {\n  r28 \u003d SpecialInvokeExpr) r0\n  $r20 \u003d r0.getMethodRef()\n  $r21 \u003d $r20.name()\n  $z3 \u003d $r21.equals(\"\u003cinit\u003e\")\n  if ($z3 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r22 \u003d r28.getBase()\n  $r23 \u003d $r22.getType()\n  $r24 \u003d $r23.toString()\n  $i2 \u003d $r24.lastIndexOf(46)\n  $i3 \u003d $i2 + 1\n  $r25 \u003d $r24.substring($i3)\n  $r26 \u003d MethodAnalysisToJson.argList(r0)\n  $r27 \u003d dynInvoke makeConcatWithConstants($r25, $r26)\n  return\n}",
      "B3 {\n  $z1 \u003d StaticInvokeExpr\n  if ($z1 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r12 \u003d r0.getMethodRef()\n  $r13 \u003d $r12.declaringClass()\n  $r14 \u003d $r13.getName()\n  $i0 \u003d $r14.lastIndexOf(46)\n  $i1 \u003d $i0 + 1\n  $r15 \u003d $r14.substring($i1)\n  $r16 \u003d r0.getMethodRef()\n  $r17 \u003d $r16.name()\n  $r18 \u003d MethodAnalysisToJson.argList(r0)\n  $r19 \u003d dynInvoke makeConcatWithConstants($r15, $r17, $r18)\n  return\n}",
      "B5 {\n  $z2 \u003d InstanceInvokeExpr\n  if ($z2 \u003d\u003d 0) goto B6 else B7\n}",
      "B6 {\n  r29 \u003d InstanceInvokeExpr) r0\n  $r5 \u003d r29.getBase()\n  $r6 \u003d $r5.toString()\n  $r7 \u003d MethodAnalysisToJson.strip($r6)\n  $r8 \u003d r0.getMethodRef()\n  $r9 \u003d $r8.name()\n  $r10 \u003d MethodAnalysisToJson.argList(r0)\n  $r11 \u003d dynInvoke makeConcatWithConstants($r7, $r9, $r10)\n  return\n}",
      "B7 {\n  $r1 \u003d r0.getMethodRef()\n  $r2 \u003d $r1.name()\n  $r3 \u003d MethodAnalysisToJson.argList(r0)\n  $r4 \u003d dynInvoke makeConcatWithConstants($r2, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "argList",
    "signature": "java.lang.String argList(soot.jimple.InvokeExpr)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  InvokeExpr\n  $r1 \u003d r0.getArgs()\n  $z0 \u003d $r1.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d \"\"\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r0.getArgs()\n  $r3 \u003d $r2.toString()\n  $r4 \u003d $r3.replace(\"\", \"\")\n  $r5 \u003d $r4.replace(\"\", \"\")\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "strip",
    "signature": "java.lang.String strip(java.lang.String)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4",
      "B4 : If($i0 \u003c 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  String\n  $z0 \u003d r0.startsWith(\"@this:\")\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z1 \u003d r0.startsWith(\"@parameter\")\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $c2 \u003d r0.charAt(10)\n  $r1 \u003d dynInvoke makeConcatWithConstants($c2)\n  return\n}",
      "B4 {\n  $i0 \u003d r0.lastIndexOf(46)\n  if ($i0 \u003c 0) goto B5 else B6\n}",
      "B5 {\n  $i1 \u003d $i0 + 1\n  $r2 \u003d r0.substring($i1)\n  goto B7\n}",
      "B6 {\n  $r2 \u003d r0\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "pseudo",
    "signature": "java.lang.String pseudo(soot.Unit,soot.toolkits.graph.Block,soot.toolkits.graph.BlockGraph,java.util.Map)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 19,
    "edges": 20,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B5",
      "B1 : If($z7 \u003d\u003d 0) → B2 | else → B3",
      "B5 : If($z1 \u003d\u003d 0) → B6 | else → B9",
      "B6 : If($i0 !\u003d 2) → B7 | else → B8",
      "B9 : If($z2 \u003d\u003d 0) → B10 | else → B11",
      "B11 : If($z3 !\u003d 0) → B12 | else → B13",
      "B12 : If($z4 \u003d\u003d 0) → B13 | else → B14",
      "B14 : If($z5 \u003d\u003d 0) → B15 | else → B16",
      "B16 : If($z6 \u003d\u003d 0) → B17 | else → B18"
    ],
    "blockList": [
      "B0 {\n  Unit\n  Block\n  BlockGraph\n  Map\n  $z0 \u003d AssignStmt\n  if ($z0 \u003d\u003d 0) goto B1 else B5\n}",
      "B1 {\n  r39 \u003d AssignStmt) r0\n  $r32 \u003d r39.getLeftOp()\n  $r33 \u003d $r32.toString()\n  $r34 \u003d MethodAnalysisToJson.strip($r33)\n  $z7 \u003d r39.containsInvokeExpr()\n  if ($z7 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r38 \u003d r39.getInvokeExpr()\n  $r40 \u003d MethodAnalysisToJson.invoke2pseudo($r38)\n  goto B4\n}",
      "B3 {\n  $r35 \u003d r39.getRightOp()\n  $r36 \u003d $r35.toString()\n  $r40 \u003d MethodAnalysisToJson.strip($r36)\n}",
      "B4 {\n  $r37 \u003d dynInvoke makeConcatWithConstants($r34, $r40)\n  return\n}",
      "B5 {\n  $z1 \u003d IfStmt\n  if ($z1 \u003d\u003d 0) goto B6 else B9\n}",
      "B6 {\n  r41 \u003d IfStmt) r0\n  $r16 \u003d r14.getSuccsOf(r15)\n  $i0 \u003d $r16.size()\n  if ($i0 !\u003d 2) goto B7 else B8\n}",
      "B7 {\n  $r21 \u003d $r16.get(0)\n  $r22 \u003d Block) $r21\n  $i1 \u003d $r22.getIndexInMethod()\n  $r23 \u003d $r16.get(1)\n  $r24 \u003d Block) $r23\n  $i2 \u003d $r24.getIndexInMethod()\n  $r25 \u003d Object)[3]\n  $r26 \u003d r41.getCondition()\n  $r27 \u003d $r26.toString()\n  $r28 \u003d MethodAnalysisToJson.strip($r27)\n  $r25[0] \u003d $r28\n  $r29 \u003d Integer.valueOf($i1)\n  $r25[1] \u003d $r29\n  $r30 \u003d Integer.valueOf($i2)\n  $r25[2] \u003d $r30\n  $r31 \u003d String.format(\"if (%s) goto B%d else B%d\", $r25)\n  return\n}",
      "B8 {\n  $r17 \u003d r41.getCondition()\n  $r18 \u003d $r17.toString()\n  $r19 \u003d MethodAnalysisToJson.strip($r18)\n  $r20 \u003d dynInvoke makeConcatWithConstants($r19)\n  return\n}",
      "B9 {\n  $z2 \u003d GotoStmt\n  if ($z2 \u003d\u003d 0) goto B10 else B11\n}",
      "B10 {\n  r42 \u003d GotoStmt) r0\n  $r10 \u003d r42.getTarget()\n  $r11 \u003d r9.get($r10)\n  $r12 \u003d String.valueOf($r11)\n  $r13 \u003d dynInvoke makeConcatWithConstants($r12)\n  return\n}",
      "B11 {\n  $z3 \u003d ReturnStmt\n  if ($z3 !\u003d 0) goto B12 else B13\n}",
      "B12 {\n  $z4 \u003d ReturnVoidStmt\n  if ($z4 \u003d\u003d 0) goto B13 else B14\n}",
      "B13 {\n  return\n}",
      "B14 {\n  $z5 \u003d ThrowStmt\n  if ($z5 \u003d\u003d 0) goto B15 else B16\n}",
      "B15 {\n  r43 \u003d ThrowStmt) r0\n  $r5 \u003d r43.getOp()\n  $r6 \u003d $r5.toString()\n  $r7 \u003d MethodAnalysisToJson.strip($r6)\n  $r8 \u003d dynInvoke makeConcatWithConstants($r7)\n  return\n}",
      "B16 {\n  $z6 \u003d InvokeStmt\n  if ($z6 \u003d\u003d 0) goto B17 else B18\n}",
      "B17 {\n  r44 \u003d InvokeStmt) r0\n  $r3 \u003d r44.getInvokeExpr()\n  $r4 \u003d MethodAnalysisToJson.invoke2pseudo($r3)\n  return\n}",
      "B18 {\n  $r1 \u003d r0.toString()\n  $r2 \u003d MethodAnalysisToJson.strip($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "vis",
    "signature": "java.lang.String vis(soot.SootMethod)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  SootMethod\n  $z0 \u003d r0.isPublic()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z1 \u003d r0.isProtected()\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z2 \u003d r0.isPrivate()\n  if ($z2 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "MethodAnalysisToJson",
    "methodName": "loadCU",
    "signature": "com.github.javaparser.ast.CompilationUnit loadCU(java.nio.file.Path,java.util.Map)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Path\n  Map\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d r0.toString()\n  $r3 \u003d MethodAnalysisToJson$lambda_loadCU_15__18.bootstrap$(r0)\n  $r4 \u003d r1.computeIfAbsent($r2, $r3)\n  $r5 \u003d CompilationUnit) $r4\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.ArrayStack",
    "methodName": "peek",
    "signature": "java.lang.Object peek()",
    "visibility": "public",
    "body": "{\r\n    final int n \u003d size();\r\n    if (n \u003c\u003d 0) {\r\n        throw new EmptyStackException();\r\n    }\r\n    return get(n - 1);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 \u003e 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayStack\n  $i0 \u003d r0.size()\n  if ($i0 \u003e 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d EmptyStackException\n  new EmptyStackException()\n  throw $r2\n}",
      "B2 {\n  $i1 \u003d $i0 - 1\n  $r1 \u003d r0.get($i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayStack#size(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayStack#get(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.ArrayStack",
    "methodName": "peek",
    "signature": "java.lang.Object peek(int)",
    "visibility": "public",
    "body": "{\r\n    final int m \u003d size() - n - 1;\r\n    if (m \u003c 0) {\r\n        throw new EmptyStackException();\r\n    }\r\n    return get(m);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i3 \u003e\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayStack\n  i1 :\u003d @parameter0: int\n  $i0 \u003d r0.size()\n  $i2 \u003d $i0 - i1\n  i3 \u003d $i2 - 1\n  if (i3 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d EmptyStackException\n  new EmptyStackException()\n  throw $r2\n}",
      "B2 {\n  $r1 \u003d r0.get(i3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayStack#size(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayStack#get(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.ArrayStack",
    "methodName": "pop",
    "signature": "java.lang.Object pop()",
    "visibility": "public",
    "body": "{\r\n    final int n \u003d size();\r\n    if (n \u003c\u003d 0) {\r\n        throw new EmptyStackException();\r\n    }\r\n    return remove(n - 1);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 \u003e 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayStack\n  $i0 \u003d r0.size()\n  if ($i0 \u003e 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d EmptyStackException\n  new EmptyStackException()\n  throw $r2\n}",
      "B2 {\n  $i1 \u003d $i0 - 1\n  $r1 \u003d r0.remove($i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayStack#size(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayStack#remove(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.ArrayStack",
    "methodName": "search",
    "signature": "int search(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    // Current index\r\n    int i \u003d size() - 1;\r\n    // Current distance\r\n    int n \u003d 1;\r\n    while (i \u003e\u003d 0) {\r\n        final Object current \u003d get(i);\r\n        if (object \u003d\u003d null \u0026\u0026 current \u003d\u003d null || object !\u003d null \u0026\u0026 object.equals(current)) {\r\n            return n;\r\n        }\r\n        i--;\r\n        n++;\r\n    }\r\n    return -1;\r\n}",
    "nodes": 9,
    "edges": 12,
    "cc": 5,
    "flowSummary": [
      "B1 : If(i1 \u003c 0) → B2 | else → B8",
      "B2 : If(r2 !\u003d null) → B3 | else → B4",
      "B3 : If($r1 \u003d\u003d null) → B4 | else → B6",
      "B4 : If(r2 \u003d\u003d null) → B5 | else → B7",
      "B5 : If($z0 \u003d\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  ArrayStack\n  Object\n  $i0 \u003d r0.size()\n  i1 \u003d $i0 - 1\n  i2 \u003d 1\n}",
      "B1 {\n  if (i1 \u003c 0) goto B2 else B8\n}",
      "B2 {\n  $r1 \u003d r0.get(i1)\n  if (r2 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  if ($r1 \u003d\u003d null) goto B4 else B6\n}",
      "B4 {\n  if (r2 \u003d\u003d null) goto B5 else B7\n}",
      "B5 {\n  $z0 \u003d r2.equals($r1)\n  if ($z0 \u003d\u003d 0) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $i4 \u003d (int) -1\n  i1 \u003d i1 + $i4\n  i2 \u003d i2 + 1\n  goto B1\n}",
      "B8 {\n  $i6 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B1",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayStack#size(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ArrayStack#get(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bag.CollectionBag",
    "methodName": "addAll",
    "signature": "boolean addAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    boolean changed \u003d false;\r\n    for (final E current : coll) {\r\n        final boolean added \u003d add(current, 1);\r\n        changed \u003d changed || added;\r\n    }\r\n    return changed;\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B7",
      "B2 : If(z2 !\u003d 0) → B3 | else → B4",
      "B3 : If($z1 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  CollectionBag\n  Collection\n  z2 \u003d 0\n  $r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B7\n}",
      "B2 {\n  $r2 \u003d $r1.next()\n  $z1 \u003d r3.add($r2, 1)\n  if (z2 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  if ($z1 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $z3 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z3 \u003d 0\n}",
      "B6 {\n  z2 \u003d $z3\n  goto B1\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B1",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionBag#add(...2)",
        "body": "{\r\n    decorated().add(object, count);\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bag.CollectionBag",
    "methodName": "removeAll",
    "signature": "boolean removeAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    if (coll !\u003d null) {\r\n        boolean result \u003d false;\r\n        for (final Object obj : coll) {\r\n            final boolean changed \u003d remove(obj, getCount(obj));\r\n            result \u003d result || changed;\r\n        }\r\n        return result;\r\n    }\r\n    // let the decorated bag handle the case of null argument\r\n    return decorated().removeAll(null);\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B9",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B8",
      "B3 : If(z3 !\u003d 0) → B4 | else → B5",
      "B4 : If($z2 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CollectionBag\n  Collection\n  if (r0 \u003d\u003d null) goto B1 else B9\n}",
      "B1 {\n  z3 \u003d 0\n  $r3 \u003d r0.iterator()\n}",
      "B2 {\n  $z1 \u003d $r3.hasNext()\n  if ($z1 \u003d\u003d 0) goto B3 else B8\n}",
      "B3 {\n  $r4 \u003d $r3.next()\n  $i0 \u003d r1.getCount($r4)\n  $z2 \u003d r1.remove($r4, $i0)\n  if (z3 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  if ($z2 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $z4 \u003d 1\n  goto B7\n}",
      "B6 {\n  $z4 \u003d 0\n}",
      "B7 {\n  z3 \u003d $z4\n  goto B2\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $r2 \u003d r1.decorated()\n  $z0 \u003d $r2.removeAll(null)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B9",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B8",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B2",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionBag#getCount(...1)",
        "body": "(source not found)"
      },
      {
        "name": "CollectionBag#decorated(...0)",
        "body": "(source not found)"
      },
      {
        "name": "CollectionBag#remove(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bag.CollectionBag",
    "methodName": "retainAll",
    "signature": "boolean retainAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    if (coll !\u003d null) {\r\n        boolean modified \u003d false;\r\n        final Iterator\u003cE\u003e e \u003d iterator();\r\n        while (e.hasNext()) {\r\n            if (!coll.contains(e.next())) {\r\n                e.remove();\r\n                modified \u003d true;\r\n            }\r\n        }\r\n        return modified;\r\n    }\r\n    // let the decorated bag handle the case of null argument\r\n    return decorated().retainAll(null);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B6",
      "B2 : If($z3 \u003d\u003d 0) → B3 | else → B5",
      "B3 : If($z1 !\u003d 0) → B4 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CollectionBag\n  Collection\n  if (r0 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  z2 \u003d 0\n  $r3 \u003d r1.iterator()\n}",
      "B2 {\n  $z3 \u003d $r3.hasNext()\n  if ($z3 \u003d\u003d 0) goto B3 else B5\n}",
      "B3 {\n  $r4 \u003d $r3.next()\n  $z1 \u003d r0.contains($r4)\n  if ($z1 !\u003d 0) goto B4 else B2\n}",
      "B4 {\n  $r3.remove()\n  z2 \u003d 1\n  goto B2\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r2 \u003d r1.decorated()\n  $z0 \u003d $r2.retainAll(null)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e B2",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionBag#iterator(...0)",
        "body": "(source not found)"
      },
      {
        "name": "CollectionBag#decorated(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bag.CollectionSortedBag",
    "methodName": "addAll",
    "signature": "boolean addAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    boolean changed \u003d false;\r\n    for (final E current : coll) {\r\n        final boolean added \u003d add(current, 1);\r\n        changed \u003d changed || added;\r\n    }\r\n    return changed;\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B7",
      "B2 : If(z2 !\u003d 0) → B3 | else → B4",
      "B3 : If($z1 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  CollectionSortedBag\n  Collection\n  z2 \u003d 0\n  $r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B7\n}",
      "B2 {\n  $r2 \u003d $r1.next()\n  $z1 \u003d r3.add($r2, 1)\n  if (z2 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  if ($z1 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $z3 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z3 \u003d 0\n}",
      "B6 {\n  z2 \u003d $z3\n  goto B1\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B1",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionSortedBag#add(...2)",
        "body": "{\r\n    decorated().add(object, count);\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bag.CollectionSortedBag",
    "methodName": "removeAll",
    "signature": "boolean removeAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    if (coll !\u003d null) {\r\n        boolean result \u003d false;\r\n        for (final Object obj : coll) {\r\n            final boolean changed \u003d remove(obj, getCount(obj));\r\n            result \u003d result || changed;\r\n        }\r\n        return result;\r\n    }\r\n    // let the decorated bag handle the case of null argument\r\n    return decorated().removeAll(null);\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B9",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B8",
      "B3 : If(z3 !\u003d 0) → B4 | else → B5",
      "B4 : If($z2 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CollectionSortedBag\n  Collection\n  if (r0 \u003d\u003d null) goto B1 else B9\n}",
      "B1 {\n  z3 \u003d 0\n  $r3 \u003d r0.iterator()\n}",
      "B2 {\n  $z1 \u003d $r3.hasNext()\n  if ($z1 \u003d\u003d 0) goto B3 else B8\n}",
      "B3 {\n  $r4 \u003d $r3.next()\n  $i0 \u003d r1.getCount($r4)\n  $z2 \u003d r1.remove($r4, $i0)\n  if (z3 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  if ($z2 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $z4 \u003d 1\n  goto B7\n}",
      "B6 {\n  $z4 \u003d 0\n}",
      "B7 {\n  z3 \u003d $z4\n  goto B2\n}",
      "B8 {\n  return\n}",
      "B9 {\n  $r2 \u003d r1.decorated()\n  $z0 \u003d $r2.removeAll(null)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B9",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B8",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B2",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionSortedBag#getCount(...1)",
        "body": "(source not found)"
      },
      {
        "name": "CollectionSortedBag#decorated(...0)",
        "body": "(source not found)"
      },
      {
        "name": "CollectionSortedBag#remove(...2)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bag.CollectionSortedBag",
    "methodName": "retainAll",
    "signature": "boolean retainAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    if (coll !\u003d null) {\r\n        boolean modified \u003d false;\r\n        final Iterator\u003cE\u003e e \u003d iterator();\r\n        while (e.hasNext()) {\r\n            if (!coll.contains(e.next())) {\r\n                e.remove();\r\n                modified \u003d true;\r\n            }\r\n        }\r\n        return modified;\r\n    }\r\n    // let the decorated bag handle the case of null argument\r\n    return decorated().retainAll(null);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B6",
      "B2 : If($z3 \u003d\u003d 0) → B3 | else → B5",
      "B3 : If($z1 !\u003d 0) → B4 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CollectionSortedBag\n  Collection\n  if (r0 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  z2 \u003d 0\n  $r3 \u003d r1.iterator()\n}",
      "B2 {\n  $z3 \u003d $r3.hasNext()\n  if ($z3 \u003d\u003d 0) goto B3 else B5\n}",
      "B3 {\n  $r4 \u003d $r3.next()\n  $z1 \u003d r0.contains($r4)\n  if ($z1 !\u003d 0) goto B4 else B2\n}",
      "B4 {\n  $r3.remove()\n  z2 \u003d 1\n  goto B2\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r2 \u003d r1.decorated()\n  $z0 \u003d $r2.retainAll(null)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e B2",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionSortedBag#iterator(...0)",
        "body": "(source not found)"
      },
      {
        "name": "CollectionSortedBag#decorated(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bag.PredicatedBag",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return object \u003d\u003d this || decorated().equals(object);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d r1) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  PredicatedBag\n  Object\n  if (r0 \u003d\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1.decorated()\n  $z0 \u003d $r2.equals(r0)\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PredicatedBag#decorated(...0)",
        "body": "{\r\n    return (Bag\u003cE\u003e) super.decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bag.SynchronizedBag",
    "methodName": "add",
    "signature": "boolean add(java.lang.Object,int)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedBag\n  Object\n  i0 :\u003d @parameter1: int\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.getBag()\n  $z0 \u003d $r2.add(r3, i0)\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bag.SynchronizedBag",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    synchronized (lock) {\r\n        return getBag().equals(object);\r\n    }\r\n}",
    "nodes": 10,
    "edges": 14,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SynchronizedBag\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d Object lock\u003e\n  entermonitor $r2\n  $r3 \u003d r1.getBag()\n  $z0 \u003d $r3.equals(r0)\n  exitmonitor $r2\n  return\n}",
      "B3 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r2\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedBag#getBag(...0)",
        "body": "{\r\n    return (Bag\u003cE\u003e) decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bag.SynchronizedBag",
    "methodName": "getCount",
    "signature": "int getCount(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return getBag().getCount(object);\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedBag\n  Object\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.getBag()\n  $i0 \u003d $r2.getCount(r3)\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedBag#getBag(...0)",
        "body": "{\r\n    return (Bag\u003cE\u003e) decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bag.SynchronizedBag",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return getBag().hashCode();\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedBag\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.getBag()\n  $i0 \u003d $r2.hashCode()\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r3 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r3\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedBag#getBag(...0)",
        "body": "{\r\n    return (Bag\u003cE\u003e) decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bag.SynchronizedBag",
    "methodName": "remove",
    "signature": "boolean remove(java.lang.Object,int)",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return getBag().remove(object, count);\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedBag\n  Object\n  i0 :\u003d @parameter1: int\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.getBag()\n  $z0 \u003d $r2.remove(r3, i0)\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedBag#getBag(...0)",
        "body": "{\r\n    return (Bag\u003cE\u003e) decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bag.SynchronizedBag",
    "methodName": "uniqueSet",
    "signature": "java.util.Set uniqueSet()",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        final Set\u003cE\u003e set \u003d getBag().uniqueSet();\r\n        return new SynchronizedBagSet(set, lock);\r\n    }\r\n}",
    "nodes": 11,
    "edges": 18,
    "cc": 9,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedBag\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.getBag()\n  $r3 \u003d $r2.uniqueSet()\n  $r4 \u003d SynchronizedBag$SynchronizedBagSet\n  $r5 \u003d Object lock\u003e\n  new SynchronizedBag$SynchronizedBagSet(r0, $r3, $r5)\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r6 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r6\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedBag#getBag(...0)",
        "body": "{\r\n    return (Bag\u003cE\u003e) decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bag.SynchronizedSortedBag",
    "methodName": "comparator",
    "signature": "java.util.Comparator comparator()",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return getSortedBag().comparator();\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedSortedBag\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.getSortedBag()\n  $r3 \u003d $r2.comparator()\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedSortedBag#getSortedBag(...0)",
        "body": "{\r\n    return (SortedBag\u003cE\u003e) decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bag.SynchronizedSortedBag",
    "methodName": "first",
    "signature": "java.lang.Object first()",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return getSortedBag().first();\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedSortedBag\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.getSortedBag()\n  $r3 \u003d $r2.first()\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedSortedBag#getSortedBag(...0)",
        "body": "{\r\n    return (SortedBag\u003cE\u003e) decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bag.SynchronizedSortedBag",
    "methodName": "last",
    "signature": "java.lang.Object last()",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return getSortedBag().last();\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedSortedBag\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.getSortedBag()\n  $r3 \u003d $r2.last()\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedSortedBag#getSortedBag(...0)",
        "body": "{\r\n    return (SortedBag\u003cE\u003e) decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bag.TransformedBag",
    "methodName": "transformedBag",
    "signature": "org.apache.commons.collections4.Bag transformedBag(org.apache.commons.collections4.Bag,org.apache.commons.collections4.Transformer)",
    "visibility": "public",
    "body": "{\r\n    final TransformedBag\u003cE\u003e decorated \u003d new TransformedBag\u003c\u003e(bag, transformer);\r\n    if (!bag.isEmpty()) {\r\n        // Bag is of type E\r\n        @SuppressWarnings(\"unchecked\")\r\n        final E[] // NOPMD - false positive for generics\r\n        values \u003d (E[]) bag.toArray();\r\n        bag.clear();\r\n        for (final E value : values) {\r\n            decorated.decorated().add(transformer.apply(value));\r\n        }\r\n    }\r\n    return decorated;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B4",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Bag\n  Transformer\n  $r0 \u003d TransformedBag\n  new TransformedBag(r1, r2)\n  $z0 \u003d r1.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $r3 \u003d r1.toArray()\n  r1.clear()\n  i0 \u003d lengthof $r3\n  i1 \u003d 0\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B4\n}",
      "B3 {\n  r4 \u003d $r3[i1]\n  $r5 \u003d $r0.decorated()\n  $r6 \u003d r2.apply(r4)\n  $r5.add($r6)\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bag.TransformedBag",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return object \u003d\u003d this || decorated().equals(object);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d r1) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TransformedBag\n  Object\n  if (r0 \u003d\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1.decorated()\n  $z0 \u003d $r2.equals(r0)\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TransformedBag#decorated(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bag.TransformedSortedBag",
    "methodName": "transformedSortedBag",
    "signature": "org.apache.commons.collections4.bag.TransformedSortedBag transformedSortedBag(org.apache.commons.collections4.SortedBag,org.apache.commons.collections4.Transformer)",
    "visibility": "public",
    "body": "{\r\n    final TransformedSortedBag\u003cE\u003e decorated \u003d new TransformedSortedBag\u003c\u003e(bag, transformer);\r\n    if (!bag.isEmpty()) {\r\n        // bag is type E\r\n        @SuppressWarnings(\"unchecked\")\r\n        final E[] // NOPMD - false positive for generics\r\n        values \u003d (E[]) bag.toArray();\r\n        bag.clear();\r\n        for (final E value : values) {\r\n            decorated.decorated().add(transformer.apply(value));\r\n        }\r\n    }\r\n    return decorated;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B4",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  SortedBag\n  Transformer\n  $r0 \u003d TransformedSortedBag\n  new TransformedSortedBag(r1, r2)\n  $z0 \u003d r1.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $r3 \u003d r1.toArray()\n  r1.clear()\n  i0 \u003d lengthof $r3\n  i1 \u003d 0\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B4\n}",
      "B3 {\n  r4 \u003d $r3[i1]\n  $r5 \u003d $r0.decorated()\n  $r6 \u003d r2.apply(r4)\n  $r5.add($r6)\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bag.TreeBag",
    "methodName": "add",
    "signature": "boolean add(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B3",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TreeBag\n  Object\n  $r1 \u003d r0.comparator()\n  if ($r1 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z1 \u003d Comparable\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  Objects.requireNonNull(r2, \"object\")\n  $r3 \u003d IllegalArgumentException\n  $r4 \u003d r2.getClass()\n  $r5 \u003d String.valueOf($r4)\n  $r6 \u003d dynInvoke makeConcatWithConstants($r5)\n  new IllegalArgumentException($r6)\n  throw $r3\n}",
      "B3 {\n  $z0 \u003d r0.add(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bag.UnmodifiableBag",
    "methodName": "unmodifiableBag",
    "signature": "org.apache.commons.collections4.Bag unmodifiableBag(org.apache.commons.collections4.Bag)",
    "visibility": "public",
    "body": "{\r\n    if (bag instanceof Unmodifiable) {\r\n        // safe to upcast\r\n        @SuppressWarnings(\"unchecked\")\r\n        final Bag\u003cE\u003e tmpBag \u003d (Bag\u003cE\u003e) bag;\r\n        return tmpBag;\r\n    }\r\n    return new UnmodifiableBag\u003c\u003e(bag);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Bag\n  $z0 \u003d Unmodifiable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableBag\n  new UnmodifiableBag(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bag.UnmodifiableSortedBag",
    "methodName": "unmodifiableSortedBag",
    "signature": "org.apache.commons.collections4.SortedBag unmodifiableSortedBag(org.apache.commons.collections4.SortedBag)",
    "visibility": "public",
    "body": "{\r\n    if (bag instanceof Unmodifiable) {\r\n        return bag;\r\n    }\r\n    return new UnmodifiableSortedBag\u003c\u003e(bag);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SortedBag\n  $z0 \u003d Unmodifiable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableSortedBag\n  new UnmodifiableSortedBag(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.DualTreeBidiMap",
    "methodName": "nextKey",
    "signature": "java.lang.Object nextKey(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  DualTreeBidiMap\n  Object\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d Map normalMap\u003e\n  $z1 \u003d OrderedMap\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r9 \u003d Map normalMap\u003e\n  $r10 \u003d OrderedMap) $r9\n  $r11 \u003d $r10.nextKey(r4)\n  return\n}",
      "B4 {\n  $r2 \u003d Map normalMap\u003e\n  r3 \u003d SortedMap) $r2\n  $r5 \u003d r3.tailMap(r4)\n  $r6 \u003d $r5.keySet()\n  $r7 \u003d $r6.iterator()\n  $r7.next()\n  $z2 \u003d $r7.hasNext()\n  if ($z2 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r8 \u003d $r7.next()\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.DualTreeBidiMap",
    "methodName": "previousKey",
    "signature": "java.lang.Object previousKey(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  DualTreeBidiMap\n  Object\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d Map normalMap\u003e\n  $z1 \u003d OrderedMap\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r7 \u003d Map normalMap\u003e\n  $r8 \u003d OrderedMap) $r7\n  $r9 \u003d $r8.previousKey(r4)\n  return\n}",
      "B4 {\n  $r2 \u003d Map normalMap\u003e\n  r3 \u003d SortedMap) $r2\n  $r5 \u003d r3.headMap(r4)\n  $z2 \u003d $r5.isEmpty()\n  if ($z2 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r6 \u003d $r5.lastKey()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "checkNonNullComparable",
    "signature": "void checkNonNullComparable(java.lang.Object,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  TreeBidiMap$DataElement\n  $r2 \u003d Objects.toString(r1)\n  Objects.requireNonNull(r0, $r2)\n  $z0 \u003d Comparable\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d ClassCastException\n  $r4 \u003d String.valueOf(r1)\n  $r5 \u003d dynInvoke makeConcatWithConstants($r4)\n  new ClassCastException($r5)\n  throw $r3\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "isBlack",
    "signature": "boolean isBlack(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap$Node\n  TreeBidiMap$DataElement\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r0.isBlack(r1)\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "isRed",
    "signature": "boolean isRed(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap$Node\n  TreeBidiMap$DataElement\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d r0.isRed(r1)\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "makeBlack",
    "signature": "void makeBlack(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap$Node\n  TreeBidiMap$DataElement\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r0.setBlack(r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "makeRed",
    "signature": "void makeRed(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap$Node\n  TreeBidiMap$DataElement\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  r0.setRed(r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "containsKey",
    "signature": "boolean containsKey(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    checkKey(key);\r\n    return lookupKey(key) !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  Object\n  TreeBidiMap.checkKey(r0)\n  $r2 \u003d r1.lookupKey(r0)\n  if ($r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeBidiMap#checkKey(...1)",
        "body": "{\r\n    checkNonNullComparable(key, KEY);\r\n}"
      },
      {
        "name": "TreeBidiMap#lookupKey(...1)",
        "body": "{\r\n    return this.\u003cK\u003elookup(key, KEY);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "containsValue",
    "signature": "boolean containsValue(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    checkValue(value);\r\n    return lookupValue(value) !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  Object\n  TreeBidiMap.checkValue(r0)\n  $r2 \u003d r1.lookupValue(r0)\n  if ($r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeBidiMap#lookupValue(...1)",
        "body": "{\r\n    return this.\u003cV\u003elookup(value, VALUE);\r\n}"
      },
      {
        "name": "TreeBidiMap#checkValue(...1)",
        "body": "{\r\n    checkNonNullComparable(value, VALUE);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "copyColor",
    "signature": "void copyColor(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B4",
      "B1 : If(r1 !\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  TreeBidiMap$Node\n  TreeBidiMap$Node\n  TreeBidiMap$DataElement\n  if (r0 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  r0.setBlack(r2)\n  goto B4\n}",
      "B3 {\n  r0.copyColor(r1, r2)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "doEquals",
    "signature": "boolean doEquals(java.lang.Object,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 20,
    "edges": 29,
    "cc": 11,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($i0 \u003d\u003d $i1) → B5 | else → B6",
      "B6 : If($i2 \u003c\u003d 0) → B7 | else → B19",
      "B9 : If($z1 \u003d\u003d 0) → B10 | else → B17",
      "B14 : If($z2 !\u003d 0) → B15 | else → B16"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  Object\n  TreeBidiMap$DataElement\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d Map\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d Map) r0\n  $i0 \u003d r2.size()\n  $i1 \u003d r1.size()\n  if ($i0 \u003d\u003d $i1) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $i2 \u003d TreeBidiMap: int nodeCount\u003e\n  if ($i2 \u003c\u003d 0) goto B7 else B14\n}",
      "B7 {\n  $r4 \u003d r1.getMapIterator(r3)\n}",
      "B8 {\n  $z1 \u003d $r4.hasNext()\n  if ($z1 \u003d\u003d 0) goto B9 else B12\n}",
      "B9 {\n  $r5 \u003d $r4.next()\n  $r6 \u003d $r4.getValue()\n  $r7 \u003d r2.get($r5)\n  $z2 \u003d $r6.equals($r7)\n  if ($z2 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  return\n}",
      "B11 {\n  goto B8\n}",
      "B12 {\n  goto B14\n}",
      "B13 {\n  $r8 :\u003d @caughtexception\n  return\n}",
      "B14 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B14",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B12",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B8",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "doHashCode",
    "signature": "int doHashCode(org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B4",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  TreeBidiMap$DataElement\n  i4 \u003d 0\n  $i0 \u003d TreeBidiMap: int nodeCount\u003e\n  if ($i0 \u003c\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $r2 \u003d r0.getMapIterator(r1)\n}",
      "B2 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d $r2.next()\n  $r4 \u003d $r2.getValue()\n  $i1 \u003d $r3.hashCode()\n  $i2 \u003d $r4.hashCode()\n  $i3 \u003d $i1 ^ $i2\n  i4 \u003d i4 + $i3\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "doPut",
    "signature": "void doPut(java.lang.Comparable,java.lang.Comparable)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 13,
    "edges": 16,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r28 !\u003d null) → B1 | else → B2",
      "B2 : If($i1 !\u003d 0) → B3 | else → B4",
      "B4 : If($i1 \u003e\u003d 0) → B5 | else → B8",
      "B5 : If($r14 !\u003d null) → B6 | else → B7",
      "B8 : If($r7 !\u003d null) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  Comparable\n  Comparable\n  TreeBidiMap.checkKeyAndValue(r0, r1)\n  r2.doRemoveKey(r0)\n  r2.doRemoveValue(r1)\n  $r4 \u003d TreeBidiMap$Node[] rootNode\u003e\n  $r3 \u003d TreeBidiMap$DataElement KEY\u003e\n  $i0 \u003d $r3.ordinal()\n  r28 \u003d $r4[$i0]\n  if (r28 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r23 \u003d TreeBidiMap$Node\n  new TreeBidiMap$Node(r0, r1)\n  $r25 \u003d TreeBidiMap$Node[] rootNode\u003e\n  $r24 \u003d TreeBidiMap$DataElement KEY\u003e\n  $i2 \u003d $r24.ordinal()\n  $r25[$i2] \u003d $r23\n  $r27 \u003d TreeBidiMap$Node[] rootNode\u003e\n  $r26 \u003d TreeBidiMap$DataElement VALUE\u003e\n  $i3 \u003d $r26.ordinal()\n  $r27[$i3] \u003d $r23\n  r2.grow()\n  goto B12\n}",
      "B2 {\n  $r5 \u003d r28.getKey()\n  $i1 \u003d TreeBidiMap.compare(r0, $r5)\n  if ($i1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r20 \u003d IllegalArgumentException\n  $r21 \u003d String.valueOf(r0)\n  $r22 \u003d dynInvoke makeConcatWithConstants($r21)\n  new IllegalArgumentException($r22)\n  throw $r20\n}",
      "B4 {\n  if ($i1 \u003e\u003d 0) goto B5 else B8\n}",
      "B5 {\n  $r13 \u003d TreeBidiMap$DataElement KEY\u003e\n  $r14 \u003d r28.getLeft($r13)\n  if ($r14 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r16 \u003d TreeBidiMap$Node\n  new TreeBidiMap$Node(r0, r1)\n  r2.insertValue($r16)\n  $r17 \u003d TreeBidiMap$DataElement KEY\u003e\n  r28.setLeft($r16, $r17)\n  $r18 \u003d TreeBidiMap$DataElement KEY\u003e\n  $r16.setParent(r28, $r18)\n  $r19 \u003d TreeBidiMap$DataElement KEY\u003e\n  r2.doRedBlackInsert($r16, $r19)\n  r2.grow()\n  goto B12\n}",
      "B7 {\n  $r15 \u003d TreeBidiMap$DataElement KEY\u003e\n  r28 \u003d r28.getLeft($r15)\n  goto B11\n}",
      "B8 {\n  $r6 \u003d TreeBidiMap$DataElement KEY\u003e\n  $r7 \u003d r28.getRight($r6)\n  if ($r7 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  $r9 \u003d TreeBidiMap$Node\n  new TreeBidiMap$Node(r0, r1)\n  r2.insertValue($r9)\n  $r10 \u003d TreeBidiMap$DataElement KEY\u003e\n  r28.setRight($r9, $r10)\n  $r11 \u003d TreeBidiMap$DataElement KEY\u003e\n  $r9.setParent(r28, $r11)\n  $r12 \u003d TreeBidiMap$DataElement KEY\u003e\n  r2.doRedBlackInsert($r9, $r12)\n  r2.grow()\n  goto B12\n}",
      "B10 {\n  $r8 \u003d TreeBidiMap$DataElement KEY\u003e\n  r28 \u003d r28.getRight($r8)\n}",
      "B11 {\n  goto B2\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B12",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B12",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B11 --\u003e B2",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "doRedBlackDelete",
    "signature": "void doRedBlackDelete(org.apache.commons.collections4.bidimap.TreeBidiMap$Node)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 27,
    "edges": 38,
    "cc": 13,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d i0) → B2 | else → B26",
      "B2 : If($r4 \u003d\u003d null) → B3 | else → B5",
      "B3 : If($r20 \u003d\u003d null) → B4 | else → B5",
      "B5 : If($r22 \u003d\u003d null) → B6 | else → B7",
      "B8 : If($r23 \u003d\u003d null) → B9 | else → B16",
      "B9 : If($r14 !\u003d null) → B10 | else → B11",
      "B11 : If(r3 !\u003d $r16) → B12 | else → B13",
      "B14 : If($z1 \u003d\u003d 0) → B15 | else → B25",
      "B16 : If($r6 !\u003d null) → B17 | else → B18",
      "B18 : If($z0 \u003d\u003d 0) → B19 | else → B20",
      "B20 : If($r7 \u003d\u003d null) → B21 | else → B25",
      "B21 : If(r3 !\u003d $r9) → B22 | else → B23"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  TreeBidiMap$Node\n  $r0 \u003d TreeBidiMap$DataElement.values()\n  i0 \u003d lengthof $r0\n  i3 \u003d 0\n}",
      "B1 {\n  if (i3 \u003e\u003d i0) goto B2 else B26\n}",
      "B2 {\n  r2 \u003d $r0[i3]\n  $r4 \u003d r3.getLeft(r2)\n  if ($r4 \u003d\u003d null) goto B3 else B5\n}",
      "B3 {\n  $r20 \u003d r3.getRight(r2)\n  if ($r20 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r21 \u003d r1.nextGreater(r3, r2)\n  r1.swapPosition($r21, r3, r2)\n}",
      "B5 {\n  $r22 \u003d r3.getLeft(r2)\n  if ($r22 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r23 \u003d r3.getLeft(r2)\n  goto B8\n}",
      "B7 {\n  $r23 \u003d r3.getRight(r2)\n}",
      "B8 {\n  r5 \u003d $r23\n  if ($r23 \u003d\u003d null) goto B9 else B16\n}",
      "B9 {\n  $r13 \u003d r3.getParent(r2)\n  $r23.setParent($r13, r2)\n  $r14 \u003d r3.getParent(r2)\n  if ($r14 !\u003d null) goto B10 else B11\n}",
      "B10 {\n  $r19 \u003d TreeBidiMap$Node[] rootNode\u003e\n  $i2 \u003d r2.ordinal()\n  $r19[$i2] \u003d $r23\n  goto B14\n}",
      "B11 {\n  $r15 \u003d r3.getParent(r2)\n  $r16 \u003d $r15.getLeft(r2)\n  if (r3 !\u003d $r16) goto B12 else B13\n}",
      "B12 {\n  $r18 \u003d r3.getParent(r2)\n  $r18.setLeft($r23, r2)\n  goto B14\n}",
      "B13 {\n  $r17 \u003d r3.getParent(r2)\n  $r17.setRight($r23, r2)\n}",
      "B14 {\n  r3.setLeft(null, r2)\n  r3.setRight(null, r2)\n  r3.setParent(null, r2)\n  $z1 \u003d TreeBidiMap.isBlack(r3, r2)\n  if ($z1 \u003d\u003d 0) goto B15 else B25\n}",
      "B15 {\n  r1.doRedBlackDeleteFixup(r5, r2)\n  goto B25\n}",
      "B16 {\n  $r6 \u003d r3.getParent(r2)\n  if ($r6 !\u003d null) goto B17 else B18\n}",
      "B17 {\n  $r12 \u003d TreeBidiMap$Node[] rootNode\u003e\n  $i1 \u003d r2.ordinal()\n  $r12[$i1] \u003d null\n  goto B25\n}",
      "B18 {\n  $z0 \u003d TreeBidiMap.isBlack(r3, r2)\n  if ($z0 \u003d\u003d 0) goto B19 else B20\n}",
      "B19 {\n  r1.doRedBlackDeleteFixup(r3, r2)\n}",
      "B20 {\n  $r7 \u003d r3.getParent(r2)\n  if ($r7 \u003d\u003d null) goto B21 else B25\n}",
      "B21 {\n  $r8 \u003d r3.getParent(r2)\n  $r9 \u003d $r8.getLeft(r2)\n  if (r3 !\u003d $r9) goto B22 else B23\n}",
      "B22 {\n  $r11 \u003d r3.getParent(r2)\n  $r11.setLeft(null, r2)\n  goto B24\n}",
      "B23 {\n  $r10 \u003d r3.getParent(r2)\n  $r10.setRight(null, r2)\n}",
      "B24 {\n  r3.setParent(null, r2)\n}",
      "B25 {\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B26 {\n  r1.shrink()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B26",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B16",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B25",
      "B15 --\u003e B25",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B25",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B20",
      "B20 --\u003e B21",
      "B20 --\u003e B25",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B24",
      "B24 --\u003e B25",
      "B25 --\u003e B1",
      "B26 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "doRedBlackDeleteFixup",
    "signature": "void doRedBlackDeleteFixup(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 23,
    "edges": 33,
    "cc": 12,
    "flowSummary": [
      "B1 : If(r33 \u003d\u003d $r35) → B2 | else → B22",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B22",
      "B3 : If($z1 \u003d\u003d 0) → B4 | else → B13",
      "B4 : If($z6 \u003d\u003d 0) → B5 | else → B6",
      "B6 : If($z7 \u003d\u003d 0) → B7 | else → B9",
      "B7 : If($z9 \u003d\u003d 0) → B8 | else → B9",
      "B9 : If($z8 \u003d\u003d 0) → B10 | else → B11",
      "B13 : If($z2 \u003d\u003d 0) → B14 | else → B15",
      "B15 : If($z3 \u003d\u003d 0) → B16 | else → B18",
      "B16 : If($z5 \u003d\u003d 0) → B17 | else → B18",
      "B18 : If($z4 \u003d\u003d 0) → B19 | else → B20"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  TreeBidiMap$Node\n  TreeBidiMap$DataElement\n  r33 \u003d r0\n}",
      "B1 {\n  $r34 \u003d TreeBidiMap$Node[] rootNode\u003e\n  $i2 \u003d r2.ordinal()\n  $r35 \u003d $r34[$i2]\n  if (r33 \u003d\u003d $r35) goto B2 else B22\n}",
      "B2 {\n  $z0 \u003d TreeBidiMap.isBlack(r33, r2)\n  if ($z0 \u003d\u003d 0) goto B3 else B22\n}",
      "B3 {\n  $z1 \u003d r33.isLeftChild(r2)\n  if ($z1 \u003d\u003d 0) goto B4 else B13\n}",
      "B4 {\n  $r18 \u003d r1.getParent(r33, r2)\n  $r19 \u003d r1.getRightChild($r18, r2)\n  r36 \u003d $r19\n  $z6 \u003d TreeBidiMap.isRed($r19, r2)\n  if ($z6 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  TreeBidiMap.makeBlack($r19, r2)\n  $r30 \u003d r1.getParent(r33, r2)\n  TreeBidiMap.makeRed($r30, r2)\n  $r31 \u003d r1.getParent(r33, r2)\n  r1.rotateLeft($r31, r2)\n  $r32 \u003d r1.getParent(r33, r2)\n  r36 \u003d r1.getRightChild($r32, r2)\n}",
      "B6 {\n  $r20 \u003d r1.getLeftChild(r36, r2)\n  $z7 \u003d TreeBidiMap.isBlack($r20, r2)\n  if ($z7 \u003d\u003d 0) goto B7 else B9\n}",
      "B7 {\n  $r29 \u003d r1.getRightChild(r36, r2)\n  $z9 \u003d TreeBidiMap.isBlack($r29, r2)\n  if ($z9 \u003d\u003d 0) goto B8 else B9\n}",
      "B8 {\n  TreeBidiMap.makeRed(r36, r2)\n  r33 \u003d r1.getParent(r33, r2)\n  goto B12\n}",
      "B9 {\n  $r21 \u003d r1.getRightChild(r36, r2)\n  $z8 \u003d TreeBidiMap.isBlack($r21, r2)\n  if ($z8 \u003d\u003d 0) goto B10 else B11\n}",
      "B10 {\n  $r27 \u003d r1.getLeftChild(r36, r2)\n  TreeBidiMap.makeBlack($r27, r2)\n  TreeBidiMap.makeRed(r36, r2)\n  r1.rotateRight(r36, r2)\n  $r28 \u003d r1.getParent(r33, r2)\n  r36 \u003d r1.getRightChild($r28, r2)\n}",
      "B11 {\n  $r22 \u003d r1.getParent(r33, r2)\n  r1.copyColor($r22, r36, r2)\n  $r23 \u003d r1.getParent(r33, r2)\n  TreeBidiMap.makeBlack($r23, r2)\n  $r24 \u003d r1.getRightChild(r36, r2)\n  TreeBidiMap.makeBlack($r24, r2)\n  $r25 \u003d r1.getParent(r33, r2)\n  r1.rotateLeft($r25, r2)\n  $r26 \u003d TreeBidiMap$Node[] rootNode\u003e\n  $i1 \u003d r2.ordinal()\n  r33 \u003d $r26[$i1]\n}",
      "B12 {\n  goto B1\n}",
      "B13 {\n  $r3 \u003d r1.getParent(r33, r2)\n  $r4 \u003d r1.getLeftChild($r3, r2)\n  r37 \u003d $r4\n  $z2 \u003d TreeBidiMap.isRed($r4, r2)\n  if ($z2 \u003d\u003d 0) goto B14 else B15\n}",
      "B14 {\n  TreeBidiMap.makeBlack($r4, r2)\n  $r15 \u003d r1.getParent(r33, r2)\n  TreeBidiMap.makeRed($r15, r2)\n  $r16 \u003d r1.getParent(r33, r2)\n  r1.rotateRight($r16, r2)\n  $r17 \u003d r1.getParent(r33, r2)\n  r37 \u003d r1.getLeftChild($r17, r2)\n}",
      "B15 {\n  $r5 \u003d r1.getRightChild(r37, r2)\n  $z3 \u003d TreeBidiMap.isBlack($r5, r2)\n  if ($z3 \u003d\u003d 0) goto B16 else B18\n}",
      "B16 {\n  $r14 \u003d r1.getLeftChild(r37, r2)\n  $z5 \u003d TreeBidiMap.isBlack($r14, r2)\n  if ($z5 \u003d\u003d 0) goto B17 else B18\n}",
      "B17 {\n  TreeBidiMap.makeRed(r37, r2)\n  r33 \u003d r1.getParent(r33, r2)\n  goto B21\n}",
      "B18 {\n  $r6 \u003d r1.getLeftChild(r37, r2)\n  $z4 \u003d TreeBidiMap.isBlack($r6, r2)\n  if ($z4 \u003d\u003d 0) goto B19 else B20\n}",
      "B19 {\n  $r12 \u003d r1.getRightChild(r37, r2)\n  TreeBidiMap.makeBlack($r12, r2)\n  TreeBidiMap.makeRed(r37, r2)\n  r1.rotateLeft(r37, r2)\n  $r13 \u003d r1.getParent(r33, r2)\n  r37 \u003d r1.getLeftChild($r13, r2)\n}",
      "B20 {\n  $r7 \u003d r1.getParent(r33, r2)\n  r1.copyColor($r7, r37, r2)\n  $r8 \u003d r1.getParent(r33, r2)\n  TreeBidiMap.makeBlack($r8, r2)\n  $r9 \u003d r1.getLeftChild(r37, r2)\n  TreeBidiMap.makeBlack($r9, r2)\n  $r10 \u003d r1.getParent(r33, r2)\n  r1.rotateRight($r10, r2)\n  $r11 \u003d TreeBidiMap$Node[] rootNode\u003e\n  $i0 \u003d r2.ordinal()\n  r33 \u003d $r11[$i0]\n}",
      "B21 {\n  goto B1\n}",
      "B22 {\n  TreeBidiMap.makeBlack(r33, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B22",
      "B2 --\u003e B3",
      "B2 --\u003e B22",
      "B3 --\u003e B4",
      "B3 --\u003e B13",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B12",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B12 --\u003e B1",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B16",
      "B15 --\u003e B18",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B21",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B20",
      "B20 --\u003e B21",
      "B21 --\u003e B1",
      "B22 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "doRedBlackInsert",
    "signature": "void doRedBlackInsert(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 20,
    "edges": 29,
    "cc": 11,
    "flowSummary": [
      "B1 : If(r24 \u003d\u003d null) → B2 | else → B19",
      "B2 : If(r24 \u003d\u003d $r4) → B3 | else → B19",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B19",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B12",
      "B5 : If($z4 \u003d\u003d 0) → B6 | else → B7",
      "B7 : If($z5 \u003d\u003d 0) → B8 | else → B9",
      "B9 : If($r19 \u003d\u003d null) → B10 | else → B11",
      "B12 : If($z2 \u003d\u003d 0) → B13 | else → B14",
      "B14 : If($z3 \u003d\u003d 0) → B15 | else → B16",
      "B16 : If($r10 \u003d\u003d null) → B17 | else → B18"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  TreeBidiMap$Node\n  TreeBidiMap$DataElement\n  r24 \u003d r0\n  TreeBidiMap.makeRed(r0, r1)\n}",
      "B1 {\n  if (r24 \u003d\u003d null) goto B2 else B19\n}",
      "B2 {\n  $r3 \u003d TreeBidiMap$Node[] rootNode\u003e\n  $i0 \u003d r1.ordinal()\n  $r4 \u003d $r3[$i0]\n  if (r24 \u003d\u003d $r4) goto B3 else B19\n}",
      "B3 {\n  $r5 \u003d r24.getParent(r1)\n  $z0 \u003d TreeBidiMap.isRed($r5, r1)\n  if ($z0 \u003d\u003d 0) goto B4 else B19\n}",
      "B4 {\n  $z1 \u003d r24.isLeftChild(r1)\n  if ($z1 \u003d\u003d 0) goto B5 else B12\n}",
      "B5 {\n  $r15 \u003d r2.getGrandParent(r24, r1)\n  $r16 \u003d r2.getRightChild($r15, r1)\n  $z4 \u003d TreeBidiMap.isRed($r16, r1)\n  if ($z4 \u003d\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $r22 \u003d r2.getParent(r24, r1)\n  TreeBidiMap.makeBlack($r22, r1)\n  TreeBidiMap.makeBlack($r16, r1)\n  $r23 \u003d r2.getGrandParent(r24, r1)\n  TreeBidiMap.makeRed($r23, r1)\n  r24 \u003d r2.getGrandParent(r24, r1)\n  goto B11\n}",
      "B7 {\n  $z5 \u003d r24.isRightChild(r1)\n  if ($z5 \u003d\u003d 0) goto B8 else B9\n}",
      "B8 {\n  $r21 \u003d r2.getParent(r24, r1)\n  r24 \u003d $r21\n  r2.rotateLeft($r21, r1)\n}",
      "B9 {\n  $r17 \u003d r2.getParent(r24, r1)\n  TreeBidiMap.makeBlack($r17, r1)\n  $r18 \u003d r2.getGrandParent(r24, r1)\n  TreeBidiMap.makeRed($r18, r1)\n  $r19 \u003d r2.getGrandParent(r24, r1)\n  if ($r19 \u003d\u003d null) goto B10 else B11\n}",
      "B10 {\n  $r20 \u003d r2.getGrandParent(r24, r1)\n  r2.rotateRight($r20, r1)\n}",
      "B11 {\n  goto B1\n}",
      "B12 {\n  $r6 \u003d r2.getGrandParent(r24, r1)\n  $r7 \u003d r2.getLeftChild($r6, r1)\n  $z2 \u003d TreeBidiMap.isRed($r7, r1)\n  if ($z2 \u003d\u003d 0) goto B13 else B14\n}",
      "B13 {\n  $r13 \u003d r2.getParent(r24, r1)\n  TreeBidiMap.makeBlack($r13, r1)\n  TreeBidiMap.makeBlack($r7, r1)\n  $r14 \u003d r2.getGrandParent(r24, r1)\n  TreeBidiMap.makeRed($r14, r1)\n  r24 \u003d r2.getGrandParent(r24, r1)\n  goto B18\n}",
      "B14 {\n  $z3 \u003d r24.isLeftChild(r1)\n  if ($z3 \u003d\u003d 0) goto B15 else B16\n}",
      "B15 {\n  $r12 \u003d r2.getParent(r24, r1)\n  r24 \u003d $r12\n  r2.rotateRight($r12, r1)\n}",
      "B16 {\n  $r8 \u003d r2.getParent(r24, r1)\n  TreeBidiMap.makeBlack($r8, r1)\n  $r9 \u003d r2.getGrandParent(r24, r1)\n  TreeBidiMap.makeRed($r9, r1)\n  $r10 \u003d r2.getGrandParent(r24, r1)\n  if ($r10 \u003d\u003d null) goto B17 else B18\n}",
      "B17 {\n  $r11 \u003d r2.getGrandParent(r24, r1)\n  r2.rotateLeft($r11, r1)\n}",
      "B18 {\n  goto B1\n}",
      "B19 {\n  $r25 \u003d TreeBidiMap$Node[] rootNode\u003e\n  $i1 \u003d r1.ordinal()\n  $r26 \u003d $r25[$i1]\n  TreeBidiMap.makeBlack($r26, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B19",
      "B2 --\u003e B3",
      "B2 --\u003e B19",
      "B3 --\u003e B4",
      "B3 --\u003e B19",
      "B4 --\u003e B5",
      "B4 --\u003e B12",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B1",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B18",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e B1",
      "B19 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "doRemoveKey",
    "signature": "java.lang.Comparable doRemoveKey(java.lang.Object)",
    "visibility": "private",
    "body": "{\r\n    final Node\u003cK, V\u003e node \u003d lookupKey(key);\r\n    if (node \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    doRedBlackDelete(node);\r\n    return node.getValue();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  Object\n  $r2 \u003d r0.lookupKey(r1)\n  if ($r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r0.doRedBlackDelete($r2)\n  $r3 \u003d $r2.getValue()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeBidiMap#lookupKey(...1)",
        "body": "{\r\n    return this.\u003cK\u003elookup(key, KEY);\r\n}"
      },
      {
        "name": "TreeBidiMap#doRedBlackDelete(...1)",
        "body": "{\r\n    for (final DataElement dataElement : DataElement.values()) {\r\n        // if deleted node has both left and children, swap with\r\n        // the next greater node\r\n        if (deletedNode.getLeft(dataElement) !\u003d null \u0026\u0026 deletedNode.getRight(dataElement) !\u003d null) {\r\n            swapPosition(nextGreater(deletedNode, dataElement), deletedNode, dataElement);\r\n        }\r\n        final Node\u003cK, V\u003e replacement \u003d deletedNode.getLeft(dataElement) !\u003d null ? deletedNode.getLeft(dataElement) : deletedNode.getRight(dataElement);\r\n        if (replacement !\u003d null) {\r\n            replacement.setParent(deletedNode.getParent(dataElement), dataElement);\r\n            if (deletedNode.getParent(dataElement) \u003d\u003d null) {\r\n                rootNode[dataElement.ordinal()] \u003d replacement;\r\n            } else if (deletedNode \u003d\u003d deletedNode.getParent(dataElement).getLeft(dataElement)) {\r\n                deletedNode.getParent(dataElement).setLeft(replacement, dataElement);\r\n            } else {\r\n                deletedNode.getParent(dataElement).setRight(replacement, dataElement);\r\n            }\r\n            deletedNode.setLeft(null, dataElement);\r\n            deletedNode.setRight(null, dataElement);\r\n            deletedNode.setParent(null, dataElement);\r\n            if (isBlack(deletedNode, dataElement)) {\r\n                doRedBlackDeleteFixup(replacement, dataElement);\r\n            }\r\n        } else if (deletedNode.getParent(dataElement) \u003d\u003d null) {\r\n            // replacement is null\r\n            // empty tree\r\n            rootNode[dataElement.ordinal()] \u003d null;\r\n        } else {\r\n            // deleted node had no children\r\n            if (isBlack(deletedNode, dataElement)) {\r\n                doRedBlackDeleteFixup(deletedNode, dataElement);\r\n            }\r\n            if (deletedNode.getParent(dataElement) !\u003d null) {\r\n                if (deletedNode \u003d\u003d deletedNode.getParent(dataElement).getLeft(dataElement)) {\r\n                    deletedNode.getParent(dataElement).setLeft(null, dataElement);\r\n                } else {\r\n                    deletedNode.getParent(dataElement).setRight(null, dataElement);\r\n                }\r\n                deletedNode.setParent(null, dataElement);\r\n            }\r\n        }\r\n    }\r\n    shrink();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "doRemoveValue",
    "signature": "java.lang.Comparable doRemoveValue(java.lang.Object)",
    "visibility": "private",
    "body": "{\r\n    final Node\u003cK, V\u003e node \u003d lookupValue(value);\r\n    if (node \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    doRedBlackDelete(node);\r\n    return node.getKey();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  Object\n  $r2 \u003d r0.lookupValue(r1)\n  if ($r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r0.doRedBlackDelete($r2)\n  $r3 \u003d $r2.getKey()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeBidiMap#lookupValue(...1)",
        "body": "{\r\n    return this.\u003cV\u003elookup(value, VALUE);\r\n}"
      },
      {
        "name": "TreeBidiMap#doRedBlackDelete(...1)",
        "body": "{\r\n    for (final DataElement dataElement : DataElement.values()) {\r\n        // if deleted node has both left and children, swap with\r\n        // the next greater node\r\n        if (deletedNode.getLeft(dataElement) !\u003d null \u0026\u0026 deletedNode.getRight(dataElement) !\u003d null) {\r\n            swapPosition(nextGreater(deletedNode, dataElement), deletedNode, dataElement);\r\n        }\r\n        final Node\u003cK, V\u003e replacement \u003d deletedNode.getLeft(dataElement) !\u003d null ? deletedNode.getLeft(dataElement) : deletedNode.getRight(dataElement);\r\n        if (replacement !\u003d null) {\r\n            replacement.setParent(deletedNode.getParent(dataElement), dataElement);\r\n            if (deletedNode.getParent(dataElement) \u003d\u003d null) {\r\n                rootNode[dataElement.ordinal()] \u003d replacement;\r\n            } else if (deletedNode \u003d\u003d deletedNode.getParent(dataElement).getLeft(dataElement)) {\r\n                deletedNode.getParent(dataElement).setLeft(replacement, dataElement);\r\n            } else {\r\n                deletedNode.getParent(dataElement).setRight(replacement, dataElement);\r\n            }\r\n            deletedNode.setLeft(null, dataElement);\r\n            deletedNode.setRight(null, dataElement);\r\n            deletedNode.setParent(null, dataElement);\r\n            if (isBlack(deletedNode, dataElement)) {\r\n                doRedBlackDeleteFixup(replacement, dataElement);\r\n            }\r\n        } else if (deletedNode.getParent(dataElement) \u003d\u003d null) {\r\n            // replacement is null\r\n            // empty tree\r\n            rootNode[dataElement.ordinal()] \u003d null;\r\n        } else {\r\n            // deleted node had no children\r\n            if (isBlack(deletedNode, dataElement)) {\r\n                doRedBlackDeleteFixup(deletedNode, dataElement);\r\n            }\r\n            if (deletedNode.getParent(dataElement) !\u003d null) {\r\n                if (deletedNode \u003d\u003d deletedNode.getParent(dataElement).getLeft(dataElement)) {\r\n                    deletedNode.getParent(dataElement).setLeft(null, dataElement);\r\n                } else {\r\n                    deletedNode.getParent(dataElement).setRight(null, dataElement);\r\n                }\r\n                deletedNode.setParent(null, dataElement);\r\n            }\r\n        }\r\n    }\r\n    shrink();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "doToString",
    "signature": "java.lang.String doToString(org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 14,
    "edges": 17,
    "cc": 5,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B3 : If(z1 \u003d\u003d 0) → B4 | else → B13",
      "B4 : If($r5 !\u003d r0) → B5 | else → B6",
      "B7 : If($r6 !\u003d r0) → B8 | else → B9",
      "B10 : If($z0 \u003d\u003d 0) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  TreeBidiMap$DataElement\n  $i0 \u003d TreeBidiMap: int nodeCount\u003e\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d StringBuilder\n  $i1 \u003d TreeBidiMap: int nodeCount\u003e\n  $i2 \u003d $i1 * 32\n  new StringBuilder($i2)\n  $r1.append(123)\n  $r3 \u003d r0.getMapIterator(r2)\n  z1 \u003d $r3.hasNext()\n}",
      "B3 {\n  if (z1 \u003d\u003d 0) goto B4 else B13\n}",
      "B4 {\n  $r5 \u003d $r3.next()\n  $r6 \u003d $r3.getValue()\n  if ($r5 !\u003d r0) goto B5 else B6\n}",
      "B5 {\n  $r9 \u003d \"(this Map)\"\n  goto B7\n}",
      "B6 {\n  $r9 \u003d $r5\n}",
      "B7 {\n  $r7 \u003d $r1.append($r9)\n  $r8 \u003d $r7.append(61)\n  if ($r6 !\u003d r0) goto B8 else B9\n}",
      "B8 {\n  $r10 \u003d \"(this Map)\"\n  goto B10\n}",
      "B9 {\n  $r10 \u003d $r6\n}",
      "B10 {\n  $r8.append($r10)\n  $z0 \u003d $r3.hasNext()\n  z1 \u003d $z0\n  if ($z0 \u003d\u003d 0) goto B11 else B12\n}",
      "B11 {\n  $r1.append(\", \")\n}",
      "B12 {\n  goto B3\n}",
      "B13 {\n  $r1.append(125)\n  $r4 \u003d $r1.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B13",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B3",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "entrySet",
    "signature": "java.util.Set entrySet()",
    "visibility": "public",
    "body": "{\r\n    if (entrySet \u003d\u003d null) {\r\n        entrySet \u003d new EntryView();\r\n    }\r\n    return entrySet;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  $r1 \u003d Set entrySet\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d TreeBidiMap$EntryView\n  new TreeBidiMap$EntryView(r0)\n  Set entrySet\u003e \u003d $r3\n}",
      "B2 {\n  $r2 \u003d Set entrySet\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "firstKey",
    "signature": "java.lang.Comparable firstKey()",
    "visibility": "public",
    "body": "{\r\n    if (nodeCount \u003d\u003d 0) {\r\n        throw new NoSuchElementException(\"Map is empty\");\r\n    }\r\n    return leastNode(rootNode[KEY.ordinal()], KEY).getKey();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  $i0 \u003d TreeBidiMap: int nodeCount\u003e\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d NoSuchElementException\n  new NoSuchElementException(\"Map is empty\")\n  throw $r7\n}",
      "B2 {\n  $r2 \u003d TreeBidiMap$Node[] rootNode\u003e\n  $r1 \u003d TreeBidiMap$DataElement KEY\u003e\n  $i1 \u003d $r1.ordinal()\n  $r4 \u003d $r2[$i1]\n  $r3 \u003d TreeBidiMap$DataElement KEY\u003e\n  $r5 \u003d r0.leastNode($r4, $r3)\n  $r6 \u003d $r5.getKey()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeBidiMap#leastNode(...2)",
        "body": "{\r\n    Node\u003cK, V\u003e rval \u003d node;\r\n    if (rval !\u003d null) {\r\n        while (rval.getLeft(dataElement) !\u003d null) {\r\n            rval \u003d rval.getLeft(dataElement);\r\n        }\r\n    }\r\n    return rval;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "get",
    "signature": "java.lang.Comparable get(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    checkKey(key);\r\n    final Node\u003cK, V\u003e node \u003d lookupKey(key);\r\n    return node \u003d\u003d null ? null : node.getValue();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  Object\n  TreeBidiMap.checkKey(r0)\n  $r2 \u003d r1.lookupKey(r0)\n  if ($r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d null\n  goto B3\n}",
      "B2 {\n  $r3 \u003d $r2.getValue()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeBidiMap#checkKey(...1)",
        "body": "{\r\n    checkNonNullComparable(key, KEY);\r\n}"
      },
      {
        "name": "TreeBidiMap#lookupKey(...1)",
        "body": "{\r\n    return this.\u003cK\u003elookup(key, KEY);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "getKey",
    "signature": "java.lang.Comparable getKey(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    checkValue(value);\r\n    final Node\u003cK, V\u003e node \u003d lookupValue(value);\r\n    return node \u003d\u003d null ? null : node.getKey();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  Object\n  TreeBidiMap.checkValue(r0)\n  $r2 \u003d r1.lookupValue(r0)\n  if ($r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d null\n  goto B3\n}",
      "B2 {\n  $r3 \u003d $r2.getKey()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeBidiMap#lookupValue(...1)",
        "body": "{\r\n    return this.\u003cV\u003elookup(value, VALUE);\r\n}"
      },
      {
        "name": "TreeBidiMap#checkValue(...1)",
        "body": "{\r\n    checkNonNullComparable(value, VALUE);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "getLeftChild",
    "signature": "org.apache.commons.collections4.bidimap.TreeBidiMap$Node getLeftChild(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  TreeBidiMap$Node\n  TreeBidiMap$DataElement\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d null\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0.getLeft(r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "getMapIterator",
    "signature": "org.apache.commons.collections4.MapIterator getMapIterator(org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 3,
    "cc": 1,
    "flowSummary": [
      "B0 : If(switch-on $i1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  TreeBidiMap$DataElement\n  $r1 \u003d TreeBidiMap$1: int[] $SwitchMap$org$apache$commons$collections4$bidimap$TreeBidiMap$DataElement\u003e\n  $i0 \u003d r0.ordinal()\n  $i1 \u003d $r1[$i0]\n  IllegalArgumentException; }\n}",
      "B1 {\n  $r5 \u003d TreeBidiMap$ViewMapIterator\n  $r6 \u003d TreeBidiMap$DataElement KEY\u003e\n  new TreeBidiMap$ViewMapIterator(r3, $r6)\n  return\n}",
      "B2 {\n  $r2 \u003d TreeBidiMap$InverseViewMapIterator\n  $r4 \u003d TreeBidiMap$DataElement VALUE\u003e\n  new TreeBidiMap$InverseViewMapIterator(r3, $r4)\n  return\n}",
      "B3 {\n  $r7 \u003d IllegalArgumentException\n  new IllegalArgumentException()\n  throw $r7\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "getParent",
    "signature": "org.apache.commons.collections4.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  TreeBidiMap$Node\n  TreeBidiMap$DataElement\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d null\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0.getParent(r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "getRightChild",
    "signature": "org.apache.commons.collections4.bidimap.TreeBidiMap$Node getRightChild(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  TreeBidiMap$Node\n  TreeBidiMap$DataElement\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d null\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0.getRight(r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "greatestNode",
    "signature": "org.apache.commons.collections4.bidimap.TreeBidiMap$Node greatestNode(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($r2 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  TreeBidiMap$Node\n  TreeBidiMap$DataElement\n  r4 \u003d r0\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d r4.getRight(r1)\n  if ($r2 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  r4 \u003d r4.getRight(r1)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "insertValue",
    "signature": "void insertValue(org.apache.commons.collections4.bidimap.TreeBidiMap$Node)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B1 : If($i1 !\u003d 0) → B2 | else → B3",
      "B3 : If($i1 \u003e\u003d 0) → B4 | else → B7",
      "B4 : If($r13 !\u003d null) → B5 | else → B6",
      "B7 : If($r7 !\u003d null) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  TreeBidiMap$Node\n  $r2 \u003d TreeBidiMap$Node[] rootNode\u003e\n  $r1 \u003d TreeBidiMap$DataElement VALUE\u003e\n  $i0 \u003d $r1.ordinal()\n  r23 \u003d $r2[$i0]\n}",
      "B1 {\n  $r4 \u003d r3.getValue()\n  $r5 \u003d r23.getValue()\n  $i1 \u003d TreeBidiMap.compare($r4, $r5)\n  if ($i1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r18 \u003d IllegalArgumentException\n  $r19 \u003d TreeBidiMap$DataElement VALUE\u003e\n  $r20 \u003d r3.getData($r19)\n  $r21 \u003d String.valueOf($r20)\n  $r22 \u003d dynInvoke makeConcatWithConstants($r21)\n  new IllegalArgumentException($r22)\n  throw $r18\n}",
      "B3 {\n  if ($i1 \u003e\u003d 0) goto B4 else B7\n}",
      "B4 {\n  $r12 \u003d TreeBidiMap$DataElement VALUE\u003e\n  $r13 \u003d r23.getLeft($r12)\n  if ($r13 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r15 \u003d TreeBidiMap$DataElement VALUE\u003e\n  r23.setLeft(r3, $r15)\n  $r16 \u003d TreeBidiMap$DataElement VALUE\u003e\n  r3.setParent(r23, $r16)\n  $r17 \u003d TreeBidiMap$DataElement VALUE\u003e\n  r0.doRedBlackInsert(r3, $r17)\n  goto B11\n}",
      "B6 {\n  $r14 \u003d TreeBidiMap$DataElement VALUE\u003e\n  r23 \u003d r23.getLeft($r14)\n  goto B10\n}",
      "B7 {\n  $r6 \u003d TreeBidiMap$DataElement VALUE\u003e\n  $r7 \u003d r23.getRight($r6)\n  if ($r7 !\u003d null) goto B8 else B9\n}",
      "B8 {\n  $r9 \u003d TreeBidiMap$DataElement VALUE\u003e\n  r23.setRight(r3, $r9)\n  $r10 \u003d TreeBidiMap$DataElement VALUE\u003e\n  r3.setParent(r23, $r10)\n  $r11 \u003d TreeBidiMap$DataElement VALUE\u003e\n  r0.doRedBlackInsert(r3, $r11)\n  goto B11\n}",
      "B9 {\n  $r8 \u003d TreeBidiMap$DataElement VALUE\u003e\n  r23 \u003d r23.getRight($r8)\n}",
      "B10 {\n  goto B1\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B11",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B10 --\u003e B1",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "inverseBidiMap",
    "signature": "org.apache.commons.collections4.OrderedBidiMap inverseBidiMap()",
    "visibility": "public",
    "body": "{\r\n    if (inverse \u003d\u003d null) {\r\n        inverse \u003d new Inverse();\r\n    }\r\n    return inverse;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  $r1 \u003d TreeBidiMap$Inverse inverse\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d TreeBidiMap$Inverse\n  new TreeBidiMap$Inverse(r0)\n  TreeBidiMap$Inverse inverse\u003e \u003d $r3\n}",
      "B2 {\n  $r2 \u003d TreeBidiMap$Inverse inverse\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty()",
    "visibility": "public",
    "body": "{\r\n    return nodeCount \u003d\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  $i0 \u003d TreeBidiMap: int nodeCount\u003e\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "keySet",
    "signature": "java.util.Set keySet()",
    "visibility": "public",
    "body": "{\r\n    if (keySet \u003d\u003d null) {\r\n        keySet \u003d new KeyView(KEY);\r\n    }\r\n    return keySet;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  $r1 \u003d Set keySet\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d TreeBidiMap$KeyView\n  $r4 \u003d TreeBidiMap$DataElement KEY\u003e\n  new TreeBidiMap$KeyView(r0, $r4)\n  Set keySet\u003e \u003d $r3\n}",
      "B2 {\n  $r2 \u003d Set keySet\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "lastKey",
    "signature": "java.lang.Comparable lastKey()",
    "visibility": "public",
    "body": "{\r\n    if (nodeCount \u003d\u003d 0) {\r\n        throw new NoSuchElementException(\"Map is empty\");\r\n    }\r\n    return greatestNode(rootNode[KEY.ordinal()], KEY).getKey();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  $i0 \u003d TreeBidiMap: int nodeCount\u003e\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d NoSuchElementException\n  new NoSuchElementException(\"Map is empty\")\n  throw $r7\n}",
      "B2 {\n  $r2 \u003d TreeBidiMap$Node[] rootNode\u003e\n  $r1 \u003d TreeBidiMap$DataElement KEY\u003e\n  $i1 \u003d $r1.ordinal()\n  $r4 \u003d $r2[$i1]\n  $r3 \u003d TreeBidiMap$DataElement KEY\u003e\n  $r5 \u003d r0.greatestNode($r4, $r3)\n  $r6 \u003d $r5.getKey()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeBidiMap#greatestNode(...2)",
        "body": "{\r\n    Node\u003cK, V\u003e rval \u003d node;\r\n    if (rval !\u003d null) {\r\n        while (rval.getRight(dataElement) !\u003d null) {\r\n            rval \u003d rval.getRight(dataElement);\r\n        }\r\n    }\r\n    return rval;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "leastNode",
    "signature": "org.apache.commons.collections4.bidimap.TreeBidiMap$Node leastNode(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($r2 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  TreeBidiMap$Node\n  TreeBidiMap$DataElement\n  r4 \u003d r0\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d r4.getLeft(r1)\n  if ($r2 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  r4 \u003d r4.getLeft(r1)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "lookup",
    "signature": "org.apache.commons.collections4.bidimap.TreeBidiMap$Node lookup(java.lang.Object,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B1 : If(r8 \u003d\u003d null) → B2 | else → B8",
      "B2 : If($i1 !\u003d 0) → B3 | else → B4",
      "B4 : If($i1 \u003e\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  Object\n  TreeBidiMap$DataElement\n  r7 \u003d null\n  $r2 \u003d TreeBidiMap$Node[] rootNode\u003e\n  $i0 \u003d r1.ordinal()\n  r8 \u003d $r2[$i0]\n}",
      "B1 {\n  if (r8 \u003d\u003d null) goto B2 else B8\n}",
      "B2 {\n  $r4 \u003d Comparable) r3\n  $r5 \u003d r8.getData(r1)\n  $r6 \u003d Comparable) $r5\n  $i1 \u003d TreeBidiMap.compare($r4, $r6)\n  if ($i1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  r7 \u003d r8\n  goto B8\n}",
      "B4 {\n  if ($i1 \u003e\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r9 \u003d r8.getLeft(r1)\n  goto B7\n}",
      "B6 {\n  $r9 \u003d r8.getRight(r1)\n}",
      "B7 {\n  r8 \u003d $r9\n  goto B1\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B1",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "mapIterator",
    "signature": "org.apache.commons.collections4.OrderedMapIterator mapIterator()",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty()) {\r\n        return EmptyOrderedMapIterator.\u003cK, V\u003eemptyOrderedMapIterator();\r\n    }\r\n    return new ViewMapIterator(KEY);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d EmptyOrderedMapIterator.emptyOrderedMapIterator()\n  return\n}",
      "B2 {\n  $r1 \u003d TreeBidiMap$ViewMapIterator\n  $r2 \u003d TreeBidiMap$DataElement KEY\u003e\n  new TreeBidiMap$ViewMapIterator(r0, $r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeBidiMap#isEmpty(...0)",
        "body": "{\r\n    return nodeCount \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "nextGreater",
    "signature": "org.apache.commons.collections4.bidimap.TreeBidiMap$Node nextGreater(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 10,
    "edges": 13,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($r2 \u003d\u003d null) → B3 | else → B4",
      "B5 : If(r7 \u003d\u003d null) → B6 | else → B8",
      "B6 : If(r8 !\u003d $r3) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  TreeBidiMap$Node\n  TreeBidiMap$DataElement\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r6 \u003d null\n  goto B9\n}",
      "B2 {\n  $r2 \u003d r0.getRight(r1)\n  if ($r2 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d r0.getRight(r1)\n  r6 \u003d r4.leastNode($r5, r1)\n  goto B9\n}",
      "B4 {\n  r7 \u003d r0.getParent(r1)\n  r8 \u003d r0\n}",
      "B5 {\n  if (r7 \u003d\u003d null) goto B6 else B8\n}",
      "B6 {\n  $r3 \u003d r7.getRight(r1)\n  if (r8 !\u003d $r3) goto B7 else B8\n}",
      "B7 {\n  r8 \u003d r7\n  r7 \u003d r7.getParent(r1)\n  goto B5\n}",
      "B8 {\n  r6 \u003d r7\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B9",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B5",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "nextKey",
    "signature": "java.lang.Comparable nextKey(java.lang.Comparable)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  Comparable\n  TreeBidiMap.checkKey(r0)\n  $r2 \u003d r1.lookupKey(r0)\n  $r3 \u003d TreeBidiMap$DataElement KEY\u003e\n  $r4 \u003d r1.nextGreater($r2, $r3)\n  if ($r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d null\n  goto B3\n}",
      "B2 {\n  $r5 \u003d $r4.getKey()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "nextSmaller",
    "signature": "org.apache.commons.collections4.bidimap.TreeBidiMap$Node nextSmaller(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 10,
    "edges": 13,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($r2 \u003d\u003d null) → B3 | else → B4",
      "B5 : If(r7 \u003d\u003d null) → B6 | else → B8",
      "B6 : If(r8 !\u003d $r3) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  TreeBidiMap$Node\n  TreeBidiMap$DataElement\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r6 \u003d null\n  goto B9\n}",
      "B2 {\n  $r2 \u003d r0.getLeft(r1)\n  if ($r2 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d r0.getLeft(r1)\n  r6 \u003d r4.greatestNode($r5, r1)\n  goto B9\n}",
      "B4 {\n  r7 \u003d r0.getParent(r1)\n  r8 \u003d r0\n}",
      "B5 {\n  if (r7 \u003d\u003d null) goto B6 else B8\n}",
      "B6 {\n  $r3 \u003d r7.getLeft(r1)\n  if (r8 !\u003d $r3) goto B7 else B8\n}",
      "B7 {\n  r8 \u003d r7\n  r7 \u003d r7.getParent(r1)\n  goto B5\n}",
      "B8 {\n  r6 \u003d r7\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B9",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B5",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "previousKey",
    "signature": "java.lang.Comparable previousKey(java.lang.Comparable)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  Comparable\n  TreeBidiMap.checkKey(r0)\n  $r2 \u003d r1.lookupKey(r0)\n  $r3 \u003d TreeBidiMap$DataElement KEY\u003e\n  $r4 \u003d r1.nextSmaller($r2, $r3)\n  if ($r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d null\n  goto B3\n}",
      "B2 {\n  $r5 \u003d $r4.getKey()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "putAll",
    "signature": "void putAll(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    for (final Map.Entry\u003c? extends K, ? extends V\u003e e : map.entrySet()) {\r\n        put(e.getKey(), e.getValue());\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  Map\n  $r1 \u003d r0.entrySet()\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r4 \u003d Map$Entry) $r3\n  $r6 \u003d r4.getKey()\n  $r7 \u003d Comparable) $r6\n  $r8 \u003d r4.getValue()\n  $r9 \u003d Comparable) $r8\n  r5.put($r7, $r9)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeBidiMap#put(...2)",
        "body": "{\r\n    final V result \u003d get(key);\r\n    doPut(key, value);\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "readObject",
    "signature": "void readObject(java.io.ObjectInputStream)",
    "visibility": "private",
    "body": "{\r\n    stream.defaultReadObject();\r\n    rootNode \u003d new Node[2];\r\n    final int size \u003d stream.readInt();\r\n    for (int i \u003d 0; i \u003c size; i++) {\r\n        final K k \u003d (K) stream.readObject();\r\n        final V v \u003d (V) stream.readObject();\r\n        put(k, v);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d $i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  ObjectInputStream\n  r0.defaultReadObject()\n  $r2 \u003d TreeBidiMap$Node)[2]\n  TreeBidiMap$Node[] rootNode\u003e \u003d $r2\n  $i0 \u003d r0.readInt()\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d $i0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d r0.readObject()\n  r4 \u003d Comparable) $r3\n  $r5 \u003d r0.readObject()\n  r6 \u003d Comparable) $r5\n  r1.put(r4, r6)\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeBidiMap#put(...2)",
        "body": "{\r\n    final V result \u003d get(key);\r\n    doPut(key, value);\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "rotateLeft",
    "signature": "void rotateLeft(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r4 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r6 !\u003d null) → B3 | else → B4",
      "B4 : If($r8 !\u003d r0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  TreeBidiMap$Node\n  TreeBidiMap$DataElement\n  $r2 \u003d r0.getRight(r1)\n  $r3 \u003d $r2.getLeft(r1)\n  r0.setRight($r3, r1)\n  $r4 \u003d $r2.getLeft(r1)\n  if ($r4 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r13 \u003d $r2.getLeft(r1)\n  $r13.setParent(r0, r1)\n}",
      "B2 {\n  $r5 \u003d r0.getParent(r1)\n  $r2.setParent($r5, r1)\n  $r6 \u003d r0.getParent(r1)\n  if ($r6 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r12 \u003d TreeBidiMap$Node[] rootNode\u003e\n  $i0 \u003d r1.ordinal()\n  $r12[$i0] \u003d $r2\n  goto B7\n}",
      "B4 {\n  $r7 \u003d r0.getParent(r1)\n  $r8 \u003d $r7.getLeft(r1)\n  if ($r8 !\u003d r0) goto B5 else B6\n}",
      "B5 {\n  $r10 \u003d r0.getParent(r1)\n  $r10.setLeft($r2, r1)\n  goto B7\n}",
      "B6 {\n  $r9 \u003d r0.getParent(r1)\n  $r9.setRight($r2, r1)\n}",
      "B7 {\n  $r2.setLeft(r0, r1)\n  r0.setParent($r2, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "rotateRight",
    "signature": "void rotateRight(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r4 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r6 !\u003d null) → B3 | else → B4",
      "B4 : If($r8 !\u003d r0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  TreeBidiMap$Node\n  TreeBidiMap$DataElement\n  $r2 \u003d r0.getLeft(r1)\n  $r3 \u003d $r2.getRight(r1)\n  r0.setLeft($r3, r1)\n  $r4 \u003d $r2.getRight(r1)\n  if ($r4 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r13 \u003d $r2.getRight(r1)\n  $r13.setParent(r0, r1)\n}",
      "B2 {\n  $r5 \u003d r0.getParent(r1)\n  $r2.setParent($r5, r1)\n  $r6 \u003d r0.getParent(r1)\n  if ($r6 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r12 \u003d TreeBidiMap$Node[] rootNode\u003e\n  $i0 \u003d r1.ordinal()\n  $r12[$i0] \u003d $r2\n  goto B7\n}",
      "B4 {\n  $r7 \u003d r0.getParent(r1)\n  $r8 \u003d $r7.getRight(r1)\n  if ($r8 !\u003d r0) goto B5 else B6\n}",
      "B5 {\n  $r10 \u003d r0.getParent(r1)\n  $r10.setRight($r2, r1)\n  goto B7\n}",
      "B6 {\n  $r9 \u003d r0.getParent(r1)\n  $r9.setLeft($r2, r1)\n}",
      "B7 {\n  $r2.setRight(r0, r1)\n  r0.setParent($r2, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "swapPosition",
    "signature": "void swapPosition(org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$Node,org.apache.commons.collections4.bidimap.TreeBidiMap$DataElement)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 39,
    "edges": 56,
    "cc": 19,
    "flowSummary": [
      "B0 : If($r9 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r0 !\u003d $r27) → B2 | else → B3",
      "B4 : If($r28 \u003d\u003d null) → B5 | else → B7",
      "B5 : If(r5 !\u003d $r25) → B6 | else → B7",
      "B8 : If(r0 !\u003d $r6) → B9 | else → B12",
      "B9 : If($z3 \u003d\u003d 0) → B10 | else → B11",
      "B12 : If($r6 \u003d\u003d null) → B13 | else → B16",
      "B13 : If($z4 \u003d\u003d 0) → B14 | else → B15",
      "B17 : If(r5 !\u003d $r2) → B18 | else → B21",
      "B18 : If(z0 \u003d\u003d 0) → B19 | else → B20",
      "B21 : If($r2 \u003d\u003d null) → B22 | else → B25",
      "B22 : If(z0 \u003d\u003d 0) → B23 | else → B24",
      "B26 : If($r29 \u003d\u003d null) → B27 | else → B28",
      "B28 : If($r10 \u003d\u003d null) → B29 | else → B30",
      "B30 : If($r11 \u003d\u003d null) → B31 | else → B32",
      "B32 : If($r12 \u003d\u003d null) → B33 | else → B34",
      "B34 : If($r15 !\u003d r0) → B35 | else → B36",
      "B36 : If($r17 !\u003d r5) → B37 | else → B38"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  TreeBidiMap$Node\n  TreeBidiMap$Node\n  TreeBidiMap$DataElement\n  $r2 \u003d r0.getParent(r1)\n  $r3 \u003d r0.getLeft(r1)\n  $r4 \u003d r0.getRight(r1)\n  $r6 \u003d r5.getParent(r1)\n  $r7 \u003d r5.getLeft(r1)\n  $r8 \u003d r5.getRight(r1)\n  $r9 \u003d r0.getParent(r1)\n  if ($r9 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r26 \u003d r0.getParent(r1)\n  $r27 \u003d $r26.getLeft(r1)\n  if (r0 !\u003d $r27) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  z0 \u003d $z1\n  $r28 \u003d r5.getParent(r1)\n  if ($r28 \u003d\u003d null) goto B5 else B7\n}",
      "B5 {\n  $r24 \u003d r5.getParent(r1)\n  $r25 \u003d $r24.getLeft(r1)\n  if (r5 !\u003d $r25) goto B6 else B7\n}",
      "B6 {\n  $z4 \u003d 1\n  $z3 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z4 \u003d 0\n  $z3 \u003d 0\n}",
      "B8 {\n  if (r0 !\u003d $r6) goto B9 else B12\n}",
      "B9 {\n  r0.setParent(r5, r1)\n  if ($z3 \u003d\u003d 0) goto B10 else B11\n}",
      "B10 {\n  r5.setLeft(r0, r1)\n  r5.setRight($r4, r1)\n  goto B17\n}",
      "B11 {\n  r5.setRight(r0, r1)\n  r5.setLeft($r3, r1)\n  goto B17\n}",
      "B12 {\n  r0.setParent($r6, r1)\n  if ($r6 \u003d\u003d null) goto B13 else B16\n}",
      "B13 {\n  if ($z4 \u003d\u003d 0) goto B14 else B15\n}",
      "B14 {\n  $r6.setLeft(r0, r1)\n  goto B16\n}",
      "B15 {\n  $r6.setRight(r0, r1)\n}",
      "B16 {\n  r5.setLeft($r3, r1)\n  r5.setRight($r4, r1)\n}",
      "B17 {\n  if (r5 !\u003d $r2) goto B18 else B21\n}",
      "B18 {\n  r5.setParent(r0, r1)\n  if (z0 \u003d\u003d 0) goto B19 else B20\n}",
      "B19 {\n  r0.setLeft(r5, r1)\n  r0.setRight($r8, r1)\n  goto B26\n}",
      "B20 {\n  r0.setRight(r5, r1)\n  r0.setLeft($r7, r1)\n  goto B26\n}",
      "B21 {\n  r5.setParent($r2, r1)\n  if ($r2 \u003d\u003d null) goto B22 else B25\n}",
      "B22 {\n  if (z0 \u003d\u003d 0) goto B23 else B24\n}",
      "B23 {\n  $r2.setLeft(r5, r1)\n  goto B25\n}",
      "B24 {\n  $r2.setRight(r5, r1)\n}",
      "B25 {\n  r0.setLeft($r7, r1)\n  r0.setRight($r8, r1)\n}",
      "B26 {\n  $r29 \u003d r0.getLeft(r1)\n  if ($r29 \u003d\u003d null) goto B27 else B28\n}",
      "B27 {\n  $r23 \u003d r0.getLeft(r1)\n  $r23.setParent(r0, r1)\n}",
      "B28 {\n  $r10 \u003d r0.getRight(r1)\n  if ($r10 \u003d\u003d null) goto B29 else B30\n}",
      "B29 {\n  $r22 \u003d r0.getRight(r1)\n  $r22.setParent(r0, r1)\n}",
      "B30 {\n  $r11 \u003d r5.getLeft(r1)\n  if ($r11 \u003d\u003d null) goto B31 else B32\n}",
      "B31 {\n  $r21 \u003d r5.getLeft(r1)\n  $r21.setParent(r5, r1)\n}",
      "B32 {\n  $r12 \u003d r5.getRight(r1)\n  if ($r12 \u003d\u003d null) goto B33 else B34\n}",
      "B33 {\n  $r20 \u003d r5.getRight(r1)\n  $r20.setParent(r5, r1)\n}",
      "B34 {\n  r0.swapColors(r5, r1)\n  $r14 \u003d TreeBidiMap$Node[] rootNode\u003e\n  $i0 \u003d r1.ordinal()\n  $r15 \u003d $r14[$i0]\n  if ($r15 !\u003d r0) goto B35 else B36\n}",
      "B35 {\n  $r19 \u003d TreeBidiMap$Node[] rootNode\u003e\n  $i3 \u003d r1.ordinal()\n  $r19[$i3] \u003d r5\n  goto B38\n}",
      "B36 {\n  $r16 \u003d TreeBidiMap$Node[] rootNode\u003e\n  $i1 \u003d r1.ordinal()\n  $r17 \u003d $r16[$i1]\n  if ($r17 !\u003d r5) goto B37 else B38\n}",
      "B37 {\n  $r18 \u003d TreeBidiMap$Node[] rootNode\u003e\n  $i2 \u003d r1.ordinal()\n  $r18[$i2] \u003d r0\n}",
      "B38 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B12",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B17",
      "B11 --\u003e B17",
      "B12 --\u003e B13",
      "B12 --\u003e B16",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B17",
      "B17 --\u003e B18",
      "B17 --\u003e B21",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B26",
      "B20 --\u003e B26",
      "B21 --\u003e B22",
      "B21 --\u003e B25",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B25",
      "B25 --\u003e B26",
      "B26 --\u003e B27",
      "B26 --\u003e B28",
      "B27 --\u003e B28",
      "B28 --\u003e B29",
      "B28 --\u003e B30",
      "B29 --\u003e B30",
      "B30 --\u003e B31",
      "B30 --\u003e B32",
      "B31 --\u003e B32",
      "B32 --\u003e B33",
      "B32 --\u003e B34",
      "B33 --\u003e B34",
      "B34 --\u003e B35",
      "B34 --\u003e B36",
      "B35 --\u003e B38",
      "B36 --\u003e B37",
      "B36 --\u003e B38",
      "B37 --\u003e B38",
      "B38 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "values",
    "signature": "java.util.Set values()",
    "visibility": "public",
    "body": "{\r\n    if (valuesSet \u003d\u003d null) {\r\n        valuesSet \u003d new ValueView(KEY);\r\n    }\r\n    return valuesSet;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  $r1 \u003d Set valuesSet\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d TreeBidiMap$ValueView\n  $r4 \u003d TreeBidiMap$DataElement KEY\u003e\n  new TreeBidiMap$ValueView(r0, $r4)\n  Set valuesSet\u003e \u003d $r3\n}",
      "B2 {\n  $r2 \u003d Set valuesSet\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.TreeBidiMap",
    "methodName": "writeObject",
    "signature": "void writeObject(java.io.ObjectOutputStream)",
    "visibility": "private",
    "body": "{\r\n    out.defaultWriteObject();\r\n    out.writeInt(this.size());\r\n    for (final Entry\u003cK, V\u003e entry : entrySet()) {\r\n        out.writeObject(entry.getKey());\r\n        out.writeObject(entry.getValue());\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TreeBidiMap\n  ObjectOutputStream\n  r0.defaultWriteObject()\n  $i0 \u003d r1.size()\n  r0.writeInt($i0)\n  $r2 \u003d r1.entrySet()\n  $r3 \u003d $r2.iterator()\n}",
      "B1 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d $r3.next()\n  r5 \u003d Map$Entry) $r4\n  $r6 \u003d r5.getKey()\n  r0.writeObject($r6)\n  $r7 \u003d r5.getValue()\n  r0.writeObject($r7)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeBidiMap#size(...0)",
        "body": "{\r\n    return nodeCount;\r\n}"
      },
      {
        "name": "TreeBidiMap#entrySet(...0)",
        "body": "{\r\n    if (entrySet \u003d\u003d null) {\r\n        entrySet \u003d new EntryView();\r\n    }\r\n    return entrySet;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.UnmodifiableBidiMap",
    "methodName": "unmodifiableBidiMap",
    "signature": "org.apache.commons.collections4.BidiMap unmodifiableBidiMap(org.apache.commons.collections4.BidiMap)",
    "visibility": "public",
    "body": "{\r\n    if (map instanceof Unmodifiable) {\r\n        // safe to upcast\r\n        @SuppressWarnings(\"unchecked\")\r\n        final BidiMap\u003cK, V\u003e tmpMap \u003d (BidiMap\u003cK, V\u003e) map;\r\n        return tmpMap;\r\n    }\r\n    return new UnmodifiableBidiMap\u003c\u003e(map);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BidiMap\n  $z0 \u003d Unmodifiable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableBidiMap\n  new UnmodifiableBidiMap(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.UnmodifiableBidiMap",
    "methodName": "inverseBidiMap",
    "signature": "org.apache.commons.collections4.BidiMap inverseBidiMap()",
    "visibility": "public",
    "body": "{\r\n    if (inverse \u003d\u003d null) {\r\n        inverse \u003d new UnmodifiableBidiMap\u003c\u003e(decorated().inverseBidiMap());\r\n        inverse.inverse \u003d this;\r\n    }\r\n    return inverse;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  UnmodifiableBidiMap\n  $r1 \u003d UnmodifiableBidiMap inverse\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d UnmodifiableBidiMap\n  $r4 \u003d r0.decorated()\n  $r5 \u003d $r4.inverseBidiMap()\n  new UnmodifiableBidiMap($r5)\n  UnmodifiableBidiMap inverse\u003e \u003d $r3\n  $r6 \u003d UnmodifiableBidiMap inverse\u003e\n  UnmodifiableBidiMap inverse\u003e \u003d r0\n}",
      "B2 {\n  $r2 \u003d UnmodifiableBidiMap inverse\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "UnmodifiableBidiMap#decorated(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMap",
    "methodName": "unmodifiableOrderedBidiMap",
    "signature": "org.apache.commons.collections4.OrderedBidiMap unmodifiableOrderedBidiMap(org.apache.commons.collections4.OrderedBidiMap)",
    "visibility": "public",
    "body": "{\r\n    if (map instanceof Unmodifiable) {\r\n        // safe to upcast\r\n        @SuppressWarnings(\"unchecked\")\r\n        final OrderedBidiMap\u003cK, V\u003e tmpMap \u003d (OrderedBidiMap\u003cK, V\u003e) map;\r\n        return tmpMap;\r\n    }\r\n    return new UnmodifiableOrderedBidiMap\u003c\u003e(map);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  OrderedBidiMap\n  $z0 \u003d Unmodifiable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableOrderedBidiMap\n  new UnmodifiableOrderedBidiMap(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMap",
    "methodName": "inverseOrderedBidiMap",
    "signature": "org.apache.commons.collections4.OrderedBidiMap inverseOrderedBidiMap()",
    "visibility": "public",
    "body": "{\r\n    if (inverse \u003d\u003d null) {\r\n        inverse \u003d new UnmodifiableOrderedBidiMap\u003c\u003e(decorated().inverseBidiMap());\r\n        inverse.inverse \u003d this;\r\n    }\r\n    return inverse;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  UnmodifiableOrderedBidiMap\n  $r1 \u003d UnmodifiableOrderedBidiMap inverse\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d UnmodifiableOrderedBidiMap\n  $r4 \u003d r0.decorated()\n  $r5 \u003d $r4.inverseBidiMap()\n  new UnmodifiableOrderedBidiMap($r5)\n  UnmodifiableOrderedBidiMap inverse\u003e \u003d $r3\n  $r6 \u003d UnmodifiableOrderedBidiMap inverse\u003e\n  UnmodifiableOrderedBidiMap inverse\u003e \u003d r0\n}",
      "B2 {\n  $r2 \u003d UnmodifiableOrderedBidiMap inverse\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "UnmodifiableOrderedBidiMap#decorated(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMap",
    "methodName": "unmodifiableSortedBidiMap",
    "signature": "org.apache.commons.collections4.SortedBidiMap unmodifiableSortedBidiMap(org.apache.commons.collections4.SortedBidiMap)",
    "visibility": "public",
    "body": "{\r\n    if (map instanceof Unmodifiable) {\r\n        // safe to upcast\r\n        @SuppressWarnings(\"unchecked\")\r\n        final SortedBidiMap\u003cK, V\u003e tmpMap \u003d (SortedBidiMap\u003cK, V\u003e) map;\r\n        return tmpMap;\r\n    }\r\n    return new UnmodifiableSortedBidiMap\u003c\u003e(map);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SortedBidiMap\n  $z0 \u003d Unmodifiable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableSortedBidiMap\n  new UnmodifiableSortedBidiMap(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMap",
    "methodName": "inverseBidiMap",
    "signature": "org.apache.commons.collections4.SortedBidiMap inverseBidiMap()",
    "visibility": "public",
    "body": "{\r\n    if (inverse \u003d\u003d null) {\r\n        inverse \u003d new UnmodifiableSortedBidiMap\u003c\u003e(decorated().inverseBidiMap());\r\n        inverse.inverse \u003d this;\r\n    }\r\n    return inverse;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  UnmodifiableSortedBidiMap\n  $r1 \u003d UnmodifiableSortedBidiMap inverse\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d UnmodifiableSortedBidiMap\n  $r4 \u003d r0.decorated()\n  $r5 \u003d $r4.inverseBidiMap()\n  new UnmodifiableSortedBidiMap($r5)\n  UnmodifiableSortedBidiMap inverse\u003e \u003d $r3\n  $r6 \u003d UnmodifiableSortedBidiMap inverse\u003e\n  UnmodifiableSortedBidiMap inverse\u003e \u003d r0\n}",
      "B2 {\n  $r2 \u003d UnmodifiableSortedBidiMap inverse\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "UnmodifiableSortedBidiMap#decorated(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter",
    "methodName": "add",
    "signature": "boolean add(int,int)",
    "visibility": "private",
    "body": "{\r\n    try {\r\n        final int updated \u003d cells[idx] + addend;\r\n        state |\u003d updated;\r\n        cells[idx] \u003d updated;\r\n        return true;\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        throw new IllegalArgumentException(String.format(\"Filter only accepts values in the [0,%d) range\", getShape().getNumberOfBits()), e);\r\n    }\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  ArrayCountingBloomFilter\n  i0 :\u003d @parameter0: int\n  i1 :\u003d @parameter1: int\n  $r1 \u003d ArrayCountingBloomFilter: int[] cells\u003e\n  $i2 \u003d $r1[i0]\n  i6 \u003d $i2 + i1\n  $i3 \u003d ArrayCountingBloomFilter: int state\u003e\n  $i4 \u003d $i3 | i6\n  ArrayCountingBloomFilter: int state\u003e \u003d $i4\n  $r2 \u003d ArrayCountingBloomFilter: int[] cells\u003e\n  $r2[i0] \u003d i6\n  return\n}",
      "B1 {\n  $r3 :\u003d @caughtexception\n  $r4 \u003d IllegalArgumentException\n  $r5 \u003d Object)[1]\n  $r6 \u003d r0.getShape()\n  $i5 \u003d $r6.getNumberOfBits()\n  $r7 \u003d Integer.valueOf($i5)\n  $r5[0] \u003d $r7\n  $r8 \u003d String.format(\"Filter only accepts values in the 0,%d) range\", $r5)\n  new IllegalArgumentException($r8, $r3)\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayCountingBloomFilter#getShape(...0)",
        "body": "{\r\n    return shape;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter",
    "methodName": "isValid",
    "signature": "boolean isValid()",
    "visibility": "public",
    "body": "{\r\n    return state \u003e\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayCountingBloomFilter\n  $i0 \u003d ArrayCountingBloomFilter: int state\u003e\n  if ($i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter",
    "methodName": "processBitMaps",
    "signature": "boolean processBitMaps(java.util.function.LongPredicate)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(consumer, \"consumer\");\r\n    final int blocksm1 \u003d BitMaps.numberOfBitMaps(cells.length) - 1;\r\n    int i \u003d 0;\r\n    long value;\r\n    // must break final block separate as the number of bits may not fall on the long boundary\r\n    for (int j \u003d 0; j \u003c blocksm1; j++) {\r\n        value \u003d 0;\r\n        for (int k \u003d 0; k \u003c Long.SIZE; k++) {\r\n            if (cells[i++] !\u003d 0) {\r\n                value |\u003d BitMaps.getLongBit(k);\r\n            }\r\n        }\r\n        if (!consumer.test(value)) {\r\n            return false;\r\n        }\r\n    }\r\n    // Final block\r\n    value \u003d 0;\r\n    for (int k \u003d 0; i \u003c cells.length; k++) {\r\n        if (cells[i++] !\u003d 0) {\r\n            value |\u003d BitMaps.getLongBit(k);\r\n        }\r\n    }\r\n    return consumer.test(value);\r\n}",
    "nodes": 16,
    "edges": 20,
    "cc": 6,
    "flowSummary": [
      "B1 : If(i11 \u003e\u003d i2) → B2 | else → B10",
      "B3 : If(i13 \u003e\u003d 64) → B4 | else → B7",
      "B4 : If($i8 \u003d\u003d 0) → B5 | else → B6",
      "B7 : If($z1 !\u003d 0) → B8 | else → B9",
      "B11 : If(i10 \u003e\u003d $i3) → B12 | else → B15",
      "B12 : If($i5 \u003d\u003d 0) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  ArrayCountingBloomFilter\n  LongPredicate\n  Objects.requireNonNull(r0, \"consumer\")\n  $r2 \u003d ArrayCountingBloomFilter: int[] cells\u003e\n  $i0 \u003d lengthof $r2\n  $i1 \u003d BitMaps.numberOfBitMaps($i0)\n  i2 \u003d $i1 - 1\n  i10 \u003d 0\n  i11 \u003d 0\n}",
      "B1 {\n  if (i11 \u003e\u003d i2) goto B2 else B10\n}",
      "B2 {\n  l12 \u003d 0L\n  i13 \u003d 0\n}",
      "B3 {\n  if (i13 \u003e\u003d 64) goto B4 else B7\n}",
      "B4 {\n  $r5 \u003d ArrayCountingBloomFilter: int[] cells\u003e\n  $i7 \u003d i10\n  i10 \u003d i10 + 1\n  $i8 \u003d $r5[$i7]\n  if ($i8 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $l9 \u003d BitMaps.getLongBit(i13)\n  l12 \u003d l12 | $l9\n}",
      "B6 {\n  i13 \u003d i13 + 1\n  goto B3\n}",
      "B7 {\n  $z1 \u003d r0.test(l12)\n  if ($z1 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  return\n}",
      "B9 {\n  i11 \u003d i11 + 1\n  goto B1\n}",
      "B10 {\n  l14 \u003d 0L\n  i15 \u003d 0\n}",
      "B11 {\n  $r3 \u003d ArrayCountingBloomFilter: int[] cells\u003e\n  $i3 \u003d lengthof $r3\n  if (i10 \u003e\u003d $i3) goto B12 else B15\n}",
      "B12 {\n  $r4 \u003d ArrayCountingBloomFilter: int[] cells\u003e\n  $i4 \u003d i10\n  i10 \u003d i10 + 1\n  $i5 \u003d $r4[$i4]\n  if ($i5 \u003d\u003d 0) goto B13 else B14\n}",
      "B13 {\n  $l6 \u003d BitMaps.getLongBit(i15)\n  l14 \u003d l14 | $l6\n}",
      "B14 {\n  i15 \u003d i15 + 1\n  goto B11\n}",
      "B15 {\n  $z0 \u003d r0.test(l14)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B10",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B3",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B1",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B11",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter",
    "methodName": "processCells",
    "signature": "boolean processCells(org.apache.commons.collections4.bloomfilter.CellExtractor$CellPredicate)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d $i0) → B2 | else → B6",
      "B2 : If($i1 \u003d\u003d 0) → B3 | else → B5",
      "B3 : If($z0 !\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ArrayCountingBloomFilter\n  CellExtractor$CellPredicate\n  Objects.requireNonNull(r0, \"consumer\")\n  i3 \u003d 0\n}",
      "B1 {\n  $r2 \u003d ArrayCountingBloomFilter: int[] cells\u003e\n  $i0 \u003d lengthof $r2\n  if (i3 \u003e\u003d $i0) goto B2 else B6\n}",
      "B2 {\n  $r3 \u003d ArrayCountingBloomFilter: int[] cells\u003e\n  $i1 \u003d $r3[i3]\n  if ($i1 \u003d\u003d 0) goto B3 else B5\n}",
      "B3 {\n  $r4 \u003d ArrayCountingBloomFilter: int[] cells\u003e\n  $i2 \u003d $r4[i3]\n  $z0 \u003d r0.test(i3, $i2)\n  if ($z0 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter",
    "methodName": "processIndices",
    "signature": "boolean processIndices(java.util.function.IntPredicate)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(consumer, \"consumer\");\r\n    for (int i \u003d 0; i \u003c cells.length; i++) {\r\n        if (cells[i] !\u003d 0 \u0026\u0026 !consumer.test(i)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d $i0) → B2 | else → B6",
      "B2 : If($i1 \u003d\u003d 0) → B3 | else → B5",
      "B3 : If($z0 !\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ArrayCountingBloomFilter\n  IntPredicate\n  Objects.requireNonNull(r0, \"consumer\")\n  i2 \u003d 0\n}",
      "B1 {\n  $r2 \u003d ArrayCountingBloomFilter: int[] cells\u003e\n  $i0 \u003d lengthof $r2\n  if (i2 \u003e\u003d $i0) goto B2 else B6\n}",
      "B2 {\n  $r3 \u003d ArrayCountingBloomFilter: int[] cells\u003e\n  $i1 \u003d $r3[i2]\n  if ($i1 \u003d\u003d 0) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.test(i2)\n  if ($z0 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  i2 \u003d i2 + 1\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter",
    "methodName": "subtract",
    "signature": "boolean subtract(int,int)",
    "visibility": "private",
    "body": "{\r\n    try {\r\n        final int updated \u003d cells[idx] - subtrahend;\r\n        state |\u003d updated;\r\n        cells[idx] \u003d updated;\r\n        return true;\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        throw new IllegalArgumentException(String.format(\"Filter only accepts values in the [0,%d) range\", getShape().getNumberOfBits()), e);\r\n    }\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  ArrayCountingBloomFilter\n  i0 :\u003d @parameter0: int\n  i1 :\u003d @parameter1: int\n  $r1 \u003d ArrayCountingBloomFilter: int[] cells\u003e\n  $i2 \u003d $r1[i0]\n  i6 \u003d $i2 - i1\n  $i3 \u003d ArrayCountingBloomFilter: int state\u003e\n  $i4 \u003d $i3 | i6\n  ArrayCountingBloomFilter: int state\u003e \u003d $i4\n  $r2 \u003d ArrayCountingBloomFilter: int[] cells\u003e\n  $r2[i0] \u003d i6\n  return\n}",
      "B1 {\n  $r3 :\u003d @caughtexception\n  $r4 \u003d IllegalArgumentException\n  $r5 \u003d Object)[1]\n  $r6 \u003d r0.getShape()\n  $i5 \u003d $r6.getNumberOfBits()\n  $r7 \u003d Integer.valueOf($i5)\n  $r5[0] \u003d $r7\n  $r8 \u003d String.format(\"Filter only accepts values in the 0,%d) range\", $r5)\n  new IllegalArgumentException($r8, $r3)\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayCountingBloomFilter#getShape(...0)",
        "body": "{\r\n    return shape;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.BitMaps",
    "methodName": "contains",
    "signature": "boolean contains(long[],int)",
    "visibility": "public",
    "body": "{\r\n    return (bitMaps[getLongIndex(bitIndex)] \u0026 getLongBit(bitIndex)) !\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($b5 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: long[]\n  i0 :\u003d @parameter1: int\n  $i1 \u003d BitMaps.getLongIndex(i0)\n  $l2 \u003d r0[$i1]\n  $l3 \u003d BitMaps.getLongBit(i0)\n  $l4 \u003d $l2 \u0026 $l3\n  $b5 \u003d $l4 cmp 0L\n  if ($b5 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BitMaps#getLongIndex(...1)",
        "body": "{\r\n    // An integer divide by 64 is equivalent to a shift of 6 bits if the integer is\r\n    // positive.\r\n    // We do not explicitly check for a negative here. Instead we use a\r\n    // signed shift. Any negative index will produce a negative value\r\n    // by sign-extension and if used as an index into an array it will throw an\r\n    // exception.\r\n    return bitIndex \u003e\u003e DIVIDE_BY_64;\r\n}"
      },
      {
        "name": "BitMaps#getLongBit(...1)",
        "body": "{\r\n    // Bit shifts only use the first 6 bits. Thus it is not necessary to mask this\r\n    // using 0x3f (63) or compute bitIndex % 64.\r\n    // Note: If the index is negative the shift will be (64 - (bitIndex \u0026 0x3f)) and\r\n    // this will identify an incorrect bit.\r\n    return 1L \u003c\u003c bitIndex;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.BitMaps",
    "methodName": "mod",
    "signature": "int mod(long,int)",
    "visibility": "public",
    "body": "{\r\n    // See Hacker\u0027s Delight (2nd ed), section 9.3.\r\n    // Assume divisor is positive.\r\n    // Divide half the unsigned number and then double the quotient result.\r\n    final long quotient \u003d (dividend \u003e\u003e\u003e 1) / divisor \u003c\u003c 1;\r\n    final long remainder \u003d dividend - quotient * divisor;\r\n    // remainder in [0, 2 * divisor)\r\n    return (int) (remainder \u003e\u003d divisor ? remainder - divisor : remainder);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i15 \u003c 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  l0 :\u003d @parameter0: long\n  i1 :\u003d @parameter1: int\n  $l3 \u003d l0 \u003e\u003e\u003e 1\n  $l2 \u003d (long) i1\n  $l4 \u003d $l3 / $l2\n  l5 \u003d $l4 \u003c\u003c 1\n  $l6 \u003d (long) i1\n  $l7 \u003d l5 * $l6\n  l8 \u003d l0 - $l7\n  $l9 \u003d (long) i1\n  $b10 \u003d l8 cmp $l9\n  $i15 \u003d (int) $b10\n  if ($i15 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $l12 \u003d (long) i1\n  $l14 \u003d l8 - $l12\n  $i13 \u003d (int) $l14\n  return\n}",
      "B2 {\n  $i11 \u003d (int) l8\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.EnhancedDoubleHasher",
    "methodName": "toLong",
    "signature": "long toLong(byte[],int,int)",
    "visibility": "private",
    "body": "{\r\n    long val \u003d 0;\r\n    int shift \u003d Long.SIZE;\r\n    final int end \u003d offset + Math.min(len, Long.BYTES);\r\n    for (int i \u003d offset; i \u003c end; i++) {\r\n        shift -\u003d Byte.SIZE;\r\n        val |\u003d (long) (byteArray[i] \u0026 0xFF) \u003c\u003c shift;\r\n    }\r\n    return val;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i10 \u003e\u003d i3) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  r0 :\u003d @parameter0: byte[]\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  l8 \u003d 0L\n  i9 \u003d 64\n  $i2 \u003d Math.min(i1, 8)\n  i3 \u003d i0 + $i2\n  i10 \u003d i0\n}",
      "B1 {\n  if (i10 \u003e\u003d i3) goto B2 else B3\n}",
      "B2 {\n  $i12 \u003d (int) -8\n  i9 \u003d i9 + $i12\n  $b4 \u003d r0[i10]\n  $s13 \u003d (short) $b4\n  $s5 \u003d $s13 \u0026 255\n  $l6 \u003d (long) $s5\n  $l7 \u003d $l6 \u003c\u003c i9\n  l8 \u003d l8 | $l7\n  i10 \u003d i10 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.IndexFilter",
    "methodName": "test",
    "signature": "boolean test(int)",
    "visibility": "public",
    "body": "{\r\n    if (number \u003e\u003d size) {\r\n        throw new IndexOutOfBoundsException(String.format(\"number too large %d \u003e\u003d %d\", number, size));\r\n    }\r\n    if (tracker.test(number)) {\r\n        return consumer.test(number);\r\n    }\r\n    return true;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 \u003c $i1) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  IndexFilter\n  i0 :\u003d @parameter0: int\n  $i1 \u003d IndexFilter: int size\u003e\n  if (i0 \u003c $i1) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IndexOutOfBoundsException\n  $r4 \u003d Object)[2]\n  $r5 \u003d Integer.valueOf(i0)\n  $r4[0] \u003d $r5\n  $i2 \u003d IndexFilter: int size\u003e\n  $r6 \u003d Integer.valueOf($i2)\n  $r4[1] \u003d $r6\n  $r7 \u003d String.format(\"number too large %d \u003e\u003d %d\", $r4)\n  new IndexOutOfBoundsException($r7)\n  throw $r3\n}",
      "B2 {\n  $r1 \u003d IntPredicate tracker\u003e\n  $z0 \u003d $r1.test(i0)\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d IntPredicate consumer\u003e\n  $z1 \u003d $r2.test(i0)\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.LayeredBloomFilter",
    "methodName": "contains",
    "signature": "boolean contains(org.apache.commons.collections4.bloomfilter.BloomFilter)",
    "visibility": "public",
    "body": "{\r\n    return other instanceof BloomFilterExtractor ? contains((BloomFilterExtractor) other) : !processBloomFilters(x -\u003e !x.contains(other));\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  LayeredBloomFilter\n  BloomFilter\n  $z0 \u003d BloomFilterExtractor\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d BloomFilterExtractor) r0\n  $z2 \u003d r1.contains($r3)\n  goto B5\n}",
      "B2 {\n  $r2 \u003d LayeredBloomFilter$lambda_contains_0__28.bootstrap$(r0)\n  $z1 \u003d r1.processBloomFilters($r2)\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $z2 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z2 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "LayeredBloomFilter#processBloomFilters(...1)",
        "body": "{\r\n    return layerManager.processBloomFilters(bloomFilterPredicate);\r\n}"
      },
      {
        "name": "LayeredBloomFilter#contains(...1)",
        "body": "{\r\n    return contains(createFilter(bitMapExtractor));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.LayerManager",
    "methodName": "cleanup",
    "signature": "void cleanup()",
    "visibility": "package",
    "body": "{\r\n    filterCleanup.accept(filters);\r\n    if (filters.isEmpty()) {\r\n        addFilter();\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  LayerManager\n  $r2 \u003d Consumer filterCleanup\u003e\n  $r1 \u003d LinkedList filters\u003e\n  $r2.accept($r1)\n  $r3 \u003d LinkedList filters\u003e\n  $z0 \u003d $r3.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.addFilter()\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "LayerManager#addFilter(...0)",
        "body": "{\r\n    filters.add(Objects.requireNonNull(filterSupplier.get(), \"filterSupplier.get() returned null.\"));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.LayerManager",
    "methodName": "copy",
    "signature": "org.apache.commons.collections4.bloomfilter.LayerManager copy()",
    "visibility": "public",
    "body": "{\r\n    final LayerManager\u003cT\u003e newMgr \u003d new LayerManager\u003c\u003e(filterSupplier, extendCheck, filterCleanup, false);\r\n    for (final T bf : filters) {\r\n        newMgr.filters.add(bf.copy());\r\n    }\r\n    return newMgr;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  LayerManager\n  $r0 \u003d LayerManager\n  $r4 \u003d Supplier filterSupplier\u003e\n  $r3 \u003d Predicate extendCheck\u003e\n  $r2 \u003d Consumer filterCleanup\u003e\n  new LayerManager($r4, $r3, $r2, 0)\n  $r5 \u003d LinkedList filters\u003e\n  $r6 \u003d $r5.iterator()\n}",
      "B1 {\n  $z0 \u003d $r6.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d $r6.next()\n  r8 \u003d BloomFilter) $r7\n  $r9 \u003d LinkedList filters\u003e\n  $r10 \u003d r8.copy()\n  $r9.add($r10)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.LayerManager",
    "methodName": "get",
    "signature": "org.apache.commons.collections4.bloomfilter.BloomFilter get(int)",
    "visibility": "public",
    "body": "{\r\n    if (depth \u003c 0 || depth \u003e\u003d filters.size()) {\r\n        throw new NoSuchElementException(String.format(\"Depth must be in the range [0,%s)\", filters.size()));\r\n    }\r\n    return filters.get(depth);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c 0) → B1 | else → B2",
      "B1 : If(i0 \u003c $i2) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  LayerManager\n  i0 :\u003d @parameter0: int\n  if (i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d LinkedList filters\u003e\n  $i2 \u003d $r6.size()\n  if (i0 \u003c $i2) goto B2 else B3\n}",
      "B2 {\n  $r0 \u003d NoSuchElementException\n  $r1 \u003d Object)[1]\n  $r3 \u003d LinkedList filters\u003e\n  $i1 \u003d $r3.size()\n  $r4 \u003d Integer.valueOf($i1)\n  $r1[0] \u003d $r4\n  $r5 \u003d String.format(\"Depth must be in the range 0,%s)\", $r1)\n  new NoSuchElementException($r5)\n  throw $r0\n}",
      "B3 {\n  $r7 \u003d LinkedList filters\u003e\n  $r8 \u003d $r7.get(i0)\n  $r9 \u003d BloomFilter) $r8\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.LayerManager",
    "methodName": "getTarget",
    "signature": "org.apache.commons.collections4.bloomfilter.BloomFilter getTarget()",
    "visibility": "public",
    "body": "{\r\n    if (extendCheck.test(this)) {\r\n        next();\r\n    }\r\n    return last();\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  LayerManager\n  $r1 \u003d Predicate extendCheck\u003e\n  $z0 \u003d $r1.test(r0)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.next()\n}",
      "B2 {\n  $r2 \u003d r0.last()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "LayerManager#next(...0)",
        "body": "{\r\n    filterCleanup.accept(filters);\r\n    addFilter();\r\n}"
      },
      {
        "name": "LayerManager#last(...0)",
        "body": "{\r\n    return filters.getLast();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.SetOperations",
    "methodName": "cosineSimilarity",
    "signature": "double cosineSimilarity(org.apache.commons.collections4.bloomfilter.BitMapExtractor,org.apache.commons.collections4.bloomfilter.BitMapExtractor)",
    "visibility": "public",
    "body": "{\r\n    final int numerator \u003d andCardinality(first, second);\r\n    // Given that the cardinality is an int then the product as a double will not\r\n    // overflow, we can use one sqrt:\r\n    return numerator \u003d\u003d 0 ? 0 : numerator / Math.sqrt(cardinality(first) * cardinality(second));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BitMapExtractor\n  BitMapExtractor\n  $i0 \u003d SetOperations.andCardinality(r0, r1)\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $d3 \u003d 0\n  goto B3\n}",
      "B2 {\n  $d0 \u003d (double) $i0\n  $i1 \u003d SetOperations.cardinality(r0)\n  $i2 \u003d SetOperations.cardinality(r1)\n  $i3 \u003d $i1 * $i2\n  $d1 \u003d (double) $i3\n  $d2 \u003d Math.sqrt($d1)\n  $d3 \u003d $d0 / $d2\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SetOperations#cardinality(...1)",
        "body": "{\r\n    final int[] cardinality \u003d new int[1];\r\n    bitMapExtractor.processBitMaps(l -\u003e {\r\n        cardinality[0] +\u003d Long.bitCount(l);\r\n        return true;\r\n    });\r\n    return cardinality[0];\r\n}"
      },
      {
        "name": "SetOperations#andCardinality(...2)",
        "body": "{\r\n    return cardinality(first, second, (x, y) -\u003e x \u0026 y);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.SetOperations",
    "methodName": "cosineSimilarity",
    "signature": "double cosineSimilarity(org.apache.commons.collections4.bloomfilter.BloomFilter,org.apache.commons.collections4.bloomfilter.BloomFilter)",
    "visibility": "public",
    "body": "{\r\n    final int numerator \u003d andCardinality(first, second);\r\n    // Given that the cardinality is an int then the product as a double will not\r\n    // overflow, we can use one sqrt:\r\n    return numerator \u003d\u003d 0 ? 0 : numerator / Math.sqrt(first.cardinality() * second.cardinality());\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BloomFilter\n  BloomFilter\n  $i0 \u003d SetOperations.andCardinality(r0, r1)\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $d3 \u003d 0\n  goto B3\n}",
      "B2 {\n  $d0 \u003d (double) $i0\n  $i1 \u003d r0.cardinality()\n  $i2 \u003d r1.cardinality()\n  $i3 \u003d $i1 * $i2\n  $d1 \u003d (double) $i3\n  $d2 \u003d Math.sqrt($d1)\n  $d3 \u003d $d0 / $d2\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SetOperations#andCardinality(...2)",
        "body": "{\r\n    return cardinality(first, second, (x, y) -\u003e x \u0026 y);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.SetOperations",
    "methodName": "jaccardSimilarity",
    "signature": "double jaccardSimilarity(org.apache.commons.collections4.bloomfilter.BitMapExtractor,org.apache.commons.collections4.bloomfilter.BitMapExtractor)",
    "visibility": "public",
    "body": "{\r\n    final int[] cardinality \u003d new int[2];\r\n    first.processBitMapPairs(second, (x, y) -\u003e {\r\n        cardinality[0] +\u003d Long.bitCount(x \u0026 y);\r\n        cardinality[1] +\u003d Long.bitCount(x | y);\r\n        return true;\r\n    });\r\n    final int intersection \u003d cardinality[0];\r\n    return intersection \u003d\u003d 0 ? 0 : intersection / (double) cardinality[1];\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BitMapExtractor\n  BitMapExtractor\n  r0 \u003d newarray (int)[2]\n  $r3 \u003d SetOperations$lambda_jaccardSimilarity_3__36.bootstrap$(r0)\n  r1.processBitMapPairs(r2, $r3)\n  i0 \u003d r0[0]\n  if (i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $d2 \u003d 0\n  goto B3\n}",
      "B2 {\n  $d1 \u003d (double) i0\n  $i1 \u003d r0[1]\n  $d0 \u003d (double) $i1\n  $d2 \u003d $d1 / $d0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.Shape",
    "methodName": "calculateNumberOfHashFunctions",
    "signature": "int calculateNumberOfHashFunctions(int,int)",
    "visibility": "private",
    "body": "{\r\n    // k \u003d round((m / n) * ln(2)) We change order so that we use real math rather\r\n    // than integer math.\r\n    final long k \u003d Math.round(LN_2 * numberOfBits / numberOfItems);\r\n    if (k \u003c 1) {\r\n        throw new IllegalArgumentException(String.format(\"Filter too small: Calculated number of hash functions (%s) was less than 1\", k));\r\n    }\r\n    // Normally we would check that numberOfHashFunctions \u003c\u003d Integer.MAX_VALUE but\r\n    // since numberOfBits is at most Integer.MAX_VALUE the numerator of\r\n    // numberOfHashFunctions is ln(2) * Integer.MAX_VALUE \u003d 646456992.9449 the\r\n    // value of k cannot be above Integer.MAX_VALUE.\r\n    return (int) k;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i5 \u003e\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  i1 :\u003d @parameter0: int\n  i0 :\u003d @parameter1: int\n  $d1 \u003d Shape: double LN_2\u003e\n  $d0 \u003d (double) i0\n  $d3 \u003d $d1 * $d0\n  $d2 \u003d (double) i1\n  $d4 \u003d $d3 / $d2\n  $l2 \u003d Math.round($d4)\n  $b3 \u003d $l2 cmp 1L\n  $i5 \u003d (int) $b3\n  if ($i5 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalArgumentException\n  $r1 \u003d Object)[1]\n  $r2 \u003d Long.valueOf($l2)\n  $r1[0] \u003d $r2\n  $r3 \u003d String.format(\"Filter too small: Calculated number of hash functions (%s) was less than 1\", $r1)\n  new IllegalArgumentException($r3)\n  throw $r4\n}",
      "B2 {\n  $i4 \u003d (int) $l2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.Shape",
    "methodName": "checkCalculatedProbability",
    "signature": "void checkCalculatedProbability(double)",
    "visibility": "private",
    "body": "{\r\n    // We do not need to check for p \u003c\u003d 0.0 since we only allow positive values for\r\n    // parameters and the closest we can come to exp(-kn/m) \u003d\u003d 1 is\r\n    // exp(-1/Integer.MAX_INT) approx 0.9999999995343387 so Math.pow(x, y) will\r\n    // always be 0\u003cx\u003c1 and y\u003e0\r\n    if (probability \u003e\u003d 1.0) {\r\n        throw new IllegalArgumentException(\"Calculated probability is greater than or equal to 1: \" + probability);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i1 \u003c 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  d0 :\u003d @parameter0: double\n  $b0 \u003d 0\n  $i1 \u003d (int) $b0\n  if ($i1 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d IllegalArgumentException\n  $r1 \u003d dynInvoke makeConcatWithConstants(d0)\n  new IllegalArgumentException($r1)\n  throw $r2\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.Shape",
    "methodName": "checkNumberOfBits",
    "signature": "int checkNumberOfBits(int)",
    "visibility": "private",
    "body": "{\r\n    if (numberOfBits \u003c 1) {\r\n        throw new IllegalArgumentException(\"Number of bits must be greater than 0: \" + numberOfBits);\r\n    }\r\n    return numberOfBits;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 \u003e\u003d 1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  if (i0 \u003e\u003d 1) goto B1 else B2\n}",
      "B1 {\n  $r0 \u003d IllegalArgumentException\n  $r1 \u003d dynInvoke makeConcatWithConstants(i0)\n  new IllegalArgumentException($r1)\n  throw $r0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.Shape",
    "methodName": "checkNumberOfHashFunctions",
    "signature": "int checkNumberOfHashFunctions(int)",
    "visibility": "private",
    "body": "{\r\n    if (numberOfHashFunctions \u003c 1) {\r\n        throw new IllegalArgumentException(\"Number of hash functions must be greater than 0: \" + numberOfHashFunctions);\r\n    }\r\n    return numberOfHashFunctions;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 \u003e\u003d 1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  if (i0 \u003e\u003d 1) goto B1 else B2\n}",
      "B1 {\n  $r0 \u003d IllegalArgumentException\n  $r1 \u003d dynInvoke makeConcatWithConstants(i0)\n  new IllegalArgumentException($r1)\n  throw $r0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.Shape",
    "methodName": "checkNumberOfItems",
    "signature": "int checkNumberOfItems(int)",
    "visibility": "private",
    "body": "{\r\n    if (numberOfItems \u003c 1) {\r\n        throw new IllegalArgumentException(\"Number of items must be greater than 0: \" + numberOfItems);\r\n    }\r\n    return numberOfItems;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 \u003e\u003d 1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  if (i0 \u003e\u003d 1) goto B1 else B2\n}",
      "B1 {\n  $r0 \u003d IllegalArgumentException\n  $r1 \u003d dynInvoke makeConcatWithConstants(i0)\n  new IllegalArgumentException($r1)\n  throw $r0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.Shape",
    "methodName": "checkProbability",
    "signature": "void checkProbability(double)",
    "visibility": "private",
    "body": "{\r\n    // Using the negation of within the desired range will catch NaN\r\n    if (!(probability \u003e 0.0 \u0026\u0026 probability \u003c 1.0)) {\r\n        throw new IllegalArgumentException(\"Probability must be greater than 0 and less than 1: \" + probability);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i2 \u003c\u003d 0) → B1 | else → B2",
      "B1 : If($i3 \u003c 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  d0 :\u003d @parameter0: double\n  $b0 \u003d 0\n  $i2 \u003d (int) $b0\n  if ($i2 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $b1 \u003d 0\n  $i3 \u003d (int) $b1\n  if ($i3 \u003c 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d IllegalArgumentException\n  $r1 \u003d dynInvoke makeConcatWithConstants(d0)\n  new IllegalArgumentException($r1)\n  throw $r2\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.Shape",
    "methodName": "fromNP",
    "signature": "org.apache.commons.collections4.bloomfilter.Shape fromNP(int,double)",
    "visibility": "public",
    "body": "{\r\n    checkNumberOfItems(numberOfItems);\r\n    checkProbability(probability);\r\n    // Number of bits (m)\r\n    final double m \u003d Math.ceil(numberOfItems * Math.log(probability) / DENOMINATOR);\r\n    if (m \u003e Integer.MAX_VALUE) {\r\n        throw new IllegalArgumentException(\"Resulting filter has more than \" + Integer.MAX_VALUE + \" bits: \" + m);\r\n    }\r\n    final int numberOfBits \u003d (int) m;\r\n    final int numberOfHashFunctions \u003d calculateNumberOfHashFunctions(numberOfItems, numberOfBits);\r\n    final Shape shape \u003d new Shape(numberOfHashFunctions, numberOfBits);\r\n    // check that probability is within range\r\n    checkCalculatedProbability(shape.getProbability(numberOfItems));\r\n    return shape;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i4 \u003c\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  d0 :\u003d @parameter1: double\n  Shape.checkNumberOfItems(i0)\n  Shape.checkProbability(d0)\n  $d1 \u003d (double) i0\n  $d2 \u003d Math.log(d0)\n  $d4 \u003d $d1 * $d2\n  $d3 \u003d Shape: double DENOMINATOR\u003e\n  $d5 \u003d $d4 / $d3\n  $d6 \u003d Math.ceil($d5)\n  $b1 \u003d 147483647E9\n  $i4 \u003d (int) $b1\n  if ($i4 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IllegalArgumentException\n  $r2 \u003d dynInvoke makeConcatWithConstants($d6)\n  new IllegalArgumentException($r2)\n  throw $r3\n}",
      "B2 {\n  i2 \u003d (int) $d6\n  $i3 \u003d Shape.calculateNumberOfHashFunctions(i0, i2)\n  $r4 \u003d Shape\n  new Shape($i3, i2)\n  $d7 \u003d $r4.getProbability(i0)\n  Shape.checkCalculatedProbability($d7)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Shape#checkProbability(...1)",
        "body": "{\r\n    // Using the negation of within the desired range will catch NaN\r\n    if (!(probability \u003e 0.0 \u0026\u0026 probability \u003c 1.0)) {\r\n        throw new IllegalArgumentException(\"Probability must be greater than 0 and less than 1: \" + probability);\r\n    }\r\n}"
      },
      {
        "name": "Shape#checkCalculatedProbability(...1)",
        "body": "{\r\n    // We do not need to check for p \u003c\u003d 0.0 since we only allow positive values for\r\n    // parameters and the closest we can come to exp(-kn/m) \u003d\u003d 1 is\r\n    // exp(-1/Integer.MAX_INT) approx 0.9999999995343387 so Math.pow(x, y) will\r\n    // always be 0\u003cx\u003c1 and y\u003e0\r\n    if (probability \u003e\u003d 1.0) {\r\n        throw new IllegalArgumentException(\"Calculated probability is greater than or equal to 1: \" + probability);\r\n    }\r\n}"
      },
      {
        "name": "Shape#checkNumberOfItems(...1)",
        "body": "{\r\n    if (numberOfItems \u003c 1) {\r\n        throw new IllegalArgumentException(\"Number of items must be greater than 0: \" + numberOfItems);\r\n    }\r\n    return numberOfItems;\r\n}"
      },
      {
        "name": "Shape#calculateNumberOfHashFunctions(...2)",
        "body": "{\r\n    // k \u003d round((m / n) * ln(2)) We change order so that we use real math rather\r\n    // than integer math.\r\n    final long k \u003d Math.round(LN_2 * numberOfBits / numberOfItems);\r\n    if (k \u003c 1) {\r\n        throw new IllegalArgumentException(String.format(\"Filter too small: Calculated number of hash functions (%s) was less than 1\", k));\r\n    }\r\n    // Normally we would check that numberOfHashFunctions \u003c\u003d Integer.MAX_VALUE but\r\n    // since numberOfBits is at most Integer.MAX_VALUE the numerator of\r\n    // numberOfHashFunctions is ln(2) * Integer.MAX_VALUE \u003d 646456992.9449 the\r\n    // value of k cannot be above Integer.MAX_VALUE.\r\n    return (int) k;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.Shape",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    // Shape is final so no check for the same class as inheritance is not possible\r\n    if (obj instanceof Shape) {\r\n        final Shape other \u003d (Shape) obj;\r\n        return numberOfBits \u003d\u003d other.numberOfBits \u0026\u0026 numberOfHashFunctions \u003d\u003d other.numberOfHashFunctions;\r\n    }\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B6",
      "B1 : If($i1 !\u003d $i0) → B2 | else → B4",
      "B2 : If($i3 !\u003d $i2) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Shape\n  Object\n  $z0 \u003d Shape\n  if ($z0 \u003d\u003d 0) goto B1 else B6\n}",
      "B1 {\n  r1 \u003d Shape) r0\n  $i1 \u003d Shape: int numberOfBits\u003e\n  $i0 \u003d Shape: int numberOfBits\u003e\n  if ($i1 !\u003d $i0) goto B2 else B4\n}",
      "B2 {\n  $i3 \u003d Shape: int numberOfHashFunctions\u003e\n  $i2 \u003d Shape: int numberOfHashFunctions\u003e\n  if ($i3 !\u003d $i2) goto B3 else B4\n}",
      "B3 {\n  $z1 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z1 \u003d 0\n}",
      "B5 {\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.Shape",
    "methodName": "getProbability",
    "signature": "double getProbability(int)",
    "visibility": "public",
    "body": "{\r\n    if (numberOfItems \u003c 0) {\r\n        throw new IllegalArgumentException(\"Number of items must be greater than or equal to 0: \" + numberOfItems);\r\n    }\r\n    if (numberOfItems \u003d\u003d 0) {\r\n        return 0;\r\n    }\r\n    return Math.pow(-Math.expm1(-1.0 * numberOfHashFunctions * numberOfItems / numberOfBits), numberOfHashFunctions);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 \u003e\u003d 0) → B1 | else → B2",
      "B2 : If(i0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Shape\n  i0 :\u003d @parameter0: int\n  if (i0 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d IllegalArgumentException\n  $r2 \u003d dynInvoke makeConcatWithConstants(i0)\n  new IllegalArgumentException($r2)\n  throw $r1\n}",
      "B2 {\n  if (i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i1 \u003d Shape: int numberOfHashFunctions\u003e\n  $d0 \u003d (double) $i1\n  $d2 \u003d 0 * $d0\n  $d1 \u003d (double) i0\n  $d4 \u003d $d2 * $d1\n  $i2 \u003d Shape: int numberOfBits\u003e\n  $d3 \u003d (double) $i2\n  $d5 \u003d $d4 / $d3\n  $d6 \u003d Math.expm1($d5)\n  $d8 \u003d neg $d6\n  $i3 \u003d Shape: int numberOfHashFunctions\u003e\n  $d7 \u003d (double) $i3\n  $d9 \u003d Math.pow($d8, $d7)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.Shape",
    "methodName": "isSparse",
    "signature": "boolean isSparse(int)",
    "visibility": "public",
    "body": "{\r\n    /*\r\n         * Since the size of a bit map is a long and the size of an index is an int,\r\n         * there can be 2 indexes for each bit map. In Bloom filters indexes are evenly\r\n         * distributed across the range of possible values, Thus if the cardinality\r\n         * (number of indexes) is less than or equal to 2*number of bit maps the\r\n         * cardinality is sparse within the shape.\r\n         */\r\n    return cardinality \u003c\u003d BitMaps.numberOfBitMaps(this) * 2;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003e $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Shape\n  i0 :\u003d @parameter0: int\n  $i1 \u003d BitMaps.numberOfBitMaps(r0)\n  $i2 \u003d $i1 * 2\n  if (i0 \u003e $i2) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.SimpleBloomFilter",
    "methodName": "cardinality",
    "signature": "int cardinality()",
    "visibility": "public",
    "body": "{\r\n    // Lazy evaluation with caching\r\n    int c \u003d cardinality;\r\n    if (c \u003c 0) {\r\n        cardinality \u003d c \u003d SetOperations.cardinality(this);\r\n    }\r\n    return c;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i1 \u003e\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleBloomFilter\n  i1 \u003d SimpleBloomFilter: int cardinality\u003e\n  if (i1 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d SetOperations.cardinality(r0)\n  i1 \u003d $i0\n  SimpleBloomFilter: int cardinality\u003e \u003d $i0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.SimpleBloomFilter",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty()",
    "visibility": "public",
    "body": "{\r\n    return cardinality \u003d\u003d 0 || processBitMaps(y -\u003e y \u003d\u003d 0);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d 0) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SimpleBloomFilter\n  $i0 \u003d SimpleBloomFilter: int cardinality\u003e\n  if ($i0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d SimpleBloomFilter$lambda_isEmpty_1__40.bootstrap$()\n  $z0 \u003d r0.processBitMaps($r1)\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleBloomFilter#processBitMaps(...1)",
        "body": "{\r\n    Objects.requireNonNull(consumer, \"consumer\");\r\n    for (final long l : bitMap) {\r\n        if (!consumer.test(l)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.SimpleBloomFilter",
    "methodName": "merge",
    "signature": "boolean merge(org.apache.commons.collections4.bloomfilter.BitMapExtractor)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(bitMapExtractor, \"bitMapExtractor\");\r\n    try {\r\n        final int[] idx \u003d new int[1];\r\n        bitMapExtractor.processBitMaps(value -\u003e {\r\n            bitMap[idx[0]++] |\u003d value;\r\n            return true;\r\n        });\r\n        // idx[0] will be limit+1 so decrement it\r\n        idx[0]--;\r\n        final int idxLimit \u003d BitMaps.getLongIndex(shape.getNumberOfBits());\r\n        if (idxLimit \u003d\u003d idx[0]) {\r\n            final long excess \u003d bitMap[idxLimit] \u003e\u003e shape.getNumberOfBits();\r\n            if (excess !\u003d 0) {\r\n                throw new IllegalArgumentException(String.format(\"BitMapExtractor set a bit higher than the limit for the shape: %s\", shape.getNumberOfBits()));\r\n            }\r\n        }\r\n        cardinality \u003d -1;\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        throw new IllegalArgumentException(String.format(\"BitMapExtractor should send at most %s maps\", bitMap.length), e);\r\n    }\r\n    return true;\r\n}",
    "nodes": 26,
    "edges": 45,
    "cc": 21,
    "flowSummary": [
      "B10 : If($i3 !\u003d $i4) → B11 | else → B23",
      "B15 : If($b8 \u003d\u003d 0) → B16 | else → B23"
    ],
    "blockList": [
      "B0 {\n  SimpleBloomFilter\n  BitMapExtractor\n  Objects.requireNonNull(r0, \"bitMapExtractor\")\n  r17 \u003d newarray (int)[1]\n  $r2 \u003d SimpleBloomFilter$lambda_merge_2__41.bootstrap$(r1, r17)\n  r0.processBitMaps($r2)\n  $i0 \u003d r17[0]\n  $i1 \u003d $i0 - 1\n  r17[0] \u003d $i1\n  $r3 \u003d Shape shape\u003e\n  $i2 \u003d $r3.getNumberOfBits()\n  $i3 \u003d BitMaps.getLongIndex($i2)\n  $i4 \u003d r17[0]\n  if ($i3 !\u003d $i4) goto B1 else B3\n}",
      "B1 {\n  $r4 \u003d SimpleBloomFilter: long[] bitMap\u003e\n  $l5 \u003d $r4[$i3]\n  $r5 \u003d Shape shape\u003e\n  $i6 \u003d $r5.getNumberOfBits()\n  l7 \u003d $l5 \u003e\u003e $i6\n  $b8 \u003d l7 cmp 0L\n  if ($b8 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r18 \u003d IllegalArgumentException\n  $r7 \u003d Object)[1]\n  $r8 \u003d Shape shape\u003e\n  $i9 \u003d $r8.getNumberOfBits()\n  $r9 \u003d Integer.valueOf($i9)\n  $r7[0] \u003d $r9\n  $r10 \u003d String.format(\"BitMapExtractor set a bit higher than the limit for the shape: %s\", $r7)\n  new IllegalArgumentException($r10)\n  throw $r18\n}",
      "B3 {\n  $i12 \u003d (int) -1\n  SimpleBloomFilter: int cardinality\u003e \u003d $i12\n  goto B5\n}",
      "B4 {\n  $r11 :\u003d @caughtexception\n  $r19 \u003d IllegalArgumentException\n  $r13 \u003d Object)[1]\n  $r14 \u003d SimpleBloomFilter: long[] bitMap\u003e\n  $i10 \u003d lengthof $r14\n  $r15 \u003d Integer.valueOf($i10)\n  $r13[0] \u003d $r15\n  $r16 \u003d String.format(\"BitMapExtractor should send at most %s maps\", $r13)\n  new IllegalArgumentException($r16, $r11)\n  throw $r19\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.SimpleBloomFilter",
    "methodName": "merge",
    "signature": "boolean merge(org.apache.commons.collections4.bloomfilter.BloomFilter)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(other, \"other\");\r\n    if ((other.characteristics() \u0026 SPARSE) !\u003d 0) {\r\n        merge((IndexExtractor) other);\r\n    } else {\r\n        merge((BitMapExtractor) other);\r\n    }\r\n    return true;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SimpleBloomFilter\n  BloomFilter\n  Objects.requireNonNull(r0, \"other\")\n  $i0 \u003d r0.characteristics()\n  $i1 \u003d $i0 \u0026 1\n  if ($i1 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r1.merge(r0)\n  goto B3\n}",
      "B2 {\n  r1.merge(r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SimpleBloomFilter#merge(...1)",
        "body": "{\r\n    Objects.requireNonNull(bitMapExtractor, \"bitMapExtractor\");\r\n    try {\r\n        final int[] idx \u003d new int[1];\r\n        bitMapExtractor.processBitMaps(value -\u003e {\r\n            bitMap[idx[0]++] |\u003d value;\r\n            return true;\r\n        });\r\n        // idx[0] will be limit+1 so decrement it\r\n        idx[0]--;\r\n        final int idxLimit \u003d BitMaps.getLongIndex(shape.getNumberOfBits());\r\n        if (idxLimit \u003d\u003d idx[0]) {\r\n            final long excess \u003d bitMap[idxLimit] \u003e\u003e shape.getNumberOfBits();\r\n            if (excess !\u003d 0) {\r\n                throw new IllegalArgumentException(String.format(\"BitMapExtractor set a bit higher than the limit for the shape: %s\", shape.getNumberOfBits()));\r\n            }\r\n        }\r\n        cardinality \u003d -1;\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        throw new IllegalArgumentException(String.format(\"BitMapExtractor should send at most %s maps\", bitMap.length), e);\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.SimpleBloomFilter",
    "methodName": "processBitMapPairs",
    "signature": "boolean processBitMapPairs(org.apache.commons.collections4.bloomfilter.BitMapExtractor,org.apache.commons.collections4.bloomfilter.LongBiPredicate)",
    "visibility": "public",
    "body": "{\r\n    final CountingLongPredicate p \u003d new CountingLongPredicate(bitMap, func);\r\n    return other.processBitMaps(p) \u0026\u0026 p.processRemaining();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B3",
      "B1 : If($z1 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SimpleBloomFilter\n  BitMapExtractor\n  LongBiPredicate\n  $r0 \u003d CountingLongPredicate\n  $r3 \u003d SimpleBloomFilter: long[] bitMap\u003e\n  new CountingLongPredicate($r3, r2)\n  $z0 \u003d r4.processBitMaps($r0)\n  if ($z0 \u003d\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $z1 \u003d $r0.processRemaining()\n  if ($z1 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.SimpleBloomFilter",
    "methodName": "processBitMaps",
    "signature": "boolean processBitMaps(java.util.function.LongPredicate)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(consumer, \"consumer\");\r\n    for (final long l : bitMap) {\r\n        if (!consumer.test(l)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i2 \u003e\u003d i0) → B2 | else → B5",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  SimpleBloomFilter\n  LongPredicate\n  Objects.requireNonNull(r0, \"consumer\")\n  r2 \u003d SimpleBloomFilter: long[] bitMap\u003e\n  i0 \u003d lengthof r2\n  i2 \u003d 0\n}",
      "B1 {\n  if (i2 \u003e\u003d i0) goto B2 else B5\n}",
      "B2 {\n  l1 \u003d r2[i2]\n  $z0 \u003d r0.test(l1)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i2 \u003d i2 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.SparseBloomFilter",
    "methodName": "asBitMapArray",
    "signature": "long[] asBitMapArray()",
    "visibility": "public",
    "body": "{\r\n    final long[] result \u003d BitMaps.newBitMap(shape);\r\n    for (final int i : indices) {\r\n        BitMaps.set(result, i);\r\n    }\r\n    return result;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SparseBloomFilter\n  $r1 \u003d Shape shape\u003e\n  $r2 \u003d BitMaps.newBitMap($r1)\n  $r3 \u003d TreeSet indices\u003e\n  $r4 \u003d $r3.iterator()\n}",
      "B1 {\n  $z0 \u003d $r4.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d $r4.next()\n  $r6 \u003d Integer) $r5\n  $i0 \u003d $r6.intValue()\n  BitMaps.set($r2, $i0)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.SparseBloomFilter",
    "methodName": "merge",
    "signature": "boolean merge(org.apache.commons.collections4.bloomfilter.BloomFilter)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(other, \"other\");\r\n    final IndexExtractor indexExtractor \u003d (other.characteristics() \u0026 SPARSE) !\u003d 0 ? (IndexExtractor) other : IndexExtractor.fromBitMapExtractor(other);\r\n    merge(indexExtractor);\r\n    return true;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SparseBloomFilter\n  BloomFilter\n  Objects.requireNonNull(r0, \"other\")\n  $i0 \u003d r0.characteristics()\n  $i1 \u003d $i0 \u0026 1\n  if ($i1 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d IndexExtractor.fromBitMapExtractor(r0)\n}",
      "B3 {\n  r1.merge($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SparseBloomFilter#merge(...1)",
        "body": "{\r\n    Objects.requireNonNull(bitMapExtractor, \"bitMapExtractor\");\r\n    return this.merge(IndexExtractor.fromBitMapExtractor(bitMapExtractor));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.SparseBloomFilter",
    "methodName": "merge",
    "signature": "boolean merge(org.apache.commons.collections4.bloomfilter.IndexExtractor)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(indexExtractor, \"indexExtractor\");\r\n    indexExtractor.processIndices(this::add);\r\n    if (!indices.isEmpty()) {\r\n        if (indices.last() \u003e\u003d shape.getNumberOfBits()) {\r\n            throw new IllegalArgumentException(String.format(\"Value in list %s is greater than maximum value (%s)\", indices.last(), shape.getNumberOfBits() - 1));\r\n        }\r\n        if (indices.first() \u003c 0) {\r\n            throw new IllegalArgumentException(String.format(\"Value in list %s is less than 0\", indices.first()));\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B5",
      "B1 : If($i0 \u003c $i1) → B2 | else → B3",
      "B3 : If($i2 \u003e\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  SparseBloomFilter\n  IndexExtractor\n  Objects.requireNonNull(r0, \"indexExtractor\")\n  $r2 \u003d SparseBloomFilter$add__44.bootstrap$(r1)\n  r0.processIndices($r2)\n  $r3 \u003d TreeSet indices\u003e\n  $z0 \u003d $r3.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B5\n}",
      "B1 {\n  $r4 \u003d TreeSet indices\u003e\n  $r5 \u003d $r4.last()\n  $r6 \u003d Integer) $r5\n  $i0 \u003d $r6.intValue()\n  $r7 \u003d Shape shape\u003e\n  $i1 \u003d $r7.getNumberOfBits()\n  if ($i0 \u003c $i1) goto B2 else B3\n}",
      "B2 {\n  $r16 \u003d IllegalArgumentException\n  $r17 \u003d Object)[2]\n  $r18 \u003d TreeSet indices\u003e\n  $r19 \u003d $r18.last()\n  $r17[0] \u003d $r19\n  $r20 \u003d Shape shape\u003e\n  $i3 \u003d $r20.getNumberOfBits()\n  $i4 \u003d $i3 - 1\n  $r21 \u003d Integer.valueOf($i4)\n  $r17[1] \u003d $r21\n  $r22 \u003d String.format(\"Value in list %s is greater than maximum value (%s)\", $r17)\n  new IllegalArgumentException($r22)\n  throw $r16\n}",
      "B3 {\n  $r8 \u003d TreeSet indices\u003e\n  $r9 \u003d $r8.first()\n  $r10 \u003d Integer) $r9\n  $i2 \u003d $r10.intValue()\n  if ($i2 \u003e\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r11 \u003d IllegalArgumentException\n  $r12 \u003d Object)[1]\n  $r13 \u003d TreeSet indices\u003e\n  $r14 \u003d $r13.first()\n  $r12[0] \u003d $r14\n  $r15 \u003d String.format(\"Value in list %s is less than 0\", $r12)\n  new IllegalArgumentException($r15)\n  throw $r11\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.bloomfilter.SparseBloomFilter",
    "methodName": "processBitMaps",
    "signature": "boolean processBitMaps(java.util.function.LongPredicate)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(consumer, \"consumer\");\r\n    final int limit \u003d BitMaps.numberOfBitMaps(shape);\r\n    //\r\n    // because our indices are always in order we can shorten the time necessary to\r\n    // create the longs for the consumer\r\n    //\r\n    // the currently constructed bitMap\r\n    long bitMap \u003d 0;\r\n    // the bitmap we are working on\r\n    int idx \u003d 0;\r\n    for (final int i : indices) {\r\n        while (BitMaps.getLongIndex(i) !\u003d idx) {\r\n            if (!consumer.test(bitMap)) {\r\n                return false;\r\n            }\r\n            bitMap \u003d 0;\r\n            idx++;\r\n        }\r\n        bitMap |\u003d BitMaps.getLongBit(i);\r\n    }\r\n    // we fall through with data in the bitMap\r\n    if (!consumer.test(bitMap)) {\r\n        return false;\r\n    }\r\n    // account for hte bitMap in the previous block + the next one\r\n    idx++;\r\n    // while there are more blocks to generate send zero to the consumer.\r\n    while (idx \u003c limit) {\r\n        if (!consumer.test(0L)) {\r\n            return false;\r\n        }\r\n        idx++;\r\n    }\r\n    return true;\r\n}",
    "nodes": 16,
    "edges": 18,
    "cc": 4,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B8",
      "B3 : If($i2 \u003d\u003d i5) → B4 | else → B7",
      "B4 : If($z3 !\u003d 0) → B5 | else → B6",
      "B8 : If($z1 !\u003d 0) → B9 | else → B10",
      "B11 : If(i6 \u003e\u003d $i0) → B12 | else → B15",
      "B12 : If($z2 !\u003d 0) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  SparseBloomFilter\n  LongPredicate\n  Objects.requireNonNull(r0, \"consumer\")\n  $r2 \u003d Shape shape\u003e\n  $i0 \u003d BitMaps.numberOfBitMaps($r2)\n  l4 \u003d 0L\n  i5 \u003d 0\n  $r3 \u003d TreeSet indices\u003e\n  $r4 \u003d $r3.iterator()\n}",
      "B1 {\n  $z0 \u003d $r4.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B8\n}",
      "B2 {\n  $r5 \u003d $r4.next()\n  $r6 \u003d Integer) $r5\n  $i1 \u003d $r6.intValue()\n}",
      "B3 {\n  $i2 \u003d BitMaps.getLongIndex($i1)\n  if ($i2 \u003d\u003d i5) goto B4 else B7\n}",
      "B4 {\n  $z3 \u003d r0.test(l4)\n  if ($z3 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  l4 \u003d 0L\n  i5 \u003d i5 + 1\n  goto B3\n}",
      "B7 {\n  $l3 \u003d BitMaps.getLongBit($i1)\n  l4 \u003d l4 | $l3\n  goto B1\n}",
      "B8 {\n  $z1 \u003d r0.test(l4)\n  if ($z1 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  i6 \u003d i5 + 1\n}",
      "B11 {\n  if (i6 \u003e\u003d $i0) goto B12 else B15\n}",
      "B12 {\n  $z2 \u003d r0.test(0L)\n  if ($z2 !\u003d 0) goto B13 else B14\n}",
      "B13 {\n  return\n}",
      "B14 {\n  i6 \u003d i6 + 1\n  goto B11\n}",
      "B15 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e B1",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B15",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B11",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.ClosureUtils",
    "methodName": "switchMapClosure",
    "signature": "org.apache.commons.collections4.Closure switchMapClosure(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(objectsAndClosures, \"objectsAndClosures\");\r\n    final Closure\u003c? super E\u003e def \u003d objectsAndClosures.remove(null);\r\n    final int size \u003d objectsAndClosures.size();\r\n    final Closure\u003c? super E\u003e[] trs \u003d new Closure[size];\r\n    final Predicate\u003cE\u003e[] preds \u003d new Predicate[size];\r\n    int i \u003d 0;\r\n    for (final Map.Entry\u003c? extends E, Closure\u003cE\u003e\u003e entry : objectsAndClosures.entrySet()) {\r\n        preds[i] \u003d EqualPredicate.\u003cE\u003eequalPredicate(entry.getKey());\r\n        trs[i] \u003d entry.getValue();\r\n        i++;\r\n    }\r\n    return ClosureUtils.\u003cE\u003eswitchClosure(preds, trs, def);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Map\n  Objects.requireNonNull(r0, \"objectsAndClosures\")\n  $r1 \u003d r0.remove(null)\n  r2 \u003d Closure) $r1\n  $i0 \u003d r0.size()\n  r3 \u003d Closure)[$i0]\n  r4 \u003d Predicate)[$i0]\n  i1 \u003d 0\n  $r5 \u003d r0.entrySet()\n  $r6 \u003d $r5.iterator()\n}",
      "B1 {\n  $z0 \u003d $r6.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r8 \u003d $r6.next()\n  r9 \u003d Map$Entry) $r8\n  $r10 \u003d r9.getKey()\n  $r11 \u003d EqualPredicate.equalPredicate($r10)\n  r4[i1] \u003d $r11\n  $r12 \u003d r9.getValue()\n  $r13 \u003d Closure) $r12\n  r3[i1] \u003d $r13\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  $r7 \u003d ClosureUtils.switchClosure(r4, r3, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.CompositeCollection",
    "methodName": "add",
    "signature": "boolean add(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CompositeCollection\n  Object\n  $r1 \u003d CompositeCollection$CollectionMutator mutator\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d UnsupportedOperationException\n  new UnsupportedOperationException(\"add() is not supported on CompositeCollection without a CollectionMutator strategy\")\n  throw $r5\n}",
      "B2 {\n  $r4 \u003d CompositeCollection$CollectionMutator mutator\u003e\n  $r3 \u003d List all\u003e\n  $z0 \u003d $r4.add(r0, $r3, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.CompositeCollection",
    "methodName": "addAll",
    "signature": "boolean addAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    if (mutator \u003d\u003d null) {\r\n        throw new UnsupportedOperationException(\"addAll() is not supported on CompositeCollection without a CollectionMutator strategy\");\r\n    }\r\n    return mutator.addAll(this, all, coll);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CompositeCollection\n  Collection\n  $r1 \u003d CompositeCollection$CollectionMutator mutator\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d UnsupportedOperationException\n  new UnsupportedOperationException(\"addAll() is not supported on CompositeCollection without a CollectionMutator strategy\")\n  throw $r5\n}",
      "B2 {\n  $r4 \u003d CompositeCollection$CollectionMutator mutator\u003e\n  $r3 \u003d List all\u003e\n  $z0 \u003d $r4.addAll(r0, $r3, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.CompositeCollection",
    "methodName": "addComposited",
    "signature": "void addComposited(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    if (compositeCollection !\u003d null) {\r\n        all.add(compositeCollection);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CompositeCollection\n  Collection\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d List all\u003e\n  $r2.add(r0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.CompositeCollection",
    "methodName": "addComposited",
    "signature": "void addComposited(java.util.Collection[])",
    "visibility": "public",
    "body": "{\r\n    if (compositeCollection !\u003d null) {\r\n        all.add(compositeCollection);\r\n    }\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B5",
      "B2 : If(r1 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CompositeCollection\n  Collection[]\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B5\n}",
      "B2 {\n  r1 \u003d r0[i1]\n  if (r1 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d List all\u003e\n  $r3.add(r1)\n}",
      "B4 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.CompositeCollection",
    "methodName": "addComposited",
    "signature": "void addComposited(java.util.Collection,java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    if (compositeCollection1 !\u003d null) {\r\n        all.add(compositeCollection1);\r\n    }\r\n    if (compositeCollection2 !\u003d null) {\r\n        all.add(compositeCollection2);\r\n    }\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(r1 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CompositeCollection\n  Collection\n  Collection\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d List all\u003e\n  $r4.add(r0)\n}",
      "B2 {\n  if (r1 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d List all\u003e\n  $r3.add(r1)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.CompositeCollection",
    "methodName": "clear",
    "signature": "void clear()",
    "visibility": "public",
    "body": "{\r\n    for (final Collection\u003cE\u003e coll : all) {\r\n        coll.clear();\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CompositeCollection\n  $r1 \u003d List all\u003e\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r4 \u003d Collection) $r3\n  r4.clear()\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.CompositeCollection",
    "methodName": "contains",
    "signature": "boolean contains(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    for (final Collection\u003cE\u003e item : all) {\r\n        if (item.contains(obj)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CompositeCollection\n  Object\n  $r1 \u003d List all\u003e\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r4 \u003d Collection) $r3\n  $z1 \u003d r4.contains(r5)\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.CompositeCollection",
    "methodName": "containsAll",
    "signature": "boolean containsAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    if (coll \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    for (final Object item : coll) {\r\n        if (!contains(item)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B7",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CompositeCollection\n  Collection\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.iterator()\n}",
      "B3 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B4 else B7\n}",
      "B4 {\n  $r2 \u003d $r1.next()\n  $z1 \u003d r3.contains($r2)\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CompositeCollection#contains(...1)",
        "body": "{\r\n    for (final Collection\u003cE\u003e item : all) {\r\n        if (item.contains(obj)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.CompositeCollection",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty()",
    "visibility": "public",
    "body": "{\r\n    for (final Collection\u003cE\u003e item : all) {\r\n        if (!item.isEmpty()) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CompositeCollection\n  $r1 \u003d List all\u003e\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r4 \u003d Collection) $r3\n  $z1 \u003d r4.isEmpty()\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.CompositeCollection",
    "methodName": "iterator",
    "signature": "java.util.Iterator iterator()",
    "visibility": "public",
    "body": "{\r\n    if (all.isEmpty()) {\r\n        return EmptyIterator.\u003cE\u003eemptyIterator();\r\n    }\r\n    final IteratorChain\u003cE\u003e chain \u003d new IteratorChain\u003c\u003e();\r\n    all.forEach(item -\u003e chain.addIterator(item.iterator()));\r\n    return chain;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CompositeCollection\n  $r1 \u003d List all\u003e\n  $z0 \u003d $r1.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d EmptyIterator.emptyIterator()\n  return\n}",
      "B2 {\n  $r2 \u003d IteratorChain\n  new IteratorChain()\n  $r3 \u003d List all\u003e\n  $r4 \u003d CompositeCollection$lambda_iterator_0__46.bootstrap$($r2)\n  $r3.forEach($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.CompositeCollection",
    "methodName": "remove",
    "signature": "boolean remove(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (mutator \u003d\u003d null) {\r\n        throw new UnsupportedOperationException(\"remove() is not supported on CompositeCollection without a CollectionMutator strategy\");\r\n    }\r\n    return mutator.remove(this, all, obj);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CompositeCollection\n  Object\n  $r1 \u003d CompositeCollection$CollectionMutator mutator\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d UnsupportedOperationException\n  new UnsupportedOperationException(\"remove() is not supported on CompositeCollection without a CollectionMutator strategy\")\n  throw $r5\n}",
      "B2 {\n  $r4 \u003d CompositeCollection$CollectionMutator mutator\u003e\n  $r3 \u003d List all\u003e\n  $z0 \u003d $r4.remove(r0, $r3, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.CompositeCollection",
    "methodName": "removeAll",
    "signature": "boolean removeAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    if (CollectionUtils.isEmpty(coll)) {\r\n        return false;\r\n    }\r\n    boolean changed \u003d false;\r\n    for (final Collection\u003cE\u003e item : all) {\r\n        changed |\u003d item.removeAll(coll);\r\n    }\r\n    return changed;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B3 : If($z1 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  CompositeCollection\n  Collection\n  $z0 \u003d CollectionUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  z3 \u003d 0\n  $r2 \u003d List all\u003e\n  $r3 \u003d $r2.iterator()\n}",
      "B3 {\n  $z1 \u003d $r3.hasNext()\n  if ($z1 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d $r3.next()\n  r5 \u003d Collection) $r4\n  $z2 \u003d r5.removeAll(r0)\n  z3 \u003d z3 | $z2\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.CompositeCollection",
    "methodName": "removeIf",
    "signature": "boolean removeIf(java.util.function.Predicate)",
    "visibility": "public",
    "body": "{\r\n    if (Objects.isNull(filter)) {\r\n        return false;\r\n    }\r\n    boolean changed \u003d false;\r\n    for (final Collection\u003cE\u003e item : all) {\r\n        changed |\u003d item.removeIf(filter);\r\n    }\r\n    return changed;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B3 : If($z1 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  CompositeCollection\n  Predicate\n  $z0 \u003d Objects.isNull(r0)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  z3 \u003d 0\n  $r2 \u003d List all\u003e\n  $r3 \u003d $r2.iterator()\n}",
      "B3 {\n  $z1 \u003d $r3.hasNext()\n  if ($z1 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d $r3.next()\n  r5 \u003d Collection) $r4\n  $z2 \u003d r5.removeIf(r0)\n  z3 \u003d z3 | $z2\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.CompositeCollection",
    "methodName": "retainAll",
    "signature": "boolean retainAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    boolean changed \u003d false;\r\n    if (coll !\u003d null) {\r\n        for (final Collection\u003cE\u003e item : all) {\r\n            changed |\u003d item.retainAll(coll);\r\n        }\r\n    }\r\n    return changed;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B4",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CompositeCollection\n  Collection\n  z2 \u003d 0\n  if (r0 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r2 \u003d List all\u003e\n  $r3 \u003d $r2.iterator()\n}",
      "B2 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d $r3.next()\n  r5 \u003d Collection) $r4\n  $z1 \u003d r5.retainAll(r0)\n  z2 \u003d z2 | $z1\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.CompositeCollection",
    "methodName": "size",
    "signature": "int size()",
    "visibility": "public",
    "body": "{\r\n    int size \u003d 0;\r\n    for (final Collection\u003cE\u003e item : all) {\r\n        size +\u003d item.size();\r\n    }\r\n    return size;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CompositeCollection\n  i1 \u003d 0\n  $r1 \u003d List all\u003e\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r4 \u003d Collection) $r3\n  $i0 \u003d r4.size()\n  i1 \u003d i1 + $i0\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.CompositeCollection",
    "methodName": "toArray",
    "signature": "java.lang.Object[] toArray()",
    "visibility": "public",
    "body": "{\r\n    final Object[] result \u003d new Object[size()];\r\n    int i \u003d 0;\r\n    for (final Iterator\u003cE\u003e it \u003d iterator(); it.hasNext(); i++) {\r\n        result[i] \u003d it.next();\r\n    }\r\n    return result;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CompositeCollection\n  $i0 \u003d r0.size()\n  r1 \u003d Object)[$i0]\n  i1 \u003d 0\n  $r2 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r1[i1] \u003d $r3\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CompositeCollection#size(...0)",
        "body": "{\r\n    int size \u003d 0;\r\n    for (final Collection\u003cE\u003e item : all) {\r\n        size +\u003d item.size();\r\n    }\r\n    return size;\r\n}"
      },
      {
        "name": "CompositeCollection#iterator(...0)",
        "body": "{\r\n    if (all.isEmpty()) {\r\n        return EmptyIterator.\u003cE\u003eemptyIterator();\r\n    }\r\n    final IteratorChain\u003cE\u003e chain \u003d new IteratorChain\u003c\u003e();\r\n    all.forEach(item -\u003e chain.addIterator(item.iterator()));\r\n    return chain;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.CompositeCollection",
    "methodName": "toArray",
    "signature": "java.lang.Object[] toArray(java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 12,
    "edges": 15,
    "cc": 5,
    "flowSummary": [
      "B0 : If($i1 \u003c $i0) → B1 | else → B2",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B9",
      "B6 : If($z0 \u003d\u003d 0) → B7 | else → B8",
      "B9 : If($i2 \u003c\u003d $i0) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  CompositeCollection\n  Object[]\n  $i0 \u003d r0.size()\n  $i1 \u003d lengthof r1\n  if ($i1 \u003c $i0) goto B1 else B2\n}",
      "B1 {\n  r11 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r1.getClass()\n  $r3 \u003d $r2.getComponentType()\n  $r4 \u003d Array.newInstance($r3, $i0)\n  r11 \u003d Object[]) $r4\n}",
      "B3 {\n  i4 \u003d 0\n  $r5 \u003d List all\u003e\n  $r6 \u003d $r5.iterator()\n}",
      "B4 {\n  $z1 \u003d $r6.hasNext()\n  if ($z1 \u003d\u003d 0) goto B5 else B9\n}",
      "B5 {\n  $r7 \u003d $r6.next()\n  r8 \u003d Collection) $r7\n  $r9 \u003d r8.iterator()\n}",
      "B6 {\n  $z0 \u003d $r9.hasNext()\n  if ($z0 \u003d\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $r10 \u003d $r9.next()\n  $i3 \u003d i4\n  i4 \u003d i4 + 1\n  r11[$i3] \u003d $r10\n  goto B6\n}",
      "B8 {\n  goto B4\n}",
      "B9 {\n  $i2 \u003d lengthof r11\n  if ($i2 \u003c\u003d $i0) goto B10 else B11\n}",
      "B10 {\n  r11[$i0] \u003d null\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B6",
      "B8 --\u003e B4",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.IndexedCollection",
    "methodName": "add",
    "signature": "boolean add(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  IndexedCollection\n  Object\n  $z0 \u003d r0.add(r1)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.addToIndex(r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.IndexedCollection",
    "methodName": "addAll",
    "signature": "boolean addAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    boolean changed \u003d false;\r\n    for (final C c : coll) {\r\n        changed |\u003d add(c);\r\n    }\r\n    return changed;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  IndexedCollection\n  Collection\n  z2 \u003d 0\n  $r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d $r1.next()\n  $z1 \u003d r3.add($r2)\n  z2 \u003d z2 | $z1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IndexedCollection#add(...1)",
        "body": "{\r\n    final boolean added \u003d super.add(object);\r\n    if (added) {\r\n        addToIndex(object);\r\n    }\r\n    return added;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.IndexedCollection",
    "methodName": "addToIndex",
    "signature": "void addToIndex(java.lang.Object)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B3",
      "B1 : If($z1 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  IndexedCollection\n  Object\n  $r2 \u003d Transformer keyTransformer\u003e\n  $r3 \u003d $r2.apply(r1)\n  $z0 \u003d IndexedCollection: boolean uniqueIndex\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $r5 \u003d MultiMap index\u003e\n  $z1 \u003d $r5.containsKey($r3)\n  if ($z1 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Duplicate key in uniquely indexed collection.\")\n  throw $r6\n}",
      "B3 {\n  $r4 \u003d MultiMap index\u003e\n  $r4.put($r3, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.IndexedCollection",
    "methodName": "containsAll",
    "signature": "boolean containsAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    for (final Object o : coll) {\r\n        if (!contains(o)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  IndexedCollection\n  Collection\n  $r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d $r1.next()\n  $z1 \u003d r3.contains($r2)\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IndexedCollection#contains(...1)",
        "body": "{\r\n    return index.containsKey(keyTransformer.apply((C) object));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.IndexedCollection",
    "methodName": "get",
    "signature": "java.lang.Object get(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  IndexedCollection\n  Object\n  $r2 \u003d MultiMap index\u003e\n  $r3 \u003d $r2.get(r1)\n  r4 \u003d Collection) $r3\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d null\n  goto B3\n}",
      "B2 {\n  $r5 \u003d r4.iterator()\n  $r6 \u003d $r5.next()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.IndexedCollection",
    "methodName": "reindex",
    "signature": "void reindex()",
    "visibility": "public",
    "body": "{\r\n    index.clear();\r\n    for (final C c : decorated()) {\r\n        addToIndex(c);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  IndexedCollection\n  $r1 \u003d MultiMap index\u003e\n  $r1.clear()\n  $r2 \u003d r0.decorated()\n  $r3 \u003d $r2.iterator()\n}",
      "B1 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d $r3.next()\n  r0.addToIndex($r4)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IndexedCollection#addToIndex(...1)",
        "body": "{\r\n    final K key \u003d keyTransformer.apply(object);\r\n    if (uniqueIndex \u0026\u0026 index.containsKey(key)) {\r\n        throw new IllegalArgumentException(\"Duplicate key in uniquely indexed collection.\");\r\n    }\r\n    index.put(key, object);\r\n}"
      },
      {
        "name": "IndexedCollection#decorated(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.IndexedCollection",
    "methodName": "remove",
    "signature": "boolean remove(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final boolean removed \u003d super.remove(object);\r\n    if (removed) {\r\n        removeFromIndex((C) object);\r\n    }\r\n    return removed;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  IndexedCollection\n  Object\n  $z0 \u003d r0.remove(r1)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.removeFromIndex(r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IndexedCollection#removeFromIndex(...1)",
        "body": "{\r\n    index.remove(keyTransformer.apply(object));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.IndexedCollection",
    "methodName": "removeAll",
    "signature": "boolean removeAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    boolean changed \u003d false;\r\n    for (final Object o : coll) {\r\n        changed |\u003d remove(o);\r\n    }\r\n    return changed;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  IndexedCollection\n  Collection\n  z2 \u003d 0\n  $r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d $r1.next()\n  $z1 \u003d r3.remove($r2)\n  z2 \u003d z2 | $z1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IndexedCollection#remove(...1)",
        "body": "{\r\n    final boolean removed \u003d super.remove(object);\r\n    if (removed) {\r\n        removeFromIndex((C) object);\r\n    }\r\n    return removed;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.IndexedCollection",
    "methodName": "removeIf",
    "signature": "boolean removeIf(java.util.function.Predicate)",
    "visibility": "public",
    "body": "{\r\n    if (Objects.isNull(filter)) {\r\n        return false;\r\n    }\r\n    boolean changed \u003d false;\r\n    final Iterator\u003cC\u003e it \u003d iterator();\r\n    while (it.hasNext()) {\r\n        if (filter.test(it.next())) {\r\n            it.remove();\r\n            changed \u003d true;\r\n        }\r\n    }\r\n    if (changed) {\r\n        reindex();\r\n    }\r\n    return changed;\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B3 : If($z3 \u003d\u003d 0) → B4 | else → B6",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B3",
      "B6 : If(z5 \u003d\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  IndexedCollection\n  Predicate\n  $z0 \u003d Objects.isNull(r0)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  z2 \u003d 0\n  z5 \u003d 0\n  z4 \u003d 0\n  $r2 \u003d r1.iterator()\n}",
      "B3 {\n  $z3 \u003d $r2.hasNext()\n  if ($z3 \u003d\u003d 0) goto B4 else B6\n}",
      "B4 {\n  $r3 \u003d $r2.next()\n  $z1 \u003d r0.test($r3)\n  if ($z1 \u003d\u003d 0) goto B5 else B3\n}",
      "B5 {\n  $r2.remove()\n  z2 \u003d 1\n  z5 \u003d 1\n  z4 \u003d 1\n  goto B3\n}",
      "B6 {\n  if (z5 \u003d\u003d 0) goto B7 else B8\n}",
      "B7 {\n  r1.reindex()\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e B3",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IndexedCollection#iterator(...0)",
        "body": "(source not found)"
      },
      {
        "name": "IndexedCollection#reindex(...0)",
        "body": "{\r\n    index.clear();\r\n    for (final C c : decorated()) {\r\n        addToIndex(c);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.IndexedCollection",
    "methodName": "retainAll",
    "signature": "boolean retainAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    final boolean changed \u003d super.retainAll(coll);\r\n    if (changed) {\r\n        reindex();\r\n    }\r\n    return changed;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  IndexedCollection\n  Collection\n  $z0 \u003d r0.retainAll(r1)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.reindex()\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IndexedCollection#reindex(...0)",
        "body": "{\r\n    index.clear();\r\n    for (final C c : decorated()) {\r\n        addToIndex(c);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.PredicatedCollection",
    "methodName": "addAll",
    "signature": "boolean addAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    for (final E item : coll) {\r\n        validate(item);\r\n    }\r\n    return decorated().addAll(coll);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  PredicatedCollection\n  Collection\n  $r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d $r1.next()\n  r2.validate($r4)\n  goto B1\n}",
      "B3 {\n  $r3 \u003d r2.decorated()\n  $z1 \u003d $r3.addAll(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PredicatedCollection#validate(...1)",
        "body": "{\r\n    if (!predicate.test(object)) {\r\n        throw new IllegalArgumentException(\"Cannot add Object \u0027\" + object + \"\u0027 - Predicate \u0027\" + predicate + \"\u0027 rejected it\");\r\n    }\r\n}"
      },
      {
        "name": "PredicatedCollection#decorated(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.PredicatedCollection",
    "methodName": "validate",
    "signature": "void validate(java.lang.Object)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PredicatedCollection\n  Object\n  $r2 \u003d Predicate predicate\u003e\n  $z0 \u003d $r2.test(r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IllegalArgumentException\n  $r4 \u003d String.valueOf(r1)\n  $r5 \u003d Predicate predicate\u003e\n  $r6 \u003d String.valueOf($r5)\n  $r7 \u003d dynInvoke makeConcatWithConstants($r4, $r6)\n  new IllegalArgumentException($r7)\n  throw $r3\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.SynchronizedCollection",
    "methodName": "add",
    "signature": "boolean add(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedCollection\n  Object\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $z0 \u003d $r2.add(r3)\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.SynchronizedCollection",
    "methodName": "addAll",
    "signature": "boolean addAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return decorated().addAll(coll);\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedCollection\n  Collection\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $z0 \u003d $r2.addAll(r3)\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedCollection#decorated(...0)",
        "body": "{\r\n    return collection;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.SynchronizedCollection",
    "methodName": "clear",
    "signature": "void clear()",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        decorated().clear();\r\n    }\r\n}",
    "nodes": 9,
    "edges": 13,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedCollection\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $r2.clear()\n  exitmonitor $r1\n  goto B2\n}",
      "B1 {\n  $r3 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r3\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedCollection#decorated(...0)",
        "body": "{\r\n    return collection;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.SynchronizedCollection",
    "methodName": "contains",
    "signature": "boolean contains(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return decorated().contains(object);\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedCollection\n  Object\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $z0 \u003d $r2.contains(r3)\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedCollection#decorated(...0)",
        "body": "{\r\n    return collection;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.SynchronizedCollection",
    "methodName": "containsAll",
    "signature": "boolean containsAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return decorated().containsAll(coll);\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedCollection\n  Collection\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $z0 \u003d $r2.containsAll(r3)\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedCollection#decorated(...0)",
        "body": "{\r\n    return collection;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.SynchronizedCollection",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        if (object \u003d\u003d this) {\r\n            return true;\r\n        }\r\n        return object \u003d\u003d this || decorated().equals(object);\r\n    }\r\n}",
    "nodes": 16,
    "edges": 29,
    "cc": 15,
    "flowSummary": [
      "B1 : If(r2 !\u003d r0) → B2 | else → B4",
      "B4 : If(r2 \u003d\u003d r0) → B5 | else → B8",
      "B7 : If($z0 \u003d\u003d 0) → B8 | else → B10"
    ],
    "blockList": [
      "B0 {\n  SynchronizedCollection\n  Object\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  if (r2 !\u003d r0) goto B1 else B2\n}",
      "B1 {\n  exitmonitor $r1\n  return\n}",
      "B2 {\n  if (r2 \u003d\u003d r0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d r0.decorated()\n  $z0 \u003d $r3.equals(r2)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $z1 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z1 \u003d 0\n}",
      "B6 {\n  exitmonitor $r1\n  return\n}",
      "B7 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedCollection#decorated(...0)",
        "body": "{\r\n    return collection;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.SynchronizedCollection",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return decorated().hashCode();\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedCollection\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $i0 \u003d $r2.hashCode()\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r3 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r3\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedCollection#decorated(...0)",
        "body": "{\r\n    return collection;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.SynchronizedCollection",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty()",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return decorated().isEmpty();\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedCollection\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $z0 \u003d $r2.isEmpty()\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r3 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r3\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedCollection#decorated(...0)",
        "body": "{\r\n    return collection;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.SynchronizedCollection",
    "methodName": "remove",
    "signature": "boolean remove(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return decorated().remove(object);\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedCollection\n  Object\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $z0 \u003d $r2.remove(r3)\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedCollection#decorated(...0)",
        "body": "{\r\n    return collection;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.SynchronizedCollection",
    "methodName": "removeAll",
    "signature": "boolean removeAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return decorated().removeAll(coll);\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedCollection\n  Collection\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $z0 \u003d $r2.removeAll(r3)\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedCollection#decorated(...0)",
        "body": "{\r\n    return collection;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.SynchronizedCollection",
    "methodName": "removeIf",
    "signature": "boolean removeIf(java.util.function.Predicate)",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return decorated().removeIf(filter);\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedCollection\n  Predicate\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $z0 \u003d $r2.removeIf(r3)\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedCollection#decorated(...0)",
        "body": "{\r\n    return collection;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.SynchronizedCollection",
    "methodName": "retainAll",
    "signature": "boolean retainAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return decorated().retainAll(coll);\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedCollection\n  Collection\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $z0 \u003d $r2.retainAll(r3)\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedCollection#decorated(...0)",
        "body": "{\r\n    return collection;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.SynchronizedCollection",
    "methodName": "size",
    "signature": "int size()",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return decorated().size();\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedCollection\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $i0 \u003d $r2.size()\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r3 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r3\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedCollection#decorated(...0)",
        "body": "{\r\n    return collection;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.SynchronizedCollection",
    "methodName": "toArray",
    "signature": "java.lang.Object[] toArray()",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return decorated().toArray();\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedCollection\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $r3 \u003d $r2.toArray()\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedCollection#decorated(...0)",
        "body": "{\r\n    return collection;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.SynchronizedCollection",
    "methodName": "toArray",
    "signature": "java.lang.Object[] toArray(java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedCollection\n  Object[]\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $r4 \u003d $r2.toArray(r3)\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r5 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r5\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.SynchronizedCollection",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return decorated().toString();\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedCollection\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $r3 \u003d $r2.toString()\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedCollection#decorated(...0)",
        "body": "{\r\n    return collection;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.TransformedCollection",
    "methodName": "transformedCollection",
    "signature": "org.apache.commons.collections4.collection.TransformedCollection transformedCollection(java.util.Collection,org.apache.commons.collections4.Transformer)",
    "visibility": "public",
    "body": "{\r\n    final TransformedCollection\u003cE\u003e decorated \u003d new TransformedCollection\u003c\u003e(collection, transformer);\r\n    // null collection \u0026 transformer are disallowed by the constructor call above\r\n    if (!collection.isEmpty()) {\r\n        // collection is of type E\r\n        @SuppressWarnings(\"unchecked\")\r\n        final E[] // NOPMD - false positive for generics\r\n        values \u003d (E[]) collection.toArray();\r\n        collection.clear();\r\n        for (final E value : values) {\r\n            decorated.decorated().add(transformer.apply(value));\r\n        }\r\n    }\r\n    return decorated;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B4",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Transformer\n  $r0 \u003d TransformedCollection\n  new TransformedCollection(r1, r2)\n  $z0 \u003d r1.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $r3 \u003d r1.toArray()\n  r1.clear()\n  i0 \u003d lengthof $r3\n  i1 \u003d 0\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B4\n}",
      "B3 {\n  r4 \u003d $r3[i1]\n  $r5 \u003d $r0.decorated()\n  $r6 \u003d r2.apply(r4)\n  $r5.add($r6)\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.TransformedCollection",
    "methodName": "transform",
    "signature": "java.util.Collection transform(java.util.Collection)",
    "visibility": "protected",
    "body": "{\r\n    final List\u003cE\u003e list \u003d new ArrayList\u003c\u003e(coll.size());\r\n    for (final E item : coll) {\r\n        list.add(transform(item));\r\n    }\r\n    return list;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TransformedCollection\n  Collection\n  $r0 \u003d ArrayList\n  $i0 \u003d r1.size()\n  new ArrayList($i0)\n  $r2 \u003d r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  $r5 \u003d r4.transform($r3)\n  $r0.add($r5)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TransformedCollection#transform(...1)",
        "body": "{\r\n    final List\u003cE\u003e list \u003d new ArrayList\u003c\u003e(coll.size());\r\n    for (final E item : coll) {\r\n        list.add(transform(item));\r\n    }\r\n    return list;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.collection.UnmodifiableBoundedCollection",
    "methodName": "unmodifiableBoundedCollection",
    "signature": "org.apache.commons.collections4.BoundedCollection unmodifiableBoundedCollection(org.apache.commons.collections4.BoundedCollection)",
    "visibility": "public",
    "body": "{\r\n    if (coll instanceof Unmodifiable) {\r\n        // safe to upcast\r\n        @SuppressWarnings(\"unchecked\")\r\n        final BoundedCollection\u003cE\u003e tmpColl \u003d (BoundedCollection\u003cE\u003e) coll;\r\n        return tmpColl;\r\n    }\r\n    return new UnmodifiableBoundedCollection\u003c\u003e(coll);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BoundedCollection\n  $z0 \u003d Unmodifiable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableBoundedCollection\n  new UnmodifiableBoundedCollection(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.UnmodifiableBoundedCollection",
    "methodName": "unmodifiableBoundedCollection",
    "signature": "org.apache.commons.collections4.BoundedCollection unmodifiableBoundedCollection(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(collection, \"collection\");\r\n    // handle decorators\r\n    for (int i \u003d 0; i \u003c 1000; i++) {\r\n        // counter to prevent infinite looping\r\n        if (collection instanceof BoundedCollection) {\r\n            // normal loop exit\r\n            break;\r\n        }\r\n        if (collection instanceof AbstractCollectionDecorator) {\r\n            collection \u003d ((AbstractCollectionDecorator\u003cE\u003e) collection).decorated();\r\n        } else if (collection instanceof SynchronizedCollection) {\r\n            collection \u003d ((SynchronizedCollection\u003cE\u003e) collection).decorated();\r\n        }\r\n    }\r\n    if (!(collection instanceof BoundedCollection)) {\r\n        throw new IllegalArgumentException(\"Collection is not a bounded collection.\");\r\n    }\r\n    return new UnmodifiableBoundedCollection\u003c\u003e((BoundedCollection\u003cE\u003e) collection);\r\n}",
    "nodes": 12,
    "edges": 15,
    "cc": 5,
    "flowSummary": [
      "B1 : If(i0 \u003e\u003d 1000) → B2 | else → B9",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4",
      "B4 : If($z2 \u003d\u003d 0) → B5 | else → B6",
      "B6 : If($z3 \u003d\u003d 0) → B7 | else → B8",
      "B9 : If($z0 !\u003d 0) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Objects.requireNonNull(r5, \"collection\")\n  i0 \u003d 0\n}",
      "B1 {\n  if (i0 \u003e\u003d 1000) goto B2 else B9\n}",
      "B2 {\n  $z1 \u003d BoundedCollection\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  goto B9\n}",
      "B4 {\n  $z2 \u003d AbstractCollectionDecorator\n  if ($z2 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r4 \u003d AbstractCollectionDecorator) r5\n  r5 \u003d $r4.decorated()\n  goto B8\n}",
      "B6 {\n  $z3 \u003d SynchronizedCollection\n  if ($z3 \u003d\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $r3 \u003d SynchronizedCollection) r5\n  r5 \u003d $r3.decorated()\n}",
      "B8 {\n  i0 \u003d i0 + 1\n  goto B1\n}",
      "B9 {\n  $z0 \u003d BoundedCollection\n  if ($z0 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Collection is not a bounded collection.\")\n  throw $r2\n}",
      "B11 {\n  $r0 \u003d UnmodifiableBoundedCollection\n  $r1 \u003d BoundedCollection) r5\n  new UnmodifiableBoundedCollection($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B9",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B9",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B1",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.collection.UnmodifiableCollection",
    "methodName": "unmodifiableCollection",
    "signature": "java.util.Collection unmodifiableCollection(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    if (coll instanceof Unmodifiable) {\r\n        // safe to upcast\r\n        @SuppressWarnings(\"unchecked\")\r\n        final Collection\u003cT\u003e tmpColl \u003d (Collection\u003cT\u003e) coll;\r\n        return tmpColl;\r\n    }\r\n    return new UnmodifiableCollection\u003c\u003e(coll);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Collection\n  $z0 \u003d Unmodifiable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableCollection\n  new UnmodifiableCollection(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "addAll",
    "signature": "boolean addAll(java.util.Collection,java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Object[]\n  Objects.requireNonNull(r0, \"collection\")\n  Objects.requireNonNull(r1, \"elements\")\n  z1 \u003d 0\n  i0 \u003d lengthof r1\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r1[i1]\n  $z0 \u003d r0.add(r2)\n  z1 \u003d z1 | $z0\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "addAll",
    "signature": "boolean addAll(java.util.Collection,java.util.Enumeration)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(collection, \"collection\");\r\n    Objects.requireNonNull(enumeration, \"enumeration\");\r\n    boolean changed \u003d false;\r\n    while (enumeration.hasMoreElements()) {\r\n        changed |\u003d collection.add(enumeration.nextElement());\r\n    }\r\n    return changed;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Enumeration\n  Objects.requireNonNull(r0, \"collection\")\n  Objects.requireNonNull(r1, \"enumeration\")\n  z2 \u003d 0\n}",
      "B1 {\n  $z0 \u003d r1.hasMoreElements()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r1.nextElement()\n  $z1 \u003d r0.add($r2)\n  z2 \u003d z2 | $z1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "addAll",
    "signature": "boolean addAll(java.util.Collection,java.lang.Iterable)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(collection, \"collection\");\r\n    Objects.requireNonNull(iterable, \"iterable\");\r\n    if (iterable instanceof Collection\u003c?\u003e) {\r\n        return collection.addAll((Collection\u003c? extends C\u003e) iterable);\r\n    }\r\n    return addAll(collection, iterable.iterator());\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Iterable\n  Objects.requireNonNull(r0, \"collection\")\n  Objects.requireNonNull(r1, \"iterable\")\n  $z0 \u003d Collection\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Collection) r1\n  $z2 \u003d r0.addAll($r3)\n  return\n}",
      "B2 {\n  $r2 \u003d r1.iterator()\n  $z1 \u003d CollectionUtils.addAll(r0, $r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionUtils#addAll(...2)",
        "body": "{\r\n    Objects.requireNonNull(collection, \"collection\");\r\n    Objects.requireNonNull(elements, \"elements\");\r\n    boolean changed \u003d false;\r\n    for (final C element : elements) {\r\n        changed |\u003d collection.add(element);\r\n    }\r\n    return changed;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "addAll",
    "signature": "boolean addAll(java.util.Collection,java.util.Iterator)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(collection, \"collection\");\r\n    Objects.requireNonNull(iterator, \"iterator\");\r\n    boolean changed \u003d false;\r\n    while (iterator.hasNext()) {\r\n        changed |\u003d collection.add(iterator.next());\r\n    }\r\n    return changed;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Iterator\n  Objects.requireNonNull(r0, \"collection\")\n  Objects.requireNonNull(r1, \"iterator\")\n  z2 \u003d 0\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  $z1 \u003d r0.add($r2)\n  z2 \u003d z2 | $z1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "addIgnoreNull",
    "signature": "boolean addIgnoreNull(java.util.Collection,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Object\n  Objects.requireNonNull(r0, \"collection\")\n  if (r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d r0.add(r1)\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "checkIndexBounds",
    "signature": "void checkIndexBounds(int)",
    "visibility": "package",
    "body": "{\r\n    if (index \u003c 0) {\r\n        throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + index);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 \u003e\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  if (i0 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r0 \u003d IndexOutOfBoundsException\n  $r1 \u003d dynInvoke makeConcatWithConstants(i0)\n  new IndexOutOfBoundsException($r1)\n  throw $r0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "collate",
    "signature": "java.util.List collate(java.lang.Iterable,java.lang.Iterable,java.util.Comparator,boolean)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(iterableA, \"iterableA\");\r\n    Objects.requireNonNull(iterableB, \"iterableB\");\r\n    Objects.requireNonNull(comparator, \"comparator\");\r\n    // if both Iterables are a Collection, we can estimate the size\r\n    final int totalSize \u003d iterableA instanceof Collection\u003c?\u003e \u0026\u0026 iterableB instanceof Collection\u003c?\u003e ? Math.max(1, ((Collection\u003c?\u003e) iterableA).size() + ((Collection\u003c?\u003e) iterableB).size()) : 10;\r\n    final Iterator\u003cO\u003e iterator \u003d new CollatingIterator\u003c\u003e(comparator, iterableA.iterator(), iterableB.iterator());\r\n    if (includeDuplicates) {\r\n        return IteratorUtils.toList(iterator, totalSize);\r\n    }\r\n    final ArrayList\u003cO\u003e mergedList \u003d new ArrayList\u003c\u003e(totalSize);\r\n    O lastItem \u003d null;\r\n    while (iterator.hasNext()) {\r\n        final O item \u003d iterator.next();\r\n        if (lastItem \u003d\u003d null || !lastItem.equals(item)) {\r\n            mergedList.add(item);\r\n        }\r\n        lastItem \u003d item;\r\n    }\r\n    mergedList.trimToSize();\r\n    return mergedList;\r\n}",
    "nodes": 13,
    "edges": 17,
    "cc": 6,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B3",
      "B1 : If($z4 \u003d\u003d 0) → B2 | else → B3",
      "B4 : If(z1 \u003d\u003d 0) → B5 | else → B6",
      "B7 : If($z2 \u003d\u003d 0) → B8 | else → B12",
      "B8 : If(r11 \u003d\u003d null) → B9 | else → B10",
      "B9 : If($z3 !\u003d 0) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Iterable\n  Comparator\n  z1 :\u003d @parameter3: boolean\n  Objects.requireNonNull(r0, \"iterableA\")\n  Objects.requireNonNull(r1, \"iterableB\")\n  Objects.requireNonNull(r2, \"comparator\")\n  $z0 \u003d Collection\n  if ($z0 \u003d\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $z4 \u003d Collection\n  if ($z4 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d Collection) r0\n  $i0 \u003d $r6.size()\n  $r7 \u003d Collection) r1\n  $i1 \u003d $r7.size()\n  $i2 \u003d $i0 + $i1\n  $i3 \u003d Math.max(1, $i2)\n  goto B4\n}",
      "B3 {\n  $i3 \u003d 10\n}",
      "B4 {\n  $r8 \u003d CollatingIterator\n  $r9 \u003d r0.iterator()\n  $r10 \u003d r1.iterator()\n  new CollatingIterator(r2, $r9, $r10)\n  if (z1 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r5 \u003d IteratorUtils.toList($r8, $i3)\n  return\n}",
      "B6 {\n  $r3 \u003d ArrayList\n  new ArrayList($i3)\n  r11 \u003d null\n}",
      "B7 {\n  $z2 \u003d $r8.hasNext()\n  if ($z2 \u003d\u003d 0) goto B8 else B12\n}",
      "B8 {\n  $r4 \u003d $r8.next()\n  if (r11 \u003d\u003d null) goto B9 else B10\n}",
      "B9 {\n  $z3 \u003d r11.equals($r4)\n  if ($z3 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  $r3.add($r4)\n}",
      "B11 {\n  r11 \u003d $r4\n  goto B7\n}",
      "B12 {\n  $r3.trimToSize()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B7",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "collect",
    "signature": "java.util.Collection collect(java.lang.Iterable,org.apache.commons.collections4.Transformer,java.util.Collection)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Transformer\n  Collection\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0.iterator()\n  $r4 \u003d CollectionUtils.collect($r2, r3, r1)\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "collect",
    "signature": "java.util.Collection collect(java.lang.Iterable,org.apache.commons.collections4.Transformer)",
    "visibility": "public",
    "body": "{\r\n    int size \u003d 0;\r\n    if (null !\u003d inputCollection) {\r\n        size \u003d inputCollection instanceof Collection\u003c?\u003e ? ((Collection\u003c?\u003e) inputCollection).size() : 0;\r\n    }\r\n    final Collection\u003cO\u003e answer \u003d size \u003d\u003d 0 ? new ArrayList\u003c\u003e() : new ArrayList\u003c\u003e(size);\r\n    return collect(inputCollection, transformer, answer);\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B0 : If(null \u003d\u003d r0) → B1 | else → B5",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3",
      "B5 : If(i0 !\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Transformer\n  i0 \u003d 0\n  if (null \u003d\u003d r0) goto B1 else B5\n}",
      "B1 {\n  $z0 \u003d Collection\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d Collection) r0\n  $i1 \u003d $r3.size()\n  goto B4\n}",
      "B3 {\n  $i1 \u003d 0\n}",
      "B4 {\n  i0 \u003d $i1\n}",
      "B5 {\n  if (i0 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $r4 \u003d ArrayList\n  new ArrayList()\n  goto B8\n}",
      "B7 {\n  $r4 \u003d ArrayList\n  new ArrayList(i0)\n}",
      "B8 {\n  $r2 \u003d CollectionUtils.collect(r0, r1, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionUtils#collect(...3)",
        "body": "{\r\n    if (inputCollection !\u003d null) {\r\n        return collect(inputCollection.iterator(), transformer, outputCollection);\r\n    }\r\n    return outputCollection;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "collect",
    "signature": "java.util.Collection collect(java.util.Iterator,org.apache.commons.collections4.Transformer,java.util.Collection)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 7,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B4",
      "B1 : If(r2 \u003d\u003d null) → B2 | else → B4",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  Transformer\n  Collection\n  if (r0 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  if (r2 \u003d\u003d null) goto B2 else B4\n}",
      "B2 {\n  $z0 \u003d r0.hasNext()\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d r0.next()\n  $r4 \u003d r2.apply($r3)\n  r1.add($r4)\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "containsAll",
    "signature": "boolean containsAll(java.util.Collection,java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(coll1, \"coll1\");\r\n    Objects.requireNonNull(coll2, \"coll2\");\r\n    if (coll2.isEmpty()) {\r\n        return true;\r\n    }\r\n    final Set\u003cObject\u003e elementsAlreadySeen \u003d new HashSet\u003c\u003e();\r\n    for (final Object nextElement : coll2) {\r\n        if (elementsAlreadySeen.contains(nextElement)) {\r\n            continue;\r\n        }\r\n        boolean foundCurrentElement \u003d false;\r\n        for (final Object p : coll1) {\r\n            elementsAlreadySeen.add(p);\r\n            if (Objects.equals(nextElement, p)) {\r\n                foundCurrentElement \u003d true;\r\n                break;\r\n            }\r\n        }\r\n        if (!foundCurrentElement) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 15,
    "edges": 18,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B3 : If($z4 \u003d\u003d 0) → B4 | else → B14",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B6",
      "B7 : If($z2 \u003d\u003d 0) → B8 | else → B11",
      "B8 : If($z3 \u003d\u003d 0) → B9 | else → B10",
      "B11 : If(z5 !\u003d 0) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Collection\n  Objects.requireNonNull(r0, \"coll1\")\n  Objects.requireNonNull(r1, \"coll2\")\n  $z0 \u003d r1.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d HashSet\n  new HashSet()\n  $r3 \u003d r1.iterator()\n}",
      "B3 {\n  $z4 \u003d $r3.hasNext()\n  if ($z4 \u003d\u003d 0) goto B4 else B14\n}",
      "B4 {\n  $r4 \u003d $r3.next()\n  $z1 \u003d $r2.contains($r4)\n  if ($z1 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  goto B3\n}",
      "B6 {\n  z5 \u003d 0\n  $r5 \u003d r0.iterator()\n}",
      "B7 {\n  $z2 \u003d $r5.hasNext()\n  if ($z2 \u003d\u003d 0) goto B8 else B11\n}",
      "B8 {\n  $r6 \u003d $r5.next()\n  $r2.add($r6)\n  $z3 \u003d Objects.equals($r4, $r6)\n  if ($z3 \u003d\u003d 0) goto B9 else B10\n}",
      "B9 {\n  z5 \u003d 1\n  goto B11\n}",
      "B10 {\n  goto B7\n}",
      "B11 {\n  if (z5 !\u003d 0) goto B12 else B13\n}",
      "B12 {\n  return\n}",
      "B13 {\n  goto B3\n}",
      "B14 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B14",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B3",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B7",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B3",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "containsAny",
    "signature": "boolean containsAny(java.util.Collection,java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(coll1, \"coll1\");\r\n    Objects.requireNonNull(coll2, \"coll2\");\r\n    if (coll1.size() \u003c coll2.size()) {\r\n        for (final Object aColl1 : coll1) {\r\n            if (coll2.contains(aColl1)) {\r\n                return true;\r\n            }\r\n        }\r\n    } else {\r\n        for (final Object aColl2 : coll2) {\r\n            if (coll1.contains(aColl2)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 13,
    "edges": 15,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 \u003e\u003d $i1) → B1 | else → B7",
      "B2 : If($z2 \u003d\u003d 0) → B3 | else → B6",
      "B3 : If($z3 \u003d\u003d 0) → B4 | else → B5",
      "B8 : If($z0 \u003d\u003d 0) → B9 | else → B12",
      "B9 : If($z1 \u003d\u003d 0) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Collection\n  Objects.requireNonNull(r0, \"coll1\")\n  Objects.requireNonNull(r1, \"coll2\")\n  $i0 \u003d r0.size()\n  $i1 \u003d r1.size()\n  if ($i0 \u003e\u003d $i1) goto B1 else B7\n}",
      "B1 {\n  $r4 \u003d r0.iterator()\n}",
      "B2 {\n  $z2 \u003d $r4.hasNext()\n  if ($z2 \u003d\u003d 0) goto B3 else B6\n}",
      "B3 {\n  $r5 \u003d $r4.next()\n  $z3 \u003d r1.contains($r5)\n  if ($z3 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  goto B2\n}",
      "B6 {\n  goto B12\n}",
      "B7 {\n  $r2 \u003d r1.iterator()\n}",
      "B8 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B9 else B12\n}",
      "B9 {\n  $r3 \u003d $r2.next()\n  $z1 \u003d r0.contains($r3)\n  if ($z1 \u003d\u003d 0) goto B10 else B11\n}",
      "B10 {\n  return\n}",
      "B11 {\n  goto B8\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B7",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B2",
      "B6 --\u003e B12",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B12",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B8",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "containsAny",
    "signature": "boolean containsAny(java.util.Collection,java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 13,
    "edges": 15,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 \u003e\u003d $i1) → B1 | else → B7",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B6",
      "B3 : If($z2 \u003d\u003d 0) → B4 | else → B5",
      "B8 : If(i3 \u003e\u003d i2) → B9 | else → B12",
      "B9 : If($z0 \u003d\u003d 0) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Object[]\n  Objects.requireNonNull(r0, \"coll1\")\n  Objects.requireNonNull(r1, \"coll2\")\n  $i0 \u003d r0.size()\n  $i1 \u003d lengthof r1\n  if ($i0 \u003e\u003d $i1) goto B1 else B7\n}",
      "B1 {\n  $r3 \u003d r0.iterator()\n}",
      "B2 {\n  $z1 \u003d $r3.hasNext()\n  if ($z1 \u003d\u003d 0) goto B3 else B6\n}",
      "B3 {\n  $r4 \u003d $r3.next()\n  $z2 \u003d ArrayUtils.contains(r1, $r4)\n  if ($z2 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  goto B2\n}",
      "B6 {\n  goto B12\n}",
      "B7 {\n  i2 \u003d lengthof r1\n  i3 \u003d 0\n}",
      "B8 {\n  if (i3 \u003e\u003d i2) goto B9 else B12\n}",
      "B9 {\n  r2 \u003d r1[i3]\n  $z0 \u003d r0.contains(r2)\n  if ($z0 \u003d\u003d 0) goto B10 else B11\n}",
      "B10 {\n  return\n}",
      "B11 {\n  i3 \u003d i3 + 1\n  goto B8\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B7",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B2",
      "B6 --\u003e B12",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B12",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B8",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "countMatches",
    "signature": "int countMatches(java.lang.Iterable,org.apache.commons.collections4.Predicate)",
    "visibility": "public",
    "body": "{\r\n    return predicate \u003d\u003d null ? 0 : (int) IterableUtils.countMatches(input, predicate);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Predicate\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d 0\n  goto B3\n}",
      "B2 {\n  $l0 \u003d IterableUtils.countMatches(r1, r0)\n  $i1 \u003d (int) $l0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "disjunction",
    "signature": "java.util.Collection disjunction(java.lang.Iterable,java.lang.Iterable)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(a, \"a\");\r\n    Objects.requireNonNull(b, \"b\");\r\n    final SetOperationCardinalityHelper\u003cO\u003e helper \u003d new SetOperationCardinalityHelper\u003c\u003e(a, b);\r\n    for (final O obj : helper) {\r\n        helper.setCardinality(obj, helper.max(obj) - helper.min(obj));\r\n    }\r\n    return helper.list();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Iterable\n  Objects.requireNonNull(r0, \"a\")\n  Objects.requireNonNull(r1, \"b\")\n  $r2 \u003d CollectionUtils$SetOperationCardinalityHelper\n  new CollectionUtils$SetOperationCardinalityHelper(r0, r1)\n  $r3 \u003d $r2.iterator()\n}",
      "B1 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d $r3.next()\n  $i0 \u003d $r2.max($r5)\n  $i1 \u003d $r2.min($r5)\n  $i2 \u003d $i0 - $i1\n  $r2.setCardinality($r5, $i2)\n  goto B1\n}",
      "B3 {\n  $r4 \u003d $r2.list()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "emptyIfNull",
    "signature": "java.util.Collection emptyIfNull(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    return collection \u003d\u003d null ? emptyCollection() : collection;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Collection\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d CollectionUtils.emptyCollection()\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionUtils#emptyCollection(...0)",
        "body": "{\r\n    return EMPTY_COLLECTION;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "exists",
    "signature": "boolean exists(java.lang.Iterable,org.apache.commons.collections4.Predicate)",
    "visibility": "public",
    "body": "{\r\n    return predicate !\u003d null \u0026\u0026 IterableUtils.matchesAny(input, predicate);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Predicate\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d IterableUtils.matchesAny(r1, r0)\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "extractSingleton",
    "signature": "java.lang.Object extractSingleton(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(collection, \"collection\");\r\n    if (collection.size() !\u003d 1) {\r\n        throw new IllegalArgumentException(\"Can extract singleton only when collection size \u003d\u003d 1\");\r\n    }\r\n    return collection.iterator().next();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d 1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Objects.requireNonNull(r0, \"collection\")\n  $i0 \u003d r0.size()\n  if ($i0 \u003d\u003d 1) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Can extract singleton only when collection size \u003d\u003d 1\")\n  throw $r3\n}",
      "B2 {\n  $r1 \u003d r0.iterator()\n  $r2 \u003d $r1.next()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "filter",
    "signature": "boolean filter(java.lang.Iterable,org.apache.commons.collections4.Predicate)",
    "visibility": "public",
    "body": "{\r\n    boolean result \u003d false;\r\n    if (collection !\u003d null \u0026\u0026 predicate !\u003d null) {\r\n        for (final Iterator\u003cT\u003e it \u003d collection.iterator(); it.hasNext(); ) {\r\n            if (!predicate.test(it.next())) {\r\n                it.remove();\r\n                result \u003d true;\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}",
    "nodes": 7,
    "edges": 10,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B6",
      "B1 : If(r1 \u003d\u003d null) → B2 | else → B6",
      "B3 : If($z2 \u003d\u003d 0) → B4 | else → B6",
      "B4 : If($z0 !\u003d 0) → B5 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Predicate\n  z1 \u003d 0\n  if (r0 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  if (r1 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $r2 \u003d r0.iterator()\n}",
      "B3 {\n  $z2 \u003d $r2.hasNext()\n  if ($z2 \u003d\u003d 0) goto B4 else B6\n}",
      "B4 {\n  $r3 \u003d $r2.next()\n  $z0 \u003d r1.test($r3)\n  if ($z0 !\u003d 0) goto B5 else B3\n}",
      "B5 {\n  $r2.remove()\n  z1 \u003d 1\n  goto B3\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e B3",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "filterInverse",
    "signature": "boolean filterInverse(java.lang.Iterable,org.apache.commons.collections4.Predicate)",
    "visibility": "public",
    "body": "{\r\n    return filter(collection, predicate \u003d\u003d null ? null : PredicateUtils.notPredicate(predicate));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Predicate\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d null\n  goto B3\n}",
      "B2 {\n  $r2 \u003d PredicateUtils.notPredicate(r1)\n}",
      "B3 {\n  $z0 \u003d CollectionUtils.filter(r0, $r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionUtils#filter(...2)",
        "body": "{\r\n    boolean result \u003d false;\r\n    if (collection !\u003d null \u0026\u0026 predicate !\u003d null) {\r\n        for (final Iterator\u003cT\u003e it \u003d collection.iterator(); it.hasNext(); ) {\r\n            if (!predicate.test(it.next())) {\r\n                it.remove();\r\n                result \u003d true;\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "find",
    "signature": "java.lang.Object find(java.lang.Iterable,org.apache.commons.collections4.Predicate)",
    "visibility": "public",
    "body": "{\r\n    return predicate !\u003d null ? IterableUtils.find(collection, predicate) : null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Predicate\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d IterableUtils.find(r1, r0)\n  goto B3\n}",
      "B2 {\n  $r2 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "forAllButLastDo",
    "signature": "java.lang.Object forAllButLastDo(java.lang.Iterable,org.apache.commons.collections4.Closure)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Closure\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d IterableUtils.forEachButLast(r1, r0)\n  goto B3\n}",
      "B2 {\n  $r2 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "forAllButLastDo",
    "signature": "java.lang.Object forAllButLastDo(java.util.Iterator,org.apache.commons.collections4.Closure)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  Closure\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d IteratorUtils.forEachButLast(r1, r0)\n  goto B3\n}",
      "B2 {\n  $r2 \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "forAllDo",
    "signature": "org.apache.commons.collections4.Closure forAllDo(java.lang.Iterable,org.apache.commons.collections4.Closure)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Closure\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  IterableUtils.forEach(r1, r0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "forAllDo",
    "signature": "org.apache.commons.collections4.Closure forAllDo(java.util.Iterator,org.apache.commons.collections4.Closure)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  Closure\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  IteratorUtils.forEach(r1, r0)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "get",
    "signature": "java.lang.Object get(java.lang.Object,int)",
    "visibility": "public",
    "body": "{\r\n    final int i \u003d index;\r\n    if (i \u003c 0) {\r\n        throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + i);\r\n    }\r\n    if (object instanceof Map\u003c?, ?\u003e) {\r\n        final Map\u003c?, ?\u003e map \u003d (Map\u003c?, ?\u003e) object;\r\n        final Iterator\u003c?\u003e iterator \u003d map.entrySet().iterator();\r\n        return IteratorUtils.get(iterator, i);\r\n    }\r\n    if (object instanceof Object[]) {\r\n        return ((Object[]) object)[i];\r\n    }\r\n    if (object instanceof Iterator\u003c?\u003e) {\r\n        final Iterator\u003c?\u003e it \u003d (Iterator\u003c?\u003e) object;\r\n        return IteratorUtils.get(it, i);\r\n    }\r\n    if (object instanceof Iterable\u003c?\u003e) {\r\n        final Iterable\u003c?\u003e iterable \u003d (Iterable\u003c?\u003e) object;\r\n        return IterableUtils.get(iterable, i);\r\n    }\r\n    if (object instanceof Enumeration\u003c?\u003e) {\r\n        final Enumeration\u003c?\u003e it \u003d (Enumeration\u003c?\u003e) object;\r\n        return EnumerationUtils.get(it, i);\r\n    }\r\n    if (object \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Unsupported object type: null\");\r\n    }\r\n    try {\r\n        return Array.get(object, i);\r\n    } catch (final IllegalArgumentException ex) {\r\n        throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\r\n    }\r\n}",
    "nodes": 17,
    "edges": 17,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003e\u003d 0) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B6",
      "B6 : If($z2 \u003d\u003d 0) → B7 | else → B8",
      "B8 : If($z3 \u003d\u003d 0) → B9 | else → B10",
      "B10 : If($z4 \u003d\u003d 0) → B11 | else → B12",
      "B12 : If(r0 !\u003d null) → B13 | else → B14"
    ],
    "blockList": [
      "B0 {\n  Object\n  i0 :\u003d @parameter1: int\n  if (i0 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r11 \u003d IndexOutOfBoundsException\n  $r12 \u003d dynInvoke makeConcatWithConstants(i0)\n  new IndexOutOfBoundsException($r12)\n  throw $r11\n}",
      "B2 {\n  $z0 \u003d Map\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  r18 \u003d Map) r0\n  $r8 \u003d r18.entrySet()\n  $r9 \u003d $r8.iterator()\n  $r10 \u003d IteratorUtils.get($r9, i0)\n  return\n}",
      "B4 {\n  $z1 \u003d Object[]\n  if ($z1 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r6 \u003d Object[]) r0\n  $r7 \u003d $r6[i0]\n  return\n}",
      "B6 {\n  $z2 \u003d Iterator\n  if ($z2 \u003d\u003d 0) goto B7 else B8\n}",
      "B7 {\n  r19 \u003d Iterator) r0\n  $r5 \u003d IteratorUtils.get(r19, i0)\n  return\n}",
      "B8 {\n  $z3 \u003d Iterable\n  if ($z3 \u003d\u003d 0) goto B9 else B10\n}",
      "B9 {\n  r20 \u003d Iterable) r0\n  $r4 \u003d IterableUtils.get(r20, i0)\n  return\n}",
      "B10 {\n  $z4 \u003d Enumeration\n  if ($z4 \u003d\u003d 0) goto B11 else B12\n}",
      "B11 {\n  r21 \u003d Enumeration) r0\n  $r3 \u003d EnumerationUtils.get(r21, i0)\n  return\n}",
      "B12 {\n  if (r0 !\u003d null) goto B13 else B14\n}",
      "B13 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Unsupported object type: null\")\n  throw $r2\n}",
      "B14 {\n  $r1 \u003d Array.get(r0, i0)\n  return\n}",
      "B15 {\n  $r13 :\u003d @caughtexception\n  $r14 \u003d IllegalArgumentException\n  $r15 \u003d r0.getClass()\n  $r16 \u003d $r15.getName()\n  $r17 \u003d dynInvoke makeConcatWithConstants($r16)\n  new IllegalArgumentException($r17)\n  throw $r14\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "getCardinalityMap",
    "signature": "java.util.Map getCardinalityMap(java.lang.Iterable)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(coll, \"coll\");\r\n    final Map\u003cO, Integer\u003e count \u003d new HashMap\u003c\u003e();\r\n    for (final O obj : coll) {\r\n        final Integer c \u003d count.get(obj);\r\n        if (c \u003d\u003d null) {\r\n            count.put(obj, Integer.valueOf(1));\r\n        } else {\r\n            count.put(obj, Integer.valueOf(c.intValue() + 1));\r\n        }\r\n    }\r\n    return count;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B6",
      "B2 : If(r5 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Objects.requireNonNull(r0, \"coll\")\n  $r1 \u003d HashMap\n  new HashMap()\n  $r2 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B6\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  $r4 \u003d $r1.get($r3)\n  r5 \u003d Integer) $r4\n  if (r5 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r7 \u003d Integer.valueOf(1)\n  $r1.put($r3, $r7)\n  goto B5\n}",
      "B4 {\n  $i0 \u003d r5.intValue()\n  $i1 \u003d $i0 + 1\n  $r6 \u003d Integer.valueOf($i1)\n  $r1.put($r3, $r6)\n}",
      "B5 {\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "hashCode",
    "signature": "int hashCode(java.util.Collection,org.apache.commons.collections4.Equator)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(equator, \"equator\");\r\n    if (null \u003d\u003d collection) {\r\n        return 0;\r\n    }\r\n    int hashCode \u003d 1;\r\n    for (final E e : collection) {\r\n        hashCode \u003d 31 * hashCode + equator.hash(e);\r\n    }\r\n    return hashCode;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(null !\u003d r1) → B1 | else → B2",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Equator\n  Objects.requireNonNull(r0, \"equator\")\n  if (null !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i2 \u003d 1\n  $r2 \u003d r1.iterator()\n}",
      "B3 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r3 \u003d $r2.next()\n  $i0 \u003d 31 * i2\n  $i1 \u003d r0.hash($r3)\n  i2 \u003d $i0 + $i1\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "intersection",
    "signature": "java.util.Collection intersection(java.lang.Iterable,java.lang.Iterable)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(a, \"a\");\r\n    Objects.requireNonNull(b, \"b\");\r\n    final SetOperationCardinalityHelper\u003cO\u003e helper \u003d new SetOperationCardinalityHelper\u003c\u003e(a, b);\r\n    for (final O obj : helper) {\r\n        helper.setCardinality(obj, helper.min(obj));\r\n    }\r\n    return helper.list();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Iterable\n  Objects.requireNonNull(r0, \"a\")\n  Objects.requireNonNull(r1, \"b\")\n  $r2 \u003d CollectionUtils$SetOperationCardinalityHelper\n  new CollectionUtils$SetOperationCardinalityHelper(r0, r1)\n  $r3 \u003d $r2.iterator()\n}",
      "B1 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d $r3.next()\n  $i0 \u003d $r2.min($r5)\n  $r2.setCardinality($r5, $i0)\n  goto B1\n}",
      "B3 {\n  $r4 \u003d $r2.list()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    return coll \u003d\u003d null || coll.isEmpty();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Collection\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "isEqualCollection",
    "signature": "boolean isEqualCollection(java.util.Collection,java.util.Collection,org.apache.commons.collections4.Equator)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(a, \"a\");\r\n    Objects.requireNonNull(b, \"b\");\r\n    Objects.requireNonNull(equator, \"equator\");\r\n    if (a.size() !\u003d b.size()) {\r\n        return false;\r\n    }\r\n    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n    final Transformer\u003cE, ?\u003e transformer \u003d input -\u003e new EquatorWrapper(equator, input);\r\n    return isEqualCollection(collect(a, transformer), collect(b, transformer));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d $i1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Collection\n  Equator\n  Objects.requireNonNull(r0, \"a\")\n  Objects.requireNonNull(r1, \"b\")\n  Objects.requireNonNull(r2, \"equator\")\n  $i0 \u003d r0.size()\n  $i1 \u003d r1.size()\n  if ($i0 \u003d\u003d $i1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d CollectionUtils$lambda_isEqualCollection_0__47.bootstrap$(r2)\n  $r4 \u003d CollectionUtils.collect(r0, $r3)\n  $r5 \u003d CollectionUtils.collect(r1, $r3)\n  $z0 \u003d CollectionUtils.isEqualCollection($r4, $r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionUtils#isEqualCollection(...2)",
        "body": "{\r\n    return CardinalityHelper.equals(a, b);\r\n}"
      },
      {
        "name": "CollectionUtils#collect(...2)",
        "body": "{\r\n    int size \u003d 0;\r\n    if (null !\u003d inputCollection) {\r\n        size \u003d inputCollection instanceof Collection\u003c?\u003e ? ((Collection\u003c?\u003e) inputCollection).size() : 0;\r\n    }\r\n    final Collection\u003cO\u003e answer \u003d size \u003d\u003d 0 ? new ArrayList\u003c\u003e() : new ArrayList\u003c\u003e(size);\r\n    return collect(inputCollection, transformer, answer);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "isFull",
    "signature": "boolean isFull(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(collection, \"collection\");\r\n    if (collection instanceof BoundedCollection) {\r\n        return ((BoundedCollection\u003c?\u003e) collection).isFull();\r\n    }\r\n    try {\r\n        final BoundedCollection\u003c?\u003e bcoll \u003d UnmodifiableBoundedCollection.unmodifiableBoundedCollection(collection);\r\n        return bcoll.isFull();\r\n    } catch (final IllegalArgumentException ex) {\r\n        return false;\r\n    }\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Objects.requireNonNull(r0, \"collection\")\n  $z0 \u003d BoundedCollection\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d BoundedCollection) r0\n  $z2 \u003d $r2.isFull()\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableBoundedCollection.unmodifiableBoundedCollection(r0)\n  $z1 \u003d $r1.isFull()\n  return\n}",
      "B3 {\n  $r3 :\u003d @caughtexception\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "isNotEmpty",
    "signature": "boolean isNotEmpty(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    return !isEmpty(coll);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Collection\n  $z0 \u003d CollectionUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionUtils#isEmpty(...1)",
        "body": "{\r\n    return coll \u003d\u003d null || coll.isEmpty();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "isProperSubCollection",
    "signature": "boolean isProperSubCollection(java.util.Collection,java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(a, \"a\");\r\n    Objects.requireNonNull(b, \"b\");\r\n    return a.size() \u003c b.size() \u0026\u0026 isSubCollection(a, b);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 \u003e\u003d $i1) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Collection\n  Objects.requireNonNull(r0, \"a\")\n  Objects.requireNonNull(r1, \"b\")\n  $i0 \u003d r0.size()\n  $i1 \u003d r1.size()\n  if ($i0 \u003e\u003d $i1) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d CollectionUtils.isSubCollection(r0, r1)\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionUtils#isSubCollection(...2)",
        "body": "{\r\n    Objects.requireNonNull(a, \"a\");\r\n    Objects.requireNonNull(b, \"b\");\r\n    final CardinalityHelper\u003cObject\u003e helper \u003d new CardinalityHelper\u003c\u003e(a, b);\r\n    for (final Object obj : a) {\r\n        if (helper.freqA(obj) \u003e helper.freqB(obj)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "isSubCollection",
    "signature": "boolean isSubCollection(java.util.Collection,java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(a, \"a\");\r\n    Objects.requireNonNull(b, \"b\");\r\n    final CardinalityHelper\u003cObject\u003e helper \u003d new CardinalityHelper\u003c\u003e(a, b);\r\n    for (final Object obj : a) {\r\n        if (helper.freqA(obj) \u003e helper.freqB(obj)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($i0 \u003c\u003d $i1) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Collection\n  Objects.requireNonNull(r0, \"a\")\n  Objects.requireNonNull(r1, \"b\")\n  $r2 \u003d CollectionUtils$CardinalityHelper\n  new CollectionUtils$CardinalityHelper(r0, r1)\n  $r3 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $r4 \u003d $r3.next()\n  $i0 \u003d $r2.freqA($r4)\n  $i1 \u003d $r2.freqB($r4)\n  if ($i0 \u003c\u003d $i1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "matchesAll",
    "signature": "boolean matchesAll(java.lang.Iterable,org.apache.commons.collections4.Predicate)",
    "visibility": "public",
    "body": "{\r\n    return predicate !\u003d null \u0026\u0026 IterableUtils.matchesAll(input, predicate);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Predicate\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d IterableUtils.matchesAll(r1, r0)\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "maxSize",
    "signature": "int maxSize(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(collection, \"collection\");\r\n    if (collection instanceof BoundedCollection) {\r\n        return ((BoundedCollection\u003c?\u003e) collection).maxSize();\r\n    }\r\n    try {\r\n        final BoundedCollection\u003c?\u003e bcoll \u003d UnmodifiableBoundedCollection.unmodifiableBoundedCollection(collection);\r\n        return bcoll.maxSize();\r\n    } catch (final IllegalArgumentException ex) {\r\n        return -1;\r\n    }\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Objects.requireNonNull(r0, \"collection\")\n  $z0 \u003d BoundedCollection\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d BoundedCollection) r0\n  $i1 \u003d $r2.maxSize()\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableBoundedCollection.unmodifiableBoundedCollection(r0)\n  $i0 \u003d $r1.maxSize()\n  return\n}",
      "B3 {\n  $r3 :\u003d @caughtexception\n  $i3 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "permutations",
    "signature": "java.util.Collection permutations(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(collection, \"collection\");\r\n    final PermutationIterator\u003cE\u003e it \u003d new PermutationIterator\u003c\u003e(collection);\r\n    final Collection\u003cList\u003cE\u003e\u003e result \u003d new ArrayList\u003c\u003e();\r\n    while (it.hasNext()) {\r\n        result.add(it.next());\r\n    }\r\n    return result;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Objects.requireNonNull(r0, \"collection\")\n  $r1 \u003d PermutationIterator\n  new PermutationIterator(r0)\n  $r2 \u003d ArrayList\n  new ArrayList()\n}",
      "B1 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d $r1.next()\n  $r2.add($r3)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "removeAll",
    "signature": "java.util.Collection removeAll(java.lang.Iterable,java.lang.Iterable,org.apache.commons.collections4.Equator)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(collection, \"collection\");\r\n    Objects.requireNonNull(remove, \"remove\");\r\n    Objects.requireNonNull(equator, \"equator\");\r\n    final Transformer\u003cE, EquatorWrapper\u003cE\u003e\u003e transformer \u003d input -\u003e new EquatorWrapper\u003c\u003e(equator, input);\r\n    final Set\u003cEquatorWrapper\u003cE\u003e\u003e removeSet \u003d collect(remove, transformer, new HashSet\u003c\u003e());\r\n    final List\u003cE\u003e list \u003d new ArrayList\u003c\u003e();\r\n    for (final E element : collection) {\r\n        if (!removeSet.contains(new EquatorWrapper\u003c\u003e(equator, element))) {\r\n            list.add(element);\r\n        }\r\n    }\r\n    return list;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Iterable\n  Equator\n  Objects.requireNonNull(r0, \"collection\")\n  Objects.requireNonNull(r1, \"remove\")\n  Objects.requireNonNull(r2, \"equator\")\n  $r3 \u003d CollectionUtils$lambda_removeAll_1__48.bootstrap$(r2)\n  $r4 \u003d HashSet\n  new HashSet()\n  $r5 \u003d CollectionUtils.collect(r1, $r3, $r4)\n  r6 \u003d Set) $r5\n  $r7 \u003d ArrayList\n  new ArrayList()\n  $r8 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d $r8.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $r9 \u003d $r8.next()\n  $r10 \u003d CollectionUtils$EquatorWrapper\n  new CollectionUtils$EquatorWrapper(r2, $r9)\n  $z1 \u003d r6.contains($r10)\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r7.add($r9)\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionUtils#collect(...3)",
        "body": "{\r\n    if (inputCollection !\u003d null) {\r\n        return collect(inputCollection.iterator(), transformer, outputCollection);\r\n    }\r\n    return outputCollection;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "removeCount",
    "signature": "java.util.Collection removeCount(java.util.Collection,int,int)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(input, \"input\");\r\n    if (startIndex \u003c 0) {\r\n        throw new IndexOutOfBoundsException(\"The start index can\u0027t be less than 0.\");\r\n    }\r\n    if (count \u003c 0) {\r\n        throw new IndexOutOfBoundsException(\"The count can\u0027t be less than 0.\");\r\n    }\r\n    if (input.size() \u003c startIndex + count) {\r\n        throw new IndexOutOfBoundsException(\"The sum of start index and count can\u0027t be greater than the size of collection.\");\r\n    }\r\n    final Collection\u003cE\u003e result \u003d new ArrayList\u003c\u003e(count);\r\n    final Iterator\u003cE\u003e iterator \u003d input.iterator();\r\n    while (count \u003e 0) {\r\n        if (startIndex \u003e 0) {\r\n            startIndex -\u003d 1;\r\n            iterator.next();\r\n            continue;\r\n        }\r\n        count -\u003d 1;\r\n        result.add(iterator.next());\r\n        iterator.remove();\r\n    }\r\n    return result;\r\n}",
    "nodes": 12,
    "edges": 13,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i2 \u003e\u003d 0) → B1 | else → B2",
      "B2 : If(i3 \u003e\u003d 0) → B3 | else → B4",
      "B4 : If($i0 \u003e\u003d $i1) → B5 | else → B6",
      "B7 : If(i3 \u003c\u003d 0) → B8 | else → B11",
      "B8 : If(i2 \u003c\u003d 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  Collection\n  i2 :\u003d @parameter1: int\n  i3 :\u003d @parameter2: int\n  Objects.requireNonNull(r0, \"input\")\n  if (i2 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d IndexOutOfBoundsException\n  new IndexOutOfBoundsException(\"The start index can\\\u0027t be less than 0.\")\n  throw $r7\n}",
      "B2 {\n  if (i3 \u003e\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r8 \u003d IndexOutOfBoundsException\n  new IndexOutOfBoundsException(\"The count can\\\u0027t be less than 0.\")\n  throw $r8\n}",
      "B4 {\n  $i0 \u003d r0.size()\n  $i1 \u003d i2 + i3\n  if ($i0 \u003e\u003d $i1) goto B5 else B6\n}",
      "B5 {\n  $r9 \u003d IndexOutOfBoundsException\n  new IndexOutOfBoundsException(\"The sum of start index and count can\\\u0027t be greater than the size of collection.\")\n  throw $r9\n}",
      "B6 {\n  $r10 \u003d ArrayList\n  new ArrayList(i3)\n  $r2 \u003d r0.iterator()\n}",
      "B7 {\n  if (i3 \u003c\u003d 0) goto B8 else B11\n}",
      "B8 {\n  if (i2 \u003c\u003d 0) goto B9 else B10\n}",
      "B9 {\n  $i5 \u003d (int) -1\n  i2 \u003d i2 + $i5\n  $r2.next()\n  goto B7\n}",
      "B10 {\n  $i7 \u003d (int) -1\n  i3 \u003d i3 + $i7\n  $r3 \u003d $r2.next()\n  $r10.add($r3)\n  $r2.remove()\n  goto B7\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B7",
      "B10 --\u003e B7",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "removeRange",
    "signature": "java.util.Collection removeRange(java.util.Collection,int,int)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(input, \"input\");\r\n    if (endIndex \u003c startIndex) {\r\n        throw new IllegalArgumentException(\"The end index can\u0027t be less than the start index.\");\r\n    }\r\n    if (input.size() \u003c endIndex) {\r\n        throw new IndexOutOfBoundsException(\"The end index can\u0027t be greater than the size of collection.\");\r\n    }\r\n    return removeCount(input, startIndex, endIndex - startIndex);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 \u003e\u003d i1) → B1 | else → B2",
      "B2 : If($i2 \u003e\u003d i0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Collection\n  i1 :\u003d @parameter1: int\n  i0 :\u003d @parameter2: int\n  Objects.requireNonNull(r0, \"input\")\n  if (i0 \u003e\u003d i1) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"The end index can\\\u0027t be less than the start index.\")\n  throw $r3\n}",
      "B2 {\n  $i2 \u003d r0.size()\n  if ($i2 \u003e\u003d i0) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d IndexOutOfBoundsException\n  new IndexOutOfBoundsException(\"The end index can\\\u0027t be greater than the size of collection.\")\n  throw $r2\n}",
      "B4 {\n  $i3 \u003d i0 - i1\n  $r1 \u003d CollectionUtils.removeCount(r0, i1, $i3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionUtils#removeCount(...3)",
        "body": "{\r\n    Objects.requireNonNull(input, \"input\");\r\n    if (startIndex \u003c 0) {\r\n        throw new IndexOutOfBoundsException(\"The start index can\u0027t be less than 0.\");\r\n    }\r\n    if (count \u003c 0) {\r\n        throw new IndexOutOfBoundsException(\"The count can\u0027t be less than 0.\");\r\n    }\r\n    if (input.size() \u003c startIndex + count) {\r\n        throw new IndexOutOfBoundsException(\"The sum of start index and count can\u0027t be greater than the size of collection.\");\r\n    }\r\n    final Collection\u003cE\u003e result \u003d new ArrayList\u003c\u003e(count);\r\n    final Iterator\u003cE\u003e iterator \u003d input.iterator();\r\n    while (count \u003e 0) {\r\n        if (startIndex \u003e 0) {\r\n            startIndex -\u003d 1;\r\n            iterator.next();\r\n            continue;\r\n        }\r\n        count -\u003d 1;\r\n        result.add(iterator.next());\r\n        iterator.remove();\r\n    }\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "retainAll",
    "signature": "java.util.Collection retainAll(java.lang.Iterable,java.lang.Iterable,org.apache.commons.collections4.Equator)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(collection, \"collection\");\r\n    Objects.requireNonNull(retain, \"retain\");\r\n    Objects.requireNonNull(equator, \"equator\");\r\n    final Transformer\u003cE, EquatorWrapper\u003cE\u003e\u003e transformer \u003d input -\u003e new EquatorWrapper\u003c\u003e(equator, input);\r\n    final Set\u003cEquatorWrapper\u003cE\u003e\u003e retainSet \u003d collect(retain, transformer, new HashSet\u003c\u003e());\r\n    final List\u003cE\u003e list \u003d new ArrayList\u003c\u003e();\r\n    for (final E element : collection) {\r\n        if (retainSet.contains(new EquatorWrapper\u003c\u003e(equator, element))) {\r\n            list.add(element);\r\n        }\r\n    }\r\n    return list;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Iterable\n  Equator\n  Objects.requireNonNull(r0, \"collection\")\n  Objects.requireNonNull(r1, \"retain\")\n  Objects.requireNonNull(r2, \"equator\")\n  $r3 \u003d CollectionUtils$lambda_retainAll_2__49.bootstrap$(r2)\n  $r4 \u003d HashSet\n  new HashSet()\n  $r5 \u003d CollectionUtils.collect(r1, $r3, $r4)\n  r6 \u003d Set) $r5\n  $r7 \u003d ArrayList\n  new ArrayList()\n  $r8 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d $r8.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $r9 \u003d $r8.next()\n  $r10 \u003d CollectionUtils$EquatorWrapper\n  new CollectionUtils$EquatorWrapper(r2, $r9)\n  $z1 \u003d r6.contains($r10)\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r7.add($r9)\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionUtils#collect(...3)",
        "body": "{\r\n    if (inputCollection !\u003d null) {\r\n        return collect(inputCollection.iterator(), transformer, outputCollection);\r\n    }\r\n    return outputCollection;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "reverseArray",
    "signature": "void reverseArray(java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(array, \"array\");\r\n    int i \u003d 0;\r\n    int j \u003d array.length - 1;\r\n    Object tmp;\r\n    while (j \u003e i) {\r\n        tmp \u003d array[j];\r\n        array[j] \u003d array[i];\r\n        array[i] \u003d tmp;\r\n        j--;\r\n        i++;\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i2 \u003c\u003d i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  Objects.requireNonNull(r0, \"array\")\n  i1 \u003d 0\n  $i0 \u003d lengthof r0\n  i2 \u003d $i0 - 1\n}",
      "B1 {\n  if (i2 \u003c\u003d i1) goto B2 else B3\n}",
      "B2 {\n  r1 \u003d r0[i2]\n  $r2 \u003d r0[i1]\n  r0[i2] \u003d $r2\n  r0[i1] \u003d r1\n  $i4 \u003d (int) -1\n  i2 \u003d i2 + $i4\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "select",
    "signature": "java.util.Collection select(java.lang.Iterable,org.apache.commons.collections4.Predicate)",
    "visibility": "public",
    "body": "{\r\n    int size \u003d 0;\r\n    if (null !\u003d inputCollection) {\r\n        size \u003d inputCollection instanceof Collection\u003c?\u003e ? ((Collection\u003c?\u003e) inputCollection).size() : 0;\r\n    }\r\n    final Collection\u003cO\u003e answer \u003d size \u003d\u003d 0 ? new ArrayList\u003c\u003e() : new ArrayList\u003c\u003e(size);\r\n    return select(inputCollection, predicate, answer);\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B0 : If(null \u003d\u003d r0) → B1 | else → B5",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3",
      "B5 : If(i0 !\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Predicate\n  i0 \u003d 0\n  if (null \u003d\u003d r0) goto B1 else B5\n}",
      "B1 {\n  $z0 \u003d Collection\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d Collection) r0\n  $i1 \u003d $r3.size()\n  goto B4\n}",
      "B3 {\n  $i1 \u003d 0\n}",
      "B4 {\n  i0 \u003d $i1\n}",
      "B5 {\n  if (i0 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $r4 \u003d ArrayList\n  new ArrayList()\n  goto B8\n}",
      "B7 {\n  $r4 \u003d ArrayList\n  new ArrayList(i0)\n}",
      "B8 {\n  $r2 \u003d CollectionUtils.select(r0, r1, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionUtils#select(...3)",
        "body": "{\r\n    if (inputCollection !\u003d null \u0026\u0026 predicate !\u003d null) {\r\n        for (final O item : inputCollection) {\r\n            if (predicate.test(item)) {\r\n                outputCollection.add(item);\r\n            }\r\n        }\r\n    }\r\n    return outputCollection;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "select",
    "signature": "java.util.Collection select(java.lang.Iterable,org.apache.commons.collections4.Predicate,java.util.Collection)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 11,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B7",
      "B1 : If(r2 \u003d\u003d null) → B2 | else → B7",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B7",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Predicate\n  Collection\n  if (r0 \u003d\u003d null) goto B1 else B7\n}",
      "B1 {\n  if (r2 \u003d\u003d null) goto B2 else B7\n}",
      "B2 {\n  $r3 \u003d r0.iterator()\n}",
      "B3 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B4 else B7\n}",
      "B4 {\n  $r4 \u003d $r3.next()\n  $z1 \u003d r2.test($r4)\n  if ($z1 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  r1.add($r4)\n}",
      "B6 {\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B7",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "select",
    "signature": "java.util.Collection select(java.lang.Iterable,org.apache.commons.collections4.Predicate,java.util.Collection,java.util.Collection)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 9,
    "edges": 12,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B8",
      "B1 : If(r2 \u003d\u003d null) → B2 | else → B8",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B8",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Predicate\n  Collection\n  Collection\n  if (r0 \u003d\u003d null) goto B1 else B8\n}",
      "B1 {\n  if (r2 \u003d\u003d null) goto B2 else B8\n}",
      "B2 {\n  $r3 \u003d r0.iterator()\n}",
      "B3 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B4 else B8\n}",
      "B4 {\n  $r4 \u003d $r3.next()\n  $z1 \u003d r2.test($r4)\n  if ($z1 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  r1.add($r4)\n  goto B7\n}",
      "B6 {\n  r5.add($r4)\n}",
      "B7 {\n  goto B3\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B8",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B3",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "selectRejected",
    "signature": "java.util.Collection selectRejected(java.lang.Iterable,org.apache.commons.collections4.Predicate)",
    "visibility": "public",
    "body": "{\r\n    int size \u003d 0;\r\n    if (null !\u003d inputCollection) {\r\n        size \u003d inputCollection instanceof Collection\u003c?\u003e ? ((Collection\u003c?\u003e) inputCollection).size() : 0;\r\n    }\r\n    final Collection\u003cO\u003e answer \u003d size \u003d\u003d 0 ? new ArrayList\u003c\u003e() : new ArrayList\u003c\u003e(size);\r\n    return selectRejected(inputCollection, predicate, answer);\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B0 : If(null \u003d\u003d r0) → B1 | else → B5",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3",
      "B5 : If(i0 !\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Predicate\n  i0 \u003d 0\n  if (null \u003d\u003d r0) goto B1 else B5\n}",
      "B1 {\n  $z0 \u003d Collection\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d Collection) r0\n  $i1 \u003d $r3.size()\n  goto B4\n}",
      "B3 {\n  $i1 \u003d 0\n}",
      "B4 {\n  i0 \u003d $i1\n}",
      "B5 {\n  if (i0 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $r4 \u003d ArrayList\n  new ArrayList()\n  goto B8\n}",
      "B7 {\n  $r4 \u003d ArrayList\n  new ArrayList(i0)\n}",
      "B8 {\n  $r2 \u003d CollectionUtils.selectRejected(r0, r1, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionUtils#selectRejected(...3)",
        "body": "{\r\n    if (inputCollection !\u003d null \u0026\u0026 predicate !\u003d null) {\r\n        for (final O item : inputCollection) {\r\n            if (!predicate.test(item)) {\r\n                outputCollection.add(item);\r\n            }\r\n        }\r\n    }\r\n    return outputCollection;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "selectRejected",
    "signature": "java.util.Collection selectRejected(java.lang.Iterable,org.apache.commons.collections4.Predicate,java.util.Collection)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 11,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B7",
      "B1 : If(r2 \u003d\u003d null) → B2 | else → B7",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B7",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Predicate\n  Collection\n  if (r0 \u003d\u003d null) goto B1 else B7\n}",
      "B1 {\n  if (r2 \u003d\u003d null) goto B2 else B7\n}",
      "B2 {\n  $r3 \u003d r0.iterator()\n}",
      "B3 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B4 else B7\n}",
      "B4 {\n  $r4 \u003d $r3.next()\n  $z1 \u003d r2.test($r4)\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  r1.add($r4)\n}",
      "B6 {\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B7",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "size",
    "signature": "int size(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d null) {\r\n        return 0;\r\n    }\r\n    int total \u003d 0;\r\n    if (object instanceof Map\u003c?, ?\u003e) {\r\n        total \u003d ((Map\u003c?, ?\u003e) object).size();\r\n    } else if (object instanceof Collection\u003c?\u003e) {\r\n        total \u003d ((Collection\u003c?\u003e) object).size();\r\n    } else if (object instanceof Iterable\u003c?\u003e) {\r\n        total \u003d IterableUtils.size((Iterable\u003c?\u003e) object);\r\n    } else if (object instanceof Object[]) {\r\n        total \u003d ((Object[]) object).length;\r\n    } else if (object instanceof Iterator\u003c?\u003e) {\r\n        total \u003d IteratorUtils.size((Iterator\u003c?\u003e) object);\r\n    } else if (object instanceof Enumeration\u003c?\u003e) {\r\n        final Enumeration\u003c?\u003e it \u003d (Enumeration\u003c?\u003e) object;\r\n        while (it.hasMoreElements()) {\r\n            total++;\r\n            it.nextElement();\r\n        }\r\n    } else {\r\n        try {\r\n            total \u003d Array.getLength(object);\r\n        } catch (final IllegalArgumentException ex) {\r\n            throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\r\n        }\r\n    }\r\n    return total;\r\n}",
    "nodes": 21,
    "edges": 28,
    "cc": 9,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B6",
      "B6 : If($z2 \u003d\u003d 0) → B7 | else → B8",
      "B8 : If($z3 \u003d\u003d 0) → B9 | else → B10",
      "B10 : If($z4 \u003d\u003d 0) → B11 | else → B12",
      "B12 : If($z5 \u003d\u003d 0) → B13 | else → B17",
      "B14 : If($z6 \u003d\u003d 0) → B15 | else → B16"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i0 \u003d 0\n  $z0 \u003d Map\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d Map) r0\n  i0 \u003d $r5.size()\n  goto B19\n}",
      "B4 {\n  $z1 \u003d Collection\n  if ($z1 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r4 \u003d Collection) r0\n  i0 \u003d $r4.size()\n  goto B19\n}",
      "B6 {\n  $z2 \u003d Iterable\n  if ($z2 \u003d\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $r3 \u003d Iterable) r0\n  i0 \u003d IterableUtils.size($r3)\n  goto B19\n}",
      "B8 {\n  $z3 \u003d Object[]\n  if ($z3 \u003d\u003d 0) goto B9 else B10\n}",
      "B9 {\n  $r2 \u003d Object[]) r0\n  i0 \u003d lengthof $r2\n  goto B19\n}",
      "B10 {\n  $z4 \u003d Iterator\n  if ($z4 \u003d\u003d 0) goto B11 else B12\n}",
      "B11 {\n  $r1 \u003d Iterator) r0\n  i0 \u003d IteratorUtils.size($r1)\n  goto B19\n}",
      "B12 {\n  $z5 \u003d Enumeration\n  if ($z5 \u003d\u003d 0) goto B13 else B17\n}",
      "B13 {\n  r11 \u003d Enumeration) r0\n}",
      "B14 {\n  $z6 \u003d r11.hasMoreElements()\n  if ($z6 \u003d\u003d 0) goto B15 else B16\n}",
      "B15 {\n  i0 \u003d i0 + 1\n  r11.nextElement()\n  goto B14\n}",
      "B16 {\n  goto B19\n}",
      "B17 {\n  i0 \u003d Array.getLength(r0)\n  goto B19\n}",
      "B18 {\n  $r6 :\u003d @caughtexception\n  $r7 \u003d IllegalArgumentException\n  $r8 \u003d r0.getClass()\n  $r9 \u003d $r8.getName()\n  $r10 \u003d dynInvoke makeConcatWithConstants($r9)\n  new IllegalArgumentException($r10)\n  throw $r7\n}",
      "B19 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B19",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B19",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B19",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B19",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B19",
      "B12 --\u003e B13",
      "B12 --\u003e B17",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B14",
      "B16 --\u003e B19",
      "B17 --\u003e B19",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "sizeIsEmpty",
    "signature": "boolean sizeIsEmpty(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d null) {\r\n        return true;\r\n    }\r\n    if (object instanceof Collection\u003c?\u003e) {\r\n        return ((Collection\u003c?\u003e) object).isEmpty();\r\n    }\r\n    if (object instanceof Iterable\u003c?\u003e) {\r\n        return IterableUtils.isEmpty((Iterable\u003c?\u003e) object);\r\n    }\r\n    if (object instanceof Map\u003c?, ?\u003e) {\r\n        return ((Map\u003c?, ?\u003e) object).isEmpty();\r\n    }\r\n    if (object instanceof Object[]) {\r\n        return ((Object[]) object).length \u003d\u003d 0;\r\n    }\r\n    if (object instanceof Iterator\u003c?\u003e) {\r\n        return !((Iterator\u003c?\u003e) object).hasNext();\r\n    }\r\n    if (object instanceof Enumeration\u003c?\u003e) {\r\n        return !((Enumeration\u003c?\u003e) object).hasMoreElements();\r\n    }\r\n    try {\r\n        return Array.getLength(object) \u003d\u003d 0;\r\n    } catch (final IllegalArgumentException ex) {\r\n        throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\r\n    }\r\n}",
    "nodes": 29,
    "edges": 33,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B6",
      "B6 : If($z2 \u003d\u003d 0) → B7 | else → B8",
      "B8 : If($z3 \u003d\u003d 0) → B9 | else → B13",
      "B9 : If($i1 !\u003d 0) → B10 | else → B11",
      "B13 : If($z4 \u003d\u003d 0) → B14 | else → B18",
      "B14 : If($z7 !\u003d 0) → B15 | else → B16",
      "B18 : If($z5 \u003d\u003d 0) → B19 | else → B23",
      "B19 : If($z6 !\u003d 0) → B20 | else → B21",
      "B24 : If($i0 !\u003d 0) → B25 | else → B26"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d Collection\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d Collection) r0\n  $z10 \u003d $r6.isEmpty()\n  return\n}",
      "B4 {\n  $z1 \u003d Iterable\n  if ($z1 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r5 \u003d Iterable) r0\n  $z9 \u003d IterableUtils.isEmpty($r5)\n  return\n}",
      "B6 {\n  $z2 \u003d Map\n  if ($z2 \u003d\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $r4 \u003d Map) r0\n  $z8 \u003d $r4.isEmpty()\n  return\n}",
      "B8 {\n  $z3 \u003d Object[]\n  if ($z3 \u003d\u003d 0) goto B9 else B13\n}",
      "B9 {\n  $r3 \u003d Object[]) r0\n  $i1 \u003d lengthof $r3\n  if ($i1 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  $z11 \u003d 1\n  goto B12\n}",
      "B11 {\n  $z11 \u003d 0\n}",
      "B12 {\n  return\n}",
      "B13 {\n  $z4 \u003d Iterator\n  if ($z4 \u003d\u003d 0) goto B14 else B18\n}",
      "B14 {\n  $r2 \u003d Iterator) r0\n  $z7 \u003d $r2.hasNext()\n  if ($z7 !\u003d 0) goto B15 else B16\n}",
      "B15 {\n  $z12 \u003d 1\n  goto B17\n}",
      "B16 {\n  $z12 \u003d 0\n}",
      "B17 {\n  return\n}",
      "B18 {\n  $z5 \u003d Enumeration\n  if ($z5 \u003d\u003d 0) goto B19 else B23\n}",
      "B19 {\n  $r1 \u003d Enumeration) r0\n  $z6 \u003d $r1.hasMoreElements()\n  if ($z6 !\u003d 0) goto B20 else B21\n}",
      "B20 {\n  $z13 \u003d 1\n  goto B22\n}",
      "B21 {\n  $z13 \u003d 0\n}",
      "B22 {\n  return\n}",
      "B23 {\n  $i0 \u003d Array.getLength(r0)\n  if ($i0 !\u003d 0) goto B24 else B25\n}",
      "B24 {\n  $z14 \u003d 1\n  goto B26\n}",
      "B25 {\n  $z14 \u003d 0\n}",
      "B26 {\n  return\n}",
      "B27 {\n  $r7 :\u003d @caughtexception\n  $r8 \u003d IllegalArgumentException\n  $r9 \u003d r0.getClass()\n  $r10 \u003d $r9.getName()\n  $r11 \u003d dynInvoke makeConcatWithConstants($r10)\n  new IllegalArgumentException($r11)\n  throw $r8\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B13 --\u003e B18",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e B19",
      "B18 --\u003e B23",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B22 --\u003e [EXIT]",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B26",
      "B26 --\u003e [EXIT]",
      "B27 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "subtract",
    "signature": "java.util.Collection subtract(java.lang.Iterable,java.lang.Iterable,org.apache.commons.collections4.Predicate)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(a, \"a\");\r\n    Objects.requireNonNull(b, \"b\");\r\n    Objects.requireNonNull(p, \"p\");\r\n    final ArrayList\u003cO\u003e list \u003d new ArrayList\u003c\u003e();\r\n    final HashBag\u003cO\u003e bag \u003d new HashBag\u003c\u003e();\r\n    for (final O element : b) {\r\n        if (p.test(element)) {\r\n            bag.add(element);\r\n        }\r\n    }\r\n    for (final O element : a) {\r\n        if (!bag.remove(element, 1)) {\r\n            list.add(element);\r\n        }\r\n    }\r\n    return list;\r\n}",
    "nodes": 11,
    "edges": 14,
    "cc": 5,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($z3 \u003d\u003d 0) → B3 | else → B4",
      "B6 : If($z1 \u003d\u003d 0) → B7 | else → B10",
      "B7 : If($z2 !\u003d 0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Iterable\n  Predicate\n  Objects.requireNonNull(r0, \"a\")\n  Objects.requireNonNull(r1, \"b\")\n  Objects.requireNonNull(r2, \"p\")\n  $r3 \u003d ArrayList\n  new ArrayList()\n  $r4 \u003d HashBag\n  new HashBag()\n  $r5 \u003d r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r5.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $r8 \u003d $r5.next()\n  $z3 \u003d r2.test($r8)\n  if ($z3 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r4.add($r8)\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  $r6 \u003d r0.iterator()\n}",
      "B6 {\n  $z1 \u003d $r6.hasNext()\n  if ($z1 \u003d\u003d 0) goto B7 else B10\n}",
      "B7 {\n  $r7 \u003d $r6.next()\n  $z2 \u003d $r4.remove($r7, 1)\n  if ($z2 !\u003d 0) goto B8 else B9\n}",
      "B8 {\n  $r3.add($r7)\n}",
      "B9 {\n  goto B6\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B6",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "transform",
    "signature": "void transform(java.util.Collection,org.apache.commons.collections4.Transformer)",
    "visibility": "public",
    "body": "{\r\n    if (collection !\u003d null \u0026\u0026 transformer !\u003d null) {\r\n        if (collection instanceof List\u003c?\u003e) {\r\n            final List\u003cC\u003e list \u003d (List\u003cC\u003e) collection;\r\n            for (final ListIterator\u003cC\u003e it \u003d list.listIterator(); it.hasNext(); ) {\r\n                it.set(transformer.apply(it.next()));\r\n            }\r\n        } else {\r\n            final Collection\u003cC\u003e resultCollection \u003d collect(collection, transformer);\r\n            collection.clear();\r\n            collection.addAll(resultCollection);\r\n        }\r\n    }\r\n}",
    "nodes": 9,
    "edges": 12,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B8",
      "B1 : If(r1 \u003d\u003d null) → B2 | else → B8",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B7",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Transformer\n  if (r0 \u003d\u003d null) goto B1 else B8\n}",
      "B1 {\n  if (r1 \u003d\u003d null) goto B2 else B8\n}",
      "B2 {\n  $z0 \u003d List\n  if ($z0 \u003d\u003d 0) goto B3 else B7\n}",
      "B3 {\n  r6 \u003d List) r0\n  $r3 \u003d r6.listIterator()\n}",
      "B4 {\n  $z1 \u003d $r3.hasNext()\n  if ($z1 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r4 \u003d $r3.next()\n  $r5 \u003d r1.apply($r4)\n  $r3.set($r5)\n  goto B4\n}",
      "B6 {\n  goto B8\n}",
      "B7 {\n  $r2 \u003d CollectionUtils.collect(r0, r1)\n  r0.clear()\n  r0.addAll($r2)\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B8",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollectionUtils#collect(...2)",
        "body": "{\r\n    int size \u003d 0;\r\n    if (null !\u003d inputCollection) {\r\n        size \u003d inputCollection instanceof Collection\u003c?\u003e ? ((Collection\u003c?\u003e) inputCollection).size() : 0;\r\n    }\r\n    final Collection\u003cO\u003e answer \u003d size \u003d\u003d 0 ? new ArrayList\u003c\u003e() : new ArrayList\u003c\u003e(size);\r\n    return collect(inputCollection, transformer, answer);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.CollectionUtils",
    "methodName": "union",
    "signature": "java.util.Collection union(java.lang.Iterable,java.lang.Iterable)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(a, \"a\");\r\n    Objects.requireNonNull(b, \"b\");\r\n    final SetOperationCardinalityHelper\u003cO\u003e helper \u003d new SetOperationCardinalityHelper\u003c\u003e(a, b);\r\n    for (final O obj : helper) {\r\n        helper.setCardinality(obj, helper.max(obj));\r\n    }\r\n    return helper.list();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Iterable\n  Objects.requireNonNull(r0, \"a\")\n  Objects.requireNonNull(r1, \"b\")\n  $r2 \u003d CollectionUtils$SetOperationCardinalityHelper\n  new CollectionUtils$SetOperationCardinalityHelper(r0, r1)\n  $r3 \u003d $r2.iterator()\n}",
      "B1 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d $r3.next()\n  $i0 \u003d $r2.max($r5)\n  $r2.setCardinality($r5, $i0)\n  goto B1\n}",
      "B3 {\n  $r4 \u003d $r2.list()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.comparators.BooleanComparator",
    "methodName": "booleanComparator",
    "signature": "org.apache.commons.collections4.comparators.BooleanComparator booleanComparator(boolean)",
    "visibility": "public",
    "body": "{\r\n    return trueFirst ? TRUE_FIRST : FALSE_FIRST;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  z0 :\u003d @parameter0: boolean\n  if (z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r0 \u003d BooleanComparator TRUE_FIRST\u003e\n  goto B3\n}",
      "B2 {\n  $r0 \u003d BooleanComparator FALSE_FIRST\u003e\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.comparators.BooleanComparator",
    "methodName": "compare",
    "signature": "int compare(java.lang.Boolean,java.lang.Boolean)",
    "visibility": "public",
    "body": "{\r\n    final boolean v1 \u003d b1.booleanValue();\r\n    final boolean v2 \u003d b2.booleanValue();\r\n    return v1 ^ v2 ? v1 ^ trueFirst ? 1 : -1 : 0;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z2 \u003d\u003d 0) → B1 | else → B4",
      "B1 : If($z4 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  BooleanComparator\n  Boolean\n  Boolean\n  $z0 \u003d r0.booleanValue()\n  $z1 \u003d r1.booleanValue()\n  $z2 \u003d $z0 ^ $z1\n  if ($z2 \u003d\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $z3 \u003d BooleanComparator: boolean trueFirst\u003e\n  $z4 \u003d $z0 ^ $z3\n  if ($z4 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $b0 \u003d 1\n  goto B5\n}",
      "B3 {\n  $b0 \u003d -1\n  goto B5\n}",
      "B4 {\n  $b0 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.comparators.BooleanComparator",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return this \u003d\u003d object || object instanceof BooleanComparator \u0026\u0026 trueFirst \u003d\u003d ((BooleanComparator) object).trueFirst;\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d r1) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B4",
      "B2 : If($z2 !\u003d $z1) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  BooleanComparator\n  Object\n  if (r0 \u003d\u003d r1) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d BooleanComparator\n  if ($z0 \u003d\u003d 0) goto B2 else B4\n}",
      "B2 {\n  $z2 \u003d BooleanComparator: boolean trueFirst\u003e\n  $r2 \u003d BooleanComparator) r1\n  $z1 \u003d BooleanComparator: boolean trueFirst\u003e\n  if ($z2 !\u003d $z1) goto B3 else B4\n}",
      "B3 {\n  $z3 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z3 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.comparators.BooleanComparator",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    final int hash \u003d \"BooleanComparator\".hashCode();\r\n    return trueFirst ? -1 * hash : hash;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BooleanComparator\n  $r0 \u003d \"BooleanComparator\"\n  $i0 \u003d $r0.hashCode()\n  $z0 \u003d BooleanComparator: boolean trueFirst\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $i3 \u003d (int) -1\n  $i1 \u003d $i3 * $i0\n  goto B3\n}",
      "B2 {\n  $i1 \u003d $i0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.comparators.ComparableComparator",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return this \u003d\u003d object || null !\u003d object \u0026\u0026 object.getClass().equals(this.getClass());\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d r1) → B1 | else → B3",
      "B1 : If(null \u003d\u003d r1) → B2 | else → B4",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ComparableComparator\n  Object\n  if (r0 \u003d\u003d r1) goto B1 else B3\n}",
      "B1 {\n  if (null \u003d\u003d r1) goto B2 else B4\n}",
      "B2 {\n  $r2 \u003d r1.getClass()\n  $r3 \u003d r0.getClass()\n  $z0 \u003d $r2.equals($r3)\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $z1 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z1 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ComparableComparator#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.comparators.ComparatorChain",
    "methodName": "addComparator",
    "signature": "void addComparator(java.util.Comparator,boolean)",
    "visibility": "public",
    "body": "{\r\n    checkLocked();\r\n    comparatorChain.add(comparator);\r\n    if (reverse) {\r\n        orderingBits.set(comparatorChain.size() - 1);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ComparatorChain\n  Comparator\n  z0 :\u003d @parameter1: boolean\n  r0.checkLocked()\n  $r2 \u003d List comparatorChain\u003e\n  $r2.add(r1)\n  if (z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d BitSet orderingBits\u003e\n  $r3 \u003d List comparatorChain\u003e\n  $i0 \u003d $r3.size()\n  $i1 \u003d $i0 - 1\n  $r4.set($i1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ComparatorChain#checkLocked(...0)",
        "body": "{\r\n    if (isLocked) {\r\n        throw new UnsupportedOperationException(\"Comparator ordering cannot be changed after the first comparison is performed\");\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.comparators.ComparatorChain",
    "methodName": "checkChainIntegrity",
    "signature": "void checkChainIntegrity()",
    "visibility": "private",
    "body": "{\r\n    if (comparatorChain.isEmpty()) {\r\n        throw new UnsupportedOperationException(\"ComparatorChains must contain at least one Comparator\");\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ComparatorChain\n  $r1 \u003d List comparatorChain\u003e\n  $z0 \u003d $r1.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d UnsupportedOperationException\n  new UnsupportedOperationException(\"ComparatorChains must contain at least one Comparator\")\n  throw $r2\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.comparators.ComparatorChain",
    "methodName": "checkLocked",
    "signature": "void checkLocked()",
    "visibility": "private",
    "body": "{\r\n    if (isLocked) {\r\n        throw new UnsupportedOperationException(\"Comparator ordering cannot be changed after the first comparison is performed\");\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ComparatorChain\n  $z0 \u003d ComparatorChain: boolean isLocked\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d UnsupportedOperationException\n  new UnsupportedOperationException(\"Comparator ordering cannot be changed after the first comparison is performed\")\n  throw $r1\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.comparators.ComparatorChain",
    "methodName": "compare",
    "signature": "int compare(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 12,
    "edges": 15,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B3 : If($z2 \u003d\u003d 0) → B4 | else → B11",
      "B4 : If($i0 \u003d\u003d 0) → B5 | else → B10",
      "B5 : If($z1 \u003d\u003d 0) → B6 | else → B9",
      "B6 : If($i0 \u003c\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  ComparatorChain\n  Object\n  Object\n  $z0 \u003d ComparatorChain: boolean isLocked\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.checkChainIntegrity()\n  ComparatorChain: boolean isLocked\u003e \u003d 1\n}",
      "B2 {\n  $r1 \u003d List comparatorChain\u003e\n  $r2 \u003d $r1.iterator()\n  i1 \u003d 0\n}",
      "B3 {\n  $z2 \u003d $r2.hasNext()\n  if ($z2 \u003d\u003d 0) goto B4 else B11\n}",
      "B4 {\n  $r3 \u003d $r2.next()\n  r4 \u003d Comparator) $r3\n  $i0 \u003d r4.compare(r5, r6)\n  i2 \u003d $i0\n  if ($i0 \u003d\u003d 0) goto B5 else B10\n}",
      "B5 {\n  $r7 \u003d BitSet orderingBits\u003e\n  $z1 \u003d $r7.get(i1)\n  if ($z1 \u003d\u003d 0) goto B6 else B9\n}",
      "B6 {\n  if ($i0 \u003c\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $i4 \u003d (int) -1\n  i2 \u003d $i4\n  goto B9\n}",
      "B8 {\n  i2 \u003d 1\n}",
      "B9 {\n  return\n}",
      "B10 {\n  i1 \u003d i1 + 1\n  goto B3\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B11",
      "B4 --\u003e B5",
      "B4 --\u003e B10",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B3",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.comparators.ComparatorChain",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (this \u003d\u003d object) {\r\n        return true;\r\n    }\r\n    if (null \u003d\u003d object) {\r\n        return false;\r\n    }\r\n    if (object.getClass().equals(this.getClass())) {\r\n        final ComparatorChain\u003c?\u003e chain \u003d (ComparatorChain\u003c?\u003e) object;\r\n        return Objects.equals(orderingBits, chain.orderingBits) \u0026\u0026 Objects.equals(comparatorChain, chain.comparatorChain);\r\n    }\r\n    return false;\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(null !\u003d r1) → B3 | else → B4",
      "B4 : If($z0 \u003d\u003d 0) → B5 | else → B10",
      "B5 : If($z1 \u003d\u003d 0) → B6 | else → B8",
      "B6 : If($z2 \u003d\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  ComparatorChain\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (null !\u003d r1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r2 \u003d r1.getClass()\n  $r3 \u003d r0.getClass()\n  $z0 \u003d $r2.equals($r3)\n  if ($z0 \u003d\u003d 0) goto B5 else B10\n}",
      "B5 {\n  r4 \u003d ComparatorChain) r1\n  $r6 \u003d BitSet orderingBits\u003e\n  $r5 \u003d BitSet orderingBits\u003e\n  $z1 \u003d Objects.equals($r6, $r5)\n  if ($z1 \u003d\u003d 0) goto B6 else B8\n}",
      "B6 {\n  $r8 \u003d List comparatorChain\u003e\n  $r7 \u003d List comparatorChain\u003e\n  $z2 \u003d Objects.equals($r8, $r7)\n  if ($z2 \u003d\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $z3 \u003d 1\n  goto B9\n}",
      "B8 {\n  $z3 \u003d 0\n}",
      "B9 {\n  return\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B10",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ComparatorChain#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.comparators.ComparatorChain",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    int hash \u003d 0;\r\n    if (null !\u003d comparatorChain) {\r\n        hash ^\u003d comparatorChain.hashCode();\r\n    }\r\n    if (null !\u003d orderingBits) {\r\n        hash ^\u003d orderingBits.hashCode();\r\n    }\r\n    return hash;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(null \u003d\u003d $r1) → B1 | else → B2",
      "B2 : If(null \u003d\u003d $r2) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ComparatorChain\n  i2 \u003d 0\n  $r1 \u003d List comparatorChain\u003e\n  if (null \u003d\u003d $r1) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d List comparatorChain\u003e\n  $i1 \u003d $r4.hashCode()\n  i2 \u003d 0 ^ $i1\n}",
      "B2 {\n  $r2 \u003d BitSet orderingBits\u003e\n  if (null \u003d\u003d $r2) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d BitSet orderingBits\u003e\n  $i0 \u003d $r3.hashCode()\n  i2 \u003d i2 ^ $i0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.comparators.ComparatorChain",
    "methodName": "setComparator",
    "signature": "void setComparator(int,java.util.Comparator,boolean)",
    "visibility": "public",
    "body": "{\r\n    checkLocked();\r\n    comparatorChain.set(index, comparator);\r\n    if (reverse) {\r\n        orderingBits.set(index);\r\n    } else {\r\n        orderingBits.clear(index);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ComparatorChain\n  i0 :\u003d @parameter0: int\n  Comparator\n  z0 :\u003d @parameter2: boolean\n  r0.checkLocked()\n  $r2 \u003d List comparatorChain\u003e\n  $r2.set(i0, r1)\n  if (z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d BitSet orderingBits\u003e\n  $r4.set(i0)\n  goto B3\n}",
      "B2 {\n  $r3 \u003d BitSet orderingBits\u003e\n  $r3.clear(i0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ComparatorChain#checkLocked(...0)",
        "body": "{\r\n    if (isLocked) {\r\n        throw new UnsupportedOperationException(\"Comparator ordering cannot be changed after the first comparison is performed\");\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.comparators.FixedOrderComparator",
    "methodName": "add",
    "signature": "boolean add(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r5 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  FixedOrderComparator\n  Object\n  r0.checkLocked()\n  $r2 \u003d Map map\u003e\n  $i0 \u003d FixedOrderComparator: int counter\u003e\n  $i1 \u003d $i0 + 1\n  FixedOrderComparator: int counter\u003e \u003d $i1\n  $r3 \u003d Integer.valueOf($i0)\n  $r4 \u003d $r2.put(r1, $r3)\n  r5 \u003d Integer) $r4\n  if (r5 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.comparators.FixedOrderComparator",
    "methodName": "addAsEqual",
    "signature": "boolean addAsEqual(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2",
      "B2 : If(r8 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  FixedOrderComparator\n  Object\n  Object\n  r0.checkLocked()\n  $r2 \u003d Map map\u003e\n  $r3 \u003d $r2.get(r1)\n  r4 \u003d Integer) $r3\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d IllegalArgumentException\n  $r10 \u003d String.valueOf(r1)\n  $r11 \u003d String.valueOf(r0)\n  $r12 \u003d dynInvoke makeConcatWithConstants($r10, $r11)\n  new IllegalArgumentException($r12)\n  throw $r9\n}",
      "B2 {\n  $r6 \u003d Map map\u003e\n  $r7 \u003d $r6.put(r5, r4)\n  r8 \u003d Integer) $r7\n  if (r8 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $z0 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z0 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.comparators.FixedOrderComparator",
    "methodName": "checkLocked",
    "signature": "void checkLocked()",
    "visibility": "protected",
    "body": "{\r\n    if (isLocked()) {\r\n        throw new UnsupportedOperationException(\"Cannot modify a FixedOrderComparator after a comparison\");\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  FixedOrderComparator\n  $z0 \u003d r0.isLocked()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d UnsupportedOperationException\n  new UnsupportedOperationException(\"Cannot modify a FixedOrderComparator after a comparison\")\n  throw $r1\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FixedOrderComparator#isLocked(...0)",
        "body": "{\r\n    return isLocked;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.comparators.FixedOrderComparator",
    "methodName": "compare",
    "signature": "int compare(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 21,
    "edges": 26,
    "cc": 7,
    "flowSummary": [
      "B0 : If(r4 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(r8 !\u003d null) → B2 | else → B20",
      "B2 : If(switch-on $i1) → B3 | else → B9",
      "B3 : If(r4 !\u003d null) → B4 | else → B7",
      "B4 : If(r8 !\u003d null) → B5 | else → B6",
      "B9 : If(r4 !\u003d null) → B10 | else → B13",
      "B10 : If(r8 !\u003d null) → B11 | else → B12",
      "B15 : If(r4 !\u003d null) → B16 | else → B17"
    ],
    "blockList": [
      "B0 {\n  FixedOrderComparator\n  Object\n  Object\n  FixedOrderComparator: boolean isLocked\u003e \u003d 1\n  $r2 \u003d Map map\u003e\n  $r3 \u003d $r2.get(r1)\n  r4 \u003d Integer) $r3\n  $r6 \u003d Map map\u003e\n  $r7 \u003d $r6.get(r5)\n  r8 \u003d Integer) $r7\n  if (r4 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r8 !\u003d null) goto B2 else B20\n}",
      "B2 {\n  $r10 \u003d FixedOrderComparator$1: int[] $SwitchMap$org$apache$commons$collections4$comparators$FixedOrderComparator$UnknownObjectBehavior\u003e\n  $r9 \u003d FixedOrderComparator$UnknownObjectBehavior unknownObjectBehavior\u003e\n  $i0 \u003d $r9.ordinal()\n  $i1 \u003d $r10[$i0]\n  UnsupportedOperationException; }\n}",
      "B3 {\n  if (r4 !\u003d null) goto B4 else B7\n}",
      "B4 {\n  if (r8 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $b3 \u003d 0\n  goto B8\n}",
      "B6 {\n  $b3 \u003d -1\n  goto B8\n}",
      "B7 {\n  $b3 \u003d 1\n}",
      "B8 {\n  return\n}",
      "B9 {\n  if (r4 !\u003d null) goto B10 else B13\n}",
      "B10 {\n  if (r8 !\u003d null) goto B11 else B12\n}",
      "B11 {\n  $b4 \u003d 0\n  goto B14\n}",
      "B12 {\n  $b4 \u003d 1\n  goto B14\n}",
      "B13 {\n  $b4 \u003d -1\n}",
      "B14 {\n  return\n}",
      "B15 {\n  if (r4 !\u003d null) goto B16 else B17\n}",
      "B16 {\n  $r18 \u003d r1\n  goto B18\n}",
      "B17 {\n  $r18 \u003d r5\n}",
      "B18 {\n  $r11 \u003d IllegalArgumentException\n  $r12 \u003d String.valueOf($r18)\n  $r13 \u003d dynInvoke makeConcatWithConstants($r12)\n  new IllegalArgumentException($r13)\n  throw $r11\n}",
      "B19 {\n  $r14 \u003d UnsupportedOperationException\n  $r15 \u003d FixedOrderComparator$UnknownObjectBehavior unknownObjectBehavior\u003e\n  $r16 \u003d String.valueOf($r15)\n  $r17 \u003d dynInvoke makeConcatWithConstants($r16)\n  new UnsupportedOperationException($r17)\n  throw $r14\n}",
      "B20 {\n  $i2 \u003d r4.compareTo(r8)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B20",
      "B2 --\u003e B3",
      "B2 --\u003e B9",
      "B2 --\u003e B15",
      "B2 --\u003e B19",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B9 --\u003e B13",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B14",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.comparators.FixedOrderComparator",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (this \u003d\u003d obj) {\r\n        return true;\r\n    }\r\n    if (obj \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (getClass() !\u003d obj.getClass()) {\r\n        return false;\r\n    }\r\n    final FixedOrderComparator\u003c?\u003e other \u003d (FixedOrderComparator\u003c?\u003e) obj;\r\n    return counter \u003d\u003d other.counter \u0026\u0026 isLocked \u003d\u003d other.isLocked \u0026\u0026 Objects.equals(map, other.map) \u0026\u0026 unknownObjectBehavior \u003d\u003d other.unknownObjectBehavior;\r\n}",
    "nodes": 13,
    "edges": 16,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r1 !\u003d null) → B3 | else → B4",
      "B4 : If($r2 \u003d\u003d $r3) → B5 | else → B6",
      "B6 : If($i1 !\u003d $i0) → B7 | else → B11",
      "B7 : If($z1 !\u003d $z0) → B8 | else → B11",
      "B8 : If($z2 \u003d\u003d 0) → B9 | else → B11",
      "B9 : If($r8 !\u003d $r7) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  FixedOrderComparator\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r1 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r2 \u003d r0.getClass()\n  $r3 \u003d r1.getClass()\n  if ($r2 \u003d\u003d $r3) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  r4 \u003d FixedOrderComparator) r1\n  $i1 \u003d FixedOrderComparator: int counter\u003e\n  $i0 \u003d FixedOrderComparator: int counter\u003e\n  if ($i1 !\u003d $i0) goto B7 else B11\n}",
      "B7 {\n  $z1 \u003d FixedOrderComparator: boolean isLocked\u003e\n  $z0 \u003d FixedOrderComparator: boolean isLocked\u003e\n  if ($z1 !\u003d $z0) goto B8 else B11\n}",
      "B8 {\n  $r6 \u003d Map map\u003e\n  $r5 \u003d Map map\u003e\n  $z2 \u003d Objects.equals($r6, $r5)\n  if ($z2 \u003d\u003d 0) goto B9 else B11\n}",
      "B9 {\n  $r8 \u003d FixedOrderComparator$UnknownObjectBehavior unknownObjectBehavior\u003e\n  $r7 \u003d FixedOrderComparator$UnknownObjectBehavior unknownObjectBehavior\u003e\n  if ($r8 !\u003d $r7) goto B10 else B11\n}",
      "B10 {\n  $z3 \u003d 1\n  goto B12\n}",
      "B11 {\n  $z3 \u003d 0\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B11",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FixedOrderComparator#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.comparators.NullComparator",
    "methodName": "compare",
    "signature": "int compare(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 13,
    "edges": 14,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 !\u003d null) → B3 | else → B7",
      "B3 : If($z1 \u003d\u003d 0) → B4 | else → B5",
      "B7 : If(r1 !\u003d null) → B8 | else → B12",
      "B8 : If($z0 \u003d\u003d 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  NullComparator\n  Object\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d null) goto B3 else B7\n}",
      "B3 {\n  $z1 \u003d NullComparator: boolean nullsAreHigh\u003e\n  if ($z1 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $b1 \u003d 1\n  goto B6\n}",
      "B5 {\n  $b1 \u003d -1\n}",
      "B6 {\n  return\n}",
      "B7 {\n  if (r1 !\u003d null) goto B8 else B12\n}",
      "B8 {\n  $z0 \u003d NullComparator: boolean nullsAreHigh\u003e\n  if ($z0 \u003d\u003d 0) goto B9 else B10\n}",
      "B9 {\n  $b2 \u003d -1\n  goto B11\n}",
      "B10 {\n  $b2 \u003d 1\n}",
      "B11 {\n  return\n}",
      "B12 {\n  $r3 \u003d Comparator nonNullComparator\u003e\n  $i0 \u003d $r3.compare(r0, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.comparators.NullComparator",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    if (obj \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (!obj.getClass().equals(this.getClass())) {\r\n        return false;\r\n    }\r\n    final NullComparator\u003c?\u003e other \u003d (NullComparator\u003c?\u003e) obj;\r\n    return nullsAreHigh \u003d\u003d other.nullsAreHigh \u0026\u0026 nonNullComparator.equals(other.nonNullComparator);\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(r0 !\u003d r1) → B3 | else → B4",
      "B4 : If($z0 !\u003d 0) → B5 | else → B6",
      "B6 : If($z2 !\u003d $z1) → B7 | else → B9",
      "B7 : If($z3 \u003d\u003d 0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  NullComparator\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 !\u003d r1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r2 \u003d r0.getClass()\n  $r3 \u003d r1.getClass()\n  $z0 \u003d $r2.equals($r3)\n  if ($z0 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  r4 \u003d NullComparator) r0\n  $z2 \u003d NullComparator: boolean nullsAreHigh\u003e\n  $z1 \u003d NullComparator: boolean nullsAreHigh\u003e\n  if ($z2 !\u003d $z1) goto B7 else B9\n}",
      "B7 {\n  $r6 \u003d Comparator nonNullComparator\u003e\n  $r5 \u003d Comparator nonNullComparator\u003e\n  $z3 \u003d $r6.equals($r5)\n  if ($z3 \u003d\u003d 0) goto B8 else B9\n}",
      "B8 {\n  $z4 \u003d 1\n  goto B10\n}",
      "B9 {\n  $z4 \u003d 0\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NullComparator#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.comparators.NullComparator",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    return (nullsAreHigh ? -1 : 1) * nonNullComparator.hashCode();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NullComparator\n  $z0 \u003d NullComparator: boolean nullsAreHigh\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $b2 \u003d -1\n  goto B3\n}",
      "B2 {\n  $b2 \u003d 1\n}",
      "B3 {\n  $r1 \u003d Comparator nonNullComparator\u003e\n  $i0 \u003d $r1.hashCode()\n  $i1 \u003d $b2 * $i0\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.comparators.ReverseComparator",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (this \u003d\u003d object) {\r\n        return true;\r\n    }\r\n    if (null \u003d\u003d object) {\r\n        return false;\r\n    }\r\n    if (object.getClass().equals(this.getClass())) {\r\n        final ReverseComparator\u003c?\u003e thatrc \u003d (ReverseComparator\u003c?\u003e) object;\r\n        return comparator.equals(thatrc.comparator);\r\n    }\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 6,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(null !\u003d r1) → B3 | else → B4",
      "B4 : If($z0 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  ReverseComparator\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (null !\u003d r1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r2 \u003d r1.getClass()\n  $r3 \u003d r0.getClass()\n  $z0 \u003d $r2.equals($r3)\n  if ($z0 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  r4 \u003d ReverseComparator) r1\n  $r6 \u003d Comparator comparator\u003e\n  $r5 \u003d Comparator comparator\u003e\n  $z1 \u003d $r6.equals($r5)\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ReverseComparator#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.comparators.TransformingComparator",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (this \u003d\u003d object) {\r\n        return true;\r\n    }\r\n    if (null \u003d\u003d object) {\r\n        return false;\r\n    }\r\n    if (object.getClass().equals(this.getClass())) {\r\n        final TransformingComparator\u003c?, ?\u003e comp \u003d (TransformingComparator\u003c?, ?\u003e) object;\r\n        return Objects.equals(decorated, comp.decorated) \u0026\u0026 Objects.equals(transformer, comp.transformer);\r\n    }\r\n    return false;\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(null !\u003d r1) → B3 | else → B4",
      "B4 : If($z0 \u003d\u003d 0) → B5 | else → B10",
      "B5 : If($z1 \u003d\u003d 0) → B6 | else → B8",
      "B6 : If($z2 \u003d\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  TransformingComparator\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (null !\u003d r1) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r2 \u003d r1.getClass()\n  $r3 \u003d r0.getClass()\n  $z0 \u003d $r2.equals($r3)\n  if ($z0 \u003d\u003d 0) goto B5 else B10\n}",
      "B5 {\n  r4 \u003d TransformingComparator) r1\n  $r6 \u003d Comparator decorated\u003e\n  $r5 \u003d Comparator decorated\u003e\n  $z1 \u003d Objects.equals($r6, $r5)\n  if ($z1 \u003d\u003d 0) goto B6 else B8\n}",
      "B6 {\n  $r8 \u003d Transformer transformer\u003e\n  $r7 \u003d Transformer transformer\u003e\n  $z2 \u003d Objects.equals($r8, $r7)\n  if ($z2 \u003d\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $z3 \u003d 1\n  goto B9\n}",
      "B8 {\n  $z3 \u003d 0\n}",
      "B9 {\n  return\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B10",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TransformingComparator#getClass(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.comparators.TransformingComparator",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    int total \u003d 17;\r\n    total \u003d total * 37 + (decorated \u003d\u003d null ? 0 : decorated.hashCode());\r\n    return total * 37 + (transformer \u003d\u003d null ? 0 : transformer.hashCode());\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B3 : If($r3 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  TransformingComparator\n  $r1 \u003d Comparator decorated\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i3 \u003d 0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Comparator decorated\u003e\n  $i3 \u003d $r2.hashCode()\n}",
      "B3 {\n  $i2 \u003d 629 + $i3\n  $i0 \u003d $i2 * 37\n  $r3 \u003d Transformer transformer\u003e\n  if ($r3 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $i4 \u003d 0\n  goto B6\n}",
      "B5 {\n  $r4 \u003d Transformer transformer\u003e\n  $i4 \u003d $r4.hashCode()\n}",
      "B6 {\n  $i1 \u003d $i0 + $i4\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.ComparatorUtils",
    "methodName": "chainedComparator",
    "signature": "java.util.Comparator chainedComparator(java.util.Comparator[])",
    "visibility": "public",
    "body": "{\r\n    final ComparatorChain\u003cE\u003e chain \u003d new ComparatorChain\u003c\u003e();\r\n    for (final Comparator\u003cE\u003e comparator : comparators) {\r\n        chain.addComparator(Objects.requireNonNull(comparator, \"comparator\"));\r\n    }\r\n    return chain;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Comparator[]\n  $r0 \u003d ComparatorChain\n  new ComparatorChain()\n  i0 \u003d lengthof r1\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r1[i1]\n  $r3 \u003d Objects.requireNonNull(r2, \"comparator\")\n  $r4 \u003d Comparator) $r3\n  $r0.addComparator($r4)\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.ComparatorUtils",
    "methodName": "max",
    "signature": "java.lang.Object max(java.lang.Object,java.lang.Object,java.util.Comparator)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 \u003c\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Object\n  Object\n  Comparator\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r2 \u003d Comparator NATURAL_COMPARATOR\u003e\n}",
      "B2 {\n  $i0 \u003d r2.compare(r0, r1)\n  if ($i0 \u003c\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d r0\n  goto B5\n}",
      "B4 {\n  $r3 \u003d r1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.ComparatorUtils",
    "methodName": "min",
    "signature": "java.lang.Object min(java.lang.Object,java.lang.Object,java.util.Comparator)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 \u003e\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Object\n  Object\n  Comparator\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r2 \u003d Comparator NATURAL_COMPARATOR\u003e\n}",
      "B2 {\n  $i0 \u003d r2.compare(r0, r1)\n  if ($i0 \u003e\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d r0\n  goto B5\n}",
      "B4 {\n  $r3 \u003d r1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.ComparatorUtils",
    "methodName": "nullHighComparator",
    "signature": "java.util.Comparator nullHighComparator(java.util.Comparator)",
    "visibility": "public",
    "body": "{\r\n    if (comparator \u003d\u003d null) {\r\n        comparator \u003d NATURAL_COMPARATOR;\r\n    }\r\n    return new NullComparator\u003c\u003e(comparator, true);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Comparator\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r1 \u003d Comparator NATURAL_COMPARATOR\u003e\n}",
      "B2 {\n  $r0 \u003d NullComparator\n  new NullComparator(r1, 1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.ComparatorUtils",
    "methodName": "nullLowComparator",
    "signature": "java.util.Comparator nullLowComparator(java.util.Comparator)",
    "visibility": "public",
    "body": "{\r\n    if (comparator \u003d\u003d null) {\r\n        comparator \u003d NATURAL_COMPARATOR;\r\n    }\r\n    return new NullComparator\u003c\u003e(comparator, false);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Comparator\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r1 \u003d Comparator NATURAL_COMPARATOR\u003e\n}",
      "B2 {\n  $r0 \u003d NullComparator\n  new NullComparator(r1, 0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.ComparatorUtils",
    "methodName": "transformedComparator",
    "signature": "java.util.Comparator transformedComparator(java.util.Comparator,org.apache.commons.collections4.Transformer)",
    "visibility": "public",
    "body": "{\r\n    if (comparator \u003d\u003d null) {\r\n        comparator \u003d NATURAL_COMPARATOR;\r\n    }\r\n    return new TransformingComparator\u003c\u003e(transformer, comparator);\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Comparator\n  Transformer\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r2 \u003d Comparator NATURAL_COMPARATOR\u003e\n}",
      "B2 {\n  $r0 \u003d TransformingComparator\n  new TransformingComparator(r1, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.EnumerationUtils",
    "methodName": "get",
    "signature": "java.lang.Object get(java.util.Enumeration,int)",
    "visibility": "public",
    "body": "{\r\n    CollectionUtils.checkIndexBounds(index);\r\n    int i \u003d index;\r\n    while (e.hasMoreElements()) {\r\n        i--;\r\n        if (i \u003d\u003d -1) {\r\n            return e.nextElement();\r\n        }\r\n        e.nextElement();\r\n    }\r\n    throw new IndexOutOfBoundsException(\"Entry does not exist: \" + i);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If(i1 !\u003d $i5) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Enumeration\n  i0 :\u003d @parameter1: int\n  CollectionUtils.checkIndexBounds(i0)\n  i1 \u003d i0\n}",
      "B1 {\n  $z0 \u003d r0.hasMoreElements()\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $i3 \u003d (int) -1\n  i1 \u003d i1 + $i3\n  $i5 \u003d (int) -1\n  if (i1 !\u003d $i5) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d r0.nextElement()\n  return\n}",
      "B4 {\n  r0.nextElement()\n  goto B1\n}",
      "B5 {\n  $r4 \u003d IndexOutOfBoundsException\n  $r2 \u003d dynInvoke makeConcatWithConstants(i1)\n  new IndexOutOfBoundsException($r2)\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.EnumerationUtils",
    "methodName": "toList",
    "signature": "java.util.List toList(java.util.StringTokenizer)",
    "visibility": "public",
    "body": "{\r\n    final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e(stringTokenizer.countTokens());\r\n    while (stringTokenizer.hasMoreTokens()) {\r\n        result.add(stringTokenizer.nextToken());\r\n    }\r\n    return result;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  StringTokenizer\n  $r0 \u003d ArrayList\n  $i0 \u003d r1.countTokens()\n  new ArrayList($i0)\n}",
      "B1 {\n  $z0 \u003d r1.hasMoreTokens()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r1.nextToken()\n  $r0.add($r2)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.FluentIterable",
    "methodName": "of",
    "signature": "org.apache.commons.collections4.FluentIterable of(java.lang.Iterable)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(iterable, \"iterable\");\r\n    if (iterable instanceof FluentIterable\u003c?\u003e) {\r\n        return (FluentIterable\u003cT\u003e) iterable;\r\n    }\r\n    return new FluentIterable\u003c\u003e(iterable);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Objects.requireNonNull(r0, \"iterable\")\n  $z0 \u003d FluentIterable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d FluentIterable) r0\n  return\n}",
      "B2 {\n  $r1 \u003d FluentIterable\n  new FluentIterable(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.AllPredicate",
    "methodName": "allPredicate",
    "signature": "org.apache.commons.collections4.Predicate allPredicate(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    final Predicate\u003c? super T\u003e[] preds \u003d validate(predicates);\r\n    if (preds.length \u003d\u003d 0) {\r\n        return truePredicate();\r\n    }\r\n    if (preds.length \u003d\u003d 1) {\r\n        return coerce(preds[0]);\r\n    }\r\n    return new AllPredicate\u003c\u003e(preds);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B2 : If($i1 !\u003d 1) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Collection\n  $r1 \u003d FunctorUtils.validate(r0)\n  $i0 \u003d lengthof $r1\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d TruePredicate.truePredicate()\n  return\n}",
      "B2 {\n  $i1 \u003d lengthof $r1\n  if ($i1 !\u003d 1) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d $r1[0]\n  $r4 \u003d FunctorUtils.coerce($r3)\n  $r5 \u003d Predicate) $r4\n  return\n}",
      "B4 {\n  $r2 \u003d AllPredicate\n  new AllPredicate($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AllPredicate#coerce(...1)",
        "body": "(source not found)"
      },
      {
        "name": "AllPredicate#validate(...1)",
        "body": "(source not found)"
      },
      {
        "name": "AllPredicate#truePredicate(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.functors.AllPredicate",
    "methodName": "allPredicate",
    "signature": "org.apache.commons.collections4.Predicate allPredicate(org.apache.commons.collections4.Predicate[])",
    "visibility": "public",
    "body": "{\r\n    validate(predicates);\r\n    if (predicates.length \u003d\u003d 0) {\r\n        return truePredicate();\r\n    }\r\n    if (predicates.length \u003d\u003d 1) {\r\n        return coerce(predicates[0]);\r\n    }\r\n    // \u003cT\u003e not needed in Eclipse but needed by the command line compiler\r\n    return new AllPredicate\u003cT\u003e(FunctorUtils.copy(predicates));\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B2 : If($i1 !\u003d 1) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Predicate[]\n  FunctorUtils.validate(r0)\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d TruePredicate.truePredicate()\n  return\n}",
      "B2 {\n  $i1 \u003d lengthof r0\n  if ($i1 !\u003d 1) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d r0[0]\n  $r5 \u003d FunctorUtils.coerce($r4)\n  $r6 \u003d Predicate) $r5\n  return\n}",
      "B4 {\n  $r1 \u003d AllPredicate\n  $r2 \u003d FunctorUtils.copy(r0)\n  $r3 \u003d Predicate[]) $r2\n  new AllPredicate($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AllPredicate#coerce(...1)",
        "body": "(source not found)"
      },
      {
        "name": "AllPredicate#validate(...1)",
        "body": "(source not found)"
      },
      {
        "name": "AllPredicate#truePredicate(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.functors.AllPredicate",
    "methodName": "test",
    "signature": "boolean test(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B5",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  AllPredicate\n  Object\n  r1 \u003d Predicate[] iPredicates\u003e\n  i0 \u003d lengthof r1\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B5\n}",
      "B2 {\n  r2 \u003d r1[i1]\n  $z0 \u003d r2.test(r3)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.AndPredicate",
    "methodName": "test",
    "signature": "boolean test(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B3",
      "B1 : If($z1 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  AndPredicate\n  Object\n  $r2 \u003d Predicate iPredicate1\u003e\n  $z0 \u003d $r2.test(r1)\n  if ($z0 \u003d\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $r3 \u003d Predicate iPredicate2\u003e\n  $z1 \u003d $r3.test(r1)\n  if ($z1 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.AnyPredicate",
    "methodName": "anyPredicate",
    "signature": "org.apache.commons.collections4.Predicate anyPredicate(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    final Predicate\u003c? super T\u003e[] preds \u003d FunctorUtils.validate(predicates);\r\n    if (preds.length \u003d\u003d 0) {\r\n        return FalsePredicate.\u003cT\u003efalsePredicate();\r\n    }\r\n    if (preds.length \u003d\u003d 1) {\r\n        return (Predicate\u003cT\u003e) preds[0];\r\n    }\r\n    return new AnyPredicate\u003c\u003e(preds);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B2 : If($i1 !\u003d 1) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Collection\n  $r1 \u003d FunctorUtils.validate(r0)\n  $i0 \u003d lengthof $r1\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d FalsePredicate.falsePredicate()\n  return\n}",
      "B2 {\n  $i1 \u003d lengthof $r1\n  if ($i1 !\u003d 1) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d $r1[0]\n  return\n}",
      "B4 {\n  $r2 \u003d AnyPredicate\n  new AnyPredicate($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.AnyPredicate",
    "methodName": "anyPredicate",
    "signature": "org.apache.commons.collections4.Predicate anyPredicate(org.apache.commons.collections4.Predicate[])",
    "visibility": "public",
    "body": "{\r\n    FunctorUtils.validate(predicates);\r\n    if (predicates.length \u003d\u003d 0) {\r\n        return FalsePredicate.\u003cT\u003efalsePredicate();\r\n    }\r\n    if (predicates.length \u003d\u003d 1) {\r\n        return (Predicate\u003cT\u003e) predicates[0];\r\n    }\r\n    return new AnyPredicate\u003cT\u003e(FunctorUtils.copy(predicates));\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B2 : If($i1 !\u003d 1) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Predicate[]\n  FunctorUtils.validate(r0)\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d FalsePredicate.falsePredicate()\n  return\n}",
      "B2 {\n  $i1 \u003d lengthof r0\n  if ($i1 !\u003d 1) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d r0[0]\n  return\n}",
      "B4 {\n  $r1 \u003d AnyPredicate\n  $r2 \u003d FunctorUtils.copy(r0)\n  $r3 \u003d Predicate[]) $r2\n  new AnyPredicate($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.AnyPredicate",
    "methodName": "test",
    "signature": "boolean test(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B5",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  AnyPredicate\n  Object\n  r1 \u003d Predicate[] iPredicates\u003e\n  i0 \u003d lengthof r1\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B5\n}",
      "B2 {\n  r2 \u003d r1[i1]\n  $z0 \u003d r2.test(r3)\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.ChainedClosure",
    "methodName": "chainedClosure",
    "signature": "org.apache.commons.collections4.Closure chainedClosure(org.apache.commons.collections4.Closure[])",
    "visibility": "public",
    "body": "{\r\n    FunctorUtils.validate(closures);\r\n    if (closures.length \u003d\u003d 0) {\r\n        return NOPClosure.\u003cE\u003enopClosure();\r\n    }\r\n    return new ChainedClosure\u003c\u003e(closures);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Closure[]\n  FunctorUtils.validate(r0)\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d NOPClosure.nopClosure()\n  return\n}",
      "B2 {\n  $r1 \u003d ChainedClosure\n  new ChainedClosure(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.ChainedClosure",
    "methodName": "chainedClosure",
    "signature": "org.apache.commons.collections4.Closure chainedClosure(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(closures, \"closures\");\r\n    if (closures.isEmpty()) {\r\n        return NOPClosure.\u003cE\u003enopClosure();\r\n    }\r\n    // convert to array like this to guarantee iterator() ordering\r\n    final Closure\u003c? super E\u003e[] cmds \u003d new Closure[closures.size()];\r\n    int i \u003d 0;\r\n    for (final Closure\u003c? super E\u003e closure : closures) {\r\n        cmds[i++] \u003d closure;\r\n    }\r\n    FunctorUtils.validate(cmds);\r\n    return new ChainedClosure\u003c\u003e(false, cmds);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B3 : If($z1 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Objects.requireNonNull(r0, \"closures\")\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d NOPClosure.nopClosure()\n  return\n}",
      "B2 {\n  $i0 \u003d r0.size()\n  r1 \u003d Closure)[$i0]\n  i2 \u003d 0\n  $r2 \u003d r0.iterator()\n}",
      "B3 {\n  $z1 \u003d $r2.hasNext()\n  if ($z1 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d $r2.next()\n  r5 \u003d Closure) $r4\n  $i1 \u003d i2\n  i2 \u003d i2 + 1\n  r1[$i1] \u003d r5\n  goto B3\n}",
      "B5 {\n  FunctorUtils.validate(r1)\n  $r3 \u003d ChainedClosure\n  new ChainedClosure(0, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.ChainedClosure",
    "methodName": "execute",
    "signature": "void execute(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ChainedClosure\n  Object\n  r1 \u003d Closure[] iClosures\u003e\n  i0 \u003d lengthof r1\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r1[i1]\n  r2.accept(r3)\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.ChainedTransformer",
    "methodName": "chainedTransformer",
    "signature": "org.apache.commons.collections4.Transformer chainedTransformer(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(transformers, \"transformers\");\r\n    if (transformers.isEmpty()) {\r\n        return NOPTransformer.\u003cT\u003enopTransformer();\r\n    }\r\n    // convert to array like this to guarantee iterator() ordering\r\n    final Transformer\u003cT, T\u003e[] cmds \u003d transformers.toArray(EMPTY_TRANSFORMER_ARRAY);\r\n    FunctorUtils.validate(cmds);\r\n    return new ChainedTransformer\u003c\u003e(false, cmds);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Objects.requireNonNull(r0, \"transformers\")\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d NOPTransformer.nopTransformer()\n  return\n}",
      "B2 {\n  $r1 \u003d Transformer[] EMPTY_TRANSFORMER_ARRAY\u003e\n  $r2 \u003d r0.toArray($r1)\n  r3 \u003d Transformer[]) $r2\n  FunctorUtils.validate(r3)\n  $r4 \u003d ChainedTransformer\n  new ChainedTransformer(0, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.ChainedTransformer",
    "methodName": "chainedTransformer",
    "signature": "org.apache.commons.collections4.Transformer chainedTransformer(org.apache.commons.collections4.Transformer[])",
    "visibility": "public",
    "body": "{\r\n    FunctorUtils.validate(transformers);\r\n    if (transformers.length \u003d\u003d 0) {\r\n        return NOPTransformer.\u003cT\u003enopTransformer();\r\n    }\r\n    return new ChainedTransformer\u003c\u003e(transformers);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Transformer[]\n  FunctorUtils.validate(r0)\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d NOPTransformer.nopTransformer()\n  return\n}",
      "B2 {\n  $r1 \u003d ChainedTransformer\n  new ChainedTransformer(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.ChainedTransformer",
    "methodName": "transform",
    "signature": "java.lang.Object transform(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ChainedTransformer\n  Object\n  r1 \u003d Transformer[] iTransformers\u003e\n  i0 \u003d lengthof r1\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r1[i1]\n  r3 \u003d r2.apply(r3)\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.CloneTransformer",
    "methodName": "transform",
    "signature": "java.lang.Object transform(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CloneTransformer\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d PrototypeFactory.prototypeFactory(r0)\n  $r2 \u003d $r1.get()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.ComparatorPredicate",
    "methodName": "test",
    "signature": "boolean test(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 23,
    "edges": 31,
    "cc": 10,
    "flowSummary": [
      "B0 : If(switch-on $i2) → B1 | else → B5",
      "B1 : If($i0 !\u003d 0) → B2 | else → B3",
      "B5 : If($i0 \u003c\u003d 0) → B6 | else → B7",
      "B9 : If($i0 \u003e\u003d 0) → B10 | else → B11",
      "B13 : If($i0 \u003c 0) → B14 | else → B15",
      "B17 : If($i0 \u003e 0) → B18 | else → B19"
    ],
    "blockList": [
      "B0 {\n  ComparatorPredicate\n  Object\n  $r3 \u003d Comparator comparator\u003e\n  $r2 \u003d Object object\u003e\n  $i0 \u003d $r3.compare($r2, r1)\n  $r5 \u003d ComparatorPredicate$1: int[] $SwitchMap$org$apache$commons$collections4$functors$ComparatorPredicate$Criterion\u003e\n  $r4 \u003d ComparatorPredicate$Criterion criterion\u003e\n  $i1 \u003d $r4.ordinal()\n  $i2 \u003d $r5[$i1]\n  IllegalStateException; }\n}",
      "B1 {\n  if ($i0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  z1 \u003d $z0\n  goto B22\n}",
      "B5 {\n  if ($i0 \u003c\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $z2 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z2 \u003d 0\n}",
      "B8 {\n  z1 \u003d $z2\n  goto B22\n}",
      "B9 {\n  if ($i0 \u003e\u003d 0) goto B10 else B11\n}",
      "B10 {\n  $z3 \u003d 1\n  goto B12\n}",
      "B11 {\n  $z3 \u003d 0\n}",
      "B12 {\n  z1 \u003d $z3\n  goto B22\n}",
      "B13 {\n  if ($i0 \u003c 0) goto B14 else B15\n}",
      "B14 {\n  $z4 \u003d 1\n  goto B16\n}",
      "B15 {\n  $z4 \u003d 0\n}",
      "B16 {\n  z1 \u003d $z4\n  goto B22\n}",
      "B17 {\n  if ($i0 \u003e 0) goto B18 else B19\n}",
      "B18 {\n  $z5 \u003d 1\n  goto B20\n}",
      "B19 {\n  $z5 \u003d 0\n}",
      "B20 {\n  z1 \u003d $z5\n  goto B22\n}",
      "B21 {\n  $r6 \u003d IllegalStateException\n  $r7 \u003d ComparatorPredicate$Criterion criterion\u003e\n  $r8 \u003d String.valueOf($r7)\n  $r9 \u003d dynInvoke makeConcatWithConstants($r8)\n  new IllegalStateException($r9)\n  throw $r6\n}",
      "B22 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B0 --\u003e B9",
      "B0 --\u003e B13",
      "B0 --\u003e B17",
      "B0 --\u003e B21",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B22",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B22",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B22",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e B22",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B20",
      "B20 --\u003e B22",
      "B21 --\u003e [EXIT]",
      "B22 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.ConstantFactory",
    "methodName": "constantFactory",
    "signature": "org.apache.commons.collections4.Factory constantFactory(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Factory NULL_INSTANCE\u003e\n  return\n}",
      "B2 {\n  $r1 \u003d ConstantFactory\n  new ConstantFactory(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.ConstantTransformer",
    "methodName": "constantTransformer",
    "signature": "org.apache.commons.collections4.Transformer constantTransformer(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d ConstantTransformer.nullTransformer()\n  return\n}",
      "B2 {\n  $r1 \u003d ConstantTransformer\n  new ConstantTransformer(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.ConstantTransformer",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (!(obj instanceof ConstantTransformer)) {\r\n        return false;\r\n    }\r\n    final Object otherConstant \u003d ((ConstantTransformer\u003c?, ?\u003e) obj).getConstant();\r\n    return Objects.equals(otherConstant, getConstant());\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ConstantTransformer\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d ConstantTransformer\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r2 \u003d ConstantTransformer) r0\n  $r3 \u003d $r2.getConstant()\n  $r4 \u003d r1.getConstant()\n  $z1 \u003d Objects.equals($r3, $r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ConstantTransformer#getConstant(...0)",
        "body": "{\r\n    return iConstant;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.functors.ConstantTransformer",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    int result \u003d \"ConstantTransformer\".hashCode() \u003c\u003c 2;\r\n    if (getConstant() !\u003d null) {\r\n        result |\u003d getConstant().hashCode();\r\n    }\r\n    return result;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ConstantTransformer\n  $r0 \u003d \"ConstantTransformer\"\n  $i0 \u003d $r0.hashCode()\n  i2 \u003d $i0 \u003c\u003c 2\n  $r2 \u003d r1.getConstant()\n  if ($r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r1.getConstant()\n  $i1 \u003d $r3.hashCode()\n  i2 \u003d i2 | $i1\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ConstantTransformer#getConstant(...0)",
        "body": "{\r\n    return iConstant;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.functors.DefaultEquator",
    "methodName": "hash",
    "signature": "int hash(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DefaultEquator\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i2 \u003d (int) -1\n  $i0 \u003d $i2\n  goto B3\n}",
      "B2 {\n  $i0 \u003d r0.hashCode()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.EqualPredicate",
    "methodName": "equalPredicate",
    "signature": "org.apache.commons.collections4.Predicate equalPredicate(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d NullPredicate.nullPredicate()\n  return\n}",
      "B2 {\n  $r1 \u003d EqualPredicate\n  new EqualPredicate(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.EqualPredicate",
    "methodName": "equalPredicate",
    "signature": "org.apache.commons.collections4.Predicate equalPredicate(java.lang.Object,org.apache.commons.collections4.Equator)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  Equator\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d NullPredicate.nullPredicate()\n  return\n}",
      "B2 {\n  $r1 \u003d EqualPredicate\n  new EqualPredicate(r0, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.EqualPredicate",
    "methodName": "test",
    "signature": "boolean test(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  EqualPredicate\n  Object\n  $r1 \u003d Equator equator\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d Equator equator\u003e\n  $r4 \u003d Object test\u003e\n  $z1 \u003d $r5.equate($r4, r2)\n  return\n}",
      "B2 {\n  $r3 \u003d Object test\u003e\n  $z0 \u003d Objects.equals($r3, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.ForClosure",
    "methodName": "forClosure",
    "signature": "org.apache.commons.collections4.Closure forClosure(int,org.apache.commons.collections4.Closure)",
    "visibility": "public",
    "body": "{\r\n    if (count \u003c\u003d 0 || closure \u003d\u003d null) {\r\n        return NOPClosure.\u003cE\u003enopClosure();\r\n    }\r\n    if (count \u003d\u003d 1) {\r\n        return (Closure\u003cE\u003e) closure;\r\n    }\r\n    return new ForClosure\u003c\u003e(count, closure);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c\u003d 0) → B1 | else → B2",
      "B1 : If(r1 !\u003d null) → B2 | else → B3",
      "B3 : If(i0 !\u003d 1) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  i0 :\u003d @parameter0: int\n  Closure\n  if (i0 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  if (r1 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r0 \u003d NOPClosure.nopClosure()\n  return\n}",
      "B3 {\n  if (i0 !\u003d 1) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r2 \u003d ForClosure\n  new ForClosure(i0, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.ForClosure",
    "methodName": "execute",
    "signature": "void execute(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d $i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ForClosure\n  Object\n  i1 \u003d 0\n}",
      "B1 {\n  $i0 \u003d ForClosure: int iCount\u003e\n  if (i1 \u003e\u003d $i0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d Closure iClosure\u003e\n  $r2.accept(r1)\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.IdentityPredicate",
    "methodName": "identityPredicate",
    "signature": "org.apache.commons.collections4.Predicate identityPredicate(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d NullPredicate.nullPredicate()\n  return\n}",
      "B2 {\n  $r1 \u003d IdentityPredicate\n  new IdentityPredicate(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.IdentityPredicate",
    "methodName": "test",
    "signature": "boolean test(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  IdentityPredicate\n  Object\n  $r2 \u003d Object iValue\u003e\n  if ($r2 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.IfClosure",
    "methodName": "execute",
    "signature": "void execute(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  IfClosure\n  Object\n  $r2 \u003d Predicate iPredicate\u003e\n  $z0 \u003d $r2.test(r1)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d Closure iTrueClosure\u003e\n  $r4.accept(r1)\n  goto B3\n}",
      "B2 {\n  $r3 \u003d Closure iFalseClosure\u003e\n  $r3.accept(r1)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.IfTransformer",
    "methodName": "transform",
    "signature": "java.lang.Object transform(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  IfTransformer\n  Object\n  $r2 \u003d Predicate iPredicate\u003e\n  $z0 \u003d $r2.test(r1)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d Transformer iTrueTransformer\u003e\n  $r6 \u003d $r5.apply(r1)\n  return\n}",
      "B2 {\n  $r3 \u003d Transformer iFalseTransformer\u003e\n  $r4 \u003d $r3.apply(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.InstantiateFactory",
    "methodName": "instantiateFactory",
    "signature": "org.apache.commons.collections4.Factory instantiateFactory(java.lang.Class,java.lang.Class[],java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(classToInstantiate, \"classToInstantiate\");\r\n    if (paramTypes \u003d\u003d null \u0026\u0026 args !\u003d null || paramTypes !\u003d null \u0026\u0026 args \u003d\u003d null || paramTypes !\u003d null \u0026\u0026 args !\u003d null \u0026\u0026 paramTypes.length !\u003d args.length) {\r\n        throw new IllegalArgumentException(\"Parameter types must match the arguments\");\r\n    }\r\n    if (paramTypes \u003d\u003d null || paramTypes.length \u003d\u003d 0) {\r\n        return new InstantiateFactory\u003c\u003e(classToInstantiate);\r\n    }\r\n    return new InstantiateFactory\u003c\u003e(classToInstantiate, paramTypes, args);\r\n}",
    "nodes": 12,
    "edges": 18,
    "cc": 8,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B1 : If(r4 !\u003d null) → B2 | else → B7",
      "B2 : If(r1 \u003d\u003d null) → B3 | else → B4",
      "B3 : If(r4 \u003d\u003d null) → B4 | else → B7",
      "B4 : If(r1 \u003d\u003d null) → B5 | else → B8",
      "B5 : If(r4 \u003d\u003d null) → B6 | else → B8",
      "B6 : If($i2 \u003d\u003d $i1) → B7 | else → B8",
      "B8 : If(r1 \u003d\u003d null) → B9 | else → B10",
      "B9 : If($i0 !\u003d 0) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  Class\n  Class[]\n  Object[]\n  Objects.requireNonNull(r0, \"classToInstantiate\")\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r4 !\u003d null) goto B2 else B7\n}",
      "B2 {\n  if (r1 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  if (r4 \u003d\u003d null) goto B4 else B7\n}",
      "B4 {\n  if (r1 \u003d\u003d null) goto B5 else B8\n}",
      "B5 {\n  if (r4 \u003d\u003d null) goto B6 else B8\n}",
      "B6 {\n  $i2 \u003d lengthof r1\n  $i1 \u003d lengthof r4\n  if ($i2 \u003d\u003d $i1) goto B7 else B8\n}",
      "B7 {\n  $r5 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Parameter types must match the arguments\")\n  throw $r5\n}",
      "B8 {\n  if (r1 \u003d\u003d null) goto B9 else B10\n}",
      "B9 {\n  $i0 \u003d lengthof r1\n  if ($i0 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  $r2 \u003d InstantiateFactory\n  new InstantiateFactory(r0)\n  return\n}",
      "B11 {\n  $r3 \u003d InstantiateFactory\n  new InstantiateFactory(r0, r1, r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.InstantiateFactory",
    "methodName": "create",
    "signature": "java.lang.Object create()",
    "visibility": "public",
    "body": "{\r\n    // needed for post-serialization\r\n    if (iConstructor \u003d\u003d null) {\r\n        findConstructor();\r\n    }\r\n    try {\r\n        return iConstructor.newInstance(iArgs);\r\n    } catch (final InstantiationException ex) {\r\n        throw new FunctorException(\"InstantiateFactory: InstantiationException\", ex);\r\n    } catch (final IllegalAccessException ex) {\r\n        throw new FunctorException(\"InstantiateFactory: Constructor must be public\", ex);\r\n    } catch (final InvocationTargetException ex) {\r\n        throw new FunctorException(\"InstantiateFactory: Constructor threw an exception\", ex);\r\n    }\r\n}",
    "nodes": 8,
    "edges": 11,
    "cc": 5,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  InstantiateFactory\n  $r1 \u003d Constructor iConstructor\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r0.findConstructor()\n}",
      "B2 {\n  $r3 \u003d Constructor iConstructor\u003e\n  $r2 \u003d Object[] iArgs\u003e\n  $r4 \u003d $r3.newInstance($r2)\n  return\n}",
      "B3 {\n  $r9 :\u003d @caughtexception\n  $r10 \u003d FunctorException\n  new FunctorException(\"InstantiateFactory: InstantiationException\", $r9)\n  throw $r10\n}",
      "B4 {\n  $r7 :\u003d @caughtexception\n  $r8 \u003d FunctorException\n  new FunctorException(\"InstantiateFactory: Constructor must be public\", $r7)\n  throw $r8\n}",
      "B5 {\n  $r5 :\u003d @caughtexception\n  $r6 \u003d FunctorException\n  new FunctorException(\"InstantiateFactory: Constructor threw an exception\", $r5)\n  throw $r6\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "InstantiateFactory#findConstructor(...0)",
        "body": "{\r\n    try {\r\n        iConstructor \u003d iClassToInstantiate.getConstructor(iParamTypes);\r\n    } catch (final NoSuchMethodException ex) {\r\n        throw new IllegalArgumentException(\"InstantiateFactory: The constructor must exist and be public \");\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.functors.InstantiateFactory",
    "methodName": "findConstructor",
    "signature": "void findConstructor()",
    "visibility": "private",
    "body": "{\r\n    try {\r\n        iConstructor \u003d iClassToInstantiate.getConstructor(iParamTypes);\r\n    } catch (final NoSuchMethodException ex) {\r\n        throw new IllegalArgumentException(\"InstantiateFactory: The constructor must exist and be public \");\r\n    }\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  InstantiateFactory\n  $r2 \u003d Class iClassToInstantiate\u003e\n  $r1 \u003d Class[] iParamTypes\u003e\n  $r3 \u003d $r2.getConstructor($r1)\n  Constructor iConstructor\u003e \u003d $r3\n  goto B2\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  $r5 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"InstantiateFactory: The constructor must exist and be public \")\n  throw $r5\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.InstantiateTransformer",
    "methodName": "instantiateTransformer",
    "signature": "org.apache.commons.collections4.Transformer instantiateTransformer(java.lang.Class[],java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    if (paramTypes \u003d\u003d null \u0026\u0026 args !\u003d null || paramTypes !\u003d null \u0026\u0026 args \u003d\u003d null || paramTypes !\u003d null \u0026\u0026 args !\u003d null \u0026\u0026 paramTypes.length !\u003d args.length) {\r\n        throw new IllegalArgumentException(\"Parameter types must match the arguments\");\r\n    }\r\n    if (paramTypes \u003d\u003d null || paramTypes.length \u003d\u003d 0) {\r\n        return new InstantiateTransformer\u003c\u003e();\r\n    }\r\n    return new InstantiateTransformer\u003c\u003e(paramTypes, args);\r\n}",
    "nodes": 12,
    "edges": 18,
    "cc": 8,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B1 : If(r3 !\u003d null) → B2 | else → B7",
      "B2 : If(r0 \u003d\u003d null) → B3 | else → B4",
      "B3 : If(r3 \u003d\u003d null) → B4 | else → B7",
      "B4 : If(r0 \u003d\u003d null) → B5 | else → B8",
      "B5 : If(r3 \u003d\u003d null) → B6 | else → B8",
      "B6 : If($i2 \u003d\u003d $i1) → B7 | else → B8",
      "B8 : If(r0 \u003d\u003d null) → B9 | else → B10",
      "B9 : If($i0 !\u003d 0) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  Class[]\n  Object[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r3 !\u003d null) goto B2 else B7\n}",
      "B2 {\n  if (r0 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  if (r3 \u003d\u003d null) goto B4 else B7\n}",
      "B4 {\n  if (r0 \u003d\u003d null) goto B5 else B8\n}",
      "B5 {\n  if (r3 \u003d\u003d null) goto B6 else B8\n}",
      "B6 {\n  $i2 \u003d lengthof r0\n  $i1 \u003d lengthof r3\n  if ($i2 \u003d\u003d $i1) goto B7 else B8\n}",
      "B7 {\n  $r4 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Parameter types must match the arguments\")\n  throw $r4\n}",
      "B8 {\n  if (r0 \u003d\u003d null) goto B9 else B10\n}",
      "B9 {\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  $r1 \u003d InstantiateTransformer\n  new InstantiateTransformer()\n  return\n}",
      "B11 {\n  $r2 \u003d InstantiateTransformer\n  new InstantiateTransformer(r0, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.InstantiateTransformer",
    "methodName": "transform",
    "signature": "java.lang.Object transform(java.lang.Class)",
    "visibility": "public",
    "body": "{\r\n    try {\r\n        if (input \u003d\u003d null) {\r\n            throw new FunctorException(\"InstantiateTransformer: Input object was not an instanceof Class, it was a null object\");\r\n        }\r\n        final Constructor\u003c? extends T\u003e con \u003d input.getConstructor(iParamTypes);\r\n        return con.newInstance(iArgs);\r\n    } catch (final NoSuchMethodException ex) {\r\n        throw new FunctorException(\"InstantiateTransformer: The constructor must exist and be public \");\r\n    } catch (final InstantiationException ex) {\r\n        throw new FunctorException(\"InstantiateTransformer: InstantiationException\", ex);\r\n    } catch (final IllegalAccessException ex) {\r\n        throw new FunctorException(\"InstantiateTransformer: Constructor must be public\", ex);\r\n    } catch (final InvocationTargetException ex) {\r\n        throw new FunctorException(\"InstantiateTransformer: Constructor threw an exception\", ex);\r\n    }\r\n}",
    "nodes": 13,
    "edges": 32,
    "cc": 21,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B4"
    ],
    "blockList": [
      "B0 {\n  InstantiateTransformer\n  Class\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d FunctorException\n  new FunctorException(\"InstantiateTransformer: Input object was not an instanceof Class, it was a null object\")\n  throw $r6\n}",
      "B2 {\n  $r2 \u003d Class[] iParamTypes\u003e\n  $r3 \u003d r0.getConstructor($r2)\n  $r4 \u003d Object[] iArgs\u003e\n  $r5 \u003d $r3.newInstance($r4)\n  return\n}",
      "B3 {\n  $r13 :\u003d @caughtexception\n  $r14 \u003d FunctorException\n  new FunctorException(\"InstantiateTransformer: The constructor must exist and be public \")\n  throw $r14\n}",
      "B4 {\n  $r11 :\u003d @caughtexception\n  $r12 \u003d FunctorException\n  new FunctorException(\"InstantiateTransformer: InstantiationException\", $r11)\n  throw $r12\n}",
      "B5 {\n  $r9 :\u003d @caughtexception\n  $r10 \u003d FunctorException\n  new FunctorException(\"InstantiateTransformer: Constructor must be public\", $r9)\n  throw $r10\n}",
      "B6 {\n  $r7 :\u003d @caughtexception\n  $r8 \u003d FunctorException\n  new FunctorException(\"InstantiateTransformer: Constructor threw an exception\", $r7)\n  throw $r8\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.InvokerTransformer",
    "methodName": "invokerTransformer",
    "signature": "org.apache.commons.collections4.Transformer invokerTransformer(java.lang.String,java.lang.Class[],java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(methodName, \"methodName\");\r\n    if (paramTypes \u003d\u003d null \u0026\u0026 args !\u003d null || paramTypes !\u003d null \u0026\u0026 args \u003d\u003d null || paramTypes !\u003d null \u0026\u0026 args !\u003d null \u0026\u0026 paramTypes.length !\u003d args.length) {\r\n        throw new IllegalArgumentException(\"The parameter types must match the arguments\");\r\n    }\r\n    if (paramTypes \u003d\u003d null || paramTypes.length \u003d\u003d 0) {\r\n        return new InvokerTransformer\u003c\u003e(methodName);\r\n    }\r\n    return new InvokerTransformer\u003c\u003e(methodName, paramTypes, args);\r\n}",
    "nodes": 12,
    "edges": 18,
    "cc": 8,
    "flowSummary": [
      "B0 : If(r1 !\u003d null) → B1 | else → B2",
      "B1 : If(r4 !\u003d null) → B2 | else → B7",
      "B2 : If(r1 \u003d\u003d null) → B3 | else → B4",
      "B3 : If(r4 \u003d\u003d null) → B4 | else → B7",
      "B4 : If(r1 \u003d\u003d null) → B5 | else → B8",
      "B5 : If(r4 \u003d\u003d null) → B6 | else → B8",
      "B6 : If($i2 \u003d\u003d $i1) → B7 | else → B8",
      "B8 : If(r1 \u003d\u003d null) → B9 | else → B10",
      "B9 : If($i0 !\u003d 0) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  String\n  Class[]\n  Object[]\n  Objects.requireNonNull(r0, \"methodName\")\n  if (r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (r4 !\u003d null) goto B2 else B7\n}",
      "B2 {\n  if (r1 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  if (r4 \u003d\u003d null) goto B4 else B7\n}",
      "B4 {\n  if (r1 \u003d\u003d null) goto B5 else B8\n}",
      "B5 {\n  if (r4 \u003d\u003d null) goto B6 else B8\n}",
      "B6 {\n  $i2 \u003d lengthof r1\n  $i1 \u003d lengthof r4\n  if ($i2 \u003d\u003d $i1) goto B7 else B8\n}",
      "B7 {\n  $r5 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"The parameter types must match the arguments\")\n  throw $r5\n}",
      "B8 {\n  if (r1 \u003d\u003d null) goto B9 else B10\n}",
      "B9 {\n  $i0 \u003d lengthof r1\n  if ($i0 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  $r2 \u003d InvokerTransformer\n  new InvokerTransformer(r0)\n  return\n}",
      "B11 {\n  $r3 \u003d InvokerTransformer\n  new InvokerTransformer(r0, r1, r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.InvokerTransformer",
    "methodName": "transform",
    "signature": "java.lang.Object transform(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (input \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    try {\r\n        final Class\u003c?\u003e cls \u003d input.getClass();\r\n        final Method method \u003d cls.getMethod(iMethodName, iParamTypes);\r\n        return (R) method.invoke(input, iArgs);\r\n    } catch (final NoSuchMethodException ex) {\r\n        throw new FunctorException(\"InvokerTransformer: The method \u0027\" + iMethodName + \"\u0027 on \u0027\" + input.getClass() + \"\u0027 does not exist\");\r\n    } catch (final IllegalAccessException ex) {\r\n        throw new FunctorException(\"InvokerTransformer: The method \u0027\" + iMethodName + \"\u0027 on \u0027\" + input.getClass() + \"\u0027 cannot be accessed\");\r\n    } catch (final InvocationTargetException ex) {\r\n        throw new FunctorException(\"InvokerTransformer: The method \u0027\" + iMethodName + \"\u0027 on \u0027\" + input.getClass() + \"\u0027 threw an exception\", ex);\r\n    }\r\n}",
    "nodes": 11,
    "edges": 25,
    "cc": 16,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  InvokerTransformer\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getClass()\n  $r4 \u003d String iMethodName\u003e\n  $r3 \u003d Class[] iParamTypes\u003e\n  $r5 \u003d $r1.getMethod($r4, $r3)\n  $r6 \u003d Object[] iArgs\u003e\n  $r7 \u003d $r5.invoke(r0, $r6)\n  return\n}",
      "B3 {\n  $r20 :\u003d @caughtexception\n  $r21 \u003d FunctorException\n  $r22 \u003d String iMethodName\u003e\n  $r23 \u003d r0.getClass()\n  $r24 \u003d String.valueOf($r23)\n  $r25 \u003d dynInvoke makeConcatWithConstants($r22, $r24)\n  new FunctorException($r25)\n  throw $r21\n}",
      "B4 {\n  $r14 :\u003d @caughtexception\n  $r15 \u003d FunctorException\n  $r16 \u003d String iMethodName\u003e\n  $r17 \u003d r0.getClass()\n  $r18 \u003d String.valueOf($r17)\n  $r19 \u003d dynInvoke makeConcatWithConstants($r16, $r18)\n  new FunctorException($r19)\n  throw $r15\n}",
      "B5 {\n  $r8 :\u003d @caughtexception\n  $r9 \u003d FunctorException\n  $r10 \u003d String iMethodName\u003e\n  $r11 \u003d r0.getClass()\n  $r12 \u003d String.valueOf($r11)\n  $r13 \u003d dynInvoke makeConcatWithConstants($r10, $r12)\n  new FunctorException($r13, $r8)\n  throw $r9\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.MapTransformer",
    "methodName": "mapTransformer",
    "signature": "org.apache.commons.collections4.Transformer mapTransformer(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    if (map \u003d\u003d null) {\r\n        return ConstantTransformer.\u003cI, O\u003enullTransformer();\r\n    }\r\n    return new MapTransformer\u003c\u003e(map);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Map\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d ConstantTransformer.nullTransformer()\n  return\n}",
      "B2 {\n  $r1 \u003d MapTransformer\n  new MapTransformer(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.NonePredicate",
    "methodName": "nonePredicate",
    "signature": "org.apache.commons.collections4.Predicate nonePredicate(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    final Predicate\u003c? super T\u003e[] preds \u003d FunctorUtils.validate(predicates);\r\n    if (preds.length \u003d\u003d 0) {\r\n        return TruePredicate.\u003cT\u003etruePredicate();\r\n    }\r\n    return new NonePredicate\u003c\u003e(preds);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Collection\n  $r1 \u003d FunctorUtils.validate(r0)\n  $i0 \u003d lengthof $r1\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d TruePredicate.truePredicate()\n  return\n}",
      "B2 {\n  $r2 \u003d NonePredicate\n  new NonePredicate($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.NonePredicate",
    "methodName": "nonePredicate",
    "signature": "org.apache.commons.collections4.Predicate nonePredicate(org.apache.commons.collections4.Predicate[])",
    "visibility": "public",
    "body": "{\r\n    FunctorUtils.validate(predicates);\r\n    if (predicates.length \u003d\u003d 0) {\r\n        return TruePredicate.\u003cT\u003etruePredicate();\r\n    }\r\n    // \u003cT\u003e not needed in Eclipse but needed by the command line compiler\r\n    return new NonePredicate\u003cT\u003e(FunctorUtils.copy(predicates));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Predicate[]\n  FunctorUtils.validate(r0)\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d TruePredicate.truePredicate()\n  return\n}",
      "B2 {\n  $r1 \u003d NonePredicate\n  $r2 \u003d FunctorUtils.copy(r0)\n  $r3 \u003d Predicate[]) $r2\n  new NonePredicate($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.NonePredicate",
    "methodName": "test",
    "signature": "boolean test(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B5",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  NonePredicate\n  Object\n  r1 \u003d Predicate[] iPredicates\u003e\n  i0 \u003d lengthof r1\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B5\n}",
      "B2 {\n  r2 \u003d r1[i1]\n  $z0 \u003d r2.test(r3)\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.NotNullPredicate",
    "methodName": "test",
    "signature": "boolean test(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NotNullPredicate\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.NotPredicate",
    "methodName": "test",
    "signature": "boolean test(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NotPredicate\n  Object\n  $r2 \u003d Predicate iPredicate\u003e\n  $z0 \u003d $r2.test(r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.NullIsExceptionPredicate",
    "methodName": "test",
    "signature": "boolean test(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NullIsExceptionPredicate\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d FunctorException\n  new FunctorException(\"Input Object must not be null\")\n  throw $r3\n}",
      "B2 {\n  $r2 \u003d Predicate iPredicate\u003e\n  $z0 \u003d $r2.test(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.NullIsFalsePredicate",
    "methodName": "test",
    "signature": "boolean test(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NullIsFalsePredicate\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d Predicate iPredicate\u003e\n  $z0 \u003d $r2.test(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.NullIsTruePredicate",
    "methodName": "test",
    "signature": "boolean test(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NullIsTruePredicate\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d Predicate iPredicate\u003e\n  $z0 \u003d $r2.test(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.NullPredicate",
    "methodName": "test",
    "signature": "boolean test(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NullPredicate\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.OnePredicate",
    "methodName": "onePredicate",
    "signature": "org.apache.commons.collections4.Predicate onePredicate(org.apache.commons.collections4.Predicate[])",
    "visibility": "public",
    "body": "{\r\n    FunctorUtils.validate(predicates);\r\n    if (predicates.length \u003d\u003d 0) {\r\n        return FalsePredicate.\u003cT\u003efalsePredicate();\r\n    }\r\n    if (predicates.length \u003d\u003d 1) {\r\n        return (Predicate\u003cT\u003e) predicates[0];\r\n    }\r\n    // \u003cT\u003e not needed in Eclipse but needed by the command line compiler\r\n    return new OnePredicate\u003cT\u003e(FunctorUtils.copy(predicates));\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B2 : If($i1 !\u003d 1) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Predicate[]\n  FunctorUtils.validate(r0)\n  $i0 \u003d lengthof r0\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d FalsePredicate.falsePredicate()\n  return\n}",
      "B2 {\n  $i1 \u003d lengthof r0\n  if ($i1 !\u003d 1) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d r0[0]\n  return\n}",
      "B4 {\n  $r1 \u003d OnePredicate\n  $r2 \u003d FunctorUtils.copy(r0)\n  $r3 \u003d Predicate[]) $r2\n  new OnePredicate($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.OnePredicate",
    "methodName": "test",
    "signature": "boolean test(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B7",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B6",
      "B3 : If(z2 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  OnePredicate\n  Object\n  z1 \u003d 0\n  z3 \u003d 0\n  z2 \u003d 0\n  r1 \u003d Predicate[] iPredicates\u003e\n  i0 \u003d lengthof r1\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B7\n}",
      "B2 {\n  r2 \u003d r1[i1]\n  $z0 \u003d r2.test(r3)\n  if ($z0 \u003d\u003d 0) goto B3 else B6\n}",
      "B3 {\n  if (z2 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  z1 \u003d 1\n  z3 \u003d 1\n  z2 \u003d 1\n}",
      "B6 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B6 --\u003e B1",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.OrPredicate",
    "methodName": "test",
    "signature": "boolean test(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  OrPredicate\n  Object\n  $r2 \u003d Predicate iPredicate1\u003e\n  $z0 \u003d $r2.test(r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Predicate iPredicate2\u003e\n  $z1 \u003d $r3.test(r1)\n  if ($z1 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.PredicateTransformer",
    "methodName": "predicateTransformer",
    "signature": "org.apache.commons.collections4.Transformer predicateTransformer(org.apache.commons.collections4.Predicate)",
    "visibility": "public",
    "body": "{\r\n    if (predicate \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"Predicate must not be null\");\r\n    }\r\n    return new PredicateTransformer\u003c\u003e(predicate);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Predicate\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Predicate must not be null\")\n  throw $r2\n}",
      "B2 {\n  $r1 \u003d PredicateTransformer\n  new PredicateTransformer(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.PrototypeFactory",
    "methodName": "prototypeFactory",
    "signature": "org.apache.commons.collections4.Factory prototypeFactory(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 24,
    "edges": 39,
    "cc": 17,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B21 : If($z0 \u003d\u003d 0) → B22 | else → B23"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d ConstantFactory.constantFactory(null)\n  return\n}",
      "B2 {\n  $r1 \u003d r0.getClass()\n  $r2 \u003d Class[]) null\n  $r3 \u003d $r1.getMethod(\"clone\", $r2)\n  $r4 \u003d PrototypeFactory$PrototypeCloneFactory\n  new PrototypeFactory$PrototypeCloneFactory(r0, $r3)\n  return\n}",
      "B3 {\n  $r10 :\u003d @caughtexception\n  $r11 \u003d r0.getClass()\n  $r12 \u003d Class)[1]\n  $r13 \u003d r0.getClass()\n  $r12[0] \u003d $r13\n  $r11.getConstructor($r12)\n  $r14 \u003d InstantiateFactory\n  $r15 \u003d r0.getClass()\n  $r16 \u003d Class)[1]\n  $r17 \u003d r0.getClass()\n  $r16[0] \u003d $r17\n  $r18 \u003d Object)[1]\n  $r18[0] \u003d r0\n  new InstantiateFactory($r15, $r16, $r18)\n  return\n}",
      "B4 {\n  $r6 :\u003d @caughtexception\n  $z0 \u003d Serializable\n  if ($z0 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r8 \u003d PrototypeFactory$PrototypeSerializationFactory\n  $r9 \u003d Serializable) r0\n  new PrototypeFactory$PrototypeSerializationFactory($r9)\n  return\n}",
      "B6 {\n  $r7 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"The prototype must be cloneable via a public clone method\")\n  throw $r7\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.SwitchClosure",
    "methodName": "switchClosure",
    "signature": "org.apache.commons.collections4.Closure switchClosure(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(predicatesAndClosures, \"predicatesAndClosures\");\r\n    // convert to array like this to guarantee iterator() ordering\r\n    final Closure\u003c? super E\u003e defaultClosure \u003d predicatesAndClosures.remove(null);\r\n    final int size \u003d predicatesAndClosures.size();\r\n    if (size \u003d\u003d 0) {\r\n        return (Closure\u003cE\u003e) (defaultClosure \u003d\u003d null ? NOPClosure.\u003cE\u003enopClosure() : defaultClosure);\r\n    }\r\n    final Closure\u003cE\u003e[] closures \u003d new Closure[size];\r\n    final Predicate\u003cE\u003e[] preds \u003d new Predicate[size];\r\n    int i \u003d 0;\r\n    for (final Map.Entry\u003cPredicate\u003cE\u003e, Closure\u003cE\u003e\u003e entry : predicatesAndClosures.entrySet()) {\r\n        preds[i] \u003d entry.getKey();\r\n        closures[i] \u003d entry.getValue();\r\n        i++;\r\n    }\r\n    return new SwitchClosure\u003c\u003e(false, preds, closures, defaultClosure);\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B5",
      "B1 : If(r2 !\u003d null) → B2 | else → B3",
      "B6 : If($z0 \u003d\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  Map\n  Objects.requireNonNull(r0, \"predicatesAndClosures\")\n  $r1 \u003d r0.remove(null)\n  r2 \u003d Closure) $r1\n  $i0 \u003d r0.size()\n  if ($i0 !\u003d 0) goto B1 else B5\n}",
      "B1 {\n  if (r2 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r14 \u003d NOPClosure.nopClosure()\n  goto B4\n}",
      "B3 {\n  $r14 \u003d r2\n}",
      "B4 {\n  return\n}",
      "B5 {\n  r3 \u003d Closure)[$i0]\n  r4 \u003d Predicate)[$i0]\n  i1 \u003d 0\n  $r5 \u003d r0.entrySet()\n  $r6 \u003d $r5.iterator()\n}",
      "B6 {\n  $z0 \u003d $r6.hasNext()\n  if ($z0 \u003d\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $r8 \u003d $r6.next()\n  r9 \u003d Map$Entry) $r8\n  $r10 \u003d r9.getKey()\n  $r11 \u003d Predicate) $r10\n  r4[i1] \u003d $r11\n  $r12 \u003d r9.getValue()\n  $r13 \u003d Closure) $r12\n  r3[i1] \u003d $r13\n  i1 \u003d i1 + 1\n  goto B6\n}",
      "B8 {\n  $r7 \u003d SwitchClosure\n  new SwitchClosure(0, r4, r3, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B6",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.SwitchClosure",
    "methodName": "switchClosure",
    "signature": "org.apache.commons.collections4.Closure switchClosure(org.apache.commons.collections4.Predicate[],org.apache.commons.collections4.Closure[],org.apache.commons.collections4.Closure)",
    "visibility": "public",
    "body": "{\r\n    FunctorUtils.validate(predicates);\r\n    FunctorUtils.validate(closures);\r\n    if (predicates.length !\u003d closures.length) {\r\n        throw new IllegalArgumentException(\"The predicate and closure arrays must be the same size\");\r\n    }\r\n    if (predicates.length \u003d\u003d 0) {\r\n        return (Closure\u003cE\u003e) (defaultClosure \u003d\u003d null ? NOPClosure.\u003cE\u003enopClosure() : defaultClosure);\r\n    }\r\n    return new SwitchClosure\u003c\u003e(predicates, closures, defaultClosure);\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003d\u003d $i0) → B1 | else → B2",
      "B2 : If($i2 !\u003d 0) → B3 | else → B7",
      "B3 : If(r3 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Predicate[]\n  Closure[]\n  Closure\n  FunctorUtils.validate(r0)\n  FunctorUtils.validate(r1)\n  $i1 \u003d lengthof r0\n  $i0 \u003d lengthof r1\n  if ($i1 \u003d\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"The predicate and closure arrays must be the same size\")\n  throw $r4\n}",
      "B2 {\n  $i2 \u003d lengthof r0\n  if ($i2 !\u003d 0) goto B3 else B7\n}",
      "B3 {\n  if (r3 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r5 \u003d NOPClosure.nopClosure()\n  goto B6\n}",
      "B5 {\n  $r5 \u003d r3\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $r2 \u003d SwitchClosure\n  new SwitchClosure(r0, r1, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.SwitchClosure",
    "methodName": "execute",
    "signature": "void execute(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d $i0) → B2 | else → B5",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  SwitchClosure\n  Object\n  i1 \u003d 0\n}",
      "B1 {\n  $r1 \u003d Predicate[] iPredicates\u003e\n  $i0 \u003d lengthof $r1\n  if (i1 \u003e\u003d $i0) goto B2 else B5\n}",
      "B2 {\n  $r4 \u003d Predicate[] iPredicates\u003e\n  $r5 \u003d $r4[i1]\n  $z0 \u003d $r5.test(r2)\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d Closure[] iClosures\u003e\n  $r7 \u003d $r6[i1]\n  $r7.accept(r2)\n  return\n}",
      "B4 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B5 {\n  $r3 \u003d Closure iDefault\u003e\n  $r3.accept(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.SwitchTransformer",
    "methodName": "switchTransformer",
    "signature": "org.apache.commons.collections4.Transformer switchTransformer(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(map, \"map\");\r\n    if (map.isEmpty()) {\r\n        return ConstantTransformer.\u003cI, O\u003enullTransformer();\r\n    }\r\n    // convert to array like this to guarantee iterator() ordering\r\n    final Transformer\u003c? super I, ? extends O\u003e defaultTransformer \u003d map.remove(null);\r\n    final int size \u003d map.size();\r\n    if (size \u003d\u003d 0) {\r\n        return (Transformer\u003cI, O\u003e) (defaultTransformer \u003d\u003d null ? ConstantTransformer.\u003cI, O\u003enullTransformer() : defaultTransformer);\r\n    }\r\n    final Transformer\u003c? super I, ? extends O\u003e[] transformers \u003d new Transformer[size];\r\n    final Predicate\u003c? super I\u003e[] preds \u003d new Predicate[size];\r\n    int i \u003d 0;\r\n    for (final Map.Entry\u003c? extends Predicate\u003c? super I\u003e, ? extends Transformer\u003c? super I, ? extends O\u003e\u003e entry : map.entrySet()) {\r\n        preds[i] \u003d entry.getKey();\r\n        transformers[i] \u003d entry.getValue();\r\n        i++;\r\n    }\r\n    return new SwitchTransformer\u003c\u003e(false, preds, transformers, defaultTransformer);\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B7",
      "B3 : If(r2 !\u003d null) → B4 | else → B5",
      "B8 : If($z1 \u003d\u003d 0) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  Map\n  Objects.requireNonNull(r0, \"map\")\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r14 \u003d ConstantTransformer.nullTransformer()\n  return\n}",
      "B2 {\n  $r1 \u003d r0.remove(null)\n  r2 \u003d Transformer) $r1\n  $i0 \u003d r0.size()\n  if ($i0 !\u003d 0) goto B3 else B7\n}",
      "B3 {\n  if (r2 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r15 \u003d ConstantTransformer.nullTransformer()\n  goto B6\n}",
      "B5 {\n  $r15 \u003d r2\n}",
      "B6 {\n  return\n}",
      "B7 {\n  r3 \u003d Transformer)[$i0]\n  r4 \u003d Predicate)[$i0]\n  i1 \u003d 0\n  $r5 \u003d r0.entrySet()\n  $r6 \u003d $r5.iterator()\n}",
      "B8 {\n  $z1 \u003d $r6.hasNext()\n  if ($z1 \u003d\u003d 0) goto B9 else B10\n}",
      "B9 {\n  $r8 \u003d $r6.next()\n  r9 \u003d Map$Entry) $r8\n  $r10 \u003d r9.getKey()\n  $r11 \u003d Predicate) $r10\n  r4[i1] \u003d $r11\n  $r12 \u003d r9.getValue()\n  $r13 \u003d Transformer) $r12\n  r3[i1] \u003d $r13\n  i1 \u003d i1 + 1\n  goto B8\n}",
      "B10 {\n  $r7 \u003d SwitchTransformer\n  new SwitchTransformer(0, r4, r3, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B8",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.SwitchTransformer",
    "methodName": "switchTransformer",
    "signature": "org.apache.commons.collections4.Transformer switchTransformer(org.apache.commons.collections4.Predicate[],org.apache.commons.collections4.Transformer[],org.apache.commons.collections4.Transformer)",
    "visibility": "public",
    "body": "{\r\n    FunctorUtils.validate(predicates);\r\n    FunctorUtils.validate(transformers);\r\n    if (predicates.length !\u003d transformers.length) {\r\n        throw new IllegalArgumentException(\"The predicate and transformer arrays must be the same size\");\r\n    }\r\n    if (predicates.length \u003d\u003d 0) {\r\n        return (Transformer\u003cI, O\u003e) (defaultTransformer \u003d\u003d null ? ConstantTransformer.\u003cI, O\u003enullTransformer() : defaultTransformer);\r\n    }\r\n    return new SwitchTransformer\u003c\u003e(predicates, transformers, defaultTransformer);\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003d\u003d $i0) → B1 | else → B2",
      "B2 : If($i2 !\u003d 0) → B3 | else → B7",
      "B3 : If(r3 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Predicate[]\n  Transformer[]\n  Transformer\n  FunctorUtils.validate(r0)\n  FunctorUtils.validate(r1)\n  $i1 \u003d lengthof r0\n  $i0 \u003d lengthof r1\n  if ($i1 \u003d\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"The predicate and transformer arrays must be the same size\")\n  throw $r4\n}",
      "B2 {\n  $i2 \u003d lengthof r0\n  if ($i2 !\u003d 0) goto B3 else B7\n}",
      "B3 {\n  if (r3 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $r5 \u003d ConstantTransformer.nullTransformer()\n  goto B6\n}",
      "B5 {\n  $r5 \u003d r3\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $r2 \u003d SwitchTransformer\n  new SwitchTransformer(r0, r1, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.SwitchTransformer",
    "methodName": "transform",
    "signature": "java.lang.Object transform(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d $i0) → B2 | else → B5",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  SwitchTransformer\n  Object\n  i1 \u003d 0\n}",
      "B1 {\n  $r1 \u003d Predicate[] iPredicates\u003e\n  $i0 \u003d lengthof $r1\n  if (i1 \u003e\u003d $i0) goto B2 else B5\n}",
      "B2 {\n  $r5 \u003d Predicate[] iPredicates\u003e\n  $r6 \u003d $r5[i1]\n  $z0 \u003d $r6.test(r2)\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r7 \u003d Transformer[] iTransformers\u003e\n  $r8 \u003d $r7[i1]\n  $r9 \u003d $r8.apply(r2)\n  return\n}",
      "B4 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B5 {\n  $r3 \u003d Transformer iDefault\u003e\n  $r4 \u003d $r3.apply(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.TransformerClosure",
    "methodName": "transformerClosure",
    "signature": "org.apache.commons.collections4.Closure transformerClosure(org.apache.commons.collections4.Transformer)",
    "visibility": "public",
    "body": "{\r\n    if (transformer \u003d\u003d null) {\r\n        return NOPClosure.\u003cE\u003enopClosure();\r\n    }\r\n    return new TransformerClosure\u003c\u003e(transformer);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Transformer\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d NOPClosure.nopClosure()\n  return\n}",
      "B2 {\n  $r1 \u003d TransformerClosure\n  new TransformerClosure(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.TransformerPredicate",
    "methodName": "test",
    "signature": "boolean test(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TransformerPredicate\n  Object\n  $r2 \u003d Transformer iTransformer\u003e\n  $r3 \u003d $r2.apply(r1)\n  r4 \u003d Boolean) $r3\n  if (r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d FunctorException\n  new FunctorException(\"Transformer must return an instanceof Boolean, it was a null object\")\n  throw $r5\n}",
      "B2 {\n  $z0 \u003d r4.booleanValue()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.functors.WhileClosure",
    "methodName": "execute",
    "signature": "void execute(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  WhileClosure\n  Object\n  $z0 \u003d WhileClosure: boolean iDoLoop\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Closure iClosure\u003e\n  $r3.accept(r1)\n}",
      "B2 {\n  $r4 \u003d Predicate iPredicate\u003e\n  $z1 \u003d $r4.test(r1)\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d Closure iClosure\u003e\n  $r2.accept(r1)\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.IterableUtils",
    "methodName": "boundedIterable",
    "signature": "java.lang.Iterable boundedIterable(java.lang.Iterable,long)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(iterable, \"iterable\");\r\n    if (maxSize \u003c 0) {\r\n        throw new IllegalArgumentException(\"MaxSize parameter must not be negative.\");\r\n    }\r\n    return new FluentIterable\u003cE\u003e() {\r\n\r\n        @Override\r\n        public Iterator\u003cE\u003e iterator() {\r\n            return IteratorUtils.boundedIterator(iterable.iterator(), maxSize);\r\n        }\r\n    };\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i2 \u003e\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  l0 :\u003d @parameter1: long\n  Objects.requireNonNull(r0, \"iterable\")\n  $b1 \u003d l0 cmp 0L\n  $i2 \u003d (int) $b1\n  if ($i2 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"MaxSize parameter must not be negative.\")\n  throw $r3\n}",
      "B2 {\n  $r4 \u003d IterableUtils$2\n  new IterableUtils$2(r0, l0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.IterableUtils",
    "methodName": "checkNotNull",
    "signature": "void checkNotNull(java.lang.Iterable[])",
    "visibility": "package",
    "body": "{\r\n    Objects.requireNonNull(iterables, \"iterables\");\r\n    for (final Iterable\u003c?\u003e iterable : iterables) {\r\n        Objects.requireNonNull(iterable, \"iterable\");\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Iterable[]\n  Objects.requireNonNull(r0, \"iterables\")\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r1 \u003d r0[i1]\n  Objects.requireNonNull(r1, \"iterable\")\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.IterableUtils",
    "methodName": "contains",
    "signature": "boolean contains(java.lang.Iterable,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (iterable instanceof Collection\u003c?\u003e) {\r\n        return ((Collection\u003cE\u003e) iterable).contains(object);\r\n    }\r\n    return IteratorUtils.contains(emptyIteratorIfNull(iterable), object);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Object\n  $z0 \u003d Collection\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Collection) r0\n  $z2 \u003d $r3.contains(r2)\n  return\n}",
      "B2 {\n  $r1 \u003d IterableUtils.emptyIteratorIfNull(r0)\n  $z1 \u003d IteratorUtils.contains($r1, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IterableUtils#emptyIteratorIfNull(...1)",
        "body": "{\r\n    return iterable !\u003d null ? iterable.iterator() : IteratorUtils.\u003cE\u003eemptyIterator();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.IterableUtils",
    "methodName": "duplicateSet",
    "signature": "java.util.Collection duplicateSet(java.lang.Iterable,java.util.Collection)",
    "visibility": "package",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B6",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Collection\n  $r0 \u003d HashSet\n  new HashSet()\n  $r2 \u003d r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B6\n}",
      "B2 {\n  $r4 \u003d $r2.next()\n  $z1 \u003d $r0.contains($r4)\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d r3\n  goto B5\n}",
      "B4 {\n  $r5 \u003d $r0\n}",
      "B5 {\n  $r5.add($r4)\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.IterableUtils",
    "methodName": "emptyIfNull",
    "signature": "java.lang.Iterable emptyIfNull(java.lang.Iterable)",
    "visibility": "public",
    "body": "{\r\n    return iterable \u003d\u003d null ? IterableUtils.\u003cE\u003eemptyIterable() : iterable;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d IterableUtils.emptyIterable()\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.IterableUtils",
    "methodName": "emptyIteratorIfNull",
    "signature": "java.util.Iterator emptyIteratorIfNull(java.lang.Iterable)",
    "visibility": "private",
    "body": "{\r\n    return iterable !\u003d null ? iterable.iterator() : IteratorUtils.\u003cE\u003eemptyIterator();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d r0.iterator()\n  goto B3\n}",
      "B2 {\n  $r1 \u003d IteratorUtils.emptyIterator()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.IterableUtils",
    "methodName": "frequency",
    "signature": "int frequency(java.lang.Iterable,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B5",
      "B1 : If($z2 \u003d\u003d 0) → B2 | else → B3",
      "B5 : If($z1 \u003d\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Object\n  $z0 \u003d Set\n  if ($z0 \u003d\u003d 0) goto B1 else B5\n}",
      "B1 {\n  $r6 \u003d Set) r0\n  $z2 \u003d $r6.contains(r2)\n  if ($z2 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $b2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $b2 \u003d 0\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $z1 \u003d Bag\n  if ($z1 \u003d\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $r5 \u003d Bag) r0\n  $i1 \u003d $r5.getCount(r2)\n  return\n}",
      "B7 {\n  $r1 \u003d IterableUtils.emptyIfNull(r0)\n  $r3 \u003d EqualPredicate.equalPredicate(r2)\n  $r4 \u003d IterableUtils.filteredIterable($r1, $r3)\n  $i0 \u003d IterableUtils.size($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.IterableUtils",
    "methodName": "get",
    "signature": "java.lang.Object get(java.lang.Iterable,int)",
    "visibility": "public",
    "body": "{\r\n    CollectionUtils.checkIndexBounds(index);\r\n    if (iterable instanceof List\u003c?\u003e) {\r\n        return ((List\u003cT\u003e) iterable).get(index);\r\n    }\r\n    return IteratorUtils.get(emptyIteratorIfNull(iterable), index);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  i0 :\u003d @parameter1: int\n  CollectionUtils.checkIndexBounds(i0)\n  $z0 \u003d List\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d List) r0\n  $r4 \u003d $r3.get(i0)\n  return\n}",
      "B2 {\n  $r1 \u003d IterableUtils.emptyIteratorIfNull(r0)\n  $r2 \u003d IteratorUtils.get($r1, i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IterableUtils#emptyIteratorIfNull(...1)",
        "body": "{\r\n    return iterable !\u003d null ? iterable.iterator() : IteratorUtils.\u003cE\u003eemptyIterator();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.IterableUtils",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty(java.lang.Iterable)",
    "visibility": "public",
    "body": "{\r\n    if (iterable instanceof Collection\u003c?\u003e) {\r\n        return ((Collection\u003c?\u003e) iterable).isEmpty();\r\n    }\r\n    return IteratorUtils.isEmpty(emptyIteratorIfNull(iterable));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  $z0 \u003d Collection\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Collection) r0\n  $z2 \u003d $r2.isEmpty()\n  return\n}",
      "B2 {\n  $r1 \u003d IterableUtils.emptyIteratorIfNull(r0)\n  $z1 \u003d IteratorUtils.isEmpty($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IterableUtils#emptyIteratorIfNull(...1)",
        "body": "{\r\n    return iterable !\u003d null ? iterable.iterator() : IteratorUtils.\u003cE\u003eemptyIterator();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.IterableUtils",
    "methodName": "partition",
    "signature": "java.util.List partition(java.lang.Iterable,org.apache.commons.collections4.Factory,org.apache.commons.collections4.Predicate[])",
    "visibility": "public",
    "body": "{\r\n    if (iterable \u003d\u003d null) {\r\n        final Iterable\u003cO\u003e empty \u003d emptyIterable();\r\n        return partition(empty, partitionFactory, predicates);\r\n    }\r\n    Objects.requireNonNull(predicates, \"predicates\");\r\n    for (final Predicate\u003c?\u003e predicate : predicates) {\r\n        Objects.requireNonNull(predicate, \"predicate\");\r\n    }\r\n    if (predicates.length \u003c 1) {\r\n        // return the entire input collection as a single partition\r\n        final R singlePartition \u003d partitionFactory.get();\r\n        CollectionUtils.addAll(singlePartition, iterable);\r\n        return Collections.singletonList(singlePartition);\r\n    }\r\n    // create the empty partitions\r\n    final int numberOfPredicates \u003d predicates.length;\r\n    final int numberOfPartitions \u003d numberOfPredicates + 1;\r\n    final List\u003cR\u003e partitions \u003d new ArrayList\u003c\u003e(numberOfPartitions);\r\n    for (int i \u003d 0; i \u003c numberOfPartitions; ++i) {\r\n        partitions.add(partitionFactory.get());\r\n    }\r\n    // for each element in inputCollection:\r\n    // find the first predicate that evaluates to true.\r\n    // if there is a predicate, add the element to the corresponding partition.\r\n    // if there is no predicate, add it to the last, catch-all partition.\r\n    for (final O element : iterable) {\r\n        boolean elementAssigned \u003d false;\r\n        for (int i \u003d 0; i \u003c numberOfPredicates; ++i) {\r\n            if (predicates[i].test(element)) {\r\n                partitions.get(i).add(element);\r\n                elementAssigned \u003d true;\r\n                break;\r\n            }\r\n        }\r\n        if (!elementAssigned) {\r\n            // no predicates evaluated to true\r\n            // add element to last partition\r\n            partitions.get(numberOfPredicates).add(element);\r\n        }\r\n    }\r\n    return partitions;\r\n}",
    "nodes": 21,
    "edges": 26,
    "cc": 7,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If(i2 \u003e\u003d i1) → B4 | else → B5",
      "B5 : If($i0 \u003e\u003d 1) → B6 | else → B7",
      "B8 : If(i5 \u003e\u003d i4) → B9 | else → B10",
      "B11 : If($z0 \u003d\u003d 0) → B12 | else → B20",
      "B13 : If(i6 \u003e\u003d i3) → B14 | else → B17",
      "B14 : If($z1 \u003d\u003d 0) → B15 | else → B16",
      "B17 : If(z2 !\u003d 0) → B18 | else → B19"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Factory\n  Predicate[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r15 \u003d IterableUtils.emptyIterable()\n  $r16 \u003d IterableUtils.partition($r15, r10, r1)\n  return\n}",
      "B2 {\n  Objects.requireNonNull(r1, \"predicates\")\n  i1 \u003d lengthof r1\n  i2 \u003d 0\n}",
      "B3 {\n  if (i2 \u003e\u003d i1) goto B4 else B5\n}",
      "B4 {\n  r17 \u003d r1[i2]\n  Objects.requireNonNull(r17, \"predicate\")\n  i2 \u003d i2 + 1\n  goto B3\n}",
      "B5 {\n  $i0 \u003d lengthof r1\n  if ($i0 \u003e\u003d 1) goto B6 else B7\n}",
      "B6 {\n  $r13 \u003d r10.get()\n  r18 \u003d Collection) $r13\n  CollectionUtils.addAll(r18, r0)\n  $r14 \u003d Collections.singletonList(r18)\n  return\n}",
      "B7 {\n  i3 \u003d lengthof r1\n  i4 \u003d i3 + 1\n  $r2 \u003d ArrayList\n  new ArrayList(i4)\n  i5 \u003d 0\n}",
      "B8 {\n  if (i5 \u003e\u003d i4) goto B9 else B10\n}",
      "B9 {\n  $r11 \u003d r10.get()\n  $r12 \u003d Collection) $r11\n  $r2.add($r12)\n  i5 \u003d i5 + 1\n  goto B8\n}",
      "B10 {\n  $r3 \u003d r0.iterator()\n}",
      "B11 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B12 else B20\n}",
      "B12 {\n  $r4 \u003d $r3.next()\n  z2 \u003d 0\n  i6 \u003d 0\n}",
      "B13 {\n  if (i6 \u003e\u003d i3) goto B14 else B17\n}",
      "B14 {\n  $r7 \u003d r1[i6]\n  $z1 \u003d $r7.test($r4)\n  if ($z1 \u003d\u003d 0) goto B15 else B16\n}",
      "B15 {\n  $r8 \u003d $r2.get(i6)\n  $r9 \u003d Collection) $r8\n  $r9.add($r4)\n  z2 \u003d 1\n  goto B17\n}",
      "B16 {\n  i6 \u003d i6 + 1\n  goto B13\n}",
      "B17 {\n  if (z2 !\u003d 0) goto B18 else B19\n}",
      "B18 {\n  $r5 \u003d $r2.get(i3)\n  $r6 \u003d Collection) $r5\n  $r6.add($r4)\n}",
      "B19 {\n  goto B11\n}",
      "B20 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B8",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B20",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B17",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B13",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e B11",
      "B20 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IterableUtils#partition(...3)",
        "body": "{\r\n    if (iterable \u003d\u003d null) {\r\n        final Iterable\u003cO\u003e empty \u003d emptyIterable();\r\n        return partition(empty, partitionFactory, predicates);\r\n    }\r\n    Objects.requireNonNull(predicates, \"predicates\");\r\n    for (final Predicate\u003c?\u003e predicate : predicates) {\r\n        Objects.requireNonNull(predicate, \"predicate\");\r\n    }\r\n    if (predicates.length \u003c 1) {\r\n        // return the entire input collection as a single partition\r\n        final R singlePartition \u003d partitionFactory.get();\r\n        CollectionUtils.addAll(singlePartition, iterable);\r\n        return Collections.singletonList(singlePartition);\r\n    }\r\n    // create the empty partitions\r\n    final int numberOfPredicates \u003d predicates.length;\r\n    final int numberOfPartitions \u003d numberOfPredicates + 1;\r\n    final List\u003cR\u003e partitions \u003d new ArrayList\u003c\u003e(numberOfPartitions);\r\n    for (int i \u003d 0; i \u003c numberOfPartitions; ++i) {\r\n        partitions.add(partitionFactory.get());\r\n    }\r\n    // for each element in inputCollection:\r\n    // find the first predicate that evaluates to true.\r\n    // if there is a predicate, add the element to the corresponding partition.\r\n    // if there is no predicate, add it to the last, catch-all partition.\r\n    for (final O element : iterable) {\r\n        boolean elementAssigned \u003d false;\r\n        for (int i \u003d 0; i \u003c numberOfPredicates; ++i) {\r\n            if (predicates[i].test(element)) {\r\n                partitions.get(i).add(element);\r\n                elementAssigned \u003d true;\r\n                break;\r\n            }\r\n        }\r\n        if (!elementAssigned) {\r\n            // no predicates evaluated to true\r\n            // add element to last partition\r\n            partitions.get(numberOfPredicates).add(element);\r\n        }\r\n    }\r\n    return partitions;\r\n}"
      },
      {
        "name": "IterableUtils#emptyIterable(...0)",
        "body": "{\r\n    return EMPTY_ITERABLE;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.IterableUtils",
    "methodName": "size",
    "signature": "int size(java.lang.Iterable)",
    "visibility": "public",
    "body": "{\r\n    if (iterable \u003d\u003d null) {\r\n        return 0;\r\n    }\r\n    if (iterable instanceof Collection\u003c?\u003e) {\r\n        return ((Collection\u003c?\u003e) iterable).size();\r\n    }\r\n    return IteratorUtils.size(emptyIteratorIfNull(iterable));\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d Collection\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d Collection) r0\n  $i1 \u003d $r2.size()\n  return\n}",
      "B4 {\n  $r1 \u003d IterableUtils.emptyIteratorIfNull(r0)\n  $i0 \u003d IteratorUtils.size($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IterableUtils#emptyIteratorIfNull(...1)",
        "body": "{\r\n    return iterable !\u003d null ? iterable.iterator() : IteratorUtils.\u003cE\u003eemptyIterator();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.IterableUtils",
    "methodName": "skippingIterable",
    "signature": "java.lang.Iterable skippingIterable(java.lang.Iterable,long)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(iterable, \"iterable\");\r\n    if (elementsToSkip \u003c 0) {\r\n        throw new IllegalArgumentException(\"ElementsToSkip parameter must not be negative.\");\r\n    }\r\n    return new FluentIterable\u003cE\u003e() {\r\n\r\n        @Override\r\n        public Iterator\u003cE\u003e iterator() {\r\n            return IteratorUtils.skippingIterator(iterable.iterator(), elementsToSkip);\r\n        }\r\n    };\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i2 \u003e\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  l0 :\u003d @parameter1: long\n  Objects.requireNonNull(r0, \"iterable\")\n  $b1 \u003d l0 cmp 0L\n  $i2 \u003d (int) $b1\n  if ($i2 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"ElementsToSkip parameter must not be negative.\")\n  throw $r3\n}",
      "B2 {\n  $r4 \u003d IterableUtils$9\n  new IterableUtils$9(r0, l0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.IterableUtils",
    "methodName": "unmodifiableIterable",
    "signature": "java.lang.Iterable unmodifiableIterable(java.lang.Iterable)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(iterable, \"iterable\");\r\n    if (iterable instanceof UnmodifiableIterable\u003c?\u003e) {\r\n        return iterable;\r\n    }\r\n    return new UnmodifiableIterable\u003c\u003e(iterable);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  Objects.requireNonNull(r0, \"iterable\")\n  $z0 \u003d IterableUtils$UnmodifiableIterable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d IterableUtils$UnmodifiableIterable\n  new IterableUtils$UnmodifiableIterable(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ArrayIterator",
    "methodName": "checkBound",
    "signature": "void checkBound(int,int,java.lang.String)",
    "visibility": "protected",
    "body": "{\r\n    if (bound \u003e len) {\r\n        throw new ArrayIndexOutOfBoundsException(\"Attempt to make an ArrayIterator that \" + type + \"s beyond the end of the array. \");\r\n    }\r\n    if (bound \u003c 0) {\r\n        throw new ArrayIndexOutOfBoundsException(\"Attempt to make an ArrayIterator that \" + type + \"s before the start of the array. \");\r\n    }\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 \u003c\u003d i1) → B1 | else → B2",
      "B2 : If(i0 \u003e\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ArrayIterator\n  i0 :\u003d @parameter0: int\n  i1 :\u003d @parameter1: int\n  String\n  if (i0 \u003c\u003d i1) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d ArrayIndexOutOfBoundsException\n  $r4 \u003d dynInvoke makeConcatWithConstants(r1)\n  new ArrayIndexOutOfBoundsException($r4)\n  throw $r3\n}",
      "B2 {\n  if (i0 \u003e\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r0 \u003d ArrayIndexOutOfBoundsException\n  $r2 \u003d dynInvoke makeConcatWithConstants(r1)\n  new ArrayIndexOutOfBoundsException($r2)\n  throw $r0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ArrayIterator",
    "methodName": "hasNext",
    "signature": "boolean hasNext()",
    "visibility": "public",
    "body": "{\r\n    return index \u003c endIndex;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003e\u003d $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayIterator\n  $i1 \u003d ArrayIterator: int index\u003e\n  $i0 \u003d ArrayIterator: int endIndex\u003e\n  if ($i1 \u003e\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ArrayIterator",
    "methodName": "next",
    "signature": "java.lang.Object next()",
    "visibility": "public",
    "body": "{\r\n    if (!hasNext()) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    return (E) Array.get(array, index++);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayIterator\n  $z0 \u003d r0.hasNext()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r3\n}",
      "B2 {\n  $r1 \u003d Object array\u003e\n  $i0 \u003d ArrayIterator: int index\u003e\n  $i1 \u003d $i0 + 1\n  ArrayIterator: int index\u003e \u003d $i1\n  $r2 \u003d Array.get($r1, $i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayIterator#hasNext(...0)",
        "body": "{\r\n    return index \u003c endIndex;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ArrayListIterator",
    "methodName": "hasPrevious",
    "signature": "boolean hasPrevious()",
    "visibility": "public",
    "body": "{\r\n    return index \u003e startIndex;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003c\u003d $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayListIterator\n  $i1 \u003d ArrayListIterator: int index\u003e\n  $i0 \u003d ArrayListIterator: int startIndex\u003e\n  if ($i1 \u003c\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ArrayListIterator",
    "methodName": "next",
    "signature": "java.lang.Object next()",
    "visibility": "public",
    "body": "{\r\n    if (!hasNext()) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    lastItemIndex \u003d index;\r\n    return (E) Array.get(array, index++);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayListIterator\n  $z0 \u003d r0.hasNext()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r3\n}",
      "B2 {\n  $i0 \u003d ArrayListIterator: int index\u003e\n  ArrayListIterator: int lastItemIndex\u003e \u003d $i0\n  $r1 \u003d Object array\u003e\n  $i1 \u003d ArrayListIterator: int index\u003e\n  $i2 \u003d $i1 + 1\n  ArrayListIterator: int index\u003e \u003d $i2\n  $r2 \u003d Array.get($r1, $i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayListIterator#hasNext(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ArrayListIterator",
    "methodName": "previous",
    "signature": "java.lang.Object previous()",
    "visibility": "public",
    "body": "{\r\n    if (!hasPrevious()) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    lastItemIndex \u003d --index;\r\n    return (E) Array.get(array, index);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayListIterator\n  $z0 \u003d r0.hasPrevious()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r3\n}",
      "B2 {\n  $i0 \u003d ArrayListIterator: int index\u003e\n  $i1 \u003d $i0 - 1\n  ArrayListIterator: int index\u003e \u003d $i1\n  ArrayListIterator: int lastItemIndex\u003e \u003d $i1\n  $r1 \u003d Object array\u003e\n  $i2 \u003d ArrayListIterator: int index\u003e\n  $r2 \u003d Array.get($r1, $i2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayListIterator#hasPrevious(...0)",
        "body": "{\r\n    return index \u003e startIndex;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ArrayListIterator",
    "methodName": "set",
    "signature": "void set(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (lastItemIndex \u003d\u003d -1) {\r\n        throw new IllegalStateException(\"must call next() or previous() before a call to set()\");\r\n    }\r\n    Array.set(array, lastItemIndex, o);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d $i3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ArrayListIterator\n  Object\n  $i0 \u003d ArrayListIterator: int lastItemIndex\u003e\n  $i3 \u003d (int) -1\n  if ($i0 !\u003d $i3) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalStateException\n  new IllegalStateException(\"must call next() or previous() before a call to set()\")\n  throw $r4\n}",
      "B2 {\n  $r2 \u003d Object array\u003e\n  $i1 \u003d ArrayListIterator: int lastItemIndex\u003e\n  Array.set($r2, $i1, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.BoundedIterator",
    "methodName": "checkBounds",
    "signature": "boolean checkBounds()",
    "visibility": "private",
    "body": "{\r\n    if (pos - offset + 1 \u003e max) {\r\n        return false;\r\n    }\r\n    return true;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i6 \u003c\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BoundedIterator\n  $l1 \u003d BoundedIterator: long pos\u003e\n  $l0 \u003d BoundedIterator: long offset\u003e\n  $l2 \u003d $l1 - $l0\n  $l4 \u003d $l2 + 1L\n  $l3 \u003d BoundedIterator: long max\u003e\n  $b5 \u003d $l4 cmp $l3\n  $i6 \u003d (int) $b5\n  if ($i6 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.BoundedIterator",
    "methodName": "hasNext",
    "signature": "boolean hasNext()",
    "visibility": "public",
    "body": "{\r\n    if (!checkBounds()) {\r\n        return false;\r\n    }\r\n    return iterator.hasNext();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BoundedIterator\n  $z0 \u003d r0.checkBounds()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d Iterator iterator\u003e\n  $z1 \u003d $r1.hasNext()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BoundedIterator#checkBounds(...0)",
        "body": "{\r\n    if (pos - offset + 1 \u003e max) {\r\n        return false;\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.BoundedIterator",
    "methodName": "init",
    "signature": "void init()",
    "visibility": "private",
    "body": "{\r\n    while (pos \u003c offset \u0026\u0026 iterator.hasNext()) {\r\n        iterator.next();\r\n        pos++;\r\n    }\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B1 : If($i5 \u003e\u003d 0) → B2 | else → B4",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  BoundedIterator\n}",
      "B1 {\n  $l1 \u003d BoundedIterator: long pos\u003e\n  $l0 \u003d BoundedIterator: long offset\u003e\n  $b2 \u003d $l1 cmp $l0\n  $i5 \u003d (int) $b2\n  if ($i5 \u003e\u003d 0) goto B2 else B4\n}",
      "B2 {\n  $r1 \u003d Iterator iterator\u003e\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r2 \u003d Iterator iterator\u003e\n  $r2.next()\n  $l3 \u003d BoundedIterator: long pos\u003e\n  $l4 \u003d $l3 + 1L\n  BoundedIterator: long pos\u003e \u003d $l4\n  goto B1\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B1",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.BoundedIterator",
    "methodName": "next",
    "signature": "java.lang.Object next()",
    "visibility": "public",
    "body": "{\r\n    if (!checkBounds()) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    final E next \u003d iterator.next();\r\n    pos++;\r\n    return next;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BoundedIterator\n  $z0 \u003d r0.checkBounds()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r3\n}",
      "B2 {\n  $r1 \u003d Iterator iterator\u003e\n  $r2 \u003d $r1.next()\n  $l0 \u003d BoundedIterator: long pos\u003e\n  $l1 \u003d $l0 + 1L\n  BoundedIterator: long pos\u003e \u003d $l1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "BoundedIterator#checkBounds(...0)",
        "body": "{\r\n    if (pos - offset + 1 \u003e max) {\r\n        return false;\r\n    }\r\n    return true;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.BoundedIterator",
    "methodName": "remove",
    "signature": "void remove()",
    "visibility": "public",
    "body": "{\r\n    if (pos \u003c\u003d offset) {\r\n        throw new IllegalStateException(\"remove() cannot be called before calling next()\");\r\n    }\r\n    iterator.remove();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i3 \u003e 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  BoundedIterator\n  $l1 \u003d BoundedIterator: long pos\u003e\n  $l0 \u003d BoundedIterator: long offset\u003e\n  $b2 \u003d $l1 cmp $l0\n  $i3 \u003d (int) $b2\n  if ($i3 \u003e 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IllegalStateException\n  new IllegalStateException(\"remove() cannot be called before calling next()\")\n  throw $r3\n}",
      "B2 {\n  $r1 \u003d Iterator iterator\u003e\n  $r1.remove()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.CartesianProductIterator",
    "methodName": "next",
    "signature": "java.util.List next()",
    "visibility": "public",
    "body": "{\r\n    if (!hasNext()) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    if (previousTuple \u003d\u003d null) {\r\n        previousTuple \u003d new ArrayList\u003c\u003e(iterables.size());\r\n        for (final Iterator\u003c? extends E\u003e iterator : iterators) {\r\n            previousTuple.add(iterator.next());\r\n        }\r\n        return new ArrayList\u003c\u003e(previousTuple);\r\n    }\r\n    for (int i \u003d iterators.size() - 1; i \u003e\u003d 0; i--) {\r\n        Iterator\u003c? extends E\u003e iterator \u003d iterators.get(i);\r\n        if (iterator.hasNext()) {\r\n            previousTuple.set(i, iterator.next());\r\n            return new ArrayList\u003c\u003e(previousTuple);\r\n        }\r\n        iterator \u003d iterables.get(i).iterator();\r\n        iterators.set(i, iterator);\r\n        previousTuple.set(i, iterator.next());\r\n    }\r\n    throw new IllegalStateException(\"reached unreachable code\");\r\n}",
    "nodes": 13,
    "edges": 14,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($r1 !\u003d null) → B3 | else → B7",
      "B4 : If($z2 \u003d\u003d 0) → B5 | else → B6",
      "B8 : If(i2 \u003c 0) → B9 | else → B12",
      "B9 : If($z1 \u003d\u003d 0) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  CartesianProductIterator\n  $z0 \u003d r0.hasNext()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r29 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r29\n}",
      "B2 {\n  $r1 \u003d List previousTuple\u003e\n  if ($r1 !\u003d null) goto B3 else B7\n}",
      "B3 {\n  $r30 \u003d ArrayList\n  $r18 \u003d List iterables\u003e\n  $i1 \u003d $r18.size()\n  new ArrayList($i1)\n  List previousTuple\u003e \u003d $r30\n  $r19 \u003d List iterators\u003e\n  $r20 \u003d $r19.iterator()\n}",
      "B4 {\n  $z2 \u003d $r20.hasNext()\n  if ($z2 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r23 \u003d $r20.next()\n  r27 \u003d Iterator) $r23\n  $r24 \u003d List previousTuple\u003e\n  $r25 \u003d r27.next()\n  $r24.add($r25)\n  goto B4\n}",
      "B6 {\n  $r31 \u003d ArrayList\n  $r22 \u003d List previousTuple\u003e\n  new ArrayList($r22)\n  return\n}",
      "B7 {\n  $r2 \u003d List iterators\u003e\n  $i0 \u003d $r2.size()\n  i2 \u003d $i0 - 1\n}",
      "B8 {\n  if (i2 \u003c 0) goto B9 else B12\n}",
      "B9 {\n  $r4 \u003d List iterators\u003e\n  $r5 \u003d $r4.get(i2)\n  r28 \u003d Iterator) $r5\n  $z1 \u003d r28.hasNext()\n  if ($z1 \u003d\u003d 0) goto B10 else B11\n}",
      "B10 {\n  $r13 \u003d List previousTuple\u003e\n  $r14 \u003d r28.next()\n  $r13.set(i2, $r14)\n  $r32 \u003d ArrayList\n  $r16 \u003d List previousTuple\u003e\n  new ArrayList($r16)\n  return\n}",
      "B11 {\n  $r6 \u003d List iterables\u003e\n  $r7 \u003d $r6.get(i2)\n  $r8 \u003d Iterable) $r7\n  $r9 \u003d $r8.iterator()\n  $r10 \u003d List iterators\u003e\n  $r10.set(i2, $r9)\n  $r11 \u003d List previousTuple\u003e\n  $r12 \u003d $r9.next()\n  $r11.set(i2, $r12)\n  $i4 \u003d (int) -1\n  i2 \u003d i2 + $i4\n  goto B8\n}",
      "B12 {\n  $r33 \u003d IllegalStateException\n  new IllegalStateException(\"reached unreachable code\")\n  throw $r33\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B12",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B8",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CartesianProductIterator#hasNext(...0)",
        "body": "{\r\n    return iterators.stream().anyMatch(Iterator::hasNext);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.CollatingIterator",
    "methodName": "anyHasNext",
    "signature": "boolean anyHasNext(java.util.List)",
    "visibility": "private",
    "body": "{\r\n    for (final Iterator\u003c? extends E\u003e iterator : iterators) {\r\n        if (iterator.hasNext()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CollatingIterator\n  List\n  $r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d $r1.next()\n  r3 \u003d Iterator) $r2\n  $z1 \u003d r3.hasNext()\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.CollatingIterator",
    "methodName": "anyValueSet",
    "signature": "boolean anyValueSet(java.util.BitSet)",
    "visibility": "private",
    "body": "{\r\n    for (int i \u003d 0; i \u003c set.size(); i++) {\r\n        if (set.get(i)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d $i0) → B2 | else → B5",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CollatingIterator\n  BitSet\n  i1 \u003d 0\n}",
      "B1 {\n  $i0 \u003d r0.size()\n  if (i1 \u003e\u003d $i0) goto B2 else B5\n}",
      "B2 {\n  $z0 \u003d r0.get(i1)\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.CollatingIterator",
    "methodName": "checkNotStarted",
    "signature": "void checkNotStarted()",
    "visibility": "private",
    "body": "{\r\n    if (values !\u003d null) {\r\n        throw new IllegalStateException(\"Can\u0027t do that after next or hasNext has been called.\");\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CollatingIterator\n  $r1 \u003d List values\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d IllegalStateException\n  new IllegalStateException(\"Can\\\u0027t do that after next or hasNext has been called.\")\n  throw $r2\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.CollatingIterator",
    "methodName": "getIteratorIndex",
    "signature": "int getIteratorIndex()",
    "visibility": "public",
    "body": "{\r\n    if (lastReturned \u003d\u003d -1) {\r\n        throw new IllegalStateException(\"No value has been returned yet\");\r\n    }\r\n    return lastReturned;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d $i3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CollatingIterator\n  $i0 \u003d CollatingIterator: int lastReturned\u003e\n  $i3 \u003d (int) -1\n  if ($i0 !\u003d $i3) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d IllegalStateException\n  new IllegalStateException(\"No value has been returned yet\")\n  throw $r2\n}",
      "B2 {\n  $i1 \u003d CollatingIterator: int lastReturned\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.CollatingIterator",
    "methodName": "hasNext",
    "signature": "boolean hasNext()",
    "visibility": "public",
    "body": "{\r\n    start();\r\n    return anyValueSet(valueSet) || anyHasNext(iterators);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CollatingIterator\n  r0.start()\n  $r1 \u003d BitSet valueSet\u003e\n  $z0 \u003d r0.anyValueSet($r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d List iterators\u003e\n  $z1 \u003d r0.anyHasNext($r2)\n  if ($z1 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollatingIterator#start(...0)",
        "body": "{\r\n    if (values \u003d\u003d null) {\r\n        values \u003d new ArrayList\u003c\u003e(iterators.size());\r\n        valueSet \u003d new BitSet(iterators.size());\r\n        for (int i \u003d 0; i \u003c iterators.size(); i++) {\r\n            values.add(null);\r\n            valueSet.clear(i);\r\n        }\r\n    }\r\n}"
      },
      {
        "name": "CollatingIterator#anyHasNext(...1)",
        "body": "{\r\n    for (final Iterator\u003c? extends E\u003e iterator : iterators) {\r\n        if (iterator.hasNext()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      },
      {
        "name": "CollatingIterator#anyValueSet(...1)",
        "body": "{\r\n    for (int i \u003d 0; i \u003c set.size(); i++) {\r\n        if (set.get(i)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.CollatingIterator",
    "methodName": "least",
    "signature": "int least()",
    "visibility": "private",
    "body": "{\r\n    int leastIndex \u003d -1;\r\n    E leastObject \u003d null;\r\n    for (int i \u003d 0; i \u003c values.size(); i++) {\r\n        if (!valueSet.get(i)) {\r\n            set(i);\r\n        }\r\n        if (valueSet.get(i)) {\r\n            if (leastIndex \u003d\u003d -1) {\r\n                leastIndex \u003d i;\r\n                leastObject \u003d values.get(i);\r\n            } else {\r\n                final E curObject \u003d values.get(i);\r\n                Objects.requireNonNull(comparator, \"You must invoke setComparator() to set a comparator first.\");\r\n                if (comparator.compare(curObject, leastObject) \u003c 0) {\r\n                    leastObject \u003d curObject;\r\n                    leastIndex \u003d i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return leastIndex;\r\n}",
    "nodes": 11,
    "edges": 15,
    "cc": 6,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d $i0) → B2 | else → B10",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B9",
      "B5 : If(i2 !\u003d $i7) → B6 | else → B7",
      "B7 : If($i1 \u003e\u003d 0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  CollatingIterator\n  $i5 \u003d (int) -1\n  i2 \u003d $i5\n  r9 \u003d null\n  i3 \u003d 0\n}",
      "B1 {\n  $r1 \u003d List values\u003e\n  $i0 \u003d $r1.size()\n  if (i3 \u003e\u003d $i0) goto B2 else B10\n}",
      "B2 {\n  $r2 \u003d BitSet valueSet\u003e\n  $z0 \u003d $r2.get(i3)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  r0.set(i3)\n}",
      "B4 {\n  $r3 \u003d BitSet valueSet\u003e\n  $z1 \u003d $r3.get(i3)\n  if ($z1 \u003d\u003d 0) goto B5 else B9\n}",
      "B5 {\n  $i7 \u003d (int) -1\n  if (i2 !\u003d $i7) goto B6 else B7\n}",
      "B6 {\n  i2 \u003d i3\n  $r8 \u003d List values\u003e\n  r9 \u003d $r8.get(i3)\n  goto B9\n}",
      "B7 {\n  $r4 \u003d List values\u003e\n  $r5 \u003d $r4.get(i3)\n  $r6 \u003d Comparator comparator\u003e\n  Objects.requireNonNull($r6, \"You must invoke setComparator() to set a comparator first.\")\n  $r7 \u003d Comparator comparator\u003e\n  $i1 \u003d $r7.compare($r5, r9)\n  if ($i1 \u003e\u003d 0) goto B8 else B9\n}",
      "B8 {\n  r9 \u003d $r5\n  i2 \u003d i3\n}",
      "B9 {\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B10",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B1",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollatingIterator#set(...1)",
        "body": "{\r\n    final Iterator\u003c? extends E\u003e it \u003d iterators.get(index);\r\n    if (it.hasNext()) {\r\n        values.set(index, it.next());\r\n        valueSet.set(index);\r\n        return true;\r\n    }\r\n    values.set(index, null);\r\n    valueSet.clear(index);\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.CollatingIterator",
    "methodName": "next",
    "signature": "java.lang.Object next()",
    "visibility": "public",
    "body": "{\r\n    if (!hasNext()) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    final int leastIndex \u003d least();\r\n    if (leastIndex \u003d\u003d -1) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    final E val \u003d values.get(leastIndex);\r\n    clear(leastIndex);\r\n    lastReturned \u003d leastIndex;\r\n    return val;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($i0 !\u003d $i2) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CollatingIterator\n  $z0 \u003d r0.hasNext()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r5\n}",
      "B2 {\n  $i0 \u003d r0.least()\n  $i2 \u003d (int) -1\n  if ($i0 !\u003d $i2) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r6\n}",
      "B4 {\n  $r1 \u003d List values\u003e\n  $r2 \u003d $r1.get($i0)\n  r0.clear($i0)\n  CollatingIterator: int lastReturned\u003e \u003d $i0\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CollatingIterator#least(...0)",
        "body": "{\r\n    int leastIndex \u003d -1;\r\n    E leastObject \u003d null;\r\n    for (int i \u003d 0; i \u003c values.size(); i++) {\r\n        if (!valueSet.get(i)) {\r\n            set(i);\r\n        }\r\n        if (valueSet.get(i)) {\r\n            if (leastIndex \u003d\u003d -1) {\r\n                leastIndex \u003d i;\r\n                leastObject \u003d values.get(i);\r\n            } else {\r\n                final E curObject \u003d values.get(i);\r\n                Objects.requireNonNull(comparator, \"You must invoke setComparator() to set a comparator first.\");\r\n                if (comparator.compare(curObject, leastObject) \u003c 0) {\r\n                    leastObject \u003d curObject;\r\n                    leastIndex \u003d i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return leastIndex;\r\n}"
      },
      {
        "name": "CollatingIterator#clear(...1)",
        "body": "{\r\n    values.set(i, null);\r\n    valueSet.clear(i);\r\n}"
      },
      {
        "name": "CollatingIterator#hasNext(...0)",
        "body": "{\r\n    start();\r\n    return anyValueSet(valueSet) || anyHasNext(iterators);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.CollatingIterator",
    "methodName": "remove",
    "signature": "void remove()",
    "visibility": "public",
    "body": "{\r\n    if (lastReturned \u003d\u003d -1) {\r\n        throw new IllegalStateException(\"No value can be removed at present\");\r\n    }\r\n    iterators.get(lastReturned).remove();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d $i3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CollatingIterator\n  $i0 \u003d CollatingIterator: int lastReturned\u003e\n  $i3 \u003d (int) -1\n  if ($i0 !\u003d $i3) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d IllegalStateException\n  new IllegalStateException(\"No value can be removed at present\")\n  throw $r5\n}",
      "B2 {\n  $r1 \u003d List iterators\u003e\n  $i1 \u003d CollatingIterator: int lastReturned\u003e\n  $r2 \u003d $r1.get($i1)\n  $r3 \u003d Iterator) $r2\n  $r3.remove()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.CollatingIterator",
    "methodName": "set",
    "signature": "boolean set(int)",
    "visibility": "private",
    "body": "{\r\n    final Iterator\u003c? extends E\u003e it \u003d iterators.get(index);\r\n    if (it.hasNext()) {\r\n        values.set(index, it.next());\r\n        valueSet.set(index);\r\n        return true;\r\n    }\r\n    values.set(index, null);\r\n    valueSet.clear(index);\r\n    return false;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CollatingIterator\n  i0 :\u003d @parameter0: int\n  $r1 \u003d List iterators\u003e\n  $r2 \u003d $r1.get(i0)\n  r3 \u003d Iterator) $r2\n  $z0 \u003d r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d List values\u003e\n  $r7 \u003d r3.next()\n  $r6.set(i0, $r7)\n  $r8 \u003d BitSet valueSet\u003e\n  $r8.set(i0)\n  return\n}",
      "B2 {\n  $r4 \u003d List values\u003e\n  $r4.set(i0, null)\n  $r5 \u003d BitSet valueSet\u003e\n  $r5.clear(i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.CollatingIterator",
    "methodName": "start",
    "signature": "void start()",
    "visibility": "private",
    "body": "{\r\n    if (values \u003d\u003d null) {\r\n        values \u003d new ArrayList\u003c\u003e(iterators.size());\r\n        valueSet \u003d new BitSet(iterators.size());\r\n        for (int i \u003d 0; i \u003c iterators.size(); i++) {\r\n            values.add(null);\r\n            valueSet.clear(i);\r\n        }\r\n    }\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B4",
      "B2 : If(i3 \u003e\u003d $i2) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CollatingIterator\n  $r1 \u003d List values\u003e\n  if ($r1 !\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r2 \u003d ArrayList\n  $r3 \u003d List iterators\u003e\n  $i0 \u003d $r3.size()\n  new ArrayList($i0)\n  List values\u003e \u003d $r2\n  $r4 \u003d BitSet\n  $r5 \u003d List iterators\u003e\n  $i1 \u003d $r5.size()\n  new BitSet($i1)\n  BitSet valueSet\u003e \u003d $r4\n  i3 \u003d 0\n}",
      "B2 {\n  $r6 \u003d List iterators\u003e\n  $i2 \u003d $r6.size()\n  if (i3 \u003e\u003d $i2) goto B3 else B4\n}",
      "B3 {\n  $r7 \u003d List values\u003e\n  $r7.add(null)\n  $r8 \u003d BitSet valueSet\u003e\n  $r8.clear(i3)\n  i3 \u003d i3 + 1\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.EntrySetMapIterator",
    "methodName": "getKey",
    "signature": "java.lang.Object getKey()",
    "visibility": "public",
    "body": "{\r\n    if (last \u003d\u003d null) {\r\n        throw new IllegalStateException(\"Iterator getKey() can only be called after next() and before remove()\");\r\n    }\r\n    return last.getKey();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  EntrySetMapIterator\n  $r1 \u003d Map$Entry last\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalStateException\n  new IllegalStateException(\"Iterator getKey() can only be called after next() and before remove()\")\n  throw $r4\n}",
      "B2 {\n  $r2 \u003d Map$Entry last\u003e\n  $r3 \u003d $r2.getKey()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.EntrySetMapIterator",
    "methodName": "getValue",
    "signature": "java.lang.Object getValue()",
    "visibility": "public",
    "body": "{\r\n    if (last \u003d\u003d null) {\r\n        throw new IllegalStateException(\"Iterator getValue() can only be called after next() and before remove()\");\r\n    }\r\n    return last.getValue();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  EntrySetMapIterator\n  $r1 \u003d Map$Entry last\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalStateException\n  new IllegalStateException(\"Iterator getValue() can only be called after next() and before remove()\")\n  throw $r4\n}",
      "B2 {\n  $r2 \u003d Map$Entry last\u003e\n  $r3 \u003d $r2.getValue()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.EntrySetMapIterator",
    "methodName": "remove",
    "signature": "void remove()",
    "visibility": "public",
    "body": "{\r\n    if (!canRemove) {\r\n        throw new IllegalStateException(\"Iterator remove() can only be called once after next()\");\r\n    }\r\n    iterator.remove();\r\n    last \u003d null;\r\n    canRemove \u003d false;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  EntrySetMapIterator\n  $z0 \u003d EntrySetMapIterator: boolean canRemove\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d IllegalStateException\n  new IllegalStateException(\"Iterator remove() can only be called once after next()\")\n  throw $r2\n}",
      "B2 {\n  $r1 \u003d Iterator iterator\u003e\n  $r1.remove()\n  Map$Entry last\u003e \u003d null\n  EntrySetMapIterator: boolean canRemove\u003e \u003d 0\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.EntrySetMapIterator",
    "methodName": "setValue",
    "signature": "java.lang.Object setValue(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  EntrySetMapIterator\n  Object\n  $r1 \u003d Map$Entry last\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d IllegalStateException\n  new IllegalStateException(\"Iterator setValue() can only be called after next() and before remove()\")\n  throw $r5\n}",
      "B2 {\n  $r3 \u003d Map$Entry last\u003e\n  $r4 \u003d $r3.setValue(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.EntrySetMapIterator",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    if (last !\u003d null) {\r\n        return \"MapIterator[\" + getKey() + \"\u003d\" + getValue() + \"]\";\r\n    }\r\n    return \"MapIterator[]\";\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  EntrySetMapIterator\n  $r1 \u003d Map$Entry last\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0.getKey()\n  $r3 \u003d String.valueOf($r2)\n  $r4 \u003d r0.getValue()\n  $r5 \u003d String.valueOf($r4)\n  $r6 \u003d dynInvoke makeConcatWithConstants($r3, $r5)\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "EntrySetMapIterator#getKey(...0)",
        "body": "{\r\n    if (last \u003d\u003d null) {\r\n        throw new IllegalStateException(\"Iterator getKey() can only be called after next() and before remove()\");\r\n    }\r\n    return last.getKey();\r\n}"
      },
      {
        "name": "EntrySetMapIterator#getValue(...0)",
        "body": "{\r\n    if (last \u003d\u003d null) {\r\n        throw new IllegalStateException(\"Iterator getValue() can only be called after next() and before remove()\");\r\n    }\r\n    return last.getValue();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.EnumerationIterator",
    "methodName": "remove",
    "signature": "void remove()",
    "visibility": "public",
    "body": "{\r\n    if (collection \u003d\u003d null) {\r\n        throw new UnsupportedOperationException(\"No Collection associated with this Iterator\");\r\n    }\r\n    if (last \u003d\u003d null) {\r\n        throw new IllegalStateException(\"next() must have been called for remove() to function\");\r\n    }\r\n    collection.remove(last);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B2 : If($r2 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  EnumerationIterator\n  $r1 \u003d Collection collection\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d UnsupportedOperationException\n  new UnsupportedOperationException(\"No Collection associated with this Iterator\")\n  throw $r6\n}",
      "B2 {\n  $r2 \u003d Object last\u003e\n  if ($r2 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d IllegalStateException\n  new IllegalStateException(\"next() must have been called for remove() to function\")\n  throw $r5\n}",
      "B4 {\n  $r4 \u003d Collection collection\u003e\n  $r3 \u003d Object last\u003e\n  $r4.remove($r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ExtendedIterator",
    "methodName": "create",
    "signature": "org.apache.commons.collections4.iterators.ExtendedIterator create(java.util.Iterator)",
    "visibility": "public",
    "body": "{\r\n    return it instanceof ExtendedIterator\u003c?\u003e ? (ExtendedIterator\u003cT\u003e) it : new ExtendedIterator\u003c\u003e(it, false);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  $z0 \u003d ExtendedIterator\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d ExtendedIterator) r0\n  goto B3\n}",
      "B2 {\n  $r1 \u003d ExtendedIterator\n  new ExtendedIterator(r0, 0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ExtendedIterator",
    "methodName": "andThen",
    "signature": "org.apache.commons.collections4.iterators.ExtendedIterator andThen(java.util.Iterator)",
    "visibility": "public",
    "body": "{\r\n    if (base instanceof IteratorChain) {\r\n        ((IteratorChain\u003cT\u003e) base).addIterator(other);\r\n        return this;\r\n    }\r\n    return new ExtendedIterator\u003c\u003e(new IteratorChain\u003c\u003e(base, other), throwOnRemove);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ExtendedIterator\n  Iterator\n  $r1 \u003d Iterator base\u003e\n  $z0 \u003d IteratorChain\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d Iterator base\u003e\n  $r7 \u003d IteratorChain) $r6\n  $r7.addIterator(r4)\n  return\n}",
      "B2 {\n  $r2 \u003d ExtendedIterator\n  $r3 \u003d IteratorChain\n  $r5 \u003d Iterator base\u003e\n  new IteratorChain($r5, r4)\n  $z1 \u003d ExtendedIterator: boolean throwOnRemove\u003e\n  new ExtendedIterator($r3, $z1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ExtendedIterator",
    "methodName": "remove",
    "signature": "void remove()",
    "visibility": "public",
    "body": "{\r\n    if (throwOnRemove) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n    base.remove();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ExtendedIterator\n  $z0 \u003d ExtendedIterator: boolean throwOnRemove\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d UnsupportedOperationException\n  new UnsupportedOperationException()\n  throw $r2\n}",
      "B2 {\n  $r1 \u003d Iterator base\u003e\n  $r1.remove()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.FilterIterator",
    "methodName": "hasNext",
    "signature": "boolean hasNext()",
    "visibility": "public",
    "body": "{\r\n    return nextObjectSet || setNextObject();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  FilterIterator\n  $z0 \u003d FilterIterator: boolean nextObjectSet\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d r0.setNextObject()\n  if ($z1 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FilterIterator#setNextObject(...0)",
        "body": "{\r\n    while (iterator.hasNext()) {\r\n        final E object \u003d iterator.next();\r\n        if (predicate.test(object)) {\r\n            nextObject \u003d object;\r\n            nextObjectSet \u003d true;\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.FilterIterator",
    "methodName": "next",
    "signature": "java.lang.Object next()",
    "visibility": "public",
    "body": "{\r\n    if (!nextObjectSet \u0026\u0026 !setNextObject()) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    nextObjectSet \u003d false;\r\n    return nextObject;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  FilterIterator\n  $z0 \u003d FilterIterator: boolean nextObjectSet\u003e\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $z1 \u003d r0.setNextObject()\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r2\n}",
      "B3 {\n  FilterIterator: boolean nextObjectSet\u003e \u003d 0\n  $r1 \u003d Object nextObject\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FilterIterator#setNextObject(...0)",
        "body": "{\r\n    while (iterator.hasNext()) {\r\n        final E object \u003d iterator.next();\r\n        if (predicate.test(object)) {\r\n            nextObject \u003d object;\r\n            nextObjectSet \u003d true;\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.FilterIterator",
    "methodName": "remove",
    "signature": "void remove()",
    "visibility": "public",
    "body": "{\r\n    if (nextObjectSet) {\r\n        throw new IllegalStateException(\"remove() cannot be called\");\r\n    }\r\n    iterator.remove();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  FilterIterator\n  $z0 \u003d FilterIterator: boolean nextObjectSet\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d IllegalStateException\n  new IllegalStateException(\"remove() cannot be called\")\n  throw $r2\n}",
      "B2 {\n  $r1 \u003d Iterator iterator\u003e\n  $r1.remove()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.FilterIterator",
    "methodName": "safePredicate",
    "signature": "org.apache.commons.collections4.Predicate safePredicate(org.apache.commons.collections4.Predicate)",
    "visibility": "private",
    "body": "{\r\n    return predicate !\u003d null ? predicate : TruePredicate.truePredicate();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  FilterIterator\n  Predicate\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d TruePredicate.truePredicate()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.FilterIterator",
    "methodName": "setNextObject",
    "signature": "boolean setNextObject()",
    "visibility": "private",
    "body": "{\r\n    while (iterator.hasNext()) {\r\n        final E object \u003d iterator.next();\r\n        if (predicate.test(object)) {\r\n            nextObject \u003d object;\r\n            nextObjectSet \u003d true;\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  FilterIterator\n}",
      "B1 {\n  $r1 \u003d Iterator iterator\u003e\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d Iterator iterator\u003e\n  $r3 \u003d $r2.next()\n  $r4 \u003d Predicate predicate\u003e\n  $z1 \u003d $r4.test($r3)\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  Object nextObject\u003e \u003d $r3\n  FilterIterator: boolean nextObjectSet\u003e \u003d 1\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.FilterListIterator",
    "methodName": "hasNext",
    "signature": "boolean hasNext()",
    "visibility": "public",
    "body": "{\r\n    return nextObjectSet || setNextObject();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  FilterListIterator\n  $z0 \u003d FilterListIterator: boolean nextObjectSet\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d r0.setNextObject()\n  if ($z1 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FilterListIterator#setNextObject(...0)",
        "body": "{\r\n    // if previousObjectSet,\r\n    // then we\u0027ve walked back one step in the\r\n    // underlying list (due to a hasPrevious() call)\r\n    // so skip ahead one matching object\r\n    if (previousObjectSet) {\r\n        clearPreviousObject();\r\n        if (!setNextObject()) {\r\n            return false;\r\n        }\r\n        clearNextObject();\r\n    }\r\n    if (iterator \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    while (iterator.hasNext()) {\r\n        final E object \u003d iterator.next();\r\n        if (predicate.test(object)) {\r\n            nextObject \u003d object;\r\n            nextObjectSet \u003d true;\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.FilterListIterator",
    "methodName": "hasPrevious",
    "signature": "boolean hasPrevious()",
    "visibility": "public",
    "body": "{\r\n    return previousObjectSet || setPreviousObject();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  FilterListIterator\n  $z0 \u003d FilterListIterator: boolean previousObjectSet\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d r0.setPreviousObject()\n  if ($z1 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FilterListIterator#setPreviousObject(...0)",
        "body": "{\r\n    // if nextObjectSet,\r\n    // then we\u0027ve walked back one step in the\r\n    // underlying list (due to a hasNext() call)\r\n    // so skip ahead one matching object\r\n    if (nextObjectSet) {\r\n        clearNextObject();\r\n        if (!setPreviousObject()) {\r\n            return false;\r\n        }\r\n        clearPreviousObject();\r\n    }\r\n    if (iterator \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    while (iterator.hasPrevious()) {\r\n        final E object \u003d iterator.previous();\r\n        if (predicate.test(object)) {\r\n            previousObject \u003d object;\r\n            previousObjectSet \u003d true;\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.FilterListIterator",
    "methodName": "next",
    "signature": "java.lang.Object next()",
    "visibility": "public",
    "body": "{\r\n    if (!nextObjectSet \u0026\u0026 !setNextObject()) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    nextIndex++;\r\n    final E temp \u003d nextObject;\r\n    clearNextObject();\r\n    return temp;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  FilterListIterator\n  $z0 \u003d FilterListIterator: boolean nextObjectSet\u003e\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $z1 \u003d r0.setNextObject()\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r2\n}",
      "B3 {\n  $i0 \u003d FilterListIterator: int nextIndex\u003e\n  $i1 \u003d $i0 + 1\n  FilterListIterator: int nextIndex\u003e \u003d $i1\n  $r1 \u003d Object nextObject\u003e\n  r0.clearNextObject()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FilterListIterator#clearNextObject(...0)",
        "body": "{\r\n    nextObject \u003d null;\r\n    nextObjectSet \u003d false;\r\n}"
      },
      {
        "name": "FilterListIterator#setNextObject(...0)",
        "body": "{\r\n    // if previousObjectSet,\r\n    // then we\u0027ve walked back one step in the\r\n    // underlying list (due to a hasPrevious() call)\r\n    // so skip ahead one matching object\r\n    if (previousObjectSet) {\r\n        clearPreviousObject();\r\n        if (!setNextObject()) {\r\n            return false;\r\n        }\r\n        clearNextObject();\r\n    }\r\n    if (iterator \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    while (iterator.hasNext()) {\r\n        final E object \u003d iterator.next();\r\n        if (predicate.test(object)) {\r\n            nextObject \u003d object;\r\n            nextObjectSet \u003d true;\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.FilterListIterator",
    "methodName": "previous",
    "signature": "java.lang.Object previous()",
    "visibility": "public",
    "body": "{\r\n    if (!previousObjectSet \u0026\u0026 !setPreviousObject()) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    nextIndex--;\r\n    final E temp \u003d previousObject;\r\n    clearPreviousObject();\r\n    return temp;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  FilterListIterator\n  $z0 \u003d FilterListIterator: boolean previousObjectSet\u003e\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $z1 \u003d r0.setPreviousObject()\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r2\n}",
      "B3 {\n  $i0 \u003d FilterListIterator: int nextIndex\u003e\n  $i1 \u003d $i0 - 1\n  FilterListIterator: int nextIndex\u003e \u003d $i1\n  $r1 \u003d Object previousObject\u003e\n  r0.clearPreviousObject()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FilterListIterator#clearPreviousObject(...0)",
        "body": "{\r\n    previousObject \u003d null;\r\n    previousObjectSet \u003d false;\r\n}"
      },
      {
        "name": "FilterListIterator#setPreviousObject(...0)",
        "body": "{\r\n    // if nextObjectSet,\r\n    // then we\u0027ve walked back one step in the\r\n    // underlying list (due to a hasNext() call)\r\n    // so skip ahead one matching object\r\n    if (nextObjectSet) {\r\n        clearNextObject();\r\n        if (!setPreviousObject()) {\r\n            return false;\r\n        }\r\n        clearPreviousObject();\r\n    }\r\n    if (iterator \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    while (iterator.hasPrevious()) {\r\n        final E object \u003d iterator.previous();\r\n        if (predicate.test(object)) {\r\n            previousObject \u003d object;\r\n            previousObjectSet \u003d true;\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.FilterListIterator",
    "methodName": "setNextObject",
    "signature": "boolean setNextObject()",
    "visibility": "private",
    "body": "{\r\n    // if previousObjectSet,\r\n    // then we\u0027ve walked back one step in the\r\n    // underlying list (due to a hasPrevious() call)\r\n    // so skip ahead one matching object\r\n    if (previousObjectSet) {\r\n        clearPreviousObject();\r\n        if (!setNextObject()) {\r\n            return false;\r\n        }\r\n        clearNextObject();\r\n    }\r\n    if (iterator \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    while (iterator.hasNext()) {\r\n        final E object \u003d iterator.next();\r\n        if (predicate.test(object)) {\r\n            nextObject \u003d object;\r\n            nextObjectSet \u003d true;\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B4",
      "B1 : If($z3 !\u003d 0) → B2 | else → B3",
      "B4 : If($r1 !\u003d null) → B5 | else → B6",
      "B6 : If($z1 \u003d\u003d 0) → B7 | else → B10",
      "B7 : If($z2 \u003d\u003d 0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  FilterListIterator\n  $z0 \u003d FilterListIterator: boolean previousObjectSet\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B4\n}",
      "B1 {\n  r0.clearPreviousObject()\n  $z3 \u003d r0.setNextObject()\n  if ($z3 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  r0.clearNextObject()\n}",
      "B4 {\n  $r1 \u003d ListIterator iterator\u003e\n  if ($r1 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r2 \u003d ListIterator iterator\u003e\n  $z1 \u003d $r2.hasNext()\n  if ($z1 \u003d\u003d 0) goto B7 else B10\n}",
      "B7 {\n  $r3 \u003d ListIterator iterator\u003e\n  $r4 \u003d $r3.next()\n  $r5 \u003d Predicate predicate\u003e\n  $z2 \u003d $r5.test($r4)\n  if ($z2 \u003d\u003d 0) goto B8 else B9\n}",
      "B8 {\n  Object nextObject\u003e \u003d $r4\n  FilterListIterator: boolean nextObjectSet\u003e \u003d 1\n  return\n}",
      "B9 {\n  goto B6\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B6",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FilterListIterator#clearPreviousObject(...0)",
        "body": "{\r\n    previousObject \u003d null;\r\n    previousObjectSet \u003d false;\r\n}"
      },
      {
        "name": "FilterListIterator#clearNextObject(...0)",
        "body": "{\r\n    nextObject \u003d null;\r\n    nextObjectSet \u003d false;\r\n}"
      },
      {
        "name": "FilterListIterator#setNextObject(...0)",
        "body": "{\r\n    // if previousObjectSet,\r\n    // then we\u0027ve walked back one step in the\r\n    // underlying list (due to a hasPrevious() call)\r\n    // so skip ahead one matching object\r\n    if (previousObjectSet) {\r\n        clearPreviousObject();\r\n        if (!setNextObject()) {\r\n            return false;\r\n        }\r\n        clearNextObject();\r\n    }\r\n    if (iterator \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    while (iterator.hasNext()) {\r\n        final E object \u003d iterator.next();\r\n        if (predicate.test(object)) {\r\n            nextObject \u003d object;\r\n            nextObjectSet \u003d true;\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.FilterListIterator",
    "methodName": "setPreviousObject",
    "signature": "boolean setPreviousObject()",
    "visibility": "private",
    "body": "{\r\n    // if nextObjectSet,\r\n    // then we\u0027ve walked back one step in the\r\n    // underlying list (due to a hasNext() call)\r\n    // so skip ahead one matching object\r\n    if (nextObjectSet) {\r\n        clearNextObject();\r\n        if (!setPreviousObject()) {\r\n            return false;\r\n        }\r\n        clearPreviousObject();\r\n    }\r\n    if (iterator \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    while (iterator.hasPrevious()) {\r\n        final E object \u003d iterator.previous();\r\n        if (predicate.test(object)) {\r\n            previousObject \u003d object;\r\n            previousObjectSet \u003d true;\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B4",
      "B1 : If($z3 !\u003d 0) → B2 | else → B3",
      "B4 : If($r1 !\u003d null) → B5 | else → B6",
      "B6 : If($z1 \u003d\u003d 0) → B7 | else → B10",
      "B7 : If($z2 \u003d\u003d 0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  FilterListIterator\n  $z0 \u003d FilterListIterator: boolean nextObjectSet\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B4\n}",
      "B1 {\n  r0.clearNextObject()\n  $z3 \u003d r0.setPreviousObject()\n  if ($z3 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  r0.clearPreviousObject()\n}",
      "B4 {\n  $r1 \u003d ListIterator iterator\u003e\n  if ($r1 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r2 \u003d ListIterator iterator\u003e\n  $z1 \u003d $r2.hasPrevious()\n  if ($z1 \u003d\u003d 0) goto B7 else B10\n}",
      "B7 {\n  $r3 \u003d ListIterator iterator\u003e\n  $r4 \u003d $r3.previous()\n  $r5 \u003d Predicate predicate\u003e\n  $z2 \u003d $r5.test($r4)\n  if ($z2 \u003d\u003d 0) goto B8 else B9\n}",
      "B8 {\n  Object previousObject\u003e \u003d $r4\n  FilterListIterator: boolean previousObjectSet\u003e \u003d 1\n  return\n}",
      "B9 {\n  goto B6\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B6",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FilterListIterator#clearPreviousObject(...0)",
        "body": "{\r\n    previousObject \u003d null;\r\n    previousObjectSet \u003d false;\r\n}"
      },
      {
        "name": "FilterListIterator#setPreviousObject(...0)",
        "body": "{\r\n    // if nextObjectSet,\r\n    // then we\u0027ve walked back one step in the\r\n    // underlying list (due to a hasNext() call)\r\n    // so skip ahead one matching object\r\n    if (nextObjectSet) {\r\n        clearNextObject();\r\n        if (!setPreviousObject()) {\r\n            return false;\r\n        }\r\n        clearPreviousObject();\r\n    }\r\n    if (iterator \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    while (iterator.hasPrevious()) {\r\n        final E object \u003d iterator.previous();\r\n        if (predicate.test(object)) {\r\n            previousObject \u003d object;\r\n            previousObjectSet \u003d true;\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      },
      {
        "name": "FilterListIterator#clearNextObject(...0)",
        "body": "{\r\n    nextObject \u003d null;\r\n    nextObjectSet \u003d false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.IteratorChain",
    "methodName": "checkLocked",
    "signature": "void checkLocked()",
    "visibility": "private",
    "body": "{\r\n    if (isLocked) {\r\n        throw new UnsupportedOperationException(\"IteratorChain cannot be changed after the first use of a method from the Iterator interface\");\r\n    }\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  IteratorChain\n  $z0 \u003d IteratorChain: boolean isLocked\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d UnsupportedOperationException\n  new UnsupportedOperationException(\"IteratorChain cannot be changed after the first use of a method from the Iterator interface\")\n  throw $r1\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.IteratorChain",
    "methodName": "lockChain",
    "signature": "void lockChain()",
    "visibility": "private",
    "body": "{\r\n    if (!isLocked) {\r\n        isLocked \u003d true;\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  IteratorChain\n  $z0 \u003d IteratorChain: boolean isLocked\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  IteratorChain: boolean isLocked\u003e \u003d 1\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.IteratorChain",
    "methodName": "remove",
    "signature": "void remove()",
    "visibility": "public",
    "body": "{\r\n    lockChain();\r\n    if (currentIterator \u003d\u003d null) {\r\n        updateCurrentIterator();\r\n    }\r\n    lastUsedIterator.remove();\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  IteratorChain\n  r0.lockChain()\n  $r1 \u003d Iterator currentIterator\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  r0.updateCurrentIterator()\n}",
      "B2 {\n  $r2 \u003d Iterator lastUsedIterator\u003e\n  $r2.remove()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IteratorChain#lockChain(...0)",
        "body": "{\r\n    if (!isLocked) {\r\n        isLocked \u003d true;\r\n    }\r\n}"
      },
      {
        "name": "IteratorChain#updateCurrentIterator(...0)",
        "body": "{\r\n    if (currentIterator \u003d\u003d null) {\r\n        if (iteratorQueue.isEmpty()) {\r\n            currentIterator \u003d EmptyIterator.\u003cE\u003eemptyIterator();\r\n        } else {\r\n            currentIterator \u003d iteratorQueue.remove();\r\n        }\r\n        // set last used iterator here, in case the user calls remove\r\n        // before calling hasNext() or next() (although they shouldn\u0027t)\r\n        lastUsedIterator \u003d currentIterator;\r\n    }\r\n    while (!currentIterator.hasNext() \u0026\u0026 !iteratorQueue.isEmpty()) {\r\n        currentIterator \u003d iteratorQueue.remove();\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.IteratorChain",
    "methodName": "updateCurrentIterator",
    "signature": "void updateCurrentIterator()",
    "visibility": "protected",
    "body": "{\r\n    if (currentIterator \u003d\u003d null) {\r\n        if (iteratorQueue.isEmpty()) {\r\n            currentIterator \u003d EmptyIterator.\u003cE\u003eemptyIterator();\r\n        } else {\r\n            currentIterator \u003d iteratorQueue.remove();\r\n        }\r\n        // set last used iterator here, in case the user calls remove\r\n        // before calling hasNext() or next() (although they shouldn\u0027t)\r\n        lastUsedIterator \u003d currentIterator;\r\n    }\r\n    while (!currentIterator.hasNext() \u0026\u0026 !iteratorQueue.isEmpty()) {\r\n        currentIterator \u003d iteratorQueue.remove();\r\n    }\r\n}",
    "nodes": 9,
    "edges": 12,
    "cc": 5,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B5",
      "B1 : If($z1 \u003d\u003d 0) → B2 | else → B3",
      "B5 : If($z2 !\u003d 0) → B6 | else → B8",
      "B6 : If($z0 !\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  IteratorChain\n  $r1 \u003d Iterator currentIterator\u003e\n  if ($r1 !\u003d null) goto B1 else B5\n}",
      "B1 {\n  $r6 \u003d Queue iteratorQueue\u003e\n  $z1 \u003d $r6.isEmpty()\n  if ($z1 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r11 \u003d EmptyIterator.emptyIterator()\n  Iterator currentIterator\u003e \u003d $r11\n  goto B4\n}",
      "B3 {\n  $r7 \u003d Queue iteratorQueue\u003e\n  $r8 \u003d $r7.remove()\n  $r9 \u003d Iterator) $r8\n  Iterator currentIterator\u003e \u003d $r9\n}",
      "B4 {\n  $r10 \u003d Iterator currentIterator\u003e\n  Iterator lastUsedIterator\u003e \u003d $r10\n}",
      "B5 {\n  $r12 \u003d Iterator currentIterator\u003e\n  $z2 \u003d $r12.hasNext()\n  if ($z2 !\u003d 0) goto B6 else B8\n}",
      "B6 {\n  $r2 \u003d Queue iteratorQueue\u003e\n  $z0 \u003d $r2.isEmpty()\n  if ($z0 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $r3 \u003d Queue iteratorQueue\u003e\n  $r4 \u003d $r3.remove()\n  $r5 \u003d Iterator) $r4\n  Iterator currentIterator\u003e \u003d $r5\n  goto B5\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B5",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.IteratorIterable",
    "methodName": "iterator",
    "signature": "java.util.Iterator iterator()",
    "visibility": "public",
    "body": "{\r\n    if (iterator instanceof ResettableIterator) {\r\n        ((ResettableIterator\u003c? extends E\u003e) iterator).reset();\r\n    }\r\n    return typeSafeIterator;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  IteratorIterable\n  $r1 \u003d Iterator iterator\u003e\n  $z0 \u003d ResettableIterator\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Iterator iterator\u003e\n  $r4 \u003d ResettableIterator) $r3\n  $r4.reset()\n}",
      "B2 {\n  $r2 \u003d Iterator typeSafeIterator\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ListIteratorWrapper",
    "methodName": "add",
    "signature": "void add(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ListIteratorWrapper\n  Object\n  $r1 \u003d Iterator iterator\u003e\n  $z0 \u003d ListIterator\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Iterator iterator\u003e\n  r4 \u003d ListIterator) $r3\n  r4.add(r5)\n  return\n}",
      "B2 {\n  $r2 \u003d UnsupportedOperationException\n  new UnsupportedOperationException(\"ListIteratorWrapper does not support optional operations of ListIterator.\")\n  throw $r2\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ListIteratorWrapper",
    "methodName": "hasNext",
    "signature": "boolean hasNext()",
    "visibility": "public",
    "body": "{\r\n    if (currentIndex \u003d\u003d wrappedIteratorIndex || iterator instanceof ListIterator) {\r\n        return iterator.hasNext();\r\n    }\r\n    return true;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003d\u003d $i0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ListIteratorWrapper\n  $i1 \u003d ListIteratorWrapper: int currentIndex\u003e\n  $i0 \u003d ListIteratorWrapper: int wrappedIteratorIndex\u003e\n  if ($i1 \u003d\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Iterator iterator\u003e\n  $z1 \u003d ListIterator\n  if ($z1 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d Iterator iterator\u003e\n  $z0 \u003d $r1.hasNext()\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ListIteratorWrapper",
    "methodName": "hasPrevious",
    "signature": "boolean hasPrevious()",
    "visibility": "public",
    "body": "{\r\n    if (iterator instanceof ListIterator) {\r\n        final ListIterator\u003c?\u003e li \u003d (ListIterator\u003c?\u003e) iterator;\r\n        return li.hasPrevious();\r\n    }\r\n    return currentIndex \u003e 0;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($i0 \u003c\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ListIteratorWrapper\n  $r1 \u003d Iterator iterator\u003e\n  $z0 \u003d ListIterator\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Iterator iterator\u003e\n  r3 \u003d ListIterator) $r2\n  $z1 \u003d r3.hasPrevious()\n  return\n}",
      "B2 {\n  $i0 \u003d ListIteratorWrapper: int currentIndex\u003e\n  if ($i0 \u003c\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $z2 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z2 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ListIteratorWrapper",
    "methodName": "next",
    "signature": "java.lang.Object next()",
    "visibility": "public",
    "body": "{\r\n    if (iterator instanceof ListIterator) {\r\n        return iterator.next();\r\n    }\r\n    if (currentIndex \u003c wrappedIteratorIndex) {\r\n        ++currentIndex;\r\n        return list.get(currentIndex - 1);\r\n    }\r\n    final E retval \u003d iterator.next();\r\n    list.add(retval);\r\n    ++currentIndex;\r\n    ++wrappedIteratorIndex;\r\n    removeState \u003d true;\r\n    return retval;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($i1 \u003e\u003d $i0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ListIteratorWrapper\n  $r1 \u003d Iterator iterator\u003e\n  $z0 \u003d ListIterator\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d Iterator iterator\u003e\n  $r8 \u003d $r7.next()\n  return\n}",
      "B2 {\n  $i1 \u003d ListIteratorWrapper: int currentIndex\u003e\n  $i0 \u003d ListIteratorWrapper: int wrappedIteratorIndex\u003e\n  if ($i1 \u003e\u003d $i0) goto B3 else B4\n}",
      "B3 {\n  $i6 \u003d ListIteratorWrapper: int currentIndex\u003e\n  $i7 \u003d $i6 + 1\n  ListIteratorWrapper: int currentIndex\u003e \u003d $i7\n  $r5 \u003d List list\u003e\n  $i8 \u003d ListIteratorWrapper: int currentIndex\u003e\n  $i9 \u003d $i8 - 1\n  $r6 \u003d $r5.get($i9)\n  return\n}",
      "B4 {\n  $r2 \u003d Iterator iterator\u003e\n  $r3 \u003d $r2.next()\n  $r4 \u003d List list\u003e\n  $r4.add($r3)\n  $i2 \u003d ListIteratorWrapper: int currentIndex\u003e\n  $i3 \u003d $i2 + 1\n  ListIteratorWrapper: int currentIndex\u003e \u003d $i3\n  $i4 \u003d ListIteratorWrapper: int wrappedIteratorIndex\u003e\n  $i5 \u003d $i4 + 1\n  ListIteratorWrapper: int wrappedIteratorIndex\u003e \u003d $i5\n  ListIteratorWrapper: boolean removeState\u003e \u003d 1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ListIteratorWrapper",
    "methodName": "nextIndex",
    "signature": "int nextIndex()",
    "visibility": "public",
    "body": "{\r\n    if (iterator instanceof ListIterator) {\r\n        final ListIterator\u003c?\u003e li \u003d (ListIterator\u003c?\u003e) iterator;\r\n        return li.nextIndex();\r\n    }\r\n    return currentIndex;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ListIteratorWrapper\n  $r1 \u003d Iterator iterator\u003e\n  $z0 \u003d ListIterator\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Iterator iterator\u003e\n  r3 \u003d ListIterator) $r2\n  $i1 \u003d r3.nextIndex()\n  return\n}",
      "B2 {\n  $i0 \u003d ListIteratorWrapper: int currentIndex\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ListIteratorWrapper",
    "methodName": "previous",
    "signature": "java.lang.Object previous()",
    "visibility": "public",
    "body": "{\r\n    if (iterator instanceof ListIterator) {\r\n        @SuppressWarnings(\"unchecked\")\r\n        final ListIterator\u003cE\u003e li \u003d (ListIterator\u003cE\u003e) iterator;\r\n        return li.previous();\r\n    }\r\n    if (currentIndex \u003d\u003d 0) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    removeState \u003d wrappedIteratorIndex \u003d\u003d currentIndex;\r\n    return list.get(--currentIndex);\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B4 : If($i2 !\u003d $i1) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  ListIteratorWrapper\n  $r1 \u003d Iterator iterator\u003e\n  $z0 \u003d ListIterator\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d Iterator iterator\u003e\n  r6 \u003d ListIterator) $r5\n  $r7 \u003d r6.previous()\n  return\n}",
      "B2 {\n  $i0 \u003d ListIteratorWrapper: int currentIndex\u003e\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r4\n}",
      "B4 {\n  $i2 \u003d ListIteratorWrapper: int wrappedIteratorIndex\u003e\n  $i1 \u003d ListIteratorWrapper: int currentIndex\u003e\n  if ($i2 !\u003d $i1) goto B5 else B6\n}",
      "B5 {\n  $z1 \u003d 1\n  goto B7\n}",
      "B6 {\n  $z1 \u003d 0\n}",
      "B7 {\n  ListIteratorWrapper: boolean removeState\u003e \u003d $z1\n  $r2 \u003d List list\u003e\n  $i3 \u003d ListIteratorWrapper: int currentIndex\u003e\n  $i4 \u003d $i3 - 1\n  ListIteratorWrapper: int currentIndex\u003e \u003d $i4\n  $r3 \u003d $r2.get($i4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ListIteratorWrapper",
    "methodName": "previousIndex",
    "signature": "int previousIndex()",
    "visibility": "public",
    "body": "{\r\n    if (iterator instanceof ListIterator) {\r\n        final ListIterator\u003c?\u003e li \u003d (ListIterator\u003c?\u003e) iterator;\r\n        return li.previousIndex();\r\n    }\r\n    return currentIndex - 1;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ListIteratorWrapper\n  $r1 \u003d Iterator iterator\u003e\n  $z0 \u003d ListIterator\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Iterator iterator\u003e\n  r3 \u003d ListIterator) $r2\n  $i2 \u003d r3.previousIndex()\n  return\n}",
      "B2 {\n  $i0 \u003d ListIteratorWrapper: int currentIndex\u003e\n  $i1 \u003d $i0 - 1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ListIteratorWrapper",
    "methodName": "remove",
    "signature": "void remove()",
    "visibility": "public",
    "body": "{\r\n    if (iterator instanceof ListIterator) {\r\n        iterator.remove();\r\n        return;\r\n    }\r\n    int removeIndex \u003d currentIndex;\r\n    if (currentIndex \u003d\u003d wrappedIteratorIndex) {\r\n        --removeIndex;\r\n    }\r\n    if (!removeState || wrappedIteratorIndex - currentIndex \u003e 1) {\r\n        throw new IllegalStateException(MessageFormat.format(CANNOT_REMOVE_MESSAGE, Integer.valueOf(removeIndex)));\r\n    }\r\n    iterator.remove();\r\n    list.remove(removeIndex);\r\n    currentIndex \u003d removeIndex;\r\n    wrappedIteratorIndex--;\r\n    removeState \u003d false;\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($i1 !\u003d $i0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B6",
      "B5 : If($i4 \u003c\u003d 1) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  ListIteratorWrapper\n  $r1 \u003d Iterator iterator\u003e\n  $z0 \u003d ListIterator\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d Iterator iterator\u003e\n  $r8.remove()\n  return\n}",
      "B2 {\n  i7 \u003d ListIteratorWrapper: int currentIndex\u003e\n  $i1 \u003d ListIteratorWrapper: int currentIndex\u003e\n  $i0 \u003d ListIteratorWrapper: int wrappedIteratorIndex\u003e\n  if ($i1 !\u003d $i0) goto B3 else B4\n}",
      "B3 {\n  $i9 \u003d (int) -1\n  i7 \u003d i7 + $i9\n}",
      "B4 {\n  $z1 \u003d ListIteratorWrapper: boolean removeState\u003e\n  if ($z1 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $i3 \u003d ListIteratorWrapper: int wrappedIteratorIndex\u003e\n  $i2 \u003d ListIteratorWrapper: int currentIndex\u003e\n  $i4 \u003d $i3 - $i2\n  if ($i4 \u003c\u003d 1) goto B6 else B7\n}",
      "B6 {\n  $r9 \u003d IllegalStateException\n  $r3 \u003d Object)[1]\n  $r4 \u003d Integer.valueOf(i7)\n  $r3[0] \u003d $r4\n  $r5 \u003d MessageFormat.format(\"Cannot remove element at index {0}.\", $r3)\n  new IllegalStateException($r5)\n  throw $r9\n}",
      "B7 {\n  $r6 \u003d Iterator iterator\u003e\n  $r6.remove()\n  $r7 \u003d List list\u003e\n  $r7.remove(i7)\n  ListIteratorWrapper: int currentIndex\u003e \u003d i7\n  $i5 \u003d ListIteratorWrapper: int wrappedIteratorIndex\u003e\n  $i6 \u003d $i5 - 1\n  ListIteratorWrapper: int wrappedIteratorIndex\u003e \u003d $i6\n  ListIteratorWrapper: boolean removeState\u003e \u003d 0\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ListIteratorWrapper",
    "methodName": "reset",
    "signature": "void reset()",
    "visibility": "public",
    "body": "{\r\n    if (iterator instanceof ListIterator) {\r\n        final ListIterator\u003c?\u003e li \u003d (ListIterator\u003c?\u003e) iterator;\r\n        while (li.previousIndex() \u003e\u003d 0) {\r\n            li.previous();\r\n        }\r\n        return;\r\n    }\r\n    currentIndex \u003d 0;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B5",
      "B2 : If($i0 \u003c 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ListIteratorWrapper\n  $r1 \u003d Iterator iterator\u003e\n  $z0 \u003d ListIterator\n  if ($z0 \u003d\u003d 0) goto B1 else B5\n}",
      "B1 {\n  $r2 \u003d Iterator iterator\u003e\n  r3 \u003d ListIterator) $r2\n}",
      "B2 {\n  $i0 \u003d r3.previousIndex()\n  if ($i0 \u003c 0) goto B3 else B4\n}",
      "B3 {\n  r3.previous()\n  goto B2\n}",
      "B4 {\n  return\n}",
      "B5 {\n  ListIteratorWrapper: int currentIndex\u003e \u003d 0\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ListIteratorWrapper",
    "methodName": "set",
    "signature": "void set(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ListIteratorWrapper\n  Object\n  $r1 \u003d Iterator iterator\u003e\n  $z0 \u003d ListIterator\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Iterator iterator\u003e\n  r4 \u003d ListIterator) $r3\n  r4.set(r5)\n  return\n}",
      "B2 {\n  $r2 \u003d UnsupportedOperationException\n  new UnsupportedOperationException(\"ListIteratorWrapper does not support optional operations of ListIterator.\")\n  throw $r2\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.LoopingIterator",
    "methodName": "hasNext",
    "signature": "boolean hasNext()",
    "visibility": "public",
    "body": "{\r\n    return !collection.isEmpty();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  LoopingIterator\n  $r1 \u003d Collection collection\u003e\n  $z0 \u003d $r1.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.LoopingIterator",
    "methodName": "next",
    "signature": "java.lang.Object next()",
    "visibility": "public",
    "body": "{\r\n    if (collection.isEmpty()) {\r\n        throw new NoSuchElementException(\"There are no elements for this iterator to loop on\");\r\n    }\r\n    if (!iterator.hasNext()) {\r\n        reset();\r\n    }\r\n    return iterator.next();\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  LoopingIterator\n  $r1 \u003d Collection collection\u003e\n  $z0 \u003d $r1.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d NoSuchElementException\n  new NoSuchElementException(\"There are no elements for this iterator to loop on\")\n  throw $r5\n}",
      "B2 {\n  $r2 \u003d Iterator iterator\u003e\n  $z1 \u003d $r2.hasNext()\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  r0.reset()\n}",
      "B4 {\n  $r3 \u003d Iterator iterator\u003e\n  $r4 \u003d $r3.next()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "LoopingIterator#reset(...0)",
        "body": "{\r\n    iterator \u003d collection.iterator();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.LoopingListIterator",
    "methodName": "hasNext",
    "signature": "boolean hasNext()",
    "visibility": "public",
    "body": "{\r\n    return !list.isEmpty();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  LoopingListIterator\n  $r1 \u003d List list\u003e\n  $z0 \u003d $r1.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.LoopingListIterator",
    "methodName": "hasPrevious",
    "signature": "boolean hasPrevious()",
    "visibility": "public",
    "body": "{\r\n    return !list.isEmpty();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  LoopingListIterator\n  $r1 \u003d List list\u003e\n  $z0 \u003d $r1.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.LoopingListIterator",
    "methodName": "next",
    "signature": "java.lang.Object next()",
    "visibility": "public",
    "body": "{\r\n    if (list.isEmpty()) {\r\n        throw new NoSuchElementException(\"There are no elements for this iterator to loop on\");\r\n    }\r\n    if (!iterator.hasNext()) {\r\n        reset();\r\n    }\r\n    return iterator.next();\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  LoopingListIterator\n  $r1 \u003d List list\u003e\n  $z0 \u003d $r1.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d NoSuchElementException\n  new NoSuchElementException(\"There are no elements for this iterator to loop on\")\n  throw $r5\n}",
      "B2 {\n  $r2 \u003d ListIterator iterator\u003e\n  $z1 \u003d $r2.hasNext()\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  r0.reset()\n}",
      "B4 {\n  $r3 \u003d ListIterator iterator\u003e\n  $r4 \u003d $r3.next()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "LoopingListIterator#reset(...0)",
        "body": "{\r\n    init();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.LoopingListIterator",
    "methodName": "nextIndex",
    "signature": "int nextIndex()",
    "visibility": "public",
    "body": "{\r\n    if (list.isEmpty()) {\r\n        throw new NoSuchElementException(\"There are no elements for this iterator to loop on\");\r\n    }\r\n    if (!iterator.hasNext()) {\r\n        return 0;\r\n    }\r\n    return iterator.nextIndex();\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  LoopingListIterator\n  $r1 \u003d List list\u003e\n  $z0 \u003d $r1.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d NoSuchElementException\n  new NoSuchElementException(\"There are no elements for this iterator to loop on\")\n  throw $r4\n}",
      "B2 {\n  $r2 \u003d ListIterator iterator\u003e\n  $z1 \u003d $r2.hasNext()\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r3 \u003d ListIterator iterator\u003e\n  $i0 \u003d $r3.nextIndex()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.LoopingListIterator",
    "methodName": "previous",
    "signature": "java.lang.Object previous()",
    "visibility": "public",
    "body": "{\r\n    if (list.isEmpty()) {\r\n        throw new NoSuchElementException(\"There are no elements for this iterator to loop on\");\r\n    }\r\n    if (!iterator.hasPrevious()) {\r\n        E result \u003d null;\r\n        while (iterator.hasNext()) {\r\n            result \u003d iterator.next();\r\n        }\r\n        iterator.previous();\r\n        return result;\r\n    }\r\n    return iterator.previous();\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($z1 !\u003d 0) → B3 | else → B7",
      "B4 : If($z2 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  LoopingListIterator\n  $r1 \u003d List list\u003e\n  $z0 \u003d $r1.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d NoSuchElementException\n  new NoSuchElementException(\"There are no elements for this iterator to loop on\")\n  throw $r8\n}",
      "B2 {\n  $r2 \u003d ListIterator iterator\u003e\n  $z1 \u003d $r2.hasPrevious()\n  if ($z1 !\u003d 0) goto B3 else B7\n}",
      "B3 {\n  r9 \u003d null\n}",
      "B4 {\n  $r5 \u003d ListIterator iterator\u003e\n  $z2 \u003d $r5.hasNext()\n  if ($z2 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r7 \u003d ListIterator iterator\u003e\n  r9 \u003d $r7.next()\n  goto B4\n}",
      "B6 {\n  $r6 \u003d ListIterator iterator\u003e\n  $r6.previous()\n  return\n}",
      "B7 {\n  $r3 \u003d ListIterator iterator\u003e\n  $r4 \u003d $r3.previous()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B4",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.LoopingListIterator",
    "methodName": "previousIndex",
    "signature": "int previousIndex()",
    "visibility": "public",
    "body": "{\r\n    if (list.isEmpty()) {\r\n        throw new NoSuchElementException(\"There are no elements for this iterator to loop on\");\r\n    }\r\n    if (!iterator.hasPrevious()) {\r\n        return list.size() - 1;\r\n    }\r\n    return iterator.previousIndex();\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  LoopingListIterator\n  $r1 \u003d List list\u003e\n  $z0 \u003d $r1.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d NoSuchElementException\n  new NoSuchElementException(\"There are no elements for this iterator to loop on\")\n  throw $r5\n}",
      "B2 {\n  $r2 \u003d ListIterator iterator\u003e\n  $z1 \u003d $r2.hasPrevious()\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d List list\u003e\n  $i1 \u003d $r4.size()\n  $i2 \u003d $i1 - 1\n  return\n}",
      "B4 {\n  $r3 \u003d ListIterator iterator\u003e\n  $i0 \u003d $r3.previousIndex()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.NodeListIterator",
    "methodName": "hasNext",
    "signature": "boolean hasNext()",
    "visibility": "public",
    "body": "{\r\n    return nodeList !\u003d null \u0026\u0026 index \u003c nodeList.getLength();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($i0 \u003e\u003d $i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  NodeListIterator\n  $r1 \u003d NodeList nodeList\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $i0 \u003d NodeListIterator: int index\u003e\n  $r2 \u003d NodeList nodeList\u003e\n  $i1 \u003d $r2.getLength()\n  if ($i0 \u003e\u003d $i1) goto B2 else B3\n}",
      "B2 {\n  $z0 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z0 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.NodeListIterator",
    "methodName": "next",
    "signature": "org.w3c.dom.Node next()",
    "visibility": "public",
    "body": "{\r\n    if (nodeList !\u003d null \u0026\u0026 index \u003c nodeList.getLength()) {\r\n        return nodeList.item(index++);\r\n    }\r\n    throw new NoSuchElementException(\"underlying nodeList has no more elements\");\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($i0 \u003e\u003d $i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  NodeListIterator\n  $r1 \u003d NodeList nodeList\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $i0 \u003d NodeListIterator: int index\u003e\n  $r3 \u003d NodeList nodeList\u003e\n  $i1 \u003d $r3.getLength()\n  if ($i0 \u003e\u003d $i1) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d NodeList nodeList\u003e\n  $i2 \u003d NodeListIterator: int index\u003e\n  $i3 \u003d $i2 + 1\n  NodeListIterator: int index\u003e \u003d $i3\n  $r5 \u003d $r4.item($i2)\n  return\n}",
      "B3 {\n  $r2 \u003d NoSuchElementException\n  new NoSuchElementException(\"underlying nodeList has no more elements\")\n  throw $r2\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ObjectArrayIterator",
    "methodName": "hasNext",
    "signature": "boolean hasNext()",
    "visibility": "public",
    "body": "{\r\n    return index \u003c endIndex;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003e\u003d $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectArrayIterator\n  $i1 \u003d ObjectArrayIterator: int index\u003e\n  $i0 \u003d ObjectArrayIterator: int endIndex\u003e\n  if ($i1 \u003e\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ObjectArrayIterator",
    "methodName": "next",
    "signature": "java.lang.Object next()",
    "visibility": "public",
    "body": "{\r\n    if (!hasNext()) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    return array[index++];\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectArrayIterator\n  $z0 \u003d r0.hasNext()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r3\n}",
      "B2 {\n  $r1 \u003d Object[] array\u003e\n  $i0 \u003d ObjectArrayIterator: int index\u003e\n  $i1 \u003d $i0 + 1\n  ObjectArrayIterator: int index\u003e \u003d $i1\n  $r2 \u003d $r1[$i0]\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectArrayIterator#hasNext(...0)",
        "body": "{\r\n    return index \u003c endIndex;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ObjectArrayListIterator",
    "methodName": "hasPrevious",
    "signature": "boolean hasPrevious()",
    "visibility": "public",
    "body": "{\r\n    return index \u003e getStartIndex();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d $i1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectArrayListIterator\n  $i0 \u003d ObjectArrayListIterator: int index\u003e\n  $i1 \u003d r0.getStartIndex()\n  if ($i0 \u003c\u003d $i1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectArrayListIterator#getStartIndex(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ObjectArrayListIterator",
    "methodName": "next",
    "signature": "java.lang.Object next()",
    "visibility": "public",
    "body": "{\r\n    if (!hasNext()) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    lastItemIndex \u003d index;\r\n    return array[index++];\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectArrayListIterator\n  $z0 \u003d r0.hasNext()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r3\n}",
      "B2 {\n  $i0 \u003d ObjectArrayListIterator: int index\u003e\n  ObjectArrayListIterator: int lastItemIndex\u003e \u003d $i0\n  $r1 \u003d Object[] array\u003e\n  $i1 \u003d ObjectArrayListIterator: int index\u003e\n  $i2 \u003d $i1 + 1\n  ObjectArrayListIterator: int index\u003e \u003d $i2\n  $r2 \u003d $r1[$i1]\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectArrayListIterator#hasNext(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ObjectArrayListIterator",
    "methodName": "previous",
    "signature": "java.lang.Object previous()",
    "visibility": "public",
    "body": "{\r\n    if (!hasPrevious()) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    lastItemIndex \u003d --index;\r\n    return array[index];\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectArrayListIterator\n  $z0 \u003d r0.hasPrevious()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r3\n}",
      "B2 {\n  $i0 \u003d ObjectArrayListIterator: int index\u003e\n  $i1 \u003d $i0 - 1\n  ObjectArrayListIterator: int index\u003e \u003d $i1\n  ObjectArrayListIterator: int lastItemIndex\u003e \u003d $i1\n  $r1 \u003d Object[] array\u003e\n  $i2 \u003d ObjectArrayListIterator: int index\u003e\n  $r2 \u003d $r1[$i2]\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectArrayListIterator#hasPrevious(...0)",
        "body": "{\r\n    return index \u003e getStartIndex();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ObjectArrayListIterator",
    "methodName": "set",
    "signature": "void set(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d $i3) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectArrayListIterator\n  Object\n  $i0 \u003d ObjectArrayListIterator: int lastItemIndex\u003e\n  $i3 \u003d (int) -1\n  if ($i0 !\u003d $i3) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalStateException\n  new IllegalStateException(\"must call next() or previous() before a call to set()\")\n  throw $r4\n}",
      "B2 {\n  $r2 \u003d Object[] array\u003e\n  $i1 \u003d ObjectArrayListIterator: int lastItemIndex\u003e\n  $r2[$i1] \u003d r1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ObjectGraphIterator",
    "methodName": "findNext",
    "signature": "void findNext(java.lang.Object)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectGraphIterator\n  Object\n  $z0 \u003d Iterator\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Iterator) r0\n  r1.findNextByIterator($r2)\n  goto B3\n}",
      "B2 {\n  Object currentValue\u003e \u003d r0\n  ObjectGraphIterator: boolean hasNext\u003e \u003d 1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ObjectGraphIterator",
    "methodName": "findNextByIterator",
    "signature": "void findNextByIterator(java.util.Iterator)",
    "visibility": "protected",
    "body": "{\r\n    if (iterator !\u003d currentIterator) {\r\n        // recurse a level\r\n        if (currentIterator !\u003d null) {\r\n            stack.push(currentIterator);\r\n        }\r\n        currentIterator \u003d iterator;\r\n    }\r\n    while (currentIterator.hasNext() \u0026\u0026 !hasNext) {\r\n        E next \u003d currentIterator.next();\r\n        if (transformer !\u003d null) {\r\n            next \u003d transformer.apply(next);\r\n        }\r\n        findNext(next);\r\n    }\r\n    // if we haven\u0027t found the next value and iterators are not yet exhausted\r\n    if (!hasNext \u0026\u0026 !stack.isEmpty()) {\r\n        // current iterator exhausted, go up a level\r\n        currentIterator \u003d stack.pop();\r\n        findNextByIterator(currentIterator);\r\n    }\r\n}",
    "nodes": 13,
    "edges": 19,
    "cc": 8,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d $r2) → B1 | else → B4",
      "B1 : If($r12 \u003d\u003d null) → B2 | else → B3",
      "B4 : If($z3 \u003d\u003d 0) → B5 | else → B9",
      "B5 : If($z2 !\u003d 0) → B6 | else → B9",
      "B6 : If($r10 \u003d\u003d null) → B7 | else → B8",
      "B9 : If($z0 !\u003d 0) → B10 | else → B12",
      "B10 : If($z1 !\u003d 0) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  ObjectGraphIterator\n  Iterator\n  $r2 \u003d Iterator currentIterator\u003e\n  if (r0 \u003d\u003d $r2) goto B1 else B4\n}",
      "B1 {\n  $r12 \u003d Iterator currentIterator\u003e\n  if ($r12 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r14 \u003d Deque stack\u003e\n  $r13 \u003d Iterator currentIterator\u003e\n  $r14.push($r13)\n}",
      "B3 {\n  Iterator currentIterator\u003e \u003d r0\n}",
      "B4 {\n  $r15 \u003d Iterator currentIterator\u003e\n  $z3 \u003d $r15.hasNext()\n  if ($z3 \u003d\u003d 0) goto B5 else B9\n}",
      "B5 {\n  $z2 \u003d ObjectGraphIterator: boolean hasNext\u003e\n  if ($z2 !\u003d 0) goto B6 else B9\n}",
      "B6 {\n  $r8 \u003d Iterator currentIterator\u003e\n  $r9 \u003d $r8.next()\n  r16 \u003d $r9\n  $r10 \u003d Transformer transformer\u003e\n  if ($r10 \u003d\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r11 \u003d Transformer transformer\u003e\n  r16 \u003d $r11.apply($r9)\n}",
      "B8 {\n  r1.findNext(r16)\n  goto B4\n}",
      "B9 {\n  $z0 \u003d ObjectGraphIterator: boolean hasNext\u003e\n  if ($z0 !\u003d 0) goto B10 else B12\n}",
      "B10 {\n  $r3 \u003d Deque stack\u003e\n  $z1 \u003d $r3.isEmpty()\n  if ($z1 !\u003d 0) goto B11 else B12\n}",
      "B11 {\n  $r4 \u003d Deque stack\u003e\n  $r5 \u003d $r4.pop()\n  $r6 \u003d Iterator) $r5\n  Iterator currentIterator\u003e \u003d $r6\n  $r7 \u003d Iterator currentIterator\u003e\n  r1.findNextByIterator($r7)\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B9",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B4",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectGraphIterator#findNextByIterator(...1)",
        "body": "{\r\n    if (iterator !\u003d currentIterator) {\r\n        // recurse a level\r\n        if (currentIterator !\u003d null) {\r\n            stack.push(currentIterator);\r\n        }\r\n        currentIterator \u003d iterator;\r\n    }\r\n    while (currentIterator.hasNext() \u0026\u0026 !hasNext) {\r\n        E next \u003d currentIterator.next();\r\n        if (transformer !\u003d null) {\r\n            next \u003d transformer.apply(next);\r\n        }\r\n        findNext(next);\r\n    }\r\n    // if we haven\u0027t found the next value and iterators are not yet exhausted\r\n    if (!hasNext \u0026\u0026 !stack.isEmpty()) {\r\n        // current iterator exhausted, go up a level\r\n        currentIterator \u003d stack.pop();\r\n        findNextByIterator(currentIterator);\r\n    }\r\n}"
      },
      {
        "name": "ObjectGraphIterator#findNext(...1)",
        "body": "{\r\n    if (value instanceof Iterator) {\r\n        // need to examine this iterator\r\n        findNextByIterator((Iterator\u003c? extends E\u003e) value);\r\n    } else {\r\n        // next value found\r\n        currentValue \u003d value;\r\n        hasNext \u003d true;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ObjectGraphIterator",
    "methodName": "next",
    "signature": "java.lang.Object next()",
    "visibility": "public",
    "body": "{\r\n    updateCurrentIterator();\r\n    if (!hasNext) {\r\n        throw new NoSuchElementException(\"No more elements in the iteration\");\r\n    }\r\n    lastUsedIterator \u003d currentIterator;\r\n    final E result \u003d currentValue;\r\n    currentValue \u003d null;\r\n    hasNext \u003d false;\r\n    return result;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectGraphIterator\n  r0.updateCurrentIterator()\n  $z0 \u003d ObjectGraphIterator: boolean hasNext\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d NoSuchElementException\n  new NoSuchElementException(\"No more elements in the iteration\")\n  throw $r3\n}",
      "B2 {\n  $r1 \u003d Iterator currentIterator\u003e\n  Iterator lastUsedIterator\u003e \u003d $r1\n  r2 \u003d Object currentValue\u003e\n  Object currentValue\u003e \u003d null\n  ObjectGraphIterator: boolean hasNext\u003e \u003d 0\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectGraphIterator#updateCurrentIterator(...0)",
        "body": "{\r\n    if (hasNext) {\r\n        return;\r\n    }\r\n    if (currentIterator \u003d\u003d null) {\r\n        if (root \u003d\u003d null) {\r\n            // NOPMD\r\n            // do nothing, hasNext will be false\r\n        } else {\r\n            if (transformer \u003d\u003d null) {\r\n                findNext(root);\r\n            } else {\r\n                findNext(transformer.apply(root));\r\n            }\r\n            root \u003d null;\r\n        }\r\n    } else {\r\n        findNextByIterator(currentIterator);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ObjectGraphIterator",
    "methodName": "remove",
    "signature": "void remove()",
    "visibility": "public",
    "body": "{\r\n    if (lastUsedIterator \u003d\u003d null) {\r\n        throw new IllegalStateException(\"Iterator remove() cannot be called at this time\");\r\n    }\r\n    lastUsedIterator.remove();\r\n    lastUsedIterator \u003d null;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ObjectGraphIterator\n  $r1 \u003d Iterator lastUsedIterator\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IllegalStateException\n  new IllegalStateException(\"Iterator remove() cannot be called at this time\")\n  throw $r3\n}",
      "B2 {\n  $r2 \u003d Iterator lastUsedIterator\u003e\n  $r2.remove()\n  Iterator lastUsedIterator\u003e \u003d null\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ObjectGraphIterator",
    "methodName": "updateCurrentIterator",
    "signature": "void updateCurrentIterator()",
    "visibility": "protected",
    "body": "{\r\n    if (hasNext) {\r\n        return;\r\n    }\r\n    if (currentIterator \u003d\u003d null) {\r\n        if (root \u003d\u003d null) {\r\n            // NOPMD\r\n            // do nothing, hasNext will be false\r\n        } else {\r\n            if (transformer \u003d\u003d null) {\r\n                findNext(root);\r\n            } else {\r\n                findNext(transformer.apply(root));\r\n            }\r\n            root \u003d null;\r\n        }\r\n    } else {\r\n        findNextByIterator(currentIterator);\r\n    }\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($r1 !\u003d null) → B3 | else → B9",
      "B3 : If($r3 !\u003d null) → B4 | else → B5",
      "B5 : If($r4 !\u003d null) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  ObjectGraphIterator\n  $z0 \u003d ObjectGraphIterator: boolean hasNext\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d Iterator currentIterator\u003e\n  if ($r1 !\u003d null) goto B3 else B9\n}",
      "B3 {\n  $r3 \u003d Object root\u003e\n  if ($r3 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  goto B10\n}",
      "B5 {\n  $r4 \u003d Transformer transformer\u003e\n  if ($r4 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r8 \u003d Object root\u003e\n  r0.findNext($r8)\n  goto B8\n}",
      "B7 {\n  $r6 \u003d Transformer transformer\u003e\n  $r5 \u003d Object root\u003e\n  $r7 \u003d $r6.apply($r5)\n  r0.findNext($r7)\n}",
      "B8 {\n  Object root\u003e \u003d null\n  goto B10\n}",
      "B9 {\n  $r2 \u003d Iterator currentIterator\u003e\n  r0.findNextByIterator($r2)\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B9",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B10",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ObjectGraphIterator#findNextByIterator(...1)",
        "body": "{\r\n    if (iterator !\u003d currentIterator) {\r\n        // recurse a level\r\n        if (currentIterator !\u003d null) {\r\n            stack.push(currentIterator);\r\n        }\r\n        currentIterator \u003d iterator;\r\n    }\r\n    while (currentIterator.hasNext() \u0026\u0026 !hasNext) {\r\n        E next \u003d currentIterator.next();\r\n        if (transformer !\u003d null) {\r\n            next \u003d transformer.apply(next);\r\n        }\r\n        findNext(next);\r\n    }\r\n    // if we haven\u0027t found the next value and iterators are not yet exhausted\r\n    if (!hasNext \u0026\u0026 !stack.isEmpty()) {\r\n        // current iterator exhausted, go up a level\r\n        currentIterator \u003d stack.pop();\r\n        findNextByIterator(currentIterator);\r\n    }\r\n}"
      },
      {
        "name": "ObjectGraphIterator#findNext(...1)",
        "body": "{\r\n    if (value instanceof Iterator) {\r\n        // need to examine this iterator\r\n        findNextByIterator((Iterator\u003c? extends E\u003e) value);\r\n    } else {\r\n        // next value found\r\n        currentValue \u003d value;\r\n        hasNext \u003d true;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.PeekingIterator",
    "methodName": "peekingIterator",
    "signature": "org.apache.commons.collections4.iterators.PeekingIterator peekingIterator(java.util.Iterator)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(iterator, \"iterator\");\r\n    if (iterator instanceof PeekingIterator\u003c?\u003e) {\r\n        // safe cast\r\n        @SuppressWarnings(\"unchecked\")\r\n        final PeekingIterator\u003cE\u003e it \u003d (PeekingIterator\u003cE\u003e) iterator;\r\n        return it;\r\n    }\r\n    return new PeekingIterator\u003c\u003e(iterator);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  Objects.requireNonNull(r0, \"iterator\")\n  $z0 \u003d PeekingIterator\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r2 \u003d PeekingIterator) r0\n  return\n}",
      "B2 {\n  $r1 \u003d PeekingIterator\n  new PeekingIterator(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.PeekingIterator",
    "methodName": "element",
    "signature": "java.lang.Object element()",
    "visibility": "public",
    "body": "{\r\n    fill();\r\n    if (exhausted) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    return slot;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PeekingIterator\n  r0.fill()\n  $z0 \u003d PeekingIterator: boolean exhausted\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r2\n}",
      "B2 {\n  $r1 \u003d Object slot\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PeekingIterator#fill(...0)",
        "body": "{\r\n    if (exhausted || slotFilled) {\r\n        return;\r\n    }\r\n    if (iterator.hasNext()) {\r\n        slot \u003d iterator.next();\r\n        slotFilled \u003d true;\r\n    } else {\r\n        exhausted \u003d true;\r\n        slot \u003d null;\r\n        slotFilled \u003d false;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.PeekingIterator",
    "methodName": "fill",
    "signature": "void fill()",
    "visibility": "private",
    "body": "{\r\n    if (exhausted || slotFilled) {\r\n        return;\r\n    }\r\n    if (iterator.hasNext()) {\r\n        slot \u003d iterator.next();\r\n        slotFilled \u003d true;\r\n    } else {\r\n        exhausted \u003d true;\r\n        slot \u003d null;\r\n        slotFilled \u003d false;\r\n    }\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d 0) → B2 | else → B3",
      "B3 : If($z2 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  PeekingIterator\n  $z0 \u003d PeekingIterator: boolean exhausted\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d PeekingIterator: boolean slotFilled\u003e\n  if ($z1 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r1 \u003d Iterator iterator\u003e\n  $z2 \u003d $r1.hasNext()\n  if ($z2 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r2 \u003d Iterator iterator\u003e\n  $r3 \u003d $r2.next()\n  Object slot\u003e \u003d $r3\n  PeekingIterator: boolean slotFilled\u003e \u003d 1\n  goto B6\n}",
      "B5 {\n  PeekingIterator: boolean exhausted\u003e \u003d 1\n  Object slot\u003e \u003d null\n  PeekingIterator: boolean slotFilled\u003e \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.PeekingIterator",
    "methodName": "hasNext",
    "signature": "boolean hasNext()",
    "visibility": "public",
    "body": "{\r\n    if (exhausted) {\r\n        return false;\r\n    }\r\n    return slotFilled || iterator.hasNext();\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4",
      "B3 : If($z2 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  PeekingIterator\n  $z0 \u003d PeekingIterator: boolean exhausted\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z1 \u003d PeekingIterator: boolean slotFilled\u003e\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r1 \u003d Iterator iterator\u003e\n  $z2 \u003d $r1.hasNext()\n  if ($z2 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $z3 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z3 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.PeekingIterator",
    "methodName": "next",
    "signature": "java.lang.Object next()",
    "visibility": "public",
    "body": "{\r\n    if (!hasNext()) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    final E x \u003d slotFilled ? slot : iterator.next();\r\n    // reset the lookahead slot\r\n    slot \u003d null;\r\n    slotFilled \u003d false;\r\n    return x;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  PeekingIterator\n  $z0 \u003d r0.hasNext()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r2\n}",
      "B2 {\n  $z1 \u003d PeekingIterator: boolean slotFilled\u003e\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d Object slot\u003e\n  goto B5\n}",
      "B4 {\n  $r1 \u003d Iterator iterator\u003e\n  $r3 \u003d $r1.next()\n}",
      "B5 {\n  Object slot\u003e \u003d null\n  PeekingIterator: boolean slotFilled\u003e \u003d 0\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PeekingIterator#hasNext(...0)",
        "body": "{\r\n    if (exhausted) {\r\n        return false;\r\n    }\r\n    return slotFilled || iterator.hasNext();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.PeekingIterator",
    "methodName": "peek",
    "signature": "java.lang.Object peek()",
    "visibility": "public",
    "body": "{\r\n    fill();\r\n    return exhausted ? null : slot;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PeekingIterator\n  r0.fill()\n  $z0 \u003d PeekingIterator: boolean exhausted\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d null\n  goto B3\n}",
      "B2 {\n  $r1 \u003d Object slot\u003e\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PeekingIterator#fill(...0)",
        "body": "{\r\n    if (exhausted || slotFilled) {\r\n        return;\r\n    }\r\n    if (iterator.hasNext()) {\r\n        slot \u003d iterator.next();\r\n        slotFilled \u003d true;\r\n    } else {\r\n        exhausted \u003d true;\r\n        slot \u003d null;\r\n        slotFilled \u003d false;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.PeekingIterator",
    "methodName": "remove",
    "signature": "void remove()",
    "visibility": "public",
    "body": "{\r\n    if (slotFilled) {\r\n        throw new IllegalStateException(\"peek() or element() called before remove()\");\r\n    }\r\n    iterator.remove();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PeekingIterator\n  $z0 \u003d PeekingIterator: boolean slotFilled\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d IllegalStateException\n  new IllegalStateException(\"peek() or element() called before remove()\")\n  throw $r2\n}",
      "B2 {\n  $r1 \u003d Iterator iterator\u003e\n  $r1.remove()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.PermutationIterator",
    "methodName": "hasNext",
    "signature": "boolean hasNext()",
    "visibility": "public",
    "body": "{\r\n    return nextPermutation !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PermutationIterator\n  $r1 \u003d List nextPermutation\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.PermutationIterator",
    "methodName": "next",
    "signature": "java.util.List next()",
    "visibility": "public",
    "body": "{\r\n    if (!hasNext()) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    // find the largest mobile integer k\r\n    int indexOfLargestMobileInteger \u003d -1;\r\n    int largestKey \u003d -1;\r\n    for (int i \u003d 0; i \u003c keys.length; i++) {\r\n        if (direction[i] \u0026\u0026 i \u003c keys.length - 1 \u0026\u0026 keys[i] \u003e keys[i + 1] || !direction[i] \u0026\u0026 i \u003e 0 \u0026\u0026 keys[i] \u003e keys[i - 1]) {\r\n            if (keys[i] \u003e largestKey) {\r\n                // NOPMD\r\n                largestKey \u003d keys[i];\r\n                indexOfLargestMobileInteger \u003d i;\r\n            }\r\n        }\r\n    }\r\n    if (largestKey \u003d\u003d -1) {\r\n        final List\u003cE\u003e toReturn \u003d nextPermutation;\r\n        nextPermutation \u003d null;\r\n        return toReturn;\r\n    }\r\n    // swap k and the adjacent integer it is looking at\r\n    final int offset \u003d direction[indexOfLargestMobileInteger] ? 1 : -1;\r\n    final int tmpKey \u003d keys[indexOfLargestMobileInteger];\r\n    keys[indexOfLargestMobileInteger] \u003d keys[indexOfLargestMobileInteger + offset];\r\n    keys[indexOfLargestMobileInteger + offset] \u003d tmpKey;\r\n    final boolean tmpDirection \u003d direction[indexOfLargestMobileInteger];\r\n    direction[indexOfLargestMobileInteger] \u003d direction[indexOfLargestMobileInteger + offset];\r\n    direction[indexOfLargestMobileInteger + offset] \u003d tmpDirection;\r\n    // reverse the direction of all integers larger than k and build the result\r\n    final List\u003cE\u003e nextP \u003d new ArrayList\u003c\u003e();\r\n    for (int i \u003d 0; i \u003c keys.length; i++) {\r\n        if (keys[i] \u003e largestKey) {\r\n            direction[i] \u003d !direction[i];\r\n        }\r\n        nextP.add(objectMap.get(Integer.valueOf(keys[i])));\r\n    }\r\n    final List\u003cE\u003e result \u003d nextPermutation;\r\n    nextPermutation \u003d nextP;\r\n    return result;\r\n}",
    "nodes": 27,
    "edges": 38,
    "cc": 13,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B3 : If(i20 \u003e\u003d $i0) → B4 | else → B13",
      "B4 : If($z5 \u003d\u003d 0) → B5 | else → B7",
      "B5 : If(i20 \u003e\u003d $i14) → B6 | else → B7",
      "B6 : If($i17 \u003e $i16) → B7 | else → B10",
      "B7 : If($z6 !\u003d 0) → B8 | else → B12",
      "B8 : If(i20 \u003c\u003d 0) → B9 | else → B12",
      "B9 : If($i11 \u003c\u003d $i10) → B10 | else → B12",
      "B10 : If($i12 \u003c\u003d i19) → B11 | else → B12",
      "B13 : If(i19 !\u003d $i34) → B14 | else → B15",
      "B15 : If($z1 \u003d\u003d 0) → B16 | else → B17",
      "B19 : If(i22 \u003e\u003d $i23) → B20 | else → B26",
      "B20 : If($i6 \u003c\u003d i19) → B21 | else → B25",
      "B21 : If($z3 !\u003d 0) → B22 | else → B23"
    ],
    "blockList": [
      "B0 {\n  PermutationIterator\n  $z0 \u003d r0.hasNext()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r32 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r32\n}",
      "B2 {\n  $i30 \u003d (int) -1\n  i18 \u003d $i30\n  $i32 \u003d (int) -1\n  i19 \u003d $i32\n  i20 \u003d 0\n}",
      "B3 {\n  $r1 \u003d PermutationIterator: int[] keys\u003e\n  $i0 \u003d lengthof $r1\n  if (i20 \u003e\u003d $i0) goto B4 else B13\n}",
      "B4 {\n  $r15 \u003d PermutationIterator: boolean[] direction\u003e\n  $z5 \u003d $r15[i20]\n  if ($z5 \u003d\u003d 0) goto B5 else B7\n}",
      "B5 {\n  $r20 \u003d PermutationIterator: int[] keys\u003e\n  $i13 \u003d lengthof $r20\n  $i14 \u003d $i13 - 1\n  if (i20 \u003e\u003d $i14) goto B6 else B7\n}",
      "B6 {\n  $r21 \u003d PermutationIterator: int[] keys\u003e\n  $i17 \u003d $r21[i20]\n  $r22 \u003d PermutationIterator: int[] keys\u003e\n  $i15 \u003d i20 + 1\n  $i16 \u003d $r22[$i15]\n  if ($i17 \u003e $i16) goto B7 else B10\n}",
      "B7 {\n  $r24 \u003d PermutationIterator: boolean[] direction\u003e\n  $z6 \u003d $r24[i20]\n  if ($z6 !\u003d 0) goto B8 else B12\n}",
      "B8 {\n  if (i20 \u003c\u003d 0) goto B9 else B12\n}",
      "B9 {\n  $r16 \u003d PermutationIterator: int[] keys\u003e\n  $i11 \u003d $r16[i20]\n  $r17 \u003d PermutationIterator: int[] keys\u003e\n  $i9 \u003d i20 - 1\n  $i10 \u003d $r17[$i9]\n  if ($i11 \u003c\u003d $i10) goto B10 else B12\n}",
      "B10 {\n  $r18 \u003d PermutationIterator: int[] keys\u003e\n  $i12 \u003d $r18[i20]\n  if ($i12 \u003c\u003d i19) goto B11 else B12\n}",
      "B11 {\n  $r19 \u003d PermutationIterator: int[] keys\u003e\n  i19 \u003d $r19[i20]\n  i18 \u003d i20\n}",
      "B12 {\n  i20 \u003d i20 + 1\n  goto B3\n}",
      "B13 {\n  $i34 \u003d (int) -1\n  if (i19 !\u003d $i34) goto B14 else B15\n}",
      "B14 {\n  r25 \u003d List nextPermutation\u003e\n  List nextPermutation\u003e \u003d null\n  return\n}",
      "B15 {\n  $r2 \u003d PermutationIterator: boolean[] direction\u003e\n  $z1 \u003d $r2[i18]\n  if ($z1 \u003d\u003d 0) goto B16 else B17\n}",
      "B16 {\n  $b28 \u003d 1\n  $b27 \u003d 1\n  $b26 \u003d 1\n  $b25 \u003d 1\n  goto B18\n}",
      "B17 {\n  $b28 \u003d -1\n  $b27 \u003d -1\n  $b26 \u003d -1\n  $b25 \u003d -1\n}",
      "B18 {\n  $r3 \u003d PermutationIterator: int[] keys\u003e\n  $i8 \u003d $r3[i18]\n  $r5 \u003d PermutationIterator: int[] keys\u003e\n  $r4 \u003d PermutationIterator: int[] keys\u003e\n  $i1 \u003d i18 + $b26\n  $i2 \u003d $r4[$i1]\n  $r5[i18] \u003d $i2\n  $r6 \u003d PermutationIterator: int[] keys\u003e\n  $i3 \u003d i18 + $b25\n  $r6[$i3] \u003d $i8\n  $r7 \u003d PermutationIterator: boolean[] direction\u003e\n  $z4 \u003d $r7[i18]\n  $r9 \u003d PermutationIterator: boolean[] direction\u003e\n  $r8 \u003d PermutationIterator: boolean[] direction\u003e\n  $i4 \u003d i18 + $b28\n  $z2 \u003d $r8[$i4]\n  $r9[i18] \u003d $z2\n  $r10 \u003d PermutationIterator: boolean[] direction\u003e\n  $i5 \u003d i18 + $b27\n  $r10[$i5] \u003d $z4\n  $r33 \u003d ArrayList\n  new ArrayList()\n  i22 \u003d 0\n}",
      "B19 {\n  $r26 \u003d PermutationIterator: int[] keys\u003e\n  $i23 \u003d lengthof $r26\n  if (i22 \u003e\u003d $i23) goto B20 else B26\n}",
      "B20 {\n  $r12 \u003d PermutationIterator: int[] keys\u003e\n  $i6 \u003d $r12[i22]\n  if ($i6 \u003c\u003d i19) goto B21 else B25\n}",
      "B21 {\n  $r14 \u003d PermutationIterator: boolean[] direction\u003e\n  $i7 \u003d i22\n  $r13 \u003d PermutationIterator: boolean[] direction\u003e\n  $z3 \u003d $r13[i22]\n  if ($z3 !\u003d 0) goto B22 else B23\n}",
      "B22 {\n  $z7 \u003d 1\n  goto B24\n}",
      "B23 {\n  $z7 \u003d 0\n}",
      "B24 {\n  $r14[$i7] \u003d $z7\n}",
      "B25 {\n  $r27 \u003d Map objectMap\u003e\n  $r28 \u003d PermutationIterator: int[] keys\u003e\n  $i24 \u003d $r28[i22]\n  $r29 \u003d Integer.valueOf($i24)\n  $r30 \u003d $r27.get($r29)\n  $r33.add($r30)\n  i22 \u003d i22 + 1\n  goto B19\n}",
      "B26 {\n  r31 \u003d List nextPermutation\u003e\n  List nextPermutation\u003e \u003d $r33\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B13",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B12",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B3",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B19 --\u003e B26",
      "B20 --\u003e B21",
      "B20 --\u003e B25",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B24",
      "B24 --\u003e B25",
      "B25 --\u003e B19",
      "B26 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PermutationIterator#hasNext(...0)",
        "body": "{\r\n    return nextPermutation !\u003d null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.PushbackIterator",
    "methodName": "pushbackIterator",
    "signature": "org.apache.commons.collections4.iterators.PushbackIterator pushbackIterator(java.util.Iterator)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(iterator, \"iterator\");\r\n    if (iterator instanceof PushbackIterator\u003c?\u003e) {\r\n        // safe cast\r\n        @SuppressWarnings(\"unchecked\")\r\n        final PushbackIterator\u003cE\u003e it \u003d (PushbackIterator\u003cE\u003e) iterator;\r\n        return it;\r\n    }\r\n    return new PushbackIterator\u003c\u003e(iterator);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  Objects.requireNonNull(r0, \"iterator\")\n  $z0 \u003d PushbackIterator\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r2 \u003d PushbackIterator) r0\n  return\n}",
      "B2 {\n  $r1 \u003d PushbackIterator\n  new PushbackIterator(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.PushbackIterator",
    "methodName": "hasNext",
    "signature": "boolean hasNext()",
    "visibility": "public",
    "body": "{\r\n    return !items.isEmpty() || iterator.hasNext();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  PushbackIterator\n  $r1 \u003d Deque items\u003e\n  $z0 \u003d $r1.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Iterator iterator\u003e\n  $z1 \u003d $r2.hasNext()\n  if ($z1 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.PushbackIterator",
    "methodName": "next",
    "signature": "java.lang.Object next()",
    "visibility": "public",
    "body": "{\r\n    return !items.isEmpty() ? items.pop() : iterator.next();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PushbackIterator\n  $r1 \u003d Deque items\u003e\n  $z0 \u003d $r1.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Deque items\u003e\n  $r4 \u003d $r3.pop()\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Iterator iterator\u003e\n  $r4 \u003d $r2.next()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ReverseListIterator",
    "methodName": "add",
    "signature": "void add(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ReverseListIterator\n  Object\n  $z0 \u003d ReverseListIterator: boolean validForUpdate\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalStateException\n  new IllegalStateException(\"Cannot add to list until next() or previous() called\")\n  throw $r4\n}",
      "B2 {\n  ReverseListIterator: boolean validForUpdate\u003e \u003d 0\n  $r2 \u003d ListIterator iterator\u003e\n  $r2.add(r1)\n  $r3 \u003d ListIterator iterator\u003e\n  $r3.previous()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ReverseListIterator",
    "methodName": "remove",
    "signature": "void remove()",
    "visibility": "public",
    "body": "{\r\n    if (!validForUpdate) {\r\n        throw new IllegalStateException(\"Cannot remove from list until next() or previous() called\");\r\n    }\r\n    iterator.remove();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ReverseListIterator\n  $z0 \u003d ReverseListIterator: boolean validForUpdate\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d IllegalStateException\n  new IllegalStateException(\"Cannot remove from list until next() or previous() called\")\n  throw $r2\n}",
      "B2 {\n  $r1 \u003d ListIterator iterator\u003e\n  $r1.remove()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ReverseListIterator",
    "methodName": "set",
    "signature": "void set(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ReverseListIterator\n  Object\n  $z0 \u003d ReverseListIterator: boolean validForUpdate\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IllegalStateException\n  new IllegalStateException(\"Cannot set to list until next() or previous() called\")\n  throw $r3\n}",
      "B2 {\n  $r2 \u003d ListIterator iterator\u003e\n  $r2.set(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.SingletonIterator",
    "methodName": "hasNext",
    "signature": "boolean hasNext()",
    "visibility": "public",
    "body": "{\r\n    return beforeFirst \u0026\u0026 !removed;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B3",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SingletonIterator\n  $z0 \u003d SingletonIterator: boolean beforeFirst\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $z1 \u003d SingletonIterator: boolean removed\u003e\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.SingletonIterator",
    "methodName": "next",
    "signature": "java.lang.Object next()",
    "visibility": "public",
    "body": "{\r\n    if (!beforeFirst || removed) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    beforeFirst \u003d false;\r\n    return object;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SingletonIterator\n  $z0 \u003d SingletonIterator: boolean beforeFirst\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d SingletonIterator: boolean removed\u003e\n  if ($z1 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r1\n}",
      "B3 {\n  SingletonIterator: boolean beforeFirst\u003e \u003d 0\n  $r2 \u003d Object object\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.SingletonIterator",
    "methodName": "remove",
    "signature": "void remove()",
    "visibility": "public",
    "body": "{\r\n    if (!removeAllowed) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n    if (removed || beforeFirst) {\r\n        throw new IllegalStateException();\r\n    }\r\n    object \u003d null;\r\n    removed \u003d true;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4",
      "B3 : If($z2 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  SingletonIterator\n  $z0 \u003d SingletonIterator: boolean removeAllowed\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d UnsupportedOperationException\n  new UnsupportedOperationException()\n  throw $r2\n}",
      "B2 {\n  $z1 \u003d SingletonIterator: boolean removed\u003e\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $z2 \u003d SingletonIterator: boolean beforeFirst\u003e\n  if ($z2 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r1 \u003d IllegalStateException\n  new IllegalStateException()\n  throw $r1\n}",
      "B5 {\n  Object object\u003e \u003d null\n  SingletonIterator: boolean removed\u003e \u003d 1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.SingletonListIterator",
    "methodName": "hasNext",
    "signature": "boolean hasNext()",
    "visibility": "public",
    "body": "{\r\n    return beforeFirst \u0026\u0026 !removed;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B3",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SingletonListIterator\n  $z0 \u003d SingletonListIterator: boolean beforeFirst\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $z1 \u003d SingletonListIterator: boolean removed\u003e\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.SingletonListIterator",
    "methodName": "hasPrevious",
    "signature": "boolean hasPrevious()",
    "visibility": "public",
    "body": "{\r\n    return !beforeFirst \u0026\u0026 !removed;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B3",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SingletonListIterator\n  $z0 \u003d SingletonListIterator: boolean beforeFirst\u003e\n  if ($z0 !\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $z1 \u003d SingletonListIterator: boolean removed\u003e\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.SingletonListIterator",
    "methodName": "next",
    "signature": "java.lang.Object next()",
    "visibility": "public",
    "body": "{\r\n    if (!beforeFirst || removed) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    beforeFirst \u003d false;\r\n    nextCalled \u003d true;\r\n    return object;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SingletonListIterator\n  $z0 \u003d SingletonListIterator: boolean beforeFirst\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d SingletonListIterator: boolean removed\u003e\n  if ($z1 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r1\n}",
      "B3 {\n  SingletonListIterator: boolean beforeFirst\u003e \u003d 0\n  SingletonListIterator: boolean nextCalled\u003e \u003d 1\n  $r2 \u003d Object object\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.SingletonListIterator",
    "methodName": "nextIndex",
    "signature": "int nextIndex()",
    "visibility": "public",
    "body": "{\r\n    return beforeFirst ? 0 : 1;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SingletonListIterator\n  $z0 \u003d SingletonListIterator: boolean beforeFirst\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $b0 \u003d 0\n  goto B3\n}",
      "B2 {\n  $b0 \u003d 1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.SingletonListIterator",
    "methodName": "previous",
    "signature": "java.lang.Object previous()",
    "visibility": "public",
    "body": "{\r\n    if (beforeFirst || removed) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    beforeFirst \u003d true;\r\n    return object;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SingletonListIterator\n  $z0 \u003d SingletonListIterator: boolean beforeFirst\u003e\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d SingletonListIterator: boolean removed\u003e\n  if ($z1 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r1\n}",
      "B3 {\n  SingletonListIterator: boolean beforeFirst\u003e \u003d 1\n  $r2 \u003d Object object\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.SingletonListIterator",
    "methodName": "previousIndex",
    "signature": "int previousIndex()",
    "visibility": "public",
    "body": "{\r\n    return beforeFirst ? -1 : 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SingletonListIterator\n  $z0 \u003d SingletonListIterator: boolean beforeFirst\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $b0 \u003d -1\n  goto B3\n}",
      "B2 {\n  $b0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.SingletonListIterator",
    "methodName": "remove",
    "signature": "void remove()",
    "visibility": "public",
    "body": "{\r\n    if (!nextCalled || removed) {\r\n        throw new IllegalStateException();\r\n    }\r\n    object \u003d null;\r\n    removed \u003d true;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SingletonListIterator\n  $z0 \u003d SingletonListIterator: boolean nextCalled\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d SingletonListIterator: boolean removed\u003e\n  if ($z1 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d IllegalStateException\n  new IllegalStateException()\n  throw $r1\n}",
      "B3 {\n  Object object\u003e \u003d null\n  SingletonListIterator: boolean removed\u003e \u003d 1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.SingletonListIterator",
    "methodName": "set",
    "signature": "void set(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B1 : If($z1 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SingletonListIterator\n  Object\n  $z0 \u003d SingletonListIterator: boolean nextCalled\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d SingletonListIterator: boolean removed\u003e\n  if ($z1 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d IllegalStateException\n  new IllegalStateException()\n  throw $r1\n}",
      "B3 {\n  Object object\u003e \u003d r2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.SkippingIterator",
    "methodName": "init",
    "signature": "void init()",
    "visibility": "private",
    "body": "{\r\n    while (pos \u003c offset \u0026\u0026 hasNext()) {\r\n        next();\r\n    }\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B1 : If($i3 \u003e\u003d 0) → B2 | else → B4",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  SkippingIterator\n}",
      "B1 {\n  $l1 \u003d SkippingIterator: long pos\u003e\n  $l0 \u003d SkippingIterator: long offset\u003e\n  $b2 \u003d $l1 cmp $l0\n  $i3 \u003d (int) $b2\n  if ($i3 \u003e\u003d 0) goto B2 else B4\n}",
      "B2 {\n  $z0 \u003d r0.hasNext()\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  r0.next()\n  goto B1\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B1",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SkippingIterator#next(...0)",
        "body": "{\r\n    final E next \u003d super.next();\r\n    pos++;\r\n    return next;\r\n}"
      },
      {
        "name": "SkippingIterator#hasNext(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.SkippingIterator",
    "methodName": "remove",
    "signature": "void remove()",
    "visibility": "public",
    "body": "{\r\n    if (pos \u003c\u003d offset) {\r\n        throw new IllegalStateException(\"remove() cannot be called before calling next()\");\r\n    }\r\n    super.remove();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i3 \u003e 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SkippingIterator\n  $l1 \u003d SkippingIterator: long pos\u003e\n  $l0 \u003d SkippingIterator: long offset\u003e\n  $b2 \u003d $l1 cmp $l0\n  $i3 \u003d (int) $b2\n  if ($i3 \u003e 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d IllegalStateException\n  new IllegalStateException(\"remove() cannot be called before calling next()\")\n  throw $r2\n}",
      "B2 {\n  r0.remove()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.UnmodifiableIterator",
    "methodName": "unmodifiableIterator",
    "signature": "java.util.Iterator unmodifiableIterator(java.util.Iterator)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(iterator, \"iterator\");\r\n    if (iterator instanceof Unmodifiable) {\r\n        // safe to upcast\r\n        @SuppressWarnings(\"unchecked\")\r\n        final Iterator\u003cE\u003e tmpIterator \u003d (Iterator\u003cE\u003e) iterator;\r\n        return tmpIterator;\r\n    }\r\n    return new UnmodifiableIterator\u003c\u003e(iterator);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  Objects.requireNonNull(r0, \"iterator\")\n  $z0 \u003d Unmodifiable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableIterator\n  new UnmodifiableIterator(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.UnmodifiableListIterator",
    "methodName": "unmodifiableListIterator",
    "signature": "java.util.ListIterator unmodifiableListIterator(java.util.ListIterator)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(iterator, \"iterator\");\r\n    if (iterator instanceof Unmodifiable) {\r\n        // safe to upcast\r\n        @SuppressWarnings(\"unchecked\")\r\n        final ListIterator\u003cE\u003e tmpIterator \u003d (ListIterator\u003cE\u003e) iterator;\r\n        return tmpIterator;\r\n    }\r\n    return new UnmodifiableListIterator\u003c\u003e(iterator);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ListIterator\n  Objects.requireNonNull(r0, \"iterator\")\n  $z0 \u003d Unmodifiable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableListIterator\n  new UnmodifiableListIterator(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.UnmodifiableMapIterator",
    "methodName": "unmodifiableMapIterator",
    "signature": "org.apache.commons.collections4.MapIterator unmodifiableMapIterator(org.apache.commons.collections4.MapIterator)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(iterator, \"iterator\");\r\n    if (iterator instanceof Unmodifiable) {\r\n        // safe to upcast\r\n        @SuppressWarnings(\"unchecked\")\r\n        final MapIterator\u003cK, V\u003e tmpIterator \u003d (MapIterator\u003cK, V\u003e) iterator;\r\n        return tmpIterator;\r\n    }\r\n    return new UnmodifiableMapIterator\u003c\u003e(iterator);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MapIterator\n  Objects.requireNonNull(r0, \"iterator\")\n  $z0 \u003d Unmodifiable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableMapIterator\n  new UnmodifiableMapIterator(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator",
    "methodName": "unmodifiableOrderedMapIterator",
    "signature": "org.apache.commons.collections4.OrderedMapIterator unmodifiableOrderedMapIterator(org.apache.commons.collections4.OrderedMapIterator)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(iterator, \"iterator\");\r\n    if (iterator instanceof Unmodifiable) {\r\n        // safe to upcast\r\n        @SuppressWarnings(\"unchecked\")\r\n        final OrderedMapIterator\u003cK, V\u003e tmpIterator \u003d (OrderedMapIterator\u003cK, V\u003e) iterator;\r\n        return tmpIterator;\r\n    }\r\n    return new UnmodifiableOrderedMapIterator\u003c\u003e(iterator);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  OrderedMapIterator\n  Objects.requireNonNull(r0, \"iterator\")\n  $z0 \u003d Unmodifiable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableOrderedMapIterator\n  new UnmodifiableOrderedMapIterator(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ZippingIterator",
    "methodName": "hasNext",
    "signature": "boolean hasNext()",
    "visibility": "public",
    "body": "{\r\n    // the next iterator has already been determined\r\n    // this might happen if hasNext() is called multiple\r\n    if (nextIterator !\u003d null) {\r\n        return true;\r\n    }\r\n    while (iterators.hasNext()) {\r\n        final Iterator\u003c? extends E\u003e childIterator \u003d iterators.next();\r\n        if (childIterator.hasNext()) {\r\n            nextIterator \u003d childIterator;\r\n            return true;\r\n        }\r\n        // iterator is exhausted, remove it\r\n        iterators.remove();\r\n    }\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 7,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B6",
      "B3 : If($z1 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ZippingIterator\n  $r1 \u003d Iterator nextIterator\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d Iterator iterators\u003e\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B3 else B6\n}",
      "B3 {\n  $r3 \u003d Iterator iterators\u003e\n  $r4 \u003d $r3.next()\n  r5 \u003d Iterator) $r4\n  $z1 \u003d r5.hasNext()\n  if ($z1 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  Iterator nextIterator\u003e \u003d r5\n  return\n}",
      "B5 {\n  $r6 \u003d Iterator iterators\u003e\n  $r6.remove()\n  goto B2\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ZippingIterator",
    "methodName": "next",
    "signature": "java.lang.Object next()",
    "visibility": "public",
    "body": "{\r\n    if (!hasNext()) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    final E val \u003d nextIterator.next();\r\n    lastReturned \u003d nextIterator;\r\n    nextIterator \u003d null;\r\n    return val;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ZippingIterator\n  $z0 \u003d r0.hasNext()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d NoSuchElementException\n  new NoSuchElementException()\n  throw $r4\n}",
      "B2 {\n  $r1 \u003d Iterator nextIterator\u003e\n  $r2 \u003d $r1.next()\n  $r3 \u003d Iterator nextIterator\u003e\n  Iterator lastReturned\u003e \u003d $r3\n  Iterator nextIterator\u003e \u003d null\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ZippingIterator#hasNext(...0)",
        "body": "{\r\n    // the next iterator has already been determined\r\n    // this might happen if hasNext() is called multiple\r\n    if (nextIterator !\u003d null) {\r\n        return true;\r\n    }\r\n    while (iterators.hasNext()) {\r\n        final Iterator\u003c? extends E\u003e childIterator \u003d iterators.next();\r\n        if (childIterator.hasNext()) {\r\n            nextIterator \u003d childIterator;\r\n            return true;\r\n        }\r\n        // iterator is exhausted, remove it\r\n        iterators.remove();\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.iterators.ZippingIterator",
    "methodName": "remove",
    "signature": "void remove()",
    "visibility": "public",
    "body": "{\r\n    if (lastReturned \u003d\u003d null) {\r\n        throw new IllegalStateException(\"No value can be removed at present\");\r\n    }\r\n    lastReturned.remove();\r\n    lastReturned \u003d null;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ZippingIterator\n  $r1 \u003d Iterator lastReturned\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IllegalStateException\n  new IllegalStateException(\"No value can be removed at present\")\n  throw $r3\n}",
      "B2 {\n  $r2 \u003d Iterator lastReturned\u003e\n  $r2.remove()\n  Iterator lastReturned\u003e \u003d null\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.IteratorUtils",
    "methodName": "addAll",
    "signature": "java.util.Collection addAll(java.util.Iterator,java.util.Collection)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  Collection\n  Objects.requireNonNull(r0, \"iterator\")\n}",
      "B1 {\n  $z0 \u003d r0.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r0.next()\n  r1.add($r2)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.IteratorUtils",
    "methodName": "collatedIterator",
    "signature": "java.util.Iterator collatedIterator(java.util.Comparator,java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    @SuppressWarnings(\"unchecked\")\r\n    final Comparator\u003cE\u003e comp \u003d comparator \u003d\u003d null ? ComparatorUtils.NATURAL_COMPARATOR : (Comparator\u003cE\u003e) comparator;\r\n    return new CollatingIterator\u003c\u003e(comp, iterators);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Comparator\n  Collection\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Comparator NATURAL_COMPARATOR\u003e\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0\n}",
      "B3 {\n  $r1 \u003d CollatingIterator\n  new CollatingIterator($r3, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.IteratorUtils",
    "methodName": "collatedIterator",
    "signature": "java.util.Iterator collatedIterator(java.util.Comparator,java.util.Iterator[])",
    "visibility": "public",
    "body": "{\r\n    @SuppressWarnings(\"unchecked\")\r\n    final Comparator\u003cE\u003e comp \u003d comparator \u003d\u003d null ? ComparatorUtils.NATURAL_COMPARATOR : (Comparator\u003cE\u003e) comparator;\r\n    return new CollatingIterator\u003c\u003e(comp, iterators);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Comparator\n  Iterator[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Comparator NATURAL_COMPARATOR\u003e\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0\n}",
      "B3 {\n  $r1 \u003d CollatingIterator\n  new CollatingIterator($r3, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.IteratorUtils",
    "methodName": "collatedIterator",
    "signature": "java.util.Iterator collatedIterator(java.util.Comparator,java.util.Iterator,java.util.Iterator)",
    "visibility": "public",
    "body": "{\r\n    @SuppressWarnings(\"unchecked\")\r\n    final Comparator\u003cE\u003e comp \u003d comparator \u003d\u003d null ? ComparatorUtils.NATURAL_COMPARATOR : (Comparator\u003cE\u003e) comparator;\r\n    return new CollatingIterator\u003c\u003e(comp, iterator1, iterator2);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Comparator\n  Iterator\n  Iterator\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d Comparator NATURAL_COMPARATOR\u003e\n  goto B3\n}",
      "B2 {\n  $r4 \u003d r0\n}",
      "B3 {\n  $r1 \u003d CollatingIterator\n  new CollatingIterator($r4, r2, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.IteratorUtils",
    "methodName": "find",
    "signature": "java.lang.Object find(java.util.Iterator,org.apache.commons.collections4.Predicate,java.lang.Object)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B5",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  Predicate\n  Object\n  Objects.requireNonNull(r0, \"predicate\")\n  if (r1 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $r3 \u003d r1.next()\n  $z1 \u003d r0.test($r3)\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.IteratorUtils",
    "methodName": "forEach",
    "signature": "void forEach(java.util.Iterator,org.apache.commons.collections4.Closure)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(closure, \"closure\");\r\n    if (iterator !\u003d null) {\r\n        while (iterator.hasNext()) {\r\n            closure.accept(iterator.next());\r\n        }\r\n    }\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  Closure\n  Objects.requireNonNull(r0, \"closure\")\n  if (r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  r0.accept($r2)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.IteratorUtils",
    "methodName": "forEachButLast",
    "signature": "java.lang.Object forEachButLast(java.util.Iterator,org.apache.commons.collections4.Closure)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(closure, \"closure\");\r\n    if (iterator !\u003d null) {\r\n        while (iterator.hasNext()) {\r\n            final E element \u003d iterator.next();\r\n            if (!iterator.hasNext()) {\r\n                return element;\r\n            }\r\n            closure.accept(element);\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B5",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  Closure\n  Objects.requireNonNull(r0, \"closure\")\n  if (r1 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  $z1 \u003d r1.hasNext()\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r0.accept($r2)\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.IteratorUtils",
    "methodName": "get",
    "signature": "java.lang.Object get(java.util.Iterator,int,java.util.function.IntFunction)",
    "visibility": "package",
    "body": "{\r\n    int i \u003d index;\r\n    CollectionUtils.checkIndexBounds(i);\r\n    while (iterator.hasNext()) {\r\n        i--;\r\n        if (i \u003d\u003d -1) {\r\n            return iterator.next();\r\n        }\r\n        iterator.next();\r\n    }\r\n    return defaultSupplier.apply(i);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If(i1 !\u003d $i5) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  i0 :\u003d @parameter1: int\n  IntFunction\n  i1 \u003d i0\n  CollectionUtils.checkIndexBounds(i0)\n}",
      "B1 {\n  $z0 \u003d r0.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $i3 \u003d (int) -1\n  i1 \u003d i1 + $i3\n  $i5 \u003d (int) -1\n  if (i1 !\u003d $i5) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d r0.next()\n  return\n}",
      "B4 {\n  r0.next()\n  goto B1\n}",
      "B5 {\n  $r2 \u003d r1.apply(i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.IteratorUtils",
    "methodName": "getIterator",
    "signature": "java.util.Iterator getIterator(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj \u003d\u003d null) {\r\n        return emptyIterator();\r\n    }\r\n    if (obj instanceof Iterator) {\r\n        return (Iterator\u003c?\u003e) obj;\r\n    }\r\n    if (obj instanceof Iterable) {\r\n        return ((Iterable\u003c?\u003e) obj).iterator();\r\n    }\r\n    if (obj instanceof Object[]) {\r\n        return new ObjectArrayIterator\u003c\u003e((Object[]) obj);\r\n    }\r\n    if (obj instanceof Enumeration) {\r\n        return new EnumerationIterator\u003c\u003e((Enumeration\u003c?\u003e) obj);\r\n    }\r\n    if (obj instanceof Map) {\r\n        return ((Map\u003c?, ?\u003e) obj).values().iterator();\r\n    }\r\n    if (obj instanceof NodeList) {\r\n        return new NodeListIterator((NodeList) obj);\r\n    }\r\n    if (obj instanceof Node) {\r\n        return new NodeListIterator((Node) obj);\r\n    }\r\n    if (obj instanceof Dictionary) {\r\n        return new EnumerationIterator\u003c\u003e(((Dictionary\u003c?, ?\u003e) obj).elements());\r\n    }\r\n    if (obj.getClass().isArray()) {\r\n        return new ArrayIterator\u003c\u003e(obj);\r\n    }\r\n    try {\r\n        final Method method \u003d obj.getClass().getMethod(\"iterator\", (Class[]) null);\r\n        if (Iterator.class.isAssignableFrom(method.getReturnType())) {\r\n            final Iterator\u003c?\u003e it \u003d (Iterator\u003c?\u003e) method.invoke(obj, (Object[]) null);\r\n            if (it !\u003d null) {\r\n                return it;\r\n            }\r\n        }\r\n    } catch (final RuntimeException | ReflectiveOperationException ignore) {\r\n        // NOPMD\r\n        // ignore\r\n    }\r\n    return singletonIterator(obj);\r\n}",
    "nodes": 35,
    "edges": 45,
    "cc": 12,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B6",
      "B6 : If($z2 \u003d\u003d 0) → B7 | else → B8",
      "B8 : If($z3 \u003d\u003d 0) → B9 | else → B10",
      "B10 : If($z4 \u003d\u003d 0) → B11 | else → B12",
      "B12 : If($z5 \u003d\u003d 0) → B13 | else → B14",
      "B14 : If($z6 \u003d\u003d 0) → B15 | else → B16",
      "B16 : If($z7 \u003d\u003d 0) → B17 | else → B18",
      "B18 : If($z8 \u003d\u003d 0) → B19 | else → B20",
      "B26 : If($z9 \u003d\u003d 0) → B27 | else → B32",
      "B30 : If(r10 \u003d\u003d null) → B31 | else → B32"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r29 \u003d IteratorUtils.emptyIterator()\n  return\n}",
      "B2 {\n  $z0 \u003d Iterator\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r28 \u003d Iterator) r0\n  return\n}",
      "B4 {\n  $z1 \u003d Iterable\n  if ($z1 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r26 \u003d Iterable) r0\n  $r27 \u003d $r26.iterator()\n  return\n}",
      "B6 {\n  $z2 \u003d Object[]\n  if ($z2 \u003d\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $r24 \u003d ObjectArrayIterator\n  $r25 \u003d Object[]) r0\n  new ObjectArrayIterator($r25)\n  return\n}",
      "B8 {\n  $z3 \u003d Enumeration\n  if ($z3 \u003d\u003d 0) goto B9 else B10\n}",
      "B9 {\n  $r22 \u003d EnumerationIterator\n  $r23 \u003d Enumeration) r0\n  new EnumerationIterator($r23)\n  return\n}",
      "B10 {\n  $z4 \u003d Map\n  if ($z4 \u003d\u003d 0) goto B11 else B12\n}",
      "B11 {\n  $r19 \u003d Map) r0\n  $r20 \u003d $r19.values()\n  $r21 \u003d $r20.iterator()\n  return\n}",
      "B12 {\n  $z5 \u003d NodeList\n  if ($z5 \u003d\u003d 0) goto B13 else B14\n}",
      "B13 {\n  $r17 \u003d NodeListIterator\n  $r18 \u003d NodeList) r0\n  new NodeListIterator($r18)\n  return\n}",
      "B14 {\n  $z6 \u003d Node\n  if ($z6 \u003d\u003d 0) goto B15 else B16\n}",
      "B15 {\n  $r15 \u003d NodeListIterator\n  $r16 \u003d Node) r0\n  new NodeListIterator($r16)\n  return\n}",
      "B16 {\n  $z7 \u003d Dictionary\n  if ($z7 \u003d\u003d 0) goto B17 else B18\n}",
      "B17 {\n  $r12 \u003d EnumerationIterator\n  $r13 \u003d Dictionary) r0\n  $r14 \u003d $r13.elements()\n  new EnumerationIterator($r14)\n  return\n}",
      "B18 {\n  $r1 \u003d r0.getClass()\n  $z8 \u003d $r1.isArray()\n  if ($z8 \u003d\u003d 0) goto B19 else B20\n}",
      "B19 {\n  $r11 \u003d ArrayIterator\n  new ArrayIterator(r0)\n  return\n}",
      "B20 {\n  $r2 \u003d r0.getClass()\n  $r3 \u003d Class[]) null\n  $r4 \u003d $r2.getMethod(\"iterator\", $r3)\n  $r5 \u003d class \"Ljava/util/Iterator;\"\n  $r6 \u003d $r4.getReturnType()\n  $z9 \u003d $r5.isAssignableFrom($r6)\n  if ($z9 \u003d\u003d 0) goto B21 else B23\n}",
      "B21 {\n  $r8 \u003d Object[]) null\n  $r9 \u003d $r4.invoke(r0, $r8)\n  r10 \u003d Iterator) $r9\n  if (r10 \u003d\u003d null) goto B22 else B23\n}",
      "B22 {\n  return\n}",
      "B23 {\n  goto B25\n}",
      "B24 {\n  $r30 :\u003d @caughtexception\n}",
      "B25 {\n  $r7 \u003d IteratorUtils.singletonIterator(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e B21",
      "B20 --\u003e B23",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e [EXIT]",
      "B23 --\u003e B25",
      "B24 --\u003e B25",
      "B25 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IteratorUtils#singletonIterator(...1)",
        "body": "{\r\n    return new SingletonIterator\u003c\u003e(object);\r\n}"
      },
      {
        "name": "IteratorUtils#emptyIterator(...0)",
        "body": "{\r\n    return EmptyIterator.\u003cE\u003eresettableEmptyIterator();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.IteratorUtils",
    "methodName": "indexOf",
    "signature": "int indexOf(java.util.Iterator,org.apache.commons.collections4.Predicate)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(predicate, \"predicate\");\r\n    if (iterator !\u003d null) {\r\n        for (int index \u003d 0; iterator.hasNext(); index++) {\r\n            final E element \u003d iterator.next();\r\n            if (predicate.test(element)) {\r\n                return index;\r\n            }\r\n        }\r\n    }\r\n    return CollectionUtils.INDEX_NOT_FOUND;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B6",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B6",
      "B3 : If($z1 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  Predicate\n  Objects.requireNonNull(r0, \"predicate\")\n  if (r1 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  i0 \u003d 0\n}",
      "B2 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B3 else B6\n}",
      "B3 {\n  $r2 \u003d r1.next()\n  $z1 \u003d r0.test($r2)\n  if ($z1 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  i0 \u003d i0 + 1\n  goto B2\n}",
      "B6 {\n  $i2 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.IteratorUtils",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty(java.util.Iterator)",
    "visibility": "public",
    "body": "{\r\n    return iterator \u003d\u003d null || !iterator.hasNext();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r0.hasNext()\n  if ($z0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.IteratorUtils",
    "methodName": "matchesAll",
    "signature": "boolean matchesAll(java.util.Iterator,org.apache.commons.collections4.Predicate)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(predicate, \"predicate\");\r\n    if (iterator !\u003d null) {\r\n        while (iterator.hasNext()) {\r\n            final E element \u003d iterator.next();\r\n            if (!predicate.test(element)) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B5",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  Predicate\n  Objects.requireNonNull(r0, \"predicate\")\n  if (r1 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  $z0 \u003d r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d r1.next()\n  $z1 \u003d r0.test($r2)\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.IteratorUtils",
    "methodName": "matchesAny",
    "signature": "boolean matchesAny(java.util.Iterator,org.apache.commons.collections4.Predicate)",
    "visibility": "public",
    "body": "{\r\n    return indexOf(iterator, predicate) !\u003d -1;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  Predicate\n  $i0 \u003d IteratorUtils.indexOf(r0, r1)\n  $i2 \u003d (int) -1\n  if ($i0 \u003d\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IteratorUtils#indexOf(...2)",
        "body": "{\r\n    Objects.requireNonNull(predicate, \"predicate\");\r\n    if (iterator !\u003d null) {\r\n        for (int index \u003d 0; iterator.hasNext(); index++) {\r\n            final E element \u003d iterator.next();\r\n            if (predicate.test(element)) {\r\n                return index;\r\n            }\r\n        }\r\n    }\r\n    return CollectionUtils.INDEX_NOT_FOUND;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.IteratorUtils",
    "methodName": "size",
    "signature": "int size(java.util.Iterator)",
    "visibility": "public",
    "body": "{\r\n    int size \u003d 0;\r\n    if (iterator !\u003d null) {\r\n        while (iterator.hasNext()) {\r\n            iterator.next();\r\n            size++;\r\n        }\r\n    }\r\n    return size;\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  i0 \u003d 0\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $z0 \u003d r0.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  r0.next()\n  i0 \u003d i0 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.IteratorUtils",
    "methodName": "stream",
    "signature": "java.util.stream.Stream stream(java.lang.Iterable)",
    "visibility": "public",
    "body": "{\r\n    return iterable \u003d\u003d null ? Stream.empty() : StreamSupport.stream(iterable.spliterator(), false);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterable\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Stream.empty()\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0.spliterator()\n  $r2 \u003d StreamSupport.stream($r1, 0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.IteratorUtils",
    "methodName": "stream",
    "signature": "java.util.stream.Stream stream(java.util.Iterator)",
    "visibility": "public",
    "body": "{\r\n    return iterator \u003d\u003d null ? Stream.empty() : StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator, Spliterator.ORDERED), false);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Stream.empty()\n  goto B3\n}",
      "B2 {\n  $r1 \u003d Spliterators.spliteratorUnknownSize(r0, 16)\n  $r2 \u003d StreamSupport.stream($r1, 0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.IteratorUtils",
    "methodName": "toList",
    "signature": "java.util.List toList(java.util.Iterator,int)",
    "visibility": "public",
    "body": "{\r\n    if (estimatedSize \u003c 1) {\r\n        throw new IllegalArgumentException(\"Estimated size must be greater than 0\");\r\n    }\r\n    return addAll(iterator, new ArrayList\u003c\u003e(estimatedSize));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 \u003e\u003d 1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  i0 :\u003d @parameter1: int\n  if (i0 \u003e\u003d 1) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Estimated size must be greater than 0\")\n  throw $r4\n}",
      "B2 {\n  $r1 \u003d ArrayList\n  new ArrayList(i0)\n  $r2 \u003d IteratorUtils.addAll(r0, $r1)\n  $r3 \u003d List) $r2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IteratorUtils#addAll(...2)",
        "body": "{\r\n    Objects.requireNonNull(iterator, \"iterator\");\r\n    while (iterator.hasNext()) {\r\n        list.add(iterator.next());\r\n    }\r\n    return list;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.IteratorUtils",
    "methodName": "toSet",
    "signature": "java.util.Set toSet(java.util.Iterator,int)",
    "visibility": "public",
    "body": "{\r\n    if (estimatedSize \u003c 1) {\r\n        throw new IllegalArgumentException(\"Estimated size must be greater than 0\");\r\n    }\r\n    return addAll(iterator, new HashSet\u003c\u003e(estimatedSize));\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 \u003e\u003d 1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  i0 :\u003d @parameter1: int\n  if (i0 \u003e\u003d 1) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Estimated size must be greater than 0\")\n  throw $r4\n}",
      "B2 {\n  $r1 \u003d HashSet\n  new HashSet(i0)\n  $r2 \u003d IteratorUtils.addAll(r0, $r1)\n  $r3 \u003d Set) $r2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "IteratorUtils#addAll(...2)",
        "body": "{\r\n    Objects.requireNonNull(iterator, \"iterator\");\r\n    while (iterator.hasNext()) {\r\n        list.add(iterator.next());\r\n    }\r\n    return list;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.IteratorUtils",
    "methodName": "toString",
    "signature": "java.lang.String toString(java.util.Iterator,org.apache.commons.collections4.Transformer,java.lang.String,java.lang.String,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(transformer, \"transformer\");\r\n    Objects.requireNonNull(delimiter, \"delimiter\");\r\n    Objects.requireNonNull(prefix, \"prefix\");\r\n    Objects.requireNonNull(suffix, \"suffix\");\r\n    final StringBuilder stringBuilder \u003d new StringBuilder(prefix);\r\n    if (iterator !\u003d null) {\r\n        while (iterator.hasNext()) {\r\n            final E element \u003d iterator.next();\r\n            stringBuilder.append(transformer.apply(element));\r\n            stringBuilder.append(delimiter);\r\n        }\r\n        if (stringBuilder.length() \u003e prefix.length()) {\r\n            stringBuilder.setLength(stringBuilder.length() - delimiter.length());\r\n        }\r\n    }\r\n    stringBuilder.append(suffix);\r\n    return stringBuilder.toString();\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r5 \u003d\u003d null) → B1 | else → B5",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3",
      "B3 : If($i0 \u003c\u003d $i1) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Iterator\n  Transformer\n  String\n  String\n  String\n  Objects.requireNonNull(r0, \"transformer\")\n  Objects.requireNonNull(r1, \"delimiter\")\n  Objects.requireNonNull(r2, \"prefix\")\n  Objects.requireNonNull(r3, \"suffix\")\n  $r4 \u003d StringBuilder\n  new StringBuilder(r2)\n  if (r5 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  $z0 \u003d r5.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d r5.next()\n  $r7 \u003d r0.apply($r6)\n  $r8 \u003d String) $r7\n  $r4.append($r8)\n  $r4.append(r1)\n  goto B1\n}",
      "B3 {\n  $i0 \u003d $r4.length()\n  $i1 \u003d r2.length()\n  if ($i0 \u003c\u003d $i1) goto B4 else B5\n}",
      "B4 {\n  $i2 \u003d $r4.length()\n  $i3 \u003d r1.length()\n  $i4 \u003d $i2 - $i3\n  $r4.setLength($i4)\n}",
      "B5 {\n  $r4.append(r3)\n  $r9 \u003d $r4.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.keyvalue.DefaultKeyValue",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (!(obj instanceof DefaultKeyValue)) {\r\n        return false;\r\n    }\r\n    final DefaultKeyValue\u003c?, ?\u003e other \u003d (DefaultKeyValue\u003c?, ?\u003e) obj;\r\n    return Objects.equals(getKey(), other.getKey()) \u0026\u0026 Objects.equals(getValue(), other.getValue());\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B7",
      "B5 : If($z2 \u003d\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  DefaultKeyValue\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d DefaultKeyValue\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d DefaultKeyValue) r0\n  $r3 \u003d r1.getKey()\n  $r4 \u003d r2.getKey()\n  $z1 \u003d Objects.equals($r3, $r4)\n  if ($z1 \u003d\u003d 0) goto B5 else B7\n}",
      "B5 {\n  $r5 \u003d r1.getValue()\n  $r6 \u003d r2.getValue()\n  $z2 \u003d Objects.equals($r5, $r6)\n  if ($z2 \u003d\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $z3 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z3 \u003d 0\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DefaultKeyValue#getKey(...0)",
        "body": "(source not found)"
      },
      {
        "name": "DefaultKeyValue#getValue(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.keyvalue.DefaultKeyValue",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    return (getKey() \u003d\u003d null ? 0 : getKey().hashCode()) ^ (getValue() \u003d\u003d null ? 0 : getValue().hashCode());\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B3 : If($r3 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  DefaultKeyValue\n  $r1 \u003d r0.getKey()\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d 0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r0.getKey()\n  $i0 \u003d $r2.hashCode()\n}",
      "B3 {\n  $r3 \u003d r0.getValue()\n  if ($r3 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $i1 \u003d 0\n  goto B6\n}",
      "B5 {\n  $r4 \u003d r0.getValue()\n  $i1 \u003d $r4.hashCode()\n}",
      "B6 {\n  $i2 \u003d $i0 ^ $i1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "DefaultKeyValue#getKey(...0)",
        "body": "(source not found)"
      },
      {
        "name": "DefaultKeyValue#getValue(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.keyvalue.DefaultKeyValue",
    "methodName": "setKey",
    "signature": "java.lang.Object setKey(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DefaultKeyValue\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"DefaultKeyValue may not contain itself as a key.\")\n  throw $r3\n}",
      "B2 {\n  $r2 \u003d r1.setKey(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.keyvalue.DefaultKeyValue",
    "methodName": "setValue",
    "signature": "java.lang.Object setValue(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  DefaultKeyValue\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"DefaultKeyValue may not contain itself as a value.\")\n  throw $r3\n}",
      "B2 {\n  $r2 \u003d r1.setValue(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.keyvalue.MultiKey",
    "methodName": "getClass",
    "signature": "java.lang.Class getClass(java.lang.Object)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d class \"Ljava/lang/Object;\"\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0.getClass()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.keyvalue.MultiKey",
    "methodName": "getComponentType",
    "signature": "java.lang.Class getComponentType(java.lang.Object[])",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If($i0 \u003c\u003d 0) → B3 | else → B4",
      "B6 : If(i1 \u003e\u003d $i2) → B7 | else → B10",
      "B7 : If(r5 \u003d\u003d $r2) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d lengthof r0\n  if ($i0 \u003c\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d r0[0]\n  $r4 \u003d MultiKey.getClass($r3)\n  goto B5\n}",
      "B4 {\n  $r4 \u003d class \"Ljava/lang/Object;\"\n}",
      "B5 {\n  r5 \u003d $r4\n  i1 \u003d 1\n}",
      "B6 {\n  $i2 \u003d lengthof r0\n  if (i1 \u003e\u003d $i2) goto B7 else B10\n}",
      "B7 {\n  $r1 \u003d r0[i1]\n  $r2 \u003d MultiKey.getClass($r1)\n  if (r5 \u003d\u003d $r2) goto B8 else B9\n}",
      "B8 {\n  return\n}",
      "B9 {\n  r5 \u003d $r2\n  i1 \u003d i1 + 1\n  goto B6\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B10",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B6",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.keyvalue.MultiKey",
    "methodName": "calculateHashCode",
    "signature": "void calculateHashCode(java.lang.Object[])",
    "visibility": "private",
    "body": "{\r\n    int total \u003d 0;\r\n    for (final Object key : keys) {\r\n        if (key !\u003d null) {\r\n            total ^\u003d key.hashCode();\r\n        }\r\n    }\r\n    hashCode \u003d total;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d i0) → B2 | else → B5",
      "B2 : If(r2 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  MultiKey\n  Object[]\n  i2 \u003d 0\n  i0 \u003d lengthof r0\n  i3 \u003d 0\n}",
      "B1 {\n  if (i3 \u003e\u003d i0) goto B2 else B5\n}",
      "B2 {\n  r2 \u003d r0[i3]\n  if (r2 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $i1 \u003d r2.hashCode()\n  i2 \u003d i2 ^ $i1\n}",
      "B4 {\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B5 {\n  MultiKey: int hashCode\u003e \u003d i2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.keyvalue.MultiKey",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (other \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (other instanceof MultiKey) {\r\n        final MultiKey\u003c?\u003e otherMulti \u003d (MultiKey\u003c?\u003e) other;\r\n        return Arrays.equals(keys, otherMulti.keys);\r\n    }\r\n    return false;\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  MultiKey\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d MultiKey\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  r2 \u003d MultiKey) r0\n  $r4 \u003d Object[] keys\u003e\n  $r3 \u003d Object[] keys\u003e\n  $z1 \u003d Arrays.equals($r4, $r3)\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.keyvalue.TiedMapEntry",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (!(obj instanceof Map.Entry)) {\r\n        return false;\r\n    }\r\n    final Map.Entry\u003c?, ?\u003e other \u003d (Map.Entry\u003c?, ?\u003e) obj;\r\n    return Objects.equals(key, other.getKey()) \u0026\u0026 Objects.equals(getValue(), other.getValue());\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B7",
      "B5 : If($z2 \u003d\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  TiedMapEntry\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d Map$Entry\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d Map$Entry) r0\n  $r3 \u003d Object key\u003e\n  $r4 \u003d r2.getKey()\n  $z1 \u003d Objects.equals($r3, $r4)\n  if ($z1 \u003d\u003d 0) goto B5 else B7\n}",
      "B5 {\n  $r5 \u003d r1.getValue()\n  $r6 \u003d r2.getValue()\n  $z2 \u003d Objects.equals($r5, $r6)\n  if ($z2 \u003d\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $z3 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z3 \u003d 0\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TiedMapEntry#getValue(...0)",
        "body": "{\r\n    return map.get(key);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.keyvalue.TiedMapEntry",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    final Object value \u003d getValue();\r\n    return (getKey() \u003d\u003d null ? 0 : getKey().hashCode()) ^ (value \u003d\u003d null ? 0 : value.hashCode());\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B2",
      "B3 : If($r1 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  TiedMapEntry\n  $r1 \u003d r0.getValue()\n  $r2 \u003d r0.getKey()\n  if ($r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d 0\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r0.getKey()\n  $i0 \u003d $r3.hashCode()\n}",
      "B3 {\n  if ($r1 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $i1 \u003d 0\n  goto B6\n}",
      "B5 {\n  $i1 \u003d $r1.hashCode()\n}",
      "B6 {\n  $i2 \u003d $i0 ^ $i1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TiedMapEntry#getKey(...0)",
        "body": "{\r\n    return key;\r\n}"
      },
      {
        "name": "TiedMapEntry#getValue(...0)",
        "body": "{\r\n    return map.get(key);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.keyvalue.TiedMapEntry",
    "methodName": "setValue",
    "signature": "java.lang.Object setValue(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TiedMapEntry\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Cannot set value to this map entry\")\n  throw $r5\n}",
      "B2 {\n  $r3 \u003d Map map\u003e\n  $r2 \u003d Object key\u003e\n  $r4 \u003d $r3.put($r2, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.CursorableLinkedList",
    "methodName": "broadcastNodeChanged",
    "signature": "void broadcastNodeChanged(org.apache.commons.collections4.list.AbstractLinkedList$Node)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B6",
      "B2 : If(r6 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CursorableLinkedList\n  AbstractLinkedList$Node\n  $r1 \u003d List cursors\u003e\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B6\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r4 \u003d WeakReference) $r3\n  $r5 \u003d r4.get()\n  r6 \u003d CursorableLinkedList$Cursor) $r5\n  if (r6 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r2.remove()\n  goto B5\n}",
      "B4 {\n  r6.nodeChanged(r7)\n}",
      "B5 {\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.CursorableLinkedList",
    "methodName": "broadcastNodeInserted",
    "signature": "void broadcastNodeInserted(org.apache.commons.collections4.list.AbstractLinkedList$Node)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B6",
      "B2 : If(r6 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CursorableLinkedList\n  AbstractLinkedList$Node\n  $r1 \u003d List cursors\u003e\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B6\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r4 \u003d WeakReference) $r3\n  $r5 \u003d r4.get()\n  r6 \u003d CursorableLinkedList$Cursor) $r5\n  if (r6 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r2.remove()\n  goto B5\n}",
      "B4 {\n  r6.nodeInserted(r7)\n}",
      "B5 {\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.CursorableLinkedList",
    "methodName": "broadcastNodeRemoved",
    "signature": "void broadcastNodeRemoved(org.apache.commons.collections4.list.AbstractLinkedList$Node)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B6",
      "B2 : If(r6 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CursorableLinkedList\n  AbstractLinkedList$Node\n  $r1 \u003d List cursors\u003e\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B6\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r4 \u003d WeakReference) $r3\n  $r5 \u003d r4.get()\n  r6 \u003d CursorableLinkedList$Cursor) $r5\n  if (r6 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r2.remove()\n  goto B5\n}",
      "B4 {\n  r6.nodeRemoved(r7)\n}",
      "B5 {\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.CursorableLinkedList",
    "methodName": "removeAllNodes",
    "signature": "void removeAllNodes()",
    "visibility": "protected",
    "body": "{\r\n    if (!isEmpty()) {\r\n        // superclass implementation would break all the iterators\r\n        final Iterator\u003cE\u003e it \u003d iterator();\r\n        while (it.hasNext()) {\r\n            it.next();\r\n            it.remove();\r\n        }\r\n    }\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B4",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CursorableLinkedList\n  $z0 \u003d r0.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $r1 \u003d r0.iterator()\n}",
      "B2 {\n  $z1 \u003d $r1.hasNext()\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r1.next()\n  $r1.remove()\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CursorableLinkedList#isEmpty(...0)",
        "body": "(source not found)"
      },
      {
        "name": "CursorableLinkedList#iterator(...0)",
        "body": "{\r\n    return super.listIterator(0);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.list.CursorableLinkedList",
    "methodName": "unregisterCursor",
    "signature": "void unregisterCursor(org.apache.commons.collections4.list.CursorableLinkedList$Cursor)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B7",
      "B2 : If(r6 !\u003d null) → B3 | else → B4",
      "B4 : If(r6 !\u003d r7) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CursorableLinkedList\n  CursorableLinkedList$Cursor\n  $r1 \u003d List cursors\u003e\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B7\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r4 \u003d WeakReference) $r3\n  $r5 \u003d r4.get()\n  r6 \u003d CursorableLinkedList$Cursor) $r5\n  if (r6 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r2.remove()\n  goto B6\n}",
      "B4 {\n  if (r6 !\u003d r7) goto B5 else B6\n}",
      "B5 {\n  r4.clear()\n  $r2.remove()\n  goto B7\n}",
      "B6 {\n  goto B1\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B1",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.GrowthList",
    "methodName": "add",
    "signature": "void add(int,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i1 \u003c\u003d $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  GrowthList\n  i1 :\u003d @parameter0: int\n  Object\n  $r1 \u003d r0.decorated()\n  $i0 \u003d $r1.size()\n  if (i1 \u003c\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r0.decorated()\n  $i2 \u003d i1 - $i0\n  $r5 \u003d Collections.nCopies($i2, null)\n  $r4.addAll($r5)\n}",
      "B2 {\n  $r2 \u003d r0.decorated()\n  $r2.add(i1, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.GrowthList",
    "methodName": "addAll",
    "signature": "boolean addAll(int,java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    final int size \u003d decorated().size();\r\n    boolean result \u003d false;\r\n    if (index \u003e size) {\r\n        decorated().addAll(Collections.\u003cE\u003enCopies(index - size, null));\r\n        result \u003d true;\r\n    }\r\n    return decorated().addAll(index, coll) || result;\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i1 \u003c\u003d $i0) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B3 : If(z1 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  GrowthList\n  i1 :\u003d @parameter0: int\n  Collection\n  $r1 \u003d r0.decorated()\n  $i0 \u003d $r1.size()\n  z1 \u003d 0\n  if (i1 \u003c\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r0.decorated()\n  $i2 \u003d i1 - $i0\n  $r5 \u003d Collections.nCopies($i2, null)\n  $r4.addAll($r5)\n  z1 \u003d 1\n}",
      "B2 {\n  $r2 \u003d r0.decorated()\n  $z0 \u003d $r2.addAll(i1, r3)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  if (z1 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $z2 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z2 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "GrowthList#decorated(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.list.GrowthList",
    "methodName": "set",
    "signature": "java.lang.Object set(int,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i1 \u003c $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  GrowthList\n  i1 :\u003d @parameter0: int\n  Object\n  $r1 \u003d r0.decorated()\n  $i0 \u003d $r1.size()\n  if (i1 \u003c $i0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d r0.decorated()\n  $i2 \u003d i1 - $i0\n  $i3 \u003d $i2 + 1\n  $r6 \u003d Collections.nCopies($i3, null)\n  $r5.addAll($r6)\n}",
      "B2 {\n  $r2 \u003d r0.decorated()\n  $r4 \u003d $r2.set(i1, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.LazyList",
    "methodName": "element",
    "signature": "java.lang.Object element(int)",
    "visibility": "private",
    "body": "{\r\n    if (factory !\u003d null) {\r\n        return factory.get();\r\n    }\r\n    if (transformer !\u003d null) {\r\n        return transformer.apply(index);\r\n    }\r\n    throw new IllegalStateException(\"Factory and Transformer are both null!\");\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r2 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  LazyList\n  i0 :\u003d @parameter0: int\n  $r1 \u003d Factory factory\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d Factory factory\u003e\n  $r8 \u003d $r7.get()\n  return\n}",
      "B2 {\n  $r2 \u003d Transformer transformer\u003e\n  if ($r2 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d Transformer transformer\u003e\n  $r5 \u003d Integer.valueOf(i0)\n  $r6 \u003d $r4.apply($r5)\n  return\n}",
      "B4 {\n  $r3 \u003d IllegalStateException\n  new IllegalStateException(\"Factory and Transformer are both null!\")\n  throw $r3\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.LazyList",
    "methodName": "get",
    "signature": "java.lang.Object get(int)",
    "visibility": "public",
    "body": "{\r\n    final int size \u003d decorated().size();\r\n    if (index \u003c size) {\r\n        // within bounds, get the object\r\n        E object \u003d decorated().get(index);\r\n        if (object \u003d\u003d null) {\r\n            // item is a placeholder, create new one, set and return\r\n            object \u003d element(index);\r\n            decorated().set(index, object);\r\n        }\r\n        // good and ready to go\r\n        return object;\r\n    }\r\n    // we have to grow the list\r\n    for (int i \u003d size; i \u003c index; i++) {\r\n        decorated().add(null);\r\n    }\r\n    // create our last object, set and return\r\n    final E object \u003d element(index);\r\n    decorated().add(object);\r\n    return object;\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i1 \u003e\u003d $i0) → B1 | else → B4",
      "B1 : If($r6 !\u003d null) → B2 | else → B3",
      "B5 : If(i2 \u003e\u003d i1) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  LazyList\n  i1 :\u003d @parameter0: int\n  $r1 \u003d r0.decorated()\n  $i0 \u003d $r1.size()\n  if (i1 \u003e\u003d $i0) goto B1 else B4\n}",
      "B1 {\n  $r5 \u003d r0.decorated()\n  $r6 \u003d $r5.get(i1)\n  r9 \u003d $r6\n  if ($r6 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r7 \u003d r0.element(i1)\n  r9 \u003d $r7\n  $r8 \u003d r0.decorated()\n  $r8.set(i1, $r7)\n}",
      "B3 {\n  return\n}",
      "B4 {\n  i2 \u003d $i0\n}",
      "B5 {\n  if (i2 \u003e\u003d i1) goto B6 else B7\n}",
      "B6 {\n  $r4 \u003d r0.decorated()\n  $r4.add(null)\n  i2 \u003d i2 + 1\n  goto B5\n}",
      "B7 {\n  $r2 \u003d r0.element(i1)\n  $r3 \u003d r0.decorated()\n  $r3.add($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "LazyList#element(...1)",
        "body": "{\r\n    if (factory !\u003d null) {\r\n        return factory.get();\r\n    }\r\n    if (transformer !\u003d null) {\r\n        return transformer.apply(index);\r\n    }\r\n    throw new IllegalStateException(\"Factory and Transformer are both null!\");\r\n}"
      },
      {
        "name": "LazyList#decorated(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.list.LazyList",
    "methodName": "subList",
    "signature": "java.util.List subList(int,int)",
    "visibility": "public",
    "body": "{\r\n    final List\u003cE\u003e sub \u003d decorated().subList(fromIndex, toIndex);\r\n    if (factory !\u003d null) {\r\n        return new LazyList\u003c\u003e(sub, factory);\r\n    }\r\n    if (transformer !\u003d null) {\r\n        return new LazyList\u003c\u003e(sub, transformer);\r\n    }\r\n    throw new IllegalStateException(\"Factory and Transformer are both null!\");\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r3 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($r4 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  LazyList\n  i0 :\u003d @parameter0: int\n  i1 :\u003d @parameter1: int\n  $r1 \u003d r0.decorated()\n  $r2 \u003d $r1.subList(i0, i1)\n  $r3 \u003d Factory factory\u003e\n  if ($r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d LazyList\n  $r9 \u003d Factory factory\u003e\n  new LazyList($r2, $r9)\n  return\n}",
      "B2 {\n  $r4 \u003d Transformer transformer\u003e\n  if ($r4 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d LazyList\n  $r7 \u003d Transformer transformer\u003e\n  new LazyList($r2, $r7)\n  return\n}",
      "B4 {\n  $r5 \u003d IllegalStateException\n  new IllegalStateException(\"Factory and Transformer are both null!\")\n  throw $r5\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "LazyList#decorated(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.list.NodeCachingLinkedList",
    "methodName": "addNodeToCache",
    "signature": "void addNodeToCache(org.apache.commons.collections4.list.AbstractLinkedList$Node)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NodeCachingLinkedList\n  AbstractLinkedList$Node\n  $z0 \u003d r0.isCacheFull()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r1 \u003d AbstractLinkedList$Node firstCachedNode\u003e\n  AbstractLinkedList$Node previous\u003e \u003d null\n  AbstractLinkedList$Node next\u003e \u003d r1\n  r2.setValue(null)\n  AbstractLinkedList$Node firstCachedNode\u003e \u003d r2\n  $i0 \u003d NodeCachingLinkedList: int cacheSize\u003e\n  $i1 \u003d $i0 + 1\n  NodeCachingLinkedList: int cacheSize\u003e \u003d $i1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.NodeCachingLinkedList",
    "methodName": "createNode",
    "signature": "org.apache.commons.collections4.list.AbstractLinkedList$Node createNode(java.lang.Object)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NodeCachingLinkedList\n  Object\n  $r1 \u003d r0.getNodeFromCache()\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.createNode(r2)\n  return\n}",
      "B2 {\n  $r1.setValue(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.NodeCachingLinkedList",
    "methodName": "getNodeFromCache",
    "signature": "org.apache.commons.collections4.list.AbstractLinkedList$Node getNodeFromCache()",
    "visibility": "protected",
    "body": "{\r\n    if (cacheSize \u003d\u003d 0) {\r\n        return null;\r\n    }\r\n    final Node\u003cE\u003e cachedNode \u003d firstCachedNode;\r\n    firstCachedNode \u003d cachedNode.next;\r\n    // This should be changed anyway, but defensively\r\n    cachedNode.next \u003d null;\r\n    // set it to null.\r\n    cacheSize--;\r\n    return cachedNode;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NodeCachingLinkedList\n  $i0 \u003d NodeCachingLinkedList: int cacheSize\u003e\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  r1 \u003d AbstractLinkedList$Node firstCachedNode\u003e\n  $r2 \u003d AbstractLinkedList$Node next\u003e\n  AbstractLinkedList$Node firstCachedNode\u003e \u003d $r2\n  AbstractLinkedList$Node next\u003e \u003d null\n  $i1 \u003d NodeCachingLinkedList: int cacheSize\u003e\n  $i2 \u003d $i1 - 1\n  NodeCachingLinkedList: int cacheSize\u003e \u003d $i2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.NodeCachingLinkedList",
    "methodName": "isCacheFull",
    "signature": "boolean isCacheFull()",
    "visibility": "protected",
    "body": "{\r\n    return cacheSize \u003e\u003d maximumCacheSize;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003c $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NodeCachingLinkedList\n  $i1 \u003d NodeCachingLinkedList: int cacheSize\u003e\n  $i0 \u003d NodeCachingLinkedList: int maximumCacheSize\u003e\n  if ($i1 \u003c $i0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.NodeCachingLinkedList",
    "methodName": "removeAllNodes",
    "signature": "void removeAllNodes()",
    "visibility": "protected",
    "body": "{\r\n    // Add the removed nodes to the cache, then remove the rest.\r\n    // We can add them to the cache before removing them, since\r\n    // {@link AbstractLinkedList.removeAllNodes()} removes the\r\n    // nodes by removing references directly from {@link #header}.\r\n    final int numberOfNodesToCache \u003d Math.min(size, maximumCacheSize - cacheSize);\r\n    Node\u003cE\u003e node \u003d header.next;\r\n    for (int currentIndex \u003d 0; currentIndex \u003c numberOfNodesToCache; currentIndex++) {\r\n        final Node\u003cE\u003e oldNode \u003d node;\r\n        node \u003d node.next;\r\n        addNodeToCache(oldNode);\r\n    }\r\n    super.removeAllNodes();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i5 \u003e\u003d $i4) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  NodeCachingLinkedList\n  $i3 \u003d NodeCachingLinkedList: int size\u003e\n  $i1 \u003d NodeCachingLinkedList: int maximumCacheSize\u003e\n  $i0 \u003d NodeCachingLinkedList: int cacheSize\u003e\n  $i2 \u003d $i1 - $i0\n  $i4 \u003d Math.min($i3, $i2)\n  $r1 \u003d AbstractLinkedList$Node header\u003e\n  r3 \u003d AbstractLinkedList$Node next\u003e\n  i5 \u003d 0\n}",
      "B1 {\n  if (i5 \u003e\u003d $i4) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r3\n  r3 \u003d AbstractLinkedList$Node next\u003e\n  r0.addNodeToCache(r2)\n  i5 \u003d i5 + 1\n  goto B1\n}",
      "B3 {\n  r0.removeAllNodes()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NodeCachingLinkedList#addNodeToCache(...1)",
        "body": "{\r\n    if (isCacheFull()) {\r\n        // don\u0027t cache the node.\r\n        return;\r\n    }\r\n    // clear the node\u0027s contents and add it to the cache.\r\n    final Node\u003cE\u003e nextCachedNode \u003d firstCachedNode;\r\n    node.previous \u003d null;\r\n    node.next \u003d nextCachedNode;\r\n    node.setValue(null);\r\n    firstCachedNode \u003d node;\r\n    cacheSize++;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.list.NodeCachingLinkedList",
    "methodName": "shrinkCacheToMaximumSize",
    "signature": "void shrinkCacheToMaximumSize()",
    "visibility": "protected",
    "body": "{\r\n    // Rich Dougherty: This could be more efficient.\r\n    while (cacheSize \u003e maximumCacheSize) {\r\n        getNodeFromCache();\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($i1 \u003c\u003d $i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  NodeCachingLinkedList\n}",
      "B1 {\n  $i1 \u003d NodeCachingLinkedList: int cacheSize\u003e\n  $i0 \u003d NodeCachingLinkedList: int maximumCacheSize\u003e\n  if ($i1 \u003c\u003d $i0) goto B2 else B3\n}",
      "B2 {\n  r0.getNodeFromCache()\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "NodeCachingLinkedList#getNodeFromCache(...0)",
        "body": "{\r\n    if (cacheSize \u003d\u003d 0) {\r\n        return null;\r\n    }\r\n    final Node\u003cE\u003e cachedNode \u003d firstCachedNode;\r\n    firstCachedNode \u003d cachedNode.next;\r\n    // This should be changed anyway, but defensively\r\n    cachedNode.next \u003d null;\r\n    // set it to null.\r\n    cacheSize--;\r\n    return cachedNode;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.list.PredicatedList",
    "methodName": "addAll",
    "signature": "boolean addAll(int,java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    for (final E aColl : coll) {\r\n        validate(aColl);\r\n    }\r\n    return decorated().addAll(index, coll);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  PredicatedList\n  i0 :\u003d @parameter0: int\n  Collection\n  $r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d $r1.next()\n  r2.validate($r4)\n  goto B1\n}",
      "B3 {\n  $r3 \u003d r2.decorated()\n  $z1 \u003d $r3.addAll(i0, r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PredicatedList#validate(...1)",
        "body": "(source not found)"
      },
      {
        "name": "PredicatedList#decorated(...0)",
        "body": "{\r\n    return (List\u003cE\u003e) super.decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.list.PredicatedList",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return object \u003d\u003d this || decorated().equals(object);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d r1) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  PredicatedList\n  Object\n  if (r0 \u003d\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1.decorated()\n  $z0 \u003d $r2.equals(r0)\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PredicatedList#decorated(...0)",
        "body": "{\r\n    return (List\u003cE\u003e) super.decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.list.SetUniqueList",
    "methodName": "setUniqueList",
    "signature": "org.apache.commons.collections4.list.SetUniqueList setUniqueList(java.util.List)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(list, \"list\");\r\n    if (list.isEmpty()) {\r\n        return new SetUniqueList\u003c\u003e(list, new HashSet\u003c\u003e());\r\n    }\r\n    final List\u003cE\u003e temp \u003d new ArrayList\u003c\u003e(list);\r\n    list.clear();\r\n    final SetUniqueList\u003cE\u003e sl \u003d new SetUniqueList\u003c\u003e(list, new HashSet\u003c\u003e());\r\n    sl.addAll(temp);\r\n    return sl;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  List\n  Objects.requireNonNull(r0, \"list\")\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d SetUniqueList\n  $r5 \u003d HashSet\n  new HashSet()\n  new SetUniqueList(r0, $r5)\n  return\n}",
      "B2 {\n  $r1 \u003d ArrayList\n  new ArrayList(r0)\n  r0.clear()\n  $r2 \u003d SetUniqueList\n  $r3 \u003d HashSet\n  new HashSet()\n  new SetUniqueList(r0, $r3)\n  $r2.addAll($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.SetUniqueList",
    "methodName": "add",
    "signature": "boolean add(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d $i2) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SetUniqueList\n  Object\n  $i0 \u003d r0.size()\n  $i1 \u003d r0.size()\n  r0.add($i1, r1)\n  $i2 \u003d r0.size()\n  if ($i0 \u003d\u003d $i2) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.SetUniqueList",
    "methodName": "add",
    "signature": "void add(int,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SetUniqueList\n  i0 :\u003d @parameter0: int\n  Object\n  $r2 \u003d Set set\u003e\n  $z0 \u003d $r2.contains(r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d Set set\u003e\n  $r3.add(r1)\n  r0.add(i0, r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.SetUniqueList",
    "methodName": "addAll",
    "signature": "boolean addAll(int,java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    final List\u003cE\u003e temp \u003d new ArrayList\u003c\u003e();\r\n    for (final E e : coll) {\r\n        if (set.add(e)) {\r\n            temp.add(e);\r\n        }\r\n    }\r\n    return super.addAll(index, temp);\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($z2 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  SetUniqueList\n  i0 :\u003d @parameter0: int\n  Collection\n  $r0 \u003d ArrayList\n  new ArrayList()\n  $r2 \u003d r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $r4 \u003d $r2.next()\n  $r5 \u003d Set set\u003e\n  $z2 \u003d $r5.add($r4)\n  if ($z2 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r0.add($r4)\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  $z1 \u003d r3.addAll(i0, $r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.SetUniqueList",
    "methodName": "createSetBasedOnList",
    "signature": "java.util.Set createSetBasedOnList(java.util.Set,java.util.List)",
    "visibility": "protected",
    "body": "{\r\n    Set\u003cE\u003e subSet;\r\n    if (set.getClass().equals(HashSet.class)) {\r\n        subSet \u003d new HashSet\u003c\u003e(list.size());\r\n    } else {\r\n        try {\r\n            subSet \u003d set.getClass().getDeclaredConstructor(set.getClass()).newInstance(set);\r\n        } catch (final InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException ie) {\r\n            subSet \u003d new HashSet\u003c\u003e();\r\n        }\r\n    }\r\n    subSet.addAll(list);\r\n    return subSet;\r\n}",
    "nodes": 12,
    "edges": 20,
    "cc": 10,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SetUniqueList\n  Set\n  List\n  $r1 \u003d r0.getClass()\n  $z0 \u003d $r1.equals(class \"Ljava/util/HashSet;\")\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d HashSet\n  $i0 \u003d r8.size()\n  new HashSet($i0)\n  r13 \u003d $r9\n  goto B4\n}",
      "B2 {\n  $r2 \u003d r0.getClass()\n  $r3 \u003d Class)[1]\n  $r4 \u003d r0.getClass()\n  $r3[0] \u003d $r4\n  $r5 \u003d $r2.getDeclaredConstructor($r3)\n  $r6 \u003d Object)[1]\n  $r6[0] \u003d r0\n  $r7 \u003d $r5.newInstance($r6)\n  r13 \u003d Set) $r7\n  goto B4\n}",
      "B3 {\n  $r10 :\u003d @caughtexception\n  $r11 \u003d HashSet\n  new HashSet()\n  r13 \u003d $r11\n}",
      "B4 {\n  r13.addAll(r8)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.SetUniqueList",
    "methodName": "remove",
    "signature": "boolean remove(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final boolean result \u003d set.remove(object);\r\n    if (result) {\r\n        super.remove(object);\r\n    }\r\n    return result;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SetUniqueList\n  Object\n  $r2 \u003d Set set\u003e\n  $z0 \u003d $r2.remove(r1)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.remove(r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.SetUniqueList",
    "methodName": "removeAll",
    "signature": "boolean removeAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    boolean result \u003d false;\r\n    for (final Object name : coll) {\r\n        result |\u003d remove(name);\r\n    }\r\n    return result;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SetUniqueList\n  Collection\n  z2 \u003d 0\n  $r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d $r1.next()\n  $z1 \u003d r3.remove($r2)\n  z2 \u003d z2 | $z1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SetUniqueList#remove(...1)",
        "body": "{\r\n    final E result \u003d super.remove(index);\r\n    set.remove(result);\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.list.SetUniqueList",
    "methodName": "retainAll",
    "signature": "boolean retainAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    final boolean result \u003d set.retainAll(coll);\r\n    if (!result) {\r\n        return false;\r\n    }\r\n    if (set.isEmpty()) {\r\n        super.clear();\r\n    } else {\r\n        // use the set as parameter for the call to retainAll to improve performance\r\n        super.retainAll(set);\r\n    }\r\n    return result;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  SetUniqueList\n  Collection\n  $r2 \u003d Set set\u003e\n  $z0 \u003d $r2.retainAll(r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d Set set\u003e\n  $z1 \u003d $r3.isEmpty()\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  r0.clear()\n  goto B5\n}",
      "B4 {\n  $r4 \u003d Set set\u003e\n  r0.retainAll($r4)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.SetUniqueList",
    "methodName": "set",
    "signature": "java.lang.Object set(int,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 \u003d\u003d $i3) → B1 | else → B3",
      "B1 : If($i0 \u003d\u003d i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  SetUniqueList\n  i1 :\u003d @parameter0: int\n  Object\n  $i0 \u003d r0.indexOf(r1)\n  $r2 \u003d r0.set(i1, r1)\n  $i3 \u003d (int) -1\n  if ($i0 \u003d\u003d $i3) goto B1 else B3\n}",
      "B1 {\n  if ($i0 \u003d\u003d i1) goto B2 else B3\n}",
      "B2 {\n  r0.remove($i0)\n}",
      "B3 {\n  $r3 \u003d Set set\u003e\n  $r3.remove($r2)\n  $r4 \u003d Set set\u003e\n  $r4.add(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.TransformedList",
    "methodName": "transformedList",
    "signature": "org.apache.commons.collections4.list.TransformedList transformedList(java.util.List,org.apache.commons.collections4.Transformer)",
    "visibility": "public",
    "body": "{\r\n    final TransformedList\u003cE\u003e decorated \u003d new TransformedList\u003c\u003e(list, transformer);\r\n    if (!list.isEmpty()) {\r\n        // list is of type E\r\n        @SuppressWarnings(\"unchecked\")\r\n        final E[] // NOPMD - false positive for generics\r\n        values \u003d (E[]) list.toArray();\r\n        list.clear();\r\n        for (final E value : values) {\r\n            decorated.decorated().add(transformer.apply(value));\r\n        }\r\n    }\r\n    return decorated;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B4",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  List\n  Transformer\n  $r0 \u003d TransformedList\n  new TransformedList(r1, r2)\n  $z0 \u003d r1.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $r3 \u003d r1.toArray()\n  r1.clear()\n  i0 \u003d lengthof $r3\n  i1 \u003d 0\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B4\n}",
      "B3 {\n  r4 \u003d $r3[i1]\n  $r5 \u003d $r0.decorated()\n  $r6 \u003d r2.apply(r4)\n  $r5.add($r6)\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.TransformedList",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return object \u003d\u003d this || decorated().equals(object);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d r1) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TransformedList\n  Object\n  if (r0 \u003d\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1.decorated()\n  $z0 \u003d $r2.equals(r0)\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TransformedList#decorated(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.list.TreeList",
    "methodName": "add",
    "signature": "void add(int,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeList\n  i2 :\u003d @parameter0: int\n  Object\n  $i0 \u003d TreeList: int modCount\u003e\n  $i1 \u003d $i0 + 1\n  TreeList: int modCount\u003e \u003d $i1\n  $i3 \u003d r0.size()\n  r0.checkInterval(i2, 0, $i3)\n  $r1 \u003d TreeList$AVLNode root\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d TreeList$AVLNode\n  new TreeList$AVLNode(i2, r2, null, null)\n  TreeList$AVLNode root\u003e \u003d $r5\n  goto B3\n}",
      "B2 {\n  $r3 \u003d TreeList$AVLNode root\u003e\n  $r4 \u003d $r3.insert(i2, r2)\n  TreeList$AVLNode root\u003e \u003d $r4\n}",
      "B3 {\n  $i4 \u003d TreeList: int size\u003e\n  $i5 \u003d $i4 + 1\n  TreeList: int size\u003e \u003d $i5\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.TreeList",
    "methodName": "addAll",
    "signature": "boolean addAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    if (c.isEmpty()) {\r\n        return false;\r\n    }\r\n    modCount +\u003d c.size();\r\n    final AVLNode\u003cE\u003e cTree \u003d new AVLNode\u003c\u003e(c);\r\n    root \u003d root \u003d\u003d null ? cTree : root.addAll(cTree, size);\r\n    size +\u003d c.size();\r\n    return true;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($r3 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  TreeList\n  Collection\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d TreeList: int modCount\u003e\n  $i1 \u003d r0.size()\n  $i2 \u003d $i0 + $i1\n  TreeList: int modCount\u003e \u003d $i2\n  $r2 \u003d TreeList$AVLNode\n  new TreeList$AVLNode(r0)\n  $r3 \u003d TreeList$AVLNode root\u003e\n  if ($r3 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d $r2\n  goto B5\n}",
      "B4 {\n  $r4 \u003d TreeList$AVLNode root\u003e\n  $i3 \u003d TreeList: int size\u003e\n  $r5 \u003d $r4.addAll($r2, $i3)\n}",
      "B5 {\n  TreeList$AVLNode root\u003e \u003d $r5\n  $i4 \u003d TreeList: int size\u003e\n  $i5 \u003d r0.size()\n  $i6 \u003d $i4 + $i5\n  TreeList: int size\u003e \u003d $i6\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.TreeList",
    "methodName": "checkInterval",
    "signature": "void checkInterval(int,int,int)",
    "visibility": "private",
    "body": "{\r\n    if (index \u003c startIndex || index \u003e endIndex) {\r\n        throw new IndexOutOfBoundsException(\"Invalid index:\" + index + \", size\u003d\" + size());\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i0 \u003c i1) → B1 | else → B2",
      "B1 : If(i0 \u003c\u003d i3) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TreeList\n  i0 :\u003d @parameter0: int\n  i1 :\u003d @parameter1: int\n  i3 :\u003d @parameter2: int\n  if (i0 \u003c i1) goto B1 else B2\n}",
      "B1 {\n  if (i0 \u003c\u003d i3) goto B2 else B3\n}",
      "B2 {\n  $r0 \u003d IndexOutOfBoundsException\n  $i2 \u003d r1.size()\n  $r2 \u003d dynInvoke makeConcatWithConstants(i0, $i2)\n  new IndexOutOfBoundsException($r2)\n  throw $r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeList#size(...0)",
        "body": "{\r\n    return size;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.list.TreeList",
    "methodName": "contains",
    "signature": "boolean contains(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return indexOf(object) \u003e\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeList\n  Object\n  $i0 \u003d r0.indexOf(r1)\n  if ($i0 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeList#indexOf(...1)",
        "body": "{\r\n    // override to go 75% faster\r\n    if (root \u003d\u003d null) {\r\n        return -1;\r\n    }\r\n    return root.indexOf(object, root.relativePosition);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.list.TreeList",
    "methodName": "indexOf",
    "signature": "int indexOf(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    // override to go 75% faster\r\n    if (root \u003d\u003d null) {\r\n        return -1;\r\n    }\r\n    return root.indexOf(object, root.relativePosition);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeList\n  Object\n  $r1 \u003d TreeList$AVLNode root\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i3 \u003d (int) -1\n  return\n}",
      "B2 {\n  $r4 \u003d TreeList$AVLNode root\u003e\n  $r3 \u003d TreeList$AVLNode root\u003e\n  $i0 \u003d TreeList$AVLNode: int relativePosition\u003e\n  $i1 \u003d $r4.indexOf(r2, $i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.list.TreeList",
    "methodName": "toArray",
    "signature": "java.lang.Object[] toArray()",
    "visibility": "public",
    "body": "{\r\n    // override to go 20% faster\r\n    final Object[] array \u003d new Object[size()];\r\n    if (root !\u003d null) {\r\n        root.toArray(array, root.relativePosition);\r\n    }\r\n    return array;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TreeList\n  $i0 \u003d r0.size()\n  r1 \u003d Object)[$i0]\n  $r2 \u003d TreeList$AVLNode root\u003e\n  if ($r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d TreeList$AVLNode root\u003e\n  $r3 \u003d TreeList$AVLNode root\u003e\n  $i1 \u003d TreeList$AVLNode: int relativePosition\u003e\n  $r4.toArray(r1, $i1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TreeList#size(...0)",
        "body": "{\r\n    return size;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.list.UnmodifiableList",
    "methodName": "unmodifiableList",
    "signature": "java.util.List unmodifiableList(java.util.List)",
    "visibility": "public",
    "body": "{\r\n    if (list instanceof Unmodifiable) {\r\n        // safe to upcast\r\n        @SuppressWarnings(\"unchecked\")\r\n        final List\u003cE\u003e tmpList \u003d (List\u003cE\u003e) list;\r\n        return tmpList;\r\n    }\r\n    return new UnmodifiableList\u003c\u003e(list);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  List\n  $z0 \u003d Unmodifiable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableList\n  new UnmodifiableList(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.ListUtils",
    "methodName": "defaultIfNull",
    "signature": "java.util.List defaultIfNull(java.util.List,java.util.List)",
    "visibility": "public",
    "body": "{\r\n    return list \u003d\u003d null ? defaultList : list;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  List\n  List\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.ListUtils",
    "methodName": "emptyIfNull",
    "signature": "java.util.List emptyIfNull(java.util.List)",
    "visibility": "public",
    "body": "{\r\n    return list \u003d\u003d null ? Collections.\u003cT\u003eemptyList() : list;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  List\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d Collections.emptyList()\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.ListUtils",
    "methodName": "hashCodeForList",
    "signature": "int hashCodeForList(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    if (list \u003d\u003d null) {\r\n        return 0;\r\n    }\r\n    int hashCode \u003d 1;\r\n    for (final Object obj : list) {\r\n        hashCode \u003d 31 * hashCode + (obj \u003d\u003d null ? 0 : obj.hashCode());\r\n    }\r\n    return hashCode;\r\n}",
    "nodes": 9,
    "edges": 10,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B8",
      "B4 : If($r2 !\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Collection\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i1 \u003d 1\n  $r1 \u003d r0.iterator()\n}",
      "B3 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B4 else B8\n}",
      "B4 {\n  $r2 \u003d $r1.next()\n  $i0 \u003d 31 * i1\n  if ($r2 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $i2 \u003d 0\n  goto B7\n}",
      "B6 {\n  $i2 \u003d $r2.hashCode()\n}",
      "B7 {\n  i1 \u003d $i0 + $i2\n  goto B3\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B3",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.ListUtils",
    "methodName": "indexOf",
    "signature": "int indexOf(java.util.List,org.apache.commons.collections4.Predicate)",
    "visibility": "public",
    "body": "{\r\n    if (list !\u003d null \u0026\u0026 predicate !\u003d null) {\r\n        for (int i \u003d 0; i \u003c list.size(); i++) {\r\n            final E item \u003d list.get(i);\r\n            if (predicate.test(item)) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n    return CollectionUtils.INDEX_NOT_FOUND;\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B7",
      "B1 : If(r1 \u003d\u003d null) → B2 | else → B7",
      "B3 : If(i1 \u003e\u003d $i0) → B4 | else → B7",
      "B4 : If($z0 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  List\n  Predicate\n  if (r0 \u003d\u003d null) goto B1 else B7\n}",
      "B1 {\n  if (r1 \u003d\u003d null) goto B2 else B7\n}",
      "B2 {\n  i1 \u003d 0\n}",
      "B3 {\n  $i0 \u003d r0.size()\n  if (i1 \u003e\u003d $i0) goto B4 else B7\n}",
      "B4 {\n  $r2 \u003d r0.get(i1)\n  $z0 \u003d r1.test($r2)\n  if ($z0 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i1 \u003d i1 + 1\n  goto B3\n}",
      "B7 {\n  $i3 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B7",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.ListUtils",
    "methodName": "intersection",
    "signature": "java.util.List intersection(java.util.List,java.util.List)",
    "visibility": "public",
    "body": "{\r\n    final List\u003cE\u003e result \u003d new ArrayList\u003c\u003e();\r\n    List\u003c? extends E\u003e smaller \u003d list1;\r\n    List\u003c? extends E\u003e larger \u003d list2;\r\n    if (list1.size() \u003e list2.size()) {\r\n        smaller \u003d list2;\r\n        larger \u003d list1;\r\n    }\r\n    final HashSet\u003cE\u003e hashSet \u003d new HashSet\u003c\u003e(smaller);\r\n    for (final E e : larger) {\r\n        if (hashSet.contains(e)) {\r\n            result.add(e);\r\n            hashSet.remove(e);\r\n        }\r\n    }\r\n    return result;\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d $i1) → B1 | else → B2",
      "B3 : If($z1 \u003d\u003d 0) → B4 | else → B7",
      "B4 : If($z0 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  List\n  List\n  $r0 \u003d ArrayList\n  new ArrayList()\n  r6 \u003d r1\n  r7 \u003d r2\n  $i0 \u003d r1.size()\n  $i1 \u003d r2.size()\n  if ($i0 \u003c\u003d $i1) goto B1 else B2\n}",
      "B1 {\n  r6 \u003d r2\n  r7 \u003d r1\n}",
      "B2 {\n  $r3 \u003d HashSet\n  new HashSet(r6)\n  $r4 \u003d r7.iterator()\n}",
      "B3 {\n  $z1 \u003d $r4.hasNext()\n  if ($z1 \u003d\u003d 0) goto B4 else B7\n}",
      "B4 {\n  $r5 \u003d $r4.next()\n  $z0 \u003d $r3.contains($r5)\n  if ($z0 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r0.add($r5)\n  $r3.remove($r5)\n}",
      "B6 {\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.ListUtils",
    "methodName": "isEqualList",
    "signature": "boolean isEqualList(java.util.Collection,java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    if (list1 \u003d\u003d list2) {\r\n        return true;\r\n    }\r\n    if (list1 \u003d\u003d null || list2 \u003d\u003d null || list1.size() !\u003d list2.size()) {\r\n        return false;\r\n    }\r\n    final Iterator\u003c?\u003e it1 \u003d list1.iterator();\r\n    final Iterator\u003c?\u003e it2 \u003d list2.iterator();\r\n    while (it1.hasNext() \u0026\u0026 it2.hasNext()) {\r\n        final Object obj1 \u003d it1.next();\r\n        final Object obj2 \u003d it2.next();\r\n        if (!Objects.equals(obj1, obj2)) {\r\n            return false;\r\n        }\r\n    }\r\n    return !(it1.hasNext() || it2.hasNext());\r\n}",
    "nodes": 17,
    "edges": 22,
    "cc": 7,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 \u003d\u003d null) → B3 | else → B5",
      "B3 : If(r1 \u003d\u003d null) → B4 | else → B5",
      "B4 : If($i0 \u003d\u003d $i1) → B5 | else → B6",
      "B7 : If($z0 \u003d\u003d 0) → B8 | else → B12",
      "B8 : If($z3 \u003d\u003d 0) → B9 | else → B12",
      "B9 : If($z4 !\u003d 0) → B10 | else → B11",
      "B12 : If($z1 !\u003d 0) → B13 | else → B15",
      "B13 : If($z2 !\u003d 0) → B14 | else → B15"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Collection\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 \u003d\u003d null) goto B3 else B5\n}",
      "B3 {\n  if (r1 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  $i0 \u003d r0.size()\n  $i1 \u003d r1.size()\n  if ($i0 \u003d\u003d $i1) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r2 \u003d r0.iterator()\n  $r3 \u003d r1.iterator()\n}",
      "B7 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B8 else B12\n}",
      "B8 {\n  $z3 \u003d $r3.hasNext()\n  if ($z3 \u003d\u003d 0) goto B9 else B12\n}",
      "B9 {\n  $r4 \u003d $r2.next()\n  $r5 \u003d $r3.next()\n  $z4 \u003d Objects.equals($r4, $r5)\n  if ($z4 !\u003d 0) goto B10 else B11\n}",
      "B10 {\n  return\n}",
      "B11 {\n  goto B7\n}",
      "B12 {\n  $z1 \u003d $r2.hasNext()\n  if ($z1 !\u003d 0) goto B13 else B15\n}",
      "B13 {\n  $z2 \u003d $r3.hasNext()\n  if ($z2 !\u003d 0) goto B14 else B15\n}",
      "B14 {\n  $z5 \u003d 1\n  goto B16\n}",
      "B15 {\n  $z5 \u003d 0\n}",
      "B16 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B12",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B7",
      "B12 --\u003e B13",
      "B12 --\u003e B15",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B16",
      "B16 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.ListUtils",
    "methodName": "longestCommonSubsequence",
    "signature": "java.lang.String longestCommonSubsequence(java.lang.CharSequence,java.lang.CharSequence)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(charSequenceA, \"charSequenceA\");\r\n    Objects.requireNonNull(charSequenceB, \"charSequenceB\");\r\n    final List\u003cCharacter\u003e lcs \u003d longestCommonSubsequence(new CharSequenceAsList(charSequenceA), new CharSequenceAsList(charSequenceB));\r\n    final StringBuilder sb \u003d new StringBuilder();\r\n    for (final Character ch : lcs) {\r\n        sb.append(ch);\r\n    }\r\n    return sb.toString();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CharSequence\n  CharSequence\n  Objects.requireNonNull(r0, \"charSequenceA\")\n  Objects.requireNonNull(r1, \"charSequenceB\")\n  $r2 \u003d ListUtils$CharSequenceAsList\n  new ListUtils$CharSequenceAsList(r0)\n  $r3 \u003d ListUtils$CharSequenceAsList\n  new ListUtils$CharSequenceAsList(r1)\n  $r4 \u003d ListUtils.longestCommonSubsequence($r2, $r3)\n  $r5 \u003d StringBuilder\n  new StringBuilder()\n  $r6 \u003d $r4.iterator()\n}",
      "B1 {\n  $z0 \u003d $r6.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r8 \u003d $r6.next()\n  r9 \u003d Character) $r8\n  $r5.append(r9)\n  goto B1\n}",
      "B3 {\n  $r7 \u003d $r5.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ListUtils#longestCommonSubsequence(...2)",
        "body": "{\r\n    Objects.requireNonNull(charSequenceA, \"charSequenceA\");\r\n    Objects.requireNonNull(charSequenceB, \"charSequenceB\");\r\n    final List\u003cCharacter\u003e lcs \u003d longestCommonSubsequence(new CharSequenceAsList(charSequenceA), new CharSequenceAsList(charSequenceB));\r\n    final StringBuilder sb \u003d new StringBuilder();\r\n    for (final Character ch : lcs) {\r\n        sb.append(ch);\r\n    }\r\n    return sb.toString();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.ListUtils",
    "methodName": "partition",
    "signature": "java.util.List partition(java.util.List,int)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(list, \"list\");\r\n    if (size \u003c\u003d 0) {\r\n        throw new IllegalArgumentException(\"Size must be greater than 0\");\r\n    }\r\n    return new Partition\u003c\u003e(list, size);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(i0 \u003e 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  List\n  i0 :\u003d @parameter1: int\n  Objects.requireNonNull(r0, \"list\")\n  if (i0 \u003e 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Size must be greater than 0\")\n  throw $r2\n}",
      "B2 {\n  $r1 \u003d ListUtils$Partition\n  new ListUtils$Partition(r0, i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.ListUtils",
    "methodName": "removeAll",
    "signature": "java.util.List removeAll(java.util.Collection,java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(collection, \"collection\");\r\n    Objects.requireNonNull(remove, \"remove\");\r\n    final List\u003cE\u003e list \u003d new ArrayList\u003c\u003e();\r\n    for (final E obj : collection) {\r\n        if (!remove.contains(obj)) {\r\n            list.add(obj);\r\n        }\r\n    }\r\n    return list;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Collection\n  Objects.requireNonNull(r0, \"collection\")\n  Objects.requireNonNull(r1, \"remove\")\n  $r2 \u003d ArrayList\n  new ArrayList()\n  $r3 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $r4 \u003d $r3.next()\n  $z1 \u003d r1.contains($r4)\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r2.add($r4)\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.ListUtils",
    "methodName": "retainAll",
    "signature": "java.util.List retainAll(java.util.Collection,java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    final List\u003cE\u003e list \u003d new ArrayList\u003c\u003e(Math.min(collection.size(), retain.size()));\r\n    for (final E obj : collection) {\r\n        if (retain.contains(obj)) {\r\n            list.add(obj);\r\n        }\r\n    }\r\n    return list;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Collection\n  $r0 \u003d ArrayList\n  $i0 \u003d r1.size()\n  $i1 \u003d r2.size()\n  $i2 \u003d Math.min($i0, $i1)\n  new ArrayList($i2)\n  $r3 \u003d r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $r4 \u003d $r3.next()\n  $z1 \u003d r2.contains($r4)\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r0.add($r4)\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.ListUtils",
    "methodName": "subtract",
    "signature": "java.util.List subtract(java.util.List,java.util.List)",
    "visibility": "public",
    "body": "{\r\n    final ArrayList\u003cE\u003e result \u003d new ArrayList\u003c\u003e();\r\n    final HashBag\u003cE\u003e bag \u003d new HashBag\u003c\u003e(list2);\r\n    for (final E e : list1) {\r\n        if (!bag.remove(e, 1)) {\r\n            result.add(e);\r\n        }\r\n    }\r\n    return result;\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  List\n  List\n  $r0 \u003d ArrayList\n  new ArrayList()\n  $r1 \u003d HashBag\n  new HashBag(r2)\n  $r4 \u003d r3.iterator()\n}",
      "B1 {\n  $z0 \u003d $r4.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $r5 \u003d $r4.next()\n  $z1 \u003d $r1.remove($r5, 1)\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r0.add($r5)\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "calculateNewCapacity",
    "signature": "int calculateNewCapacity(int)",
    "visibility": "protected",
    "body": "{\r\n    int newCapacity \u003d 1;\r\n    if (proposedCapacity \u003e MAXIMUM_CAPACITY) {\r\n        newCapacity \u003d MAXIMUM_CAPACITY;\r\n    } else {\r\n        while (newCapacity \u003c proposedCapacity) {\r\n            // multiply by two\r\n            newCapacity \u003c\u003c\u003d 1;\r\n        }\r\n        if (newCapacity \u003e MAXIMUM_CAPACITY) {\r\n            newCapacity \u003d MAXIMUM_CAPACITY;\r\n        }\r\n    }\r\n    return newCapacity;\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i0 \u003c\u003d 1073741824) → B1 | else → B2",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B4",
      "B4 : If(i1 \u003c\u003d 1073741824) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  i0 :\u003d @parameter0: int\n  i1 \u003d 1\n  if (i0 \u003c\u003d 1073741824) goto B1 else B2\n}",
      "B1 {\n  i1 \u003d 1073741824\n  goto B6\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B4\n}",
      "B3 {\n  i1 \u003d i1 \u003c\u003c 1\n  goto B2\n}",
      "B4 {\n  if (i1 \u003c\u003d 1073741824) goto B5 else B6\n}",
      "B5 {\n  i1 \u003d 1073741824\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "checkCapacity",
    "signature": "void checkCapacity()",
    "visibility": "protected",
    "body": "{\r\n    if (size \u003e\u003d threshold) {\r\n        final int newCapacity \u003d data.length * 2;\r\n        if (newCapacity \u003c\u003d MAXIMUM_CAPACITY) {\r\n            ensureCapacity(newCapacity);\r\n        }\r\n    }\r\n}",
    "nodes": 4,
    "edges": 5,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i1 \u003c $i0) → B1 | else → B3",
      "B1 : If(i3 \u003e 1073741824) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  $i1 \u003d AbstractHashedMap: int size\u003e\n  $i0 \u003d AbstractHashedMap: int threshold\u003e\n  if ($i1 \u003c $i0) goto B1 else B3\n}",
      "B1 {\n  $r1 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  $i2 \u003d lengthof $r1\n  i3 \u003d $i2 * 2\n  if (i3 \u003e 1073741824) goto B2 else B3\n}",
      "B2 {\n  r0.ensureCapacity(i3)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AbstractHashedMap#ensureCapacity(...1)",
        "body": "{\r\n    final int oldCapacity \u003d data.length;\r\n    if (newCapacity \u003c\u003d oldCapacity) {\r\n        return;\r\n    }\r\n    if (size \u003d\u003d 0) {\r\n        threshold \u003d calculateThreshold(newCapacity, loadFactor);\r\n        data \u003d new HashEntry[newCapacity];\r\n    } else {\r\n        final HashEntry\u003cK, V\u003e[] oldEntries \u003d data;\r\n        final HashEntry\u003cK, V\u003e[] newEntries \u003d new HashEntry[newCapacity];\r\n        modCount++;\r\n        for (int i \u003d oldCapacity - 1; i \u003e\u003d 0; i--) {\r\n            HashEntry\u003cK, V\u003e entry \u003d oldEntries[i];\r\n            if (entry !\u003d null) {\r\n                // gc\r\n                oldEntries[i] \u003d null;\r\n                do {\r\n                    final HashEntry\u003cK, V\u003e next \u003d entry.next;\r\n                    final int index \u003d hashIndex(entry.hashCode, newCapacity);\r\n                    entry.next \u003d newEntries[index];\r\n                    newEntries[index] \u003d entry;\r\n                    entry \u003d next;\r\n                } while (entry !\u003d null);\r\n            }\r\n        }\r\n        threshold \u003d calculateThreshold(newCapacity, loadFactor);\r\n        data \u003d newEntries;\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "clone",
    "signature": "org.apache.commons.collections4.map.AbstractHashedMap clone()",
    "visibility": "protected",
    "body": "{\r\n    try {\r\n        final AbstractHashedMap\u003cK, V\u003e cloned \u003d (AbstractHashedMap\u003cK, V\u003e) super.clone();\r\n        cloned.data \u003d new HashEntry[data.length];\r\n        cloned.entrySet \u003d null;\r\n        cloned.keySet \u003d null;\r\n        cloned.values \u003d null;\r\n        cloned.modCount \u003d 0;\r\n        cloned.size \u003d 0;\r\n        cloned.init();\r\n        cloned.putAll(this);\r\n        return cloned;\r\n    } catch (final CloneNotSupportedException ex) {\r\n        throw new UnsupportedOperationException(ex);\r\n    }\r\n}",
    "nodes": 7,
    "edges": 10,
    "cc": 5,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  $r1 \u003d r0.clone()\n  r6 \u003d AbstractHashedMap) $r1\n  $r2 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  $i0 \u003d lengthof $r2\n  $r3 \u003d AbstractHashedMap$HashEntry)[$i0]\n  AbstractHashedMap$HashEntry[] data\u003e \u003d $r3\n  AbstractHashedMap$EntrySet entrySet\u003e \u003d null\n  AbstractHashedMap$KeySet keySet\u003e \u003d null\n  AbstractHashedMap$Values values\u003e \u003d null\n  AbstractHashedMap: int modCount\u003e \u003d 0\n  AbstractHashedMap: int size\u003e \u003d 0\n  r6.init()\n  r6.putAll(r0)\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  $r5 \u003d UnsupportedOperationException\n  new UnsupportedOperationException($r4)\n  throw $r5\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "containsKey",
    "signature": "boolean containsKey(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    key \u003d convertKey(key);\r\n    final int hashCode \u003d hash(key);\r\n    // no local for hash index\r\n    HashEntry\u003cK, V\u003e entry \u003d data[hashIndex(hashCode, data.length)];\r\n    while (entry !\u003d null) {\r\n        if (entry.hashCode \u003d\u003d hashCode \u0026\u0026 isEqualKey(key, entry.key)) {\r\n            return true;\r\n        }\r\n        entry \u003d entry.next;\r\n    }\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r6 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($i3 !\u003d $i0) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  Object\n  $r1 \u003d r0.convertKey(r5)\n  $i0 \u003d r0.hash($r1)\n  $r3 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  $r2 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  $i1 \u003d lengthof $r2\n  $i2 \u003d r0.hashIndex($i0, $i1)\n  r6 \u003d $r3[$i2]\n}",
      "B1 {\n  if (r6 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $i3 \u003d AbstractHashedMap$HashEntry: int hashCode\u003e\n  if ($i3 !\u003d $i0) goto B3 else B5\n}",
      "B3 {\n  $r4 \u003d Object key\u003e\n  $z0 \u003d r0.isEqualKey($r1, $r4)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  r6 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AbstractHashedMap#hash(...1)",
        "body": "{\r\n    // same as JDK 1.4\r\n    int h \u003d key.hashCode();\r\n    h +\u003d ~(h \u003c\u003c 9);\r\n    h ^\u003d h \u003e\u003e\u003e 14;\r\n    h +\u003d h \u003c\u003c 4;\r\n    h ^\u003d h \u003e\u003e\u003e 10;\r\n    return h;\r\n}"
      },
      {
        "name": "AbstractHashedMap#isEqualKey(...2)",
        "body": "{\r\n    return Objects.equals(key1, key2);\r\n}"
      },
      {
        "name": "AbstractHashedMap#convertKey(...1)",
        "body": "{\r\n    return key \u003d\u003d null ? NULL : key;\r\n}"
      },
      {
        "name": "AbstractHashedMap#hashIndex(...2)",
        "body": "{\r\n    return hashCode \u0026 dataSize - 1;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "containsValue",
    "signature": "boolean containsValue(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (value \u003d\u003d null) {\r\n        for (final HashEntry\u003cK, V\u003e element : data) {\r\n            HashEntry\u003cK, V\u003e entry \u003d element;\r\n            while (entry !\u003d null) {\r\n                if (entry.getValue() \u003d\u003d null) {\r\n                    return true;\r\n                }\r\n                entry \u003d entry.next;\r\n            }\r\n        }\r\n    } else {\r\n        for (final HashEntry\u003cK, V\u003e element : data) {\r\n            HashEntry\u003cK, V\u003e entry \u003d element;\r\n            while (entry !\u003d null) {\r\n                if (isEqualValue(value, entry.getValue())) {\r\n                    return true;\r\n                }\r\n                entry \u003d entry.next;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 19,
    "edges": 23,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B10",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B9",
      "B4 : If(r6 \u003d\u003d null) → B5 | else → B8",
      "B5 : If($r3 !\u003d null) → B6 | else → B7",
      "B11 : If(i3 \u003e\u003d i2) → B12 | else → B18",
      "B13 : If(r9 \u003d\u003d null) → B14 | else → B17",
      "B14 : If($z0 \u003d\u003d 0) → B15 | else → B16"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  Object\n  if (r0 !\u003d null) goto B1 else B10\n}",
      "B1 {\n  r4 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  i0 \u003d lengthof r4\n  i1 \u003d 0\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B9\n}",
      "B3 {\n  r5 \u003d r4[i1]\n  r6 \u003d r5\n}",
      "B4 {\n  if (r6 \u003d\u003d null) goto B5 else B8\n}",
      "B5 {\n  $r3 \u003d r6.getValue()\n  if ($r3 !\u003d null) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  r6 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B4\n}",
      "B8 {\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B9 {\n  goto B18\n}",
      "B10 {\n  r7 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  i2 \u003d lengthof r7\n  i3 \u003d 0\n}",
      "B11 {\n  if (i3 \u003e\u003d i2) goto B12 else B18\n}",
      "B12 {\n  r8 \u003d r7[i3]\n  r9 \u003d r8\n}",
      "B13 {\n  if (r9 \u003d\u003d null) goto B14 else B17\n}",
      "B14 {\n  $r2 \u003d r9.getValue()\n  $z0 \u003d r1.isEqualValue(r0, $r2)\n  if ($z0 \u003d\u003d 0) goto B15 else B16\n}",
      "B15 {\n  return\n}",
      "B16 {\n  r9 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B13\n}",
      "B17 {\n  i3 \u003d i3 + 1\n  goto B11\n}",
      "B18 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B10",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B9",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B4",
      "B8 --\u003e B2",
      "B9 --\u003e B18",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B18",
      "B12 --\u003e B13",
      "B13 --\u003e B14",
      "B13 --\u003e B17",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B13",
      "B17 --\u003e B11",
      "B18 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AbstractHashedMap#isEqualValue(...2)",
        "body": "{\r\n    return Objects.equals(value1, value2);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "convertKey",
    "signature": "java.lang.Object convertKey(java.lang.Object)",
    "visibility": "protected",
    "body": "{\r\n    return key \u003d\u003d null ? NULL : key;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Object NULL\u003e\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "createEntrySetIterator",
    "signature": "java.util.Iterator createEntrySetIterator()",
    "visibility": "protected",
    "body": "{\r\n    if (isEmpty()) {\r\n        return EmptyIterator.\u003cMap.Entry\u003cK, V\u003e\u003eemptyIterator();\r\n    }\r\n    return new EntrySetIterator\u003c\u003e(this);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d EmptyIterator.emptyIterator()\n  return\n}",
      "B2 {\n  $r1 \u003d AbstractHashedMap$EntrySetIterator\n  new AbstractHashedMap$EntrySetIterator(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AbstractHashedMap#isEmpty(...0)",
        "body": "{\r\n    return size \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "createKeySetIterator",
    "signature": "java.util.Iterator createKeySetIterator()",
    "visibility": "protected",
    "body": "{\r\n    if (isEmpty()) {\r\n        return EmptyIterator.\u003cK\u003eemptyIterator();\r\n    }\r\n    return new KeySetIterator\u003c\u003e(this);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d EmptyIterator.emptyIterator()\n  return\n}",
      "B2 {\n  $r1 \u003d AbstractHashedMap$KeySetIterator\n  new AbstractHashedMap$KeySetIterator(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AbstractHashedMap#isEmpty(...0)",
        "body": "{\r\n    return size \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "createValuesIterator",
    "signature": "java.util.Iterator createValuesIterator()",
    "visibility": "protected",
    "body": "{\r\n    if (isEmpty()) {\r\n        return EmptyIterator.\u003cV\u003eemptyIterator();\r\n    }\r\n    return new ValuesIterator\u003c\u003e(this);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d EmptyIterator.emptyIterator()\n  return\n}",
      "B2 {\n  $r1 \u003d AbstractHashedMap$ValuesIterator\n  new AbstractHashedMap$ValuesIterator(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AbstractHashedMap#isEmpty(...0)",
        "body": "{\r\n    return size \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "doReadObject",
    "signature": "void doReadObject(java.io.ObjectInputStream)",
    "visibility": "protected",
    "body": "{\r\n    loadFactor \u003d in.readFloat();\r\n    final int capacity \u003d in.readInt();\r\n    final int size \u003d in.readInt();\r\n    init();\r\n    threshold \u003d calculateThreshold(capacity, loadFactor);\r\n    data \u003d new HashEntry[capacity];\r\n    for (int i \u003d 0; i \u003c size; i++) {\r\n        final K key \u003d (K) in.readObject();\r\n        final V value \u003d (V) in.readObject();\r\n        put(key, value);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d $i1) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  ObjectInputStream\n  $f0 \u003d r1.readFloat()\n  AbstractHashedMap: float loadFactor\u003e \u003d $f0\n  $i0 \u003d r1.readInt()\n  $i1 \u003d r1.readInt()\n  r0.init()\n  $f1 \u003d AbstractHashedMap: float loadFactor\u003e\n  $i2 \u003d r0.calculateThreshold($i0, $f1)\n  AbstractHashedMap: int threshold\u003e \u003d $i2\n  $r2 \u003d AbstractHashedMap$HashEntry)[$i0]\n  AbstractHashedMap$HashEntry[] data\u003e \u003d $r2\n  i3 \u003d 0\n}",
      "B1 {\n  if (i3 \u003e\u003d $i1) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d r1.readObject()\n  $r4 \u003d r1.readObject()\n  r0.put($r3, $r4)\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AbstractHashedMap#put(...2)",
        "body": "{\r\n    final Object convertedKey \u003d convertKey(key);\r\n    final int hashCode \u003d hash(convertedKey);\r\n    final int index \u003d hashIndex(hashCode, data.length);\r\n    HashEntry\u003cK, V\u003e entry \u003d data[index];\r\n    while (entry !\u003d null) {\r\n        if (entry.hashCode \u003d\u003d hashCode \u0026\u0026 isEqualKey(convertedKey, entry.key)) {\r\n            final V oldValue \u003d entry.getValue();\r\n            updateEntry(entry, value);\r\n            return oldValue;\r\n        }\r\n        entry \u003d entry.next;\r\n    }\r\n    addMapping(index, hashCode, key, value);\r\n    return null;\r\n}"
      },
      {
        "name": "AbstractHashedMap#init(...0)",
        "body": "{\r\n    // noop\r\n}"
      },
      {
        "name": "AbstractHashedMap#calculateThreshold(...2)",
        "body": "{\r\n    return (int) (newCapacity * factor);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "doWriteObject",
    "signature": "void doWriteObject(java.io.ObjectOutputStream)",
    "visibility": "protected",
    "body": "{\r\n    out.writeFloat(loadFactor);\r\n    out.writeInt(data.length);\r\n    out.writeInt(size);\r\n    for (final MapIterator\u003cK, V\u003e it \u003d mapIterator(); it.hasNext(); ) {\r\n        out.writeObject(it.next());\r\n        out.writeObject(it.getValue());\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  ObjectOutputStream\n  $f0 \u003d AbstractHashedMap: float loadFactor\u003e\n  r0.writeFloat($f0)\n  $r2 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  $i0 \u003d lengthof $r2\n  r0.writeInt($i0)\n  $i1 \u003d AbstractHashedMap: int size\u003e\n  r0.writeInt($i1)\n  $r3 \u003d r1.mapIterator()\n}",
      "B1 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d $r3.next()\n  r0.writeObject($r4)\n  $r5 \u003d $r3.getValue()\n  r0.writeObject($r5)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AbstractHashedMap#mapIterator(...0)",
        "body": "{\r\n    if (size \u003d\u003d 0) {\r\n        return EmptyMapIterator.\u003cK, V\u003eemptyMapIterator();\r\n    }\r\n    return new HashMapIterator\u003c\u003e(this);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "ensureCapacity",
    "signature": "void ensureCapacity(int)",
    "visibility": "protected",
    "body": "{\r\n    final int oldCapacity \u003d data.length;\r\n    if (newCapacity \u003c\u003d oldCapacity) {\r\n        return;\r\n    }\r\n    if (size \u003d\u003d 0) {\r\n        threshold \u003d calculateThreshold(newCapacity, loadFactor);\r\n        data \u003d new HashEntry[newCapacity];\r\n    } else {\r\n        final HashEntry\u003cK, V\u003e[] oldEntries \u003d data;\r\n        final HashEntry\u003cK, V\u003e[] newEntries \u003d new HashEntry[newCapacity];\r\n        modCount++;\r\n        for (int i \u003d oldCapacity - 1; i \u003e\u003d 0; i--) {\r\n            HashEntry\u003cK, V\u003e entry \u003d oldEntries[i];\r\n            if (entry !\u003d null) {\r\n                // gc\r\n                oldEntries[i] \u003d null;\r\n                do {\r\n                    final HashEntry\u003cK, V\u003e next \u003d entry.next;\r\n                    final int index \u003d hashIndex(entry.hashCode, newCapacity);\r\n                    entry.next \u003d newEntries[index];\r\n                    newEntries[index] \u003d entry;\r\n                    entry \u003d next;\r\n                } while (entry !\u003d null);\r\n            }\r\n        }\r\n        threshold \u003d calculateThreshold(newCapacity, loadFactor);\r\n        data \u003d newEntries;\r\n    }\r\n}",
    "nodes": 12,
    "edges": 15,
    "cc": 5,
    "flowSummary": [
      "B0 : If(i1 \u003e i0) → B1 | else → B2",
      "B2 : If($i2 !\u003d 0) → B3 | else → B4",
      "B5 : If(i9 \u003c 0) → B6 | else → B10",
      "B6 : If(r7 \u003d\u003d null) → B7 | else → B9",
      "B8 : If($r5 !\u003d null) → B9 | else → B8"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  i1 :\u003d @parameter0: int\n  $r1 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  i0 \u003d lengthof $r1\n  if (i1 \u003e i0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i2 \u003d AbstractHashedMap: int size\u003e\n  if ($i2 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $f1 \u003d AbstractHashedMap: float loadFactor\u003e\n  $i8 \u003d r0.calculateThreshold(i1, $f1)\n  AbstractHashedMap: int threshold\u003e \u003d $i8\n  $r6 \u003d AbstractHashedMap$HashEntry)[i1]\n  AbstractHashedMap$HashEntry[] data\u003e \u003d $r6\n  goto B11\n}",
      "B4 {\n  r2 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  r3 \u003d AbstractHashedMap$HashEntry)[i1]\n  $i3 \u003d AbstractHashedMap: int modCount\u003e\n  $i4 \u003d $i3 + 1\n  AbstractHashedMap: int modCount\u003e \u003d $i4\n  i9 \u003d i0 - 1\n}",
      "B5 {\n  if (i9 \u003c 0) goto B6 else B10\n}",
      "B6 {\n  r7 \u003d r2[i9]\n  if (r7 \u003d\u003d null) goto B7 else B9\n}",
      "B7 {\n  r2[i9] \u003d null\n}",
      "B8 {\n  $r5 \u003d AbstractHashedMap$HashEntry next\u003e\n  $i6 \u003d AbstractHashedMap$HashEntry: int hashCode\u003e\n  $i7 \u003d r0.hashIndex($i6, i1)\n  $r4 \u003d r3[$i7]\n  AbstractHashedMap$HashEntry next\u003e \u003d $r4\n  r3[$i7] \u003d r7\n  r7 \u003d $r5\n  if ($r5 !\u003d null) goto B9 else B8\n}",
      "B9 {\n  $i11 \u003d (int) -1\n  i9 \u003d i9 + $i11\n  goto B5\n}",
      "B10 {\n  $f0 \u003d AbstractHashedMap: float loadFactor\u003e\n  $i5 \u003d r0.calculateThreshold(i1, $f0)\n  AbstractHashedMap: int threshold\u003e \u003d $i5\n  AbstractHashedMap$HashEntry[] data\u003e \u003d r3\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B11",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B10",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B8",
      "B9 --\u003e B5",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AbstractHashedMap#hashIndex(...2)",
        "body": "{\r\n    return hashCode \u0026 dataSize - 1;\r\n}"
      },
      {
        "name": "AbstractHashedMap#calculateThreshold(...2)",
        "body": "{\r\n    return (int) (newCapacity * factor);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "entrySet",
    "signature": "java.util.Set entrySet()",
    "visibility": "public",
    "body": "{\r\n    if (entrySet \u003d\u003d null) {\r\n        entrySet \u003d new EntrySet\u003c\u003e(this);\r\n    }\r\n    return entrySet;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  $r1 \u003d AbstractHashedMap$EntrySet entrySet\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d AbstractHashedMap$EntrySet\n  new AbstractHashedMap$EntrySet(r0)\n  AbstractHashedMap$EntrySet entrySet\u003e \u003d $r3\n}",
      "B2 {\n  $r2 \u003d AbstractHashedMap$EntrySet entrySet\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (!(obj instanceof Map)) {\r\n        return false;\r\n    }\r\n    final Map\u003c?, ?\u003e map \u003d (Map\u003c?, ?\u003e) obj;\r\n    if (map.size() !\u003d size()) {\r\n        return false;\r\n    }\r\n    final MapIterator\u003c?, ?\u003e it \u003d mapIterator();\r\n    try {\r\n        while (it.hasNext()) {\r\n            final Object key \u003d it.next();\r\n            final Object value \u003d it.getValue();\r\n            if (value \u003d\u003d null) {\r\n                if (map.get(key) !\u003d null || !map.containsKey(key)) {\r\n                    return false;\r\n                }\r\n            } else if (!value.equals(map.get(key))) {\r\n                return false;\r\n            }\r\n        }\r\n    } catch (final ClassCastException | NullPointerException ignored) {\r\n        return false;\r\n    }\r\n    return true;\r\n}",
    "nodes": 25,
    "edges": 38,
    "cc": 15,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($i0 \u003d\u003d $i1) → B5 | else → B6",
      "B8 : If($z1 \u003d\u003d 0) → B9 | else → B22",
      "B11 : If($r5 !\u003d null) → B12 | else → B17",
      "B13 : If($r7 !\u003d null) → B14 | else → B16",
      "B15 : If($z3 !\u003d 0) → B16 | else → B21",
      "B19 : If($z2 !\u003d 0) → B20 | else → B21"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d Map\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d Map) r0\n  $i0 \u003d r2.size()\n  $i1 \u003d r1.size()\n  if ($i0 \u003d\u003d $i1) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r3 \u003d r1.mapIterator()\n}",
      "B7 {\n  $z1 \u003d $r3.hasNext()\n  if ($z1 \u003d\u003d 0) goto B8 else B15\n}",
      "B8 {\n  $r4 \u003d $r3.next()\n  $r5 \u003d $r3.getValue()\n  if ($r5 !\u003d null) goto B9 else B12\n}",
      "B9 {\n  $r7 \u003d r2.get($r4)\n  if ($r7 !\u003d null) goto B10 else B11\n}",
      "B10 {\n  $z3 \u003d r2.containsKey($r4)\n  if ($z3 !\u003d 0) goto B11 else B14\n}",
      "B11 {\n  return\n}",
      "B12 {\n  $r6 \u003d r2.get($r4)\n  $z2 \u003d $r5.equals($r6)\n  if ($z2 !\u003d 0) goto B13 else B14\n}",
      "B13 {\n  return\n}",
      "B14 {\n  goto B7\n}",
      "B15 {\n  goto B17\n}",
      "B16 {\n  $r8 :\u003d @caughtexception\n  return\n}",
      "B17 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B15",
      "B8 --\u003e B9",
      "B8 --\u003e B12",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B7",
      "B15 --\u003e B17",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AbstractHashedMap#mapIterator(...0)",
        "body": "{\r\n    if (size \u003d\u003d 0) {\r\n        return EmptyMapIterator.\u003cK, V\u003eemptyMapIterator();\r\n    }\r\n    return new HashMapIterator\u003c\u003e(this);\r\n}"
      },
      {
        "name": "AbstractHashedMap#size(...0)",
        "body": "{\r\n    return size;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "get",
    "signature": "java.lang.Object get(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    key \u003d convertKey(key);\r\n    final int hashCode \u003d hash(key);\r\n    // no local for hash index\r\n    HashEntry\u003cK, V\u003e entry \u003d data[hashIndex(hashCode, data.length)];\r\n    while (entry !\u003d null) {\r\n        if (entry.hashCode \u003d\u003d hashCode \u0026\u0026 isEqualKey(key, entry.key)) {\r\n            return entry.getValue();\r\n        }\r\n        entry \u003d entry.next;\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r7 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($i3 !\u003d $i0) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  Object\n  $r1 \u003d r0.convertKey(r6)\n  $i0 \u003d r0.hash($r1)\n  $r3 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  $r2 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  $i1 \u003d lengthof $r2\n  $i2 \u003d r0.hashIndex($i0, $i1)\n  r7 \u003d $r3[$i2]\n}",
      "B1 {\n  if (r7 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $i3 \u003d AbstractHashedMap$HashEntry: int hashCode\u003e\n  if ($i3 !\u003d $i0) goto B3 else B5\n}",
      "B3 {\n  $r4 \u003d Object key\u003e\n  $z0 \u003d r0.isEqualKey($r1, $r4)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r5 \u003d r7.getValue()\n  return\n}",
      "B5 {\n  r7 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AbstractHashedMap#hash(...1)",
        "body": "{\r\n    // same as JDK 1.4\r\n    int h \u003d key.hashCode();\r\n    h +\u003d ~(h \u003c\u003c 9);\r\n    h ^\u003d h \u003e\u003e\u003e 14;\r\n    h +\u003d h \u003c\u003c 4;\r\n    h ^\u003d h \u003e\u003e\u003e 10;\r\n    return h;\r\n}"
      },
      {
        "name": "AbstractHashedMap#isEqualKey(...2)",
        "body": "{\r\n    return Objects.equals(key1, key2);\r\n}"
      },
      {
        "name": "AbstractHashedMap#convertKey(...1)",
        "body": "{\r\n    return key \u003d\u003d null ? NULL : key;\r\n}"
      },
      {
        "name": "AbstractHashedMap#hashIndex(...2)",
        "body": "{\r\n    return hashCode \u0026 dataSize - 1;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "getEntry",
    "signature": "org.apache.commons.collections4.map.AbstractHashedMap$HashEntry getEntry(java.lang.Object)",
    "visibility": "protected",
    "body": "{\r\n    key \u003d convertKey(key);\r\n    final int hashCode \u003d hash(key);\r\n    // no local for hash index\r\n    HashEntry\u003cK, V\u003e entry \u003d data[hashIndex(hashCode, data.length)];\r\n    while (entry !\u003d null) {\r\n        if (entry.hashCode \u003d\u003d hashCode \u0026\u0026 isEqualKey(key, entry.key)) {\r\n            return entry;\r\n        }\r\n        entry \u003d entry.next;\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r6 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($i3 !\u003d $i0) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  Object\n  $r1 \u003d r0.convertKey(r5)\n  $i0 \u003d r0.hash($r1)\n  $r3 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  $r2 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  $i1 \u003d lengthof $r2\n  $i2 \u003d r0.hashIndex($i0, $i1)\n  r6 \u003d $r3[$i2]\n}",
      "B1 {\n  if (r6 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $i3 \u003d AbstractHashedMap$HashEntry: int hashCode\u003e\n  if ($i3 !\u003d $i0) goto B3 else B5\n}",
      "B3 {\n  $r4 \u003d Object key\u003e\n  $z0 \u003d r0.isEqualKey($r1, $r4)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  r6 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AbstractHashedMap#hash(...1)",
        "body": "{\r\n    // same as JDK 1.4\r\n    int h \u003d key.hashCode();\r\n    h +\u003d ~(h \u003c\u003c 9);\r\n    h ^\u003d h \u003e\u003e\u003e 14;\r\n    h +\u003d h \u003c\u003c 4;\r\n    h ^\u003d h \u003e\u003e\u003e 10;\r\n    return h;\r\n}"
      },
      {
        "name": "AbstractHashedMap#isEqualKey(...2)",
        "body": "{\r\n    return Objects.equals(key1, key2);\r\n}"
      },
      {
        "name": "AbstractHashedMap#convertKey(...1)",
        "body": "{\r\n    return key \u003d\u003d null ? NULL : key;\r\n}"
      },
      {
        "name": "AbstractHashedMap#hashIndex(...2)",
        "body": "{\r\n    return hashCode \u0026 dataSize - 1;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    int total \u003d 0;\r\n    final Iterator\u003cMap.Entry\u003cK, V\u003e\u003e it \u003d createEntrySetIterator();\r\n    while (it.hasNext()) {\r\n        total +\u003d it.next().hashCode();\r\n    }\r\n    return total;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  i1 \u003d 0\n  $r1 \u003d r0.createEntrySetIterator()\n}",
      "B1 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d $r1.next()\n  $r3 \u003d Map$Entry) $r2\n  $i0 \u003d $r3.hashCode()\n  i1 \u003d i1 + $i0\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AbstractHashedMap#createEntrySetIterator(...0)",
        "body": "{\r\n    if (isEmpty()) {\r\n        return EmptyIterator.\u003cMap.Entry\u003cK, V\u003e\u003eemptyIterator();\r\n    }\r\n    return new EntrySetIterator\u003c\u003e(this);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty()",
    "visibility": "public",
    "body": "{\r\n    return size \u003d\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  $i0 \u003d AbstractHashedMap: int size\u003e\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "keySet",
    "signature": "java.util.Set keySet()",
    "visibility": "public",
    "body": "{\r\n    if (keySet \u003d\u003d null) {\r\n        keySet \u003d new KeySet\u003c\u003e(this);\r\n    }\r\n    return keySet;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  $r1 \u003d AbstractHashedMap$KeySet keySet\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d AbstractHashedMap$KeySet\n  new AbstractHashedMap$KeySet(r0)\n  AbstractHashedMap$KeySet keySet\u003e \u003d $r3\n}",
      "B2 {\n  $r2 \u003d AbstractHashedMap$KeySet keySet\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "mapIterator",
    "signature": "org.apache.commons.collections4.MapIterator mapIterator()",
    "visibility": "public",
    "body": "{\r\n    if (size \u003d\u003d 0) {\r\n        return EmptyMapIterator.\u003cK, V\u003eemptyMapIterator();\r\n    }\r\n    return new HashMapIterator\u003c\u003e(this);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  $i0 \u003d AbstractHashedMap: int size\u003e\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d EmptyMapIterator.emptyMapIterator()\n  return\n}",
      "B2 {\n  $r1 \u003d AbstractHashedMap$HashMapIterator\n  new AbstractHashedMap$HashMapIterator(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "put",
    "signature": "java.lang.Object put(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r8 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($i3 !\u003d $i0) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  Object\n  Object\n  $r2 \u003d r0.convertKey(r1)\n  $i0 \u003d r0.hash($r2)\n  $r3 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  $i1 \u003d lengthof $r3\n  $i2 \u003d r0.hashIndex($i0, $i1)\n  $r4 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  r8 \u003d $r4[$i2]\n}",
      "B1 {\n  if (r8 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $i3 \u003d AbstractHashedMap$HashEntry: int hashCode\u003e\n  if ($i3 !\u003d $i0) goto B3 else B5\n}",
      "B3 {\n  $r6 \u003d Object key\u003e\n  $z0 \u003d r0.isEqualKey($r2, $r6)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r7 \u003d r8.getValue()\n  r0.updateEntry(r8, r5)\n  return\n}",
      "B5 {\n  r8 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B1\n}",
      "B6 {\n  r0.addMapping($i2, $i0, r1, r5)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "putAll",
    "signature": "void putAll(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    final int mapSize \u003d map.size();\r\n    if (mapSize \u003d\u003d 0) {\r\n        return;\r\n    }\r\n    final int newSize \u003d (int) ((size + mapSize) / loadFactor + 1);\r\n    ensureCapacity(calculateNewCapacity(newSize));\r\n    for (final Map.Entry\u003c? extends K, ? extends V\u003e entry : map.entrySet()) {\r\n        put(entry.getKey(), entry.getValue());\r\n    }\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  Map\n  $i0 \u003d r0.size()\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i1 \u003d AbstractHashedMap: int size\u003e\n  $i2 \u003d $i1 + $i0\n  $f1 \u003d (float) $i2\n  $f0 \u003d AbstractHashedMap: float loadFactor\u003e\n  $f2 \u003d $f1 / $f0\n  $f3 \u003d 0F\n  i3 \u003d (int) $f3\n  $i4 \u003d r1.calculateNewCapacity(i3)\n  r1.ensureCapacity($i4)\n  $r2 \u003d r0.entrySet()\n  $r3 \u003d $r2.iterator()\n}",
      "B3 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d $r3.next()\n  r5 \u003d Map$Entry) $r4\n  $r6 \u003d r5.getKey()\n  $r7 \u003d r5.getValue()\n  r1.put($r6, $r7)\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AbstractHashedMap#ensureCapacity(...1)",
        "body": "{\r\n    final int oldCapacity \u003d data.length;\r\n    if (newCapacity \u003c\u003d oldCapacity) {\r\n        return;\r\n    }\r\n    if (size \u003d\u003d 0) {\r\n        threshold \u003d calculateThreshold(newCapacity, loadFactor);\r\n        data \u003d new HashEntry[newCapacity];\r\n    } else {\r\n        final HashEntry\u003cK, V\u003e[] oldEntries \u003d data;\r\n        final HashEntry\u003cK, V\u003e[] newEntries \u003d new HashEntry[newCapacity];\r\n        modCount++;\r\n        for (int i \u003d oldCapacity - 1; i \u003e\u003d 0; i--) {\r\n            HashEntry\u003cK, V\u003e entry \u003d oldEntries[i];\r\n            if (entry !\u003d null) {\r\n                // gc\r\n                oldEntries[i] \u003d null;\r\n                do {\r\n                    final HashEntry\u003cK, V\u003e next \u003d entry.next;\r\n                    final int index \u003d hashIndex(entry.hashCode, newCapacity);\r\n                    entry.next \u003d newEntries[index];\r\n                    newEntries[index] \u003d entry;\r\n                    entry \u003d next;\r\n                } while (entry !\u003d null);\r\n            }\r\n        }\r\n        threshold \u003d calculateThreshold(newCapacity, loadFactor);\r\n        data \u003d newEntries;\r\n    }\r\n}"
      },
      {
        "name": "AbstractHashedMap#put(...2)",
        "body": "{\r\n    final Object convertedKey \u003d convertKey(key);\r\n    final int hashCode \u003d hash(convertedKey);\r\n    final int index \u003d hashIndex(hashCode, data.length);\r\n    HashEntry\u003cK, V\u003e entry \u003d data[index];\r\n    while (entry !\u003d null) {\r\n        if (entry.hashCode \u003d\u003d hashCode \u0026\u0026 isEqualKey(convertedKey, entry.key)) {\r\n            final V oldValue \u003d entry.getValue();\r\n            updateEntry(entry, value);\r\n            return oldValue;\r\n        }\r\n        entry \u003d entry.next;\r\n    }\r\n    addMapping(index, hashCode, key, value);\r\n    return null;\r\n}"
      },
      {
        "name": "AbstractHashedMap#calculateNewCapacity(...1)",
        "body": "{\r\n    int newCapacity \u003d 1;\r\n    if (proposedCapacity \u003e MAXIMUM_CAPACITY) {\r\n        newCapacity \u003d MAXIMUM_CAPACITY;\r\n    } else {\r\n        while (newCapacity \u003c proposedCapacity) {\r\n            // multiply by two\r\n            newCapacity \u003c\u003c\u003d 1;\r\n        }\r\n        if (newCapacity \u003e MAXIMUM_CAPACITY) {\r\n            newCapacity \u003d MAXIMUM_CAPACITY;\r\n        }\r\n    }\r\n    return newCapacity;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "remove",
    "signature": "java.lang.Object remove(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    key \u003d convertKey(key);\r\n    final int hashCode \u003d hash(key);\r\n    final int index \u003d hashIndex(hashCode, data.length);\r\n    HashEntry\u003cK, V\u003e entry \u003d data[index];\r\n    HashEntry\u003cK, V\u003e previous \u003d null;\r\n    while (entry !\u003d null) {\r\n        if (entry.hashCode \u003d\u003d hashCode \u0026\u0026 isEqualKey(key, entry.key)) {\r\n            final V oldValue \u003d entry.getValue();\r\n            removeMapping(entry, index, previous);\r\n            return oldValue;\r\n        }\r\n        previous \u003d entry;\r\n        entry \u003d entry.next;\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r7 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($i3 !\u003d $i0) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  Object\n  $r1 \u003d r0.convertKey(r6)\n  $i0 \u003d r0.hash($r1)\n  $r2 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  $i1 \u003d lengthof $r2\n  $i2 \u003d r0.hashIndex($i0, $i1)\n  $r3 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  r7 \u003d $r3[$i2]\n  r8 \u003d null\n}",
      "B1 {\n  if (r7 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $i3 \u003d AbstractHashedMap$HashEntry: int hashCode\u003e\n  if ($i3 !\u003d $i0) goto B3 else B5\n}",
      "B3 {\n  $r4 \u003d Object key\u003e\n  $z0 \u003d r0.isEqualKey($r1, $r4)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r5 \u003d r7.getValue()\n  r0.removeMapping(r7, $i2, r8)\n  return\n}",
      "B5 {\n  r8 \u003d r7\n  r7 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AbstractHashedMap#hash(...1)",
        "body": "{\r\n    // same as JDK 1.4\r\n    int h \u003d key.hashCode();\r\n    h +\u003d ~(h \u003c\u003c 9);\r\n    h ^\u003d h \u003e\u003e\u003e 14;\r\n    h +\u003d h \u003c\u003c 4;\r\n    h ^\u003d h \u003e\u003e\u003e 10;\r\n    return h;\r\n}"
      },
      {
        "name": "AbstractHashedMap#removeMapping(...3)",
        "body": "{\r\n    modCount++;\r\n    removeEntry(entry, hashIndex, previous);\r\n    size--;\r\n    destroyEntry(entry);\r\n}"
      },
      {
        "name": "AbstractHashedMap#isEqualKey(...2)",
        "body": "{\r\n    return Objects.equals(key1, key2);\r\n}"
      },
      {
        "name": "AbstractHashedMap#convertKey(...1)",
        "body": "{\r\n    return key \u003d\u003d null ? NULL : key;\r\n}"
      },
      {
        "name": "AbstractHashedMap#hashIndex(...2)",
        "body": "{\r\n    return hashCode \u0026 dataSize - 1;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "removeEntry",
    "signature": "void removeEntry(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,int,org.apache.commons.collections4.map.AbstractHashedMap$HashEntry)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  AbstractHashedMap$HashEntry\n  i0 :\u003d @parameter1: int\n  AbstractHashedMap$HashEntry\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  $r4 \u003d AbstractHashedMap$HashEntry next\u003e\n  $r5[i0] \u003d $r4\n  goto B3\n}",
      "B2 {\n  $r2 \u003d AbstractHashedMap$HashEntry next\u003e\n  AbstractHashedMap$HashEntry next\u003e \u003d $r2\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty()) {\r\n        return \"{}\";\r\n    }\r\n    final StringBuilder buf \u003d new StringBuilder(32 * size());\r\n    buf.append(\u0027{\u0027);\r\n    final MapIterator\u003cK, V\u003e it \u003d mapIterator();\r\n    boolean hasNext \u003d it.hasNext();\r\n    while (hasNext) {\r\n        final K key \u003d it.next();\r\n        final V value \u003d it.getValue();\r\n        buf.append(key \u003d\u003d this ? \"(this Map)\" : key).append(\u0027\u003d\u0027).append(value \u003d\u003d this ? \"(this Map)\" : value);\r\n        hasNext \u003d it.hasNext();\r\n        if (hasNext) {\r\n            buf.append(CollectionUtils.COMMA).append(\u0027 \u0027);\r\n        }\r\n    }\r\n    buf.append(\u0027}\u0027);\r\n    return buf.toString();\r\n}",
    "nodes": 14,
    "edges": 17,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B3 : If(z2 \u003d\u003d 0) → B4 | else → B13",
      "B4 : If($r4 !\u003d r0) → B5 | else → B6",
      "B7 : If($r5 !\u003d r0) → B8 | else → B9",
      "B10 : If($z1 \u003d\u003d 0) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d StringBuilder\n  $i0 \u003d r0.size()\n  $i1 \u003d 32 * $i0\n  new StringBuilder($i1)\n  $r1.append(123)\n  $r2 \u003d r0.mapIterator()\n  z2 \u003d $r2.hasNext()\n}",
      "B3 {\n  if (z2 \u003d\u003d 0) goto B4 else B13\n}",
      "B4 {\n  $r4 \u003d $r2.next()\n  $r5 \u003d $r2.getValue()\n  if ($r4 !\u003d r0) goto B5 else B6\n}",
      "B5 {\n  $r9 \u003d \"(this Map)\"\n  goto B7\n}",
      "B6 {\n  $r9 \u003d $r4\n}",
      "B7 {\n  $r6 \u003d $r1.append($r9)\n  $r7 \u003d $r6.append(61)\n  if ($r5 !\u003d r0) goto B8 else B9\n}",
      "B8 {\n  $r10 \u003d \"(this Map)\"\n  goto B10\n}",
      "B9 {\n  $r10 \u003d $r5\n}",
      "B10 {\n  $r7.append($r10)\n  $z1 \u003d $r2.hasNext()\n  z2 \u003d $z1\n  if ($z1 \u003d\u003d 0) goto B11 else B12\n}",
      "B11 {\n  $r8 \u003d $r1.append(\",\")\n  $r8.append(32)\n}",
      "B12 {\n  goto B3\n}",
      "B13 {\n  $r1.append(125)\n  $r3 \u003d $r1.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B13",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e B3",
      "B13 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AbstractHashedMap#mapIterator(...0)",
        "body": "{\r\n    if (size \u003d\u003d 0) {\r\n        return EmptyMapIterator.\u003cK, V\u003eemptyMapIterator();\r\n    }\r\n    return new HashMapIterator\u003c\u003e(this);\r\n}"
      },
      {
        "name": "AbstractHashedMap#isEmpty(...0)",
        "body": "{\r\n    return size \u003d\u003d 0;\r\n}"
      },
      {
        "name": "AbstractHashedMap#size(...0)",
        "body": "{\r\n    return size;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.AbstractHashedMap",
    "methodName": "values",
    "signature": "java.util.Collection values()",
    "visibility": "public",
    "body": "{\r\n    if (values \u003d\u003d null) {\r\n        values \u003d new Values\u003c\u003e(this);\r\n    }\r\n    return values;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  $r1 \u003d AbstractHashedMap$Values values\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d AbstractHashedMap$Values\n  new AbstractHashedMap$Values(r0)\n  AbstractHashedMap$Values values\u003e \u003d $r3\n}",
      "B2 {\n  $r2 \u003d AbstractHashedMap$Values values\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.CaseInsensitiveMap",
    "methodName": "convertKey",
    "signature": "java.lang.Object convertKey(java.lang.Object)",
    "visibility": "protected",
    "body": "{\r\n    if (key !\u003d null) {\r\n        final char[] chars \u003d key.toString().toCharArray();\r\n        for (int i \u003d chars.length - 1; i \u003e\u003d 0; i--) {\r\n            chars[i] \u003d Character.toLowerCase(Character.toUpperCase(chars[i]));\r\n        }\r\n        return new String(chars);\r\n    }\r\n    return NULL;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B5",
      "B2 : If(i4 \u003c 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CaseInsensitiveMap\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  $r2 \u003d r0.toString()\n  $r3 \u003d $r2.toCharArray()\n  $i0 \u003d lengthof $r3\n  i4 \u003d $i0 - 1\n}",
      "B2 {\n  if (i4 \u003c 0) goto B3 else B4\n}",
      "B3 {\n  $c1 \u003d $r3[i4]\n  $c2 \u003d Character.toUpperCase($c1)\n  $c3 \u003d Character.toLowerCase($c2)\n  $r3[i4] \u003d $c3\n  $i6 \u003d (int) -1\n  i4 \u003d i4 + $i6\n  goto B2\n}",
      "B4 {\n  $r6 \u003d String\n  new String($r3)\n  return\n}",
      "B5 {\n  $r1 \u003d Object NULL\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.CompositeMap",
    "methodName": "addComposited",
    "signature": "void addComposited(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    if (map !\u003d null) {\r\n        for (int i \u003d composite.length - 1; i \u003e\u003d 0; --i) {\r\n            final Collection\u003cK\u003e intersect \u003d CollectionUtils.intersection(composite[i].keySet(), map.keySet());\r\n            if (!intersect.isEmpty()) {\r\n                if (mutator \u003d\u003d null) {\r\n                    throw new IllegalArgumentException(\"Key collision adding Map to CompositeMap\");\r\n                }\r\n                mutator.resolveCollision(this, composite[i], map, intersect);\r\n            }\r\n        }\r\n        final Map\u003cK, V\u003e[] temp \u003d Arrays.copyOf(composite, composite.length + 1);\r\n        temp[temp.length - 1] \u003d map;\r\n        composite \u003d temp;\r\n    }\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B9",
      "B2 : If(i5 \u003c 0) → B3 | else → B8",
      "B3 : If($z0 !\u003d 0) → B4 | else → B7",
      "B4 : If($r11 !\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CompositeMap\n  Map\n  if (r0 \u003d\u003d null) goto B1 else B9\n}",
      "B1 {\n  $r2 \u003d Map[] composite\u003e\n  $i0 \u003d lengthof $r2\n  i5 \u003d $i0 - 1\n}",
      "B2 {\n  if (i5 \u003c 0) goto B3 else B8\n}",
      "B3 {\n  $r6 \u003d Map[] composite\u003e\n  $r7 \u003d $r6[i5]\n  $r8 \u003d $r7.keySet()\n  $r9 \u003d r0.keySet()\n  $r10 \u003d CollectionUtils.intersection($r8, $r9)\n  $z0 \u003d $r10.isEmpty()\n  if ($z0 !\u003d 0) goto B4 else B7\n}",
      "B4 {\n  $r11 \u003d CompositeMap$MapMutator mutator\u003e\n  if ($r11 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r17 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Key collision adding Map to CompositeMap\")\n  throw $r17\n}",
      "B6 {\n  $r14 \u003d CompositeMap$MapMutator mutator\u003e\n  $r12 \u003d Map[] composite\u003e\n  $r13 \u003d $r12[i5]\n  $r14.resolveCollision(r1, $r13, r0, $r10)\n}",
      "B7 {\n  $i7 \u003d (int) -1\n  i5 \u003d i5 + $i7\n  goto B2\n}",
      "B8 {\n  $r4 \u003d Map[] composite\u003e\n  $r3 \u003d Map[] composite\u003e\n  $i1 \u003d lengthof $r3\n  $i2 \u003d $i1 + 1\n  $r5 \u003d Arrays.copyOf($r4, $i2)\n  r16 \u003d Map[]) $r5\n  $i3 \u003d lengthof r16\n  $i4 \u003d $i3 - 1\n  r16[$i4] \u003d r0\n  Map[] composite\u003e \u003d r16\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B9",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B8",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e B2",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.CompositeMap",
    "methodName": "clear",
    "signature": "void clear()",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d composite.length - 1; i \u003e\u003d 0; --i) {\r\n        composite[i].clear();\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003c 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CompositeMap\n  $r1 \u003d Map[] composite\u003e\n  $i0 \u003d lengthof $r1\n  i1 \u003d $i0 - 1\n}",
      "B1 {\n  if (i1 \u003c 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d Map[] composite\u003e\n  $r3 \u003d $r2[i1]\n  $r3.clear()\n  $i3 \u003d (int) -1\n  i1 \u003d i1 + $i3\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.CompositeMap",
    "methodName": "containsKey",
    "signature": "boolean containsKey(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d composite.length - 1; i \u003e\u003d 0; --i) {\r\n        if (composite[i].containsKey(key)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003c 0) → B2 | else → B5",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CompositeMap\n  Object\n  $r1 \u003d Map[] composite\u003e\n  $i0 \u003d lengthof $r1\n  i1 \u003d $i0 - 1\n}",
      "B1 {\n  if (i1 \u003c 0) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d Map[] composite\u003e\n  $r4 \u003d $r2[i1]\n  $z0 \u003d $r4.containsKey(r3)\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i3 \u003d (int) -1\n  i1 \u003d i1 + $i3\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.CompositeMap",
    "methodName": "containsValue",
    "signature": "boolean containsValue(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d composite.length - 1; i \u003e\u003d 0; --i) {\r\n        if (composite[i].containsValue(value)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003c 0) → B2 | else → B5",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CompositeMap\n  Object\n  $r1 \u003d Map[] composite\u003e\n  $i0 \u003d lengthof $r1\n  i1 \u003d $i0 - 1\n}",
      "B1 {\n  if (i1 \u003c 0) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d Map[] composite\u003e\n  $r4 \u003d $r2[i1]\n  $z0 \u003d $r4.containsValue(r3)\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i3 \u003d (int) -1\n  i1 \u003d i1 + $i3\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.CompositeMap",
    "methodName": "entrySet",
    "signature": "java.util.Set entrySet()",
    "visibility": "public",
    "body": "{\r\n    final CompositeSet\u003cMap.Entry\u003cK, V\u003e\u003e entries \u003d new CompositeSet\u003c\u003e();\r\n    for (int i \u003d composite.length - 1; i \u003e\u003d 0; --i) {\r\n        entries.addComposited(composite[i].entrySet());\r\n    }\r\n    return entries;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003c 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CompositeMap\n  $r6 \u003d CompositeSet\n  new CompositeSet()\n  $r2 \u003d Map[] composite\u003e\n  $i0 \u003d lengthof $r2\n  i1 \u003d $i0 - 1\n}",
      "B1 {\n  if (i1 \u003c 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d Map[] composite\u003e\n  $r4 \u003d $r3[i1]\n  $r5 \u003d $r4.entrySet()\n  $r6.addComposited($r5)\n  $i3 \u003d (int) -1\n  i1 \u003d i1 + $i3\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.CompositeMap",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj instanceof Map) {\r\n        final Map\u003c?, ?\u003e map \u003d (Map\u003c?, ?\u003e) obj;\r\n        return this.entrySet().equals(map.entrySet());\r\n    }\r\n    return false;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CompositeMap\n  Object\n  $z0 \u003d Map\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r1 \u003d Map) r0\n  $r3 \u003d r2.entrySet()\n  $r4 \u003d r1.entrySet()\n  $z1 \u003d $r3.equals($r4)\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CompositeMap#entrySet(...0)",
        "body": "{\r\n    final CompositeSet\u003cMap.Entry\u003cK, V\u003e\u003e entries \u003d new CompositeSet\u003c\u003e();\r\n    for (int i \u003d composite.length - 1; i \u003e\u003d 0; --i) {\r\n        entries.addComposited(composite[i].entrySet());\r\n    }\r\n    return entries;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.CompositeMap",
    "methodName": "get",
    "signature": "java.lang.Object get(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d composite.length - 1; i \u003e\u003d 0; --i) {\r\n        if (composite[i].containsKey(key)) {\r\n            return composite[i].get(key);\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003c 0) → B2 | else → B5",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CompositeMap\n  Object\n  $r1 \u003d Map[] composite\u003e\n  $i0 \u003d lengthof $r1\n  i1 \u003d $i0 - 1\n}",
      "B1 {\n  if (i1 \u003c 0) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d Map[] composite\u003e\n  $r4 \u003d $r2[i1]\n  $z0 \u003d $r4.containsKey(r3)\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d Map[] composite\u003e\n  $r6 \u003d $r5[i1]\n  $r7 \u003d $r6.get(r3)\n  return\n}",
      "B4 {\n  $i3 \u003d (int) -1\n  i1 \u003d i1 + $i3\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.CompositeMap",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    int code \u003d 0;\r\n    for (final Map.Entry\u003cK, V\u003e entry : entrySet()) {\r\n        code +\u003d entry.hashCode();\r\n    }\r\n    return code;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CompositeMap\n  i1 \u003d 0\n  $r1 \u003d r0.entrySet()\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r4 \u003d Map$Entry) $r3\n  $i0 \u003d r4.hashCode()\n  i1 \u003d i1 + $i0\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CompositeMap#entrySet(...0)",
        "body": "{\r\n    final CompositeSet\u003cMap.Entry\u003cK, V\u003e\u003e entries \u003d new CompositeSet\u003c\u003e();\r\n    for (int i \u003d composite.length - 1; i \u003e\u003d 0; --i) {\r\n        entries.addComposited(composite[i].entrySet());\r\n    }\r\n    return entries;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.CompositeMap",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty()",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d composite.length - 1; i \u003e\u003d 0; --i) {\r\n        if (!composite[i].isEmpty()) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003c 0) → B2 | else → B5",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CompositeMap\n  $r1 \u003d Map[] composite\u003e\n  $i0 \u003d lengthof $r1\n  i1 \u003d $i0 - 1\n}",
      "B1 {\n  if (i1 \u003c 0) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d Map[] composite\u003e\n  $r3 \u003d $r2[i1]\n  $z0 \u003d $r3.isEmpty()\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $i3 \u003d (int) -1\n  i1 \u003d i1 + $i3\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.CompositeMap",
    "methodName": "keySet",
    "signature": "java.util.Set keySet()",
    "visibility": "public",
    "body": "{\r\n    final CompositeSet\u003cK\u003e keys \u003d new CompositeSet\u003c\u003e();\r\n    for (int i \u003d composite.length - 1; i \u003e\u003d 0; --i) {\r\n        keys.addComposited(composite[i].keySet());\r\n    }\r\n    return keys;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003c 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CompositeMap\n  $r6 \u003d CompositeSet\n  new CompositeSet()\n  $r2 \u003d Map[] composite\u003e\n  $i0 \u003d lengthof $r2\n  i1 \u003d $i0 - 1\n}",
      "B1 {\n  if (i1 \u003c 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d Map[] composite\u003e\n  $r4 \u003d $r3[i1]\n  $r5 \u003d $r4.keySet()\n  $r6.addComposited($r5)\n  $i3 \u003d (int) -1\n  i1 \u003d i1 + $i3\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.CompositeMap",
    "methodName": "put",
    "signature": "java.lang.Object put(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CompositeMap\n  Object\n  Object\n  $r1 \u003d CompositeMap$MapMutator mutator\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d UnsupportedOperationException\n  new UnsupportedOperationException(\"No mutator specified\")\n  throw $r7\n}",
      "B2 {\n  $r5 \u003d CompositeMap$MapMutator mutator\u003e\n  $r4 \u003d Map[] composite\u003e\n  $r6 \u003d $r5.put(r0, $r4, r2, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.CompositeMap",
    "methodName": "putAll",
    "signature": "void putAll(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    if (mutator \u003d\u003d null) {\r\n        throw new UnsupportedOperationException(\"No mutator specified\");\r\n    }\r\n    mutator.putAll(this, composite, map);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CompositeMap\n  Map\n  $r1 \u003d CompositeMap$MapMutator mutator\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d UnsupportedOperationException\n  new UnsupportedOperationException(\"No mutator specified\")\n  throw $r5\n}",
      "B2 {\n  $r4 \u003d CompositeMap$MapMutator mutator\u003e\n  $r3 \u003d Map[] composite\u003e\n  $r4.putAll(r0, $r3, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.CompositeMap",
    "methodName": "remove",
    "signature": "java.lang.Object remove(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d composite.length - 1; i \u003e\u003d 0; --i) {\r\n        if (composite[i].containsKey(key)) {\r\n            return composite[i].remove(key);\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003c 0) → B2 | else → B5",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CompositeMap\n  Object\n  $r1 \u003d Map[] composite\u003e\n  $i0 \u003d lengthof $r1\n  i1 \u003d $i0 - 1\n}",
      "B1 {\n  if (i1 \u003c 0) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d Map[] composite\u003e\n  $r4 \u003d $r2[i1]\n  $z0 \u003d $r4.containsKey(r3)\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d Map[] composite\u003e\n  $r6 \u003d $r5[i1]\n  $r7 \u003d $r6.remove(r3)\n  return\n}",
      "B4 {\n  $i3 \u003d (int) -1\n  i1 \u003d i1 + $i3\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.CompositeMap",
    "methodName": "removeComposited",
    "signature": "java.util.Map removeComposited(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    final int size \u003d composite.length;\r\n    for (int i \u003d 0; i \u003c size; ++i) {\r\n        if (composite[i].equals(map)) {\r\n            final Map\u003cK, V\u003e[] temp \u003d new Map[size - 1];\r\n            System.arraycopy(composite, 0, temp, 0, i);\r\n            System.arraycopy(composite, i + 1, temp, i, size - i - 1);\r\n            composite \u003d temp;\r\n            return map;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i5 \u003e\u003d i0) → B2 | else → B5",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CompositeMap\n  Map\n  $r1 \u003d Map[] composite\u003e\n  i0 \u003d lengthof $r1\n  i5 \u003d 0\n}",
      "B1 {\n  if (i5 \u003e\u003d i0) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d Map[] composite\u003e\n  $r4 \u003d $r2[i5]\n  $z0 \u003d $r4.equals(r3)\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $i1 \u003d i0 - 1\n  r5 \u003d Map)[$i1]\n  $r6 \u003d Map[] composite\u003e\n  System.arraycopy($r6, 0, r5, 0, i5)\n  $r7 \u003d Map[] composite\u003e\n  $i4 \u003d i5 + 1\n  $i2 \u003d i0 - i5\n  $i3 \u003d $i2 - 1\n  System.arraycopy($r7, $i4, r5, i5, $i3)\n  Map[] composite\u003e \u003d r5\n  return\n}",
      "B4 {\n  i5 \u003d i5 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.CompositeMap",
    "methodName": "size",
    "signature": "int size()",
    "visibility": "public",
    "body": "{\r\n    int size \u003d 0;\r\n    for (int i \u003d composite.length - 1; i \u003e\u003d 0; --i) {\r\n        size +\u003d composite[i].size();\r\n    }\r\n    return size;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i3 \u003c 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CompositeMap\n  i2 \u003d 0\n  $r1 \u003d Map[] composite\u003e\n  $i0 \u003d lengthof $r1\n  i3 \u003d $i0 - 1\n}",
      "B1 {\n  if (i3 \u003c 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d Map[] composite\u003e\n  $r3 \u003d $r2[i3]\n  $i1 \u003d $r3.size()\n  i2 \u003d i2 + $i1\n  $i5 \u003d (int) -1\n  i3 \u003d i3 + $i5\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.CompositeMap",
    "methodName": "values",
    "signature": "java.util.Collection values()",
    "visibility": "public",
    "body": "{\r\n    final CompositeCollection\u003cV\u003e values \u003d new CompositeCollection\u003c\u003e();\r\n    for (int i \u003d composite.length - 1; i \u003e\u003d 0; --i) {\r\n        values.addComposited(composite[i].values());\r\n    }\r\n    return values;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003c 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CompositeMap\n  $r6 \u003d CompositeCollection\n  new CompositeCollection()\n  $r2 \u003d Map[] composite\u003e\n  $i0 \u003d lengthof $r2\n  i1 \u003d $i0 - 1\n}",
      "B1 {\n  if (i1 \u003c 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d Map[] composite\u003e\n  $r4 \u003d $r3[i1]\n  $r5 \u003d $r4.values()\n  $r6.addComposited($r5)\n  $i3 \u003d (int) -1\n  i1 \u003d i1 + $i3\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.ConcurrentReferenceHashMap",
    "methodName": "clear",
    "signature": "void clear()",
    "visibility": "public",
    "body": "{\r\n    for (final Segment\u003cK, V\u003e segment : segments) {\r\n        segment.clear();\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ConcurrentReferenceHashMap\n  r1 \u003d ConcurrentReferenceHashMap$Segment[] segments\u003e\n  i0 \u003d lengthof r1\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r1[i1]\n  r2.clear()\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.ConcurrentReferenceHashMap",
    "methodName": "computeIfAbsent",
    "signature": "java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ConcurrentReferenceHashMap\n  Object\n  Function\n  Objects.requireNonNull(r0)\n  Objects.requireNonNull(r1)\n  $i0 \u003d r2.hashOf(r0)\n  $r3 \u003d r2.segmentFor($i0)\n  $r4 \u003d $r3.get(r0, $i0)\n  if ($r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d $r3.put(r0, $i0, null, r1, 1)\n  goto B3\n}",
      "B2 {\n  $r5 \u003d $r4\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.ConcurrentReferenceHashMap",
    "methodName": "computeIfPresent",
    "signature": "java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r4 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ConcurrentReferenceHashMap\n  Object\n  BiFunction\n  Objects.requireNonNull(r0)\n  Objects.requireNonNull(r1)\n  $i0 \u003d r2.hashOf(r0)\n  $r3 \u003d r2.segmentFor($i0)\n  $r4 \u003d $r3.get(r0, $i0)\n  if ($r4 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r5 \u003d r2.segmentFor($i0)\n  $r6 \u003d $r5.applyIfPresent(r0, $i0, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.ConcurrentReferenceHashMap",
    "methodName": "containsValue",
    "signature": "boolean containsValue(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(value, \"value\");\r\n    // See explanation of modCount use above\r\n    final Segment\u003cK, V\u003e[] segments \u003d this.segments;\r\n    final int[] mc \u003d new int[segments.length];\r\n    // Try a few times without locking\r\n    for (int k \u003d 0; k \u003c RETRIES_BEFORE_LOCK; ++k) {\r\n        // final int sum \u003d 0;\r\n        int mcsum \u003d 0;\r\n        for (int i \u003d 0; i \u003c segments.length; ++i) {\r\n            // final int c \u003d segments[i].count;\r\n            mcsum +\u003d mc[i] \u003d segments[i].modCount;\r\n            if (segments[i].containsValue(value)) {\r\n                return true;\r\n            }\r\n        }\r\n        boolean cleanSweep \u003d true;\r\n        if (mcsum !\u003d 0) {\r\n            for (int i \u003d 0; i \u003c segments.length; ++i) {\r\n                // final int c \u003d segments[i].count;\r\n                if (mc[i] !\u003d segments[i].modCount) {\r\n                    cleanSweep \u003d false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (cleanSweep) {\r\n            return false;\r\n        }\r\n    }\r\n    // Resort to locking all segments\r\n    for (final Segment\u003cK, V\u003e segment : segments) {\r\n        segment.lock();\r\n    }\r\n    boolean found \u003d false;\r\n    try {\r\n        for (final Segment\u003cK, V\u003e segment : segments) {\r\n            if (segment.containsValue(value)) {\r\n                found \u003d true;\r\n                break;\r\n            }\r\n        }\r\n    } finally {\r\n        for (final Segment\u003cK, V\u003e segment : segments) {\r\n            segment.unlock();\r\n        }\r\n    }\r\n    return found;\r\n}",
    "nodes": 40,
    "edges": 60,
    "cc": 22,
    "flowSummary": [
      "B1 : If(i8 \u003e\u003d 2) → B2 | else → B16",
      "B3 : If(i10 \u003e\u003d $i2) → B4 | else → B7",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B6",
      "B7 : If(i9 \u003d\u003d 0) → B8 | else → B13",
      "B9 : If(i11 \u003e\u003d $i3) → B10 | else → B13",
      "B10 : If($i5 \u003d\u003d $i4) → B11 | else → B12",
      "B13 : If(z2 \u003d\u003d 0) → B14 | else → B15",
      "B17 : If(i13 \u003e\u003d i12) → B18 | else → B19",
      "B22 : If(i15 \u003e\u003d i14) → B23 | else → B30",
      "B25 : If($z0 \u003d\u003d 0) → B26 | else → B28",
      "B31 : If(i16 \u003e\u003d $i1) → B32 | else → B33",
      "B36 : If(i17 \u003e\u003d i7) → B37 | else → B38"
    ],
    "blockList": [
      "B0 {\n  ConcurrentReferenceHashMap\n  Object\n  Objects.requireNonNull(r0, \"value\")\n  r2 \u003d ConcurrentReferenceHashMap$Segment[] segments\u003e\n  $i0 \u003d lengthof r2\n  r3 \u003d newarray (int)[$i0]\n  i8 \u003d 0\n}",
      "B1 {\n  if (i8 \u003e\u003d 2) goto B2 else B16\n}",
      "B2 {\n  i9 \u003d 0\n  i10 \u003d 0\n}",
      "B3 {\n  $i2 \u003d lengthof r2\n  if (i10 \u003e\u003d $i2) goto B4 else B7\n}",
      "B4 {\n  $r5 \u003d r2[i10]\n  $i6 \u003d ConcurrentReferenceHashMap$Segment: int modCount\u003e\n  r3[i10] \u003d $i6\n  i9 \u003d i9 + $i6\n  $r6 \u003d r2[i10]\n  $z1 \u003d $r6.containsValue(r0)\n  if ($z1 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  i10 \u003d i10 + 1\n  goto B3\n}",
      "B7 {\n  z2 \u003d 1\n  if (i9 \u003d\u003d 0) goto B8 else B13\n}",
      "B8 {\n  i11 \u003d 0\n}",
      "B9 {\n  $i3 \u003d lengthof r2\n  if (i11 \u003e\u003d $i3) goto B10 else B13\n}",
      "B10 {\n  $i5 \u003d r3[i11]\n  $r4 \u003d r2[i11]\n  $i4 \u003d ConcurrentReferenceHashMap$Segment: int modCount\u003e\n  if ($i5 \u003d\u003d $i4) goto B11 else B12\n}",
      "B11 {\n  z2 \u003d 0\n  goto B13\n}",
      "B12 {\n  i11 \u003d i11 + 1\n  goto B9\n}",
      "B13 {\n  if (z2 \u003d\u003d 0) goto B14 else B15\n}",
      "B14 {\n  return\n}",
      "B15 {\n  i8 \u003d i8 + 1\n  goto B1\n}",
      "B16 {\n  i12 \u003d lengthof r2\n  i13 \u003d 0\n}",
      "B17 {\n  if (i13 \u003e\u003d i12) goto B18 else B19\n}",
      "B18 {\n  r9 \u003d r2[i13]\n  r9.lock()\n  i13 \u003d i13 + 1\n  goto B17\n}",
      "B19 {\n  z3 \u003d 0\n  i14 \u003d lengthof r2\n  i15 \u003d 0\n}",
      "B20 {\n  if (i15 \u003e\u003d i14) goto B21 else B24\n}",
      "B21 {\n  r10 \u003d r2[i15]\n  $z0 \u003d r10.containsValue(r0)\n  if ($z0 \u003d\u003d 0) goto B22 else B23\n}",
      "B22 {\n  z3 \u003d 1\n  goto B24\n}",
      "B23 {\n  i15 \u003d i15 + 1\n  goto B20\n}",
      "B24 {\n  $i1 \u003d lengthof r2\n  i16 \u003d 0\n}",
      "B25 {\n  if (i16 \u003e\u003d $i1) goto B26 else B27\n}",
      "B26 {\n  r11 \u003d r2[i16]\n  r11.unlock()\n  i16 \u003d i16 + 1\n  goto B25\n}",
      "B27 {\n  goto B32\n}",
      "B28 {\n  $r7 :\u003d @caughtexception\n  i7 \u003d lengthof r2\n  i17 \u003d 0\n}",
      "B29 {\n  if (i17 \u003e\u003d i7) goto B30 else B31\n}",
      "B30 {\n  r8 \u003d r2[i17]\n  r8.unlock()\n  i17 \u003d i17 + 1\n  goto B29\n}",
      "B31 {\n  throw $r7\n}",
      "B32 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B16",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e B8",
      "B7 --\u003e B13",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B13",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B9",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B1",
      "B16 --\u003e B17",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B17",
      "B19 --\u003e B20",
      "B20 --\u003e B21",
      "B20 --\u003e B24",
      "B21 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B20",
      "B24 --\u003e B25",
      "B25 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B25",
      "B27 --\u003e B32",
      "B28 --\u003e B29",
      "B29 --\u003e B30",
      "B29 --\u003e B31",
      "B30 --\u003e B29",
      "B31 --\u003e [EXIT]",
      "B32 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.ConcurrentReferenceHashMap",
    "methodName": "entrySet",
    "signature": "java.util.Set entrySet()",
    "visibility": "public",
    "body": "{\r\n    final Set\u003cEntry\u003cK, V\u003e\u003e es \u003d entrySet;\r\n    return es !\u003d null ? es : (entrySet \u003d new EntrySet(false));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ConcurrentReferenceHashMap\n  r1 \u003d Set entrySet\u003e\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r3 \u003d ConcurrentReferenceHashMap$EntrySet\n  $r2 \u003d $r3\n  new ConcurrentReferenceHashMap$EntrySet(r0, 0)\n  Set entrySet\u003e \u003d $r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.ConcurrentReferenceHashMap",
    "methodName": "hashOf",
    "signature": "int hashOf(java.lang.Object)",
    "visibility": "private",
    "body": "{\r\n    return hash(identityComparisons ? System.identityHashCode(key) : key.hashCode());\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ConcurrentReferenceHashMap\n  Object\n  $z0 \u003d ConcurrentReferenceHashMap: boolean identityComparisons\u003e\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $i1 \u003d System.identityHashCode(r1)\n  goto B3\n}",
      "B2 {\n  $i1 \u003d r1.hashCode()\n}",
      "B3 {\n  $i0 \u003d ConcurrentReferenceHashMap.hash($i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ConcurrentReferenceHashMap#hash(...1)",
        "body": "{\r\n    // Spread bits to regularize both segment and index locations,\r\n    // using variant of single-word Wang/Jenkins hash.\r\n    h +\u003d h \u003c\u003c 15 ^ 0xffffcd7d;\r\n    h ^\u003d h \u003e\u003e\u003e 10;\r\n    h +\u003d h \u003c\u003c 3;\r\n    h ^\u003d h \u003e\u003e\u003e 6;\r\n    h +\u003d (h \u003c\u003c 2) + (h \u003c\u003c 14);\r\n    return h ^ h \u003e\u003e\u003e 16;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.ConcurrentReferenceHashMap",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty()",
    "visibility": "public",
    "body": "{\r\n    final Segment\u003cK, V\u003e[] segments \u003d this.segments;\r\n    //\r\n    // We keep track of per-segment modCounts to avoid ABA problems in which an element in one segment was added and in another removed during traversal, in\r\n    // which case the table was never actually empty at any point. Note the similar use of modCounts in the size() and containsValue() methods, which are\r\n    // the only other methods also susceptible to ABA problems.\r\n    //\r\n    final int[] mc \u003d new int[segments.length];\r\n    int mcsum \u003d 0;\r\n    for (int i \u003d 0; i \u003c segments.length; ++i) {\r\n        if (segments[i].count !\u003d 0) {\r\n            return false;\r\n        }\r\n        mcsum +\u003d mc[i] \u003d segments[i].modCount;\r\n    }\r\n    // If mcsum happens to be zero, then we know we got a snapshot\r\n    // before any modifications at all were made. This is\r\n    // probably common enough to bother tracking.\r\n    if (mcsum !\u003d 0) {\r\n        for (int i \u003d 0; i \u003c segments.length; ++i) {\r\n            if (segments[i].count !\u003d 0 || mc[i] !\u003d segments[i].modCount) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 13,
    "edges": 16,
    "cc": 5,
    "flowSummary": [
      "B1 : If(i9 \u003e\u003d $i1) → B2 | else → B5",
      "B2 : If($i6 \u003d\u003d 0) → B3 | else → B4",
      "B5 : If(i8 \u003d\u003d 0) → B6 | else → B12",
      "B7 : If(i10 \u003e\u003d $i2) → B8 | else → B12",
      "B8 : If($i3 !\u003d 0) → B9 | else → B10",
      "B9 : If($i5 \u003d\u003d $i4) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  ConcurrentReferenceHashMap\n  r1 \u003d ConcurrentReferenceHashMap$Segment[] segments\u003e\n  $i0 \u003d lengthof r1\n  r2 \u003d newarray (int)[$i0]\n  i8 \u003d 0\n  i9 \u003d 0\n}",
      "B1 {\n  $i1 \u003d lengthof r1\n  if (i9 \u003e\u003d $i1) goto B2 else B5\n}",
      "B2 {\n  $r5 \u003d r1[i9]\n  $i6 \u003d ConcurrentReferenceHashMap$Segment: int count\u003e\n  if ($i6 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r6 \u003d r1[i9]\n  $i7 \u003d ConcurrentReferenceHashMap$Segment: int modCount\u003e\n  r2[i9] \u003d $i7\n  i8 \u003d i8 + $i7\n  i9 \u003d i9 + 1\n  goto B1\n}",
      "B5 {\n  if (i8 \u003d\u003d 0) goto B6 else B12\n}",
      "B6 {\n  i10 \u003d 0\n}",
      "B7 {\n  $i2 \u003d lengthof r1\n  if (i10 \u003e\u003d $i2) goto B8 else B12\n}",
      "B8 {\n  $r3 \u003d r1[i10]\n  $i3 \u003d ConcurrentReferenceHashMap$Segment: int count\u003e\n  if ($i3 !\u003d 0) goto B9 else B10\n}",
      "B9 {\n  $i5 \u003d r2[i10]\n  $r4 \u003d r1[i10]\n  $i4 \u003d ConcurrentReferenceHashMap$Segment: int modCount\u003e\n  if ($i5 \u003d\u003d $i4) goto B10 else B11\n}",
      "B10 {\n  return\n}",
      "B11 {\n  i10 \u003d i10 + 1\n  goto B7\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e B6",
      "B5 --\u003e B12",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B12",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B7",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.ConcurrentReferenceHashMap",
    "methodName": "keySet",
    "signature": "java.util.Set keySet()",
    "visibility": "public",
    "body": "{\r\n    final Set\u003cK\u003e ks \u003d keySet;\r\n    return ks !\u003d null ? ks : (keySet \u003d new KeySet());\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ConcurrentReferenceHashMap\n  r1 \u003d Set keySet\u003e\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r3 \u003d ConcurrentReferenceHashMap$KeySet\n  $r2 \u003d $r3\n  new ConcurrentReferenceHashMap$KeySet(r0)\n  Set keySet\u003e \u003d $r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.ConcurrentReferenceHashMap",
    "methodName": "purgeStaleEntries",
    "signature": "void purgeStaleEntries()",
    "visibility": "public",
    "body": "{\r\n    for (final Segment\u003cK, V\u003e segment : segments) {\r\n        segment.removeStale();\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ConcurrentReferenceHashMap\n  r1 \u003d ConcurrentReferenceHashMap$Segment[] segments\u003e\n  i0 \u003d lengthof r1\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r2 \u003d r1[i1]\n  r2.removeStale()\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.ConcurrentReferenceHashMap",
    "methodName": "putAll",
    "signature": "void putAll(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    for (final Entry\u003c? extends K, ? extends V\u003e e : m.entrySet()) {\r\n        put(e.getKey(), e.getValue());\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ConcurrentReferenceHashMap\n  Map\n  $r1 \u003d r0.entrySet()\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r4 \u003d Map$Entry) $r3\n  $r6 \u003d r4.getKey()\n  $r7 \u003d r4.getValue()\n  r5.put($r6, $r7)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ConcurrentReferenceHashMap#put(...2)",
        "body": "{\r\n    Objects.requireNonNull(key, \"key\");\r\n    Objects.requireNonNull(value, \"value\");\r\n    final int hash \u003d hashOf(key);\r\n    return segmentFor(hash).put(key, hash, value, null, false);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.ConcurrentReferenceHashMap",
    "methodName": "remove",
    "signature": "boolean remove(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final int hash \u003d hashOf(key);\r\n    if (value \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return segmentFor(hash).remove(key, hash, value, false) !\u003d null;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2",
      "B2 : If($r4 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ConcurrentReferenceHashMap\n  Object\n  Object\n  $i0 \u003d r0.hashOf(r1)\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d r0.segmentFor($i0)\n  $r4 \u003d $r3.remove(r1, $i0, r2, 0)\n  if ($r4 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $z0 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z0 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ConcurrentReferenceHashMap#segmentFor(...1)",
        "body": "{\r\n    return segments[hash \u003e\u003e\u003e segmentShift \u0026 segmentMask];\r\n}"
      },
      {
        "name": "ConcurrentReferenceHashMap#hashOf(...1)",
        "body": "{\r\n    return hash(identityComparisons ? System.identityHashCode(key) : key.hashCode());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.ConcurrentReferenceHashMap",
    "methodName": "size",
    "signature": "int size()",
    "visibility": "public",
    "body": "{\r\n    final Segment\u003cK, V\u003e[] segments \u003d this.segments;\r\n    long sum \u003d 0;\r\n    long check \u003d 0;\r\n    final int[] mc \u003d new int[segments.length];\r\n    // Try a few times to get accurate count. On failure due to\r\n    // continuous async changes in table, resort to locking.\r\n    for (int k \u003d 0; k \u003c RETRIES_BEFORE_LOCK; ++k) {\r\n        check \u003d 0;\r\n        sum \u003d 0;\r\n        int mcsum \u003d 0;\r\n        for (int i \u003d 0; i \u003c segments.length; ++i) {\r\n            sum +\u003d segments[i].count;\r\n            mcsum +\u003d mc[i] \u003d segments[i].modCount;\r\n        }\r\n        if (mcsum !\u003d 0) {\r\n            for (int i \u003d 0; i \u003c segments.length; ++i) {\r\n                check +\u003d segments[i].count;\r\n                if (mc[i] !\u003d segments[i].modCount) {\r\n                    // force retry\r\n                    check \u003d -1;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (check \u003d\u003d sum) {\r\n            break;\r\n        }\r\n    }\r\n    if (check !\u003d sum) {\r\n        // Resort to locking all segments\r\n        sum \u003d 0;\r\n        for (final Segment\u003cK, V\u003e segment : segments) {\r\n            segment.lock();\r\n        }\r\n        for (final Segment\u003cK, V\u003e segment : segments) {\r\n            sum +\u003d segment.count;\r\n        }\r\n        for (final Segment\u003cK, V\u003e segment : segments) {\r\n            segment.unlock();\r\n        }\r\n    }\r\n    return sum \u003e Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) sum;\r\n}",
    "nodes": 28,
    "edges": 38,
    "cc": 12,
    "flowSummary": [
      "B1 : If(i16 \u003e\u003d 2) → B2 | else → B14",
      "B3 : If(i18 \u003e\u003d $i5) → B4 | else → B5",
      "B5 : If(i17 \u003d\u003d 0) → B6 | else → B11",
      "B7 : If(i19 \u003e\u003d $i6) → B8 | else → B11",
      "B8 : If($i10 \u003d\u003d $i9) → B9 | else → B10",
      "B11 : If($b20 !\u003d 0) → B12 | else → B13",
      "B14 : If($b1 \u003d\u003d 0) → B15 | else → B24",
      "B16 : If(i22 \u003e\u003d i21) → B17 | else → B18",
      "B19 : If(i24 \u003e\u003d i23) → B20 | else → B21",
      "B22 : If(i26 \u003e\u003d i25) → B23 | else → B24",
      "B24 : If($i28 \u003c\u003d 0) → B25 | else → B26"
    ],
    "blockList": [
      "B0 {\n  ConcurrentReferenceHashMap\n  r1 \u003d ConcurrentReferenceHashMap$Segment[] segments\u003e\n  l14 \u003d 0L\n  l15 \u003d 0L\n  $i0 \u003d lengthof r1\n  r2 \u003d newarray (int)[$i0]\n  i16 \u003d 0\n}",
      "B1 {\n  if (i16 \u003e\u003d 2) goto B2 else B14\n}",
      "B2 {\n  l15 \u003d 0L\n  l14 \u003d 0L\n  i17 \u003d 0\n  i18 \u003d 0\n}",
      "B3 {\n  $i5 \u003d lengthof r1\n  if (i18 \u003e\u003d $i5) goto B4 else B5\n}",
      "B4 {\n  $r5 \u003d r1[i18]\n  $i11 \u003d ConcurrentReferenceHashMap$Segment: int count\u003e\n  $l12 \u003d (long) $i11\n  l14 \u003d l14 + $l12\n  $r6 \u003d r1[i18]\n  $i13 \u003d ConcurrentReferenceHashMap$Segment: int modCount\u003e\n  r2[i18] \u003d $i13\n  i17 \u003d i17 + $i13\n  i18 \u003d i18 + 1\n  goto B3\n}",
      "B5 {\n  if (i17 \u003d\u003d 0) goto B6 else B11\n}",
      "B6 {\n  i19 \u003d 0\n}",
      "B7 {\n  $i6 \u003d lengthof r1\n  if (i19 \u003e\u003d $i6) goto B8 else B11\n}",
      "B8 {\n  $r3 \u003d r1[i19]\n  $i7 \u003d ConcurrentReferenceHashMap$Segment: int count\u003e\n  $l8 \u003d (long) $i7\n  l15 \u003d l15 + $l8\n  $i10 \u003d r2[i19]\n  $r4 \u003d r1[i19]\n  $i9 \u003d ConcurrentReferenceHashMap$Segment: int modCount\u003e\n  if ($i10 \u003d\u003d $i9) goto B9 else B10\n}",
      "B9 {\n  l15 \u003d -1L\n  goto B11\n}",
      "B10 {\n  i19 \u003d i19 + 1\n  goto B7\n}",
      "B11 {\n  $b20 \u003d l15 cmp l14\n  if ($b20 !\u003d 0) goto B12 else B13\n}",
      "B12 {\n  goto B14\n}",
      "B13 {\n  i16 \u003d i16 + 1\n  goto B1\n}",
      "B14 {\n  $b1 \u003d l15 cmp l14\n  if ($b1 \u003d\u003d 0) goto B15 else B24\n}",
      "B15 {\n  l14 \u003d 0L\n  i21 \u003d lengthof r1\n  i22 \u003d 0\n}",
      "B16 {\n  if (i22 \u003e\u003d i21) goto B17 else B18\n}",
      "B17 {\n  r7 \u003d r1[i22]\n  r7.lock()\n  i22 \u003d i22 + 1\n  goto B16\n}",
      "B18 {\n  i23 \u003d lengthof r1\n  i24 \u003d 0\n}",
      "B19 {\n  if (i24 \u003e\u003d i23) goto B20 else B21\n}",
      "B20 {\n  r8 \u003d r1[i24]\n  $i3 \u003d ConcurrentReferenceHashMap$Segment: int count\u003e\n  $l4 \u003d (long) $i3\n  l14 \u003d l14 + $l4\n  i24 \u003d i24 + 1\n  goto B19\n}",
      "B21 {\n  i25 \u003d lengthof r1\n  i26 \u003d 0\n}",
      "B22 {\n  if (i26 \u003e\u003d i25) goto B23 else B24\n}",
      "B23 {\n  r9 \u003d r1[i26]\n  r9.unlock()\n  i26 \u003d i26 + 1\n  goto B22\n}",
      "B24 {\n  $b2 \u003d l14 cmp 2147483647L\n  $i28 \u003d (int) $b2\n  if ($i28 \u003c\u003d 0) goto B25 else B26\n}",
      "B25 {\n  $i27 \u003d 2147483647\n  goto B27\n}",
      "B26 {\n  $i27 \u003d (int) l14\n}",
      "B27 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B14",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e B6",
      "B5 --\u003e B11",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B11",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B7",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B1",
      "B14 --\u003e B15",
      "B14 --\u003e B24",
      "B15 --\u003e B16",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B16",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B19",
      "B21 --\u003e B22",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B22",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B27",
      "B27 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.ConcurrentReferenceHashMap",
    "methodName": "values",
    "signature": "java.util.Collection values()",
    "visibility": "public",
    "body": "{\r\n    final Collection\u003cV\u003e vs \u003d values;\r\n    return vs !\u003d null ? vs : (values \u003d new Values());\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ConcurrentReferenceHashMap\n  r1 \u003d Collection values\u003e\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r3 \u003d ConcurrentReferenceHashMap$Values\n  $r2 \u003d $r3\n  new ConcurrentReferenceHashMap$Values(r0)\n  Collection values\u003e \u003d $r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.DefaultedMap",
    "methodName": "get",
    "signature": "java.lang.Object get(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final V v;\r\n    return (v \u003d map.get(key)) !\u003d null || map.containsKey(key) ? v : value.apply((K) key);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r3 !\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  DefaultedMap\n  Object\n  $r2 \u003d Map map\u003e\n  $r3 \u003d $r2.get(r1)\n  if ($r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d Map map\u003e\n  $z0 \u003d $r4.containsKey(r1)\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r6 \u003d $r3\n  goto B4\n}",
      "B3 {\n  $r5 \u003d Transformer value\u003e\n  $r6 \u003d $r5.apply(r1)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter",
    "methodName": "current",
    "signature": "java.util.Map$Entry current()",
    "visibility": "protected",
    "body": "{\r\n    if (entry \u003d\u003d null) {\r\n        throw new IllegalStateException();\r\n    }\r\n    return entry;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  EntrySetToMapIteratorAdapter\n  $r1 \u003d Map$Entry entry\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IllegalStateException\n  new IllegalStateException()\n  throw $r3\n}",
      "B2 {\n  $r2 \u003d Map$Entry entry\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.FixedSizeMap",
    "methodName": "put",
    "signature": "java.lang.Object put(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  FixedSizeMap\n  Object\n  Object\n  $r2 \u003d Map map\u003e\n  $z0 \u003d $r2.containsKey(r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\")\n  throw $r6\n}",
      "B2 {\n  $r4 \u003d Map map\u003e\n  $r5 \u003d $r4.put(r1, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.FixedSizeMap",
    "methodName": "putAll",
    "signature": "void putAll(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    for (final K key : mapToCopy.keySet()) {\r\n        if (!containsKey(key)) {\r\n            throw new IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\");\r\n        }\r\n    }\r\n    map.putAll(mapToCopy);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  FixedSizeMap\n  Map\n  $r1 \u003d r0.keySet()\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $r5 \u003d $r2.next()\n  $z1 \u003d r3.containsKey($r5)\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\")\n  throw $r6\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  $r4 \u003d Map map\u003e\n  $r4.putAll(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FixedSizeMap#containsKey(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.FixedSizeSortedMap",
    "methodName": "put",
    "signature": "java.lang.Object put(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  FixedSizeSortedMap\n  Object\n  Object\n  $r2 \u003d Map map\u003e\n  $z0 \u003d $r2.containsKey(r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r6 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\")\n  throw $r6\n}",
      "B2 {\n  $r4 \u003d Map map\u003e\n  $r5 \u003d $r4.put(r1, r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.FixedSizeSortedMap",
    "methodName": "putAll",
    "signature": "void putAll(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    if (CollectionUtils.isSubCollection(mapToCopy.keySet(), keySet())) {\r\n        throw new IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\");\r\n    }\r\n    map.putAll(mapToCopy);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  FixedSizeSortedMap\n  Map\n  $r1 \u003d r0.keySet()\n  $r3 \u003d r2.keySet()\n  $z0 \u003d CollectionUtils.isSubCollection($r1, $r3)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\")\n  throw $r5\n}",
      "B2 {\n  $r4 \u003d Map map\u003e\n  $r4.putAll(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "FixedSizeSortedMap#keySet(...0)",
        "body": "{\r\n    return UnmodifiableSet.unmodifiableSet(map.keySet());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.Flat3Map",
    "methodName": "clear",
    "signature": "void clear()",
    "visibility": "public",
    "body": "{\r\n    if (delegateMap !\u003d null) {\r\n        // should aid gc\r\n        delegateMap.clear();\r\n        // switch back to flat mode\r\n        delegateMap \u003d null;\r\n    } else {\r\n        size \u003d 0;\r\n        hash1 \u003d hash2 \u003d hash3 \u003d 0;\r\n        key1 \u003d key2 \u003d key3 \u003d null;\r\n        value1 \u003d value2 \u003d value3 \u003d null;\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Flat3Map\n  $r1 \u003d AbstractHashedMap delegateMap\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d AbstractHashedMap delegateMap\u003e\n  $r2.clear()\n  AbstractHashedMap delegateMap\u003e \u003d null\n  goto B3\n}",
      "B2 {\n  Flat3Map: int size\u003e \u003d 0\n  Flat3Map: int hash3\u003e \u003d 0\n  Flat3Map: int hash2\u003e \u003d 0\n  Flat3Map: int hash1\u003e \u003d 0\n  Object key3\u003e \u003d null\n  Object key2\u003e \u003d null\n  Object key1\u003e \u003d null\n  Object value3\u003e \u003d null\n  Object value2\u003e \u003d null\n  Object value1\u003e \u003d null\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.Flat3Map",
    "methodName": "clone",
    "signature": "org.apache.commons.collections4.map.Flat3Map clone()",
    "visibility": "public",
    "body": "{\r\n    try {\r\n        final Flat3Map\u003cK, V\u003e cloned \u003d (Flat3Map\u003cK, V\u003e) super.clone();\r\n        if (cloned.delegateMap !\u003d null) {\r\n            cloned.delegateMap \u003d cloned.delegateMap.clone();\r\n        }\r\n        return cloned;\r\n    } catch (final CloneNotSupportedException ex) {\r\n        throw new UnsupportedOperationException(ex);\r\n    }\r\n}",
    "nodes": 8,
    "edges": 11,
    "cc": 5,
    "flowSummary": [
      "B2 : If($r2 \u003d\u003d null) → B3 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Flat3Map\n  $r1 \u003d r0.clone()\n  r7 \u003d Flat3Map) $r1\n  $r2 \u003d AbstractHashedMap delegateMap\u003e\n  if ($r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d AbstractHashedMap delegateMap\u003e\n  $r4 \u003d $r3.clone()\n  AbstractHashedMap delegateMap\u003e \u003d $r4\n}",
      "B2 {\n  return\n}",
      "B3 {\n  $r5 :\u003d @caughtexception\n  $r6 \u003d UnsupportedOperationException\n  new UnsupportedOperationException($r5)\n  throw $r6\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.Flat3Map",
    "methodName": "containsKey",
    "signature": "boolean containsKey(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (delegateMap !\u003d null) {\r\n        return delegateMap.containsKey(key);\r\n    }\r\n    if (key \u003d\u003d null) {\r\n        switch(// drop through\r\n        size) {\r\n            case 3:\r\n                if (key3 \u003d\u003d null) {\r\n                    return true;\r\n                }\r\n            case 2:\r\n                if (key2 \u003d\u003d null) {\r\n                    return true;\r\n                }\r\n            case 1:\r\n                if (key1 \u003d\u003d null) {\r\n                    return true;\r\n                }\r\n        }\r\n    } else if (size \u003e 0) {\r\n        final int hashCode \u003d key.hashCode();\r\n        switch(// drop through\r\n        size) {\r\n            case 3:\r\n                if (hash3 \u003d\u003d hashCode \u0026\u0026 key.equals(key3)) {\r\n                    return true;\r\n                }\r\n            case 2:\r\n                if (hash2 \u003d\u003d hashCode \u0026\u0026 key.equals(key2)) {\r\n                    return true;\r\n                }\r\n            case 1:\r\n                if (hash1 \u003d\u003d hashCode \u0026\u0026 key.equals(key1)) {\r\n                    return true;\r\n                }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 23,
    "edges": 33,
    "cc": 12,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(r2 !\u003d null) → B3 | else → B11",
      "B3 : If(switch-on $i4) → B8 | else → B6",
      "B4 : If($r6 !\u003d null) → B5 | else → B6",
      "B6 : If($r7 !\u003d null) → B7 | else → B8",
      "B8 : If($r8 !\u003d null) → B9 | else → B10",
      "B11 : If($i0 \u003c\u003d 0) → B12 | else → B22",
      "B12 : If(switch-on $i2) → B19 | else → B16",
      "B13 : If($i3 !\u003d $i1) → B14 | else → B16",
      "B14 : If($z2 \u003d\u003d 0) → B15 | else → B16",
      "B16 : If($i5 !\u003d $i1) → B17 | else → B19",
      "B17 : If($z1 \u003d\u003d 0) → B18 | else → B19",
      "B19 : If($i6 !\u003d $i1) → B20 | else → B22",
      "B20 : If($z0 \u003d\u003d 0) → B21 | else → B22"
    ],
    "blockList": [
      "B0 {\n  Flat3Map\n  Object\n  $r1 \u003d AbstractHashedMap delegateMap\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d AbstractHashedMap delegateMap\u003e\n  $z3 \u003d $r9.containsKey(r2)\n  return\n}",
      "B2 {\n  if (r2 !\u003d null) goto B3 else B11\n}",
      "B3 {\n  $i4 \u003d Flat3Map: int size\u003e\n  Object key3\u003e;     default: goto goto [?\u003d return 0]; }\n}",
      "B4 {\n  $r6 \u003d Object key3\u003e\n  if ($r6 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r7 \u003d Object key2\u003e\n  if ($r7 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $r8 \u003d Object key1\u003e\n  if ($r8 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  goto B22\n}",
      "B11 {\n  $i0 \u003d Flat3Map: int size\u003e\n  if ($i0 \u003c\u003d 0) goto B12 else B22\n}",
      "B12 {\n  $i1 \u003d r2.hashCode()\n  $i2 \u003d Flat3Map: int size\u003e\n  Flat3Map: int hash3\u003e;     default: goto return 0; }\n}",
      "B13 {\n  $i3 \u003d Flat3Map: int hash3\u003e\n  if ($i3 !\u003d $i1) goto B14 else B16\n}",
      "B14 {\n  $r5 \u003d Object key3\u003e\n  $z2 \u003d r2.equals($r5)\n  if ($z2 \u003d\u003d 0) goto B15 else B16\n}",
      "B15 {\n  return\n}",
      "B16 {\n  $i5 \u003d Flat3Map: int hash2\u003e\n  if ($i5 !\u003d $i1) goto B17 else B19\n}",
      "B17 {\n  $r4 \u003d Object key2\u003e\n  $z1 \u003d r2.equals($r4)\n  if ($z1 \u003d\u003d 0) goto B18 else B19\n}",
      "B18 {\n  return\n}",
      "B19 {\n  $i6 \u003d Flat3Map: int hash1\u003e\n  if ($i6 !\u003d $i1) goto B20 else B22\n}",
      "B20 {\n  $r3 \u003d Object key1\u003e\n  $z0 \u003d r2.equals($r3)\n  if ($z0 \u003d\u003d 0) goto B21 else B22\n}",
      "B21 {\n  return\n}",
      "B22 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B11",
      "B3 --\u003e B8",
      "B3 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B10",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B22",
      "B11 --\u003e B12",
      "B11 --\u003e B22",
      "B12 --\u003e B19",
      "B12 --\u003e B16",
      "B12 --\u003e B13",
      "B12 --\u003e B22",
      "B13 --\u003e B14",
      "B13 --\u003e B16",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B19",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e B20",
      "B19 --\u003e B22",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e [EXIT]",
      "B22 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.Flat3Map",
    "methodName": "containsValue",
    "signature": "boolean containsValue(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (delegateMap !\u003d null) {\r\n        return delegateMap.containsValue(value);\r\n    }\r\n    if (value \u003d\u003d null) {\r\n        // drop through\r\n        switch(size) {\r\n            case 3:\r\n                if (value3 \u003d\u003d null) {\r\n                    return true;\r\n                }\r\n            case 2:\r\n                if (value2 \u003d\u003d null) {\r\n                    return true;\r\n                }\r\n            case 1:\r\n                if (value1 \u003d\u003d null) {\r\n                    return true;\r\n                }\r\n        }\r\n    } else {\r\n        switch(// drop through\r\n        size) {\r\n            case 3:\r\n                if (value.equals(value3)) {\r\n                    return true;\r\n                }\r\n            case 2:\r\n                if (value.equals(value2)) {\r\n                    return true;\r\n                }\r\n            case 1:\r\n                if (value.equals(value1)) {\r\n                    return true;\r\n                }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 19,
    "edges": 25,
    "cc": 8,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(r2 !\u003d null) → B3 | else → B11",
      "B3 : If(switch-on $i1) → B8 | else → B6",
      "B4 : If($r6 !\u003d null) → B5 | else → B6",
      "B6 : If($r7 !\u003d null) → B7 | else → B8",
      "B8 : If($r8 !\u003d null) → B9 | else → B10",
      "B11 : If(switch-on $i0) → B16 | else → B14",
      "B12 : If($z0 \u003d\u003d 0) → B13 | else → B14",
      "B14 : If($z1 \u003d\u003d 0) → B15 | else → B16",
      "B16 : If($z2 \u003d\u003d 0) → B17 | else → B18"
    ],
    "blockList": [
      "B0 {\n  Flat3Map\n  Object\n  $r1 \u003d AbstractHashedMap delegateMap\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r9 \u003d AbstractHashedMap delegateMap\u003e\n  $z3 \u003d $r9.containsValue(r2)\n  return\n}",
      "B2 {\n  if (r2 !\u003d null) goto B3 else B11\n}",
      "B3 {\n  $i1 \u003d Flat3Map: int size\u003e\n  Object value3\u003e;     default: goto goto [?\u003d return 0]; }\n}",
      "B4 {\n  $r6 \u003d Object value3\u003e\n  if ($r6 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r7 \u003d Object value2\u003e\n  if ($r7 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $r8 \u003d Object value1\u003e\n  if ($r8 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  return\n}",
      "B10 {\n  goto B18\n}",
      "B11 {\n  $i0 \u003d Flat3Map: int size\u003e\n  Object value3\u003e;     default: goto return 0; }\n}",
      "B12 {\n  $r3 \u003d Object value3\u003e\n  $z0 \u003d r2.equals($r3)\n  if ($z0 \u003d\u003d 0) goto B13 else B14\n}",
      "B13 {\n  return\n}",
      "B14 {\n  $r4 \u003d Object value2\u003e\n  $z1 \u003d r2.equals($r4)\n  if ($z1 \u003d\u003d 0) goto B15 else B16\n}",
      "B15 {\n  return\n}",
      "B16 {\n  $r5 \u003d Object value1\u003e\n  $z2 \u003d r2.equals($r5)\n  if ($z2 \u003d\u003d 0) goto B17 else B18\n}",
      "B17 {\n  return\n}",
      "B18 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B11",
      "B3 --\u003e B8",
      "B3 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B10",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B18",
      "B11 --\u003e B16",
      "B11 --\u003e B14",
      "B11 --\u003e B12",
      "B11 --\u003e B18",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.Flat3Map",
    "methodName": "convertToMap",
    "signature": "void convertToMap()",
    "visibility": "private",
    "body": "{\r\n    delegateMap \u003d createDelegateMap();\r\n    switch(// drop through\r\n    size) {\r\n        case 3:\r\n            delegateMap.put(key3, value3);\r\n        case 2:\r\n            delegateMap.put(key2, value2);\r\n        case 1:\r\n            delegateMap.put(key1, value1);\r\n        case 0:\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Invalid map index: \" + size);\r\n    }\r\n    size \u003d 0;\r\n    hash1 \u003d hash2 \u003d hash3 \u003d 0;\r\n    key1 \u003d key2 \u003d key3 \u003d null;\r\n    value1 \u003d value2 \u003d value3 \u003d null;\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B4 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Flat3Map\n  $r1 \u003d r0.createDelegateMap()\n  AbstractHashedMap delegateMap\u003e \u003d $r1\n  $i0 \u003d Flat3Map: int size\u003e\n  IllegalStateException; }\n}",
      "B1 {\n  $r4 \u003d AbstractHashedMap delegateMap\u003e\n  $r3 \u003d Object key3\u003e\n  $r2 \u003d Object value3\u003e\n  $r4.put($r3, $r2)\n}",
      "B2 {\n  $r7 \u003d AbstractHashedMap delegateMap\u003e\n  $r6 \u003d Object key2\u003e\n  $r5 \u003d Object value2\u003e\n  $r7.put($r6, $r5)\n}",
      "B3 {\n  $r10 \u003d AbstractHashedMap delegateMap\u003e\n  $r11 \u003d Object key1\u003e\n  $r12 \u003d Object value1\u003e\n  $r10.put($r11, $r12)\n}",
      "B4 {\n  goto B6\n}",
      "B5 {\n  $r8 \u003d IllegalStateException\n  $i1 \u003d Flat3Map: int size\u003e\n  $r9 \u003d dynInvoke makeConcatWithConstants($i1)\n  new IllegalStateException($r9)\n  throw $r8\n}",
      "B6 {\n  Flat3Map: int size\u003e \u003d 0\n  Flat3Map: int hash3\u003e \u003d 0\n  Flat3Map: int hash2\u003e \u003d 0\n  Flat3Map: int hash1\u003e \u003d 0\n  Object key3\u003e \u003d null\n  Object key2\u003e \u003d null\n  Object key1\u003e \u003d null\n  Object value3\u003e \u003d null\n  Object value2\u003e \u003d null\n  Object value1\u003e \u003d null\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B4",
      "B0 --\u003e B3",
      "B0 --\u003e B2",
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Flat3Map#createDelegateMap(...0)",
        "body": "{\r\n    return new HashedMap\u003c\u003e();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.Flat3Map",
    "methodName": "entrySet",
    "signature": "java.util.Set entrySet()",
    "visibility": "public",
    "body": "{\r\n    if (delegateMap !\u003d null) {\r\n        return delegateMap.entrySet();\r\n    }\r\n    return new EntrySet\u003c\u003e(this);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Flat3Map\n  $r1 \u003d AbstractHashedMap delegateMap\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d AbstractHashedMap delegateMap\u003e\n  $r4 \u003d $r3.entrySet()\n  return\n}",
      "B2 {\n  $r2 \u003d Flat3Map$EntrySet\n  new Flat3Map$EntrySet(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.Flat3Map",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (delegateMap !\u003d null) {\r\n        return delegateMap.equals(obj);\r\n    }\r\n    if (!(obj instanceof Map)) {\r\n        return false;\r\n    }\r\n    final Map\u003c?, ?\u003e other \u003d (Map\u003c?, ?\u003e) obj;\r\n    if (size !\u003d other.size()) {\r\n        return false;\r\n    }\r\n    if (size \u003e 0) {\r\n        Object otherValue \u003d null;\r\n        switch(// drop through\r\n        size) {\r\n            case 3:\r\n                if (!other.containsKey(key3)) {\r\n                    return false;\r\n                }\r\n                otherValue \u003d other.get(key3);\r\n                if (!Objects.equals(value3, otherValue)) {\r\n                    return false;\r\n                }\r\n            case 2:\r\n                if (!other.containsKey(key2)) {\r\n                    return false;\r\n                }\r\n                otherValue \u003d other.get(key2);\r\n                if (!Objects.equals(value2, otherValue)) {\r\n                    return false;\r\n                }\r\n            case 1:\r\n                if (!other.containsKey(key1)) {\r\n                    return false;\r\n                }\r\n                otherValue \u003d other.get(key1);\r\n                if (!Objects.equals(value1, otherValue)) {\r\n                    return false;\r\n                }\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 23,
    "edges": 26,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($r2 \u003d\u003d null) → B3 | else → B4",
      "B4 : If($z0 !\u003d 0) → B5 | else → B6",
      "B6 : If($i0 \u003d\u003d $i1) → B7 | else → B8",
      "B8 : If($i2 \u003c\u003d 0) → B9 | else → B22",
      "B9 : If(switch-on $i3) → B18 | else → B14",
      "B10 : If($z1 !\u003d 0) → B11 | else → B12",
      "B12 : If($z2 !\u003d 0) → B13 | else → B14",
      "B14 : If($z3 !\u003d 0) → B15 | else → B16",
      "B16 : If($z4 !\u003d 0) → B17 | else → B18",
      "B18 : If($z5 !\u003d 0) → B19 | else → B20",
      "B20 : If($z6 !\u003d 0) → B21 | else → B22"
    ],
    "blockList": [
      "B0 {\n  Flat3Map\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d AbstractHashedMap delegateMap\u003e\n  if ($r2 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r16 \u003d AbstractHashedMap delegateMap\u003e\n  $z7 \u003d $r16.equals(r0)\n  return\n}",
      "B4 {\n  $z0 \u003d Map\n  if ($z0 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  r3 \u003d Map) r0\n  $i0 \u003d Flat3Map: int size\u003e\n  $i1 \u003d r3.size()\n  if ($i0 \u003d\u003d $i1) goto B7 else B8\n}",
      "B7 {\n  return\n}",
      "B8 {\n  $i2 \u003d Flat3Map: int size\u003e\n  if ($i2 \u003c\u003d 0) goto B9 else B22\n}",
      "B9 {\n  $i3 \u003d Flat3Map: int size\u003e\n  Object key3\u003e;     default: goto return 1; }\n}",
      "B10 {\n  $r4 \u003d Object key3\u003e\n  $z1 \u003d r3.containsKey($r4)\n  if ($z1 !\u003d 0) goto B11 else B12\n}",
      "B11 {\n  return\n}",
      "B12 {\n  $r5 \u003d Object key3\u003e\n  $r6 \u003d r3.get($r5)\n  $r7 \u003d Object value3\u003e\n  $z2 \u003d Objects.equals($r7, $r6)\n  if ($z2 !\u003d 0) goto B13 else B14\n}",
      "B13 {\n  return\n}",
      "B14 {\n  $r8 \u003d Object key2\u003e\n  $z3 \u003d r3.containsKey($r8)\n  if ($z3 !\u003d 0) goto B15 else B16\n}",
      "B15 {\n  return\n}",
      "B16 {\n  $r9 \u003d Object key2\u003e\n  $r10 \u003d r3.get($r9)\n  $r11 \u003d Object value2\u003e\n  $z4 \u003d Objects.equals($r11, $r10)\n  if ($z4 !\u003d 0) goto B17 else B18\n}",
      "B17 {\n  return\n}",
      "B18 {\n  $r12 \u003d Object key1\u003e\n  $z5 \u003d r3.containsKey($r12)\n  if ($z5 !\u003d 0) goto B19 else B20\n}",
      "B19 {\n  return\n}",
      "B20 {\n  $r13 \u003d Object key1\u003e\n  $r14 \u003d r3.get($r13)\n  $r15 \u003d Object value1\u003e\n  $z6 \u003d Objects.equals($r15, $r14)\n  if ($z6 !\u003d 0) goto B21 else B22\n}",
      "B21 {\n  return\n}",
      "B22 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B22",
      "B9 --\u003e B18",
      "B9 --\u003e B14",
      "B9 --\u003e B10",
      "B9 --\u003e B22",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e [EXIT]",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e [EXIT]",
      "B22 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.Flat3Map",
    "methodName": "get",
    "signature": "java.lang.Object get(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (delegateMap !\u003d null) {\r\n        return delegateMap.get(key);\r\n    }\r\n    if (key \u003d\u003d null) {\r\n        switch(size) {\r\n            // drop through\r\n            case 3:\r\n                if (key3 \u003d\u003d null) {\r\n                    return value3;\r\n                }\r\n            case 2:\r\n                if (key2 \u003d\u003d null) {\r\n                    return value2;\r\n                }\r\n            case 1:\r\n                if (key1 \u003d\u003d null) {\r\n                    return value1;\r\n                }\r\n        }\r\n    } else if (size \u003e 0) {\r\n        final int hashCode \u003d key.hashCode();\r\n        switch(size) {\r\n            // drop through\r\n            case 3:\r\n                if (hash3 \u003d\u003d hashCode \u0026\u0026 key.equals(key3)) {\r\n                    return value3;\r\n                }\r\n            case 2:\r\n                if (hash2 \u003d\u003d hashCode \u0026\u0026 key.equals(key2)) {\r\n                    return value2;\r\n                }\r\n            case 1:\r\n                if (hash1 \u003d\u003d hashCode \u0026\u0026 key.equals(key1)) {\r\n                    return value1;\r\n                }\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 23,
    "edges": 33,
    "cc": 12,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(r2 !\u003d null) → B3 | else → B11",
      "B3 : If(switch-on $i4) → B8 | else → B6",
      "B4 : If($r9 !\u003d null) → B5 | else → B6",
      "B6 : If($r10 !\u003d null) → B7 | else → B8",
      "B8 : If($r11 !\u003d null) → B9 | else → B10",
      "B11 : If($i0 \u003c\u003d 0) → B12 | else → B22",
      "B12 : If(switch-on $i2) → B19 | else → B16",
      "B13 : If($i3 !\u003d $i1) → B14 | else → B16",
      "B14 : If($z2 \u003d\u003d 0) → B15 | else → B16",
      "B16 : If($i5 !\u003d $i1) → B17 | else → B19",
      "B17 : If($z1 \u003d\u003d 0) → B18 | else → B19",
      "B19 : If($i6 !\u003d $i1) → B20 | else → B22",
      "B20 : If($z0 \u003d\u003d 0) → B21 | else → B22"
    ],
    "blockList": [
      "B0 {\n  Flat3Map\n  Object\n  $r1 \u003d AbstractHashedMap delegateMap\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r15 \u003d AbstractHashedMap delegateMap\u003e\n  $r16 \u003d $r15.get(r2)\n  return\n}",
      "B2 {\n  if (r2 !\u003d null) goto B3 else B11\n}",
      "B3 {\n  $i4 \u003d Flat3Map: int size\u003e\n  Object key3\u003e;     default: goto goto [?\u003d return null]; }\n}",
      "B4 {\n  $r9 \u003d Object key3\u003e\n  if ($r9 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r14 \u003d Object value3\u003e\n  return\n}",
      "B6 {\n  $r10 \u003d Object key2\u003e\n  if ($r10 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  $r13 \u003d Object value2\u003e\n  return\n}",
      "B8 {\n  $r11 \u003d Object key1\u003e\n  if ($r11 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  $r12 \u003d Object value1\u003e\n  return\n}",
      "B10 {\n  goto B22\n}",
      "B11 {\n  $i0 \u003d Flat3Map: int size\u003e\n  if ($i0 \u003c\u003d 0) goto B12 else B22\n}",
      "B12 {\n  $i1 \u003d r2.hashCode()\n  $i2 \u003d Flat3Map: int size\u003e\n  Flat3Map: int hash3\u003e;     default: goto return null; }\n}",
      "B13 {\n  $i3 \u003d Flat3Map: int hash3\u003e\n  if ($i3 !\u003d $i1) goto B14 else B16\n}",
      "B14 {\n  $r7 \u003d Object key3\u003e\n  $z2 \u003d r2.equals($r7)\n  if ($z2 \u003d\u003d 0) goto B15 else B16\n}",
      "B15 {\n  $r8 \u003d Object value3\u003e\n  return\n}",
      "B16 {\n  $i5 \u003d Flat3Map: int hash2\u003e\n  if ($i5 !\u003d $i1) goto B17 else B19\n}",
      "B17 {\n  $r5 \u003d Object key2\u003e\n  $z1 \u003d r2.equals($r5)\n  if ($z1 \u003d\u003d 0) goto B18 else B19\n}",
      "B18 {\n  $r6 \u003d Object value2\u003e\n  return\n}",
      "B19 {\n  $i6 \u003d Flat3Map: int hash1\u003e\n  if ($i6 !\u003d $i1) goto B20 else B22\n}",
      "B20 {\n  $r3 \u003d Object key1\u003e\n  $z0 \u003d r2.equals($r3)\n  if ($z0 \u003d\u003d 0) goto B21 else B22\n}",
      "B21 {\n  $r4 \u003d Object value1\u003e\n  return\n}",
      "B22 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B11",
      "B3 --\u003e B8",
      "B3 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B10",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B22",
      "B11 --\u003e B12",
      "B11 --\u003e B22",
      "B12 --\u003e B19",
      "B12 --\u003e B16",
      "B12 --\u003e B13",
      "B12 --\u003e B22",
      "B13 --\u003e B14",
      "B13 --\u003e B16",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B19",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e B20",
      "B19 --\u003e B22",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e [EXIT]",
      "B22 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.Flat3Map",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    if (delegateMap !\u003d null) {\r\n        return delegateMap.hashCode();\r\n    }\r\n    int total \u003d 0;\r\n    switch(// drop through\r\n    size) {\r\n        case 3:\r\n            total +\u003d hash3 ^ (value3 \u003d\u003d null ? 0 : value3.hashCode());\r\n        case 2:\r\n            total +\u003d hash2 ^ (value2 \u003d\u003d null ? 0 : value2.hashCode());\r\n        case 1:\r\n            total +\u003d hash1 ^ (value1 \u003d\u003d null ? 0 : value1.hashCode());\r\n        case 0:\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Invalid map index: \" + size);\r\n    }\r\n    return total;\r\n}",
    "nodes": 18,
    "edges": 23,
    "cc": 7,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(switch-on $i0) → B15 | else → B11",
      "B3 : If($r2 !\u003d null) → B4 | else → B5",
      "B7 : If($r9 !\u003d null) → B8 | else → B9",
      "B11 : If($r10 !\u003d null) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  Flat3Map\n  $r1 \u003d AbstractHashedMap delegateMap\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r8 \u003d AbstractHashedMap delegateMap\u003e\n  $i10 \u003d $r8.hashCode()\n  return\n}",
      "B2 {\n  i11 \u003d 0\n  $i0 \u003d Flat3Map: int size\u003e\n  IllegalStateException; }\n}",
      "B3 {\n  $i1 \u003d Flat3Map: int hash3\u003e\n  $r2 \u003d Object value3\u003e\n  if ($r2 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $i12 \u003d 0\n  goto B6\n}",
      "B5 {\n  $r3 \u003d Object value3\u003e\n  $i12 \u003d $r3.hashCode()\n}",
      "B6 {\n  $i2 \u003d $i1 ^ $i12\n  i11 \u003d 0 + $i2\n}",
      "B7 {\n  $i8 \u003d i11\n  $i3 \u003d Flat3Map: int hash2\u003e\n  $r9 \u003d Object value2\u003e\n  if ($r9 !\u003d null) goto B8 else B9\n}",
      "B8 {\n  $i13 \u003d 0\n  goto B10\n}",
      "B9 {\n  $r4 \u003d Object value2\u003e\n  $i13 \u003d $r4.hashCode()\n}",
      "B10 {\n  $i4 \u003d $i3 ^ $i13\n  i11 \u003d $i8 + $i4\n}",
      "B11 {\n  $i7 \u003d i11\n  $i5 \u003d Flat3Map: int hash1\u003e\n  $r10 \u003d Object value1\u003e\n  if ($r10 !\u003d null) goto B12 else B13\n}",
      "B12 {\n  $i14 \u003d 0\n  goto B14\n}",
      "B13 {\n  $r5 \u003d Object value1\u003e\n  $i14 \u003d $r5.hashCode()\n}",
      "B14 {\n  $i6 \u003d $i5 ^ $i14\n  i11 \u003d $i7 + $i6\n}",
      "B15 {\n  goto B17\n}",
      "B16 {\n  $r6 \u003d IllegalStateException\n  $i9 \u003d Flat3Map: int size\u003e\n  $r7 \u003d dynInvoke makeConcatWithConstants($i9)\n  new IllegalStateException($r7)\n  throw $r6\n}",
      "B17 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B15",
      "B2 --\u003e B11",
      "B2 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B16",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B15 --\u003e B17",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.Flat3Map",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty()",
    "visibility": "public",
    "body": "{\r\n    return size() \u003d\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Flat3Map\n  $i0 \u003d r0.size()\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Flat3Map#size(...0)",
        "body": "{\r\n    if (delegateMap !\u003d null) {\r\n        return delegateMap.size();\r\n    }\r\n    return size;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.Flat3Map",
    "methodName": "keySet",
    "signature": "java.util.Set keySet()",
    "visibility": "public",
    "body": "{\r\n    if (delegateMap !\u003d null) {\r\n        return delegateMap.keySet();\r\n    }\r\n    return new KeySet\u003c\u003e(this);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Flat3Map\n  $r1 \u003d AbstractHashedMap delegateMap\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d AbstractHashedMap delegateMap\u003e\n  $r4 \u003d $r3.keySet()\n  return\n}",
      "B2 {\n  $r2 \u003d Flat3Map$KeySet\n  new Flat3Map$KeySet(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.Flat3Map",
    "methodName": "mapIterator",
    "signature": "org.apache.commons.collections4.MapIterator mapIterator()",
    "visibility": "public",
    "body": "{\r\n    if (delegateMap !\u003d null) {\r\n        return delegateMap.mapIterator();\r\n    }\r\n    if (size \u003d\u003d 0) {\r\n        return EmptyMapIterator.\u003cK, V\u003eemptyMapIterator();\r\n    }\r\n    return new FlatMapIterator\u003c\u003e(this);\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Flat3Map\n  $r1 \u003d AbstractHashedMap delegateMap\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d AbstractHashedMap delegateMap\u003e\n  $r5 \u003d $r4.mapIterator()\n  return\n}",
      "B2 {\n  $i0 \u003d Flat3Map: int size\u003e\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d EmptyMapIterator.emptyMapIterator()\n  return\n}",
      "B4 {\n  $r2 \u003d Flat3Map$FlatMapIterator\n  new Flat3Map$FlatMapIterator(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.Flat3Map",
    "methodName": "put",
    "signature": "java.lang.Object put(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 37,
    "edges": 52,
    "cc": 17,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(r2 !\u003d null) → B3 | else → B11",
      "B3 : If(switch-on $i4) → B8 | else → B6",
      "B4 : If($r8 !\u003d null) → B5 | else → B6",
      "B6 : If($r9 !\u003d null) → B7 | else → B8",
      "B8 : If($r10 !\u003d null) → B9 | else → B10",
      "B11 : If($i0 \u003c\u003d 0) → B12 | else → B22",
      "B12 : If(switch-on $i2) → B19 | else → B16",
      "B13 : If($i3 !\u003d $i1) → B14 | else → B16",
      "B14 : If($z2 \u003d\u003d 0) → B15 | else → B16",
      "B16 : If($i5 !\u003d $i1) → B17 | else → B19",
      "B17 : If($z1 \u003d\u003d 0) → B18 | else → B19",
      "B19 : If($i6 !\u003d $i1) → B20 | else → B22",
      "B20 : If($z0 \u003d\u003d 0) → B21 | else → B22",
      "B22 : If(switch-on $i7) → B31 | else → B27",
      "B23 : If(r2 !\u003d null) → B24 | else → B25",
      "B27 : If(r2 !\u003d null) → B28 | else → B29",
      "B31 : If(r2 !\u003d null) → B32 | else → B33"
    ],
    "blockList": [
      "B0 {\n  Flat3Map\n  Object\n  Object\n  $r1 \u003d AbstractHashedMap delegateMap\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r11 \u003d AbstractHashedMap delegateMap\u003e\n  $r12 \u003d $r11.put(r2, r3)\n  return\n}",
      "B2 {\n  if (r2 !\u003d null) goto B3 else B11\n}",
      "B3 {\n  $i4 \u003d Flat3Map: int size\u003e\n  Flat3Map: int size\u003e]; }\n}",
      "B4 {\n  $r8 \u003d Object key3\u003e\n  if ($r8 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  r13 \u003d Object value3\u003e\n  Object value3\u003e \u003d r3\n  return\n}",
      "B6 {\n  $r9 \u003d Object key2\u003e\n  if ($r9 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  r14 \u003d Object value2\u003e\n  Object value2\u003e \u003d r3\n  return\n}",
      "B8 {\n  $r10 \u003d Object key1\u003e\n  if ($r10 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  r15 \u003d Object value1\u003e\n  Object value1\u003e \u003d r3\n  return\n}",
      "B10 {\n  goto B22\n}",
      "B11 {\n  $i0 \u003d Flat3Map: int size\u003e\n  if ($i0 \u003c\u003d 0) goto B12 else B22\n}",
      "B12 {\n  $i1 \u003d r2.hashCode()\n  $i2 \u003d Flat3Map: int size\u003e\n  Flat3Map: int size\u003e; }\n}",
      "B13 {\n  $i3 \u003d Flat3Map: int hash3\u003e\n  if ($i3 !\u003d $i1) goto B14 else B16\n}",
      "B14 {\n  $r7 \u003d Object key3\u003e\n  $z2 \u003d r2.equals($r7)\n  if ($z2 \u003d\u003d 0) goto B15 else B16\n}",
      "B15 {\n  r16 \u003d Object value3\u003e\n  Object value3\u003e \u003d r3\n  return\n}",
      "B16 {\n  $i5 \u003d Flat3Map: int hash2\u003e\n  if ($i5 !\u003d $i1) goto B17 else B19\n}",
      "B17 {\n  $r6 \u003d Object key2\u003e\n  $z1 \u003d r2.equals($r6)\n  if ($z1 \u003d\u003d 0) goto B18 else B19\n}",
      "B18 {\n  r17 \u003d Object value2\u003e\n  Object value2\u003e \u003d r3\n  return\n}",
      "B19 {\n  $i6 \u003d Flat3Map: int hash1\u003e\n  if ($i6 !\u003d $i1) goto B20 else B22\n}",
      "B20 {\n  $r5 \u003d Object key1\u003e\n  $z0 \u003d r2.equals($r5)\n  if ($z0 \u003d\u003d 0) goto B21 else B22\n}",
      "B21 {\n  r18 \u003d Object value1\u003e\n  Object value1\u003e \u003d r3\n  return\n}",
      "B22 {\n  $i7 \u003d Flat3Map: int size\u003e\n  Flat3Map: void convertToMap()\u003e(); }\n}",
      "B23 {\n  if (r2 !\u003d null) goto B24 else B25\n}",
      "B24 {\n  $i8 \u003d 0\n  goto B26\n}",
      "B25 {\n  $i8 \u003d r2.hashCode()\n}",
      "B26 {\n  Flat3Map: int hash3\u003e \u003d $i8\n  Object key3\u003e \u003d r2\n  Object value3\u003e \u003d r3\n  goto B36\n}",
      "B27 {\n  if (r2 !\u003d null) goto B28 else B29\n}",
      "B28 {\n  $i9 \u003d 0\n  goto B30\n}",
      "B29 {\n  $i9 \u003d r2.hashCode()\n}",
      "B30 {\n  Flat3Map: int hash2\u003e \u003d $i9\n  Object key2\u003e \u003d r2\n  Object value2\u003e \u003d r3\n  goto B36\n}",
      "B31 {\n  if (r2 !\u003d null) goto B32 else B33\n}",
      "B32 {\n  $i10 \u003d 0\n  goto B34\n}",
      "B33 {\n  $i10 \u003d r2.hashCode()\n}",
      "B34 {\n  Flat3Map: int hash1\u003e \u003d $i10\n  Object key1\u003e \u003d r2\n  Object value1\u003e \u003d r3\n  goto B36\n}",
      "B35 {\n  r0.convertToMap()\n  $r4 \u003d AbstractHashedMap delegateMap\u003e\n  $r4.put(r2, r3)\n  return\n}",
      "B36 {\n  $i11 \u003d Flat3Map: int size\u003e\n  $i12 \u003d $i11 + 1\n  Flat3Map: int size\u003e \u003d $i12\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B11",
      "B3 --\u003e B8",
      "B3 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B10",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B22",
      "B11 --\u003e B12",
      "B11 --\u003e B22",
      "B12 --\u003e B19",
      "B12 --\u003e B16",
      "B12 --\u003e B13",
      "B12 --\u003e B22",
      "B13 --\u003e B14",
      "B13 --\u003e B16",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B19",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e B20",
      "B19 --\u003e B22",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e [EXIT]",
      "B22 --\u003e B31",
      "B22 --\u003e B27",
      "B22 --\u003e B23",
      "B22 --\u003e B35",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B26",
      "B26 --\u003e B36",
      "B27 --\u003e B28",
      "B27 --\u003e B29",
      "B28 --\u003e B30",
      "B29 --\u003e B30",
      "B30 --\u003e B36",
      "B31 --\u003e B32",
      "B31 --\u003e B33",
      "B32 --\u003e B34",
      "B33 --\u003e B34",
      "B34 --\u003e B36",
      "B35 --\u003e [EXIT]",
      "B36 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.Flat3Map",
    "methodName": "putAll",
    "signature": "void putAll(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    final int size \u003d map.size();\r\n    if (size \u003d\u003d 0) {\r\n        return;\r\n    }\r\n    if (delegateMap !\u003d null) {\r\n        delegateMap.putAll(map);\r\n        return;\r\n    }\r\n    if (size \u003c 4) {\r\n        for (final Map.Entry\u003c? extends K, ? extends V\u003e entry : map.entrySet()) {\r\n            put(entry.getKey(), entry.getValue());\r\n        }\r\n    } else {\r\n        convertToMap();\r\n        delegateMap.putAll(map);\r\n    }\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2",
      "B2 : If($r2 \u003d\u003d null) → B3 | else → B4",
      "B4 : If($i0 \u003e\u003d 4) → B5 | else → B9",
      "B6 : If($z0 \u003d\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  Flat3Map\n  Map\n  $i0 \u003d r0.size()\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d AbstractHashedMap delegateMap\u003e\n  if ($r2 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $r10 \u003d AbstractHashedMap delegateMap\u003e\n  $r10.putAll(r0)\n  return\n}",
      "B4 {\n  if ($i0 \u003e\u003d 4) goto B5 else B9\n}",
      "B5 {\n  $r4 \u003d r0.entrySet()\n  $r5 \u003d $r4.iterator()\n}",
      "B6 {\n  $z0 \u003d $r5.hasNext()\n  if ($z0 \u003d\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $r6 \u003d $r5.next()\n  r7 \u003d Map$Entry) $r6\n  $r8 \u003d r7.getKey()\n  $r9 \u003d r7.getValue()\n  r1.put($r8, $r9)\n  goto B6\n}",
      "B8 {\n  goto B10\n}",
      "B9 {\n  r1.convertToMap()\n  $r3 \u003d AbstractHashedMap delegateMap\u003e\n  $r3.putAll(r0)\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B6",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Flat3Map#put(...2)",
        "body": "{\r\n    if (delegateMap !\u003d null) {\r\n        return delegateMap.put(key, value);\r\n    }\r\n    // change existing mapping\r\n    if (key \u003d\u003d null) {\r\n        switch(// drop through\r\n        size) {\r\n            case 3:\r\n                if (key3 \u003d\u003d null) {\r\n                    final V old \u003d value3;\r\n                    value3 \u003d value;\r\n                    return old;\r\n                }\r\n            case 2:\r\n                if (key2 \u003d\u003d null) {\r\n                    final V old \u003d value2;\r\n                    value2 \u003d value;\r\n                    return old;\r\n                }\r\n            case 1:\r\n                if (key1 \u003d\u003d null) {\r\n                    final V old \u003d value1;\r\n                    value1 \u003d value;\r\n                    return old;\r\n                }\r\n        }\r\n    } else if (size \u003e 0) {\r\n        final int hashCode \u003d key.hashCode();\r\n        switch(// drop through\r\n        size) {\r\n            case 3:\r\n                if (hash3 \u003d\u003d hashCode \u0026\u0026 key.equals(key3)) {\r\n                    final V old \u003d value3;\r\n                    value3 \u003d value;\r\n                    return old;\r\n                }\r\n            case 2:\r\n                if (hash2 \u003d\u003d hashCode \u0026\u0026 key.equals(key2)) {\r\n                    final V old \u003d value2;\r\n                    value2 \u003d value;\r\n                    return old;\r\n                }\r\n            case 1:\r\n                if (hash1 \u003d\u003d hashCode \u0026\u0026 key.equals(key1)) {\r\n                    final V old \u003d value1;\r\n                    value1 \u003d value;\r\n                    return old;\r\n                }\r\n        }\r\n    }\r\n    // add new mapping\r\n    switch(size) {\r\n        case 2:\r\n            hash3 \u003d key \u003d\u003d null ? 0 : key.hashCode();\r\n            key3 \u003d key;\r\n            value3 \u003d value;\r\n            break;\r\n        case 1:\r\n            hash2 \u003d key \u003d\u003d null ? 0 : key.hashCode();\r\n            key2 \u003d key;\r\n            value2 \u003d value;\r\n            break;\r\n        case 0:\r\n            hash1 \u003d key \u003d\u003d null ? 0 : key.hashCode();\r\n            key1 \u003d key;\r\n            value1 \u003d value;\r\n            break;\r\n        default:\r\n            convertToMap();\r\n            delegateMap.put(key, value);\r\n            return null;\r\n    }\r\n    size++;\r\n    return null;\r\n}"
      },
      {
        "name": "Flat3Map#convertToMap(...0)",
        "body": "{\r\n    delegateMap \u003d createDelegateMap();\r\n    switch(// drop through\r\n    size) {\r\n        case 3:\r\n            delegateMap.put(key3, value3);\r\n        case 2:\r\n            delegateMap.put(key2, value2);\r\n        case 1:\r\n            delegateMap.put(key1, value1);\r\n        case 0:\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Invalid map index: \" + size);\r\n    }\r\n    size \u003d 0;\r\n    hash1 \u003d hash2 \u003d hash3 \u003d 0;\r\n    key1 \u003d key2 \u003d key3 \u003d null;\r\n    value1 \u003d value2 \u003d value3 \u003d null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.Flat3Map",
    "methodName": "readObject",
    "signature": "void readObject(java.io.ObjectInputStream)",
    "visibility": "private",
    "body": "{\r\n    in.defaultReadObject();\r\n    final int count \u003d in.readInt();\r\n    if (count \u003e 3) {\r\n        delegateMap \u003d createDelegateMap();\r\n    }\r\n    for (int i \u003d count; i \u003e 0; i--) {\r\n        put((K) in.readObject(), (V) in.readObject());\r\n    }\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 3) → B1 | else → B2",
      "B3 : If(i1 \u003c\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  Flat3Map\n  ObjectInputStream\n  r0.defaultReadObject()\n  $i0 \u003d r0.readInt()\n  if ($i0 \u003c\u003d 3) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r1.createDelegateMap()\n  AbstractHashedMap delegateMap\u003e \u003d $r4\n}",
      "B2 {\n  i1 \u003d $i0\n}",
      "B3 {\n  if (i1 \u003c\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r2 \u003d r0.readObject()\n  $r3 \u003d r0.readObject()\n  r1.put($r2, $r3)\n  $i3 \u003d (int) -1\n  i1 \u003d i1 + $i3\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Flat3Map#put(...2)",
        "body": "{\r\n    if (delegateMap !\u003d null) {\r\n        return delegateMap.put(key, value);\r\n    }\r\n    // change existing mapping\r\n    if (key \u003d\u003d null) {\r\n        switch(// drop through\r\n        size) {\r\n            case 3:\r\n                if (key3 \u003d\u003d null) {\r\n                    final V old \u003d value3;\r\n                    value3 \u003d value;\r\n                    return old;\r\n                }\r\n            case 2:\r\n                if (key2 \u003d\u003d null) {\r\n                    final V old \u003d value2;\r\n                    value2 \u003d value;\r\n                    return old;\r\n                }\r\n            case 1:\r\n                if (key1 \u003d\u003d null) {\r\n                    final V old \u003d value1;\r\n                    value1 \u003d value;\r\n                    return old;\r\n                }\r\n        }\r\n    } else if (size \u003e 0) {\r\n        final int hashCode \u003d key.hashCode();\r\n        switch(// drop through\r\n        size) {\r\n            case 3:\r\n                if (hash3 \u003d\u003d hashCode \u0026\u0026 key.equals(key3)) {\r\n                    final V old \u003d value3;\r\n                    value3 \u003d value;\r\n                    return old;\r\n                }\r\n            case 2:\r\n                if (hash2 \u003d\u003d hashCode \u0026\u0026 key.equals(key2)) {\r\n                    final V old \u003d value2;\r\n                    value2 \u003d value;\r\n                    return old;\r\n                }\r\n            case 1:\r\n                if (hash1 \u003d\u003d hashCode \u0026\u0026 key.equals(key1)) {\r\n                    final V old \u003d value1;\r\n                    value1 \u003d value;\r\n                    return old;\r\n                }\r\n        }\r\n    }\r\n    // add new mapping\r\n    switch(size) {\r\n        case 2:\r\n            hash3 \u003d key \u003d\u003d null ? 0 : key.hashCode();\r\n            key3 \u003d key;\r\n            value3 \u003d value;\r\n            break;\r\n        case 1:\r\n            hash2 \u003d key \u003d\u003d null ? 0 : key.hashCode();\r\n            key2 \u003d key;\r\n            value2 \u003d value;\r\n            break;\r\n        case 0:\r\n            hash1 \u003d key \u003d\u003d null ? 0 : key.hashCode();\r\n            key1 \u003d key;\r\n            value1 \u003d value;\r\n            break;\r\n        default:\r\n            convertToMap();\r\n            delegateMap.put(key, value);\r\n            return null;\r\n    }\r\n    size++;\r\n    return null;\r\n}"
      },
      {
        "name": "Flat3Map#createDelegateMap(...0)",
        "body": "{\r\n    return new HashedMap\u003c\u003e();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.Flat3Map",
    "methodName": "remove",
    "signature": "java.lang.Object remove(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (delegateMap !\u003d null) {\r\n        return delegateMap.remove(key);\r\n    }\r\n    if (size \u003d\u003d 0) {\r\n        return null;\r\n    }\r\n    if (key \u003d\u003d null) {\r\n        switch(// drop through\r\n        size) {\r\n            case 3:\r\n                if (key3 \u003d\u003d null) {\r\n                    final V old \u003d value3;\r\n                    hash3 \u003d 0;\r\n                    key3 \u003d null;\r\n                    value3 \u003d null;\r\n                    size \u003d 2;\r\n                    return old;\r\n                }\r\n                if (key2 \u003d\u003d null) {\r\n                    final V old \u003d value2;\r\n                    hash2 \u003d hash3;\r\n                    key2 \u003d key3;\r\n                    value2 \u003d value3;\r\n                    hash3 \u003d 0;\r\n                    key3 \u003d null;\r\n                    value3 \u003d null;\r\n                    size \u003d 2;\r\n                    return old;\r\n                }\r\n                if (key1 \u003d\u003d null) {\r\n                    final V old \u003d value1;\r\n                    hash1 \u003d hash3;\r\n                    key1 \u003d key3;\r\n                    value1 \u003d value3;\r\n                    hash3 \u003d 0;\r\n                    key3 \u003d null;\r\n                    value3 \u003d null;\r\n                    size \u003d 2;\r\n                    return old;\r\n                }\r\n                return null;\r\n            case 2:\r\n                if (key2 \u003d\u003d null) {\r\n                    final V old \u003d value2;\r\n                    hash2 \u003d 0;\r\n                    key2 \u003d null;\r\n                    value2 \u003d null;\r\n                    size \u003d 1;\r\n                    return old;\r\n                }\r\n                if (key1 \u003d\u003d null) {\r\n                    final V old \u003d value1;\r\n                    hash1 \u003d hash2;\r\n                    key1 \u003d key2;\r\n                    value1 \u003d value2;\r\n                    hash2 \u003d 0;\r\n                    key2 \u003d null;\r\n                    value2 \u003d null;\r\n                    size \u003d 1;\r\n                    return old;\r\n                }\r\n                return null;\r\n            case 1:\r\n                if (key1 \u003d\u003d null) {\r\n                    final V old \u003d value1;\r\n                    hash1 \u003d 0;\r\n                    key1 \u003d null;\r\n                    value1 \u003d null;\r\n                    size \u003d 0;\r\n                    return old;\r\n                }\r\n        }\r\n    } else if (size \u003e 0) {\r\n        final int hashCode \u003d key.hashCode();\r\n        switch(// drop through\r\n        size) {\r\n            case 3:\r\n                if (hash3 \u003d\u003d hashCode \u0026\u0026 key.equals(key3)) {\r\n                    final V old \u003d value3;\r\n                    hash3 \u003d 0;\r\n                    key3 \u003d null;\r\n                    value3 \u003d null;\r\n                    size \u003d 2;\r\n                    return old;\r\n                }\r\n                if (hash2 \u003d\u003d hashCode \u0026\u0026 key.equals(key2)) {\r\n                    final V old \u003d value2;\r\n                    hash2 \u003d hash3;\r\n                    key2 \u003d key3;\r\n                    value2 \u003d value3;\r\n                    hash3 \u003d 0;\r\n                    key3 \u003d null;\r\n                    value3 \u003d null;\r\n                    size \u003d 2;\r\n                    return old;\r\n                }\r\n                if (hash1 \u003d\u003d hashCode \u0026\u0026 key.equals(key1)) {\r\n                    final V old \u003d value1;\r\n                    hash1 \u003d hash3;\r\n                    key1 \u003d key3;\r\n                    value1 \u003d value3;\r\n                    hash3 \u003d 0;\r\n                    key3 \u003d null;\r\n                    value3 \u003d null;\r\n                    size \u003d 2;\r\n                    return old;\r\n                }\r\n                return null;\r\n            case 2:\r\n                if (hash2 \u003d\u003d hashCode \u0026\u0026 key.equals(key2)) {\r\n                    final V old \u003d value2;\r\n                    hash2 \u003d 0;\r\n                    key2 \u003d null;\r\n                    value2 \u003d null;\r\n                    size \u003d 1;\r\n                    return old;\r\n                }\r\n                if (hash1 \u003d\u003d hashCode \u0026\u0026 key.equals(key1)) {\r\n                    final V old \u003d value1;\r\n                    hash1 \u003d hash2;\r\n                    key1 \u003d key2;\r\n                    value1 \u003d value2;\r\n                    hash2 \u003d 0;\r\n                    key2 \u003d null;\r\n                    value2 \u003d null;\r\n                    size \u003d 1;\r\n                    return old;\r\n                }\r\n                return null;\r\n            case 1:\r\n                if (hash1 \u003d\u003d hashCode \u0026\u0026 key.equals(key1)) {\r\n                    final V old \u003d value1;\r\n                    hash1 \u003d 0;\r\n                    key1 \u003d null;\r\n                    value1 \u003d null;\r\n                    size \u003d 0;\r\n                    return old;\r\n                }\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 44,
    "edges": 53,
    "cc": 11,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B4 : If(r2 !\u003d null) → B5 | else → B21",
      "B5 : If(switch-on $i13) → B18 | else → B13",
      "B6 : If($r15 !\u003d null) → B7 | else → B8",
      "B8 : If($r16 !\u003d null) → B9 | else → B10",
      "B10 : If($r17 !\u003d null) → B11 | else → B12",
      "B13 : If($r22 !\u003d null) → B14 | else → B15",
      "B15 : If($r23 !\u003d null) → B16 | else → B17",
      "B18 : If($r26 !\u003d null) → B19 | else → B20",
      "B21 : If($i1 \u003c\u003d 0) → B22 | else → B43",
      "B22 : If(switch-on $i3) → B40 | else → B33",
      "B23 : If($i4 !\u003d $i2) → B24 | else → B26",
      "B24 : If($z2 \u003d\u003d 0) → B25 | else → B26",
      "B26 : If($i5 !\u003d $i2) → B27 | else → B29",
      "B27 : If($z1 \u003d\u003d 0) → B28 | else → B29",
      "B29 : If($i6 !\u003d $i2) → B30 | else → B32",
      "B30 : If($z0 \u003d\u003d 0) → B31 | else → B32",
      "B33 : If($i9 !\u003d $i2) → B34 | else → B36",
      "B34 : If($z4 \u003d\u003d 0) → B35 | else → B36",
      "B36 : If($i10 !\u003d $i2) → B37 | else → B39",
      "B37 : If($z3 \u003d\u003d 0) → B38 | else → B39",
      "B40 : If($i12 !\u003d $i2) → B41 | else → B43",
      "B41 : If($z5 \u003d\u003d 0) → B42 | else → B43"
    ],
    "blockList": [
      "B0 {\n  Flat3Map\n  Object\n  $r1 \u003d AbstractHashedMap delegateMap\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r27 \u003d AbstractHashedMap delegateMap\u003e\n  $r28 \u003d $r27.remove(r2)\n  return\n}",
      "B2 {\n  $i0 \u003d Flat3Map: int size\u003e\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  if (r2 !\u003d null) goto B5 else B21\n}",
      "B5 {\n  $i13 \u003d Flat3Map: int size\u003e\n  Object key3\u003e;     default: goto goto [?\u003d return null]; }\n}",
      "B6 {\n  $r15 \u003d Object key3\u003e\n  if ($r15 !\u003d null) goto B7 else B8\n}",
      "B7 {\n  r29 \u003d Object value3\u003e\n  Flat3Map: int hash3\u003e \u003d 0\n  Object key3\u003e \u003d null\n  Object value3\u003e \u003d null\n  Flat3Map: int size\u003e \u003d 2\n  return\n}",
      "B8 {\n  $r16 \u003d Object key2\u003e\n  if ($r16 !\u003d null) goto B9 else B10\n}",
      "B9 {\n  r30 \u003d Object value2\u003e\n  $i15 \u003d Flat3Map: int hash3\u003e\n  Flat3Map: int hash2\u003e \u003d $i15\n  $r20 \u003d Object key3\u003e\n  Object key2\u003e \u003d $r20\n  $r21 \u003d Object value3\u003e\n  Object value2\u003e \u003d $r21\n  Flat3Map: int hash3\u003e \u003d 0\n  Object key3\u003e \u003d null\n  Object value3\u003e \u003d null\n  Flat3Map: int size\u003e \u003d 2\n  return\n}",
      "B10 {\n  $r17 \u003d Object key1\u003e\n  if ($r17 !\u003d null) goto B11 else B12\n}",
      "B11 {\n  r31 \u003d Object value1\u003e\n  $i14 \u003d Flat3Map: int hash3\u003e\n  Flat3Map: int hash1\u003e \u003d $i14\n  $r18 \u003d Object key3\u003e\n  Object key1\u003e \u003d $r18\n  $r19 \u003d Object value3\u003e\n  Object value1\u003e \u003d $r19\n  Flat3Map: int hash3\u003e \u003d 0\n  Object key3\u003e \u003d null\n  Object value3\u003e \u003d null\n  Flat3Map: int size\u003e \u003d 2\n  return\n}",
      "B12 {\n  return\n}",
      "B13 {\n  $r22 \u003d Object key2\u003e\n  if ($r22 !\u003d null) goto B14 else B15\n}",
      "B14 {\n  r32 \u003d Object value2\u003e\n  Flat3Map: int hash2\u003e \u003d 0\n  Object key2\u003e \u003d null\n  Object value2\u003e \u003d null\n  Flat3Map: int size\u003e \u003d 1\n  return\n}",
      "B15 {\n  $r23 \u003d Object key1\u003e\n  if ($r23 !\u003d null) goto B16 else B17\n}",
      "B16 {\n  r33 \u003d Object value1\u003e\n  $i16 \u003d Flat3Map: int hash2\u003e\n  Flat3Map: int hash1\u003e \u003d $i16\n  $r24 \u003d Object key2\u003e\n  Object key1\u003e \u003d $r24\n  $r25 \u003d Object value2\u003e\n  Object value1\u003e \u003d $r25\n  Flat3Map: int hash2\u003e \u003d 0\n  Object key2\u003e \u003d null\n  Object value2\u003e \u003d null\n  Flat3Map: int size\u003e \u003d 1\n  return\n}",
      "B17 {\n  return\n}",
      "B18 {\n  $r26 \u003d Object key1\u003e\n  if ($r26 !\u003d null) goto B19 else B20\n}",
      "B19 {\n  r34 \u003d Object value1\u003e\n  Flat3Map: int hash1\u003e \u003d 0\n  Object key1\u003e \u003d null\n  Object value1\u003e \u003d null\n  Flat3Map: int size\u003e \u003d 0\n  return\n}",
      "B20 {\n  goto B43\n}",
      "B21 {\n  $i1 \u003d Flat3Map: int size\u003e\n  if ($i1 \u003c\u003d 0) goto B22 else B43\n}",
      "B22 {\n  $i2 \u003d r2.hashCode()\n  $i3 \u003d Flat3Map: int size\u003e\n  Flat3Map: int hash3\u003e;     default: goto return null; }\n}",
      "B23 {\n  $i4 \u003d Flat3Map: int hash3\u003e\n  if ($i4 !\u003d $i2) goto B24 else B26\n}",
      "B24 {\n  $r9 \u003d Object key3\u003e\n  $z2 \u003d r2.equals($r9)\n  if ($z2 \u003d\u003d 0) goto B25 else B26\n}",
      "B25 {\n  r35 \u003d Object value3\u003e\n  Flat3Map: int hash3\u003e \u003d 0\n  Object key3\u003e \u003d null\n  Object value3\u003e \u003d null\n  Flat3Map: int size\u003e \u003d 2\n  return\n}",
      "B26 {\n  $i5 \u003d Flat3Map: int hash2\u003e\n  if ($i5 !\u003d $i2) goto B27 else B29\n}",
      "B27 {\n  $r6 \u003d Object key2\u003e\n  $z1 \u003d r2.equals($r6)\n  if ($z1 \u003d\u003d 0) goto B28 else B29\n}",
      "B28 {\n  r36 \u003d Object value2\u003e\n  $i8 \u003d Flat3Map: int hash3\u003e\n  Flat3Map: int hash2\u003e \u003d $i8\n  $r7 \u003d Object key3\u003e\n  Object key2\u003e \u003d $r7\n  $r8 \u003d Object value3\u003e\n  Object value2\u003e \u003d $r8\n  Flat3Map: int hash3\u003e \u003d 0\n  Object key3\u003e \u003d null\n  Object value3\u003e \u003d null\n  Flat3Map: int size\u003e \u003d 2\n  return\n}",
      "B29 {\n  $i6 \u003d Flat3Map: int hash1\u003e\n  if ($i6 !\u003d $i2) goto B30 else B32\n}",
      "B30 {\n  $r3 \u003d Object key1\u003e\n  $z0 \u003d r2.equals($r3)\n  if ($z0 \u003d\u003d 0) goto B31 else B32\n}",
      "B31 {\n  r37 \u003d Object value1\u003e\n  $i7 \u003d Flat3Map: int hash3\u003e\n  Flat3Map: int hash1\u003e \u003d $i7\n  $r4 \u003d Object key3\u003e\n  Object key1\u003e \u003d $r4\n  $r5 \u003d Object value3\u003e\n  Object value1\u003e \u003d $r5\n  Flat3Map: int hash3\u003e \u003d 0\n  Object key3\u003e \u003d null\n  Object value3\u003e \u003d null\n  Flat3Map: int size\u003e \u003d 2\n  return\n}",
      "B32 {\n  return\n}",
      "B33 {\n  $i9 \u003d Flat3Map: int hash2\u003e\n  if ($i9 !\u003d $i2) goto B34 else B36\n}",
      "B34 {\n  $r13 \u003d Object key2\u003e\n  $z4 \u003d r2.equals($r13)\n  if ($z4 \u003d\u003d 0) goto B35 else B36\n}",
      "B35 {\n  r38 \u003d Object value2\u003e\n  Flat3Map: int hash2\u003e \u003d 0\n  Object key2\u003e \u003d null\n  Object value2\u003e \u003d null\n  Flat3Map: int size\u003e \u003d 1\n  return\n}",
      "B36 {\n  $i10 \u003d Flat3Map: int hash1\u003e\n  if ($i10 !\u003d $i2) goto B37 else B39\n}",
      "B37 {\n  $r10 \u003d Object key1\u003e\n  $z3 \u003d r2.equals($r10)\n  if ($z3 \u003d\u003d 0) goto B38 else B39\n}",
      "B38 {\n  r39 \u003d Object value1\u003e\n  $i11 \u003d Flat3Map: int hash2\u003e\n  Flat3Map: int hash1\u003e \u003d $i11\n  $r11 \u003d Object key2\u003e\n  Object key1\u003e \u003d $r11\n  $r12 \u003d Object value2\u003e\n  Object value1\u003e \u003d $r12\n  Flat3Map: int hash2\u003e \u003d 0\n  Object key2\u003e \u003d null\n  Object value2\u003e \u003d null\n  Flat3Map: int size\u003e \u003d 1\n  return\n}",
      "B39 {\n  return\n}",
      "B40 {\n  $i12 \u003d Flat3Map: int hash1\u003e\n  if ($i12 !\u003d $i2) goto B41 else B43\n}",
      "B41 {\n  $r14 \u003d Object key1\u003e\n  $z5 \u003d r2.equals($r14)\n  if ($z5 \u003d\u003d 0) goto B42 else B43\n}",
      "B42 {\n  r40 \u003d Object value1\u003e\n  Flat3Map: int hash1\u003e \u003d 0\n  Object key1\u003e \u003d null\n  Object value1\u003e \u003d null\n  Flat3Map: int size\u003e \u003d 0\n  return\n}",
      "B43 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B21",
      "B5 --\u003e B18",
      "B5 --\u003e B13",
      "B5 --\u003e B6",
      "B5 --\u003e B20",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e [EXIT]",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e [EXIT]",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e [EXIT]",
      "B17 --\u003e [EXIT]",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e [EXIT]",
      "B20 --\u003e B43",
      "B21 --\u003e B22",
      "B21 --\u003e B43",
      "B22 --\u003e B40",
      "B22 --\u003e B33",
      "B22 --\u003e B23",
      "B22 --\u003e B43",
      "B23 --\u003e B24",
      "B23 --\u003e B26",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e [EXIT]",
      "B26 --\u003e B27",
      "B26 --\u003e B29",
      "B27 --\u003e B28",
      "B27 --\u003e B29",
      "B28 --\u003e [EXIT]",
      "B29 --\u003e B30",
      "B29 --\u003e B32",
      "B30 --\u003e B31",
      "B30 --\u003e B32",
      "B31 --\u003e [EXIT]",
      "B32 --\u003e [EXIT]",
      "B33 --\u003e B34",
      "B33 --\u003e B36",
      "B34 --\u003e B35",
      "B34 --\u003e B36",
      "B35 --\u003e [EXIT]",
      "B36 --\u003e B37",
      "B36 --\u003e B39",
      "B37 --\u003e B38",
      "B37 --\u003e B39",
      "B38 --\u003e [EXIT]",
      "B39 --\u003e [EXIT]",
      "B40 --\u003e B41",
      "B40 --\u003e B43",
      "B41 --\u003e B42",
      "B41 --\u003e B43",
      "B42 --\u003e [EXIT]",
      "B43 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.Flat3Map",
    "methodName": "size",
    "signature": "int size()",
    "visibility": "public",
    "body": "{\r\n    if (delegateMap !\u003d null) {\r\n        return delegateMap.size();\r\n    }\r\n    return size;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Flat3Map\n  $r1 \u003d AbstractHashedMap delegateMap\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d AbstractHashedMap delegateMap\u003e\n  $i1 \u003d $r2.size()\n  return\n}",
      "B2 {\n  $i0 \u003d Flat3Map: int size\u003e\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.Flat3Map",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    if (delegateMap !\u003d null) {\r\n        return delegateMap.toString();\r\n    }\r\n    if (size \u003d\u003d 0) {\r\n        return \"{}\";\r\n    }\r\n    final StringBuilder buf \u003d new StringBuilder(128);\r\n    buf.append(\u0027{\u0027);\r\n    switch(// drop through\r\n    size) {\r\n        case 3:\r\n            buf.append(key3 \u003d\u003d this ? \"(this Map)\" : key3);\r\n            buf.append(\u0027\u003d\u0027);\r\n            buf.append(value3 \u003d\u003d this ? \"(this Map)\" : value3);\r\n            buf.append(CollectionUtils.COMMA);\r\n        case 2:\r\n            buf.append(key2 \u003d\u003d this ? \"(this Map)\" : key2);\r\n            buf.append(\u0027\u003d\u0027);\r\n            buf.append(value2 \u003d\u003d this ? \"(this Map)\" : value2);\r\n            buf.append(CollectionUtils.COMMA);\r\n        case 1:\r\n            buf.append(key1 \u003d\u003d this ? \"(this Map)\" : key1);\r\n            buf.append(\u0027\u003d\u0027);\r\n            buf.append(value1 \u003d\u003d this ? \"(this Map)\" : value1);\r\n            break;\r\n        // case 0: has already been dealt with\r\n        default:\r\n            throw new IllegalStateException(\"Invalid map index: \" + size);\r\n    }\r\n    buf.append(\u0027}\u0027);\r\n    return buf.toString();\r\n}",
    "nodes": 28,
    "edges": 35,
    "cc": 9,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2",
      "B2 : If($i0 !\u003d 0) → B3 | else → B4",
      "B4 : If(switch-on $i1) → B19 | else → B12",
      "B5 : If($r3 !\u003d r0) → B6 | else → B7",
      "B8 : If($r4 !\u003d r0) → B9 | else → B10",
      "B12 : If($r14 !\u003d r0) → B13 | else → B14",
      "B15 : If($r5 !\u003d r0) → B16 | else → B17",
      "B19 : If($r17 !\u003d r0) → B20 | else → B21",
      "B22 : If($r6 !\u003d r0) → B23 | else → B24"
    ],
    "blockList": [
      "B0 {\n  Flat3Map\n  $r1 \u003d AbstractHashedMap delegateMap\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d AbstractHashedMap delegateMap\u003e\n  $r11 \u003d $r10.toString()\n  return\n}",
      "B2 {\n  $i0 \u003d Flat3Map: int size\u003e\n  if ($i0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $r2 \u003d StringBuilder\n  new StringBuilder(128)\n  $r2.append(123)\n  $i1 \u003d Flat3Map: int size\u003e\n  IllegalStateException; }\n}",
      "B5 {\n  $r3 \u003d Object key3\u003e\n  if ($r3 !\u003d r0) goto B6 else B7\n}",
      "B6 {\n  $r12 \u003d \"(this Map)\"\n  goto B8\n}",
      "B7 {\n  $r12 \u003d Object key3\u003e\n}",
      "B8 {\n  $r2.append($r12)\n  $r2.append(61)\n  $r4 \u003d Object value3\u003e\n  if ($r4 !\u003d r0) goto B9 else B10\n}",
      "B9 {\n  $r13 \u003d \"(this Map)\"\n  goto B11\n}",
      "B10 {\n  $r13 \u003d Object value3\u003e\n}",
      "B11 {\n  $r2.append($r13)\n  $r2.append(\",\")\n}",
      "B12 {\n  $r14 \u003d Object key2\u003e\n  if ($r14 !\u003d r0) goto B13 else B14\n}",
      "B13 {\n  $r15 \u003d \"(this Map)\"\n  goto B15\n}",
      "B14 {\n  $r15 \u003d Object key2\u003e\n}",
      "B15 {\n  $r2.append($r15)\n  $r2.append(61)\n  $r5 \u003d Object value2\u003e\n  if ($r5 !\u003d r0) goto B16 else B17\n}",
      "B16 {\n  $r16 \u003d \"(this Map)\"\n  goto B18\n}",
      "B17 {\n  $r16 \u003d Object value2\u003e\n}",
      "B18 {\n  $r2.append($r16)\n  $r2.append(\",\")\n}",
      "B19 {\n  $r17 \u003d Object key1\u003e\n  if ($r17 !\u003d r0) goto B20 else B21\n}",
      "B20 {\n  $r18 \u003d \"(this Map)\"\n  goto B22\n}",
      "B21 {\n  $r18 \u003d Object key1\u003e\n}",
      "B22 {\n  $r2.append($r18)\n  $r2.append(61)\n  $r6 \u003d Object value1\u003e\n  if ($r6 !\u003d r0) goto B23 else B24\n}",
      "B23 {\n  $r19 \u003d \"(this Map)\"\n  goto B25\n}",
      "B24 {\n  $r19 \u003d Object value1\u003e\n}",
      "B25 {\n  $r2.append($r19)\n  goto B27\n}",
      "B26 {\n  $r8 \u003d IllegalStateException\n  $i2 \u003d Flat3Map: int size\u003e\n  $r9 \u003d dynInvoke makeConcatWithConstants($i2)\n  new IllegalStateException($r9)\n  throw $r8\n}",
      "B27 {\n  $r2.append(125)\n  $r7 \u003d $r2.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B19",
      "B4 --\u003e B12",
      "B4 --\u003e B5",
      "B4 --\u003e B26",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e B12",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B16",
      "B15 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B22",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e B25",
      "B25 --\u003e B27",
      "B26 --\u003e [EXIT]",
      "B27 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.Flat3Map",
    "methodName": "values",
    "signature": "java.util.Collection values()",
    "visibility": "public",
    "body": "{\r\n    if (delegateMap !\u003d null) {\r\n        return delegateMap.values();\r\n    }\r\n    return new Values\u003c\u003e(this);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Flat3Map\n  $r1 \u003d AbstractHashedMap delegateMap\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d AbstractHashedMap delegateMap\u003e\n  $r4 \u003d $r3.values()\n  return\n}",
      "B2 {\n  $r2 \u003d Flat3Map$Values\n  new Flat3Map$Values(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.Flat3Map",
    "methodName": "writeObject",
    "signature": "void writeObject(java.io.ObjectOutputStream)",
    "visibility": "private",
    "body": "{\r\n    out.defaultWriteObject();\r\n    out.writeInt(size());\r\n    for (final MapIterator\u003c?, ?\u003e it \u003d mapIterator(); it.hasNext(); ) {\r\n        // key\r\n        out.writeObject(it.next());\r\n        // value\r\n        out.writeObject(it.getValue());\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Flat3Map\n  ObjectOutputStream\n  r0.defaultWriteObject()\n  $i0 \u003d r1.size()\n  r0.writeInt($i0)\n  $r2 \u003d r1.mapIterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r0.writeObject($r3)\n  $r4 \u003d $r2.getValue()\n  r0.writeObject($r4)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "Flat3Map#mapIterator(...0)",
        "body": "{\r\n    if (delegateMap !\u003d null) {\r\n        return delegateMap.mapIterator();\r\n    }\r\n    if (size \u003d\u003d 0) {\r\n        return EmptyMapIterator.\u003cK, V\u003eemptyMapIterator();\r\n    }\r\n    return new FlatMapIterator\u003c\u003e(this);\r\n}"
      },
      {
        "name": "Flat3Map#size(...0)",
        "body": "{\r\n    if (delegateMap !\u003d null) {\r\n        return delegateMap.size();\r\n    }\r\n    return size;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.LazyMap",
    "methodName": "get",
    "signature": "java.lang.Object get(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    // create value for key if key is not currently in the map\r\n    if (!map.containsKey(key)) {\r\n        @SuppressWarnings(\"unchecked\")\r\n        final K castKey \u003d (K) key;\r\n        final V value \u003d factory.apply(castKey);\r\n        map.put(castKey, value);\r\n        return value;\r\n    }\r\n    return map.get(key);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  LazyMap\n  Object\n  $r2 \u003d Map map\u003e\n  $z0 \u003d $r2.containsKey(r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d Transformer factory\u003e\n  $r6 \u003d $r5.apply(r1)\n  $r7 \u003d Map map\u003e\n  $r7.put(r1, $r6)\n  return\n}",
      "B2 {\n  $r3 \u003d Map map\u003e\n  $r4 \u003d $r3.get(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.LinkedMap",
    "methodName": "indexOf",
    "signature": "int indexOf(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    key \u003d convertKey(key);\r\n    int i \u003d 0;\r\n    for (LinkEntry\u003cK, V\u003e entry \u003d header.after; entry !\u003d header; entry \u003d entry.after, i++) {\r\n        if (isEqualKey(key, entry.key)) {\r\n            return i;\r\n        }\r\n    }\r\n    return CollectionUtils.INDEX_NOT_FOUND;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If(r6 \u003d\u003d $r3) → B2 | else → B5",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  LinkedMap\n  Object\n  $r1 \u003d r0.convertKey(r5)\n  i0 \u003d 0\n  $r2 \u003d AbstractLinkedMap$LinkEntry header\u003e\n  r6 \u003d AbstractLinkedMap$LinkEntry after\u003e\n}",
      "B1 {\n  $r3 \u003d AbstractLinkedMap$LinkEntry header\u003e\n  if (r6 \u003d\u003d $r3) goto B2 else B5\n}",
      "B2 {\n  $r4 \u003d Object key\u003e\n  $z0 \u003d r0.isEqualKey($r1, $r4)\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r6 \u003d AbstractLinkedMap$LinkEntry after\u003e\n  i0 \u003d i0 + 1\n  goto B1\n}",
      "B5 {\n  $i2 \u003d (int) -1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "LinkedMap#isEqualKey(...2)",
        "body": "(source not found)"
      },
      {
        "name": "LinkedMap#convertKey(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.ListOrderedMap",
    "methodName": "firstKey",
    "signature": "java.lang.Object firstKey()",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty()) {\r\n        throw new NoSuchElementException(\"Map is empty\");\r\n    }\r\n    return insertOrder.get(0);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ListOrderedMap\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d NoSuchElementException\n  new NoSuchElementException(\"Map is empty\")\n  throw $r3\n}",
      "B2 {\n  $r1 \u003d List insertOrder\u003e\n  $r2 \u003d $r1.get(0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ListOrderedMap#isEmpty(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.ListOrderedMap",
    "methodName": "lastKey",
    "signature": "java.lang.Object lastKey()",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty()) {\r\n        throw new NoSuchElementException(\"Map is empty\");\r\n    }\r\n    return insertOrder.get(size() - 1);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ListOrderedMap\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d NoSuchElementException\n  new NoSuchElementException(\"Map is empty\")\n  throw $r3\n}",
      "B2 {\n  $r1 \u003d List insertOrder\u003e\n  $i0 \u003d r0.size()\n  $i1 \u003d $i0 - 1\n  $r2 \u003d $r1.get($i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ListOrderedMap#isEmpty(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ListOrderedMap#size(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.ListOrderedMap",
    "methodName": "nextKey",
    "signature": "java.lang.Object nextKey(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final int index \u003d insertOrder.indexOf(key);\r\n    if (index \u003e\u003d 0 \u0026\u0026 index \u003c size() - 1) {\r\n        return insertOrder.get(index + 1);\r\n    }\r\n    return null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 \u003c 0) → B1 | else → B3",
      "B1 : If($i0 \u003e\u003d $i2) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ListOrderedMap\n  Object\n  $r2 \u003d List insertOrder\u003e\n  $i0 \u003d $r2.indexOf(r1)\n  if ($i0 \u003c 0) goto B1 else B3\n}",
      "B1 {\n  $i1 \u003d r0.size()\n  $i2 \u003d $i1 - 1\n  if ($i0 \u003e\u003d $i2) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d List insertOrder\u003e\n  $i3 \u003d $i0 + 1\n  $r4 \u003d $r3.get($i3)\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ListOrderedMap#size(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.ListOrderedMap",
    "methodName": "previousKey",
    "signature": "java.lang.Object previousKey(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final int index \u003d insertOrder.indexOf(key);\r\n    if (index \u003e 0) {\r\n        return insertOrder.get(index - 1);\r\n    }\r\n    return null;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ListOrderedMap\n  Object\n  $r2 \u003d List insertOrder\u003e\n  $i0 \u003d $r2.indexOf(r1)\n  if ($i0 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d List insertOrder\u003e\n  $i1 \u003d $i0 - 1\n  $r4 \u003d $r3.get($i1)\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.ListOrderedMap",
    "methodName": "put",
    "signature": "java.lang.Object put(int,java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B0 : If(i3 \u003c 0) → B1 | else → B2",
      "B1 : If(i3 \u003c\u003d $i1) → B2 | else → B3",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B7",
      "B4 : If($i2 \u003e\u003d i3) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  ListOrderedMap\n  i3 :\u003d @parameter0: int\n  Object\n  Object\n  if (i3 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d List insertOrder\u003e\n  $i1 \u003d $r4.size()\n  if (i3 \u003c\u003d $i1) goto B2 else B3\n}",
      "B2 {\n  $r13 \u003d IndexOutOfBoundsException\n  $r2 \u003d List insertOrder\u003e\n  $i0 \u003d $r2.size()\n  $r3 \u003d dynInvoke makeConcatWithConstants(i3, $i0)\n  new IndexOutOfBoundsException($r3)\n  throw $r13\n}",
      "B3 {\n  $r5 \u003d r1.decorated()\n  $z0 \u003d $r5.containsKey(r6)\n  if ($z0 \u003d\u003d 0) goto B4 else B7\n}",
      "B4 {\n  $r9 \u003d $r5.remove(r6)\n  $r10 \u003d List insertOrder\u003e\n  $i2 \u003d $r10.indexOf(r6)\n  $r11 \u003d List insertOrder\u003e\n  $r11.remove($i2)\n  if ($i2 \u003e\u003d i3) goto B5 else B6\n}",
      "B5 {\n  $i5 \u003d (int) -1\n  i3 \u003d i3 + $i5\n}",
      "B6 {\n  $r12 \u003d List insertOrder\u003e\n  $r12.add(i3, r6)\n  $r5.put(r6, r8)\n  return\n}",
      "B7 {\n  $r7 \u003d List insertOrder\u003e\n  $r7.add(i3, r6)\n  $r5.put(r6, r8)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.ListOrderedMap",
    "methodName": "put",
    "signature": "java.lang.Object put(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ListOrderedMap\n  Object\n  Object\n  $r1 \u003d r0.decorated()\n  $z0 \u003d $r1.containsKey(r2)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d r0.decorated()\n  $r8 \u003d $r7.put(r2, r4)\n  return\n}",
      "B2 {\n  $r3 \u003d r0.decorated()\n  $r5 \u003d $r3.put(r2, r4)\n  $r6 \u003d List insertOrder\u003e\n  $r6.add(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.ListOrderedMap",
    "methodName": "putAll",
    "signature": "void putAll(int,java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    if (index \u003c 0 || index \u003e insertOrder.size()) {\r\n        throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + insertOrder.size());\r\n    }\r\n    for (final Map.Entry\u003c? extends K, ? extends V\u003e entry : map.entrySet()) {\r\n        final K key \u003d entry.getKey();\r\n        final boolean contains \u003d containsKey(key);\r\n        // The return value of put is null if the key did not exist OR the value was null\r\n        // so it cannot be used to determine whether the key was added\r\n        put(index, entry.getKey(), entry.getValue());\r\n        if (!contains) {\r\n            // if no key was replaced, increment the index\r\n            index++;\r\n        } else {\r\n            // otherwise put the next item after the currently inserted key\r\n            index \u003d indexOf(entry.getKey()) + 1;\r\n        }\r\n    }\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i3 \u003c 0) → B1 | else → B2",
      "B1 : If(i3 \u003c\u003d $i1) → B2 | else → B3",
      "B4 : If($z0 \u003d\u003d 0) → B5 | else → B9",
      "B5 : If($z1 !\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  ListOrderedMap\n  i3 :\u003d @parameter0: int\n  Map\n  if (i3 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d List insertOrder\u003e\n  $i1 \u003d $r4.size()\n  if (i3 \u003c\u003d $i1) goto B2 else B3\n}",
      "B2 {\n  $r0 \u003d IndexOutOfBoundsException\n  $r2 \u003d List insertOrder\u003e\n  $i0 \u003d $r2.size()\n  $r3 \u003d dynInvoke makeConcatWithConstants(i3, $i0)\n  new IndexOutOfBoundsException($r3)\n  throw $r0\n}",
      "B3 {\n  $r6 \u003d r5.entrySet()\n  $r7 \u003d $r6.iterator()\n}",
      "B4 {\n  $z0 \u003d $r7.hasNext()\n  if ($z0 \u003d\u003d 0) goto B5 else B9\n}",
      "B5 {\n  $r8 \u003d $r7.next()\n  r9 \u003d Map$Entry) $r8\n  $r10 \u003d r9.getKey()\n  $z1 \u003d r1.containsKey($r10)\n  $r11 \u003d r9.getKey()\n  $r12 \u003d r9.getValue()\n  r1.put(i3, $r11, $r12)\n  if ($z1 !\u003d 0) goto B6 else B7\n}",
      "B6 {\n  i3 \u003d i3 + 1\n  goto B8\n}",
      "B7 {\n  $r13 \u003d r9.getKey()\n  $i2 \u003d r1.indexOf($r13)\n  i3 \u003d $i2 + 1\n}",
      "B8 {\n  goto B4\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B4",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ListOrderedMap#put(...3)",
        "body": "{\r\n    if (index \u003c 0 || index \u003e insertOrder.size()) {\r\n        throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + insertOrder.size());\r\n    }\r\n    final Map\u003cK, V\u003e m \u003d decorated();\r\n    if (m.containsKey(key)) {\r\n        final V result \u003d m.remove(key);\r\n        final int pos \u003d insertOrder.indexOf(key);\r\n        insertOrder.remove(pos);\r\n        if (pos \u003c index) {\r\n            index--;\r\n        }\r\n        insertOrder.add(index, key);\r\n        m.put(key, value);\r\n        return result;\r\n    }\r\n    insertOrder.add(index, key);\r\n    m.put(key, value);\r\n    return null;\r\n}"
      },
      {
        "name": "ListOrderedMap#containsKey(...1)",
        "body": "(source not found)"
      },
      {
        "name": "ListOrderedMap#indexOf(...1)",
        "body": "{\r\n    return insertOrder.indexOf(key);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.ListOrderedMap",
    "methodName": "putAll",
    "signature": "void putAll(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    for (final Map.Entry\u003c? extends K, ? extends V\u003e entry : map.entrySet()) {\r\n        put(entry.getKey(), entry.getValue());\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ListOrderedMap\n  Map\n  $r1 \u003d r0.entrySet()\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r4 \u003d Map$Entry) $r3\n  $r6 \u003d r4.getKey()\n  $r7 \u003d r4.getValue()\n  r5.put($r6, $r7)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ListOrderedMap#put(...2)",
        "body": "{\r\n    if (decorated().containsKey(key)) {\r\n        // re-adding doesn\u0027t change order\r\n        return decorated().put(key, value);\r\n    }\r\n    // first add, so add to both map and list\r\n    final V result \u003d decorated().put(key, value);\r\n    insertOrder.add(key);\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.ListOrderedMap",
    "methodName": "remove",
    "signature": "java.lang.Object remove(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    V result \u003d null;\r\n    if (decorated().containsKey(key)) {\r\n        result \u003d decorated().remove(key);\r\n        insertOrder.remove(key);\r\n    }\r\n    return result;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ListOrderedMap\n  Object\n  r5 \u003d null\n  $r1 \u003d r0.decorated()\n  $z0 \u003d $r1.containsKey(r2)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d r0.decorated()\n  r5 \u003d $r3.remove(r2)\n  $r4 \u003d List insertOrder\u003e\n  $r4.remove(r2)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ListOrderedMap#decorated(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.ListOrderedMap",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty()) {\r\n        return \"{}\";\r\n    }\r\n    final StringBuilder buf \u003d new StringBuilder();\r\n    buf.append(\u0027{\u0027);\r\n    boolean first \u003d true;\r\n    for (final Map.Entry\u003cK, V\u003e entry : entrySet()) {\r\n        final K key \u003d entry.getKey();\r\n        final V value \u003d entry.getValue();\r\n        if (first) {\r\n            first \u003d false;\r\n        } else {\r\n            buf.append(\", \");\r\n        }\r\n        buf.append(key \u003d\u003d this ? \"(this Map)\" : key);\r\n        buf.append(\u0027\u003d\u0027);\r\n        buf.append(value \u003d\u003d this ? \"(this Map)\" : value);\r\n    }\r\n    buf.append(\u0027}\u0027);\r\n    return buf.toString();\r\n}",
    "nodes": 15,
    "edges": 18,
    "cc": 5,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B3 : If($z1 \u003d\u003d 0) → B4 | else → B14",
      "B4 : If(z2 \u003d\u003d 0) → B5 | else → B6",
      "B7 : If($r7 !\u003d r0) → B8 | else → B9",
      "B10 : If($r8 !\u003d r0) → B11 | else → B12"
    ],
    "blockList": [
      "B0 {\n  ListOrderedMap\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d StringBuilder\n  new StringBuilder()\n  $r1.append(123)\n  z2 \u003d 1\n  $r2 \u003d r0.entrySet()\n  $r3 \u003d $r2.iterator()\n}",
      "B3 {\n  $z1 \u003d $r3.hasNext()\n  if ($z1 \u003d\u003d 0) goto B4 else B14\n}",
      "B4 {\n  $r5 \u003d $r3.next()\n  r6 \u003d Map$Entry) $r5\n  $r7 \u003d r6.getKey()\n  $r8 \u003d r6.getValue()\n  if (z2 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  z2 \u003d 0\n  goto B7\n}",
      "B6 {\n  $r1.append(\", \")\n}",
      "B7 {\n  if ($r7 !\u003d r0) goto B8 else B9\n}",
      "B8 {\n  $r9 \u003d \"(this Map)\"\n  goto B10\n}",
      "B9 {\n  $r9 \u003d $r7\n}",
      "B10 {\n  $r1.append($r9)\n  $r1.append(61)\n  if ($r8 !\u003d r0) goto B11 else B12\n}",
      "B11 {\n  $r10 \u003d \"(this Map)\"\n  goto B13\n}",
      "B12 {\n  $r10 \u003d $r8\n}",
      "B13 {\n  $r1.append($r10)\n  goto B3\n}",
      "B14 {\n  $r1.append(125)\n  $r4 \u003d $r1.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B14",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B3",
      "B14 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ListOrderedMap#isEmpty(...0)",
        "body": "(source not found)"
      },
      {
        "name": "ListOrderedMap#entrySet(...0)",
        "body": "{\r\n    return new EntrySetView\u003c\u003e(this, insertOrder);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.LRUMap",
    "methodName": "addMapping",
    "signature": "void addMapping(int,int,java.lang.Object,java.lang.Object)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 18,
    "edges": 23,
    "cc": 7,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B16",
      "B1 : If($z1 \u003d\u003d 0) → B2 | else → B9",
      "B2 : If(r25 \u003d\u003d $r14) → B3 | else → B7",
      "B3 : If(r25 \u003d\u003d null) → B4 | else → B7",
      "B4 : If($z2 \u003d\u003d 0) → B5 | else → B6",
      "B7 : If(r25 !\u003d null) → B8 | else → B10",
      "B10 : If(z3 \u003d\u003d 0) → B11 | else → B14",
      "B11 : If(r25 !\u003d null) → B12 | else → B13"
    ],
    "blockList": [
      "B0 {\n  LRUMap\n  i0 :\u003d @parameter0: int\n  i1 :\u003d @parameter1: int\n  Object\n  Object\n  $z0 \u003d r0.isFull()\n  if ($z0 \u003d\u003d 0) goto B1 else B16\n}",
      "B1 {\n  $r3 \u003d AbstractLinkedMap$LinkEntry header\u003e\n  r25 \u003d AbstractLinkedMap$LinkEntry after\u003e\n  z3 \u003d 0\n  $z1 \u003d LRUMap: boolean scanUntilRemovable\u003e\n  if ($z1 \u003d\u003d 0) goto B2 else B9\n}",
      "B2 {\n  $r14 \u003d AbstractLinkedMap$LinkEntry header\u003e\n  if (r25 \u003d\u003d $r14) goto B3 else B7\n}",
      "B3 {\n  if (r25 \u003d\u003d null) goto B4 else B7\n}",
      "B4 {\n  $z2 \u003d r0.removeLRU(r25)\n  if ($z2 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  z3 \u003d 1\n  goto B7\n}",
      "B6 {\n  r25 \u003d AbstractLinkedMap$LinkEntry after\u003e\n  goto B2\n}",
      "B7 {\n  if (r25 !\u003d null) goto B8 else B10\n}",
      "B8 {\n  $r15 \u003d IllegalStateException\n  $r16 \u003d AbstractLinkedMap$LinkEntry header\u003e\n  $r17 \u003d AbstractLinkedMap$LinkEntry after\u003e\n  $r18 \u003d String.valueOf($r17)\n  $r19 \u003d AbstractLinkedMap$LinkEntry header\u003e\n  $r20 \u003d AbstractLinkedMap$LinkEntry before\u003e\n  $r21 \u003d String.valueOf($r20)\n  $r22 \u003d String.valueOf(r1)\n  $r23 \u003d String.valueOf(r2)\n  $i5 \u003d LRUMap: int size\u003e\n  $i4 \u003d LRUMap: int maxSize\u003e\n  $r24 \u003d dynInvoke makeConcatWithConstants($r18, $r21, $r22, $r23, $i5, $i4)\n  new IllegalStateException($r24)\n  throw $r15\n}",
      "B9 {\n  z3 \u003d r0.removeLRU(r25)\n}",
      "B10 {\n  if (z3 \u003d\u003d 0) goto B11 else B14\n}",
      "B11 {\n  if (r25 !\u003d null) goto B12 else B13\n}",
      "B12 {\n  $r4 \u003d IllegalStateException\n  $r5 \u003d AbstractLinkedMap$LinkEntry header\u003e\n  $r6 \u003d AbstractLinkedMap$LinkEntry after\u003e\n  $r7 \u003d String.valueOf($r6)\n  $r8 \u003d AbstractLinkedMap$LinkEntry header\u003e\n  $r9 \u003d AbstractLinkedMap$LinkEntry before\u003e\n  $r10 \u003d String.valueOf($r9)\n  $r11 \u003d String.valueOf(r1)\n  $r12 \u003d String.valueOf(r2)\n  $i3 \u003d LRUMap: int size\u003e\n  $i2 \u003d LRUMap: int maxSize\u003e\n  $r13 \u003d dynInvoke makeConcatWithConstants($r7, $r10, $r11, $r12, $i3, $i2)\n  new IllegalStateException($r13)\n  throw $r4\n}",
      "B13 {\n  r0.reuseMapping(r25, i0, i1, r1, r2)\n  goto B15\n}",
      "B14 {\n  r0.addMapping(i0, i1, r1, r2)\n}",
      "B15 {\n  goto B17\n}",
      "B16 {\n  r0.addMapping(i0, i1, r1, r2)\n}",
      "B17 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B16",
      "B1 --\u003e B2",
      "B1 --\u003e B9",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B2",
      "B7 --\u003e B8",
      "B7 --\u003e B10",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B14",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e [EXIT]",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B17",
      "B16 --\u003e B17",
      "B17 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.LRUMap",
    "methodName": "get",
    "signature": "java.lang.Object get(java.lang.Object,boolean)",
    "visibility": "public",
    "body": "{\r\n    final LinkEntry\u003cK, V\u003e entry \u003d getEntry(key);\r\n    if (entry \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (updateToMRU) {\r\n        moveToMRU(entry);\r\n    }\r\n    return entry.getValue();\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B2",
      "B2 : If(z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  LRUMap\n  Object\n  z0 :\u003d @parameter1: boolean\n  $r2 \u003d r0.getEntry(r1)\n  if ($r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  r0.moveToMRU($r2)\n}",
      "B4 {\n  $r3 \u003d $r2.getValue()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "LRUMap#getEntry(...1)",
        "body": "(source not found)"
      },
      {
        "name": "LRUMap#moveToMRU(...1)",
        "body": "{\r\n    if (entry.after !\u003d header) {\r\n        modCount++;\r\n        // remove\r\n        if (entry.before \u003d\u003d null) {\r\n            throw new IllegalStateException(\"Entry.before is null.\" + \" This should not occur if your keys are immutable, and you have used synchronization properly.\");\r\n        }\r\n        entry.before.after \u003d entry.after;\r\n        entry.after.before \u003d entry.before;\r\n        // add first\r\n        entry.after \u003d header;\r\n        entry.before \u003d header.before;\r\n        header.before.after \u003d entry;\r\n        header.before \u003d entry;\r\n    } else if (entry \u003d\u003d header) {\r\n        throw new IllegalStateException(\"Can\u0027t move header to MRU\" + \" This should not occur if your keys are immutable, and you have used synchronization properly.\");\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.LRUMap",
    "methodName": "isFull",
    "signature": "boolean isFull()",
    "visibility": "public",
    "body": "{\r\n    return size \u003e\u003d maxSize;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003c $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  LRUMap\n  $i1 \u003d LRUMap: int size\u003e\n  $i0 \u003d LRUMap: int maxSize\u003e\n  if ($i1 \u003c $i0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.LRUMap",
    "methodName": "moveToMRU",
    "signature": "void moveToMRU(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 7,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r3 \u003d\u003d $r2) → B1 | else → B4",
      "B1 : If($r6 !\u003d null) → B2 | else → B3",
      "B4 : If(r0 !\u003d $r4) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  LRUMap\n  AbstractLinkedMap$LinkEntry\n  $r3 \u003d AbstractLinkedMap$LinkEntry after\u003e\n  $r2 \u003d AbstractLinkedMap$LinkEntry header\u003e\n  if ($r3 \u003d\u003d $r2) goto B1 else B4\n}",
      "B1 {\n  $i0 \u003d LRUMap: int modCount\u003e\n  $i1 \u003d $i0 + 1\n  LRUMap: int modCount\u003e \u003d $i1\n  $r6 \u003d AbstractLinkedMap$LinkEntry before\u003e\n  if ($r6 !\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r17 \u003d IllegalStateException\n  new IllegalStateException(\"Entry.before is null. This should not occur if your keys are immutable, and you have used synchronization properly.\")\n  throw $r17\n}",
      "B3 {\n  $r8 \u003d AbstractLinkedMap$LinkEntry before\u003e\n  $r7 \u003d AbstractLinkedMap$LinkEntry after\u003e\n  AbstractLinkedMap$LinkEntry after\u003e \u003d $r7\n  $r10 \u003d AbstractLinkedMap$LinkEntry after\u003e\n  $r9 \u003d AbstractLinkedMap$LinkEntry before\u003e\n  AbstractLinkedMap$LinkEntry before\u003e \u003d $r9\n  $r11 \u003d AbstractLinkedMap$LinkEntry header\u003e\n  AbstractLinkedMap$LinkEntry after\u003e \u003d $r11\n  $r12 \u003d AbstractLinkedMap$LinkEntry header\u003e\n  $r13 \u003d AbstractLinkedMap$LinkEntry before\u003e\n  AbstractLinkedMap$LinkEntry before\u003e \u003d $r13\n  $r14 \u003d AbstractLinkedMap$LinkEntry header\u003e\n  $r15 \u003d AbstractLinkedMap$LinkEntry before\u003e\n  AbstractLinkedMap$LinkEntry after\u003e \u003d r0\n  $r16 \u003d AbstractLinkedMap$LinkEntry header\u003e\n  AbstractLinkedMap$LinkEntry before\u003e \u003d r0\n  goto B6\n}",
      "B4 {\n  $r4 \u003d AbstractLinkedMap$LinkEntry header\u003e\n  if (r0 !\u003d $r4) goto B5 else B6\n}",
      "B5 {\n  $r5 \u003d IllegalStateException\n  new IllegalStateException(\"Can\\\u0027t move header to MRU This should not occur if your keys are immutable, and you have used synchronization properly.\")\n  throw $r5\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.LRUMap",
    "methodName": "reuseMapping",
    "signature": "void reuseMapping(org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry,int,int,java.lang.Object,java.lang.Object)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 38,
    "edges": 67,
    "cc": 31,
    "flowSummary": [
      "B8 : If(r21 \u003d\u003d r1) → B9 | else → B13",
      "B9 : If(r21 \u003d\u003d null) → B10 | else → B13",
      "B13 : If(r21 !\u003d null) → B14 | else → B26",
      "B33 : If(r1 !\u003d $r17) → B34 | else → B35"
    ],
    "blockList": [
      "B0 {\n  LRUMap\n  AbstractLinkedMap$LinkEntry\n  i5 :\u003d @parameter1: int\n  i6 :\u003d @parameter2: int\n  Object\n  Object\n  $i1 \u003d AbstractLinkedMap$LinkEntry: int hashCode\u003e\n  $r2 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  $i0 \u003d lengthof $r2\n  $i2 \u003d r0.hashIndex($i1, $i0)\n  r3 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  r21 \u003d r3[$i2]\n  r22 \u003d null\n}",
      "B1 {\n  if (r21 \u003d\u003d r1) goto B2 else B4\n}",
      "B2 {\n  if (r21 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  r22 \u003d r21\n  r21 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B1\n}",
      "B4 {\n  if (r21 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r6 \u003d IllegalStateException\n  $r7 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  $r8 \u003d $r7[$i2]\n  $r9 \u003d String.valueOf($r8)\n  $r10 \u003d String.valueOf(r22)\n  $r11 \u003d String.valueOf(r4)\n  $r12 \u003d String.valueOf(r5)\n  $i8 \u003d LRUMap: int size\u003e\n  $i7 \u003d LRUMap: int maxSize\u003e\n  $r13 \u003d dynInvoke makeConcatWithConstants($r9, $r10, $r11, $r12, $i8, $i7)\n  new IllegalStateException($r13)\n  throw $r6\n}",
      "B6 {\n  $i3 \u003d LRUMap: int modCount\u003e\n  $i4 \u003d $i3 + 1\n  LRUMap: int modCount\u003e \u003d $i4\n  r0.removeEntry(r1, $i2, r22)\n  r0.reuseEntry(r1, i5, i6, r4, r5)\n  r0.addEntry(r1, i5)\n  goto B11\n}",
      "B7 {\n  $r14 :\u003d @caughtexception\n  $r15 \u003d IllegalStateException\n  $r16 \u003d String.valueOf(r1)\n  $r17 \u003d AbstractLinkedMap$LinkEntry header\u003e\n  if (r1 !\u003d $r17) goto B8 else B9\n}",
      "B8 {\n  $z0 \u003d 1\n  goto B10\n}",
      "B9 {\n  $z0 \u003d 0\n}",
      "B10 {\n  $r18 \u003d String.valueOf(r4)\n  $r19 \u003d String.valueOf(r5)\n  $i10 \u003d LRUMap: int size\u003e\n  $i9 \u003d LRUMap: int maxSize\u003e\n  $r20 \u003d dynInvoke makeConcatWithConstants($r16, $z0, $r18, $r19, $i10, $i9)\n  new IllegalStateException($r20)\n  throw $r15\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B1",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "multiKeyMap",
    "signature": "org.apache.commons.collections4.map.MultiKeyMap multiKeyMap(org.apache.commons.collections4.map.AbstractHashedMap)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(map, \"map\");\r\n    if (map.isEmpty()) {\r\n        return new MultiKeyMap\u003c\u003e(map);\r\n    }\r\n    throw new IllegalArgumentException(\"Map must be empty\");\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AbstractHashedMap\n  Objects.requireNonNull(r0, \"map\")\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d MultiKeyMap\n  new MultiKeyMap(r0)\n  return\n}",
      "B2 {\n  $r1 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Map must be empty\")\n  throw $r1\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "clone",
    "signature": "org.apache.commons.collections4.map.MultiKeyMap clone()",
    "visibility": "public",
    "body": "{\r\n    try {\r\n        return (MultiKeyMap\u003cK, V\u003e) super.clone();\r\n    } catch (final CloneNotSupportedException e) {\r\n        throw new UnsupportedOperationException(e);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  $r1 \u003d r0.clone()\n  $r2 \u003d MultiKeyMap) $r1\n  return\n}",
      "B1 {\n  $r3 :\u003d @caughtexception\n  $r4 \u003d UnsupportedOperationException\n  new UnsupportedOperationException($r3)\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "containsKey",
    "signature": "boolean containsKey(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final int hashCode \u003d hash(key1, key2);\r\n    AbstractHashedMap.HashEntry\u003cMultiKey\u003c? extends K\u003e, V\u003e entry \u003d decoratedHashEntry(hashCode);\r\n    while (entry !\u003d null) {\r\n        if (entry.hashCode \u003d\u003d hashCode \u0026\u0026 isEqualKey(entry, key1, key2)) {\r\n            return true;\r\n        }\r\n        entry \u003d entry.next;\r\n    }\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r3 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($i1 !\u003d $i0) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  Object\n  $i0 \u003d r0.hash(r1, r2)\n  r3 \u003d r0.decoratedHashEntry($i0)\n}",
      "B1 {\n  if (r3 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $i1 \u003d AbstractHashedMap$HashEntry: int hashCode\u003e\n  if ($i1 !\u003d $i0) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.isEqualKey(r3, r1, r2)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  r3 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiKeyMap#hash(...2)",
        "body": "{\r\n    int h \u003d 0;\r\n    if (key1 !\u003d null) {\r\n        h ^\u003d key1.hashCode();\r\n    }\r\n    if (key2 !\u003d null) {\r\n        h ^\u003d key2.hashCode();\r\n    }\r\n    h +\u003d ~(h \u003c\u003c 9);\r\n    h ^\u003d h \u003e\u003e\u003e 14;\r\n    h +\u003d h \u003c\u003c 4;\r\n    h ^\u003d h \u003e\u003e\u003e 10;\r\n    return h;\r\n}"
      },
      {
        "name": "MultiKeyMap#isEqualKey(...3)",
        "body": "{\r\n    final MultiKey\u003c? extends K\u003e multi \u003d entry.getKey();\r\n    return multi.size() \u003d\u003d 2 \u0026\u0026 Objects.equals(key1, multi.getKey(0)) \u0026\u0026 Objects.equals(key2, multi.getKey(1));\r\n}"
      },
      {
        "name": "MultiKeyMap#decoratedHashEntry(...1)",
        "body": "{\r\n    return decorated().data[decoratedHashIndex(hashCode)];\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "containsKey",
    "signature": "boolean containsKey(java.lang.Object,java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final int hashCode \u003d hash(key1, key2, key3);\r\n    AbstractHashedMap.HashEntry\u003cMultiKey\u003c? extends K\u003e, V\u003e entry \u003d decoratedHashEntry(hashCode);\r\n    while (entry !\u003d null) {\r\n        if (entry.hashCode \u003d\u003d hashCode \u0026\u0026 isEqualKey(entry, key1, key2, key3)) {\r\n            return true;\r\n        }\r\n        entry \u003d entry.next;\r\n    }\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r4 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($i1 !\u003d $i0) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  Object\n  Object\n  $i0 \u003d r0.hash(r1, r2, r3)\n  r4 \u003d r0.decoratedHashEntry($i0)\n}",
      "B1 {\n  if (r4 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $i1 \u003d AbstractHashedMap$HashEntry: int hashCode\u003e\n  if ($i1 !\u003d $i0) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.isEqualKey(r4, r1, r2, r3)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  r4 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiKeyMap#hash(...3)",
        "body": "{\r\n    int h \u003d 0;\r\n    if (key1 !\u003d null) {\r\n        h ^\u003d key1.hashCode();\r\n    }\r\n    if (key2 !\u003d null) {\r\n        h ^\u003d key2.hashCode();\r\n    }\r\n    if (key3 !\u003d null) {\r\n        h ^\u003d key3.hashCode();\r\n    }\r\n    h +\u003d ~(h \u003c\u003c 9);\r\n    h ^\u003d h \u003e\u003e\u003e 14;\r\n    h +\u003d h \u003c\u003c 4;\r\n    h ^\u003d h \u003e\u003e\u003e 10;\r\n    return h;\r\n}"
      },
      {
        "name": "MultiKeyMap#isEqualKey(...4)",
        "body": "{\r\n    final MultiKey\u003c? extends K\u003e multi \u003d entry.getKey();\r\n    return multi.size() \u003d\u003d 3 \u0026\u0026 Objects.equals(key1, multi.getKey(0)) \u0026\u0026 Objects.equals(key2, multi.getKey(1)) \u0026\u0026 Objects.equals(key3, multi.getKey(2));\r\n}"
      },
      {
        "name": "MultiKeyMap#decoratedHashEntry(...1)",
        "body": "{\r\n    return decorated().data[decoratedHashIndex(hashCode)];\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "containsKey",
    "signature": "boolean containsKey(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final int hashCode \u003d hash(key1, key2, key3, key4);\r\n    AbstractHashedMap.HashEntry\u003cMultiKey\u003c? extends K\u003e, V\u003e entry \u003d decoratedHashEntry(hashCode);\r\n    while (entry !\u003d null) {\r\n        if (entry.hashCode \u003d\u003d hashCode \u0026\u0026 isEqualKey(entry, key1, key2, key3, key4)) {\r\n            return true;\r\n        }\r\n        entry \u003d entry.next;\r\n    }\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r5 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($i1 !\u003d $i0) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  Object\n  Object\n  Object\n  $i0 \u003d r0.hash(r1, r2, r3, r4)\n  r5 \u003d r0.decoratedHashEntry($i0)\n}",
      "B1 {\n  if (r5 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $i1 \u003d AbstractHashedMap$HashEntry: int hashCode\u003e\n  if ($i1 !\u003d $i0) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.isEqualKey(r5, r1, r2, r3, r4)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  r5 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiKeyMap#hash(...4)",
        "body": "{\r\n    int h \u003d 0;\r\n    if (key1 !\u003d null) {\r\n        h ^\u003d key1.hashCode();\r\n    }\r\n    if (key2 !\u003d null) {\r\n        h ^\u003d key2.hashCode();\r\n    }\r\n    if (key3 !\u003d null) {\r\n        h ^\u003d key3.hashCode();\r\n    }\r\n    if (key4 !\u003d null) {\r\n        h ^\u003d key4.hashCode();\r\n    }\r\n    h +\u003d ~(h \u003c\u003c 9);\r\n    h ^\u003d h \u003e\u003e\u003e 14;\r\n    h +\u003d h \u003c\u003c 4;\r\n    h ^\u003d h \u003e\u003e\u003e 10;\r\n    return h;\r\n}"
      },
      {
        "name": "MultiKeyMap#isEqualKey(...5)",
        "body": "{\r\n    final MultiKey\u003c? extends K\u003e multi \u003d entry.getKey();\r\n    return multi.size() \u003d\u003d 4 \u0026\u0026 Objects.equals(key1, multi.getKey(0)) \u0026\u0026 Objects.equals(key2, multi.getKey(1)) \u0026\u0026 Objects.equals(key3, multi.getKey(2)) \u0026\u0026 Objects.equals(key4, multi.getKey(3));\r\n}"
      },
      {
        "name": "MultiKeyMap#decoratedHashEntry(...1)",
        "body": "{\r\n    return decorated().data[decoratedHashIndex(hashCode)];\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "containsKey",
    "signature": "boolean containsKey(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final int hashCode \u003d hash(key1, key2, key3, key4, key5);\r\n    AbstractHashedMap.HashEntry\u003cMultiKey\u003c? extends K\u003e, V\u003e entry \u003d decoratedHashEntry(hashCode);\r\n    while (entry !\u003d null) {\r\n        if (entry.hashCode \u003d\u003d hashCode \u0026\u0026 isEqualKey(entry, key1, key2, key3, key4, key5)) {\r\n            return true;\r\n        }\r\n        entry \u003d entry.next;\r\n    }\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r6 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($i1 !\u003d $i0) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  Object\n  Object\n  Object\n  Object\n  $i0 \u003d r0.hash(r1, r2, r3, r4, r5)\n  r6 \u003d r0.decoratedHashEntry($i0)\n}",
      "B1 {\n  if (r6 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $i1 \u003d AbstractHashedMap$HashEntry: int hashCode\u003e\n  if ($i1 !\u003d $i0) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.isEqualKey(r6, r1, r2, r3, r4, r5)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  r6 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiKeyMap#isEqualKey(...6)",
        "body": "{\r\n    final MultiKey\u003c? extends K\u003e multi \u003d entry.getKey();\r\n    return multi.size() \u003d\u003d 5 \u0026\u0026 Objects.equals(key1, multi.getKey(0)) \u0026\u0026 Objects.equals(key2, multi.getKey(1)) \u0026\u0026 Objects.equals(key3, multi.getKey(2)) \u0026\u0026 Objects.equals(key4, multi.getKey(3)) \u0026\u0026 Objects.equals(key5, multi.getKey(4));\r\n}"
      },
      {
        "name": "MultiKeyMap#decoratedHashEntry(...1)",
        "body": "{\r\n    return decorated().data[decoratedHashIndex(hashCode)];\r\n}"
      },
      {
        "name": "MultiKeyMap#hash(...5)",
        "body": "{\r\n    int h \u003d 0;\r\n    if (key1 !\u003d null) {\r\n        h ^\u003d key1.hashCode();\r\n    }\r\n    if (key2 !\u003d null) {\r\n        h ^\u003d key2.hashCode();\r\n    }\r\n    if (key3 !\u003d null) {\r\n        h ^\u003d key3.hashCode();\r\n    }\r\n    if (key4 !\u003d null) {\r\n        h ^\u003d key4.hashCode();\r\n    }\r\n    if (key5 !\u003d null) {\r\n        h ^\u003d key5.hashCode();\r\n    }\r\n    h +\u003d ~(h \u003c\u003c 9);\r\n    h ^\u003d h \u003e\u003e\u003e 14;\r\n    h +\u003d h \u003c\u003c 4;\r\n    h ^\u003d h \u003e\u003e\u003e 10;\r\n    return h;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "get",
    "signature": "java.lang.Object get(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final int hashCode \u003d hash(key1, key2);\r\n    AbstractHashedMap.HashEntry\u003cMultiKey\u003c? extends K\u003e, V\u003e entry \u003d decoratedHashEntry(hashCode);\r\n    while (entry !\u003d null) {\r\n        if (entry.hashCode \u003d\u003d hashCode \u0026\u0026 isEqualKey(entry, key1, key2)) {\r\n            return entry.getValue();\r\n        }\r\n        entry \u003d entry.next;\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r4 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($i1 !\u003d $i0) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  Object\n  $i0 \u003d r0.hash(r1, r2)\n  r4 \u003d r0.decoratedHashEntry($i0)\n}",
      "B1 {\n  if (r4 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $i1 \u003d AbstractHashedMap$HashEntry: int hashCode\u003e\n  if ($i1 !\u003d $i0) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.isEqualKey(r4, r1, r2)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r3 \u003d r4.getValue()\n  return\n}",
      "B5 {\n  r4 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiKeyMap#hash(...2)",
        "body": "{\r\n    int h \u003d 0;\r\n    if (key1 !\u003d null) {\r\n        h ^\u003d key1.hashCode();\r\n    }\r\n    if (key2 !\u003d null) {\r\n        h ^\u003d key2.hashCode();\r\n    }\r\n    h +\u003d ~(h \u003c\u003c 9);\r\n    h ^\u003d h \u003e\u003e\u003e 14;\r\n    h +\u003d h \u003c\u003c 4;\r\n    h ^\u003d h \u003e\u003e\u003e 10;\r\n    return h;\r\n}"
      },
      {
        "name": "MultiKeyMap#isEqualKey(...3)",
        "body": "{\r\n    final MultiKey\u003c? extends K\u003e multi \u003d entry.getKey();\r\n    return multi.size() \u003d\u003d 2 \u0026\u0026 Objects.equals(key1, multi.getKey(0)) \u0026\u0026 Objects.equals(key2, multi.getKey(1));\r\n}"
      },
      {
        "name": "MultiKeyMap#decoratedHashEntry(...1)",
        "body": "{\r\n    return decorated().data[decoratedHashIndex(hashCode)];\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "get",
    "signature": "java.lang.Object get(java.lang.Object,java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final int hashCode \u003d hash(key1, key2, key3);\r\n    AbstractHashedMap.HashEntry\u003cMultiKey\u003c? extends K\u003e, V\u003e entry \u003d decoratedHashEntry(hashCode);\r\n    while (entry !\u003d null) {\r\n        if (entry.hashCode \u003d\u003d hashCode \u0026\u0026 isEqualKey(entry, key1, key2, key3)) {\r\n            return entry.getValue();\r\n        }\r\n        entry \u003d entry.next;\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r5 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($i1 !\u003d $i0) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  Object\n  Object\n  $i0 \u003d r0.hash(r1, r2, r3)\n  r5 \u003d r0.decoratedHashEntry($i0)\n}",
      "B1 {\n  if (r5 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $i1 \u003d AbstractHashedMap$HashEntry: int hashCode\u003e\n  if ($i1 !\u003d $i0) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.isEqualKey(r5, r1, r2, r3)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d r5.getValue()\n  return\n}",
      "B5 {\n  r5 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiKeyMap#hash(...3)",
        "body": "{\r\n    int h \u003d 0;\r\n    if (key1 !\u003d null) {\r\n        h ^\u003d key1.hashCode();\r\n    }\r\n    if (key2 !\u003d null) {\r\n        h ^\u003d key2.hashCode();\r\n    }\r\n    if (key3 !\u003d null) {\r\n        h ^\u003d key3.hashCode();\r\n    }\r\n    h +\u003d ~(h \u003c\u003c 9);\r\n    h ^\u003d h \u003e\u003e\u003e 14;\r\n    h +\u003d h \u003c\u003c 4;\r\n    h ^\u003d h \u003e\u003e\u003e 10;\r\n    return h;\r\n}"
      },
      {
        "name": "MultiKeyMap#isEqualKey(...4)",
        "body": "{\r\n    final MultiKey\u003c? extends K\u003e multi \u003d entry.getKey();\r\n    return multi.size() \u003d\u003d 3 \u0026\u0026 Objects.equals(key1, multi.getKey(0)) \u0026\u0026 Objects.equals(key2, multi.getKey(1)) \u0026\u0026 Objects.equals(key3, multi.getKey(2));\r\n}"
      },
      {
        "name": "MultiKeyMap#decoratedHashEntry(...1)",
        "body": "{\r\n    return decorated().data[decoratedHashIndex(hashCode)];\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "get",
    "signature": "java.lang.Object get(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final int hashCode \u003d hash(key1, key2, key3, key4);\r\n    AbstractHashedMap.HashEntry\u003cMultiKey\u003c? extends K\u003e, V\u003e entry \u003d decoratedHashEntry(hashCode);\r\n    while (entry !\u003d null) {\r\n        if (entry.hashCode \u003d\u003d hashCode \u0026\u0026 isEqualKey(entry, key1, key2, key3, key4)) {\r\n            return entry.getValue();\r\n        }\r\n        entry \u003d entry.next;\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r6 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($i1 !\u003d $i0) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  Object\n  Object\n  Object\n  $i0 \u003d r0.hash(r1, r2, r3, r4)\n  r6 \u003d r0.decoratedHashEntry($i0)\n}",
      "B1 {\n  if (r6 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $i1 \u003d AbstractHashedMap$HashEntry: int hashCode\u003e\n  if ($i1 !\u003d $i0) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.isEqualKey(r6, r1, r2, r3, r4)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r5 \u003d r6.getValue()\n  return\n}",
      "B5 {\n  r6 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiKeyMap#hash(...4)",
        "body": "{\r\n    int h \u003d 0;\r\n    if (key1 !\u003d null) {\r\n        h ^\u003d key1.hashCode();\r\n    }\r\n    if (key2 !\u003d null) {\r\n        h ^\u003d key2.hashCode();\r\n    }\r\n    if (key3 !\u003d null) {\r\n        h ^\u003d key3.hashCode();\r\n    }\r\n    if (key4 !\u003d null) {\r\n        h ^\u003d key4.hashCode();\r\n    }\r\n    h +\u003d ~(h \u003c\u003c 9);\r\n    h ^\u003d h \u003e\u003e\u003e 14;\r\n    h +\u003d h \u003c\u003c 4;\r\n    h ^\u003d h \u003e\u003e\u003e 10;\r\n    return h;\r\n}"
      },
      {
        "name": "MultiKeyMap#isEqualKey(...5)",
        "body": "{\r\n    final MultiKey\u003c? extends K\u003e multi \u003d entry.getKey();\r\n    return multi.size() \u003d\u003d 4 \u0026\u0026 Objects.equals(key1, multi.getKey(0)) \u0026\u0026 Objects.equals(key2, multi.getKey(1)) \u0026\u0026 Objects.equals(key3, multi.getKey(2)) \u0026\u0026 Objects.equals(key4, multi.getKey(3));\r\n}"
      },
      {
        "name": "MultiKeyMap#decoratedHashEntry(...1)",
        "body": "{\r\n    return decorated().data[decoratedHashIndex(hashCode)];\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "get",
    "signature": "java.lang.Object get(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final int hashCode \u003d hash(key1, key2, key3, key4, key5);\r\n    AbstractHashedMap.HashEntry\u003cMultiKey\u003c? extends K\u003e, V\u003e entry \u003d decoratedHashEntry(hashCode);\r\n    while (entry !\u003d null) {\r\n        if (entry.hashCode \u003d\u003d hashCode \u0026\u0026 isEqualKey(entry, key1, key2, key3, key4, key5)) {\r\n            return entry.getValue();\r\n        }\r\n        entry \u003d entry.next;\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r7 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($i1 !\u003d $i0) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  Object\n  Object\n  Object\n  Object\n  $i0 \u003d r0.hash(r1, r2, r3, r4, r5)\n  r7 \u003d r0.decoratedHashEntry($i0)\n}",
      "B1 {\n  if (r7 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $i1 \u003d AbstractHashedMap$HashEntry: int hashCode\u003e\n  if ($i1 !\u003d $i0) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.isEqualKey(r7, r1, r2, r3, r4, r5)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r6 \u003d r7.getValue()\n  return\n}",
      "B5 {\n  r7 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiKeyMap#isEqualKey(...6)",
        "body": "{\r\n    final MultiKey\u003c? extends K\u003e multi \u003d entry.getKey();\r\n    return multi.size() \u003d\u003d 5 \u0026\u0026 Objects.equals(key1, multi.getKey(0)) \u0026\u0026 Objects.equals(key2, multi.getKey(1)) \u0026\u0026 Objects.equals(key3, multi.getKey(2)) \u0026\u0026 Objects.equals(key4, multi.getKey(3)) \u0026\u0026 Objects.equals(key5, multi.getKey(4));\r\n}"
      },
      {
        "name": "MultiKeyMap#decoratedHashEntry(...1)",
        "body": "{\r\n    return decorated().data[decoratedHashIndex(hashCode)];\r\n}"
      },
      {
        "name": "MultiKeyMap#hash(...5)",
        "body": "{\r\n    int h \u003d 0;\r\n    if (key1 !\u003d null) {\r\n        h ^\u003d key1.hashCode();\r\n    }\r\n    if (key2 !\u003d null) {\r\n        h ^\u003d key2.hashCode();\r\n    }\r\n    if (key3 !\u003d null) {\r\n        h ^\u003d key3.hashCode();\r\n    }\r\n    if (key4 !\u003d null) {\r\n        h ^\u003d key4.hashCode();\r\n    }\r\n    if (key5 !\u003d null) {\r\n        h ^\u003d key5.hashCode();\r\n    }\r\n    h +\u003d ~(h \u003c\u003c 9);\r\n    h ^\u003d h \u003e\u003e\u003e 14;\r\n    h +\u003d h \u003c\u003c 4;\r\n    h ^\u003d h \u003e\u003e\u003e 10;\r\n    return h;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "hash",
    "signature": "int hash(java.lang.Object,java.lang.Object)",
    "visibility": "protected",
    "body": "{\r\n    int h \u003d 0;\r\n    if (key1 !\u003d null) {\r\n        h ^\u003d key1.hashCode();\r\n    }\r\n    if (key2 !\u003d null) {\r\n        h ^\u003d key2.hashCode();\r\n    }\r\n    h +\u003d ~(h \u003c\u003c 9);\r\n    h ^\u003d h \u003e\u003e\u003e 14;\r\n    h +\u003d h \u003c\u003c 4;\r\n    h ^\u003d h \u003e\u003e\u003e 10;\r\n    return h;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(r1 \u003d\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  Object\n  i11 \u003d 0\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i10 \u003d r0.hashCode()\n  i11 \u003d 0 ^ $i10\n}",
      "B2 {\n  if (r1 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $i5 \u003d r1.hashCode()\n  i11 \u003d i11 ^ $i5\n}",
      "B4 {\n  $i0 \u003d i11 \u003c\u003c 9\n  $i13 \u003d (int) -1\n  $i1 \u003d $i0 ^ $i13\n  $i6 \u003d i11 + $i1\n  $i2 \u003d $i6 \u003e\u003e\u003e 14\n  $i7 \u003d $i6 ^ $i2\n  $i3 \u003d $i7 \u003c\u003c 4\n  $i8 \u003d $i7 + $i3\n  $i4 \u003d $i8 \u003e\u003e\u003e 10\n  $i9 \u003d $i8 ^ $i4\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "hash",
    "signature": "int hash(java.lang.Object,java.lang.Object,java.lang.Object)",
    "visibility": "protected",
    "body": "{\r\n    int h \u003d 0;\r\n    if (key1 !\u003d null) {\r\n        h ^\u003d key1.hashCode();\r\n    }\r\n    if (key2 !\u003d null) {\r\n        h ^\u003d key2.hashCode();\r\n    }\r\n    if (key3 !\u003d null) {\r\n        h ^\u003d key3.hashCode();\r\n    }\r\n    h +\u003d ~(h \u003c\u003c 9);\r\n    h ^\u003d h \u003e\u003e\u003e 14;\r\n    h +\u003d h \u003c\u003c 4;\r\n    h ^\u003d h \u003e\u003e\u003e 10;\r\n    return h;\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(r1 \u003d\u003d null) → B3 | else → B4",
      "B4 : If(r2 \u003d\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  Object\n  Object\n  i12 \u003d 0\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i11 \u003d r0.hashCode()\n  i12 \u003d 0 ^ $i11\n}",
      "B2 {\n  if (r1 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $i10 \u003d r1.hashCode()\n  i12 \u003d i12 ^ $i10\n}",
      "B4 {\n  if (r2 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  $i5 \u003d r2.hashCode()\n  i12 \u003d i12 ^ $i5\n}",
      "B6 {\n  $i0 \u003d i12 \u003c\u003c 9\n  $i14 \u003d (int) -1\n  $i1 \u003d $i0 ^ $i14\n  $i6 \u003d i12 + $i1\n  $i2 \u003d $i6 \u003e\u003e\u003e 14\n  $i7 \u003d $i6 ^ $i2\n  $i3 \u003d $i7 \u003c\u003c 4\n  $i8 \u003d $i7 + $i3\n  $i4 \u003d $i8 \u003e\u003e\u003e 10\n  $i9 \u003d $i8 ^ $i4\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "hash",
    "signature": "int hash(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
    "visibility": "protected",
    "body": "{\r\n    int h \u003d 0;\r\n    if (key1 !\u003d null) {\r\n        h ^\u003d key1.hashCode();\r\n    }\r\n    if (key2 !\u003d null) {\r\n        h ^\u003d key2.hashCode();\r\n    }\r\n    if (key3 !\u003d null) {\r\n        h ^\u003d key3.hashCode();\r\n    }\r\n    if (key4 !\u003d null) {\r\n        h ^\u003d key4.hashCode();\r\n    }\r\n    h +\u003d ~(h \u003c\u003c 9);\r\n    h ^\u003d h \u003e\u003e\u003e 14;\r\n    h +\u003d h \u003c\u003c 4;\r\n    h ^\u003d h \u003e\u003e\u003e 10;\r\n    return h;\r\n}",
    "nodes": 9,
    "edges": 12,
    "cc": 5,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(r1 \u003d\u003d null) → B3 | else → B4",
      "B4 : If(r2 \u003d\u003d null) → B5 | else → B6",
      "B6 : If(r3 \u003d\u003d null) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  Object\n  Object\n  Object\n  i13 \u003d 0\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i12 \u003d r0.hashCode()\n  i13 \u003d 0 ^ $i12\n}",
      "B2 {\n  if (r1 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $i11 \u003d r1.hashCode()\n  i13 \u003d i13 ^ $i11\n}",
      "B4 {\n  if (r2 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  $i10 \u003d r2.hashCode()\n  i13 \u003d i13 ^ $i10\n}",
      "B6 {\n  if (r3 \u003d\u003d null) goto B7 else B8\n}",
      "B7 {\n  $i5 \u003d r3.hashCode()\n  i13 \u003d i13 ^ $i5\n}",
      "B8 {\n  $i0 \u003d i13 \u003c\u003c 9\n  $i15 \u003d (int) -1\n  $i1 \u003d $i0 ^ $i15\n  $i6 \u003d i13 + $i1\n  $i2 \u003d $i6 \u003e\u003e\u003e 14\n  $i7 \u003d $i6 ^ $i2\n  $i3 \u003d $i7 \u003c\u003c 4\n  $i8 \u003d $i7 + $i3\n  $i4 \u003d $i8 \u003e\u003e\u003e 10\n  $i9 \u003d $i8 ^ $i4\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "hash",
    "signature": "int hash(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
    "visibility": "protected",
    "body": "{\r\n    int h \u003d 0;\r\n    if (key1 !\u003d null) {\r\n        h ^\u003d key1.hashCode();\r\n    }\r\n    if (key2 !\u003d null) {\r\n        h ^\u003d key2.hashCode();\r\n    }\r\n    if (key3 !\u003d null) {\r\n        h ^\u003d key3.hashCode();\r\n    }\r\n    if (key4 !\u003d null) {\r\n        h ^\u003d key4.hashCode();\r\n    }\r\n    if (key5 !\u003d null) {\r\n        h ^\u003d key5.hashCode();\r\n    }\r\n    h +\u003d ~(h \u003c\u003c 9);\r\n    h ^\u003d h \u003e\u003e\u003e 14;\r\n    h +\u003d h \u003c\u003c 4;\r\n    h ^\u003d h \u003e\u003e\u003e 10;\r\n    return h;\r\n}",
    "nodes": 11,
    "edges": 15,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B2 : If(r1 \u003d\u003d null) → B3 | else → B4",
      "B4 : If(r2 \u003d\u003d null) → B5 | else → B6",
      "B6 : If(r3 \u003d\u003d null) → B7 | else → B8",
      "B8 : If(r4 \u003d\u003d null) → B9 | else → B10"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  Object\n  Object\n  Object\n  Object\n  i14 \u003d 0\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i13 \u003d r0.hashCode()\n  i14 \u003d 0 ^ $i13\n}",
      "B2 {\n  if (r1 \u003d\u003d null) goto B3 else B4\n}",
      "B3 {\n  $i12 \u003d r1.hashCode()\n  i14 \u003d i14 ^ $i12\n}",
      "B4 {\n  if (r2 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  $i11 \u003d r2.hashCode()\n  i14 \u003d i14 ^ $i11\n}",
      "B6 {\n  if (r3 \u003d\u003d null) goto B7 else B8\n}",
      "B7 {\n  $i10 \u003d r3.hashCode()\n  i14 \u003d i14 ^ $i10\n}",
      "B8 {\n  if (r4 \u003d\u003d null) goto B9 else B10\n}",
      "B9 {\n  $i5 \u003d r4.hashCode()\n  i14 \u003d i14 ^ $i5\n}",
      "B10 {\n  $i0 \u003d i14 \u003c\u003c 9\n  $i16 \u003d (int) -1\n  $i1 \u003d $i0 ^ $i16\n  $i6 \u003d i14 + $i1\n  $i2 \u003d $i6 \u003e\u003e\u003e 14\n  $i7 \u003d $i6 ^ $i2\n  $i3 \u003d $i7 \u003c\u003c 4\n  $i8 \u003d $i7 + $i3\n  $i4 \u003d $i8 \u003e\u003e\u003e 10\n  $i9 \u003d $i8 ^ $i4\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "isEqualKey",
    "signature": "boolean isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 !\u003d 2) → B1 | else → B4",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B4",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  AbstractHashedMap$HashEntry\n  Object\n  Object\n  $r1 \u003d r0.getKey()\n  r2 \u003d MultiKey) $r1\n  $i0 \u003d r2.size()\n  if ($i0 !\u003d 2) goto B1 else B4\n}",
      "B1 {\n  $r4 \u003d r2.getKey(0)\n  $z0 \u003d Objects.equals(r3, $r4)\n  if ($z0 \u003d\u003d 0) goto B2 else B4\n}",
      "B2 {\n  $r6 \u003d r2.getKey(1)\n  $z1 \u003d Objects.equals(r5, $r6)\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $z2 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z2 \u003d 0\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "isEqualKey",
    "signature": "boolean isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 10,
    "cc": 5,
    "flowSummary": [
      "B0 : If($i0 !\u003d 3) → B1 | else → B5",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B5",
      "B3 : If($z2 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  AbstractHashedMap$HashEntry\n  Object\n  Object\n  Object\n  $r1 \u003d r0.getKey()\n  r2 \u003d MultiKey) $r1\n  $i0 \u003d r2.size()\n  if ($i0 !\u003d 3) goto B1 else B5\n}",
      "B1 {\n  $r4 \u003d r2.getKey(0)\n  $z0 \u003d Objects.equals(r3, $r4)\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $r6 \u003d r2.getKey(1)\n  $z1 \u003d Objects.equals(r5, $r6)\n  if ($z1 \u003d\u003d 0) goto B3 else B5\n}",
      "B3 {\n  $r8 \u003d r2.getKey(2)\n  $z2 \u003d Objects.equals(r7, $r8)\n  if ($z2 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $z3 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z3 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "isEqualKey",
    "signature": "boolean isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [
      "B0 : If($i0 !\u003d 4) → B1 | else → B6",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B6",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B6",
      "B3 : If($z2 \u003d\u003d 0) → B4 | else → B6",
      "B4 : If($z3 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  AbstractHashedMap$HashEntry\n  Object\n  Object\n  Object\n  Object\n  $r1 \u003d r0.getKey()\n  r2 \u003d MultiKey) $r1\n  $i0 \u003d r2.size()\n  if ($i0 !\u003d 4) goto B1 else B6\n}",
      "B1 {\n  $r4 \u003d r2.getKey(0)\n  $z0 \u003d Objects.equals(r3, $r4)\n  if ($z0 \u003d\u003d 0) goto B2 else B6\n}",
      "B2 {\n  $r6 \u003d r2.getKey(1)\n  $z1 \u003d Objects.equals(r5, $r6)\n  if ($z1 \u003d\u003d 0) goto B3 else B6\n}",
      "B3 {\n  $r8 \u003d r2.getKey(2)\n  $z2 \u003d Objects.equals(r7, $r8)\n  if ($z2 \u003d\u003d 0) goto B4 else B6\n}",
      "B4 {\n  $r10 \u003d r2.getKey(3)\n  $z3 \u003d Objects.equals(r9, $r10)\n  if ($z3 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $z4 \u003d 1\n  goto B7\n}",
      "B6 {\n  $z4 \u003d 0\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "isEqualKey",
    "signature": "boolean isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 9,
    "edges": 14,
    "cc": 7,
    "flowSummary": [
      "B0 : If($i0 !\u003d 5) → B1 | else → B7",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B7",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B7",
      "B3 : If($z2 \u003d\u003d 0) → B4 | else → B7",
      "B4 : If($z3 \u003d\u003d 0) → B5 | else → B7",
      "B5 : If($z4 \u003d\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  AbstractHashedMap$HashEntry\n  Object\n  Object\n  Object\n  Object\n  Object\n  $r1 \u003d r0.getKey()\n  r2 \u003d MultiKey) $r1\n  $i0 \u003d r2.size()\n  if ($i0 !\u003d 5) goto B1 else B7\n}",
      "B1 {\n  $r4 \u003d r2.getKey(0)\n  $z0 \u003d Objects.equals(r3, $r4)\n  if ($z0 \u003d\u003d 0) goto B2 else B7\n}",
      "B2 {\n  $r6 \u003d r2.getKey(1)\n  $z1 \u003d Objects.equals(r5, $r6)\n  if ($z1 \u003d\u003d 0) goto B3 else B7\n}",
      "B3 {\n  $r8 \u003d r2.getKey(2)\n  $z2 \u003d Objects.equals(r7, $r8)\n  if ($z2 \u003d\u003d 0) goto B4 else B7\n}",
      "B4 {\n  $r10 \u003d r2.getKey(3)\n  $z3 \u003d Objects.equals(r9, $r10)\n  if ($z3 \u003d\u003d 0) goto B5 else B7\n}",
      "B5 {\n  $r12 \u003d r2.getKey(4)\n  $z4 \u003d Objects.equals(r11, $r12)\n  if ($z4 \u003d\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $z5 \u003d 1\n  goto B8\n}",
      "B7 {\n  $z5 \u003d 0\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B7",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "put",
    "signature": "java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r13 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($i2 !\u003d $i0) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  Object\n  Object\n  Object\n  Object\n  Object\n  $i0 \u003d r0.hash(r1, r2, r3, r4, r5)\n  $i1 \u003d r0.decoratedHashIndex($i0)\n  $r6 \u003d r0.decorated()\n  $r7 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  r13 \u003d $r7[$i1]\n}",
      "B1 {\n  if (r13 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $i2 \u003d AbstractHashedMap$HashEntry: int hashCode\u003e\n  if ($i2 !\u003d $i0) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.isEqualKey(r13, r1, r2, r3, r4, r5)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r11 \u003d r13.getValue()\n  $r12 \u003d r0.decorated()\n  $r12.updateEntry(r13, r10)\n  return\n}",
      "B5 {\n  r13 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B1\n}",
      "B6 {\n  $r8 \u003d r0.decorated()\n  $r9 \u003d MultiKey\n  new MultiKey(r1, r2, r3, r4, r5)\n  $r8.addMapping($i1, $i0, $r9, r10)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "put",
    "signature": "java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r12 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($i2 !\u003d $i0) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  Object\n  Object\n  Object\n  Object\n  $i0 \u003d r0.hash(r1, r2, r3, r4)\n  $i1 \u003d r0.decoratedHashIndex($i0)\n  $r5 \u003d r0.decorated()\n  $r6 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  r12 \u003d $r6[$i1]\n}",
      "B1 {\n  if (r12 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $i2 \u003d AbstractHashedMap$HashEntry: int hashCode\u003e\n  if ($i2 !\u003d $i0) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.isEqualKey(r12, r1, r2, r3, r4)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r10 \u003d r12.getValue()\n  $r11 \u003d r0.decorated()\n  $r11.updateEntry(r12, r9)\n  return\n}",
      "B5 {\n  r12 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B1\n}",
      "B6 {\n  $r7 \u003d r0.decorated()\n  $r8 \u003d MultiKey\n  new MultiKey(r1, r2, r3, r4)\n  $r7.addMapping($i1, $i0, $r8, r9)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "put",
    "signature": "java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r11 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($i2 !\u003d $i0) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  Object\n  Object\n  Object\n  $i0 \u003d r0.hash(r1, r2, r3)\n  $i1 \u003d r0.decoratedHashIndex($i0)\n  $r4 \u003d r0.decorated()\n  $r5 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  r11 \u003d $r5[$i1]\n}",
      "B1 {\n  if (r11 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $i2 \u003d AbstractHashedMap$HashEntry: int hashCode\u003e\n  if ($i2 !\u003d $i0) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.isEqualKey(r11, r1, r2, r3)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r9 \u003d r11.getValue()\n  $r10 \u003d r0.decorated()\n  $r10.updateEntry(r11, r8)\n  return\n}",
      "B5 {\n  r11 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B1\n}",
      "B6 {\n  $r6 \u003d r0.decorated()\n  $r7 \u003d MultiKey\n  new MultiKey(r1, r2, r3)\n  $r6.addMapping($i1, $i0, $r7, r8)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "put",
    "signature": "java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r10 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($i2 !\u003d $i0) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  Object\n  Object\n  $i0 \u003d r0.hash(r1, r2)\n  $i1 \u003d r0.decoratedHashIndex($i0)\n  $r3 \u003d r0.decorated()\n  $r4 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  r10 \u003d $r4[$i1]\n}",
      "B1 {\n  if (r10 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $i2 \u003d AbstractHashedMap$HashEntry: int hashCode\u003e\n  if ($i2 !\u003d $i0) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.isEqualKey(r10, r1, r2)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r8 \u003d r10.getValue()\n  $r9 \u003d r0.decorated()\n  $r9.updateEntry(r10, r7)\n  return\n}",
      "B5 {\n  r10 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B1\n}",
      "B6 {\n  $r5 \u003d r0.decorated()\n  $r6 \u003d MultiKey\n  new MultiKey(r1, r2)\n  $r5.addMapping($i1, $i0, $r6, r7)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "putAll",
    "signature": "void putAll(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    for (final MultiKey\u003c? extends K\u003e key : mapToCopy.keySet()) {\r\n        checkKey(key);\r\n    }\r\n    super.putAll(mapToCopy);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Map\n  $r1 \u003d r0.keySet()\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d $r2.next()\n  r5 \u003d MultiKey) $r4\n  r3.checkKey(r5)\n  goto B1\n}",
      "B3 {\n  r3.putAll(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiKeyMap#checkKey(...1)",
        "body": "{\r\n    Objects.requireNonNull(key, \"key\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "removeAll",
    "signature": "boolean removeAll(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    boolean modified \u003d false;\r\n    final MapIterator\u003cMultiKey\u003c? extends K\u003e, V\u003e it \u003d mapIterator();\r\n    while (it.hasNext()) {\r\n        final MultiKey\u003c? extends K\u003e multi \u003d it.next();\r\n        if (multi.size() \u003e\u003d 1 \u0026\u0026 Objects.equals(key1, multi.getKey(0))) {\r\n            it.remove();\r\n            modified \u003d true;\r\n        }\r\n    }\r\n    return modified;\r\n}",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B6",
      "B2 : If($i0 \u003c 1) → B3 | else → B5",
      "B3 : If($z1 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  z2 \u003d 0\n  $r1 \u003d r0.mapIterator()\n}",
      "B1 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B6\n}",
      "B2 {\n  $r2 \u003d $r1.next()\n  r3 \u003d MultiKey) $r2\n  $i0 \u003d r3.size()\n  if ($i0 \u003c 1) goto B3 else B5\n}",
      "B3 {\n  $r5 \u003d r3.getKey(0)\n  $z1 \u003d Objects.equals(r4, $r5)\n  if ($z1 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r1.remove()\n  z2 \u003d 1\n}",
      "B5 {\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiKeyMap#mapIterator(...0)",
        "body": "{\r\n    return decorated().mapIterator();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "removeAll",
    "signature": "boolean removeAll(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    boolean modified \u003d false;\r\n    final MapIterator\u003cMultiKey\u003c? extends K\u003e, V\u003e it \u003d mapIterator();\r\n    while (it.hasNext()) {\r\n        final MultiKey\u003c? extends K\u003e multi \u003d it.next();\r\n        if (multi.size() \u003e\u003d 2 \u0026\u0026 Objects.equals(key1, multi.getKey(0)) \u0026\u0026 Objects.equals(key2, multi.getKey(1))) {\r\n            it.remove();\r\n            modified \u003d true;\r\n        }\r\n    }\r\n    return modified;\r\n}",
    "nodes": 8,
    "edges": 11,
    "cc": 5,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B7",
      "B2 : If($i0 \u003c 2) → B3 | else → B6",
      "B3 : If($z1 \u003d\u003d 0) → B4 | else → B6",
      "B4 : If($z2 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  Object\n  z3 \u003d 0\n  $r1 \u003d r0.mapIterator()\n}",
      "B1 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B7\n}",
      "B2 {\n  $r2 \u003d $r1.next()\n  r3 \u003d MultiKey) $r2\n  $i0 \u003d r3.size()\n  if ($i0 \u003c 2) goto B3 else B6\n}",
      "B3 {\n  $r5 \u003d r3.getKey(0)\n  $z1 \u003d Objects.equals(r4, $r5)\n  if ($z1 \u003d\u003d 0) goto B4 else B6\n}",
      "B4 {\n  $r7 \u003d r3.getKey(1)\n  $z2 \u003d Objects.equals(r6, $r7)\n  if ($z2 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r1.remove()\n  z3 \u003d 1\n}",
      "B6 {\n  goto B1\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B1",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiKeyMap#mapIterator(...0)",
        "body": "{\r\n    return decorated().mapIterator();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "removeAll",
    "signature": "boolean removeAll(java.lang.Object,java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    boolean modified \u003d false;\r\n    final MapIterator\u003cMultiKey\u003c? extends K\u003e, V\u003e it \u003d mapIterator();\r\n    while (it.hasNext()) {\r\n        final MultiKey\u003c? extends K\u003e multi \u003d it.next();\r\n        if (multi.size() \u003e\u003d 3 \u0026\u0026 Objects.equals(key1, multi.getKey(0)) \u0026\u0026 Objects.equals(key2, multi.getKey(1)) \u0026\u0026 Objects.equals(key3, multi.getKey(2))) {\r\n            it.remove();\r\n            modified \u003d true;\r\n        }\r\n    }\r\n    return modified;\r\n}",
    "nodes": 9,
    "edges": 13,
    "cc": 6,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B8",
      "B2 : If($i0 \u003c 3) → B3 | else → B7",
      "B3 : If($z1 \u003d\u003d 0) → B4 | else → B7",
      "B4 : If($z2 \u003d\u003d 0) → B5 | else → B7",
      "B5 : If($z3 \u003d\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  Object\n  Object\n  z4 \u003d 0\n  $r1 \u003d r0.mapIterator()\n}",
      "B1 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B8\n}",
      "B2 {\n  $r2 \u003d $r1.next()\n  r3 \u003d MultiKey) $r2\n  $i0 \u003d r3.size()\n  if ($i0 \u003c 3) goto B3 else B7\n}",
      "B3 {\n  $r5 \u003d r3.getKey(0)\n  $z1 \u003d Objects.equals(r4, $r5)\n  if ($z1 \u003d\u003d 0) goto B4 else B7\n}",
      "B4 {\n  $r7 \u003d r3.getKey(1)\n  $z2 \u003d Objects.equals(r6, $r7)\n  if ($z2 \u003d\u003d 0) goto B5 else B7\n}",
      "B5 {\n  $r9 \u003d r3.getKey(2)\n  $z3 \u003d Objects.equals(r8, $r9)\n  if ($z3 \u003d\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $r1.remove()\n  z4 \u003d 1\n}",
      "B7 {\n  goto B1\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e B1",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiKeyMap#mapIterator(...0)",
        "body": "{\r\n    return decorated().mapIterator();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "removeAll",
    "signature": "boolean removeAll(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    boolean modified \u003d false;\r\n    final MapIterator\u003cMultiKey\u003c? extends K\u003e, V\u003e it \u003d mapIterator();\r\n    while (it.hasNext()) {\r\n        final MultiKey\u003c? extends K\u003e multi \u003d it.next();\r\n        if (multi.size() \u003e\u003d 4 \u0026\u0026 Objects.equals(key1, multi.getKey(0)) \u0026\u0026 Objects.equals(key2, multi.getKey(1)) \u0026\u0026 Objects.equals(key3, multi.getKey(2)) \u0026\u0026 Objects.equals(key4, multi.getKey(3))) {\r\n            it.remove();\r\n            modified \u003d true;\r\n        }\r\n    }\r\n    return modified;\r\n}",
    "nodes": 10,
    "edges": 15,
    "cc": 7,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B9",
      "B2 : If($i0 \u003c 4) → B3 | else → B8",
      "B3 : If($z1 \u003d\u003d 0) → B4 | else → B8",
      "B4 : If($z2 \u003d\u003d 0) → B5 | else → B8",
      "B5 : If($z3 \u003d\u003d 0) → B6 | else → B8",
      "B6 : If($z4 \u003d\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  Object\n  Object\n  Object\n  z5 \u003d 0\n  $r1 \u003d r0.mapIterator()\n}",
      "B1 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B9\n}",
      "B2 {\n  $r2 \u003d $r1.next()\n  r3 \u003d MultiKey) $r2\n  $i0 \u003d r3.size()\n  if ($i0 \u003c 4) goto B3 else B8\n}",
      "B3 {\n  $r5 \u003d r3.getKey(0)\n  $z1 \u003d Objects.equals(r4, $r5)\n  if ($z1 \u003d\u003d 0) goto B4 else B8\n}",
      "B4 {\n  $r7 \u003d r3.getKey(1)\n  $z2 \u003d Objects.equals(r6, $r7)\n  if ($z2 \u003d\u003d 0) goto B5 else B8\n}",
      "B5 {\n  $r9 \u003d r3.getKey(2)\n  $z3 \u003d Objects.equals(r8, $r9)\n  if ($z3 \u003d\u003d 0) goto B6 else B8\n}",
      "B6 {\n  $r11 \u003d r3.getKey(3)\n  $z4 \u003d Objects.equals(r10, $r11)\n  if ($z4 \u003d\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $r1.remove()\n  z5 \u003d 1\n}",
      "B8 {\n  goto B1\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B9",
      "B2 --\u003e B3",
      "B2 --\u003e B8",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B5 --\u003e B8",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B1",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiKeyMap#mapIterator(...0)",
        "body": "{\r\n    return decorated().mapIterator();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "removeMultiKey",
    "signature": "java.lang.Object removeMultiKey(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final int hashCode \u003d hash(key1, key2);\r\n    final int index \u003d decoratedHashIndex(hashCode);\r\n    AbstractHashedMap.HashEntry\u003cMultiKey\u003c? extends K\u003e, V\u003e entry \u003d decorated().data[index];\r\n    AbstractHashedMap.HashEntry\u003cMultiKey\u003c? extends K\u003e, V\u003e previous \u003d null;\r\n    while (entry !\u003d null) {\r\n        if (entry.hashCode \u003d\u003d hashCode \u0026\u0026 isEqualKey(entry, key1, key2)) {\r\n            final V oldValue \u003d entry.getValue();\r\n            decorated().removeMapping(entry, index, previous);\r\n            return oldValue;\r\n        }\r\n        previous \u003d entry;\r\n        entry \u003d entry.next;\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r7 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($i2 !\u003d $i0) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  Object\n  $i0 \u003d r0.hash(r1, r2)\n  $i1 \u003d r0.decoratedHashIndex($i0)\n  $r3 \u003d r0.decorated()\n  $r4 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  r7 \u003d $r4[$i1]\n  r8 \u003d null\n}",
      "B1 {\n  if (r7 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $i2 \u003d AbstractHashedMap$HashEntry: int hashCode\u003e\n  if ($i2 !\u003d $i0) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.isEqualKey(r7, r1, r2)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r5 \u003d r7.getValue()\n  $r6 \u003d r0.decorated()\n  $r6.removeMapping(r7, $i1, r8)\n  return\n}",
      "B5 {\n  r8 \u003d r7\n  r7 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiKeyMap#hash(...2)",
        "body": "{\r\n    int h \u003d 0;\r\n    if (key1 !\u003d null) {\r\n        h ^\u003d key1.hashCode();\r\n    }\r\n    if (key2 !\u003d null) {\r\n        h ^\u003d key2.hashCode();\r\n    }\r\n    h +\u003d ~(h \u003c\u003c 9);\r\n    h ^\u003d h \u003e\u003e\u003e 14;\r\n    h +\u003d h \u003c\u003c 4;\r\n    h ^\u003d h \u003e\u003e\u003e 10;\r\n    return h;\r\n}"
      },
      {
        "name": "MultiKeyMap#decorated(...0)",
        "body": "{\r\n    return (AbstractHashedMap\u003cMultiKey\u003c? extends K\u003e, V\u003e) super.decorated();\r\n}"
      },
      {
        "name": "MultiKeyMap#isEqualKey(...3)",
        "body": "{\r\n    final MultiKey\u003c? extends K\u003e multi \u003d entry.getKey();\r\n    return multi.size() \u003d\u003d 2 \u0026\u0026 Objects.equals(key1, multi.getKey(0)) \u0026\u0026 Objects.equals(key2, multi.getKey(1));\r\n}"
      },
      {
        "name": "MultiKeyMap#decoratedHashIndex(...1)",
        "body": "{\r\n    return decorated().hashIndex(hashCode, decorated().data.length);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "removeMultiKey",
    "signature": "java.lang.Object removeMultiKey(java.lang.Object,java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final int hashCode \u003d hash(key1, key2, key3);\r\n    final int index \u003d decoratedHashIndex(hashCode);\r\n    AbstractHashedMap.HashEntry\u003cMultiKey\u003c? extends K\u003e, V\u003e entry \u003d decorated().data[index];\r\n    AbstractHashedMap.HashEntry\u003cMultiKey\u003c? extends K\u003e, V\u003e previous \u003d null;\r\n    while (entry !\u003d null) {\r\n        if (entry.hashCode \u003d\u003d hashCode \u0026\u0026 isEqualKey(entry, key1, key2, key3)) {\r\n            final V oldValue \u003d entry.getValue();\r\n            decorated().removeMapping(entry, index, previous);\r\n            return oldValue;\r\n        }\r\n        previous \u003d entry;\r\n        entry \u003d entry.next;\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r8 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($i2 !\u003d $i0) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  Object\n  Object\n  $i0 \u003d r0.hash(r1, r2, r3)\n  $i1 \u003d r0.decoratedHashIndex($i0)\n  $r4 \u003d r0.decorated()\n  $r5 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  r8 \u003d $r5[$i1]\n  r9 \u003d null\n}",
      "B1 {\n  if (r8 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $i2 \u003d AbstractHashedMap$HashEntry: int hashCode\u003e\n  if ($i2 !\u003d $i0) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.isEqualKey(r8, r1, r2, r3)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r6 \u003d r8.getValue()\n  $r7 \u003d r0.decorated()\n  $r7.removeMapping(r8, $i1, r9)\n  return\n}",
      "B5 {\n  r9 \u003d r8\n  r8 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiKeyMap#hash(...3)",
        "body": "{\r\n    int h \u003d 0;\r\n    if (key1 !\u003d null) {\r\n        h ^\u003d key1.hashCode();\r\n    }\r\n    if (key2 !\u003d null) {\r\n        h ^\u003d key2.hashCode();\r\n    }\r\n    if (key3 !\u003d null) {\r\n        h ^\u003d key3.hashCode();\r\n    }\r\n    h +\u003d ~(h \u003c\u003c 9);\r\n    h ^\u003d h \u003e\u003e\u003e 14;\r\n    h +\u003d h \u003c\u003c 4;\r\n    h ^\u003d h \u003e\u003e\u003e 10;\r\n    return h;\r\n}"
      },
      {
        "name": "MultiKeyMap#isEqualKey(...4)",
        "body": "{\r\n    final MultiKey\u003c? extends K\u003e multi \u003d entry.getKey();\r\n    return multi.size() \u003d\u003d 3 \u0026\u0026 Objects.equals(key1, multi.getKey(0)) \u0026\u0026 Objects.equals(key2, multi.getKey(1)) \u0026\u0026 Objects.equals(key3, multi.getKey(2));\r\n}"
      },
      {
        "name": "MultiKeyMap#decorated(...0)",
        "body": "{\r\n    return (AbstractHashedMap\u003cMultiKey\u003c? extends K\u003e, V\u003e) super.decorated();\r\n}"
      },
      {
        "name": "MultiKeyMap#decoratedHashIndex(...1)",
        "body": "{\r\n    return decorated().hashIndex(hashCode, decorated().data.length);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "removeMultiKey",
    "signature": "java.lang.Object removeMultiKey(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final int hashCode \u003d hash(key1, key2, key3, key4);\r\n    final int index \u003d decoratedHashIndex(hashCode);\r\n    AbstractHashedMap.HashEntry\u003cMultiKey\u003c? extends K\u003e, V\u003e entry \u003d decorated().data[index];\r\n    AbstractHashedMap.HashEntry\u003cMultiKey\u003c? extends K\u003e, V\u003e previous \u003d null;\r\n    while (entry !\u003d null) {\r\n        if (entry.hashCode \u003d\u003d hashCode \u0026\u0026 isEqualKey(entry, key1, key2, key3, key4)) {\r\n            final V oldValue \u003d entry.getValue();\r\n            decorated().removeMapping(entry, index, previous);\r\n            return oldValue;\r\n        }\r\n        previous \u003d entry;\r\n        entry \u003d entry.next;\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r9 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($i2 !\u003d $i0) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  Object\n  Object\n  Object\n  $i0 \u003d r0.hash(r1, r2, r3, r4)\n  $i1 \u003d r0.decoratedHashIndex($i0)\n  $r5 \u003d r0.decorated()\n  $r6 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  r9 \u003d $r6[$i1]\n  r10 \u003d null\n}",
      "B1 {\n  if (r9 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $i2 \u003d AbstractHashedMap$HashEntry: int hashCode\u003e\n  if ($i2 !\u003d $i0) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.isEqualKey(r9, r1, r2, r3, r4)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r7 \u003d r9.getValue()\n  $r8 \u003d r0.decorated()\n  $r8.removeMapping(r9, $i1, r10)\n  return\n}",
      "B5 {\n  r10 \u003d r9\n  r9 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiKeyMap#hash(...4)",
        "body": "{\r\n    int h \u003d 0;\r\n    if (key1 !\u003d null) {\r\n        h ^\u003d key1.hashCode();\r\n    }\r\n    if (key2 !\u003d null) {\r\n        h ^\u003d key2.hashCode();\r\n    }\r\n    if (key3 !\u003d null) {\r\n        h ^\u003d key3.hashCode();\r\n    }\r\n    if (key4 !\u003d null) {\r\n        h ^\u003d key4.hashCode();\r\n    }\r\n    h +\u003d ~(h \u003c\u003c 9);\r\n    h ^\u003d h \u003e\u003e\u003e 14;\r\n    h +\u003d h \u003c\u003c 4;\r\n    h ^\u003d h \u003e\u003e\u003e 10;\r\n    return h;\r\n}"
      },
      {
        "name": "MultiKeyMap#decorated(...0)",
        "body": "{\r\n    return (AbstractHashedMap\u003cMultiKey\u003c? extends K\u003e, V\u003e) super.decorated();\r\n}"
      },
      {
        "name": "MultiKeyMap#isEqualKey(...5)",
        "body": "{\r\n    final MultiKey\u003c? extends K\u003e multi \u003d entry.getKey();\r\n    return multi.size() \u003d\u003d 4 \u0026\u0026 Objects.equals(key1, multi.getKey(0)) \u0026\u0026 Objects.equals(key2, multi.getKey(1)) \u0026\u0026 Objects.equals(key3, multi.getKey(2)) \u0026\u0026 Objects.equals(key4, multi.getKey(3));\r\n}"
      },
      {
        "name": "MultiKeyMap#decoratedHashIndex(...1)",
        "body": "{\r\n    return decorated().hashIndex(hashCode, decorated().data.length);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiKeyMap",
    "methodName": "removeMultiKey",
    "signature": "java.lang.Object removeMultiKey(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final int hashCode \u003d hash(key1, key2, key3, key4, key5);\r\n    final int index \u003d decoratedHashIndex(hashCode);\r\n    AbstractHashedMap.HashEntry\u003cMultiKey\u003c? extends K\u003e, V\u003e entry \u003d decorated().data[index];\r\n    AbstractHashedMap.HashEntry\u003cMultiKey\u003c? extends K\u003e, V\u003e previous \u003d null;\r\n    while (entry !\u003d null) {\r\n        if (entry.hashCode \u003d\u003d hashCode \u0026\u0026 isEqualKey(entry, key1, key2, key3, key4, key5)) {\r\n            final V oldValue \u003d entry.getValue();\r\n            decorated().removeMapping(entry, index, previous);\r\n            return oldValue;\r\n        }\r\n        previous \u003d entry;\r\n        entry \u003d entry.next;\r\n    }\r\n    return null;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If(r10 \u003d\u003d null) → B2 | else → B6",
      "B2 : If($i2 !\u003d $i0) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MultiKeyMap\n  Object\n  Object\n  Object\n  Object\n  Object\n  $i0 \u003d r0.hash(r1, r2, r3, r4, r5)\n  $i1 \u003d r0.decoratedHashIndex($i0)\n  $r6 \u003d r0.decorated()\n  $r7 \u003d AbstractHashedMap$HashEntry[] data\u003e\n  r10 \u003d $r7[$i1]\n  r11 \u003d null\n}",
      "B1 {\n  if (r10 \u003d\u003d null) goto B2 else B6\n}",
      "B2 {\n  $i2 \u003d AbstractHashedMap$HashEntry: int hashCode\u003e\n  if ($i2 !\u003d $i0) goto B3 else B5\n}",
      "B3 {\n  $z0 \u003d r0.isEqualKey(r10, r1, r2, r3, r4, r5)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r8 \u003d r10.getValue()\n  $r9 \u003d r0.decorated()\n  $r9.removeMapping(r10, $i1, r11)\n  return\n}",
      "B5 {\n  r11 \u003d r10\n  r10 \u003d AbstractHashedMap$HashEntry next\u003e\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiKeyMap#isEqualKey(...6)",
        "body": "{\r\n    final MultiKey\u003c? extends K\u003e multi \u003d entry.getKey();\r\n    return multi.size() \u003d\u003d 5 \u0026\u0026 Objects.equals(key1, multi.getKey(0)) \u0026\u0026 Objects.equals(key2, multi.getKey(1)) \u0026\u0026 Objects.equals(key3, multi.getKey(2)) \u0026\u0026 Objects.equals(key4, multi.getKey(3)) \u0026\u0026 Objects.equals(key5, multi.getKey(4));\r\n}"
      },
      {
        "name": "MultiKeyMap#decorated(...0)",
        "body": "{\r\n    return (AbstractHashedMap\u003cMultiKey\u003c? extends K\u003e, V\u003e) super.decorated();\r\n}"
      },
      {
        "name": "MultiKeyMap#hash(...5)",
        "body": "{\r\n    int h \u003d 0;\r\n    if (key1 !\u003d null) {\r\n        h ^\u003d key1.hashCode();\r\n    }\r\n    if (key2 !\u003d null) {\r\n        h ^\u003d key2.hashCode();\r\n    }\r\n    if (key3 !\u003d null) {\r\n        h ^\u003d key3.hashCode();\r\n    }\r\n    if (key4 !\u003d null) {\r\n        h ^\u003d key4.hashCode();\r\n    }\r\n    if (key5 !\u003d null) {\r\n        h ^\u003d key5.hashCode();\r\n    }\r\n    h +\u003d ~(h \u003c\u003c 9);\r\n    h ^\u003d h \u003e\u003e\u003e 14;\r\n    h +\u003d h \u003c\u003c 4;\r\n    h ^\u003d h \u003e\u003e\u003e 10;\r\n    return h;\r\n}"
      },
      {
        "name": "MultiKeyMap#decoratedHashIndex(...1)",
        "body": "{\r\n    return decorated().hashIndex(hashCode, decorated().data.length);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiValueMap",
    "methodName": "containsValue",
    "signature": "boolean containsValue(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final Set\u003cMap.Entry\u003cK, Object\u003e\u003e pairs \u003d decorated().entrySet();\r\n    if (pairs !\u003d null) {\r\n        for (final Map.Entry\u003cK, Object\u003e entry : pairs) {\r\n            if (((Collection\u003cV\u003e) entry.getValue()).contains(value)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B6",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B6",
      "B3 : If($z1 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MultiValueMap\n  Object\n  $r1 \u003d r0.decorated()\n  $r2 \u003d $r1.entrySet()\n  if ($r2 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  $r3 \u003d $r2.iterator()\n}",
      "B2 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B3 else B6\n}",
      "B3 {\n  $r4 \u003d $r3.next()\n  r5 \u003d Map$Entry) $r4\n  $r6 \u003d r5.getValue()\n  $r8 \u003d Collection) $r6\n  $z1 \u003d $r8.contains(r7)\n  if ($z1 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  return\n}",
      "B5 {\n  goto B2\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B2",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiValueMap#decorated(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiValueMap",
    "methodName": "containsValue",
    "signature": "boolean containsValue(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final Collection\u003cV\u003e coll \u003d getCollection(key);\r\n    if (coll \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    return coll.contains(value);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MultiValueMap\n  Object\n  Object\n  $r2 \u003d r0.getCollection(r1)\n  if ($r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d $r2.contains(r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiValueMap#getCollection(...1)",
        "body": "{\r\n    return (Collection\u003cV\u003e) decorated().get(key);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiValueMap",
    "methodName": "iterator",
    "signature": "java.util.Iterator iterator(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (!containsKey(key)) {\r\n        return EmptyIterator.\u003cV\u003eemptyIterator();\r\n    }\r\n    return new ValuesIterator(key);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MultiValueMap\n  Object\n  $z0 \u003d r0.containsKey(r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d EmptyIterator.emptyIterator()\n  return\n}",
      "B2 {\n  $r2 \u003d MultiValueMap$ValuesIterator\n  new MultiValueMap$ValuesIterator(r0, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiValueMap#containsKey(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiValueMap",
    "methodName": "put",
    "signature": "java.lang.Object put(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B3",
      "B1 : If($z0 !\u003d 0) → B2 | else → B4",
      "B4 : If(z1 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  MultiValueMap\n  Object\n  Object\n  z1 \u003d 0\n  $r2 \u003d r0.getCollection(r1)\n  if ($r2 !\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r4 \u003d r0.createCollection(1)\n  $r4.add(r3)\n  $z0 \u003d $r4.isEmpty()\n  if ($z0 !\u003d 0) goto B2 else B4\n}",
      "B2 {\n  $r5 \u003d r0.decorated()\n  $r5.put(r1, $r4)\n  z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  z1 \u003d $r2.add(r3)\n}",
      "B4 {\n  if (z1 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r6 \u003d r3\n  goto B7\n}",
      "B6 {\n  $r6 \u003d null\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiValueMap",
    "methodName": "putAll",
    "signature": "boolean putAll(java.lang.Object,java.util.Collection)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3",
      "B3 : If($r3 !\u003d null) → B4 | else → B6",
      "B4 : If($z1 !\u003d 0) → B5 | else → B7"
    ],
    "blockList": [
      "B0 {\n  MultiValueMap\n  Object\n  Collection\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  z2 \u003d 0\n  $r3 \u003d r1.getCollection(r2)\n  if ($r3 !\u003d null) goto B4 else B6\n}",
      "B4 {\n  $i0 \u003d r0.size()\n  $r4 \u003d r1.createCollection($i0)\n  $r4.addAll(r0)\n  $z1 \u003d $r4.isEmpty()\n  if ($z1 !\u003d 0) goto B5 else B7\n}",
      "B5 {\n  $r5 \u003d r1.decorated()\n  $r5.put(r2, $r4)\n  z2 \u003d 1\n  goto B7\n}",
      "B6 {\n  z2 \u003d $r3.addAll(r0)\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiValueMap",
    "methodName": "putAll",
    "signature": "void putAll(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    if (map instanceof MultiMap) {\r\n        for (final Map.Entry\u003c? extends K, Object\u003e entry : ((MultiMap\u003c? extends K, V\u003e) map).entrySet()) {\r\n            putAll(entry.getKey(), (Collection\u003cV\u003e) entry.getValue());\r\n        }\r\n    } else {\r\n        for (final Map.Entry\u003c? extends K, ?\u003e entry : map.entrySet()) {\r\n            put(entry.getKey(), entry.getValue());\r\n        }\r\n    }\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B5",
      "B2 : If($z2 \u003d\u003d 0) → B3 | else → B4",
      "B6 : If($z1 \u003d\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  MultiValueMap\n  Map\n  $z0 \u003d MultiMap\n  if ($z0 \u003d\u003d 0) goto B1 else B5\n}",
      "B1 {\n  $r7 \u003d MultiMap) r0\n  $r8 \u003d $r7.entrySet()\n  $r9 \u003d $r8.iterator()\n}",
      "B2 {\n  $z2 \u003d $r9.hasNext()\n  if ($z2 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r10 \u003d $r9.next()\n  r14 \u003d Map$Entry) $r10\n  $r11 \u003d r14.getKey()\n  $r12 \u003d r14.getValue()\n  $r13 \u003d Collection) $r12\n  r4.putAll($r11, $r13)\n  goto B2\n}",
      "B4 {\n  goto B8\n}",
      "B5 {\n  $r1 \u003d r0.entrySet()\n  $r2 \u003d $r1.iterator()\n}",
      "B6 {\n  $z1 \u003d $r2.hasNext()\n  if ($z1 \u003d\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $r3 \u003d $r2.next()\n  r15 \u003d Map$Entry) $r3\n  $r5 \u003d r15.getKey()\n  $r6 \u003d r15.getValue()\n  r4.put($r5, $r6)\n  goto B6\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e B8",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B6",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiValueMap#put(...2)",
        "body": "{\r\n    boolean result \u003d false;\r\n    Collection\u003cV\u003e coll \u003d getCollection(key);\r\n    if (coll \u003d\u003d null) {\r\n        // might produce a non-empty collection\r\n        coll \u003d createCollection(1);\r\n        coll.add((V) value);\r\n        if (!coll.isEmpty()) {\r\n            // only add if non-zero size to maintain class state\r\n            decorated().put(key, coll);\r\n            // map definitely changed\r\n            result \u003d true;\r\n        }\r\n    } else {\r\n        result \u003d coll.add((V) value);\r\n    }\r\n    return result ? value : null;\r\n}"
      },
      {
        "name": "MultiValueMap#putAll(...2)",
        "body": "{\r\n    if (values \u003d\u003d null || values.isEmpty()) {\r\n        return false;\r\n    }\r\n    boolean result \u003d false;\r\n    Collection\u003cV\u003e coll \u003d getCollection(key);\r\n    if (coll \u003d\u003d null) {\r\n        // might produce a non-empty collection\r\n        coll \u003d createCollection(values.size());\r\n        coll.addAll(values);\r\n        if (!coll.isEmpty()) {\r\n            // only add if non-zero size to maintain class state\r\n            decorated().put(key, coll);\r\n            // map definitely changed\r\n            result \u003d true;\r\n        }\r\n    } else {\r\n        result \u003d coll.addAll(values);\r\n    }\r\n    return result;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiValueMap",
    "methodName": "removeMapping",
    "signature": "boolean removeMapping(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final Collection\u003cV\u003e valuesForKey \u003d getCollection(key);\r\n    if (valuesForKey \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    final boolean removed \u003d valuesForKey.remove(value);\r\n    if (!removed) {\r\n        return false;\r\n    }\r\n    if (valuesForKey.isEmpty()) {\r\n        remove(key);\r\n    }\r\n    return true;\r\n}",
    "nodes": 7,
    "edges": 7,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  MultiValueMap\n  Object\n  Object\n  $r2 \u003d r0.getCollection(r1)\n  if ($r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d $r2.remove(r3)\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  $z1 \u003d $r2.isEmpty()\n  if ($z1 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  r0.remove(r1)\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiValueMap#getCollection(...1)",
        "body": "{\r\n    return (Collection\u003cV\u003e) decorated().get(key);\r\n}"
      },
      {
        "name": "MultiValueMap#remove(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiValueMap",
    "methodName": "size",
    "signature": "int size(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final Collection\u003cV\u003e coll \u003d getCollection(key);\r\n    if (coll \u003d\u003d null) {\r\n        return 0;\r\n    }\r\n    return coll.size();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MultiValueMap\n  Object\n  $r2 \u003d r0.getCollection(r1)\n  if ($r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d $r2.size()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiValueMap#getCollection(...1)",
        "body": "{\r\n    return (Collection\u003cV\u003e) decorated().get(key);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiValueMap",
    "methodName": "totalSize",
    "signature": "int totalSize()",
    "visibility": "public",
    "body": "{\r\n    int total \u003d 0;\r\n    for (final Object v : decorated().values()) {\r\n        total +\u003d CollectionUtils.size(v);\r\n    }\r\n    return total;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MultiValueMap\n  i1 \u003d 0\n  $r1 \u003d r0.decorated()\n  $r2 \u003d $r1.values()\n  $r3 \u003d $r2.iterator()\n}",
      "B1 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d $r3.next()\n  $i0 \u003d CollectionUtils.size($r4)\n  i1 \u003d i1 + $i0\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MultiValueMap#decorated(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.MultiValueMap",
    "methodName": "values",
    "signature": "java.util.Collection values()",
    "visibility": "public",
    "body": "{\r\n    final Collection\u003cV\u003e vs \u003d valuesView;\r\n    return (Collection\u003cObject\u003e) (vs !\u003d null ? vs : (valuesView \u003d new Values()));\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MultiValueMap\n  r1 \u003d Collection valuesView\u003e\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r3 \u003d MultiValueMap$Values\n  $r2 \u003d $r3\n  new MultiValueMap$Values(r0)\n  Collection valuesView\u003e \u003d $r3\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.PassiveExpiringMap",
    "methodName": "isExpired",
    "signature": "boolean isExpired(long,java.lang.Long)",
    "visibility": "private",
    "body": "{\r\n    if (expirationTimeObject !\u003d null) {\r\n        final long expirationTime \u003d expirationTimeObject.longValue();\r\n        return expirationTime \u003e\u003d 0 \u0026\u0026 now \u003e\u003d expirationTime;\r\n    }\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B6",
      "B1 : If($i4 \u003c 0) → B2 | else → B4",
      "B2 : If($i5 \u003c 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  PassiveExpiringMap\n  l2 :\u003d @parameter0: long\n  Long\n  if (r0 \u003d\u003d null) goto B1 else B6\n}",
      "B1 {\n  $l0 \u003d r0.longValue()\n  $b1 \u003d $l0 cmp 0L\n  $i4 \u003d (int) $b1\n  if ($i4 \u003c 0) goto B2 else B4\n}",
      "B2 {\n  $b3 \u003d l2 cmp $l0\n  $i5 \u003d (int) $b3\n  if ($i5 \u003c 0) goto B3 else B4\n}",
      "B3 {\n  $z0 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z0 \u003d 0\n}",
      "B5 {\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.PassiveExpiringMap",
    "methodName": "putAll",
    "signature": "void putAll(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    for (final Map.Entry\u003c? extends K, ? extends V\u003e entry : mapToCopy.entrySet()) {\r\n        put(entry.getKey(), entry.getValue());\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  PassiveExpiringMap\n  Map\n  $r1 \u003d r0.entrySet()\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r4 \u003d Map$Entry) $r3\n  $r6 \u003d r4.getKey()\n  $r7 \u003d r4.getValue()\n  r5.put($r6, $r7)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PassiveExpiringMap#put(...2)",
        "body": "{\r\n    // remove the previous record\r\n    removeIfExpired(key, now());\r\n    // record expiration time of new entry\r\n    final long expirationTime \u003d expiringPolicy.expirationTime(key, value);\r\n    expirationMap.put(key, Long.valueOf(expirationTime));\r\n    return super.put(key, value);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.PassiveExpiringMap",
    "methodName": "removeAllExpired",
    "signature": "void removeAllExpired(long)",
    "visibility": "private",
    "body": "{\r\n    final Iterator\u003cMap.Entry\u003cObject, Long\u003e\u003e iter \u003d expirationMap.entrySet().iterator();\r\n    while (iter.hasNext()) {\r\n        final Map.Entry\u003cObject, Long\u003e expirationEntry \u003d iter.next();\r\n        if (isExpired(nowMillis, expirationEntry.getValue())) {\r\n            // remove entry from collection\r\n            super.remove(expirationEntry.getKey());\r\n            // remove entry from expiration map\r\n            iter.remove();\r\n        }\r\n    }\r\n}",
    "nodes": 6,
    "edges": 7,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  PassiveExpiringMap\n  l0 :\u003d @parameter0: long\n  $r1 \u003d Map expirationMap\u003e\n  $r2 \u003d $r1.entrySet()\n  $r3 \u003d $r2.iterator()\n}",
      "B1 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $r4 \u003d $r3.next()\n  r5 \u003d Map$Entry) $r4\n  $r6 \u003d r5.getValue()\n  $r7 \u003d Long) $r6\n  $z1 \u003d r0.isExpired(l0, $r7)\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r8 \u003d r5.getKey()\n  r0.remove($r8)\n  $r3.remove()\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PassiveExpiringMap#isExpired(...2)",
        "body": "{\r\n    if (expirationTimeObject !\u003d null) {\r\n        final long expirationTime \u003d expirationTimeObject.longValue();\r\n        return expirationTime \u003e\u003d 0 \u0026\u0026 now \u003e\u003d expirationTime;\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.PassiveExpiringMap",
    "methodName": "removeIfExpired",
    "signature": "void removeIfExpired(java.lang.Object,long)",
    "visibility": "private",
    "body": "{\r\n    final Long expirationTimeObject \u003d expirationMap.get(key);\r\n    if (isExpired(nowMillis, expirationTimeObject)) {\r\n        remove(key);\r\n    }\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PassiveExpiringMap\n  Object\n  l0 :\u003d @parameter1: long\n  $r2 \u003d Map expirationMap\u003e\n  $r3 \u003d $r2.get(r1)\n  r4 \u003d Long) $r3\n  $z0 \u003d r0.isExpired(l0, r4)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r0.remove(r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PassiveExpiringMap#remove(...1)",
        "body": "{\r\n    expirationMap.remove(key);\r\n    return super.remove(key);\r\n}"
      },
      {
        "name": "PassiveExpiringMap#isExpired(...2)",
        "body": "{\r\n    if (expirationTimeObject !\u003d null) {\r\n        final long expirationTime \u003d expirationTimeObject.longValue();\r\n        return expirationTime \u003e\u003d 0 \u0026\u0026 now \u003e\u003d expirationTime;\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.PredicatedMap",
    "methodName": "checkSetValue",
    "signature": "java.lang.Object checkSetValue(java.lang.Object)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PredicatedMap\n  Object\n  $r2 \u003d Predicate valuePredicate\u003e\n  $z0 \u003d $r2.test(r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Cannot set value - Predicate rejected it\")\n  throw $r3\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.PredicatedMap",
    "methodName": "isSetValueChecking",
    "signature": "boolean isSetValueChecking()",
    "visibility": "protected",
    "body": "{\r\n    return valuePredicate !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  PredicatedMap\n  $r1 \u003d Predicate valuePredicate\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.PredicatedMap",
    "methodName": "putAll",
    "signature": "void putAll(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    for (final Map.Entry\u003c? extends K, ? extends V\u003e entry : mapToCopy.entrySet()) {\r\n        validate(entry.getKey(), entry.getValue());\r\n    }\r\n    super.putAll(mapToCopy);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  PredicatedMap\n  Map\n  $r1 \u003d r0.entrySet()\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d $r2.next()\n  r5 \u003d Map$Entry) $r4\n  $r6 \u003d r5.getKey()\n  $r7 \u003d r5.getValue()\n  r3.validate($r6, $r7)\n  goto B1\n}",
      "B3 {\n  r3.putAll(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PredicatedMap#validate(...2)",
        "body": "{\r\n    if (keyPredicate !\u003d null \u0026\u0026 !keyPredicate.test(key)) {\r\n        throw new IllegalArgumentException(\"Cannot add key - Predicate rejected it\");\r\n    }\r\n    if (valuePredicate !\u003d null \u0026\u0026 !valuePredicate.test(value)) {\r\n        throw new IllegalArgumentException(\"Cannot add value - Predicate rejected it\");\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.PredicatedMap",
    "methodName": "validate",
    "signature": "void validate(java.lang.Object,java.lang.Object)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3",
      "B3 : If($r2 \u003d\u003d null) → B4 | else → B6",
      "B4 : If($z0 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  PredicatedMap\n  Object\n  Object\n  $r1 \u003d Predicate keyPredicate\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r7 \u003d Predicate keyPredicate\u003e\n  $z1 \u003d $r7.test(r6)\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r8 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Cannot add key - Predicate rejected it\")\n  throw $r8\n}",
      "B3 {\n  $r2 \u003d Predicate valuePredicate\u003e\n  if ($r2 \u003d\u003d null) goto B4 else B6\n}",
      "B4 {\n  $r4 \u003d Predicate valuePredicate\u003e\n  $z0 \u003d $r4.test(r3)\n  if ($z0 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r5 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Cannot add value - Predicate rejected it\")\n  throw $r5\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B6",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.ReferenceIdentityMap",
    "methodName": "isEqualKey",
    "signature": "boolean isEqualKey(java.lang.Object,java.lang.Object)",
    "visibility": "protected",
    "body": "{\r\n    key2 \u003d isKeyType(ReferenceStrength.HARD) ? key2 : ((Reference\u003c?\u003e) key2).get();\r\n    return key1 \u003d\u003d key2;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B3 : If(r3 !\u003d $r5) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  ReferenceIdentityMap\n  Object\n  Object\n  $r1 \u003d AbstractReferenceMap$ReferenceStrength HARD\u003e\n  $z0 \u003d r0.isKeyType($r1)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d r4\n  goto B3\n}",
      "B2 {\n  $r2 \u003d Reference) r4\n  $r5 \u003d $r2.get()\n}",
      "B3 {\n  if (r3 !\u003d $r5) goto B4 else B5\n}",
      "B4 {\n  $z1 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z1 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ReferenceIdentityMap#isKeyType(...1)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.ReferenceIdentityMap",
    "methodName": "isEqualValue",
    "signature": "boolean isEqualValue(java.lang.Object,java.lang.Object)",
    "visibility": "protected",
    "body": "{\r\n    return value1 \u003d\u003d value2;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ReferenceIdentityMap\n  Object\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.SingletonMap",
    "methodName": "clone",
    "signature": "org.apache.commons.collections4.map.SingletonMap clone()",
    "visibility": "public",
    "body": "{\r\n    try {\r\n        return (SingletonMap\u003cK, V\u003e) super.clone();\r\n    } catch (final CloneNotSupportedException ex) {\r\n        throw new UnsupportedOperationException(ex);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SingletonMap\n  $r1 \u003d r0.clone()\n  $r2 \u003d SingletonMap) $r1\n  return\n}",
      "B1 {\n  $r3 :\u003d @caughtexception\n  $r4 \u003d UnsupportedOperationException\n  new UnsupportedOperationException($r3)\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.SingletonMap",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (!(obj instanceof Map)) {\r\n        return false;\r\n    }\r\n    final Map\u003c?, ?\u003e other \u003d (Map\u003c?, ?\u003e) obj;\r\n    if (other.size() !\u003d 1) {\r\n        return false;\r\n    }\r\n    final Map.Entry\u003c?, ?\u003e entry \u003d other.entrySet().iterator().next();\r\n    return isEqualKey(entry.getKey()) \u0026\u0026 isEqualValue(entry.getValue());\r\n}",
    "nodes": 11,
    "edges": 12,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4",
      "B4 : If($i0 \u003d\u003d 1) → B5 | else → B6",
      "B6 : If($z1 \u003d\u003d 0) → B7 | else → B9",
      "B7 : If($z2 \u003d\u003d 0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  SingletonMap\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d Map\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d Map) r0\n  $i0 \u003d r2.size()\n  if ($i0 \u003d\u003d 1) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $r3 \u003d r2.entrySet()\n  $r4 \u003d $r3.iterator()\n  $r5 \u003d $r4.next()\n  r6 \u003d Map$Entry) $r5\n  $r7 \u003d r6.getKey()\n  $z1 \u003d r1.isEqualKey($r7)\n  if ($z1 \u003d\u003d 0) goto B7 else B9\n}",
      "B7 {\n  $r8 \u003d r6.getValue()\n  $z2 \u003d r1.isEqualValue($r8)\n  if ($z2 \u003d\u003d 0) goto B8 else B9\n}",
      "B8 {\n  $z3 \u003d 1\n  goto B10\n}",
      "B9 {\n  $z3 \u003d 0\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B9",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SingletonMap#isEqualValue(...1)",
        "body": "{\r\n    return Objects.equals(value, getValue());\r\n}"
      },
      {
        "name": "SingletonMap#isEqualKey(...1)",
        "body": "{\r\n    return Objects.equals(key, getKey());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.SingletonMap",
    "methodName": "get",
    "signature": "java.lang.Object get(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (isEqualKey(key)) {\r\n        return value;\r\n    }\r\n    return null;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SingletonMap\n  Object\n  $z0 \u003d r0.isEqualKey(r1)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Object value\u003e\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SingletonMap#isEqualKey(...1)",
        "body": "{\r\n    return Objects.equals(key, getKey());\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.SingletonMap",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    return (getKey() \u003d\u003d null ? 0 : getKey().hashCode()) ^ (getValue() \u003d\u003d null ? 0 : getValue().hashCode());\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2",
      "B3 : If($r3 !\u003d null) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  SingletonMap\n  $r1 \u003d r0.getKey()\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d 0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r0.getKey()\n  $i0 \u003d $r2.hashCode()\n}",
      "B3 {\n  $r3 \u003d r0.getValue()\n  if ($r3 !\u003d null) goto B4 else B5\n}",
      "B4 {\n  $i1 \u003d 0\n  goto B6\n}",
      "B5 {\n  $r4 \u003d r0.getValue()\n  $i1 \u003d $r4.hashCode()\n}",
      "B6 {\n  $i2 \u003d $i0 ^ $i1\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SingletonMap#getKey(...0)",
        "body": "{\r\n    return key;\r\n}"
      },
      {
        "name": "SingletonMap#getValue(...0)",
        "body": "{\r\n    return value;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.SingletonMap",
    "methodName": "put",
    "signature": "java.lang.Object put(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SingletonMap\n  Object\n  Object\n  $z0 \u003d r0.isEqualKey(r1)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d r0.setValue(r3)\n  return\n}",
      "B2 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size singleton\")\n  throw $r2\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.SingletonMap",
    "methodName": "putAll",
    "signature": "void putAll(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    switch(map.size()) {\r\n        case 0:\r\n            return;\r\n        case 1:\r\n            final Map.Entry\u003c? extends K, ? extends V\u003e entry \u003d map.entrySet().iterator().next();\r\n            put(entry.getKey(), entry.getValue());\r\n            return;\r\n        default:\r\n            throw new IllegalArgumentException(\"The map size must be 0 or 1\");\r\n    }\r\n}",
    "nodes": 4,
    "edges": 3,
    "cc": 1,
    "flowSummary": [
      "B0 : If(switch-on $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SingletonMap\n  Map\n  $i0 \u003d r0.size()\n  IllegalArgumentException; }\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.entrySet()\n  $r2 \u003d $r1.iterator()\n  $r3 \u003d $r2.next()\n  r4 \u003d Map$Entry) $r3\n  $r6 \u003d r4.getKey()\n  $r7 \u003d r4.getValue()\n  r5.put($r6, $r7)\n  return\n}",
      "B3 {\n  $r8 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"The map size must be 0 or 1\")\n  throw $r8\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B0 --\u003e B3",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SingletonMap#put(...2)",
        "body": "{\r\n    if (isEqualKey(key)) {\r\n        return setValue(value);\r\n    }\r\n    throw new IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size singleton\");\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.SingletonMap",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    return new StringBuilder(128).append(\u0027{\u0027).append(getKey() \u003d\u003d this ? \"(this Map)\" : getKey()).append(\u0027\u003d\u0027).append(getValue() \u003d\u003d this ? \"(this Map)\" : getValue()).append(\u0027}\u0027).toString();\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($r3 !\u003d r2) → B1 | else → B2",
      "B3 : If($r6 !\u003d r2) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  SingletonMap\n  $r0 \u003d StringBuilder\n  new StringBuilder(128)\n  $r1 \u003d $r0.append(123)\n  $r3 \u003d r2.getKey()\n  if ($r3 !\u003d r2) goto B1 else B2\n}",
      "B1 {\n  $r10 \u003d \"(this Map)\"\n  goto B3\n}",
      "B2 {\n  $r10 \u003d r2.getKey()\n}",
      "B3 {\n  $r4 \u003d $r1.append($r10)\n  $r5 \u003d $r4.append(61)\n  $r6 \u003d r2.getValue()\n  if ($r6 !\u003d r2) goto B4 else B5\n}",
      "B4 {\n  $r11 \u003d \"(this Map)\"\n  goto B6\n}",
      "B5 {\n  $r11 \u003d r2.getValue()\n}",
      "B6 {\n  $r7 \u003d $r5.append($r11)\n  $r8 \u003d $r7.append(125)\n  $r9 \u003d $r8.toString()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SingletonMap#getKey(...0)",
        "body": "{\r\n    return key;\r\n}"
      },
      {
        "name": "SingletonMap#getValue(...0)",
        "body": "{\r\n    return value;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.StaticBucketMap",
    "methodName": "atomic",
    "signature": "void atomic(java.lang.Runnable,int)",
    "visibility": "private",
    "body": "{\r\n    if (bucket \u003e\u003d buckets.length) {\r\n        r.run();\r\n        return;\r\n    }\r\n    synchronized (locks[bucket]) {\r\n        atomic(r, bucket + 1);\r\n    }\r\n}",
    "nodes": 11,
    "edges": 15,
    "cc": 6,
    "flowSummary": [
      "B0 : If(i0 \u003c $i1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StaticBucketMap\n  Runnable\n  i0 :\u003d @parameter1: int\n  $r1 \u003d StaticBucketMap$Node[] buckets\u003e\n  $i1 \u003d lengthof $r1\n  if (i0 \u003c $i1) goto B1 else B2\n}",
      "B1 {\n  r4.run()\n  return\n}",
      "B2 {\n  $r2 \u003d StaticBucketMap$Lock[] locks\u003e\n  $r3 \u003d $r2[i0]\n  entermonitor $r3\n  $i2 \u003d i0 + 1\n  r0.atomic(r4, $i2)\n  exitmonitor $r3\n  goto B4\n}",
      "B3 {\n  $r5 :\u003d @caughtexception\n  exitmonitor $r3\n  throw $r5\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StaticBucketMap#atomic(...2)",
        "body": "{\r\n    if (bucket \u003e\u003d buckets.length) {\r\n        r.run();\r\n        return;\r\n    }\r\n    synchronized (locks[bucket]) {\r\n        atomic(r, bucket + 1);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.StaticBucketMap",
    "methodName": "clear",
    "signature": "void clear()",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d 0; i \u003c buckets.length; i++) {\r\n        final Lock lock \u003d locks[i];\r\n        synchronized (lock) {\r\n            buckets[i] \u003d null;\r\n            lock.size \u003d 0;\r\n        }\r\n    }\r\n}",
    "nodes": 13,
    "edges": 19,
    "cc": 8,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d $i0) → B2 | else → B12"
    ],
    "blockList": [
      "B0 {\n  StaticBucketMap\n  i1 \u003d 0\n}",
      "B1 {\n  $r1 \u003d StaticBucketMap$Node[] buckets\u003e\n  $i0 \u003d lengthof $r1\n  if (i1 \u003e\u003d $i0) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d StaticBucketMap$Lock[] locks\u003e\n  r3 \u003d $r2[i1]\n  entermonitor r3\n  $r4 \u003d StaticBucketMap$Node[] buckets\u003e\n  $r4[i1] \u003d null\n  StaticBucketMap$Lock: int size\u003e \u003d 0\n  exitmonitor r3\n  goto B4\n}",
      "B3 {\n  $r5 :\u003d @caughtexception\n  exitmonitor r3\n  throw $r5\n}",
      "B4 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.StaticBucketMap",
    "methodName": "containsKey",
    "signature": "boolean containsKey(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final int hash \u003d getHash(key);\r\n    synchronized (locks[hash]) {\r\n        Node\u003cK, V\u003e n \u003d buckets[hash];\r\n        while (n !\u003d null) {\r\n            if (Objects.equals(n.key, key)) {\r\n                return true;\r\n            }\r\n            n \u003d n.next;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 17,
    "edges": 29,
    "cc": 14,
    "flowSummary": [
      "B3 : If(r7 \u003d\u003d null) → B4 | else → B11",
      "B6 : If($z0 \u003d\u003d 0) → B7 | else → B9"
    ],
    "blockList": [
      "B0 {\n  StaticBucketMap\n  Object\n  $i0 \u003d r0.getHash(r1)\n  $r2 \u003d StaticBucketMap$Lock[] locks\u003e\n  $r3 \u003d $r2[$i0]\n  entermonitor $r3\n  $r4 \u003d StaticBucketMap$Node[] buckets\u003e\n  r7 \u003d $r4[$i0]\n}",
      "B1 {\n  if (r7 \u003d\u003d null) goto B2 else B5\n}",
      "B2 {\n  $r5 \u003d Object key\u003e\n  $z0 \u003d Objects.equals($r5, r1)\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  exitmonitor $r3\n  return\n}",
      "B4 {\n  r7 \u003d StaticBucketMap$Node next\u003e\n  goto B1\n}",
      "B5 {\n  exitmonitor $r3\n  goto B7\n}",
      "B6 {\n  $r6 :\u003d @caughtexception\n  exitmonitor $r3\n  throw $r6\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StaticBucketMap#getHash(...1)",
        "body": "{\r\n    if (key \u003d\u003d null) {\r\n        return 0;\r\n    }\r\n    int hash \u003d key.hashCode();\r\n    hash +\u003d ~(hash \u003c\u003c 15);\r\n    hash ^\u003d hash \u003e\u003e\u003e 10;\r\n    hash +\u003d hash \u003c\u003c 3;\r\n    hash ^\u003d hash \u003e\u003e\u003e 6;\r\n    hash +\u003d ~(hash \u003c\u003c 11);\r\n    hash ^\u003d hash \u003e\u003e\u003e 16;\r\n    hash %\u003d buckets.length;\r\n    return hash \u003c 0 ? hash * -1 : hash;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.StaticBucketMap",
    "methodName": "containsValue",
    "signature": "boolean containsValue(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    for (int i \u003d 0; i \u003c buckets.length; i++) {\r\n        synchronized (locks[i]) {\r\n            Node\u003cK, V\u003e n \u003d buckets[i];\r\n            while (n !\u003d null) {\r\n                if (Objects.equals(n.value, value)) {\r\n                    return true;\r\n                }\r\n                n \u003d n.next;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 20,
    "edges": 33,
    "cc": 15,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d $i0) → B2 | else → B19",
      "B5 : If(r8 \u003d\u003d null) → B6 | else → B13",
      "B8 : If($z0 \u003d\u003d 0) → B9 | else → B11"
    ],
    "blockList": [
      "B0 {\n  StaticBucketMap\n  Object\n  i1 \u003d 0\n}",
      "B1 {\n  $r1 \u003d StaticBucketMap$Node[] buckets\u003e\n  $i0 \u003d lengthof $r1\n  if (i1 \u003e\u003d $i0) goto B2 else B10\n}",
      "B2 {\n  $r2 \u003d StaticBucketMap$Lock[] locks\u003e\n  $r3 \u003d $r2[i1]\n  entermonitor $r3\n  $r4 \u003d StaticBucketMap$Node[] buckets\u003e\n  r8 \u003d $r4[i1]\n}",
      "B3 {\n  if (r8 \u003d\u003d null) goto B4 else B7\n}",
      "B4 {\n  $r6 \u003d Object value\u003e\n  $z0 \u003d Objects.equals($r6, r5)\n  if ($z0 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  exitmonitor $r3\n  return\n}",
      "B6 {\n  r8 \u003d StaticBucketMap$Node next\u003e\n  goto B3\n}",
      "B7 {\n  exitmonitor $r3\n  goto B9\n}",
      "B8 {\n  $r7 :\u003d @caughtexception\n  exitmonitor $r3\n  throw $r7\n}",
      "B9 {\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B10",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e B1",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.StaticBucketMap",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    if (!(obj instanceof Map\u003c?, ?\u003e)) {\r\n        return false;\r\n    }\r\n    final Map\u003c?, ?\u003e other \u003d (Map\u003c?, ?\u003e) obj;\r\n    return entrySet().equals(other.entrySet());\r\n}",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If($z0 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StaticBucketMap\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d Map\n  if ($z0 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  r2 \u003d Map) r0\n  $r3 \u003d r1.entrySet()\n  $r4 \u003d r2.entrySet()\n  $z1 \u003d $r3.equals($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StaticBucketMap#entrySet(...0)",
        "body": "{\r\n    return new EntrySet();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.StaticBucketMap",
    "methodName": "get",
    "signature": "java.lang.Object get(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final int hash \u003d getHash(key);\r\n    synchronized (locks[hash]) {\r\n        Node\u003cK, V\u003e n \u003d buckets[hash];\r\n        while (n !\u003d null) {\r\n            if (Objects.equals(n.key, key)) {\r\n                return n.value;\r\n            }\r\n            n \u003d n.next;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 18,
    "edges": 31,
    "cc": 15,
    "flowSummary": [
      "B3 : If(r8 \u003d\u003d null) → B4 | else → B12",
      "B6 : If($z0 \u003d\u003d 0) → B7 | else → B10"
    ],
    "blockList": [
      "B0 {\n  StaticBucketMap\n  Object\n  $i0 \u003d r0.getHash(r1)\n  $r2 \u003d StaticBucketMap$Lock[] locks\u003e\n  $r3 \u003d $r2[$i0]\n  entermonitor $r3\n  $r4 \u003d StaticBucketMap$Node[] buckets\u003e\n  r8 \u003d $r4[$i0]\n}",
      "B1 {\n  if (r8 \u003d\u003d null) goto B2 else B5\n}",
      "B2 {\n  $r5 \u003d Object key\u003e\n  $z0 \u003d Objects.equals($r5, r1)\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d Object value\u003e\n  exitmonitor $r3\n  return\n}",
      "B4 {\n  r8 \u003d StaticBucketMap$Node next\u003e\n  goto B1\n}",
      "B5 {\n  exitmonitor $r3\n  goto B7\n}",
      "B6 {\n  $r7 :\u003d @caughtexception\n  exitmonitor $r3\n  throw $r7\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StaticBucketMap#getHash(...1)",
        "body": "{\r\n    if (key \u003d\u003d null) {\r\n        return 0;\r\n    }\r\n    int hash \u003d key.hashCode();\r\n    hash +\u003d ~(hash \u003c\u003c 15);\r\n    hash ^\u003d hash \u003e\u003e\u003e 10;\r\n    hash +\u003d hash \u003c\u003c 3;\r\n    hash ^\u003d hash \u003e\u003e\u003e 6;\r\n    hash +\u003d ~(hash \u003c\u003c 11);\r\n    hash ^\u003d hash \u003e\u003e\u003e 16;\r\n    hash %\u003d buckets.length;\r\n    return hash \u003c 0 ? hash * -1 : hash;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.StaticBucketMap",
    "methodName": "getHash",
    "signature": "int getHash(java.lang.Object)",
    "visibility": "private",
    "body": "{\r\n    if (key \u003d\u003d null) {\r\n        return 0;\r\n    }\r\n    int hash \u003d key.hashCode();\r\n    hash +\u003d ~(hash \u003c\u003c 15);\r\n    hash ^\u003d hash \u003e\u003e\u003e 10;\r\n    hash +\u003d hash \u003c\u003c 3;\r\n    hash ^\u003d hash \u003e\u003e\u003e 6;\r\n    hash +\u003d ~(hash \u003c\u003c 11);\r\n    hash ^\u003d hash \u003e\u003e\u003e 16;\r\n    hash %\u003d buckets.length;\r\n    return hash \u003c 0 ? hash * -1 : hash;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B2 : If(i16 \u003e\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  StaticBucketMap\n  Object\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $i0 \u003d r0.hashCode()\n  $i1 \u003d $i0 \u003c\u003c 15\n  $i19 \u003d (int) -1\n  $i2 \u003d $i1 ^ $i19\n  i10 \u003d $i0 + $i2\n  $i3 \u003d i10 \u003e\u003e\u003e 10\n  i11 \u003d i10 ^ $i3\n  $i4 \u003d i11 \u003c\u003c 3\n  i12 \u003d i11 + $i4\n  $i5 \u003d i12 \u003e\u003e\u003e 6\n  i13 \u003d i12 ^ $i5\n  $i6 \u003d i13 \u003c\u003c 11\n  $i21 \u003d (int) -1\n  $i7 \u003d $i6 ^ $i21\n  i14 \u003d i13 + $i7\n  $i8 \u003d i14 \u003e\u003e\u003e 16\n  i15 \u003d i14 ^ $i8\n  $r2 \u003d StaticBucketMap$Node[] buckets\u003e\n  $i9 \u003d lengthof $r2\n  i16 \u003d i15 % $i9\n  if (i16 \u003e\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $i23 \u003d (int) -1\n  $i17 \u003d i16 * $i23\n  goto B5\n}",
      "B4 {\n  $i17 \u003d i16\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.StaticBucketMap",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    int hashCode \u003d 0;\r\n    for (int i \u003d 0; i \u003c buckets.length; i++) {\r\n        synchronized (locks[i]) {\r\n            Node\u003cK, V\u003e n \u003d buckets[i];\r\n            while (n !\u003d null) {\r\n                hashCode +\u003d n.hashCode();\r\n                n \u003d n.next;\r\n            }\r\n        }\r\n    }\r\n    return hashCode;\r\n}",
    "nodes": 17,
    "edges": 28,
    "cc": 13,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d $i0) → B2 | else → B16",
      "B5 : If(r6 \u003d\u003d null) → B6 | else → B10"
    ],
    "blockList": [
      "B0 {\n  StaticBucketMap\n  i2 \u003d 0\n  i3 \u003d 0\n}",
      "B1 {\n  $r1 \u003d StaticBucketMap$Node[] buckets\u003e\n  $i0 \u003d lengthof $r1\n  if (i3 \u003e\u003d $i0) goto B2 else B8\n}",
      "B2 {\n  $r2 \u003d StaticBucketMap$Lock[] locks\u003e\n  $r3 \u003d $r2[i3]\n  entermonitor $r3\n  $r4 \u003d StaticBucketMap$Node[] buckets\u003e\n  r6 \u003d $r4[i3]\n}",
      "B3 {\n  if (r6 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  $i1 \u003d r6.hashCode()\n  i2 \u003d i2 + $i1\n  r6 \u003d StaticBucketMap$Node next\u003e\n  goto B3\n}",
      "B5 {\n  exitmonitor $r3\n  goto B7\n}",
      "B6 {\n  $r5 :\u003d @caughtexception\n  exitmonitor $r3\n  throw $r5\n}",
      "B7 {\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B1",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.StaticBucketMap",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty()",
    "visibility": "public",
    "body": "{\r\n    return size() \u003d\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StaticBucketMap\n  $i0 \u003d r0.size()\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StaticBucketMap#size(...0)",
        "body": "{\r\n    int cnt \u003d 0;\r\n    for (int i \u003d 0; i \u003c buckets.length; i++) {\r\n        synchronized (locks[i]) {\r\n            cnt +\u003d locks[i].size;\r\n        }\r\n    }\r\n    return cnt;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.StaticBucketMap",
    "methodName": "put",
    "signature": "java.lang.Object put(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 45,
    "edges": 84,
    "cc": 41,
    "flowSummary": [
      "B3 : If(r16 !\u003d null) → B4 | else → B17",
      "B18 : If(r17 \u003d\u003d null) → B19 | else → B29",
      "B22 : If($z0 \u003d\u003d 0) → B23 | else → B27"
    ],
    "blockList": [
      "B0 {\n  StaticBucketMap\n  Object\n  Object\n  $i0 \u003d r0.getHash(r1)\n  $r2 \u003d StaticBucketMap$Lock[] locks\u003e\n  $r3 \u003d $r2[$i0]\n  entermonitor $r3\n  $r4 \u003d StaticBucketMap$Node[] buckets\u003e\n  r16 \u003d $r4[$i0]\n  if (r16 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r11 \u003d StaticBucketMap$Node\n  new StaticBucketMap$Node()\n  Object key\u003e \u003d r1\n  Object value\u003e \u003d r6\n  $r12 \u003d StaticBucketMap$Node[] buckets\u003e\n  $r12[$i0] \u003d $r11\n  $r13 \u003d StaticBucketMap$Lock[] locks\u003e\n  $r14 \u003d $r13[$i0]\n  $i3 \u003d StaticBucketMap$Lock: int size\u003e\n  $i4 \u003d $i3 + 1\n  StaticBucketMap$Lock: int size\u003e \u003d $i4\n  exitmonitor $r3\n  return\n}",
      "B2 {\n  r17 \u003d r16\n}",
      "B3 {\n  if (r17 \u003d\u003d null) goto B4 else B7\n}",
      "B4 {\n  r16 \u003d r17\n  $r9 \u003d Object key\u003e\n  $z0 \u003d Objects.equals($r9, r1)\n  if ($z0 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  r10 \u003d Object value\u003e\n  Object value\u003e \u003d r6\n  exitmonitor $r3\n  return\n}",
      "B6 {\n  r17 \u003d StaticBucketMap$Node next\u003e\n  goto B3\n}",
      "B7 {\n  $r5 \u003d StaticBucketMap$Node\n  new StaticBucketMap$Node()\n  Object key\u003e \u003d r1\n  Object value\u003e \u003d r6\n  StaticBucketMap$Node next\u003e \u003d $r5\n  $r7 \u003d StaticBucketMap$Lock[] locks\u003e\n  $r8 \u003d $r7[$i0]\n  $i1 \u003d StaticBucketMap$Lock: int size\u003e\n  $i2 \u003d $i1 + 1\n  StaticBucketMap$Lock: int size\u003e \u003d $i2\n  exitmonitor $r3\n  goto B9\n}",
      "B8 {\n  $r15 :\u003d @caughtexception\n  exitmonitor $r3\n  throw $r15\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e B9",
      "B8 --\u003e [EXIT]",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.StaticBucketMap",
    "methodName": "putAll",
    "signature": "void putAll(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    for (final Map.Entry\u003c? extends K, ? extends V\u003e entry : map.entrySet()) {\r\n        put(entry.getKey(), entry.getValue());\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  StaticBucketMap\n  Map\n  $r1 \u003d r0.entrySet()\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r4 \u003d Map$Entry) $r3\n  $r6 \u003d r4.getKey()\n  $r7 \u003d r4.getValue()\n  r5.put($r6, $r7)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StaticBucketMap#put(...2)",
        "body": "{\r\n    final int hash \u003d getHash(key);\r\n    synchronized (locks[hash]) {\r\n        Node\u003cK, V\u003e n \u003d buckets[hash];\r\n        if (n \u003d\u003d null) {\r\n            n \u003d new Node\u003c\u003e();\r\n            n.key \u003d key;\r\n            n.value \u003d value;\r\n            buckets[hash] \u003d n;\r\n            locks[hash].size++;\r\n            return null;\r\n        }\r\n        // Set n to the last node in the linked list.  Check each key along the way\r\n        //  If the key is found, then change the value of that node and return\r\n        //  the old value.\r\n        for (Node\u003cK, V\u003e next \u003d n; next !\u003d null; next \u003d next.next) {\r\n            n \u003d next;\r\n            if (Objects.equals(n.key, key)) {\r\n                final V returnVal \u003d n.value;\r\n                n.value \u003d value;\r\n                return returnVal;\r\n            }\r\n        }\r\n        // The key was not found in the current list of nodes, add it to the end\r\n        //  in a new node.\r\n        final Node\u003cK, V\u003e newNode \u003d new Node\u003c\u003e();\r\n        newNode.key \u003d key;\r\n        newNode.value \u003d value;\r\n        n.next \u003d newNode;\r\n        locks[hash].size++;\r\n    }\r\n    return null;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.StaticBucketMap",
    "methodName": "remove",
    "signature": "java.lang.Object remove(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final int hash \u003d getHash(key);\r\n    synchronized (locks[hash]) {\r\n        Node\u003cK, V\u003e n \u003d buckets[hash];\r\n        Node\u003cK, V\u003e prev \u003d null;\r\n        while (n !\u003d null) {\r\n            if (Objects.equals(n.key, key)) {\r\n                // Remove this node from the linked list of nodes.\r\n                if (null \u003d\u003d prev) {\r\n                    // This node was the head, set the next node to be the new head.\r\n                    buckets[hash] \u003d n.next;\r\n                } else {\r\n                    // Set the next node of the previous node to be the node after this one.\r\n                    prev.next \u003d n.next;\r\n                }\r\n                locks[hash].size--;\r\n                return n.value;\r\n            }\r\n            prev \u003d n;\r\n            n \u003d n.next;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "nodes": 32,
    "edges": 60,
    "cc": 30,
    "flowSummary": [
      "B4 : If(r13 \u003d\u003d null) → B5 | else → B26",
      "B7 : If($z0 \u003d\u003d 0) → B8 | else → B23",
      "B8 : If(null !\u003d r14) → B9 | else → B13"
    ],
    "blockList": [
      "B0 {\n  StaticBucketMap\n  Object\n  $i0 \u003d r0.getHash(r1)\n  $r2 \u003d StaticBucketMap$Lock[] locks\u003e\n  $r3 \u003d $r2[$i0]\n  entermonitor $r3\n  $r4 \u003d StaticBucketMap$Node[] buckets\u003e\n  r13 \u003d $r4[$i0]\n  r14 \u003d null\n}",
      "B1 {\n  if (r13 \u003d\u003d null) goto B2 else B8\n}",
      "B2 {\n  $r5 \u003d Object key\u003e\n  $z0 \u003d Objects.equals($r5, r1)\n  if ($z0 \u003d\u003d 0) goto B3 else B7\n}",
      "B3 {\n  if (null !\u003d r14) goto B4 else B5\n}",
      "B4 {\n  $r11 \u003d StaticBucketMap$Node[] buckets\u003e\n  $r10 \u003d StaticBucketMap$Node next\u003e\n  $r11[$i0] \u003d $r10\n  goto B6\n}",
      "B5 {\n  $r6 \u003d StaticBucketMap$Node next\u003e\n  StaticBucketMap$Node next\u003e \u003d $r6\n}",
      "B6 {\n  $r7 \u003d StaticBucketMap$Lock[] locks\u003e\n  $r8 \u003d $r7[$i0]\n  $i1 \u003d StaticBucketMap$Lock: int size\u003e\n  $i2 \u003d $i1 - 1\n  StaticBucketMap$Lock: int size\u003e \u003d $i2\n  $r9 \u003d Object value\u003e\n  exitmonitor $r3\n  return\n}",
      "B7 {\n  r14 \u003d r13\n  r13 \u003d StaticBucketMap$Node next\u003e\n  goto B1\n}",
      "B8 {\n  exitmonitor $r3\n  goto B10\n}",
      "B9 {\n  $r12 :\u003d @caughtexception\n  exitmonitor $r3\n  throw $r12\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B1",
      "B8 --\u003e B10",
      "B9 --\u003e [EXIT]",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StaticBucketMap#getHash(...1)",
        "body": "{\r\n    if (key \u003d\u003d null) {\r\n        return 0;\r\n    }\r\n    int hash \u003d key.hashCode();\r\n    hash +\u003d ~(hash \u003c\u003c 15);\r\n    hash ^\u003d hash \u003e\u003e\u003e 10;\r\n    hash +\u003d hash \u003c\u003c 3;\r\n    hash ^\u003d hash \u003e\u003e\u003e 6;\r\n    hash +\u003d ~(hash \u003c\u003c 11);\r\n    hash ^\u003d hash \u003e\u003e\u003e 16;\r\n    hash %\u003d buckets.length;\r\n    return hash \u003c 0 ? hash * -1 : hash;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.StaticBucketMap",
    "methodName": "size",
    "signature": "int size()",
    "visibility": "public",
    "body": "{\r\n    int cnt \u003d 0;\r\n    for (int i \u003d 0; i \u003c buckets.length; i++) {\r\n        synchronized (locks[i]) {\r\n            cnt +\u003d locks[i].size;\r\n        }\r\n    }\r\n    return cnt;\r\n}",
    "nodes": 14,
    "edges": 21,
    "cc": 9,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d $i0) → B2 | else → B13"
    ],
    "blockList": [
      "B0 {\n  StaticBucketMap\n  i2 \u003d 0\n  i3 \u003d 0\n}",
      "B1 {\n  $r1 \u003d StaticBucketMap$Node[] buckets\u003e\n  $i0 \u003d lengthof $r1\n  if (i3 \u003e\u003d $i0) goto B2 else B5\n}",
      "B2 {\n  $r2 \u003d StaticBucketMap$Lock[] locks\u003e\n  $r3 \u003d $r2[i3]\n  entermonitor $r3\n  $r4 \u003d StaticBucketMap$Lock[] locks\u003e\n  $r5 \u003d $r4[i3]\n  $i1 \u003d StaticBucketMap$Lock: int size\u003e\n  i2 \u003d i2 + $i1\n  exitmonitor $r3\n  goto B4\n}",
      "B3 {\n  $r6 :\u003d @caughtexception\n  exitmonitor $r3\n  throw $r6\n}",
      "B4 {\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.TransformedMap",
    "methodName": "transformedMap",
    "signature": "org.apache.commons.collections4.map.TransformedMap transformedMap(java.util.Map,org.apache.commons.collections4.Transformer,org.apache.commons.collections4.Transformer)",
    "visibility": "public",
    "body": "{\r\n    final TransformedMap\u003cK, V\u003e decorated \u003d new TransformedMap\u003c\u003e(map, keyTransformer, valueTransformer);\r\n    if (!map.isEmpty()) {\r\n        final Map\u003cK, V\u003e transformed \u003d decorated.transformMap(map);\r\n        decorated.clear();\r\n        // avoids double transformation\r\n        decorated.decorated().putAll(transformed);\r\n    }\r\n    return decorated;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Map\n  Transformer\n  Transformer\n  $r0 \u003d TransformedMap\n  new TransformedMap(r1, r2, r3)\n  $z0 \u003d r1.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d $r0.transformMap(r1)\n  $r0.clear()\n  $r5 \u003d $r0.decorated()\n  $r5.putAll($r4)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.TransformedMap",
    "methodName": "isSetValueChecking",
    "signature": "boolean isSetValueChecking()",
    "visibility": "protected",
    "body": "{\r\n    return valueTransformer !\u003d null;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TransformedMap\n  $r1 \u003d Transformer valueTransformer\u003e\n  if ($r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.TransformedMap",
    "methodName": "transformKey",
    "signature": "java.lang.Object transformKey(java.lang.Object)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TransformedMap\n  Object\n  $r1 \u003d Transformer keyTransformer\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d Transformer keyTransformer\u003e\n  $r4 \u003d $r3.apply(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.TransformedMap",
    "methodName": "transformMap",
    "signature": "java.util.Map transformMap(java.util.Map)",
    "visibility": "protected",
    "body": "{\r\n    if (map.isEmpty()) {\r\n        return (Map\u003cK, V\u003e) map;\r\n    }\r\n    final Map\u003cK, V\u003e result \u003d new LinkedMap\u003c\u003e(map.size());\r\n    for (final Map.Entry\u003c? extends K, ? extends V\u003e entry : map.entrySet()) {\r\n        result.put(transformKey(entry.getKey()), transformValue(entry.getValue()));\r\n    }\r\n    return result;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B3 : If($z1 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  TransformedMap\n  Map\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d LinkedMap\n  $i0 \u003d r0.size()\n  new LinkedMap($i0)\n  $r2 \u003d r0.entrySet()\n  $r3 \u003d $r2.iterator()\n}",
      "B3 {\n  $z1 \u003d $r3.hasNext()\n  if ($z1 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d $r3.next()\n  r5 \u003d Map$Entry) $r4\n  $r7 \u003d r5.getKey()\n  $r8 \u003d r6.transformKey($r7)\n  $r9 \u003d r5.getValue()\n  $r10 \u003d r6.transformValue($r9)\n  $r1.put($r8, $r10)\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TransformedMap#transformValue(...1)",
        "body": "{\r\n    if (valueTransformer \u003d\u003d null) {\r\n        return object;\r\n    }\r\n    return valueTransformer.apply(object);\r\n}"
      },
      {
        "name": "TransformedMap#transformKey(...1)",
        "body": "{\r\n    if (keyTransformer \u003d\u003d null) {\r\n        return object;\r\n    }\r\n    return keyTransformer.apply(object);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.TransformedMap",
    "methodName": "transformValue",
    "signature": "java.lang.Object transformValue(java.lang.Object)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TransformedMap\n  Object\n  $r1 \u003d Transformer valueTransformer\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d Transformer valueTransformer\u003e\n  $r4 \u003d $r3.apply(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.TransformedSortedMap",
    "methodName": "transformedSortedMap",
    "signature": "org.apache.commons.collections4.map.TransformedSortedMap transformedSortedMap(java.util.SortedMap,org.apache.commons.collections4.Transformer,org.apache.commons.collections4.Transformer)",
    "visibility": "public",
    "body": "{\r\n    final TransformedSortedMap\u003cK, V\u003e decorated \u003d new TransformedSortedMap\u003c\u003e(map, keyTransformer, valueTransformer);\r\n    if (!map.isEmpty()) {\r\n        final Map\u003cK, V\u003e transformed \u003d decorated.transformMap(map);\r\n        decorated.clear();\r\n        // avoids double transformation\r\n        decorated.decorated().putAll(transformed);\r\n    }\r\n    return decorated;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SortedMap\n  Transformer\n  Transformer\n  $r0 \u003d TransformedSortedMap\n  new TransformedSortedMap(r1, r2, r3)\n  $z0 \u003d r1.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d $r0.transformMap(r1)\n  $r0.clear()\n  $r5 \u003d $r0.decorated()\n  $r5.putAll($r4)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.UnmodifiableEntrySet",
    "methodName": "unmodifiableEntrySet",
    "signature": "java.util.Set unmodifiableEntrySet(java.util.Set)",
    "visibility": "public",
    "body": "{\r\n    if (set instanceof Unmodifiable) {\r\n        return set;\r\n    }\r\n    return new UnmodifiableEntrySet\u003c\u003e(set);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Set\n  $z0 \u003d Unmodifiable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableEntrySet\n  new UnmodifiableEntrySet(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.UnmodifiableEntrySet",
    "methodName": "toArray",
    "signature": "java.lang.Object[] toArray()",
    "visibility": "public",
    "body": "{\r\n    final Object[] array \u003d decorated().toArray();\r\n    for (int i \u003d 0; i \u003c array.length; i++) {\r\n        array[i] \u003d new UnmodifiableEntry((Map.Entry\u003cK, V\u003e) array[i]);\r\n    }\r\n    return array;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d $i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  UnmodifiableEntrySet\n  $r1 \u003d r0.decorated()\n  $r2 \u003d $r1.toArray()\n  i1 \u003d 0\n}",
      "B1 {\n  $i0 \u003d lengthof $r2\n  if (i1 \u003e\u003d $i0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d UnmodifiableEntrySet$UnmodifiableEntry\n  $r4 \u003d $r2[i1]\n  $r5 \u003d Map$Entry) $r4\n  new UnmodifiableEntrySet$UnmodifiableEntry(r0, $r5)\n  $r2[i1] \u003d $r3\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "UnmodifiableEntrySet#decorated(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.map.UnmodifiableEntrySet",
    "methodName": "toArray",
    "signature": "java.lang.Object[] toArray(java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i0 \u003c\u003d 0) → B1 | else → B2",
      "B3 : If(i7 \u003e\u003d $i8) → B4 | else → B5",
      "B5 : If($i2 \u003c\u003d $i1) → B6 | else → B7",
      "B7 : If($i5 \u003c\u003d $i4) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  UnmodifiableEntrySet\n  Object[]\n  r10 \u003d r0\n  $i0 \u003d lengthof r0\n  if ($i0 \u003c\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r7 \u003d r0.getClass()\n  $r8 \u003d $r7.getComponentType()\n  $r9 \u003d Array.newInstance($r8, 0)\n  r10 \u003d Object[]) $r9\n}",
      "B2 {\n  $r2 \u003d r1.decorated()\n  $r3 \u003d $r2.toArray(r10)\n  i7 \u003d 0\n}",
      "B3 {\n  $i8 \u003d lengthof $r3\n  if (i7 \u003e\u003d $i8) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d UnmodifiableEntrySet$UnmodifiableEntry\n  $r5 \u003d $r3[i7]\n  $r6 \u003d Map$Entry) $r5\n  new UnmodifiableEntrySet$UnmodifiableEntry(r1, $r6)\n  $r3[i7] \u003d $r4\n  i7 \u003d i7 + 1\n  goto B3\n}",
      "B5 {\n  $i2 \u003d lengthof $r3\n  $i1 \u003d lengthof r0\n  if ($i2 \u003c\u003d $i1) goto B6 else B7\n}",
      "B6 {\n  return\n}",
      "B7 {\n  $i3 \u003d lengthof $r3\n  System.arraycopy($r3, 0, r0, 0, $i3)\n  $i5 \u003d lengthof r0\n  $i4 \u003d lengthof $r3\n  if ($i5 \u003c\u003d $i4) goto B8 else B9\n}",
      "B8 {\n  $i6 \u003d lengthof $r3\n  r0[$i6] \u003d null\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e [EXIT]",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.UnmodifiableMap",
    "methodName": "unmodifiableMap",
    "signature": "java.util.Map unmodifiableMap(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    if (map instanceof Unmodifiable) {\r\n        // safe to upcast\r\n        @SuppressWarnings(\"unchecked\")\r\n        final Map\u003cK, V\u003e tmpMap \u003d (Map\u003cK, V\u003e) map;\r\n        return tmpMap;\r\n    }\r\n    return new UnmodifiableMap\u003c\u003e(map);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Map\n  $z0 \u003d Unmodifiable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableMap\n  new UnmodifiableMap(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.UnmodifiableMap",
    "methodName": "mapIterator",
    "signature": "org.apache.commons.collections4.MapIterator mapIterator()",
    "visibility": "public",
    "body": "{\r\n    if (map instanceof IterableMap) {\r\n        final MapIterator\u003cK, V\u003e it \u003d ((IterableMap\u003cK, V\u003e) map).mapIterator();\r\n        return UnmodifiableMapIterator.unmodifiableMapIterator(it);\r\n    }\r\n    final MapIterator\u003cK, V\u003e it \u003d new EntrySetMapIterator\u003c\u003e(map);\r\n    return UnmodifiableMapIterator.unmodifiableMapIterator(it);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  UnmodifiableMap\n  $r1 \u003d Map map\u003e\n  $z0 \u003d IterableMap\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d Map map\u003e\n  $r6 \u003d IterableMap) $r5\n  $r7 \u003d $r6.mapIterator()\n  $r8 \u003d UnmodifiableMapIterator.unmodifiableMapIterator($r7)\n  return\n}",
      "B2 {\n  $r2 \u003d EntrySetMapIterator\n  $r3 \u003d Map map\u003e\n  new EntrySetMapIterator($r3)\n  $r4 \u003d UnmodifiableMapIterator.unmodifiableMapIterator($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.UnmodifiableOrderedMap",
    "methodName": "unmodifiableOrderedMap",
    "signature": "org.apache.commons.collections4.OrderedMap unmodifiableOrderedMap(org.apache.commons.collections4.OrderedMap)",
    "visibility": "public",
    "body": "{\r\n    if (map instanceof Unmodifiable) {\r\n        // safe to upcast\r\n        @SuppressWarnings(\"unchecked\")\r\n        final OrderedMap\u003cK, V\u003e tmpMap \u003d (OrderedMap\u003cK, V\u003e) map;\r\n        return tmpMap;\r\n    }\r\n    return new UnmodifiableOrderedMap\u003c\u003e(map);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  OrderedMap\n  $z0 \u003d Unmodifiable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableOrderedMap\n  new UnmodifiableOrderedMap(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.map.UnmodifiableSortedMap",
    "methodName": "unmodifiableSortedMap",
    "signature": "java.util.SortedMap unmodifiableSortedMap(java.util.SortedMap)",
    "visibility": "public",
    "body": "{\r\n    if (map instanceof Unmodifiable) {\r\n        // safe to upcast\r\n        @SuppressWarnings(\"unchecked\")\r\n        final SortedMap\u003cK, V\u003e tmpMap \u003d (SortedMap\u003cK, V\u003e) map;\r\n        return tmpMap;\r\n    }\r\n    return new UnmodifiableSortedMap\u003c\u003e(map);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SortedMap\n  $z0 \u003d Unmodifiable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableSortedMap\n  new UnmodifiableSortedMap(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "applyDefaultFunction",
    "signature": "java.lang.Object applyDefaultFunction(java.util.Map,java.lang.Object,java.util.function.BiFunction,java.util.function.Function,java.lang.Object)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 13,
    "edges": 17,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r4 \u003d\u003d null) → B2 | else → B3",
      "B4 : If($r5 !\u003d null) → B5 | else → B9",
      "B5 : If(r2 \u003d\u003d null) → B6 | else → B7",
      "B9 : If(r6 \u003d\u003d null) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  Map\n  Object\n  BiFunction\n  Function\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  if (r4 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d r4.apply(r0, r3)\n  goto B4\n}",
      "B3 {\n  $r5 \u003d null\n}",
      "B4 {\n  r6 \u003d $r5\n  if ($r5 !\u003d null) goto B5 else B9\n}",
      "B5 {\n  if (r2 \u003d\u003d null) goto B6 else B7\n}",
      "B6 {\n  $r7 \u003d r2.apply(r3)\n  goto B8\n}",
      "B7 {\n  $r7 \u003d null\n}",
      "B8 {\n  r6 \u003d $r7\n}",
      "B9 {\n  if (r6 \u003d\u003d null) goto B10 else B11\n}",
      "B10 {\n  $r8 \u003d r6\n  goto B12\n}",
      "B11 {\n  $r8 \u003d r1\n}",
      "B12 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B12 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "applyDefaultValue",
    "signature": "java.lang.Object applyDefaultValue(java.util.Map,java.lang.Object,java.util.function.BiFunction,java.lang.Object)",
    "visibility": "private",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If(r2 \u003d\u003d null) → B2 | else → B3",
      "B4 : If($r4 !\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Map\n  Object\n  BiFunction\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  if (r2 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d r2.apply(r0, r3)\n  goto B4\n}",
      "B3 {\n  $r4 \u003d null\n}",
      "B4 {\n  if ($r4 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r5 \u003d r1\n  goto B7\n}",
      "B6 {\n  $r5 \u003d $r4\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "emptyIfNull",
    "signature": "java.util.Map emptyIfNull(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    return map \u003d\u003d null ? Collections.\u003cK, V\u003eemptyMap() : map;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Map\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d Collections.emptyMap()\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "getBoolean",
    "signature": "java.lang.Boolean getBoolean(java.util.Map,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B11",
      "B1 : If($r2 \u003d\u003d null) → B2 | else → B11",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B6",
      "B6 : If($z2 \u003d\u003d 0) → B7 | else → B11",
      "B7 : If($i0 \u003d\u003d 0) → B8 | else → B9"
    ],
    "blockList": [
      "B0 {\n  Map\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B11\n}",
      "B1 {\n  $r2 \u003d r0.get(r1)\n  if ($r2 \u003d\u003d null) goto B2 else B11\n}",
      "B2 {\n  $z0 \u003d Boolean\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d Boolean) $r2\n  return\n}",
      "B4 {\n  $z1 \u003d String\n  if ($z1 \u003d\u003d 0) goto B5 else B6\n}",
      "B5 {\n  $r4 \u003d String) $r2\n  $r5 \u003d Boolean.valueOf($r4)\n  return\n}",
      "B6 {\n  $z2 \u003d Number\n  if ($z2 \u003d\u003d 0) goto B7 else B11\n}",
      "B7 {\n  r3 \u003d Number) $r2\n  $i0 \u003d r3.intValue()\n  if ($i0 \u003d\u003d 0) goto B8 else B9\n}",
      "B8 {\n  $r7 \u003d Boolean TRUE\u003e\n  goto B10\n}",
      "B9 {\n  $r7 \u003d Boolean FALSE\u003e\n}",
      "B10 {\n  return\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B11",
      "B1 --\u003e B2",
      "B1 --\u003e B11",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B11",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "getByte",
    "signature": "java.lang.Byte getByte(java.util.Map,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Map\n  Object\n  $r2 \u003d MapUtils.getNumber(r0, r1)\n  if ($r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d Byte\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d Byte) $r2\n  return\n}",
      "B4 {\n  $b0 \u003d $r2.byteValue()\n  $r3 \u003d Byte.valueOf($b0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "getDouble",
    "signature": "java.lang.Double getDouble(java.util.Map,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Map\n  Object\n  $r2 \u003d MapUtils.getNumber(r0, r1)\n  if ($r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d Double\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d Double) $r2\n  return\n}",
      "B4 {\n  $d0 \u003d $r2.doubleValue()\n  $r3 \u003d Double.valueOf($d0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "getFloat",
    "signature": "java.lang.Float getFloat(java.util.Map,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Map\n  Object\n  $r2 \u003d MapUtils.getNumber(r0, r1)\n  if ($r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d Float\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d Float) $r2\n  return\n}",
      "B4 {\n  $f0 \u003d $r2.floatValue()\n  $r3 \u003d Float.valueOf($f0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "getInteger",
    "signature": "java.lang.Integer getInteger(java.util.Map,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Map\n  Object\n  $r2 \u003d MapUtils.getNumber(r0, r1)\n  if ($r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d Integer\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d Integer) $r2\n  return\n}",
      "B4 {\n  $i0 \u003d $r2.intValue()\n  $r3 \u003d Integer.valueOf($i0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "getLong",
    "signature": "java.lang.Long getLong(java.util.Map,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Map\n  Object\n  $r2 \u003d MapUtils.getNumber(r0, r1)\n  if ($r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d Long\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d Long) $r2\n  return\n}",
      "B4 {\n  $l0 \u003d $r2.longValue()\n  $r3 \u003d Long.valueOf($l0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "getMap",
    "signature": "java.util.Map getMap(java.util.Map,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Map\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d r0.get(r1)\n  $z0 \u003d Map\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d Map) $r2\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "getNumber",
    "signature": "java.lang.Number getNumber(java.util.Map,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 11,
    "edges": 15,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B10",
      "B1 : If($r2 \u003d\u003d null) → B2 | else → B10",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B10"
    ],
    "blockList": [
      "B0 {\n  Map\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B7\n}",
      "B1 {\n  $r2 \u003d r0.get(r1)\n  if ($r2 \u003d\u003d null) goto B2 else B7\n}",
      "B2 {\n  $z0 \u003d Number\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r5 \u003d Number) $r2\n  return\n}",
      "B4 {\n  $z1 \u003d String\n  if ($z1 \u003d\u003d 0) goto B5 else B7\n}",
      "B5 {\n  r7 \u003d String) $r2\n  $r3 \u003d NumberFormat.getInstance()\n  $r4 \u003d $r3.parse(r7)\n  return\n}",
      "B6 {\n  $r6 :\u003d @caughtexception\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B7",
      "B1 --\u003e B2",
      "B1 --\u003e B7",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B7",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "getObject",
    "signature": "java.lang.Object getObject(java.util.Map,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Map\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0.get(r1)\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "getObject",
    "signature": "java.lang.Object getObject(java.util.Map,java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($r3 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Map\n  Object\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r3 \u003d r0.get(r2)\n  if ($r3 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "getShort",
    "signature": "java.lang.Short getShort(java.util.Map,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r2 !\u003d null) → B1 | else → B2",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Map\n  Object\n  $r2 \u003d MapUtils.getNumber(r0, r1)\n  if ($r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $z0 \u003d Short\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d Short) $r2\n  return\n}",
      "B4 {\n  $s0 \u003d $r2.shortValue()\n  $r3 \u003d Short.valueOf($s0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "getString",
    "signature": "java.lang.String getString(java.util.Map,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B3",
      "B1 : If($r2 \u003d\u003d null) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Map\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B3\n}",
      "B1 {\n  $r2 \u003d r0.get(r1)\n  if ($r2 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d $r2.toString()\n  return\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "invertMap",
    "signature": "java.util.Map invertMap(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(map, \"map\");\r\n    final Map\u003cV, K\u003e out \u003d new HashMap\u003c\u003e(map.size());\r\n    for (final Entry\u003cK, V\u003e entry : map.entrySet()) {\r\n        out.put(entry.getValue(), entry.getKey());\r\n    }\r\n    return out;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Map\n  Objects.requireNonNull(r0, \"map\")\n  $r1 \u003d HashMap\n  $i0 \u003d r0.size()\n  new HashMap($i0)\n  $r2 \u003d r0.entrySet()\n  $r3 \u003d $r2.iterator()\n}",
      "B1 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d $r3.next()\n  r5 \u003d Map$Entry) $r4\n  $r6 \u003d r5.getValue()\n  $r7 \u003d r5.getKey()\n  $r1.put($r6, $r7)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    return map \u003d\u003d null || map.isEmpty();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Map\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "isNotEmpty",
    "signature": "boolean isNotEmpty(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    return !isEmpty(map);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Map\n  $z0 \u003d MapUtils.isEmpty(r0)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapUtils#isEmpty(...1)",
        "body": "{\r\n    return map \u003d\u003d null || map.isEmpty();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "iterableMap",
    "signature": "org.apache.commons.collections4.IterableMap iterableMap(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(map, \"map\");\r\n    return map instanceof IterableMap ? (IterableMap\u003cK, V\u003e) map : new AbstractMapDecorator\u003cK, V\u003e(map) {\r\n    };\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Map\n  Objects.requireNonNull(r0, \"map\")\n  $z0 \u003d IterableMap\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d IterableMap) r0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d MapUtils$1\n  $r1 \u003d $r2\n  new MapUtils$1(r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "iterableSortedMap",
    "signature": "org.apache.commons.collections4.IterableSortedMap iterableSortedMap(java.util.SortedMap)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(sortedMap, \"sortedMap\");\r\n    return sortedMap instanceof IterableSortedMap ? (IterableSortedMap\u003cK, V\u003e) sortedMap : new AbstractSortedMapDecorator\u003cK, V\u003e(sortedMap) {\r\n    };\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SortedMap\n  Objects.requireNonNull(r0, \"sortedMap\")\n  $z0 \u003d IterableSortedMap\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d IterableSortedMap) r0\n  goto B3\n}",
      "B2 {\n  $r2 \u003d MapUtils$2\n  $r1 \u003d $r2\n  new MapUtils$2(r0)\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "populateMap",
    "signature": "void populateMap(java.util.Map,java.lang.Iterable,org.apache.commons.collections4.Transformer,org.apache.commons.collections4.Transformer)",
    "visibility": "public",
    "body": "{\r\n    for (final E temp : elements) {\r\n        map.put(keyTransformer.apply(temp), valueTransformer.apply(temp));\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Map\n  Iterable\n  Transformer\n  Transformer\n  $r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d $r1.next()\n  $r5 \u003d r4.apply($r2)\n  $r7 \u003d r6.apply($r2)\n  r3.put($r5, $r7)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "populateMap",
    "signature": "void populateMap(org.apache.commons.collections4.MultiMap,java.lang.Iterable,org.apache.commons.collections4.Transformer,org.apache.commons.collections4.Transformer)",
    "visibility": "public",
    "body": "{\r\n    for (final E temp : elements) {\r\n        map.put(keyTransformer.apply(temp), valueTransformer.apply(temp));\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MultiMap\n  Iterable\n  Transformer\n  Transformer\n  $r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d $r1.next()\n  $r5 \u003d r4.apply($r2)\n  $r7 \u003d r6.apply($r2)\n  r3.put($r5, $r7)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "printIndent",
    "signature": "void printIndent(java.io.PrintStream,int)",
    "visibility": "private",
    "body": "{\r\n    for (int i \u003d 0; i \u003c indent; i++) {\r\n        out.print(INDENT_STRING);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If(i1 \u003e\u003d i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  PrintStream\n  i0 :\u003d @parameter1: int\n  i1 \u003d 0\n}",
      "B1 {\n  if (i1 \u003e\u003d i0) goto B2 else B3\n}",
      "B2 {\n  r0.print(\"    \")\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "putAll",
    "signature": "java.util.Map putAll(java.util.Map,java.lang.Object[])",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(map, \"map\");\r\n    if (array \u003d\u003d null || array.length \u003d\u003d 0) {\r\n        return map;\r\n    }\r\n    final Object obj \u003d array[0];\r\n    if (obj instanceof Map.Entry) {\r\n        for (final Object element : array) {\r\n            // cast ok here, type is checked above\r\n            final Map.Entry\u003cK, V\u003e entry \u003d (Map.Entry\u003cK, V\u003e) element;\r\n            map.put(entry.getKey(), entry.getValue());\r\n        }\r\n    } else if (obj instanceof KeyValue) {\r\n        for (final Object element : array) {\r\n            // cast ok here, type is checked above\r\n            final KeyValue\u003cK, V\u003e keyval \u003d (KeyValue\u003cK, V\u003e) element;\r\n            map.put(keyval.getKey(), keyval.getValue());\r\n        }\r\n    } else if (obj instanceof Object[]) {\r\n        for (int i \u003d 0; i \u003c array.length; i++) {\r\n            final Object[] sub \u003d (Object[]) array[i];\r\n            if (sub \u003d\u003d null || sub.length \u003c 2) {\r\n                throw new IllegalArgumentException(\"Invalid array element: \" + i);\r\n            }\r\n            // these casts can fail if array has incorrect types\r\n            map.put((K) sub[0], (V) sub[1]);\r\n        }\r\n    } else {\r\n        for (int i \u003d 0; i \u003c array.length - 1; ) {\r\n            // these casts can fail if array has incorrect types\r\n            map.put((K) array[i++], (V) array[i++]);\r\n        }\r\n    }\r\n    return map;\r\n}",
    "nodes": 25,
    "edges": 33,
    "cc": 10,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($i0 !\u003d 0) → B2 | else → B3",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B8",
      "B5 : If(i6 \u003e\u003d i5) → B6 | else → B7",
      "B8 : If($z1 \u003d\u003d 0) → B9 | else → B13",
      "B10 : If(i8 \u003e\u003d i7) → B11 | else → B12",
      "B13 : If($z2 \u003d\u003d 0) → B14 | else → B21",
      "B15 : If(i9 \u003e\u003d $i3) → B16 | else → B20",
      "B16 : If(r18 \u003d\u003d null) → B17 | else → B18",
      "B17 : If($i4 \u003e\u003d 2) → B18 | else → B19",
      "B22 : If(i10 \u003e\u003d $i2) → B23 | else → B24"
    ],
    "blockList": [
      "B0 {\n  Map\n  Object[]\n  Objects.requireNonNull(r0, \"map\")\n  if (r1 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d lengthof r1\n  if ($i0 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  r2 \u003d r1[0]\n  $z0 \u003d Map$Entry\n  if ($z0 \u003d\u003d 0) goto B4 else B8\n}",
      "B4 {\n  i5 \u003d lengthof r1\n  i6 \u003d 0\n}",
      "B5 {\n  if (i6 \u003e\u003d i5) goto B6 else B7\n}",
      "B6 {\n  r14 \u003d r1[i6]\n  r15 \u003d Map$Entry) r14\n  $r12 \u003d r15.getKey()\n  $r13 \u003d r15.getValue()\n  r0.put($r12, $r13)\n  i6 \u003d i6 + 1\n  goto B5\n}",
      "B7 {\n  goto B24\n}",
      "B8 {\n  $z1 \u003d KeyValue\n  if ($z1 \u003d\u003d 0) goto B9 else B13\n}",
      "B9 {\n  i7 \u003d lengthof r1\n  i8 \u003d 0\n}",
      "B10 {\n  if (i8 \u003e\u003d i7) goto B11 else B12\n}",
      "B11 {\n  r16 \u003d r1[i8]\n  r17 \u003d KeyValue) r16\n  $r10 \u003d r17.getKey()\n  $r11 \u003d r17.getValue()\n  r0.put($r10, $r11)\n  i8 \u003d i8 + 1\n  goto B10\n}",
      "B12 {\n  goto B24\n}",
      "B13 {\n  $z2 \u003d Object[]\n  if ($z2 \u003d\u003d 0) goto B14 else B21\n}",
      "B14 {\n  i9 \u003d 0\n}",
      "B15 {\n  $i3 \u003d lengthof r1\n  if (i9 \u003e\u003d $i3) goto B16 else B20\n}",
      "B16 {\n  $r5 \u003d r1[i9]\n  r18 \u003d Object[]) $r5\n  if (r18 \u003d\u003d null) goto B17 else B18\n}",
      "B17 {\n  $i4 \u003d lengthof r18\n  if ($i4 \u003e\u003d 2) goto B18 else B19\n}",
      "B18 {\n  $r6 \u003d IllegalArgumentException\n  $r7 \u003d dynInvoke makeConcatWithConstants(i9)\n  new IllegalArgumentException($r7)\n  throw $r6\n}",
      "B19 {\n  $r9 \u003d r18[0]\n  $r8 \u003d r18[1]\n  r0.put($r9, $r8)\n  i9 \u003d i9 + 1\n  goto B15\n}",
      "B20 {\n  goto B24\n}",
      "B21 {\n  i10 \u003d 0\n}",
      "B22 {\n  $i1 \u003d lengthof r1\n  $i2 \u003d $i1 - 1\n  if (i10 \u003e\u003d $i2) goto B23 else B24\n}",
      "B23 {\n  i11 \u003d i10 + 1\n  $r4 \u003d r1[i10]\n  i10 \u003d i11 + 1\n  $r3 \u003d r1[i11]\n  r0.put($r4, $r3)\n  goto B22\n}",
      "B24 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B5",
      "B7 --\u003e B24",
      "B8 --\u003e B9",
      "B8 --\u003e B13",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B10",
      "B12 --\u003e B24",
      "B13 --\u003e B14",
      "B13 --\u003e B21",
      "B14 --\u003e B15",
      "B15 --\u003e B16",
      "B15 --\u003e B20",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e [EXIT]",
      "B19 --\u003e B15",
      "B20 --\u003e B24",
      "B21 --\u003e B22",
      "B22 --\u003e B23",
      "B22 --\u003e B24",
      "B23 --\u003e B22",
      "B24 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "safeAddToMap",
    "signature": "void safeAddToMap(java.util.Map,java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Map\n  Object\n  Object\n  Objects.requireNonNull(r0, \"map\")\n  if (r2 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d \"\"\n  goto B3\n}",
      "B2 {\n  $r3 \u003d r2\n}",
      "B3 {\n  r0.put(r1, $r3)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "size",
    "signature": "int size(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    return map \u003d\u003d null ? 0 : map.size();\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Map\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d 0\n  goto B3\n}",
      "B2 {\n  $i0 \u003d r0.size()\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "toMap",
    "signature": "java.util.Map toMap(java.util.ResourceBundle)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(resourceBundle, \"resourceBundle\");\r\n    final Enumeration\u003cString\u003e enumeration \u003d resourceBundle.getKeys();\r\n    final Map\u003cString, Object\u003e map \u003d new HashMap\u003c\u003e();\r\n    while (enumeration.hasMoreElements()) {\r\n        final String key \u003d enumeration.nextElement();\r\n        final Object value \u003d resourceBundle.getObject(key);\r\n        map.put(key, value);\r\n    }\r\n    return map;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ResourceBundle\n  Objects.requireNonNull(r0, \"resourceBundle\")\n  $r1 \u003d r0.getKeys()\n  $r2 \u003d HashMap\n  new HashMap()\n}",
      "B1 {\n  $z0 \u003d $r1.hasMoreElements()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d $r1.nextElement()\n  r4 \u003d String) $r3\n  $r5 \u003d r0.getObject(r4)\n  $r2.put(r4, $r5)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "toProperties",
    "signature": "java.util.Properties toProperties(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    final Properties answer \u003d new Properties();\r\n    if (map !\u003d null) {\r\n        for (final Entry\u003cK, V\u003e entry2 : map.entrySet()) {\r\n            final Map.Entry\u003c?, ?\u003e entry \u003d entry2;\r\n            final Object key \u003d entry.getKey();\r\n            final Object value \u003d entry.getValue();\r\n            answer.put(key, value);\r\n        }\r\n    }\r\n    return answer;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r1 \u003d\u003d null) → B1 | else → B4",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Map\n  $r0 \u003d Properties\n  new Properties()\n  if (r1 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r2 \u003d r1.entrySet()\n  $r3 \u003d $r2.iterator()\n}",
      "B2 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r4 \u003d $r3.next()\n  r5 \u003d Map$Entry) $r4\n  $r6 \u003d r5.getKey()\n  $r7 \u003d r5.getValue()\n  $r0.put($r6, $r7)\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MapUtils",
    "methodName": "verbosePrintInternal",
    "signature": "void verbosePrintInternal(java.io.PrintStream,java.lang.Object,java.util.Map,java.util.Deque,boolean)",
    "visibility": "private",
    "body": "{\r\n    printIndent(out, lineage.size());\r\n    if (map \u003d\u003d null) {\r\n        if (label !\u003d null) {\r\n            out.print(label);\r\n            out.print(\" \u003d \");\r\n        }\r\n        out.println(\"null\");\r\n        return;\r\n    }\r\n    if (label !\u003d null) {\r\n        out.print(label);\r\n        out.println(\" \u003d \");\r\n    }\r\n    printIndent(out, lineage.size());\r\n    out.println(\"{\");\r\n    lineage.addLast(map);\r\n    for (final Map.Entry\u003c?, ?\u003e entry : map.entrySet()) {\r\n        final Object childKey \u003d entry.getKey();\r\n        final Object childValue \u003d entry.getValue();\r\n        if (childValue instanceof Map \u0026\u0026 !lineage.contains(childValue)) {\r\n            verbosePrintInternal(out, childKey \u003d\u003d null ? \"null\" : childKey, (Map\u003c?, ?\u003e) childValue, lineage, debug);\r\n        } else {\r\n            printIndent(out, lineage.size());\r\n            out.print(childKey);\r\n            out.print(\" \u003d \");\r\n            final int lineageIndex \u003d IterableUtils.indexOf(lineage, PredicateUtils.equalPredicate(childValue));\r\n            if (lineageIndex \u003d\u003d -1) {\r\n                out.print(childValue);\r\n            } else if (lineage.size() - 1 \u003d\u003d lineageIndex) {\r\n                out.print(\"(this Map)\");\r\n            } else {\r\n                out.print(\"(ancestor[\" + (lineage.size() - 1 - lineageIndex - 1) + \"] Map)\");\r\n            }\r\n            if (debug \u0026\u0026 childValue !\u003d null) {\r\n                out.print(\u0027 \u0027);\r\n                out.println(childValue.getClass().getName());\r\n            } else {\r\n                out.println();\r\n            }\r\n        }\r\n    }\r\n    lineage.removeLast();\r\n    printIndent(out, lineage.size());\r\n    out.println(debug ? \"} \" + map.getClass().getName() : \"}\");\r\n}",
    "nodes": 28,
    "edges": 38,
    "cc": 12,
    "flowSummary": [
      "B0 : If(r2 !\u003d null) → B1 | else → B4",
      "B1 : If(r3 \u003d\u003d null) → B2 | else → B3",
      "B4 : If(r3 \u003d\u003d null) → B5 | else → B6",
      "B7 : If($z3 \u003d\u003d 0) → B8 | else → B24",
      "B8 : If($z1 \u003d\u003d 0) → B9 | else → B14",
      "B9 : If($z2 !\u003d 0) → B10 | else → B14",
      "B10 : If($r10 !\u003d null) → B11 | else → B12",
      "B14 : If($i4 !\u003d $i12) → B15 | else → B16",
      "B16 : If($i6 !\u003d $i4) → B17 | else → B18",
      "B19 : If(z0 \u003d\u003d 0) → B20 | else → B22",
      "B20 : If($r11 \u003d\u003d null) → B21 | else → B22",
      "B24 : If(z0 \u003d\u003d 0) → B25 | else → B26"
    ],
    "blockList": [
      "B0 {\n  PrintStream\n  Object\n  Map\n  Deque\n  z0 :\u003d @parameter4: boolean\n  $i0 \u003d r1.size()\n  MapUtils.printIndent(r0, $i0)\n  if (r2 !\u003d null) goto B1 else B4\n}",
      "B1 {\n  if (r3 \u003d\u003d null) goto B2 else B3\n}",
      "B2 {\n  r0.print(r3)\n  r0.print(\" \u003d \")\n}",
      "B3 {\n  r0.println(\"null\")\n  return\n}",
      "B4 {\n  if (r3 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  r0.print(r3)\n  r0.println(\" \u003d \")\n}",
      "B6 {\n  $i1 \u003d r1.size()\n  MapUtils.printIndent(r0, $i1)\n  r0.println(\"{\")\n  r1.addLast(r2)\n  $r4 \u003d r2.entrySet()\n  $r5 \u003d $r4.iterator()\n}",
      "B7 {\n  $z3 \u003d $r5.hasNext()\n  if ($z3 \u003d\u003d 0) goto B8 else B24\n}",
      "B8 {\n  $r8 \u003d $r5.next()\n  r9 \u003d Map$Entry) $r8\n  $r10 \u003d r9.getKey()\n  $r11 \u003d r9.getValue()\n  $z1 \u003d Map\n  if ($z1 \u003d\u003d 0) goto B9 else B14\n}",
      "B9 {\n  $z2 \u003d r1.contains($r11)\n  if ($z2 !\u003d 0) goto B10 else B14\n}",
      "B10 {\n  if ($r10 !\u003d null) goto B11 else B12\n}",
      "B11 {\n  $r17 \u003d \"null\"\n  goto B13\n}",
      "B12 {\n  $r17 \u003d $r10\n}",
      "B13 {\n  $r16 \u003d Map) $r11\n  MapUtils.verbosePrintInternal(r0, $r17, $r16, r1, z0)\n  goto B23\n}",
      "B14 {\n  $i3 \u003d r1.size()\n  MapUtils.printIndent(r0, $i3)\n  r0.print($r10)\n  r0.print(\" \u003d \")\n  $r12 \u003d PredicateUtils.equalPredicate($r11)\n  $i4 \u003d IterableUtils.indexOf(r1, $r12)\n  $i12 \u003d (int) -1\n  if ($i4 !\u003d $i12) goto B15 else B16\n}",
      "B15 {\n  r0.print($r11)\n  goto B19\n}",
      "B16 {\n  $i5 \u003d r1.size()\n  $i6 \u003d $i5 - 1\n  if ($i6 !\u003d $i4) goto B17 else B18\n}",
      "B17 {\n  r0.print(\"(this Map)\")\n  goto B19\n}",
      "B18 {\n  $i7 \u003d r1.size()\n  $i8 \u003d $i7 - 1\n  $i9 \u003d $i8 - $i4\n  $i10 \u003d $i9 - 1\n  $r13 \u003d dynInvoke makeConcatWithConstants($i10)\n  r0.print($r13)\n}",
      "B19 {\n  if (z0 \u003d\u003d 0) goto B20 else B22\n}",
      "B20 {\n  if ($r11 \u003d\u003d null) goto B21 else B22\n}",
      "B21 {\n  r0.print(32)\n  $r14 \u003d $r11.getClass()\n  $r15 \u003d $r14.getName()\n  r0.println($r15)\n  goto B23\n}",
      "B22 {\n  r0.println()\n}",
      "B23 {\n  goto B7\n}",
      "B24 {\n  r1.removeLast()\n  $i2 \u003d r1.size()\n  MapUtils.printIndent(r0, $i2)\n  if (z0 \u003d\u003d 0) goto B25 else B26\n}",
      "B25 {\n  $r6 \u003d r2.getClass()\n  $r7 \u003d $r6.getName()\n  $r18 \u003d dynInvoke makeConcatWithConstants($r7)\n  goto B27\n}",
      "B26 {\n  $r18 \u003d \"}\"\n}",
      "B27 {\n  r0.println($r18)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B24",
      "B8 --\u003e B9",
      "B8 --\u003e B14",
      "B9 --\u003e B10",
      "B9 --\u003e B14",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B13",
      "B13 --\u003e B23",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e B19",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B19",
      "B19 --\u003e B20",
      "B19 --\u003e B22",
      "B20 --\u003e B21",
      "B20 --\u003e B22",
      "B21 --\u003e B23",
      "B22 --\u003e B23",
      "B23 --\u003e B7",
      "B24 --\u003e B25",
      "B24 --\u003e B26",
      "B25 --\u003e B27",
      "B26 --\u003e B27",
      "B27 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "MapUtils#verbosePrintInternal(...5)",
        "body": "{\r\n    printIndent(out, lineage.size());\r\n    if (map \u003d\u003d null) {\r\n        if (label !\u003d null) {\r\n            out.print(label);\r\n            out.print(\" \u003d \");\r\n        }\r\n        out.println(\"null\");\r\n        return;\r\n    }\r\n    if (label !\u003d null) {\r\n        out.print(label);\r\n        out.println(\" \u003d \");\r\n    }\r\n    printIndent(out, lineage.size());\r\n    out.println(\"{\");\r\n    lineage.addLast(map);\r\n    for (final Map.Entry\u003c?, ?\u003e entry : map.entrySet()) {\r\n        final Object childKey \u003d entry.getKey();\r\n        final Object childValue \u003d entry.getValue();\r\n        if (childValue instanceof Map \u0026\u0026 !lineage.contains(childValue)) {\r\n            verbosePrintInternal(out, childKey \u003d\u003d null ? \"null\" : childKey, (Map\u003c?, ?\u003e) childValue, lineage, debug);\r\n        } else {\r\n            printIndent(out, lineage.size());\r\n            out.print(childKey);\r\n            out.print(\" \u003d \");\r\n            final int lineageIndex \u003d IterableUtils.indexOf(lineage, PredicateUtils.equalPredicate(childValue));\r\n            if (lineageIndex \u003d\u003d -1) {\r\n                out.print(childValue);\r\n            } else if (lineage.size() - 1 \u003d\u003d lineageIndex) {\r\n                out.print(\"(this Map)\");\r\n            } else {\r\n                out.print(\"(ancestor[\" + (lineage.size() - 1 - lineageIndex - 1) + \"] Map)\");\r\n            }\r\n            if (debug \u0026\u0026 childValue !\u003d null) {\r\n                out.print(\u0027 \u0027);\r\n                out.println(childValue.getClass().getName());\r\n            } else {\r\n                out.println();\r\n            }\r\n        }\r\n    }\r\n    lineage.removeLast();\r\n    printIndent(out, lineage.size());\r\n    out.println(debug ? \"} \" + map.getClass().getName() : \"}\");\r\n}"
      },
      {
        "name": "MapUtils#printIndent(...2)",
        "body": "{\r\n    for (int i \u003d 0; i \u003c indent; i++) {\r\n        out.print(INDENT_STRING);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.multimap.ArrayListValuedHashMap",
    "methodName": "trimToSize",
    "signature": "void trimToSize()",
    "visibility": "public",
    "body": "{\r\n    for (final Collection\u003cV\u003e coll : getMap().values()) {\r\n        final ArrayList\u003cV\u003e list \u003d (ArrayList\u003cV\u003e) coll;\r\n        list.trimToSize();\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ArrayListValuedHashMap\n  $r1 \u003d r0.getMap()\n  $r2 \u003d $r1.values()\n  $r3 \u003d $r2.iterator()\n}",
      "B1 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d $r3.next()\n  r5 \u003d Collection) $r4\n  r6 \u003d ArrayList) r5\n  r6.trimToSize()\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayListValuedHashMap#getMap(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.multimap.ArrayListValuedLinkedHashMap",
    "methodName": "trimToSize",
    "signature": "void trimToSize()",
    "visibility": "public",
    "body": "{\r\n    for (final Collection\u003cV\u003e coll : getMap().values()) {\r\n        final ArrayList\u003cV\u003e list \u003d (ArrayList\u003cV\u003e) coll;\r\n        list.trimToSize();\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ArrayListValuedLinkedHashMap\n  $r1 \u003d r0.getMap()\n  $r2 \u003d $r1.values()\n  $r3 \u003d $r2.iterator()\n}",
      "B1 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d $r3.next()\n  r5 \u003d Collection) $r4\n  r6 \u003d ArrayList) r5\n  r6.trimToSize()\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ArrayListValuedLinkedHashMap#getMap(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.multimap.TransformedMultiValuedMap",
    "methodName": "transformedMap",
    "signature": "org.apache.commons.collections4.multimap.TransformedMultiValuedMap transformedMap(org.apache.commons.collections4.MultiValuedMap,org.apache.commons.collections4.Transformer,org.apache.commons.collections4.Transformer)",
    "visibility": "public",
    "body": "{\r\n    final TransformedMultiValuedMap\u003cK, V\u003e decorated \u003d new TransformedMultiValuedMap\u003c\u003e(map, keyTransformer, valueTransformer);\r\n    if (!map.isEmpty()) {\r\n        final MultiValuedMap\u003cK, V\u003e mapCopy \u003d new ArrayListValuedHashMap\u003c\u003e(map);\r\n        decorated.clear();\r\n        decorated.putAll(mapCopy);\r\n    }\r\n    return decorated;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MultiValuedMap\n  Transformer\n  Transformer\n  $r0 \u003d TransformedMultiValuedMap\n  new TransformedMultiValuedMap(r1, r2, r3)\n  $z0 \u003d r1.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d ArrayListValuedHashMap\n  new ArrayListValuedHashMap(r1)\n  $r0.clear()\n  $r0.putAll($r4)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.multimap.TransformedMultiValuedMap",
    "methodName": "putAll",
    "signature": "boolean putAll(java.lang.Object,java.lang.Iterable)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B3",
      "B1 : If($z1 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TransformedMultiValuedMap\n  Object\n  Iterable\n  Objects.requireNonNull(r0, \"values\")\n  $r1 \u003d FluentIterable.of(r0)\n  $r3 \u003d Transformer valueTransformer\u003e\n  $r4 \u003d $r1.transform($r3)\n  $r5 \u003d $r4.iterator()\n  $z0 \u003d $r5.hasNext()\n  if ($z0 \u003d\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $r6 \u003d r2.decorated()\n  $r8 \u003d r2.transformKey(r7)\n  $r9 \u003d $r6.get($r8)\n  $z1 \u003d CollectionUtils.addAll($r9, $r5)\n  if ($z1 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z2 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z2 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.multimap.TransformedMultiValuedMap",
    "methodName": "putAll",
    "signature": "boolean putAll(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(map, \"map\");\r\n    boolean changed \u003d false;\r\n    for (final Map.Entry\u003c? extends K, ? extends V\u003e entry : map.entrySet()) {\r\n        changed |\u003d put(entry.getKey(), entry.getValue());\r\n    }\r\n    return changed;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TransformedMultiValuedMap\n  Map\n  Objects.requireNonNull(r0, \"map\")\n  z2 \u003d 0\n  $r1 \u003d r0.entrySet()\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r4 \u003d Map$Entry) $r3\n  $r6 \u003d r4.getKey()\n  $r7 \u003d r4.getValue()\n  $z1 \u003d r5.put($r6, $r7)\n  z2 \u003d z2 | $z1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TransformedMultiValuedMap#put(...2)",
        "body": "{\r\n    return decorated().put(transformKey(key), transformValue(value));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.multimap.TransformedMultiValuedMap",
    "methodName": "putAll",
    "signature": "boolean putAll(org.apache.commons.collections4.MultiValuedMap)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(map, \"map\");\r\n    boolean changed \u003d false;\r\n    for (final Map.Entry\u003c? extends K, ? extends V\u003e entry : map.entries()) {\r\n        changed |\u003d put(entry.getKey(), entry.getValue());\r\n    }\r\n    return changed;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TransformedMultiValuedMap\n  MultiValuedMap\n  Objects.requireNonNull(r0, \"map\")\n  z2 \u003d 0\n  $r1 \u003d r0.entries()\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r4 \u003d Map$Entry) $r3\n  $r6 \u003d r4.getKey()\n  $r7 \u003d r4.getValue()\n  $z1 \u003d r5.put($r6, $r7)\n  z2 \u003d z2 | $z1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TransformedMultiValuedMap#put(...2)",
        "body": "{\r\n    return decorated().put(transformKey(key), transformValue(value));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.multimap.TransformedMultiValuedMap",
    "methodName": "transformKey",
    "signature": "java.lang.Object transformKey(java.lang.Object)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TransformedMultiValuedMap\n  Object\n  $r1 \u003d Transformer keyTransformer\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d Transformer keyTransformer\u003e\n  $r4 \u003d $r3.apply(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.multimap.TransformedMultiValuedMap",
    "methodName": "transformValue",
    "signature": "java.lang.Object transformValue(java.lang.Object)",
    "visibility": "protected",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  TransformedMultiValuedMap\n  Object\n  $r1 \u003d Transformer valueTransformer\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d Transformer valueTransformer\u003e\n  $r4 \u003d $r3.apply(r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap",
    "methodName": "unmodifiableMultiValuedMap",
    "signature": "org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap unmodifiableMultiValuedMap(org.apache.commons.collections4.MultiValuedMap)",
    "visibility": "public",
    "body": "{\r\n    if (map instanceof Unmodifiable) {\r\n        return (UnmodifiableMultiValuedMap\u003cK, V\u003e) map;\r\n    }\r\n    return new UnmodifiableMultiValuedMap\u003c\u003e(map);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MultiValuedMap\n  $z0 \u003d Unmodifiable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d UnmodifiableMultiValuedMap) r0\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableMultiValuedMap\n  new UnmodifiableMultiValuedMap(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MultiMapUtils",
    "methodName": "emptyIfNull",
    "signature": "org.apache.commons.collections4.MultiValuedMap emptyIfNull(org.apache.commons.collections4.MultiValuedMap)",
    "visibility": "public",
    "body": "{\r\n    return map \u003d\u003d null ? EMPTY_MULTI_VALUED_MAP : map;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MultiValuedMap\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d MultiValuedMap EMPTY_MULTI_VALUED_MAP\u003e\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MultiMapUtils",
    "methodName": "getCollection",
    "signature": "java.util.Collection getCollection(org.apache.commons.collections4.MultiValuedMap,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MultiValuedMap\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0.get(r1)\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MultiMapUtils",
    "methodName": "getValuesAsBag",
    "signature": "org.apache.commons.collections4.Bag getValuesAsBag(org.apache.commons.collections4.MultiValuedMap,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B4",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MultiValuedMap\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r2 \u003d r0.get(r1)\n  $z0 \u003d Bag\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d Bag) $r2\n  return\n}",
      "B3 {\n  $r3 \u003d HashBag\n  new HashBag($r2)\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MultiMapUtils",
    "methodName": "getValuesAsList",
    "signature": "java.util.List getValuesAsList(org.apache.commons.collections4.MultiValuedMap,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B4",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MultiValuedMap\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r2 \u003d r0.get(r1)\n  $z0 \u003d List\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d List) $r2\n  return\n}",
      "B3 {\n  $r3 \u003d ArrayList\n  new ArrayList($r2)\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MultiMapUtils",
    "methodName": "getValuesAsSet",
    "signature": "java.util.Set getValuesAsSet(org.apache.commons.collections4.MultiValuedMap,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 4,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B4",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MultiValuedMap\n  Object\n  if (r0 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  $r2 \u003d r0.get(r1)\n  $z0 \u003d Set\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r4 \u003d Set) $r2\n  return\n}",
      "B3 {\n  $r3 \u003d HashSet\n  new HashSet($r2)\n  return\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.MultiMapUtils",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty(org.apache.commons.collections4.MultiValuedMap)",
    "visibility": "public",
    "body": "{\r\n    return map \u003d\u003d null || map.isEmpty();\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  MultiValuedMap\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.multiset.PredicatedMultiSet",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return object \u003d\u003d this || decorated().equals(object);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d r1) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  PredicatedMultiSet\n  Object\n  if (r0 \u003d\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1.decorated()\n  $z0 \u003d $r2.equals(r0)\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PredicatedMultiSet#decorated(...0)",
        "body": "{\r\n    return (MultiSet\u003cE\u003e) super.decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.multiset.SynchronizedMultiSet",
    "methodName": "add",
    "signature": "int add(java.lang.Object,int)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedMultiSet\n  Object\n  i0 :\u003d @parameter1: int\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $i1 \u003d $r2.add(r3, i0)\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.multiset.SynchronizedMultiSet",
    "methodName": "entrySet",
    "signature": "java.util.Set entrySet()",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        final Set\u003cMultiSet.Entry\u003cE\u003e\u003e set \u003d decorated().entrySet();\r\n        return new SynchronizedSet\u003c\u003e(set, lock);\r\n    }\r\n}",
    "nodes": 11,
    "edges": 18,
    "cc": 9,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedMultiSet\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $r3 \u003d $r2.entrySet()\n  $r4 \u003d SynchronizedMultiSet$SynchronizedSet\n  $r5 \u003d Object lock\u003e\n  new SynchronizedMultiSet$SynchronizedSet($r3, $r5)\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r6 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r6\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedMultiSet#decorated(...0)",
        "body": "{\r\n    return (MultiSet\u003cE\u003e) super.decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.multiset.SynchronizedMultiSet",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    synchronized (lock) {\r\n        return decorated().equals(object);\r\n    }\r\n}",
    "nodes": 10,
    "edges": 14,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SynchronizedMultiSet\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d Object lock\u003e\n  entermonitor $r2\n  $r3 \u003d r1.decorated()\n  $z0 \u003d $r3.equals(r0)\n  exitmonitor $r2\n  return\n}",
      "B3 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r2\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedMultiSet#decorated(...0)",
        "body": "{\r\n    return (MultiSet\u003cE\u003e) super.decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.multiset.SynchronizedMultiSet",
    "methodName": "getCount",
    "signature": "int getCount(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return decorated().getCount(object);\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedMultiSet\n  Object\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $i0 \u003d $r2.getCount(r3)\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedMultiSet#decorated(...0)",
        "body": "{\r\n    return (MultiSet\u003cE\u003e) super.decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.multiset.SynchronizedMultiSet",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return decorated().hashCode();\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedMultiSet\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $i0 \u003d $r2.hashCode()\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r3 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r3\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedMultiSet#decorated(...0)",
        "body": "{\r\n    return (MultiSet\u003cE\u003e) super.decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.multiset.SynchronizedMultiSet",
    "methodName": "remove",
    "signature": "int remove(java.lang.Object,int)",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return decorated().remove(object, count);\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedMultiSet\n  Object\n  i0 :\u003d @parameter1: int\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $i1 \u003d $r2.remove(r3, i0)\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedMultiSet#decorated(...0)",
        "body": "{\r\n    return (MultiSet\u003cE\u003e) super.decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.multiset.SynchronizedMultiSet",
    "methodName": "setCount",
    "signature": "int setCount(java.lang.Object,int)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedMultiSet\n  Object\n  i0 :\u003d @parameter1: int\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $i1 \u003d $r2.setCount(r3, i0)\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.multiset.SynchronizedMultiSet",
    "methodName": "uniqueSet",
    "signature": "java.util.Set uniqueSet()",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        final Set\u003cE\u003e set \u003d decorated().uniqueSet();\r\n        return new SynchronizedSet\u003c\u003e(set, lock);\r\n    }\r\n}",
    "nodes": 11,
    "edges": 18,
    "cc": 9,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedMultiSet\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $r3 \u003d $r2.uniqueSet()\n  $r4 \u003d SynchronizedMultiSet$SynchronizedSet\n  $r5 \u003d Object lock\u003e\n  new SynchronizedMultiSet$SynchronizedSet($r3, $r5)\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r6 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r6\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedMultiSet#decorated(...0)",
        "body": "{\r\n    return (MultiSet\u003cE\u003e) super.decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.multiset.UnmodifiableMultiSet",
    "methodName": "unmodifiableMultiSet",
    "signature": "org.apache.commons.collections4.MultiSet unmodifiableMultiSet(org.apache.commons.collections4.MultiSet)",
    "visibility": "public",
    "body": "{\r\n    if (multiset instanceof Unmodifiable) {\r\n        // safe to upcast\r\n        @SuppressWarnings(\"unchecked\")\r\n        final MultiSet\u003cE\u003e tmpMultiSet \u003d (MultiSet\u003cE\u003e) multiset;\r\n        return tmpMultiSet;\r\n    }\r\n    return new UnmodifiableMultiSet\u003c\u003e(multiset);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MultiSet\n  $z0 \u003d Unmodifiable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableMultiSet\n  new UnmodifiableMultiSet(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.properties.OrderedProperties",
    "methodName": "compute",
    "signature": "java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)",
    "visibility": "public",
    "body": "{\r\n    final Object compute \u003d super.compute(key, remappingFunction);\r\n    if (compute !\u003d null) {\r\n        orderedKeys.add(key);\r\n    }\r\n    return compute;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r3 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  OrderedProperties\n  Object\n  BiFunction\n  $r3 \u003d r0.compute(r1, r2)\n  if ($r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d LinkedHashSet orderedKeys\u003e\n  $r4.add(r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.properties.OrderedProperties",
    "methodName": "computeIfAbsent",
    "signature": "java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)",
    "visibility": "public",
    "body": "{\r\n    final Object computeIfAbsent \u003d super.computeIfAbsent(key, mappingFunction);\r\n    if (computeIfAbsent !\u003d null) {\r\n        orderedKeys.add(key);\r\n    }\r\n    return computeIfAbsent;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r3 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  OrderedProperties\n  Object\n  Function\n  $r3 \u003d r0.computeIfAbsent(r1, r2)\n  if ($r3 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d LinkedHashSet orderedKeys\u003e\n  $r4.add(r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.properties.OrderedProperties",
    "methodName": "put",
    "signature": "java.lang.Object put(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final Object put \u003d super.put(key, value);\r\n    if (put \u003d\u003d null) {\r\n        orderedKeys.add(key);\r\n    }\r\n    return put;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  OrderedProperties\n  Object\n  Object\n  $r3 \u003d r0.put(r1, r2)\n  if ($r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d LinkedHashSet orderedKeys\u003e\n  $r4.add(r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.properties.OrderedProperties",
    "methodName": "putIfAbsent",
    "signature": "java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final Object putIfAbsent \u003d super.putIfAbsent(key, value);\r\n    if (putIfAbsent \u003d\u003d null) {\r\n        orderedKeys.add(key);\r\n    }\r\n    return putIfAbsent;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r3 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  OrderedProperties\n  Object\n  Object\n  $r3 \u003d r0.putIfAbsent(r1, r2)\n  if ($r3 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d LinkedHashSet orderedKeys\u003e\n  $r4.add(r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.properties.OrderedProperties",
    "methodName": "remove",
    "signature": "java.lang.Object remove(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final Object remove \u003d super.remove(key);\r\n    if (remove !\u003d null) {\r\n        orderedKeys.remove(key);\r\n    }\r\n    return remove;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($r2 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  OrderedProperties\n  Object\n  $r2 \u003d r0.remove(r1)\n  if ($r2 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d LinkedHashSet orderedKeys\u003e\n  $r3.remove(r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.properties.OrderedProperties",
    "methodName": "remove",
    "signature": "boolean remove(java.lang.Object,java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final boolean remove \u003d super.remove(key, value);\r\n    if (remove) {\r\n        orderedKeys.remove(key);\r\n    }\r\n    return remove;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  OrderedProperties\n  Object\n  Object\n  $z0 \u003d r0.remove(r1, r2)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d LinkedHashSet orderedKeys\u003e\n  $r3.remove(r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.properties.OrderedProperties",
    "methodName": "toString",
    "signature": "java.lang.String toString()",
    "visibility": "public",
    "body": "{\r\n    // Must override for Java 17 to maintain order since the implementation is based on a map\r\n    final int max \u003d size() - 1;\r\n    if (max \u003d\u003d -1) {\r\n        return \"{}\";\r\n    }\r\n    final StringBuilder sb \u003d new StringBuilder();\r\n    final Iterator\u003cMap.Entry\u003cObject, Object\u003e\u003e it \u003d entrySet().iterator();\r\n    sb.append(\u0027{\u0027);\r\n    for (int i \u003d 0; ; i++) {\r\n        final Map.Entry\u003cObject, Object\u003e e \u003d it.next();\r\n        final Object key \u003d e.getKey();\r\n        final Object value \u003d e.getValue();\r\n        sb.append(key \u003d\u003d this ? \"(this Map)\" : key.toString());\r\n        sb.append(\u0027\u003d\u0027);\r\n        sb.append(value \u003d\u003d this ? \"(this Map)\" : value.toString());\r\n        if (i \u003d\u003d max) {\r\n            return sb.append(\u0027}\u0027).toString();\r\n        }\r\n        sb.append(\", \");\r\n    }\r\n}",
    "nodes": 12,
    "edges": 14,
    "cc": 4,
    "flowSummary": [
      "B0 : If(i1 !\u003d $i4) → B1 | else → B2",
      "B3 : If($r5 !\u003d r0) → B4 | else → B5",
      "B6 : If($r6 !\u003d r0) → B7 | else → B8",
      "B9 : If(i2 !\u003d i1) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  OrderedProperties\n  $i0 \u003d r0.size()\n  i1 \u003d $i0 - 1\n  $i4 \u003d (int) -1\n  if (i1 !\u003d $i4) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r12 \u003d StringBuilder\n  new StringBuilder()\n  $r2 \u003d r0.entrySet()\n  $r3 \u003d $r2.iterator()\n  $r12.append(123)\n  i2 \u003d 0\n}",
      "B3 {\n  $r4 \u003d $r3.next()\n  $r7 \u003d Map$Entry) $r4\n  $r5 \u003d $r7.getKey()\n  $r6 \u003d $r7.getValue()\n  if ($r5 !\u003d r0) goto B4 else B5\n}",
      "B4 {\n  $r10 \u003d \"(this Map)\"\n  goto B6\n}",
      "B5 {\n  $r10 \u003d $r5.toString()\n}",
      "B6 {\n  $r12.append($r10)\n  $r12.append(61)\n  if ($r6 !\u003d r0) goto B7 else B8\n}",
      "B7 {\n  $r11 \u003d \"(this Map)\"\n  goto B9\n}",
      "B8 {\n  $r11 \u003d $r6.toString()\n}",
      "B9 {\n  $r12.append($r11)\n  if (i2 !\u003d i1) goto B10 else B11\n}",
      "B10 {\n  $r8 \u003d $r12.append(125)\n  $r9 \u003d $r8.toString()\n  return\n}",
      "B11 {\n  $r12.append(\", \")\n  i2 \u003d i2 + 1\n  goto B3\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e [EXIT]",
      "B11 --\u003e B3"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "OrderedProperties#size(...0)",
        "body": "(source not found)"
      },
      {
        "name": "OrderedProperties#entrySet(...0)",
        "body": "{\r\n    return orderedKeys.stream().map(k -\u003e new SimpleEntry\u003c\u003e(k, get(k))).collect(Collectors.toCollection(LinkedHashSet::new));\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.queue.CircularFifoQueue",
    "methodName": "add",
    "signature": "boolean add(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 7,
    "edges": 9,
    "cc": 4,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($i3 \u003c $i2) → B3 | else → B4",
      "B4 : If($i5 !\u003d $i4) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CircularFifoQueue\n  Object\n  Objects.requireNonNull(r0, \"element\")\n  $z0 \u003d r1.isAtFullCapacity()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  r1.remove()\n}",
      "B2 {\n  $r2 \u003d Object[] elements\u003e\n  $i0 \u003d CircularFifoQueue: int end\u003e\n  $i1 \u003d $i0 + 1\n  CircularFifoQueue: int end\u003e \u003d $i1\n  $r2[$i0] \u003d r0\n  $i3 \u003d CircularFifoQueue: int end\u003e\n  $i2 \u003d CircularFifoQueue: int maxElements\u003e\n  if ($i3 \u003c $i2) goto B3 else B4\n}",
      "B3 {\n  CircularFifoQueue: int end\u003e \u003d 0\n}",
      "B4 {\n  $i5 \u003d CircularFifoQueue: int end\u003e\n  $i4 \u003d CircularFifoQueue: int start\u003e\n  if ($i5 !\u003d $i4) goto B5 else B6\n}",
      "B5 {\n  CircularFifoQueue: boolean full\u003e \u003d 1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.queue.CircularFifoQueue",
    "methodName": "decrement",
    "signature": "int decrement(int)",
    "visibility": "private",
    "body": "{\r\n    index--;\r\n    if (index \u003c 0) {\r\n        index \u003d maxElements - 1;\r\n    }\r\n    return index;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i2 \u003e\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CircularFifoQueue\n  i1 :\u003d @parameter0: int\n  $i4 \u003d (int) -1\n  i2 \u003d i1 + $i4\n  if (i2 \u003e\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d CircularFifoQueue: int maxElements\u003e\n  i2 \u003d $i0 - 1\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.queue.CircularFifoQueue",
    "methodName": "element",
    "signature": "java.lang.Object element()",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty()) {\r\n        throw new NoSuchElementException(\"queue is empty\");\r\n    }\r\n    return peek();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CircularFifoQueue\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d NoSuchElementException\n  new NoSuchElementException(\"queue is empty\")\n  throw $r2\n}",
      "B2 {\n  $r1 \u003d r0.peek()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CircularFifoQueue#isEmpty(...0)",
        "body": "{\r\n    return size() \u003d\u003d 0;\r\n}"
      },
      {
        "name": "CircularFifoQueue#peek(...0)",
        "body": "{\r\n    if (isEmpty()) {\r\n        return null;\r\n    }\r\n    return elements[start];\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.queue.CircularFifoQueue",
    "methodName": "get",
    "signature": "java.lang.Object get(int)",
    "visibility": "public",
    "body": "{\r\n    final int sz \u003d size();\r\n    if (index \u003c 0 || index \u003e\u003d sz) {\r\n        throw new NoSuchElementException(String.format(\"The specified index %1$d is outside the available range [0, %2$d)\", Integer.valueOf(index), Integer.valueOf(sz)));\r\n    }\r\n    final int idx \u003d (start + index) % maxElements;\r\n    return elements[idx];\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i1 \u003c 0) → B1 | else → B2",
      "B1 : If(i1 \u003c $i0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CircularFifoQueue\n  i1 :\u003d @parameter0: int\n  $i0 \u003d r0.size()\n  if (i1 \u003c 0) goto B1 else B2\n}",
      "B1 {\n  if (i1 \u003c $i0) goto B2 else B3\n}",
      "B2 {\n  $r1 \u003d NoSuchElementException\n  $r2 \u003d Object)[2]\n  $r3 \u003d Integer.valueOf(i1)\n  $r2[0] \u003d $r3\n  $r4 \u003d Integer.valueOf($i0)\n  $r2[1] \u003d $r4\n  $r5 \u003d String.format(\"The specified index %1$d is outside the available range 0, %2$d)\", $r2)\n  new NoSuchElementException($r5)\n  throw $r1\n}",
      "B3 {\n  $i2 \u003d CircularFifoQueue: int start\u003e\n  $i4 \u003d $i2 + i1\n  $i3 \u003d CircularFifoQueue: int maxElements\u003e\n  i5 \u003d $i4 % $i3\n  $r6 \u003d Object[] elements\u003e\n  $r7 \u003d $r6[i5]\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CircularFifoQueue#size(...0)",
        "body": "{\r\n    int size \u003d 0;\r\n    if (end \u003c start) {\r\n        size \u003d maxElements - start + end;\r\n    } else if (end \u003d\u003d start) {\r\n        size \u003d full ? maxElements : 0;\r\n    } else {\r\n        size \u003d end - start;\r\n    }\r\n    return size;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.queue.CircularFifoQueue",
    "methodName": "increment",
    "signature": "int increment(int)",
    "visibility": "private",
    "body": "{\r\n    index++;\r\n    if (index \u003e\u003d maxElements) {\r\n        index \u003d 0;\r\n    }\r\n    return index;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If(i2 \u003c $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CircularFifoQueue\n  i1 :\u003d @parameter0: int\n  i2 \u003d i1 + 1\n  $i0 \u003d CircularFifoQueue: int maxElements\u003e\n  if (i2 \u003c $i0) goto B1 else B2\n}",
      "B1 {\n  i2 \u003d 0\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.queue.CircularFifoQueue",
    "methodName": "isAtFullCapacity",
    "signature": "boolean isAtFullCapacity()",
    "visibility": "public",
    "body": "{\r\n    return size() \u003d\u003d maxElements;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d $i1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CircularFifoQueue\n  $i0 \u003d r0.size()\n  $i1 \u003d CircularFifoQueue: int maxElements\u003e\n  if ($i0 !\u003d $i1) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CircularFifoQueue#size(...0)",
        "body": "{\r\n    int size \u003d 0;\r\n    if (end \u003c start) {\r\n        size \u003d maxElements - start + end;\r\n    } else if (end \u003d\u003d start) {\r\n        size \u003d full ? maxElements : 0;\r\n    } else {\r\n        size \u003d end - start;\r\n    }\r\n    return size;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.queue.CircularFifoQueue",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty()",
    "visibility": "public",
    "body": "{\r\n    return size() \u003d\u003d 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CircularFifoQueue\n  $i0 \u003d r0.size()\n  if ($i0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CircularFifoQueue#size(...0)",
        "body": "{\r\n    int size \u003d 0;\r\n    if (end \u003c start) {\r\n        size \u003d maxElements - start + end;\r\n    } else if (end \u003d\u003d start) {\r\n        size \u003d full ? maxElements : 0;\r\n    } else {\r\n        size \u003d end - start;\r\n    }\r\n    return size;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.queue.CircularFifoQueue",
    "methodName": "peek",
    "signature": "java.lang.Object peek()",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty()) {\r\n        return null;\r\n    }\r\n    return elements[start];\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CircularFifoQueue\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d Object[] elements\u003e\n  $i0 \u003d CircularFifoQueue: int start\u003e\n  $r2 \u003d $r1[$i0]\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CircularFifoQueue#isEmpty(...0)",
        "body": "{\r\n    return size() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.queue.CircularFifoQueue",
    "methodName": "poll",
    "signature": "java.lang.Object poll()",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty()) {\r\n        return null;\r\n    }\r\n    return remove();\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CircularFifoQueue\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.remove()\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CircularFifoQueue#isEmpty(...0)",
        "body": "{\r\n    return size() \u003d\u003d 0;\r\n}"
      },
      {
        "name": "CircularFifoQueue#remove(...0)",
        "body": "{\r\n    if (isEmpty()) {\r\n        throw new NoSuchElementException(\"queue is empty\");\r\n    }\r\n    final E element \u003d elements[start];\r\n    if (null !\u003d element) {\r\n        elements[start++] \u003d null;\r\n        if (start \u003e\u003d maxElements) {\r\n            start \u003d 0;\r\n        }\r\n        full \u003d false;\r\n    }\r\n    return element;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.queue.CircularFifoQueue",
    "methodName": "readObject",
    "signature": "void readObject(java.io.ObjectInputStream)",
    "visibility": "private",
    "body": "{\r\n    in.defaultReadObject();\r\n    elements \u003d (E[]) new Object[maxElements];\r\n    final int size \u003d in.readInt();\r\n    for (int i \u003d 0; i \u003c size; i++) {\r\n        elements[i] \u003d (E) in.readObject();\r\n    }\r\n    start \u003d 0;\r\n    full \u003d size \u003d\u003d maxElements;\r\n    if (full) {\r\n        end \u003d 0;\r\n    } else {\r\n        end \u003d size;\r\n    }\r\n}",
    "nodes": 10,
    "edges": 12,
    "cc": 4,
    "flowSummary": [
      "B1 : If(i3 \u003e\u003d $i1) → B2 | else → B3",
      "B3 : If($i1 !\u003d $i2) → B4 | else → B5",
      "B6 : If($z0 \u003d\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  CircularFifoQueue\n  ObjectInputStream\n  r0.defaultReadObject()\n  $i0 \u003d CircularFifoQueue: int maxElements\u003e\n  $r2 \u003d Object)[$i0]\n  Object[] elements\u003e \u003d $r2\n  $i1 \u003d r0.readInt()\n  i3 \u003d 0\n}",
      "B1 {\n  if (i3 \u003e\u003d $i1) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d Object[] elements\u003e\n  $r4 \u003d r0.readObject()\n  $r3[i3] \u003d $r4\n  i3 \u003d i3 + 1\n  goto B1\n}",
      "B3 {\n  CircularFifoQueue: int start\u003e \u003d 0\n  $i2 \u003d CircularFifoQueue: int maxElements\u003e\n  if ($i1 !\u003d $i2) goto B4 else B5\n}",
      "B4 {\n  $z1 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z1 \u003d 0\n}",
      "B6 {\n  CircularFifoQueue: boolean full\u003e \u003d $z1\n  $z0 \u003d CircularFifoQueue: boolean full\u003e\n  if ($z0 \u003d\u003d 0) goto B7 else B8\n}",
      "B7 {\n  CircularFifoQueue: int end\u003e \u003d 0\n  goto B9\n}",
      "B8 {\n  CircularFifoQueue: int end\u003e \u003d $i1\n}",
      "B9 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B9",
      "B9 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.queue.CircularFifoQueue",
    "methodName": "remove",
    "signature": "java.lang.Object remove()",
    "visibility": "public",
    "body": "{\r\n    if (isEmpty()) {\r\n        throw new NoSuchElementException(\"queue is empty\");\r\n    }\r\n    final E element \u003d elements[start];\r\n    if (null !\u003d element) {\r\n        elements[start++] \u003d null;\r\n        if (start \u003e\u003d maxElements) {\r\n            start \u003d 0;\r\n        }\r\n        full \u003d false;\r\n    }\r\n    return element;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If(null \u003d\u003d r2) → B3 | else → B6",
      "B3 : If($i4 \u003c $i3) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  CircularFifoQueue\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r4 \u003d NoSuchElementException\n  new NoSuchElementException(\"queue is empty\")\n  throw $r4\n}",
      "B2 {\n  $r1 \u003d Object[] elements\u003e\n  $i0 \u003d CircularFifoQueue: int start\u003e\n  r2 \u003d $r1[$i0]\n  if (null \u003d\u003d r2) goto B3 else B6\n}",
      "B3 {\n  $r3 \u003d Object[] elements\u003e\n  $i1 \u003d CircularFifoQueue: int start\u003e\n  $i2 \u003d $i1 + 1\n  CircularFifoQueue: int start\u003e \u003d $i2\n  $r3[$i1] \u003d null\n  $i4 \u003d CircularFifoQueue: int start\u003e\n  $i3 \u003d CircularFifoQueue: int maxElements\u003e\n  if ($i4 \u003c $i3) goto B4 else B5\n}",
      "B4 {\n  CircularFifoQueue: int start\u003e \u003d 0\n}",
      "B5 {\n  CircularFifoQueue: boolean full\u003e \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B6",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CircularFifoQueue#isEmpty(...0)",
        "body": "{\r\n    return size() \u003d\u003d 0;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.queue.CircularFifoQueue",
    "methodName": "size",
    "signature": "int size()",
    "visibility": "public",
    "body": "{\r\n    int size \u003d 0;\r\n    if (end \u003c start) {\r\n        size \u003d maxElements - start + end;\r\n    } else if (end \u003d\u003d start) {\r\n        size \u003d full ? maxElements : 0;\r\n    } else {\r\n        size \u003d end - start;\r\n    }\r\n    return size;\r\n}",
    "nodes": 9,
    "edges": 11,
    "cc": 4,
    "flowSummary": [
      "B0 : If($i1 \u003e\u003d $i0) → B1 | else → B2",
      "B2 : If($i3 !\u003d $i2) → B3 | else → B7",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  CircularFifoQueue\n  $i1 \u003d CircularFifoQueue: int end\u003e\n  $i0 \u003d CircularFifoQueue: int start\u003e\n  if ($i1 \u003e\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $i7 \u003d CircularFifoQueue: int maxElements\u003e\n  $i6 \u003d CircularFifoQueue: int start\u003e\n  $i9 \u003d $i7 - $i6\n  $i8 \u003d CircularFifoQueue: int end\u003e\n  i10 \u003d $i9 + $i8\n  goto B8\n}",
      "B2 {\n  $i3 \u003d CircularFifoQueue: int end\u003e\n  $i2 \u003d CircularFifoQueue: int start\u003e\n  if ($i3 !\u003d $i2) goto B3 else B7\n}",
      "B3 {\n  $z0 \u003d CircularFifoQueue: boolean full\u003e\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $i11 \u003d CircularFifoQueue: int maxElements\u003e\n  goto B6\n}",
      "B5 {\n  $i11 \u003d 0\n}",
      "B6 {\n  i10 \u003d $i11\n  goto B8\n}",
      "B7 {\n  $i5 \u003d CircularFifoQueue: int end\u003e\n  $i4 \u003d CircularFifoQueue: int start\u003e\n  i10 \u003d $i5 - $i4\n}",
      "B8 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B8",
      "B2 --\u003e B3",
      "B2 --\u003e B7",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B8 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.queue.CircularFifoQueue",
    "methodName": "writeObject",
    "signature": "void writeObject(java.io.ObjectOutputStream)",
    "visibility": "private",
    "body": "{\r\n    out.defaultWriteObject();\r\n    out.writeInt(size());\r\n    for (final E e : this) {\r\n        out.writeObject(e);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CircularFifoQueue\n  ObjectOutputStream\n  r0.defaultWriteObject()\n  $i0 \u003d r1.size()\n  r0.writeInt($i0)\n  $r2 \u003d r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r0.writeObject($r3)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CircularFifoQueue#size(...0)",
        "body": "{\r\n    int size \u003d 0;\r\n    if (end \u003c start) {\r\n        size \u003d maxElements - start + end;\r\n    } else if (end \u003d\u003d start) {\r\n        size \u003d full ? maxElements : 0;\r\n    } else {\r\n        size \u003d end - start;\r\n    }\r\n    return size;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.queue.SynchronizedQueue",
    "methodName": "element",
    "signature": "java.lang.Object element()",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return decorated().element();\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedQueue\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $r3 \u003d $r2.element()\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedQueue#decorated(...0)",
        "body": "{\r\n    return (Queue\u003cE\u003e) super.decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.queue.SynchronizedQueue",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    synchronized (lock) {\r\n        return decorated().equals(object);\r\n    }\r\n}",
    "nodes": 10,
    "edges": 14,
    "cc": 6,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SynchronizedQueue\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d Object lock\u003e\n  entermonitor $r2\n  $r3 \u003d r1.decorated()\n  $z0 \u003d $r3.equals(r0)\n  exitmonitor $r2\n  return\n}",
      "B3 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r2\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedQueue#decorated(...0)",
        "body": "{\r\n    return (Queue\u003cE\u003e) super.decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.queue.SynchronizedQueue",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return decorated().hashCode();\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedQueue\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $i0 \u003d $r2.hashCode()\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r3 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r3\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedQueue#decorated(...0)",
        "body": "{\r\n    return (Queue\u003cE\u003e) super.decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.queue.SynchronizedQueue",
    "methodName": "offer",
    "signature": "boolean offer(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedQueue\n  Object\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $z0 \u003d $r2.offer(r3)\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.queue.SynchronizedQueue",
    "methodName": "peek",
    "signature": "java.lang.Object peek()",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return decorated().peek();\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedQueue\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $r3 \u003d $r2.peek()\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedQueue#decorated(...0)",
        "body": "{\r\n    return (Queue\u003cE\u003e) super.decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.queue.SynchronizedQueue",
    "methodName": "poll",
    "signature": "java.lang.Object poll()",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return decorated().poll();\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedQueue\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $r3 \u003d $r2.poll()\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedQueue#decorated(...0)",
        "body": "{\r\n    return (Queue\u003cE\u003e) super.decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.queue.SynchronizedQueue",
    "methodName": "remove",
    "signature": "java.lang.Object remove()",
    "visibility": "public",
    "body": "{\r\n    synchronized (lock) {\r\n        return decorated().remove();\r\n    }\r\n}",
    "nodes": 8,
    "edges": 12,
    "cc": 6,
    "flowSummary": [],
    "blockList": [
      "B0 {\n  SynchronizedQueue\n  $r1 \u003d Object lock\u003e\n  entermonitor $r1\n  $r2 \u003d r0.decorated()\n  $r3 \u003d $r2.remove()\n  exitmonitor $r1\n  return\n}",
      "B1 {\n  $r4 :\u003d @caughtexception\n  exitmonitor $r1\n  throw $r4\n}"
    ],
    "blockEdges": [
      "B0 --\u003e [EXIT]",
      "B1 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SynchronizedQueue#decorated(...0)",
        "body": "{\r\n    return (Queue\u003cE\u003e) super.decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.queue.TransformedQueue",
    "methodName": "transformedQueue",
    "signature": "org.apache.commons.collections4.queue.TransformedQueue transformedQueue(java.util.Queue,org.apache.commons.collections4.Transformer)",
    "visibility": "public",
    "body": "{\r\n    // throws IAE if queue or transformer is null\r\n    final TransformedQueue\u003cE\u003e decorated \u003d new TransformedQueue\u003c\u003e(queue, transformer);\r\n    if (!queue.isEmpty()) {\r\n        // queue is type \u003cE\u003e\r\n        @SuppressWarnings(\"unchecked\")\r\n        final E[] // NOPMD - false positive for generics\r\n        values \u003d (E[]) queue.toArray();\r\n        queue.clear();\r\n        for (final E value : values) {\r\n            decorated.decorated().add(transformer.apply(value));\r\n        }\r\n    }\r\n    return decorated;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B4",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Queue\n  Transformer\n  $r0 \u003d TransformedQueue\n  new TransformedQueue(r1, r2)\n  $z0 \u003d r1.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $r3 \u003d r1.toArray()\n  r1.clear()\n  i0 \u003d lengthof $r3\n  i1 \u003d 0\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B4\n}",
      "B3 {\n  r4 \u003d $r3[i1]\n  $r5 \u003d $r0.decorated()\n  $r6 \u003d r2.apply(r4)\n  $r5.add($r6)\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.queue.UnmodifiableQueue",
    "methodName": "unmodifiableQueue",
    "signature": "java.util.Queue unmodifiableQueue(java.util.Queue)",
    "visibility": "public",
    "body": "{\r\n    if (queue instanceof Unmodifiable) {\r\n        // safe to upcast\r\n        @SuppressWarnings(\"unchecked\")\r\n        final Queue\u003cE\u003e tmpQueue \u003d (Queue\u003cE\u003e) queue;\r\n        return tmpQueue;\r\n    }\r\n    return new UnmodifiableQueue\u003c\u003e(queue);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Queue\n  $z0 \u003d Unmodifiable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableQueue\n  new UnmodifiableQueue(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.sequence.EditScript",
    "methodName": "visit",
    "signature": "void visit(org.apache.commons.collections4.sequence.CommandVisitor)",
    "visibility": "public",
    "body": "{\r\n    for (final EditCommand\u003cT\u003e command : commands) {\r\n        command.accept(visitor);\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  EditScript\n  CommandVisitor\n  $r1 \u003d List commands\u003e\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r4 \u003d EditCommand) $r3\n  r4.accept(r5)\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.sequence.ReplacementsFinder",
    "methodName": "visitKeepCommand",
    "signature": "void visitKeepCommand(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B3",
      "B1 : If($z1 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ReplacementsFinder\n  Object\n  $r1 \u003d List pendingDeletions\u003e\n  $z0 \u003d $r1.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B3\n}",
      "B1 {\n  $r7 \u003d List pendingInsertions\u003e\n  $z1 \u003d $r7.isEmpty()\n  if ($z1 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $i1 \u003d ReplacementsFinder: int skipped\u003e\n  $i2 \u003d $i1 + 1\n  ReplacementsFinder: int skipped\u003e \u003d $i2\n  goto B4\n}",
      "B3 {\n  $r4 \u003d ReplacementsHandler handler\u003e\n  $i0 \u003d ReplacementsFinder: int skipped\u003e\n  $r3 \u003d List pendingDeletions\u003e\n  $r2 \u003d List pendingInsertions\u003e\n  $r4.handleReplacement($i0, $r3, $r2)\n  $r5 \u003d List pendingDeletions\u003e\n  $r5.clear()\n  $r6 \u003d List pendingInsertions\u003e\n  $r6.clear()\n  ReplacementsFinder: int skipped\u003e \u003d 1\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B3",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.sequence.SequencesComparator",
    "methodName": "buildScript",
    "signature": "void buildScript(int,int,int,int,org.apache.commons.collections4.sequence.EditScript)",
    "visibility": "private",
    "body": "{\r\n    final Snake middle \u003d getMiddleSnake(start1, end1, start2, end2);\r\n    if (middle \u003d\u003d null || middle.getStart() \u003d\u003d end1 \u0026\u0026 middle.getDiag() \u003d\u003d end1 - end2 || middle.getEnd() \u003d\u003d start1 \u0026\u0026 middle.getDiag() \u003d\u003d start1 - start2) {\r\n        int i \u003d start1;\r\n        int j \u003d start2;\r\n        while (i \u003c end1 || j \u003c end2) {\r\n            if (i \u003c end1 \u0026\u0026 j \u003c end2 \u0026\u0026 equator.equate(sequence1.get(i), sequence2.get(j))) {\r\n                script.append(new KeepCommand\u003c\u003e(sequence1.get(i)));\r\n                ++i;\r\n                ++j;\r\n            } else if (end1 - start1 \u003e end2 - start2) {\r\n                script.append(new DeleteCommand\u003c\u003e(sequence1.get(i)));\r\n                ++i;\r\n            } else {\r\n                script.append(new InsertCommand\u003c\u003e(sequence2.get(j)));\r\n                ++j;\r\n            }\r\n        }\r\n    } else {\r\n        buildScript(start1, middle.getStart(), start2, middle.getStart() - middle.getDiag(), script);\r\n        for (int i \u003d middle.getStart(); i \u003c middle.getEnd(); ++i) {\r\n            script.append(new KeepCommand\u003c\u003e(sequence1.get(i)));\r\n        }\r\n        buildScript(middle.getEnd(), end1, middle.getEnd() - middle.getDiag(), end2, script);\r\n    }\r\n}",
    "nodes": 21,
    "edges": 32,
    "cc": 13,
    "flowSummary": [
      "B0 : If($r1 \u003d\u003d null) → B1 | else → B5",
      "B1 : If($i4 !\u003d i1) → B2 | else → B3",
      "B2 : If($i16 \u003d\u003d $i17) → B3 | else → B5",
      "B3 : If($i5 !\u003d i0) → B4 | else → B16",
      "B4 : If($i14 !\u003d $i15) → B5 | else → B16",
      "B6 : If(i18 \u003c i1) → B7 | else → B8",
      "B7 : If(i19 \u003e\u003d i3) → B8 | else → B15",
      "B8 : If(i18 \u003e\u003d i1) → B9 | else → B12",
      "B9 : If(i19 \u003e\u003d i3) → B10 | else → B12",
      "B10 : If($z0 \u003d\u003d 0) → B11 | else → B12",
      "B12 : If($i20 \u003c\u003d $i21) → B13 | else → B14",
      "B17 : If(i22 \u003e\u003d $i23) → B18 | else → B19"
    ],
    "blockList": [
      "B0 {\n  SequencesComparator\n  i0 :\u003d @parameter0: int\n  i1 :\u003d @parameter1: int\n  i2 :\u003d @parameter2: int\n  i3 :\u003d @parameter3: int\n  EditScript\n  $r1 \u003d r0.getMiddleSnake(i0, i1, i2, i3)\n  if ($r1 \u003d\u003d null) goto B1 else B5\n}",
      "B1 {\n  $i4 \u003d $r1.getStart()\n  if ($i4 !\u003d i1) goto B2 else B3\n}",
      "B2 {\n  $i16 \u003d $r1.getDiag()\n  $i17 \u003d i1 - i3\n  if ($i16 \u003d\u003d $i17) goto B3 else B5\n}",
      "B3 {\n  $i5 \u003d $r1.getEnd()\n  if ($i5 !\u003d i0) goto B4 else B16\n}",
      "B4 {\n  $i14 \u003d $r1.getDiag()\n  $i15 \u003d i0 - i2\n  if ($i14 !\u003d $i15) goto B5 else B16\n}",
      "B5 {\n  i18 \u003d i0\n  i19 \u003d i2\n}",
      "B6 {\n  if (i18 \u003c i1) goto B7 else B8\n}",
      "B7 {\n  if (i19 \u003e\u003d i3) goto B8 else B15\n}",
      "B8 {\n  if (i18 \u003e\u003d i1) goto B9 else B12\n}",
      "B9 {\n  if (i19 \u003e\u003d i3) goto B10 else B12\n}",
      "B10 {\n  $r10 \u003d Equator equator\u003e\n  $r9 \u003d List sequence1\u003e\n  $r11 \u003d $r9.get(i18)\n  $r12 \u003d List sequence2\u003e\n  $r13 \u003d $r12.get(i19)\n  $z0 \u003d $r10.equate($r11, $r13)\n  if ($z0 \u003d\u003d 0) goto B11 else B12\n}",
      "B11 {\n  $r14 \u003d KeepCommand\n  $r15 \u003d List sequence1\u003e\n  $r16 \u003d $r15.get(i18)\n  new KeepCommand($r16)\n  r2.append($r14)\n  i18 \u003d i18 + 1\n  i19 \u003d i19 + 1\n  goto B6\n}",
      "B12 {\n  $i20 \u003d i1 - i0\n  $i21 \u003d i3 - i2\n  if ($i20 \u003c\u003d $i21) goto B13 else B14\n}",
      "B13 {\n  $r6 \u003d DeleteCommand\n  $r7 \u003d List sequence1\u003e\n  $r8 \u003d $r7.get(i18)\n  new DeleteCommand($r8)\n  r2.append($r6)\n  i18 \u003d i18 + 1\n  goto B6\n}",
      "B14 {\n  $r3 \u003d InsertCommand\n  $r4 \u003d List sequence2\u003e\n  $r5 \u003d $r4.get(i19)\n  new InsertCommand($r5)\n  r2.append($r3)\n  i19 \u003d i19 + 1\n  goto B6\n}",
      "B15 {\n  goto B20\n}",
      "B16 {\n  $i6 \u003d $r1.getStart()\n  $i7 \u003d $r1.getStart()\n  $i8 \u003d $r1.getDiag()\n  $i9 \u003d $i7 - $i8\n  r0.buildScript(i0, $i6, i2, $i9, r2)\n  i22 \u003d $r1.getStart()\n}",
      "B17 {\n  $i23 \u003d $r1.getEnd()\n  if (i22 \u003e\u003d $i23) goto B18 else B19\n}",
      "B18 {\n  $r17 \u003d KeepCommand\n  $r18 \u003d List sequence1\u003e\n  $r19 \u003d $r18.get(i22)\n  new KeepCommand($r19)\n  r2.append($r17)\n  i22 \u003d i22 + 1\n  goto B17\n}",
      "B19 {\n  $i10 \u003d $r1.getEnd()\n  $i11 \u003d $r1.getEnd()\n  $i12 \u003d $r1.getDiag()\n  $i13 \u003d $i11 - $i12\n  r0.buildScript($i10, i1, $i13, i3, r2)\n}",
      "B20 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B16",
      "B4 --\u003e B5",
      "B4 --\u003e B16",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B8",
      "B7 --\u003e B15",
      "B8 --\u003e B9",
      "B8 --\u003e B12",
      "B9 --\u003e B10",
      "B9 --\u003e B12",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B6",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B6",
      "B14 --\u003e B6",
      "B15 --\u003e B20",
      "B16 --\u003e B17",
      "B17 --\u003e B18",
      "B17 --\u003e B19",
      "B18 --\u003e B17",
      "B19 --\u003e B20",
      "B20 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SequencesComparator#getMiddleSnake(...4)",
        "body": "{\r\n    // Myers Algorithm\r\n    // Initializations\r\n    final int m \u003d end1 - start1;\r\n    final int n \u003d end2 - start2;\r\n    if (m \u003d\u003d 0 || n \u003d\u003d 0) {\r\n        return null;\r\n    }\r\n    final int delta \u003d m - n;\r\n    final int sum \u003d n + m;\r\n    final int offset \u003d (sum % 2 \u003d\u003d 0 ? sum : sum + 1) / 2;\r\n    vDown[1 + offset] \u003d start1;\r\n    vUp[1 + offset] \u003d end1 + 1;\r\n    for (int d \u003d 0; d \u003c\u003d offset; ++d) {\r\n        // Down\r\n        for (int k \u003d -d; k \u003c\u003d d; k +\u003d 2) {\r\n            // First step\r\n            final int i \u003d k + offset;\r\n            if (k \u003d\u003d -d || k !\u003d d \u0026\u0026 vDown[i - 1] \u003c vDown[i + 1]) {\r\n                vDown[i] \u003d vDown[i + 1];\r\n            } else {\r\n                vDown[i] \u003d vDown[i - 1] + 1;\r\n            }\r\n            int x \u003d vDown[i];\r\n            int y \u003d x - start1 + start2 - k;\r\n            while (x \u003c end1 \u0026\u0026 y \u003c end2 \u0026\u0026 equator.equate(sequence1.get(x), sequence2.get(y))) {\r\n                vDown[i] \u003d ++x;\r\n                ++y;\r\n            }\r\n            // Second step\r\n            if (delta % 2 !\u003d 0 \u0026\u0026 delta - d \u003c\u003d k \u0026\u0026 k \u003c\u003d delta + d \u0026\u0026 vUp[i - delta] \u003c\u003d vDown[i]) {\r\n                // NOPMD\r\n                return buildSnake(vUp[i - delta], k + start1 - start2, end1, end2);\r\n            }\r\n        }\r\n        // Up\r\n        for (int k \u003d delta - d; k \u003c\u003d delta + d; k +\u003d 2) {\r\n            // First step\r\n            final int i \u003d k + offset - delta;\r\n            if (k \u003d\u003d delta - d || k !\u003d delta + d \u0026\u0026 vUp[i + 1] \u003c\u003d vUp[i - 1]) {\r\n                vUp[i] \u003d vUp[i + 1] - 1;\r\n            } else {\r\n                vUp[i] \u003d vUp[i - 1];\r\n            }\r\n            int x \u003d vUp[i] - 1;\r\n            int y \u003d x - start1 + start2 - k;\r\n            while (x \u003e\u003d start1 \u0026\u0026 y \u003e\u003d start2 \u0026\u0026 equator.equate(sequence1.get(x), sequence2.get(y))) {\r\n                vUp[i] \u003d x--;\r\n                y--;\r\n            }\r\n            // Second step\r\n            if (delta % 2 \u003d\u003d 0 \u0026\u0026 -d \u003c\u003d k \u0026\u0026 k \u003c\u003d d \u0026\u0026 vUp[i] \u003c\u003d vDown[i + delta]) {\r\n                // NOPMD\r\n                return buildSnake(vUp[i], k + start1 - start2, end1, end2);\r\n            }\r\n        }\r\n    }\r\n    // this should not happen\r\n    throw new IllegalStateException(\"Internal Error\");\r\n}"
      },
      {
        "name": "SequencesComparator#buildScript(...5)",
        "body": "{\r\n    final Snake middle \u003d getMiddleSnake(start1, end1, start2, end2);\r\n    if (middle \u003d\u003d null || middle.getStart() \u003d\u003d end1 \u0026\u0026 middle.getDiag() \u003d\u003d end1 - end2 || middle.getEnd() \u003d\u003d start1 \u0026\u0026 middle.getDiag() \u003d\u003d start1 - start2) {\r\n        int i \u003d start1;\r\n        int j \u003d start2;\r\n        while (i \u003c end1 || j \u003c end2) {\r\n            if (i \u003c end1 \u0026\u0026 j \u003c end2 \u0026\u0026 equator.equate(sequence1.get(i), sequence2.get(j))) {\r\n                script.append(new KeepCommand\u003c\u003e(sequence1.get(i)));\r\n                ++i;\r\n                ++j;\r\n            } else if (end1 - start1 \u003e end2 - start2) {\r\n                script.append(new DeleteCommand\u003c\u003e(sequence1.get(i)));\r\n                ++i;\r\n            } else {\r\n                script.append(new InsertCommand\u003c\u003e(sequence2.get(j)));\r\n                ++j;\r\n            }\r\n        }\r\n    } else {\r\n        buildScript(start1, middle.getStart(), start2, middle.getStart() - middle.getDiag(), script);\r\n        for (int i \u003d middle.getStart(); i \u003c middle.getEnd(); ++i) {\r\n            script.append(new KeepCommand\u003c\u003e(sequence1.get(i)));\r\n        }\r\n        buildScript(middle.getEnd(), end1, middle.getEnd() - middle.getDiag(), end2, script);\r\n    }\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.sequence.SequencesComparator",
    "methodName": "buildSnake",
    "signature": "org.apache.commons.collections4.sequence.SequencesComparator$Snake buildSnake(int,int,int,int)",
    "visibility": "private",
    "body": "{\r\n    int end \u003d start;\r\n    while (end - diag \u003c end2 \u0026\u0026 end \u003c end1 \u0026\u0026 equator.equate(sequence1.get(end), sequence2.get(end - diag))) {\r\n        ++end;\r\n    }\r\n    return new Snake(start, end, diag);\r\n}",
    "nodes": 6,
    "edges": 8,
    "cc": 4,
    "flowSummary": [
      "B1 : If($i3 \u003e\u003d i2) → B2 | else → B5",
      "B2 : If(i6 \u003e\u003d i4) → B3 | else → B5",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  SequencesComparator\n  i0 :\u003d @parameter0: int\n  i1 :\u003d @parameter1: int\n  i4 :\u003d @parameter2: int\n  i2 :\u003d @parameter3: int\n  i6 \u003d i0\n}",
      "B1 {\n  $i3 \u003d i6 - i1\n  if ($i3 \u003e\u003d i2) goto B2 else B5\n}",
      "B2 {\n  if (i6 \u003e\u003d i4) goto B3 else B5\n}",
      "B3 {\n  $r2 \u003d Equator equator\u003e\n  $r1 \u003d List sequence1\u003e\n  $r3 \u003d $r1.get(i6)\n  $r4 \u003d List sequence2\u003e\n  $i5 \u003d i6 - i1\n  $r5 \u003d $r4.get($i5)\n  $z0 \u003d $r2.equate($r3, $r5)\n  if ($z0 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  i6 \u003d i6 + 1\n  goto B1\n}",
      "B5 {\n  $r6 \u003d SequencesComparator$Snake\n  new SequencesComparator$Snake(i0, i6, i1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.sequence.SequencesComparator",
    "methodName": "getMiddleSnake",
    "signature": "org.apache.commons.collections4.sequence.SequencesComparator$Snake getMiddleSnake(int,int,int,int)",
    "visibility": "private",
    "body": "{\r\n    // Myers Algorithm\r\n    // Initializations\r\n    final int m \u003d end1 - start1;\r\n    final int n \u003d end2 - start2;\r\n    if (m \u003d\u003d 0 || n \u003d\u003d 0) {\r\n        return null;\r\n    }\r\n    final int delta \u003d m - n;\r\n    final int sum \u003d n + m;\r\n    final int offset \u003d (sum % 2 \u003d\u003d 0 ? sum : sum + 1) / 2;\r\n    vDown[1 + offset] \u003d start1;\r\n    vUp[1 + offset] \u003d end1 + 1;\r\n    for (int d \u003d 0; d \u003c\u003d offset; ++d) {\r\n        // Down\r\n        for (int k \u003d -d; k \u003c\u003d d; k +\u003d 2) {\r\n            // First step\r\n            final int i \u003d k + offset;\r\n            if (k \u003d\u003d -d || k !\u003d d \u0026\u0026 vDown[i - 1] \u003c vDown[i + 1]) {\r\n                vDown[i] \u003d vDown[i + 1];\r\n            } else {\r\n                vDown[i] \u003d vDown[i - 1] + 1;\r\n            }\r\n            int x \u003d vDown[i];\r\n            int y \u003d x - start1 + start2 - k;\r\n            while (x \u003c end1 \u0026\u0026 y \u003c end2 \u0026\u0026 equator.equate(sequence1.get(x), sequence2.get(y))) {\r\n                vDown[i] \u003d ++x;\r\n                ++y;\r\n            }\r\n            // Second step\r\n            if (delta % 2 !\u003d 0 \u0026\u0026 delta - d \u003c\u003d k \u0026\u0026 k \u003c\u003d delta + d \u0026\u0026 vUp[i - delta] \u003c\u003d vDown[i]) {\r\n                // NOPMD\r\n                return buildSnake(vUp[i - delta], k + start1 - start2, end1, end2);\r\n            }\r\n        }\r\n        // Up\r\n        for (int k \u003d delta - d; k \u003c\u003d delta + d; k +\u003d 2) {\r\n            // First step\r\n            final int i \u003d k + offset - delta;\r\n            if (k \u003d\u003d delta - d || k !\u003d delta + d \u0026\u0026 vUp[i + 1] \u003c\u003d vUp[i - 1]) {\r\n                vUp[i] \u003d vUp[i + 1] - 1;\r\n            } else {\r\n                vUp[i] \u003d vUp[i - 1];\r\n            }\r\n            int x \u003d vUp[i] - 1;\r\n            int y \u003d x - start1 + start2 - k;\r\n            while (x \u003e\u003d start1 \u0026\u0026 y \u003e\u003d start2 \u0026\u0026 equator.equate(sequence1.get(x), sequence2.get(y))) {\r\n                vUp[i] \u003d x--;\r\n                y--;\r\n            }\r\n            // Second step\r\n            if (delta % 2 \u003d\u003d 0 \u0026\u0026 -d \u003c\u003d k \u0026\u0026 k \u003c\u003d d \u0026\u0026 vUp[i] \u003c\u003d vDown[i + delta]) {\r\n                // NOPMD\r\n                return buildSnake(vUp[i], k + start1 - start2, end1, end2);\r\n            }\r\n        }\r\n    }\r\n    // this should not happen\r\n    throw new IllegalStateException(\"Internal Error\");\r\n}",
    "nodes": 46,
    "edges": 68,
    "cc": 24,
    "flowSummary": [
      "B0 : If(i2 \u003d\u003d 0) → B1 | else → B2",
      "B1 : If(i5 !\u003d 0) → B2 | else → B3",
      "B3 : If($i8 !\u003d 0) → B4 | else → B5",
      "B7 : If(i54 \u003e $i52) → B8 | else → B45",
      "B9 : If(i55 \u003e i54) → B10 | else → B26",
      "B10 : If(i55 \u003d\u003d $i33) → B11 | else → B13",
      "B11 : If(i55 \u003d\u003d i54) → B12 | else → B14",
      "B12 : If($i51 \u003e\u003d $i50) → B13 | else → B14",
      "B16 : If(i58 \u003e\u003d i0) → B17 | else → B20",
      "B17 : If(i61 \u003e\u003d i3) → B18 | else → B20",
      "B18 : If($z1 \u003d\u003d 0) → B19 | else → B20",
      "B20 : If($i62 \u003d\u003d 0) → B21 | else → B25",
      "B21 : If($i36 \u003e i55) → B22 | else → B25",
      "B22 : If(i55 \u003e $i37) → B23 | else → B25",
      "B23 : If($i40 \u003e $i39) → B24 | else → B25",
      "B27 : If(i63 \u003e $i12) → B28 | else → B44",
      "B28 : If(i63 \u003d\u003d $i14) → B29 | else → B31",
      "B29 : If(i63 \u003d\u003d $i26) → B30 | else → B32",
      "B30 : If($i32 \u003e $i31) → B31 | else → B32",
      "B34 : If(i67 \u003c i1) → B35 | else → B38",
      "B35 : If(i70 \u003c i4) → B36 | else → B38",
      "B36 : If($z0 \u003d\u003d 0) → B37 | else → B38",
      "B38 : If($i71 !\u003d 0) → B39 | else → B43",
      "B39 : If($i18 \u003e i63) → B40 | else → B43",
      "B40 : If(i63 \u003e i54) → B41 | else → B43",
      "B41 : If($i21 \u003e $i20) → B42 | else → B43"
    ],
    "blockList": [
      "B0 {\n  SequencesComparator\n  i1 :\u003d @parameter0: int\n  i0 :\u003d @parameter1: int\n  i4 :\u003d @parameter2: int\n  i3 :\u003d @parameter3: int\n  i2 \u003d i0 - i1\n  i5 \u003d i3 - i4\n  if (i2 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  if (i5 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  i6 \u003d i2 - i5\n  i7 \u003d i5 + i2\n  $i8 \u003d i7 % 2\n  if ($i8 !\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $i53 \u003d i7\n  goto B6\n}",
      "B5 {\n  $i53 \u003d i7 + 1\n}",
      "B6 {\n  $i52 \u003d $i53 / 2\n  $r1 \u003d SequencesComparator: int[] vDown\u003e\n  $i9 \u003d 1 + $i52\n  $r1[$i9] \u003d i1\n  $r2 \u003d SequencesComparator: int[] vUp\u003e\n  $i11 \u003d 1 + $i52\n  $i10 \u003d i0 + 1\n  $r2[$i11] \u003d $i10\n  i54 \u003d 0\n}",
      "B7 {\n  if (i54 \u003e $i52) goto B8 else B45\n}",
      "B8 {\n  i55 \u003d neg i54\n}",
      "B9 {\n  if (i55 \u003e i54) goto B10 else B26\n}",
      "B10 {\n  i56 \u003d i55 + $i52\n  $i33 \u003d neg i54\n  if (i55 \u003d\u003d $i33) goto B11 else B13\n}",
      "B11 {\n  if (i55 \u003d\u003d i54) goto B12 else B14\n}",
      "B12 {\n  $r34 \u003d SequencesComparator: int[] vDown\u003e\n  $i48 \u003d i56 - 1\n  $i51 \u003d $r34[$i48]\n  $r35 \u003d SequencesComparator: int[] vDown\u003e\n  $i49 \u003d i56 + 1\n  $i50 \u003d $r35[$i49]\n  if ($i51 \u003e\u003d $i50) goto B13 else B14\n}",
      "B13 {\n  $r21 \u003d SequencesComparator: int[] vDown\u003e\n  $r20 \u003d SequencesComparator: int[] vDown\u003e\n  $i34 \u003d i56 + 1\n  $i35 \u003d $r20[$i34]\n  $r21[i56] \u003d $i35\n  goto B15\n}",
      "B14 {\n  $r33 \u003d SequencesComparator: int[] vDown\u003e\n  $r32 \u003d SequencesComparator: int[] vDown\u003e\n  $i45 \u003d i56 - 1\n  $i46 \u003d $r32[$i45]\n  $i47 \u003d $i46 + 1\n  $r33[i56] \u003d $i47\n}",
      "B15 {\n  $r36 \u003d SequencesComparator: int[] vDown\u003e\n  $i57 \u003d $r36[i56]\n  i58 \u003d $i57\n  $i59 \u003d $i57 - i1\n  $i60 \u003d $i59 + i4\n  i61 \u003d $i60 - i55\n}",
      "B16 {\n  if (i58 \u003e\u003d i0) goto B17 else B20\n}",
      "B17 {\n  if (i61 \u003e\u003d i3) goto B18 else B20\n}",
      "B18 {\n  $r27 \u003d Equator equator\u003e\n  $r26 \u003d List sequence1\u003e\n  $r28 \u003d $r26.get(i58)\n  $r29 \u003d List sequence2\u003e\n  $r30 \u003d $r29.get(i61)\n  $z1 \u003d $r27.equate($r28, $r30)\n  if ($z1 \u003d\u003d 0) goto B19 else B20\n}",
      "B19 {\n  $r31 \u003d SequencesComparator: int[] vDown\u003e\n  i58 \u003d i58 + 1\n  $r31[i56] \u003d i58\n  i61 \u003d i61 + 1\n  goto B16\n}",
      "B20 {\n  $i62 \u003d i6 % 2\n  if ($i62 \u003d\u003d 0) goto B21 else B25\n}",
      "B21 {\n  $i36 \u003d i6 - i54\n  if ($i36 \u003e i55) goto B22 else B25\n}",
      "B22 {\n  $i37 \u003d i6 + i54\n  if (i55 \u003e $i37) goto B23 else B25\n}",
      "B23 {\n  $r22 \u003d SequencesComparator: int[] vUp\u003e\n  $i38 \u003d i56 - i6\n  $i40 \u003d $r22[$i38]\n  $r23 \u003d SequencesComparator: int[] vDown\u003e\n  $i39 \u003d $r23[i56]\n  if ($i40 \u003e $i39) goto B24 else B25\n}",
      "B24 {\n  $r24 \u003d SequencesComparator: int[] vUp\u003e\n  $i41 \u003d i56 - i6\n  $i44 \u003d $r24[$i41]\n  $i42 \u003d i55 + i1\n  $i43 \u003d $i42 - i4\n  $r25 \u003d r0.buildSnake($i44, $i43, i0, i3)\n  return\n}",
      "B25 {\n  i55 \u003d i55 + 2\n  goto B9\n}",
      "B26 {\n  i63 \u003d i6 - i54\n}",
      "B27 {\n  $i12 \u003d i6 + i54\n  if (i63 \u003e $i12) goto B28 else B44\n}",
      "B28 {\n  $i13 \u003d i63 + $i52\n  i64 \u003d $i13 - i6\n  $i14 \u003d i6 - i54\n  if (i63 \u003d\u003d $i14) goto B29 else B31\n}",
      "B29 {\n  $i26 \u003d i6 + i54\n  if (i63 \u003d\u003d $i26) goto B30 else B32\n}",
      "B30 {\n  $r18 \u003d SequencesComparator: int[] vUp\u003e\n  $i29 \u003d i64 + 1\n  $i32 \u003d $r18[$i29]\n  $r19 \u003d SequencesComparator: int[] vUp\u003e\n  $i30 \u003d i64 - 1\n  $i31 \u003d $r19[$i30]\n  if ($i32 \u003e $i31) goto B31 else B32\n}",
      "B31 {\n  $r5 \u003d SequencesComparator: int[] vUp\u003e\n  $r4 \u003d SequencesComparator: int[] vUp\u003e\n  $i15 \u003d i64 + 1\n  $i16 \u003d $r4[$i15]\n  $i17 \u003d $i16 - 1\n  $r5[i64] \u003d $i17\n  goto B33\n}",
      "B32 {\n  $r17 \u003d SequencesComparator: int[] vUp\u003e\n  $r16 \u003d SequencesComparator: int[] vUp\u003e\n  $i27 \u003d i64 - 1\n  $i28 \u003d $r16[$i27]\n  $r17[i64] \u003d $i28\n}",
      "B33 {\n  $r37 \u003d SequencesComparator: int[] vUp\u003e\n  $i65 \u003d $r37[i64]\n  $i66 \u003d $i65 - 1\n  i67 \u003d $i66\n  $i68 \u003d $i66 - i1\n  $i69 \u003d $i68 + i4\n  i70 \u003d $i69 - i63\n}",
      "B34 {\n  if (i67 \u003c i1) goto B35 else B38\n}",
      "B35 {\n  if (i70 \u003c i4) goto B36 else B38\n}",
      "B36 {\n  $r11 \u003d Equator equator\u003e\n  $r10 \u003d List sequence1\u003e\n  $r12 \u003d $r10.get(i67)\n  $r13 \u003d List sequence2\u003e\n  $r14 \u003d $r13.get(i70)\n  $z0 \u003d $r11.equate($r12, $r14)\n  if ($z0 \u003d\u003d 0) goto B37 else B38\n}",
      "B37 {\n  $r15 \u003d SequencesComparator: int[] vUp\u003e\n  $i25 \u003d i67\n  $i73 \u003d (int) -1\n  i67 \u003d i67 + $i73\n  $r15[i64] \u003d $i25\n  $i75 \u003d (int) -1\n  i70 \u003d i70 + $i75\n  goto B34\n}",
      "B38 {\n  $i71 \u003d i6 % 2\n  if ($i71 !\u003d 0) goto B39 else B43\n}",
      "B39 {\n  $i18 \u003d neg i54\n  if ($i18 \u003e i63) goto B40 else B43\n}",
      "B40 {\n  if (i63 \u003e i54) goto B41 else B43\n}",
      "B41 {\n  $r6 \u003d SequencesComparator: int[] vUp\u003e\n  $i21 \u003d $r6[i64]\n  $r7 \u003d SequencesComparator: int[] vDown\u003e\n  $i19 \u003d i64 + i6\n  $i20 \u003d $r7[$i19]\n  if ($i21 \u003e $i20) goto B42 else B43\n}",
      "B42 {\n  $r8 \u003d SequencesComparator: int[] vUp\u003e\n  $i24 \u003d $r8[i64]\n  $i22 \u003d i63 + i1\n  $i23 \u003d $i22 - i4\n  $r9 \u003d r0.buildSnake($i24, $i23, i0, i3)\n  return\n}",
      "B43 {\n  i63 \u003d i63 + 2\n  goto B27\n}",
      "B44 {\n  i54 \u003d i54 + 1\n  goto B7\n}",
      "B45 {\n  $r38 \u003d IllegalStateException\n  new IllegalStateException(\"Internal Error\")\n  throw $r38\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B7 --\u003e B8",
      "B7 --\u003e B45",
      "B8 --\u003e B9",
      "B9 --\u003e B10",
      "B9 --\u003e B26",
      "B10 --\u003e B11",
      "B10 --\u003e B13",
      "B11 --\u003e B12",
      "B11 --\u003e B14",
      "B12 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B15",
      "B14 --\u003e B15",
      "B15 --\u003e B16",
      "B16 --\u003e B17",
      "B16 --\u003e B20",
      "B17 --\u003e B18",
      "B17 --\u003e B20",
      "B18 --\u003e B19",
      "B18 --\u003e B20",
      "B19 --\u003e B16",
      "B20 --\u003e B21",
      "B20 --\u003e B25",
      "B21 --\u003e B22",
      "B21 --\u003e B25",
      "B22 --\u003e B23",
      "B22 --\u003e B25",
      "B23 --\u003e B24",
      "B23 --\u003e B25",
      "B24 --\u003e [EXIT]",
      "B25 --\u003e B9",
      "B26 --\u003e B27",
      "B27 --\u003e B28",
      "B27 --\u003e B44",
      "B28 --\u003e B29",
      "B28 --\u003e B31",
      "B29 --\u003e B30",
      "B29 --\u003e B32",
      "B30 --\u003e B31",
      "B30 --\u003e B32",
      "B31 --\u003e B33",
      "B32 --\u003e B33",
      "B33 --\u003e B34",
      "B34 --\u003e B35",
      "B34 --\u003e B38",
      "B35 --\u003e B36",
      "B35 --\u003e B38",
      "B36 --\u003e B37",
      "B36 --\u003e B38",
      "B37 --\u003e B34",
      "B38 --\u003e B39",
      "B38 --\u003e B43",
      "B39 --\u003e B40",
      "B39 --\u003e B43",
      "B40 --\u003e B41",
      "B40 --\u003e B43",
      "B41 --\u003e B42",
      "B41 --\u003e B43",
      "B42 --\u003e [EXIT]",
      "B43 --\u003e B27",
      "B44 --\u003e B7",
      "B45 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "SequencesComparator#buildSnake(...4)",
        "body": "{\r\n    int end \u003d start;\r\n    while (end - diag \u003c end2 \u0026\u0026 end \u003c end1 \u0026\u0026 equator.equate(sequence1.get(end), sequence2.get(end - diag))) {\r\n        ++end;\r\n    }\r\n    return new Snake(start, end, diag);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.set.CompositeSet",
    "methodName": "add",
    "signature": "boolean add(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CompositeSet\n  Object\n  $r1 \u003d CompositeSet$SetMutator mutator\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d UnsupportedOperationException\n  new UnsupportedOperationException(\"add() is not supported on CompositeSet without a SetMutator strategy\")\n  throw $r5\n}",
      "B2 {\n  $r4 \u003d CompositeSet$SetMutator mutator\u003e\n  $r3 \u003d List all\u003e\n  $z0 \u003d $r4.add(r0, $r3, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.set.CompositeSet",
    "methodName": "addAll",
    "signature": "boolean addAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    if (mutator \u003d\u003d null) {\r\n        throw new UnsupportedOperationException(\"addAll() is not supported on CompositeSet without a SetMutator strategy\");\r\n    }\r\n    return mutator.addAll(this, all, coll);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($r1 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CompositeSet\n  Collection\n  $r1 \u003d CompositeSet$SetMutator mutator\u003e\n  if ($r1 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d UnsupportedOperationException\n  new UnsupportedOperationException(\"addAll() is not supported on CompositeSet without a SetMutator strategy\")\n  throw $r5\n}",
      "B2 {\n  $r4 \u003d CompositeSet$SetMutator mutator\u003e\n  $r3 \u003d List all\u003e\n  $z0 \u003d $r4.addAll(r0, $r3, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.set.CompositeSet",
    "methodName": "addComposited",
    "signature": "void addComposited(java.util.Set)",
    "visibility": "public",
    "body": "{\r\n    if (set !\u003d null) {\r\n        for (final Set\u003cE\u003e existingSet : getSets()) {\r\n            final Collection\u003cE\u003e intersects \u003d CollectionUtils.intersection(existingSet, set);\r\n            if (!intersects.isEmpty()) {\r\n                if (mutator \u003d\u003d null) {\r\n                    throw new UnsupportedOperationException(\"Collision adding composited set with no SetMutator set\");\r\n                }\r\n                getMutator().resolveCollision(this, existingSet, set, intersects);\r\n                if (!CollectionUtils.intersection(existingSet, set).isEmpty()) {\r\n                    throw new IllegalArgumentException(\"Attempt to add illegal entry unresolved by SetMutator.resolveCollision()\");\r\n                }\r\n            }\r\n        }\r\n        all.add(set);\r\n    }\r\n}",
    "nodes": 11,
    "edges": 13,
    "cc": 4,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B10",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B9",
      "B3 : If($z1 !\u003d 0) → B4 | else → B8",
      "B4 : If($r8 !\u003d null) → B5 | else → B6",
      "B6 : If($z2 !\u003d 0) → B7 | else → B8"
    ],
    "blockList": [
      "B0 {\n  CompositeSet\n  Set\n  if (r0 \u003d\u003d null) goto B1 else B10\n}",
      "B1 {\n  $r2 \u003d r1.getSets()\n  $r3 \u003d $r2.iterator()\n}",
      "B2 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B3 else B9\n}",
      "B3 {\n  $r5 \u003d $r3.next()\n  r6 \u003d Set) $r5\n  $r7 \u003d CollectionUtils.intersection(r6, r0)\n  $z1 \u003d $r7.isEmpty()\n  if ($z1 !\u003d 0) goto B4 else B8\n}",
      "B4 {\n  $r8 \u003d CompositeSet$SetMutator mutator\u003e\n  if ($r8 !\u003d null) goto B5 else B6\n}",
      "B5 {\n  $r12 \u003d UnsupportedOperationException\n  new UnsupportedOperationException(\"Collision adding composited set with no SetMutator set\")\n  throw $r12\n}",
      "B6 {\n  $r9 \u003d r1.getMutator()\n  $r9.resolveCollision(r1, r6, r0, $r7)\n  $r10 \u003d CollectionUtils.intersection(r6, r0)\n  $z2 \u003d $r10.isEmpty()\n  if ($z2 !\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $r11 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Attempt to add illegal entry unresolved by SetMutator.resolveCollision()\")\n  throw $r11\n}",
      "B8 {\n  goto B2\n}",
      "B9 {\n  $r4 \u003d List all\u003e\n  $r4.add(r0)\n}",
      "B10 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B10",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B9",
      "B3 --\u003e B4",
      "B3 --\u003e B8",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e [EXIT]",
      "B8 --\u003e B2",
      "B9 --\u003e B10",
      "B10 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CompositeSet#getMutator(...0)",
        "body": "{\r\n    return mutator;\r\n}"
      },
      {
        "name": "CompositeSet#getSets(...0)",
        "body": "{\r\n    return UnmodifiableList.unmodifiableList(all);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.set.CompositeSet",
    "methodName": "addComposited",
    "signature": "void addComposited(java.util.Set[])",
    "visibility": "public",
    "body": "{\r\n    if (set !\u003d null) {\r\n        for (final Set\u003cE\u003e existingSet : getSets()) {\r\n            final Collection\u003cE\u003e intersects \u003d CollectionUtils.intersection(existingSet, set);\r\n            if (!intersects.isEmpty()) {\r\n                if (mutator \u003d\u003d null) {\r\n                    throw new UnsupportedOperationException(\"Collision adding composited set with no SetMutator set\");\r\n                }\r\n                getMutator().resolveCollision(this, existingSet, set, intersects);\r\n                if (!CollectionUtils.intersection(existingSet, set).isEmpty()) {\r\n                    throw new IllegalArgumentException(\"Attempt to add illegal entry unresolved by SetMutator.resolveCollision()\");\r\n                }\r\n            }\r\n        }\r\n        all.add(set);\r\n    }\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B4",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CompositeSet\n  Set[]\n  if (r0 \u003d\u003d null) goto B1 else B4\n}",
      "B1 {\n  i0 \u003d lengthof r0\n  i1 \u003d 0\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B4\n}",
      "B3 {\n  r1 \u003d r0[i1]\n  r2.addComposited(r1)\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CompositeSet#getMutator(...0)",
        "body": "{\r\n    return mutator;\r\n}"
      },
      {
        "name": "CompositeSet#getSets(...0)",
        "body": "{\r\n    return UnmodifiableList.unmodifiableList(all);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.set.CompositeSet",
    "methodName": "clear",
    "signature": "void clear()",
    "visibility": "public",
    "body": "{\r\n    for (final Collection\u003cE\u003e coll : all) {\r\n        coll.clear();\r\n    }\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CompositeSet\n  $r1 \u003d List all\u003e\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r4 \u003d Collection) $r3\n  r4.clear()\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.set.CompositeSet",
    "methodName": "contains",
    "signature": "boolean contains(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    for (final Set\u003cE\u003e item : all) {\r\n        if (item.contains(obj)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CompositeSet\n  Object\n  $r1 \u003d List all\u003e\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r4 \u003d Set) $r3\n  $z1 \u003d r4.contains(r5)\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.set.CompositeSet",
    "methodName": "containsAll",
    "signature": "boolean containsAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    if (coll \u003d\u003d null) {\r\n        return false;\r\n    }\r\n    for (final Object item : coll) {\r\n        if (!contains(item)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 8,
    "edges": 8,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B7",
      "B4 : If($z1 !\u003d 0) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  CompositeSet\n  Collection\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d r0.iterator()\n}",
      "B3 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B4 else B7\n}",
      "B4 {\n  $r2 \u003d $r1.next()\n  $z1 \u003d r3.contains($r2)\n  if ($z1 !\u003d 0) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CompositeSet#contains(...1)",
        "body": "{\r\n    for (final Set\u003cE\u003e item : all) {\r\n        if (item.contains(obj)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.set.CompositeSet",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (obj instanceof Set) {\r\n        final Set\u003c?\u003e set \u003d (Set\u003c?\u003e) obj;\r\n        return set.size() \u003d\u003d this.size() \u0026\u0026 set.containsAll(this);\r\n    }\r\n    return false;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B6",
      "B1 : If($i0 !\u003d $i1) → B2 | else → B4",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CompositeSet\n  Object\n  $z0 \u003d Set\n  if ($z0 \u003d\u003d 0) goto B1 else B6\n}",
      "B1 {\n  r1 \u003d Set) r0\n  $i0 \u003d r1.size()\n  $i1 \u003d r2.size()\n  if ($i0 !\u003d $i1) goto B2 else B4\n}",
      "B2 {\n  $z1 \u003d r1.containsAll(r2)\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $z2 \u003d 1\n  goto B5\n}",
      "B4 {\n  $z2 \u003d 0\n}",
      "B5 {\n  return\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B6",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CompositeSet#size(...0)",
        "body": "{\r\n    int size \u003d 0;\r\n    for (final Set\u003cE\u003e item : all) {\r\n        size +\u003d item.size();\r\n    }\r\n    return size;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.set.CompositeSet",
    "methodName": "hashCode",
    "signature": "int hashCode()",
    "visibility": "public",
    "body": "{\r\n    int code \u003d 0;\r\n    for (final E e : this) {\r\n        code +\u003d e \u003d\u003d null ? 0 : e.hashCode();\r\n    }\r\n    return code;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B6",
      "B2 : If($r2 !\u003d null) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CompositeSet\n  i1 \u003d 0\n  $r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B6\n}",
      "B2 {\n  $r2 \u003d $r1.next()\n  $i0 \u003d i1\n  if ($r2 !\u003d null) goto B3 else B4\n}",
      "B3 {\n  $i2 \u003d 0\n  goto B5\n}",
      "B4 {\n  $i2 \u003d $r2.hashCode()\n}",
      "B5 {\n  i1 \u003d $i0 + $i2\n  goto B1\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B6",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e B1",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.set.CompositeSet",
    "methodName": "isEmpty",
    "signature": "boolean isEmpty()",
    "visibility": "public",
    "body": "{\r\n    for (final Set\u003cE\u003e item : all) {\r\n        if (!item.isEmpty()) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($z1 !\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CompositeSet\n  $r1 \u003d List all\u003e\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r4 \u003d Set) $r3\n  $z1 \u003d r4.isEmpty()\n  if ($z1 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.set.CompositeSet",
    "methodName": "iterator",
    "signature": "java.util.Iterator iterator()",
    "visibility": "public",
    "body": "{\r\n    if (all.isEmpty()) {\r\n        return EmptyIterator.\u003cE\u003eemptyIterator();\r\n    }\r\n    final IteratorChain\u003cE\u003e chain \u003d new IteratorChain\u003c\u003e();\r\n    all.forEach(item -\u003e chain.addIterator(item.iterator()));\r\n    return chain;\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  CompositeSet\n  $r1 \u003d List all\u003e\n  $z0 \u003d $r1.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r5 \u003d EmptyIterator.emptyIterator()\n  return\n}",
      "B2 {\n  $r2 \u003d IteratorChain\n  new IteratorChain()\n  $r3 \u003d List all\u003e\n  $r4 \u003d CompositeSet$lambda_iterator_0__101.bootstrap$($r2)\n  $r3.forEach($r4)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.set.CompositeSet",
    "methodName": "remove",
    "signature": "boolean remove(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    for (final Set\u003cE\u003e set : getSets()) {\r\n        if (set.contains(obj)) {\r\n            return set.remove(obj);\r\n        }\r\n    }\r\n    return false;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  CompositeSet\n  Object\n  $r1 \u003d r0.getSets()\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r4 \u003d Set) $r3\n  $z1 \u003d r4.contains(r5)\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $z2 \u003d r4.remove(r5)\n  return\n}",
      "B4 {\n  goto B1\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e [EXIT]",
      "B4 --\u003e B1",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CompositeSet#getSets(...0)",
        "body": "{\r\n    return UnmodifiableList.unmodifiableList(all);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.set.CompositeSet",
    "methodName": "removeAll",
    "signature": "boolean removeAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    if (CollectionUtils.isEmpty(coll)) {\r\n        return false;\r\n    }\r\n    boolean changed \u003d false;\r\n    for (final Collection\u003cE\u003e item : all) {\r\n        changed |\u003d item.removeAll(coll);\r\n    }\r\n    return changed;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B3 : If($z1 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  CompositeSet\n  Collection\n  $z0 \u003d CollectionUtils.isEmpty(r0)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  z3 \u003d 0\n  $r2 \u003d List all\u003e\n  $r3 \u003d $r2.iterator()\n}",
      "B3 {\n  $z1 \u003d $r3.hasNext()\n  if ($z1 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d $r3.next()\n  r5 \u003d Collection) $r4\n  $z2 \u003d r5.removeAll(r0)\n  z3 \u003d z3 | $z2\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.set.CompositeSet",
    "methodName": "removeIf",
    "signature": "boolean removeIf(java.util.function.Predicate)",
    "visibility": "public",
    "body": "{\r\n    if (Objects.isNull(filter)) {\r\n        return false;\r\n    }\r\n    boolean changed \u003d false;\r\n    for (final Collection\u003cE\u003e item : all) {\r\n        changed |\u003d item.removeIf(filter);\r\n    }\r\n    return changed;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B3 : If($z1 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  CompositeSet\n  Predicate\n  $z0 \u003d Objects.isNull(r0)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  z3 \u003d 0\n  $r2 \u003d List all\u003e\n  $r3 \u003d $r2.iterator()\n}",
      "B3 {\n  $z1 \u003d $r3.hasNext()\n  if ($z1 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d $r3.next()\n  r5 \u003d Collection) $r4\n  $z2 \u003d r5.removeIf(r0)\n  z3 \u003d z3 | $z2\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.set.CompositeSet",
    "methodName": "retainAll",
    "signature": "boolean retainAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    boolean changed \u003d false;\r\n    for (final Collection\u003cE\u003e item : all) {\r\n        changed |\u003d item.retainAll(coll);\r\n    }\r\n    return changed;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CompositeSet\n  Collection\n  z2 \u003d 0\n  $r1 \u003d List all\u003e\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r4 \u003d Collection) $r3\n  $z1 \u003d r4.retainAll(r5)\n  z2 \u003d z2 | $z1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.set.CompositeSet",
    "methodName": "size",
    "signature": "int size()",
    "visibility": "public",
    "body": "{\r\n    int size \u003d 0;\r\n    for (final Set\u003cE\u003e item : all) {\r\n        size +\u003d item.size();\r\n    }\r\n    return size;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CompositeSet\n  i1 \u003d 0\n  $r1 \u003d List all\u003e\n  $r2 \u003d $r1.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r4 \u003d Set) $r3\n  $i0 \u003d r4.size()\n  i1 \u003d i1 + $i0\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.set.CompositeSet",
    "methodName": "toArray",
    "signature": "java.lang.Object[] toArray()",
    "visibility": "public",
    "body": "{\r\n    final Object[] result \u003d new Object[size()];\r\n    int i \u003d 0;\r\n    for (final Iterator\u003cE\u003e it \u003d iterator(); it.hasNext(); i++) {\r\n        result[i] \u003d it.next();\r\n    }\r\n    return result;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  CompositeSet\n  $i0 \u003d r0.size()\n  r1 \u003d Object)[$i0]\n  i1 \u003d 0\n  $r2 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d $r2.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d $r2.next()\n  r1[i1] \u003d $r3\n  i1 \u003d i1 + 1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "CompositeSet#size(...0)",
        "body": "{\r\n    int size \u003d 0;\r\n    for (final Set\u003cE\u003e item : all) {\r\n        size +\u003d item.size();\r\n    }\r\n    return size;\r\n}"
      },
      {
        "name": "CompositeSet#iterator(...0)",
        "body": "{\r\n    if (all.isEmpty()) {\r\n        return EmptyIterator.\u003cE\u003eemptyIterator();\r\n    }\r\n    final IteratorChain\u003cE\u003e chain \u003d new IteratorChain\u003c\u003e();\r\n    all.forEach(item -\u003e chain.addIterator(item.iterator()));\r\n    return chain;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.set.CompositeSet",
    "methodName": "toArray",
    "signature": "java.lang.Object[] toArray(java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 12,
    "edges": 15,
    "cc": 5,
    "flowSummary": [
      "B0 : If($i1 \u003c $i0) → B1 | else → B2",
      "B4 : If($z1 \u003d\u003d 0) → B5 | else → B9",
      "B6 : If($z0 \u003d\u003d 0) → B7 | else → B8",
      "B9 : If($i2 \u003c\u003d $i0) → B10 | else → B11"
    ],
    "blockList": [
      "B0 {\n  CompositeSet\n  Object[]\n  $i0 \u003d r0.size()\n  $i1 \u003d lengthof r1\n  if ($i1 \u003c $i0) goto B1 else B2\n}",
      "B1 {\n  r11 \u003d r1\n  goto B3\n}",
      "B2 {\n  $r2 \u003d r1.getClass()\n  $r3 \u003d $r2.getComponentType()\n  $r4 \u003d Array.newInstance($r3, $i0)\n  r11 \u003d Object[]) $r4\n}",
      "B3 {\n  i4 \u003d 0\n  $r5 \u003d List all\u003e\n  $r6 \u003d $r5.iterator()\n}",
      "B4 {\n  $z1 \u003d $r6.hasNext()\n  if ($z1 \u003d\u003d 0) goto B5 else B9\n}",
      "B5 {\n  $r7 \u003d $r6.next()\n  r8 \u003d Collection) $r7\n  $r9 \u003d r8.iterator()\n}",
      "B6 {\n  $z0 \u003d $r9.hasNext()\n  if ($z0 \u003d\u003d 0) goto B7 else B8\n}",
      "B7 {\n  $r10 \u003d $r9.next()\n  $i3 \u003d i4\n  i4 \u003d i4 + 1\n  r11[$i3] \u003d $r10\n  goto B6\n}",
      "B8 {\n  goto B4\n}",
      "B9 {\n  $i2 \u003d lengthof r11\n  if ($i2 \u003c\u003d $i0) goto B10 else B11\n}",
      "B10 {\n  r11[$i0] \u003d null\n}",
      "B11 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B4 --\u003e B5",
      "B4 --\u003e B9",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B8",
      "B7 --\u003e B6",
      "B8 --\u003e B4",
      "B9 --\u003e B10",
      "B9 --\u003e B11",
      "B10 --\u003e B11",
      "B11 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.set.ListOrderedSet",
    "methodName": "listOrderedSet",
    "signature": "org.apache.commons.collections4.set.ListOrderedSet listOrderedSet(java.util.Set,java.util.List)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(set, \"set\");\r\n    Objects.requireNonNull(list, \"list\");\r\n    if (!set.isEmpty() || !list.isEmpty()) {\r\n        throw new IllegalArgumentException(\"Set and List must be empty\");\r\n    }\r\n    return new ListOrderedSet\u003c\u003e(set, list);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B1 : If($z1 !\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Set\n  List\n  Objects.requireNonNull(r0, \"set\")\n  Objects.requireNonNull(r1, \"list\")\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $z1 \u003d r1.isEmpty()\n  if ($z1 !\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Set and List must be empty\")\n  throw $r2\n}",
      "B3 {\n  $r3 \u003d ListOrderedSet\n  new ListOrderedSet(r0, r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.set.ListOrderedSet",
    "methodName": "add",
    "signature": "boolean add(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ListOrderedSet\n  Object\n  $r1 \u003d r0.decorated()\n  $z0 \u003d $r1.add(r2)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d List setOrder\u003e\n  $r3.add(r2)\n  return\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.set.ListOrderedSet",
    "methodName": "add",
    "signature": "void add(int,java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ListOrderedSet\n  i0 :\u003d @parameter0: int\n  Object\n  $z0 \u003d r0.contains(r1)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r0.decorated()\n  $r2.add(r1)\n  $r3 \u003d List setOrder\u003e\n  $r3.add(i0, r1)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.set.ListOrderedSet",
    "methodName": "addAll",
    "signature": "boolean addAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    boolean result \u003d false;\r\n    for (final E e : coll) {\r\n        result |\u003d add(e);\r\n    }\r\n    return result;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ListOrderedSet\n  Collection\n  z2 \u003d 0\n  $r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d $r1.next()\n  $z1 \u003d r3.add($r2)\n  z2 \u003d z2 | $z1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ListOrderedSet#add(...1)",
        "body": "{\r\n    if (decorated().add(object)) {\r\n        setOrder.add(object);\r\n        return true;\r\n    }\r\n    return false;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.set.ListOrderedSet",
    "methodName": "addAll",
    "signature": "boolean addAll(int,java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    boolean changed \u003d false;\r\n    // collect all elements to be added for performance reasons\r\n    final List\u003cE\u003e toAdd \u003d new ArrayList\u003c\u003e();\r\n    for (final E e : coll) {\r\n        if (contains(e)) {\r\n            continue;\r\n        }\r\n        decorated().add(e);\r\n        toAdd.add(e);\r\n        changed \u003d true;\r\n    }\r\n    if (changed) {\r\n        setOrder.addAll(index, toAdd);\r\n    }\r\n    return changed;\r\n}",
    "nodes": 8,
    "edges": 10,
    "cc": 4,
    "flowSummary": [
      "B1 : If($z2 \u003d\u003d 0) → B2 | else → B5",
      "B2 : If($z0 \u003d\u003d 0) → B3 | else → B4",
      "B5 : If(z3 \u003d\u003d 0) → B6 | else → B7"
    ],
    "blockList": [
      "B0 {\n  ListOrderedSet\n  i0 :\u003d @parameter0: int\n  Collection\n  z1 \u003d 0\n  z4 \u003d 0\n  z3 \u003d 0\n  $r0 \u003d ArrayList\n  new ArrayList()\n  $r2 \u003d r1.iterator()\n}",
      "B1 {\n  $z2 \u003d $r2.hasNext()\n  if ($z2 \u003d\u003d 0) goto B2 else B5\n}",
      "B2 {\n  $r5 \u003d $r2.next()\n  $z0 \u003d r3.contains($r5)\n  if ($z0 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  goto B1\n}",
      "B4 {\n  $r6 \u003d r3.decorated()\n  $r6.add($r5)\n  $r0.add($r5)\n  z1 \u003d 1\n  z4 \u003d 1\n  z3 \u003d 1\n  goto B1\n}",
      "B5 {\n  if (z3 \u003d\u003d 0) goto B6 else B7\n}",
      "B6 {\n  $r4 \u003d List setOrder\u003e\n  $r4.addAll(i0, $r0)\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B5",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B1",
      "B4 --\u003e B1",
      "B5 --\u003e B6",
      "B5 --\u003e B7",
      "B6 --\u003e B7",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ListOrderedSet#contains(...1)",
        "body": "(source not found)"
      },
      {
        "name": "ListOrderedSet#decorated(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.set.ListOrderedSet",
    "methodName": "remove",
    "signature": "boolean remove(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final boolean result \u003d decorated().remove(object);\r\n    if (result) {\r\n        setOrder.remove(object);\r\n    }\r\n    return result;\r\n}",
    "nodes": 3,
    "edges": 3,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  ListOrderedSet\n  Object\n  $r1 \u003d r0.decorated()\n  $z0 \u003d $r1.remove(r2)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r3 \u003d List setOrder\u003e\n  $r3.remove(r2)\n}",
      "B2 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ListOrderedSet#decorated(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.set.ListOrderedSet",
    "methodName": "removeAll",
    "signature": "boolean removeAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    boolean result \u003d false;\r\n    for (final Object name : coll) {\r\n        result |\u003d remove(name);\r\n    }\r\n    return result;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  ListOrderedSet\n  Collection\n  z2 \u003d 0\n  $r1 \u003d r0.iterator()\n}",
      "B1 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r2 \u003d $r1.next()\n  $z1 \u003d r3.remove($r2)\n  z2 \u003d z2 | $z1\n  goto B1\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ListOrderedSet#remove(...1)",
        "body": "{\r\n    final E obj \u003d setOrder.remove(index);\r\n    remove(obj);\r\n    return obj;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.set.ListOrderedSet",
    "methodName": "removeIf",
    "signature": "boolean removeIf(java.util.function.Predicate)",
    "visibility": "public",
    "body": "{\r\n    if (Objects.isNull(filter)) {\r\n        return false;\r\n    }\r\n    final boolean result \u003d decorated().removeIf(filter);\r\n    if (result) {\r\n        setOrder.removeIf(filter);\r\n    }\r\n    return result;\r\n}",
    "nodes": 5,
    "edges": 5,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ListOrderedSet\n  Predicate\n  $z0 \u003d Objects.isNull(r0)\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d r1.decorated()\n  $z1 \u003d $r2.removeIf(r0)\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r3 \u003d List setOrder\u003e\n  $r3.removeIf(r0)\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ListOrderedSet#decorated(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.set.ListOrderedSet",
    "methodName": "retainAll",
    "signature": "boolean retainAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    final boolean result \u003d decorated().retainAll(coll);\r\n    if (!result) {\r\n        return false;\r\n    }\r\n    if (decorated().isEmpty()) {\r\n        setOrder.clear();\r\n    } else {\r\n        setOrder.removeIf(e -\u003e !decorated().contains(e));\r\n    }\r\n    return result;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B2",
      "B2 : If($z1 \u003d\u003d 0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  ListOrderedSet\n  Collection\n  $r1 \u003d r0.decorated()\n  $z0 \u003d $r1.retainAll(r2)\n  if ($z0 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r3 \u003d r0.decorated()\n  $z1 \u003d $r3.isEmpty()\n  if ($z1 \u003d\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $r6 \u003d List setOrder\u003e\n  $r6.clear()\n  goto B5\n}",
      "B4 {\n  $r4 \u003d List setOrder\u003e\n  $r5 \u003d ListOrderedSet$lambda_retainAll_0__102.bootstrap$(r0)\n  $r4.removeIf($r5)\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "ListOrderedSet#decorated(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.set.MapBackedSet",
    "methodName": "add",
    "signature": "boolean add(java.lang.Object)",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003d\u003d $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MapBackedSet\n  Object\n  $r1 \u003d Map map\u003e\n  $i0 \u003d $r1.size()\n  $r4 \u003d Map map\u003e\n  $r3 \u003d Object dummyValue\u003e\n  $r4.put(r2, $r3)\n  $r5 \u003d Map map\u003e\n  $i1 \u003d $r5.size()\n  if ($i1 \u003d\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.set.MapBackedSet",
    "methodName": "addAll",
    "signature": "boolean addAll(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    final int size \u003d map.size();\r\n    for (final E e : coll) {\r\n        map.put(e, dummyValue);\r\n    }\r\n    return map.size() !\u003d size;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3",
      "B3 : If($i1 \u003d\u003d $i0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  MapBackedSet\n  Collection\n  $r1 \u003d Map map\u003e\n  $i0 \u003d $r1.size()\n  $r3 \u003d r2.iterator()\n}",
      "B1 {\n  $z0 \u003d $r3.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r5 \u003d $r3.next()\n  $r7 \u003d Map map\u003e\n  $r6 \u003d Object dummyValue\u003e\n  $r7.put($r5, $r6)\n  goto B1\n}",
      "B3 {\n  $r4 \u003d Map map\u003e\n  $i1 \u003d $r4.size()\n  if ($i1 \u003d\u003d $i0) goto B4 else B5\n}",
      "B4 {\n  $z1 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z1 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.set.MapBackedSet",
    "methodName": "remove",
    "signature": "boolean remove(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    final int size \u003d map.size();\r\n    map.remove(obj);\r\n    return map.size() !\u003d size;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 \u003d\u003d $i0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  MapBackedSet\n  Object\n  $r1 \u003d Map map\u003e\n  $i0 \u003d $r1.size()\n  $r3 \u003d Map map\u003e\n  $r3.remove(r2)\n  $r4 \u003d Map map\u003e\n  $i1 \u003d $r4.size()\n  if ($i1 \u003d\u003d $i0) goto B1 else B2\n}",
      "B1 {\n  $z0 \u003d 1\n  goto B3\n}",
      "B2 {\n  $z0 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.set.PredicatedSet",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return object \u003d\u003d this || decorated().equals(object);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d r1) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  PredicatedSet\n  Object\n  if (r0 \u003d\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1.decorated()\n  $z0 \u003d $r2.equals(r0)\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "PredicatedSet#decorated(...0)",
        "body": "{\r\n    return (Set\u003cE\u003e) super.decorated();\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.set.TransformedNavigableSet",
    "methodName": "transformedNavigableSet",
    "signature": "org.apache.commons.collections4.set.TransformedNavigableSet transformedNavigableSet(java.util.NavigableSet,org.apache.commons.collections4.Transformer)",
    "visibility": "public",
    "body": "{\r\n    final TransformedNavigableSet\u003cE\u003e decorated \u003d new TransformedNavigableSet\u003c\u003e(set, transformer);\r\n    if (!set.isEmpty()) {\r\n        // set is type E\r\n        @SuppressWarnings(\"unchecked\")\r\n        final E[] // NOPMD - false positive for generics\r\n        values \u003d (E[]) set.toArray();\r\n        set.clear();\r\n        for (final E value : values) {\r\n            decorated.decorated().add(transformer.apply(value));\r\n        }\r\n    }\r\n    return decorated;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B4",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  NavigableSet\n  Transformer\n  $r0 \u003d TransformedNavigableSet\n  new TransformedNavigableSet(r1, r2)\n  $z0 \u003d r1.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $r3 \u003d r1.toArray()\n  r1.clear()\n  i0 \u003d lengthof $r3\n  i1 \u003d 0\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B4\n}",
      "B3 {\n  r4 \u003d $r3[i1]\n  $r5 \u003d $r0.decorated()\n  $r6 \u003d r2.apply(r4)\n  $r5.add($r6)\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.set.TransformedSet",
    "methodName": "transformedSet",
    "signature": "java.util.Set transformedSet(java.util.Set,org.apache.commons.collections4.Transformer)",
    "visibility": "public",
    "body": "{\r\n    final TransformedSet\u003cE\u003e decorated \u003d new TransformedSet\u003c\u003e(set, transformer);\r\n    if (!set.isEmpty()) {\r\n        // set is type E\r\n        @SuppressWarnings(\"unchecked\")\r\n        final E[] // NOPMD - false positive for generics\r\n        values \u003d (E[]) set.toArray();\r\n        set.clear();\r\n        for (final E value : values) {\r\n            decorated.decorated().add(transformer.apply(value));\r\n        }\r\n    }\r\n    return decorated;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B4",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  Set\n  Transformer\n  $r0 \u003d TransformedSet\n  new TransformedSet(r1, r2)\n  $z0 \u003d r1.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $r3 \u003d r1.toArray()\n  r1.clear()\n  i0 \u003d lengthof $r3\n  i1 \u003d 0\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B4\n}",
      "B3 {\n  r4 \u003d $r3[i1]\n  $r5 \u003d $r0.decorated()\n  $r6 \u003d r2.apply(r4)\n  $r5.add($r6)\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.set.TransformedSet",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    return object \u003d\u003d this || decorated().equals(object);\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d r1) → B1 | else → B2",
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  TransformedSet\n  Object\n  if (r0 \u003d\u003d r1) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d r1.decorated()\n  $z0 \u003d $r2.equals(r0)\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $z1 \u003d 1\n  goto B4\n}",
      "B3 {\n  $z1 \u003d 0\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TransformedSet#decorated(...0)",
        "body": "(source not found)"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.set.TransformedSortedSet",
    "methodName": "transformedSortedSet",
    "signature": "org.apache.commons.collections4.set.TransformedSortedSet transformedSortedSet(java.util.SortedSet,org.apache.commons.collections4.Transformer)",
    "visibility": "public",
    "body": "{\r\n    final TransformedSortedSet\u003cE\u003e decorated \u003d new TransformedSortedSet\u003c\u003e(set, transformer);\r\n    if (!set.isEmpty()) {\r\n        // set is type E\r\n        @SuppressWarnings(\"unchecked\")\r\n        final E[] // NOPMD - false positive for generics\r\n        values \u003d (E[]) set.toArray();\r\n        set.clear();\r\n        for (final E value : values) {\r\n            decorated.decorated().add(transformer.apply(value));\r\n        }\r\n    }\r\n    return decorated;\r\n}",
    "nodes": 5,
    "edges": 6,
    "cc": 3,
    "flowSummary": [
      "B0 : If($z0 !\u003d 0) → B1 | else → B4",
      "B2 : If(i1 \u003e\u003d i0) → B3 | else → B4"
    ],
    "blockList": [
      "B0 {\n  SortedSet\n  Transformer\n  $r0 \u003d TransformedSortedSet\n  new TransformedSortedSet(r1, r2)\n  $z0 \u003d r1.isEmpty()\n  if ($z0 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $r3 \u003d r1.toArray()\n  r1.clear()\n  i0 \u003d lengthof $r3\n  i1 \u003d 0\n}",
      "B2 {\n  if (i1 \u003e\u003d i0) goto B3 else B4\n}",
      "B3 {\n  r4 \u003d $r3[i1]\n  $r5 \u003d $r0.decorated()\n  $r6 \u003d r2.apply(r4)\n  $r5.add($r6)\n  i1 \u003d i1 + 1\n  goto B2\n}",
      "B4 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B2",
      "B4 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.set.UnmodifiableNavigableSet",
    "methodName": "unmodifiableNavigableSet",
    "signature": "java.util.NavigableSet unmodifiableNavigableSet(java.util.NavigableSet)",
    "visibility": "public",
    "body": "{\r\n    if (set instanceof Unmodifiable) {\r\n        return set;\r\n    }\r\n    return new UnmodifiableNavigableSet\u003c\u003e(set);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  NavigableSet\n  $z0 \u003d Unmodifiable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableNavigableSet\n  new UnmodifiableNavigableSet(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.set.UnmodifiableSet",
    "methodName": "unmodifiableSet",
    "signature": "java.util.Set unmodifiableSet(java.util.Set)",
    "visibility": "public",
    "body": "{\r\n    if (set instanceof Unmodifiable) {\r\n        // safe to upcast\r\n        @SuppressWarnings(\"unchecked\")\r\n        final Set\u003cE\u003e tmpSet \u003d (Set\u003cE\u003e) set;\r\n        return tmpSet;\r\n    }\r\n    return new UnmodifiableSet\u003c\u003e(set);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Set\n  $z0 \u003d Unmodifiable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableSet\n  new UnmodifiableSet(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.set.UnmodifiableSortedSet",
    "methodName": "unmodifiableSortedSet",
    "signature": "java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)",
    "visibility": "public",
    "body": "{\r\n    if (set instanceof Unmodifiable) {\r\n        return set;\r\n    }\r\n    return new UnmodifiableSortedSet\u003c\u003e(set);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  SortedSet\n  $z0 \u003d Unmodifiable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableSortedSet\n  new UnmodifiableSortedSet(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.SetUtils",
    "methodName": "emptyIfNull",
    "signature": "java.util.Set emptyIfNull(java.util.Set)",
    "visibility": "public",
    "body": "{\r\n    return set \u003d\u003d null ? Collections.\u003cT\u003eemptySet() : set;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Set\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  $r1 \u003d Collections.emptySet()\n  goto B3\n}",
      "B2 {\n  $r1 \u003d r0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.SetUtils",
    "methodName": "hashCodeForSet",
    "signature": "int hashCodeForSet(java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    if (set \u003d\u003d null) {\r\n        return 0;\r\n    }\r\n    int hashCode \u003d 0;\r\n    for (final T obj : set) {\r\n        if (obj !\u003d null) {\r\n            hashCode +\u003d obj.hashCode();\r\n        }\r\n    }\r\n    return hashCode;\r\n}",
    "nodes": 8,
    "edges": 9,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2",
      "B3 : If($z0 \u003d\u003d 0) → B4 | else → B7",
      "B4 : If($r2 \u003d\u003d null) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Collection\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  i1 \u003d 0\n  $r1 \u003d r0.iterator()\n}",
      "B3 {\n  $z0 \u003d $r1.hasNext()\n  if ($z0 \u003d\u003d 0) goto B4 else B7\n}",
      "B4 {\n  $r2 \u003d $r1.next()\n  if ($r2 \u003d\u003d null) goto B5 else B6\n}",
      "B5 {\n  $i0 \u003d $r2.hashCode()\n  i1 \u003d i1 + $i0\n}",
      "B6 {\n  goto B3\n}",
      "B7 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B7",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e B3",
      "B7 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.SetUtils",
    "methodName": "hashSet",
    "signature": "java.util.HashSet hashSet(java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d HashSet\n  $r2 \u003d Arrays.asList(r0)\n  new HashSet($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.SetUtils",
    "methodName": "isEqualSet",
    "signature": "boolean isEqualSet(java.util.Collection,java.util.Collection)",
    "visibility": "public",
    "body": "{\r\n    if (set1 \u003d\u003d set2) {\r\n        return true;\r\n    }\r\n    if (set1 \u003d\u003d null || set2 \u003d\u003d null || set1.size() !\u003d set2.size()) {\r\n        return false;\r\n    }\r\n    return set1.containsAll(set2);\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2",
      "B2 : If(r0 \u003d\u003d null) → B3 | else → B5",
      "B3 : If(r1 \u003d\u003d null) → B4 | else → B5",
      "B4 : If($i0 \u003d\u003d $i1) → B5 | else → B6"
    ],
    "blockList": [
      "B0 {\n  Collection\n  Collection\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  if (r0 \u003d\u003d null) goto B3 else B5\n}",
      "B3 {\n  if (r1 \u003d\u003d null) goto B4 else B5\n}",
      "B4 {\n  $i0 \u003d r0.size()\n  $i1 \u003d r1.size()\n  if ($i0 \u003d\u003d $i1) goto B5 else B6\n}",
      "B5 {\n  return\n}",
      "B6 {\n  $z0 \u003d r0.containsAll(r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B2 --\u003e B5",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e [EXIT]",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.SetUtils",
    "methodName": "unmodifiableSet",
    "signature": "java.util.Set unmodifiableSet(java.lang.Object[])",
    "visibility": "public",
    "body": "(source not found)",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Object[]\n  if (r0 !\u003d null) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d SetUtils.hashSet(r0)\n  $r2 \u003d UnmodifiableSet.unmodifiableSet($r1)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator",
    "methodName": "equals",
    "signature": "boolean equals(java.lang.Object)",
    "visibility": "public",
    "body": "{\r\n    if (object \u003d\u003d this) {\r\n        return true;\r\n    }\r\n    return decorated().equals(object);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If(r0 !\u003d r1) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  AbstractIterableGetMapDecorator\n  Object\n  if (r0 !\u003d r1) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r2 \u003d r1.decorated()\n  $z0 \u003d $r2.equals(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "AbstractIterableGetMapDecorator#decorated(...0)",
        "body": "{\r\n    return map;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.splitmap.TransformedSplitMap",
    "methodName": "transformMap",
    "signature": "java.util.Map transformMap(java.util.Map)",
    "visibility": "protected",
    "body": "{\r\n    if (map.isEmpty()) {\r\n        return (Map\u003cK, V\u003e) map;\r\n    }\r\n    final Map\u003cK, V\u003e result \u003d new LinkedMap\u003c\u003e(map.size());\r\n    for (final Map.Entry\u003c? extends J, ? extends U\u003e entry : map.entrySet()) {\r\n        result.put(transformKey(entry.getKey()), transformValue(entry.getValue()));\r\n    }\r\n    return result;\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2",
      "B3 : If($z1 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  TransformedSplitMap\n  Map\n  $z0 \u003d r0.isEmpty()\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d LinkedMap\n  $i0 \u003d r0.size()\n  new LinkedMap($i0)\n  $r2 \u003d r0.entrySet()\n  $r3 \u003d $r2.iterator()\n}",
      "B3 {\n  $z1 \u003d $r3.hasNext()\n  if ($z1 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d $r3.next()\n  r5 \u003d Map$Entry) $r4\n  $r7 \u003d r5.getKey()\n  $r8 \u003d r6.transformKey($r7)\n  $r9 \u003d r5.getValue()\n  $r10 \u003d r6.transformValue($r9)\n  $r1.put($r8, $r10)\n  goto B3\n}",
      "B5 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e B3",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B3",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TransformedSplitMap#transformValue(...1)",
        "body": "{\r\n    return valueTransformer.apply(object);\r\n}"
      },
      {
        "name": "TransformedSplitMap#transformKey(...1)",
        "body": "{\r\n    return keyTransformer.apply(object);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.SplitMapUtils",
    "methodName": "readableMap",
    "signature": "org.apache.commons.collections4.IterableMap readableMap(org.apache.commons.collections4.Get)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(get, \"get\");\r\n    if (get instanceof Map) {\r\n        return get instanceof IterableMap ? (IterableMap\u003cK, V\u003e) get : MapUtils.iterableMap((Map\u003cK, V\u003e) get);\r\n    }\r\n    return new WrappedGet\u003c\u003e(get);\r\n}",
    "nodes": 6,
    "edges": 6,
    "cc": 2,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B5",
      "B1 : If($z1 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Get\n  Objects.requireNonNull(r0, \"get\")\n  $z0 \u003d Map\n  if ($z0 \u003d\u003d 0) goto B1 else B5\n}",
      "B1 {\n  $z1 \u003d IterableMap\n  if ($z1 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r3 \u003d IterableMap) r0\n  goto B4\n}",
      "B3 {\n  $r2 \u003d Map) r0\n  $r3 \u003d MapUtils.iterableMap($r2)\n}",
      "B4 {\n  return\n}",
      "B5 {\n  $r1 \u003d SplitMapUtils$WrappedGet\n  new SplitMapUtils$WrappedGet(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B5",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.SplitMapUtils",
    "methodName": "writableMap",
    "signature": "java.util.Map writableMap(org.apache.commons.collections4.Put)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(put, \"put\");\r\n    if (put instanceof Map) {\r\n        return (Map\u003cK, V\u003e) put;\r\n    }\r\n    return new WrappedPut\u003c\u003e(put);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Put\n  Objects.requireNonNull(r0, \"put\")\n  $z0 \u003d Map\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $r2 \u003d Map) r0\n  return\n}",
      "B2 {\n  $r1 \u003d SplitMapUtils$WrappedPut\n  new SplitMapUtils$WrappedPut(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.TransformerUtils",
    "methodName": "switchMapTransformer",
    "signature": "org.apache.commons.collections4.Transformer switchMapTransformer(java.util.Map)",
    "visibility": "public",
    "body": "{\r\n    Objects.requireNonNull(objectsAndTransformers, \"objectsAndTransformers\");\r\n    final Transformer\u003c? super I, ? extends O\u003e def \u003d objectsAndTransformers.remove(null);\r\n    final int size \u003d objectsAndTransformers.size();\r\n    final Transformer\u003c? super I, ? extends O\u003e[] trs \u003d new Transformer[size];\r\n    final Predicate\u003cI\u003e[] preds \u003d new Predicate[size];\r\n    int i \u003d 0;\r\n    for (final Map.Entry\u003cI, Transformer\u003cI, O\u003e\u003e entry : objectsAndTransformers.entrySet()) {\r\n        preds[i] \u003d EqualPredicate.\u003cI\u003eequalPredicate(entry.getKey());\r\n        trs[i++] \u003d entry.getValue();\r\n    }\r\n    return switchTransformer(preds, trs, def);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B1 : If($z0 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  Map\n  Objects.requireNonNull(r0, \"objectsAndTransformers\")\n  $r1 \u003d r0.remove(null)\n  r2 \u003d Transformer) $r1\n  $i0 \u003d r0.size()\n  r3 \u003d Transformer)[$i0]\n  r4 \u003d Predicate)[$i0]\n  i2 \u003d 0\n  $r5 \u003d r0.entrySet()\n  $r6 \u003d $r5.iterator()\n}",
      "B1 {\n  $z0 \u003d $r6.hasNext()\n  if ($z0 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r8 \u003d $r6.next()\n  r9 \u003d Map$Entry) $r8\n  $r10 \u003d r9.getKey()\n  $r11 \u003d EqualPredicate.equalPredicate($r10)\n  r4[i2] \u003d $r11\n  $i1 \u003d i2\n  i2 \u003d i2 + 1\n  $r12 \u003d r9.getValue()\n  $r13 \u003d Transformer) $r12\n  r3[$i1] \u003d $r13\n  goto B1\n}",
      "B3 {\n  $r7 \u003d TransformerUtils.switchTransformer(r4, r3, r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B1",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "TransformerUtils#switchTransformer(...3)",
        "body": "{\r\n    return SwitchTransformer.switchTransformer(new Predicate[] { predicate }, new Transformer[] { trueTransformer }, falseTransformer);\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
    "methodName": "bitIndex",
    "signature": "int bitIndex(java.lang.String,int,int,java.lang.String,int,int)",
    "visibility": "public",
    "body": "{\r\n    boolean allNull \u003d true;\r\n    if (offsetInBits % LENGTH !\u003d 0 || otherOffsetInBits % LENGTH !\u003d 0 || lengthInBits % LENGTH !\u003d 0 || otherLengthInBits % LENGTH !\u003d 0) {\r\n        throw new IllegalArgumentException(\"The offsets and lengths must be at Character boundaries\");\r\n    }\r\n    final int beginIndex1 \u003d offsetInBits / LENGTH;\r\n    final int beginIndex2 \u003d otherOffsetInBits / LENGTH;\r\n    final int endIndex1 \u003d beginIndex1 + lengthInBits / LENGTH;\r\n    final int endIndex2 \u003d beginIndex2 + otherLengthInBits / LENGTH;\r\n    final int length \u003d Math.max(endIndex1, endIndex2);\r\n    // Look at each character, and if they\u0027re different\r\n    // then figure out which bit makes the difference\r\n    // and return it.\r\n    char k \u003d 0;\r\n    char f \u003d 0;\r\n    for (int i \u003d 0; i \u003c length; i++) {\r\n        final int index1 \u003d beginIndex1 + i;\r\n        final int index2 \u003d beginIndex2 + i;\r\n        if (index1 \u003e\u003d endIndex1) {\r\n            k \u003d 0;\r\n        } else {\r\n            k \u003d key.charAt(index1);\r\n        }\r\n        if (other \u003d\u003d null || index2 \u003e\u003d endIndex2) {\r\n            f \u003d 0;\r\n        } else {\r\n            f \u003d other.charAt(index2);\r\n        }\r\n        if (k !\u003d f) {\r\n            final int x \u003d k ^ f;\r\n            return i * LENGTH + Integer.numberOfLeadingZeros(x) - LENGTH;\r\n        }\r\n        if (k !\u003d 0) {\r\n            allNull \u003d false;\r\n        }\r\n    }\r\n    // All bits are 0\r\n    if (allNull) {\r\n        return NULL_BIT_KEY;\r\n    }\r\n    // Both keys are equal\r\n    return EQUAL_BIT_KEY;\r\n}",
    "nodes": 22,
    "edges": 29,
    "cc": 9,
    "flowSummary": [
      "B0 : If($i1 !\u003d 0) → B1 | else → B4",
      "B1 : If($i3 !\u003d 0) → B2 | else → B4",
      "B2 : If($i5 !\u003d 0) → B3 | else → B4",
      "B3 : If($i7 \u003d\u003d 0) → B4 | else → B5",
      "B6 : If(i22 \u003e\u003d $i14) → B7 | else → B19",
      "B7 : If(i15 \u003c i11) → B8 | else → B9",
      "B10 : If(r1 \u003d\u003d null) → B11 | else → B12",
      "B11 : If(i16 \u003c i13) → B12 | else → B13",
      "B14 : If(i23 \u003d\u003d i24) → B15 | else → B16",
      "B16 : If(i23 \u003d\u003d 0) → B17 | else → B18",
      "B19 : If(z0 \u003d\u003d 0) → B20 | else → B21"
    ],
    "blockList": [
      "B0 {\n  StringKeyAnalyzer\n  String\n  i0 :\u003d @parameter1: int\n  i4 :\u003d @parameter2: int\n  String\n  i2 :\u003d @parameter4: int\n  i6 :\u003d @parameter5: int\n  z0 \u003d 1\n  $i1 \u003d i0 % 16\n  if ($i1 !\u003d 0) goto B1 else B4\n}",
      "B1 {\n  $i3 \u003d i2 % 16\n  if ($i3 !\u003d 0) goto B2 else B4\n}",
      "B2 {\n  $i5 \u003d i4 % 16\n  if ($i5 !\u003d 0) goto B3 else B4\n}",
      "B3 {\n  $i7 \u003d i6 % 16\n  if ($i7 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $r4 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"The offsets and lengths must be at Character boundaries\")\n  throw $r4\n}",
      "B5 {\n  i8 \u003d i0 / 16\n  i9 \u003d i2 / 16\n  $i10 \u003d i4 / 16\n  i11 \u003d i8 + $i10\n  $i12 \u003d i6 / 16\n  i13 \u003d i9 + $i12\n  $i14 \u003d Math.max(i11, i13)\n  i22 \u003d 0\n}",
      "B6 {\n  if (i22 \u003e\u003d $i14) goto B7 else B19\n}",
      "B7 {\n  i15 \u003d i8 + i22\n  i16 \u003d i9 + i22\n  if (i15 \u003c i11) goto B8 else B9\n}",
      "B8 {\n  i23 \u003d 0\n  goto B10\n}",
      "B9 {\n  i23 \u003d r0.charAt(i15)\n}",
      "B10 {\n  if (r1 \u003d\u003d null) goto B11 else B12\n}",
      "B11 {\n  if (i16 \u003c i13) goto B12 else B13\n}",
      "B12 {\n  i24 \u003d 0\n  goto B14\n}",
      "B13 {\n  i24 \u003d r1.charAt(i16)\n}",
      "B14 {\n  if (i23 \u003d\u003d i24) goto B15 else B16\n}",
      "B15 {\n  i17 \u003d i23 ^ i24\n  $i18 \u003d i22 * 16\n  $i19 \u003d Integer.numberOfLeadingZeros(i17)\n  $i20 \u003d $i18 + $i19\n  $i21 \u003d $i20 - 16\n  return\n}",
      "B16 {\n  if (i23 \u003d\u003d 0) goto B17 else B18\n}",
      "B17 {\n  z0 \u003d 0\n}",
      "B18 {\n  i22 \u003d i22 + 1\n  goto B6\n}",
      "B19 {\n  if (z0 \u003d\u003d 0) goto B20 else B21\n}",
      "B20 {\n  $i26 \u003d (int) -1\n  return\n}",
      "B21 {\n  $i28 \u003d (int) -2\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B4",
      "B1 --\u003e B2",
      "B1 --\u003e B4",
      "B2 --\u003e B3",
      "B2 --\u003e B4",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e [EXIT]",
      "B5 --\u003e B6",
      "B6 --\u003e B7",
      "B6 --\u003e B19",
      "B7 --\u003e B8",
      "B7 --\u003e B9",
      "B8 --\u003e B10",
      "B9 --\u003e B10",
      "B10 --\u003e B11",
      "B10 --\u003e B12",
      "B11 --\u003e B12",
      "B11 --\u003e B13",
      "B12 --\u003e B14",
      "B13 --\u003e B14",
      "B14 --\u003e B15",
      "B14 --\u003e B16",
      "B15 --\u003e [EXIT]",
      "B16 --\u003e B17",
      "B16 --\u003e B18",
      "B17 --\u003e B18",
      "B18 --\u003e B6",
      "B19 --\u003e B20",
      "B19 --\u003e B21",
      "B20 --\u003e [EXIT]",
      "B21 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
    "methodName": "isBitSet",
    "signature": "boolean isBitSet(java.lang.String,int,int)",
    "visibility": "public",
    "body": "{\r\n    if (key \u003d\u003d null || bitIndex \u003e\u003d lengthInBits) {\r\n        return false;\r\n    }\r\n    final int index \u003d bitIndex / LENGTH;\r\n    final int bit \u003d bitIndex % LENGTH;\r\n    return (key.charAt(index) \u0026 mask(bit)) !\u003d 0;\r\n}",
    "nodes": 7,
    "edges": 8,
    "cc": 3,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2",
      "B1 : If(i0 \u003c i1) → B2 | else → B3",
      "B3 : If($i6 \u003d\u003d 0) → B4 | else → B5"
    ],
    "blockList": [
      "B0 {\n  StringKeyAnalyzer\n  String\n  i0 :\u003d @parameter1: int\n  i1 :\u003d @parameter2: int\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  if (i0 \u003c i1) goto B2 else B3\n}",
      "B2 {\n  return\n}",
      "B3 {\n  i2 \u003d i0 / 16\n  i3 \u003d i0 % 16\n  $c4 \u003d r0.charAt(i2)\n  $i5 \u003d StringKeyAnalyzer.mask(i3)\n  $i7 \u003d (int) $c4\n  $i6 \u003d $i7 \u0026 $i5\n  if ($i6 \u003d\u003d 0) goto B4 else B5\n}",
      "B4 {\n  $z0 \u003d 1\n  goto B6\n}",
      "B5 {\n  $z0 \u003d 0\n}",
      "B6 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e B4",
      "B3 --\u003e B5",
      "B4 --\u003e B6",
      "B5 --\u003e B6",
      "B6 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": [
      {
        "name": "StringKeyAnalyzer#mask(...1)",
        "body": "{\r\n    return MSB \u003e\u003e\u003e bit;\r\n}"
      }
    ]
  },
  {
    "clazz": "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
    "methodName": "isPrefix",
    "signature": "boolean isPrefix(java.lang.String,int,int,java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    if (offsetInBits % LENGTH !\u003d 0 || lengthInBits % LENGTH !\u003d 0) {\r\n        throw new IllegalArgumentException(\"Cannot determine prefix outside of Character boundaries\");\r\n    }\r\n    final String s1 \u003d prefix.substring(offsetInBits / LENGTH, lengthInBits / LENGTH);\r\n    return key.startsWith(s1);\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If($i1 !\u003d 0) → B1 | else → B2",
      "B1 : If($i3 \u003d\u003d 0) → B2 | else → B3"
    ],
    "blockList": [
      "B0 {\n  StringKeyAnalyzer\n  String\n  i0 :\u003d @parameter1: int\n  i2 :\u003d @parameter2: int\n  String\n  $i1 \u003d i0 % 16\n  if ($i1 !\u003d 0) goto B1 else B2\n}",
      "B1 {\n  $i3 \u003d i2 % 16\n  if ($i3 \u003d\u003d 0) goto B2 else B3\n}",
      "B2 {\n  $r0 \u003d IllegalArgumentException\n  new IllegalArgumentException(\"Cannot determine prefix outside of Character boundaries\")\n  throw $r0\n}",
      "B3 {\n  $i5 \u003d i0 / 16\n  $i4 \u003d i2 / 16\n  $r2 \u003d r1.substring($i5, $i4)\n  $z0 \u003d r3.startsWith($r2)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e [EXIT]",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
    "methodName": "lengthInBits",
    "signature": "int lengthInBits(java.lang.String)",
    "visibility": "public",
    "body": "{\r\n    return key !\u003d null ? key.length() * LENGTH : 0;\r\n}",
    "nodes": 4,
    "edges": 4,
    "cc": 2,
    "flowSummary": [
      "B0 : If(r0 \u003d\u003d null) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  StringKeyAnalyzer\n  String\n  if (r0 \u003d\u003d null) goto B1 else B2\n}",
      "B1 {\n  $i0 \u003d r0.length()\n  $i1 \u003d $i0 * 16\n  goto B3\n}",
      "B2 {\n  $i1 \u003d 0\n}",
      "B3 {\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e B3",
      "B2 --\u003e B3",
      "B3 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  },
  {
    "clazz": "org.apache.commons.collections4.trie.UnmodifiableTrie",
    "methodName": "unmodifiableTrie",
    "signature": "org.apache.commons.collections4.Trie unmodifiableTrie(org.apache.commons.collections4.Trie)",
    "visibility": "public",
    "body": "{\r\n    if (trie instanceof Unmodifiable) {\r\n        // safe to upcast\r\n        @SuppressWarnings(\"unchecked\")\r\n        final Trie\u003cK, V\u003e tmpTrie \u003d (Trie\u003cK, V\u003e) trie;\r\n        return tmpTrie;\r\n    }\r\n    return new UnmodifiableTrie\u003c\u003e(trie);\r\n}",
    "nodes": 3,
    "edges": 2,
    "cc": 1,
    "flowSummary": [
      "B0 : If($z0 \u003d\u003d 0) → B1 | else → B2"
    ],
    "blockList": [
      "B0 {\n  Trie\n  $z0 \u003d Unmodifiable\n  if ($z0 \u003d\u003d 0) goto B1 else B2\n}",
      "B1 {\n  return\n}",
      "B2 {\n  $r1 \u003d UnmodifiableTrie\n  new UnmodifiableTrie(r0)\n  return\n}"
    ],
    "blockEdges": [
      "B0 --\u003e B1",
      "B0 --\u003e B2",
      "B1 --\u003e [EXIT]",
      "B2 --\u003e [EXIT]"
    ],
    "depClasses": [],
    "depMethods": []
  }
]